{"aid": "40272439", "title": "Grace Version Control System", "url": "https://github.com/ScottArbeit/Grace", "domain": "github.com/scottarbeit", "votes": 2, "user": "davedx", "posted_at": "2024-05-06 08:26:04", "comments": 0, "source_title": "GitHub - ScottArbeit/Grace: Grace Version Control System", "source_text": "GitHub - ScottArbeit/Grace: Grace Version Control System\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nScottArbeit / Grace Public\n\n  * Notifications\n  * Fork 12\n  * Star 309\n\nGrace Version Control System\n\n### License\n\nMIT license\n\n309 stars 12 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# ScottArbeit/Grace\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nScottArbeitRemoved option from getGraceIds, sometimes being *too* functional\nisn...Apr 13, 2024a5e71b9 \u00b7 Apr 13, 2024Apr 13, 2024\n\n## History\n\n155 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Upgrade to actions/checkout@v4| Mar 25, 2024  \n  \n### Assets\n\n|\n\n### Assets\n\n| Cleaned up a bunch of stuff around starting up new repos. Getting clo...|\nSep 26, 2023  \n  \n### docs\n\n|\n\n### docs\n\n| Removed option from getGraceIds, sometimes being *too* functional isn...|\nApr 13, 2024  \n  \n### src\n\n|\n\n### src\n\n| Removed option from getGraceIds, sometimes being *too* functional isn...|\nApr 13, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| First attempt at creating OpenAPI docs; still needs work| Jun 25, 2023  \n  \n### LICENSE.md\n\n|\n\n### LICENSE.md\n\n| Initial version| Oct 10, 2022  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 4, 2024  \n  \n### code_of_conduct.md\n\n|\n\n### code_of_conduct.md\n\n| Cosmetic changes to the Code of Conduct.| Feb 16, 2023  \n  \n## Repository files navigation\n\n# Grace Version Control System\n\ngrace (n) -\n\n  1. elegance and beauty of movement, form, or expression\n  2. a pleasing or charming quality\n  3. goodwill or favor\n  4. a sense of propriety and consideration for others ^1\n\n## Welcome to Grace.\n\nGrace is a new, modern, cloud-native version control system.\n\nGrace is easy to use, easy to understand, and consistently fast. And it's\npowerful, ready to handle large repositories and large file sizes.\n\nGrace Server scales up by running on Kubernetes and massive PaaS services from\nlarge cloud providers.\n\nGrace Client runs in the background, making it ambient, faster, and more\nvaluable to your everyday work as a developer.\n\nGrace connects you with others working in your repository, across the globe,\nin real-time, enabling new experiences and new ways of sharing.\n\nto be clear:\n\n> Grace is new \ud83e\uddd1\ud83c\udffc\ud83d\udd2c and alpha-level right now. \ud83d\udd25\ud83e\uddef The parts that are\n> implemented work, but there's much more to do. Grace is not ready to be\n> relied on as a production version control system yet. It should not be used\n> for anything other than its own design, development and testing, and for\n> feedback.^2\n\n### Grace at NDC Oslo 2023\n\nI gave my first conference talk about Grace at NDC Oslo 2023. You can watch it\nhere:\n\n## FAQ\n\nFor a list of (mostly imagined) frequently asked questions, please see the\nFrequently Asked Questions page.\n\n## Design and Motivations\n\nIf you'd like to read about some of the design thinking and motivations behind\nGrace - topics like UX, performance, scalability, monorepos, Git, why F#, and\nmore - please read Design and Motivations.\n\n## Vision\n\n#### A lot of this remains to be built, but here's the vision for Grace v1.0:\n\n### No more fear\n\nStop being afraid of your version control system, and start enjoying it\ninstead.\n\nGrace is easy-to-use, easy-to-understand, and fast, with cool new features\nthat let version control fade into the background while you're working, and\nhelp you remember where you were when you get interrupted.\n\nThere are fewer concepts to understand in Grace, so learning it is easy, and\nunderstanding what it's doing is simple. There's a simple-to-understand\ngrammar, built-in aliases for common gestures, and common-sense defaults.\n\nGrace is powerful source control, minus the fear.\n\n### Yes, it's fast\n\nGreat UX requires great speed. And Grace is fast.\n\nGrace Server is designed to run on fast, cloud-based PaaS services for\nincredible scale and performance. Grace uses virtual actors as networked, in-\nmemory data caches to maximize performance.\n\nGrace CLI adds just milliseconds to the server response time for each command.\n\nGrace's GUI apps will be platform-native, with all of the performance and\nstick-to-your-finger-ness that native apps have always had.\n\nGrace Server can even precompute views and projections that you're likely to\nwant, like diffs and directory contents, and garbage-collect them when they're\nno longer needed.\n\n### grace watch\n\nGrace CLI includes a command - grace watch - that watches your working\ndirectory for changes, and keeps a live connection to Grace Server, connecting\nyou in real-time to your team around the world.\n\ngrace watch takes action for you, whether that's automatically uploading and\ndownloading new file versions, processing notifications from other repo users,\nor running custom actions that you create.\n\nAnd don't worry about having yet-another application running in the\nbackground. grace watch is small and very quiet when nothing is going on.\n\n### Commits... and saves, checkpoints, and promotions\n\nIn Git, commit is an overloaded concept. It can mean:\n\n  * \"I'm partially done\" - local commit after each unit of work is done\n  * \"I'm really done\" - ready for the pull request\n  * \"Merge\" - merges are called commits, even if they're not.\n\nAnd then you get the \"squash\" vs. \"don't squash\" debate. Sigh.\n\nGrace simplifies this by breaking these usages out into their own gestures and\nevents:\n\n  * grace checkpoint - this means \"I'm partially done\", for you to keep track of your own progress\n  * grace commit - this is \"I'm really done\" or \"This version is a candidate for promotion\"; you'd use a commit for a PR\n  * grace promote - in Grace, promotions replace merges; a promotion is how Grace moves code from a child branch to a parent branch\n\nand, introducing:\n\n  * grace save - this is used by grace watch for saving versions of files between checkpoints, because...\n\n### Every save is uploaded, automatically\n\nBy default, grace watch uploads new file versions after every save-on-disk,\nalong with a new snapshot of the entire directory structure of the repo,\nincluding new SHA-256 hashes.\n\nIt happens so quickly you don't even notice it.\n\nAnd it gives you some very cool things, like:\n\n  * file-level undo for as far back as your repository allows,\n  * very fast grace checkpoint, grace commit, and grace promote commands, and,\n  * a Version History view that will let you to flip through your versions, helping you get remember where you were when you get interrupted, and enabling easy, instant restoration of any of your past changes.\n\n### Every change recorded\n\nGrace is event-sourced. That means that everything that changes the state of\nthe repository - every save and commit, every branch name change, every\neverything, is stored as a separate event.\n\nAs they're handled, they're sent to an event processor, which can log them in\nyour choice of format and system. You can see the who / what / where / when of\neverything that happens in your repository, using your favorite event\nanalytics and stream analytics tools, and even set up custom auditing and\nautomation based on those events.^3\n\n### Live, two-way client-server communication\n\nWhen running grace watch, Grace uses SignalR to create a live, two-way\ncommunication channel between client and server.\n\nThis connection allows Grace to do All The Cool Things. Things like connecting\nyou in real-time to everyone else working in your repository. Things like\nauto-rebasing. Things like watching for events in your repository, notifying\nyou when you want to be notified, and running custom local actions if you\nwant.\n\nImagine: there's a promotion to main, your branch gets auto-rebased on those\nlatest changes, and then your local unit test suite gets run automatically so\nyou immediately know if there's a problem.\n\nGrace lets you share your code with team members effortlessly, around the\nworld, for those times when you need another set of eyes on it, or just want\nto show them something cool.\n\nAuto-rebasing keeps you up-to-date and ready to go, because...\n\n### Grace reduces merge conflicts\n\nMerge conflicts suck. Finding out that you have one, when you thought you were\nalready done with your work, is anxiety-inducing, and one of the most\nconfusing parts of the user interface in Git. Grace helps you eliminate\nconflicts by keeping your branch up-to-date, automatically.\n\nWhen your parent branch gets updated, within seconds, grace watch will auto-\nrebase your branch on those changes, so you're always coding against the\nlatest version that you'll have to promote to.\n\nMost-to-almost-all of the time, you don't even notice it. No errors, no\nconflicts.\n\nWhen there is a problem, auto-rebase lets you find out right away.\n\nYou can fix it while you're in flow, and skip the conflict later.\n\n### AI to help resolve conflicts\n\nAnd Grace doesn't just tell you there's a conflict. It uses AI to propose a\nresolution, and lets you accept it with a single click, or request that it\ntries again with a different proposal. You can even tell Grace to run a CI/CD\npipeline on the resolution before proposing it to you.\n\nC'mon, it's 2024. There's got to be some AI in here, right?\n\nLet's shift left on promotion conflicts. Grace can't eliminate all of them,\nbut it will reduce how often they happen, and it will proactively offer AI\nhelp to resolve them, so you don't have to worry about them ever again.\n\n### Personal branches, not forks\n\nWith Grace, there's no need for forking entire repositories just to make\ncontributions. In open-source repos, you'll just create a personal branch\nagainst the repo.\n\nYou'll own your personal branch, and you can make it public or private. Your\nbranch gets auto-rebased like any other branch in the repository, to keep your\nversion up-to-date. When your change is ready you can submit PR's to get your\npersonal branch's version promoted to a parent branch in the repo.\n\nThis is how I expect a large, open-source project in Grace to be: dozens of\ncontributors, each with personal branches, working on a public project that\nremains securely controlled with ACL's. Everyone gets auto-rebased with every\nupdate to main. No networks of forks to manage, no entire copies of the repo.\nJust individuals working on the same repo, securely, together.\n\n### Simplified branching\n\nGrace's branching strategy is called single-step and is designed to help\nreduce conflicts, and to make it easier to work on and promote code to\nshipping branches (like main).\n\nSingle-step branching is both easy-to-use and powerful enough to be all that\nyou need to run your projects.\n\nThere's a separate page that describes it in more detail.\n\n### Grace is built for monorepos\n\nAt GitHub, I've been fortunate to work with customers who run some of the\nlargest monorepos in the world. I've seen the challenges they face, and I've\nseen what they need to build and ship code to production.\n\nGrace is ready for it.\n\nGrace is designed to handle monorepos with ease. It's built to scale, and\ntreats every repository, branch, directory version, and file version as a\nseparate entity in a networked cluster of virtual actors. This design allows\nGrace to scale to handle arbitrarily large repositories, just as easily as it\nhandles small- and medium-sized repositories.\n\nSo far, Grace has been tested on repositories as large as 100,000 files with\n15,000 directories, with excellent performance, and no limits in sight.\n\n### Large, binary files welcome\n\nGrace has no problem storing large files. Really large files. It's been tested\nwith 10GB files - not that I think files that large belong in version control\n- and it should handle even larger files well.\n\nGrace will let you specify how to handle those files, like only downloading\nthem for the Design department, but not for Engineering. It's up to you.\n\n### Native GUI\n\nYeah, I said it.\n\nGrace will have a native GUI app for Windows, Mac, Android, and iOS. (And\nprobably Linux.)\n\nTake Grace with you wherever you go. Merge conflict UI, Version History view,\nrepository browsing, current status and more... all running at full native\nspeed on your devices.\n\n### Web UI\n\nShipping a native app doesn't mean that we don't also need a great web UI.\n\nSometimes the best way to share information is using a URL.\n\nCLI + Web UI + GUI... use Grace the way you want to.\n\n### ACL's, down to the file level\n\nGrace goes way beyond just repository-level permissions. Grace uses OpenID and\nOAuth2 to integrate with your AuthN and AuthZ providers. Want to lock down\nspecific paths in your repository to specific users and groups? With Grace,\nyou'll be able to.\n\n### No stashing\n\nBecause grace watch automatically uploads new file versions after every save,\nand commands like grace switch ensure that everything in your working\ndirectory is preserved before switching to another branch or reference,\nthere's no need to stash anything. Just switch and go.\n\n### Branch-level control of reference types\n\nPlan your branching strategy in greater detail than ever before. Grace lets\nyou decide which kinds of references are enabled in each branch.\n\nFor instance, main might enable promotions and tags, and disable commits,\ncheckpoints, and saves.\n\nOrdinary user branches might disable promotions, but enable everything else.\n\nIt's up to you.\n\n### Ephemeral checkpoints and saves\n\nCheckpoints and saves are features to help you be more productive, but we\ndon't need to keep them forever. Grace allows you to control how long they're\nkept are kept in each repository. 72 hours? One week? A month? Or maybe just\n\"keep the last 1,000 saves\". It's up to you.\n\n### Delete versions if you need to\n\nSometimes you need to delete a version, whether it's because a secret or\npassword was accidentally checked in, or because of some other security issue.\nWith the right permissions, you'll be able to remove bad versions of your code\n- with a permanent reference that says that you did.\n\n### Pre-rendered diffs\n\nEvery time you run grace promote, grace commit, or grace checkpoint, and every\ntime grace watch uploads a new version of a file, Grace Server can optionally\npre-render diffs for you to see, either in the CLI or in the Version History\nview. This makes seeing your ongoing changes in the Version History view\ninstantaneous.\n\nThey're automatically aged out and deleted after a configurable length of\ntime, so they don't just sit there wasting resources forever.\n\n### Optional file locking\n\nIf your repository includes large binary files, like edited video, graphics,\nor game artifacts, you need to make sure that only one person at a time edits\neach file. Grace will support optional file locking at the directory level to\nensure that you don't have to re-do work.\n\n(Don't worry... if you don't need file locking, you don't have to turn it on.)\n\n### A simple Web API\n\nGrace Server is a modern Web API application. Like Grace's CLI, the Web API is\neasy to use, and easy to understand.\n\nGrace ships with a .NET SDK, which is simply a projection of the Web API into\n.NET (and which Grace itself uses). SDK's for other platforms are welcomed as\ncommunity contributions.\n\n### SHA-256 hashes\n\nGrace uses SHA-256 hashes to verify that the files you uploaded, and the\ndirectory versions that went with them, are exactly the ones that get\nretrieved by clients. Grace will include a command to verify the SHA-256\nhashes of all downloaded files and directory versions.\n\n### Local file cache\n\nGrace repositories have a local cache of file versions that have been uploaded\nand downloaded. When running grace watch, Grace can download new file versions\nfrom multiple branches in the background so your grace switch commands run\nnearly instantly.\n\nThe local file cache is pruned regularly.\n\n### 2048 characters\n\nWhen you're running grace promote/commit/checkpoint/save/tag -m <some\nmessage>, the <some message> part can be up to 2048 characters.\n\n50 characters... I don't think so. Feel free to share details. The person you\nhelp might be future you.\n\n### Import from Git / Export to Git\n\nYes, we know... it's hard to let go. Grace will perform an initial import from\na Git repo, and will export to a Git repo.^4\n\n### Operations (if you're thinking about hosting your own server)\n\nGrace Server is a modern, cloud-native Web API application. It will ship in a\ncontainer on Docker Hub. (Of course.)\n\nGrace Server is designed to be easy to deploy and operate. It runs on your\nchoice of dozens of cloud-native databases, components and services, using\nDapr, making it flexible and inherently scalable. Grace Server is stateless\nand scales up and down well using basic KEDA counters.\n\n## Project structure\n\nGrace is written primarily in F#, and is organized into nine .NET projects.\n\n  * Grace.CLI is the command-line interface for Grace.\n  * Grace.Server is an ASP.NET Core project that defines the Web API for Grace.\n  * Grace.SDK is a .NET class library that is a platform-specific projection of the Web API; it is used by Grace.CLI and wraps the HTTPS calls to Grace Server.\n  * Grace.Actors holds the code for the Actors in the system; it is used exclusively by Grace.Server.\n  * Grace.Shared is where all common code goes; it is used by all of the other Grace.* projects.\n  * (future) Grace.Avalonia will contain a native GUI for Grace for Windows, Android, MacOS, and iOS (and hopefully Linux).\n  * (future) Grace.Blazor will be an ASP.NET Core project containing a web UI for Grace.\n  * CosmosJsonSerializer is a custom JSON serializer class, used when deploying Grace with Azure Cosmos DB.\n\nAn additional project, Grace.Load, is an experiment to create a load test for\nGrace.Server.\n\n### Project diagram\n\n> Solid lines indicate a .NET project reference. Dotted lines indicate network\n> requests.\n    \n    \n    flowchart LR subgraph Server Grace.Server-->Grace.Actors Grace.Server-->CosmosJsonSerializer end subgraph Clients Grace.CLI-->Grace.SDK Grace.SDK-.->|HTTPS|Grace.Server Avalonia[\"(future) Grace.Avalonia\"]-->|\"(not yet started)\"|Grace.SDK Blazor[\"(future) Grace.Blazor\"]-->|\"(not yet started)\"|Grace.SDK end subgraph Utilities Grace.Load-->Grace.SDK end subgraph Tests Grace.Server.Tests-->Grace.Server end Grace.Actors-->Grace.Shared Grace.Server-->Grace.Shared Grace.CLI-->Grace.Shared Grace.SDK-->Grace.Shared Avalonia[\"(future) Grace.Avalonia\"]-->|\"(not yet started)\"|Grace.Shared Blazor[\"(future) Grace.Blazor\"]-->|\"(not yet started)\"|Grace.Shared\n\n## Code of Conduct\n\nOur Code of Conduct is available here. The tl;dr is:\n\n> The name of this project is Grace.\n>\n> Be graceful in your interactions.\n>\n> Give grace to everyone participating with us.\n>\n> Create something together that embodies grace in its design and form.\n>\n> When in doubt, remember the name of the project.\n\n## Deployment\n\nGrace Server will be shipped as a container, which will be made available on\nDocker Hub. Dapr's sidecar and actor placement processes are shipped as\ncontainers and are available on Docker Hub.\n\nWe intend to provide a Docker Compose template, as well as Kubernetes\nconfiguration for deployment, allowing for deployment to any major public\ncloud provider, as well as on-premises hardware.\n\n## Footnotes\n\n  1. Definition excerpted from https://www.thefreedictionary.com/grace. \u21a9\n\n  2. Grace currently uses Git for its source control, and runs Grace in the same directory as a means of testing. Officially self-hosting Grace's source code on Grace will, of course, happen when it's safe to. \u21a9\n\n  3. One thing I'd like to do with the event log as a stream: detect invalid sequences and frequencies of events in Grace that would indicate bugs or attacks. \u21a9\n\n  4. Grace will export the latest state of each branch into a git bundle file. Exporting an entire Grace repository, including history, to a Git repository probably won't be supported, but maybe someone else will write it. (There are, no doubt, a lot of edge cases to be found the hard way in that translation, and it's a very low priority item for me.) Live two-way synchronization between Grace and Git is a non-goal, for the same reason. \u21a9\n\n## About\n\nGrace Version Control System\n\n### Topics\n\nfsharp cloud-native version-control-system dapr\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Code of conduct\n\nCode of conduct\n\nActivity\n\n### Stars\n\n309 stars\n\n### Watchers\n\n11 watching\n\n### Forks\n\n12 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Languages\n\n  * F# 95.8%\n  * C# 3.6%\n  * Other 0.6%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
