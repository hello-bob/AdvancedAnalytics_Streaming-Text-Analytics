{"aid": "40156330", "title": "A useful front-end confetti animation library", "url": "https://github.com/catdad/canvas-confetti", "domain": "github.com/catdad", "votes": 12, "user": "blini2077", "posted_at": "2024-04-25 11:53:04", "comments": 0, "source_title": "GitHub - catdad/canvas-confetti: \ud83c\udf89 performant confetti animation in the browser", "source_text": "GitHub - catdad/canvas-confetti: \ud83c\udf89 performant confetti animation in the\nbrowser\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ncatdad / canvas-confetti Public\n\n  * Notifications\n  * Fork 298\n  * Star 7.2k\n\n\ud83c\udf89 performant confetti animation in the browser\n\ncatdad.github.io/canvas-confetti/\n\n### License\n\nISC license\n\n7.2k stars 298 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# catdad/canvas-confetti\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n4 Branches\n\n35 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ncatdadMerge pull request #218 from catdad/cleanup-scale-testsDec 5,\n20234c1c86d \u00b7 Dec 5, 2023Dec 5, 2023\n\n## History\n\n648 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| upload artifacts on failed builds... that's really when we need them| Oct\n16, 2023  \n  \n### bin\n\n|\n\n### bin\n\n| printing urls in green| Feb 10, 2018  \n  \n### build\n\n|\n\n### build\n\n| logging all network interfaces, for convenience| Oct 6, 2023  \n  \n### fixtures\n\n|\n\n### fixtures\n\n| cleanup| Nov 22, 2023  \n  \n### src\n\n|\n\n### src\n\n| putting twemoji at the end (it appears to be unreliable... should it ...|\nNov 21, 2023  \n  \n### test\n\n|\n\n### test\n\n| allowing pixel values to be off by 1% due to rendering differences on...|\nDec 3, 2023  \n  \n### .brackets.json\n\n|\n\n### .brackets.json\n\n| adding mjs files to brackets as javascript| Nov 20, 2019  \n  \n### .editorconfig\n\n|\n\n### .editorconfig\n\n| adding dotfiles| Jan 26, 2018  \n  \n### .eslintrc.yml\n\n|\n\n### .eslintrc.yml\n\n| consistently applying eslint env directives| Feb 4, 2018  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| adding dotfiles| Jan 26, 2018  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| cleanup| Feb 4, 2018  \n  \n### .npmignore\n\n|\n\n### .npmignore\n\n| ignoring all dotfiles and dotfolders| Sep 23, 2020  \n  \n### .npmrc\n\n|\n\n### .npmrc\n\n| no need for package lock in this project| Oct 3, 2019  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| adding a license file| Feb 23, 2020  \n  \n### README.md\n\n|\n\n### README.md\n\n| bumping version to 1.9.2| Nov 25, 2023  \n  \n### index.html\n\n|\n\n### index.html\n\n| Update index.html| Oct 16, 2023  \n  \n### package.json\n\n|\n\n### package.json\n\n| bumping version to 1.9.2| Nov 25, 2023  \n  \n## Repository files navigation\n\n## Demo\n\ncatdad.github.io/canvas-confetti\n\n## Install\n\nYou can install this module as a component from NPM:\n\n    \n    \n    npm install --save canvas-confetti\n\nYou can then require('canvas-confetti'); to use it in your project build.\nNote: this is a client component, and will not run in Node. You will need to\nbuild your project with something like webpack in order to use this.\n\nYou can also include this library in your HTML page directly from a CDN:\n\n    \n    \n    <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.2/dist/confetti.browser.min.js\"></script>\n\nNote: you should use the latest version at the time that you include your\nproject. You can see all versions on the releases page.\n\n## Reduced Motion\n\nThank you for joining me in this very important message about motion on your\nwebsite. See, not everyone likes it, and some actually prefer no motion. They\nhave ways to tell us about it and we should listen. While I don't want to go\nas far as tell you not to have confetti on your page just yet, I do want to\nmake it easy for you to respect what your users want. There is a\ndisableForReducedMotion option you can use so that users that have trouble\nwith chaotic animations don't need to struggle on your website. This is\ndisabled by default, but I am considering changing that in a future major\nrelease. If you have strong feelings about this, please let me know. For now,\nplease confetti responsibly.\n\n## API\n\nWhen installed from npm, this library can be required as a client component in\nyour project build. When using the CDN version, it is exposed as a confetti\nfunction on window.\n\n### confetti([options {Object}]) \u2192 Promise|null\n\nconfetti takes a single optional object. When window.Promise is available, it\nwill return a Promise to let you know when it is done. When promises are not\navailable (like in IE), it will return null. You can polyfill promises using\nany of the popular polyfills. You can also provide a promise implementation to\nconfetti through:\n\n    \n    \n    const MyPromise = require('some-promise-lib'); const confetti = require('canvas-confetti'); confetti.Promise = MyPromise;\n\nIf you call confetti multiple times before it is done, it will return the same\npromise every time. Internally, the same canvas element will be reused,\ncontinuing the existing animation with the new confetti added. The promise\nreturned by each call to confetti will resolve once all animations are done.\n\n#### options\n\nThe confetti parameter is a single optional options object, which has the\nfollowing properties:\n\n  * particleCount Integer (default: 50): The number of confetti to launch. More is always fun... but be cool, there's a lot of math involved.\n  * angle Number (default: 90): The angle in which to launch the confetti, in degrees. 90 is straight up.\n  * spread Number (default: 45): How far off center the confetti can go, in degrees. 45 means the confetti will launch at the defined angle plus or minus 22.5 degrees.\n  * startVelocity Number (default: 45): How fast the confetti will start going, in pixels.\n  * decay Number (default: 0.9): How quickly the confetti will lose speed. Keep this number between 0 and 1, otherwise the confetti will gain speed. Better yet, just never change it.\n  * gravity Number (default: 1): How quickly the particles are pulled down. 1 is full gravity, 0.5 is half gravity, etc., but there are no limits. You can even make particles go up if you'd like.\n  * drift Number (default: 0): How much to the side the confetti will drift. The default is 0, meaning that they will fall straight down. Use a negative number for left and positive number for right.\n  * flat Boolean (default: false): Optionally turns off the tilt and wobble that three dimensional confetti would have in the real world. Yeah, they look a little sad, but y'all asked for them, so don't blame me.\n  * ticks Number (default: 200): How many times the confetti will move. This is abstract... but play with it if the confetti disappear too quickly for you.\n  * origin Object: Where to start firing confetti from. Feel free to launch off-screen if you'd like.\n\n    * origin.x Number (default: 0.5): The x position on the page, with 0 being the left edge and 1 being the right edge.\n    * origin.y Number (default: 0.5): The y position on the page, with 0 being the top edge and 1 being the bottom edge.\n  * colors Array<String>: An array of color strings, in the HEX format... you know, like #bada55.\n  * shapes Array<String|Shape>: An array of shapes for the confetti. There are 3 built-in values of square, circle, and star. The default is to use both squares and circles in an even mix. To use a single shape, you can provide just one shape in the array, such as ['star']. You can also change the mix by providing a value such as ['circle', 'circle', 'square'] to use two third circles and one third squares. You can also create your own shapes using the confetti.shapeFromPath or confetti.shapeFromText helper methods.\n  * scalar Number (default: 1): Scale factor for each confetti particle. Use decimals to make the confetti smaller. Go on, try teeny tiny confetti, they are adorable!\n  * zIndex Integer (default: 100): The confetti should be on top, after all. But if you have a crazy high page, you can set it even higher.\n  * disableForReducedMotion Boolean (default: false): Disables confetti entirely for users that prefer reduced motion. The confetti() promise will resolve immediately in this case.\n\n### confetti.shapeFromPath({ path, matrix? }) \u2192 Shape\n\nThis helper method lets you create a custom confetti shape using an SVG Path\nstring. Any valid path should work, though there are a few caveats:\n\n  * All paths will be filed. If you were hoping to have a stroke path, that is not implemented.\n  * Paths are limited to a single color, so keep that in mind.\n  * All paths need a valid transform matrix. You can pass one in, or you can leave it out and use this helper to calculate the matrix for you. Do note that calculating the matrix is a bit expensive, so it is best to calculate it once for each path in development and cache that value, so that production confetti remain fast. The matrix is deterministic and will always be the same given the same path value.\n  * For best forward compatibility, it is best to re-generate and re-cache the matrix if you update the canvas-confetti library.\n  * Support for path-based confetti is limited to browsers which support Path2D, which should really be all major browser at this point.\n\nThis method will return a Shape -- it's really just a plain object with some\nproperties, but shhh... we'll pretend it's a shape. Pass this Shape object\ninto the shapes array directly.\n\nAs an example, here's how you might do a triangle confetti:\n\n    \n    \n    var triangle = confetti.shapeFromPath({ path: 'M0 10 L5 0 L10 10z' }); confetti({ shapes: [triangle] });\n\n### confetti.shapeFromText({ text, scalar?, color?, fontFamily? }) \u2192 Shape\n\nThis is the highly anticipated feature to render emoji confetti! Use any\nstandard unicode emoji. Or other text, but... maybe don't use other text.\n\nWhile any text should work, there are some caveats:\n\n  * For flailing confetti, something that is mostly square works best. That is, a single character, especially an emoji.\n  * Rather than rendering text every time a confetti is drawn, this helper actually rasterizes the text. Therefore, it does not scale well after it is created. If you plan to use the scalar value to scale your confetti, use the same scalar value here when creating the shape. This will make sure the confetti are not blurry.\n\nThe options for this method are:\n\n  * options Object:\n\n    * text String: the text to be rendered as a confetti. If you can't make up your mind, I suggest \"\ud83d\udc08\".\n    * scalar Number, optional, default: 1: a scale value relative to the default size. It matches the scalar value in the confetti options.\n    * color String, optional, default: #000000: the color used to render the text.\n    * fontFamily String, optional, default: native emoji: the font family name to use when rendering the text. The default follows best practices for rendring the native OS emoji of the device, falling back to sans-serif. If using a web font, make sure this font is loaded before rendering your confetti.\n\n    \n    \n    var scalar = 2; var pineapple = confetti.shapeFromText({ text: '\ud83c\udf4d', scalar }); confetti({ shapes: [pineapple], scalar });\n\n### confetti.create(canvas, [globalOptions]) \u2192 function\n\nThis method creates an instance of the confetti function that uses a custom\ncanvas. This is useful if you want to limit the area on your page in which\nconfetti appear. By default, this method will not modify the canvas in any way\n(other than drawing to it).\n\nCanvas can be misunderstood a bit though, so let me explain why you might want\nto let the module modify the canvas just a bit. By default, a canvas is a\nrelatively small image -- somewhere around 300x150, depending on the browser.\nWhen you resize it using CSS, this sets the display size of the canvas, but\nnot the image being represented on that canvas. Think of it as loading a\n300x150 jpeg image in an img tag and then setting the CSS for that tag to\n1500x600 -- your image will end up stretched and blurry. In the case of a\ncanvas, you need to also set the width and height of the canvas image itself.\nIf you don't want to do that, you can allow confetti to set it for you.\n\nNote also that you should persist the custom instance and avoid initializing\nan instance of confetti with the same canvas element more than once.\n\nThe following global options are available:\n\n  * resize Boolean (default: false): Whether to allow setting the canvas image size, as well as keep it correctly sized if the window changes size (e.g. resizing the window, rotating a mobile device, etc.). By default, the canvas size will not be modified.\n  * useWorker Boolean (default: false): Whether to use an asynchronous web worker to render the confetti animation, whenever possible. This is turned off by default, meaning that the animation will always execute on the main thread. If turned on and the browser supports it, the animation will execute off of the main thread so that it is not blocking any other work your page needs to do. Using this option will also modify the canvas, but more on that directly below -- do read it. If it is not supported by the browser, this value will be ignored.\n  * disableForReducedMotion Boolean (default: false): Disables confetti entirely for users that prefer reduced motion. When set to true, use of this confetti instance will always respect a user's request for reduced motion and disable confetti for them.\n\nImportant: If you use useWorker: true, I own your canvas now. It's mine now\nand I can do whatever I want with it (don't worry... I'll just put confetti\ninside it, I promise). You must not try to use the canvas in any way (other\nthan I guess removing it from the DOM), as it will throw an error. When using\nworkers for rendering, control of the canvas must be transferred to the web\nworker, preventing any usage of that canvas on the main thread. If you must\nmanipulate the canvas in any way, do not use this option.\n\n    \n    \n    var myCanvas = document.createElement('canvas'); document.body.appendChild(myCanvas); var myConfetti = confetti.create(myCanvas, { resize: true, useWorker: true }); myConfetti({ particleCount: 100, spread: 160 // any other options from the global // confetti function });\n\n### confetti.reset()\n\nStops the animation and clears all confetti, as well as immediately resolves\nany outstanding promises. In the case of a separate confetti instance created\nwith confetti.create, that instance will have its own reset method.\n\n    \n    \n    confetti(); setTimeout(() => { confetti.reset(); }, 100);\n    \n    \n    var myCanvas = document.createElement('canvas'); document.body.appendChild(myCanvas); var myConfetti = confetti.create(myCanvas, { resize: true }); myConfetti(); setTimeout(() => { myConfetti.reset(); }, 100);\n\n## Examples\n\nLaunch some confetti the default way:\n\n    \n    \n    confetti();\n\nLaunch a bunch of confetti:\n\n    \n    \n    confetti({ particleCount: 150 });\n\nLaunch some confetti really wide:\n\n    \n    \n    confetti({ spread: 180 });\n\nGet creative. Launch a small poof of confetti from a random part of the page:\n\n    \n    \n    confetti({ particleCount: 100, startVelocity: 30, spread: 360, origin: { x: Math.random(), // since they fall down, start a bit higher than random y: Math.random() - 0.2 } });\n\nI said creative... we can do better. Since it doesn't matter how many times we\ncall confetti (just the total number of confetti in the air), we can do some\nfun things, like continuously launch more and more confetti for 30 seconds,\nfrom multiple directions:\n\n    \n    \n    // do this for 30 seconds var duration = 30 * 1000; var end = Date.now() + duration; (function frame() { // launch a few confetti from the left edge confetti({ particleCount: 7, angle: 60, spread: 55, origin: { x: 0 } }); // and launch a few from the right edge confetti({ particleCount: 7, angle: 120, spread: 55, origin: { x: 1 } }); // keep going until we are out of time if (Date.now() < end) { requestAnimationFrame(frame); } }());\n\n## About\n\n\ud83c\udf89 performant confetti animation in the browser\n\ncatdad.github.io/canvas-confetti/\n\n### Topics\n\ncanvas animation particles confetti burst snow hacktoberfest fireworks\njsdelivr canvas-confetti\n\n### Resources\n\nReadme\n\n### License\n\nISC license\n\nActivity\n\n### Stars\n\n7.2k stars\n\n### Watchers\n\n28 watching\n\n### Forks\n\n298 forks\n\nReport repository\n\n## Releases 32\n\n1.9.2 Latest\n\nNov 25, 2023\n\n\\+ 31 releases\n\n## Sponsor this project\n\n  * catdad Kiril Vatev\n\n  * https://www.paypal.me/kirilvatev\n  * https://venmo.com/Kiril-Vatev\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Used by 33.1k\n\n\\+ 33,123\n\n## Contributors 17\n\n\\+ 3 contributors\n\n## Languages\n\n  * JavaScript 62.0%\n  * HTML 37.5%\n  * Shell 0.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
