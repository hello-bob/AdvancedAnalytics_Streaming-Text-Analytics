{"aid": "40179398", "title": "Self-hosting forms, the sane way", "url": "https://karelvo.com/blog/selfhosting-forms-the-sane-way", "domain": "karelvo.com", "votes": 20, "user": "xz18r", "posted_at": "2024-04-27 12:20:29", "comments": 13, "source_title": "karelvo | Self-hosting forms, the sane way", "source_text": "karelvo | Self-hosting forms, the sane way\n\nkarelvo\n\n  * projects\n  * about\n  * contact\n  * rss\n\n# Self-hosting forms, the sane way\n\npublished on 2024-04-26\n\n  * DIY vs form services\n  * My solution: the middle ground\n    * Form gets filled\n    * n8n processes\n    * NocoDB collects\n    * Email notifies\n\nI run a few (very) small websites, nothing serious: they\u2019re not businesses,\nthey\u2019re hobbies. There is no risk involved if they would go down, apart from\nmaybe disappointing a few hundred people that found a link to it on search\nengines. Because working on them is sometimes a fun challenge, but at the same\ntime I am not a developer/sysadmin, there are two rules I follow:\n\n  * Try to do as much as you can by yourself, and seek out the challenges.\n  * ...but seek alternatives when it gets too frustrating/scary. It\u2019s a hobby, after all - no stress.\n\nSome examples of how the combo of those two things translates to my setup:\n\n  * I run all my sites by myself on a Linux server, BUT I rent the server (opening ports on my home network gives me more anxiety than I need).\n  * I don\u2019t use a CMS or \u201canything with a GUI\u201d, BUT I do use static site builders (I can\u2019t be bothered with raw-dogging plain HTML, CSS, and JS). My favorite is Astro.\n  * I host a few services, such as site analytics, myself so that any data passes through as few hands as possible, BUT I run Coolify to deploy my sites (and lately, manage my server).\n\nIn other words: DIY, unless there\u2019s a great FOSS tool to help me out. The\nexcuse I give myself is \u201cthis is more hacky than 95% of people doing the same\nthing, anyway\u201d.\n\n## DIY vs form services\n\nOn one of my sites, I needed to install a form with file upload capability.\nAfter some research, I found a few solutions to solve my need:\n\n  * Embedding a form that you build elsewhere. Examples are Tally (which is a really inspiring company, by the way), Typeform, and Jotform. I don\u2019t like the idea of embedding as it doesn\u2019t give me control over what\u2019s on my site.\n  * Form backends, basically databases where you can send your form data to. Examples are Formspree, FormSubmit, getform, and Submit JSON. If my use-case was more professional, I\u2019d choose this.\n  * DIY-ing it with PHP scripts, a.k.a. the old school way. Easy but relatively insecure and prone to breaking (for someone at my skill level).\n\nI didn\u2019t like what I found: I wanted something\n\n  * ...where I didn\u2019t need to pay for a service (or be crippled in forms/submits/styling if I didn\u2019t), meaning options 1 and 2 are off the table.\n  * ...that didn\u2019t let other services process the form data, so again 1 and 2 weren\u2019t an option.\n  * ...that was secure and wouldn\u2019t give me a headache, so number 3 was off as well.\n\n## My solution: the middle ground\n\nIn the end, I decided to build something myself that adhered to the above\npoints as much as possible. In summary, it looks like this:\n\nOverview diagram of self-hosted form setup\n\nMost people reading this will understand this chart without much further\nexplanation. Before I dive into the details, here are the pros and cons of\nthis setup:\n\n  * Pro - I can do whatever the hell I want with my form: have infinite submissions, fields, and style it however I desire. The only bottleneck is the capacity of my server.\n  * Pro - troubleshooting is a breeze; n8n as \u201ccentral processor\u201d is a gem to work with.\n  * Pro/con - the data only passes the user\u2019s browser, my server and (unfortunately) an email server. If you want to be super strict, you could only send it to a database you host yourself - or host the email server yourself, which is notoriously a pain in the ass.\n  * Con - your server is a single point of failure. If it goes down, you lose everything apart from historical data you\u2019ve received via email. Solution: host n8n on a different server, or do continuous offsite backups (which you should do anyway).\n\nHere\u2019s the step by step process. Yes, it\u2019s really this simple:\n\n### Form gets filled\n\n  * Your website hosts a form that looks like this:\n\n    \n    \n    <form action=\"${webhook}\" method=\"post\"> <label for=\"name\">Name</label> <input name=\"name\" type=\"text\"> <button data-umami-event=\"buttonname\" type=\"submit\">Submit</button> </form>\n    \n    \n    <form action=\"${webhook}\" method=\"post\" > <label for=\"name\">Name</label> <input name=\"name\" type=\"text\"> <button data-umami-event=\"buttonname\" type=\"submit\" > Submit </button> </form>\n\n  * User fills it out, presses the \u201cSubmit\u201d button and 2 things happen:\n    * The form data is sent to the n8n webhook you declared in your form.\n    * (Optional) The button click event is sent to your website analytics warehouse, Umami and event name buttonname in the example above.\n\n### n8n processes\n\n  * n8n is a workflow automation tool (like Zapier) that you can host yourself.\n  * n8n receives the form data via the webhook.\n  * (Optional but recommended) Add a Respond to Webhook step in which you define which page the form should redirect after submitting.\n  * (Optional) Add data cleanup steps to format the data you received in whichever way you need.\n  * Add 2 subsequent, independent steps:\n    * Send the form data to NocoDB (or a database of your choice) with its built-in NocoDB node.\n    * Send a notification of any kind to yourself - I do this via email with its built-in email node.\n\n### NocoDB collects\n\n  * NocoDB is a no-code database (like Airtable) that you can host yourself.\n  * If you create a table with columns table correspond to the form fields, you can select \u201cAuto-Map Input Data to Columns\u201d in the NocoDB step in n8n. Works like a charm! If not, or if you want more extensive data like time, IP address, etc., you can define it for each column.\n  * Use NocoDB as your warehouse for all forms ever submitted.\n\n### Email notifies\n\n  * I find it crucial to get notified of a form fill, because form fills are relatively rare on my sites. If you\u2019re a business that gets multiple form fills a day, just syncing it to a CRM that gets checked daily if a more obvious choice, of course.\n  * n8n has integrations with many services that can notify you (think of proprietary services Discord or Slack, but also things like Pushbullet or ntfy.sh). I chose email, however.\n  * My email is hosted via Fastmail, which seamlessly and securely integrates with third-party applications via its app passwords. Sending the email happens via SMTP.\n  * I send an email containing the form data to myself via an alias.\n\nAnd there you have it: one way to host forms yourself, without losing your\nmind.\n\nprivacy, etc. karelvo\n\n", "frontpage": true}
