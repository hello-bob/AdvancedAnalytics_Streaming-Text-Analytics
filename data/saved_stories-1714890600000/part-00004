{"aid": "40259589", "title": "Primate 0.31: new hot reload, projections and sorting in stores, new router", "url": "https://primatejs.com/blog/release-031", "domain": "primatejs.com", "votes": 2, "user": "sarumake", "posted_at": "2024-05-04 19:00:52", "comments": 0, "source_title": "Primate - Release 0.31: new hot reload, projections and sorting in stores, new router", "source_text": "Primate - Release 0.31: new hot reload, projections and sorting in stores, new\nrouter\n\n  * Guide\n  * Modules\n  * Blog\n\n# Release 0.31: new hot reload, projections and sorting in stores, new router\n\n04 May 2024 by terrablue\n\nToday we're announcing the availability of the Primate 0.31 preview release.\nThis release switches to fast hot reload using esbuild, adds projections and\nsorting to stores, and uses rcompat's new router, adding support for optional\nand rest path parameters.\n\nIf you're new to Primate, we recommend reading the Getting started page to get\nan idea of it.\n\n## Fast hot reload\n\nPrimate now uses esbuild as its built-in bundler via rcompat. This bundler\nutilizes esbuild's fast hot reloading, replacing the previous mechanism which\nused Node's file watching and was neither reliable nor fast.\n\n## Support for projections / sorting in stores\n\nPrimate stores have gained additional capabilities in this release.\n\n### Projections\n\nIt is now possible to add a projection to Store#find using a second parameter.\n\nroutes/user-names.js\n\n    \n    \n    export default { get({ store: { User } }) { return User.find({}, [\"name\"]); }, };\n\nThis will show a JSON array of objects from the user collection with only the\nname field.\n\n### Sorting\n\nIt is now possible to influence the sorting order used in Store#find using a\nthird parameter.\n\nroutes/user-names-sorted.js\n\n    \n    \n    export default { get({ store: { User } }) { return User.find({}, [\"name\"], { sort: { name: \"asc\" } }); }, };\n\nThis will show a JSON array of objects from the user collection with only the\nname field, sorted by name ascendingly.\n\n## New filesystem router\n\nThis release now supports the whole breadth of type parameters similar to Next\nor Svelte using rcompat's new filesystem router.\n\n### Optional path parameters\n\nOptional path parameters indicate a route which will be both matched with a\npath parameter and without it.\n\nDouble brackets in route filenames, as in user/[[action]].js, are equivalent\nto having two identical files, user.js and user/[action].js.\n\nOptional parameters may only appear at the end of a route path and you can\ncombine them with runtime types, like non-optional path parameters.\n\n### Rest path parameters\n\nRest path parameters are used to match subpaths at the end of a route path.\n\nBrackets starting with three dots, as in user/[...action_tree].js, indicate a\nrest parameter. Unlike normal parameters, rest parameters match / as well and\ncan be thus be used to construct subpaths. For example, in\nhttps://github.com/primatejs/primate/tree/master/docs/guide, docs/guide may be\nconsidered a subpath.\n\nRest parameters may only appear at the end of a route path. They may also be\noptional, that is, matching with and without the parameter, by using two\nbrackets.\n\n## Quality of life improvements\n\n### HTMX integration improvements\n\n#### Passing in props\n\nThe HTMX handler now supports passing in props, in JavaScript template string\nstyle. Consider the following route.\n\nroutes/htmx.js\n\n    \n    \n    import { view } from \"primate\"; const posts = [{ id: 1, title: \"First post\", }]; export default { get() { return view(\"post-index.htmx\", { posts }); }, };\n\nAnd the following HTMX component.\n\ncomponents/post-index.htmx\n\n    \n    \n    <h1>All posts</h1> ${posts.map(post => ` <h2> <a hx-get=\"/post/${post.id}\" href=\"/post/${post.id}\"> ${post.title} </a> </h2> `).join(\"\")}\n\nWith that combination, a GET call to /htmx yields an HTMX-driven page with the\nposts handed in from the route.\n\nThis prop support extends to Primate's built-in html handler in the same\nfashion.\n\n#### Partial rendering\n\nPrimate's view handler generally allows passing in { partial: true } as part\nof the third options parameter, which indicates the view component file to be\nrendered should not be embedded within the default app.html but delivered in\nbare form. This is great in case you use JavaScript to replace just a part of\nthe page.\n\nWhen using HTMX's DOM manipulation verbs (e.g. hx-get, hx-post, etc.), HTMX\nsends an hx-request header with the request. The view handler now, in the case\nof HTMX, checks whether this handler was sent along the request, and in such a\ncase renders the component in partial mode.\n\n### RequestFacade#pass\n\nIf you're using Primate as a reverse proxy, you may now use the pass function\non the request facade to pass a request wholesale to another backend.\n\nYou can do this generally in the handle hook.\n\nprimate.config.js\n\n    \n    \n    export default { modules: { name: \"proxy\", handle(request, next) { // pass any requests whose path begins with /admin to another application // listening at port 6363 if (request.url.pathname.beginsWith(\"admin\")) { return request.pass(\"http://localhost:6363\"); } // continue execution in this app otherwise return next(request); }, }, };\n\nOr specifically within a given route.\n\nroutes/pass.js\n\n    \n    \n    export default { get(request) { return request.pass(\"http://localhost:6363\"); }, };\n\nThis passes only GET requests to /pass to another application at port 6363.\n\nPassing a request per route usually makes sense in combination with disabled\nbody parsing, which is now possible per route.\n\n### Disabling body parsing per route\n\nIn 0.30, we added the option to disable body parsing for the entire\napplication. This release adds the option to do so per route.\n\nroutes/pass.js\n\n    \n    \n    export const body = { parse: false, }; export default { get(request) { return request.pass(\"http://localhost:6363\"); }, };\n\nA local route body.parse export overrides the application-wide setting. This\nalso means you could disable body parsing globally and then enable it for a\nspecific route.\n\n## Migrating from 0.30\n\n### remove @primate/build\n\nPrimate now comes bundled with esbuild; remove any use of the deprecated\n@primate/build package; you also do not need to depend on esbuild yourself\nanymore.\n\n## Other changes\n\nConsult the full changelog for a list of all relevant changes.\n\n## Next on the road\n\nSome of the things we plan to tackle in the upcoming weeks are,\n\n  * Multidriver transactions\n  * Add a command hook that would allow modules to register command line namespaces, to be able to run npx primate [namespace] [command] [flags]\n  * Use this new hook to create database migrations for SQL-flavored databases\n  * Add hydration and SPA support for @primate/vue\n  * Flesh out stores with default values, additional predicates and relations between tables/collections\n  * Add more type variants\n\nThis list isn't exhaustive or binding. None, some or all of these features may\nbe included in 0.32, and other features may be prioritized according to\nfeedback.\n\n## Fin\n\nIf you like Primate, consider joining our channel #primate on irc.libera.chat.\n\nOtherwise, have a blast with the new version!\n\n#### On this page\n\n  * Fast hot reload\n  * Support for projections / sorting in stores\n  * Projections\n  * Sorting\n  * New filesystem router\n  * Optional path parameters\n  * Rest path parameters\n  * Quality of life improvements\n  * HTMX integration improvements\n  * Passing in props\n  * Partial rendering\n  * RequestFacade#pass\n  * Disabling body parsing per route\n  * Migrating from 0.30\n  * remove @primate/build\n  * Other changes\n  * Next on the road\n  * Fin\n\n", "frontpage": false}
