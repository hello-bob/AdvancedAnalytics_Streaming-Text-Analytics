{"aid": "40210340", "title": "My Code Formatting Guidelines", "url": "https://vale.rocks/blog/My_Code_Formatting_Guidelines", "domain": "vale.rocks", "votes": 1, "user": "OuterVale", "posted_at": "2024-04-30 12:32:39", "comments": 0, "source_title": "My Code Formatting Guidelines", "source_text": "Vale\n\nBlog\n\nMy Code Formatting Guidelines | Vale.Rocks\n\nTutorial\n\n# My Code Formatting Guidelines\n\n  * 18 Apr, 2024\n  * 746 words\n  * 3 minute read\n\nSoftware development is a varied field filled with lots of different people\nwith very strong opinions. When working on projects, it's important that\neveryone follows the same guidelines for the sake of compatibility and\ncoherence.\n\nThis document outlines my personal code style guidelines and how I implement\nthem. Much of what I outline here can be achieved using my Prettier\nconfiguration. Where relevant, I've included the related Prettier config\nlines.\n\nNote that I am a frontend developer, and, as such, this documentation is best\ntailored to that. If you wish to utilise my guidelines outside the sphere of\nfrontend development, then you may need to make some alterations.\n\n## Use Tabs\n\nTabs should be used for indentation for several reasons. These include:\n\n  * Semantic indication of indentation\n  * Customisable display\n  * Improved accessibility\n  * Smaller file sizes\n\nPrettier: useTabs: true\n\n## Always Add Semicolons\n\nWhen writing JavaScript, every line that can end with a semicolon should end\nwith a semicolon. JavaScript engines add them anyway, and it's ideal to see\nexactly what code will be executed.\n\nPrettier: semi: true\n\n    \n    \n    // Bad function name { console.log(\"I truly do love JavaScript\") } // Good function name { console.log(\"I truly do love JavaScript\"); }\n\nJavaScript\n\n## Use Double Quotes\n\nStrings should use double quotes (\"\"), not single quotes (''). This makes it\neasier to use single quotes (which are more common) within strings. This is\nmerely a default, and there will be situations where using single quotes is\npreferable. For the most part, Prettier will handle these exceptions.\n\nPrettier: singleQuote: true, jsxSingleQuote: false\n\n    \n    \n    // Bad const variable = 'String Content'; // Good const variable = \"String Content\";\n\nJavaScript\n\n## Quote Properties\n\nProperties should all be quoted in the same way, rather than introducing\nunnecessary (and potentially confusing) variation within an object.\n\nPrettier: quoteProps: \"consistent\"\n\n    \n    \n    // Bad object = { property1: \"content\", \"property2\": \"content\" }; // Good object = { \"property1\": \"content\", \"property2\": \"content\" };\n\nJavaScript\n\n## Don't Split Strings Across Multiple Lines\n\nStrings should be contained within one line unless there is genuine reason not\nto. It makes things hard to search and is a pain to deal with.\n\n    \n    \n    // Bad const variable = \"This is awful. It may be easier for a human to read, but \\ it leads to annoyance and makes it harder to search for things. It is an \\ all around pain.\"; // Good const variable = \"This is better. It may be a tad harder for a human to read, but resolves many annoyances and makes it easier to search for things. It is much cleaner as well.\";\n\nJavaScript\n\n## Use Trailing Commas\n\nTrailing commas make version history cleaner. Rather than a change\nimplementing a new line and a comma on the previous line, it will only need to\nadd the new line.\n\nPrettier: trailingComma: \"all\"\n\n    \n    \n    // Bad object = { property1: \"content\", \"property2\": \"content\" }; // Good object = { \"property1\": \"content\", \"property2\": \"content\", };\n\nJavaScript\n\n## Space Brackets\n\nBrackets should have spaces on either side to provide padding. This makes it\neasier to read and maintains consistency.\n\nPrettier: bracketSpacing: true\n\n    \n    \n    // Bad {foo: bar} // Good { foo: bar }\n\nJavaScript\n\n## Use Arrow Parentheses\n\nUsing arrow parentheses makes it easier to read and make changes.\n\nPrettier: arrowParens: always\n\n    \n    \n    // Bad x => x // Good (x) => x\n\nJavaScript\n\n## Unwrap Prose\n\nProse formatting should be handled slightly differently to code. As such, each\nblock of prose should be unwrapped into one line. This makes it easy for any\neditor to define how they want prose to display.\n\nPrettier: proseWrap: preserve\n\n## HTML Whitespace Sensitive Formatting\n\nFormatting HTML can be messy due to the way browsers parse whitespace.\nPrettier offers a good explanation of it, but the crux is that their CSS\nformatting option offers the best mix of human readability and preservation of\nwhitespace.\n\nPrettier: htmlWhitespaceSensitivity: css\n\n## Line Feed End of Line\n\nDifferent operating systems handle line endings differently, and things get\nmessy quick. Using line feed, which is common on Unix based systems, is a\nclean option that is also supported on Windows.\n\nPrettier: endOfLine: lf\n\n## Format Embedded Languages\n\nCode of one type used within a file of another should be formatted as you\nwould code in it's native filetype.\n\nPrettier: embeddedLanguageFormatting: auto\n\n## Keep Multiple Attributes Per Line\n\nSplitting an element's attributes into multiple lines takes up a lot of space\nand, on larger elements, leads to very long and unwieldy files.\n\nPrettier: singleAttributePerLine: false\n\n    \n    \n    // Bad <div class=\"name\" id=\"name\" > Content </div> // Good <div class=\"name\" id=\"name\"> Content </div>\n\nHTML\n\nAs I opened with, the formatting of code is a decisive and complex topic. I'm\nsure many people disagree with my code formatting guidelines, and I'd love to\nhear your criticisms in the comments. All I ask is that you keep criticism\nconstructive and remain respectful.\n\n", "frontpage": false}
