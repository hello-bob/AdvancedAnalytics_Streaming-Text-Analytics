{"aid": "40052212", "title": "Show HN: Janus \u2013 A read/write MySQL proxy for Rails' ActiveRecord 7.1", "url": "https://tech.olioex.com/ruby/2024/04/16/introducing-janus.html", "domain": "olioex.com", "votes": 2, "user": "lloydwatkin", "posted_at": "2024-04-16 14:16:21", "comments": 0, "source_title": "Introducing Janus a read/write proxy for ActiveRecord 7.1+", "source_text": "Introducing Janus a read/write proxy for ActiveRecord 7.1+ | Olioverse\n\nverse\n\n# Introducing Janus a read/write proxy for ActiveRecord 7.1+\n\nApr 16, 2024 Written by Lloyd Watkin (lloyd@olioex.com)\n\n## TL;DR\n\n> In ancient Roman religion and myth, Janus (/\u02c8d\u0292e\u026an\u0259s/ JAY-n\u0259s; Latin: Ianvs\n> [\u02c8i\u032fa\u02d0n\u028as]) is the god of beginnings, gates, transitions, time, duality,\n> doorways,[2] passages, frames, and endings. (wikipedia)\n\nJanus is a read/write split proxy for MySQL/ActiveRecord 7.1+. It works by\nsending any read queries to a replica, and any write queries to the primary\ndatabase server. If there\u2019s been a write statement within the same thread we\nstick any future queries to the primary server unless the developer\nspecifically chooses not to.\n\nOther than that Janus should be pretty hands off. We deployed on our\ninfrastructure (migrating from Makara) on the 2024-04-09 and saw no effect on\nour metrics.\n\n## Why did you create it?\n\nWe introduced Makara into our setup back in September 2016 when we were\napproaching the stage of either needing a more powerful database server or\nmoving to the more robust setup of having a primary/replica database setup.\nMakara was the perfect project for us as it transparently handled directing\nSQL queries to the appropriate server without any thought from the developer\n(aside from considering some replica lag for Sidekiq. If we ever needed to\nspecifically read from a primary server we could also tell it using the\nMakara::Context helper.\n\nAfter serving us well for many years, we upgraded our main API codebase to\nRails 7.1 and after plenty of testing we deployed to our production\nenvironment. Immediately we saw the load on our primary database server jump\nand traffic on our three read replicas drop to almost zero. After\ninvestigation we determined that Makara was no longer working with Rails 7.1.\n\nMakara was first pushed to Github back in 2012 initially by TaskRabbit, but\neventually taken over by Instacart (please let me know if I\u2019ve got that\nwrong!). The project was well supported with features and bugfixes coming\nfairly regularly. Unfortunately, active development of this project ended some\ntime ago, I assume this is because Instacart have moved over to DynamoDB. Just\nover a year ago I did contact one of the developers via X who confirmed this\nbut were happy to accept pull requests. The last commit on the project was\nJune 2023 however.\n\nThis left us in the position of either fixing Makara, finding an alternative\nsolution, or creating something of our own...\n\n## But why didn\u2019t you use...\n\n### Rails build in read/write split?\n\nWith Rails 6 came the ability to use multiple databases both for read/write\nsplit and for sharding. We investigated and attempted to proof of concept this\nwithin our codebase. Unfortunately we were hit with two issues:\n\n  1. The setup assumed a CRUD style application rather than a rich API. It\u2019s hooked into routes rather than looking at the actual query content itself (we tried creating our own database selectors)\n  2. We\u2019d need to implement code through our codebase to manually specify which database to read from. Not only would this be messy but it would take a long time to achieve\n\nMaybe this will come with a future version of Rails!\n\n### Makara\n\nThe Makara codebase is quite extensive and supports various versions of\nActiveRecord as well as different database engines. We started investigating\nthe code, but any contribution we\u2019d make would likely only be for the MySQL\nadapter (since that\u2019s what we use) and not tested elsewhere. Additionally\nwhether we\u2019d get the contributions merged and released given the project\u2019s\nstate was another concern - we didn\u2019t want \u201cyet another fork\u201d out there in the\ncommunity.\n\nWhen we investigated the codebase it soon became clear that a new stripped\nback library might be the best solution for us.\n\n### ProxySQL\n\nProxySQL seemed like it might be the route we\u2019d go for a period. Rather than\nrun 1-2 ProxySQL instances we\u2019d discussed placing a proxy on each on of our\nservers and having our Rails app talk directly to that (since we were only\ninterested in the read/write split rather than any connection pooling\nfunctionality). Upon further investigation it seemed that ProxySQL would\nrequire a lot more work than simply deploy and add simple rules. It would also\nnot directly support reading from primary after a write, releasing that\ncontext, and we\u2019d need to setup rules to achieve what we\u2019re after.\nAdditionally there was little other evidence around the internet of people\nusing Rails and ProxySQL together, so we\u2019d be somewhat going into the unknown\n(Shopify being the exception) .\n\n  * https://labs.clio.com/rails-on-proxysql-80a18236b093\n  * https://www.cloudthat.com/resources/blog/the-power-of-proxysql-to-split-read-and-write-queries-in-amazon-rds\n\n## What\u2019s our setup?\n\nJust so you can have an understanding of what the library needed to achieve\nfor us we\u2019ll share a little about our infrastructure/setup.\n\nWe make use of AWS Aurora MySQL. We currently have a single primary server\nwith three read replica servers. Two of our replicas are dedicated to serving\ndata to our Sidekiq job queues with the other replica serving our web traffic\n(we make heavy use of job queues at Olio).\n\nWith Makara you can specify multiple replica servers and it handles servers\nnot being available (temporarily blocklisting them). We don\u2019t need to support\nthis since failovers and availability to handled by AWS via read/write\nendpoints. In our case if a failover happened we\u2019d just want an exception to\nbe raised and a database reconnection attempted.\n\nWe deployed Janus to our production envioronment on 2024-04-09 and saw no\neffect on our metrics at all. We\u2019ve since fixed a few small bugs with regards\nto routing and will correct anything that appears whilst running the library\nat Olio.\n\n## Getting started\n\n### Installation\n\nAdd the current version of the GEM from rubygems in your Gemfile.\n\n    \n    \n    gem 'janus-ar'\n\nThis project assumes that your read/write endpoints are handled by a separate\nsystem (e.g. DNS).\n\n### Configuration\n\nUpdate your database.yml as follows:\n\n    \n    \n    development: adapter: janus_mysql2 database: database_name janus: primary: <<: *default host: primary-host.local replica: <<: *default password: ithappenstobedifferent host: replica-host.local\n\n### Run\n\nThat\u2019s it. If you look at your server logs we prefix any ActiveRecord queries\nwith [primary] or [replica] so you can see which server is being used.\n\n### In development/test environment\n\nIf you want to create a read only user for development work you can do so by\nusing:\n\n    \n    \n    CREATE USER IF NOT EXISTS 'readonly'@'%' IDENTIFIED BY 'password'; GRANT SELECT ON `#{database}`.* TO 'readonly'@'%'; FLUSH PRIVILEGES;\n\n## Future plans\n\nOnce we\u2019ve been running Janus for a period and are happy with its stability\nthe next step will be to add a Trilogy adapter in rather than using the MySQL2\nadapter. At this stage this is mostly to improve the internal developer\nexperience where installing the mysql2 GEM is often the cause of frustration\non MacOS. FYI our current guidance internally is to run the following before\nbundle install:\n\n    \n    \n    bundle config build.mysql2 --with-ldflags=-L$(brew --prefix zstd)/lib\n\nPlease do get in touch if you are using Janus, we\u2019d love to have more input\nand feedback!\n\n  * Olioverse\n  * tech@olioex.com\n\n  * olioex\n  * olio_ex\n\nA space for Olio employees to share ideas, useful tips and more.\n\n", "frontpage": false}
