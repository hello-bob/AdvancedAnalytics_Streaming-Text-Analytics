{"aid": "40112544", "title": "AI programming tools should be added to the Joel Test", "url": "https://blog.waleson.com/2024/04/ai-programming-tools-should-be-added-to.html", "domain": "waleson.com", "votes": 3, "user": "jtwaleson", "posted_at": "2024-04-22 08:55:48", "comments": 3, "source_title": "AI programming tools should be added to the Joel Test", "source_text": "AI programming tools should be added to the Joel Test\n\nSkip to main content\n\n### Search This Blog\n\n# Software etc.\n\nRandom thoughts on software by Jouke Waleson, a Fractional CTO in NL. I help\norganizations in part-time to get the most out of their teams, tech and\nproducts while building my own software product.\n\n### AI programming tools should be added to the Joel Test\n\n  * Get link\n  * Facebook\n  * Twitter\n  * Pinterest\n  * Email\n  * Other Apps\n\nFirst published on\n\nMonday, April 22, 2024\n\nHere's a wake-up call to all CTOs: AI programming tools are getting freaking\namazing and if you don't allow your teams to use them somehow, it will bite\nyou in the ass in a couple of years. You will be slower and you will lose your\nbest people.\n\nThe infamous Joel Test is a list from the year 2000 of 12 things all great\nsoftware companies do. Since then most companies have implemented Git and\nCI/CD, checking of three items, so we have some space left in the 2024 update\n;) I believe \"Do you allow your developers to use AI assisted development\nenvironments?\" is a necessary addition.\n\nI get that you don't want your source code to end up on some OpenAI /\nMicrosoft / Github server somewhere, sure, but find a way to use your own\nmodels or learn to live with it. Note that this is often not the same as \"#9 -\nDo you use the best tools money can buy?\" as blocking AI tools is about data\nsecurity, not money.\n\nSo why do I think developers need AI programming tools? I'm a seasoned\ndeveloper with about 15 years of serious programming experience. In the last\n10 years I've done less of it, as I was busy with Product Manager / CTO\nthings. I'm now starting my own company, so I'm programming a lot, and I'm\nexploring whether some technologies really have a 2-10x impact on my work\n(supabase does, shout-out to you guys!). I wanted to give AI assistants a try,\nso I spun up Github Copilot, plandex.ai and aider.chat .\n\nThere's plenty of things wrong with these tools: they are often wrong, are\nslow and the GPT4 ones are really expensive. I have many opinions on how AI\nprogramming tools should work instead of the brute-force LLMs we use today,\nbut I'll reserve those for another post. Because even in this early phase I\ncan say that I will never go back to not using them. And this is just the\nstart, it will only get better from here. Programming with Copilot is\ndifferent from normal programming, a bit like singing a duet I guess. You have\nto adapt to having a partner, give it the right cues, move out of the way when\nit's their turn etc. But it takes the boring repetitive tasks out of\nprogramming, and I love it. I feel less tired, can do better work, and feel\nlike I'm often going 2x faster.\n\nSo if you're an engineer, find a place that does not block you from using AI\ntools. Ask it during your interview process!\n\nIf you're a CTO: find a way to get your engineers to use them, or make one.\n\nAnd if you're Joel Spolsky, please release an update of the Joel Test, would\nlove to know what you think in 2024 ;)\n\nDiscuss on HN\n\n  * Get link\n  * Facebook\n  * Twitter\n  * Pinterest\n  * Email\n  * Other Apps\n\n### Comments\n\n#### Post a Comment\n\n### Popular posts from this blog\n\n### The unreasonable effectiveness of i3, or: ten years of a boring desktop\nenvironment\n\nFirst published on\n\nSunday, March 03, 2024\n\nMy wife uses Windows and over the years I've helped her move things to new\nsystems. Win8, 10 and now 11. With every change the UI changes. Now I can't\nright click the bottom right corner anymore to open Task Manager. The UI feels\n\"fresh\" and up-to-date I guess, but does it really matter? My desktop has\nlooked like this since 2008. I love the picture of the gearbox, it's a\ntestament to the hidden precision engineering that goes on inside the built\nworld all the time. I don't see much of the gearbox though, because most of\nthe time my screens look like this: The environment around my background\npicture has changed a little more, but has been stable for the last 10 years.\nMy experience is very different to my wife's constantly changing system. In\n2009 I moved from Windows to Ubuntu, then to Debian using Gnome. Then finally\nto i3 in 2013 after a brief affair with XMonad in 2012. So by now in early\n2024, I've had the same minimal UI for more than 10 years,\n\nRead more\n\n### Idea time: RFID+E-Ink, electronic price tags without batteries\n\nFirst published on\n\nWednesday, December 14, 2011\n\nI got this idea years ago, somewhere in 2004 after I had heard both of RFID\nand E-Ink. The order is irrelevant ;) The idea is simple, we take: 1) RFID\nreaders, which send radio waves to tags, which pick up some of the energy in\nthe wave, do some computations and send a reply. The tags are brilliant: no\nbatteries, no connected power source of any kind except for the antenna. 2)\nE-Ink displays, which need power only to change pixels. After the power is cut\noff, the pixels remain in their current state. The result: a small tag with a\ndisplay. The display gets initialised and updated by an RFID-reader and after\nthat retains its state indefinitely. Perfect for price tags on shelves in\nsupermarkets, which need to be updated every now and then but are hellish to\nreplace. I soon found out in 2004 that Epson had already done this:\nhttp://gizmodo.com/026090/epsons-electronic-ink-%252B-rfid--21st-century-\nprice-tags\n\nRead more\n\n### Parsing 10TB of Metadata, 26M Domain Names and 1.4M SSL Certs for $10 on\nAWS\n\nFirst published on\n\nSunday, January 17, 2016\n\nLast May I was working on hobby project similar to this:\nhttps://github.com/zakjan/cert-chain-resolver/ . As I found the cert-chain-\nresolver project a couple of days later I did nothing with the results, but I\ngot some nice comments on how I used 1 VM to download & process 10TB in a\ncouple of hours on this HN thread recently so I decided to do a write up on\nthe process and publish the data. See the parts below: Part 1: downloading\n10TB of metadata in 4 hours Part 2: fetching a ****load of certificates Part\n3: playing with the data Total costs My approach was somewhat different from\nthe github project above, instead of using the AIA extension I wanted to\nbrute-force the solution by finding all known intermediate and root\ncertificates in advance. Based on the checksum of the issuer/subject fields I\ncould look up which certificates \"claimed\" to be the signer of the certificate\nand then using the signature I could filter out which ones actually were. You\ncan us\n\nRead more\n\nPowered by Blogger\n\nTheme images by Michael Elkan\n\n### Report Abuse\n\nDiese Website verwendet Cookies von Google, um Dienste anzubieten und Zugriffe\nzu analysieren. Deine IP-Adresse und dein User-Agent werden zusammen mit\nMesswerten zur Leistung und Sicherheit f\u00fcr Google freigegeben. So k\u00f6nnen\nNutzungsstatistiken generiert, Missbrauchsf\u00e4lle erkannt und behoben und die\nQualit\u00e4t des Dienstes gew\u00e4hrleistet werden.Weitere InformationenOk\n\n", "frontpage": false}
