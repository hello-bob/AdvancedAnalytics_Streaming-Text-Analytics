{"aid": "40136609", "title": "Scale Not Sales: Automating Revenue So Graph Go Up", "url": "https://blog.railway.app/p/scale-not-sales", "domain": "railway.app", "votes": 1, "user": "dban", "posted_at": "2024-04-23 20:02:43", "comments": 0, "source_title": "Scale Not Sales: Automating Revenue So Graph Go Up", "source_text": "Scale Not Sales: Automating Revenue So Graph Go Up\n\nAngelo Saraceno\n\nApr 22, 2024\n\n# Scale Not Sales: Automating Revenue So Graph Go Up\n\nRailway just crossed a significant revenue milestone. We can\u2019t disclose how\nmuch we now make, but it\u2019s a pretty big deal for us and our customers.\n\nWe officially started \u201cdoing sales\u201d about a year ago, but after reading \u201cpulp\nbusiness,\u201d none of the old rules applied to us. The expectations of developers\nhave changed \u2014 all the advice about sending emails doesn\u2019t work, most off-the-\nshelf revenue enrichment software is broken, and learning golf didn\u2019t help.\n\nWe\u2019re an engineering company, so we looked to first principles to build\nourselves a unique revenue function.\n\nTo get there, we hit our head against the revenue wall very hard, repeatedly,\nuntil we built a sustainable business \u2014 the one we have today.\n\nLet\u2019s get into how it works \u2014 including a detailed look at the regression\nmodel we wrote to figure out if a user is going to upgrade or churn.\n\n# Sales sucks for developers\n\nLet\u2019s begin with a cold hard fact. Developers are highly impatient and want to\nuse the product with as little friction as possible.\n\nNo contact form.\n\nThis is contrary to the aims of the average salesperson, who would like to\nknow about the customer\u2019s intent before they use the product.\n\nA salesperson\u2019s dream product entry experience\n\nThis is the natural tension that emerges when salespeople are rewarded for\nselling and developers are rewarded for completing tickets. Those aims are\noften opposed. So, some companies swung towards something new and shiny called\nPLG.\n\nThe true essence of PLG or \u201cproduct-led growth\u201d (the part that we agree with)\nis to create a product that is so valuable, its purchase becomes a natural\nchoice \u2014 where payment is the default and all barriers to adoption are\nminimized.\n\nYet some companies have misinterpreted PLG to mean that you should hand out\nfree samples of your product to gain market share and then use your market\ndominance to influence whether you use the product or not.\n\nHowever, as we have seen with much of the dearth of the free tier nowadays,\ngiving away the product with indefinite trials in hopes that your customer\nuses it isn\u2019t a good plan. Many customers just never end up paying you what\nyou are worth, especially when compute isn\u2019t cheap. As such, many companies\nare now reverting to sales-led motions.\n\nSo how do you get paid what your product is worth while also getting out of\nthe way for developers?\n\n# Speedrunning the tent of unhappiness\n\nRailway charged on Day 1.\n\nIt was a comically good deal for users and a bad deal for us. $20 a month got\nyou near-unlimited compute. Since we wanted to avoid the fate of some beloved\nproducts but business failures, we\u2019ve always believed in charging for things\nto prove business viability.\n\nAs more companies wanted to adopt Railway for their business, they came to us\nwith questions about SLAs and NDAs. We got caught flat-footed. We knew we had\nto \u201cdo sales\u201d at some point, but we weren\u2019t sure how. The breaking point was\nwhen a major Fortune 500 CTO asked for a demo on Discord right after a message\nfrom DotNetHater420.\n\nShould we Ramp ties and button-down shirts for the engineers that knew how to\nhold a conversation?\n\nI read every sales book I could find to learn how to build a revenue function.\nMuch of the content was focused on:\n\n  * Educating the reader on what is Sales (useful)\n  * Motion, which is how you sell the product and how customers get access to it (valuable)\n  * Technique, the etiquette and the questions you would ask a customer (useless)\n\nHowever, how to sell to your audience was an exercise left for the reader.\n\nWe gave the advice an honest try by gating some of the product behind an\nEnterprise offering and sending boatloads of emails to an ideal customer.\n\nWe got a 0.3% response rate for customers already on the platform. Which is\n... not good. For reference, Ian, who is the best recruiter in the world\n(we\u2019re hiring) has a response rate of 0.5% on his cold outbound emails. No one\nwanted to jump on a call.\n\nWhich makes sense. As a developer, I am in my editor, not my inbox ... all\nthese sales books and none of them offered good engineering solutions tailored\nfor serving engineers!\n\nFor the calls with large prospects, we were insistent that we didn\u2019t want to\nstart slicing off or forking the codebase to appease one customer at the cost\nof our user base. Doing so would have built a tent where you have two nearly\nopposite points of tension. Not us.\n\nWe restored (nearly) all features to all plans and went back to the drawing\nboard.\n\n# A taste of success\n\nYou know when customers actually did want to jump on a call with us?\n\nWhen they had a major issue and were emailing us in all caps.\n\nAnd after those calls, we noticed something interesting. Every customer who\nended up taking a meeting with the team grew their usage ... like, a lot.\n\nAn annotated graph from ChartMogul, y-axis represents realized revenue\n\nWe then realized that the existence of sales for us was to close the\ninformation asymmetry gap that our user faces. Instead of trying to move used\ncars, we should be more like a TA in college, helping the developer come to\nthe correct answer for the problem that they had, even if it wasn\u2019t Railway.\n\nIt looked like a Success function.\n\nAs Railway\u2019s product team finally delivered expected features like Regions,\nmore of our conversations revolved around existential themes like \u201cWill you\nexist in 5 years?\u201d or \u201cCan I trust your company?\u201d\n\nCompanies came to Railway for quick deployments and whether or not they stayed\ndepended on if they could trust us with their business.\n\nFrom this insight we then created our first Enterprise-lite offering\n(\u201cBusiness Class\u201d) which allowed us to designate increased compute limits and\nsupport SLOs for those who needed more attention (like paging us at 3 AM) to\naddress their concerns.\n\nHowever, selling egg protection insurance is no use if the egg is already\ncracked. This issue was especially prevalent when a customer was growing fast\nand we had no idea they were on the platform. We would then perform an upsell\nafter an angry email... good for our revenue, but bad for our conscience.\n\nDespite the occasional dropped egg, this approach of jumping on a call after a\nsteamed email was helpful. We learned a lot from those experiences. But the\nnumber of dropped customers increased as more developers jumped on the\nplatform. Worse still, we had no idea who they were until their stuff broke.\n\nThat\u2019s when we started thinking about scaling.\n\n# A game of automation\n\nNine months into our Success practice, we started noticing more patterns\naround the type of customer that needed a helping hand.\n\nBut first, we checked if there was a revenue intelligence vendor that would\nhelp. Not for lack of trying, most products just outright didn\u2019t work or were\naggressively demo-gated. Trust us, we didn\u2019t want to have to build this out\nourselves.\n\nSo we started aggregating parameters that would generate for a time series. We\ndecided on privacy-respecting data points like number of successful builds,\nfailed builds, regions configured, number of support requests, and feature\nadoption.\n\nWe then aimed to boil these parameters into a single score to determine\ncustomer temperature and ranking the customers.\n\nAll of the nights laddering on Starcraft 2 were now going to be put to use\nmaking our own ladder. To get there we did a bunch of regression modeling to\ndetermine which parameters were significant to make something similar to an\nELO score.\n\nUsing the customer\u2019s spend as the control, we tested to see which parameters\nwere significant in a customer\u2019s spend by first getting p-values via multiple\nlinear regression. The p-values helped us check if the data points were a\nsignificant influence on platform spend. Closer to 0 meant it had nearly no\neffect while anything too large meant that we should be very suspicious of\nover-fitting to those values. And we couldn\u2019t just eyeball these numbers \u2014 we\nneeded to test those values before settling on a final model.\n\nWe proceeded to do multiple tests using a stepwise regression and a LASSO\ntest. It showed us some obvious-in-hindsight significant correlations like\nthat more disk usage would lead to a stickier product experience. (The DB\nbusiness is a good one I suppose.)\n\nWe then worked to remove colinear factors in scoring. An example here is\nMemory or CPU usage, which is highly correlated to spend. Thats not entirely\nuseful for us since that doesn\u2019t generate any insight, however failed\ndeployments had an extreme determination on if a customer was successful.\n\nWe then looked deeper into their journey. If analytics showed us a spate of\nfailed deployments, that usually signaled frustration brewing on the platform.\nIf a customer failed to overcome their metamorphosis, they\u2019d either send us a\nstrongly worded email after they deleted everything, or grow massively.\n\nHex table of the breakdown of the scoring system we tuned and refined\n\nAfter getting acceptable weights for our parameters we generated a score that\nshowed the temperature of a customer. We then grouped them to different tiers\nof adoption with affordances for both promotion and relegation.(Jury is still\nout if we ship Leagues to Railway.)\n\nAnytime a customer was at risk of relegation? We would reach out.\n\nWe then used Hex to build a dashboard to track our customers\u2019 growth over\ntime. With the help of our friends at Chartmogul, we also automated\nopportunity creation within our CRM. (Shoutout Nick and team for delivering\nthe API.) With that, we have a internal dashboard we can use to track company\nmovement within the platform.\n\nOur admin dashboard that we use to track movement and get a glimpse at scores\n\nNow when we get a ping that a customer is growing, we start to pre-warm up\nresources that could be helpful to a cohort\u2019s growth. As an example, a cohort\nat the time of writing is very concerned with O11y, so Melissa spun up a nifty\nOTEL resource for those customers. And it\u2019s already been useful for the team\nin predicting who I will likely be talking to over the next week.\n\n# The next stage\n\nThe journey in my career from reluctant DevOps person to SWE, to PM, to\nSupport Eng, and now to Sales/Successperson taught me that the desires of the\nline engineer is the same as the line account executive \u2014 they both obsess\nover observability for the sake of their customers.\n\nAs engineers, we want to build out Railway\u2019s Sales function where you don\u2019t\nneed to talk to us at all to alleviate your fears. But, we also want you to\nknow that you always have our team\u2019s expertise at your disposal if you do want\na call.\n\nWhen you do reach out, you should feel like the team is able to anticipate\nyour concerns. As such, we have a few learnings that we plan to incorporate\ninto our offerings. Such as:\n\n  * We have a feature discoverability problem on the platform. Much of our churned users often complain we don\u2019t have a feature that already exists. We have Evan from the Product team now thinking deeply about this problem. We promise not to hire multiple PMs to play out their political battles on our product.\n  * We\u2019re working to revamp our offerings to reflect our internal league model. Your level of support on the platform should just be a matter of your expected tenure and committed spend that you\u2019ve agreed to.\n  * We\u2019ve started generating insights cross correlating data on off-product events such as outages and support response times to determine if they affected a customer\u2019s propensity to stay on the platform. (An immediate insight we got was that periods of repeated outages would increase churn to a great extent.)\n\n# Results so far\n\nWhen we set out to answer the question: \u201cDo we get paid what our product is\nworth?\u201d we needed to know what our customers see value in. The answer for us\nis speed and trust.\n\nInstead of having to wait 30 days to see how we did last month, we can now\ntrack a good amount of realtime gross movement on the platform.\n\nThe best part is we now have a sort-of internal stock market that we can use\nto help us allocate our time and resources to invest in our users who are\ngrowing quickly. Instead of spamming the funnel with credits, we can target\ninterventions such as offering a Slack channel to fast-growing customers.\n\nMuch, much more is planned on this front.\n\nMeanwhile, we also now have Pro workspaces reporting deeper usage \u2014 in part\nbecause we opened the lines of communication with Pro users. Over the last\nyear, I booked 120+ demos (keep in mind I still ship code) and 4x\u2019ed the\nnumber of companies on the platform.\n\nThis is all done so that people can trust us with their business, so that we\ncan exist in perpetuity to serve them, which is the highest honor.\n\nWhat else do you want to hear about? Let us know on Twitter.\n\n### Continue Reading...\n\nView All Engineering \u2192\n\nEngineering\n\nUpgrading 3 Million Variables to Envelope Encryption\n\nThe path to bare metal was blocked by KMS. This is the story of how we rid\nourselves of that dependency by migrating more than three million variables to\nenvelope encryption.\n\nGreg SchierApr 16, 2024\n\nEngineering\n\nIncident Report: January 31st, 2024\n\nWe recently experienced an outage on our platform due to a DDoS attack that\npeaked at 12M requests per second. When production outages occur, it is\nRailway\u2019s policy to share the public details of what occurred.\n\nAngelo SaracenoJan 31, 2024\n\n### Your train has arrived!\n\nJoin thousands of developers deploying hundreds of thousands of applications\neffortlessly on Railway.\n\nStart a New Project\n\nCopyright \u00a9 2024 Railway Corp. All rights reserved.\n\nProduct\n\n  * Changelog\n  * Pricing\n  * Starters\n  * Feedback\n  * OSS Kickback\n\nCompany\n\n  * About\n  * Careers\n  * Blog\n  * Shop\n\nContact\n\n  * Discord\n  * Twitter\n  * GitHub\n  * Email\n\nLegal\n\n  * Fair Use\n  * Privacy Policy\n  * Terms of Service\n\n", "frontpage": false}
