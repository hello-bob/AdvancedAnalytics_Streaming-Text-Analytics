{"aid": "40284219", "title": "Pyspread \u2013 The Most Pythonic Spreadsheet", "url": "https://pyspread.gitlab.io/", "domain": "pyspread.gitlab.io", "votes": 26, "user": "Qem", "posted_at": "2024-05-07 11:08:56", "comments": 4, "source_title": "Welcome to pyspread | pyspread", "source_text": "Welcome to pyspread | pyspread\n\nHome Install Docs Contribute API Docs Issues Code\n\n# Welcome to pyspread\n\npyspread is a non-traditional spreadsheet application that is based on and\nwritten in the programming language Python. The goal of pyspread is to be the\nmost pythonic spreadsheet.\n\npyspread expects Python expressions in its grid cells, which makes a\nspreadsheet specific language obsolete. Each cell returns a Python object that\ncan be accessed from other cells. These objects can represent anything\nincluding lists or matrices.\n\npyspread is free software. It is released under the GPL v3 licence.\n\nThe latest release is pyspread v2.2.3 (source code). It requires Python 3.6+.\n\nThe last (outdated) release that is compatible with Python 2.x is pyspread\nv1.1.3.\n\n## Features\n\n  * Cells accept Python code and return Python objects\n  * Access to Python modules from within cells including e.g. NumPy\n  * Imports CSV, SVG\n  * Exports CSV, SVG, PDF*\n  * Cells may display text, markup, images, dates** or charts**\n  * Matplotlib and R charts. Plotnine and R packages graphics, lattice, ggplot2 supported via dialog.**\n  * Spell checker**\n  * git-able pysu save file format\n  * blake2b based save file signatures that prevent foreign code execution\n\nNotes: * PDF export via print to file, ** requires optional dependencies\n\n## Target User Group\n\nDirectly using Python code in a grid is a core feature of pyspread. The target\nuser group has experience with or wants to learn the programming language\nPython:\n\n  * Clara is a research engineer. She systematically compares results of different parameter sets. She is proficient with Python and has used it for her scientific analyses. Clara wants a quick initial overview of how changing specific parameters affects her results. With pyspread, Clara is displaying each result in one cell. This allows her to quickly figure out, which parameters she is going to focus on next.\n\n  * Peter is using spreadsheets to prepare business decisions. He separates data from code by keeping his business data in CSV files and accessing these files from pyspread. Furthermore, Peter is worried about algorithmic errors and calculation inaccuracies is his complicated tables. He is importing the Money datatype from py-moneyed in the Macro panel. The dedicated Money class helps him avoiding floating point errors. Peter has implemented his analysis tools together with unit tests in a separate Python module, which he is importing as well. Therefore, he is worrying less about wrong results that may lead to bad business decisions.\n\nNot part of the target user group are Donna and Jack:\n\n  * Donna is looking for a free replacement for Ms. Excel. She does not know any programming language, and she has no time to learn Python.\n\n  * Jack does computation intensive data analysis. He is looking for a spreadsheet that can parallelize calculations - ideally out of the box as a cluster or a cloud solution.\n\nThis does not mean that Donna or Jack cannot work with pyspread. However,\nDonna might find the learning curve for using Python code in cells too steep.\nJack on the other hand might be disappointed because he has to ensure manually\nthat his long running tasks are not locking up pyspread.\n\n## Contact\n\nFor user questions or user feedback please use the pyspread community board on\ngitter.\n\nFor contributions, patches, development discussions and ideas please create an\nissue using the pyspread issue tracker\n\n\u00a9 Martin Manns and the pyspread team\n\n", "frontpage": true}
