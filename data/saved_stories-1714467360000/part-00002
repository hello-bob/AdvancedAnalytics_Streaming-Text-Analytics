{"aid": "40206739", "title": "A Peek Inside the Brains of 'Super-Agers'", "url": "https://www.nytimes.com/2024/04/29/well/mind/super-agers-study.html", "domain": "nytimes.com", "votes": 1, "user": "chapulin", "posted_at": "2024-04-30 02:46:25", "comments": 0, "source_title": "A Peek Inside the Brains of \u2018Super-Agers\u2019", "source_text": "A Peek Inside the Brains of \u2018Super-Agers\u2019 - The New York Times\n\nManage privacy preferences\n\nWe and our vendors use cookies and similar methods to recognize visitors and\nremember their preferences, for analytics, to measure our marketing\neffectiveness and to target and measure the effectiveness of ads, among other\nthings. To learn more about these methods, view our Cookie Policy and Privacy\nPolicy. By clicking \u2018Accept all,\u2019 you consent to the processing of your data\nby us and our vendors using the above methods. You can always change your\npreferences by clicking on Manage Privacy Preferences in our website footer or\nin your app Privacy Settings. Your preferences here are unrelated to Apple\u2019s\nApp Tracking Transparency Framework.\n\n344\n\nVendors using consent 317\n\nVendors using legitimate interest 81\n\nPrecise geolocation data, and identification through device scanning\n\nPrecise geolocation and information about device characteristics can be used.\n\nPersonalised advertising, advertising measurement, audience research and\nservices development\n\nAdvertising can be personalised based on your profile. Your activity on this\nservice can be used to build or improve a profile about you for personalised\nadvertising. Advertising performance can be measured. Reports can be generated\nbased on your activity and those of others. Your activity on this service can\nhelp develop and improve products and services.\n\nPurposes\n\n  * Use limited data to select advertising\n  * Create profiles for personalised advertising\n  * Use profiles to select personalised advertising\n  * Measure advertising performance\n  * Understand audiences through statistics or combinations of data from different sources\n  * Develop and improve services\n\nStore and/or access information on a device\n\nCookies, device or similar online identifiers (e.g. login-based identifiers,\nrandomly assigned identifiers, network based identifiers) together with other\ninformation (e.g. browser type and information, language, screen size,\nsupported technologies etc.) can be stored or read on your device to recognise\nit each time it connects to an app or to a website, for one or several of the\npurposes presented here.\n\nManage Privacy Preferences\n\nWe and our vendors use cookies and similar methods (\u201cCookies\u201d) to recognize\nvisitors and remember their preferences. We also use them for a variety of\npurposes, including analytics, to measure marketing effectiveness and to\ntarget and measure the effectiveness of ads. You can accept or reject the use\nof Cookies for individual purposes below. If you previously accepted these\nmethods through our prior banner, then we will use your data for targeting.\nYour preferences here are unrelated to Apple\u2019s App Tracking Transparency\nFramework.\n\nBelow, you will find a list of the purposes and special features for which\nyour data is being processed. You may exercise your rights for specific\npurposes, based on consent or legitimate interest, using the toggles below.\n\nPurposes\n\nStore and/or access information on a device\n\nCookies, device or similar online identifiers (e.g. login-based identifiers,\nrandomly assigned identifiers, network based identifiers) together with other\ninformation (e.g. browser type and information, language, screen size,\nsupported technologies etc.) can be stored or read on your device to recognise\nit each time it connects to an app or to a website, for one or several of the\npurposes presented here.\n\nMost purposes explained in this notice rely on the storage or accessing of\ninformation from your device when you use an app or visit a website. For\nexample, a vendor or publisher might need to store a cookie on your device\nduring your first visit on a website, to be able to recognise your device\nduring your next visits (by accessing this cookie each time).\n\nVendors177 vendor(s)\n\n  * 6sense\n  * A.Mob\n  * ADventori\n  * Aarki\n  * AcuityAds\n  * AdElement Media Solutions\n  * AdGear\n  * AdKernel\n  * AdSpirit AdServer\n  * AdTheorent\n\n1-10 / 177\n\nUse limited data to select advertising\n\nAdvertising presented to you on this service can be based on limited data,\nsuch as the website or app you are using, your non-precise location, your\ndevice type or which content you are (or have been) interacting with (for\nexample, to limit the number of times an ad is presented to you).\n\nA car manufacturer wants to promote its electric vehicles to environmentally\nconscious users living in the city after office hours. The advertising is\npresented on a page with related content (such as an article on climate change\nactions) after 6:30 p.m. to users whose non-precise location suggests that\nthey are in an urban zone.\n\nA large producer of watercolour paints wants to carry out an online\nadvertising campaign for its latest watercolour range, diversifying its\naudience to reach as many amateur and professional artists as possible and\navoiding showing the ad next to mismatched content (for instance, articles\nabout how to paint your house). The number of times that the ad has been\npresented to you is detected and limited, to avoid presenting it too often.\n\nVendors43 vendor(s)\n\n  * 6sense\n  * AcuityAds\n  * AdGear\n  * AdKernel\n  * Adform\n  * Advanced store\n  * Amazon Ad Server\n  * Appier\n  * AudienceProject\n  * Bannernow\n\n1-10 / 43\n\nCreate profiles for personalised advertising\n\nInformation about your activity on this service (such as forms you submit,\ncontent you look at) can be stored and combined with other information about\nyou (for example, information from your previous activity on this service and\nother websites or apps) or similar users. This is then used to build or\nimprove a profile about you (that might include possible interests and\npersonal aspects). Your profile can be used (also later) to present\nadvertising that appears more relevant based on your possible interests by\nthis and other entities.\n\nIf you read several articles about the best bike accessories to buy, this\ninformation could be used to create a profile about your interest in bike\naccessories. Such a profile may be used or improved later on, on the same or a\ndifferent website or app to present you with advertising for a particular bike\naccessory brand. If you also look at a configurator for a vehicle on a luxury\ncar manufacturer website, this information could be combined with your\ninterest in bikes to refine your profile and make an assumption that you are\ninterested in luxury cycling gear.\n\nAn apparel company wishes to promote its new line of high-end baby clothes. It\ngets in touch with an agency that has a network of clients with high income\ncustomers (such as high-end supermarkets) and asks the agency to create\nprofiles of young parents or couples who can be assumed to be wealthy and to\nhave a new child, so that these can later be used to present advertising\nwithin partner apps based on those profiles.\n\nVendors129 vendor(s)\n\n  * 6sense\n  * A.Mob\n  * Aarki\n  * AcuityAds\n  * AdElement Media Solutions\n  * AdGear\n  * AdKernel\n  * AdSpirit AdServer\n  * AdTheorent\n  * AdTiming\n\n1-10 / 129\n\nUse profiles to select personalised advertising\n\nAdvertising presented to you on this service can be based on your advertising\nprofiles, which can reflect your activity on this service or other websites or\napps (like the forms you submit, content you look at), possible interests and\npersonal aspects.\n\nAn online retailer wants to advertise a limited sale on running shoes. It\nwants to target advertising to users who previously looked at running shoes on\nits mobile app. Tracking technologies might be used to recognise that you have\npreviously used the mobile app to consult running shoes, in order to present\nyou with the corresponding advertisement on the app.\n\nA profile created for personalised advertising in relation to a person having\nsearched for bike accessories on a website can be used to present the relevant\nadvertisement for bike accessories on a mobile app of another organisation.\n\nVendors127 vendor(s)\n\n  * 6sense\n  * A.Mob\n  * ADventori\n  * Aarki\n  * AcuityAds\n  * AdElement Media Solutions\n  * AdGear\n  * AdKernel\n  * AdSpirit AdServer\n  * AdTheorent\n\n1-10 / 127\n\nMeasure advertising performance\n\nInformation regarding which advertising is presented to you and how you\ninteract with it can be used to determine how well an advert has worked for\nyou or other users and whether the goals of the advertising were reached. For\ninstance, whether you saw an ad, whether you clicked on it, whether it led you\nto buy a product or visit a website, etc. This is very helpful to understand\nthe relevance of advertising campaigns.\n\nYou have clicked on an advertisement about a \u201cblack Friday\u201d discount by an\nonline shop on the website of a publisher and purchased a product. Your click\nwill be linked to this purchase. Your interaction and that of other users will\nbe measured to know how many clicks on the ad led to a purchase.\n\nYou are one of very few to have clicked on an advertisement about an\n\u201cinternational appreciation day\u201d discount by an online gift shop within the\napp of a publisher. The publisher wants to have reports to understand how\noften a specific ad placement within the app, and notably the \u201cinternational\nappreciation day\u201d ad, has been viewed or clicked by you and other users, in\norder to help the publisher and its partners (such as agencies) optimise ad\nplacements.\n\nVendors76 vendor(s)\n\n  * 6sense\n  * Aarki\n  * AcuityAds\n  * AdGear\n  * AdKernel\n  * Adelaide\n  * Adform\n  * Adikteev\n  * Adloox\n  * Adnami\n\n1-10 / 76\n\nUnderstand audiences through statistics or combinations of data from different\nsources\n\nReports can be generated based on the combination of data sets (like user\nprofiles, statistics, market research, analytics data) regarding your\ninteractions and those of other users with advertising or (non-advertising)\ncontent to identify common characteristics (for instance, to determine which\ntarget audiences are more receptive to an ad campaign or to certain contents).\n\nThe owner of an online bookstore wants commercial reporting showing the\nproportion of visitors who consulted and left its site without buying, or\nconsulted and bought the last celebrity autobiography of the month, as well as\nthe average age and the male/female distribution of each category. Data\nrelating to your navigation on its site and to your personal characteristics\nis then used and combined with other such data to produce these statistics.\n\nAn advertiser wants to better understand the type of audience interacting with\nits adverts. It calls upon a research institute to compare the characteristics\nof users who interacted with the ad with typical attributes of users of\nsimilar platforms, across different devices. This comparison reveals to the\nadvertiser that its ad audience is mainly accessing the adverts through mobile\ndevices and is likely in the 45-60 age range.\n\nVendors28 vendor(s)\n\n  * AdGear\n  * Amazon Ad Server\n  * Amobee (Nexxen)\n  * Appier\n  * AudienceProject\n  * Bombora\n  * Clinch\n  * Crimtan\n  * Emerse\n  * Google Ads\n\n1-10 / 28\n\nDevelop and improve services\n\nInformation about your activity on this service, such as your interaction with\nads or content, can be very helpful to improve products and services and to\nbuild new products and services based on user interactions, the type of\naudience, etc. This specific purpose does not include the development or\nimprovement of user profiles and identifiers.\n\nA technology platform working with a social media provider notices a growth in\nmobile app users, and sees based on their profiles that many of them are\nconnecting through mobile connections. It uses a new technology to deliver ads\nthat are formatted for mobile devices and that are low-bandwidth, to improve\ntheir performance.\n\nAn advertiser is looking for a way to display ads on a new type of consumer\ndevice. It collects information regarding the way users interact with this new\nkind of device to determine whether it can build a new mechanism for\ndisplaying advertising on this type of device.\n\nVendors50 vendor(s)\n\n  * 6sense\n  * Aarki\n  * AcuityAds\n  * AdGear\n  * Adelaide\n  * Adform\n  * Admixer\n  * Amazon Ad Server\n  * Amobee (Nexxen)\n  * Appier\n\n1-10 / 50\n\nBelow, you will find a list of the features for which your data is being\nprocessed. You may exercise your rights for special features using the toggles\nbelow.\n\nFeatures\n\nMatch and combine data from other data sources\n\nInformation about your activity on this service may be matched and combined\nwith other information relating to you and originating from various sources\n(for instance your activity on a separate online service, your use of a\nloyalty card in-store, or your answers to a survey), in support of the\npurposes explained in this notice.\n\nVendors107 vendor(s)\n\n  * 6sense\n  * A.Mob\n  * AdGear\n  * AdTheorent\n  * Adara (Rate Gain)\n  * Adelaide\n  * Adex (Virtual Minds)\n  * Admixer\n  * AdsWizz\n  * Amazon Ad Server\n\n1-10 / 107\n\nLink different devices\n\nIn support of the purposes explained in this notice, your device might be\nconsidered as likely linked to other devices that belong to you or your\nhousehold (for instance because you are logged in to the same service on both\nyour phone and your computer, or because you may use the same Internet\nconnection on both devices).\n\nVendors108 vendor(s)\n\n  * 6sense\n  * A.Mob\n  * AcuityAds\n  * AdElement Media Solutions\n  * AdGear\n  * AdTheorent\n  * Adara (Rate Gain)\n  * Adex (Virtual Minds)\n  * Adform\n  * Adikteev\n\n1-10 / 108\n\nIdentify devices based on information transmitted automatically\n\nYour device might be distinguished from other devices based on information it\nautomatically sends when accessing the Internet (for instance, the IP address\nof your Internet connection or the type of browser you are using) in support\nof the purposes exposed in this notice.\n\nVendors125 vendor(s)\n\n  * 6sense\n  * A.Mob\n  * Aarki\n  * AdElement Media Solutions\n  * AdGear\n  * AdKernel\n  * AdSpirit AdServer\n  * AdTheorent\n  * Adacado\n  * Adara (Rate Gain)\n\n1-10 / 125\n\nSpecial features\n\nUse precise geolocation data\n\nWith your acceptance, your precise location (within a radius of less than 500\nmetres) may be used in support of the purposes explained in this notice.\n\nVendors64 vendor(s)\n\n  * A.Mob\n  * AdElement Media Solutions\n  * AdGear\n  * AdKernel\n  * AdTheorent\n  * Adacado\n  * Admixer\n  * Adrule mobile\n  * AdsWizz\n  * Amnet GmbH\n\n1-10 / 64\n\nActively scan device characteristics for identification\n\nWith your acceptance, certain characteristics specific to your device might be\nrequested and used to distinguish it from other devices (such as the installed\nfonts or plugins, the resolution of your screen) in support of the purposes\nexplained in this notice.\n\nVendors23 vendor(s)\n\n  * A.Mob\n  * AdKernel\n  * AdTheorent\n  * Adcell (Firstlead)\n  * Amnet GmbH\n  * Cheq\n  * Fraudlogix\n  * Human\n  * Hybrid\n  * InMobi\n\n1-10 / 23\n\nBelow, you will find a list of vendors processing your data and the purposes\nor features of processing they declare. You may exercise your rights for each\nvendor based on the legal basis they assert.\n\nIAB TCF Vendors\n\n6senseIAB TCF\n\n6sense stores cookies with a maximum duration of about this many days: 730.\nThis vendor also uses other methods like \"local storage\" to store and access\ninformation on your device.\n\nPrivacy policyLegitimate interest disclosure\n\nPurposes| Retention  \n---|---  \nStore and/or access information on a device| 400 day(s)  \nCreate profiles for personalised advertising| 400 day(s)  \nUse profiles to select personalised advertising| 400 day(s)  \nUse limited data to select advertising| 400 day(s)  \nMeasure advertising performance| 400 day(s)  \nDevelop and improve services| 400 day(s)  \nSpecial purposes| Retention  \n---|---  \nEnsure security, prevent and detect fraud, and fix errors| 400 day(s)  \nDeliver and present advertising and content| 400 day(s)  \nFeatures  \n---  \nMatch and combine data from other data sources  \nLink different devices  \nIdentify devices based on information transmitted automatically  \nData categories  \n---  \nIP addresses  \nProbabilistic identifiers  \nBrowsing and interaction data  \nNon-precise location data  \nUsers\u2019 profiles  \n  \nA.MobIAB TCF\n\nA.Mob stores cookies with a maximum duration of about this many days: 395.\nThis vendor also uses other methods like \"local storage\" to store and access\ninformation on your device.\n\nPrivacy policy\n\nPurposes| Retention  \n---|---  \nStore and/or access information on a device| 395 day(s)  \nUse limited data to select advertising| 395 day(s)  \nCreate profiles for personalised advertising| 395 day(s)  \nUse profiles to select personalised advertising| 395 day(s)  \nMeasure advertising performance| 395 day(s)  \nUnderstand audiences through statistics or combinations of data from different\nsources| 395 day(s)  \nDevelop and improve services| 395 day(s)  \nFeatures  \n---  \nMatch and combine data from other data sources  \nLink different devices  \nIdentify devices based on information transmitted automatically  \nSpecial features  \n---  \nUse precise geolocation data  \nActively scan device characteristics for identification  \nData categories  \n---  \nIP addresses  \nDevice characteristics  \nDevice identifiers  \nProbabilistic identifiers  \nAuthentication-derived identifiers  \nBrowsing and interaction data  \nUser-provided data  \nNon-precise location data  \nPrecise location data  \nUsers\u2019 profiles  \nPrivacy choices  \n  \nADventoriIAB TCF\n\nADventori stores cookies with a maximum duration of about this many days: 90.\nThese cookies may be refreshed. This vendor also uses other methods like\n\"local storage\" to store and access information on your device.\n\nPrivacy policyLegitimate interest disclosure\n\nPurposes| Retention  \n---|---  \nStore and/or access information on a device| 400 day(s)  \nUse limited data to select advertising| 90 day(s)  \nUse profiles to select personalised advertising| 90 day(s)  \nMeasure advertising performance| 400 day(s)  \nSpecial purposes| Retention  \n---|---  \nEnsure security, prevent and detect fraud, and fix errors| 400 day(s)  \nDeliver and present advertising and content| 400 day(s)  \nData categories  \n---  \nIP addresses  \nDevice identifiers  \nProbabilistic identifiers  \nBrowsing and interaction data  \nUser-provided data  \nNon-precise location data  \n  \nAarkiIAB TCF\n\nuses methods like \"local storage\" to store and access information on your\ndevice.\n\nPrivacy policyLegitimate interest disclosure\n\nPurposes| Retention  \n---|---  \nStore and/or access information on a device| 365 day(s)  \nUse limited data to select advertising| 365 day(s)  \nCreate profiles for personalised advertising| 3650 day(s)  \nUse profiles to select personalised advertising| 3650 day(s)  \nMeasure advertising performance| 1500 day(s)  \nDevelop and improve services| 365 day(s)  \nSpecial purposes| Retention  \n---|---  \nEnsure security, prevent and detect fraud, and fix errors| 365 day(s)  \nDeliver and present advertising and content| 365 day(s)  \nFeatures  \n---  \nIdentify devices based on information transmitted automatically  \nData categories  \n---  \nIP addresses  \nDevice characteristics  \nDevice identifiers  \nUser-provided data  \nNon-precise location data  \n  \nAcuityAdsIAB TCF\n\nAcuityAds stores cookies with a maximum duration of about this many days: 365.\nThese cookies may be refreshed.\n\nPrivacy policyLegitimate interest disclosure\n\nPurposes| Retention  \n---|---  \nStore and/or access information on a device| 180 day(s)  \nCreate profiles for personalised advertising| 180 day(s)  \nUse profiles to select personalised advertising| 180 day(s)  \nUse limited data to select advertising| 180 day(s)  \nMeasure advertising performance| 180 day(s)  \nDevelop and improve services| 180 day(s)  \nSpecial purposes| Retention  \n---|---  \nEnsure security, prevent and detect fraud, and fix errors| 180 day(s)  \nDeliver and present advertising and content| 180 day(s)  \nFeatures  \n---  \nLink different devices  \nData categories  \n---  \nIP addresses  \nDevice characteristics  \nDevice identifiers  \nAuthentication-derived identifiers  \nBrowsing and interaction data  \nNon-precise location data  \nUsers\u2019 profiles  \nPrivacy choices  \n  \nAdElement Media SolutionsIAB TCF\n\nAdElement Media Solutions stores cookies with a maximum duration of about this\nmany days: 365. These cookies may be refreshed.\n\nPrivacy policyLegitimate interest disclosure\n\nPurposes| Retention  \n---|---  \nStore and/or access information on a device| 180 day(s)  \nUse limited data to select advertising| 180 day(s)  \nCreate profiles for personalised advertising| 90 day(s)  \nUse profiles to select personalised advertising| 90 day(s)  \nMeasure advertising performance| 180 day(s)  \nUnderstand audiences through statistics or combinations of data from different\nsources| 90 day(s)  \nDevelop and improve services| 180 day(s)  \nSpecial purposes| Retention  \n---|---  \nEnsure security, prevent and detect fraud, and fix errors| 180 day(s)  \nDeliver and present advertising and content| 180 day(s)  \nFeatures  \n---  \nLink different devices  \nIdentify devices based on information transmitted automatically  \nSpecial features  \n---  \nUse precise geolocation data  \nData categories  \n---  \nIP addresses  \nDevice characteristics  \nDevice identifiers  \nBrowsing and interaction data  \nUser-provided data  \nNon-precise location data  \nPrecise location data  \nUsers\u2019 profiles  \nPrivacy choices  \n  \nAdGearIAB TCF\n\nAdGear stores cookies with a maximum duration of about this many days: 395.\nThis vendor also uses other methods like \"local storage\" to store and access\ninformation on your device.\n\nPrivacy policyLegitimate interest disclosure\n\nPurposes| Retention  \n---|---  \nStore and/or access information on a device| 395 day(s)  \nCreate profiles for personalised advertising| 395 day(s)  \nUse profiles to select personalised advertising| 395 day(s)  \nUse limited data to select advertising| 395 day(s)  \nMeasure advertising performance| 395 day(s)  \nUnderstand audiences through statistics or combinations of data from different\nsources| 395 day(s)  \nDevelop and improve services| 395 day(s)  \nSpecial purposes| Retention  \n---|---  \nEnsure security, prevent and detect fraud, and fix errors| 395 day(s)  \nDeliver and present advertising and content| 395 day(s)  \nFeatures  \n---  \nMatch and combine data from other data sources  \nLink different devices  \nIdentify devices based on information transmitted automatically  \nSpecial features  \n---  \nUse precise geolocation data  \nData categories  \n---  \nIP addresses  \nDevice characteristics  \nDevice identifiers  \nProbabilistic identifiers  \nAuthentication-derived identifiers  \nBrowsing and interaction data  \nUser-provided data  \nNon-precise location data  \nUsers\u2019 profiles  \nPrivacy choices  \n  \nAdKernelIAB TCF\n\nAdKernel stores cookies with a maximum duration of about this many days: 18.\nThese cookies may be refreshed.\n\nPrivacy policyLegitimate interest disclosure\n\nPurposes| Retention  \n---|---  \nStore and/or access information on a device| 180 day(s)  \nCreate profiles for personalised advertising| 180 day(s)  \nUse profiles to select personalised advertising| 180 day(s)  \nUnderstand audiences through statistics or combinations of data from different\nsources| 180 day(s)  \nDevelop and improve services| 180 day(s)  \nUse limited data to select advertising| 180 day(s)  \nMeasure advertising performance| 180 day(s)  \nSpecial purposes| Retention  \n---|---  \nEnsure security, prevent and detect fraud, and fix errors| 180 day(s)  \nDeliver and present advertising and content| 180 day(s)  \nFeatures  \n---  \nIdentify devices based on information transmitted automatically  \nSpecial features  \n---  \nUse precise geolocation data  \nActively scan device characteristics for identification  \nData categories  \n---  \nIP addresses  \nDevice identifiers  \nNon-precise location data  \nPrecise location data  \nUsers\u2019 profiles  \n  \nAdSpirit AdServerIAB TCF\n\nAdSpirit AdServer stores cookies with a maximum duration of about this many\ndays: 30. These cookies may be refreshed.\n\nPrivacy policyLegitimate interest disclosure\n\nPurposes| Retention  \n---|---  \nStore and/or access information on a device| 60 day(s)  \nUse limited data to select advertising| 14 day(s)  \nCreate profiles for personalised advertising| 60 day(s)  \nUse profiles to select personalised advertising| 60 day(s)  \nMeasure advertising performance| 14 day(s)  \nUnderstand audiences through statistics or combinations of data from different\nsources| 60 day(s)  \nSpecial purposes| Retention  \n---|---  \nEnsure security, prevent and detect fraud, and fix errors| 60 day(s)  \nDeliver and present advertising and content| 60 day(s)  \nFeatures  \n---  \nIdentify devices based on information transmitted automatically  \nData categories  \n---  \nIP addresses  \nDevice characteristics  \nDevice identifiers  \nProbabilistic identifiers  \nBrowsing and interaction data  \nNon-precise location data  \nUsers\u2019 profiles  \nPrivacy choices  \n  \nAdTheorentIAB TCF\n\nAdTheorent stores cookies with a maximum duration of about this many days:\n730. These cookies may be refreshed.\n\nPrivacy policyLegitimate interest disclosure\n\nPurposes| Retention  \n---|---  \nStore and/or access information on a device| 365 day(s)  \nUse limited data to select advertising| 365 day(s)  \nCreate profiles for personalised advertising| 365 day(s)  \nUse profiles to select personalised advertising| 365 day(s)  \nMeasure advertising performance| 365 day(s)  \nUnderstand audiences through statistics or combinations of data from different\nsources| 365 day(s)  \nDevelop and improve services| 365 day(s)  \nFeatures  \n---  \nMatch and combine data from other data sources  \nLink different devices  \nIdentify devices based on information transmitted automatically  \nSpecial features  \n---  \nUse precise geolocation data  \nActively scan device characteristics for identification  \nData categories  \n---  \nIP addresses  \nDevice characteristics  \nDevice identifiers  \nProbabilistic identifiers  \nNon-precise location data  \nPrecise location data  \nPrivacy choices  \n  \n1-10 / 317\n\nSkip to contentSkip to site index\n\nMind\n\nSUBSCRIBE FOR \u20ac0.50/WEEKLog in\n\nTuesday, April 30, 2024\n\nToday\u2019s Paper\n\nSUBSCRIBE FOR \u20ac0.50/WEEK\n\nMind|A Peek Inside the Brains of \u2018Super-Agers\u2019\n\nhttps://www.nytimes.com/2024/04/29/well/mind/super-agers-study.html\n\nAdvertisement\n\nSKIP ADVERTISEMENT\n\nSupported by\n\nSKIP ADVERTISEMENT\n\n# A Peek Inside the Brains of \u2018Super-Agers\u2019\n\nNew research explores why some octogenarians have exceptional memories.\n\nCredit...Getty Images\n\nBy Dana G. Smith\n\nApril 29, 2024\n\nWhen it comes to aging, we tend to assume that cognition gets worse as we get\nolder. Our thoughts may slow down or become confused, or we may start to\nforget things, like the name of our high school English teacher or what we\nmeant to buy at the grocery store.\n\nBut that\u2019s not the case for everyone.\n\nFor a little over a decade, scientists have been studying a subset of people\nthey call \u201csuper-agers.\u201d These individuals are age 80 and up, but they have\nthe memory ability of a person 20 to 30 years younger.\n\nSubscribe to The Times to read as many articles as you like.\n\nDana G. Smith is a Times reporter covering personal health, particularly aging\nand brain health. More about Dana G. Smith\n\nAdvertisement\n\nSKIP ADVERTISEMENT\n\n## Comments 459\n\nA Peek Inside the Brains of \u2018Super-Agers\u2019Skip to Comments\n\nShare your thoughts.\n\nThe Times needs your voice. We welcome your on-topic commentary, criticism and\nexpertise. Comments are moderated for civility.\n\nEnjoy unlimited access to all of The Times.\n\nSee subscription options\n\n", "frontpage": false}
{"aid": "40206742", "title": "Mactop Released (Open Source)", "url": "https://github.com/context-labs/mactop", "domain": "github.com/context-labs", "votes": 2, "user": "carsenk", "posted_at": "2024-04-30 02:46:36", "comments": 0, "source_title": "GitHub - context-labs/mactop: mactop - Apple Silicon Monitor Top written in pure Go Lang! Under 1,000 lines of code.", "source_text": "GitHub - context-labs/mactop: mactop - Apple Silicon Monitor Top written in\npure Go Lang! Under 1,000 lines of code.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ncontext-labs / mactop Public\n\n  * Notifications\n  * Fork 0\n  * Star 6\n\nmactop - Apple Silicon Monitor Top written in pure Go Lang! Under 1,000 lines\nof code.\n\n### License\n\nMIT license\n\n6 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# context-labs/mactop\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n14 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ngoreleaserbotBrew formula update for mactop version v0.1.4Apr 30, 20245e2eaca\n\u00b7 Apr 30, 2024Apr 30, 2024\n\n## History\n\n35 Commits  \n  \n### .DS_Store\n\n|\n\n### .DS_Store\n\n| Fix GPU data for M2 apple silicon| Apr 27, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Rebrand to mactop| Apr 30, 2024  \n  \n### .goreleaser.yaml\n\n|\n\n### .goreleaser.yaml\n\n| Rebrand to mactop| Apr 30, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| goasitop init| Apr 20, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Rebrand to mactop| Apr 30, 2024  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| Rebrand to mactop| Apr 30, 2024  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| goasitop init| Apr 20, 2024  \n  \n### mactop.rb\n\n|\n\n### mactop.rb\n\n| Brew formula update for mactop version v0.1.4| Apr 30, 2024  \n  \n### main.go\n\n|\n\n### main.go\n\n| v0.1.4| Apr 30, 2024  \n  \n### screenshot.png\n\n|\n\n### screenshot.png\n\n| Fixes closing and polling rate| Apr 21, 2024  \n  \n### screenshot2.png\n\n|\n\n### screenshot2.png\n\n| Added layouts and resizing support| Apr 23, 2024  \n  \n## Repository files navigation\n\n# mactop\n\nmactop is a terminal-based monitoring tool \"top\" designed to display real-time\nmetrics for Apple Silicon chips. It provides a simple and efficient way to\nmonitor CPU and GPU usage, E-Cores and P-Cores, power consumption, and other\nsystem metrics directly from your terminal!\n\n## Compatibility\n\n  * Apple Silicon Only (ARM64)\n  * macOS Monterey 12.3+\n\n## Features\n\n  * Apple Silicon Monitor Top written in Go Lang (Under 1,000 lines of code)\n  * Real-time CPU and GPU power usage display.\n  * Detailed metrics for different CPU clusters (E-Cores and P-Cores).\n  * Memory usage and swap information.\n  * Network usage information\n  * Disk Activity Read/Write\n  * Easy-to-read terminal UI\n  * Two layouts: default and alternative\n  * Support for all Apple Silicon models.\n\n## Install via Homebrew\n\nHelp get us on the official Homebrew formulas by giving us a star! mactop\n\n    \n    \n    brew tap context-labs/mactop https://github.com/context-labs/mactop\n    \n    \n    brew install mactop\n    \n    \n    sudo mactop\n\n## Installation\n\nTo install mactop, follow these steps:\n\n  1. Ensure you have Go installed on your machine. If not, you can install it by following the instructions here: Go Installation Guide.\n\n  2. Clone the repository:\n    \n        git clone https://github.com/context-labs/mactop.git cd mactop\n\n  3. Build the application:\n    \n        go build\n\n  4. Run the application:\n    \n        sudo ./mactop\n\n## Usage\n\nAfter installation, you can start mactop by simply running:\n\n    \n    \n    sudo ./mactop\n\nsudo is required to run mactop\n\nUse the following keys to interact with the application:\n\n  * q: Quit the application.\n  * r: Refresh the UI data manually.\n  * l: Toggle the current layout.\n\n## Contributing\n\nContributions are what make the open-source community such an amazing place to\nlearn, inspire, and create. Any contributions you make are greatly\nappreciated.\n\n  1. Fork mactop\n  2. Create your Feature Branch (git checkout -b feature/AmazingFeature)\n  3. Commit your Changes (git commit -m 'Add some AmazingFeature')\n  4. Push to the Branch (git push origin feature/AmazingFeature)\n  5. Open a Pull Request\n\n## What does mactop use to get real-time data?\n\n  * sysctl: For CPU model information\n  * system_profiler: For GPU Core Count\n  * psutil: For memory and swap metrics\n  * powermetrics: For majority of CPU, GPU, Network, and Disk metrics\n\n## License\n\nDistributed under the MIT License. See LICENSE for more information.\n\n## Contact\n\nCarsen Klock - @carsenklock\n\nProject Link: https://github.com/context-labs/mactop\n\n## Acknowledgements\n\n  * termui for the terminal UI framework.\n  * gopsutil for system memory monitoring.\n  * asitop for the original inspiration!\n\n## About\n\nmactop - Apple Silicon Monitor Top written in pure Go Lang! Under 1,000 lines\nof code.\n\n### Topics\n\ngo macos golang apple terminal monitoring top arm64 cpu-monitoring gpu-\nmonitoring apple-silicon asitop\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\nCustom properties\n\n### Stars\n\n6 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 13\n\nv0.1.4 Latest\n\nApr 30, 2024\n\n\\+ 12 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * metaspartan Carsen Klock\n  * goreleaserbot GoReleaser Bot\n\n## Languages\n\n  * Go 97.7%\n  * Ruby 2.3%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
{"aid": "40206752", "title": "Why SQLite Uses Bytecode", "url": "https://sqlite.org/draft/whybytecode.html", "domain": "sqlite.org", "votes": 7, "user": "todsacerdoti", "posted_at": "2024-04-30 02:48:43", "comments": 0, "source_title": "Why SQLite Uses Bytecode", "source_text": "Why SQLite Uses Bytecode\n\n*** DRAFT ***\n\n  * Home\n  * Menu\n  * About\n  * Documentation\n  * Download\n  * License\n  * Support\n  * Purchase\n  * Search\n\n  * About\n  * Documentation\n  * Download\n  * Support\n  * Purchase\n\nWhy SQLite Uses Bytecode\n\n\u25ba Table Of Contents\n\n1\\. Introduction\n\n1.1. How To Provide Feedback\n\n1.2. Definition Of \"Bytecode\"\n\n1.3. Definition Of \"Abstract Syntax Tree\" or \"AST\"\n\n1.4. Dataflow Programming\n\n2\\. Advantages To Compiling Into Bytecode\n\n2.1. Bytecode Is Easier To Understand\n\n2.2. Bytecode Is Easier To Debug\n\n2.3. Bytecode Can Be Run Incrementally\n\n2.4. Bytecode Is Smaller\n\n2.5. Bytecode Is Faster\n\n3\\. Advantages Of Compiling Into A Tree Of Objects\n\n3.1. Query Planning Decisions Can Be Deferred Until Runtime\n\n3.2. Dataflow Programs Are Easy To Parallelize\n\n# 1\\. Introduction\n\nEvery SQL database engine works in roughly the same way: It first translates\nthe input SQL text into a \"prepared statement\". Then it \"executes\" the\nprepared statement to generate a result.\n\nA prepared statement is an object that represents the steps needed accomplish\nthe input SQL. Or, to think of it in another way, the prepared statement is\nthe SQL statement translated into a form that is more easily understood by the\ncomputer.\n\nIn SQLite, a prepared statement is an instance of the sqlite3_stmt object. In\nother systems, the prepared statement is usually an internal data structure\nthat is not directly visible to the application programmer. Developers of\nother SQL database engines do not necessary call these objects \"prepared\nstatements\". But such objects exists, whatever they might be called. This\npaper will use the term \"prepared statement\".\n\nThere are countless ways of implementing a prepared statement. This paper will\nlook at the two most common methods:\n\n  1. Bytecode \u2192 The input SQL is translated into a virtual machine language that is then run by a virtual machine interpreter. This is the technique used by SQLite.\n\n  2. Tree-Of-Objects \u2192 The input SQL is translated in a tree of objects that represent the processing to be done. The SQL is executed by walking this tree. This is the technique used by MySQL and PostgreSQL.\n\nThere are advantages and disadvantages to each of these representations of a\nprepared statement. The purpose of this paper is to articulate some of those\nadvantages and disadvantages.\n\n## 1.1. How To Provide Feedback\n\nThis document is written from the perspective of the original author of\nSQLite. If you disagree with any of the opinions offered in this document, you\nare welcomed to offer corrections and/or contrary views on the SQLite Forum.\nOr you can email the author directly.\n\n## 1.2. Definition Of \"Bytecode\"\n\nThe bytecode generated by SQLite might be a little different from what many\nreaders think of as bytecode. The bytecode used (for example) by the Java\nvirtual machine or by WebAssembly consists almost entirely of low-level\noperations, similar to what physical CPUs implement: basic math operators,\ncomparisons, conditional jumps, and instructions to move content between\ndifferent memory locations. SQLite bytecode has these kinds of low-level\ninstructions, too. But SQLite bytecode also contains some high-level\noperations that are specific to the needs of a database engine. Here are just\na few examples:\n\n  * OP_Column \u2192 Extract the value from the N-th column of the database row that a particular cursor is currently pointing at.\n\n  * OP_CreateBtree \u2192 Allocate space for a new B-Tree in the database file.\n\n  * OP_ParseSchema \u2192 Reread and reparse all or part of the the sqlite_schema table and refresh internal symbol tables accordingly.\n\n  * OP_SeekGE \u2192 Move a cursor on a particular B-Tree to the first entry that is greater than or equal to a given key.\n\n  * OP_Next \u2192 Advance a cursor on a particular B-Tree to the next entry in the B-Tree and jump, or fall through if there are no more entries in that B-Tree.\n\nIn other words, the \"bytecode\" used by SQLite is not so much a set of CPU\ninstructions as it is a list of database primitives that are to be run in a\nparticular order.\n\n## 1.3. Definition Of \"Abstract Syntax Tree\" or \"AST\"\n\nAn \"Abstract Syntax Tree\" or AST is a data structure that describes a program\nor statement in some kind of formal language. In our context, the formal\nlanguage is SQL. An AST is typically implemented as a tree of objects where\neach object represents one small part of the overall SQL statement. ASTs\nemerge naturally from parsers for formal languages. The usual technique is to\nuse an LALR(1) parser. With such a parser, each terminal symbol holds metadata\nthat will become a leaf of the AST, and each non-terminal symbol holds\nmetadata that will become a sub-branch of the overall AST. As rules of the\ngrammar are \"reduced\" by the parser, new nodes of the AST are allocated and\nconnected to subnodes. After the parse completes, the start-symbol of the\ngrammar is left holding the root of the AST.\n\nAn AST is a tree of objects. But an AST is not a suitable form for a prepared\nstatement. After being generated, an AST first needs to be transformed in\nvarious ways before it can executed. Symbols need to be resolved. Semantic\nrules need to be checked. Optimizations need to be applied that transform\ninput SQL statement into different forms that execute more quickly. Finally,\nthe AST needs to be translated into an alternative representation that is more\namenable to execution.\n\nSome people refer to the tree of objects that is used as the executable form\nfor MySQL and PostgreSQL as an AST. The is probably a misuse of the term\n\"AST\", because by the time the tree of objects is ready to be executed, it has\nbeen changed so much that it has little resemblance to the original SQL text.\nThe confusion arises in part because both the final prepared statement object\nand the original AST are both trees of objects. The usual technique is for the\noriginal AST that comes directly out of the parser to be transformed little by\nlittle, in multiple passes, until at the end it is fully converted into an\ntree of objects that is no longer strictly an AST but that can be evaluated to\ngenerate a result. There is not necessarily a clear point during this process\nwhen the tree-of-objects ceases to be an AST and becomes a prepared statement\ninstead. And because there is no clear boundary between an AST and a prepared\nstatement, people often refer to a prepared statement that is represented as a\ntree of objects as an \"AST\", even though that description is not precise.\n\n## 1.4. Dataflow Programming\n\nDataflow programming is a style of programming in which individual nodes\nspecialize in doing one small part of the overall computation. Each node\nreceives inputs from other nodes and sends its output to other nodes. Thus the\nnodes form a directed graph that carry inputs into outputs.\n\nA \"dataflow program\" is perhaps a better description than \"AST\" for the tree\nof objects that an SQL database engine uses as a prepared statement.\n\n# 2\\. Advantages To Compiling Into Bytecode\n\nSQLite compiles to bytecode, and the SQLite developers are very happy with\nthis approach. Here is why:\n\n## 2.1. Bytecode Is Easier To Understand\n\nA flat list of opcodes can be easily printed to see exactly how an SQL\nstatement is being implemented. This is what happens in SQLite when you\npreface an SQL statement with the \"EXPLAIN\" keyword: Instead of actually\nrunning the SQL, the result is a listing of the bytecode that would have been\nused to implement that SQL.\n\nBytecode lends itself to this because a bytecode program is easily represented\nas a table. In SQLite bytecode, each instruction has one opcode and five\noperands. Thus a prepared statement can be rendered as if it were a query\nagainst a six-column table.\n\nA tree-of-objects representation is more difficult to publish in a human-\nreadable form. The objects that comprise the tree tend to all be very\ndifferent, and thus it is tricky to come up with a consistent and simple table\nrepresentation with which to display the objects. Any any such table\nrepresentation that you do come up with would almost certainly have more than\nsix column, probably many more. The problem of rendering a tree-of-objects as\na table is sufficiently difficult that nobody does it, as far as I know.\nHence, no tree-of-objects database engine provides the level of detail in\ntheir \"EXPLAIN\" output that SQLite provides.\n\n## 2.2. Bytecode Is Easier To Debug\n\nBytecode represents a clear separation between front-end parsing and analyze\nand back-end evaluation of an SQL statement. When problems arise (incorrect\nanswers and/or poor performance), the developers can examine the bytecode to\nquickly isolate the source of the trouble to either the front-end analysis or\nthe back-end data storage sections of the product.\n\nIn debugging builds of SQLite, the PRAGMA vdbe_trace=ON; command will cause a\ntrace of the bytecode execution to appear on the console.\n\n## 2.3. Bytecode Can Be Run Incrementally\n\nSQL statements written in bytecode can be evaluated incrementally. For\nexample, a statement can be run until it generates just its first row of\noutput. The statement then pauses until it is stepped again. It is not\nnecessary to run the statement to completion before examining the first row of\noutput.\n\nThis is more difficult to achieve in a tree-of-objects design. When the\nprepared statement is a tree-of-objects, execution is normally accomplished by\nwalking the tree. To pause the statement in the middle of a computation means\nunwinding the stack back up to the caller, all the while saving enough state\nto resume evaluation where it last left off. This is not impossible to do, but\nit is sufficiently difficult that I have never seen it actually done.\n\nMost SQL database engines do not really need to do incremental execution of\nprepared statements because most SQL database engines are client/server. In a\nclient/server engines, a single SQL statement is sent to the server, then the\ncomplete reply comes back over the wire all at once. Thus each statement runs\nto completion in a single go. But SQLite is not client/server. SQLite is a\nlibrary that runs in the same address space and using the same stack as the\napplication. Being able to easily and reliably perform incremental execution\nof an SQL statement is important to SQLite.\n\n## 2.4. Bytecode Is Smaller\n\nThe bytecode generated by SQLite is usually smaller than the corresponding AST\ncoming out of the parser. During initial processing of SQL text (during the\ncall to sqlite3_prepare() and similar) both the AST and the bytecode exist in\nmemory at the same time and so more memory is used then. But that is a\ntransient state. The AST is quickly discarded and its memory recycled, even\nbefore the call to sqlite3_prepare() returns, so that the resulting prepared\nstatement ends up consuming less memory in its bytecode representation than it\ndid as an AST. This is important because calls to sqlite3_prepare() are\ntransient, but prepared statements are often cached for possible reuse and\npersist in memory for a long time.\n\n## 2.5. Bytecode Is Faster\n\nI believe that a bytecode representation of a prepared statement runs faster,\nbecause fewer decisions need to be made for each step of the computation.\nEmphasis on \"believe\" in the previous sentence \u2192 it is difficult to verify\nthis claim experimentally since nobody has ever put in the multiple years of\neffort necessary to generate equivalent bytecode and tree-of-object\nrepresentations of a prepared statement to see which one really does run\nfaster. We do know that SQLite is very fast, but we do not have good side-by-\nside comparisons with other SQL databases since the other databases spend a\nlot of time doing client/server message processing, and it is difficult to\nuntangle the message round-trip overhead from the actual processing time.\n\n# 3\\. Advantages Of Compiling Into A Tree Of Objects\n\nEven though the SQLite developers think that the bytecode approach is best, at\nleast for the use cases the SQLite tries to fill, the tree-of-objects approach\nto processing SQL does have some advantages over bytecode. There are always\ntradeoffs.\n\n## 3.1. Query Planning Decisions Can Be Deferred Until Runtime\n\nWhen a prepared statement is bytecode, once the bytecode has been generated,\nthe algorithm is fixed - it is \"baked in\" - and becomes difficult to modify as\nnew information about the shape of the information being retrieved becomes\navailable. This is not the case with a tree-of-objects prepared statement. A\ntree-of-objects is easier to modify on-the-fly. The query plan is mutable and\ncan be tweaked as it is running, based on the progress of the query. Thus a\nquery can be dynamically self-tuning.\n\n## 3.2. Dataflow Programs Are Easy To Parallelize\n\nIn a dataflow program, each processing node can be assigned to a different\nthread. There needs to be some kind of threadsafe queuing mechanism for\ntransferring intermediate results from one node to the next. But no\nsynchronization primitives are typically needed within each node of the\nprogram. Node schedule is trivial: A node becomes eligible to run when it has\ndata available and there is space in its output queue.\n\nThis is an important consideration for database engines that are designed to\nrun large analytic queries (OLAP) on large multi-core servers. The primary\nfocus of SQLite is transaction processing (OLTP) on the internet-of-things, so\nthere is less need to represent prepared statements as dataflow programs in\nSQLite.\n\nThis page last modified on 2024-04-29 17:33:09 UTC\n\n*** DRAFT ***\n\n", "frontpage": true}
{"aid": "40206760", "title": "Implementing Your Own Garbage Collector in Java", "url": "https://coderoasis.com/custom-java-garbage-collector/", "domain": "coderoasis.com", "votes": 1, "user": "SudoSH", "posted_at": "2024-04-30 02:49:23", "comments": 0, "source_title": "Just a moment...", "source_text": "Just a moment...\n\n# coderoasis.com\n\n## Verifying you are human. This may take a few seconds.\n\ncoderoasis.com needs to review the security of your connection before\nproceeding.\n\nVerification successful\n\nWaiting for coderoasis.com to respond...\n\nRay ID: 87c4dd834fd03679\n\nPerformance & security by Cloudflare\n\n", "frontpage": false}
{"aid": "40206763", "title": "Codapi \u2013 Interactive code examples for documentation, education and fun", "url": "https://github.com/nalgeon/codapi", "domain": "github.com/nalgeon", "votes": 7, "user": "nalgeon", "posted_at": "2024-04-30 02:49:59", "comments": 0, "source_title": "GitHub - nalgeon/codapi: Interactive code examples for documentation, education and fun", "source_text": "GitHub - nalgeon/codapi: Interactive code examples for documentation,\neducation and fun\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nnalgeon / codapi Public\n\n  * Notifications\n  * Fork 43\n  * Star 1k\n\nInteractive code examples for documentation, education and fun\n\ncodapi.org\n\n### License\n\nApache-2.0 license\n\n1k stars 43 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# nalgeon/codapi\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n5 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndeininginfr: bump github action workflows (#11)Mar 28, 2024f250034 \u00b7 Mar 28,\n2024Mar 28, 2024\n\n## History\n\n41 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| infr: bump github action workflows (#11)| Mar 28, 2024  \n  \n### cmd\n\n|\n\n### cmd\n\n| impr: goreleaser-compatible version, commit and date| Jan 17, 2024  \n  \n### configs\n\n|\n\n### configs\n\n| impr: modular sandbox configs| Dec 4, 2023  \n  \n### docs\n\n|\n\n### docs\n\n| doc: codapi 0.8.0| Mar 10, 2024  \n  \n### images/alpine\n\n|\n\n### images/alpine\n\n| feat: initial public version| Nov 24, 2023  \n  \n### internal\n\n|\n\n### internal\n\n| fix: typos in comments (#10)| Mar 28, 2024  \n  \n### .goreleaser.yaml\n\n|\n\n### .goreleaser.yaml\n\n| refactor: configs dir| Dec 4, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| doc: apache-2.0 license| Nov 25, 2023  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| impr: goreleaser-compatible version, commit and date| Jan 17, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| doc: readme| Dec 17, 2023  \n  \n### codapi.service\n\n|\n\n### codapi.service\n\n| build: publish workflow| Nov 30, 2023  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| feat: support different versions of the same box| Dec 20, 2023  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| feat: initial public version| Nov 24, 2023  \n  \n## Repository files navigation\n\n# Interactive code examples\n\nfor documentation, education and fun \ud83c\udf89\n\nCodapi is a platform for embedding interactive code snippets directly into\nyour product documentation, online course or blog post.\n\n    \n    \n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 def greet(name): \u2502 \u2502 print(f\"Hello, {name}!\") \u2502 \u2502 \u2502 \u2502 greet(\"World\") \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Run \u25ba Edit \u2713 Done \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Hello, World! \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCodapi manages sandboxes (isolated execution environments) and provides an API\nto execute code in these sandboxes. It also provides a JavaScript widget\ncodapi-js for easier integration.\n\nHighlights:\n\n  * Automatically converts static code examples into mini-playgrounds.\n  * Lightweight and easy to integrate.\n  * Sandboxes for any programming language, database, or software.\n  * Open source. Uses the permissive Apache-2.0 license.\n\nFor an introduction to Codapi, see this post: Interactive code examples for\nfun and profit.\n\n## Installation\n\nSee Installing Codapi for details.\n\n## Usage (API)\n\nCall /v1/exec to run the code in a sandbox:\n\n    \n    \n    POST https://api.codapi.org/v1/exec content-type: application/json { \"sandbox\": \"python\", \"command\": \"run\", \"files\": { \"\": \"print('hello world')\" } }\n\nsandbox is the name of the pre-configured sandbox, and command is the name of\na command supported by that sandbox. See Adding a sandbox for details on how\nto add a new sandbox.\n\nfiles is a map, where the key is a filename and the value is its contents.\nWhen executing a single file, it should either be named as the command\nexpects, or be an empty string (as in the example above).\n\nResponse:\n\n    \n    \n    HTTP/1.1 200 OK Content-Type: application/json { \"id\": \"python_run_9b7b1afd\", \"ok\": true, \"duration\": 314, \"stdout\": \"hello world\\n\", \"stderr\": \"\" }\n\n  * id is the unique execution identifier.\n  * ok is true if the code executed without errors, or false otherwise.\n  * duration is the execution time in milliseconds.\n  * stdout is what the code printed to the standard output.\n  * stderr is what the code printed to the standard error, or a compiler/os error (if any).\n\n## Usage (JavaScript)\n\nSee codapi-js to embed the JavaScript widget into a web page. The widget uses\nexactly the same API as described above.\n\n## Contributing\n\nContributions are welcome. For anything other than bugfixes, please first open\nan issue to discuss what you want to change.\n\nBe sure to add or update tests as appropriate.\n\n## License\n\nCopyright 2023 Anton Zhiyanov.\n\nThe software is available under the Apache-2.0 license.\n\n## Stay tuned\n\n\u2605 Subscribe to stay on top of new features.\n\n## About\n\nInteractive code examples for documentation, education and fun\n\ncodapi.org\n\n### Topics\n\nplayground snippets sandbox interactive-snippets code-playground interactive-\ncode\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\n### Stars\n\n1k stars\n\n### Watchers\n\n10 watching\n\n### Forks\n\n43 forks\n\nReport repository\n\n## Releases 5\n\n0.8.0 Latest\n\nMar 10, 2024\n\n\\+ 4 releases\n\n## Contributors 3\n\n  * nalgeon Anton Zhiyanov\n  * deining Andreas Deininger\n  * iamdeuterium Stanislav Fesenko\n\n## Languages\n\n  * Go 98.8%\n  * Makefile 1.1%\n  * Dockerfile 0.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
{"aid": "40206770", "title": "Save the Web by Being Nice", "url": "https://sheep.horse/2024/4/save_the_web_by_being_nice.html", "domain": "sheep.horse", "votes": 8, "user": "todsacerdoti", "posted_at": "2024-04-30 02:51:50", "comments": 0, "source_title": "Save the Web by Being Nice", "source_text": "Save the Web by Being Nice\n\n# Save the Web by Being Nice\n\nAndrew Stephens, Tuesday the 30^th of April, 2024 in Rant\n\nA common complaint amongst the old guard bloggers is that the old web as we\nknew it is dying. This is false.\n\nThe old web has actually been dead for many years; killed by the rise of\nsocial media, the lure of video, the corruption of SEO, and the double threat\nposed by mobile devices being both effectively useless for text content\ncreation and difficult to build pages for that also look good on desktop\nscreens.\n\nThe good news is that the web isn't actually dead dead, just mostly dead.\n\nAnd mostly dead, as well all know, is partly alive.\n\nThere are still pockets of the old web out there. Blogs and forums devoted to\narcane subjects, fan sites for nearly forgotten TV shows, compilations of\nlocal histories or just web toys and gamesooh.directory is a particularly good\ncollection of such sites if you want to dive in..\n\nThe very best thing to keep the web partly alive is to maintain some content\nyourself - start a blog, join a forum and contribute to the conversation, even\npodcast if that is your thing. But that takes a lot of time and not everyone\nhas the energy or the knowhow to create like this.\n\nThe second best thing to do is to show your support for pages you enjoy by\nbeing nice and making a slight effort. There are different levels of Niceness\nbut roughly from least to most effort:\n\n  * Liking or upvoting a URL on a forum or social media that someone else posted.\n  * Commenting on a URL somebody else posted saying how much you enjoyed the content.\n  * Posting a URL on social media/discord server yourself, suggesting that others might also like to read it.\n  * Dropping a quick note of appreciation to the author via email or DM.\n  * Actually paying money for the content via Patreon, etc.\n\nYou will notice that a lot of my suggestions actually use social media -\nsomething I profess to dislike. I have two defenses to this, firstly I am a\nhuuuge hypocrite but secondly social media would be a lot less objectionable\nif it didn't try to embrace everything it one place. Posting URLs to Facebook\nor TwitterAt this point it is trite to state that X is a stupid name, but X\nreally is a stupid name. or Discord exposes your friends to pages they might\nfind interesting while cracking the shell to the outside world just a little.\n\nIf everyone took the time to Be Nice to just one site a day then everyones\nfeeds would be filled with all sorts of interesting stuff.\n\nI have been trying to live by this advice for a while now - posting and\n\"boosting\" links on Mastodon, and occasionally contacting authors and\npodcasters directly to let them know that at least one person has enjoyed what\nthey are doing. My experience has been nothing but positive.\n\nA Nice comment I left recently on a new podcast. In retrospect I could have\nbeen even Nicer.\n\nOn the other side, here is an example of a incredibly Nice email I received\nthis week.\n\nThe email probably took the sender less than a minute to compose but really\nmade my day. Just stunningly Nice!\n\n(I am not fishing for people to do this to me - play it forward to the next\nworthy site you read)\n\nRead similar articles Rant\n\n", "frontpage": true}
{"aid": "40206782", "title": "The Stabilizer Problem", "url": "https://ryan.norbauer.com/journal/the-stabilizer-problem/", "domain": "norbauer.com", "votes": 1, "user": "zdw", "posted_at": "2024-04-30 02:53:55", "comments": 0, "source_title": "the Stabilizer Problem", "source_text": "the Stabilizer Problem\n\nKeyboard Academy 2024-04-27\n\n# the Stabilizer Problem\n\nby Ryan Norbauer\n\nMY DESIGN WORK\n\nI create escapist luxury computer keyboards at Norbauer & Co.\n\nStabilizers have long been the great unsolved problem in the world of\nkeyboards. Their function is straightforward; they prevent longer keys (such\nas the spacebar) from seesawing upward at one end when the opposite end is\npressed down. Current solutions serve that purpose well enough, but the issue\nis: they all sound awful. Taeha Kim's face in response to the rattle of an\nunmodified traditional stabilizer\u2014in a video it amuses me to note has been\nviewed millions of times\u2014sums up how all of us keyboard nerds feel.\n\nFor decades this has been the core absurdity of luxury typing: you can buy a\n$4,000 hyper-engineered super-premium board with exotic materials, rare hybrid\nswitches, hidden fasteners, leaf springs, and custom gaskets interfacing every\nsurface. Yet among its most critical components can be found a fundamentally\nflawed mechanism that has seen little refinement since its inception.\n\nHobbyist modders thus spend long hours hand-lubricating and tuning their\nstabilizers to eliminate rattle, painstakingly brushing high-viscosity grease\ninto the interstices between parts.\n\nThis chore requires a delicate dance between desirable dampening and unwanted\nkey sluggishness. It works, but it's an ugly hack\u2014an acoustic band-aid that is\ntricky to perform consistently and whose efficacy erodes over time as the\ngrease seeps away.\n\nBecause it is fiddly and annoying, it is easy to mistake lubing for a fancy\natelier process that is part of the very definition of a high-end keyboard.\nBut I've always suspected that it's really just a ham-fisted way to compensate\nfor bad engineering\u2014effectively, a concession of defeat. After five years\ninquiring deeply into this question, including multiple patents issued and\npending and project expenses running well into the six figures, I can now with\nsome confidence confirm those early suspicions.\n\nEspecially since the band-aid solution is more or less serviceable, though,\none might reasonably ask about why anyone should care so much. The answer in\nmy case is that I have for some years been on a mission to create what is, to\nmy sensibilities, the perfect luxury keyboard\u2014one that anyone, whether a\nhardcore hobbyist or keyboard neophyte, can buy, plug in, and immediately and\nindefinitely enjoy. That keyboard, called the Seneca, is meant to be my\nexpression of the best typing experience obtainable, and every component of it\nis fully custom to my original designs. It's about some very sentimental\nartistic and emotional goals, and so it's emphatically not about engineering\nperfection or technical accomplishments for their own sake. But, for a project\nin which I've invested so much of myself, I simply felt that poorly engineered\nstabilizers could have no home.\n\nFor this reason, I\u2019ve always known that noisy stabilizers were a problem that\nNorbauer & Co. would somehow eventually have to invent its way out of, having\nto find an approach better than anything that yet existed. I had done\nsomething similar before with the Heavy Grail, heedlessly setting off to\nconquer a technical mountain that would prove a far steeper climb than I would\nhave imagined, but ultimately successfully doing what I set out to. What I\ndidn't realize at the outset this new journey, of course, was that I would\u2014in\nsome dubious mixture of folly and obsessive perfectionism\u2014end up\nuncontrollably traversing its difficult terrain three times over.\n\nAs you'll see, I brought no particular engineering brilliance to this problem\nand thus can claim no glory from any success that may have resulted. What got\nme to the ultimate solution was little more than recklessly training a\npersonal cash bazooka on the question, and being doggedly, irrationally\u2014truly\ninsanely\u2014persistent in my conviction that there must be a perfect answer.\n\n## The basic problem and some terminology\n\nBelow is the architecture of a traditional Cherry-type stabilizer. A keycap is\nconnected to two sliders via a press fit onto their cruciform mounting points.\nThose sliders move up and down with the key travel, and a spring-loaded switch\n(also pressed into the keycap) is situated between the two stabilizing ends. A\nrotating wire clipped into the stabilizer housings has two extension arms that\ninsert into the two sliders, pulling them up and down together in tandem and\nthus creating the anti-seesaw effect.\n\nThere are two primary sources of unwanted sounds. I'll formalize some keyboard\ncommunity terminology here by calling the first rattle, which refers to the\nsound of the hard wire linkage striking against the hard plastic surfaces in\nthe interior of the slider. This is by far the most prominent and displeasing\nsource of stabilizer noise.\n\nRattle: wire bangs against slider\n\nThe second more subtle source of unwanted sound can be termed ticking, and it\nrefers to the sound of either the slider or wire moving against the housing.\n\nTicking: slider or wire bang against features in the housing\n\nThere is one additional complicating factor, which is that long keys like\nspacebars frequently vary between manufacturers in their stem spacing length.\nAny widely applicable stabilizer design must therefore accommodate a\nremarkable degree of dimensional variability.\n\n## Paradoxes and contradictions\n\nArmchair community speculation\u2014including indeed my own in the past\u2014has always\nheld that the unwanted noise of stabilizers comes from \"loose tolerances,\"\nwith the implication that this is due to manufacturer laziness or cost\noptimizations. \"Tolerance\" is an engineering term with a real and precise\nmeaning, but when used in this context what people generally really mean is\n\"loose fits.\" We're talking here about having large gaps between the moving\nparts that touch each other.\n\nIt is, in a sense, not a fundamentally untrue observation that fits are an\nimportant part of the issue. But were it down to gap size alone, changing a\nfew numbers on a spec sheet would have done the trick, and the problem would\nhave been solved long ago. The fact that it hasn't, in fact, been solved long\nago is therefore instructive.\n\nIndeed, if we are to design a perfect stabilizer, we must first confront a\ncontradiction in our requirements: we need the mechanism to be at once loose\nand tight. It must be \"tight\" in the sense that there must be no backlash or\nmovement between parts that could create unwanted sounds, but also in the\nsense that it must accurately and with minimal wobble perform the anti-seesaw\naction that is the foundational premise of a key stabilizer. These objectives\ntypically require small gaps between mating parts. But the stabilizer\nmechanism must at the same time also be \"loose\" in the sense that the key must\nmove up and down very freely to avoid any chance of binding, which is when the\nkey ceases to move due to accumulated forces within the system (most commonly\ncausing the keycap to fail to pop freely back up after being depressed). To\nachieve this objective, large gaps between mating parts are required. Thus the\ncontradiction.\n\nIn fact, the phenomenon of binding\u2014or the tension between the objectives of\nsmall gap size and free movement\u2014turns out to be the primary obstacle to the\ncreation of a perfect stabilizer. There are standard ways of engineering\naround binding issues, and we'll explore in the next section why those are\nchallenging for stabilizers, but for now it's enough to observe that inherent\nin our design requirements is the sort of thing that makes for the most\ndifficult of engineering problems: two seemingly incompatible design\nobjectives.\n\nDesigners of existing stabilizers seem to accept as given the incompatibility\nof those objectives, understandably then choosing to favor a key that actually\nmoves up and down (loose fits) over one that is unusable but pleasantly silent\n(tight fits). And this is why we find in all existing stabilizers large gaps\nand rattle\u2014and a need for the unhappy grease band-aid.\n\n### Bearing ratio and the binding paradox\n\nIt may not be obvious on casual inspection, but a key stabilizer is\nessentially a sliding linear bearing: that is, a mechanism to provide\nunrestricted translational motion along an axis, while restricting motion in\nother axes. One common example of a linear bearing would be a rectangular\ncarriage that moves along the length of two cylindrical rods.\n\nAn example of a linear bearing\n\nLinear bearings are well characterized in the world of mechanical engineering\nand are subject to two important design considerations known as bearing ratio\nand binding ratio. These consider the geometric relationship of variables like\nthe distance of the bearing load to the length of the bearing. As with all\nengineering rules of thumb, these ratios give a practical handhold on much\nmore complex points of underlying physics. Rather than delve here into force\nvectors and friction calculations, which I don't understand fully myself\nanyway, suffice it to say that when the rules are violated, bearings become\nvery sensitive to friction and manufacturing variation, and the accumulation\nof forces inevitably leads to binding and other performance problems (See\nDesign of Machinery for a more in-depth discussion.)\n\nIt's enough to know that the geometric constraints of a traditional stabilized\nkey switch are a particularly bad scenario for the rule-of-thumb ratios: a\nvery short travel distance, with both a long \"moment arm\" (in this case, the\nkeycap) and large diameter relative to the bearing length. These are all the\nexact opposite of what we want for good linear bearing performance, and thus\nwhat we can expect from the theory is exactly what we find: most solutions are\nextremely sensitive to manufacturing variation and prone to binding.\n\n## Product development via dolorosa, in three acts\n\nOf course, I didn't really understand any of this when I embarked on an\nattempt to solve the stabilizer problem. I have no formal training in\nmechanical engineering, but I tend to believe in the power of empirical\ntinkering, and have often been surprised by how far that has been able to get\nme in many domains of life. It was some combination, then, of ignorance and\nyolo audacity that allowed me to think it could somehow be an easy problem to\nsolve.\n\nAnother reason for confidence was that, at the time I started this project\n(and still to some extent), most companies operating in the mechanical\nkeyboard space with the finances to produce expensive injection molding\ntooling were large mass-market consumer electronics brands, typically selling\nkeyboards in the $100-200 range. It was therefore reasonable to infer that\nmany design choices would have been made in the service of cost optimizations\nat large scale over extremely fussy matters of acoustic nuance to which most\ncasual retail consumers would be completely deaf anyway. So I naively assumed\nthat, merely by adopting a different strategy\u2014choosing to prioritize\nperformance and damn the unit costs\u2014I would easily go farther than others who\nhad preceded me. (\"Just tighten the tolerances.\")\n\nI knew in any case\u2014if you'll forgive the trite observation\u2014that from failure\nat least comes knowledge, and often the most important part of getting\nsomewhere is putting a first foot in front of the other. So I set the\nfollowing design objectives for a Norbauer-type stabilizer:\n\n  * Total elimination of rattle and ticking, without recourse to grease or lubrication\n  * Accommodation of dimensional variability across a wide range of keycap stem spacings (i.e., support for various keycap vendors)\n  * Free and smooth movement without any binding\n  * No significant alteration of the force curve of the switch when used without stabilization\n  * Compatibility with my own capacitive switches, which have a larger footprint than Cherry MX\n  * Tool-free install and removal of keycaps\n\n    * Compared to normal actuation, installation and removal of a keycap is a fairly violent process. There need to be end stops beyond normal switch travel, in both directions, allowing the keycap to be pressed into place and removed. And that process cannot deform the stabilizer wire linkage.\n\nIt should be noted that, by the time I began this project, the Seneca keyboard\nfor which these stabilizers were intended had already surmounted a number of\nhard engineering hurdles, not least of which was the creation of my own\ncapacitive PCB platform and firmware. The overall keyboard was, as I perceived\nit then, already 90% done. The stabilizers were merely \"the last little 10%\"\nto get the whole product to be perfect.\n\n### Act I: Tinkering and Bricolage\n\nOddly, my first foray into this problem around 2019 began with the realization\nthat a stabilizer is in fact a linear bearing (without knowing any of the\ncorresponding design rules of thumb). At a manufacturing trade show, I had\nseen some interesting \"self-lubricating\" plastic bushings for linear bearing\nrods, made solid out of a special injection-molded polymer, and so it occurred\nto me to give those a try. These seemed like a good option because the tiny\nwork envelope of keyboard stabilizers requires much smaller parts than are\ntypically manufactured as ball or roller bearings, which would otherwise be\nthe natural bearing type to use for something like this. I figured if we were\njust to create a cruciform mounting point to insert some low-friction\ncylindrical rods into the keycap stems, make those rods with precision, and\nthen insert those rods into parallel bushings inserted into a switch plate,\nall would be well; problem solved. I knew from the spec sheets that these\nbushings required a particular (tight) tolerance range for a free-running\nclearance fit, and in attempting to make rods to fit into them (and attach to\nthe keycap stems) I quickly learned the first lesson of how difficult the road\nahead would be.\n\nTiny parts are extremely expensive to prototype with accuracy and good surface\nfinishes. The only machine shop I could find that would make the prototype\nparts for me was one that specialized in manufacturing for Swiss watch makers,\nat the cost of some thousands of dollars for just a few test samples. This is\na fact I would go on learning as I would continue to refine my experimental\ndesigns. Even 3D printed parts made to the right tolerance and surfaces I\nneeded to get good information would be insanely expensive to produce, and\nthus the cost of iterating much higher than if the parts didn't have such\nminuscule mission-critical features. The below screenshot shows orders of\nparts that that, together, were all small enough to fit in the center of the\npalm of my hand, and I'd be embarrassed to admit how many such orders I've\nplaced over the past few years.\n\nI did also eventually get a Formlabs SLA printer for in-house prototyping, but\nthe surface finish and fine details were only good for very rough initial\nconcept exploration, requiring the outlandishly expensive Microfine printing\nprocess above for more detailed studies. SLA resins are all very susceptible\nto abrasion and so only a few switch actuations of the parts sliding against\neach other would change their dimensions and roughen their surfaces. Even\nthough the finishes right out of the printer were as good as almost any 3D\nprinting technology can yield, it was still much rougher than actual injection\nmolded parts. This would greatly increase friction and exaggerate binding\nissues, so I had to brush XTC-3D carefully onto the surfaces to get something\neven approaching a production surface and thus a more accurate sense of\nbinding. Maddeningly, this would in turn throw off the part dimensions and\ntighten up the gaps, itself an independent cause of unrepresentative binding.\nTest molding the parts in thermoplastics was an option, of course, but often\nat the cost of more than $10,000 per part, and quick-turn companies like\nProtolabs are extremely limited in their abilities to make parts with side\nactions and high gloss surface finishes, so most of what I wanted to try could\nonly be done with very slow test molding through traditional factories (a\nprocess generally with a multi-month turnaround).\n\nAt any rate, after the high-precision machined parts arrived months later to\ntest out my genius cylindrical bearing plan. Here is how that went:\n\n0:00\n\n/0:34\n\nWhat was I was experiencing without realizing it were the effects of an awful\nbearing and binding ratio along with kinematic over-constraint (on which more\nlater). All I knew at the time, though, was that it wasn't an auspicious\nbeginning.\n\nI floundered around for months, talking to various mechanical engineers and\nexamining if there might be ways to go back to the basic existing stabilizer\nparadigm and perform some modest tweaks to mitigate sound issues.\n\nA second dead-end, after consulting with an acoustics engineer, was a\ndiversion into materials science, as I tried to figure out if thermoplastics\nwith different properties (for use in molding the slider) could dampen the\nacoustic effect of contact between it and the housing or wire. I experimented\nwith 20 different materials, allowing for 190 different combinations. I\nquickly learned that there was an another infelicitous tradeoff here, offering\nonly a choice between good acoustic dampening accompanied by problems of drag\nand abrasion (as with HDPE, LDPE, TPE, and PP), or good resistance to abrasion\nand drag with awful acoustics (as with PA66, POM, PBT, and ABS). I even used\nurethane vacuum casting to make some prototype sliders in a TPE-like polymer,\nwith predictable results: a squeaky, draggy mess\u2014to say nothing of the\nimpossibility of fitting a keycap onto a squishy cruciform stem.\n\nOne later concept I came upon, which wasn't entirely off base, involved the\nuse of a Scotch yoke design otherwise similar to existing stabilizers. By\ninserting the wire from the side and allowing it to rotate in a slot within\nthe slider, it would be theoretically possible to have a smaller clearance gap\nbetween slider and wire than in front-insertion traditional stabilizers.\n\nThis got acceptable results, but it required very large gaps between slider\nand housing to get free movement without binding. Rattle was slightly\nimproved, but ticking was, if anything, worse than on traditional stabilizers.\nAnd, every time I would tighten up the interfaces to improve acoustics, the\nsystem would bind up.\n\nI then turned my attention back to a more traditional front-insertion design\nand focused on tightening gaps and thickening walls.\n\nYou may also have noted the use of spade-like mounting point for the keycaps,\nwhich was an attempt to accommodate for keycap width variation. Among other\nissues, the main trouble with this solution is that it's possible for the\nsliders to go into the keycaps at weird off-axis angles, and they don't always\nself-straighten. This puts additional forces into the system that lead to\nbinding.\n\nI also simultaneously tinkered with adding a rubber overmold to the interface\nbetween wire and slider in hopes of dampening the source of rattle, which was\nperhaps the most successful of my early experimental ideas.\n\nWith a sufficiently polished mold and shiny surface finish for the rubber\novermold on the wire, it was actually possible to get decent acoustic behavior\nout of this approach. Putting one's ear close to the stabilizer in operation,\nhowever, a bit of squeak was perceptible. This could be mitigated with a dry\ngraphite lubricant, but that would likely wear away with time and defeat the\nwhole purpose of lubricant-free stabilizers. I was also concerned about the\nrubber abrading over time and a corresponding degradation of performance.\nTicking was also still present, of course, since there was no rubber between\nhousing and slider or wire, and I had learned previously that adding it would\nintroduce drag and binding. Another issue we encountered was that the process\nof overmolding the rubber onto the wire would slightly\u2014and\nunreliably/randomly\u2014throw the wire dimensions out of tolerance, leading to yet\nanother elusive source of binding.\n\nIn all this experimentation, a pattern began to emerge of three opposed\nconcerns, where optimizing one always seemed to mean sacrificing the others:\n\n  1. Good acoustics without rattle or ticking (small gaps, a.k.a. \"tight tolerances\")\n  2. Good mechanical performance without binding\n  3. Support for keycap width variations\n\nWhenever I would tweak toward one of these, the others would become\nunacceptable.\n\nOne recent attempt at solving the stabilizer problem, Staebies, creatively\nredefined the problem and decided to sacrifice point #3 in favor of the\nothers. This meant tightening gaps between slider and housing in a way that\nwould cause binding on many keycaps but that would work well on the relatively\nnarrow dimensional range of GMK keycaps. But that cleverly evasive solution\nonly underscores the seemingly ineluctable set of tradeoffs above.\n\nAll I could hope for, I figured, was to find some kind of optimal sweet spot\nbetween the three tradeoffs. It took a lot of delicate titration to get the\ngaps just right (even the diameter of hole in the the wire clip had a huge\neffect), and it all took years, but with lots of stochastic trial and error, I\ndid actually end up getting pretty close to a 90% solution. I didn't fully\nunderstand the tolerance range that would or wouldn't lead to binding, but I\ndid come up with a set of nominal gap sizes that, when combined with an\novermolded wire, seemed to lead to acceptable performance. That is: what I had\nwas actually better than any unlubed stabilizer on the market and thus I had,\nin a way, actually solved the problem\u2014in a way that no one had, to my\nknowledge, accomplished up to that point.\n\nThe following 3D printed prototype used these features and can be heard\noperating below completely without lubrication:\n\n0:00\n\n/0:08\n\nMany keyboard enthusiasts whom I showed the prototype were amazed, but I\nremained morose. It was a 90% solution (for the last 10%, you will recall, of\na keyboard that was otherwise itself \"90% done\"). That last 10% gnawed at me.\nI had made too many compromises along the way to where I was. And the whole\npoint of the project was a no-compromises stabilizer for a no-compromises\nkeyboard.\n\n### Act II: Kinematic and Tolerance Optimization within the Existing Paradigm\n\nI puzzled and agonized for months about what to do, when I by chance stumbled\ninto some information about compliant mechanisms. The more I read about the\nproperties of compliant mechanism design, the more I realized, at least on\npaper, they provided exactly the properties that I wanted in a stabilizer.\nCompliant mechanism design takes an assembly that would otherwise consist of\nmultiple parts and joins them together into a single part that instead uses\nflexing inherent in the material to facilitate movement. A simple everyday\nexample of a compliant mechanism is the flexible \"living hinge\" you might find\non the cap of a moisturizer or sunscreen bottle, which acts as a single-part\nreplacement for the sort of multi-part pin-joint hinge you might find on a\ndoor.\n\nSince all of the acoustics issues in stabilizers arise from separate parts\nhitting against each other, making a single-part stabilizer from a compliant\nmaterial seemed like a very promising avenue of exploration. This inspiration\ndid actually end up being an indirectly fruitful one, but as the general theme\nof this project goes, there was far more nuance to the matter than I had at\nfirst suspected.\n\nThe main issue with sophisticated compliant mechanism design is that it's a\nrelatively new discipline, and most of the people doing it at the moment are\nstill in academia. I spent months trying to convince some of the big names in\nthe field to consult for me on the project, but we were never able to work\nthrough the irritatingly restrictive IP agreements they had with their\nemployer institutions, which apparently claim any and all of neural firings of\nprofessors\u2014on or off campus\u2014as their property. That was several more months of\ndead ends.\n\nI was eventually able to find one commercial consulting firm that claimed\nexpertise in compliant mechanism design and hired them to do an initial study\nfor $12,500, to be paid up front. In long Zoom calls and in-person meetings\nthey endlessly and insufferably sang their own praises, insisting that their\nengineering genius would have us at the \"Herm\u00e8s of keyboards\" in short order.\n(I should have listened to my initial bad feeling about those interactions,\nbut they were the only people I could find doing compliant mechanisms who\nwould answer my emails.) I gave them one month to show me a working proof-of-\nconcept prototype, at the end of which, alas, all I got was a lot of idle\nspeculation and what was effectively a $12,500 animation:\n\n0:00\n\n/0:05\n\nTheir guess was that this (still very half-baked) mechanism would at least\nprobably perform the basic stabilizing function, but that it would likely need\nto be made in metal, using a number of extravagant manufacturing processes at\nan unknown cost. More problematically, they also speculated that it would\nlikely make a \"ka-thunk\" sound when actuated. Of course there was no way to\nknow any of this without a physical prototype\u2014nor was there any concrete plan\nfor making one on a reasonable timeline. So I fired them.\n\nI subsequently learned was that a compliant mechanism configuration like the\none they were proposing would also have a variable force curve, with\nresistance mounting with the distance traveled as the hinges compressed,\nleading to an unacceptable \"jelly like\" feel to the key. So much for that\nidea.\n\nHowever, in researching compliant mechanisms I stumbled into a page\nreferencing the topic by the Danish product engineering firm RD8. I noted that\nthey had done product development work for luxury consumer products brands\nlike Audi and Bang & Olufsen and also Lego, with its already famously\nsophisticated in-house engineering abilities.\n\nI frankly figured they would 1) never respond to to an inquiry from a small\nbusiness like mine and 2) even if they did, would be utterly beyond my already\nfairly irresponsibly high appetite for costs, but I gave it a shot and cold\nemailed them anyway. I got a quick and friendly reply from Markus, one of the\nfounders of the company and we hopped on a Zoom call. He explained to me that\nRD8 specializes in solving hard product development problems and engineering\n\"satisfying\" mechanisms for high-end consumer and industrial products, both of\nwhich were precisely what I was looking for. He seemed very compelled by the\nidea of my work and the brand I was building\u2014seemingly excited to work on a\nmore creative and wacky project than what they typically see from their more\nstraitlaced corporate and medical clients. I found him and his team to be\nsingularly intelligent, candid, and competent.\n\nIn order to do what they do, RD8 have developed a comprehensive conceptual\nframework for designing products, which adheres to a school of engineering,\nJapanese in origin, known as robust design. There are many aspects to the RD8\napproach to product design, and they teach entire courses\u2014some of which I've\ntaken myself\u2014to already-seasoned engineers in these techniques, but one area\nis of particular of interest to us here: kinematics.\n\nKinematic analysis looks at the intended movements (or \"degrees of freedom\")\nof a mechanical system and ensures that only the minimum number of features\nare present on the parts to achieve exactly the intended behavior. This is\nbecause adding any additional constraints beyond the minimum necessary leads\nto phenomena like binding, chatter, rattle, drag, and abrasion. Sound\nfamiliar?\n\nTo demonstrate the idea, let us return to the concept of a simple linear\nbearing sliding along two rails that I introduced before. In a classic RD8\nexample below, there are two such sliding carriages: one magenta and one blue.\n\nEach of them runs along two metal rods, which are set up in a green test\nfixture that, by use of a mechanism at the front, can move each pair of rods\nfrom perfectly parallel to slightly misaligned. This type of slight\nmisalignment represents the type of variation one typically experiences in the\nmanufacturing of injection molded products\u2014or any number of other types of\naberrations such as the introduction of friction into the system through poor\nsurface finishes, etc. When we activate that mechanism at the front and\nslightly mis-align the rods, taking the system out of the \"perfect\" state, the\nmagenta carriage immediately binds up, whereas the blue one continues running\nfreely.\n\nThis is because the magenta carriage, even though it using a very common\ndesign for such bearings, is actually kinematically over-constrained. It uses\nfour cylindrical mating surfaces to run along the rods, as shown in white\nbelow. The redundant constraints unnecessarily make the system highly\nsensitive to manufacturing variations or other sub-optimal mechanical\nconditions.\n\noverconstrained\n\nA kinematically optimized version of the same design would look like the\nfollowing blue slider with white contact faces against the rod. It has only\nexactly the number of contact surfaces\u2014and no more\u2014that are required to\nconstrain the desired degrees of freedom. Note that the bottom-right bushing\nmakes no contact whatsoever with the rod, and the top-right bushing does so in\nonly two targeted spots (preventing rotation of the carriage about the axis of\ntravel). This makes the system highly robust to variations but it still\nexactly and smoothly performs the designed mechanical movements. That is: it\nis both tight and loose.\n\noptimally constrained\n\nThe folks at RD8 report that nearly every single design that comes to them for\nimprovement\u2014from mechanical engineers at major global corporations\u2014are over-\nconstrained in some way. So, while this might seem like an Engineering-101\nconcern, it's actually a hard and subtle matter to get exactly right\u2014and one\nthat is frequently overlooked even by professionals. Including, indeed, by\nwhoever it is that designed the original Cherry stabilizer and all the\ndownstream engineers who copied it.\n\nWithout diving too deep into the arcane details of the kinematic analysis, my\n\"90% good\" stabilizer design, which was kinematically equivalent to\ntraditional Cherry stabilizers, actually scored pretty well.\n\nA score of 5 put me in the \"world class engineering\" category within RD8's\nanalytical system.\n\nBut the issue was that for stabilizers we're working within the context of a\nvery challenging bearing/binding ratio and a long list of strict (conflicting)\nrequirements, which means that \"extremely good\" wasn't good enough to get us\neverything we wanted. We needed to go from \"kinematically good\" to\n\"kinematically perfect.\"\n\nMarkus therefore suggested that we set aside a full compliant-mechanism idea,\nwhich, while within their abilities, would be much more expensive and risky to\ndevelop. Instead, he suggested we simply focus on making a traditional multi-\npart design that wasn't over-constrained. We agreed on a one-month sprint for\naround the same cost as the compliant mechanism consulting firm and agreed\nthat the criterion for proceeding to subsequent sprints would be the same: a\nphysical proof-of-concept prototype at the end of the four weeks.\n\nAfter a bit of study Markus and the engineer he put on the project, Bo, came\nto me with two viable design strategies, both sound in their approach but one\nless risky and more conventional and one more risky but more ambitious.\n\nThe first option was a slight modification to the existing Cherry MX paradigm\nthat was optimized for a kinematic score of a perfect 0, primarily focused on\nremoving over-constraints, tightening tolerances, and mitigating bearing ratio\nissues as much as possible. We'll call this the tongue-in-groove stabilizer,\nfor which they presented the following concept.\n\nThis approach would require a lot of clever internal tricks to get it to\nperform to acoustic perfection, which I'll detail below. But there was also a\nsecond concept, which for now we'll call the pin-joint stabilizer. It was an\nintricate clockwork-like mechanism, with many moving parts and multi-jointed\nhinges, initially mocked up as follows.\n\nWhile it looked really cool, and I knew it had some technical points in its\nfavor, the complexity and high part count scared me. I was already nervous\nabout figuring out how to swing the cost of the many injection molding tools\nthat would be required to produce the Seneca (at tens of thousands of dollars\nfor each unique part), and the pin-joint solution had over twice as many parts\nas the tongue-in-groove option. It all just seemed too risky and uncertain, so\nwe decided to go with the more straightforward option.\n\nBy the end of the first sprint, RD8 had a physical prototype that did\neverything we wanted. It took a number of additional sprints to get to the\npoint of a fully-polished and production-ready design, but it was clear that\ntheir magic was going to work.\n\nPerhaps the first and most critical innovation was solving the problem of\nover-constraint, because that bought technical breathing room to add features\nto deal with noise and keycap variation. And that solution lay in the tongue-\nin-groove geometry itself.\n\nNormal Cherry stabilizers have a number of pairs contact surfaces that act as\nkinematic freedom locks, some of which are shown below. A number of these are\nredundant over-constraints, but all of their contact faces traverse relatively\nlong distances. Some of the critical ones are highlighted below.\n\nOur stabilizer relocates the contact faces that restrict the same degrees of\nfreedom to small tongue-in-groove interfaces, one on each side of the\nstabilizer. These features are many times closer than the corresponding pairs\nof faces shown above.\n\nThere are two significant aspects to this change in geometry. Firstly, by\nusing a smaller interface to constrain movement, we're able to control\ntolerances better, allowing for markedly smaller\u2014nearly zero-clearance\u2014gaps\nbetween slider and housing, minimizing the chance of ticking. (The underlying\nprinciple is that, when the cost/difficulty of manufacturing is held constant,\nfactories can deliver significantly tighter tolerances over smaller dimensions\ncompared to larger ones, so smaller dimensions are always inherently tighter-\ntolerance.) Secondly, the new configuration optimizes bearing ratio to the\nmaximum extent possible\u2014at least within the challenging constraints of the\napplication.\n\nThe new interface also allows for free side-to-side translation of the\nsliders, meaning that we can now accommodate a wide range of keycap stem\nspacing variations, as the sliders can move slightly inward or outward without\ninteracting with any other constraining surfaces.\n\nThese and other kinematic optimizations to remove over-constraints made\npossible the addition of two compliant sub-mechanisms within the larger more\ntraditional (\"rigid body\") design. First among these, and significant to\nelimination of one source of ticking, was the use of a preload beam pressing\nagainst the rotating arm of the wire linkage. (Preload, in the context of\nbearings, refers to applying a force to the bearing to prevent any clearance\ngaps between its mating surfaces.) Here a compliant/flexible beam is molded\ninto the stabilizer housing, pressing the wire against an opposing face in its\nclip. Some measure of simulation and experiment needs to be done to get the\nforces just right to prevent binding, but, when properly calibrated, preload\ncan completely eliminate the rattle/ticking noise that would come from gaps\nbetween parts in a bearing.\n\nMy prior design required a 0.3mm clearance between wire and housing to prevent\nbinding but, due to the kinematic optimization, this preload beam was able to\nbe added, moving us instead to a zero clearance (i.e., completely noise-free)\ninterface.\n\nThis concept was further extended to the critical wire-to-slider interface,\nwhich is the cause of stabilizer rattle\u2014the main problem we're trying to\nsolve. For this, a preload beam in the form of a metal spring is clipped into\nthe slider. It hangs down from the slider ceiling and presses down on the\nstabilizer wire from above, gently preloading the wire against the floor the\nslider and preventing any gap between those two, at all points of the\nstabilizer's travel. Brass was chosen for this preload spring for its good\nsliding properties against stainless steel. (We didn't end up choosing a\nmolded-in plastic beam like we did on the wire clip, due to concerns about\nlong-term material creep under load with this relatively highly cantilevered\nbeam.)\n\nNote that above CAD models show the brass preload spring appearing to\npenetrate into the wire surface, but that's only because the spring has to be\nmanufactured to extend beyond the wire's location when not loaded. This way it\ncan deflect upward when loaded and apply a downward force. Of course, when\ninstalled in reality, the preload spring flexes upward and physically rests on\ntop of the wire, as shown in 138 in our patent drawing below.\n\nHere, then, we have the full mechanism with all its functional aspects\noutlined. You can read the detailed US Patent here.\n\nThis video demonstrates the all-important zero-gap (and thus zero rattle)\nrelationship between wire and slider, using one of our 3D printed prototypes.\nThis and every aspect of the performance of this stabilizer design were\namazing.\n\n0:00\n\n/0:44\n\nThis was all well and good. Truly astonishing in fact. But the careful reader\nwill note that the only visualizations of this design I have are either CAD\nmodels or 3D printed prototypes, not production parts.\n\nOver a year ago, I was on the verge of pulling the trigger on production\ntooling for this design, which would have involved a massive financial\ncommitment and some level of lock-in. That is when I started having trouble\nsleeping.\n\nRemember how I said \"almost zero clearance\" when referring to the tongue-in-\ngroove interface\u2014and used the term minimize with respect to ticking at that\nlocation? By this point, our project costs had already pushed into the six\nfigures, and I found myself with another 90%-successful improvement relative\nto my first, already 90%-successful, attempt. I showed a rough 3D printed\nprototype to Taeha himself and he was impressed, and I was fairly certain\nalmost everyone would have been wowed by a production version of the design.\n\nBut, when I could sleep, I kept having dreams of that moonshot design we had\npassed up for fear of its risk and complexity. I couldn't stop from wandering\nback to that intricate watch-maker's design, with the complex articulated pin\njoints and radically different approach to the problem. I kept thinking about\nthe old Steve Jobs point about how being trapped in old paradigms can limit\nyour vision\u2014how the first decades of television involved basically pointing a\ncamera at a radio show. Was that what I was doing here?\n\nThe thing is that this project\u2014and my work in keyboards in general\u2014is about my\nnostalgic admiration for early pioneers of personal computing like Jobs and\ntheir of iconoclastic revolutionary reinvention, and I feel like every part of\nit needs to be worthy of those values. Jobs himself held back release of the\niPhone, Toy Story, and the first Apple Store at the very last minute when he\nhad similar intuitions about each not being quite as good as they might be. In\neach case, the delay was highly problematic from a short-term business\nperspective, but it was also creatively the right thing to do (which I believe\nis always, in the long term, also the right business decision).\n\nAfter enough of these sleepless nights, I called up my (now much beloved) pals\nin Copenhagen and summoned us all together back to the drawing board.\n\n### Act III: Utopian Reinvention\u2014the Norbauer-type stabilizer\n\nA tricky thing with a perfect kinematic score is that it's hard to improve.\nBut there is more to an optimal stabilizer than just deleting over-constraint.\nThere remained the problem inherent in all sliding linear bearings: the\nbearing ratio. Quality of a sliding bearing is ultimately related to the\nlength of the slide, but we want keyboards to be as flat as possible, which\nnecessarily limits slider travel distance, and there is only so much we can\nescape this basic problem with a linear slider. There are also limitations in\ninjection molding as a manufacturing process, limiting the precision (and thus\ntightness of fit) to which two mating plastic parts, such as the tongue and\nthe groove, can be manufactured. These concerns left us with a still non-zero\nnominal gap between the sliding faces of our functional interface and thus the\npossibility of subtle ticking. To reach perfection and effectively zero\nclearances everywhere, we would need to transcend the existing stabilizer\nparadigm and reformulate the problem on our own terms. The Norbauer-type\nstabilizer does that by taking the two-dimensional problem of linear sliding\nand cleverly projecting it into three-dimensional space, using a set of hinge\nleaves that fold and nest into each other, effectively lengthening the\nbearing. This is its core insight. But the advantages of the pin joint\narchitecture are many and subtle.\n\nThere are thirteen types of generic joints in mechanical engineering, but\nthere is a design rule of thumb related to joint selection: whenever you can\nuse a pin joint, do. There are many reasons for this, depending on the\napplication, but in our case one of the most compelling is that it would allow\nus remove an injection molded part from each mating surface, replacing it\ninstead with a metal pin. Precision metal pins are manufactured using a\nrolling and grinding process, making them massively more dimensionally\naccurate and uniform compared to injection molded parts. The interface\ntolerances of joints employing them can become much tighter as a result,\nallowing for effectively zero clearance at all interfaces and thus the total\nelimination not just of rattle but ticking. For 4mm of switch travel, we are\nmoving our parts very little about tiny pins compared to the length of 4mm\nslide, making it effectively a gearing rather than a simple 1:1 ratio as with\nthe slider. The math works out such that we experience 1/10th of the friction\ncompared to a sliding joint. Using a plastic-to-steel pairing is a further\nsignificant reduction in friction compared to the prior plastic-on-plastic\nslide.\n\nWhen dealing with flat sliding surfaces like in the tongue-in-groove, we were\nalso exposed to natural manufacturing variations not just in dimensional terms\nbut also geometric ones (issues of flatness, straightness, etc.) By converting\nour design to use only pin joints, we eliminate large planar faces and thus\none significant source of variation.\n\nIn the one spot we have a joint that isn't a perfect pin type, the clip in the\nhousing that holds the rotating wire. For that, we use a preload beam molded\ninto the housing pressing against the wire to ensure zero clearance at all\ntimes. If you assemble a switch in a test fixture with a normal stabilizer and\nshake it, it makes a great deal of noise. If you assemble a Norbauer-type\nstabilizer into the same and shake it, it is entirely silent.\n\nOur mechanism has two stabilizing sub-systems at transverse axes. By\nessentially adding a second stabilizer in this way, the Norbauer-type\nstabilizer also actually performs the anti-seesaw function better than\ntraditional solutions as well.\n\nIt is, by all my established criteria, the perfect stabilizer.\n\nThis all comes at a considerable cost, of course, and I'm not just talking\nabout the development expenses. A single stabilizer of the Norbauer type takes\nabout half an hour to assemble. The large number of precision injection molded\nparts also means very high tooling cost, and these parts require a number of\nside actions and other details that significantly increase the cost and\ndifficulty of injection molds, requiring us to work with more expensive and\nsophisticated high-production factories. But, from a development perspective,\nthe most challenging aspect of the design was the extremely confined work\nenvelope. The volume of each stabilizer tower is around 1 cm3, and the overall\nassembly must contain 21 parts, 10 of them living in each of those towers. For\nan injection-molded consumer product, this is a crazy level of part density.\nMany design features, such end stops for keycap installation/removal, etc. are\nalso not separate parts but are geometry molded into parts that serve other\nfunctions (such as the housing) and aren't considered in the 21 part count but\nnevertheless needed to be fit into this miniscule space. There are also many\nnuances to how you get the hinge leaves to work together without getting into\npositions that can lock up. RD8's work on all this design was thus absolutely\nheroic. It was a design I could never have contemplating creating on my own.\n\nHad I known it would take me this much money and five years, I might have\nwalked out a window rather than embark on the project. I am grateful to my\nignorance and optimism for having nudged me out the door, but also the awe-\ninspiring forces of happenstance and path-dependent chaos. If any of a million\ncoin tosses in the messy process above had landed another way, I would never\nhave ended up where I did.\n\n## Coda: the ninety-ninety rule\n\nIn the 1980s software engineer Tom Cargill of Bell Labs coined the Ninety-\nninety \"rule\" (a joke, really) to describe a common problem in project\nmanagement. It originally referred specifically to coding, but it can be\ngeneralized as follows:\n\n> The first 90 percent of a project's progress accounts for the first 90\n> percent of the development time. The remaining 10 percent of progress\n> accounts for the other 90 percent of the development time.\n\nI often put it this way: most projects seem 90% done for 90% of their\nduration. This creates a sort of asymptotic calculus problem where you always\nseem to be approaching but never quite reaching the finish line, as delving\ninto each fractal \"last 10%\" layer exposes a new universe of previously\nunfathomable problems and delays. We might call it a corollary of Hofstater's\nLaw: \"It always takes longer than you expect, even when you take into account\nHofstadter's Law.\"\n\nEvery significant project that I've ever done (that in retrospect seems having\nbeen worth doing) has been like this. The only solution I know of is simply to\nembrace going slowly and not to get too caught up in my expectations\n(blindingly optimistic imaginings) for when a project is going to be done.\nExtremely hard projects with these fractally expanding timelines are, in my\nexperience, the ones that it is important to undertake. They're the ones most\nothers won't be willing or able to tackle. In business, this is where moats\ncome from. In art, it's where achievement comes from. And in life in general,\nmuch of the satisfaction. I tend to groan, fret, and lose sleep at every step\nin the process, but I don't think I would have it any other way. Now all I\nhave to figure out what keyboard impossibility I want to keep me up at night\nnext.\n\nGet my future dispatches delivered directly to your inbox.\n\n## Further reading\n\nKeyboard Academy\n\n### the Stabilizer Problem\n\nThe Berm\n\n### Both Scrooges Are Right: Techno-futurism in 2020\n\n\u00a9 2010-2024 Ryan Norbauer\n\nVisit my luxury keyboard design studio.\n\n", "frontpage": false}
{"aid": "40206783", "title": "Do the GDP and Dow Reflect American Well-Being?", "url": "https://www.wsj.com/economy/gdp-and-the-dow-are-up-but-what-about-american-well-being-87f90e6d", "domain": "wsj.com", "votes": 1, "user": "noorbar", "posted_at": "2024-04-30 02:54:24", "comments": 0, "source_title": "wsj.com", "source_text": "wsj.com\n\n", "frontpage": false}
