{"aid": "40072711", "title": "Oriole Joins Supabase", "url": "https://supabase.com/blog/supabase-aquires-oriole", "domain": "supabase.com", "votes": 3, "user": "rmason", "posted_at": "2024-04-18 03:34:32", "comments": 0, "source_title": "Oriole joins Supabase", "source_text": "Oriole joins Supabase\n\nGeneral Availability Week: Day 3\n\nLearn more\n\nBack\n\nBlog\n\n# Oriole joins Supabase\n\n2024-04-15\n\n\u2022\n\n5 minute read\n\nPaul CopplestoneCEO and Co-Founder\n\nOriole is a table storage extension for Postgres. It is designed to be a drop-\nin replacement for Postgres' existing storage engine.\n\nThe Oriole team are joining Supabase to:\n\n  1. Build a faster storage engine for Postgres.\n  2. Help develop pluggable storage in Postgres.\n  3. Work on decoupled storage and compute in Postgres.\n\nLet's explore all of these below:\n\n## Building a faster storage engine#\n\nOriole acts as a drop-in replacement for the default Postgres storage engine\nusing the Table Access Method APIs:\n\n1\n\ncreate extension orioledb; -- enable the extension\n\n2\n\n3\n\ncreate table posts (\n\n4\n\nid int8 not null,\n\n5\n\ntitle text not null,\n\n6\n\nbody text not null,\n\n7\n\nprimary key (id)\n\n8\n\n) using orioledb; -- Specify the storage format\n\nThe using clause might look familiar if you have used other storage engines in\nPostgres like Citus columnar, Hydra, ParadeDB, or zheap. These all use the\nTable Access Method API - a set of methods that provide pluggable storage.\n\nThe orioledb storage engine changes the representation of table data on disk.\nIts architecture is designed to take advantage of modern hardware like SSDs\nand NVRAM.\n\nIt implements MVCC, the feature that allows multiple connected users to see\ndifferent versions of the data depending on when their transaction started,\nvia an UNDO log rather than tuple versioning. Orioles architecture prevents\nbloat and provides several features and benefits:\n\n  2. Reduced IO: It implements row-level WAL (Write-Ahead Log) and a non-persistent undo log. This significantly reduces IO operations for write transactions.\n  3. Scalability: It implements lockless access for in-memory data. This helps to eliminate common bottlenecks found in traditional database engines.\n  4. Data Compression: It implements page-level data compression, which can reduce the overall size of a typical database by approximately 4 to 5 times, saving storage space.\n  5. Bloat Reduction: Efficiently manages updates in-place with an undo log, which contributes to reducing database bloat \u2014 a common issue where the database size grows due to unused or obsolete data occupying space.\n  6. Index-organized tables: Oriole stores table rows in the leafs of primary key index making primary key lookups very cheap. In many cases, this saves significant storage space.\n\nReads and writes are significantly faster with Oriole\n\n## Pluggable storage in Postgres#\n\nWe've written previously about Pluggable Storage: it gives developers the\nability to use different storage engines for different tables within the same\ndatabase. This system is available in MySQL, which uses the InnoDB as the\ndefault storage engine since MySQL 5.5 (replacing MyISAM).\n\nOriole aims to be a drop-in replacement for Postgres' default storage engine\nand supports similar use-cases with improved performance. Other storage\nengines, to name a few possibilities, could implement columnar storage for\nOLAP workloads, highly compressed timeseries storage for event data, or\ncompressed storage for minimizing disk usage.\n\nIn version 12, PostgreSQL introduced support for pluggable storage with the\ngoal of adding ZHeap - a previous effort to solve some shortcomings of\nPostgres' default storage format. We hope to contribute towards these efforts.\n\nOrioleDB currently requires a set of patches to Postgres to expand on the type\nof features external storage engines extensions can implement. We remain\ncommitted to open source we'll work with the Oriole team and Postgres\ncommunity with the goal of upstreaming patches so that Oriole can be used with\nany Postgres installation. We have no timeline for this, but it's safe to\nexpect that it could be a few major Postgres versions away.\n\n## Decoupled Storage and Compute#\n\nThe Oriole storage engine's reduction in disk IO is significant enough that it\nunlocks performant databases backed by S3 compatible blob storage.\n\nWe've been working with the Oriole team for a few months to develop\nexperimental support decoupled storage and compute:\n\nLocal storage implements caching of the data most often accessed, ensuring\ngood performance, and then synced with S3 asynchronously.\n\nYou can connect an empty Postgres instance to an s3 bucket (using an S3 loader\nutility). The Oriole roadmap includes the ability to connect multiple read-\nreplicas to the same S3 bucket as leader.\n\n## Oriole + Supabase#\n\nPortability is a core principle at Supabase. Because Oriole requires a few\nminimal patch sets on top of Postgres, we will roll it out as an option for\ndevelopers in the future. Over time we hope that it can become available for\nany Postgres installation and we will continue to work with Oriole and the\nPostgres community to make this happen.\n\nWeek\n\n15-19 April\n\nDay 1 -Supabase is officially launching into General AvailabilityDay 2\n-Supabase Functions now supports AI modelsDay 3 -Supabase Auth now supports\nAnonymous sign-ins\n\nBuild Stage\n\n01 -PostgreSQL Index Advisor02 -Branching now Publicly Available03 -Oriole\njoins Supabase04 -Supabase on AWS Marketplace05 -Supabase Bootstrap06\n-Supabase SwiftOpen Source Hackathon 2024Community Meetups\n\nShare this article\n\nLast post\n\n#### Supabase on the AWS Marketplace\n\n15 April 2024\n\nNext post\n\n#### Branching now Publicly Available\n\n15 April 2024\n\nlaunch-week\n\ndatabase\n\nOn this page\n\n  * Building a faster storage engine\n  * Pluggable storage in Postgres\n  * Decoupled Storage and Compute\n  * Oriole + Supabase\n\nShare this article\n\n## Build in a weekend, scale to millions\n\n## Footer\n\nWe protect your data.More on Security\n\n  * SOC2 Type 2 Certified\n  * HIPAA Compliant\n\nTwitter\n\nGitHub\n\nDiscord\n\nYoutube\n\n###### Product\n\n  * Database\n\n  * Auth\n\n  * Functions\n\n  * Realtime\n\n  * Storage\n\n  * Vector\n\n  * Pricing\n\n  * GA Week\n\n###### Resources\n\n  * Support\n\n  * System Status\n\n  * Become a Partner\n\n  * Integrations\n\n  * Experts\n\n  * Brand Assets / Logos\n\n  * Security and Compliance\n\n  * DPA\n\n  * SOC2\n\n  * HIPAA\n\n###### Developers\n\n  * Documentation\n\n  * Changelog\n\n  * Contributing\n\n  * Open Source\n\n  * SupaSquad\n\n  * DevTo\n\n  * RSS\n\n###### Company\n\n  * Blog\n\n  * Customer Stories\n\n  * Careers\n\n  * Company\n\n  * Terms of Service\n\n  * Privacy Policy\n\n  * Acceptable Use Policy\n\n  * Support Policy\n\n  * Service Level Agreement\n\n  * Humans.txt\n\n  * Lawyers.txt\n\n  * Security.txt\n\n\u00a9 Supabase Inc\n\nWe only collect analytics essential to ensuring smooth operation of our\nservices. Learn more\n\nLearn more\n\n", "frontpage": false}
