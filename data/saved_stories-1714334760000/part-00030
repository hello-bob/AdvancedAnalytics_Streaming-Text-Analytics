{"aid": "40188049", "title": "YAML/Yamlscript: Programming in YAML", "url": "https://github.com/yaml/yamlscript", "domain": "github.com/yaml", "votes": 1, "user": "fragmede", "posted_at": "2024-04-28 12:16:50", "comments": 0, "source_title": "GitHub - yaml/yamlscript: Programming in YAML", "source_text": "GitHub - yaml/yamlscript: Programming in YAML\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nyaml / yamlscript Public\n\n  * Notifications\n  * Fork 25\n  * Star 339\n\nProgramming in YAML\n\n### License\n\nMIT license\n\n339 stars 25 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# yaml/yamlscript\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n18 Branches\n\n68 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ningydotnetrelease: 0.1.58Apr 26, 20246ffddb2 \u00b7 Apr 26, 2024Apr 26, 2024\n\n## History\n\n602 Commits  \n  \n### .clj-kondo\n\n|\n\n### .clj-kondo\n\n| core: Support argument symbols with default values| Feb 1, 2024  \n  \n### .github\n\n|\n\n### .github\n\n| meta: Add a Code of Conduct statement| Jan 16, 2024  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| core: Support multi doc with addressing| Mar 2, 2024  \n  \n### clojure\n\n|\n\n### clojure\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### common\n\n|\n\n### common\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### core\n\n|\n\n### core\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### d\n\n|\n\n### d\n\n| Update copyright lines to include 2024| Jan 3, 2024  \n  \n### elixir\n\n|\n\n### elixir\n\n| meta: Rewrite installer and update docs| Jan 18, 2024  \n  \n### java\n\n|\n\n### java\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### julia\n\n|\n\n### julia\n\n| meta: Rewrite installer and update docs| Jan 18, 2024  \n  \n### libyamlscript\n\n|\n\n### libyamlscript\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### lua\n\n|\n\n### lua\n\n| Add Lua skeleton| Aug 3, 2022  \n  \n### nim\n\n|\n\n### nim\n\n| Add Nim skeleton| Aug 3, 2022  \n  \n### nodejs\n\n|\n\n### nodejs\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### perl-alien\n\n|\n\n### perl-alien\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### perl\n\n|\n\n### perl\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### php\n\n|\n\n### php\n\n| meta: Rewrite installer and update docs| Jan 18, 2024  \n  \n### python\n\n|\n\n### python\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### raku\n\n|\n\n### raku\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### ruby\n\n|\n\n### ruby\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### rust\n\n|\n\n### rust\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### sample\n\n|\n\n### sample\n\n| nodejs: Fix doc and sample bug naming @yaml/yamlscript| Apr 6, 2024  \n  \n### test\n\n|\n\n### test\n\n| core: Add support for ys/use and YSPATH| Feb 20, 2024  \n  \n### util\n\n|\n\n### util\n\n| nodejs: NOdeJS/NPM binding module for YAMLScript| Apr 5, 2024  \n  \n### www\n\n|\n\n### www\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### yamltest/src/yamltest\n\n|\n\n### yamltest/src/yamltest\n\n| test: Save and use last test ns when ambiguous| Feb 27, 2024  \n  \n### ys\n\n|\n\n### ys\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### .cljfmt.edn\n\n|\n\n### .cljfmt.edn\n\n| core: Fix all warnings and errors found by clj-kondo| Jan 8, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| release: Release fixups| Mar 31, 2024  \n  \n### .profile\n\n|\n\n### .profile\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### .rc\n\n|\n\n### .rc\n\n| Builds are now almost zero dependency| Nov 4, 2023  \n  \n### .version.sh\n\n|\n\n### .version.sh\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### Changes\n\n|\n\n### Changes\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### Contributing.md\n\n|\n\n### Contributing.md\n\n| meta: Rewrite installer and update docs| Jan 18, 2024  \n  \n### License\n\n|\n\n### License\n\n| Update copyright lines to include 2024| Jan 3, 2024  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| make: Support 'make test-bindings'| Apr 6, 2024  \n  \n### Meta\n\n|\n\n### Meta\n\n| release: 0.1.58| Apr 26, 2024  \n  \n### ReadMe.md\n\n|\n\n### ReadMe.md\n\n| release: 0.1.58| Apr 26, 2024  \n  \n## Repository files navigation\n\n# YAMLScript\n\nProgram in YAML\n\n## About YAMLScript\n\nYAMLScript is a functional programming language with a stylized YAML syntax.\n\nYAMLScript can be used for:\n\n  * Writing new programs and applications\n\n    * Run with ys file.ys\n    * Or compile to binary with ys -C file.ys\n  * Writing reusable shared libraries\n\n    * Bindable to almost any programming language\n  * Using as a YAML loader module in many programming languages\n\n    * Plain / existing YAML files\n    * YAML files with new functional magics\n\n### Run or Load?\n\nYAMLScript programs can either be \"run\" or \"loaded\". When a YAMLScript program\nis run, it is executed as a normal program. When a YAMLScript program is\nloaded, it evaluates to a JSON-model data structure.\n\nMost existing YAML files in the wild are already valid YAMLScript programs. If\nyou have a valid YAML (1.2 Core Schema) file that doesn't use custom tags, and\nloads to a value expressible in JSON, then it is a valid YAMLScript program.\nYAMLScript's load operation will evaluate that file exactly the same in any\nprogramming language / environment.\n\nThese existing YAML files obviously can't use YAMLScript's functional\nprogramming features since that would be ambiguous. For example, what is the\nJSON value when \"loading\" this YAMLScript program?\n\n    \n    \n    foo: inc(41)\n\nIs it {\"foo\": \"inc(41)\"} or {\"foo\": 42}?\n\nYAMLScript programs must start with a special YAML tag !yamlscript/v0 to\nindicate that they have functional capabilities.\n\n    \n    \n    !yamlscript/v0/data foo:: inc(41)\n\n> Note: The /v0 in the tag indicates the YAMLScript API version. This is so\n> that future versions of YAMLScript can run programs written to an older API\n> version, and also so that older versions of YAMLScript don't try to run\n> programs written to a newer API version.\n\n### Using YAMLScript\n\nThere are two primary ways to use YAMLScript:\n\n  * Using the ys command line runner / loader / compiler / installer\n  * Using a YAMLScript library in your own programming language\n\nThe ys command line tool is the easiest way to get started with YAMLScript. It\nhas these main modes of operation:\n\n  * ys <file> \\- Run a YAMLScript program\n  * ys --run <file> \\- Same as above but explicit\n  * ys --load <file> \\- Load a YAMLScript program\n  * ys --compile <file> \\- Compile a YAMLScript program to Clojure\n  * ys --binary <file> \\- Compile YAMLScript to a native binary executable\n  * ys --eval '<expr>' - Evaluate a YAMLScript expression string\n  * ys --repl - Start an interactive YAMLScript REPL session\n  * ys --install - Install the latest libyamlscript shared library\n  * ys --upgrade - Upgrade ys and libyamlscript\n  * ys --help - Show the ys command help\n\nYou can also use YAMLScript as a library in your own programming language. For\nexample, in Python you can use the yamlscript module like this:\n\n    \n    \n    import yamlscript ys = yamlscript.YAMLScript() text = open(\"foo.yaml\").read() data = ys.load(text)\n\n### Supported Operating Systems\n\nYAMLScript is supported on these operating systems:\n\n  * Linux\n  * macOS\n  * Windows (work in progress)\n\nYAMLScript is supported on these architectures:\n\n  * Intel/AMD (x86_64)\n  * ARM (aarch64)\n\nFor now other systems cannot be supported because ys and libyamlscript are\ncompiled by GraalVM's native-image tool, which only supports the above\nsystems.\n\n### Supported Programming Language Bindings\n\nYAMLScript wants to be the best YAML loader for both static and dynamic YAML\nusage in every programming language where YAML is used.\n\nIt will have the same API, same features, same bugs and same bug fixes in\nevery language, giving you a great and consistent YAML experience everywhere.\n\nAt this early stage, YAMLScript has bindings for these programming languages:\n\n  * Clojure\n  * Java\n  * NodeJS\n  * Perl\n  * Python\n  * Raku\n  * Ruby\n  * Rust\n\n### Is YAMLScript a Lisp?\n\nEven though YAMLScript often has the look of an imperative programming\nlanguage, it actually is just a (YAML based) syntax that compiles to Clojure\ncode. The resulting Clojure code is then run by a native-machine-code Clojure\nruntime called Small Clojure Interpreter (SCI).\n\nClojure is a functional programming language with its own Lisp syntax.\nTherefore it is fair to say that YAMLScript is a (functional) Lisp, even\nthough it commonly doesn't look like one syntactically.\n\nTypically Clojure produces Java bytecode that is run on the JVM, but for\nYAMLScript there is no Java or JVM involved. In testing so far, YAMLScript\nprograms tend to run as fast or faster than equivalent Perl or Python\nprograms.\n\nFor getting started with YAMLScript, you don't need to know anything about\nLisp or Clojure. You can use it with as much or as little Lisp-ness as you\nwant; the syntax is quite flexible (and even programmable!). As your\nYAMLScript programming requirements grow, you can rest assured that you have\nthe full power of Clojure at your disposal.\n\n## Try the YAMLScript ys Command\n\nYou can try out the latest version of the ys command without actually\n\"installing\" it.\n\nIf you run this command in Bash or Zsh:\n\n    \n    \n    . <(curl https://yamlscript.org/try-ys)\n\nit will install the ys command in a temporary directory (under /tmp/) and then\nadd the directory to your current PATH shell variable.\n\nThis will allow you to try the ys command in your current shell only. No other\npresent or future shell session will be affected.\n\nTry it out!\n\n## Installing YAMLScript\n\nAt the moment, the best way to install YAMLScript is to build it from source,\nbut see the section \"Installing YAMLScript Binary Releases\" below.\n\nThis is very easy to do because the YAMLScript build process has very few\ndependencies:\n\n  * bash (your interactive shell can be any shell)\n  * curl\n  * git\n  * make\n  * zlib-dev (need this installed on Linux)\n\nTo install the ys command line tool, and libyamlscript shared library, run\nthese commands:\n\n    \n    \n    git clone https://github.com/yaml/yamlscript cd yamlscript make build make install\n\nThe make install command will install ys and libyamlscript to ~/.local/bin and\n~/.local/lib respectively, by default. If run as root they will default to\n/usr/local/bin and /usr/local/lib.\n\nTo install to a different location, run make install PREFIX=/some/path.\n\n> Notes:\n>\n>   * make install triggers a make build if needed, but...\n>   * You need to run make build not as root\n>   * The build can take several minutes (native-image is slow)\n>   * If you install to a custom location, you will need to add that location\n> to your PATH and LD_LIBRARY_PATH environment variables\n>\n\n### Installing YAMLScript Binary Releases\n\nYAMLScript now ships binary releases for some platforms here.\n\nTo install a latest release for your machine platform, try:\n\n    \n    \n    $ curl https://yamlscript.org/install | bash\n\nMake sure ~/.local/bin is in your PATH environment variable.\n\nYou can use the following environment variables to control the installation:\n\n  * PREFIX=... - The directory to install to. Default: ~/.local\n  * VERSION=... - The YAMLScript version to install. Default: 0.1.58\n  * BIN=1 - Only install the PREFIX/bin/ys command line tool.\n  * LIB=1 - Only install the PREFIX/lib/libyamlscript shared library.\n  * DEBUG=1 - Print the Bash commands that are being run.\n\nOnce you have installed the ys command you can upgrade to a bin binary version\nwith ys --upgrade.\n\n### Installing a YAMLScript Binding for a Programming Language\n\nYAMLScript ships its language binding libraries and the libyamlscript.so\nshared library separately.\n\nCurrently, each binding release version requires an exact version of the\nshared library, or it will not work. That's because the YAMLScript language is\nstill evolving quickly.\n\nThe best way to install a binding library is to use your programming\nlanguage's package manager to install the latest binding version, and the\nYAMLScript installer to install the latest shared library version.\n\nSo for Python you would:\n\n    \n    \n    $ pip install yamlscript $ ys --install\n\nThe Perl installation process can automatically install the shared library, so\nyou can just do:\n\n    \n    \n    cpanm YAMLScript\n\nEventually, the YAMLScript binding installation process will become simpler\nand more consistent across all languages.\n\n## The YAMLScript Repository\n\nThe YAMLScript source code repository is a mono-repo containing:\n\n  * The YAMLScript compiler code\n  * The YAMLScript shared library code\n  * A YAMLScript binding module for each programming language\n  * The YAMLScript test suite\n  * The YAMLScript documentation\n  * The yamlscript.org website (with docs, blog, wiki, etc)\n\n### make It So\n\nThe YAMLScript repository uses a Makefile system to build, test and install\nits various offerings. There is a top level Makefile and each repo\nsubdirectory has its own Makefile. When run at the top level, many make\ntargets like test, build, install, clean, distclean, etc will invoke that\ntarget in each relevant subdirectory.\n\nGiven that this repository has so few dependencies, you should be able to\nclone it and run make targets (try make test) without any problems.\n\n### Contributing to YAMLScript\n\nTo ensure that YAMLScript libraries work the same across all languages, this\nproject aims to have a binding implementation for each programming language.\n\nIf you would like to contribute a new YAMLScript binding for a programming\nlanguage, you are encouraged to submit a pull request to this repository.\n\nSee the YAMLScript Contributing Guide for more details.\n\n## YAMLScript Resources\n\n> Note: The documentation linked to below is out of date, but should give you\n> a decent idea of what YAMLScript is about. It will be rewritten soon.\n\n  * The YAMLScript Blog\n  * Example YAMLScript Programs on RosettaCode.org\n  * An early YAMLScript Presentation Video\n  * Old Perl YAMLScript Implementation Documentation (Out of date but informative)\n\n## Authors\n\n  * Ingy d\u00f6t Net - Creator / Lead\n  * Ven de Thiel - Language design\n  * tony-o - Raku\n  * Ethiraric - Rust\n  * Jos\u00e9 Joaqu\u00edn Atria - Perl\n  * Delon R.Newman - Clojure, Java, Ruby\n\n## Copyright and License\n\nCopyright 2022-2024 by Ingy d\u00f6t Net\n\nThis is free software, licensed under:\n\nThe MIT (X11) License\n\n## About\n\nProgramming in YAML\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Code of conduct\n\nCode of conduct\n\nActivity\n\nCustom properties\n\n### Stars\n\n339 stars\n\n### Watchers\n\n14 watching\n\n### Forks\n\n25 forks\n\nReport repository\n\n## Releases 36\n\n0.1.58 Latest\n\nApr 26, 2024\n\n\\+ 35 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 8\n\n## Languages\n\n  * Clojure 48.5%\n  * Makefile 11.2%\n  * Shell 8.7%\n  * Rust 6.1%\n  * CSS 4.7%\n  * Nunjucks 4.4%\n  * Other 16.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
