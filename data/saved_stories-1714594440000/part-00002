{"aid": "40222500", "title": "IPFire Location: A decentralised, signed database in DNS", "url": "https://www.ipfire.org/blog/ipfire-location-a-decentralised-signed-database-in-dns", "domain": "ipfire.org", "votes": 2, "user": "mstremer", "posted_at": "2024-05-01 12:56:12", "comments": 0, "source_title": "IPFire Location: A decentralised, signed database in DNS", "source_text": "www.ipfire.org - IPFire Location: A decentralised, signed database in DNS\n\n# IPFire Location: A decentralised, signed database in DNS\n\n###### by Michael Tremer, 5:00 pm\n\nDo you like what you are reading? Subscribe to our newsletter and don't miss\nout on the latest... Join Now\n\nIn the recent series of updates on IPFire Location, we are bringing you an\nexciting new feature today: Query our location database using DNS!\n\nIPFire Location is a great project to work on. It supplies so many\napplications with useful data about where an IP connection might be coming\nfrom. That can be used to filter traffic, conduct statistical analysis to\nidentify threats, localise online shops and a thousand more things.\n\nWe have been great advocates due to our passion for this project and have been\nworking hard to get IPFire Location into as many distributions as possible.\nThe list keeps growing and currently contains a lot of major distributions:\nDebian, Fedora, Ubuntu, Archlinux and of course in IPFire we make a lot of use\nof IPFire Location, too.\n\nBut sometimes, it isn't easily possible to integrate this software. Sometimes\nit is not necessary to have thousands of queries, only a few. And sometimes it\nis not necessary to have access to all the available data in the database,\njust a few bits. Although the library currently is only ~80 KiB and therefore\nvery lightweight, why carry around the extra weight?\n\n## How to query a database without the data?\n\nWe came up with a new way to access this data from applications that don't\nhave libloc. An HTTP API? Too bloated because we would generate a lot of\noverhead for transferring tiny responses. But how about DNS? It is perfect for\nthis purpose! DNS is a protocol that virtually every device on this planet\nspeaks. It is incredibly light and scales across the entire globe. And it is\nfast!\n\nSo I went ahead and built it :)\n\nIf you resolve www.ipfire.org, you are getting two IP addresses, 81.3.27.38\nfor IPv4 and another 2001:678:b28:: for IPv6. If you now want to query the\nIPFire Location database using DNS, you will have to apply a technique that is\ncalled a reverse lookup where the IP address is being reversed (that is not\nwhere the name is coming from) to send a request. For example 81.3.27.38 turns\ninto 38.27.3.81.\n\nTo query certain information, you will need to append the appropriate domain\nnames. Currently we support:\n\ncc.location.ipfire.org| Country Codes  \n---|---  \norigin.location.ipfire.org| Origin (i.e. Autonomous Systems)  \nprefix.location.ipfire.org| Prefixes  \nasn.location.ipfire.org| Autonomous System Names  \n  \nLet's see this in action:\n\nSending a query for a TXT record of 38.27.3.81.cc.location.ipfire.org gives us\nthe country code where this IP address is hosted:\n\n    \n    \n    $ dig +short TXT 38.27.3.81.cc.location.ipfire.org \"DE\"\n\nIf the country isn't enough, we can find out what data center this IP address\nis from.\n\n    \n    \n    $ dig +short TXT 38.27.3.81.origin.location.ipfire.org \"AS24679 - kyberio GmbH\"\n\nThe same also works for IPv6 with only a slightly longer address:\n\n    \n    \n    $ dig +short TXT 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.2.b.0.8.7.6.0.1.0.0.2.cc.location.ipfire.org \"DE\" $ dig +short TXT 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.2.b.0.8.7.6.0.1.0.0.2.origin.location.ipfire.org \"AS204867 - Lightning Wire Labs GmbH\"\n\nPlease check out the documentation for more examples.\n\n## Globally Decentralised & Cryptographically Secured\n\nUsing DNS is fast because there is no complicated TLS handshake. Instead, the\nquery is a very small packet containing only the essential amount of data and\nthe responses are equally small. A country code actually only needs two bytes\nto be transferred. That allows us to use another builtin feature of DNS:\nGlobal caching. Since the responses are so small and clients are usually never\ntalking to authoritative DNS servers, responses get cached by the recursors\nwhich allows faster response times.\n\nIf you have heard about IPFire Location before, you will remember that we are\nemphasising a lot that our database is cryptographically signed. We deem this\nnecessary since we deploy it in our firewall which means that a maliciously\ncreated database could mean major damage. How can we ensure the integrity of\nthe data when using DNS instead of the builtin signature algorithm? The answer\nto that is DNSSEC. If supported by the client, the authenticity of the\ndatabase can be verified by verifying the DNSSEC signatures on the response\npacket.\n\n## Why IPFire Location?\n\nAs you have seen with the dig CLI tool, this service is very easy to use. But\nit has always been that way due to the many language bindings that are\navailable for C, Python, Perl and Lua. There are however many applications\naround written in other languages which can now be extended using IPFire\nLocation over DNS. Considering the accuracy and authenticity of the data as\nwell as fast lookups from the very start of the project allows us to bring Geo\nlocation data further than others, enabling a brighter future. There are so\nmany opportunities opened now by IPFire Location using DNS that I don't even\nknow where to begin: Threat Detection, Localisation, Network Analysis,\nCompliance. You name it. We got you covered.\n\nTo find out more about IPFire Location and its application, please visit the\nwebsite.\n\n2024 \u00a9 IPFire.org\n\nLegal\n\nSitemap\n\n", "frontpage": false}
