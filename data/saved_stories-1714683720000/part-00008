{"aid": "40234202", "title": "Python sucks, and why I use it", "url": "https://cameron.rs/blog/python-sucks/", "domain": "cameron.rs", "votes": 1, "user": "doppp", "posted_at": "2024-05-02 09:11:12", "comments": 0, "source_title": "Python sucks, and why I use it", "source_text": "Python sucks, and why I use it\n\nCameron Kauffman \u2014\n\nWriting\n\n# Python sucks, and why I use it\n\nPosted: 7-9-2023\n\n#python#programming#rust#c++\n\nRecently I was contracted to work on a Discord bot written in Python. I\u2019m no\npythonista but I partake in some kool-aid now and then. Python boasts a lot of\nfeatures like subpar performance, lack of static typing, forced indentation\nand random syntactic quirks. These features would normally push me to a more\nrespectable language, but this time I did not have a choice.\n\n# Python is slow\n\nPython is slow. Incredibly, it is 195x slower than C++ by some metrics.\nPerformance wise, it lags behind the herd, falling below all of the most\ncommonly used languages and being one-upped by every new project (Julia, mojo,\nnim, etc).\n\nPython is an interpreted language that is also single threaded by design. The\ncode must be compiled into platform-independent bytecode while running.\nBytecode is like machine code but instead of being executed by the CPU it is\nexecuted by the interpreter. Once the code is compiled then the interpreter\nreads this bytecode to translate it to machine code.\n\nOne of the numerous reasons why Python is slow is because of its design. Since\nPython compiles and interprets code at runtime it will always be slower than\nany binary application made in C++. I don\u2019t believe Python was ever meant to\nbe a performance based language but many projects attempt to \u201dfix\u201d Python in\nthis regard.\n\nProjects like Cython circumvent the language entirely by allowing C constructs\nto be sprinkled into your Python. This superset of Python compiles your code\nto C to increase performance. Although Cython is a very interesting project\nand feat of engineering, it cannot be used to fully replace Python.\n\nA somewhat logical conclusion from the analysis of Python\u2019s performance is\nthat \u201dPython sucks.\u201d After all, if something is slow why would you ever want\nto use it. I mean, C++ is 195x faster? Seems like C++ would be the obvious\nchoice. It makes no sense to code in a language that produces slow products.\n\n# Python is fast\n\nWhile Python boasts the features I mentioned earlier, it is extremely fast in\none regard. In fact, it is 75% faster than C++ when you compare the time\nneeded to develop a solution to a problem. Although Python scripts may not run\nas quickly as those written in other languages, they can be developed much\nmore quickly. This bar graph displays the median hours of code needed to\ncreate a string processing program (taken from this paper).\n\n# My Experience\n\nI was tasked with creating a Discord Bot entirely in Python. I expected that\nthis thing was going to be slow. A bit of a bummer, as my most recent project\nwas an interpreter in Rust and I was all about performant code designed in a\nsexy language (Rust). My Python development experience was limited to a few\nscripts and some competitive programming, and the thought of more Python\nfailed to excite. Nevertheless, I trudged onward.\n\nThis project soon turned into an eye opening journey. Something that normally\nwould have taken 30+ minutes in Rust, fighting with the borrow checker (I\u2019m\nstill somewhat new) and grappling with lifetimes, only took 15 minutes!\nDevelopment speed was incredibly faster in Python. This project became\nexhilarating, and I found a new love for programming. I was able to ship the\nproduct extremely fast, including time for testing. I completed the project so\nquickly that the client was impressed and gave me a generous bonus.\n\nMy Discord bot built in Python was probably slower than anything I could have\nbuilt in Rust. Rust has a ton of amazing language features that I could talk\nabout for days and performs on par with C++. So, did I create a slow product\nthat was doomed to fail?\n\nNo.\n\nTo be frank, you can\u2019t notice that it\u2019s slow. I was able to build a fully\nworking product in a speedy fashion, I loved doing it, and the customer loved\nthe product. Something like Rust wasn\u2019t necessary for this use-case.\n\nThis kind of project shined a new light on Python for me, as well as other\nlanguages like Go. I had heard about Go\u2019s ability to ship fast from MelkeyDev,\nbut I never realized why that could possibly matter. After all, I can develop\nin Rust fast enough and when I finish the Rust project it will probably be\nmore performant than the Go or Python project. I was completely blind to the\nexperience of developing in a language that is designed to ship fast. This\nexperience has changed my perspective on programming languages and I hope it\nwill change yours too. I know too many developers who are stuck in their ways\nand refuse to learn or use new languages because they are \u201cslow\u201d or \u201cbad.\u201d\n\n# No language is without flaws\n\nUsing performance metrics to measure the success of a language is an arbitrary\ncharacteristic when deciding on smaller projects. Python is performant enough\nmost of the time. Projects like automation tools, Data Analytics, and more can\nall be accomplished in Python. I do not think we should have developers\nthinking they are better than others because they program in a harder language\ninstead of a \u201cbaby language\u201d like Python. If that were true, the most pious\nsoftware engineers would be using APL to develop their front-end frameworks.\nThat\u2019s such a naive take and I challenge those individuals to deliver a fully\nfunctional product in the same timeframe as a Python developer.\n\nPython is not the best language for every project. I would not recommend using\nPython for high performance applications or larger projects. Python\u2019s strength\nlies in its efficiency during development rather than in raw performance.\nAttempting to optimize Python for speed often leads to disappointment. Python\nis designed to be fast to develop in, and it excels in that regard.\n\n## \ud83d\udc4b Thanks for reading!\n\nIf you enjoyed this post, then consider sharing it and/or following me on\nGithub.\n\nTweet Follow\n\ncameron \u00a9 2023\n\n", "frontpage": false}
