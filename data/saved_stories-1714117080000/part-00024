{"aid": "40162747", "title": "A Response to \"Have Single-Page Apps Ruined the Web?\" (2021)", "url": "https://htmx.org/essays/a-response-to-rich-harris/", "domain": "htmx.org", "votes": 5, "user": "tie-in", "posted_at": "2024-04-25 20:42:24", "comments": 0, "source_title": "</> htmx ~ A Response To \"Have Single-Page Apps Ruined the Web?\"", "source_text": "</> htmx ~ A Response To \"Have Single-Page Apps Ruined the Web?\"\n\n</> htmx\n\ndocs\n\nreference\n\nexamples\n\ntalk\n\nessays\n\n# A Response To \"Have Single-Page Apps Ruined the Web?\"\n\nCarson Gross December 24, 2021\n\nRich Harris is a well-known web developer who works on Svelte.js, a novel\nSingle-Page Application (SPA) framework.\n\nIn October of 2021 he gave a talk at JamStack entitled \u201cHave Single-Page Apps\nRuined the Web?\u201d.\n\nWe have been asked for our opinion on the talk, so this essay is our response.\n\nThe first thing to say about the talk is that it is very well done: well\nproduced, thoughtful, funny, fair to both sides of the debate and very\nreasonable throughout. We don\u2019t agree with a lot that Mr. Harris has to say,\nas we will detail below, but we respect and appreciate his opinions as well as\nthe technologies he works on.\n\n## #Problems with SPAs\n\nThe talk begins with some reasonable criticisms of SPAs, particularly focusing\non usability issues found with Instagram, a canonical SPA implementation from\nour friends at Facebook. He takes a very fair look at the drawbacks to SPAs,\nincluding but not limited to the following list:\n\n  * You will need a bloated JS framework\n  * Performance will suffer\n  * It will be buggy\n  * There will be accessibility issues\n  * The tooling is complicated\n  * It will be less resilient\n\nAfter considering the usability issues with Instagram, Mr. Harris has this to\nsay:\n\n> Come on people. If the best front end engineers in the world can\u2019t make text\n> and images work without five megabytes of javascript, then maybe we should\n> just give up on the web platform.\n\nHere we find ourselves in violent agreement with Mr. Harris, with the caveat\nthat we would substitute \u201cthe javascript web platform\u201d for just \u201cthe web\nplatform\u201d, since that is what is in play with Instagram.\n\nWe would further clarify that SPA applications and frameworks often simply\nignore the actual web platform, that is, the original, REST-ful model of the\nweb, except as a bootstrap mechanism.\n\n## #Problems with MPAs\n\nMr. Harris then moves on to problems with Multi-Page Applications (MPAs) which\nare the \u201ctraditional\u201d, click-a-link-load-a-page-of-HTML web applications we\nare all familiar with and that are, to an extent, being supplanted by SPAs.\n\nBelow, we will go through the various problems he outlines, all of which are\ntrue of \u201cstandard\u201d MPAs, and we will demonstrate how an MPA using a\nhypermedia-oriented technology, htmx, can solve each of them.\n\n### #\u201cYou Can\u2019t Keep A Video Running On Navigations\u201d\n\nA general problem with standard MPAs is that they issue a full page refresh on\nevery request. This means something like a video or audio player will be\nreplaced and, thus, stop playing, when a request is made.\n\nThis problem can be addressed in htmx via the hx-preserve attribute, which\ntells htmx to preserve a particular piece of content between requests.\n\n### #\u201cBack Button & Infinite Scroll Don\u2019t Work\u201d\n\nIn the presence of infinite scroll behavior (presumably implemented via\njavascript of some sort) the back button will not work properly with an MPA. I\nwould note that the presence of infinite scroll calls into question the term\nMPA, which would traditionally use paging instead of an infinite scroll.\n\nThat said, infinite scroll can be achieved quite easily using htmx, in a\nhypermedia-oriented and obvious manner. When combined with the hx-push-url\nattribute, history and the back button works properly with very little effort\nby the developer, all with nice Copy-and-Pasteable URLs, sometimes referred to\nas \u201cDeep Links\u201d by people in the SPA community.\n\n### #\u201cWhat about Nice Navigation Transitions?\u201d\n\nNice transitions are, well, nice. We think that designers tend to over-\nestimate their contribution to application usability, however. Yes, the demo\nsizzles, but on the 20th click users often just want the UI to get on with it.\n\nThat being said, htmx supports using standard CSS transitions to make\nanimations possible. Obviously there is a limit to what you can achieve with\nthese pure CSS techniques, but we believe this can give you the 80 of an 80/20\nsituation. (Or, perhaps, the 95 of a 95/5 situation.)\n\n### #\u201cMultipage Apps Load Javascript Libraries Every Request\u201d\n\nMr. Harris focuses heavily on \u201ccrappy Ad Tech\u201d as a culprit for web usability\nissues on the web, and who can defend the 2.5MB payload of tracking, spyware\nand adware that most websites deliver to their users today? Mr. Harris points\nout that SPAs ameliorate this issue by loading up this bundle of garbage once,\nrather than over and over on every request, as an MPA does.\n\nNow, a vanilla MPA would typically have said garbage cached after the first\nrequest, so the download cost, at least, is about the same as with SPAs. But\nan MPA must execute the bundle of garbage again on each page, which does burn\nCPU and can lead to poor user experience.\n\nHowever, an MPA powered by htmx, we note, has exactly the same characteristics\nas an SPA: the ad garbage would be downloaded and executed once on the first\nrequest, and, after that, all requests will be relatively light-weight\nreplacements of DOM elements.\n\n### #\u201cMPAs Have Network Latency Issues\u201d\n\nThis is a valid point: with an MPA-style application your UI interactions are\ngated by how fast your server can respond to requests, its latency. Part of\nthat is network latency, which is hard to overcome without giving up one of\nthe tremendously simplifying aspects of traditional web applications: a\ncentralized data store. However, networks are fast and are getting faster, and\nthere are well-known techniques for optimizing server latency (i.e. how fast\nyour server returns a response), developed over decades, for monitoring and\noptimizing this response time. SQL tuning, Redis caching and so on, all well\nestablished and making sub-100ms responses a reasonable goal. Many htmx users\nremark just how fast htmx-based applications feel, but we won\u2019t pretend that\nlatency isn\u2019t an issue to be considered.\n\nOf course the problem with latency issues is that they can make an app feel\nlaggy. But, like you, we have worked with plenty of laggy SPAs, so we must say\nthe problem isn\u2019t neatly solved by simply adopting SPA frameworks. On top of\nthat, optimistically synchronizing data with a server can lead to extremely\ndifficult to understand data consistency issues as well as a significant\nincrease in overall application complexity, a topic we will return to later.\n\n### #\u201cGitHub Has UI Bugs\u201d\n\nGitHub does, indeed, have UI bugs. However, none of them are particularly\ndifficult to solve.\n\nhtmx offers multiple ways to update content beyond the target element, all of\nthem quite easy and any of which would work to solve the UI consistency issues\nMr. Harris points out.\n\nContrast the GitHub UI issues with the Instagram UI issues Mr. Harris pointed\nout earlier: the Instagram issues would require far more sophisticated\nengineering work to resolve.\n\n## #Transitional Applications\n\nMr. Harris then discusses the concept of \u201ctransitional applications\u201d which are\na mix of both SPA and MPA technologies. This terminology is reasonable, and we\nwill see if the term sticks in the industry.\n\nWe often recommend using htmx for the parts of the app where it makes sense to\nkeep things simple, and then using other technologies when needed: alpine.js,\nhyperscript, a small reactive framework, etc.\n\nSo we can agree with Mr. Harris here to an extent and recommend a\n\u201ctransitional\u201d approach to web development, although we would recommend\nleaning MPA/hypermedia when possible, whereas it seems fairly certain Mr.\nHarris would lean SPA/javascript.\n\n## #The Elephant In The Room: Complexity\n\nUnfortunately, there is a topic that Mr. Harris does not discuss, and we\nbelieve this may be because he doesn\u2019t see it. He is a javascript developer\nwho is passionate about that language and who swims in the engineering culture\nof front end frameworks, so the current complexity of javascript front end\ndevelopment seems natural to him. For many of us, however, the javascript\necosystem is simply insanely overly-complicated. Comically so, in fact, given\nthe requirements of most web applications.\n\nMany of the \u201ctransitional\u201d technologies that Mr. Harris goes on to mention:\nReact Server Components (which he calls \u201clike html over the wire, but vastly\nmore sophisticated), Marko (which is doing \u201cpartial hydration\u201d), Quik (which\naggressively lazy loads things, apparently), are all remarkable engineering\nachievements, but are also all, we must say, quite complicated.\n\nThis is, unfortunately, part of the culture of front end development right\nnow: sky-high levels of complexity are tolerated in application frameworks, in\nbuild tool chains, in deployment models and so on, and, when problems arise\ndue to all this complexity, more complexity is often offered as the answer.\n\n\u201cSimple\u201d is disparaging and \u201csophisticated\u201d is high praise.\n\nThis complexity is overwhelming many developers and development teams today.\nAs Mr. Harris himself points out when discussing Instagram, even some of the\nbest front-end engineers in the world appear to be unable to keep it all under\ncontrol.\n\nSo there is a cultural issue here.\n\nThere is a technical issue as well.\n\nThis technical issue can be summarized as \u201cThe Hypermedia Approach\u201d vs. \u201cThe\nRemote Procedure Call (RPC) Approach\u201d.\n\nWhen web applications moved from MPAs to SPAs, they adopted, often\nunwittingly, an RPC approach to application development: AJAX moved to JSON as\na data serialization format and largely (and correctly) abandoned the\nhypermedia concept. This abandonment of The Hypermedia Approach was driven by\nthe admitted usability issues with vanilla MPAs.\n\nIt turns out, however, that those usability issues often can be addressed\nusing The Hypermedia Approach: rather than abandoning Hypermedia for RPC, what\nwe needed then and what we need today is a more powerful Hypermedia.\n\nThis is exactly what htmx gives you.\n\nBy returning to The Hypermedia Approach, you can build reasonably\nsophisticated web applications that address many of Mr. Harris\u2019s concerns\nregarding MPAs at a fraction of the complexity required by most popular SPA\nframeworks. Further, without thinking about it very much, you will get all the\nbenefits that Roy Fielding outlined about truly REST-ful architectures.\n\nIs The Hypermedia Architecture right for all web applications? Obviously not.\n\nIs it right for many, and perhaps most, web applications? We certainly think\nso, at least in part.\n\n## #Javascript: The Resistance\n\nNow we get to the most emotionally charged claim made in the talk: that \u201cthe\nship has sailed\u201d on javascript, and that we should accept that it will be the\ndominant programming language in web development going forward.\n\nMr. Harris believes that it will be edge computing that will be the driver\nthat finally eliminates the remaining, scattered opposition to javascript.\n\nWe are not so sure about that.\n\nTo the contrary, we do not expect edge computing to figure in the majority of\nweb applications for the foreseeable future. Or, to be frank, ever. CPU is\ncheap, network speeds are fast and increasing and microservices are a mess.\n\nAnd, contra what Mr. Harris says, today the trend is not obviously in\njavascripts favor. Five years ago, we, as founding members of the javascript\nresistance, were despairing of any hope of stopping the Javascript juggernaut.\nBut then something unexpected happened: Python took off and, at the same time,\njavascript flat lined:\n\nThis trend of javascript peaking in the mid-2010\u2019s can be observed on GitHub\nas well:\n\nNow, does this mean javascript will eventually \u201close\u201d to Python and go away?\n\nOf course not. Javascript is a core technology of the web and will be with us\nforever. Without it, we couldn\u2019t have built htmx (or hyperscript) so we are\nvery thankful for javascript.\n\nBut this does imply that the future of the web does not necessarily belong\nentirely to javascript, as appeared to be the case say five years ago.\n\nWe are fond of talking about the HOWL stack: Hypermedia On Whatever you\u2019d\nLike. The idea is that, by returning to a (more powerful) Hypermedia\nArchitecture, you can use whatever backend language you\u2019d like: python, lisp,\nhaskell, go, java, c#, whatever. Even javascript, if you like.\n\nSince you are using hypermedia & HTML for your server interactions, you don\u2019t\nfeel that pressure to adopt javascript on the backend that a huge javascript\nfront end produces. You can still use javascript, of course, (perhaps in the\nform of alpine.js) but you use it in the manner it was originally intended: as\na light, front end scripting language for enhancing your application. Or, if\nyou are brave, perhaps you can try hyperscript for these needs.\n\nThis is a world we would prefer to live in: many programming language options,\neach with their own strengths, technical cultures and thriving communities,\nall able to participate in the web development world through the magic of more\npowerful hypermedia, rather than a monolith of SPAs-talking-to-Node-in-JSON.\nDiversity, after all, is our strength.\n\nIn conclusion,\n\n</>\n\n## haiku\n\njavascript fatigue: longing for a hypertext already in hand\n\ndocs\n\nreference\n\nexamples\n\ntalk\n\nessays\n\n@htmx_org\n\n", "frontpage": true}
