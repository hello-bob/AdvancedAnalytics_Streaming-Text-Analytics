{"aid": "40140430", "title": "Duct Tape and Fence Posts", "url": "https://outsidetheasylum.blog/duct-tape-and-fence-posts/", "domain": "outsidetheasylum.blog", "votes": 1, "user": "IsaacKing", "posted_at": "2024-04-24 04:04:25", "comments": 0, "source_title": "On Duct Tape and Fence Posts", "source_text": "On Duct Tape and Fence Posts\n\n# Outside the Asylum\n\nRSS feed\n\n# On Duct Tape and Fence Posts\n\nThere's a parable in the security industry. A person owns some land in the\ndesert, and they want to prevent trespassing. So they start building a fence.\nThey want the area to be really secure, so they build a really tall fence\npost, to make absolutely sure that no one could climb over it. But they never\nget around to building the rest of the fence; any intruder could simply walk\naround it. The height of the fence post is irrelevant.\n\nConsider this scene from Burn Notice:\n\nThis is fence post security. It doesn't matter how well-defended the door is\nif the walls around it are so flimsy. A smart attacker will generally attack\nthe weakest part of a system; good security requires that all possible methods\nof attack are covered.\n\nThis idea is closely related to the principle that a chain is only as strong\nas its weakest link. A chain is minimalist; there are no redundant links, so\nevery link is playing an essential role, and if any of them fails, the whole\nsystem fails. Fencepost security is what happens when someone fails to\nconsider this and spends their resources reinforcing a single link, leaving\nthe others untouched.\n\nIt's an easy mistake to make. People think to themselves \"in the current\nsystem, what's the weakest point?\", and then dedicate their resources to\nshoring up the defenses at that point, not realizing that after the first\nsmall improvement in that area, there's likely now a new weakest point\nsomewhere else.\n\nXKCD\n\nFence post security happens preemptively, when the designers of the system\nfixate on the most salient aspect(s) and don't consider the rest of the\nsystem. This sort of fixation can also happen in retrospect, in which case it\nmanifest a little differently but has similarly deleterious effects.\n\nConsider a car that starts shaking whenever it's driven. It's uncomfortable,\nso the owner gets a pillow to put on the seat. Items start falling off the\ndash, so they get a tray to put them in. A crack forms, so they tape over it.\n\nI call these duct tape solutions. They address symptoms of the problem, but\nnot the root cause. The underlying issue still exists and will continue to\ncause problems until it's addressed directly.1\n\nDid you know it's illegal to trade onion futures in the United States? In\n1955, some people cornered the market on onions, shorted onion futures, then\nflooded the market with their saved onions, causing a bunch of farmers to lose\nmoney. The government responded by banning the sale of futures contracts on\nonions.\n\nNot by banning futures trading on all perishable items, which would be equally\nsusceptible to such an exploit. Not by banning market-cornering in general,\nwhich is pretty universally disliked. By banning a futures contracts on onions\nspecifically. So of course the next time someone wants to try such a thing,\nthey can just do it with tomatoes.\n\nDuct-tape fixes are common in the wake of anything that goes publicly wrong.\nWhen people get hurt, they demand change, and they pressure whoever is in\ncharge to give it to them. But implementing a proper fix is generally more\ncomplicated (since you have to perform a root cause analysis), less visible\n(therefore not earning the leader any social credit), or just plain\nunnecessary (if the risk was already priced in). So the incentives are in\nfavor of quickly slapping something together that superficially appears to be\na solution, without regards for whether it makes sense.\n\nOf course not all changes in the wake of a disaster are duct-tape fixes. A\ncompetent organization looks at disasters as something that gives them new\ninformation about the system in question; they then think about how they would\ndesign the system from scratch taking that information into account, and\nproceed from there to make changes. Proper solutions involve attempts to fix a\ngeneral class of issues, not just the exact thing that failed.\n\n  * Bad: \"Screw #8463 needs to be reinforced.\"\n  * Better: \"The unexpected failure of screw #8463 demonstrates that the structural simulation we ran before construction contained a bug. Let's fix that bug and re-run the simulation, then reinforce every component that falls below the new predicted failure threshold.\"\n  * Even better: \"The fact that a single bug in our simulation software could cause a catastrophic failure is unacceptable. We need to implement multiple separate methods of advance modeling and testing that won't all fail in the same way if one of them contains a flaw.\"\n  * Ideal: \"The fact that we had such an unsafe design process in the first place means we likely have severe institutional disfunction. We need to hire some experienced safety/security professionals and give them the authority necessary to identify any other flaws that may exist in our company, including whatever processes in our leadership and hiring teams led to us not having such a security team working for us already.\"\n\nAs this example shows, there isn't necessarily a single objective \"root\ncause\". It's always possible to ask \"why\" another time, and the investigators\nhave to choose where to cut off the analysis. So a \"duct tape fix\" doesn't\nrefer to any specific level of abstraction; it refers to when the level at\nwhich someone chooses to address a problem is not appropriate for the\nsituation, either because the level at which they addressed it is so narrow\nthat it's obvious something else is going to go wrong, or because there exists\na fix on a deeper level that wouldn't cost significantly more.\n\nDuct tape fixes are so tempting because they're so easy up front, but often\nthey spiral into higher costs when the cracks keep appearing and you have to\nkeep putting on more and more pieces of duct tape.\n\nOne time I was discussing a simple program to check the precision of a decimal\nnumber, and due to floating point errors it would fail on specific inputs like\n0.07. One person suggested that I should fix this by multiplying the input by\nan arbitrary constant and then divide this constant out at the end,\nrecommending a particular constant that they had discovered made the program\nsucceed on the 0.07 example I had given. I pointed out that this didn't\nactually fix the core problem and just shifted the errors to other numbers,\nsuch as 0.29. Their response was that I should make a list of all the numbers\nthat were most likely to be given as inputs, and find a constant that\nsucceeded on all the numbers in the list, resigning myself to occasional\nerrors on the uncommon numbers.\n\nThis is not how you design a reliable computer program. Checking a number's\nprecision correctly is quite trivial, and there were one-line fixes I could\nhave applied that would make the function work properly on all numbers, not\njust some of them. But this person had anchored on the first solution that\ncame to mind, and insisted on tweaking it to cover each new special case\nrather than realizing that their whole approach was completely insane.\n\nOr consider the current approach to designing AI chatbots. They have a\ntendency to say inappropriate things, so companies use reinforcement learning\nfrom human feedback to try to curb this behavior, where they give it examples\nof what not to say, and train it to avoid saying those things. Every time a\nnew version comes out, someone discovers a new unwanted behavior, the company\nadds that example of what not to do to their reinforcement learning dataset,\nand goes \"ok, all fixed!\"\n\nBut of course it hasn't been fixed. Someone else is just going to find a new\ninput prompt that leads to inappropriate behavior.\n\nThe core problem is that a large language model is a general text-prediction\nengine, not an agent with any particular goal system. You can tweak it by\npenalizing strings of text that look a certain way, and hope that once you\ngive it enough examples it will learn to fully generalize, but this is iffy.\nSure, it might work someday, like continuing to put additional screws into an\nunstable structure might eventually make it stop wobbling. But it hasn't\nworked so far, and it would be a better to understand the underlying forces at\nplay.\n\nAnother way that duct-tape fixes manifest is when they address something that\nis only correlated with the problem, rather than the problem itself. Consider\nsomeone who is given a list of photos and asked to write a computer program\nthat identifies when a photo contains a bird. The programmer notices that all\nthe bird photos they were given contain a lot of leaves, and all of the non-\nbird photos contain no leaves. So they write a program that counts up the\ngreen pixels and returns \"bird\" if the number is high enough.\n\nThis program outputs the correct results on the example photos they were\nlooking at, but it will fail pretty much immediately when applied to any new\nphoto. The programmer successfully found a feature of the photos that divided\nthem into the desired final categories, but it was not the relevant feature.\n\nYet people who lack a security mindset do this sort of thing all the time. I\nhave seen people do almost exactly what I described with the green pixels,\nbecause on the dataset they were working with at the time, it looked like they\nwere solving the problem.\n\nThis is the danger of duct-tape fixes. They lull people into a false sense of\nsecurity, letting them feel like the problem has been addressed, when the real\nissue is still there, lurking.\n\n#### Footnotes\n\n1\n\nSometimes these are called \"band-aid solutions\", but that term is also used to\nrefer to any temporary solution, whereas most of what I'm calling \"duct tape\nsolutions\" are intended to be permanent. Also it's just a bad analogy; a band-\naid usually is the best fix for a minor injury, since there's no further root\ncause that needs addressing.\n\n", "frontpage": false}
