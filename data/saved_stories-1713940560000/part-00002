{"aid": "40136090", "title": "webgraph-rs: a Rust port of the WebGraph framework", "url": "https://github.com/vigna/webgraph-rs", "domain": "github.com/vigna", "votes": 3, "user": "ot", "posted_at": "2024-04-23 19:23:20", "comments": 0, "source_title": "GitHub - vigna/webgraph-rs: A Rust port of the WebGraph framework", "source_text": "GitHub - vigna/webgraph-rs: A Rust port of the WebGraph framework\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nvigna / webgraph-rs Public\n\n  * Notifications\n  * Fork 4\n  * Star 21\n\nA Rust port of the WebGraph framework\n\n### License\n\n21 stars 4 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# vigna/webgraph-rs\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n5 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nzacchiroexamples/: remove unused importsApr 18, 2024e33b83c \u00b7 Apr 18, 2024Apr\n18, 2024\n\n## History\n\n1,040 Commits  \n  \n### .cargo\n\n|\n\n### .cargo\n\n| Now we read dumped GOVMinimalPerfectHashFunctions| Jun 11, 2023  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| fixed typo in pipeline CI| Mar 23, 2024  \n  \n### examples\n\n|\n\n### examples\n\n| examples/: remove unused imports| Apr 18, 2024  \n  \n### fuzz\n\n|\n\n### fuzz\n\n| fixed fuzzing harness| Mar 19, 2024  \n  \n### src\n\n|\n\n### src\n\n| CLI: add build time to --version string| Apr 18, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| MeasurableEncoder -> EncodeAndEstimate| Apr 15, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| refactored bin into a bvgraph executable with bench and build subcomm...|\nFeb 8, 2024  \n  \n### .mailmap\n\n|\n\n### .mailmap\n\n| add mailmap to merge/fix author identities| Apr 8, 2024  \n  \n### .pre-commit-config.yaml\n\n|\n\n### .pre-commit-config.yaml\n\n| pre-commit: enable clippy now that it passes| May 25, 2023  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| CLI: add build time to --version string| Apr 18, 2024  \n  \n### LICENSE-Apache-2.0\n\n|\n\n### LICENSE-Apache-2.0\n\n| change license filename pattern (to match GitHub convention)| May 4, 2023  \n  \n### LICENSE-LGPL-2.1-or-later\n\n|\n\n### LICENSE-LGPL-2.1-or-later\n\n| change license filename pattern (to match GitHub convention)| May 4, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Added example with for_| Apr 15, 2024  \n  \n### build.rs\n\n|\n\n### build.rs\n\n| CLI: add --version flag with build and git info| Apr 17, 2024  \n  \n### coverage.py\n\n|\n\n### coverage.py\n\n| fixed failing test and updated coverage computation| May 11, 2023  \n  \n### pipeline.sh\n\n|\n\n### pipeline.sh\n\n| added offset_deg_iter_from to BVGraph| Apr 10, 2024  \n  \n## Repository files navigation\n\n# WebGraph\n\nA Rust implementation of the WebGraph framework for graph compression.\n\nWebGraph is a framework for graph compression aimed at studying web graphs,\nbut currently being applied to several other type of graphs. It provides\nsimple ways to manage very large graphs, exploiting modern compression\ntechniques. More precisely, it is currently made of:\n\n  * A set of simple codes, called \u03b6 codes, which are particularly suitable for storing web graphs (or, in general, integers with a power-law distribution in a certain exponent range).\n\n  * Algorithms for compressing web graphs that exploit gap compression and differential compression (\u00e0 la LINK), intervalisation, and \u03b6 codes to provide a high compression ratio (see our datasets). The algorithms are controlled by several parameters, which provide different tradeoffs between access speed and compression ratio.\n\n  * Algorithms for accessing a compressed graph without actually decompressing it, using lazy techniques that delay the decompression until it is actually necessary.\n\n  * Algorithms for analysing very large graphs, such as {@link it.unimi.dsi.webgraph.algo.HyperBall}, which has been used to show that Facebook has just four degrees of separation.\n\n  * A Java implementation of the algorithms above, now in maintenance mode.\n\n  * This crate, providing a complete, documented implementation of the algorithms above in Rust. It is free software distributed under either the GNU Lesser General Public License 2.1+ or the Apache Software License 2.0.\n\n  * Data sets for large graph (e.g., billions of links).\n\nYou are welcome to use and improve WebGraph! If you find our software useful\nfor your research, please quote our papers \u201cThe WebGraph Framework I:\nCompression Techniques\u201d, by Paolo Boldi and Sebastiano Vigna, in Proc. of the\nThirteenth World\u2013Wide Web Conference, pages 595\u2013601, 2004, ACM Press, and\n\u201cWebGraph: The Next Generation (Is in Rust)\u201d, by Tommaso Fontana, Sebastiano\nVigna, and Stefano Zacchiroli, in Companion....\n\n## Quick Setup\n\nAssuming you have built all binaries, you will first need a graph in BV\nformat, for example downloading it from the LAW website. For a graph with\nbasename BASENAME, you will need the BASENAME.graph file (the bitstream\ncontaining a compressed representation of the graph), the BASENAME.properties\nfile (metadata) and the BASENAME.offsets file (a bitstream containing pointers\ninto the graph bitstream).\n\nAs a first step, if you need random access to the successors of a node, you\nneed to build an Elias\u2013Fano representation of the offsets (this part can be\nskipped if you just need sequential access). There is a CLI command webgraph\nwith many subcommands, among which build, and webgraph build ef BASENAME will\nbuild the representation for you, serializing it with \u03b5-serde in a file named\nBASENAME.ef.\n\nThen, to load the graph you need to call\n\n    \n    \n    let graph = BVGraph::with_basename(\"BASENAME\").load()?;\n\nThe with_basename method returns a LoadConfig instance that can be further\ncustomized, selecting endianness, type of memory access, and so on. By default\nyou will get big endianness, memory mapping for both the graph and the\noffsets, and dynamic code dispatch.\n\nOnce you load the graph, you can retrieve the successors of a node or iterate\non the whole graph. In particular, using the handy for_ macro, you can write\nan iteration on the graph as\n\n    \n    \n    for_!((src, succ) in graph { for dst in succ { [do something with the arc src -> dst] } });\n\n## More Options\n\n  * By starting from the BVGraphSeq class you can obtain an instance that does not need the BASENAME.ef file, but provides only iteration.\n\n  * Graphs can be labeled by zipping them together with a labeling. In fact, graphs are just labelings with usize labels.\n\n## Operating on Graphs\n\nThere are many operations available on graphs, such as transpose and simplify.\nYou can permute a graph.\n\n## Acknowledgments\n\nThis software has been partially supported by project SERICS (PE00000014)\nunder the NRRP MUR program funded by the EU - NGEU, and by project ANR\nCOREGRAPHIE, grant ANR-20-CE23-0002 of the French Agence Nationale de la\nRecherche.\n\n## About\n\nA Rust port of the WebGraph framework\n\n### Resources\n\nReadme\n\n### License\n\nActivity\n\n### Stars\n\n21 stars\n\n### Watchers\n\n4 watching\n\n### Forks\n\n4 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 5\n\n## Languages\n\n  * Rust 99.0%\n  * Other 1.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
