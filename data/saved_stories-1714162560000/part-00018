{"aid": "40169401", "title": "Learn One Thing at a Time", "url": "https://blog.lawrencejones.dev/learn-one-thing/", "domain": "lawrencejones.dev", "votes": 4, "user": "nalgeon", "posted_at": "2024-04-26 13:52:06", "comments": 0, "source_title": "Learn one thing at a time", "source_text": "Learn one thing at a time | Lawrence Jones\n\nLearn one thing at a time\n\n# Lawrence Jones\n\n# Learn one thing at a time\n\nApril 26, 2024\n\nOf the mental models and rules I use in my life, by far the most useful is to\nlearn only one thing at any given time.\n\nIf you get it right, you:\n\n  * Ensure work is the right balance of challenging for it to be enjoyable.\n  * Avoid stalling due to an overload of uncertainty.\n  * Learn better, and faster.\n\nThis rule works for individuals but is also useful for coaching others,\ndebugging team performance, or helping people grow.\n\n## As an individual\n\nOne of the reasons people find learning new programming languages hard is\nbecause they don\u2019t follow this rule.\n\nTake learning Rust, for example.\n\nExcited to learn the language and get building, what could possibly be a\nbetter learning side-project than implementing the Raft algorithm from the\nwhitepaper?\n\nWell, in order to implement this, you must:\n\n  * Have a strong theoretical understanding of the algorithm.\n  * Know how to structure the algorithm in code, which often looks different than it does in a paper.\n  * Implement the technical nuances of the algorithm (e.g. sending packets, etc).\n  * Learn Rust semantics and how to work with the language (e.g. Borrow Checker, type-system, etc).\n\nEach of these problems are individually challenging. Solving them all together\nis a recipe for failure, collectively representing so much uncertainty that\u2013if\nyou don\u2019t break it into pieces and solve them independently\u2013you may be unable\nto progress at all.\n\nIf the goal is actually to learn Rust, we\u2019ll do much better to try\nimplementing a simple program first to learn the operational semantics of the\nlanguage. Then a program with more structure, helping learn types and modules.\nFinally, once you\u2019ve really studied the paper, you might try implementing\nRaft.\n\nA few situations and how this rule applies:\n\n  * Never written Rust before? Start simple first, write a basic program with no structure.\n  * Understand Rust but haven\u2019t built a networked app yet? Practice networking in a toy program first.\n  * Already implemented Raft in another language? Great, you can probably get going as the only new thing you\u2019re learning is the language.\n\nThe last point is interesting: this rule isn\u2019t always about limiting your\nambition, it\u2019s about helping you identify if you should break down a problem,\nor solve it wholesale. It\u2019s about ensuring you can make consistent,\nincremental progress more than anything else, as\u2013over time\u2013the only thing that\nmatters for solving hard problems is whether you can sustain your energy to\npersist.\n\n## Focusing your learning\n\nYou might be working to build a thing, or you might be trying to learn\nsomething.\n\nDoing both at once is suboptimal, though often unavoidable when your goal is\nto ship a thing. If your goal is learning, though, you can likely focus\nexclusively on that and be more effective as a result.\n\nI found learning how to write Go code difficult. A beginner level of\nproficiency came quickly but it took me a long time to learn the idioms and\nfind patterns that weren\u2019t a rephrasing from another language that didn\u2019t\nquite fit.\n\nTo break out of this, I took a codebase I was familiar with and rewrote it\nmany times over, incrementally improving the quality of the code. I\u2019d spent so\nmuch time working on it that I knew the problem space really well, letting me\nfocus entirely on the code itself.\n\nConveniently, the codebase is open-source: gocardless/pgsql-cluster-manager,\nan HA Postgres cluster supervisor that manages a proxy to route incoming\nPostgres connections to whichever Postgres node is the current primary.\n\nThis project was the first Go codebase I\u2019d ever built myself. The original\ncode was functional but messy, leading me to rewrite it almost from scratch in\nan attempt to fix some of my annoyances with the initial version. When we\ndeprecated Corosync and Pacemaker (which pgsql relied on) we rewrote the\nproject into gocardless/stolon-pgbouncer, now the third time I\u2019d tried solving\nthis problem, cementiong the lessons from previous attempts.\n\nEventually, I took everything I\u2019d learned and applied it building pgsink, a\nPostgres change-capture tool that I used as a sandbox to practice improving my\nGo code for several years.\n\nRehashing the same problem gave me the headspace to really learn. There\u2019s no\nway I\u2019d have improved as much over three different projects.\n\n## Applied to teams\n\nIf you lead technical teams, you should be incorporating this rule on the\ndaily.\n\nWhen onboarding a new joiner or helping develop existing members, you want to\nhelp people pick projects that meet this criteria.\n\nThe challenges found in a team context are usually:\n\n  * Product, where you need to know an existing product well in order to deliver.\n  * Business, when the work requires navigating the organisation, e.g. project with a lot of stakeholders.\n  * Technical, if the work requires technical proficiency in a tool or system, e.g. building a feature that needs to be scalable.\n\nIdeal staffing configurations are:\n\n  * Everyone is comfortable across all areas \u21d2 unlikely, and often neglecting an opportunity to develop someone.\n  * One person on the team is new to one of the challenges \u21d2 ideal sweet spot, where the team can invest time supporting that person and upskilling them while making good progress.\n  * No mutual gaps \u21d2 collectively, the team have expertise and experience in all the challenges this project presents, even if some are new to some on the team.\n\nNot always possible, but these are the conditions where individual growth can\nbe afforded without it impacting delivery. If you can arrange projects to\nadhere to this, you should be able to grow your team sustainably while\nallowing you to ship consistently.\n\nIf you liked this post and want to see more, follow me at @lawrjones.\n\nPrevious post\n\nLooking back at 2023\n\nFollow @lawrjones\n\n", "frontpage": false}
