{"aid": "40211330", "title": "Deep Dive into Linux Page Cache", "url": "https://biriukov.dev/docs/page-cache/0-linux-page-cache-for-sre/", "domain": "biriukov.dev", "votes": 1, "user": "grep_it", "posted_at": "2024-04-30 14:33:02", "comments": 0, "source_title": "Linux Page Cache for SRE", "source_text": "Linux Page Cache for SRE | Viacheslav Biriukov\n\nLinux Page Cache for SRE\n\n# SRE deep dive into Linux Page Cache #\n\nIn this series of articles, I would like to talk about Linux Page Cache. I\nbelieve that the following knowledge of the theory and tools is essential and\ncrucial for every SRE. This understanding can help both in usual and routine\neveryday DevOps-like tasks and in emergency debugging and firefighting. Page\nCache is often left unattended, and its better understanding leads to the\nfollowing:\n\n  * more precise capacity planning and container limit calculations;\n  * better debugging and investigation skills for memory and disk intensive applications such as database management system and file sharing storages;\n  * building safe and predictable runtimes for memory and/or IO-bound ad-hoc tasks (for instance: backups and restore scripts, rsync one-liners, etc.).\n\nI\u2019ll display what utils you should keep in mind when you\u2019re dealing with Page\nCache related tasks and problems, how to use them properly to understand real\nmemory usage, and how to reveal issues with them. I will try to give you some\nexamples of using these tools that are close to real life situations. Here are\nsome of these tools I\u2019m talking about below: vmtouch, perf, cgtouch, strace ,\nsar and page-type.\n\nAlso, as the title says, \u201cdeep dive\u201d, the internals of these utils will be\nshown with an emphasis on the Page Cache stats, events, syscalls and kernel\ninterfaces. Here are some examples of what I\u2019m touching on in the following\npost:\n\n  * procfs files: /proc/PID/smaps, /proc/pid/pagemap, /proc/kpageflags, /proc/kpagecgroup and sysfs file: /sys/kernel/mm/page_idle;\n  * system calls: mincore(), mmap(), fsync(), msync(), posix_fadvise(), madvise() and others;\n  * different open and advise flags O_SYNC, FADV_DONTNEED, POSIX_FADV_RANDOM, MADV_DONTNEED, etc.\n\nI\u2019ll try to be as verbose as possible with simple (almost all the way) code\nexamples in Python, Go and a tiny bit of C.\n\nAnd finally, any conversations about modern GNU/Linux systems can\u2019t be fully\nconducted without touching the cgroup (v2 in our case) and the systemd topics.\nI\u2019ll show you how to leverage them to get the most out of the systems, build\nreliable, well-observed, controlled services, and sleep well at night while\non-call.\n\nReaders should be confident if they have middle GNU/Linux knowledge and basic\nprogramming skills.\n\nAll code examples larger than 5 lines can be found on github:\nhttps://github.com/brk0v/sre-page-cache-article.\n\nRead next chapter \u2192\n\nThis website uses \"cookies\". Using this website means you're OK with this. If\nyou are NOT, please close the site page.\n\n", "frontpage": false}
