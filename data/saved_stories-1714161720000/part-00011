{"aid": "40167004", "title": "Show HN: PC Face \u2013 Bitmap arrays for CP437 characters rendered with PC OEM fonts", "url": "https://github.com/susam/pcface", "domain": "github.com/susam", "votes": 1, "user": "susam", "posted_at": "2024-04-26 08:17:45", "comments": 0, "source_title": "GitHub - susam/pcface: Bitmap arrays for rendering CP437 glyphs using IBM PC OEM fonts", "source_text": "GitHub - susam/pcface: Bitmap arrays for rendering CP437 glyphs using IBM PC\nOEM fonts\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nsusam / pcface Public\n\n  * Notifications\n  * Fork 0\n  * Star 77\n\nBitmap arrays for rendering CP437 glyphs using IBM PC OEM fonts\n\n### License\n\nView license\n\n77 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# susam/pcface\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n3 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nsusamFix year in copyright notice in the footerJul 9, 20238629ba4 \u00b7 Jul 9,\n2023Jul 9, 2023\n\n## History\n\n47 Commits  \n  \n### out\n\n|\n\n### out\n\n| Add bitmaps for Oldschool PC fonts from VileR| Feb 12, 2023  \n  \n### src\n\n|\n\n### src\n\n| Fix year in copyright notice in the footer| Jul 9, 2023  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Fix package installation validation in Makefile| Feb 12, 2023  \n  \n### CHANGES.md\n\n|\n\n### CHANGES.md\n\n| Update changelog for version 0.3.0| Feb 17, 2023  \n  \n### LICENSE.md\n\n|\n\n### LICENSE.md\n\n| Dual license bitmaps| Feb 12, 2023  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Move demo to top-level site directory| Jul 9, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Move demo to top-level site directory| Jul 9, 2023  \n  \n### package.json\n\n|\n\n### package.json\n\n| Set version to 0.3.0| Feb 17, 2023  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| Set version to 0.3.0| Feb 17, 2023  \n  \n## Repository files navigation\n\n# PC Face\n\nPC Face is a collection of programmer-friendly resources that allow drawing\nCP437 characters on a graphical canvas. This project provides bitmap arrays\nfor all 256 glyphs from the CP437 character set rendered using various free\nfonts that reproduce the original IBM PC OEM fonts.\n\nAdditionally, this project includes a few Python functions to generate these\nbitmaps and a few JavaScript functions that render these bitmaps on a\ngraphical canvas.\n\nPerhaps you are making a retro-style game where you want to take full control\nof what each pixel should be. Or perhaps you want to render CP437 glyphs using\nasterisks to make a text banner. The bitmap arrays provided in this project\nmight turn out to be useful for such activities. The available bitmap arrays\ncan be translated to pixels on screen or symbols for standard output to render\nCP437 glyphs.\n\nVisit susam.github.io/pcface/ to see a demo.\n\n## Contents\n\n  * Resources\n  * Demos\n\n    * Quick Demo\n    * Detailed Demo\n  * Bitmap Format\n  * Font Details\n\n    * Modern DOS Font\n    * Oldschool PC Fonts\n  * Toolkit Usage\n\n    * CLI\n    * Python API\n    * JavaScript API\n  * License\n\n    * Original Fonts\n    * Modern DOS Bitmaps\n    * Oldschool PC Font Bitmaps\n    * Source Code\n  * Support\n  * Channels\n  * More\n\n## Resources\n\nThere are a number of files provided in the out/ directory of this project.\nVisit susam.github.io/pcface/out/ to browse these files. This directory\ncontains several subdirectories for various free fonts based on the original\nIBM PC OEM fonts. Each font directory contains bitmap arrays for the font and\na few other files. Links to modern-dos-8x16 resource files are provided below\nas examples while describing these resources. Here is a brief description of\neach file:\n\n  * out/modern-dos-8x16/fontlist.js: Bitmap representation of all 256 glyphs from the CP437 character set exposed as a JavaScript array of bitmap arrays. Each bitmap array represents the bitmap of a CP437 character.\n  * out/moderndos-8x16/fontmap.js: Bitmap representation of all CP437 glyphs from the CP437 character set exposed as a JavaScript object that maps each CP437 character to its bitmap array.\n  * out/moderndos-8x16/glyph.txt: All CP437 glyphs represented using asterisks.\n  * out/moderndos-8x16/graph.txt: All CP437 glyphs represented using the at symbol (@) and dots (.). Each row of the glyph is prefixed with the binary code of the row represented in hexadecimal. The same binary codes appear as comments in the JavaScript files mentioned above.\n  * out/moderndos-8x16/preview-8x16.png: A preview of the font read from the original font file.\n  * out/moderndos-8x16/preview-16x32.png: A larger preview of the font read from the original font file.\n\nSimilar files are available for each such font included in this project. Visit\nsusam.github.io/pcface/out/ to browse them.\n\nThese files are also available via CDN at\nhttps://cdn.jsdelivr.net/npm/pcface/out/.\n\n## Demos\n\n### Quick Demo\n\nFor a quick demo of the various bitmaps available in this project, visit the\ndemo page at susam.github.io/pcface/. There is a dropdown menu at the bottom\nthat can be used to select bitmaps for different fonts.\n\nThis demo exercises both a font list from fontlist.js and a font map from\nfontmap.js for the selected font. The font list demo is shown in the first\ncanvas using green foreground colour. The font map demo is shown in the second\ncanvas using amber colour.\n\nThe rendered glyphs look exactly the same in both demos because the same\nbitmap arrays are used in both cases. The only difference between fontlist.js\nand fontmap.js is how these bitmap arrays are exposed in a JavaScript const.\nThe former exposes an array of bitmap arrays whereas the latter exposes an\nobject that maps each CP437 character to its bitmap array.\n\n### Detailed Demo\n\nThere is another slightly more detailed demo available at\nsusam.github.io/pcface/retro.html.\n\nIn the demo page, you would notice that each bitmap demo comes in two\nvariants: one with the suffix font-list and another with the suffix font-map.\nThe font-list demo loads fontlist.js of the chosen font and renders the glyphs\nin green. The font-map demo loads fontmap.js of the chosen font and renders\nthe glyphs in amber.\n\nWhile the previous demo shows only 40 characters per line on a fixed size\ncanvas with a single font size that equals the original font size scaled up\ntwice, this demo shows 80 characters per line in two different font sizes:\noriginal font size as well as a scaled up font size that is twice the original\nfont size. Further, in this demo, the canvas automatically resizes itself to\nfit the browser window size whenever the browser is resized.\n\n## Bitmap Format\n\nThe format of the bitmaps available in this project is quite simple. Each\nglyph is represented with a WxH grid of pixels where W is the width of each\nglyph and H is the height of each glyph. For example, each bitmap in\nmoderndos-8x16 represents 16 rows of pixels with 8 columns in each row. These\n16 rows are represented as 16 integers in the bitmap for each glyph. For\nexample, the glyph for the uppercase letter 'B' rendered using this font is\nrepresented as:\n\n    \n    \n    [ 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00 ], // [B] (66)\n\nEach integer represents the dots that must be plotted for every row of the\nglyph. The integers 0x00 and 0x00 at the beginning means that the top two rows\nof the glyph are blank. Then 0xfc (binary 1111100) means that the first 6\npixels of the third row are plotted with the font's foreground colour and the\nlast two pixels are left blank. In this manner, 16 rows of pixels must be\nplotted.\n\nHere is an example Python code that reads these bitmaps and plots the glyph on\nstandard output using a dot (.) for every 0 bit and the at symbol (@) for\nevery 1 bit:\n\n    \n    \n    bitmap = [ 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, ] s = '' for row in bitmap: s += f'{row:#04x} ' + f'{row:08b}\\n'.translate(str.maketrans('01', '.@')) print(s)\n\nHere is the output:\n\n    \n    \n    0x00 ........ 0x00 ........ 0xfc @@@@@@.. 0x66 .@@..@@. 0x66 .@@..@@. 0x66 .@@..@@. 0x7c .@@@@@.. 0x66 .@@..@@. 0x66 .@@..@@. 0x66 .@@..@@. 0x66 .@@..@@. 0xfc @@@@@@.. 0x00 ........ 0x00 ........ 0x00 ........ 0x00 ........\n\nIf you need more help with writing the code to translate the bitmaps to\npixels, refer to the drawChar(), drawString(), and drawStrings() functions in\nsrc/pcface.js. You can also load this script in your web page using a CDN URL\nand use these functions directly in your page. This is explained in more\ndetail in section JavaScript API.\n\nIt should be possible to refer to these functions and write similar code in a\ndifferent programming language for a graphical toolkit of your choice.\n\n## Font Details\n\n### Modern DOS Font\n\nThis project includes Modern DOS 8x16 font (version 20190101.02) developed by\nJayvee Enaguas. This font is available under the terms of the CC0 1.0\nUniversal Public Domain Dedication. A copy of the font is also archived in the\nsrc/font/moderndos/ directory of this project.\n\nThis font is based on the IBM VGA 8x16 and Verite 8x16 OEM fonts for IBM PCs.\nSome glyphs in this font look exactly like the glyphs of IBM VGA 8x16 while\nsome others look exactly like the glyphs of Verite 8x16. However, there are\nalso several glyphs in this font that match neither of the two OEM fonts.\nInstead they happen to be adaptations of the glyphs found in one or both of\nthe OEM fonts.\n\nIn my opinion, this font contains the best parts of both OEM fonts. I like\nthat this font has the slashed zero of Verite. I also like the more squarish\noutline of the letters in Verite that has been inherited into this font. While\nit inherits a lot of good design from Verite 8x16, it also inherits some nice\nfeatures from IBM VGA 8x16. For example, it has the raised stem for the digit\n2 and the curved stem for the digit 7 from IBM VGA 8x16.\n\n### Oldschool PC Fonts\n\nThis project includes several Oldschool PC fonts (version 2.2) developed by\nVileR. These fonts are available under the terms of Creative Commons\nAttribution-ShareAlike 4.0 International License. Copies of these fonts are\nalso archived in the src/font/oldschool/ directory of this project.\n\nThese fonts do an excellent job of reproducing the original IBM PC OEM fonts\nas faithfully as possible. However, these fonts also differ from the original\nOEM fonts in minor ways, especially, to correct minor errors in the original\nfonts. See the FAQ at the Oldschool PC Documentation for more details about\nthese corrections.\n\n## Toolkit Usage\n\nWhile the primary purpose of this project is to distribute bitmap arrays for\nCP437 glyphs, this project also makes some of the work that went into\ngenerating and testing these bitmaps as Python and JavaScript functions. The\nPython functions are also packaged in the form of a command-line interface\n(CLI) tool. The following subsections provide a brief introduction to the CLI\ntool as well as the Python and JavaScript functions.\n\n### CLI\n\nThe Python command line interface (CLI) tool that this project provides can be\nused to generate your own bitmap arrays for CP437 glyphs with a font of your\nchoice. The following steps explain how we can do this using the Oldschool IBM\nEGA 9x14 font, a font that is not included in this project.\n\n  1. First download and extract the font file for Oldschool IBM EGA 9x14:\n    \n        curl -o oldschool.zip https://int10h.org/oldschool-pc-fonts/download/oldschool_pc_font_pack_v2.2_FULL.zip unzip -j oldschool.zip \"ttf - Px (pixel outline)/Px437_IBM_EGA_9x14.ttf\"\n\n  2. Create a virtual Python environment and install PC Face:\n    \n        python3 -m venv venv venv/bin/pip3 install pcface\n\n  3. Enter the following command to print the usage details of the tool:\n    \n        venv/bin/pcface -h\n\n  4. Create bitmap arrays and other output files:\n    \n        venv/bin/pcface -s 16 Px437_IBM_EGA_9x14.ttf oldschool-ega-9x14/\n\nNote that the output directory name must end with the dimension of each output\nglyph expressed in WxH format where W is the width of each glyph and H is the\nheight of each glyph. The -s option specifies the font size. It should be set\nto the font size that leads to glyphs of the desired dimension. If the -s\noption is omitted, a font size of H is used where H is the glyph height read\nfrom the output directory name which may not always produce the correct glyph\ndimension.\n\n  5. Now create bitmap arrays for the same font but with the glyph width and height doubled:\n    \n        venv/bin/pcface -s 32 Px437_IBM_EGA_9x14.ttf oldschool-ega-18x28/\n\nThe output directories would now contain JavaScript files containing the\nbitmap arrays as well as a few other files that illustrate the glyphs. See\nsection Resources for a brief description of these files.\n\n### Python API\n\nThe following steps show how to get started with the Python API:\n\n  1. First download and extract the font file for Oldschool IBM EGA 9x14:\n    \n        curl -o oldschool.zip https://int10h.org/oldschool-pc-fonts/download/oldschool_pc_font_pack_v2.2_FULL.zip unzip -j oldschool.zip \"ttf - Px (pixel outline)/Px437_IBM_EGA_9x14.ttf\"\n\n  2. Create a virtual Python environment and install PC Face:\n    \n        python3 -m venv venv venv/bin/pip3 install pcface\n\n  3. Now write this Python script and save it in a file, say, ex1.py.\n    \n        import pcface bitmap = pcface.make_bitmap('A', 'Px437_IBM_EGA_9x14.ttf', 16, 9, 14) graph = pcface.make_graph(bitmap, 9, '.@', False) print(graph)\n\n  4. Enter the following command to execute the script:\n    \n        venv/bin/python3 ex1.py\n\nThe following output should appear:\n\n    \n        ......... ......... ...@..... ..@@@.... .@@.@@... @@...@@.. @@...@@.. @@@@@@@.. @@...@@.. @@...@@.. @@...@@.. ......... ......... .........\n\nSee src/example/ for more examples of Python scripts that invoke the Python\nAPI of this project.\n\nAlso, see Python API Documentation for complete documentation of all the\nfunctions exposed in the Python API.\n\n### JavaScript API\n\nHere is a minimal HTML example that shows how PC Face and a font map can be\nloaded from a CDN into a web page and used:\n\n    \n    \n    <!DOCTYPE html> <html lang=\"en\"> <head> <title>PC Face Demo</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"> <style> body {background: #111} canvas {background: #000; image-rendering: pixelated; margin: auto; display: block} </style> <script src=\"https://cdn.jsdelivr.net/npm/pcface/src/pcface.js\"></script> <script src=\"https://cdn.jsdelivr.net/npm/pcface/out/moderndos-8x16/fontmap.js\"></script> <script> 'use strict' window.addEventListener('load', function () { const canvas = document.getElementById('canvas') const ctx = canvas.getContext('2d') ctx.fillStyle = '#3f3' pcface.drawString(PC_FACE_MODERNDOS_8X16_FONT_MAP, ctx, 8, \"hello, world\", 0, 0, 2) }) </script> </head> <body> <canvas id=\"canvas\"></canvas> </body> </html>\n\nHere is another example that loads a font list instead of a font map:\n\n    \n    \n    <!DOCTYPE html> <html lang=\"en\"> <head> <title>PC Face Demo</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"> <style> body {background: #111} canvas {background: #000; image-rendering: pixelated; margin: auto; display: block} </style> <script src=\"https://cdn.jsdelivr.net/npm/pcface/src/pcface.js\"></script> <script src=\"https://cdn.jsdelivr.net/npm/pcface/out/moderndos-8x16/fontlist.js\"></script> <script> 'use strict' window.addEventListener('load', function () { const canvas = document.getElementById('canvas') const ctx = canvas.getContext('2d') ctx.fillStyle = '#3f3' pcface.drawString(PC_FACE_MODERNDOS_8X16_FONT_LIST, ctx, 8, [65, 32, 61, 32, 227, 114, 253], 0, 0, 2) }) </script> </head> <body> <canvas id=\"canvas\"></canvas> </body> </html>\n\nSee JavaScript API Documentation for complete documentation of all the\nfunctions exposed in the JavaScript API.\n\n## License\n\n### Original Fonts\n\nThe original fonts archived in this project are available under the terms of\nthe orignal licenses chosen by the font developers, i.e.,\n\n  * src/font/moderndos/ is available under the terms of the CC0 1.0 Universal Public Domain Dedication;\n  * src/font/oldschool/ is available under the terms of the Creative Commons Attribution-ShareAlike 4.0 International License.\n\n### Modern DOS Bitmaps\n\nYou may use the content of the following directory under the terms of either\nthe MIT License or the CC0 1.0 Universal Public Domain Dedication:\n\n  * out/out/moderndos-8x16/\n\n### Oldschool PC Font Bitmaps\n\nYou may use the content of the following directory under the terms of either\nthe GNU General Public License v3 or the Creative Commons Attribution-\nShareAlike 4.0 International License:\n\n  * out/oldschool-bios-8x8/\n  * out/oldschool-cga-8x8/\n  * out/oldschool-ega-8x14/\n  * out/oldschool-mda-9x14/\n  * out/oldschool-model30-8x16/\n  * out/oldschool-pgc-8x16/\n  * out/oldschool-verite-8x16/\n  * out/oldschool-vga-8x16/\n  * out/oldschool-vga-9x14/\n  * out/oldschool-vga-9x16/\n  * src/demo.html\n  * src/retro.html\n\n### Source Code\n\nAll other files in this project, excluding the ones listed in the three\nsubsections above, are available under the terms of the MIT License. See\nLICENSE.md for the complete license text.\n\n## Support\n\nTo report bugs, suggest improvements, or ask questions, create issues.\n\n## Channels\n\nThe author of this project hangs out at the following places online:\n\n  * Website: susam.net\n  * Twitter: @susam\n  * Mastodon: @susam@mastodon.social\n  * GitHub: @susam\n  * Matrix: #susam:matrix.org\n  * IRC: #susam:libera.chat\n\nYou are welcome to subscribe to, follow, or join one or more of the above\nchannels to receive updates from the author or ask questions about this\nproject.\n\n## More\n\nSee Andromeda Invaders where a small subset of the Modern DOS 8x16 bitmaps\navailable in this project has been used to render text on a game canvas.\n\n## About\n\nBitmap arrays for rendering CP437 glyphs using IBM PC OEM fonts\n\n### Topics\n\nfont dos bitmap typeface glyphs cp437 ibm-pc verite\n\n### Resources\n\nReadme\n\n### License\n\nView license\n\nActivity\n\n### Stars\n\n77 stars\n\n### Watchers\n\n4 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 3\n\n0.3.0 Latest\n\nFeb 18, 2023\n\n\\+ 2 releases\n\n## Languages\n\n  * Python 30.0%\n  * HTML 29.8%\n  * JavaScript 15.1%\n  * Common Lisp 12.7%\n  * Makefile 12.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
