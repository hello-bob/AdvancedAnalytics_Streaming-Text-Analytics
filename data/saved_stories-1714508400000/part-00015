{"aid": "40210851", "title": "Create a Neovim Plugin in Python", "url": "https://mkaz.blog/code/neovim-plugin-python", "domain": "mkaz.blog", "votes": 1, "user": "marcuskaz", "posted_at": "2024-04-30 13:37:38", "comments": 0, "source_title": "Neovim plugin in Python - mkaz.blog", "source_text": "Neovim plugin in Python - mkaz.blog\n\n### mkaz.blog\n\n# Neovim plugin in Python\n\nThe Vimwiki plugin is quite useful, but I only use a small subset of its\nfeatures, primarily the daily notes and checking off of todo lists. See my\nVimwiki page in my Working with Vim guide.\n\nHowever, the daily notes don't organize how I want them to, I want to store\nthem in YYYY/MM/note.md. The plugin has limited customization so I figured I\ncould write my own plugin. I call it Neojot.\n\nInitially I started writing the plugin in Lua, which I don't know at all. Plus\nlooks like no batteries are included with Lua, the standard library is thin.\nAnorexic.\n\nSo why not Python.\n\nThe documentation for writing a Neovim plugin in Python is a bit limited, but\nonce the plugin is stubbed out, relatively straight forward to follow the rest\nof the Neovim API documentation.\n\nSo here is what I figured out on how to stub out a plugin, hopefully it gets\nyou further faster.\n\n## Directory Structure\n\nI used the remote plugin interface and pynvim client using the following\ndirectory structure.\n\nIn the lua directory, I created a plugin file neojot.lua that creates my\nkeybindings, and creates a hook for Python to grab the setup config.\n\nIn the rplugin/python3 directory, I created a Python file neojot.py that\ncreates the individual functions that does all the voodoo.\n\n## Example Plugin\n\nHere is a minimal example plugin with this structure. The example maps\n<Leader>i to a function in the Python code that echoes a configuration value\nto the command line in Vim.\n\nIn example_plugin/lua/example_plugin.lua\n\n    \n    \n    local config = {} local function setup(cfg) config = cfg -- add keymaps here vim.keymap.set('n', '<Leader>i', ':call ExPlugEcho()<CR>', { silent = true }) end -- Used in Python to get config local function getConfig() return config end return { setup=setup, getConfig=getConfig }\n\nIn example_plugin/rplugin/python3/example_plugin.py\n\n    \n    \n    import pynvim @pynvim.plugin class ExPlugin(object): def __init__(self, nvim): self.nvim = nvim self.cfg = nvim.exec_lua('return require(\"example_plugin\").getConfig()') @pynvim.function(\"ExPlugEcho\", sync=True) def echo(self, args): self.nvim.command(f\"echomsg 'From config: {self.cfg['path']}'\")\n\nThat is all that is needed for plugin code.\n\nInstall plugin using vim-plug to refer to directory ~/src/example_plugin\nlocation.\n\nConfig plugin using:\n\n    \n    \n    require(\"example_plugin\").setup({ path = \"/home/mkaz/Documents\", })\n\nRelaunch Neovim and run :UpdateRemotePlugin\n\nOpen a buffer and type <Leader>i to see message.\n\n## Development Tips\n\nWhile developing, when updating the Python files Neovim needs to be quit and\nrestarted to have the changes take effect.\n\nRun :UpdateRemotePlugin when making changes to Lua file that loads keymaps.\n\nSee my Neojot repo for the plugin I built. The plugin is rather basic but\nshows a few features and commands.\n\nRead the Neovim API documentation to figure out what can be done.\n\nThe Pynvim documentation is barely useful.\n\n", "frontpage": false}
