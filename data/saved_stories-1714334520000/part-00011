{"aid": "40187072", "title": "Pdf.tocgen", "url": "https://krasjet.com/voice/pdf.tocgen/", "domain": "krasjet.com", "votes": 1, "user": "nbernard", "posted_at": "2024-04-28 08:51:18", "comments": 0, "source_title": "pdf.tocgen", "source_text": "pdf.tocgen\n\n# pdf.tocgen\n\n    \n    \n    in.pdf \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u25bd \u25bd \u25bd \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 recipe \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 ToC \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 pdfxmeta \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b7\u2502 pdftocgen \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b7\u2502 pdftocio \u251c\u2500\u2500\u2500\u25b7 out.pdf \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\npdf.tocgen is a set of command-line tools for automatically extracting and\ngenerating the table of contents (ToC) of a PDF file. It uses the embedded\nfont attributes and position of headings to deduce the basic outline of a PDF\nfile.\n\n# 1 An overview\n\nFor example, for the PDF version of Paul Graham\u2019s book On Lisp, available for\ndownload on his website but comes without a table of content, we can use the\npdfxmeta command to build a recipe file,\n\nIn [1]\n\n    \n    \n    $ pdfxmeta --auto 1 --page 14 onlisp.pdf \"Extensible\" >> recipe.toml\n\nIn [2]\n\n    \n    \n    $ pdfxmeta --auto 2 --page 14 onlisp.pdf \"^Design\" >> recipe.toml\n\nIn [3]\n\n    \n    \n    $ sed '/^#.*/d' < recipe.toml\n\nOut [3]\n\n    \n    \n    [[heading]] level = 1 greedy = true font.name = \"Times-Bold\" font.size = 19.92530059814453 [[heading]] level = 2 greedy = true font.name = \"Times-Bold\" font.size = 11.9552001953125\n\nsaved as recipe.toml. Then use pdftocgen to automatically generate a table of\ncontents for the book, extracted using the recipe.\n\nIn [4]\n\n    \n    \n    $ pdftocgen onlisp.pdf < recipe.toml\n\nOut [4]\n\n    \n    \n    \"Preface\" 5 \"Bottom-up Design\" 5 \"Plan of the Book\" 7 \"Examples\" 9 \"Acknowledgements\" 9 \"Contents\" 11 \"The Extensible Language\" 14 \"1.1 Design by Evolution\" 14 \"1.2 Programming Bottom-Up\" 16 \"1.3 Extensible Software\" 18 \"1.4 Extending Lisp\" 19 \"1.5 Why Lisp (or When)\" 21 \"Functions\" 22 \"2.1 Functions as Data\" 22 \"2.2 Defining Functions\" 23 \"2.3 Functional Arguments\" 26 \"2.4 Functions as Properties\" 28 \"2.5 Scope\" 29 \"2.6 Closures\" 30 \"2.7 Local Functions\" 34 \"2.8 Tail-Recursion\" 35 \"2.9 Compilation\" 37 \"2.10 Functions from Lists\" 40 [--snip--]\n\nWe could save the output to a file called toc,\n\nIn [5]\n\n    \n    \n    $ pdftocgen onlisp.pdf < recipe.toml > toc\n\nand import it to the original PDF file using the pdftocio command, saving it\nas output.pdf.\n\nIn [6]\n\n    \n    \n    $ pdftocio -o output.pdf onlisp.pdf < toc\n\nThis is just an overview of the basic workflow. Please read section 4 for a\ndetailed explanation and walk-through.\n\npdf.tocgen works best for PDF files produces from a document using pdftex (and\nits friends pdflatex, pdfxetex, etc.), but it\u2019s designed to work with any\nsoftware-generated PDF filesThat is, you shouldn\u2019t expect it to work with\nscanned PDFs. Some examples include troff/groff, Adobe InDesign, Microsoft\nWord, and probably more.\n\npdf.tocgen is a free software. The source code can be found in the sink or on\nGitHub and is licensed under the GPLv3 license. You are free to tinker with\nthe source code, but any derivatives must guarantee the freedom of users. If\nyou want to contribute to this project, send a patch or open a pull request on\nGitHub.\n\n  * 1 An overview\n  * 2 Installation\n  * 3 Note to LaTeX users\n  * 4 A worked example\n\n    * Step 1: Build a recipe\n    * Step 2: Generate table of contents\n    * Step 3: Import the ToC to PDF\n    * A summary\n  * 5 One more example: Mathematics\n\n    * Option 1: greedy filter\n    * Option 2: Regex\n    * Option 3: Multiple filters\n  * 6 The recipe file\n  * 7 Command examples\n\n    * 7.1 pdftocio\n    * 7.2 pdftocgen\n    * 7.3 pdfxmeta\n  * 8 Development\n  * 9 License\n  * 10 Support\n\n# 2 Installation\n\npdf.tocgen is written in Python 3. It is known to work with Python 3.7 to 3.11\non Linux, Windows, and macOSOn BSDs, you probably need to build PyMuPDF\nyourself. Use\n\nIn [7]\n\n    \n    \n    $ pip install -U pdf.tocgen\n\nto install the latest version systemwide. Alternatively, use pipx or\n\nIn [8]\n\n    \n    \n    $ pip install -U --user pdf.tocgen\n\nto install it for the current user. I would recommend the latter approach to\navoid messing up the package manager on your system.\n\nIf you are using an Arch-based Linux distro, the package is also available on\nAUR. It can be installed using any AUR helper, for example yay:\n\nIn [9]\n\n    \n    \n    $ yay -S pdf.tocgen\n\n# 3 Note to LaTeX users\n\nBefore we continue, note that this tool targets readers, not authors.\n\nThe intended usage is to generate a table of contents for lecture notes, draft\nbooks, or possibly the papers on arXiv for easier navigation. If you are a\nuser, please do not use this tool to generate table of contents for your own\nmanuscripts.\n\nUse the hyperref package instead,\n\n    \n    \n    \\usepackage{hyperref}\n\nsince it understands your document better and provides more customizations.\n\n# 4 A worked example\n\nThe design of pdf.tocgen is influenced by the Unix philosophy. I intentionally\nseparated pdf.tocgen to 3 separate programs. They work together, but each of\nthem is useful on its own.\n\nThey represents the 3 steps necessary to add table of contents to a PDF file:\n\n  1. pdfxmeta: extract the metadata (font attributes, positions) of headings to build a recipe file.\n  2. pdftocgen: generate a table of contents from the recipe.\n  3. pdftocio: import the table of contents to the PDF document.\n\nAgain, we will use Paul Graham\u2019s book On Lisp, freely available on his website\nas a PDF but comes without a table of contents embedded, to demonstrate how\nthese 3 programs work together.\n\nIf you want to follow along, go ahead and download the book and save it as\nonlisp.pdf.\n\n## Step 1: Build a recipe\n\npdftocgen extracts the headings using the font attributes and position\n(bounding box) of text embedded in a PDF file. We need to supply it with a\nrecipe, which is a TOML file that tells pdftocgen what a heading, subheading,\nor subsubheading should look like.\n\nThe recipe for our example, On Lisp, which I have already mentioned before,\nlooks like this:\n\n    \n    \n    # filter for level 1 heading [[heading]] # heading level level = 1 # attributes to search for font.name = \"Times-Bold\" font.size = 19.92530059814453 # filter for level 2 heading [[heading]] level = 2 font.name = \"Times-Bold\" font.size = 11.9552001953125\n\nA recipe is a list of filters, each of which specifies the attributes\npdftocgen should look for. For example, in the recipe above, a level 1\nheading, which corresponds to chapter titles in On Lisp, should\n\n  1. Have font name matching \"Times-Bold\"\n  2. Have font size 19.92530059814453\n\nOf course, the font size don\u2019t have to be this precise, you could set a\ntolerance level using the font.size_tolerance attributes:\n\n    \n    \n    [[heading]] level = 1 font.name = \"Times-Bold\" # match anything between 19.9-20.1 font.size = 20 font.size_tolerance = 0.1\n\nHow do we know what attributes a heading should have? This is why we need to\nuse pdfxmeta to extract the metadata of text in a PDF file.\n\nOpen up the PDF file you just downloaded in your favorite PDF reader. We will\nuse zathura here, but use anything you are comfortable with.\n\nIn [10]\n\n    \n    \n    $ zathura onlisp.pdf &\n\nScroll down to page 14, counting from the title page. This is where the first\nchapter\u2019s title \u201cThe Extensible Language\u201d is. To look at the metadata\nassociated with this title, use the pdfxmeta command:\n\nIn [11]\n\n    \n    \n    $ pdfxmeta -p 14 onlisp.pdf \"The Extensible\"\n\nOut [11]\n\n    \n    \n    The Extensible Language: font.name = \"Times-Bold\" font.size = 19.92530059814453 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = true bbox.left = 138.60000610351562 bbox.top = 306.947998046875 bbox.right = 354.4866638183594 bbox.bottom = 334.5445251464844\n\nThe -p flag tells pdfxmeta that it should only search on page 14. It is not\nrequired, but I highly recommend specifying it to make the search less\nambiguous.\n\nNow that we have extracted the metadata for chapter titles, we could make it a\nfilter by copy-pasting it, or redirect the output, to a recipe file called\nrecipe.toml.\n\nIn [12]\n\n    \n    \n    $ pdfxmeta -p 14 onlisp.pdf \"The Extensible\" >> recipe.toml\n\nUse your favorite editor to open up the recipe file and remove the\nindentationsIn Vim, you could press << in normal mode to dedent a line, and\nadd the [[heading]] header and the level attribute to specify the heading\nlevel.\n\n    \n    \n    [[heading]] level = 1 font.name = \"Times-Bold\" font.size = 19.92530059814453 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = true bbox.left = 138.60000610351562 bbox.top = 306.947998046875 bbox.right = 354.4866638183594 bbox.bottom = 334.5445251464844\n\nThis is already a valid recipe file, but it is too specific. It is very\nunlikely that other chapter titles would match all four bounding box (bbox)\nvalues, which means they would have exactly the same position and width as\nthis chapter\u2019s title.\n\nIf you want to ignore an attribute, simply remove it from the filter. From my\nexperience, font.name and font.size is usually enough.\n\n    \n    \n    [[heading]] level = 1 font.name = \"Times-Bold\" font.size = 19.92530059814453\n\nIf you are lazy, you can also use the --auto or -a flag to format the output\nas a heading filter with the default settings. But the output will be slightly\nharder to read:\n\nIn [13]\n\n    \n    \n    $ pdfxmeta -a 1 -p 14 onlisp.pdf \"The Extensible\"\n\nOut [13]\n\n    \n    \n    [[heading]] # The Extensible Language level = 1 greedy = true font.name = \"Times-Bold\" font.size = 19.92530059814453 # font.size_tolerance = 1e-5 # font.color = 0x000000 # font.superscript = false # font.italic = false # font.serif = true # font.monospace = false # font.bold = true # bbox.left = 138.60000610351562 # bbox.top = 306.947998046875 # bbox.right = 354.4866638183594 # bbox.bottom = 334.5445251464844 # bbox.tolerance = 1e-5\n\nThe argument after the -a flag is the heading level of the output heading\nfilter, which in this case is 1. Don\u2019t worry about the greedy option right\nnow, it is not necessary for this book.\n\nNext, we need to extract the metadata of level 2 headings:\n\nIn [14]\n\n    \n    \n    $ pdfxmeta -p 14 -i onlisp.pdf \"^design\"\n\nOut [14]\n\n    \n    \n    Design by Evolution: font.name = \"Times-Bold\" font.size = 11.9552001953125 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = true bbox.left = 165.42388916015625 bbox.top = 624.02880859375 bbox.right = 268.2960205078125 bbox.bottom = 640.5867309570312\n\nNote that we could use regular expressions (Python-style) as the pattern. The\n-i option can be used to enable case-insensitive search.\n\nUse the -a flag to dump it to recipe.toml\n\nIn [15]\n\n    \n    \n    $ pdfxmeta -a 2 -p 14 -i onlisp.pdf \"^design\" >> recipe.toml\n\nand pick the attributes we need:\n\n    \n    \n    [[heading]] level = 2 font.name = \"Times-Bold\" font.size = 11.9552001953125\n\nIf you can\u2019t find want you are looking for, leave out the query string to dump\nthe entire page,\n\nIn [16]\n\n    \n    \n    $ pdfxmeta -p 14 onlisp.pdf\n\nOut [16]\n\n    \n    \n    1: font.name = \"Times-Bold\" font.size = 24.906600952148438 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = true bbox.left = 138.60000610351562 bbox.top = 239.2274932861328 bbox.right = 151.05331420898438 bbox.bottom = 273.72314453125 The Extensible Language: font.name = \"Times-Bold\" font.size = 19.92530059814453 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = true bbox.left = 138.60000610351562 bbox.top = 306.947998046875 bbox.right = 354.4866638183594 bbox.bottom = 334.5445251464844 [--snip--]\n\nbut it is very likely that pdftocgen can\u2019t generate a meaningful table of\ncontents for you if you can\u2019t find the heading using pdfxmeta. Sorry about\nthat.\n\nAs a side node, sometimes you would see the + symbol in font.name, for example\nin the PDF draft of How to design Classes by Matthias Felleisen et al.In the\nlatest version, the subset will be automatically stripped off, so you might\nnot see this anymore\n\nIn [17]\n\n    \n    \n    $ pdfxmeta -p 19 htdc.pdf \"The Varieties\"\n\nOut [17]\n\n    \n    \n    The Varieties of Data: font.name = \"UFRVLO+Palatino-Bold\" font.size = 17.21540069580078 font.color = 0x221f1f font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = true bbox.left = 293.6400146484375 bbox.top = 129.75328063964844 bbox.right = 459.6872253417969 bbox.bottom = 146.77931213378906\n\nThe UFRVLO+ in font.size represent a subset in the complete font family\nPalatino-Bold. The font in different headings might be distributed into\nmultiple subsets, so it is almost always a good idea to match against the\nentire family by removing the subset prefix:\n\n    \n    \n    [[heading]] level = 1 font.name = \"Palatino-Bold\" font.size = 17.21540069580078 font.color = 0x221f1f\n\nYou could also use the -a flag as before to handle this automatically.\n\nIn [18]\n\n    \n    \n    $ pdfxmeta -a 1 -p 19 htdc.pdf \"The Varieties\"\n\nOut [18]\n\n    \n    \n    [[heading]] # The Varieties of Data level = 1 greedy = true font.name = \"Palatino-Bold\" font.size = 17.21540069580078 # font.size_tolerance = 1e-5 # font.color = 0x221f1f # font.superscript = false # font.italic = false # font.serif = true # font.monospace = false # font.bold = true # bbox.left = 293.6400146484375 # bbox.top = 129.75328063964844 # bbox.right = 459.6872253417969 # bbox.bottom = 146.77931213378906 # bbox.tolerance = 1e-5\n\nAlso, note that font.name can take a regular expression:\n\n    \n    \n    [[heading]] level = 3 font.name = \"(Palatino-Bold|Palatino-Italic)\" font.size = 11.9552001953125 font.color = 0x221f1f\n\nYou might need some experiments to determine the best recipe for the PDF. You\ncould find some pre-made recipes here, but in most cases you would need to\ndesign your own recipes. You are welcome to contribute more recipes by sending\npatches or pull requests.\n\n## Step 2: Generate table of contents\n\nNow that we have crafted a recipe for On Lisp in recipe.toml,\n\n    \n    \n    [[heading]] level = 1 font.name = \"Times-Bold\" font.size = 19.92530059814453 [[heading]] level = 2 font.name = \"Times-Bold\" font.size = 11.9552001953125\n\nwe could use the pdftocgen command to generate the table of contents for our\nPDF\n\nIn [19]\n\n    \n    \n    $ pdftocgen onlisp.pdf < recipe.toml\n\nOut [19]\n\n    \n    \n    \"Preface\" 5 \"Bottom-up Design\" 5 \"Plan of the Book\" 7 \"Examples\" 9 \"Acknowledgements\" 9 \"Contents\" 11 \"The Extensible Language\" 14 \"1.1 Design by Evolution\" 14 \"1.2 Programming Bottom-Up\" 16 \"1.3 Extensible Software\" 18 \"1.4 Extending Lisp\" 19 \"1.5 Why Lisp (or When)\" 21 \"Functions\" 22 \"2.1 Functions as Data\" 22 \"2.2 Defining Functions\" 23 \"2.3 Functional Arguments\" 26 \"2.4 Functions as Properties\" 28 \"2.5 Scope\" 29 \"2.6 Closures\" 30 \"2.7 Local Functions\" 34 \"2.8 Tail-Recursion\" 35 \"2.9 Compilation\" 37 \"2.10 Functions from Lists\" 40 \"Functional Programming\" 41 \"3.1 Functional Design\" 41 \"3.2 Imperative Outside-In\" 46 \"3.3 Functional Interfaces\" 48 \"3.4 Interactive Programming\" 50 [--snip--]\n\nThe output of pdftocgen is a dialect of CSV. The main differences are\n\n  1. Every 4 spaces of indent represents a new heading level so a level 3 heading is 8 spaces of indent\n  2. The separator is a single space, not comma\n  3. Titles need to be quoted using double quotes.\n\nThis format is intentionally designed to be easily edited (in Vim), since the\noutput of pdftocgen is expected to be inaccurate in many cases and you are\nlikely to tweak the table of contents before you import it to the original PDF\nfile.\n\nIf a heading contains the actual double quote character (\"), use two double\nquotes (\"\") to escape it,\n\n    \n    \n    \"a \"\"quoted\"\" heading\" 2\n\nbut the double quotes in most PDFs are usually smart quotes (\u201c and \u201d), so\nescaping is rarely necessary.\n\nIf you don\u2019t want to import the table of contents to PDF, you could instead\nuse the -H flag to print the table of contents in a more readable format,\n\nIn [20]\n\n    \n    \n    $ pdftocgen -H onlisp.pdf < recipe.toml\n\nOut [20]\n\n    \n    \n    Preface \u00b7\u00b7\u00b7 5 Bottom-up Design \u00b7\u00b7\u00b7 5 Plan of the Book \u00b7\u00b7\u00b7 7 Examples \u00b7\u00b7\u00b7 9 Acknowledgements \u00b7\u00b7\u00b7 9 Contents \u00b7\u00b7\u00b7 11 The Extensible Language \u00b7\u00b7\u00b7 14 1.1 Design by Evolution \u00b7\u00b7\u00b7 14 1.2 Programming Bottom-Up \u00b7\u00b7\u00b7 16 1.3 Extensible Software \u00b7\u00b7\u00b7 18 1.4 Extending Lisp \u00b7\u00b7\u00b7 19 1.5 Why Lisp (or When) \u00b7\u00b7\u00b7 21 Functions \u00b7\u00b7\u00b7 22 2.1 Functions as Data \u00b7\u00b7\u00b7 22 2.2 Defining Functions \u00b7\u00b7\u00b7 23 2.3 Functional Arguments \u00b7\u00b7\u00b7 26 2.4 Functions as Properties \u00b7\u00b7\u00b7 28 2.5 Scope \u00b7\u00b7\u00b7 29 2.6 Closures \u00b7\u00b7\u00b7 30 2.7 Local Functions \u00b7\u00b7\u00b7 34 2.8 Tail-Recursion \u00b7\u00b7\u00b7 35 2.9 Compilation \u00b7\u00b7\u00b7 37 2.10 Functions from Lists \u00b7\u00b7\u00b7 40 Functional Programming \u00b7\u00b7\u00b7 41 3.1 Functional Design \u00b7\u00b7\u00b7 41 3.2 Imperative Outside-In \u00b7\u00b7\u00b7 46 3.3 Functional Interfaces \u00b7\u00b7\u00b7 48 3.4 Interactive Programming \u00b7\u00b7\u00b7 50 [--snip--]\n\nbut this format can\u2019t be read by pdftocio.\n\nFor now, we will save the table of contents to a file called toc:\n\nIn [21]\n\n    \n    \n    $ pdftocgen onlisp.pdf < recipe.toml > toc\n\n## Step 3: Import the ToC to PDF\n\nTo import the generated table of contents to the original PDF file, simply\nredirect the toc file to pdftocio.\n\nIn [22]\n\n    \n    \n    $ pdftocio onlisp.pdf < toc\n\nThe output PDF document is named onlisp_out.pdfUse the -o flag if you want a\ndifferent file name. When you open it up in zathura\n\nIn [23]\n\n    \n    \n    $ zathura onlisp_out.pdf\n\nand press the TAB key, you should see the table of contents has been\nsuccessfully imported to the PDF file.\n\nIn fact, if you don\u2019t want to edit the table of contents, the output of\npdftocgen can be directly piped into pdftocio\n\nIn [24]\n\n    \n    \n    $ pdftocgen onlisp.pdf < recipe.toml | pdftocio onlisp.pdf\n\nI call this program pdftocio because it can also be used to output the\nexisting table of contents of a PDF document if you don\u2019t supply any external\ninput\n\nIn [25]\n\n    \n    \n    $ pdftocio onlisp_out.pdf\n\nOut [25]\n\n    \n    \n    \"Preface\" 5 \"Bottom-up Design\" 5 \"Plan of the Book\" 7 \"Examples\" 9 \"Acknowledgements\" 9 \"Contents\" 11 \"The Extensible Language\" 14 \"1.1 Design by Evolution\" 14 \"1.2 Programming Bottom-Up\" 16 \"1.3 Extensible Software\" 18 \"1.4 Extending Lisp\" 19 \"1.5 Why Lisp (or When)\" 21 \"Functions\" 22 \"2.1 Functions as Data\" 22 \"2.2 Defining Functions\" 23 \"2.3 Functional Arguments\" 26 \"2.4 Functions as Properties\" 28 \"2.5 Scope\" 29 \"2.6 Closures\" 30 \"2.7 Local Functions\" 34 \"2.8 Tail-Recursion\" 35 \"2.9 Compilation\" 37 \"2.10 Functions from Lists\" 40 \"Functional Programming\" 41 \"3.1 Functional Design\" 41 \"3.2 Imperative Outside-In\" 46 \"3.3 Functional Interfaces\" 48 \"3.4 Interactive Programming\" 50 [--snip--]\n\nor with the -H flag to display it in a more readable format.\n\nIn [26]\n\n    \n    \n    $ pdftocio -H onlisp_out.pdf\n\nOut [26]\n\n    \n    \n    Preface \u00b7\u00b7\u00b7 5 Bottom-up Design \u00b7\u00b7\u00b7 5 Plan of the Book \u00b7\u00b7\u00b7 7 Examples \u00b7\u00b7\u00b7 9 Acknowledgements \u00b7\u00b7\u00b7 9 Contents \u00b7\u00b7\u00b7 11 The Extensible Language \u00b7\u00b7\u00b7 14 1.1 Design by Evolution \u00b7\u00b7\u00b7 14 1.2 Programming Bottom-Up \u00b7\u00b7\u00b7 16 1.3 Extensible Software \u00b7\u00b7\u00b7 18 1.4 Extending Lisp \u00b7\u00b7\u00b7 19 1.5 Why Lisp (or When) \u00b7\u00b7\u00b7 21 Functions \u00b7\u00b7\u00b7 22 2.1 Functions as Data \u00b7\u00b7\u00b7 22 2.2 Defining Functions \u00b7\u00b7\u00b7 23 2.3 Functional Arguments \u00b7\u00b7\u00b7 26 2.4 Functions as Properties \u00b7\u00b7\u00b7 28 2.5 Scope \u00b7\u00b7\u00b7 29 2.6 Closures \u00b7\u00b7\u00b7 30 2.7 Local Functions \u00b7\u00b7\u00b7 34 2.8 Tail-Recursion \u00b7\u00b7\u00b7 35 2.9 Compilation \u00b7\u00b7\u00b7 37 2.10 Functions from Lists \u00b7\u00b7\u00b7 40 Functional Programming \u00b7\u00b7\u00b7 41 3.1 Functional Design \u00b7\u00b7\u00b7 41 3.2 Imperative Outside-In \u00b7\u00b7\u00b7 46 3.3 Functional Interfaces \u00b7\u00b7\u00b7 48 3.4 Interactive Programming \u00b7\u00b7\u00b7 50 [--snip--]\n\n## A summary\n\nAlthough the example above gets quite long, the essential steps are very\nsimple.\n\nFirst, search for metadata of headings using pdfxmeta\n\nIn [27]\n\n    \n    \n    $ pdfxmeta -a 1 -p page in.pdf \"Section\" >> recipe.toml $ pdfxmeta -a 2 -p page in.pdf \"Subsection\" >> recipe.toml\n\nEdit the recipe.toml file to pick out the attributes you need, or leave it at\ndefault if you don\u2019t need any customizations:\n\nIn [28]\n\n    \n    \n    $ vim recipe.toml # edit\n\nThen use the recipe to generate a table of contents and import it to the PDF\nfile\n\nIn [29]\n\n    \n    \n    $ pdftocgen in.pdf < recipe.toml | pdftocio -o out.pdf in.pdf\n\nOr if you want to edit the table of contents before importing it,\n\nIn [30]\n\n    \n    \n    $ pdftocgen in.pdf < recipe.toml > toc $ vim toc # edit $ pdftocio in.pdf < toc\n\nEach of the three programs has some extra functionalities. Use the -h option\nto see all the options you could pass in.\n\n# 5 One more example: Mathematics\n\npdf.tocgen\u2019s recipe format provides some convenient options for handling math\nsymbols in headings. They are especially useful for handling lecture notes,\ntextbook, or papers in mathematics.\n\nLet us look at another example, the lecture notes for EE261 in Stanford,\nwritten by Prof. Brad Osgood. This document also doesn\u2019t come with a table of\ncontents, and the headings contains many math symbols such as , , , etc.\n\nThese math symbols do not have the same font as the surrounding text, which\ncan be a problem if we specify the headings using font.name:\n\n    \n    \n    [[heading]] level = 1 font.name = \"CMBX12\" font.size = 24.78696060180664 [[heading]] level = 2 font.name = \"CMBX12\" font.size = 14.346190452575684 [[heading]] level = 3 font.name = \"CMBX12\" font.size = 11.955169677734375\n\nThe recipe above is generated using\n\nIn [31]\n\n    \n    \n    $ pdfxmeta -a 1 -p 7 ft.pdf \"Fourier Series\" >> ft.toml\n\nIn [32]\n\n    \n    \n    $ pdfxmeta -a 2 -p 7 ft.pdf \"Introduction\" >> ft.toml\n\nIn [33]\n\n    \n    \n    $ pdfxmeta -a 3 -p 28 ft.pdf \"punchline\" >> ft.toml\n\nwith comments cleaned up.\n\nIf we pass the recipe file pdftocgen, you would notice that some of the math\nsymbols are missing from the title.\n\nIn [34]\n\n    \n    \n    $ pdftocgen -H ft.pdf < ft.toml\n\nOut [34]\n\n    \n    \n    EE 261 \u00b7\u00b7\u00b7 1 Contents \u00b7\u00b7\u00b7 3 Fourier Series \u00b7\u00b7\u00b7 7 1.1 Introduction and Choices to Make \u00b7\u00b7\u00b7 7 1.2 Periodic Phenomena \u00b7\u00b7\u00b7 8 1.2.1 Time and space \u00b7\u00b7\u00b7 8 1.2.2 More on spatial periodicity \u00b7\u00b7\u00b7 9 1.3 Periodicity: Definitions, Examples, and Things to Come \u00b7\u00b7\u00b7 10 1.3.1 The view from above \u00b7\u00b7\u00b7 12 1.3.2 The building blocks: a few more examples \u00b7\u00b7\u00b7 13 1.3.3 Musical pitch and tuning \u00b7\u00b7\u00b7 14 1.4 It All Adds Up \u00b7\u00b7\u00b7 15 1.5 Lost at \u00b7\u00b7\u00b7 16 1.6 Period, Frequencies, and Spectrum \u00b7\u00b7\u00b7 19 1.6.1 What if the period isn\u2019t 1? \u00b7\u00b7\u00b7 20 1.7 Two Examples and a Warning \u00b7\u00b7\u00b7 22 1.8 The Math, the Majesty, the End \u00b7\u00b7\u00b7 27 1.8.1 Square integrable functions \u00b7\u00b7\u00b7 27 1.8.2 The punchline revealed \u00b7\u00b7\u00b7 28 1.9 Orthogonality \u00b7\u00b7\u00b7 32 1.10 Appendix: The Cauchy-Schwarz Inequality and its Consequences \u00b7\u00b7\u00b7 39 1.11 Appendix: More on the Complex Inner Product \u00b7\u00b7\u00b7 42 1.12 Appendix: Best Approximation by Finite Fourier Series \u00b7\u00b7\u00b7 44 1.13 Fourier Series in Action \u00b7\u00b7\u00b7 45 1.13.1 Hot enough for ya? \u00b7\u00b7\u00b7 45 1.13.2 A nonclassical example: What\u2019s the buzz? \u00b7\u00b7\u00b7 53 1.14 Notes on Convergence of Fourier Series \u00b7\u00b7\u00b7 56 1.14.1 How big are the Fourier coefficients? \u00b7\u00b7\u00b7 56 1.14.2 Rates of convergence and smoothness \u00b7\u00b7\u00b7 59 1.14.3 Convergence if it\u2019s not continuous? \u00b7\u00b7\u00b7 60 1.15 Appendix: Pointwise Convergence vs. Uniform Convergence \u00b7\u00b7\u00b7 64 1.16 Appendix: Studying Partial Sums via the Dirichlet Kernel: The Buzz Is Back \u00b7\u00b7\u00b7 65 1.17 Appendix: The Complex Exponentials Are a Basis for \u00b7\u00b7\u00b7 67 1.18 Appendix: More on the Gibbs Phenomenon \u00b7\u00b7\u00b7 68 [--snip--]\n\nPay attention to the title of section 1.5, 1.12, and 1.17. Comparing it with\npage 3 of the PDF, you should notice that the math symbols are missing from\nthe headings.\n\nThere are several options to deal with this issue.\n\n## Option 1: greedy filter\n\nThis is the recommended approach, as you might have noticed. It is the default\nsetting for the -a option of pdfxmeta, because it\u2019s simple and it works the\nbest among all the options.\n\nA greedy filter will extract any text from the enclosed or surrounding region\nof the heading, even if some parts don\u2019t match the current filter.\n\nThis is exactly our case here, since a math symbol in headings is usually\nsurrounded by plain text matching the filter, but they are in a different font\nthemselves.\n\nIf you want to make a heading filter greedy, just add\n\n    \n    \n    greedy = true\n\nto the corresponding heading filter in the recipe file. For example, for the\nrecipe above, we have\n\n    \n    \n    [[heading]] level = 1 greedy = true font.name = \"CMBX12\" font.size = 24.78696060180664 [[heading]] level = 2 greedy = true font.name = \"CMBX12\" font.size = 14.346190452575684 [[heading]] level = 3 greedy = true font.name = \"CMBX12\" font.size = 11.955169677734375\n\nNow the recipe should extract the math symbols in the headings automatically.\n\nIn [35]\n\n    \n    \n    $ pdftocgen -H ft.pdf < ft.toml\n\nOut [35]\n\n    \n    \n    EE 261 \u00b7\u00b7\u00b7 1 Contents \u00b7\u00b7\u00b7 3 Fourier Series \u00b7\u00b7\u00b7 7 1.1 Introduction and Choices to Make \u00b7\u00b7\u00b7 7 1.2 Periodic Phenomena \u00b7\u00b7\u00b7 8 1.2.1 Time and space \u00b7\u00b7\u00b7 8 1.2.2 More on spatial periodicity \u00b7\u00b7\u00b7 9 1.3 Periodicity: Definitions, Examples, and Things to Come \u00b7\u00b7\u00b7 10 1.3.1 The view from above \u00b7\u00b7\u00b7 12 1.3.2 The building blocks: a few more examples \u00b7\u00b7\u00b7 13 1.3.3 Musical pitch and tuning \u00b7\u00b7\u00b7 14 1.4 It All Adds Up \u00b7\u00b7\u00b7 15 1.5 Lost at c \u00b7\u00b7\u00b7 16 1.6 Period, Frequencies, and Spectrum \u00b7\u00b7\u00b7 19 1.6.1 What if the period isn\u2019t 1? \u00b7\u00b7\u00b7 20 1.7 Two Examples and a Warning \u00b7\u00b7\u00b7 22 1.8 The Math, the Majesty, the End \u00b7\u00b7\u00b7 27 1.8.1 Square integrable functions \u00b7\u00b7\u00b7 27 1.8.2 The punchline revealed \u00b7\u00b7\u00b7 28 1.9 Orthogonality \u00b7\u00b7\u00b7 32 1.10 Appendix: The Cauchy-Schwarz Inequality and its Consequences \u00b7\u00b7\u00b7 39 1.11 Appendix: More on the Complex Inner Product \u00b7\u00b7\u00b7 42 1.12 Appendix: Best L 2 Approximation by Finite Fourier Series \u00b7\u00b7\u00b7 44 1.13 Fourier Series in Action \u00b7\u00b7\u00b7 45 1.13.1 Hot enough for ya? \u00b7\u00b7\u00b7 45 1.13.2 A nonclassical example: What\u2019s the buzz? \u00b7\u00b7\u00b7 53 1.14 Notes on Convergence of Fourier Series \u00b7\u00b7\u00b7 56 1.14.1 How big are the Fourier coefficients? \u00b7\u00b7\u00b7 56 1.14.2 Rates of convergence and smoothness \u00b7\u00b7\u00b7 59 1.14.3 Convergence if it\u2019s not continuous? \u00b7\u00b7\u00b7 60 1.15 Appendix: Pointwise Convergence vs. Uniform Convergence \u00b7\u00b7\u00b7 64 1.16 Appendix: Studying Partial Sums via the Dirichlet Kernel: The Buzz Is Back \u00b7\u00b7\u00b7 65 1.17 Appendix: The Complex Exponentials Are a Basis for L 2 ([0 , 1]) \u00b7\u00b7\u00b7 67 1.18 Appendix: More on the Gibbs Phenomenon \u00b7\u00b7\u00b7 68 [--snip--]\n\nOf course, it still needs some further clean up, but it should be easy using a\ndecent text editor.\n\n## Option 2: Regex\n\nAlternatively, since font.name takes an regular expression, we could supply\nmultiple font name using the (a|b) syntax. For example, we could first use GNU\nor BSD grep to find the metadata of a math symbol:\n\nIn [36]\n\n    \n    \n    $ pdfxmeta -p 16 ft.pdf | grep -A 25 \"Lost at\"\n\nOut [36]\n\n    \n    \n    Lost at: font.name = \"HYPGHW+CMBX12\" font.size = 14.346190452575684 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = true bbox.left = 87.12625122070312 bbox.top = 510.04034423828125 bbox.right = 137.03665161132812 bbox.bottom = 524.40087890625 c: font.name = \"SYTZSX+CMMIB10\" font.size = 14.346190452575684 font.color = 0x000000 font.superscript = false font.italic = true font.serif = true font.monospace = false font.bold = true bbox.left = 137.03665161132812 bbox.top = 510.04034423828125 bbox.right = 150.005615234375 bbox.bottom = 524.3865356445312\n\nNow that we know the font name of c is CMMIB10, we could modify the filter to\ninclude it.\n\n    \n    \n    [[heading]] level = 2 font.name = \"(CMBX12|CMMIB10)\" font.size = 14.346190452575684\n\nHowever, since superscripts usually have different font sizes than the\nsurrounding text, this approach doesn\u2019t work here.\n\n## Option 3: Multiple filters\n\nAnother option is to use multiple filters for the same heading level.\nInternally, matched text of the same level will be collapsed into one if they\nare in the same block.\n\nFor the example in the previous section, it is equivalent to write\n\n    \n    \n    [[heading]] level = 2 font.name = \"CMBX12\" font.size = 14.346190452575684 [[heading]] level = 2 font.name = \"CMMIB10\" font.size = 14.346190452575684\n\nbut this allows us to specify different font sizes.\n\nUsing the same approach as in previous section, we could find the metadata of\nall the math symbols in the text and create separate heading filters for them,\nwhich gives us the following recipe:\n\n    \n    \n    [[heading]] level = 1 font.name = \"CMBX12\" font.size = 24.78696060180664 [[heading]] # text level = 2 font.name = \"CMBX12\" font.size = 14.346190452575684 [[heading]] # math level = 2 font.name = \"(CMMIB10|CMMI12|CMR12)\" font.size = 14.346190452575684 [[heading]] # superscript level = 2 font.name = \"CMR10\" font.size = 9.962639808654785 font.superscript = true [[heading]] level = 3 font.name = \"CMBX12\" font.size = 11.955169677734375\n\nThis filter is able to extract all the math symbols,\n\nIn [37]\n\n    \n    \n    $ pdftocgen -H ft.pdf < ft.toml\n\nOut [37]\n\n    \n    \n    EE 261 \u00b7\u00b7\u00b7 1 Prof. Brad Osgood Electrical Engineering Department Stanford University \u00b7\u00b7\u00b7 1 Contents \u00b7\u00b7\u00b7 3 Fourier Series \u00b7\u00b7\u00b7 7 1.1 Introduction and Choices to Make \u00b7\u00b7\u00b7 7 1.2 Periodic Phenomena \u00b7\u00b7\u00b7 8 1.2.1 Time and space \u00b7\u00b7\u00b7 8 1.2.2 More on spatial periodicity \u00b7\u00b7\u00b7 9 1.3 Periodicity: Definitions, Examples, and Things to Come \u00b7\u00b7\u00b7 10 1.3.1 The view from above \u00b7\u00b7\u00b7 12 1.3.2 The building blocks: a few more examples \u00b7\u00b7\u00b7 13 1 \u00b7\u00b7\u00b7 13 1 \u00b7\u00b7\u00b7 13 1.3.3 Musical pitch and tuning \u00b7\u00b7\u00b7 14 1.4 It All Adds Up \u00b7\u00b7\u00b7 15 1.5 Lost at c \u00b7\u00b7\u00b7 16 1.6 Period, Frequencies, and Spectrum \u00b7\u00b7\u00b7 19 1.6.1 What if the period isn\u2019t 1? \u00b7\u00b7\u00b7 20 1.7 Two Examples and a Warning \u00b7\u00b7\u00b7 22 1.8 The Math, the Majesty, the End \u00b7\u00b7\u00b7 27 1.8.1 Square integrable functions \u00b7\u00b7\u00b7 27 1.8.2 The punchline revealed \u00b7\u00b7\u00b7 28 1.9 Orthogonality \u00b7\u00b7\u00b7 32 1.10 Appendix: The Cauchy-Schwarz Inequality and its Consequences \u00b7\u00b7\u00b7 39 1.11 Appendix: More on the Complex Inner Product \u00b7\u00b7\u00b7 42 1.12 Appendix: Best L 2 Approximation by Finite Fourier Series \u00b7\u00b7\u00b7 44 1.13 Fourier Series in Action \u00b7\u00b7\u00b7 45 1.13.1 Hot enough for ya? \u00b7\u00b7\u00b7 45 1.13.2 A nonclassical example: What\u2019s the buzz? \u00b7\u00b7\u00b7 53 1.14 Notes on Convergence of Fourier Series \u00b7\u00b7\u00b7 56 1.14.1 How big are the Fourier coefficients? \u00b7\u00b7\u00b7 56 1.14.2 Rates of convergence and smoothness \u00b7\u00b7\u00b7 59 1.14.3 Convergence if it\u2019s not continuous? \u00b7\u00b7\u00b7 60 1.15 Appendix: Pointwise Convergence vs. Uniform Convergence \u00b7\u00b7\u00b7 64 1.16 Appendix: Studying Partial Sums via the Dirichlet Kernel: The Buzz Is Back \u00b7\u00b7\u00b7 65 1.17 Appendix: The Complex Exponentials Are a Basis for L 2 ([0 , 1]) \u00b7\u00b7\u00b7 67 1.18 Appendix: More on the Gibbs Phenomenon \u00b7\u00b7\u00b7 68 [--snip--]\n\nbut it is less accurate and introduces many unnecessary symbols, but they\nshould be relatively easy to clean up in post processing.\n\nWhen in doubt, just use option 1 and make the filter greedy. Options 2 and 3\nare only the last resort.\n\n# 6 The recipe file\n\nExcept all the metadata generated by pdfxmeta, there are a few other options\nyou could specify in the recipe file. Here is a list of all the valid keys for\neach heading filter.\n\n    \n    \n    # filter for level 1 heading [[heading]] # heading level level = 1 # makes this filter a *greedy* filter, useful for PDFs # containing many math symbols greedy = true font.name = \"CMBX12\" # matches font.size \u00b1 font.size_tolerance font.size = 14.346199989318848 font.size_tolerance = 1e-5 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = true # matches bbox.left \u00b1 bbox.tolerance bbox.left = 157.98439025878906 # matches bbox.top \u00b1 bbox.tolerance bbox.top = 335.569580078125 # matches bbox.right \u00b1 bbox.tolerance bbox.right = 477.66058349609375 # matches bbox.bottom \u00b1 bbox.tolerance bbox.bottom = 349.93011474609375 bbox.tolerance = 1e-5 # filter for level 2 heading [[heading]] level = 2 greedy = false font.name = \"CMBX10\" font.size = 9.962599754333496 font.size_tolerance = 1e-5 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = true bbox.left = 168.76663208007812 bbox.top = 127.2930679321289 bbox.right = 280.66656494140625 bbox.bottom = 137.2556610107422 bbox.tolerance = 1e-5 # ...\n\nAgain, don\u2019t be too specific about bounding boxes, since headings generally\nhave different widths. Use the -a option of pdfxmeta if you are not sure what\nattributes to pick.\n\n# 7 Command examples\n\nBecause of the modularity of design, each program is useful on its own,\ndespite being part of the pipeline. This section will provide some more\nexamples on how you could use them. Feel free to come up with more.\n\n## 7.1 pdftocio\n\npdftocio should best demonstrate this point, this program can do a lot on its\nown.\n\nTo display existing table of contents in a PDF to stdout:\n\nIn [38]\n\n    \n    \n    $ pdftocio doc.pdf\n\nOut [38]\n\n    \n    \n    \"Level 1 heading 1\" 1 \"Level 2 heading 1\" 1 \"Level 3 heading 1\" 2 \"Level 3 heading 2\" 3 \"Level 2 heading 2\" 4 \"Level 1 heading 2\" 5\n\nTo write existing table of contents in a PDF to a file named toc:\n\nIn [39]\n\n    \n    \n    $ pdftocio doc.pdf > toc\n\nTo write a toc file back to doc.pdf:\n\nIn [40]\n\n    \n    \n    $ pdftocio doc.pdf < toc\n\nTo specify the name of output PDF:\n\nIn [41]\n\n    \n    \n    $ pdftocio -o out.pdf doc.pdf < toc\n\nTo copy the table of contents from doc1.pdf to doc2.pdf:\n\nIn [42]\n\n    \n    \n    $ pdftocio -v doc1.pdf | pdftocio doc2.pdf\n\nNote that the -v flag helps preserve the vertical positions of headings during\nthe copy.\n\nTo print the table of contents for reading:\n\nIn [43]\n\n    \n    \n    $ pdftocio -H doc.pdf\n\nOut [43]\n\n    \n    \n    Level 1 heading 1 \u00b7\u00b7\u00b7 1 Level 2 heading 1 \u00b7\u00b7\u00b7 1 Level 3 heading 1 \u00b7\u00b7\u00b7 2 Level 3 heading 2 \u00b7\u00b7\u00b7 3 Level 2 heading 2 \u00b7\u00b7\u00b7 4 Level 1 heading 2 \u00b7\u00b7\u00b7 5\n\n## 7.2 pdftocgen\n\nIf you have obtained an existing recipe rcp.toml for doc.pdf, you could apply\nit and print the outline to stdout by\n\nIn [44]\n\n    \n    \n    $ pdftocgen doc.pdf < rcp.toml\n\nOut [44]\n\n    \n    \n    \"Level 1 heading 1\" 1 \"Level 2 heading 1\" 1 \"Level 3 heading 1\" 2 \"Level 3 heading 2\" 3 \"Level 2 heading 2\" 4 \"Level 1 heading 2\" 5\n\nTo output the table of contents to a file called toc:\n\nIn [45]\n\n    \n    \n    $ pdftocgen doc.pdf < rcp.toml > toc\n\nTo import the generated table of contents to the PDF file, and output to\ndoc_out.pdf:\n\nIn [46]\n\n    \n    \n    $ pdftocgen doc.pdf < rcp.toml | pdftocio -o doc_out.pdf doc.pdf\n\nTo print the generated table of contents for reading:\n\nIn [47]\n\n    \n    \n    $ pdftocgen -H doc.pdf < rcp.toml\n\nOut [47]\n\n    \n    \n    Level 1 heading 1 \u00b7\u00b7\u00b7 1 Level 2 heading 1 \u00b7\u00b7\u00b7 1 Level 3 heading 1 \u00b7\u00b7\u00b7 2 Level 3 heading 2 \u00b7\u00b7\u00b7 3 Level 2 heading 2 \u00b7\u00b7\u00b7 4 Level 1 heading 2 \u00b7\u00b7\u00b7 5\n\nIf you want to include the vertical position in a page for each heading, use\nthe -v flag\n\nIn [48]\n\n    \n    \n    $ pdftocgen -v doc.pdf < rcp.toml\n\nOut [48]\n\n    \n    \n    \"Level 1 heading 1\" 1 306.947998046875 \"Level 2 heading 1\" 1 586.3488159179688 \"Level 3 heading 1\" 2 586.5888061523438 \"Level 3 heading 2\" 3 155.66879272460938 \"Level 2 heading 2\" 4 435.8687744140625 \"Level 1 heading 2\" 5 380.78875732421875\n\npdftocio can understand the vertical position in the output to generate table\nof contents entries that link to the exact position of the heading, instead of\nthe top of the page.\n\nIn [49]\n\n    \n    \n    $ pdftocgen -v doc.pdf < rcp.toml | pdftocio doc.pdf\n\nNote that the default output of pdftocio here is doc_out.pdf.\n\n## 7.3 pdfxmeta\n\nTo search for Anaphoric in the entire PDF\n\nIn [50]\n\n    \n    \n    $ pdfxmeta onlisp.pdf \"Anaphoric\"\n\nOut [50]\n\n    \n    \n    14. Anaphoric Macros: font.name = \"Times-Bold\" font.size = 9.962599754333496 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = true bbox.left = 308.6400146484375 bbox.top = 307.1490478515625 bbox.right = 404.33282470703125 bbox.bottom = 320.9472351074219 [--snip--]\n\nTo output the result as a heading filter with the automatic settings,\n\nIn [51]\n\n    \n    \n    $ pdfxmeta -a 1 onlisp.pdf \"Anaphoric\"\n\nOut [51]\n\n    \n    \n    [[heading]] # 14. Anaphoric Macros level = 1 greedy = true font.name = \"Times-Bold\" font.size = 9.962599754333496 # font.size_tolerance = 1e-5 # font.color = 0x000000 # font.superscript = false # font.italic = false # font.serif = true # font.monospace = false # font.bold = true # bbox.left = 308.6400146484375 # bbox.top = 307.1490478515625 # bbox.right = 404.33282470703125 # bbox.bottom = 320.9472351074219 # bbox.tolerance = 1e-5 # [--snip--]\n\nwhich can be directly write to a recipe file:\n\nIn [52]\n\n    \n    \n    $ pdfxmeta -a 1 onlisp.pdf \"Anaphoric\" >> recipe.toml\n\nTo case-insensitive search for Anaphoric in the entire PDF:\n\nIn [53]\n\n    \n    \n    $ pdfxmeta -i onlisp.pdf \"Anaphoric\"\n\nOut [53]\n\n    \n    \n    to compile-time. Chapter 14 introduces anaphoric macros, which allow you to: font.name = \"Times-Roman\" font.size = 9.962599754333496 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = false bbox.left = 138.60000610351562 bbox.top = 295.6583557128906 bbox.right = 459.0260009765625 bbox.bottom = 308.948486328125 [--snip--]\n\nUse regular expression to case-insensitive search search for Anaphoric in the\nentire PDF:\n\nIn [54]\n\n    \n    \n    $ pdfxmeta onlisp.pdf \"[Aa]naphoric\"\n\nOut [54]\n\n    \n    \n    to compile-time. Chapter 14 introduces anaphoric macros, which allow you to: font.name = \"Times-Roman\" font.size = 9.962599754333496 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = false bbox.left = 138.60000610351562 bbox.top = 295.6583557128906 bbox.right = 459.0260009765625 bbox.bottom = 308.948486328125 [--snip--]\n\nTo search only on page 203:\n\nIn [55]\n\n    \n    \n    $ pdfxmeta -p 203 onlisp.pdf \"anaphoric\"\n\nOut [55]\n\n    \n    \n    anaphoric if, called: font.name = \"Times-Roman\" font.size = 9.962599754333496 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = false bbox.left = 138.60000610351562 bbox.top = 283.17822265625 bbox.right = 214.81094360351562 bbox.bottom = 296.4683532714844 [--snip--]\n\nTo dump the entire page of 203:\n\nIn [56]\n\n    \n    \n    $ pdfxmeta -p 203 onlisp.pdf\n\nOut [56]\n\n    \n    \n    190: font.name = \"Times-Roman\" font.size = 9.962599754333496 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = false bbox.left = 138.60000610351562 bbox.top = 126.09941101074219 bbox.right = 153.54388427734375 bbox.bottom = 139.38951110839844 [--snip--]\n\nTo dump the entire PDF document:\n\nIn [57]\n\n    \n    \n    $ pdfxmeta onlisp.pdf\n\nOut [57]\n\n    \n    \n    i: font.name = \"Times-Roman\" font.size = 9.962599754333496 font.color = 0x000000 font.superscript = false font.italic = false font.serif = true font.monospace = false font.bold = false bbox.left = 458.0400085449219 bbox.top = 126.09941101074219 bbox.right = 460.8096008300781 bbox.bottom = 139.38951110839844 [--snip--]\n\n# 8 Development\n\nIf you want to modify the source code or contribute anything, first install\npoetry, which is a dependency and package manager for Python used by\npdf.tocgen. Then run\n\nIn [58]\n\n    \n    \n    $ poetry install\n\nin the root directory of the repository to set up development dependencies.\n\nIf you want to test the development version of pdf.tocgen, add\n\n    \n    \n    poetry run\n\nprefix to each commands, for example\n\nIn [59]\n\n    \n    \n    $ poetry run pdfxmeta in.pdf \"pattern\"\n\nAlternatively, you could also use the\n\nIn [60]\n\n    \n    \n    $ poetry shell\n\ncommand to open up a virtual environment and run the development version\ndirectly:\n\nIn [61]\n\n    \n    \n    (pdf.tocgen) $ pdfxmeta in.pdf \"pattern\"\n\nBefore you send a patch or pull request, make sure the unit test passes by\nrunning:\n\nIn [62]\n\n    \n    \n    $ make test\n\n# 9 GUI front end\n\nIf you are a Emacs user, you could install Daniel Nicolai\u2019s toc-mode package\nas a GUI front end for pdf.tocgen, though it offers many more functionalities,\nsuch as extracting (printed) table of contents from a PDF file. Note that it\nuses pdf.tocgen under the hood, so you still need to install pdf.tocgen before\nusing toc-mode as a front end for pdf.tocgen.\n\n# 10 License\n\npdf.tocgen itself a is free software. The source code of pdf.tocgen is\nlicensed under the GNU GPLv3 license. However, the recipes in the recipes\ndirectory is separately licensed under the CC BY-NC-SA 4.0 License to prevent\nany commercial usage, and thus not included in the distribution.\n\npdf.tocgen is based on PyMuPDF, licensed under the GNU GPLv3 license, which is\nagain based on MuPDF, licensed under the GNU AGPLv3 license. A copy of the\nAGPLv3 license is included in the repository.\n\nIf you want to make any derivatives based on this project, please follow the\nterms of the GNU GPLv3 license.\n\n", "frontpage": false}
