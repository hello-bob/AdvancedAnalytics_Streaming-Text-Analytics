{"aid": "40196507", "title": "Applying the Facade Pattern on Spotify for Artists", "url": "https://engineering.atspotify.com/2024/02/applying-the-facade-pattern-on-spotify-for-artists/", "domain": "atspotify.com", "votes": 2, "user": "cebert", "posted_at": "2024-04-29 10:12:30", "comments": 0, "source_title": "Applying the Facade Pattern on Spotify for Artists - Spotify Engineering", "source_text": "Applying the Facade Pattern on Spotify for Artists - Spotify Engineering :\nSpotify Engineering\n\nJoin us on April 30! Spotify Portal for Backstage is coming! Join our April 30\nwebinar to learn more Learn more\n\n# Applying the Facade Pattern on Spotify for Artists\n\nFebruary 7, 2024 Published by Rich Soni (Senior Fullstack Engineer)\n\nAt Spotify, we\u2019re dedicated to delivering a unified experience to our\ncustomers \u2014 which can sometimes be at odds with the vast, autonomous structure\nof our engineering organization. To prevent Conway\u2019s Law from becoming a\nreality, we have to be vigilant, ensuring our diverse, geographically\ndispersed teams don\u2019t unintentionally create fragmented user experiences.\n\nSo how do we reconcile these seemingly opposing notions? From a visual\nperspective, our design system, Encore, has embraced a \u201clocal system\u201d\napproach, which enables individual systems (Creator, Ads, Consumer, etc.) to\nbuild on a shared foundation. But Encore also affords them the flexibility to\noffer a customized experience that speaks to each of their local customer\nsegments.\n\nFrom a support perspective, we recently employed an Inverse Conway Maneuver,\ncreating a team to unify the support experience across the local segments.\nThis team built an internal support platform called Turnkey, which took the\napproach opposite from Encore. This platform generalized the customer support\ntooling, which removed the burden of implementing and supporting it for each\nlocal segment.\n\nEncore\u2019s \u201clocal system\u201d approach.\n\nTurnkey\u2019s Inverse Conway Maneuver.\n\nDuring the migration of the Creator Support pages to Turnkey, we faced an\nunexpected challenge caused by the differences in these two approaches to\nConway\u2019s Law. Before migration, our support pages were collocated with the\nSpotify for Artists home page. This included our MastheadHeader and\nMastheadFooter components, which are key to unifying our user\u2019s experience\nwithin Spotify for Artists. We wanted these components to continue to be the\nsame from within the Turnkey system, but we also assumed that all the other\n\u201clocal segments\u201d would want the same for their users.\n\nTo solve this, we leveraged the facade pattern, which \u201cprovides a single,\nsimplified interface to the more general facilities of a subsystem,\u201d and we\ncreated our own iteration, S4X-Masthead, to maintain parity between our\nMasthead components of these two systems.\n\n## S4X-Masthead\n\nThe S4X-Masthead exports three React components: MastheadHeader,\nMastheadFooter, and MastheadProvider. The goal of these components is to\nprevent duplication and drifting implementation between the client\napplications. By centralizing these elements, we can maintain consistency\nwithin the user\u2019s experience, like fixing bugs or making design changes in one\nplace, instead of cascading that change to all subsurfaces of Spotify for\nArtists.\n\nThe MastheadHeader and MastheadFooter are UI components that collectively\nafford various navigational and utilitarian actions presented within every\nSpotify for Artists surface. These include elements like language selection,\nlogin/logout, links to different areas of the site, contact information, and\nlegal disclaimers. Like the data provided by the MastheadProvider, these\nsurfaces are, ideally, not different from each other. For instance, if the URL\nfor a social media account changes, we can share the MastheadFooter component\nbetween applications and proactively prevent broken links.\n\nThe MastheadHeader component of the S4X-Masthead.\n\nThe MastheadHeader component of the S4X-Masthead.\n\nTo guarantee consistency among the clients, the data is dynamically loaded\nfrom a CMS at runtime. If, instead, we hardcoded this data, there could still\nbe a drift in experience due to one client not updating its version to get the\nnew experience.\n\nThe MastheadProvider is used to expose some key contexts to each application,\nincluding the user session and localization preferences. This data is derived\nfrom actions taken within the MastheadHeader and MastheadFooter components but\ncan also be used from within the application pages. Maintaining integrations\nrequires correspondences with the domain-specific teams that provide these\nintegrations and are the places that are most likely to cause bugs in the\napplication if the implementation drifts among clients. For example, updates\nto the authentication integration in one client could break the integration in\nothers. By providing this to the clients, we ensure that they are all using\nthe same version of the integration library.\n\n# Leveraging the facade pattern\n\nS4X Masthead architecture.\n\nClass Diagram for Facade Design Pattern\u201d by Vanderjoe. Used under CC BY-SA\n4.0, via Wikimedia Commons\n\nPart of the beauty of using something well-established, like the facade\npattern, is that it makes communication crystal clear. There\u2019s already a body\nof material to reference both in implementation and documentation. The\nfriction for debating details is much higher.\n\nThe facade pattern, as described by its inventors, \u201cprovides a single,\nsimplified interface to the more general facilities of a subsystem.\u201d They say\nit\u2019s typically used in three cases:\n\n  1. You want to provide a simple interface to a complex subsystem.\n  2. There are many dependencies between clients and implementation classes of an abstraction.\n  3. You want to layer your subsystems.\n\nWhen creating a facade, the focus needs to be on the clean interface \u2014\nintegration with a facade should be trivial. This is important when building\nsystems that cross team boundaries because the communication overhead of\ncoordinating contract changes becomes exponentially more expensive as the\nnumber of consumers grows. While we only have two consumers for our system,\nthey\u2019re very far from each other in the organization hierarchy, which drives\nthe cost higher. This simplicity afforded by the facade is integral to\nupholding a consistent user experience.\n\n### 1\\. Provide a simple interface to a complex subsystem.\n\n#### Reduced cost of maintenance\n\nWith a facade like S4X-Masthead, the only changes a client system has to\nmaintain are version updates. Since the content is served dynamically at\nruntime via our CMS, this is limited only to structural changes to the\nunderlying component or its design. Dynamically delivered content includes\ntranslated copy, menu content, and image assets.\n\n#### Reduced risk of mistakes\n\nSimple designs are easier to understand, and understanding prevents mistakes.\nHaving a single integration point through abstraction, using the standard\nSpotify web library stack, and implementing a well-known design pattern (the\nfacade) simplifies the system. This simplification lowers the barrier for\nunderstanding, thus reducing the risk of making a mistake.\n\n### 2\\. There are many dependencies among clients and implementation classes\nof an abstraction.\n\nThe S4X-Masthead reduces the number of dependencies managed by the client.\nInstead of directly integrating with a third-party translation service or\nhaving teams manually synchronize UI and copy changes to the masthead, they\nare delivered as a single dependency to the client.\n\n### 3\\. Layer your subsystems.\n\nThe S4X-Masthead integrates with the CMS for the component. The CMS handles\ntranslations through another third-party service. If the implementation\ndetails change in the future, S4X-Masthead can make the changes and\npotentially not require the downstream clients to even know.\n\n# Future considerations\n\nWhile it was a move in the right direction, there\u2019s still more work on the\ntable for the project\u2019s future. To begin with, our S4X-Masthead is the second-\nmost shared Masthead project at Spotify. We followed in the footsteps of the\nconsumer application, which also has a Masthead package. While there are some\nmajor differences in the scope of these projects, there\u2019s a great deal of work\nto be done to combine ideas and simplify even further.\n\nNote: Applicability reasons taken from Design Patterns: Elements of Reusable\nObject-Oriented Software (1994). Read about the facade pattern for free at\nhttp://w3sdesign.com/GoF_Design_Patterns_Reference0100.pdf.\n\nShare this:\n\nShare\n\nCategories\n\n  * Design\n  * Developer Tools\n  * Web\n\n## Related articles\n\n### Exploring the Animation Landscape of 2023 Wrapped\n\n### The What, Why, and How of Mastering App Size\n\n## Sign up for updates\n\n## @SpotifyEng on Twitter\n\nTweets by SpotifyEng\n\n## Sign up for engineering updates\n\nBy clicking sign up you\u2019ll receive occasional emails from Spotify. You always\nhave the choice to adjust your interest settings or unsubscribe.\n\n  * Spotify Jobs\n  * Spotify.com\n  * Newsroom\n\n  * Spotify R&D Research\n  * Spotify R&D Design\n\n  * Legal\n  * Privacy\n  * Cookies\n  * About Ads\n\n\u00a9 2024 Spotify AB\n\n", "frontpage": false}
