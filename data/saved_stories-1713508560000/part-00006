{"aid": "40079374", "title": "When it makes sense to build a non-dev-tool open-source SaaS", "url": "https://nonamevc.substack.com/p/should-you-consider-building-a-non", "domain": "nonamevc.substack.com", "votes": 2, "user": "zkid18", "posted_at": "2024-04-18 18:41:55", "comments": 0, "source_title": "Should you consider building a non-dev open-source SaaS product?", "source_text": "Should you consider building a non-dev open-source SaaS product?\n\n# nonamevc\n\nShare this post\n\n#### Should you consider building a non-dev open-source SaaS product?\n\nnonamevc.substack.com\n\n#### Discover more from nonamevc\n\nData ops for PLG SaaS and early-stage VC\n\nContinue reading\n\nSign in\n\n# Should you consider building a non-dev open-source SaaS product?\n\n### What we learned from analyzing 40 commercial open-source software products\nthat are not developer tools.\n\nDaniil Chepenko\n\nand\n\nVlad Nadymov\n\nApr 18, 2024\n\n1\n\nShare this post\n\n#### Should you consider building a non-dev open-source SaaS product?\n\nnonamevc.substack.com\n\nShare\n\nRecently, Y Combinator published its annual startup request, and one\nparticular area has piqued my interest, which I've been contemplating for the\npast year: commercial open-source products for sales or productivity suite.\n\nSeveral successful companies in the commercial open-source sector target\ndevelopers, including Docker, Elastic, Apollo, Confluent, and GitLab. This\nstrategy has become the norm in the developer tools industry as being open\nsource proves to be a potent method to attract developers. Additionally, it is\nan efficient means for startups to grow and appeal to enterprise clients\nfaster.\n\nIn this newsletter series, I researched the 40 non-dev tools (here and beyond,\nI use the term \u201coperational tools\u201d) of OSS products from the perspective of\ntheir monetization strategy and go-to-market motion to understand whether a\npitch like \"We're similar to Mailchimp but open-sourced\" makes any sense.\n\nI reached out to my friend Vlad to collaborate on an article. Currently, he\nleads the product at Handl.ai, an AI-driven document recognition API. He was a\n0->1 PM @ Borzo (same-day delivery for LATAM, India, and SEA) and founded and\nfailed two companies (one venture-backed). He nerds on pricing and business\nmodels, which, combined with trying to bootstrap a company, led him to self-\nhosting COSS tools and, eventually, writing a series of Substacks about COSS\npricing. Check it out!\n\nEnjoy!\n\n##\n\nWhen it makes sense\n\nOpen-source companies are typically founded by technical individuals seeking\nto solve personal problems. These technical founders find it easier to\ncommunicate with users who are also engineers like them, which allows for\nfaster iteration since they can receive feedback from the open-source\ncommunity.\n\nWhile this approach may lead to the front page on HackerNews, building a\nsustainable company can be challenging.\n\nThe main idea behind OSS dev tools is to attract a large user base without\ncharging individual developers. This approach encourages users to become\npaying customers when their needs grow, such as when they want to use the tool\nwithin a larger team or organization. It is logical to compensate the creators\nfor support, consulting services, or custom features.\n\nHowever, hypertechnical open-source CRM or CEP may not fit the same model as\nsuch products can be run in production from day one.\n\nLet\u2019s dive in when it makes sense.\n\n##\n\nThe dev bro is a crucial decision-maker\n\nThis is relevant for any operational tool deeply integrated into product\ndevelopment. I see three contexts or personas here.\n\n  1. The engineering-driven team is led by a tech-savvy founder who prefers self-hosted technology. It\u2019s just a matter of religion rather than any rational choice, and likely, as the company grows, it will face conflicts with the marketing and sales departments when refusing to utilize Salesforce instead of open-source self-hosted CRM.\n\n  2. The data or the engineering leadership is a key decision-maker when it comes to the problem you\u2019re trying to solve. Those teams likely develop internal tools similar to what you\u2019re building because they couldn't find suitable, flexible, and cost-effective options on the market that fit their strict demands. In this case, they may leverage open-source tools to customize and enhance their functionalities. They want to ensure continuity if the SaaS company disappears or decides to pivot.\n\n  3. Strict security requirements. You know what that means if you\u2019re selling to government agencies or healthcare providers.\n\nThe tight budget makes it challenging for OSS dev tools to seal the deal with\nbuyers. And here\u2019s the best point with OSS operational tools \u2013you\u2019re building\nrapport with the IT team by speaking the same language, and the purchasing\nauthority resides in another department.\n\nThink of building an OSS dev tool, but where sales buying your product\n\n##\n\nTransparency\n\nWhile the transparency side of open-source software may not be a precise fit\nfor small and medium-sized businesses, it can be beneficial for accelerating\ndeal closures in enterprise sales.\n\nAnalytical tools pioneered the new wave of open-source solutions as handling\nsensitive client data is challenging, especially in the time of GDPR. That\u2019s\nhow Posthog stands out among analytical tools like Amplitude, and RudderStack\nstands out among Segment and other CDPs. Tools usually offer two options:\nself-host or cloud SaaS. Even if you opt for the product's cloud version, you\ncan verify and audit data processing transparently.\n\nUsing open-source software may streamline the process by reducing the need for\na hundred XLS files from security and compliance teams. Security developers\ncan look at the running code, even if they don't run it themselves.\n\nMoreover, most COSS companies even offer air-gapped self-hosted versions that\ndo not send back data.\n\n##\n\nIntegration-rich products\n\nOpen-source systems allow users to contribute features, such as integrations\nand adaptors, which can expand the software's utility to new use cases.\n\nThe community develops niche features while a central engineering team manages\nthe core product. In contrast, closed-source solutions face challenges as they\ndepend solely on their internal engineering team\u2019s capacity.\n\nThis is particularly beneficial for products with long-tail dynamics that need\nmultiple connections with libraries, frameworks, or applications. For\ninstance, Airbyte excels in ETL by offering unique connector support that\nother solutions may not provide. Previously, users had to persuade proprietary\nETL providers to build the specific connector they required, which was often\nchallenging.\n\nHowever, it may sound more complex than it may sound. Source\n\n> AgentHub was open source when I first started it. I was really excited about\n> the idea of people building their own integrations and fostering some sort\n> of community around cool automation.\n>\n> We noticed a few things though.\n>\n> 1\\. People who were most excited about no code did not want to contribute\n> code to the project. 2. We were 95% open source because we were dealing with\n> credentials and sensitive info on our hosted servers. This 5% of obfuscation\n> was enough to make contributing annoying since you didn't totally understand\n> how some pieces fit together.\n>\n> 3\\. We were adding new features and redesigning aspects of the system so\n> often that it felt simpler to close it and accelerate. Features like node\n> versioning and secure credential storage made it all quite difficult to\n> maintain in an open way.\n>\n> I do still love the idea though. Having people contribute their own\n> integrations would be an absolute dream.\n\n##\n\nCommunity\n\nUsers talk in forums, comment on docs, create GitHub issues, and chat in Slack\nor Discord, revealing their pains and preferences to the product's core team.\nAs a result, you can reduce time spent on product discovery and focus on\ndelivery, making the team leaner.\n\nHiring is also easier. Being open source alone makes a company way more\nappealing to engineers. On top of that, as the community is actively listening\nto new company updates, there is a lead base that does not need to be sold on\nhow cool the company is.\n\n#\n\nGo-to-market motions\n\nBefore proceeding, it\u2019s remarkable how effective the famous Joel Spolsky's\n\u201cStrategy letter V\u201d essay is today. I suggest reading it before you move\nforward.\n\n> At this point, it\u2019s pretty common for people to try to confuse things by\n> saying, \u201caha! But Linux is FREE!\u201d OK. First of all, when an economist\n> considers price, they consider the total price, including some intangible\n> things like the time it takes to set up, reeducate everyone, and convert\n> existing processes. All the things that we like to call \u201ctotal cost of\n> ownership.\u201d\n\nFundamental economic law applies to most open-source software development\ntools. But, when the price of a product's complementary goods decreases, the\ndemand for that product increases. Therefore, companies aim to lower the price\nof their complementary goods as much as possible to increase the demand for\ntheir products. Intelligent companies go a step further and try to turn their\nproducts' complementary goods into commodities.\n\nLet's explore which parts complement each other in the operational tools\nmarket.\n\n##\n\nOSS Operational tooling companies\n\nWe studied 40 commercial non-development open-source products through the\nlenses of GitHub data, funding data, and annual revenue estimation (powered by\nApollo)\n\nThe detailed view of the spreadsheet. (Respond to this email (d@nonamevc.com)\nif you facing any troubles accessing the file)\n\nConsider subscribing (or sharing) if you want to receive the same well-studied\ndata straight to the inbox\n\nHere\u2019s the distribution of the product categories\n\n  * Customer communication: 7 tools\n\n  * Website Analytics: 6 tools\n\n  * Marketing automation: 5 tools\n\n  * Internal tools: 5 tools\n\n  * CRM (Customer Relationship Management): 3 tools\n\n  * In-product communications: 4 tools\n\n  * In-product onboarding: 2 tools\n\n  * Product Analytics: 2 tools\n\n  * Appointment scheduling: 2 tools\n\n  * CDP (Customer Data Platform): 2 tools\n\n  * Form builder: 1 tool\n\n  * Billing: 1 tool\n\nOut of 40 companies, 16 have raised the VC capital.\n\n  1. Odoo CRM (CRM, ERP) - $493M, Latest Funding in 2023\n\n  2. Rudderstack (CDP) - $82M, Latest Funding in 2022\n\n  3. Appsmith (Internal tools) - $52M, Latest Funding in 2022\n\n  4. RocketChat (Customer communication) \u2013$37M, Latest Funding in 2023\n\n  5. Cal.com (Appointment scheduling) - $32M, Latest Funding in 2022\n\n  6. Lago (Billing) - $22M, Latest Funding in 2024\n\n  7. Posthog (Product Analytics) - $27M, Latest Funding in 2021\n\n  8. Pipedream (Workflow automation) - $22M, Latest Funding in 2022\n\n  9. n8n.io (Workflow automation) - $14M, Latest Funding in 2021\n\n  10. Tooljet (Internal tools) - $11M, Latest Funding in 2023\n\n  11. OpenReplay (Website Analytics) - $6M, Latest Funding in 2022\n\n  12. Umami (Website Analytics) - $2M, Latest Funding in 2022\n\n  13. Jitsu (CDP) - $2M, Latest Funding in 2020\n\n  14. Chatwooot (Help center) \u2013 $1.6M, Latest Funding in 2021\n\nSeed-stage YC companies (likely raised the seed amount; no other data is\navailable)\n\n  15. Activepieces (YC S22) Workflow automation\n\n  16. Refine (YC S23) Internal tools\n\n  17. Laudspeaker (YC W21) Customer communication\n\nNot every tool in the dataset has disclosed funding, which could imply self-\nfunding, minimal external funding, or a strategic decision not to seek\nsignificant venture capital. According to the data from Crunchbase, Countly\n(Product Analytics), Matomo (Website Analytics), and SuiteCRM (CRM) generates\naround $5m annually and haven\u2019t received any VC funding.\n\n##\n\nCloud and Community version\n\nEvery OSS product is PLG product in some way. You can try it without a sales\nconversation. However, designing the proper ladders and pricing is not as easy\nas it sounds.\n\nThere are various strategies here: removing the need to manage the tool\nyourself, open-core, selling add-ons, or all together.\n\nThe harsh reality is that the company is working on 2 or 3 products\nsimultaneously regarding COSS. Generally, the OSS and the commercial product\nfollow two roadmaps and goals.\n\n  1. Community product, which makes the company open source.\n\n  2. Cloud version of the product. When it comes to the managed cloud, the COSS companies follow the same pattern as their non-OSS counterparts, with an open-core combination for the managed cloud. For instance, the self-hosted version of Posthog has limited features, and additional features like AB testing are available only in the cloud version at an added cost.\n\n  3. Enterprise products. There are two directions: the advanced managed cloud plan with security features and custom integrations and the advanced on-premise option, which is only available to select customers.\n\nNote that you don\u2019t have to implement both the cloud and the enterprise\noption. There are companies that don\u2019t have enterprise plans or companies that\nprovide only air-gapped solutions along with community versions.\n\nThe strategy should be tailored to your market, brand, and your approach to\nsales.\n\nBefore designing the pricing strategy, make sure to answer two simple\nquestions:\n\n  1. Who is the target audience for each offering?\n\n  2. What drives customers to move from the community version to a cloud or enterprise?\n\n##\n\nBottom-up motion and SMB\n\nIf the company designs the managed cloud solution for self-serve customers,\nthe user has two options for starting the product.\n\n  1. Deploy it on your machine and use the self-hosted version. That\u2019s a great way to make the PoC or simply pay less.\n\n  2. Begin with the basic tier of the cloud version. In a small startup with three people, avoid focusing on managing the architecture and building your own CI/CD system to update and merge releases. Instead, prioritize essential tasks. It is possible to use cloud products for free for an extended period.\n\nMost companies I\u2019ve researched follow this path to commercialize the product.\nIt seems the OSS tool likely competes with the non-OSS tool here, which\nleverages self-service usage and follows the PLG ladder.\n\nSome harsh truths from HackerNews\n\n> I maintain an open source push notification service called ntfy [1]. It's\n> 100% open source, but I have recently started offering ntfy Pro, a paid SaaS\n> offering.\n>\n> I am telling you it's super hard to get people to pay for it. It may be\n> because the free tier is too generous, or because I don't aggressively push\n> or market it, but most likely it's because people can just selfhost it. I\n> have 25k active daily users for the free tier, and probably hundreds or\n> thousands of selfhosted installations, yet as of today, I have only 20\n> paying subscribers. It's quite brutal.\n\nThe question is whether the community version is a feature or a bug. Keep in\nmind that some users prefer self-hosted solutions and never become customers\nof the product.\n\nFeature-wise, most companies use volume-based pricing (12 products), likely\nfollowing their non-OSS counterparts. Unit-based pricing (7 companies) is\nfamous for website analytics and workflow automation.\n\n##\n\nOn-premise vs Enterprise plan\n\nLarge enterprise clients typically do not have an issue paying for SaaS, which\nis usually considered a minor expense. What is more important to them is that\nthe solution is effective, reliable, and user-friendly.\n\nHowever, managing an open-source solution can be challenging. This is where\nwhite-glove service comes in. Premium Support and Single Sign-On (SSO) are the\nmost commonly offered enterprise features among the researched companies.\n\nTo enhance security and data features even further, many companies offer air-\ngapped instances that prevent tool developers from receiving data on what\u2019s\ngoing on in self-hosted instances. This is especially important for tools that\nhandle sensitive data, as it limits compliance issues for GDPR et al.\n\nAnd back to my point about the importance of product positioning. Some\ncompanies, such as Lago and Refine, solely target enterprise clients and do\nnot offer cloud options.\n\nLago pricing\n\nRefine Pricing.\n\n##\n\nPlatform\n\nThis relates to the integration-rich part I shared earlier, but I want to\nextend the initial idea here. The open-source product has the potential to\nexpand into a platform strategy.\n\nCal.com is experimenting with building a platform for developers using open-\nsource tools. They provide scheduling capabilities to other applications.\nTheir ICP is another platform or marketplace that facilitates relationships\nbetween parties and enables scheduling between them.\n\nThe same is true for RocketChat, which enables developers to embed chat\nexperiences into the existing web or mobile app.\n\nAlthough Cal.com and RocketChat are still in their early days with their\nPlatform strategy, the outlines of their powerful flywheels are already\nbecoming clear.\n\n  1. They start by launching a core toolset that offers an excellent developer experience.\n\n  2. This helps them gain traction on the developer side.\n\n  3. As developers build new functionality around the core toolset, the platform's scale and scope increase, leading to more consumer engagement.\n\n  4. As the platform gains wider adoption among platform consumers, the flywheel effect sets in, and developer traction increases even further.\n\nPlatforms led by developers have a significant competitive advantage because\nof their commitment.\n\n#\n\nLicense stuff\n\nEach of these licenses has different requirements regarding distribution,\nmodification, and how derivatives must be handled, influencing the adoption\nand contribution patterns of the software.\n\nNote: the article was published in April 2024, and the license might change.\nAlways double-check the official GitHub repo.\n\n###\n\nMIT License (10 companies)\n\nThe MIT license is one of the most permissive and allows developers to use,\ncopy, modify, merge, publish, distribute, sublicense, and sell copies of the\nsoftware and its substantial portions.\n\nCompanies: Dittofeed, Umami, Papercups, Shepherd.js, Refine, Fathom Analytics,\nJitsu, Postal, Sendportal\n\n###\n\nAGPL-3.0 License (9 companies)\n\nThe Affero General Public License is a free, copyleft license that requires\nany server that runs a modified program to be accessible to the program's\nusers. It aims to close a loophole in the GPL that allows modifications to be\nused in networked services without releasing the source code.\n\nCompanies: Listmonk, Countly, Plausible, Twenty CRM, SuiteCRM, Automatisch,\nTypebot, Tooljet, Lago\n\n###\n\nGPL-3.0 License (4 companies)\n\nThe GNU General Public License is a free, copyleft license that allows the\nsoftware to be freely used, modified, and distributed. Modifications and\nderivatives must also be open-sourced.\n\nCompanies: Mailtrain, Matomo, Easy!Appointments, Budibase\n\n###\n\nApache-2.0 License (4 companies)\n\nThe Apache License 2.0 is a permissive license similar to the MIT License but\nalso provides an express grant of patent rights from contributors to users.\n\nCompanies: Node-RED, Appsmith, Lowdefy, Laudspeaker\n\n###\n\nGPL-2.0 License (1 company)\n\nSimilar to GPL-3.0 but an earlier version. It allows the software to be freely\nused, modified, and distributed, with all derivatives needing to be open-\nsourced under the same license.\n\nCompany: Open Web Analytics\n\n###\n\nElastic License 2.0 (ELv2) (1 company)\n\nThis is a source-available license that allows for many uses but restricts the\nsoftware from being offered as a managed service, aiming to protect the\ncompany behind the project's commercial model.\n\nCompany: Rudderstack\n\n###\n\nCustom License (11 companies)\n\nCompanies: OpenReplay, Odoo CRM, Chatwoot, Chaskiq, Activepieces, n8n.io,\nCal.com, Intro.js, Pipedream, Posthog, RocketChat\n\n9 of the 16 companies that VC has funded have created their licenses. The\nsecond popular choice is the MIT license and AGPL3-0.\n\n#\n\nWhat to build\n\nAs a final note, the idea for the post was initially influenced by personal\nresearch on the OSS venture. Still bullish on the approach, and the original\npost helped to structure the framework. An intelligent open-source approach\nand outstanding design combination can reshape many established markets.\n\nLove the axis framing of the Posthog team's graph design. Despite being\ndesigned for Posthog's specific needs, I think the chart is applicable to the\nmajority of operational tools.\n\nhttps://posthog.com/handbook/which-products\n\nFor instance, as you see, there aren\u2019t many COSS tools for GTM teams besides\nCRMs. We\u2019re yet to see open-source alternatives for human email (Apollo), lead\nscoring (Madkudu), product-led sales (Pocus, Endgame), or enrichment tools\n(Apollo, ZoomInfo, Clearbit) since more tech-savvy personas are getting into\nthe RevOps space.\n\nIf you\u2019re interested in this domain, subscribe to the newsletter or reach out\nto me in LinkedIn. I will continue to write about it in upcoming issues.\n\nPro tip: Name your company \"Open___\" then don't open source it.\n\n1 Like\n\n1\n\nShare this post\n\n#### Should you consider building a non-dev open-source SaaS product?\n\nnonamevc.substack.com\n\nShare\n\nA guest post by| Vlad NadymovPM-turned-entrepreneur. I write about things I\nlearn \u2014 mostly B2B tech, economics, how my body and mind work, logic and math.\nBut mostly B2B tech.| Subscribe to Vlad  \n---|---  \n  \nComments\n\nMastering the B2B Analytics Stack from Founding to Growth stage: A\nComprehensive Guide\n\nThe evolution of the B2B analytics stack in relation to product growth.\n\nMar 22, 2023 \u2022\n\nDaniil Chepenko\n\n5\n\nShare this post\n\n#### Mastering the B2B Analytics Stack from Founding to Growth stage: A\nComprehensive Guide\n\nnonamevc.substack.com\n\nHow Snowflake changes the way we build B2B SaaS products\n\nSnowflake became a game-changing cloud data platform revolutionizing how we\nbuild B2B SaaS products.\n\nJan 9, 2023 \u2022\n\nDaniil Chepenko\n\n7\n\nShare this post\n\n#### How Snowflake changes the way we build B2B SaaS products\n\nnonamevc.substack.com\n\nTweaking Hubspot for the collaborative PLG SaaS\n\nHow to leverage product data in CRM to increase GTM revenue efficiency\n\nSep 6, 2023 \u2022\n\nDaniil Chepenko\n\n5\n\nShare this post\n\n#### Tweaking Hubspot for the collaborative PLG SaaS\n\nnonamevc.substack.com\n\n3\n\nReady for more?\n\n\u00a9 2024 Danya Chepenko\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
