{"aid": "40284965", "title": "Using Fortran on Cloudflare Workers", "url": "https://blog.cloudflare.com/using-fortran-on-cloudflare-workers", "domain": "cloudflare.com", "votes": 4, "user": "makaimc", "posted_at": "2024-05-07 13:03:29", "comments": 0, "source_title": "Using Fortran on Cloudflare Workers", "source_text": "Using Fortran on Cloudflare Workers\n\nGet Started Free|Contact Sales\n\n## The Cloudflare Blog\n\nSubscribe to receive notifications of new posts:\n\n# Using Fortran on Cloudflare Workers\n\n05/07/2024\n\n  * John Graham-Cumming\n\n  * Sven Sauleau\n\n4 min read\n\nIn April 2020, we blogged about how to get COBOL running on Cloudflare Workers\nby compiling to WebAssembly. The ecosystem around WebAssembly has grown\nsignificantly since then, and it has become a solid foundation for all types\nof projects, be they client-side or server-side.\n\nAs WebAssembly support has grown, more and more languages are able to compile\nto WebAssembly for execution on servers and in browsers. As Cloudflare Workers\nuses the V8 engine and supports WebAssembly natively, we\u2019re able to support\nlanguages that compile to WebAssembly on the platform.\n\nRecently, work on LLVM has enabled Fortran to compile to WebAssembly. So,\ntoday, we\u2019re writing about running Fortran code on Cloudflare Workers.\n\nBefore we dive into how to do this, here\u2019s a little demonstration of number\nrecognition in Fortran. Draw a number from 0 to 9 and Fortran code running\nsomewhere on Cloudflare\u2019s network will predict the number you drew.\n\nThis is taken from the wonderful Fortran on WebAssembly post but instead of\nrunning client-side, the Fortran code is running on Cloudflare Workers. Read\non to find out how you can use Fortran on Cloudflare Workers and how that\ndemonstration works.\n\n### Wait, Fortran? No one uses that!\n\nNot so fast! Or rather, actually pretty darn fast if you\u2019re doing a lot of\nnumerical programming or have scientific data to work with. Fortran\n(originally FORmula TRANslator) is very well suited for scientific workloads\nbecause of its native functionality for things like arithmetic and handling\nlarge arrays and matrices.\n\nIf you look at the ranking of the fastest supercomputers in the world you\u2019ll\ndiscover that the measurement of \u201cfast\u201d is based on these supercomputers\nrunning a piece of software called LINPACK that was originally written in\nFortran. LINPACK is designed to help with problems solvable using linear\nalgebra.\n\nThe LINPACK benchmarks use LINPACK to solve an n x n system of linear\nequations using matrix operations and, in doing so, determine how fast\nsupercomputers are. The code is available in Fortran, C and Java.\n\nA related Fortran package, BLAS, also does linear algebra and forms the basis\nof the number identifying code above. But other Fortran packages are still\nrelevant. Back in 2017, NASA ran a competition to make FUN3D (used to perform\ncalculations of airflow over simulated aircraft). FUN3D is written in Fortran.\n\nSo, although Fortran (or at the time FORTRAN) first came to life in 1957, it\u2019s\nalive and well and being used widely for scientific applications (there\u2019s even\nFortran for CUDA). One particular application left Earth 20 years after\nFortran was born: Voyager. The Voyager probes use a combination of assembly\nlanguage and Fortran to keep chugging along.\n\nBut back in our solar system, and back on Region: Earth, you can now use\nFortran on Cloudflare Workers. Here\u2019s how.\n\n### How to get your Fortran code running on Cloudflare Workers\n\nTo make it easy to run your Fortran code on Cloudflare Workers, we created a\ntool called Fortiche (translates to smart in French). It uses Flang and\nEmscripten under the hood.\n\nFlang is a frontend in LLVM and, if you read the Fortran on WebAssembly blog\npost, we currently have to patch LLVM to work around a few issues.\n\nEmscripten is used to compile LLVM output and produce code that is compatible\nwith Cloudflare Workers.\n\nThis is all packaged in the Fortiche Docker image. Let\u2019s see a simple example.\n\nadd.f90:\n\n    \n    \n    SUBROUTINE add(a, b, res) INTEGER, INTENT(IN) :: a, b INTEGER, INTENT(OUT) :: res res = a + b END\n\nHere we defined a subroutine called add that takes a and b, sums them together\nand places the result in res.\n\nCompile with Fortiche:\n\n    \n    \n    docker run -v $PWD:/input -v $PWD/output:/output xtuc/fortiche --export-func=add add.f90\n\nPassing --export-func=add to Fortiche makes the Fortran add subroutine\navailable to JavaScript.\n\nThe output folder contains the compiled WebAssembly module and JavaScript from\nEmscripten, and a JavaScript endpoint generated by Fortiche:\n\n    \n    \n    $ ls -lh ./output total 84K -rw-r--r-- 1 root root 392 avril 22 12:00 index.mjs -rw-r--r-- 1 root root 27K avril 22 12:00 out.mjs -rwxr-xr-x 1 root root 49K avril 22 12:00 out.wasm\n\nAnd finally the Cloudflare Worker:\n\n    \n    \n    // Import what Fortiche generated import {load} from \"../output/index.mjs\" export default { async fetch(request: Request): Promise<Response> { // Load the Fortran program const program = await load(); // Allocate space in memory for the arguments and result const aPtr = program.malloc(4); const bPtr = program.malloc(4); const outPtr = program.malloc(4); // Set argument values program.HEAP32[aPtr / 4] = 123; program.HEAP32[bPtr / 4] = 321; // Run the Fortran add subroutine program.add(aPtr, bPtr, outPtr); // Read the result const res = program.HEAP32[outPtr / 4]; // Free everything program.free(aPtr); program.free(bPtr); program.free(outPtr); return Response.json({ res }); }, };\n\nInterestingly, the values we pass to Fortran are all pointers, therefore we\nhave to allocate space for each argument and result (the Fortran integer type\nis four bytes wide), and pass the pointers to the add subroutine.\n\nRunning the Worker gives us the right answer:\n\n    \n    \n    $ curl https://fortran-add.cfdemos.workers.dev {\"res\":444}\n\nYou can find the full example here.\n\n### Handwritten digit classifier\n\nThis example is taken from https://gws.phd/posts/fortran_wasm/#mnist. It\nrelies on the BLAS library, which is available in Fortiche with the flag:\n--with-BLAS-3-12-0.\n\nNote that the LAPACK library is also available in Fortiche with the flag:\n--with-LAPACK-3-12-0.\n\nYou can try it below:\n\nAnd you can access the source code here.\n\nLet us know what you write using Fortran and Cloudflare Workers!\n\nEND\n\nWe protect entire corporate networks, help customers build Internet-scale\napplications efficiently, accelerate any website or Internet application, ward\noff DDoS attacks, keep hackers at bay, and can help you on your journey to\nZero Trust.\n\nVisit 1.1.1.1 from any device to get started with our free app that makes your\nInternet faster and safer.\n\nTo learn more about our mission to help build a better Internet, start here.\nIf you're looking for a new career direction, check out our open positions.\n\nDiscuss on Hacker News\n\nFortranDeveloper PlatformDevelopersCloudflare Workers\n\nFollow on X\n\nSven Sauleau|@svensauleau\n\nCloudflare|@cloudflare\n\n  * Getting Started\n  * Free plans\n  * For enterprises\n  * Compare plans\n  * Get a recommendation\n  * Request a demo\n  * Contact Sales\n\n  * Resources\n  * Learning Center\n  * Analyst reports\n  * Cloudflare Radar\n  * Cloudflare TV\n  * Case Studies\n  * Webinars\n  * White Papers\n  * Developer docs\n  * theNet\n\n  * Solutions\n  * Connectivity cloud\n  * SSE and SASE services\n  * Application services\n  * Network services\n  * Developer services\n\n  * Community\n  * Community Hub\n  * Project Galileo\n  * Athenian Project\n  * Cloudflare for Campaigns\n  * Critical Infrastructure Defense Project\n  * Connect 2024\n\n  * Support\n  * Help center\n  * Cloudflare Status\n  * Compliance\n  * GDPR\n  * Trust & Safety\n\n  * Company\n  * About Cloudflare\n  * Our team\n  * Investor relations\n  * Press\n  * Careers\n  * Diversity, equity & inclusion\n  * Impact/ESG\n  * Network Map\n  * Logos & press kit\n  * Become a partner\n\n\u00a9 2024 Cloudflare, Inc. | Privacy Policy | Terms of Use | Report Security Issues |Cookie Preferences | Trademark\n\n", "frontpage": false}
