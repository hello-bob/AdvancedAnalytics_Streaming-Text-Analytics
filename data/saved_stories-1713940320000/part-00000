{"aid": "40135431", "title": "An Analysis of the DHEat DoS Against SSH in Cloud Environments", "url": "https://www.positronsecurity.com/blog/2024-04-23-an-analysis-of-dheat-dos-against-ssh-in-cloud-environments/", "domain": "positronsecurity.com", "votes": 2, "user": "c0r0n3r", "posted_at": "2024-04-23 18:31:27", "comments": 0, "source_title": "Positron Security", "source_text": "Positron Security\n\n  * Positron Security\n  * Blog\n  * An Analysis of the DHEat DoS Against SSH in Cloud Environments\n\n# Blog\n\n## An Analysis of the DHEat DoS Against SSH in Cloud Environments\n\nBy\n\njtesta\n\non\n\nApril 23, 2024\n\nThe DHEat denial-of-service vulnerability involves sending a large number of\nDiffie-Hellman (DH) public keys to a peer, causing it to perform many\nunnecessary modular exponentiations and wasting CPU resources (in fact, the\nattacker can simply send random numbers instead of real DH keys to avoid\nincurring the computational penalty themselves). Because the DH handshake\noccurs before authentication in many network protocols (such as SSH), the\nattack can be conducted anonymously. And interestingly, as the size of the DH\nmodulus increases, the brute-force security of the key exchange also\nincreases, but so does the susceptibility to the DHEat attack since larger\n(and more expensive) modular exponentiation is required.\n\nThis attack seems to have first been discussed in a 2002 paper by Raymond and\nStiglic [1], but gained renewed attention nearly two decades later in 2021\nwhen Szil\u00e1rd Pfeiffer released a proof-of-concept tool to attack SSH and HTTPS\nservices [2][3]. This issue was assigned CVE-2002-20001 (note that, despite\nthe name, this CVE was created in 2021).\n\nIn this article, I analyze the impact of the DHEat attack against SSH services\nin cloud environments. Using a custom implementation of the attack (available\nin ssh-audit v3.2.0), I will show that it can easily consume all CPU resources\nin Amazon Web Services (AWS) virtual machines running the Amazon Linux 2023\nimage with default settings when low-latency links exist between a source and\ntarget. In fact, only 11 KB/s of bandwidth is needed to exhaust the t3.micro\ninstance, and just 15 KB/s overwhelms the m7i.large instance!\n\n### Default OpenSSH Countermeasures\n\nBefore getting into the attack results, it is worth explaining the default\ncountermeasures that the OpenSSH implementation includes: the MaxStartups\ndirective. This directive limits the number of pre-authentication connections\nthat OpenSSH will allow before invoking a throttling mechanism. The default\nvalue of this directive is \u201c10:30:100\u201d, which means that 10 pre-authentication\nconnections are always allowed. Upon the 11th connection, there is a 30%\nchance it will be refused. The probability of refusal increases linearly to\n100% once 100 connections are reached.\n\nDuring testing it was found that this default can partially protect SSH\nservices in the cloud when the attacker has a relatively high-latency network\nlink to the target (such as conducting the attack from the public Internet\nwith many hops in between). However, this default was found to be fully\nineffective when the attacker has a low-latency link (including, but not\nlimited to, using another AWS account as the source). In fact, there was no\nreasonable MaxStartups setting found that can thwart the DHEat attack in this\nscenario. An in-depth analysis of this finding can be found in the \u201cDHEat\nCountermeasures: MaxStartups Tuning\u201d section, later in this article.\n\n### Attack Results Against AWS Instances\n\nFor all tests below, a fully updated Amazon Linux 2023 image is used with no\nchanges to the defaults (unless otherwise noted).\n\n#### Target: m7i.large instance + diffie-hellman-group16-sha512 key exchange\n\nLet\u2019s start with the m7i.large instance: a fairly capable general-purpose VM\ninstance whose two vCPUs feature \u201cUp to 3.2 GHz 4th Generation Intel Xeon\nScalable processor (Sapphire Rapids 8488C)\u201d (as per AWS\u2019s description). A few\nminutes after booting the VM, the average idle time over a 60-second period\nwas (unsurprisingly) found to be 99.86%.\n\nNow we\u2019ll run the DHEat attack from the public Internet (over a relatively\nhigh-latency link) against the server\u2019s diffie-hellman-group16-sha512 key\nexchange (which uses a 4096-bit modulus):\n\n$ ssh-audit --dheat=8:diffie-hellman-group16-sha512:4 [target] TCP SYNs/sec:\n41; Compl. conns/sec: 41; Bytes sent/sec: 11.2KB; DH kex/sec: 41\n\nThe above command makes ssh-audit run 8 concurrent threads and target the\ndiffie-hellman-group16-sha512 key exchange while sending only 4 bytes as its\nvalue of e (normally the result of the modular exponentiation g^x mod p, but\nin this case, just a short random number which tricks the server into thinking\na real DH key was sent). In response, the server performs one modular\nexponentiation (g^y mod p) and returns the result. ssh-audit ignores this,\ncloses the connection, re-opens another, and repeats the process as quickly as\npossible until manually terminated.\n\nWhile letting the above command run in the background, we run a custom tool\n(idle_watcher.py) on the target to collect CPU idle metrics over a trailing\n60-second period and compute the average:\n\n$ python3 idle_watcher.py Running iostat and monitoring CPU idle times for 65\nseconds. Complete! Average idle time: 64.90%\n\nWell, our first attempt was rather unimpressive. We were only able to increase\nCPU load by 99.86% - 64.90% = 34.96%. Let\u2019s see what happens to the 60-second\naverage idle time as we increase the number of threads from 16 to 90 in\nincrements of 16:\n\n$ ssh-audit --dheat=16:diffie-hellman-group16-sha512:4 [target] TCP SYNs/sec:\n61; Compl. conns/sec: 51; Bytes sent/sec: 16.7KB; DH kex/sec: 51 --- Average\nidle time: 52.63%\n\n$ ssh-audit --dheat=32:diffie-hellman-group16-sha512:4 [target] TCP SYNs/sec:\n85; Compl. conns/sec: 57; Bytes sent/sec: 23.0KB; DH kex/sec: 57 --- Average\nidle time: 46.96%\n\n$ ssh-audit --dheat=48:diffie-hellman-group16-sha512:4 [target] TCP SYNs/sec:\n97; Compl. conns/sec: 59; Bytes sent/sec: 26.5KB; DH kex/sec: 59 --- Average\nidle time: 52.02%\n\n$ ssh-audit --dheat=64:diffie-hellman-group16-sha512:4 [target] TCP SYNs/sec:\n16884; Compl. conns/sec: 57; Bytes sent/sec: 28.1KB; DH kex/sec: 57 ---\nAverage idle time: 54.48%\n\n$ ssh-audit --dheat=80:diffie-hellman-group16-sha512:4 [target] TCP SYNs/sec:\n102; Compl. conns/sec: 51; Bytes sent/sec: 27.7KB; DH kex/sec: 51 --- Average\nidle time: 58.22%\n\n$ ssh-audit --dheat=96:diffie-hellman-group16-sha512:4 [target] TCP SYNs/sec:\n107; Compl. conns/sec: 48; Bytes sent/sec: 29.1KB; DH kex/sec: 48 --- Average\nidle time: 52.47%\n\nLooks like our best results (49.96% idle) come from using 32 threads and\nsending 23 KB/s. But what if this strain is the result of accepting 57\nconnections per second and not because of the modular exponentiation? Using\nssh-audit\u2019s --conn-rate-test feature, let\u2019s use 32 threads to create at most\n57 connections per second without triggering the exponentiation:\n\n$ ssh-audit --conn-rate-test=32:57 [target] TCP SYNs/sec: 81.6; Compl.\nconns/sec: 56.4\n\nAfter this runs for 60 seconds, idle_watcher.py reports the average idle time\nas 79.55%. This implies that the new connection handling accounted for 20.31%\nof CPU load (= 99.86% baseline idle time - 79.55% idle time during connection\nrate test), and the modular exponentiation resulted in 32.59% CPU load (=\n99.86% baseline idle time - 46.96% new connection plus modular exponentiation\nidle time - 20.31% new connection idle time).\n\nWe did succeed in wasting half of the target\u2019s CPU resources, but fell very\nmuch short of overwhelming the server completely. The high communication\nlatency caused sockets to remain in the pool of unauthenticated connections\n(governed by the MaxStartups directive) for a longer period of time, hence\nmore of our incoming connections were rejected. However, in a lower-latency\nscenario, each socket would enter and exit the pool faster, allowing a greater\nnumber of new connections per second before throttling is triggered.\n\nNow let\u2019s see what happens when we run the attack from a very low-latency\nnetwork source. In this case, we will spin up an m7i.2xlarge AWS instance in\nanother account to use as the attacking source (chosen due to its high network\nperformance), then use the target\u2019s public IPv4 address. This would model a\nreal-world scenario where an attacker is external to the target from both a\nnetwork and organizational perspective. Through experimentation (omitted for\nbrevity), I found that using only 4 threads results in 0.00% idle time on the\ntarget!:\n\n$ ssh-audit --dheat=4:diffie-hellman-group16-sha512:4 [public IPv4 address]\nTCP SYNs/sec: 112; Compl. conns/sec: 112; Bytes sent/sec: 30.5KB; DH kex/sec:\n112 --- Average idle time: 0.00%\n\nAnd now, using the same number of threads, let\u2019s see how much idle time\nresults from just creating 112 new connections per second:\n\n$ ssh-audit --conn-rate-test=4:112 [public IPv4 address] TCP SYNs/sec: 110.7;\nCompl. conns/sec: 110.7 --- Average idle time: 56.03%\n\nThe above results show that 43.83% CPU load was caused by new connection\nhandling, thus 56.03% CPU load was caused by modular exponentiation. These\nresults are quite the improvement over what we got when using a high-latency\nsource (previously, we could only get the average idle time down to 47%; now\nwe\u2019ve gotten it down to 0%!).\n\nOverall, effect of this DoS attack against a 4096-bit diffie-hellman-\ngroup16-sha512 key exchange algorithm is dramatic: with just 31 KB/s of\napplication protocol traffic (not accounting for IP and TCP packet overhead),\nwe\u2019re able to completely exhaust all the vCPUs of a fairly capable cloud VM!\n\n#### Target: m7i.large instance + diffie-hellman-group18-sha512 key exchange\n\nNow let\u2019s target the diffie-hellman-group18-sha512 key exchange on the same\nVM. This algorithm features an 8192-bit modulus, which provides greater\nsecurity against brute force attacks, but causes higher strain when computing\nmodular exponentiation.\n\nFrom an m7i.2xlarge instance in another AWS account:\n\n$ ssh-audit --dheat=4:diffie-hellman-group18-sha512:4 [public IPv4 address]\nTCP SYNs/sec: 55; Compl. conns/sec: 55; Bytes sent/sec: 15.1KB; DH kex/sec: 55\n--- Average idle time: 0.01%\n\nCompared to the 4096-bit diffie-hellman-group16-sha512 algorithm, when\ntargeting this 8192-bit diffie-hellman-group18-sha512 algorithm, we\u2019ve\neffectively consumed both vCPUs with about half of the connections per second\n(55 vs 112) and half of the bandwidth (15 KB/s vs 31 KB/s)! Impressive.\n\n#### Target: m7i.large + curve25519-sha256 key exchange\n\nThe curve25519-sha256 key exchange was the default in OpenSSH from v6.5 until\nv8.9. It is a very fast algorithm based on Elliptical Curve Diffie-Hellman\ncombined with the transparently-developed Curve25519 parameters. This, too,\ncan be targeted by the DHEat attack.\n\nFrom an m7i.2xlarge instance in another AWS account:\n\n$ ssh-audit --dheat=4:curve25519-sha256 [public IPv4 address] TCP SYNs/sec:\n159; Compl. conns/sec: 159; Bytes sent/sec: 45.5KB; DH kex/sec: 159 ---\nAverage idle time: 0.02%\n\nAnd just to make sure that we didn\u2019t achieve this effect solely from the high\nrate of connections:\n\n$ ssh-audit --conn-rate-test=4:159 [public IPv4 address] TCP SYNs/sec: 157.0;\nCompl. conns/sec: 157.0 --- Average idle time: 49.29%\n\nTargeting curve25519-sha256 requires about 3 times more bandwidth than diffie-\nhellman-group18-sha512 (46 KB/s vs 15 KB/s), but this is still very\nreasonable. And it may be possible to further optimize the attack against this\nkey exchange in the future.\n\n#### Target: m7i.large + sntrup761x25519-sha512@openssh.com key exchange\n\nThe relatively new sntrup761x25519-sha512@openssh.com key exchange algorithm\nis rather interesting, as it wraps the standard X25519 key exchange with the\nStreamlined NTRU Prime key exchange to provide high resistance to quantum\ncomputing attacks. This algorithm became the default in OpenSSH in v9.0 [4],\nthough for some reason it is disabled in the latest revision of Amazon Linux\n2023 (as of April 2024). By editing the /etc/crypto-policies/back-\nends/opensshserver.config file, this can be turned on to enable testing.\n\nFrom an m7i.2xlarge instance in another AWS account:\n\n$ ssh-audit --dheat=4:sntrup761x25519-sha512@openssh.com TCP SYNs/sec: 109;\nCompl. conns/sec: 109; Bytes sent/sec: 156.5KB; DH kex/sec: 109 --- Average\nidle time: 0.03%\n\nAs you can see, it requires about 10 times higher bandwidth to exhaust the\nvCPUs in comparison to the diffie-hellman-group18-sha512 key exchange (157\nKB/s vs 15 KB/s). Note, however, that ssh-audit\u2019s implementation for this key\nexchange is very much unoptimized as of this writing; it may be possible to\nreduce the necessary bandwidth through future improvements.\n\n#### Target: t3.micro + diffie-hellman-group18-sha512 key exchange\n\nAWS\u2019s t3.micro VM instance is a popular choice for small workloads. As per the\nAWS documentation, each of its two vCPUs are \u201cUp to 3.1 GHz Intel Xeon\nScalable processor (Skylake 8175M or Cascade Lake 8259CL)\u201d. Since this has\nmore modest resources than the m7i.large instance, we would expect less\nconnections per second / bandwidth needed to overwhelm it.\n\nFrom an m7i.2xlarge instance in another AWS account:\n\n$ ssh-audit --dheat=3:diffie-hellman-group18-sha512:4 [public IPv4 address]\nTCP SYNs/sec: 40; Compl. conns/sec: 40; Bytes sent/sec: 10.9KB; DH kex/sec: 40\n--- Average idle time: 0.01%\n\nFor comparison, the m7i.large instance became flooded at 55 connections per\nsecond / 15 KB/s bandwidth against the same key exchange. Hence, the t3.micro\ninstance is roughly 28% easier to overload with respect to bandwidth.\n\n#### Target: c7a.8xlarge + diffie-hellman-group18-sha512 key exchange\n\nOk, now here\u2019s where things get interesting. Let\u2019s see what happens when we\ntarget a powerful compute-optimized instance: the c7a.8xlarge, which features\n32 vCPUs. As per the AWS documentation, it uses \u201cUp to 3.7 GHz 4th generation\nAMD EPYC processors (AMD EPYC 9R14)\u201d.\n\nFrom an m7i.2xlarge instance in another AWS account:\n\n$ ssh-audit --dheat=56:diffie-hellman-group18-sha512:4 [public IPv4 address]\nTCP SYNs/sec: 3465; Compl. conns/sec: 1151; Bytes sent/sec: 937.5KB; DH\nkex/sec: 1150 --- Average idle time: 0.92%\n\nLet\u2019s see how much load we add just from the new connections:\n\n$ ssh-audit --conn-rate-test=56:1151 [public IPv4 address] TCP SYNs/sec:\n2105.8; Compl. conns/sec: 1134.4 --- Average idle time: 74.81%\n\nAmazing! We caused over 99% load across 32 high-performance vCPUs! Of this,\nroughly 74% was the result of superfluous modular exponentiation, with the\nremaining 25% load coming from new connection handling. And all that with\nunder 1MB/s of network traffic!\n\n### DHEat Countermeasures: MaxStartups Tuning\n\nAs witnessed above, OpenSSH\u2019s default MaxStartups setting (\u201c10:30:100\u201d) is\nonly effective when a relatively high-latency connection is used. When we used\na low-latency link (a VM instance in another AWS account), we were easily able\nto bypass this default. Let\u2019s now take a look at the effects of strengthening\nthe setting to see if low-latency connections can still flood the target.\n\nAs we saw before, the m7i.large instance becomes flooded when it receives 55\nconnections per second / 15 KB/s directed at the diffie-hellman-group18-sha512\nkey exchange from a low-latency source with the default MaxStartups setting.\nLet\u2019s update the setting to \u201c10:30:20\u201d, which would cause between 30% and 100%\nconnection drops when 11 to 20 pre-authentication connections are formed:\n\n$ ssh-audit --dheat=4:diffie-hellman-group18-sha512:4 [public IPv4 address]\nTCP SYNs/sec: 54; Compl. conns/sec: 54; Bytes sent/sec: 14.7KB; DH kex/sec: 54\n--- Average idle time: 0.00%\n\nCompletely ineffective. Ok, let\u2019s try \u201c10:100:10\u201d; this would block all\nconnections once 10 is reached:\n\n[command remains constant for all tests and will be omitted] TCP SYNs/sec: 54;\nCompl. conns/sec: 54; Bytes sent/sec: 14.8KB; DH kex/sec: 54 --- Average idle\ntime: 0.01%\n\nAnother failure. How about \u201c5:100:5\u201d?:\n\nTCP SYNs/sec: 161; Compl. conns/sec: 53; Bytes sent/sec: 43.6KB; DH kex/sec:\n53 --- Average idle time: 0.00%\n\nWow! I expected to at least begin to see the effects of the tighter\nrestriction. But nothing changed! Ok, lets reject all incoming requests after\njust 2 unauthenticated sockets are opened (\u201c2:100:2\u201d):\n\nTCP SYNs/sec: 5322; Compl. conns/sec: 31; Bytes sent/sec: 1.4MB; DH kex/sec:\n31 --- Average idle time: 39.61%\n\nOk, we finally see an effect. But this is bad news: not only did we need to\nreduce the number of allowed pre-authentication connections down to an\nunreasonable size, but we were still able to eat 60% of the CPU regardless!\n\nContinuing down this path is all but pointless from a practical perspective,\nbut just for completeness, let\u2019s try the absolutely most restrictive setting\npossible (\u201c1:100:1\u201d):\n\nTCP SYNs/sec: 7262; Compl. conns/sec: 0; Bytes sent/sec: 1.9MB; DH kex/sec: 0\n--- Average idle time: 87.90%\n\nNow its official: the MaxStartups setting cannot be reasonably used to prevent\na denial-of-service condition. When the extreme \u201c1:100:1\u201d setting is used, the\nDHEat attack is prevented, but another trivial DoS attack becomes possible: an\nattacker can simply open one (1) connection with the server and leave it idle\nto prevent ALL new logins. Proof-of-concept:\n\n$ telnet target-host 22 # Attacker creates one connection, then lets it idle.\nTrying 1.2.3.4... Connected to 1.2.3.4. Escape character is '^]'.\nSSH-2.0-OpenSSH_8.7\n\n$ telnet target-host 22 # A new legitimate connection is attempted... Trying\n1.2.3.4... Connected to 1.2.3.4. Escape character is '^]'. Exceeded\nMaxStartups Connection closed by foreign host.\n\nThere is, however, one last configuration change we can try with OpenSSH: the\nPerSourceMaxStartups setting. This option was added in OpenSSH v8.5 (released\nin March 2021)[5], and further restricts pre-authentication connections coming\nfrom a particular source (vs. MaxStartups, which defines a global limit).\n\nLet\u2019s reset MaxStartups to the default, then set PerSourceMaxStartups to 2.\nThis would allow up to 2 pre-authentication connections at a time from any one\nsource IP:\n\nTCP SYNs/sec: 1841; Compl. conns/sec: 41; Bytes sent/sec: 498.2KB; DH kex/sec:\n41 --- Average idle time: 46.22%\n\nWell, that\u2019s a partial fix. We\u2019re still able to consume more than 50% of the\nvCPUs, though.\n\nLastly, let\u2019s see what happens when we set PerSourceMaxStartups to 1:\n\nTCP SYNs/sec: 2469; Compl. conns/sec: 0; Bytes sent/sec: 668.0KB; DH kex/sec:\n0 --- Average idle time: 96.05%\n\nThat\u2019s a great result! The only down side here would be in some use cases that\ninvolve a burst of new connections from a single source; some of those\nconnections would be improperly rejected. In fact, performing a standard audit\nwith ssh-audit results in failures in the group key exchange enumeration\nphase, yielding incomplete findings.\n\n### DHEat Countermeasures: TCP Connection Throttling\n\nAnother viable countermeasure to the attack would be TCP connection throttling\nat the kernel level. The following Linux commands will restrict incoming SSH\nconnections to at most 10 connections every 10 seconds per IPv4/IPv6 source\naddress:\n\n# iptables -I INPUT -p tcp --dport 22 -m state --state NEW -m recent --set #\niptables -I INPUT -p tcp --dport 22 -m state --state NEW -m recent --update\n--seconds 10 --hitcount 10 -j DROP\n\n# ip6tables -I INPUT -p tcp --dport 22 -m state --state NEW -m recent --set #\nip6tables -I INPUT -p tcp --dport 22 -m state --state NEW -m recent --update\n--seconds 10 --hitcount 10 -j DROP\n\nThis can very effectively neutralize the attack, while still allowing bursts\nof legitimate connections. Observe the result on an m7i.large instance with\nthis rate limiting in place:\n\n$ ssh-audit --dheat=4:diffie-hellman-group18-sha512:4 [public IPv4 address]\nTCP SYNs/sec: 51; Compl. conns/sec: 0; Bytes sent/sec: 60 bytes; DH kex/sec: 0\n--- Average idle time: 98.96%\n\nSuccess!\n\n### Conclusion\n\nThe DHEat attack remains viable against most SSH installations, as default\nsettings are inadequate at deflecting it. Very little bandwidth is needed to\ncause a dramatic effect on targets, including those with a high degree of\nresources. Hence, SSH services should be blocked from external access whenever\npossible. Furthermore, connection rate limiting should always be applied\nregardless of network segmentation, as per the central principles of Zero\nTrust.\n\nThere are two options for implementing this rate limiting:\n\n  * Setting the OpenSSH PerSourceMaxStartups directive to 1 will provide full protection, but may result in some client failures if a burst of new connections is made (this has been observed to happen when conducting a standard audit with ssh-audit).\n  * Using iptables/ip6tables at the kernel-level also provides full protection, while still being flexible enough to allow bursts of new connections.\n\n### Further Reading\n\nComprehensive guides for hardening SSH on common platforms can be found at:\nhttps://ssh-audit.com/hardening_guides.html.\n\nAn IEEE paper thoroughly detailing the DHEat attack by Szil\u00e1rd Pfeiffer and\nNorbert Tihanyican in 2023 can be found at:\nhttps://ieeexplore.ieee.org/document/10374117.\n\nA dedicated project page tracking the evolving landscape of this vulnerability\nis maintained by Szil\u00e1rd Pfeiffer at: https://dheatattack.gitlab.io/.\n\n### References\n\n[1] Raymond, Jean-Francois and Stiglic, Anton, \u201cSecurity Issues in the Diffie-\nHellman Key Agreement Protocol\u201d, IEEE Transactions on Information Theory 22,\npg. 12, 2002,\n<https://www.researchgate.net/publication/2401745_Security_Issues_in_the_Diffie-\nHellman_Key_Agreement_Protocol>. [2] https://gitlab.com/dheatattack/dheater\n[3]\nhttps://www.reddit.com/r/netsec/comments/qdoosy/server_overload_by_enforcing_dhe_key_exchange/\n[4] https://www.openssh.com/txt/release-9.0 [5]\nhttps://www.openssh.com/txt/release-8.5\n\n### Blog Archives\n\n  1. SSH Policy Configuration Checks With ssh-audit\n\ninquiries@positronsecurity.com | +1-585-643-5900\n\nCopyright \u00a92008 - 2024 Positron Security LLC\n\n", "frontpage": false}
