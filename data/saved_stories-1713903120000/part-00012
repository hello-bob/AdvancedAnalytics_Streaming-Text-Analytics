{"aid": "40131193", "title": "Adding ESLint and Auto-Fixing an Existing TypeScript Project", "url": "https://code.dblock.org/2024/04/23/adding-eslint-and-autofixing-an-existing-typescript-project.html", "domain": "dblock.org", "votes": 2, "user": "unripe_syntax", "posted_at": "2024-04-23 12:32:29", "comments": 0, "source_title": "Adding eslint and Auto-Fixing an Existing TypeScript Project", "source_text": "Adding eslint and Auto-Fixing an Existing TypeScript Project \u2013 code.dblock.org | tech blog\n\n### Daniel Doubrovkine\n\naka dB., @awscloud, former CTO @artsy, +@vestris, NYC\n\nEmail Twitter LinkedIn Github Strava\n\nSuggest a Topic\n\nRSS\n\n#\n\nAdding eslint and Auto-Fixing an Existing TypeScript Project\n\nopensearch | javascript\n\nIn opensearch-api-specification#260 I added eslint, but had a hard time\nfinding a cookbook for auto-fixing specific violations. Here it is.\n\nFirst, I followed the getting started with eslint guide, which essentially\ntells you to run npm init @eslint/config@latest.\n\nRewrite eslint.config.mjs using the newer flat configuration format, making\nsure that the ignores and rules section appears last, as it will overwrite the\ndefaults. For my TypeScript project, see the complete file here.\n\n    \n    \n    export default [ pluginJs.configs.recommended, ...compat.extends('standard-with-typescript'), { files: ['**/*.{js,ts}'], ignores: [ ... ], rules: { ... } } ]\n\nAdd the linter to scripts.\n\n    \n    \n    \"scripts\": { \"lint\": \"eslint .\", }\n\nRun the linter with npm run lint. My first run resulted in a lot of\nviolations. I exctracted the list of them with jq and pasted it into rules.\n\n    \n    \n    $ npm run --silent lint -- --format json | jq '.[].messages[] | select(.line != null) .ruleId' | sort | uniq\n    \n    \n    export default [ pluginJs.configs.recommended, ...compat.extends('standard-with-typescript'), { rules: { '@typescript-eslint/consistent-indexed-object-style': 'warn', '@typescript-eslint/consistent-type-assertions': 'warn', '@typescript-eslint/dot-notation': 'warn', ... } } ]\n\nNow, npm run lint will execute successfully showing warnings only.\n\n    \n    \n    ../tools/test/linter/factories/schema_file.ts 4:17 warning Function name `schema_file` must match one of the following formats: camelCase, PascalCase, UPPER_CASE @typescript-eslint/naming-convention 10:32 warning void is not valid as a constituent in a union type @typescript-eslint/no-invalid-void-type\n\nTo auto-fix, first disable all rules with off and enable the one you want to\nauto-fix with error.\n\n    \n    \n    export default [ pluginJs.configs.recommended, ...compat.extends('standard-with-typescript'), { rules: { '@typescript-eslint/consistent-indexed-object-style': 'off', '@typescript-eslint/consistent-type-assertions\": 'off', '@typescript-eslint/dot-notation\": 'error', } } ]\n\nNow run npm run lint -- --fix. Not all rules have an autofixer, but if yours\ndoes it will make the code changes, and you can now remove if rom the config\nand finally turn back all other rules to warn.\n\nHere\u2019s my second pull request that fixed most self-correcting violations.\n\nA word of caution, beware of --fix. In the project above the dot-notation\nautofix made a destructive change that caused tests to fail (and that I have\nyet to debug).\n\n### Daniel Doubrovkine\n\naka dB., @awscloud, former CTO @artsy, +@vestris, NYC\n\nEmail Twitter LinkedIn Github Strava\n\nAdding eslint and Auto-Fixing an Existing TypeScript Project was published on\nApril 23, 2024. See a typo?\n\n  * Like\n  * Tweet\n\n\u00a9 1994-2024 Daniel Doubrovkine. Powered by Jekyll based on the Minimal\nMistakes theme.\n\n", "frontpage": false}
