{"aid": "40083235", "title": "Ninja Code", "url": "https://javascript.info/ninja-code", "domain": "javascript.info", "votes": 1, "user": "jerrygoyal", "posted_at": "2024-04-19 03:38:52", "comments": 0, "source_title": "Ninja code", "source_text": "Ninja code\n\n  * AR\u0639\u0631\u0628\u064a\n  * ENEnglish\n  * ESEspa\u00f1ol\n  * FA\u0641\u0627\u0631\u0633\u06cc\n  * FRFran\u00e7ais\n  * IDIndonesia\n\n  * ITItaliano\n  * JA\u65e5\u672c\u8a9e\n  * KO\ud55c\uad6d\uc5b4\n  * RU\u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * TRT\u00fcrk\u00e7e\n  * UK\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n\n  * ZH\u7b80\u4f53\u4e2d\u6587\n\nWe want to make this open-source project available for people all around the\nworld.\n\nHelp to translate the content of this tutorial to your language!\n\nBuyEPUB/PDF\n\nTutorial map\n\nShare\n\n  1. Tutorial\n  2. The JavaScript language\n  3. Code quality\n\nSeptember 5, 2020\n\n# Ninja code\n\n> Learning without thought is labor lost; thought without learning is\n> perilous.\n>\n> Confucius (Analects)\n\nProgrammer ninjas of the past used these tricks to sharpen the mind of code\nmaintainers.\n\nCode review gurus look for them in test tasks.\n\nNovice developers sometimes use them even better than programmer ninjas.\n\nRead them carefully and find out who you are \u2013 a ninja, a novice, or maybe a\ncode reviewer?\n\nIrony detected\n\nMany try to follow ninja paths. Few succeed.\n\n## Brevity is the soul of wit\n\nMake the code as short as possible. Show how smart you are.\n\nLet subtle language features guide you.\n\nFor instance, take a look at this ternary operator '?':\n\n    \n    \n    // taken from a well-known javascript library i = i ? i < 0 ? Math.max(0, len + i) : i : 0;\n\nCool, right? If you write like that, a developer who comes across this line\nand tries to understand what is the value of i is going to have a merry time.\nThen come to you, seeking for an answer.\n\nTell them that shorter is always better. Initiate them into the paths of\nninja.\n\n## One-letter variables\n\n> The Dao hides in wordlessness. Only the Dao is well begun and well\n> completed.\n>\n> Laozi (Tao Te Ching)\n\nAnother way to code shorter is to use single-letter variable names everywhere.\nLike a, b or c.\n\nA short variable disappears in the code like a real ninja in the forest. No\none will be able to find it using \u201csearch\u201d of the editor. And even if someone\ndoes, they won\u2019t be able to \u201cdecipher\u201d what the name a or b means.\n\n...But there\u2019s an exception. A real ninja will never use i as the counter in a\n\"for\" loop. Anywhere, but not here. Look around, there are many more exotic\nletters. For instance, x or y.\n\nAn exotic variable as a loop counter is especially cool if the loop body takes\n1-2 pages (make it longer if you can). Then if someone looks deep inside the\nloop, they won\u2019t be able to quickly figure out that the variable named x is\nthe loop counter.\n\n## Use abbreviations\n\nIf the team rules forbid the use of one-letter and vague names \u2013 shorten them,\nmake abbreviations.\n\nLike this:\n\n  * list \u2192 lst.\n  * userAgent \u2192 ua.\n  * browser \u2192 brsr.\n  * ...etc\n\nOnly the one with truly good intuition will be able to understand such names.\nTry to shorten everything. Only a worthy person should be able to uphold the\ndevelopment of your code.\n\n## Soar high. Be abstract.\n\n> The great square is cornerless The great vessel is last complete, The great\n> note is rarified sound, The great image has no form.\n>\n> Laozi (Tao Te Ching)\n\nWhile choosing a name try to use the most abstract word. Like obj, data,\nvalue, item, elem and so on.\n\n  * The ideal name for a variable is data. Use it everywhere you can. Indeed, every variable holds data, right?\n\n...But what to do if data is already taken? Try value, it\u2019s also universal.\nAfter all, a variable eventually gets a value.\n\n  * Name a variable by its type: str, num...\n\nGive them a try. A young initiate may wonder \u2013 are such names really useful\nfor a ninja? Indeed, they are!\n\nSure, the variable name still means something. It says what\u2019s inside the\nvariable: a string, a number or something else. But when an outsider tries to\nunderstand the code, they\u2019ll be surprised to see that there\u2019s actually no\ninformation at all! And will ultimately fail to alter your well-thought code.\n\nThe value type is easy to find out by debugging. But what\u2019s the meaning of the\nvariable? Which string/number does it store?\n\nThere\u2019s just no way to figure out without a good meditation!\n\n  * ...But what if there are no more such names? Just add a number: data1, item2, elem5...\n\n## Attention test\n\nOnly a truly attentive programmer should be able to understand your code. But\nhow to check that?\n\nOne of the ways \u2013 use similar variable names, like date and data.\n\nMix them where you can.\n\nA quick read of such code becomes impossible. And when there\u2019s a typo...\nUmmm... We\u2019re stuck for long, time to drink tea.\n\n## Smart synonyms\n\n> The Tao that can be told is not the eternal Tao. The name that can be named\n> is not the eternal name.\n>\n> Laozi (Tao Te Ching)\n\nUsing similar names for same things makes life more interesting and shows your\ncreativity to the public.\n\nFor instance, consider function prefixes. If a function shows a message on the\nscreen \u2013 start it with display..., like displayMessage. And then if another\nfunction shows on the screen something else, like a user name, start it with\nshow... (like showName).\n\nInsinuate that there\u2019s a subtle difference between such functions, while there\nis none.\n\nMake a pact with fellow ninjas of the team: if John starts \u201cshowing\u201d functions\nwith display... in his code, then Peter could use render.., and Ann \u2013\npaint.... Note how much more interesting and diverse the code became.\n\n...And now the hat trick!\n\nFor two functions with important differences \u2013 use the same prefix!\n\nFor instance, the function printPage(page) will use a printer. And the\nfunction printText(text) will put the text on-screen. Let an unfamiliar reader\nthink well over similarly named function printMessage: \u201cWhere does it put the\nmessage? To a printer or on the screen?\u201d. To make it really shine,\nprintMessage(message) should output it in the new window!\n\n## Reuse names\n\n> Once the whole is divided, the parts need names. There are already enough\n> names. One must know when to stop.\n>\n> Laozi (Tao Te Ching)\n\nAdd a new variable only when absolutely necessary.\n\nInstead, reuse existing names. Just write new values into them.\n\nIn a function try to use only variables passed as parameters.\n\nThat would make it really hard to identify what\u2019s exactly in the variable now.\nAnd also where it comes from. The purpose is to develop the intuition and\nmemory of a person reading the code. A person with weak intuition would have\nto analyze the code line-by-line and track the changes through every code\nbranch.\n\nAn advanced variant of the approach is to covertly (!) replace the value with\nsomething alike in the middle of a loop or a function.\n\nFor instance:\n\n    \n    \n    function ninjaFunction(elem) { // 20 lines of code working with elem elem = clone(elem); // 20 more lines, now working with the clone of the elem! }\n\nA fellow programmer who wants to work with elem in the second half of the\nfunction will be surprised... Only during the debugging, after examining the\ncode they will find out that they\u2019re working with a clone!\n\nSeen in code regularly. Deadly effective even against an experienced ninja.\n\n## Underscores for fun\n\nPut underscores _ and __ before variable names. Like _name or __value. It\nwould be great if only you knew their meaning. Or, better, add them just for\nfun, without particular meaning at all. Or different meanings in different\nplaces.\n\nYou kill two rabbits with one shot. First, the code becomes longer and less\nreadable, and the second, a fellow developer may spend a long time trying to\nfigure out what the underscores mean.\n\nA smart ninja puts underscores at one spot of code and evades them at other\nplaces. That makes the code even more fragile and increases the probability of\nfuture errors.\n\n## Show your love\n\nLet everyone see how magnificent your entities are! Names like superElement,\nmegaFrame and niceItem will definitely enlighten a reader.\n\nIndeed, from one hand, something is written: super.., mega.., nice.. But from\nthe other hand \u2013 that brings no details. A reader may decide to look for a\nhidden meaning and meditate for an hour or two of their paid working time.\n\n## Overlap outer variables\n\n> When in the light, can\u2019t see anything in the darkness. When in the darkness,\n> can see everything in the light.\n>\n> Guan Yin Zi\n\nUse same names for variables inside and outside a function. As simple. No\nefforts to invent new names.\n\n    \n    \n    let user = authenticateUser(); function render() { let user = anotherValue(); ... ...many lines... ... ... // <-- a programmer wants to work with user here and... ... }\n\nA programmer who jumps inside the render will probably fail to notice that\nthere\u2019s a local user shadowing the outer one.\n\nThen they\u2019ll try to work with user assuming that it\u2019s the external variable,\nthe result of authenticateUser()... The trap is sprung! Hello, debugger...\n\n## Side-effects everywhere!\n\nThere are functions that look like they don\u2019t change anything. Like isReady(),\ncheckPermission(), findTags()... They are assumed to carry out calculations,\nfind and return the data, without changing anything outside of them. In other\nwords, without \u201cside-effects\u201d.\n\nA really beautiful trick is to add a \u201cuseful\u201d action to them, besides the main\ntask.\n\nAn expression of dazed surprise on the face of your colleague when they see a\nfunction named is.., check.. or find... changing something \u2013 will definitely\nbroaden your boundaries of reason.\n\nAnother way to surprise is to return a non-standard result.\n\nShow your original thinking! Let the call of checkPermission return not\ntrue/false, but a complex object with the results of the check.\n\nThose developers who try to write if (checkPermission(..)), will wonder why it\ndoesn\u2019t work. Tell them: \u201cRead the docs!\u201d. And give this article.\n\n## Powerful functions!\n\n> The great Tao flows everywhere, both to the left and to the right.\n>\n> Laozi (Tao Te Ching)\n\nDon\u2019t limit the function by what\u2019s written in its name. Be broader.\n\nFor instance, a function validateEmail(email) could (besides checking the\nemail for correctness) show an error message and ask to re-enter the email.\n\nAdditional actions should not be obvious from the function name. A true ninja\ncoder will make them not obvious from the code as well.\n\nJoining several actions into one protects your code from reuse.\n\nImagine, another developer wants only to check the email, and not output any\nmessage. Your function validateEmail(email) that does both will not suit them.\nSo they won\u2019t break your meditation by asking anything about it.\n\n## Summary\n\nAll \u201cpieces of advice\u201d above are from the real code... Sometimes, written by\nexperienced developers. Maybe even more experienced than you are ;)\n\n  * Follow some of them, and your code will become full of surprises.\n  * Follow many of them, and your code will become truly yours, no one would want to change it.\n  * Follow all, and your code will become a valuable lesson for young developers looking for enlightenment.\n\nCtrl + \u2190Previous lessonCtrl + \u2192Next lesson\n\nShare\n\nTutorial map\n\n## Comments\n\nread this before commenting...\n\n  * If you have suggestions what to improve - please submit a GitHub issue or a pull request instead of commenting.\n  * If you can't understand something in the article \u2013 please elaborate.\n  * To insert few words of code, use the <code> tag, for several lines \u2013 wrap them in <pre> tag, for more than 10 lines \u2013 use a sandbox (plnkr, jsbin, codepen...)\n\n#### Chapter\n\n#### Lesson navigation\n\nShare\n\nEdit on GitHub\n\n  * \u00a9 2007\u20142024 Ilya Kantor\n  * about the project\n  * contact us\n  * terms of usage\n  * privacy policy\n\n", "frontpage": false}
