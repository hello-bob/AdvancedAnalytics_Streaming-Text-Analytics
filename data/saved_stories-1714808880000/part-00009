{"aid": "40253834", "title": "Custom OAuth Scopes, Third-Party Applications, and FusionAuth", "url": "https://fusionauth.io/blog/custom-scopes-in-third-party-applications", "domain": "fusionauth.io", "votes": 1, "user": "mooreds", "posted_at": "2024-05-04 00:33:23", "comments": 0, "source_title": "Custom Oauth Scopes, Third-Party Applications, And FusionAuth", "source_text": "Custom Oauth Scopes, Third-Party Applications, And FusionAuth\n\n/ Blog\n\nLog In\n\n## Results\n\n  * If you search it, they will come.\n\n## Recent\n\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n  * Item 1\n\n  * Tutorial\n\n# Custom Oauth Scopes, Third-Party Applications, And FusionAuth\n\nHow to use custom OAuth scopes in a third-party application with FusionAuth.\n\nAuthors\n\nMark Robustelli\n\nPublished: May 3, 2024\n\nWhat are third-party applications and custom scopes? How would I implement\nOAuth scopes using FusionAuth?\n\nIn today\u2019s API-driven world, it\u2019s common to open up your application\u2019s APIs to\nothers, including those created by external parties. These applications that\nconsume your APIs are known as third-party applications.\n\nSecuring API calls to your application is crucial. This is where scopes come\ninto play. Similar to user roles, custom scopes can be created for\napplications, ensuring your APIs are only accessed by authorized parties.\n\n## The Setup\n\nFor the purposes of this blog, you will be reading about a fictional up-and-\ncoming application named Budget Buddy and the APIs created for Change Bank.\nChange Bank is the fictional company used in many FusionAuth quickstarts. It\nis important to note that Change Bank uses FusionAuth as its identity provider\nand Budget Buddy uses a separate system.\n\nChange Bank has existing APIs for their application. They provide methods for\nmaking change and alerting the authorities of an incident should it occur. The\nowner of the up-and-coming Budget Buddy application has reached out to the\nowner of Change Bank. He has asked if it would be possible to integrate with\nChange Bank by allowing Budget Buddy users to see their Change Bank balance in\nthe Budget Buddy application. They agreed and now Budget Buddy has become a\nthird-party application for Change Bank.\n\nHow is this implemented?\n\nnote\n\nPlease note that the custom scope feature is only available in an Essentials\nor Enterprise plan. You can visit the pricing page to learn more.\n\n## FusionAuth Setup For Third-Party Application\n\nChange Bank is lucky because they use FusionAuth and it supports custom scopes\nas of version 1.50.0.\n\nThe first thing they will need to do is create the Budget Buddy application in\ntheir FusionAuth instance. Notice that the Budget Buddy Client Id starts with\n4581 and the Change Bank Client Id starts with e9fd. Change Bank will need to\nprovide the Budget Buddy organization with the Client Id that begins with\n4581, the Client Secret for the Budget Buddy application, and the Change Bank\nlogin URL.\n\nThen, they will need to configure the application as a third-party application\nby updating the Scopes settings for the application. They should set the\nRelationship to Third-party. The application is external to the authorization\nserver.\n\nNext, they will need to add the custom scope for the Budget Buddy application.\nIn this case, the custom scope balance:read has been created. This will be the\nscope that the Change Bank API will look for when determining if the\napplication can retrieve the balance.\n\n## Updating Change Bank API\n\nNow all that is left is to create the `get-balance\u2019 endpoint for the API. To\naccomplish this, a new controller (along with a bit of internal plumbing) is\nadded to the API project.\n\nnote\n\nThe APIs use the rack-jwt Gem to help with parsing and validation of the token\nthat will be sent with the API request. The \u2018internal plumbing\u2019 of the API is\nbeyond the scope (no pun intended) of this blog. For more details, please see\nthe FusionAuth API Quickstart for Ruby on Rails.\n\nThe important part of the code in the controller is that it checks for the\ncorrect Budget Buddy Client Id and checks for the scope balance:read. If those\nvalues are confirmed, then a balance is returned. If this were a real\napplication, it would also retrieve the change_bank_user_id and look up the\nactual balance for the user.\n\n    \n    \n    class GetBalanceController < ApplicationController def index jwt_payload = request.env['jwt.payload'] aud = jwt_payload[\"aud\"] scope_string = jwt_payload[\"scope\"] scopes = scope_string.split(\" \") change_bank_user_id = jwt_payload[\"sub\"] balance = nil success = false message = nil # Could use introspection against FusionAuth server to further validate token if !jwt_payload.blank? if (aud == ENV['BUDGET_BUDDY_CLIENT_ID']) if scopes.include?('balance:read') # This is where you would use the change_bank_user_id to look up their balance balance = \"$100.32\" success = true else message = \"You do not have the correct balance:read scope.\" end end else message = \"Token was empty, authorization failed.\" end output = { balance: balance, jwt: jwt_payload, aud: aud, change_bank_user_id: change_bank_user_id, scopes: scope_string, success: success, message: message } render json: output.to_json, status: :ok end end\n\n## Budget Buddy Integration\n\nTo make this example simple and demonstrate that the Budget Buddy application\nuses a completely separate identity provider, the login has been set up to\naccept any email.\n\nOnce logged in, the user can choose to see their balance. Notice they will\nfirst need to connect to Change Bank to allow this.\n\nWhen the user clicks connect, they will be prompted for a Change Bank login.\nHere they must enter their username and password for the Change Bank\napplication.\n\nnote\n\nBehind the scenes, Budget Buddy uses OmniAuth to help with the OAuth login\nflow for Change Bank. Again, this is beyond the scope of this blog. For\nfurther details please see the FusionAuth Custom Scopes Example Application.\n\nAfter the user logs in, they will be presented with consent options. This\nallows the user to choose what Change Bank information and actions the Budget\nBuddy application has access to. In this case, the Allow Budget Buddy to read\nyour Change Bank balance consent grants the balance:read scope.\n\nWhen the user allows the consent, Budget Buddy can read the user\u2019s Change Bank\nbalance.\n\nFrom here the user can choose to disconnect Change Bank from the Budget Buddy\napplication or leave it connected. As long as Budget Buddy has a valid\nauthorization token it will be allowed to read the user\u2019s balance from the\nChange Bank APIs.\n\n## Conclusion\n\nIt can be confusing with the screenshots all showing the local host due to the\nway Safari renders the URL. In the example application, there are two\napplications (Change Bank API / Budget Buddy Web App) and FusionAuth is the\nIdP for the Change Bank applications. In a real-world example, Change Bank\nwould likely also have a web application. A diagram of what that may look like\nwould be as follows:\n\nIt should be clear that Budget Buddy is its own application with its own\nidentity provider. In the case that it requests the user\u2019s Change Bank\nbalance, the Change Bank login flow would be initiated against the Change Bank\nIdP. The user would then log in and grant Budget Buddy the necessary consent\nto retrieve the balance.\n\nIn the future, should Budget Buddy want to integrate further with Change Bank,\nthe same process could be followed. Let\u2019s say at some point Budget Buddy would\nlike to allow their users to transfer money from their Change Bank account to\nanother account. Change Bank would have to create an additional scope on the\nBudget Buddy application like balance:transfer and implement the endpoint\nchecking for that scope. Budget Buddy would have to request this scope and the\nuser would have to grant consent. Then Budget Buddy could transfer money from\nthe user\u2019s account.\n\nFor a full working example and all the code for this blog, please see the\nFusionAuth Custom Scopes example application.\n\nTags:\n\n  * scopes\n\n,\n\n  * oauth\n\n## The FusionAuth Newsletter\n\nGet the best of FusionAuth. Once a month. Directly to your inbox.\n\n## Related Posts\n\n* Tutorial\n\n### Best Practices for OAuth in Mobile Apps\n\nLearn mobile app development & OAuth practices with Fusionauth. Improve user\nlogin experience, speed up development, and secure APIs for your\napplications....\n\nAlex Patterson\n\n* Tutorial\n\n### Deploying FusionAuth on Fly.io\n\nIn this tutorial, you will install FusionAuth on Fly.io using the flyctl CLI.\nYou will run FusionAuth locally and on Fly.io while accessing a Postgres\ndatabase...\n\nAlex Patterson\n\n* Tutorial\n\n### Deploying FusionAuth on DigitalOcean using the One-Click Installer\n\nIn this tutorial, you will install FusionAuth onto a Kubernetes cluster hosted\non DigitalOcean. You can install FusionAuth with one click from the\nDigitalOcean...\n\nDean Rodman\n\nBradley Van Aardt\n\n## Subscribe to The FusionAuth Newsletter\n\nA newsletter for developers covering techniques, technical guides, and the\nlatest product innovations coming from FusionAuth.\n\nJust dev stuff. No junk.\n\n#### Get Started\n\n  * download locally\n  * run in cloud\n  * quickstarts\n\n#### product\n\n  * features\n  * pricing\n\n#### developers\n\n  * SDKs\n  * API Docs\n  * Documentation\n  * release notes\n\n#### resources\n\n  * support forum\n  * slack community\n  * blog\n  * articles\n\n\u00a9 2024 FusionAuth. All Rights Reserved. License \u2022 License FAQ \u2022 Privacy \u2022\nProduct Privacy Policy \u2022 Cookie Policy\n\n", "frontpage": false}
