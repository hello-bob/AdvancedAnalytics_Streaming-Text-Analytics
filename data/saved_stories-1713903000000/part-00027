{"aid": "40130924", "title": "New Foundations is consistent \u2013 a difficult mathematical proof proved using Lean", "url": "https://leanprover-community.github.io/con-nf//", "domain": "leanprover-community.github.io", "votes": 15, "user": "namanyayg", "posted_at": "2024-04-23 12:01:03", "comments": 2, "source_title": "New Foundations is consistent", "source_text": "New Foundations is consistent | Consistency of New Foundations\n\nSkip to the content.\n\n# New Foundations is consistent\n\n## A digitisation of Randall Holmes' proof\n\nDocumentation View on GitHub Draft paper\n\n# New Foundations is consistent\n\nIn 1937, Quine proposed a set theory called \u201cNew Foundations\u201d, and since 2010,\nRandall Holmes has claimed to have a proof of its consistency. In this\nrepository, we use the interactive theorem prover Lean to verify the difficult\npart of his proof, thus proving that New Foundations is indeed consistent. The\nproof is now complete, and the theorem statements can be found in\nConNF/Model/Result.lean (source, docs).\n\nSee our website for more information, the documentation of our Lean code, and\nthe deformalisation paper that translates the Lean definitions into English.\n\nTo run our code locally, install elan, clone the repository, and run the\nfollowing command in a terminal in the repository\u2019s root directory.\n\n    \n    \n    lake exe cache get\n\nThe code can then be viewed in an editor such as Visual Studio Code, or\ncompiled directly from the command-line using lake build.\n\n## Objective\n\nIt is known that New Foundations is consistent if and only if a theory called\nTangled Type Theory (TTT) is consistent (see theorem 1 here). We have formally\nconstructed a model of TTT in Lean, thus proving (on paper) that New\nFoundations is consistent, or in short, Con(NF). We are working from various\nversions of the paper proof by Holmes:\n\n  * untangled.pdf;\n  * retangled.pdf;\n  * newnfdoc.pdf;\n  * maybedetangled.pdf,\n\nbut many alterations and additions have been made to make the proof compatible\nwith Lean\u2019s type theory.\n\nThis project depends on mathlib, the community mathematical library written in\nLean. This allows us to use familiar results about things like cardinals and\ngroups without having to prove them ourselves.\n\nEvery definition and theorem in mathlib and this project have been checked by\nLean\u2019s trusted kernel, which computationally verifies that the proofs we have\nconstructed are indeed correct. However, Lean cannot check that the statements\nof the definitions and theorems match their intended English equivalents, so\nwhen drawing conclusions from the code in this project, translation to and\nfrom English must be done with care.\n\n## Tangled type theory\n\nTTT is a many-sorted set theory with equality \u201c=\u201d and the membership relation\n\u201c\u2208\u201d. The sorts are indexed by a limit ordinal \u03bb, and elements of \u03bb are called\ntype indices. A formula \u201cx = y\u201d is well-formed if x and y have the same type,\nand a formula \u201cx \u2208 y\u201d is well-formed if x has any type less than y.\n\nOne of the axioms of tangled type theory is extensionality, which stipulates\nthat a set of type \u03b1 is uniquely determined by its elements of any type \u03b2 < \u03b1.\nThis is strange: for example, if two sets of type \u03b1 differ, they have\ndifferent type \u03b2 elements for every \u03b2 < \u03b1. This property makes it difficult to\nconstruct models of TTT.\n\n## Strategy\n\nOur construction of the model uses the following rough strategy.\n\n### Construction of the base type\n\nLet \u03bb be a limit ordinal, \u03ba > \u03bb be a regular ordinal, and \u03bc > \u03ba be a strong\nlimit cardinal with cofinality at least \u03ba. Sets of size less than \u03ba are called\nsmall.\n\nWe first construct an auxiliary type at level -1, called the base type, below\nall types that will eventually become part of the model. Elements of this type\nare called atoms (although they are not atoms in the ZFU or NFU sense, for\ninstance). There are \u03bc atoms, partitioned into litters of size \u03ba.\n\n### Constructing each type\n\nAt each type level \u03b1, we will produce a collection of model elements for our\nintended model of TTT, which we will sometimes call t-sets. We also produce a\ngroup of permutations, called allowable permutations, which act on the t-sets.\nThe membership relation is preserved under the action of allowable\npermutations. Each t-set is stipulated to have a support under the action of\nallowable permutations; this is a small set of objects called addresses, such\nthat whenever an allowable permutation fixes all elements of a support, it\nalso fixes the t-set.\n\nEach t-set at level \u03b1 will be given a preferred extension of some type \u03b2 < \u03b1,\nand we can recover from a t-set\u2019s elements which extension it prefers. The\nextensions of such a t-set in other lower types can be deduced from its\n\u03b2-extension. This allows us to satisfy TTT\u2019s extensionality axiom.\n\n### Controlling the size of each type\n\nEach type \u03b1 can only be constructed under the assumption that all types \u03b2 < \u03b1\nare of size exactly \u03bc (among other hypotheses). It is easy to prove that the\ncollection of t-sets at level \u03b1 has cardinality at least \u03bc, so we need to show\nthat there are at most \u03bc elements of this set. We do this by showing that\nthere are not that many fundamentally different descriptions of tangles under\nthe action of allowable permutations. This requires the freedom of action\ntheorem, which is a technical lemma that allows us to construct allowable\npermutations. The main result of this section is here.\n\n### Finishing the induction\n\nWe can then run the above process recursively to produce the types of tangles\nat all type levels \u03b1. This is an easy step to perform in set theory, but\nrequires a lot of work in type theory because of the interconnectedness of the\nvarious inductive hypotheses we need. We then check that our construction\nindeed produces a model of TTT by checking that it satisfies a finite\naxiomatisation of the theory. We have chosen to convert Hailperin\u2019s finite\naxiomatisation of NF\u2019s comprehension scheme into a finite axiomatisation of\nTTT, which we present in our results file. Note, however, that this choice is\narbitrary, and any other finite axiomatisation can be easily proven with the\ninfrastructure already in place.\n\n## Dependency graph\n\ncon-nf is maintained by a team of contributors from the University of\nCambridge. Visit the repository on GitHub for more information.\n\n", "frontpage": true}
