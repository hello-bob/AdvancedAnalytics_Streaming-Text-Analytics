{"aid": "40253480", "title": "rbspy: A Sampling CPU Profiler for Ruby", "url": "https://rbspy.github.io/", "domain": "rbspy.github.io", "votes": 1, "user": "shaicoleman", "posted_at": "2024-05-03 23:35:52", "comments": 0, "source_title": "Introduction - rbspy: A Sampling CPU Profiler for Ruby", "source_text": "Introduction - rbspy: A Sampling CPU Profiler for Ruby\n\n# rbspy: A Sampling CPU Profiler for Ruby\n\n# rbspy\n\nHave you ever wanted to know what functions your Ruby program is calling?\nrbspy can tell you!\n\nrbspy lets you profile Ruby processes that are already running. You give it a\nPID, and it starts profiling! It's a sampling profiler, which means it's low\noverhead and safe to run in production.\n\n## Quick start\n\nIf you're on macOS, install rbspy with Homebrew:\n\n    \n    \n    brew install rbspy\n\nIf you have a working Rust toolchain (1.56 or newer), you can install with\ncargo:\n\n    \n    \n    cargo install rbspy --locked\n\nOtherwise, check out the installing section to get rbspy running on your\ncomputer.\n\n## Profiling a Ruby program\n\nIf your program is already running, get its PID and profile it like this:\n\n    \n    \n    rbspy record --pid $PID\n\nYou can also use rbspy to profile a Ruby script, like this. It works both with\nand without bundle exec.\n\n    \n    \n    rbspy record -- bundle exec ruby my-script.rb\n\nHere's what running rbspy record on a Rubocop process looks like. You'll see a\nlive summary of what the top functions being run are, and it also saves the\nraw data + a flamegraph for more in depth analysis.\n\n", "frontpage": false}
