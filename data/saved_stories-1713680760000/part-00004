{"aid": "40101628", "title": "Rust Custom Target for QEMU RISC-V on Apache NuttX RTOS", "url": "https://lupyuen.codeberg.page/articles/rust4.html", "domain": "codeberg.page", "votes": 4, "user": "lupyuen", "posted_at": "2024-04-20 22:35:15", "comments": 0, "source_title": "Rust Custom Target for QEMU RISC-V on Apache NuttX RTOS", "source_text": "Rust Custom Target for QEMU RISC-V on Apache NuttX RTOS\n\n# Rust Custom Target for QEMU RISC-V on Apache NuttX RTOS\n\n\ud83d\udcdd 21 Apr 2024\n\nThanks to cool-retro-term!\n\nLast article we were compiling Rust Apps for Apache NuttX RTOS (QEMU Emulator,\nRISC-V 32-bit). And we hit a baffling error...\n\n    \n    \n    $ make riscv64-unknown-elf-ld: libapps.a hello_rust_1.o: can't link soft-float modules with double-float modules\n\nLet\u2019s solve the problem! We dive inside the internals of C-to-Rust Interop...\n\n  * Rust compiles for Soft-Float, NuttX expects Double-Float\n\n(Software vs Hardware Floating-Point)\n\n  * But Rust doesn\u2019t support Double-Float (by default)\n\n  * So we create a Rust Custom Target for Double-Float\n\n  * Rebuild the Rust Core Library for Double-Float\n\n  * And our Rust App builds OK with NuttX!\n\n# \u00a71 Software vs Hardware Floating-Point\n\nWhy did our NuttX Build fail? (Pic above)\n\n    \n    \n    ## Download the NuttX Source Code $ mkdir nuttx $ cd nuttx $ git clone https://github.com/apache/nuttx nuttx $ git clone https://github.com/apache/nuttx-apps apps ## Configure NuttX for QEMU RISC-V 32-bit $ cd nuttx $ tools/configure.sh rv-virt:nsh $ make menuconfig ## TODO: Enable \"Hello Rust Example\" ## Build NuttX bundled with the Rust App $ make riscv64-unknown-elf-ld: libapps.a hello_rust_1.o: can't link soft-float modules with double-float modules\n\n(See the Complete Steps)\n\nGCC Linker failed because it couldn\u2019t link the NuttX Binaries with the Rust\nBinaries.\n\nHere\u2019s Why: NuttX Build calls GCC Compiler to compile our C Modules...\n\n    \n    \n    ## Build NuttX Firmware with Tracing Enabled $ make --trace ... ## GCC compiles `hello_main.c` to `hello.o` ## for RISC-V 32-bit with Double-Float riscv64-unknown-elf-gcc \\ -march=rv32imafdc \\ -mabi=ilp32d \\ -c \\ hello_main.c \\ -o ...hello.o \\ ...\n\n(See the GCC Options)\n\nThen NuttX Build calls Rust Compiler to compile our Rust App...\n\n    \n    \n    ## Build NuttX Firmware with Tracing Enabled $ make --trace ... ## Rust Compiler compiles `hello_rust_main.rs` to `hello_rust.o` ## for RISC-V 32-bit with Soft-Float rustc \\ --target riscv32i-unknown-none-elf \\ --edition 2021 \\ --emit obj \\ -g \\ -C panic=abort \\ -O \\ hello_rust_main.rs \\ -o ...hello_rust.o\n\nWhich looks like this...\n\nIs there a problem?\n\nWatch closely as we compare GCC Compiler with Rust Compiler (pic above)...\n\nGCC Compiler| Rust Compiler  \n---|---  \nriscv64-unknown-elf-gcc hello_main.c| rustc hello_rust_main.rs  \n-march rv32imafdc| \u2013target riscv32i-unknown-none-elf  \n-mabi ilp32d  \n  \nHmmm the Floats look different...\n\nGCC compiles for (Double-Precision) Hardware Floating-Point...\n\nBut Rust Compiler emits Software Floating-Point.\n\nThat\u2019s why GCC Linker won\u2019t link the binaries: Hard-Float vs Soft-Float!\n\nGCC Compiler| Rust Compiler  \n---|---  \nrv32imafdc| riscv32i  \n\\- I: Integer| \\- I: Integer  \n\\- F: Single Hard-Float| (Default is Soft-Float)  \n\\- D: Double Hard-Float| (Default is Soft-Float)  \n  \nTo verify, we dump the ELF Header for GCC Compiler Output...\n\n    \n    \n    ## Dump the ELF Header for GCC Output $ riscv64-unknown-elf-readelf \\ --file-header --arch-specific \\ ../apps/examples/hello/*hello.o ## GCC Compiler Output is ## Double-Precision Hardware Floating-Point Flags: 0x5, RVC, double-float ABI\n\n(See the GCC ELF Header)\n\nAnd the ELF Header for Rust Compiler Output...\n\n    \n    \n    ## Dump the ELF Header for Rust Compiler Output $ riscv64-unknown-elf-readelf \\ --file-header --arch-specific \\ ../apps/examples/hello_rust/*hello_rust.o ## Rust Compiler Output is ## Software Floating-Point Flags: 0x0\n\n(See the Rust ELF Header)\n\nIndeed we have a problem: Double-Float and Soft-Float won\u2019t mix! Let\u2019s fix\nthis...\n\n# \u00a72 Rust Won\u2019t Double-Float\n\nWhat if we ask Rust Compiler to compile for Double-Float? RV32IMAFDC (Pic\nabove)\n\nLet\u2019s harmonise Rust Compiler with GCC Compiler...\n\n  * Our Build Target is QEMU Emulator\n\n  * Which offically supports riscv32gc\n\n  * \u201cgc\u201d in \u201criscv32gc\u201d denotes IMAFDC\n\nHence we could do this...\n\n    \n    \n    ## Compile `hello_rust_main.rs` to `hello_rust.o` ## for Double-Precision Hardware Floating-Point rustc \\ --target riscv32gc-unknown-none-elf \\ --edition 2021 \\ --emit obj \\ -g \\ -C panic=abort \\ -O \\ hello_rust_main.rs \\ -o hello_rust.o\n\nSorry nope it won\u2019t work...\n\n    \n    \n    Error loading target specification: Could not find specification for target \"riscv32gc-unknown-none-elf\". Run `rustc --print target-list` for a list of built-in targets\n\nThat\u2019s because riscv32gc isn\u2019t a Built-In Rust Target...\n\n    \n    \n    ## List the Built-In Rust Targets for RISC-V $ rustup target list | grep riscv ## Nope no riscv32gc! riscv32i-unknown-none-elf riscv32imac-unknown-none-elf riscv32imc-unknown-none-elf riscv64gc-unknown-linux-gnu riscv64gc-unknown-none-elf riscv64imac-unknown-none-elf\n\nBut we can create a Custom Rust Target for riscv32gc.\n\n(Coming up next section)\n\nWon\u2019t GCC Compiler have the same problem with Double-Float?\n\nWhen we list the Built-In GCC Targets...\n\n    \n    \n    ## List the Built-In Targets for GCC RISC-V. ## ABI means Application Binary Interface $ riscv64-unknown-elf-gcc --target-help Supported ABIs (for use with the -mabi= option): ilp32 ilp32d ilp32e ilp32f lp64 lp64d lp64f\n\nWe see that GCC supports Double-Float: ilp32d\n\n  * ilp32: 32-bit Int, Long and Pointer\n  * d: Double-Precision Hardware Floating-Point\n\nThat\u2019s why we saw ilp32d earlier...\n\n    \n    \n    ## GCC compiles for RISC-V 32-bit (Double-Float) riscv64-unknown-elf-gcc \\ -march=rv32imafdc \\ -mabi=ilp32d \\ ...\n\nWe\u2019ll make something similar for Rust Compiler...\n\n(More about Application Binary Interface)\n\n# \u00a73 Custom Target for Rust\n\nTo compile Rust for Double-Float, we need a Custom Target: riscv32gc\n\nHow to create the Custom Target?\n\nAccording to the Official Rust Docs, we shall...\n\n  * Copy from a Built-In Rust Target\n\n(Like riscv32i)\n\n  * Tweak it to fit our Custom Rust Target\n\n(Which becomes riscv32gc)\n\nThis is how we dump a Built-In Rust Target: riscv32i\n\n    \n    \n    ## Dump the Built-In Rust Target: ## riscv32i (32-bit RISC-V with Soft-Float) $ rustc \\ +nightly \\ -Z unstable-options \\ --print target-spec-json \\ --target riscv32i-unknown-none-elf { \"arch\": \"riscv32\", \"atomic-cas\": false, \"cpu\": \"generic-rv32\", \"data-layout\": \"e-m:e-p:32:32-i64:64-n32-S128\", \"eh-frame-header\": false, \"emit-debug-gdb-scripts\": false, \"is-builtin\": true, \"linker\": \"rust-lld\", \"linker-flavor\": \"ld.lld\", \"llvm-target\": \"riscv32\", \"max-atomic-width\": 0, \"panic-strategy\": \"abort\", \"relocation-model\": \"static\", \"target-pointer-width\": \"32\" }\n\nThat\u2019s the Rust Definition of riscv32i: 32-bit RISC-V with Soft-Float.\n\nWe do the same for riscv64gc: 64-bit RISC-V with Double-Float...\n\n    \n    \n    ## Dump the Built-In Rust Target: ## riscv64gc (64-bit RISC-V with Double-Float) $ rustc \\ +nightly \\ -Z unstable-options \\ --print target-spec-json \\ --target riscv64gc-unknown-none-elf { \"arch\": \"riscv64\", \"code-model\": \"medium\", \"cpu\": \"generic-rv64\", \"data-layout\": \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\", \"eh-frame-header\": false, \"emit-debug-gdb-scripts\": false, \"features\": \"+m,+a,+f,+d,+c\", \"is-builtin\": true, \"linker\": \"rust-lld\", \"linker-flavor\": \"ld.lld\", \"llvm-abiname\": \"lp64d\", \"llvm-target\": \"riscv64\", \"max-atomic-width\": 64, \"panic-strategy\": \"abort\", \"relocation-model\": \"static\", \"supported-sanitizers\": [ \"kernel-address\" ], \"target-pointer-width\": \"64\" }\n\nWhich has more goodies inside: features, llvm-abiname, ...\n\nWe\u2019re mashing the Two Targets into a New Target?\n\nExactly! Based on the above, we create our Rust Custom Target: riscv32gc-\nunknown-none-elf.json\n\n    \n    \n    { \"arch\": \"riscv32\", \"cpu\": \"generic-rv32\", \"data-layout\": \"e-m:e-p:32:32-i64:64-n32-S128\", \"eh-frame-header\": false, \"emit-debug-gdb-scripts\": false, \"features\": \"+m,+a,+f,+d,+c\", \"linker\": \"rust-lld\", \"linker-flavor\": \"ld.lld\", \"llvm-abiname\": \"ilp32d\", \"llvm-target\": \"riscv32\", \"max-atomic-width\": 0, \"panic-strategy\": \"abort\", \"relocation-model\": \"static\", \"target-pointer-width\": \"32\" }\n\nWhich is riscv32i plus these changes...\n\n  * Remove \u201cis-builtin\u201d: true\n\n(It\u2019s a Custom Target, not Built-In)\n\n  * Remove \u201catomic-cas\u201d: false\n\n(Enable Atomic Compare-And-Swap)\n\n  * Add \u201cfeatures\u201d: \u201c+m,+a,+f,+d,+c\u201d\n\n(Because we need IMAFDC)\n\n  * Add \u201cllvm-abiname\u201d: \u201cilp32d\u201d\n\n(ilp32d comes from make --trace)\n\n(More about llvm-abiname)\n\nIn Summary: We spliced Two Built-In Targets into Custom Target riscv32gc...\n\nriscv32i (Built-In)| riscv64gc (Built-In)| riscv32gc (Custom)  \n---|---|---  \narch| riscv32| riscv64| riscv32  \natomic-cas| false  \ncpu| generic-rv32| generic-rv64| generic-rv32  \ndata-layout| e-m:e-p:32...| e-m:e-p:64...| e-m:e-p:32...  \nfeatures| +m,+a,+f,+d,+c| +m,+a,+f,+d,+c  \nis-builtin| true| true  \nllvm-abiname| lp64d| ilp32d  \nllvm-target| riscv32| riscv64| riscv32  \nmax-atomic-width| 64| 0  \ntarget-pointer-width| 32| 64| 32  \n  \n# \u00a74 Build the Rust Core Library\n\nAre we ready to rebuild with Double-Float?\n\nNot quite, we\u2019re not done with the System Library...\n\n    \n    \n    ## Rust Compiler fails to compile with our Custom Target `riscv32gc` $ rustc \\ --target riscv32gc-unknown-none-elf.json \\ --edition 2021 \\ --emit obj \\ -g \\ -C panic=abort \\ -O \\ hello_rust_main.rs \\ -o hello_rust.o ## That's because Rust Core Library for `riscv32gc` is missing error[E0463]: can't find crate for `core`\n\nWhy? Remember...\n\n  * GCC Compiler supports Double-Float...\n\nBecause it\u2019s bundled with C Standard Library for Double-Float\n\n  * Thus Rust Compiler will support Double-Float...\n\nOnly when it has the Rust Core Library for Double-Float\n\nAnd the Rust Core Library comes from?\n\nWe call Rust Compiler to build the Rust Core Library for Double-Float\nriscv32gc...\n\n    \n    \n    ## Download our Custom Target for `riscv32gc` rm -f riscv32gc-unknown-none-elf.json wget https://raw.githubusercontent.com/lupyuen/nuttx-rust-app/main/riscv32gc-unknown-none-elf.json ## Verify our Custom Target, make sure it's OK rustc \\ --print cfg \\ --target riscv32gc-unknown-none-elf.json ## `cargo build` requires a Rust Project, so we create an empty one. ## If the Rust Project exists, erase the binaries. ## Ignore the error: `app already exists` cargo new app pushd app cargo clean ## Build the Rust Core Library for `riscv32gc` ## Include the `alloc` library, which will support Heap Memory in future. ## Ignore the error: `can't find crate for std` cargo build \\ -Zbuild-std=core,alloc \\ --target ../riscv32gc-unknown-none-elf.json popd\n\nRust Core Library for Double-Float riscv32gc is done!\n\n    \n    \n    ## Show the Rust Core Library for `riscv32gc` $ ls app/target/riscv32gc-unknown-none-elf/debug/deps alloc-254848389e7e2c53.d app-cf88b81a5fca23b3.d compiler_builtins-d5922d64507adf16.d core-ec2ec78e26b8c830.d liballoc-254848389e7e2c53.rlib liballoc-254848389e7e2c53.rmeta libcompiler_builtins-d5922d64507adf16.rlib libcompiler_builtins-d5922d64507adf16.rmeta libcore-ec2ec78e26b8c830.rlib libcore-ec2ec78e26b8c830.rmeta librustc_std_workspace_core-3cc5bcc9f701a6e7.rlib librustc_std_workspace_core-3cc5bcc9f701a6e7.rmeta rustc_std_workspace_core-3cc5bcc9f701a6e7.d\n\nNow we rebuild our Rust App with the Custom Target (linked to our Rust Core\nLibrary)...\n\n    \n    \n    ## Compile our Rust App with Rust Core Library for `riscv32gc` ## We changed the Target to `riscv32gc-unknown-none-elf.json` ## TODO: Change `../apps` to the NuttX Apps Folder rustc \\ --target riscv32gc-unknown-none-elf.json \\ --edition 2021 \\ --emit obj \\ -g \\ -C panic=abort \\ -O \\ ../apps/examples/hello_rust/hello_rust_main.rs \\ -o ../apps/examples/hello_rust/*hello_rust.o \\ \\ -C incremental=app/target/riscv32gc-unknown-none-elf/debug/incremental \\ -L dependency=app/target/riscv32gc-unknown-none-elf/debug/deps \\ -L dependency=app/target/debug/deps \\ --extern noprelude:alloc=`ls app/target/riscv32gc-unknown-none-elf/debug/deps/liballoc-*.rlib` \\ --extern noprelude:compiler_builtins=`ls app/target/riscv32gc-unknown-none-elf/debug/deps/libcompiler_builtins-*.rlib` \\ --extern noprelude:core=`ls app/target/riscv32gc-unknown-none-elf/debug/deps/libcore-*.rlib` \\ -Z unstable-options\n\n(We\u2019ll talk about the loooong options)\n\nAre we Double-Floating yet?\n\nYep we have a Yummy Double-Float with 2 scoops of ice cream...\n\n    \n    \n    ## Dump the ELF Header of our Compiled Rust App ## TODO: Change `../apps` to the NuttX Apps Folder $ riscv64-unknown-elf-readelf \\ --file-header --arch-specific \\ ../apps/examples/hello_rust/*hello_rust.o ## We have Double-Float `riscv32gc` yay! Flags: 0x5, RVC, double-float ABI\n\n(See the ELF Header)\n\nHow did we get the Rust Compiler Options?\n\nWe copied the above options from cargo build -v...\n\n  * \u201cRust Compiler Options\u201d\n\nrustc vs cargo build: What\u2019s the diff?\n\n  * rustc is the Rust Compiler that compiles Rust Programs to Rust Binaries\n\n(Works like GCC Compiler)\n\n  * cargo build wraps around rustc for Multi-Step Builds\n\n(Like for Rust Core Library)\n\nWe could have called rustc for building the Rust Core Library. But it will be\na bunch of steps with many many options.\n\n# \u00a75 NuttX Links OK with Rust\n\nWe compiled our Rust App with Double-Float riscv32gc...\n\nIs our NuttX Build hunky dory now?\n\nYep NuttX builds OK now! GCC Compiler and Rust Compiler are harmonised to\nDouble-Float...\n\n    \n    \n    ## Copy the Rust Binary that will be linked with NuttX ## TODO: Change `../apps` to the NuttX Apps Folder cp \\ ../apps/examples/hello_rust/*hello_rust.o \\ ../apps/examples/hello_rust/*hello_rust_1.o ## NuttX should link correctly now. ## TODO: Change `../nuttx` to the NuttX Kernel Folder pushd ../nuttx make popd\n\nWe boot NuttX in QEMU Emulator for 32-bit RISC-V...\n\n    \n    \n    ## For macOS: brew install qemu ## For Debian and Ubuntu: sudo apt install qemu-system-riscv32 ## Boot NuttX in QEMU RISC-V (32-bit) ## TODO: Change `../nuttx` to the NuttX Kernel Folder pushd ../nuttx qemu-system-riscv32 \\ -semihosting \\ -M virt,aclint=on \\ -cpu rv32 \\ -smp 8 \\ -bios none \\ -kernel nuttx \\ -nographic popd\n\nOur Rust App works wonderfully on NuttX! (Pic below)\n\n    \n    \n    NuttShell (NSH) NuttX-12.4.0-RC0 nsh> hello_rust Hello, Rust!! ## Exit QEMU: Press `Ctrl-A` then `x`\n\n(See the NuttX Log)\n\nPhew so much work to build a tiny Rust App?\n\nYeah. And integrating this into the NuttX Makefiles will be challenging.\n\n(How would Linux Kernel handle Custom Rust Targets?)\n\n(More about Hard-Float Targets in RISC-V)\n\n# \u00a76 Rust Build for 64-bit RISC-V\n\nFrom 32-bit to 64-bit: We tried compiling our Rust App for 64-bit RISC-V\nQEMU...\n\n    \n    \n    ## Build NuttX for QEMU RISC-V 64-bit $ tools/configure.sh rv-virt:nsh64 $ make menuconfig ## TODO: Enable \"Hello Rust Example\" $ make RUSTC: hello_rust_main.rs error: Error loading target specification: Could not find specification for target \"riscv64i-unknown-none-elf\". Run `rustc --print target-list` for a list of built-in targets\n\nBut Rust Compiler says that riscv64i isn\u2019t a valid Rust Target for 64-bit\nRISC-V.\n\nExercise for the Reader:\n\n  1. Is riscv64i the correct target for QEMU?\n\n(Hint: See this)\n\n[10 points]\n\n  2. How should we Fix the Build?\n\n[10 points]\n\n  3. Do we need a Custom Target?\n\n(Hint: Answer is printed in this article somewhere)\n\n[10 points]\n\n  4. Will it run on Ox64 BL808 SBC?\n\n[10 points]\n\n# \u00a77 What\u2019s Next\n\nToday we learnt a bit more about C-to-Rust Interop (pic above)...\n\n  * NuttX failed to link our Rust App because Rust compiles for Soft-Float, NuttX expects Double-Float\n\n(Software vs Hardware Floating-Point)\n\n  * But Rust doesn\u2019t support Double-Float\n\n(Built-In Target doesn\u2019t exist for 32-bit RISC-V)\n\n  * So we created a Rust Custom Target for Double-Float: RISCV32GC\n\n(By mashing up RISCV32I and RISCV64GC)\n\n  * We rebuilt the Rust Core Library for Double-Float\n\n(With cargo build)\n\n  * And our Rust App builds OK with NuttX\n\n(Runs perfectly on QEMU Emulator for RISC-V)\n\nMany Thanks to my GitHub Sponsors (and the awesome NuttX Community) for\nsupporting my work! This article wouldn\u2019t have been possible without your\nsupport.\n\n  * Sponsor me a coffee\n\n  * Discuss this article on Hacker News\n\n  * My Current Project: \u201cApache NuttX RTOS for Ox64 BL808\u201d\n\n  * My Other Project: \u201cNuttX for Star64 JH7110\u201d\n\n  * Older Project: \u201cNuttX for PinePhone\u201d\n\n  * Check out my articles\n\n  * RSS Feed\n\nGot a question, comment or suggestion? Create an Issue or submit a Pull\nRequest here...\n\nlupyuen.github.io/src/rust4.md\n\n# \u00a78 Appendix: Rust Compiler Options\n\nHow did we get the Rust Compiler Options for riscv32gc?\n\nEarlier we compiled our Rust App with Rust Core Library for riscv32gc...\n\n  * \u201cBuild the Rust Core Library\u201d\n\nAnd we saw these Rust Compiler Options...\n\n    \n    \n    ## Compile our Rust App with Rust Core Library for `riscv32gc` ## We changed the Target to `riscv32gc-unknown-none-elf.json` ## TODO: Change `../apps` to the NuttX Apps Folder rustc \\ --target riscv32gc-unknown-none-elf.json \\ --edition 2021 \\ --emit obj \\ -g \\ -C panic=abort \\ -O \\ ../apps/examples/hello_rust/hello_rust_main.rs \\ -o ../apps/examples/hello_rust/*hello_rust.o \\ \\ -C incremental=app/target/riscv32gc-unknown-none-elf/debug/incremental \\ -L dependency=app/target/riscv32gc-unknown-none-elf/debug/deps \\ -L dependency=app/target/debug/deps \\ --extern noprelude:alloc=`ls app/target/riscv32gc-unknown-none-elf/debug/deps/liballoc-*.rlib` \\ --extern noprelude:compiler_builtins=`ls app/target/riscv32gc-unknown-none-elf/debug/deps/libcompiler_builtins-*.rlib` \\ --extern noprelude:core=`ls app/target/riscv32gc-unknown-none-elf/debug/deps/libcore-*.rlib` \\ -Z unstable-options\n\nThe above options were copied from cargo build -v, here\u2019s how...\n\nRemember we ran cargo build to compile the Rust Core Library?\n\n    \n    \n    ## Download our Custom Target for `riscv32gc` rm -f riscv32gc-unknown-none-elf.json wget https://raw.githubusercontent.com/lupyuen/nuttx-rust-app/main/riscv32gc-unknown-none-elf.json ## Verify our Custom Target, make sure it's OK rustc \\ --print cfg \\ --target riscv32gc-unknown-none-elf.json ## `cargo build` requires a Rust Project, so we create an empty one. ## If the Rust Project exists, erase the binaries. ## Ignore the error: `app already exists` cargo new app pushd app cargo clean ## Build the Rust Core Library for `riscv32gc` ## Include the `alloc` library, which will support Heap Memory in future. ## Ignore the error: `can't find crate for std` cargo build \\ -Zbuild-std=core,alloc \\ --target ../riscv32gc-unknown-none-elf.json popd\n\n  * cargo build will call rustc with a whole bunch of options.\n\n  * We switched it to cargo build -v, which will dump the rustc options.\n\n  * Hence we see the options that will compile a Rust App with our Rust Core Library for riscv32gc...\n\n(TODO: Will these options change in future versions of cargo?)\n\n    \n    \n    ## Build the Rust Core Library for `riscv32gc` ## And the Empty Rust Project for `riscv32gc` ## `-v` will dump the `rustc` options $ cargo build -v \\ -Zbuild-std=core,alloc \\ --target ../riscv32gc-unknown-none-elf.json Compiling compiler_builtins v0.1.101 Compiling core v0.0.0 ($HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/library/core) ## Generate the Rust Build Script for `riscv32gc` Running `$HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2018 $HOME/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.101/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=94 --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked --cfg 'feature=\"compiler-builtins\"' --cfg 'feature=\"core\"' --cfg 'feature=\"default\"' --cfg 'feature=\"rustc-dep-of-std\"' -C metadata=9bd0bac7535b33a8 -C extra-filename=-9bd0bac7535b33a8 --out-dir $HOME/riscv/nuttx-rust-app/app/target/debug/build/compiler_builtins-9bd0bac7535b33a8 -Z force-unstable-if-unmarked -L dependency=$HOME/riscv/nuttx-rust-app/app/target/debug/deps --cap-lints allow` ## Build the Rust Core Library for `riscv32gc` Running `$HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rustc --crate-name core --edition=2021 $HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=94 --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=d271c6ebb87f9b41 -C extra-filename=-d271c6ebb87f9b41 --out-dir $HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps --target $HOME/riscv/nuttx-rust-app/riscv32gc-unknown-none-elf.json -Z force-unstable-if-unmarked -L dependency=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps -L dependency=$HOME/riscv/nuttx-rust-app/app/target/debug/deps --cap-lints allow` Running `$HOME/riscv/nuttx-rust-app/app/target/debug/build/compiler_builtins-9bd0bac7535b33a8/build-script-build` Compiling rustc-std-workspace-core v1.99.0 ($HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/library/rustc-std-workspace-core) ## Build the Rust Workspace Core for `riscv32gc` Running `$HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rustc --crate-name rustc_std_workspace_core --edition=2021 $HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/library/rustc-std-workspace-core/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=94 --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=52e0df2b2cc19b6e -C extra-filename=-52e0df2b2cc19b6e --out-dir $HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps --target $HOME/riscv/nuttx-rust-app/riscv32gc-unknown-none-elf.json -Z force-unstable-if-unmarked -L dependency=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps -L dependency=$HOME/riscv/nuttx-rust-app/app/target/debug/deps --extern core=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps/libcore-d271c6ebb87f9b41.rmeta --cap-lints allow` ## Build the Rust Compiler Builtins for `riscv32gc` Running `$HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rustc --crate-name compiler_builtins --edition=2018 $HOME/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.101/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=94 --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"compiler-builtins\"' --cfg 'feature=\"core\"' --cfg 'feature=\"default\"' --cfg 'feature=\"rustc-dep-of-std\"' -C metadata=cd0d33c2bd30ca51 -C extra-filename=-cd0d33c2bd30ca51 --out-dir $HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps --target $HOME/riscv/nuttx-rust-app/riscv32gc-unknown-none-elf.json -Z force-unstable-if-unmarked -L dependency=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps -L dependency=$HOME/riscv/nuttx-rust-app/app/target/debug/deps --extern core=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps/librustc_std_workspace_core-52e0df2b2cc19b6e.rmeta --cap-lints allow --cfg 'feature=\"unstable\"' --cfg 'feature=\"mem\"'` Compiling alloc v0.0.0 ($HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc) ## Build the Rust Alloc Library for `riscv32gc` ## Which will support Heap Memory in future Running `$HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rustc --crate-name alloc --edition=2021 $HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=94 --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=5d7bc2e4f3c29e08 -C extra-filename=-5d7bc2e4f3c29e08 --out-dir $HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps --target $HOME/riscv/nuttx-rust-app/riscv32gc-unknown-none-elf.json -Z force-unstable-if-unmarked -L dependency=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps -L dependency=$HOME/riscv/nuttx-rust-app/app/target/debug/deps --extern compiler_builtins=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps/libcompiler_builtins-cd0d33c2bd30ca51.rmeta --extern core=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps/libcore-d271c6ebb87f9b41.rmeta --cap-lints allow` Compiling app v0.1.0 ($HOME/riscv/nuttx-rust-app/app) ## Compile our Empty Rust Project with Rust Core Library for `riscv32gc` ## These are the options that we copied into NuttX Build... Running `$HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rustc --crate-name app --edition=2021 src/main.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=94 --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C metadata=1ff442e6481e1397 -C extra-filename=-1ff442e6481e1397 --out-dir $HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps --target $HOME/riscv/nuttx-rust-app/riscv32gc-unknown-none-elf.json -C incremental=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/incremental -L dependency=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps -L dependency=$HOME/riscv/nuttx-rust-app/app/target/debug/deps --extern 'noprelude:alloc=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps/liballoc-5d7bc2e4f3c29e08.rlib' --extern 'noprelude:compiler_builtins=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps/libcompiler_builtins-cd0d33c2bd30ca51.rlib' --extern 'noprelude:core=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps/libcore-d271c6ebb87f9b41.rlib' -Z unstable-options` ## Ignore this error. Rust Standard Library and `println` won't work for `riscv32gc` error[E0463]: can't find crate for `std` | = note: the `riscv32gc-unknown-none-elf` target may not support the standard library = note: `std` is required by `app` because it does not declare `#![no_std]` = help: consider building the standard library from source with `cargo build -Zbuild-std` error: cannot find macro `println` in this scope --> src/main.rs:2:5 | 2 | println!(\"Hello, world!\"); | ^^^^^^^ error: `#[panic_handler]` function required, but not found For more information about this error, try `rustc --explain E0463`. error: could not compile `app` (bin \"app\") due to 3 previous errors Caused by: process didn't exit successfully: `$HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rustc --crate-name app --edition=2021 src/main.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=94 --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C metadata=1ff442e6481e1397 -C extra-filename=-1ff442e6481e1397 --out-dir $HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps --target $HOME/riscv/nuttx-rust-app/riscv32gc-unknown-none-elf.json -C incremental=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/incremental -L dependency=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps -L dependency=$HOME/riscv/nuttx-rust-app/app/target/debug/deps --extern 'noprelude:alloc=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps/liballoc-5d7bc2e4f3c29e08.rlib' --extern 'noprelude:compiler_builtins=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps/libcompiler_builtins-cd0d33c2bd30ca51.rlib' --extern 'noprelude:core=$HOME/riscv/nuttx-rust-app/app/target/riscv32gc-unknown-none-elf/debug/deps/libcore-d271c6ebb87f9b41.rlib' -Z unstable-options` (exit status: 1)\n\n", "frontpage": true}
