{"aid": "40210647", "title": "Show HN: Tach \u2013 a Python tool to enforce modular design, inspired by nx", "url": "https://github.com/Never-Over/tach", "domain": "github.com/never-over", "votes": 1, "user": "the1024", "posted_at": "2024-04-30 13:14:04", "comments": 0, "source_title": "GitHub - Never-Over/tach: A Python tool to enforce a modular, decoupled package architecture", "source_text": "GitHub - Never-Over/tach: A Python tool to enforce a modular, decoupled\npackage architecture\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nNever-Over / tach Public\n\n  * Notifications\n  * Fork 3\n  * Star 166\n\nA Python tool to enforce a modular, decoupled package architecture\n\nnever-over.github.io/modguard/\n\n### License\n\nGPL-3.0 license\n\n166 stars 3 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# Never-Over/tach\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n3 Branches\n\n12 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nemdoyleUpdate whitespace in why-tach.mdApr 30, 20242d3cffb \u00b7 Apr 30, 2024Apr\n30, 2024\n\n## History\n\n446 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| modguard -> tach| Apr 30, 2024  \n  \n### docs\n\n|\n\n### docs\n\n| Update whitespace in why-tach.md| Apr 30, 2024  \n  \n### tach\n\n|\n\n### tach\n\n| Revert no constraints early exit, packages should allow zero deps by ...|\nApr 30, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| Fix strict mode import check| Apr 30, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| tests| Apr 26, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Jan 31, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Bigger titles in README| Apr 30, 2024  \n  \n### dev-requirements.txt\n\n|\n\n### dev-requirements.txt\n\n| passing test, dev-reqs| Apr 24, 2024  \n  \n### mkdocs.yml\n\n|\n\n### mkdocs.yml\n\n| modguard -> tach| Apr 30, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| Bump to 0.1.1| Apr 30, 2024  \n  \n### tach.yml\n\n|\n\n### tach.yml\n\n| Rename modguard -> tach| Apr 30, 2024  \n  \n## Repository files navigation\n\n# tach\n\na Python tool to enforce modular design\n\nDocs\n\nDiscord - come say hi!\n\n## What is tach?\n\ntach allows you to define boundaries and control dependencies between your\nPython packages. Each package can also define its public interface.\n\nThis enforces a decoupled, modular architecture, and prevents tight coupling.\nIf a package tries to import from another package that is not listed as a\ndependency, tach will report an error. If a package tries to import from\nanother package and does not use its public interface, with strict: true set,\ntach will report an error.\n\ntach is incredibly lightweight, and has no impact on your runtime. Instead,\nits checks are performed as a lint check through the CLI.\n\n## Installation\n\n    \n    \n    pip install tach\n\n## Defining Packages\n\nTo define a package, add a package.yml to the corresponding Python package.\nAdd at least one 'tag' to identify the package:\n\n    \n    \n    # core/package.yml tags: [\"core\"]\n    \n    \n    # db/package.yml tags: [\"db\"]\n    \n    \n    # utils/package.yml tags: [\"utils\"]\n\nNext, specify the constraints for each tag in tach.yml in the root of your\nproject:\n\n    \n    \n    # [root]/tach.yml constraints: core: depends_on: [\"db\", \"utils\"] db: depends_on: [\"utils\"] utils: depends_on: []\n\nWith these rules in place, packages with tag core can import from packages\nwith tag db or utils. Packages tagged with db can only import from utils, and\npackages tagged with utils cannot import from any other packages in the\nproject.\n\ntach will now flag any violation of these boundaries.\n\n    \n    \n    # From the root of your Python project (in this example, `project/`) > tach check \u274c ./utils/helpers.py: Import \"core.PublicAPI\" is blocked by boundary \"core\". Tag(s) [\"utils\"] do not have access to [\"core\"].\n\n## Defining Interfaces\n\nIf you want to define a public interface for the package, import and reference\neach object you want exposed in the package's __init__.py and add its name to\n__all__:\n\n    \n    \n    # db/__init__.py from db.service import PublicAPI __all__ = [\"PublicAPI\"]\n\nTurning on strict: true in the package's package.yml will then enforce that\nall imports from this package occur through __init__.py and are listed in\n__all__\n\n    \n    \n    # db/package.yml tags: [\"db\"] strict: true\n    \n    \n    # The only valid import from \"db\" from db import PublicAPI\n\n## Initial Setup\n\ntach also comes bundled with a command to set up and define your initial\nboundaries.\n\n    \n    \n    tach init\n\nBy running tach init from the root of your Python project, tach will\ninitialize each top-level Python package. Each package will receive a\npackage.yml with a single tag based on the folder name. The tool will take\ninto consideration the usages between packages, and write a matching set of\ndependencies to tach.yml in the project root.\n\nIf you'd like to incrementally or individually add new packages to your\ntach.yml, you can use:\n\n    \n    \n    tach add [file_or_path]\n\nThis will create a boundary around the given file or directory, and update\nyour tach.yml with the correct set of dependencies.\n\n## Advanced\n\ntach supports specific exceptions. You can mark an import with the tach-ignore\ncomment:\n\n    \n    \n    # tach-ignore from db.main import PrivateAPI\n\nThis will stop tach from flagging this import as a boundary violation.\n\nYou can also specify multiple tags for a given package:\n\n    \n    \n    # utils/package.yml tags: [\"core\", \"utils\"]\n\nThis will expand the set of packages that \"utils\" can access to include all\npackages that \"core\" and \"utils\" depends_on as defined in tach.yml.\n\ntach.yml also accepts regex patterns:\n\n    \n    \n    depends_on: [\".*\"] # Allow imports from anywhere depends_on: [\"shared.*\"] # Allow imports from any package with a tag starting with \"shared\"\n\nBy default, tach ignores hidden directories and files (paths starting with .).\nTo override this behavior, set exclude_hidden_paths in tach.yml\n\n    \n    \n    exclude_hidden_paths: false\n\n## Details\n\ntach works by analyzing the abstract syntax tree (AST) of your codebase. It\nhas no runtime impact, and all operations are performed statically.\n\nBoundary violations are detected at the import layer. This means that dynamic\nimports using importlib or similar approaches will not be caught by tach.\n\nPyPi Package\n\n### License\n\nGNU GPLv3\n\n## About\n\nA Python tool to enforce a modular, decoupled package architecture\n\nnever-over.github.io/modguard/\n\n### Topics\n\npython cli open-source opensource ci devtools developer-tools cicd enforcement\n\n### Resources\n\nReadme\n\n### License\n\nGPL-3.0 license\n\nActivity\n\nCustom properties\n\n### Stars\n\n166 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n3 forks\n\nReport repository\n\n## Releases 12\n\n0.1.1 Latest\n\nApr 30, 2024\n\n\\+ 11 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 3\n\n  * caelean Caelean Barnes\n  * emdoyle Evan Doyle\n  * github-actions[bot]\n\n## Languages\n\n  * Python 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
