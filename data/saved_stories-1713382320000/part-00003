{"aid": "40064057", "title": "Hyprscroller: Scrolling Hyprland layout plugin like PaperWM", "url": "https://github.com/dawsers/hyprscroller", "domain": "github.com/dawsers", "votes": 1, "user": "one-punch", "posted_at": "2024-04-17 13:07:50", "comments": 0, "source_title": "GitHub - dawsers/hyprscroller: Hyprland layout plugin providing a scrolling layout like PaperWM", "source_text": "GitHub - dawsers/hyprscroller: Hyprland layout plugin providing a scrolling\nlayout like PaperWM\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ndawsers / hyprscroller Public\n\n  * Notifications\n  * Fork 0\n  * Star 27\n\nHyprland layout plugin providing a scrolling layout like PaperWM\n\n### License\n\nMIT license\n\n27 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# dawsers/hyprscroller\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndawserscommit pinApr 10, 2024009b1f7 \u00b7 Apr 10, 2024Apr 10, 2024\n\n## History\n\n35 Commits  \n  \n### src\n\n|\n\n### src\n\n| Add marks| Apr 10, 2024  \n  \n### videos\n\n|\n\n### videos\n\n| column rework| Apr 9, 2024  \n  \n### CMakeLists.txt\n\n|\n\n### CMakeLists.txt\n\n| Initial support for Hyprland 0.37.1| Mar 31, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial version| Mar 31, 2024  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Initial support for Hyprland 0.37.1| Mar 31, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Add marks| Apr 10, 2024  \n  \n### hypr.conf\n\n|\n\n### hypr.conf\n\n| Add marks| Apr 10, 2024  \n  \n### hyprpm.toml\n\n|\n\n### hyprpm.toml\n\n| commit pin| Apr 10, 2024  \n  \n### waybar.conf\n\n|\n\n### waybar.conf\n\n| Initial version| Mar 31, 2024  \n  \n## Repository files navigation\n\n# Hyprscroller\n\nHyprscroller is a Hyprland layout plugin that creates a window layout similar\nto PaperWM PaperWM. I initialy learned how to write a Hyprland plugin from\nhyprslidr, which is a similar idea.\n\nThe plugin is quite feature complete and supports gaps, borders, special\nworkspace, full screen modes, overview and installation through hyprpm.\n\nI use hyprscroller on my main machine and will support it for as long as I\nkeep on using Hyprland. However, I will only add new features that I find\ninteresting, and support two Hyprland versions: the one my distribution uses,\nand the latest tagged one. I have found problematic compiling trunk versions\nof Hyprland on a system that already has a system-wide version of it\ninstalled, so I will not make an extra effort there until things improve in\nthat front.\n\n## Requirements\n\nhyprscroller supports the version of Hyprland I use (currently v0.35) plus the\nlatest tagged one (currently v0.38.1), and you can try your luck with the\nlatest git changes, but I will be slower to keep up with those, as there are\ntoo many API changes going on upstream.\n\n## Building and installing\n\nWith Hyprland installed it should be as simple as running\n\n    \n    \n    # builds a shared object hyprscroller.so make all # installs the shared library in ~/.config/hypr/plugins make install\n\nA more automated mode is to use hyprpm.\n\n    \n    \n    hyprpm add https://github.com/dawsers/hyprscroller # verify it installed correctly hyprpm list\n\nYou can enable or disable it via hyprpm enable hyprscroller and hyprpm disable\nhyprscroller.\n\n## Configuration\n\nIf you are not using hyprpm, to make Hyprland load the plugin, add this to\nyour configuration.\n\n    \n    \n    plugin = ~/.config/hypr/plugins/hyprscroller.so\n\nInstead, if you use hyprpm, it should be as simple as adding this to your\n~/.config/hypr/hyprland.conf :\n\n    \n    \n    exec-once = hyprpm reload -n\n\nTo turn on the layout, use\n\n    \n    \n    general { ... layout = scroller ... }\n\n## Dispatchers\n\nThe plugin adds the following dispatchers:\n\nDispatcher| Description  \n---|---  \nscroller:movefocus| A replacement for movefocus, takes a direction as\nargument.  \nscroller:movewindow| A replacement for movewindow, takes a direction as\nargument.  \nscroller:setmode| Set mode: r/row (default), c/col/column. Sets the working\nmode. Affects most dispatchers and new window creation.  \nscroller:cyclesize| Resize the focused column width (row mode), or the active\nwindow height (column mode).  \nscroller:alignwindow| Align window on the screen, l/left, c/center, r/right\n(row mode), c/center, u/up, d/down (col mode)  \nscroller:admitwindow| Push the current window below the active one of the\ncolumn to its left.  \nscroller:expelwindow| Pop the current window out of its column and place it on\na new column to the right.  \nscroller:fitsize| Resize columns (row mode) or windows (col mode) so they fit\non the screen: active, visible, all, toend, tobeg  \nscroller:toggleoverview| Toggle an overview of the workspace where all the\nwindows are temporarily scaled to fit the monitor  \nscroller:marks| Marks management. Arguments: add, del, next, prev, reset  \n  \n## Modes\n\nHyprscroller works in any of two modes that can be changed at any moment.\n\n  1. row mode: it is the default. It creates new windows in a new column. cyclesize affects the width of the active column. alignwindow aligns the active column according to the argument received. fitsize fits the selected columns to the width of the monitor.\n\n  2. column mode: It creates new windows in the current column, right below the active window. cyclesize affects the height of the active window. alignwindow aligns the active window within the column, according to the argument received. fitsize fits the selected windows in the column to the height of the monitor.\n\n## Window/Column Focus and Movement\n\nIf you want to use Hyprscroller you will need to map your key bindings from\nthe default movefocus/movewindow to scroller:movefocus/scroller:movewindow.\nThe reason is Hyprland doesn't have the concept (yet) of a workspace that\nspans more than the space of a monitor, and when focusing directionally, it\ndoesn't look for windows that are \"outside\" of that region. If this changes in\nthe future, these two dispatches may become obsolete.\n\nmovefocus and movewindow accept the following directional arguments: l or\nleft, r or right, u or up, d or dn or down, b or begin or beginning, e or end.\nSo you can focus or move windows/columns in a direction or to the beginning or\nend or the row.\n\n## Resizing\n\ncyclesize accepts an argument which is either +1/1/next, or -1/prev/previous.\nIt cycles forward or backward through three column widths (in row mode): one\nthird, one half or two thirds of the available width of the monitor. In column\nmode, the fractions are relative to the height of the monitor, and are: one\nthird, one half, two thirds or one. However, using resizewindow, you can\nmodify the width or height of any window freely.\n\n## Aligning\n\nColumns are generally aligned in automatic mode, always making the active one\nvisible, and trying to make at least the previously focused one visible too if\nit fits the viewport, if not, the one adjacent on the other side. However, you\ncan always align any column to the center, left or right of the monitor (in\nrow mode), or up (top), down (bottom) or to the center in column mode. For\nexample center a column for easier reading, regardless of what happens to the\nother columns. As soon as you change focus or move a column, the alignment is\nlost.\n\nalignwindow takes a parameter: l or left, r or right, c or center or centre, u\nor up and d or down.\n\nTo use right or left you need to be in row mode, and to use up or down in\ncolumn mode. center behaves differently depending on the mode. In row mode it\naligns the active column to the center of the monitor. In column mode, it\naligns the active window within its column, to a centered position.\n\n## Admit/Expel\n\nYou can create columns of windows using admitwindow. It takes the active\nwindow and moves it to the column left of its current one, right under the\nactive window in that column.\n\nTo expel any window from its current column and position it in a new column to\nits right, use expelwindow.\n\n## Fitting the Screen\n\nWhen you have a ultra-wide monitor, one in a vertical position, or the default\ncolumn widths or window heights don't fit your workflow, you can use manual\nresizing, but it is sometimes slow and tricky.\n\nscroller:fitsize works in two different ways, depending on the active mode.\n\nIt allows you to re-fit the columns (row mode) or windows (column mode) you\nwant to the screen extents. It accepts an argument related to the\ncolumns/windows it will try to fit. The new width/height of each column/window\nwill be proportional to its previous width or height, relative to the other\ncolumns or windows affected.\n\n  1. active: It is similar to maximize, it will fit the active column/window.\n  2. visible: All the currently fully or partially visible columns/windows will be resized to fit the screen.\n  3. all: All the columns in the row or windows in the column will be resized to fit.\n  4. toend: All the columns or windows from the focused one to the end of the row/column will be affected.\n  5. tobeg or tobeginning: All the columns/windows from the focused one to the beginning of the row/column will now fit the screen.\n\n## Overview\n\nscroller:toggleoverview toggles a bird's eye view of the current workspace\nwhere all the windows are scaled to fit the current monitor. You can still\ninteract with them normally (change focus, move windows, type in them etc.).\nWhen toggling back to normal mode, the original window sizes will be\nrestored...so it is not wise to use toggleoverview for window resizing or\ncreating new windows. Use it as a way to see where things are and move the\nactive focus, or a window, anything beyond that will probably find bugs or\ncause compositor crashes.\n\n## Marks\n\nscroller:marks manages marks. You can add a mark on the active window to be\nable to quickly return to it later on. del removes a mark from a window (if\npresent). prev and next change focus to the previous and next marked windows.\nreset clears all marks.\n\nMarks reference windows, but are global, they may belong to different\nworkspaces, so moving to the next or previous mark may switch workspaces.\n\n## Options\n\nhyprscroller currently accepts the following options:\n\n  1. column_default_width: determines the width of new columns in row mode. Possible arguments are: onehalf (default), onethird, twothirds, maximized, floating (uses the default width set by the application).\n\nFor example:\n\n    \n    \n    plugin { scroller { column_default_width = onehalf } }\n\n## Key bindings\n\nAs an example, you could set some key bindings in your hyprland.conf like\nthis:\n\n    \n    \n    # Move focus with mainMod + arrow keys bind = $mainMod, left, scroller:movefocus, l bind = $mainMod, right, scroller:movefocus, r bind = $mainMod, up, scroller:movefocus, u bind = $mainMod, down, scroller:movefocus, d bind = $mainMod, home, scroller:movefocus, begin bind = $mainMod, end, scroller:movefocus, end # Movement bind = $mainMod CTRL, left, scroller:movewindow, l bind = $mainMod CTRL, right, scroller:movewindow, r bind = $mainMod CTRL, up, scroller:movewindow, u bind = $mainMod CTRL, down, scroller:movewindow, d bind = $mainMod CTRL, home, scroller:movewindow, begin bind = $mainMod CTRL, end, scroller:movewindow, end # Modes bind = $mainMod, semicolon, scroller:setmode, row bind = $mainMod, apostrophe, scroller:setmode, col # Sizing keys bind = $mainMod, equal, scroller:cyclesize, next bind = $mainMod, minus, scroller:cyclesize, prev # Admit/Expel bind = $mainMod, I, scroller:admitwindow, bind = $mainMod, O, scroller:expelwindow, # Center submap # will switch to a submap called center bind = $mainMod, C, submap, center # will start a submap called \"center\" submap = center # sets repeatable binds for resizing the active window bind = , C, scroller:alignwindow, c bind = , C, submap, reset bind = , right, scroller:alignwindow, r bind = , right, submap, reset bind = , left, scroller:alignwindow, l bind = , left, submap, reset bind = , up, scroller:alignwindow, u bind = , up, submap, reset bind = , down, scroller:alignwindow, d bind = , down, submap, reset # use reset to go back to the global submap bind = , escape, submap, reset # will reset the submap, meaning end the current one and return to the global one submap = reset # Resize submap # will switch to a submap called resize bind = $mainMod SHIFT, R, submap, resize # will start a submap called \"resize\" submap = resize # sets repeatable binds for resizing the active window binde = , right, resizeactive, 100 0 binde = , left, resizeactive, -100 0 binde = , up, resizeactive, 0 -100 binde = , down, resizeactive, 0 100 # use reset to go back to the global submap bind = , escape, submap, reset # will reset the submap, meaning end the current one and return to the global one submap = reset # Fit size submap # will switch to a submap called fitsize bind = $mainMod, W, submap, fitsize # will start a submap called \"fitsize\" submap = fitsize # sets binds for fitting columns/windows in the screen bind = , W, scroller:fitsize, visible bind = , W, submap, reset bind = , right, scroller:fitsize, toend bind = , right, submap, reset bind = , left, scroller:fitsize, tobeg bind = , left, submap, reset bind = , up, scroller:fitsize, active bind = , up, submap, reset bind = , down, scroller:fitsize, all bind = , down, submap, reset # use reset to go back to the global submap bind = , escape, submap, reset # will reset the submap, meaning end the current one and return to the global one submap = reset # overview keys # bind key to toggle overview (normal) bind = $mainMod, tab, scroller:toggleoverview # overview submap # will switch to a submap called overview bind = $mainMod, tab, submap, overview # will start a submap called \"overview\" submap = overview bind = , right, scroller:movefocus, right bind = , left, scroller:movefocus, left bind = , up, scroller:movefocus, up bind = , down, scroller:movefocus, down # use reset to go back to the global submap bind = , escape, scroller:toggleoverview, bind = , escape, submap, reset bind = , return, scroller:toggleoverview, bind = , return, submap, reset bind = $mainMod, tab, scroller:toggleoverview, bind = $mainMod, tab, submap, reset # will reset the submap, meaning end the current one and return to the global one submap = reset # Marks bind = $mainMod, M, scroller:marks, add bind = $mainMod SHIFT, M, scroller:marks, del bind = $mainMod, period, scroller:marks, next bind = $mainMod, comma, scroller:marks, prev bind = $mainMod CTRL, M, scroller:marks, reset\n\n## About\n\nHyprland layout plugin providing a scrolling layout like PaperWM\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n27 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * C++ 98.1%\n  * Other 1.9%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
