{"aid": "40167758", "title": "Code Signing on Windows with Azure Trusted Signing", "url": "https://melatonin.dev/blog/code-signing-on-windows-with-azure-trusted-signing/", "domain": "melatonin.dev", "votes": 1, "user": "sudara", "posted_at": "2024-04-26 10:42:56", "comments": 0, "source_title": "Code signing on Windows with Azure Trusted Signing \u00b7 Melatonin", "source_text": "Code signing on Windows with Azure Trusted Signing \u00b7 Melatonin\n\nSkip to content\n\n# Code signing on Windows with Azure Trusted Signing\n\nTrash your overpriced third party certs! Set that clumsy dongle on fire! Pop\nthe bottle of champagne, the most exciting news in Windows dev has landed.\nCode signing apps and audio plugins on Windows in 2024 is finally (much more)\nsane and (same as Apple) cheap.\n\nBefore April 2024, this service from Microsoft was in Private Preview and\nnamed Azure Code Signing (ACS). It\u2019s now named Azure Trusted Signing and is\ncurrently in Public Preview.\n\nThis article walks you through how I set things up. You should visit\nMicrosoft\u2019s official docs where they do something similar and also check out\nKoala DSP\u2019s guide.\n\nYou\u2019ll need a biz with 3 years of history to use Trusted Signing! Microsoft\ncurrently says \u201cTrusted Signing at this time can only onboard Legal Business\nEntities that have verifiable tax history of three or more years.\u201d I\u2019m a sole\nproprietor in the EU and was verified. If you don\u2019t have a registered\nbusiness, or if it\u2019s younger than 3 years, you will have to wait until they\nlaunch \u201cpersonal\u201d validation.\n\n## Why is code signing needed on Windows?\n\nInstallers throw up an evil blue SmartScreen warnings on Windows by default.\nThis frightens users and makes them think there\u2019s a virus.\n\nThat\u2019s bad. Installation is the person\u2019s first experience with your product.\nAdding friction at the start of that experience sucks. Especially for less\ntechnical users.\n\nLove pain? Check out my detailed posts on Windows code signing with third\nparty certs here, or code singing and notarization on macOS here.\n\n## How Azure Trusted Signing works\n\nI\u2019ve been in the Trusted Signing private preview since late 2023. I\u2019ve spent\nan hour chatting to the (very nice!) team one-on-one and have participated in\na couple meetings. Here\u2019s the scoop:\n\nInstead of buying an overpriced signing certificate from a third party, you\u2019ll\npay $9.99 a month for a signing account. When you make a new installer, you\u2019ll\nuse tools such signtool or the official GitHub Action to sign the installer.\n\nInstead of lasting years, certs are generated daily (with a lifespan of 3\ndays). That allows for time-precise revocation if there\u2019s any need.\n\nTrusted Signing has been used internally for all of Microsoft\u2019s products for\nyears now. This isn\u2019t a \u201cnew\u201d service. See this link for detailed\ncompatibility info.\n\n## Getting started: Create an Azure account\n\nDo it here.\n\n## Step 2: Create a Subscription\n\nIn Azure, you add paid services through creating a \u201cSubscription\u201d record.\n\nThis is sort of a clunky and pointless bureaucratic thing, but hey, it\u2019s a\npre-req to setting up a code signing account. There\u2019s no extra charge for\nsetting up a \u201csubscription.\u201d\n\n## Step 3: Create a \u201cTrusted Signing Account\u201d\n\nProbably easiest just to stick signing in the search bar than it is to wade\nthrough hundreds of crazy service names.\n\nSelect the subscription you just created, pick an arbitrary name and select a\nregion:\n\nYou\u2019ll need to specify the region\u2019s endpoint when signing. You\u2019ll see the url\non the main trusted signing account page after creation.\n\n## Step 4: Create an \u201cApp Registration\u201d\n\nThis is a bit bulky and uncessary because it\u2019s Azure, but this step creates\nAPI credentials for an arbitrary \u201cApplication\u201d to use outside of Azure. In\nother words, this is how Azure will know it\u2019s you when you go to sign your\ninstallers.\n\nSearch for App Registrations and create a new one.\n\nGive it a name and keep the defaults.\n\nNote the client ID (1) and the tenant ID (2) for later signing. Locally you\nwill later set these as environment variables AZURE_CLIENT_ID and\nAZURE_TENANT_ID.\n\nThen add a secret (3), setting the expiry date to 24 months.\n\nAlso note the secret value of the created secret. You\u2019ll set this as\nAZURE_CLIENT_SECRET.\n\n## Step 5: Assign \u201cRoles\u201d\n\nBefore you are allowed to validate your identity or sign stuff, you\u2019ll need to\nexplicitly add these roles.\n\nThis is one of those.... very redundant and annoying sort of steps. Azure\ncould grant the identity roles to the user who created the trusted signing\naccount, but for \u201csecurity\u201d reasons (i.e. enterprise customers with convoluted\naccess paradigms) it doesn\u2019t.\n\nYou\u2019ll need to go through this wizard twice \u2014 once for Trusted Signing\nIdentity Verifier, the role your logged in user needs to get identity\nvalidated in the next step.\n\nAnd once for Trusted Signing Certificate Profile Signer which is a role that\nyour \u201capplication user\u201d (that you just created) needs for the actual signing.\n\nIn the Trusted Signing Account, click Access Control (IAM) and then Add role\nassignment\n\nSearch for \u201ctrusted\u201d to bring up the relevant roles you need to add.\n\nSelect the role (yes, the light gray background means selected) and then click\nthrough the wizard to add a user.\n\nAgain, you\u2019ll do this twice: Assign Trusted Signing Identity Verifier to your\nlogged in user and Trusted Signing Certificate Profile Signer to your \u201cApp\u201d\nclient/user you created in the previous step.\n\nThe UX on all this is a bit rough. To double check you did it right, go to IAM\n> Role Assignments and double check the two roles are there:\n\ntrusted-signing is my \u201cApp\u201d user.\n\n## Step 6: Identity Validation\n\nCompared to the old, crusty, third-party identity validations that can take\nweeks, require phone calls and physical letters, Microsoft\u2019s identity\nvalidation is fairly chill.\n\nMicrosoft uses an in-house, worldwide identity validation service. They claim\nthey can validate in as little as an hour. For me (in the EU, submitted on a\nSaturday) it took ~12 hours to get the initial request for additional\ndocuments, another ~2 days to get back to me, and then things stalled out a\nbit because of a misunderstanding (more on this later) taking 10 days in\ntotal.\n\nYou\u2019ll want to select New Identity > Public\n\nPrivate means \u201cuse a certificate chained to an opt-in trust root that your app\nusers have to manually install\u201d \u2014 so, yes, you want Public!\n\nNow fill out the form. Use a DUNS Number if you are a US biz and have one.\nOtherwise a Tax ID, for example if you are in the EU with a business (like I\nam).\n\nMake sure you can provide proof of ownership of the domain you are submitting\nas your Primary Email (in other words, it can\u2019t be @gmail.com or whatever).\n\nAzure form validation sucks. It took me a few tries before pressing Create was\npossible. Some fields seem to wants numbers only, otherwise it would say\nthings like \u201cThis is not a valid tax id.\u201d\n\nWhen I finally could press Create, I got hit with this great popup, despite\nhaving valid primary and secondary email addresses:\n\nThe problem was (randomly) that the secondary email address has to be on the\nsame domain as the primary!\n\n## Providing identity documents\n\nYou\u2019ll probably have to provide additional documents. I got an email 12 hours\nafter I submitted the request. They wanted proof of business and (for some\nreason I didn\u2019t initially understand) proof of domain name ownership?\n\nLogging back into Azure and navigating to Trusted Signing > Identity\nValidation, you\u2019ll see the status is Action Required. Clicking on the record\nbrings up the document uploader:\n\nIt took 2 days for my documents to be processed. At which point I got another\nautomated request for Domain purchase invoices or registry confirmation\nrecords.\n\nThis was a bit strange. I provided them with a renewal receipt of my domain\nmelatonin.dev, so I wasn\u2019t sure what else they wanted. I provided them the\noriginal purchase receipt and then 2 hours later got another request for the\nsame document.\n\nIt felt a bit dystopian as there were no comments from a human as to what the\nproblem was \u2014 but I then figured out I was being dumb. They probably wanted\nproof of ownership of my Primary Email domain (which in my case was different\nthan my marketing domain).\n\nAbout an hour later, I then got an email validation request on my Primary\nEmail:\n\nThen things stalled out for me for a few more days. Because I had the luxury\nof being in the private alpha, I pinged the team to ask what\u2019s up (Thanks\nMeha!). Apparently the internal validation team was confused if I was applying\nas a business or as an individual. They will have a workflow for non-business\nindividuals, but it\u2019s not live yet. I told them I\u2019m a business, a sole\nproprietorship, at which point they asked me again for my business license and\nthen approved me. The process took a total of 10 days\n\nLet me know in the comments how long it took for your identity validation,\nwould be nice to know if I\u2019m an outlier.\n\nInterestingly, the identity validation record expires 2 years after the\nrequest was made, so keep that in mind!\n\n## Step 7: Create a Certificate Profile\n\nThe actual certs on Azure Trusted Signing are created and rotated daily. But\nyou\u2019ll need to create a \u201cprofile\u201d to access them. Create a Public Trust\nprofile:\n\nPick a name.\n\nYes, you got it. You\u2019ll need this name later when signing...\n\nUnder Verified CN and O select your verified identity (from the last step).\n\n## Step 8: Signing locally\n\nI initially skipped this step and just got things building on GitHub. I\nusually only create signed builds via CI (I prefer to keep that boundary\nhygienic, helps with debugging, etc).\n\nTo get going locally, follow Microsoft\u2019s docs about how to get started with\nsigntool.exe. They are solid except they conveniently don\u2019t really mention\nauthentication at all. Whups. For that, you\u2019ll probably just want to export\nAZURE_CLIENT_ID, AZURE_CLIENT_SECRET and AZURE_TENANT_ID as environment\nvariables to get started.\n\nYou can also crib Koala DSP\u2019s guide for this part.\n\nI don\u2019t have much to add, except:\n\n  * You aren\u2019t crazy \u2014 yes, you need to download a dlib and pass its downloaded location as a command line argument to signtool. Not awkward at all. If you don\u2019t want to use nuget to grab the dlib, you can click \u201cDownload Package\u201d in the sidebar, rename the downloaded file to a .zip and bob\u2019s your uncle.\n  * You also need to lovingly handcraft some json to feed signtool \u2014 because we\u2019re having fun, ya know? Make sure that endpoint url is right, I totally fucked that up at first...\n  * signtool credentials give priority to the azure environment variables for \u201cservice principles\u201d (aka your application user), but there are many methods including ManagedIdentity. You can also use az login. I recommend just setting AZURE_CLIENT_ID, AZURE_CLIENT_SECRET and AZURE_TENANT_ID as environment variables.\n  * If you need to double check what dotnet runtime you have you can do it with dotnet --list-runtimes. I think anything over 6 and you should be happy?\n  * If you need a new version of signtool, you can download it from within Visual Studio and it\u2019ll show up in C:\\Program Files (x86)\\Windows Kits\\10\\bin.\n\n## Step 9: Trusted Signing in CI (GitHub)\n\nAzure publishes a trusted signing action for GitHub Actions which basically\nscripts inputs to the Powershell integration.\n\nYou\u2019ll need 6 pieces of information that we\u2019ll add as GitHub secrets.\n\nThe first 3 are the application client info (as in local signing):\nAZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET.\n\nIn addition you\u2019ll need the AZURE_ENDPOINT \u2014 this the url for the region you\nselected. You can find this labelled Account URI on the main Trusted Signing\nAccount page in Azure. For me, in the EU, it\u2019s\nhttps://weu.codesigning.azure.net/\n\nWhile you are there, note the name of your trusted signing account. You\u2019ll\nstore that as a secret called AZURE_CODE_SIGNING_NAME.\n\nLastly, you\u2019ll need the AZURE_CERT_PROFILE_NAME from step 7.\n\nYou might notice a lot of the GitHub and API stuff is still called \u201ccode\nsigning\u201d and not \u201ctrusted signing.\u201d It\u2019s because Azure renamed the service but\ndidn\u2019t want to break existing usage.\n\nIn total, you should have 6 GitHub secrets. You could argue some of this stuff\ndoesn\u2019t actually need to actually be a secret (can just be in the workflow\nyaml) but I have public repositories, so this is nicer.\n\nThe entire action will look something like this:\n\n    \n    \n    - name: Azure Trusted Signing uses: azure/trusted-signing-action@v0.3.16 with: azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }} azure-client-id: ${{ secrets.AZURE_CLIENT_ID }} azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }} endpoint: ${{ secrets.AZURE_ENDPOINT }} code-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }} certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }} # Sign all exes inside the folder files-folder: ${{ env.ARTIFACTS_PATH }} files-folder-filter: exe file-digest: SHA256\n\nThis signs all exe files in the named directory. I opened an issue so we can\njust specify a single filename. Specifying file-digest is unfortunately also\nrequired at the moment.\n\nSuccess looks like this:\n\n    \n    \n    Submitting digest for signing... OperationId 9823489-2398492348-2134234: InProgress Signing completed with status 'Succeeded' in 2.9607421s Successfully signed: D:\\a\\pamplejuce\\pamplejuce\\Builds\\Pamplejuce_artefacts\\Release\\Pamplejuce Demo-0.0.1-Windows.exe Number of files successfully Signed: 1 Number of warnings: 0 Number of errors: 0 Trusted Signing completed successfully\n\n## Debugging\n\n### No certificates were found\n\n    \n    \n    The following certificates were considered: Issued to: localhost Issued by: localhost Expires: Fri Apr 25 16:54:32 2025 SHA1 hash: SOMEHASH After EKU filter, 0 certs were left. After expiry filter, 0 certs were left. SignTool Error: No certificates were found that met all the given criteria.\n\nAn error like this means the dlib that calls out to Azure wasn\u2019t invoked.\nThere could be a couple reasons for this, double check the following:\n\n  * The path to the dlib \u2014 you should be specifying the full path including filename to Azure.CodeSigning.Dlib.dll (note, not Azure.CodeSigning.dll, I made that mistake!)\n  * Make sure the x64 and x86 situation is aligned. Both the dll and the signtool executable need to be using the same version.\n  * Make sure you are on a recent enough version of signtool. As of April 2024, Microsoft support recommended 10.0.2261.755 or later.\n\n### Number of Errors: 1\n\nSurely an award winning error message, we have the following work of art. Note\nthis is with /v and /debug settings on, lol:\n\n    \n    \n    Number of files successfully Signed: 0 Number of warnings: 0 Number of errors: 1\n\nI tried everything to resolve this one. In the end, the issue was the path to\nthe thing I was signing was wrong! I was an idiot and trying to sign a folder\n(that for some reason was called MyPlugin.exe.)\n\n### GitHub Action 403s:\n\n    \n    \n    Azure.RequestFailedException: Service request failed. Status: 403 (Forbidden) ... Error information: \"Error: SignerSign() failed.\" (-2147467259/0x80004005) SignTool Error: An unexpected internal error has occurred.\n\nThis probably means your application user (client id/secret) doesn\u2019t have the\nTrusted Signing Certificate Profile Signer role, see Step 5.\n\n## FAQ\n\nCheck out Microsoft\u2019s Trusted Signing FAQ too...\n\n### Do I still need to buy a cert and put it into the account?\n\nNo. It\u2019s all managed for you, by Azure. You just interact with their API via\ntheir tools. No more buying and juggling certs.\n\n### Do I keep a cert in \u201cAzure Key Vault\u201d or something?\n\nNope. Azure Key Vault is a different service, for the old school manual certs.\n\n### Can I use AzureSignTool?\n\nAgain, no. That\u2019s for the old Azure Key Vault / manual certs.\n\n### Is this basically the modern equivalent to signing with an EV cert?\n\nYes.\n\n### How will smartscreen reputation work? Will I get instant reputation?\n\nYour Azure trusted signing account will start off with a base level of\nreputation. Reputation now belongs to the code signing identity, not\nindividual certs (as the actual certs are rotated daily).\n\n### Can I give my devs access to the account?\n\nYes, there\u2019s full RBAC control. As far as I\u2019m aware there\u2019s no additional\ncharge for additional accounts, etc.\n\n### Do I need to pay some sort of Azure \u201csubscription\u201d?\n\nNo, an azure subscription is a record/resource you need to setup (see step 2)\nso that Azure can bill you. It\u2019s just bureaucratic b.s. needed for the big\nenterprise bois. Just a hoop to jump through, no additional cost.\n\n## Additional Resources\n\n  * KoalaDSP\u2019s docs which include details on AAX support.\n  * Microsoft\u2019s Trusted Signing docs.\n\nPosted on\n\nApril 25, 2024\n\nby sudara\n\nc++\n\n### Leave a Reply Cancel reply\n\n### Related Posts\n\nHow to code sign Windows installers with an EV cert on GitHub Actions\n\nHow to code sign and notarize macOS audio plugins in CI\n\nMelatonin.dev\n\nYouTube\n\nAbout\n\ngithub\n\nBlog\n\nTwitter\n\n", "frontpage": false}
