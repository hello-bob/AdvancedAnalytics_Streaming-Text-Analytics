{"aid": "40155934", "title": "Spring: Rails Application Preloader", "url": "https://github.com/rails/spring", "domain": "github.com/rails", "votes": 1, "user": "tosh", "posted_at": "2024-04-25 11:03:20", "comments": 0, "source_title": "GitHub - rails/spring: Rails application preloader", "source_text": "GitHub - rails/spring: Rails application preloader\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nrails / spring Public\n\n  * Notifications\n  * Fork 335\n  * Star 2.8k\n\nRails application preloader\n\n### License\n\nMIT license\n\n2.8k stars 335 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# rails/spring\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n16 Branches\n\nTags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nbyrootRelease 4.2.1Apr 22, 2024c5987d5 \u00b7 Apr 22, 2024Apr 22, 2024\n\n## History\n\n905 Commits  \n  \n### .devcontainer\n\n|\n\n### .devcontainer\n\n| Add devcontainer configuration| Nov 23, 2021  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Update CI matrix| Apr 16, 2024  \n  \n### bin\n\n|\n\n### bin\n\n| Print \"Running via Spring preloader\" message from the app process| Jan 8,\n2016  \n  \n### lib/spring\n\n|\n\n### lib/spring\n\n| Release 4.2.1| Apr 22, 2024  \n  \n### test\n\n|\n\n### test\n\n| Allow to configure boot and connect timeout| Apr 16, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| gitignore the rbenv specific .ruby-version in project root as well| Oct 9,\n2014  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| Release 4.2.1| Apr 22, 2024  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Run the acceptance test with Rails 6.1| Dec 10, 2021  \n  \n### Gemfile\n\n|\n\n### Gemfile\n\n| Fix Gemfile on bundler 2.5.0.dev| Nov 22, 2023  \n  \n### LICENSE.txt\n\n|\n\n### LICENSE.txt\n\n| Update license Copyright| Nov 23, 2021  \n  \n### README.md\n\n|\n\n### README.md\n\n| Add MRI3.2 to supported versions documentation| Mar 29, 2023  \n  \n### Rakefile\n\n|\n\n### Rakefile\n\n| add bump to get rake bump:patch/minor/major tasks| Sep 4, 2015  \n  \n### spring.gemspec\n\n|\n\n### spring.gemspec\n\n| Fix Gemfile on bundler 2.5.0.dev| Nov 22, 2023  \n  \n## Repository files navigation\n\n# Spring\n\nSpring is a Rails application preloader. It speeds up development by keeping\nyour application running in the background, so you don't need to boot it every\ntime you run a test, rake task or migration.\n\n## Features\n\n  * Totally automatic; no need to explicitly start and stop the background process\n  * Reloads your application code on each run\n  * Restarts your application when configs / initializers / gem dependencies are changed\n\n## Compatibility\n\n  * Ruby versions: MRI 2.7, MRI 3.0, MRI 3.1, MRI 3.2\n  * Rails versions: 6.0, 6.1, 7.0\n  * Bundler v2.1+\n\nSpring makes extensive use of Process.fork, so won't be able to provide a\nspeed up on platforms which don't support forking (Windows, JRuby).\n\n## Walkthrough\n\n### Setup\n\nAdd Spring to your Gemfile:\n\n    \n    \n    gem \"spring\", group: :development\n\n(Note: using gem \"spring\", git: \"...\" won't work and is not a supported way of\nusing Spring.)\n\nIt's recommended to 'springify' the executables in your bin/ directory:\n\n    \n    \n    $ bundle install $ bundle exec spring binstub --all\n\nThis generates a bin/spring executable, and inserts a small snippet of code\ninto relevant existing executables. The snippet looks like this:\n\n    \n    \n    begin load File.expand_path('../spring', __FILE__) rescue LoadError => e raise unless e.message.include?('spring') end\n\nOn platforms where Spring is installed and supported, this snippet hooks\nSpring into the execution of commands. In other cases, the snippet will just\nbe silently ignored, and the lines after it will be executed as normal.\n\nIf you don't want to prefix every command you type with bin/, you can use\ndirenv to automatically add ./bin to your PATH when you cd into your\napplication. Simply create an .envrc file with the command PATH_add bin in\nyour Rails directory.\n\n### Enable reloading\n\nSpring reloads application code, and therefore needs the application to have\nreloading enabled.\n\nEnsure that config.enable_reloading is true in the environments that Spring\nmanages. That setting is typically configured in config/environments/*.rb. In\nparticular, make sure it is true for the test environment.\n\nNote: in versions of Rails before 7.1, the setting is called cache_classes,\nand it needs to be false for Spring to work.\n\n### Usage\n\nFor this walkthrough I've generated a new Rails application, and run rails\ngenerate scaffold post name:string.\n\nLet's run a test:\n\n    \n    \n    $ time bin/rake test test/controllers/posts_controller_test.rb Running via Spring preloader in process 2734 Run options: # Running tests: ....... Finished tests in 0.127245s, 55.0121 tests/s, 78.5887 assertions/s. 7 tests, 10 assertions, 0 failures, 0 errors, 0 skips real 0m2.165s user 0m0.281s sys 0m0.066s\n\nThat wasn't particularly fast because it was the first run, so Spring had to\nboot the application. It's now running:\n\n    \n    \n    $ bin/spring status Spring is running: 26150 spring server | spring-demo-app | started 3 secs ago 26155 spring app | spring-demo-app | started 3 secs ago | test mode\n\nThe next run is faster:\n\n    \n    \n    $ time bin/rake test test/controllers/posts_controller_test.rb Running via Spring preloader in process 8352 Run options: # Running tests: ....... Finished tests in 0.176896s, 39.5714 tests/s, 56.5305 assertions/s. 7 tests, 10 assertions, 0 failures, 0 errors, 0 skips real 0m0.610s user 0m0.276s sys 0m0.059s\n\nIf we edit any of the application files, or test files, the changes will be\npicked up on the next run without the background process having to restart.\nThis works in exactly the same way as the code reloading which allows you to\nrefresh your browser and instantly see changes during development.\n\nBut if we edit any of the files which were used to start the application\n(configs, initializers, your gemfile), the application needs to be fully\nrestarted. This happens automatically.\n\nLet's \"edit\" config/application.rb:\n\n    \n    \n    $ touch config/application.rb $ bin/spring status Spring is running: 26150 spring server | spring-demo-app | started 36 secs ago 26556 spring app | spring-demo-app | started 1 sec ago | test mode\n\nThe application detected that config/application.rb changed and automatically\nrestarted itself.\n\nIf we run a command that uses a different environment, then that environment\ngets booted up:\n\n    \n    \n    $ bin/rake routes Running via Spring preloader in process 2363 posts GET /posts(.:format) posts#index POST /posts(.:format) posts#create new_post GET /posts/new(.:format) posts#new edit_post GET /posts/:id/edit(.:format) posts#edit post GET /posts/:id(.:format) posts#show PUT /posts/:id(.:format) posts#update DELETE /posts/:id(.:format) posts#destroy $ bin/spring status Spring is running: 26150 spring server | spring-demo-app | started 1 min ago 26556 spring app | spring-demo-app | started 42 secs ago | test mode 26707 spring app | spring-demo-app | started 2 secs ago | development mode\n\nThere's no need to \"shut down\" Spring. This will happen automatically when you\nclose your terminal. However, if you do want to do a manual shut down, use the\nstop command:\n\n    \n    \n    $ bin/spring stop Spring stopped.\n\nFrom within your code, you can check whether Spring is active with if\ndefined?(Spring).\n\n### Removal\n\nTo remove Spring:\n\n  * 'Unspring' your bin/ executables: bin/spring binstub --remove --all\n  * Remove spring from your Gemfile\n\n### Deployment\n\nYou must not install Spring on your production environment. To prevent it from\nbeing installed, run the bundle config set without 'development test' before\nbundle install command which is used to install gems on your production\nmachines:\n\n    \n    \n    $ bundle config set without 'development test' $ bundle install\n\n## Commands\n\n### rake\n\nRuns a rake task. Rake tasks run in the development environment by default.\nYou can change this on the fly by using the RAILS_ENV environment variable.\nThe environment is also configurable with the\nSpring::Commands::Rake.environment_matchers hash. This has sensible defaults,\nbut if you need to match a specific task to a specific environment, you'd do\nit like this:\n\n    \n    \n    Spring::Commands::Rake.environment_matchers[\"perf_test\"] = \"test\" Spring::Commands::Rake.environment_matchers[/^perf/] = \"test\" # To change the environment when you run `rake` with no arguments Spring::Commands::Rake.environment_matchers[:default] = \"development\"\n\n### rails console, rails generate, rails runner\n\nThese execute the rails command you already know and love. If you run a\ndifferent sub command (e.g. rails server) then Spring will automatically pass\nit through to the underlying rails executable (without the speed-up).\n\n### Additional commands\n\nYou can add these to your Gemfile for additional commands:\n\n  * spring-commands-rspec\n  * spring-commands-cucumber\n  * spring-commands-spinach\n  * spring-commands-testunit - useful for running Test::Unit tests on Rails 3, since only Rails 4 allows you to use rake test path/to/test to run a particular test/directory.\n  * spring-commands-parallel-tests - Adds the parallel_* commands from parallel_tests.\n  * spring-commands-teaspoon\n  * spring-commands-m\n  * spring-commands-rubocop\n  * spring-commands-rackup\n  * spring-commands-rack-console\n  * spring-commands-standard\n\n## Use without adding to bundle\n\nIf you don't want Spring-related code checked into your source repository,\nit's possible to use Spring without adding to your Gemfile. However, using\nSpring binstubs without adding Spring to the Gemfile is not supported.\n\nTo use Spring like this, do a gem install spring and then prefix commands with\nspring. For example, rather than running bin/rake -T, you'd run spring rake\n-T.\n\n## Temporarily disabling Spring\n\nIf you're using Spring binstubs, but temporarily don't want commands to run\nthrough Spring, set the DISABLE_SPRING environment variable.\n\n## Class reloading\n\nSpring uses Rails' class reloading mechanism to keep your code up to date\nbetween test runs. This is the same mechanism which allows you to see changes\nduring development when you refresh the page. However, you may never have used\nthis mechanism with your test environment before, and this can cause problems.\n\nIt's important to realise that code reloading means that the constants in your\napplication are different objects after files have changed:\n\n    \n    \n    $ bin/rails runner 'puts User.object_id' 70127987886040 $ touch app/models/user.rb $ bin/rails runner 'puts User.object_id' 70127976764620\n\nSuppose you have an initializer config/initializers/save_user_class.rb like\nso:\n\n    \n    \n    USER_CLASS = User\n\nThis saves off the first version of the User class, which will not be the same\nobject as User after the code has been reloaded:\n\n    \n    \n    $ bin/rails runner 'puts User == USER_CLASS' true $ touch app/models/user.rb $ bin/rails runner 'puts User == USER_CLASS' false\n\nSo to avoid this problem, don't save off references to application constants\nin your initialization code.\n\n## Using Spring with a containerized development environment\n\nAs of Spring 1.7, there is some support for doing this. See this example\nrepository for information about how to do it with Docker.\n\n## Configuration\n\nSpring will read ~/.spring.rb and config/spring.rb for custom settings. Note\nthat ~/.spring.rb is loaded before bundler, but config/spring.rb is loaded\nafter bundler. So if you have any spring-commands-* gems installed that you\nwant to be available in all projects without having to be added to the\nproject's Gemfile, require them in your ~/.spring.rb.\n\nconfig/spring_client.rb is also loaded before bundler and before a server\nprocess is started, it can be used to add new top-level commands.\n\n### Application root\n\nSpring must know how to find your Rails application. If you have a normal app\neverything works out of the box. If you are working on a project with a\nspecial setup (an engine for example), you must tell Spring where your app is\nlocated:\n\n    \n    \n    Spring.application_root = './test/dummy'\n\n### Running code before forking\n\nThere is no Spring.before_fork callback. To run something before the fork, you\ncan place it in ~/.spring.rb or config/spring.rb or in any of the files which\nget run when your application initializes, such as config/application.rb,\nconfig/environments/*.rb or config/initializers/*.rb.\n\n### Running code after forking\n\nYou might want to run code after Spring forked off the process but before the\nactual command is run. You might want to use an after_fork callback if you\nhave to connect to an external service, do some general cleanup or set up\ndynamic configuration.\n\n    \n    \n    Spring.after_fork do # run arbitrary code end\n\nIf you want to register multiple callbacks you can simply call\nSpring.after_fork multiple times with different blocks.\n\n### Watching files and directories\n\nSpring will automatically detect file changes to any file loaded when the\nserver boots. Changes will cause the affected environments to be restarted.\n\nIf there are additional files or directories which should trigger an\napplication restart, you can specify them with Spring.watch:\n\n    \n    \n    Spring.watch \"config/some_config_file.yml\"\n\nBy default, Spring polls the filesystem for changes once every 0.2 seconds.\nThis method requires zero configuration, but if you find that it's using too\nmuch CPU, then you can use event-based file system listening by installing the\nspring-watcher-listen gem.\n\n### Quiet output\n\nTo disable the \"Running via Spring preloader\" message which is shown each time\na command runs:\n\n    \n    \n    Spring.quiet = true\n\nYou can also set the initial state of the quiet configuration option to true\nby setting the SPRING_QUIET environment variable before executing Spring. This\nis useful if you want to set quiet mode when invoking the Spring executable in\na subprocess, and cannot or prefer not to set it programmatically via the\nSpring.quiet option in ~/.spring.rb or the app's config/spring.rb.\n\n### Environment variables\n\nThe following environment variables are used by Spring:\n\n  * DISABLE_SPRING - If set, Spring will be bypassed, and your application will boot in a foreground process\n  * SPRING_LOG - The path to a file which Spring will write log messages to.\n  * SPRING_TMP_PATH - The directory where Spring should write its temporary files (a pidfile and a socket). By default, we use the XDG_RUNTIME_DIR environment variable, or else Dir.tmpdir, and then create a directory in that named spring-$UID. We don't use your Rails application's tmp/ directory because that may be on a filesystem which doesn't support UNIX sockets.\n  * SPRING_APPLICATION_ID - Used to identify distinct Rails applications. By default, it is an MD5 hash of the current RUBY_VERSION, and the path to your Rails project root.\n  * SPRING_SOCKET - The path which should be used for the UNIX socket which Spring uses to communicate with the long-running Spring server process. By default, this is SPRING_TMP_PATH/SPRING_APPLICATION_ID.\n  * SPRING_PIDFILE - The path which should be used to store the pid of the long-running Spring server process. By default, this is related to the socket path; if the socket path is /foo/bar/spring.sock the pidfile will be /foo/bar/spring.pid.\n  * SPRING_QUIET - If set, the initial state of the Spring.quiet configuration option will default to true.\n  * SPRING_SERVER_COMMAND - The command to run to start up the Spring server when it is not already running. Defaults to spring _[version]_ server --background.\n\n## Troubleshooting\n\nIf you want to get more information about what Spring is doing, you can run\nSpring explicitly in a separate terminal:\n\n    \n    \n    $ spring server\n\nLogging output will be printed to stdout. You can also send log output to a\nfile with the SPRING_LOG environment variable.\n\n## About\n\nRails application preloader\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\nCustom properties\n\n### Stars\n\n2.8k stars\n\n### Watchers\n\n85 watching\n\n### Forks\n\n335 forks\n\nReport repository\n\n## Releases 3\n\nv4.0.0 Latest\n\nDec 10, 2021\n\n\\+ 2 releases\n\n## Packages 0\n\nNo packages published\n\n## Used by 1.4m\n\n\\+ 1,413,162\n\n## Contributors 117\n\n\\+ 103 contributors\n\n## Languages\n\n  * Ruby 97.5%\n  * Dockerfile 2.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
