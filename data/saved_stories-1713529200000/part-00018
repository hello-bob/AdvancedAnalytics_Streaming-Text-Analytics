{"aid": "40083869", "title": "Coz: Causal Profiling", "url": "https://github.com/plasma-umass/coz", "domain": "github.com/plasma-umass", "votes": 2, "user": "keepamovin", "posted_at": "2024-04-19 06:09:59", "comments": 0, "source_title": "GitHub - plasma-umass/coz: Coz: Causal Profiling", "source_text": "GitHub - plasma-umass/coz: Coz: Causal Profiling\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nplasma-umass / coz Public\n\n  * Sponsor\n  * Notifications\n  * Fork 155\n  * Star 3.8k\n\nCoz: Causal Profiling\n\n### License\n\nView license\n\n3.8k stars 155 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# plasma-umass/coz\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n7 Branches\n\n5 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nemerybergerMerge pull request #226 from camelid/workMar 8, 20244659e50 \u00b7 Mar\n8, 2024Mar 8, 2024\n\n## History\n\n546 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Added.| Oct 6, 2021  \n  \n### benchmarks\n\n|\n\n### benchmarks\n\n| Fix error in benchmark| Mar 8, 2024  \n  \n### cmake\n\n|\n\n### cmake\n\n| Weakened version requirements for compatibility with the libelfin fork.| Aug\n11, 2022  \n  \n### docs\n\n|\n\n### docs\n\n| Added explanation of rst2man usage to create coz.1.| Aug 11, 2022  \n  \n### include\n\n|\n\n### include\n\n| Weak references didn't work with aliasing. Benchmarks are using the s...|\nAug 18, 2019  \n  \n### libcoz\n\n|\n\n### libcoz\n\n| Fix warning| Mar 8, 2024  \n  \n### patches\n\n|\n\n### patches\n\n| Patches for PARSEC benchmarks| Oct 7, 2019  \n  \n### rust\n\n|\n\n### rust\n\n| Updated.| Jul 1, 2023  \n  \n### viewer\n\n|\n\n### viewer\n\n| Adds native file select from @iacore with some mods (#219).| Jul 1, 2023  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Improve developer's first experience| Oct 28, 2021  \n  \n### .travis.yml\n\n|\n\n### .travis.yml\n\n| Restore custom \"script\" to run tests| Jan 9, 2021  \n  \n### CMakeLists.txt\n\n|\n\n### CMakeLists.txt\n\n| Bumped up version requirement.| Aug 11, 2022  \n  \n### LICENSE.md\n\n|\n\n### LICENSE.md\n\n| Updated licenses and copyright notices in source files. Fixes #51| Aug 10,\n2016  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Restored makefiles.| Jan 21, 2022  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Feb 23, 2024  \n  \n### common.mk\n\n|\n\n### common.mk\n\n| Restored makefiles.| Jan 21, 2022  \n  \n### conanfile.txt\n\n|\n\n### conanfile.txt\n\n| Build with CMake| Jan 8, 2021  \n  \n### coz\n\n|\n\n### coz\n\n| Use webbrowser, launch plot in separate thread.| Jan 21, 2022  \n  \n### coz-profilerConfig.cmake.in\n\n|\n\n### coz-profilerConfig.cmake.in\n\n| Restored.| Jan 21, 2022  \n  \n### example-coz-output.png\n\n|\n\n### example-coz-output.png\n\n| Smaller.| Sep 4, 2022  \n  \n## Repository files navigation\n\n# Coz: Finding Code that Counts with Causal Profiling\n\nby Charlie Curtsinger and Emery Berger\n\nCoz is a profiler for native code (C/C++/Rust) that unlocks optimization\nopportunities missed by traditional profilers. Coz employs a novel technique\ncalled causal profiling that measures optimization potential. It predicts what\nthe impact of optimizing code will have on overall throughput or latency.\n\nProfiles generated by Coz show the \"bang for buck\" of optimizing a line of\ncode in an application. In the below profile, almost every effort to optimize\nthe performance of this line of code directly leads to an increase in overall\nperformance, making it an excellent candidate for optimization efforts.\n\nCoz's measurement matches developers' assumptions about profilers: that\noptimizing highly-ranked code will have the greatest impact on performance.\nCausal profiling measures optimization potential for serial, parallel, and\nasynchronous programs without instrumentation of special handling for library\ncalls and concurrency primitives. Instead, a causal profiler uses performance\nexperiments to predict the effect of optimizations. This allows the profiler\nto establish causality: \"optimizing function X will have effect Y,\" exactly\nthe measurement developers had assumed they were getting all along.\n\nFull details of Coz are available in our paper, Coz: Finding Code that Counts\nwith Causal Profiling (pdf), SOSP 2015, October 2015 (recipient of a Best\nPaper Award).\n\n## Installation\n\nOn Debian and Ubuntu, you can install Coz via apt:\n\n    \n    \n    sudo apt install coz-profiler\n\nAn OpenSUSE package was prepared by user @zethra and is available at\nhttps://build.opensuse.org/package/show/home:zethra/coz-profiler.\n\nCoz should work on any modern Linux system (specifically, running version\n2.6.32 or later, with support for the perf_event_open system call) with a\nPython 3.x interpreter.\n\n## Libraries/Wrappers\n\nBy default, Coz works for C, C++, and Rust programs. It has been ported or has\nwrappers for several other languages, listed below:\n\nLanguage| Link  \n---|---  \nJava| JCoz: https://github.com/Decave/JCoz  \nGo| Cozgo: https://github.com/urjitbhatia/cozgo  \nSwift| Swift Coz: https://github.com/funcmike/swift-coz  \n  \n## Building Coz From Source\n\nTo build Coz from source, you will need:\n\n  * A copy of the source code for this project\n  * A compiler with C++0x support (clang++ or g++)\n  * A Python interpreter (Python 3.x is required)\n  * OPTIONAL: for building the profiler viewer, you need NodeJS and npm -- sudo apt-get install nodejs npm\n\nOnce you have all dependencies in place, build Coz with CMake. On Debian-based\ndistributions, the following commands should take care of the entire process:\n\n    \n    \n    sudo apt-get update sudo apt-get install libdwarf-dev sudo apt-get install build-essential cmake docutils-common git python3 pkg-config git clone https://github.com/antoyo/libelfin && cd libelfin && make && sudo make install && cd .. git clone https://github.com/plasma-umass/coz && cd coz && cmake . && make && sudo make install && cd ..\n\nNext, you need to change the \"perf_event_paranoia\" level so Coz can run.\n\n    \n    \n    sudo sh -c 'echo 1 >/proc/sys/kernel/perf_event_paranoid'\n\nNow you can test Coz. Build the benchmark suite and run one of the benchmarks\n(the SQLite3 benchmark takes a while to build).\n\n    \n    \n    sudo apt-get install libbz2-dev libsqlite3-dev cd coz/benchmarks && cmake . && make && cd ../.. coz run --- ./coz/benchmarks/toy/toy\n\nFinally, use the Coz viewer to see the results. This command will open up a\nbrowser tab, from which you will need to load the file profile.coz.\n\n    \n    \n    coz plot\n\nIf you are on a remote system, you can open the Coz viewer in your browser:\nhttps://plasma-umass.github.io/coz and then load the file profile.coz, which\nyou will have to transfer to your local machine.\n\n(You may need to move the \"Minimum Points\" slider on the left side to see the\nresults.)\n\n## Using Coz\n\nUsing Coz requires a small amount of setup, but you can jump ahead to the\nsection on the included sample applications in this repository if you want to\ntry Coz right away.\n\nTo run your program with Coz, you will need to build it with debug information\n(-g -gdwarf-3). You do not need to include debug symbols in the main\nexecutable: coz uses the same procedure as gdb to locate debug information for\nstripped binaries.\n\nOnce you have your program built with debug information, you can run it with\nCoz using the command coz run {coz options} --- {program name and arguments}.\nBut, to produce a useful profile you need to decide which part(s) of the\napplication you want to speed up by specifying one or more progress points.\n\n### Profiling Modes\n\nCoz departs from conventional profiling by making it possible to view the\neffect of optimizations on both throughput and latency. To profile throughput,\nyou must specify a progress point. To profile latency, you must specify a pair\nof progress points.\n\n#### Throughput Profiling: Specifying Progress Points\n\nTo profile throughput you must indicate a line in the code that corresponds to\nthe end of a unit of work. For example, a progress point could be the point at\nwhich a transaction concludes, when a web page finishes rendering, or when a\nquery completes. Coz then measures the rate of visits to each progress point\nto determine any potential optimization's effect on throughput.\n\nTo place a progress point, include coz.h (under the include directory in this\nrepository) and add the COZ_PROGRESS macro to at least one line you would like\nto execute more frequently. Don't forget to link your program with libdl: use\nthe -ldl option.\n\nBy default, Coz uses the source file and line number as the name for your\nprogress points. If you use COZ_PROGRESS_NAMED(\"name for progress point\")\ninstead, you can provide an informative name for your progress points. This\nalso allows you to mark multiple source locations that correspond to the same\nprogress point.\n\n#### Latency Profiling: Specifying Progress Points\n\nTo profile latency, you must place two progress points that correspond to the\nstart and end of an event of interest, such as when a transaction begins and\ncompletes. Simply mark the beginning of a transaction with the\nCOZ_BEGIN(\"transaction name\") macro, and the end with the COZ_END(\"transaction\nname\") macro. Unlike regular progress points, you always need to specify a\nname for your latency progress points. Don't forget to link your program with\nlibdl: use the -ldl option.\n\nWhen coz tests a hypothetical optimization it will report the effect of that\noptimization on the average latency between these two points. Coz can track\nthis information without any knowledge of individual transactions thanks to\nLittle's Law.\n\n### Specifying Progress Points on the Command Line\n\nCoz has command line options to specify progress points when profiling the\napplication instead of modifying its source. This feature is currently\ndisabled because it did not work particularly well. Adding support for better\ncommand line-specified progress points is planned in the near future.\n\n## Processing Results\n\nTo plot profile results, go to http://plasma-umass.github.io/coz/ and load\nyour profile. This page also includes several sample profiles from PARSEC\nbenchmarks.\n\n## Sample Applications\n\nThe benchmarks directory in this repository includes several small benchmarks\nwith progress points added at appropriate locations. To build and run one of\nthese benchmarks with coz, just browse to benchmarks/{bench name} and type\ncmake . && make. These programs may require several runs before coz has enough\nmeasurements to generate a useful profile. Once you have profiled these\nprograms for several minutes, go to http://plasma-umass.github.io/coz/ to load\nand plot your profile.\n\n## CMake\n\nWhen you install coz it installs a cmake config file. To add coz to a cmake\nproject simply use the command find_package(coz-profiler). This will import a\ntarget for the library and includes called coz::coz and a target for the coz\nbinary coz::profiler. For guidance on how to use these targets refer to the\nCMake documentation.\n\n## Limitations\n\nCoz currently does not support interpreted or JIT-compiled languages such as\nPython, Ruby, or JavaScript. Interpreted languages will likely not be\nsupported at any point, but support for JIT-compiled languages that produce\ndebug information could be added in the future.\n\n## License\n\nAll source code is licensed under the BSD 2-clause license unless otherwise\nindicated. See LICENSE.md for details.\n\nSample applications (in the benchmarks directory) include several Phoenix\nprograms and pbzip2, which are licensed separately and included with this\nrelease for convenience.\n\n## About\n\nCoz: Causal Profiling\n\n### Topics\n\nperformance-engineering profiler optimization performance-analysis causal-\ninference\n\n### Resources\n\nReadme\n\n### License\n\nView license\n\nActivity\n\nCustom properties\n\n### Stars\n\n3.8k stars\n\n### Watchers\n\n70 watching\n\n### Forks\n\n155 forks\n\nReport repository\n\n## Releases 4\n\nlatest update for Debian Latest\n\nAug 31, 2020\n\n\\+ 3 releases\n\n## Sponsor this project\n\nplasma-umass PLASMA @ UMass\n\nSponsor\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Used by 314\n\n\\+ 306\n\n## Contributors 35\n\n\\+ 21 contributors\n\n## Languages\n\n  * C 96.7%\n  * C++ 2.3%\n  * JavaScript 0.4%\n  * TypeScript 0.3%\n  * CMake 0.1%\n  * Rust 0.1%\n  * Other 0.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
