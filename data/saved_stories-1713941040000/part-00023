{"aid": "40138233", "title": "Tmate: Instant Terminal Sharing", "url": "https://tmate.io/", "domain": "tmate.io", "votes": 1, "user": "anotherpaulg", "posted_at": "2024-04-23 22:47:09", "comments": 0, "source_title": "tmate \u2022 Instant terminal sharing", "source_text": "tmate \u2022 Instant terminal sharing\n\n# tmate\n\n## Instant terminal sharing\n\n### Launch\n\n### Share\n\n### Pair\n\n## Installation\n\ntmate is a fork of tmux. tmate and tmux can coexist on the same system.\n\n  * macOS\n  * Ubuntu\n  * Fedora\n  * openSUSE\n  * FreeBSD\n  * OpenBSD\n  * Gentoo\n  * ArchLinux\n  * OpenWrt\n  * Static Builds\n  * Source\n\n    \n    \n    brew install tmate\n\nNote: Homebrew is required as a prerequisite.\n\n    \n    \n    sudo apt-get install tmate\n    \n    \n    sudo dnf install tmate\n\nThe Fedora packages are maintained by Andreas Schneider.\n\n    \n    \n    sudo zypper install tmate\n\nPackage available on openSUSE Tumbleweed and Leap. On SUSE Linux Enterprise,\nyou need to activate the Package Hub Extension first.\n\n    \n    \n    pkg install tmate\n\nThe FreeBSD packages are maintained by Steve Wills.\n\n    \n    \n    pkg_add tmate\n\nThe OpenBSD packages are maintained by Wesley Mouedine Assaby.\n\n    \n    \n    emerge -a app-misc/tmate\n\nPackage information: https://packages.gentoo.org/packages/app-misc/tmate.\n\n    \n    \n    pacman -S tmate\n\nThe ArchLinux package is maintained by Christian Hesse.\n\n    \n    \n    opkg install tmate\n\nThe OpenWrt package is maintained by Tianling Shen.\n\nWe provide i386, x86_64, arm32v6, arm32v7, and arm64v8 linux static builds for\nconvenience.\n\nBinaries can be found on the GitHub release page. The binaries are built using\nthe build_static_release.sh script in the tmate source directory.\n\nSources are on GitHub: https://github.com/tmate-io/tmate\n\nDownload, compile, and install with the following steps:\n\n    \n    \n    git clone https://github.com/tmate-io/tmate.git cd tmate ./autogen.sh ./configure make make install\n\nA few dependencies are required. The Ubuntu package names are: git-core build-\nessential pkg-config libtool libevent-dev libncurses-dev zlib1g-dev automake\nlibssh-dev libmsgpack-dev\n\n## Usage\n\n  * Once installed, launch tmate with tmate. You should see something like ssh PMhmes4XeKQyBR2JtvnQt6BJw@nyc1.tmate.io appearing. This allows others to join your terminal session. All users see the same terminal content at all time. This is useful for pair programming where two people share the same screen, but have different keyboards.\n\n  * tmate is useful as it goes through NATs and tolerate host IP changes. Accessing a terminal session is transparent to clients as they go through the tmate.io servers, acting as a proxy. No authentication setup is required, like setting up ssh keys.\n\n  * Run tmate show-messages in your shell to see tmate's log messages, including the ssh connection string.\n\n  * tmate also allow you to share a read-only view of your terminal. The read-only connection string can be retrieved with tmate show-messages.\n\n  * tmate uses ~/.tmate.conf as configuration file. It uses the same tmux syntax. In order to load the ~/.tmux.conf configuration file, add source-file ~/.tmux.conf in the tmate configuration file.\n\n## Remote access\n\nWhen tmate is used for remote access only (as opposed to pair programming), it\nis useful to launch tmate in foreground mode with tmate -F. This does two\nthings:\n\n  * It only starts the server side of tmate and outputs its log on stdout (as opposed to showing the session shell, useful for pair programming). This makes it easy to integrate into a service manager like systemd or kubernetes.\n\n  * It ensure the session never dies, by respawning a shell when it exits.\n\nIf you wish to specify the program to run as a shell, run tmate -F new-session\n[command...]. For example, to have a rails console (it's a popular web\nframework) accessible with a named session (see next section), one can run:\n\n    \n    \n    tmate -F -n web new-session rails console\n\nYou can think of tmate as a reverse ssh tunnel accessible from anywhere.\n\n## Named sessions\n\nTypically, tmate generates random connection strings which are not stable\nacross restarts, like ssh vbBK63dtemNN2ppDUqSvYNqbD@nyc1.tmate.io. This can be\na problem for accessing remote machines. One way to deal with connection\nstring instability is to use tmate Webhooks, but this requires some effort to\nintegrate.\n\nAnother way is to use named sessions: by specifying a session name, the\nconnection string becomes ssh username/session-name@nyc1.tmate.io which is\ndeterministic. The username is specified when registering for an API key (see\nbelow) and the session name is specified as follows:\n\n  * From the CLI:\n    \n        tmate -k API_KEY -n session-name\n\n  * Or from the ~/.tmate.conf file:\n    \n        set tmate-api-key \"API_KEY\" set tmate-session-name \"session-name\"\n\nIt is possible put the API key in the tmate configuration file, and specify\nthe session name on the CLI.\n\nTo specify the read-only session name, you may use the CLI option -r, or the\nconfiguration option tmate-session-name-ro.\n\nIf you get the error illegal option -- n, ensure you are running tmate greater\nthan 2.4.0. You can check what tmate version you have by running: tmate -V. If\nyour tmate version is too old, scroll up to the installation section.\n\nWarning: access control must be considered when using named sessions, see next\nsection.\n\nFill the following form to get an API key and start naming your sessions\n\n### API key registration\n\n## Access control\n\nWhen using named sessions, access control is a concern as session names can be\neasy to guess if one is not careful. There are two ways to do access control:\n\n  * Use hard to guess session names. For example machine1-3V6txGYUgglA. This makes the session name hard to guess, like a password.\n\n  * Only allow SSH clients with specific public keys to connect to the session. To do so, create an authorized_keys file containing public keys that are allowed to connect. In this example, we'll reuse the one sshd uses, namely ~/.ssh/authorized_keys. Then, specify the authorized keys file via the tmate CLI using -aas such:\n    \n        tmate -a ~/.ssh/authorized_keys\n\nThe authorized keys file can also be specified in the ~/.tmate.conf\nconfiguration file with:\n\n    \n        set tmate-authorized-keys \"~/.ssh/authorized_keys\"\n\nNote that specifying an authorized keys file will disable web access.\n\n## Host your own tmate servers\n\nYou can use the following docker image tmate/tmate-ssh-server. Note that you\nwill need to create SSH keys using create_keys.sh(see below).\n\nAlternatively, you can compile the ssh server from source located at\nhttps://github.com/tmate-io/tmate-ssh-server.\n\ntmate also depends on a couple of packages. On Ubuntu, the packages are: git-\ncore build-essential pkg-config libtool libevent-dev libncurses-dev zlib1g-dev\nautomake libssh-dev cmake ruby\n\nOnce all the prerequisites are satisfied, you can install tmate-ssh-server\nwith:\n\n    \n    \n    git clone https://github.com/tmate-io/tmate-ssh-server.git && cd tmate-ssh-server ./create_keys.sh # This generates SSH keys ./autogen.sh && ./configure && make sudo ./tmate-ssh-server\n\nOnce your server is running, you must configure the clients to use your custom\nserver. You may specify your custom options in the ~/.tmate.conf file. Here\nare the default options:\n\n    \n    \n    set -g tmate-server-host \"ssh.tmate.io\" set -g tmate-server-port 22 set -g tmate-server-rsa-fingerprint \"SHA256:Hthk2T/M/Ivqfk1YYUn5ijC2Att3+UPzD7Rn72P5VWs\" set -g tmate-server-ed25519-fingerprint \"SHA256:jfttvoypkHiQYUqUCwKeqd9d1fJj/ZiQlFOHVl6E9sI\"\n\nIf you are interested in fault tolerance, you should setup the tmate-server-\nhost host to resolve to multiple IPs. The tmate client will try them all, and\nkeep to the most responsive one. ssh.tmate.io resolves to servers located in\nSan Francisco, New York, London, and Singapore.\n\nTo support named sessions, at this moment you must self-host the websocket\nserver as well. This is because the session unix sockets must be renamed, but\nthe jail make it difficult. You may follow the kubernetes configuration used\nfor tmate.io at github.com/tmate-io/tmate-kube/prod.\n\n## Development environment\n\nTo faciliate developing, we run all the various tmate services with tilt. It's\na tool like docker compose, but with features like live update. When a source\nfile changes, it is immediately copied into the corresponding container and\nrecompiled on the fly. This feature is very useful for developing.\n\nHere at the steps to setup the tmate dev environment:\n\n    \n    \n    # macOS specific. On linux you can use microk8 instead of minikube brew install minikube tilt minikube start # Install sources git clone https://github.com/tmate-io/tmate-ssh-server.git git clone https://github.com/tmate-io/tmate-websocket.git git clone https://github.com/tmate-io/tmate-master.git git clone https://github.com/tmate-io/tmate-kube.git # Compile and run the tmate servers in a local kubernetes environment cd tmate-kube/dev eval $(minikube docker-env) tilt up # Create the postgres database and do database migrations kubectl exec -it deploy/master mix do ecto.create, ecto.migrate # Finally, configure tmate to use the local dev environment cat >> ~/.tmate.conf <<-EOF set tmate-server-host localhost set tmate-server-port 2200 set -g tmate-server-rsa-fingerprint \"SHA256:pj6jMtCIgg26eJtHUro6KEmVOkVGmLdclArInW9LyLg\" set -g tmate-server-ed25519-fingerprint \"SHA256:ltQuqZqoF1GHYrrAVd99jW8W7vj/1gwoBwBF/FC9iuU\" EOF\n\nAt this point you should be able to navigate to http://localhost:4000 and see\nthe tmate homepage. You should also be able to run tmate and a local\nconnection string should appear.\n\n## Technical Details\n\nWarning: this information is outdated. A more up to date technical draft can\nbe found here [PDF], but is still outdated. Sorry :(\n\n#### Connection process\n\nWhen launching tmate, an ssh connection is established to tmate.io (or your\nown server) in the background through libssh. The server ssh key signatures\nare specified upfront and are verified during the DH exchange to prevent man\nin the middle attacks.\n\nWhen a connection is established, a 150 bits session token is generated, then\na tmux server is spawned in a jail with no file system, with its own PID\nnamespace to isolate the server from other processes, and no user privileges.\nTo allow this, all files required during the tmux server execution are opened\nbefore getting jailed. These measures are in place to limit the usefulness of\npossible exploits targeting the tmux server. The attacker would not be able to\naccess other sessions, ensuring confidentiality.\n\nWhen an ssh client connects to tmate.io (or your own server), the tmux unix\nsocket is looked up on the file system. On lookup failures, a random sleep is\nperformed to prevent timing attacks, otherwise a tmux client is spawned and\nconnected to the remote tmux server.\n\n#### Protocol\n\nThe local and remote tmux servers communicate with a protocol on top of\nmsgpack, which is gzipped over ssh for network bandwidth efficiency as vim\nscrolling can generate massive amounts of data.\n\nIn order to keep the remote tmux server in sync with the local tmux server,\nPTY window pane's raw outputs are streamed individually as opposed to\nsynchronizing the entire tmux window. Furthermore, window layouts, status bar\nchanges, and copy mode state are also replicated. Finally, most of the tmux\ncommands (like bind-key) are replicated. This ensures that the key bindings\nare the same on both side.\n\nThe remote client's keystrokes are parsed and the outcome is sent to the local\ntmux server. This includes tmux commands such as split-window, window pane\nkeystrokes, or window size information.\n\n#### Future work\n\nThis project can take many interesting directions. Here is what I have on the\nroadmap:\n\n  * Improve the headless experience. This is useful for managing a fleet of devices.\n  * Make the user experience top notch. Please submit bug reports when you see issues.\n  * Tolerate network failures. Dealing with reconnections and roaming (IP changes) similarly to what Mosh offers.\n  * Support for read-only clients. This would be easy to do by providing another session token, distinct from the read-write access one.\n  * Getting low latencies for everyone requires having nodes spread out all over the globe.\n\n## Get in touch\n\nIf you'd like to get in touch, here are your options:\n\n  * Submit bug reports on GitHub: https://github.com/tmate-io/tmate/issues.\n  * Post a message on Google Groups: https://groups.google.com/group/tmate-io.\n  * Or send an email to tmate-io@googlegroups.com.\n  * You can also send me a personal email at nico@tmate.io.\n\nEnjoy, Nico\n\n", "frontpage": false}
