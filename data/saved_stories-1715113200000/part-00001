{"aid": "40284063", "title": "Object Linking and Embedding", "url": "https://en.wikipedia.org/wiki/Object_Linking_and_Embedding", "domain": "wikipedia.org", "votes": 2, "user": "fidotron", "posted_at": "2024-05-07 10:36:02", "comments": 0, "source_title": "Object Linking and Embedding", "source_text": "Object Linking and Embedding - Wikipedia\n\nJump to content\n\nSearch\n\nWiki Loves Earth\n\nPhotograph nature for Wikipedia and win!\n\n# Object Linking and Embedding\n\n  * \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\n  * Deutsch\n  * Espa\u00f1ol\n  * Fran\u00e7ais\n  * \ud55c\uad6d\uc5b4\n  * Bahasa Indonesia\n  * Italiano\n  * \u05e2\u05d1\u05e8\u05d9\u05ea\n  * Kurd\u00ee\n  * Magyar\n  * Nederlands\n  * \u65e5\u672c\u8a9e\n  * Polski\n  * Portugu\u00eas\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n  * Ti\u1ebfng Vi\u1ec7t\n  * \u4e2d\u6587\n\nEdit links\n\nFrom Wikipedia, the free encyclopedia\n\nTechnology developed by Microsoft\n\nThis article needs additional citations for verification. Please help improve\nthis article by adding citations to reliable sources. Unsourced material may\nbe challenged and removed. Find sources: \"Object Linking and Embedding\" \u2013 news\n\u00b7 newspapers \u00b7 books \u00b7 scholar \u00b7 JSTOR (April 2010) (Learn how and when to\nremove this message)  \n---  \n  \nObject Linking & Embedding (OLE) is a proprietary technology developed by\nMicrosoft that allows embedding and linking to documents and other objects.\nFor developers, it brought OLE Control Extension (OCX), a way to develop and\nuse custom user interface elements. On a technical level, an OLE object is any\nobject that implements the IOleObject interface, possibly along with a wide\nrange of other interfaces, depending on the object's needs.\n\n## Overview[edit]\n\nOLE allows an editing application to export part of a document to another\nediting application and then import it with additional content. For example, a\ndesktop publishing system might send some text to a word processor or a\npicture to a bitmap editor using OLE. The main benefit of OLE is to add\ndifferent kinds of data to a document from different applications, like a text\neditor and an image editor. This creates a Compound File Binary Format\ndocument and a master file to which the document makes reference. Changes to\ndata in the master file immediately affect the document that references it.\nThis is called \"linking\" (instead of \"embedding\").\n\nOLE is also used for transferring data between different applications using\ndrag and drop and clipboard operations.\n\n## History[edit]\n\n### OLE 1.0[edit]\n\nOLE 1.0, released in 1990, was an evolution of the original Dynamic Data\nExchange (DDE) concept that Microsoft developed for earlier versions of\nWindows. While DDE was limited to transferring limited amounts of data between\ntwo running applications, OLE was capable of maintaining active links between\ntwo documents or even embedding one type of document within another.\n\nOLE servers and clients communicate with system libraries using virtual\nfunction tables, or VTBLs. The VTBL consists of a structure of function\npointers that the system library can use to communicate with the server or\nclient. The server and client libraries, OLESVR.DLL and OLECLI.DLL, were\noriginally designed to communicate between themselves using the WM_DDE_EXECUTE\nmessage.\n\nOLE 1.0 later evolved to become an architecture for software components known\nas the Component Object Model (COM), and later DCOM.\n\nWhen an OLE object is placed on the clipboard or embedded in a document, both\na visual representation in native Windows formats (such as a bitmap or\nmetafile) is stored, as well as the underlying data in its own format. This\nallows applications to display the object without loading the application used\nto create the object, while also allowing the object to be edited, if the\nappropriate application is installed.\n\nThe Object Packager, a component of OLE, shipping from Windows 3.1 up to\nWindows XP allows a non-OLE object to be \"packaged\" so it can be embedded into\nan OLE client.\n\n### OLE 2.0[edit]\n\nOLE 2.0 was the next evolution of OLE, sharing many of the same goals as\nversion 1.0, but was re-implemented on top of the COM instead of using VTBLs\ndirectly. New features were OLE automation, drag-and-drop, in-place activation\nand structured storage. Monikers evolved from OLE 1 object names, and provided\na hierarchical object and resource naming system similar to URLs or URIs,\nwhich were independently invented. Windows now has merged the two technologies\nsupporting a URL Moniker type, and a Moniker URL scheme.\n\n### OLE custom controls[edit]\n\nOLE custom controls were introduced in 1994 as a replacement for the now\ndeprecated Visual Basic Extension controls. Instead of upgrading these, the\nnew architecture was based on OLE. In particular, any container that supported\nOLE 2.0 could already embed OLE custom controls, although these controls\ncannot react to events unless the container supports this. OLE custom controls\nare usually shipped in the form of a dynamic link library with the .ocx\nextension. In 1996 all interfaces for controls (except IUnknown) were made\noptional to keep the file size of controls down, so they would download\nfaster; these were then called ActiveX Controls.\n\n## Technical details[edit]\n\nOLE objects and containers are implemented on top of the Component Object\nModel; they are objects that can implement interfaces to export their\nfunctionality. Only the IOleObject interface is compulsory, but other\ninterfaces may also need to be implemented if the functionality exported by\nthose interfaces is required.\n\nTo ease understanding of what follows, some terminology has to be explained.\nThe view status of an object is whether the object is transparent, opaque, or\nopaque with a solid background, and whether it supports drawing with a\nspecified aspect. The site of an object is an object representing the location\nof the object in its container. A container supports a site object for every\nobject contained.\n\nWhat follows is a list of interfaces, grouped by the object that usually needs\nto implement them. Interfaces usually implemented by the OLE object are\nusually called on by the OLE container, and vice versa. Note that in the\nfollowing list indentation indicates interface inheritance. All non-indented\ninterfaces derive from IUnknown.\n\n### OLE object[edit]\n\nDataObject\n\n    When implemented, enables the transfer of data, and notification of data changes. It must be implemented by objects that are to support drag-and-drop, being copied to or pasted from the clipboard, or being linked or embedded in a containing document.\nObjectWithSite\n\n    Allows the caller to inform the OLE object of its site. This functionality is also provided by OleObject, but ObjectWithSite can be used, when supported, if OleObject is not used for other matters.\nOleCache\n\n    Allows visual presentations from a DataObject to be cached. This allows an embedded object to store its visual representation, thus enabling it to be displayed later without needing to start the application that was used to create the object.\n    \n\nUsually the stock implementation is used.\n\nOleCache2\n\n    Provides more fine-grained control over caching.\n    Usually the stock implementation is used.\n\nOleCacheControl\n\n    This interface is not called by the container, but internally by the object to allow it to receive notifications of when its DataObject is running, thereby allowing it to subscribe to notifications of data changes of that object and thus allowing it to update the cached presentation properly.\n    Usually the stock implementation is used.\nOleDocument\n\n    Allows the OLE object to support multiple views of its data, as well as a few related functions.\nOleDocumentView\n\n    A document object (an object that implements OleDocument) implements this interface for every view. It allows the caller to set the site of the object, query and set the size of the object and to show and activate it, as well as some related functions.\nOleWindow\n\n    \n\nOleInPlaceActiveObject\n\n    Called by the outermost container of an object to interact with it while it's active, e.g. to process accelerator keys in the container's message queue that are meant for the contained object.\nOleInPlaceObject\n\n    \n\nCalled by the container to activate or deactivate the object.\n\nIOleInPlaceObjectWindowless\n\n    A windowless object is an object that doesn't have its own window but it instead displayed in its container's window. It is used by the container to relay messages received by the container's window that are intended for the contained object. For example, if the mouse is moved over a window, Windows places a mouse move message along with the mouse coordinates in the message queue of the window. If this window contains windowless embedded objects, the message may have to be relayed to such an object if the coordinates of the mouse-pointer are over this object. For similar reasons this interface also provides access to the object's DropTarget interface.\n\nOleLink\n\n    Allows the object to support linking, e.g. by allowing the container to set the source of a linked object.\n    Usually the stock implementation is used.\nOleObject\n\n    Arguably the most important interface for an OLE object. For example, it allows the container to inform the object of its site, initialize the object from data, to open and close it, to query and set the size of the object, to ask for notifications on the container's AdviseSink and to execute objects defined as \"verbs\" on the object. These verbs often include \"Open\" or \"Edit\", but can also include other verbs. One of the verbs is defined to be the principal verb, and it is executed when the user double-clicks an object.\nViewObject\n\n    \n\nAllows an object to draw itself directly, without passing a DataObject to the\ncontainer. For objects that support both DataObject and this interface, the\nunderlying implementation is usually shared.\n\nViewObject2\n\n    \n\nAdditionally allows the caller to query the size of the object.\n\nViewObjectEx\n\n    Adds support for flicker-free drawing of transparent objects, hit-testing for objects with irregular shapes and setting the size of an object.\n\n### OLE container[edit]\n\nIAdviseSink\n\n    \n\nAllows the implementer to receive notifications when the object is saved,\nclosed, or renamed, or when its data or visual presentation changes.\n\nIAdviseSink2\n\n    Additionally allows the implementer to receive notifications when the link source of the OLE object changes.\nIAdviseSinkEx\n\n    Additionally allows the implementer to receive notifications when the view status of the OLE object changes.\n\nIOleClientSite\n\n    This interface allows the caller to obtain information on the container and location of an object, as well requesting that the object be saved, resized, shown, hidden, et cetera.\nIOleDocumentSite\n\n    Allows the caller to ask for the object on this site to be activated immediately. If this interface is implemented, IOleClientSite, IOleInPlaceSite and IAdviseSink must be implemented as well.\nIOleContainer\n\n    This interface allows the caller to enumerate embedded objects in a container, or to find such objects by name. It is primarily useful if the container wishes to support links to embedded objects.\nIOleWindow\n\n    \n\nIOleInPlaceUIWindow\n\n    \n\nEnables embedded objects to negotiate space for toolbars on the container's\nwindow.\n\nIOleInPlaceFrame\n\n    Allows the caller to ask the container to insert its menu items in an empty menu that will become the cooperative menu. Also allows the caller to ask the container to show or hide this menu, to show or hide dialog boxes, and to process accelerator keys received by the contained object intended for the container.\n\nIOleInPlaceSite\n\n    \n\nIf a container implements this interface, it allows embedded objects to be\nactivated in place, i.e. without opening in a separate window. It provides\naccess to the container's IOleInPlaceUIWindow.\n\nIOleInPlaceSiteEx\n\n    \n\nIf a container implements this interface, it allows embedded objects to check\nwhether they need to redraw on activation or deactivation. It also allows them\nto request their UI to activate.\n\nIOleInPlaceSiteWindowless\n\n    If a container wishes to support windowless embedded objects, it needs to provide functionality to embedded objects to replace the functionality normally provided by an embedded object's window. For example this interface provides a way to access the container's window's device context, thereby enabling the embedded object to draw in the container's window.\n\nIOleUILinkContainer\n\n    \n\nContains the methods that the standard OLE dialog boxes that manage linked\nobjects use to update linked objects in a container, or to query and change\ntheir sources. Used by the \"Links\", \"Change source\", \"Update links\" and\n\"Object properties\" dialog boxes.\n\nIOleUILinkInfo\n\n    Additionally allows the dialog boxes to query when linked objects were last updated, and whether this was done automatically or manually.\nIOleUIObjInfo\n\n    Contains the methods needed by the \"Object properties\" dialog box. For example if the user opens the \"Object properties\" dialog box and asks for the object to be converted to another type, a method on this interface is called.\n\nIOleUndoManager\n\n    Provides a centralized undo service to both the container itself and to embedded objects. When an undoable action is performed, an IOleUndoUnit is created and added to the IOleUndoManager\n\n### Other[edit]\n\nIDataAdviseHolder\n\n    The methods of IDataObject that pertain to data change notifications can be implemented by calling the methods of this interface.\n    Usually the stock implementation is used.\nIOleAdviseHolder\n\n    The methods of IOleObject that pertain to notifications can be implemented by calling the methods of this interface.\n    Usually the stock implementation is used.\nIDropSource\n\n    Implemented by objects that can be dragged, i.e. that can be the source of a drag-and-drop operations. When implemented it allows the object to draw drag-and-drop effects, and to specify when the object is dropped, or the drag-and-drop operation is cancelled.\nIDropTarget\n\n    Implemented by objects that accept dropped objects, i.e. that can be the target of drag-and-drop operations. When implemented it allows the target to specify if a dropped object will be accepted, and what happens to an object after it is dropped.\nIOleCommandTarget\n\n    Can be implemented by objects (OLE objects, OLE containers, and other objects) that wish to support certain standard commands. It allows callers to query if commands are supported, and to execute commands. Commands that an object might typically wish to implement may include things like \"delete\", \"cut\", \"copy\", \"paste\", \"undo\", \"find\", \"print\", \"save\", \"zoom\", and so on. Currently 58 standard commands have been defined, and they include commands commonly used by office software, web browsers and similar applications.\nIOleUndoUnit\n\n    \n\nRepresents an action that can be undone. It contains all information necessary\nto undo an action. It is created by objects and containers, so that undoable\nactions can be added to the container's IOleUndoManager.\n\nIOleParentUndoUnit\n\n    Allows an undo unit to contain other undo units. In essence this allows the undo unit to act as an undo stack, grouping undo units together. For example, if a macro is run, all undo-able actions performed by the macro may be grouped together in one undo unit.\n\nIOleWindow\n\n    This interface represents a window of a container or contained object. It allows callers to obtain the handle of the window, and to toggle the context-sensitive help function. When the context-sensitive help function is turned on, typically the mouse-pointer changes to an arrow with a question mark to indicate that clicking a user interface element will result in opening a help window.\n\n## Competition[edit]\n\nOpenDoc technology tried to compete with OLE. Some of Microsoft's competitors\nconsidered OpenDoc to be more robust and easier to use; however, OpenDoc does\nhave some known problems. OpenDoc allowed users to view and edit information\nacross applications, directly in competition with Microsoft's proprietary OLE\nstandard. In 1993 some Microsoft competitors established a consortium called\nthe Component Integration Laboratories (\"CIL\") to develop OpenDoc as an open\nstandard for cross-platform linking and embedding.\n\nMicrosoft required OLE compatibility as a condition of Microsoft's\ncertification of an application's compatibility with Windows 95. Microsoft\ninitially announced that applications using OpenDoc would be deemed compatible\nwith OLE, and would receive certification for Windows 95. Microsoft later\nreversed the decision and said that applications using OpenDoc might not\nreceive certification at all. Microsoft withheld specifications and debugged\nversions of OLE until after it had released its competing applications.\n\n## Interoperability[edit]\n\nUse of OLE objects limits interoperability, because these objects are not\nwidely supported in programs for viewing or editing files outside of Microsoft\nWindows (e.g., embedding of other files inside the file, such as tables or\ncharts from a spreadsheet application in a text document or presentation\nfile).^[1]^[2]^[3]^[4] If software that understands an OLE object is not\navailable, the object is usually replaced by a picture (bitmap representation\nof the object) or not displayed at all.^[5]^[6]^[7]\n\n## See also[edit]\n\n  * OLE Automation\n  * OLE for process control (OPC)\n  * Component Object Model (COM)\n  * Distributed Component Object Model (DCOM)\n  * Dynamic Data Exchange (DDE)\n  * Publish and Subscribe (Mac OS)\n  * Internet media type\n  * Multipurpose Internet Mail Extensions (MIME)\n  * Shscrap.dll (shell scrap files)\n\n## References[edit]\n\n  1. ^ Byfield, Bruce (2005-08-23). \"FOSS word processors compared: OOo Writer, AbiWord, and KWord\". Linux.com. The Linux Foundation. Archived from the original on 2020-11-06. Retrieved 2020-09-29.\n  2. ^ Byfield, Bruce (2005-07-28). \"Sharing files between OpenOffice.org and Microsoft Office\". Linux.com. The Linux Foundation. Archived from the original on 2020-11-06. Retrieved 2020-09-29.\n  3. ^ Sharma, Mayank (2008-11-20). \"SoftMaker Office 2008 focuses on compatibility with Microsoft Office\". Linux.com. The Linux Foundation. Archived from the original on 2020-11-06. Retrieved 2020-09-29.\n  4. ^ Lagadec, Philippe (2006-11-30). \"OpenOffice / OpenDocument and Microsoft Office 2007 / Open XML security\" (PDF). PacSec 2006 Conference. Archived (PDF) from the original on 2011-07-22. Retrieved 2020-09-29.\n  5. ^ Gong, Rhett (2005-09-05). \"RE: OLE object - bitmap representation?\". Newsgroup: microsoft.public.win32.programmer.ole. Usenet: iZFkEiesFHA.1204@TK2MSFTNGXA01.phx.gbl. Retrieved 2020-09-29.\n  6. ^ O'Neill, Mike (2005-02-09). \"A Rich Edit Control That Displays Bitmaps and Other OLE Objects\". Code Project. Archived from the original on 2011-12-31. Retrieved 2020-09-29.\n  7. ^ \"ACC: Why OLE Objects Cause Databases to Grow\". Microsoft. 2007-01-19. Archived from the original on 2008-02-15.\n\n## External links[edit]\n\n  * ripOLE - extracts attachments from OLE documents\n  * OLE Background from docs.microsoft.com\n\n  * v\n  * t\n  * e\n\nMicrosoft APIs and frameworks  \n---  \nGraphics and UI|\n\n  * Desktop Window Manager\n  * Direct2D\n  * Direct3D\n  * D3D (extensions)\n  * GDI / GDI+\n  * WPF\n  * Silverlight\n  * WinUI\n  * Windows Color System\n  * Windows Image Acquisition\n  * Windows Imaging Component\n  * DirectX Graphics Infrastructure (DXGI)\n  * Windows Advanced Rasterization Platform\n  * WinG\n\n  \nAudio|\n\n  * DirectMusic\n  * DirectSound\n  * DirectX plugin\n  * XACT\n  * Speech API\n  * XAudio2\n\n  \nMultimedia|\n\n  * DirectX\n    * Media Objects\n    * Video Acceleration\n  * Xinput\n  * DirectInput\n  * DirectShow\n  * Image Mastering API\n  * Managed DirectX\n  * Media Foundation\n  * XNA\n  * Windows Media\n  * Video for Windows\n\n  \nWeb|\n\n  * MSHTML\n  * RSS Platform\n  * JScript\n  * VBScript\n  * BHO\n  * XDR\n  * SideBar Gadgets\n  * TypeScript\n\n  \nData access|\n\n  * Data Access Components (MDAC)\n    * ADO\n    * ADO.NET\n    * ODBC\n    * OLE DB\n  * Extensible Storage Engine\n  * Entity Framework\n  * Sync Framework\n  * Access Database Engine\n  * MSXML\n  * OPC\n\n  \nNetworking|\n\n  * Winsock\n    * LSP\n  * Winsock Kernel\n  * Filtering Platform\n  * NDIS\n  * Windows Rally\n  * BITS\n  * P2P API\n  * MSMQ\n  * MS MPI\n  * DirectPlay\n\n  \nCommunication|\n\n  * Messaging API\n  * Telephony API\n  * WCF\n\n  \nAdministration and management|\n\n  * Win32 console\n  * Windows Script Host\n  * WMI (extensions)\n  * PowerShell\n  * Task Scheduler\n  * Offline Files\n  * Shadow Copy\n  * Windows Installer\n  * Error Reporting\n  * Event Log\n  * Common Log File System\n\n  \nComponent model|\n\n  * COM\n  * COM+\n  * ActiveX\n  * Distributed Component Object Model\n  * .NET Framework\n\n  \nLibraries|\n\n  * Framework Class Library\n  * Microsoft Foundation Classes (MFC)\n  * Active Template Library (ATL)\n  * Windows Template Library (WTL)\n\n  \nDevice drivers|\n\n  * WDM\n  * WDF\n    * KMDF\n    * UMDF\n  * WDDM\n  * NDIS\n  * UAA\n  * BDA\n  * VxD\n\n  \nSecurity|\n\n  * Crypto API\n    * CAPICOM\n  * Windows CardSpace\n  * Data Protection API\n  * Security Support Provider Interface (SSPI)\n\n  \n.NET|\n\n  * ASP.NET\n  * ADO.NET\n  * Remoting\n  * Silverlight\n  * TPL\n  * WCF\n  * WCS\n  * WPF\n  * WF\n\n  \nSoftware factories|\n\n  * EFx Factory\n  * Enterprise Library\n  * Composite UI\n  * CCF\n  * CSF\n\n  \nIPC|\n\n  * MSRPC\n  * Dynamic Data Exchange (DDE)\n  * Remoting\n  * WCF\n\n  \nAccessibility|\n\n  * Active Accessibility\n  * UI Automation\n\n  \nText and multilingual support|\n\n  * DirectWrite\n  * Text Services Framework\n  * Text Object Model\n  * Input method editor\n  * Language Interface Pack\n  * Multilingual User Interface\n  * Uniscribe\n\n  \n  \n  * v\n  * t\n  * e\n\nMicrosoft Windows components  \n---  \n  \n  * APIs\n  * Architecture\n    * 9x\n    * NT\n  * Booting process\n  * Games\n\n  \nManagement tools|\n\n  * App Installer\n  * Command Prompt\n  * Control Panel\n  * Device Manager\n  * Disk Cleanup\n  * Drive Optimizer\n  * Driver Verifier\n  * DirectX Diagnostic Tool\n  * Event Viewer\n  * IExpress\n  * Management Console\n  * Netsh\n  * Performance Monitor\n  * Recovery Console\n  * Resource Monitor\n  * Settings\n  * Sysprep\n  * System Configuration\n  * System File Checker\n  * System Information\n  * System Policy Editor\n  * System Restore\n  * Task Manager\n  * Windows Error Reporting\n  * Windows Ink\n  * Windows Installer\n  * PowerShell\n  * Windows Update\n    * Windows Insider\n  * WinRE\n  * WMI\n\n  \nApps|\n\n  * 3D Viewer\n  * Clock\n  * Calculator\n  * Calendar\n  * Camera\n  * Character Map\n  * Clipchamp\n  * Cortana\n  * Edge\n  * Fax and Scan\n  * Feedback Hub\n  * Get Help\n  * Magnifier\n  * Mail\n  * Maps\n  * Messaging\n  * Media Player\n    * 2022\n  * Movies & TV\n  * Mobility Center\n  * Money\n  * Narrator\n  * Notepad\n  * OneDrive\n  * OneNote\n  * Paint\n  * Paint 3D\n  * People\n  * Phone Link\n  * Photos\n  * Quick Assist\n  * Remote Desktop Connection\n  * Snipping Tool\n  * Speech Recognition\n  * Skype\n  * Sports\n  * Start\n  * Sticky Notes\n  * Store\n  * Tips\n  * Voice Recorder\n  * Weather\n  * WordPad\n  * Xbox\n\n  \nShell|\n\n  * Action Center\n  * Aero\n  * AutoPlay\n  * AutoRun\n  * ClearType\n  * Explorer\n  * Search\n    * Indexing Service\n    * IFilter\n    * Saved search\n    * Namespace\n    * Special folder\n  * Start menu\n  * Taskbar\n  * Task View\n  * Windows Spotlight\n  * Windows XP visual styles\n\n  \nServices|\n\n  * Service Control Manager\n  * BITS\n  * CLFS\n  * Multimedia Class Scheduler\n  * Shadow Copy\n  * Task Scheduler\n  * Error Reporting\n  * Wireless Zero Configuration\n\n  \nFile systems|\n\n  * CDFS\n  * DFS\n  * exFAT\n  * IFS\n  * FAT\n  * NTFS\n    * Hard link\n    * links\n    * Mount Point\n    * Reparse point\n    * TxF\n    * EFS\n  * ReFS\n  * UDF\n\n  \nServer|\n\n  * Active Directory\n  * Domains\n  * DNS\n  * Group Policy\n  * Roaming user profiles\n  * Folder redirection\n  * Distributed Transaction Coordinator\n  * MSMQ\n  * Windows Media Services\n  * Active DRM Services\n  * IIS\n  * WSUS\n  * SharePoint\n  * Network Access Protection\n  * PWS\n  * DFS Replication\n  * Print Services for UNIX\n  * Remote Desktop Services\n  * Remote Differential Compression\n  * Remote Installation Services\n  * Windows Deployment Services\n  * System Resource Manager\n  * Hyper-V\n  * Server Core\n\n  \nArchitecture|\n\n  * Boot Manager\n  * Console\n  * CSRSS\n  * Desktop Window Manager\n  * Portable Executable\n    * EXE\n    * DLL\n  * Enhanced Write Filter\n  * Graphics Device Interface\n  * Hardware Abstraction Layer\n  * I/O request packet\n  * Imaging Format\n  * Kernel Transaction Manager\n  * Library files\n  * Logical Disk Manager\n  * LSASS\n  * MinWin\n  * NTLDR\n  * Ntoskrnl.exe\n  * Object Manager\n  * Open XML Paper Specification\n  * Registry\n  * Resource Protection\n  * Security Account Manager\n  * Server Message Block\n  * Shadow Copy\n  * SMSS\n  * System Idle Process\n  * USER\n  * WHEA\n  * Winlogon\n  * WinUSB\n\n  \nSecurity|\n\n  * Security and Maintenance\n  * AppLocker\n  * BitLocker\n  * Credential Guard\n  * Data Execution Prevention\n  * Defender\n  * Family features\n  * Kernel Patch Protection\n  * Mandatory Integrity Control\n  * Protected Media Path\n  * User Account Control\n  * User Interface Privilege Isolation\n  * Windows Firewall\n\n  \nCompatibility|\n\n  * COMMAND.COM\n  * Windows Subsystem for Linux\n  * WoW64\n\n  \nAPI|\n\n  * Active Scripting\n    * WSH\n    * VBScript\n    * JScript\n  * COM\n    * ActiveX\n    * ActiveX Document\n    * COM Structured storage\n    * DCOM\n    * OLE\n    * OLE Automation\n    * Transaction Server\n  * DirectX\n  * Native\n  * .NET\n  * Universal Windows Platform\n  * WinAPI\n  * Windows Mixed Reality\n  * Windows Runtime\n  * WinUSB\n\n  \nGames|\n\n  * Solitaire Collection\n  * Surf\n\n  \nDiscontinued| | Games| \n\n  * 3D Pinball\n  * Chess Titans\n  * FreeCell\n  * Hearts\n  * InkBall\n  * Hold 'Em\n  * Purble Place\n  * Spider Solitaire\n  * Solitaire\n  * Tinker\n\n  \n---|---  \nApps|\n\n  * ActiveMovie\n  * Anytime Upgrade\n  * Address Book\n  * Backup and Restore\n  * Cardfile\n  * CardSpace\n  * CD Player\n  * Chat\n  * Contacts\n  * Desktop Gadgets\n  * Diagnostics\n  * DriveSpace\n  * DVD Maker\n  * Easy Transfer\n  * Fax\n  * Food & Drink\n  * Groove Music\n  * Help and Support Center\n  * Health & Fitness\n  * HyperTerminal\n  * Imaging\n  * Internet Explorer\n  * Journal\n  * Make Compatible\n  * Media Center\n  * Meeting Space\n  * Messaging\n  * Messenger\n  * Mobile Device Center\n  * Movie Maker\n  * MSN Dial-up\n  * NetMeeting\n  * NTBackup\n  * Outlook Express\n  * Pay\n  * Phone Companion\n  * Photo Gallery\n  * Photo Viewer\n  * Program Manager\n  * Steps Recorder\n  * Syskey\n  * Travel\n  * WinHelp\n  * Write\n\n  \nOthers|\n\n  * Games for Windows\n  * ScanDisk\n  * File Protection\n  * Media Control Interface\n  * MS-DOS 7\n  * Next-Generation Secure Computing Base\n  * POSIX subsystem\n  * HPFS\n  * Interix\n  * Video for Windows\n  * Virtual DOS machine\n  * Windows on Windows\n  * Windows SideShow\n  * Windows Services for UNIX\n  * Windows System Assessment Tool\n  * Windows To Go\n  * WinFS\n\n  \nSpun off to Microsoft Store|\n\n  * DVD Player\n  * File Manager\n  * Hover!\n  * Mahjong\n  * Minesweeper\n\n  \n  \n  * Category\n  * List\n\n  \n  \nRetrieved from\n\"https://en.wikipedia.org/w/index.php?title=Object_Linking_and_Embedding&oldid=1213682917\"\n\nCategories:\n\n  * Inter-process communication\n  * Microsoft application programming interfaces\n\nHidden categories:\n\n  * Articles with short description\n  * Short description matches Wikidata\n  * Articles needing additional references from April 2010\n  * All articles needing additional references\n\n  * This page was last edited on 14 March 2024, at 14:23 (UTC).\n  * Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n  * Privacy policy\n  * About Wikipedia\n  * Disclaimers\n  * Contact Wikipedia\n  * Code of Conduct\n  * Developers\n  * Statistics\n  * Cookie statement\n  * Mobile view\n  * Edit preview settings\n\n", "frontpage": false}
