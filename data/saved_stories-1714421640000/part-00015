{"aid": "40198189", "title": "MoonBit adds JavaScript back end, up to 25x faster than native JavaScript", "url": "https://www.moonbitlang.com/blog/js-support", "domain": "moonbitlang.com", "votes": 2, "user": "obeavs", "posted_at": "2024-04-29 13:38:24", "comments": 0, "source_title": "MoonBit adds JS backend, up to 25x faster than native JS", "source_text": "MoonBit adds JS backend, up to 25x faster than native JS | MoonBit\n\nSkip to main content\n\n# MoonBit adds JS backend, up to 25x faster than native JS\n\nApril 29, 2024 \u00b7 8 min read\n\nWhen MoonBit officially launched in August 2023, our critical mission was\nunleashing the potential of WebAssembly in cloud and edge computing as a Wasm-\nfirst programming language and toolchain. By integrating the essence of Rust\nand Go, MoonBit has not only achieved simplicity and usability in design but\nalso been equipped with a robust fault-tolerant type system. At the same time,\nMoonBit is working on automatic code generation and adjustment leveraging\nartificial intelligence, taking one step further in combining IDE intelligence\nwith large model intelligence.\n\nWith our team\u2019s effort, MoonBit has achieved remarkable progress in its native\nsupport for WebAssembly within just one year and a half. We've significantly\nimproved the speed of building and running, as well as producing compact Wasm\noutput. During this journey, we've come to realize that the potential of\nMoonBit extends beyond Wasm, and fostering support for multiple backends could\nfurther cultivate a thriving MoonBit ecosystem.\n\nTherefore, we are thrilled to announce that MoonBit now supports the\nJavaScript backend! What we've achieved is more than mere support but an\nunprecedented performance boost, akin to what we\u2019ve achieved with Wasm.\nMoonBit showcases over a nearly eightfold performance advantage over Json5 on\nthe JavaScript backend. This marks an evolutionary step towards MoonBit's goal\nof achieving comprehensive coverage in software development.\n\n## Why support JavaScript: the largest development community\n\nAfter almost 30 years of JavaScript, it still has no sign of wear and tear.\nGitHub\u2019s State of the Octoverse listed JavaScript as the most used programming\nlanguage in 2022, confirming its unwavering position as one of the most\npopular programming languages in the job market and software development\nfield.\n\nData source: https://octoverse.github.com/2022/top-programming-languages\n\nWith its widespread popularity, JavaScript boasts an extensive and diverse\necosystem; it's no wonder why most programming languages consider JavaScript\nbackend support a major step. However, most JavaScript alternatives fail to\nmatch the native performance of JavaScript, with some compiled code being up\nto 350 times larger than native JavaScript in benchmark tests. If a transpiled\nprogramming language only marginally improves maintainability at the\nsignificant expense of size and performance, then in most cases, native\nJavaScript remains the go-to language for developers.\n\nData source:\nhttps://unsafeperform.io/blog/2022-07-02-a_small_benchmark_for_functional_languages_targeting_web_browsers/\n\nMoonBit aims to address both code size and performance issues with our support\nfor compiling to the JavaScript backend. Our benchmark results indicate that\nMoonBit JS significantly outperforms native JavaScript.\n\n## Benchmark: Code execution speed exceeds JavaScript by 25 times\n\nAccording to the JavaScript proposal for Iterator Helpers, JavaScript can\nnatively support iteration operations without the need for intermediate\narrays. MoonBit has also introduced the same feature in sync, further\nenhancing its applicability and efficiency in modern JavaScript development\nenvironments.\n\nHere is a common case: when processing a large amount of student grade data,\ntraditional JavaScript code typically requires multiple steps to handle the\ndata, such as filtering students with an A grade. This approach is intuitive,\nbut it is not efficient in performance as it requires generating multiple\nintermediate arrays. For instance, first, iterate through the grades of 1000\nstudents, convert the grades to levels, then sort them by A, B, C, D, E, and\nfilter out students with an A grade, finally calculate the number of students\nwith an A grade. In this case, after comparing MoonBit's JavaScript\nimplementation with native support for Iterator Helpers in JavaScript, the\nJavaScript code written by MoonBit shows that its execution speed is 25 times\nfaster than using native Iterator Helpers.\n\nMoonBit has introduced a zero-cost abstraction similar to Rust's Iter type,\nwhich is a library specially optimized for common data processing situations.\nThe design of this type fully leverages MoonBit's advanced abstraction\ncapabilities while ensuring no additional runtime overhead. By using Iter,\nmultiple processing steps can be combined into a cohesive workflow,\nsignificantly reducing the generation of intermediate arrays and thus\nimproving performance. MoonBit's implementation enables developers to write\nlogically clear and efficient code without worrying about performance\noverhead.\n\nThe zero-cost Iter type is particularly effective in handling large amounts of\ndata and performing complex data transformations, optimizing the data\nprocessing process. With the Iter type, developers can more conveniently build\nefficient and maintainable systems, fully leveraging MoonBit's performance\nadvantages.\n\nBenchmark source: https://github.com/moonbit-community/benchmark-202404.git\n\n  * Code generation speed: We compared the execution speed of code generated by MoonBit with JavaScript and found it to be over 25 times faster. This approach not only simplifies the code but also enhances processing efficiency, allowing developers to focus more on the code logic instead of performance.\n\n  * Operations per second (Ops/Sec) in one second: MoonBit's performance is 25 times that of native JavaScript, meaning MoonBit can perform far more operations per second than native JavaScript.\n\nHere is an example of JavaScript code using MoonBit and its compilation\nresult:\n\n### JavaScript code generated with MoonBit's Iter type\n\n## MoonBit JS vs. Json5: almost 8x faster\n\nThe case above may be too narrow. Here is a real-world situation: The latest\nperformance test results show that MoonBit's core standard library has\nsurpassed the performance of the top 0.1% Json5 library on npm. We found that\nthe JavaScript compiled by MoonBit is almost 8 times faster than the Json5\nlibrary. This significant performance improvement in task execution efficiency\nmeans that MoonBit can perform more parsing tasks in the same amount of time,\ngreatly enhancing data processing efficiency.\n\nBenchmark source: https://github.com/moonbit-community/benchmark-202404.git\n\n### Why MoonBit runs faster than Json5?\n\nThe key to MoonBit's performance advantage lies in optimizing data processing\nby directly converting strings to integers for processing. Since JavaScript\nitself does not have a character type, characters in JavaScript exist as\nstrings, which means any character operation is actually performed at the\nstring level, naturally slower than directly operating on integers. In\naddition, MoonBit utilizes compilation techniques to optimize the code\nprocessing process. For example, during compilation, character constants are\nconverted to their Unicode codepoint values. This allows these pre-compiled\ninteger values to be directly utilized at runtime, rather than dynamically\nprocessing characters at runtime. Similarly, for switch statements, integer\nswitch operations can be compiled into faster instructions, while string\nswitch operations are as efficient as a series of if statements, which is much\nslower. MoonBit also introduces several generic techniques unrelated to\nJavaScript, such as constant folding, tail recursion conversion to loops,\nunpacking Option[Char], and iterator fusion, thereby improving overall\ncompilation and execution efficiency.\n\nIn addition to these implemented techniques, the MoonBit team is continuously\nexploring new methods to enhance our performance even further. To ensure\nsteady performance improvement and prevent performance regression, MoonBit has\nestablished a set of monitoring mechanisms to rigorously evaluate new changes\nin performance.\n\nWe believe MoonBit not only has outstanding runtime performance but also\nexcels in compilation performance, enabling instant compilation to JavaScript\nwith no waiting time for responses. MoonBit JavaScript draws on our past\narchitecture experience in MoonBit IDE and toolchain, as we considered the\ncollaboration of IDE, build system, and language design collaboration in the\nfirst place, to achieve highly parallelized and incremental type checking and\ninference.\n\n## Out-of-the-box toolchain support\n\nMost programming languages were only able to support sourcemap debugging\nfunctionality after a long period of development. MoonBit not only supports\nJavaScript backend but is also equipped with out-of-the-box toolchain support\nincluding the debugger and local test codelens support.\n\n### Comprehensive sourcemap support and user-friendly debugger\n\nLast year, MoonBit introduced the Debugger, a feature typically only available\nin more mature languages. MoonBit provides sourcemap support for JS backend on\nday one. Currently, this feature supports source mapping, setting breakpoints\nbased on source code, and sourcemap output for debugging in browsers.\nMoonBit's sourcemap and debugging support enhance developers' debugging\nexperience, ensuring that the generated JavaScript code closely mirrors the\nsource code, with consistent variable and field names, facilitating source\ncode inspection and debugging using browser DevTools.\n\nSource: https://github.com/moonbit-community/moonbit-js-debug-demo.git\n\n### Local test codelens support\n\nMoonBit IDE now supports test codelens for local environments and automatic updates for expect test. Users no longer need to write commands in the terminal themselves, but simply click the \"Run Test | Update Test\" button to achieve millisecond-level compilation, with almost no waiting time for a response..\n\n## Try it today\n\nReady to experience MoonBit's remarkable performance in JavaScript firsthand?\nTry out the example provided at this link.\n\n## MoonBit Prospects\n\nMoonBit is expanding its ecosystem by supporting WebAssembly and JavaScript\nbackends. In the future, MoonBit plans to expand to more backend platforms\nsuch as Native and JVM and develop its own runtime and cloud deployment\nenvironments to further strengthen the toolchain support. MoonBit is not\nmerely a programming language; it provides a comprehensive development\ntoolchain, including MoonBit IDE, compiler, build system, and package manager,\noffering developers an all-in-one software development platform.\n\nThe MoonBit standard library has been open source since March, and we have\nmerged more than 200 repositories from our passionate contributors. The\nfollowing plan is to open source the MoonBit build system and compiler step by\nstep. By the Q3 of 2024, we expect MoonBit to reach beta status.\n\nAdditional resources:\n\n  * Get started with MoonBit.\n  * Check out the MoonBit Docs.\n  * Join our Discord community.\n  * Explore MoonBit programming projects in the MoonBit Gallery.\n  * MoonBit core is now open source for more feedback from daily users. Check out the Contribution Guide for more information on how to contribute.\n\nTags:\n\n  * MoonBit\n\n  * Why support JavaScript: the largest development community\n  * Benchmark: Code execution speed exceeds JavaScript by 25 times\n\n    * JavaScript code generated with MoonBit's Iter type\n  * MoonBit JS vs. Json5: almost 8x faster\n\n    * Why MoonBit runs faster than Json5?\n  * Out-of-the-box toolchain support\n\n    * Comprehensive sourcemap support and user-friendly debugger\n    * Local test codelens support\n  * Try it today\n  * MoonBit Prospects\n\nDocs\n\n  * Syntax\n\nCommunity\n\n  * Github\n  * Discord\n  * Twitter\n  * Youtube\n  * Reddit\n\nContact Us\n\n  * Email\n\nMore\n\n  * Blog\n\nCopyright \u00a9 2024 MoonBit\n\n", "frontpage": false}
