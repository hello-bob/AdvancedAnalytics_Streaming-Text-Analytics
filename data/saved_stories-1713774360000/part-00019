{"aid": "40109296", "title": "Where Is User Authorization Data Stored?", "url": "https://ciamweekly.substack.com/p/where-is-user-authorization-data", "domain": "ciamweekly.substack.com", "votes": 2, "user": "mooreds", "posted_at": "2024-04-21 21:11:35", "comments": 0, "source_title": "Where Is User Authorization Data Stored?", "source_text": "Where Is User Authorization Data Stored? - by Dan Moore\n\n# CIAM Weekly\n\nShare this post\n\n#### Where Is User Authorization Data Stored?\n\nciamweekly.substack.com\n\n#### Discover more from CIAM Weekly\n\nCustomer Identity and access management news and analysis.\n\nContinue reading\n\nSign in\n\n# Where Is User Authorization Data Stored?\n\nDan Moore\n\nApr 08, 2024\n\nShare this post\n\n#### Where Is User Authorization Data Stored?\n\nciamweekly.substack.com\n\nShare\n\nHiya,\n\nAfter authentication (authN) comes authorization (authZ); once you know who\nthe user is, you need to know what they can do in your application.\n\nEvery different CIAM software product has different authZ complexities it\nsupports. But in this edition of CIAM Weekly, I'll cover common patterns.\n\n###\n\nAuthentication Only\n\nThe first pattern is when the CIAM system is only responsible for\nauthentication. Whether using embedded credentials like a password, federation\nsolutions like SAML or OIDC, or 'what you have' options like magic links, the\nCIAM product authenticates the user, generates an artifact (often a token)\nwith the results, and passes it on to the application.\n\nThe application then examines the artifact, which contains a user identifier.\nIn the OIDC world, it's a `sub` claim: https://openid.net/specs/openid-\nconnect-core-1_0.html#StandardClaims , which is immutable and never\nreassigned.\n\nThe application is responsible for mapping the user identifier to whatever\nauthorization framework it uses and for controlling access to functionality\nand data based on that.\n\nBenefits:\n\n  * Each application can use an authorization system or framework that is appropriate to their use case or needs.\n\n  * The CIAM system can be easily swapped out if you can find another that offers the same authentication options.\n\n  * Authorization logic is business logic and is kept close to application code.\n\nChallenges:\n\n  * You can get a centralized view of application authentication from the CIAM product, but not a view of the permissions granted in each application.\n\n  * You're not taking advantage of a robust generalized permission structure that is typically present in the CIAM system.\n\n###\n\nEmbedded CIAM Authorization\n\nWith this approach, you fully leverage the CIAM system's authZ system. What\nthat looks like varies based on the CIAM software package, but you can read\nthe docs for your solution and see what is enabled. A common option is RBAC\n(role based access control) where you assign users roles and the role or roles\nare delivered as part of the authentication process.\n\nBenefits:\n\n  * You can leverage whatever your CIAM system provides, possibly resulting in less custom code.\n\n  * You have a centralized view of permissions and they are tied to the user profile.\n\nChallenges:\n\n  * Whatever authorization solution your CIAM system provides may not be granular enough or otherwise might fall short of your needs.\n\n  * Authorization is business logic and may require integration between each application and the CIAM software.\n\n###\n\nCoarse and Fine Authorization\n\nAnother common pattern is to use the CIAM system's authorization for coarse\ngrained authorization while the application has finer grained controls. If\nyour CIAM solution supports RBAC, you can assign users to roles such as\n`admin`, `writer`, `viewer`. The application which receives those roles after\nthe authentication event can determine what those roles mean in its context.\n\nIt can even apply special authorization rules such as 'a writer can write to\ntheir own projects, but not to any other ones', bringing in more complex and\nlocal authorization rules.\n\nBenefits:\n\n  * You have a partial centralized view.\n\n  * Applications can come up with any authorization scheme that meets their needs and aren't reliant on a centralized system.\n\nChallenges:\n\n  * You have a partial centralized view.\n\n  * Applications can come up with any authorization scheme that meets their needs and aren't reliant on a centralized system.\n\n  * If you have N apps, now you have authorization data in N+1 locations.\n\n###\n\nExternalized Authorization\n\nThe final option is to use yet another external system. In this scenario, you\nhave three architectural components:\n\n  * the CIAM server\n\n  * the application\n\n  * the authorization server\n\nThe first two are present in any of the previous option, but the latter is\nnew.\n\nYou extract the access control rules to a separate server. The CIAM server is\nresponsible for authentication, the application for business logic, and the\nauthorization server for making decisions about whether application actions\nare allowed. Doing so usually requires the application to make a request to\nthe authorization server.\n\nBenefits:\n\n  * You have centralized rule sets at the authorization server and should be able to reason about access in a coherent fashion.\n\n  * You can use mathematically provable rules to enforce access. While this is possible in other solutions, the separate authorization framework makes this more likely.\n\n  * Having a separate CIAM server you can have all applications rely on for undifferentiated yet critical functionality is helpful and and an authorization server offers similar benefits.\n\nChallenges:\n\n  * Mo architecture, mo problems. It's another server or service to care and feed.\n\n  * Calls to the authorization server become embedded in the application.\n\n  * If the authorization server's rule definitions aren't flexible enough, you're forced to code logic into your application.\n\n###\n\nConclusion\n\nHope you enjoyed this tour of authorization logic location. Which is right for\nyour app?\n\nThe correct answer is \u2018it depends\u2019 but I\u2019d try to keep it as simple as\npossible as you build out and improve your application or applications.\n\nDan\n\n### Subscribe to CIAM Weekly\n\nBy Dan Moore \u00b7 Launched a year ago\n\nCustomer Identity and access management news and analysis.\n\nShare this post\n\n#### Where Is User Authorization Data Stored?\n\nciamweekly.substack.com\n\nShare\n\nComments\n\nCIAM for the single application\n\nOne of the key ways that a CIAM server can help is to offer one place for your\nusers to login across a suite of applications. You get one place to...\n\nAug 21, 2023 \u2022\n\nDan Moore\n\nShare this post\n\n#### CIAM for the single application\n\nciamweekly.substack.com\n\nOn WebAuthn and PassKeys\n\nHeya, WebAuthn, also known as passkeys, is a standard which makes\nauthentication easier on the web. Common other methods of authentication have\ntheir...\n\nJan 22 \u2022\n\nDan Moore\n\nShare this post\n\n#### On WebAuthn and PassKeys\n\nciamweekly.substack.com\n\nFederation\n\nLet's discuss federation. In general, this is where there's a trust\nrelationship between two or more identity stores, and where a user can sign\ninto one...\n\nJan 2 \u2022\n\nDan Moore\n\n1\n\nShare this post\n\n#### Federation\n\nciamweekly.substack.com\n\nReady for more?\n\n\u00a9 2024 Dan Moore\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
