{"aid": "40113771", "title": "How to Work with GraphQL in WordPress in 2024", "url": "https://www.smashingmagazine.com/2024/04/how-work-graphql-wordpress-2024/", "domain": "smashingmagazine.com", "votes": 1, "user": "leoloso", "posted_at": "2024-04-22 12:38:07", "comments": 0, "source_title": "How To Work With GraphQL In WordPress In 2024", "source_text": "How To Work With GraphQL In WordPress In 2024 \u2014 Smashing Magazine\n\nSkip to main content Start reading the article Jump to list of all articles\nJump to all topics\n\n  * Leonardo Losoviz\n  * Apr 19, 2024\n  * 0 comments\n\n# How To Work With GraphQL In WordPress In 2024\n\n  * 11 min read\n  * WordPress, GraphQL, Headless\n  * Share on Twitter, LinkedIn\n\n#### About The Author\n\nLeonardo Losoviz is a freelance developer and writer, with an ongoing quest to\nintegrate innovative paradigms (Serverless PHP, server-side components,\nGraphQL) ... More about Leonardo \u21ac\n\n#### Email Newsletter\n\nWeekly tips on front-end & UX. Trusted by 200,000+ folks.\n\n  * Design System Planning and Process, with Nathan Curtis\n\n  * SmashingConf New York 2024\n  * Flexible CMS. Headless & API 1st\n\n  * SmashingConf Freiburg 2024\n  * Register!\n\n  * Accessibility for Designers, with St\u00e9phanie Walter\n\nWhat options do we have for integrating GraphQL with WordPress in 2024?\nLeonardo Losoviz describes what developments have taken place in this space\nduring the last three years.\n\nThree years ago, I published \u201cMaking GraphQL Work In WordPress,\u201d where I\ncompared the two leading GraphQL servers available for WordPress at the time:\nWPGraphQL and Gato GraphQL. In the article, I aimed to delineate the scenarios\nbest suited for each.\n\nFull disclosure: I created Gato GraphQL, originally known as GraphQL API for\nWordPress, as referenced in the article.\n\nA lot of new developments have happened in this space since my article was\npublished, and it\u2019s a good time to consider what\u2019s changed and how it impacts\nthe way we work with GraphQL data in WordPress today.\n\nThis time, though, let\u2019s focus less on when to choose one of the two available\nservers and more on the developments that have taken place and how both\nplugins and headless WordPress, in general, have been affected.\n\n## Headless Is The Future Of WordPress (And Shall Always Be)\n\nThere is no going around it: Headless is the future of WordPress! At least,\nthat is what we have been reading in posts and tutorials for the last eight or\nso years. Being Argentinian, this reminds me of an old joke that goes, \u201cBrazil\nis the country of the future and shall always be!\u201d The future is both imminent\nand far away.\n\nTruth is, WordPress sites that actually make use of headless capabilities \u2014\nvia GraphQL or the WP REST API \u2014 represent no more than a small sliver of the\noverall WordPress market. WPEngine may have the most extensive research into\nheadless usage in its \u201cThe State of Headless\u201d report. Still, it\u2019s already a\nfew years old and focused more on both the general headless movement (not just\nWordPress) and the context of enterprise organizations. But the future of\nWordPress, according to the report, is written in the clouds:\n\n> \u201cHeadless is emphatically here, and with the rapid rise in enterprise\n> adoption from 2019 (53%) to 2021 (64%), it\u2019s likely to become the industry\n> standard for large-scale organizations focused on building and maintaining a\n> powerful, connected digital footprint. [...] Because it\u2019s already the most\n> popular CMS in the world, used by many of the world\u2019s largest sites, and\n> because it\u2019s highly compatible as a headless CMS, bringing flexibility,\n> extensibility, and tons of features that content creators love, WordPress is\n> a natural fit for headless configurations.\u201d\n\nJust a year ago, a Reddit user informally polled people in r/WordPress, and\nwhile it\u2019s far from scientific, the results are about as reliable as the\nconjecture before it:\n\nInformal Reddit poll results. (Large preview)\n\nHeadless may very well be the future of WordPress, but the proof has yet to\nmake its way into everyday developer stacks. It could very well be that\ngeneral interest and curiosity are driving the future more than tangible\nworks, as another of WPEngine\u2019s articles from the same year as the bespoke\nreport suggests when identifying \u201cHeadless WordPress\u201d as a hot search term.\nThis could just as well be a lot more smoke than fire.\n\nThat\u2019s why I believe that \u201cheadless\u201d is not yet a true alternative to a\ntraditional WordPress stack that relies on the WordPress front-end\narchitecture. I see it more as another approach, or flavor, to building\nwebsites in general and a niche one at that.\n\nThat was all true merely three years ago and is still true today.\n\nMeet Smashing Workshops on front-end, design & UX, with practical takeaways,\nlive sessions, video recordings and a friendly Q&A. With Brad Frost, St\u00e9ph\nWalter and so many others.\n\nJump to the workshops \u21ac\n\n## WPEngine \u201cOwns\u201d Headless WordPress\n\nIt\u2019s no coincidence that we\u2019re referencing WPEngine when discussing headless\nWordPress because the hosting company is heavily betting on it becoming the de\nfacto approach to WordPress development.\n\nTake, for instance, WPEngine\u2019s launch of Faust.js, a headless framework with\nWPGraphQL as its foundation. Faust.js is an opinionated framework that allows\ndevelopers to use WordPress as the back-end content management system and\nNext.js to render the front-end side of things. Among other features, Faust.js\nreplicates the WordPress template system for Next.js, making the configuration\nto render posts and pages from WordPress data a lot easier out of the box.\n\nWPEngine is well-suited for this task, as it can offer hosting for both\nNode.js and WordPress as a single solution via its Atlas platform. WPEngine\nalso bought the popular Advanced Custom Fields (ACF) plugin that helps define\nrelationships among entities in the WordPress data model. Add to that the fact\nthat WPEngine has taken over the Headless WordPress Discord server, with\ndiscussions centered around WPGraphQL, Faust, Atlas, and ACF. It could very\nwell be named the WPEngine-Powered Headless WordPress server instead.\n\nBut WPEngine\u2019s agenda and dominance in the space is not the point; it\u2019s more\nthat they have a lot of skin in the game as far as anticipating a headless\nWordPress future. Even more so now than three years ago.\n\n## GraphQL API for WordPress \u2192 Gato GraphQL\n\nI created a plugin several years ago called GraphQL API for WordPress to help\nsupport headless WordPress development. It converts data pulled from the\nWordPress REST API into structured GraphQL data for more efficient and\nflexible queries based on the content managed and stored in WordPress.\n\nMore recently, I released a significantly updated version of the plugin, so\nupdated that I chose to rename it to Gato GraphQL, and it is now freely\navailable in the WordPress Plugin Directory. It\u2019s a freemium offering like\nmany WordPress plugin pricing models. The free, open-source version in the\nplugin directory provides the GraphQL server, maps the WordPress data model\ninto the GraphQL schema, and provides several useful features, including\ncustom endpoints and persisted queries. The paid commercial add-on extends the\nplugin by supporting multiple query executions, automation, and an HTTP client\nto interact with external services, among other advanced features.\n\nI know this sounds a lot like a product pitch but stick with me because\nthere\u2019s a point to the decision I made to revamp my existing GraphQL plugin\nand introduce a slew of premium services as features. It fits with my belief\nthat\n\n> WordPress is becoming more and more open to giving WordPress developers and\n> site owners a lot more room for innovation to work collaboratively and\n> manage content in new and exciting ways both in and out of WordPress.\n>\n> \u201c\n\n## JavaScript Frameworks & Headless WordPress\n\nGatsby was perhaps the most popular and leading JavaScript framework for\ncreating headless WordPress sites at the time my first article was published\nin 2021. These days, though, Gatsby is in steep decline and its integration\nwith WordPress is no longer maintained.\n\nNext.js was also a leader back then and is still very popular today. The\nframework includes several starter templates designed specifically for\nheadless WordPress instances.\n\nSvelteKit and Nuxt are surging these days and are considered good choices for\nestablishing headless WordPress, as was discussed during WordCamp Asia 2024.\n\nToday, in 2024, we continue to see new JavaScript framework entrants in the\nspace, notably Astro. Despite Gatsby\u2019s recent troubles, the landscape of using\nJavaScript frameworks to create front-end experiences from the WordPress back-\nend is largely the same as it was a few years ago, if maybe a little easier,\nthanks to the availability of new templates that are integrated right out of\nthe box.\n\n## GraphQL Transcends Headless WordPress\n\nThe biggest difference between the WPGraphQL and Gato GraphQL plugins is that,\nwhere WPGraphQL is designed to convert REST API data into GraphQL data in a\nsingle direction, Gato GraphQL uses GraphQL data in both directions in a way\nthat can be used to manage non-headless WordPress sites as well. I say this\nnot as a way to get you to use my plugin but to help describe how GraphQL has\nevolved to the point where it is useful for more cases than headless WordPress\nsites.\n\nManaging a WordPress site via GraphQL is possible because GraphQL is an\nagnostic tool for interacting with data, whatever that interaction may be.\nGraphQL can fetch data from the server, modify it, store it back on the\nserver, and invoke external services. These interactions can all be coded\nwithin a single query.\n\nGraphQL can then be used to regex search and replace a string in all posts,\nwhich is practical when doing site migrations. We can also import a post from\nanother WordPress site or even from an RSS feed or CSV source.\n\nAnd thanks to the likes of WordPress hooks and WP-Cron, executing a GraphQL\nquery can be an automated task. For instance, whenever the publish_post hook\nis triggered \u2014 i.e., a new post on the site is published \u2014 we can execute\ncertain actions, like an email notification to the site admin, or generate a\nfeatured image with AI if the post lacks one.\n\nIn short, GraphQL works both ways and opens up new possibilities for better\ndeveloper and author experiences!\n\n## GraphQL Becomes A \u201cCore\u201d Feature In WordPress 6.5\n\nI have gone on record saying that GraphQL should not be a core part of\nWordPress. There\u2019s a lot of reasoning behind my opinion, but what it boils\ndown to is that the WP REST API is perfectly capable of satisfying our needs\nfor passing data around, and adding GraphQL to the mix could be a security\nrisk in some conditions.\n\nMy concerns aside, GraphQL officially became a first-class citizen of\nWordPress when it was baked into WordPress 6.5 with the introduction of Plugin\nDependencies, a feature that allows plugins to identify other plugins as\ndependencies. We see this in the form of a new \u201cRequires Plugins\u201d comment in a\nplugin\u2019s header:\n\n    \n    \n    /** * Plugin Name: My Ecommerce Payments for Gato GraphQL * Requires Plugins: gatographql */\n\nWordPress sees which plugins are needed for the current plugin to function\nproperly and installs everything together at the same time, assuming that the\ndependencies are readily available in the WordPress Plugin Directory.\n\nSo, check this out. Since WPGraphQL and Gato GraphQL are in the plugin\ndirectory, we can now create another plugin that internally uses GraphQL and\ndistributes it via the plugin directory or, in general, without having to\nindicate how to install it. For instance, we can now use GraphQL to fetch data\nto render the plugin\u2019s blocks.\n\nIn other words, plugins are now capable of more symbiotic relationships that\nopen even more possibilities! Beyond that, every plugin in the WordPress\nPlugin Directory is now technically part of WordPress Core, including\nWPGraphQL and Gato GraphQL. So, yes, GraphQL is now technically a \u201ccore\u201d\nfeature that can be leveraged by other developers.\n\n## Helping WordPress Lead The CMS Market, Again\n\nWhile delivering the keynote presentation during WordCamp Asia 2024, Human\nMade co-founder Noel Tock discussed the future of WordPress. He argues that\nWordPress growth has stagnated in recent years, thanks to a plethora of modern\nweb services capable of interacting and resulting in composable content\nmanagement systems tailored to certain developers in a way that WordPress\nsimply isn\u2019t.\n\nSlide taken from Noel Tock's WordCamp Asia 2024 keynote address. (Large\npreview)\n\nTock continues to explain how WordPress can once again become a growth engine\nby cleaning up the WordPress plugin ecosystem and providing first-class\nintegrations with external services.\n\nSlide taken from Noel Tock's WordCamp Asia 2024 keynote address. (Large\npreview)\n\nDo you see where I am going with this? GraphQL could play an instrumental role\nin WordPress\u2019s future success. It very well could be the link between\nWordPress and all the different services it interacts with, positioning\nWordPress at the center of the web. The recent Plugin Dependencies feature we\nnoted earlier is a peek at what WordPress could look like as it adopts more\ncomposable approaches to content management that support its position as a\nmarket leader.\n\n## Conclusion\n\n\u201cHeadless\u201d WordPress is still \u201cthe future\u201d of WordPress. But as we\u2019ve\ndiscussed, there\u2019s very little actual movement towards that future as far as\ndevelopers buying into it despite displaying deep interest in headless\narchitectures, with WordPress purely playing the back-end role.\n\nThere are new and solid frameworks that rely on GraphQL for querying data, and\nthose won\u2019t go away anytime soon. And those frameworks are the ones that rely\non existing WordPress plugins that consume data from the WordPress REST API\nand convert it to structured GraphQL data.\n\nMeanwhile, WordPress is making strides toward greater innovation as plugin\ndevelopers are now able to leverage other plugins as dependencies for their\nplugins. Every plugin listed in the WordPress Plugin Directory is essentially\na feature of WordPress Core, including WPGraphQL and Gato GraphQL. That means\nGraphQL is readily available for any plugin developer to tap into as of\nWordPress 6.5.\n\nGraphQL can be used not only for headless but also to manage the WordPress\nsite. Whenever data must be transformed, whether locally or by invoking an\nexternal service, GraphQL can be the tool to do it. That even means that data\ntransforms can be triggered automatically to open up new and interesting ways\nto manage content, both inside and outside of WordPress. It works both ways!\n\nSo, yes, even though headless is the future of WordPress (and shall always\nbe), GraphQL could indeed be a key component in making WordPress once again an\ninnovative force that shapes the future of CMS.\n\n(gg, yk)\n\nExplore more on\n\n#### Smashing Newsletter\n\nTips on front-end & UX, delivered weekly in your inbox. Just the things you\ncan actually use.\n\n#### Front-End & UX Workshops, Online\n\nWith practical takeaways, live sessions, video recordings and a friendly Q&A.\n\n#### TypeScript in 50 Lessons\n\nEverything TypeScript, with code walkthroughs and examples. And other printed\nbooks.\n\n#### Browse All Smashing Magazine Topics\n\n  * Accessibility\n  * Best practices\n  * Business\n  * Career\n  * Checklists\n  * CSS\n  * Data Visualization\n  * Design\n  * Design Patterns\n  * Design Systems\n  * E-Commerce\n  * Figma\n  * Freebies\n  * HTML\n  * Illustrator\n  * Inspiration\n  * JavaScript\n  * Mobile\n  * Performance\n  * Privacy\n  * React\n  * Responsive Design\n  * Round-Ups\n  * SEO\n  * Typography\n  * Tools\n  * UI\n  * Usability\n  * UX\n  * Vue\n  * Wallpapers\n  * Web Design\n  * Workflow\n\nWith a commitment to quality content for the design community.\n\nFounded by Vitaly Friedman and Sven Lennartz. 2006\u20132024.\n\nSmashing is proudly running on Netlify, TinaCMS and Swell.\n\nFonts by Latinotype.\n\n  * \u270e Write for us\n  * Contact us\n  * About us (Impressum)\n  * Privacy policy\n  * Membership login\n  * Delivery times\n  * Advertise\n\n", "frontpage": false}
