{"aid": "40109402", "title": "A Rigorous Derivation of the Bubble Sort Curve", "url": "https://linesthatconnect.github.io/blog/a-rigorous-derivation-of-the-bubble-sort-curve/", "domain": "linesthatconnect.github.io", "votes": 3, "user": "pb1729", "posted_at": "2024-04-21 21:29:28", "comments": 0, "source_title": "A Rigorous Derivation of the Bubble Sort Curve | Lines That Connect", "source_text": "A Rigorous Derivation of the Bubble Sort Curve | Lines That Connect\n\nLines That Connect\n\n# A Rigorous Derivation of the Bubble Sort Curve\n\nThis post follows my video, The Bubble Sort Curve. You\u2019ll probably want to\nwatch that first. If not, you should at least be familiar with bubble sort.\n\nMy video answers question, \u201cWhat is the shape formed by these diagrams?\u201d\nNormally for a problem this silly, I would be perfectly happy with a intuitive\nbut non-rigorous argument like the one in my video. But for some reason I\ncouldn\u2019t rest until I had found a precise, mathematical way to state (and then\nsolve) the problem. After spending more time on this than I care to admit, I\nfound a true proof and wrote it down.\n\nIf you want to see all the details, you can read it here.\n\nBut I don\u2019t necessarily expect you to enjoy reading through pages of proofs,\nand all the technical details might obscure the intuition behind the main\nideas. So I\u2019ve summarized the method in this blog post. Full disclosure: This\nmath goes a bit beyond my education level, so I don\u2019t know the standard\nmethods and terminologies for this kind of problem. I may revisit this once\nI\u2019ve learned more, but for now, let\u2019s get to it!\n\n## A Summary of the Solution\n\n### Diagrams as Sets of Points\n\nIn my video, the diagrams are bar plots. This is the most common\nvisualization, but it has a couple of downsides when compared to the scatter\nplot representation. First, points are just plain simpler than bars. Second,\nthe scatter plot gives a more \u201ccomplete\u201d representation of the shape. Bar\nplots make visible the shapes formed by the top of the diagrams, but they give\nthe false impression that, under this topmost contour, the shape is solid. On\nthe other hand, scatter plots have no vertical bias, so they could potentially\nform all kinds of interesting two-dimensional shapes. Here are the bar and\nscatter plots of a partially sorted list.\n\nAlright, so maybe the scatter plot\u2019s shape isn\u2019t that much more interesting in\nthis case. But it does more clearly show that the curved part has body, while\nthe sorted part on the right is just a one dimensional line. So with the\nscatter plot we see more than just a curve. We see a two dimensional shape\nwhich changes over time. This means that the shape of the diagram will be a\nconnected set rather than a real-valued function. For the example above, it\nlooks like this:\n\nAnyway, we\u2019ll normalize the diagrams just as we did in the video: 1\u00d71\u00d71. One\nunit wide, one unit tall, and one unit of time. Then we can consider the\ndiagrams to be finite sets of points in the unit cube, [0,1]3. To get into the\nnitty-gritty, if we have a list of N real numbers in [0,1], we define the\ndiagram to be the set\n\nD={(Nn,H(n,I),NI):n,I\u2208{0,1,\u22ef,N\u22121}},\n\nwhere H(n,I) is the height of the nth item after I iterations have been\napplied.\n\nIf we really want to have fun, we can interpret the time dimension as a third\nspacial dimension. This allows us to see the entire duration of the algorithm\nin one 3D object.\n\nAdmittedly, it\u2019s a bit cluttered when projected to your 2D screen. To help\nwith that, I\u2019ve added a gradient and some stripes perpendicular to the time\ndirection, which lets you see the curves. Though this visualization is mostly\nfor fun, it might help once we get to the definition, since we will be\ntreating the time dimension no differently from the spacial dimensions.\n\n### Uniformly Generated Lists\n\nIn my video, all the lists were generated by randomly shuffling the list of\nthe first N natural numbers. But I don\u2019t see any reason to consider this to be\nthe one true method of generating lists. Maybe instead we could throw N darts\nat [0,1] and list the numbers we hit. Will bubble sort still make the same\nshape? Probably. But it\u2019s clear that not every method of generating lists will\nwork, so there must be some criterion for curve-forming ways of generating\nlists.\n\nWe\u2019ll call this criterion uniformity. A method of generating lists is uniform\nif in the initial state of the list, the points are spread uniformly over the\nunit square. Simple enough! But what precisely does it mean for the points to\nbe spread uniformly?\n\nLet\u2019s say we have a list of N items, and we\u2019ve drawn some rectangle R inside\nthe unit square. Let k denote the number of points which are inside of R in\nthe initial state of the list. Our method of generating lists is uniform if\n\nNk\u2192pArea(R)asN\u2192\u221e\n\nfor every possible rectangle R. The symbol (\u2192p) represents convergence in\nprobability. This means that, though we can\u2019t expect k/N to perfectly equal\nthe rectangle\u2019s area for any particular list, it becomes more and more likely\nto be closer and closer to the area as N increases.\n\nWhy does this definition make sense? Well, the unit square has area 1, so a\nrectangle of area A takes up A/1 of the unit square. So if the points are\nuniformly distributed across the unit square, we expect that proportionally\nA/1 of them should be inside the rectangle.\n\nI won\u2019t spell out the proofs here, but you can rest assured that the common\nways of generating lists are indeed uniform.\n\n### Arbitrarily Likely/Unlikely Statements\n\nThe diagrams approach the shape as the size of the lists increases to\ninfinity. But it doesn\u2019t make any sense to talk about sorting an infinite\nlist. Instead, we can reason about probabilities involving plain old finite\nlists of length N, and then take the limit of these probabilities as N\u2192\u221e.\n\nIn particular, we are interested in statements which are pretty much\nguaranteed to be true for really big lists. Let\u2019s say \u03c6 is a statement about a\nlist. Not a statement about a particular list, but a statement which may be\ntrue for some lists and false for others. We will say that \u03c6 is arbitrarily\nlikely if\n\nN\u2192\u221elimP(Given a list of N items, \u03c6 is true)=1.\n\nOn the other hand, a statement \u03c6 is arbitrarily unlikely if\n\nN\u2192\u221elimP(Given a list of N items, \u03c6 is true)=0.\n\nThese definitions give us the flexibility to talk about the shape of the\ndiagrams more realistically. We can\u2019t say that the diagrams always form the\nsame shape because there will always be rare pathological shuffles which\ndon\u2019t. But if those bad shuffles are arbitrarily unlikely, we can legitimately\nignore them.\n\nThe definition of uniformity above can be translated into an arbitrarily\nlikely statement. For a uniform method of generating lists, for any rectangle\nin the unit square, it is arbitrarily likely that k/N is arbitrarily close to\nthe area of the rectangle.\n\n### The Definition\n\nAlright, we can finally define what it means to say that the diagrams approach\na shape. We will classify each point of the unit cube as either included or\nexcluded.\n\nA point X0\u2208[0,1]3 is included if for all \u03b5>0, it is arbitrarily likely that\nthere is a point X\u2208D such that \u2223X\u2212X0\u2223<\u03b5.\n\nOn the other hand, a point X0\u2208[0,1]3 is excluded if there is an \u03b5>0 such that\nit is arbitrarily unlikely that there is a point X\u2208D such that \u2223X\u2212X0\u2223<\u03b5.\n\nBasically, an included point will pretty much always be extremely close to a\npoint from the diagram. An excluded point will pretty much never be extremely\nclose to a point from the diagram.\n\nFinally, if every point in [0,1]3 is either included or excluded, then we say\nthat the diagrams approach the set of included points.\n\nNote that the definition starts with an \u201cif\u201d. Right now, we don\u2019t know if\nbubble sort forms any shape at all by this definition, since we haven\u2019t proven\nthat every point of the unit square is either included or excluded. In fact,\nthere are some algorithms which do not approach any shape as per this\ndefinition. For example, the shape of quicksort has different proportions each\ntime, so most points are neither included nor excluded. But, as we\u2019ll see,\nbubble sort does not have that problem.\n\n### Shearing the Diagram\n\nHere\u2019s a list of 10 natural numbers. Take a look at the way the items move\nover the first couple of iterations.\n\nNotice how, although many items move left, nothing ever moves more than one\nspace to the left in a single iteration. In this way, bubble sort almost\nbehaves nicely. It would be great if items never moved to the left, because\nthen we would only have one direction of movement to worry about.\n\nWell, we can make that be the case! Just shift the entire list one space to\nthe right after each iteration.\n\nOf course, this modifies the 3D diagram. But it\u2019s just a shear transformation;\neach point (x,y,t) moves to (x+t,y,t). Since this mapping is continuous, it\npreserves included and excluded points. Therefore if we can find which points\nare included and excluded in this sheared diagram, we can just undo the shear,\nmapping the included and excluded points back onto the ordinary diagram.\n\nHere\u2019s the visual difference between the regular diagram and the sheared\nversion.\n\nAs you can see, the only difference is that the curved part sticks to the\nright side of the unit square now, rather than the left side. (We\u2019ll ignore\nthat the sorted section begins to escape from the square. Our focus here is\nthe curved part.) This may seem like an unimportant change, but stick with me\nhere.\n\n### Drawing Boxes\n\nThe secret to proving the bubble sort curve is to draw boxes over the 2D time-\ncross sections of the sheared diagram. Then, count the number of points in\neach box. We will call this number the boxes value. Finally, observe how the\nboxes\u2019 values changes as we run iterations. This diagram shows the change in\nvalue of three boxes over an iteration:\n\nOne box\u2019s value increased by 1, one box\u2019s value decreased by 1, and one box\u2019s\nvalue stayed the same. It turns out these are the only possible ways the value\ncan change in a single iteration. In fact, it can be proved that the change in\na box\u2019s value is dictated by three simple rules.\n\n  * If the box is not empty and there are no points north, west, or northwest of it, then its value will decrease by one.\n  * If there are points both north and west, but not northwest of the box, then its value will increase by one.\n  * Otherwise, the box\u2019s value will not change.\n\nTake another look at the boxes above, and you can see that their values do\nindeed change according to these rules. This is why it\u2019s so important to shear\nthe diagram. If we drew boxes over the original diagram, we would not be able\nto find any simple rules (believe me, I\u2019ve tried). The proof for these rules\nis not particularly glorious; it involves iterating through all the\nconfigurations of points at certain cardinal directions, and analyzing the\nbehavior using theorems which didn\u2019t make the cut for this blog post.\n\nNow here\u2019s what\u2019s so great about these rules. We can partition the unit square\ninto a grid of boxes and count the number of points in each box at the initial\nstate of the list. Then we can forget about the points of the diagram, and\ninstead just apply these box rules for each iteration! The values of the boxes\nwill change exactly as they would if we were actually running bubble sort.\n\nHere is a program which has the box rules programmed into it. Every \u201cpixel\u201d\nrepresents a box, and the pixel\u2019s brightness corresponds to its value. Each\npixel starts with the same value. It forms a perfect bubble sort curve!\n\n### Two Facts About Boxes\n\nIt turns out that we do not need an entire grid of boxes. We just need a\ncouple specific types of boxes. First, boxes which touch the northwest corner\nof the unit square, which I will denote with B\u2032. Second, boxes in the\nsoutheast corner of these northwest boxes, which I will denote with B.\n\nSince it\u2019s impossible for any points to be north, west, or northwest of B\u2032,\nthe box will lose one point each iteration until it is empty. Let\u2019s let k\nrepresent the value of B\u2032 in the initial state of the list. Since we\u2019re\nworking with uniformly generated lists, it is arbitrarily likely that Nk\nbecomes arbitrarily close to Area(B\u2032).\n\nNow, with the way we\u2019ve normalized the diagrams, we will have performed I\niterations at time t=NI. Therefore if Area(B\u2032)<t, it is arbitrarily likely\nthat Nk<NI. Multiplying both sides by N, we can see that it is arbitrarily\nlikely that I>k. That is, the number of iterations we\u2019ve performed is greater\nthan the initial value of B\u2032. This gives us our first fact:\n\n  * If t>Area(B\u2032), then it is arbitrarily likely that B\u2032 is empty before time t.\n\nAnother fact which is a little less obvious is that of all the points which\nleave B\u2032, the ones in its southeast corner are the last to go. That is, B is\nnot empty until B\u2032 is empty. So by following similar reasoning, we can arrive\nat the second fact:\n\n  * If t<Area(B\u2032), then it is arbitrarily likely that B is not empty until after time t.\n\n### Finding the shape of the sheared diagram\n\nThese two facts allow us to find the included and excluded points of the\nsheared diagram. Let\u2019s start with the excluded points.\n\n#### The Excluded Points\n\nLet\u2019s say that a point X0=(x0,y0,t0) satisfies x0(1\u2212y0)<t0. This puts it above\nthe curve defined by x(1\u2212y)=t0, as shown below.\n\nWe can make the box B\u2032 just barely big enough to contain X0. This box\u2019s width\nis slightly more than x0 and its height is slightly more than 1\u2212y0. Therefore\nits area is just a bit greater than x0(1\u2212y0). But we have a bit of wiggle room\nto make it small enough that its area will remain smaller than t0.\n\nBut then, by the first rule above, it is arbitrarily likely that B\u2032 is empty\nbefore time t0. Thus, there is some padding around X0 which is arbitrarily\nunlikely to contain any points from the diagram. Therefore X0 is excluded!\n\n#### The Included Points\n\nOn the other hand, if x0(1\u2212y0)\u2265t0, then X0 is below (or on) the curve, and the\narea of B\u2032 is definitely greater than t0.\n\nBut now we can add a box B in the southeast corner of B\u2032 which contains X0.\nThe second fact about boxes tells us that it is arbitrarily likely that at\ntime t0, the box B will not be yet be empty. Therefore, we can adjust the\ndimensions of the boxes so that B becomes arbitrarily small, and it will\nalways be arbitrarily likely to contain at least one point from the diagram.\nThus, it is arbitrarily likely that a point from the diagram is arbitrarily\nclose to X0, so X0 is included!\n\n### Wrapping it Up\n\nWe\u2019ve found that, after shearing the diagram, each point X=(x,y,t) in the unit\ncube is included if x(1\u2212y)\u2265t, and excluded otherwise. So now we just have to\nundo the shear. Since the shear mapped (x,y,t) to (x+t,y,t), the inclusion and\nexclusion of points for the non-sheared diagram is really determined by\nwhether\n\n(x+t)(1\u2212y)\u2265t.\n\nThis can be rearranged into\n\ny\u2264x+tx,\n\nwhich should look pretty familiar if you\u2019ve seen my video. And that\u2019s the gist\nof the proof!\n\nOf course, this is only the curved portion of the diagram. The diagonal line\nstill has to be dealt with. But that\u2019s not very exciting, so I\u2019ll leave that\nout. Once we work through all the details, we get as our final answer that the\nshape of bubble sort is\n\n{(x,y,t)\u2208[0,1]3:y\u2264x+tx, x\u22641\u2212t}\u222a{(x,x,t):x,t\u2208[0,1]}\n\n... which is a mess of symbols. But it\u2019s just a symbolic representation of the\nshape.\n\nHere\u2019s something more visual \u2013 a 2D representation with a slider for time.\n\nAnd for fun, here\u2019s a 3D representation to go along with the 3D point diagram\nearlier.\n\n", "frontpage": true}
