{"aid": "40285362", "title": "Plot\u00adting the FreeB\u00adSD mem\u00ado\u00adry fragmentation", "url": "https://www.leidinger.net/blog/2024/05/07/plotting-the-freebsd-memory-fragmentation/", "domain": "leidinger.net", "votes": 3, "user": "todsacerdoti", "posted_at": "2024-05-07 13:43:39", "comments": 0, "source_title": "Plot\u00adting the FreeB\u00adSD mem\u00ado\u00adry fragmentation", "source_text": "Plotting the FreeBSD memory fragmentation | Alexander Leidinger\n\nSkip to content\n\nAlexander Leidinger\n\nJust another weblog\n\n# Plotting the FreeBSD memory fragmentation\n\nI stumbled upon the work of Bojan Novkovi\u0107 regarding physical memory anti-\nfragmentation mechanisms. As a picture sometimes tells more than 1000 words...\n\nXINGBalatarinBox.netDiggGmailPlurkSiteJotTypePadVKSlashdotPocketHacker\nNewsDiigoRedditLinkedInBibSonomyBufferEmailHatenaLiveJournalPrintYahoo\nMailEvernoteMail.RuPrintFriendlyOdnoklassnikiMendeleyInstapaperFarkAOL\nMailTwitterPinterestTumblrAmazon Wish\nListBlogMarksFlipboardFolkdMeneameMixiPushaSvejoWhatsAppWordPressRediff\nMyPageOutlook.comMySpaceDiary.RuPush to KindleWykopTwiddlaSina\nWeiboPinboardLineDiasporaBookmarks.frFacebookGoogle\nClassroomKakaoQzoneMessageTelegramKnownYummlyBloggerCopy\nLinkDoubanDraugiemMessengerHouzzMastodonPapalyRefindSkypeStockTwitsThreemaViberWeChatSymbaloo\nBookmarksTrelloSnapchatMeWeShare/Save\n\n## What this is about\n\nI stumbled upon the work of Bojan Novkovi\u0107 regarding physical memory anti-\nfragmentation mechanisms (attention, this is a link to the FreeBSD wiki,\ncontent may change without further notice). As a picture sometimes tells more\nthan 1000 words, I wanted to see a graphical representation of the\nfragmentation. Not in terms of which memory regions are fragmented, but in\nterms of how fragmented the UMA buckets are.\n\nBojan has a fragmentation metric (FMFI) for UMA available as a patch which\ngives a numeric representation of the fragmentation, but no graphs.\n\nAfter a bit of tinkering around with gnuplot, I came up with some way of\ngraphing it.\n\n## How to create some graphs\n\nFirst you need some data to plot a graph. Collecting the FMFI stats is easy. A\nlittle cron-job which runs this periodically is enough:\n\n    \n    \n    #!/bin/sh boottime=$(sysctl kern.boottime 2>&1 | awk '{print $5}' | sed -e 's:,::') time=$(date -r ${boottime} +%Y%m%d_%H%M) logfile=/var/tmp/vm_frag_${time}.log touch ${logfile} date \"+%Y-%m-%d_%H:%M:%S\" >> ${logfile} sysctl vm.phys_frag_idx >> ${logfile} echo >> ${logfile}\n\nThis creates log files in /var/tmp with the formatted boot time in the\nfilename, so that there is an easy indication of a reset of the fragmentation.\n\nAfter a while you should have some logs to parse. Gnuplot can not work with\nthe simple log generated by the cron-job, so a CSV needs to be generated. The\nfollowing awk script (parse_vm_frag.awk) generates the CSV. In my case there\nis only one NUMA domain, so my awk script to parse the data doesn\u2019t care about\nNUMA domains.\n\n    \n    \n    /....-..-.._..:..:../ { date = $0 } /vm.phys_frag_idx: / { next } /DOMAIN/ { next } / ORDER (SIZE) | FMFI/ { next } /--/ { next } / .. \\( .....K\\) / { printf \"%d %s %d\\n\", $1, date, $5; next }\n\nNext step is a template (template.gnuplot) for the plots:\n\n    \n    \n    set terminal svg dynamic mouse standalone name \"%%NAME%%\" # set terminal png size 1920,1280 set output \"%%NAME%%.svg\" set title '%%NAME%%' noenhanced set xdata time set timefmt \"%Y-%m-%d_%H:%M:%S\" set xlabel \"Date Time\" set zlabel \"Memory Fragmentation Index\" rotate by 90 set ylabel \"UMA Bucket\" set zrange [-1000:1000] set yrange [0:12] set ytics 1 # the following rotate doesn't work, at least chrome doesn't rotate the dates on the x-axis at all set xtics rotate by 90 format \"%F %T\" timedate set xyplane 0 set grid vertical set border 895 splot \"%%NAME%%.csv\" using 2:1:3 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 1 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 2 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 3 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 4 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 5 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 6 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 7 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 8 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 9 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 10 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 11 every 13 t '' with filledcurve, \\ \"\" using 2:1:3 skip 12 every 13 t '' with filledcurve\n\nUnfortunately I didn\u2019t get the above to work with gnuplot-variables within 5\nminutes, so I created a little script to generate a plot-script for each CSV\nfile.\n\n    \n    \n    #!/bin/sh for log in vm_frag_*.log; do base=$(basename ${log} .log) awk -f parse_vm_frag.awk <${log} >${base}.csv cp template.gnuplot ${base}.gnuplot sed -i -e \"s:%%NAME%%:${base}:g\" ${base}.gnuplot done\n\nNow it\u2019s simply \u201cgnuplot *.gnuplot\u201d (assuming the CSV files and the gnuplot\nfiles are in the same directory), and you will get SVG graphs.\n\n## Some background info\n\nAnd here are the results of running this for some days on a 2 socket, 6 core\neach plus hyperthreading Intel Xeon system with 72 GB RAM. This systems has\nabout 30 different jails with a diverse mix of nginx, mysql, postgresql,\nredis, imap, smtp, various java stuff, ..., poudriere (3 workers) and\nbuildworld runs (about 30 jails not counting the poudriere runs). So the\nfollowing graphs are not done in a reproducible way, but simply the result of\nreal-world applications running all day long. Each new graph means there was a\nreboot. All reboots where done do update to a more recent FreeBSD-current.\n\nAll in all, not only the application workload was always different, but also\nthe running kernel was different.\n\n## The graphs\n\nBeware! You can not really compare one graph with another. They do not\nrepresent the same workload. As such any conclusion you (or I) want to draw\nfrom this is more an indication than a proven fact. Big differences will be\nvisible, small changes may go unnoticed.\n\nThis is the graph of FreeBSD-current from around 2024-04-08. There are various\nmodifications compared to a stock FreeBSD system, but the only change in the\nmemory area is the FMFI patch mentioned above.\n\n## Explanation of what you see\n\nA memory fragmentation index of 1000 is bad. It means the memory is very\nfragmented. A value of 0 means there is no fragmentation, and a negative value\nmeans it is very easy to satisfy an allocation request.\n\nSo bars which go up are bad, bars which go down are good.\n\nThe UMA Bucket axis (different colors for each bucket) denotes the allocation\nsize. UMA bucket 0 is about 4k allocations, and each bucket-increase doubles\nthe allocation size up to 16M at bucket 12.\n\nIn the above graph for UMA bucket 0 all values are negative. This means that\nall allocations of upto 4k was always easy and no fragmentation was noticed.\nThis is not a surprise, given that this is the smallest allocation size.\n\nThe fact that already bucket size 1 (8k allocations) had already that much\nfragmentation was a surprise to me at that point. But see the next part for a\nfix for this.\n\n## An immediate fix which prevents some of the fragmentation\n\nThe next graph is with a world from around 2024-04-14. It contains Bojans\ncommit which prevents a bit of memory fragmentation around kernel stack guard\npages.\n\nHere it seems that Bojans fix had an immediate effect on UMA bucket 1 (8k\nallocation size). It stays in \u201cgood shape\u201d for a longer period of time. Here\nin this graph we see an improvement at the beginning until upto bucket 6 (256k\nallocation size). The graphs below even show an improvement over several days\nof may upto UMA bucket 3 (32k allocation size).\n\nOne of the next things I want to try (and plot) is review D16620 which\nsegregates *_nofree allocations per bucket (a small patch) and I\u2019m also\ninterested to see what effect review D40772 has.\n\n## Some more graphs\n\nSome more graphs, each one from an updated FreeBSD-current system (dates in\nthe graph represent the reboot into the corresponding new world). Chrome was\nrebuild by poudriere (consumes a lot of RAM relative to other packages)\nseveral times during those graphs.\n\n### Readers who viewed this page, also viewed:\n\n  * Book review: FreeBSD Device Drivers\n  * VIP\n  * Are USB memory sticks really that bad?\n  * Video4Linux support in FreeBSD\n\nXINGBalatarinBox.netDiggGmailPlurkSiteJotTypePadVKSlashdotPocketHacker\nNewsDiigoRedditLinkedInBibSonomyBufferEmailHatenaLiveJournalPrintYahoo\nMailEvernoteMail.RuPrintFriendlyOdnoklassnikiMendeleyInstapaperFarkAOL\nMailTwitterPinterestTumblrAmazon Wish\nListBlogMarksFlipboardFolkdMeneameMixiPushaSvejoWhatsAppWordPressRediff\nMyPageOutlook.comMySpaceDiary.RuPush to KindleWykopTwiddlaSina\nWeiboPinboardLineDiasporaBookmarks.frFacebookGoogle\nClassroomKakaoQzoneMessageTelegramKnownYummlyBloggerCopy\nLinkDoubanDraugiemMessengerHouzzMastodonPapalyRefindSkypeStockTwitsThreemaViberWeChatSymbaloo\nBookmarksTrelloSnapchatMeWeShare/Save\n\n### Related\n\nAuthor netchildPosted on May 7, 2024May 7, 2024Categories FreeBSD, Kernel,\nOpen Source, Software, UncategorizedTags freebsd, graph, memory fragmentation\n\n### Leave a ReplyCancel reply\n\nThis site uses Akismet to reduce spam. Learn how your comment data is\nprocessed.\n\n  * github\n  * linkedin.com\n  * keybase.io\n  * xing.com\n  * wiki.freebsd.org\n\n## Share\n\nXINGBalatarinBox.netDiggGmailPlurkSiteJotTypePadVKSlashdotPocketHacker\nNewsDiigoRedditLinkedInBibSonomyBufferEmailHatenaLiveJournalPrintYahoo\nMailEvernoteMail.RuPrintFriendlyOdnoklassnikiMendeleyInstapaperFarkAOL\nMailTwitterPinterestTumblrAmazon Wish\nListBlogMarksFlipboardFolkdMeneameMixiPushaSvejoWhatsAppWordPressRediff\nMyPageOutlook.comMySpaceDiary.RuPush to KindleWykopTwiddlaSina\nWeiboPinboardLineDiasporaBookmarks.frFacebookGoogle\nClassroomKakaoQzoneMessageTelegramKnownYummlyBloggerCopy\nLinkDoubanDraugiemMessengerHouzzMastodonPapalyRefindSkypeStockTwitsThreemaViberWeChatSymbaloo\nBookmarksTrelloSnapchatMeWeShare/Save\n\n## CATEGORIES\n\n## ARCHIVES\n\n## CALENDAR\n\nMay 2024M| T| W| T| F| S| S  \n---|---|---|---|---|---|---  \n1| 2| 3| 4| 5  \n6| 7| 8| 9| 10| 11| 12  \n13| 14| 15| 16| 17| 18| 19  \n20| 21| 22| 23| 24| 25| 26  \n27| 28| 29| 30| 31  \n  \n## Blogroll\n\n  * My links/bookmarks.\n\n## META\n\nAlexander Leidinger GDPR/DSGVO Proudly powered by WordPress\n\n\u2713\n\nThanks for sharing!\n\nAddToAny\n\nMore...\n\nWe use cookies on our website to give you the most relevant experience by\nremembering your preferences and repeat visits. By clicking \u201cAccept\u201d, you\nconsent to the use of ALL the cookies.\n\nDo not sell my personal information.\n\nSettingsAccept\n\nCookies Policy\n\n#### Privacy Overview\n\nThis website uses cookies to improve your experience while you navigate\nthrough the website. Out of these cookies, the cookies that are categorized as\nnecessary are stored on your browser as they are essential for the working of\nbasic functionalities...\n\nNecessary\n\nAlways Enabled\n\nNecessary cookies are absolutely essential for the website to function\nproperly. This category only includes cookies that ensures basic\nfunctionalities and security features of the website. These cookies do not\nstore any personal information.\n\nFunctional\n\nFunctional cookies help to perform certain functionalities like sharing the\ncontent of the website on social media platforms, collect feedbacks, and other\nthird-party features.\n\nCookie| Duration| Description  \n---|---|---  \nBlog Posts/Comments| 1 year| To remember your email address (in case you chose\nthe \"Remember me\" option).  \n  \nPerformance\n\nPerformance cookies are used to understand and analyze the key performance\nindexes of the website which helps in delivering a better user experience for\nthe visitors.\n\nAnalytics\n\nAnalytical cookies are used to understand how visitors interact with the\nwebsite. These cookies help provide information on metrics the number of\nvisitors, bounce rate, traffic source, etc.\n\nCookie| Duration| Description  \n---|---|---  \nGoogle Analytics| 1 year| To understand how people use this site, and to\ndiscover areas on this site with issues, Google Analytics is used.  \n  \nAdvertisement\n\nAdvertisement cookies are used to provide visitors with relevant ads and\nmarketing campaigns. These cookies track visitors across websites and collect\ninformation to provide customized ads.\n\nOthers\n\nOther uncategorized cookies are those that are being analyzed and have not\nbeen classified into a category as yet.\n\nCookie| Duration| Description  \n---|---|---  \nwpcom_highlander_3pc_check| session| No description  \n  \nSAVE & ACCEPT\n\nPowered by\n\n", "frontpage": false}
