{"aid": "40218603", "title": "Returns \"true\" if the user interface is currently being messed with by a monkey", "url": "https://developer.android.com/reference/android/app/ActivityManager", "domain": "android.com", "votes": 1, "user": "TheGamerUncle", "posted_at": "2024-05-01 01:41:03", "comments": 0, "source_title": "ActivityManager | Android Developers", "source_text": "ActivityManager | Android Developers\n\ndeveloper.android.com uses cookies from Google to deliver and enhance the\nquality of its services and to analyze traffic. Learn more.\n\n  * English\n  * Deutsch\n  * Espa\u00f1ol \u2013 Am\u00e9rica Latina\n  * Fran\u00e7ais\n  * Indonesia\n  * Polski\n  * Portugu\u00eas \u2013 Brasil\n  * Ti\u1ebfng Vi\u1ec7t\n  * \u4e2d\u6587 \u2013 \u7b80\u4f53\n  * \u65e5\u672c\u8a9e\n  * \ud55c\uad6d\uc5b4\n\nAndroid Studio\n\nSign in\n\n  * Develop\n\n  * On this page\n  * Summary\n\n    * Nested classes\n    * Constants\n    * Public methods\n    * Inherited methods\n  * Constants\n\n    * ACTION_REPORT_HEAP_LIMIT\n    * LOCK_TASK_MODE_LOCKED\n    * LOCK_TASK_MODE_NONE\n    * LOCK_TASK_MODE_PINNED\n    * META_HOME_ALTERNATE\n    * MOVE_TASK_NO_USER_ACTION\n    * MOVE_TASK_WITH_HOME\n    * RECENT_IGNORE_UNAVAILABLE\n    * RECENT_WITH_EXCLUDED\n  * Public methods\n\n    * addAppTask\n    * addApplicationStartInfoCompletionListener\n    * addStartInfoTimestamp\n    * appNotResponding\n    * clearApplicationUserData\n    * clearWatchHeapLimit\n    * dumpPackageState\n    * getAppTaskThumbnailSize\n    * getAppTasks\n    * getDeviceConfigurationInfo\n    * getHistoricalProcessExitReasons\n    * getHistoricalProcessStartReasons\n    * getLargeMemoryClass\n    * getLauncherLargeIconDensity\n    * getLauncherLargeIconSize\n    * getLockTaskModeState\n    * getMemoryClass\n    * getMemoryInfo\n    * getMyMemoryState\n    * getProcessMemoryInfo\n    * getProcessesInErrorState\n    * getRecentTasks\n    * getRunningAppProcesses\n    * getRunningServiceControlPanel\n    * getRunningServices\n    * getRunningTasks\n    * isActivityStartAllowedOnDisplay\n    * isBackgroundRestricted\n    * isInLockTaskMode\n    * isLowMemoryKillReportSupported\n    * isLowRamDevice\n    * isRunningInTestHarness\n    * isRunningInUserTestHarness\n    * isUserAMonkey\n    * killBackgroundProcesses\n    * moveTaskToFront\n    * moveTaskToFront\n    * removeApplicationStartInfoCompletionListener\n    * restartPackage\n    * setProcessStateSummary\n    * setVrThread\n    * setWatchHeapLimit\n\n  * Android Developers\n  * Develop\n\n  * Reference\n\nWas this helpful?\n\n  * On this page\n  * Summary\n\n    * Nested classes\n    * Constants\n    * Public methods\n    * Inherited methods\n  * Constants\n\n    * ACTION_REPORT_HEAP_LIMIT\n    * LOCK_TASK_MODE_LOCKED\n    * LOCK_TASK_MODE_NONE\n    * LOCK_TASK_MODE_PINNED\n    * META_HOME_ALTERNATE\n    * MOVE_TASK_NO_USER_ACTION\n    * MOVE_TASK_WITH_HOME\n    * RECENT_IGNORE_UNAVAILABLE\n    * RECENT_WITH_EXCLUDED\n  * Public methods\n\n    * addAppTask\n    * addApplicationStartInfoCompletionListener\n    * addStartInfoTimestamp\n    * appNotResponding\n    * clearApplicationUserData\n    * clearWatchHeapLimit\n    * dumpPackageState\n    * getAppTaskThumbnailSize\n    * getAppTasks\n    * getDeviceConfigurationInfo\n    * getHistoricalProcessExitReasons\n    * getHistoricalProcessStartReasons\n    * getLargeMemoryClass\n    * getLauncherLargeIconDensity\n    * getLauncherLargeIconSize\n    * getLockTaskModeState\n    * getMemoryClass\n    * getMemoryInfo\n    * getMyMemoryState\n    * getProcessMemoryInfo\n    * getProcessesInErrorState\n    * getRecentTasks\n    * getRunningAppProcesses\n    * getRunningServiceControlPanel\n    * getRunningServices\n    * getRunningTasks\n    * isActivityStartAllowedOnDisplay\n    * isBackgroundRestricted\n    * isInLockTaskMode\n    * isLowMemoryKillReportSupported\n    * isLowRamDevice\n    * isRunningInTestHarness\n    * isRunningInUserTestHarness\n    * isUserAMonkey\n    * killBackgroundProcesses\n    * moveTaskToFront\n    * moveTaskToFront\n    * removeApplicationStartInfoCompletionListener\n    * restartPackage\n    * setProcessStateSummary\n    * setVrThread\n    * setWatchHeapLimit\n\nAdded in API level 1\n\nSummary: Nested Classes | Constants | Methods | Inherited Methods\n\n# ActivityManager\n\nbookmark_borderbookmark Stay organized with collections Save and categorize\ncontent based on your preferences.\n\nKotlin |Java\n\npublic class ActivityManager extends Object\n\njava.lang.Object  \n---  \n\u21b3| android.app.ActivityManager  \n  \nThis class gives information about, and interacts with, activities, services,\nand the containing process.\n\nA number of the methods in this class are for debugging or informational\npurposes and they should not be used to affect any runtime behavior of your\napp. These methods are called out as such in the method level documentation.\n\nMost application developers should not have the need to use this class, most\nof whose methods are for specialized use cases. However, a few methods are\nmore broadly applicable. For instance, isLowRamDevice() enables your app to\ndetect whether it is running on a low-memory device, and behave accordingly.\nclearApplicationUserData() is for apps with reset-data functionality.\n\nIn some special use cases, where an app interacts with its Task stack, the app\nmay use the ActivityManager.AppTask and ActivityManager.RecentTaskInfo inner\nclasses. However, in general, the methods in this class should be used for\ntesting and debugging purposes only.\n\n## Summary\n\n### Nested classes  \n  \n---  \nclass| ActivityManager.AppTaskThe AppTask allows you to manage your own\napplication's tasks.  \nclass| ActivityManager.MemoryInfoInformation you can retrieve about the\navailable memory through ActivityManager#getMemoryInfo.  \nclass| ActivityManager.ProcessErrorStateInfoInformation you can retrieve about\nany processes that are in an error condition.  \nclass| ActivityManager.RecentTaskInfoInformation you can retrieve about tasks\nthat the user has most recently started or visited.  \nclass| ActivityManager.RunningAppProcessInfoInformation you can retrieve about\na running process.  \nclass| ActivityManager.RunningServiceInfoInformation you can retrieve about a\nparticular Service that is currently running in the system.  \nclass| ActivityManager.RunningTaskInfoInformation you can retrieve about a\nparticular task that is currently \"running\" in the system.  \nclass| ActivityManager.TaskDescriptionInformation you can set and retrieve\nabout the current activity within the recent task list.  \n  \n### Constants  \n  \n---  \nString| ACTION_REPORT_HEAP_LIMITAction an app can implement to handle reports\nfrom setWatchHeapLimit(long).  \nint| LOCK_TASK_MODE_LOCKEDFull lock task mode is active.  \nint| LOCK_TASK_MODE_NONELock task mode is not active.  \nint| LOCK_TASK_MODE_PINNEDApp pinning mode is active.  \nString| META_HOME_ALTERNATE<meta-data> name for a 'home' Activity that\ndeclares a package that is to be uninstalled in lieu of the declaring one.  \nint| MOVE_TASK_NO_USER_ACTIONFlag for moveTaskToFront(int, int): don't count\nthis as a user-instigated action, so the current activity will not receive a\nhint that the user is leaving.  \nint| MOVE_TASK_WITH_HOMEFlag for moveTaskToFront(int, int): also move the\n\"home\" activity along with the task, so it is positioned immediately behind\nthe task.  \nint| RECENT_IGNORE_UNAVAILABLEProvides a list that does not contain any recent\ntasks that currently are not available to the user.  \nint| RECENT_WITH_EXCLUDEDFlag for use with getRecentTasks(int, int): return\nall tasks, even those that have set their\nIntent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS flag.  \n  \n### Public methods  \n  \n---  \nint| addAppTask(Activity activity, Intent intent,\nActivityManager.TaskDescription description, Bitmap thumbnail)Add a new\nAppTask for the calling application.  \nvoid| addApplicationStartInfoCompletionListener(Executor executor,\nConsumer<ApplicationStartInfo> listener)Adds a callback to be notified when\nthe ApplicationStartInfo records of this startup are complete.  \nvoid| addStartInfoTimestamp(int key, long timestampNs)Adds an optional\ndeveloper supplied timestamp to the calling apps most recent\nApplicationStartInfo.  \nvoid| appNotResponding(String reason)Method for the app to tell system that\nit's wedged and would like to trigger an ANR.  \nboolean| clearApplicationUserData()Permits an application to erase its own\ndata from disk.  \nvoid| clearWatchHeapLimit()Clear a heap watch limit previously set by\nsetWatchHeapLimit(long).  \nvoid| dumpPackageState(FileDescriptor fd, String packageName)Perform a system\ndump of various state associated with the given application package name.  \nSize| getAppTaskThumbnailSize()Return the current design dimensions for\nAppTask thumbnails, for use with addAppTask(Activity, Intent, TaskDescription,\nBitmap).  \nList<ActivityManager.AppTask>| getAppTasks()Get the list of tasks associated\nwith the calling application.  \nConfigurationInfo| getDeviceConfigurationInfo()Get the device configuration\nattributes.  \nList<ApplicationExitInfo>| getHistoricalProcessExitReasons(String packageName,\nint pid, int maxNum)Return a list of ApplicationExitInfo records containing\nthe reasons for the most recent app deaths.  \nList<ApplicationStartInfo>| getHistoricalProcessStartReasons(int maxNum)Return\na list of ApplicationStartInfo records containing the information about the\nmost recent app startups.  \nint| getLargeMemoryClass()Return the approximate per-application memory class\nof the current device when an application is running with a large heap.  \nint| getLauncherLargeIconDensity()Get the preferred density of icons for the\nlauncher.  \nint| getLauncherLargeIconSize()Get the preferred launcher icon size.  \nint| getLockTaskModeState()Return the current state of task locking.  \nint| getMemoryClass()Return the approximate per-application memory class of\nthe current device.  \nvoid| getMemoryInfo(ActivityManager.MemoryInfo outInfo)Return general\ninformation about the memory state of the system.  \nstatic void| getMyMemoryState(ActivityManager.RunningAppProcessInfo\noutState)Return global memory state information for the calling process.  \nMemoryInfo[]| getProcessMemoryInfo(int[] pids)Return information about the\nmemory usage of one or more processes.  \nList<ActivityManager.ProcessErrorStateInfo>| getProcessesInErrorState()Returns\na list of any processes that are currently in an error condition.  \nList<ActivityManager.RecentTaskInfo>| getRecentTasks(int maxNum, int\nflags)This method was deprecated in API level 21. As of\nBuild.VERSION_CODES.LOLLIPOP, this method is no longer available to third\nparty applications: the introduction of document-centric recents means it can\nleak personal information to the caller. For backwards compatibility, it will\nstill return a small subset of its data: at least the caller's own tasks\n(though see getAppTasks() for the correct supported way to retrieve that\ninformation), and possibly some other tasks such as home that are known to not\nbe sensitive.  \nList<ActivityManager.RunningAppProcessInfo>| getRunningAppProcesses()Returns a\nlist of application processes that are running on the device.  \nPendingIntent| getRunningServiceControlPanel(ComponentName service)Returns a\nPendingIntent you can start to show a control panel for the given running\nservice.  \nList<ActivityManager.RunningServiceInfo>| getRunningServices(int maxNum)This\nmethod was deprecated in API level 26. As of Build.VERSION_CODES.O, this\nmethod is no longer available to third party applications. For backwards\ncompatibility, it will still return the caller's own services.  \nList<ActivityManager.RunningTaskInfo>| getRunningTasks(int maxNum)This method\nwas deprecated in API level 21. As of Build.VERSION_CODES.LOLLIPOP, this\nmethod is no longer available to third party applications: the introduction of\ndocument-centric recents means it can leak person information to the caller.\nFor backwards compatibility, it will still return a small subset of its data:\nat least the caller's own tasks, and possibly some other tasks such as home\nthat are known to not be sensitive.  \nboolean| isActivityStartAllowedOnDisplay(Context context, int displayId,\nIntent intent)Check if the context is allowed to start an activity on\nspecified display.  \nboolean| isBackgroundRestricted()Query whether the user has enabled background\nrestrictions for this app.  \nboolean| isInLockTaskMode()This method was deprecated in API level 23. Use\ngetLockTaskModeState() instead.  \nstatic boolean| isLowMemoryKillReportSupported()  \nboolean| isLowRamDevice()Returns true if this is a low-RAM device.  \nstatic boolean| isRunningInTestHarness()This method was deprecated in API\nlevel 29. this method is false for all user builds. Users looking to check if\ntheir device is running in a device farm should see\nisRunningInUserTestHarness().  \nstatic boolean| isRunningInUserTestHarness()Returns \"true\" if the device is\nrunning in Test Harness Mode.  \nstatic boolean| isUserAMonkey()Returns \"true\" if the user interface is\ncurrently being messed with by a monkey.  \nvoid| killBackgroundProcesses(String packageName)Have the system immediately\nkill all background processes associated with the given package.  \nvoid| moveTaskToFront(int taskId, int flags, Bundle options)Ask that the task\nassociated with a given task ID be moved to the front of the stack, so it is\nnow visible to the user.  \nvoid| moveTaskToFront(int taskId, int flags)Equivalent to calling\nmoveTaskToFront(int, int, android.os.Bundle) with a null options argument.  \nvoid|\nremoveApplicationStartInfoCompletionListener(Consumer<ApplicationStartInfo>\nlistener)Removes the provided callback set by\naddApplicationStartInfoCompletionListener(Executor, Consumer).  \nvoid| restartPackage(String packageName)This method was deprecated in API\nlevel 15. This is now just a wrapper for\nkillBackgroundProcesses(java.lang.String); the previous behavior here is no\nlonger available to applications because it allows them to break other\napplications by removing their alarms, stopping their services, etc.  \nvoid| setProcessStateSummary(byte[] state)Set custom state data for this\nprocess.  \nstatic void| setVrThread(int tid)Enable more aggressive scheduling for\nlatency-sensitive low-runtime VR threads.  \nvoid| setWatchHeapLimit(long pssSize)Request that the system start watching\nfor the calling process to exceed a pss size as given here.  \n  \n### Inherited methods  \n  \n---  \nFrom class java.lang.Object| Object| clone()Creates and returns a copy of this\nobject.  \n---|---  \nboolean| equals(Object obj)Indicates whether some other object is \"equal to\"\nthis one.  \nvoid| finalize()Called by the garbage collector on an object when garbage\ncollection determines that there are no more references to the object.  \nfinal Class<?>| getClass()Returns the runtime class of this Object.  \nint| hashCode()Returns a hash code value for the object.  \nfinal void| notify()Wakes up a single thread that is waiting on this object's\nmonitor.  \nfinal void| notifyAll()Wakes up all threads that are waiting on this object's\nmonitor.  \nString| toString()Returns a string representation of the object.  \nfinal void| wait(long timeoutMillis, int nanos)Causes the current thread to\nwait until it is awakened, typically by being notified or interrupted, or\nuntil a certain amount of real time has elapsed.  \nfinal void| wait(long timeoutMillis)Causes the current thread to wait until it\nis awakened, typically by being notified or interrupted, or until a certain\namount of real time has elapsed.  \nfinal void| wait()Causes the current thread to wait until it is awakened,\ntypically by being notified or interrupted.  \n  \n## Constants\n\n### ACTION_REPORT_HEAP_LIMIT\n\nAdded in API level 23\n\n    \n    \n    public static final String ACTION_REPORT_HEAP_LIMIT\n\nAction an app can implement to handle reports from setWatchHeapLimit(long). If\nyour package has an activity handling this action, it will be launched with\nthe heap data provided to it the same way as Intent#ACTION_SEND. Note that to\nmatch, the activity must support this action and a MIME type of \"*/*\".\n\nConstant Value: \"android.app.action.REPORT_HEAP_LIMIT\"\n\n### LOCK_TASK_MODE_LOCKED\n\nAdded in API level 23\n\n    \n    \n    public static final int LOCK_TASK_MODE_LOCKED\n\nFull lock task mode is active.\n\nConstant Value: 1 (0x00000001)\n\n### LOCK_TASK_MODE_NONE\n\nAdded in API level 23\n\n    \n    \n    public static final int LOCK_TASK_MODE_NONE\n\nLock task mode is not active.\n\nConstant Value: 0 (0x00000000)\n\n### LOCK_TASK_MODE_PINNED\n\nAdded in API level 23\n\n    \n    \n    public static final int LOCK_TASK_MODE_PINNED\n\nApp pinning mode is active.\n\nConstant Value: 2 (0x00000002)\n\n### META_HOME_ALTERNATE\n\nAdded in API level 19\n\n    \n    \n    public static final String META_HOME_ALTERNATE\n\n<meta-data> name for a 'home' Activity that declares a package that is to be\nuninstalled in lieu of the declaring one. The package named here must be\nsigned with the same certificate as the one declaring the <meta-data>.\n\nConstant Value: \"android.app.home.alternate\"\n\n### MOVE_TASK_NO_USER_ACTION\n\nAdded in API level 12\n\n    \n    \n    public static final int MOVE_TASK_NO_USER_ACTION\n\nFlag for moveTaskToFront(int, int): don't count this as a user-instigated\naction, so the current activity will not receive a hint that the user is\nleaving.\n\nConstant Value: 2 (0x00000002)\n\n### MOVE_TASK_WITH_HOME\n\nAdded in API level 11\n\n    \n    \n    public static final int MOVE_TASK_WITH_HOME\n\nFlag for moveTaskToFront(int, int): also move the \"home\" activity along with\nthe task, so it is positioned immediately behind the task.\n\nConstant Value: 1 (0x00000001)\n\n### RECENT_IGNORE_UNAVAILABLE\n\nAdded in API level 11\n\n    \n    \n    public static final int RECENT_IGNORE_UNAVAILABLE\n\nProvides a list that does not contain any recent tasks that currently are not\navailable to the user.\n\nConstant Value: 2 (0x00000002)\n\n### RECENT_WITH_EXCLUDED\n\nAdded in API level 1\n\n    \n    \n    public static final int RECENT_WITH_EXCLUDED\n\nFlag for use with getRecentTasks(int, int): return all tasks, even those that\nhave set their Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS flag.\n\nConstant Value: 1 (0x00000001)\n\n## Public methods\n\n### addAppTask\n\nAdded in API level 21\n\n    \n    \n    public int addAppTask (Activity activity, Intent intent, ActivityManager.TaskDescription description, Bitmap thumbnail)\n\nAdd a new AppTask for the calling application. This will create a new recents\nentry that is added to the end of all existing recents.\n\nParameters  \n---  \nactivity| Activity: The activity that is adding the entry. This is used to\nhelp determine the context that the new recents entry will be in. This value\ncannot be null.  \nintent| Intent: The Intent that describes the recents entry. This is the same\nIntent that you would have used to launch the activity for it. In generally\nyou will want to set both Intent#FLAG_ACTIVITY_NEW_DOCUMENT and\nIntent#FLAG_ACTIVITY_RETAIN_IN_RECENTS; the latter is required since this\nrecents entry will exist without an activity, so it doesn't make sense to not\nretain it when its activity disappears. The given Intent here also must have\nan explicit ComponentName set on it. This value cannot be null.  \ndescription| ActivityManager.TaskDescription: Optional additional description\ninformation. This value may be null.  \nthumbnail| Bitmap: Thumbnail to use for the recents entry. Should be the size\ngiven by getAppTaskThumbnailSize(). If the bitmap is not that exact size, it\nwill be recreated in your process, probably in a way you don't like, before\nthe recents entry is added. This value cannot be null.  \n  \nReturns  \n---  \nint| Returns the task id of the newly added app task, or -1 if the add failed.\nThe most likely cause of failure is that there is no more room for more tasks\nfor your app.  \n  \n### addApplicationStartInfoCompletionListener\n\nAdded in Android VanillaIceCream\n\n    \n    \n    public void addApplicationStartInfoCompletionListener (Executor executor, Consumer<ApplicationStartInfo> listener)\n\nAdds a callback to be notified when the ApplicationStartInfo records of this\nstartup are complete.\n\nNote: callback will be removed automatically after being triggered.\n\nNote: callback will not wait for Activity#reportFullyDrawn to occur. Timestamp\nfor fully drawn may be added after callback occurs. Set callback after\ninvoking Activity#reportFullyDrawn if timestamp for fully drawn is required.\n\nNote: if start records have already been retrieved, the callback will be\ninvoked immediately on the specified executor with the previously resolved\nAppStartInfo.\n\nNote: callback is asynchronous and should be made from a background thread.\n\nParameters  \n---  \nexecutor| Executor: The executor on which the listener should be called. This\nvalue cannot be null.  \nlistener| Consumer: Callback to be called when collection of\nApplicationStartInfo is complete. Will replace existing listener if one is\nalready attached. This value cannot be null.  \n  \nThrows  \n---  \nIllegalArgumentException| if executor or listener are null.  \n  \n### addStartInfoTimestamp\n\nAdded in Android VanillaIceCream\n\n    \n    \n    public void addStartInfoTimestamp (int key, long timestampNs)\n\nAdds an optional developer supplied timestamp to the calling apps most recent\nApplicationStartInfo. This is in addition to system recorded timestamps.\n\nNote: timestamps added after Activity#reportFullyDrawn is called will be\ndiscarded.\n\nNote: will overwrite existing timestamp if called with same key.\n\nParameters  \n---  \nkey| int: Unique key for timestamp. Must be greater than\nApplicationStartInfo#START_TIMESTAMP_RESERVED_RANGE_SYSTEM and less than or\nequal to ApplicationStartInfo#START_TIMESTAMP_RESERVED_RANGE_DEVELOPER. Will\nthow IllegalArgumentException if not in range. Value is between\nApplicationStartInfo.START_TIMESTAMP_RESERVED_RANGE_DEVELOPER_START and\nApplicationStartInfo.START_TIMESTAMP_RESERVED_RANGE_DEVELOPER inclusive  \ntimestampNs| long: Clock monotonic time in nanoseconds of event to be\nrecorded.  \n  \n### appNotResponding\n\nAdded in API level 30\n\n    \n    \n    public void appNotResponding (String reason)\n\nMethod for the app to tell system that it's wedged and would like to trigger\nan ANR.\n\nParameters  \n---  \nreason| String: The description of that what happened This value cannot be\nnull.  \n  \n### clearApplicationUserData\n\nAdded in API level 19\n\n    \n    \n    public boolean clearApplicationUserData ()\n\nPermits an application to erase its own data from disk. This is equivalent to\nthe user choosing to clear the app's data from within the device settings UI.\nIt erases all dynamic data associated with the app -- its private data and\ndata in its private area on external storage -- but does not remove the\ninstalled application itself, nor any OBB files. It also revokes all runtime\npermissions that the app has acquired, clears all notifications and removes\nall Uri grants related to this application.\n\nReturns  \n---  \nboolean| true if the application successfully requested that the application's\ndata be erased; false otherwise.  \n  \n### clearWatchHeapLimit\n\nAdded in API level 23\n\n    \n    \n    public void clearWatchHeapLimit ()\n\nClear a heap watch limit previously set by setWatchHeapLimit(long).\n\n### dumpPackageState\n\nAdded in API level 19\n\n    \n    \n    public void dumpPackageState (FileDescriptor fd, String packageName)\n\nPerform a system dump of various state associated with the given application\npackage name. This call blocks while the dump is being performed, so should\nnot be done on a UI thread. The data will be written to the given file\ndescriptor as text. Requires Manifest.permission.DUMP\n\nParameters  \n---  \nfd| FileDescriptor: The file descriptor that the dump should be written to.\nThe file descriptor is not closed by this function; the caller continues to\nown it.  \npackageName| String: The name of the package that is to be dumped.  \n  \n### getAppTaskThumbnailSize\n\nAdded in API level 21\n\n    \n    \n    public Size getAppTaskThumbnailSize ()\n\nReturn the current design dimensions for AppTask thumbnails, for use with\naddAppTask(Activity, Intent, TaskDescription, Bitmap).\n\nReturns  \n---  \nSize  \n  \n### getAppTasks\n\nAdded in API level 21\n\n    \n    \n    public List<ActivityManager.AppTask> getAppTasks ()\n\nGet the list of tasks associated with the calling application.\n\nReturns  \n---  \nList<ActivityManager.AppTask>| The list of tasks associated with the\napplication making this call.  \n  \nThrows  \n---  \njava.lang.SecurityException  \n  \n### getDeviceConfigurationInfo\n\nAdded in API level 3\n\n    \n    \n    public ConfigurationInfo getDeviceConfigurationInfo ()\n\nGet the device configuration attributes.\n\nReturns  \n---  \nConfigurationInfo  \n  \n### getHistoricalProcessExitReasons\n\nAdded in API level 30\n\n    \n    \n    public List<ApplicationExitInfo> getHistoricalProcessExitReasons (String packageName, int pid, int maxNum)\n\nReturn a list of ApplicationExitInfo records containing the reasons for the\nmost recent app deaths.\n\nNote: System stores this historical information in a ring buffer and only the\nmost recent records will be returned.\n\nNote: In the case that this application was bound to an external service with\nflag Context.BIND_EXTERNAL_SERVICE, the process of that external service will\nbe included in this package's exit info.\n\nParameters  \n---  \npackageName| String: Optional, a null value means match all packages belonging\nto the caller's UID. If this package belongs to another UID, you must hold\nManifest.permission.DUMP in order to retrieve it.  \npid| int: A process ID that used to belong to this package but died later; a\nvalue of 0 means to ignore this parameter and return all matching records.\nValue is 0 or greater  \nmaxNum| int: The maximum number of results to be returned; a value of 0 means\nto ignore this parameter and return all matching records Value is 0 or greater  \n  \nReturns  \n---  \nList<ApplicationExitInfo>| a list of ApplicationExitInfo records matching the\ncriteria, sorted in the order from most recent to least recent. This value\ncannot be null.  \n  \n### getHistoricalProcessStartReasons\n\nAdded in Android VanillaIceCream\n\n    \n    \n    public List<ApplicationStartInfo> getHistoricalProcessStartReasons (int maxNum)\n\nReturn a list of ApplicationStartInfo records containing the information about\nthe most recent app startups.\n\nNote: System stores this historical information in a ring buffer and only the\nmost recent records will be returned.\n\nParameters  \n---  \nmaxNum| int: The maximum number of results to be returned; a value of 0 means\nto ignore this parameter and return all matching records. If fewer records\nexist, all existing records will be returned. Value is 0 or greater  \n  \nReturns  \n---  \nList<ApplicationStartInfo>| a list of ApplicationStartInfo records matching\nthe criteria, sorted in the order from most recent to least recent. This value\ncannot be null.  \n  \n### getLargeMemoryClass\n\nAdded in API level 11\n\n    \n    \n    public int getLargeMemoryClass ()\n\nReturn the approximate per-application memory class of the current device when\nan application is running with a large heap. This is the space available for\nmemory-intensive applications; most applications should not need this amount\nof memory, and should instead stay with the getMemoryClass() limit. The\nreturned value is in megabytes. This may be the same size as getMemoryClass()\non memory constrained devices, or it may be significantly larger on devices\nwith a large amount of available RAM.\n\nThis is the size of the application's Dalvik heap if it has specified\nandroid:largeHeap=\"true\" in its manifest.\n\nReturns  \n---  \nint  \n  \n### getLauncherLargeIconDensity\n\nAdded in API level 11\n\n    \n    \n    public int getLauncherLargeIconDensity ()\n\nGet the preferred density of icons for the launcher. This is used when custom\ndrawables are created (e.g., for shortcuts).\n\nReturns  \n---  \nint| density in terms of DPI  \n  \n### getLauncherLargeIconSize\n\nAdded in API level 11\n\n    \n    \n    public int getLauncherLargeIconSize ()\n\nGet the preferred launcher icon size. This is used when custom drawables are\ncreated (e.g., for shortcuts).\n\nReturns  \n---  \nint| dimensions of square icons in terms of pixels  \n  \n### getLockTaskModeState\n\nAdded in API level 23\n\n    \n    \n    public int getLockTaskModeState ()\n\nReturn the current state of task locking. The three possible outcomes are\nLOCK_TASK_MODE_NONE, LOCK_TASK_MODE_LOCKED and LOCK_TASK_MODE_PINNED.\n\nReturns  \n---  \nint  \n  \nSee also:\n\n  * Activity.startLockTask()\n\n### getMemoryClass\n\nAdded in API level 5\n\n    \n    \n    public int getMemoryClass ()\n\nReturn the approximate per-application memory class of the current device.\nThis gives you an idea of how hard a memory limit you should impose on your\napplication to let the overall system work best. The returned value is in\nmegabytes; the baseline Android memory class is 16 (which happens to be the\nJava heap limit of those devices); some devices with more memory may return 24\nor even higher numbers.\n\nReturns  \n---  \nint  \n  \n### getMemoryInfo\n\nAdded in API level 1\n\n    \n    \n    public void getMemoryInfo (ActivityManager.MemoryInfo outInfo)\n\nReturn general information about the memory state of the system. This can be\nused to help decide how to manage your own memory, though note that polling is\nnot recommended and ComponentCallbacks2.onTrimMemory(int) is the preferred way\nto do this. Also see getMyMemoryState(RunningAppProcessInfo) for how to\nretrieve the current trim level of your process as needed, which gives a\nbetter hint for how to manage its memory.\n\nParameters  \n---  \noutInfo| ActivityManager.MemoryInfo  \n  \n### getMyMemoryState\n\nAdded in API level 16\n\n    \n    \n    public static void getMyMemoryState (ActivityManager.RunningAppProcessInfo outState)\n\nReturn global memory state information for the calling process. This does not\nfill in all fields of the RunningAppProcessInfo. The only fields that will be\nfilled in are RunningAppProcessInfo#pid, RunningAppProcessInfo#uid,\nRunningAppProcessInfo#lastTrimLevel, RunningAppProcessInfo#importance,\nRunningAppProcessInfo#lru, and RunningAppProcessInfo#importanceReasonCode.\n\nParameters  \n---  \noutState| ActivityManager.RunningAppProcessInfo  \n  \n### getProcessMemoryInfo\n\nAdded in API level 5\n\n    \n    \n    public MemoryInfo[] getProcessMemoryInfo (int[] pids)\n\nReturn information about the memory usage of one or more processes.\n\nNote: this method is only intended for debugging or building a user-facing\nprocess management UI.\n\nAs of Android Q, for regular apps this method will only return information\nabout the memory info for the processes running as the caller's uid; no other\nprocess memory info is available and will be zero. Also of Android Q the\nsample rate allowed by this API is significantly limited, if called faster the\nlimit you will receive the same data as the previous call.\n\nParameters  \n---  \npids| int: The pids of the processes whose memory usage is to be retrieved.  \n  \nReturns  \n---  \nMemoryInfo[]| Returns an array of memory information, one for each requested\npid.  \n  \n### getProcessesInErrorState\n\nAdded in API level 1\n\n    \n    \n    public List<ActivityManager.ProcessErrorStateInfo> getProcessesInErrorState ()\n\nReturns a list of any processes that are currently in an error condition. The\nresult will be null if all processes are running properly at this time.\n\nAs of Android TIRAMISU, for regular apps this method will only return\nProcessErrorStateInfo records for the processes running as the caller's uid,\nunless the caller has the permission Manifest.permission.DUMP.\n\nReturns  \n---  \nList<ActivityManager.ProcessErrorStateInfo>| Returns a list of\nProcessErrorStateInfo records, or null if there are no current error\nconditions (it will not return an empty list). This list ordering is not\nspecified.  \n  \n### getRecentTasks\n\nAdded in API level 1 Deprecated in API level 21\n\n    \n    \n    public List<ActivityManager.RecentTaskInfo> getRecentTasks (int maxNum, int flags)\n\nThis method was deprecated in API level 21. As of\nBuild.VERSION_CODES.LOLLIPOP, this method is no longer available to third\nparty applications: the introduction of document-centric recents means it can\nleak personal information to the caller. For backwards compatibility, it will\nstill return a small subset of its data: at least the caller's own tasks\n(though see getAppTasks() for the correct supported way to retrieve that\ninformation), and possibly some other tasks such as home that are known to not\nbe sensitive.\n\nReturn a list of the tasks that the user has recently launched, with the most\nrecent being first and older ones after in order.\n\nNote: this method is only intended for debugging and presenting task\nmanagement user interfaces. This should never be used for core logic in an\napplication, such as deciding between different behaviors based on the\ninformation found here. Such uses are not supported, and will likely break in\nthe future. For example, if multiple applications can be actively running at\nthe same time, assumptions made about the meaning of the data here for\npurposes of control flow will be incorrect.\n\nParameters  \n---  \nmaxNum| int: The maximum number of entries to return in the list. The actual\nnumber returned may be smaller, depending on how many tasks the user has\nstarted and the maximum number the system can remember.  \nflags| int: Information about what to return. May be any combination of\nRECENT_WITH_EXCLUDED and RECENT_IGNORE_UNAVAILABLE.  \n  \nReturns  \n---  \nList<ActivityManager.RecentTaskInfo>| Returns a list of RecentTaskInfo records\ndescribing each of the recent tasks.  \n  \nThrows  \n---  \nSecurityException  \n  \n### getRunningAppProcesses\n\nAdded in API level 3\n\n    \n    \n    public List<ActivityManager.RunningAppProcessInfo> getRunningAppProcesses ()\n\nReturns a list of application processes that are running on the device.\n\nNote: this method is only intended for debugging or building a user-facing\nprocess management UI.\n\nReturns  \n---  \nList<ActivityManager.RunningAppProcessInfo>| Returns a list of\nRunningAppProcessInfo records, or null if there are no running processes (it\nwill not return an empty list). This list ordering is not specified.  \n  \n### getRunningServiceControlPanel\n\nAdded in API level 5\n\n    \n    \n    public PendingIntent getRunningServiceControlPanel (ComponentName service)\n\nReturns a PendingIntent you can start to show a control panel for the given\nrunning service. If the service does not have a control panel, null is\nreturned.\n\nParameters  \n---  \nservice| ComponentName  \n  \nReturns  \n---  \nPendingIntent  \n  \nThrows  \n---  \nSecurityException  \n  \n### getRunningServices\n\nAdded in API level 1 Deprecated in API level 26\n\n    \n    \n    public List<ActivityManager.RunningServiceInfo> getRunningServices (int maxNum)\n\nThis method was deprecated in API level 26. As of Build.VERSION_CODES.O, this\nmethod is no longer available to third party applications. For backwards\ncompatibility, it will still return the caller's own services.\n\nReturn a list of the services that are currently running.\n\nNote: this method is only intended for debugging or implementing service\nmanagement type user interfaces.\n\nParameters  \n---  \nmaxNum| int: The maximum number of entries to return in the list. The actual\nnumber returned may be smaller, depending on how many services are running.  \n  \nReturns  \n---  \nList<ActivityManager.RunningServiceInfo>| Returns a list of RunningServiceInfo\nrecords describing each of the running tasks.  \n  \nThrows  \n---  \nSecurityException  \n  \n### getRunningTasks\n\nAdded in API level 1 Deprecated in API level 21\n\n    \n    \n    public List<ActivityManager.RunningTaskInfo> getRunningTasks (int maxNum)\n\nThis method was deprecated in API level 21. As of\nBuild.VERSION_CODES.LOLLIPOP, this method is no longer available to third\nparty applications: the introduction of document-centric recents means it can\nleak person information to the caller. For backwards compatibility, it will\nstill return a small subset of its data: at least the caller's own tasks, and\npossibly some other tasks such as home that are known to not be sensitive.\n\nReturn a list of the tasks that are currently running, with the most recent\nbeing first and older ones after in order. Note that \"running\" does not mean\nany of the task's code is currently loaded or activity -- the task may have\nbeen frozen by the system, so that it can be restarted in its previous state\nwhen next brought to the foreground.\n\nNote: this method is only intended for debugging and presenting task\nmanagement user interfaces. This should never be used for core logic in an\napplication, such as deciding between different behaviors based on the\ninformation found here. Such uses are not supported, and will likely break in\nthe future. For example, if multiple applications can be actively running at\nthe same time, assumptions made about the meaning of the data here for\npurposes of control flow will be incorrect.\n\nParameters  \n---  \nmaxNum| int: The maximum number of entries to return in the list. The actual\nnumber returned may be smaller, depending on how many tasks the user has\nstarted.  \n  \nReturns  \n---  \nList<ActivityManager.RunningTaskInfo>| Returns a list of RunningTaskInfo\nrecords describing each of the running tasks.  \n  \nThrows  \n---  \nSecurityException  \n  \n### isActivityStartAllowedOnDisplay\n\nAdded in API level 29\n\n    \n    \n    public boolean isActivityStartAllowedOnDisplay (Context context, int displayId, Intent intent)\n\nCheck if the context is allowed to start an activity on specified display.\nSome launch restrictions may apply to secondary displays that are private,\nvirtual, or owned by the system, in which case an activity start may throw a\nSecurityException. Call this method prior to starting an activity on a\nsecondary display to check if the current context has access to it.\n\nParameters  \n---  \ncontext| Context: Source context, from which an activity will be started. This\nvalue cannot be null.  \ndisplayId| int: Target display id.  \nintent| Intent: Intent used to launch an activity. This value cannot be null.  \n  \nReturns  \n---  \nboolean| true if a call to start an activity on the target display is allowed\nfor the provided context and no SecurityException will be thrown, false\notherwise.  \n  \nSee also:\n\n  * ActivityOptions.setLaunchDisplayId(int)\n  * Display.FLAG_PRIVATE\n\n### isBackgroundRestricted\n\nAdded in API level 28\n\n    \n    \n    public boolean isBackgroundRestricted ()\n\nQuery whether the user has enabled background restrictions for this app.\n\nThe user may chose to do this, if they see that an app is consuming an\nunreasonable amount of battery while in the background.\n\nIf true, any work that the app tries to do will be aggressively restricted\nwhile it is in the background. At a minimum, jobs and alarms will not execute\nand foreground services cannot be started unless an app activity is in the\nforeground.\n\nNote that these restrictions stay in effect even when the device is charging.\n\nReturns  \n---  \nboolean| true if user has enforced background restrictions for this app, false\notherwise.  \n  \n### isInLockTaskMode\n\nAdded in API level 21 Deprecated in API level 23\n\n    \n    \n    public boolean isInLockTaskMode ()\n\nThis method was deprecated in API level 23. Use getLockTaskModeState()\ninstead.\n\nReturn whether currently in lock task mode. When in this mode no new tasks can\nbe created or switched to.\n\nReturns  \n---  \nboolean  \n  \nSee also:\n\n  * Activity.startLockTask()\n\n### isLowMemoryKillReportSupported\n\nAdded in API level 30\n\n    \n    \n    public static boolean isLowMemoryKillReportSupported ()\n\nReturns  \n---  \nboolean| Whether or not the low memory kill will be reported in\ngetHistoricalProcessExitReasons(String, int, int).  \n  \nSee also:\n\n  * ApplicationExitInfo.REASON_LOW_MEMORY\n\n### isLowRamDevice\n\nAdded in API level 19\n\n    \n    \n    public boolean isLowRamDevice ()\n\nReturns true if this is a low-RAM device. Exactly whether a device is low-RAM\nis ultimately up to the device configuration, but currently it generally means\nsomething with 1GB or less of RAM. This is mostly intended to be used by apps\nto determine whether they should turn off certain features that require more\nRAM.\n\nReturns  \n---  \nboolean  \n  \n### isRunningInTestHarness\n\nAdded in API level 11 Deprecated in API level 29\n\n    \n    \n    public static boolean isRunningInTestHarness ()\n\nThis method was deprecated in API level 29. this method is false for all user\nbuilds. Users looking to check if their device is running in a device farm\nshould see isRunningInUserTestHarness().\n\nReturns \"true\" if device is running in a test harness.\n\nReturns  \n---  \nboolean  \n  \n### isRunningInUserTestHarness\n\nAdded in API level 29\n\n    \n    \n    public static boolean isRunningInUserTestHarness ()\n\nReturns \"true\" if the device is running in Test Harness Mode.\n\nTest Harness Mode is a feature that allows devices to run without human\ninteraction in a device farm/testing harness (such as Firebase Test Lab). You\nshould check this method if you want your app to behave differently when\nrunning in a test harness to skip setup screens that would impede UI testing.\ne.g. a keyboard application that has a full screen setup page for the first\ntime it is launched.\n\nNote that you should not use this to determine whether or not your app is\nrunning an instrumentation test, as it is not set for a standard device\nrunning a test.\n\nReturns  \n---  \nboolean  \n  \n### isUserAMonkey\n\nAdded in API level 8\n\n    \n    \n    public static boolean isUserAMonkey ()\n\nReturns \"true\" if the user interface is currently being messed with by a\nmonkey.\n\nReturns  \n---  \nboolean  \n  \n### killBackgroundProcesses\n\nAdded in API level 8\n\n    \n    \n    public void killBackgroundProcesses (String packageName)\n\nHave the system immediately kill all background processes associated with the\ngiven package. This is the same as the kernel killing those processes to\nreclaim memory; the system will take care of restarting these processes in the\nfuture as needed.\n\nOn devices that run Android 14 or higher, third party applications can only\nuse this API to kill their own processes.\n\nRequires Manifest.permission.KILL_BACKGROUND_PROCESSES\n\nParameters  \n---  \npackageName| String: The name of the package whose processes are to be killed.  \n  \n### moveTaskToFront\n\nAdded in API level 16\n\n    \n    \n    public void moveTaskToFront (int taskId, int flags, Bundle options)\n\nAsk that the task associated with a given task ID be moved to the front of the\nstack, so it is now visible to the user. Requires\nManifest.permission.REORDER_TASKS\n\nParameters  \n---  \ntaskId| int: The identifier of the task to be moved, as found in\nRunningTaskInfo or RecentTaskInfo.  \nflags| int: Additional operational flags. Value is either 0 or a combination\nof MOVE_TASK_WITH_HOME, and MOVE_TASK_NO_USER_ACTION  \noptions| Bundle: Additional options for the operation, either null or as per\nContext.startActivity(Intent, Bundle).  \n  \n### moveTaskToFront\n\nAdded in API level 11\n\n    \n    \n    public void moveTaskToFront (int taskId, int flags)\n\nEquivalent to calling moveTaskToFront(int, int, android.os.Bundle) with a null\noptions argument. Requires Manifest.permission.REORDER_TASKS\n\nParameters  \n---  \ntaskId| int: The identifier of the task to be moved, as found in\nRunningTaskInfo or RecentTaskInfo.  \nflags| int: Additional operational flags. Value is either 0 or a combination\nof MOVE_TASK_WITH_HOME, and MOVE_TASK_NO_USER_ACTION  \n  \n### removeApplicationStartInfoCompletionListener\n\nAdded in Android VanillaIceCream\n\n    \n    \n    public void removeApplicationStartInfoCompletionListener (Consumer<ApplicationStartInfo> listener)\n\nRemoves the provided callback set by\naddApplicationStartInfoCompletionListener(Executor, Consumer).\n\nParameters  \n---  \nlistener| Consumer: This value cannot be null.  \n  \n### restartPackage\n\nAdded in API level 3 Deprecated in API level 15\n\n    \n    \n    public void restartPackage (String packageName)\n\nThis method was deprecated in API level 15. This is now just a wrapper for\nkillBackgroundProcesses(java.lang.String); the previous behavior here is no\nlonger available to applications because it allows them to break other\napplications by removing their alarms, stopping their services, etc.\n\nParameters  \n---  \npackageName| String  \n  \n### setProcessStateSummary\n\nAdded in API level 30\n\n    \n    \n    public void setProcessStateSummary (byte[] state)\n\nSet custom state data for this process. It will be included in the record of\nApplicationExitInfo on the death of the current calling process; the new\nprocess of the app can retrieve this state data by calling\nApplicationExitInfo.getProcessStateSummary() on the record returned by\ngetHistoricalProcessExitReasons(String, int, int).\n\nThis would be useful for the calling app to save its stateful data: if it's\nkilled later for any reason, the new process of the app can know what the\nprevious process of the app was doing. For instance, you could use this to\nencode the current level in a game, or a set of features/experiments that were\nenabled. Later you could analyze under what circumstances the app tends to\ncrash or use too much memory. However, it's not suggested to rely on this to\nrestore the applications previous UI state or so, it's only meant for\nanalyzing application healthy status.\n\nSystem might decide to throttle the calls to this API; so call this API in a\nreasonable manner, excessive calls to this API could result a\nRuntimeException.\n\nParameters  \n---  \nstate| byte: The state data. To be advised, DO NOT include sensitive\ninformation/data (PII, SPII, or other sensitive user data) here. Maximum\nlength is 128 bytes. This value may be null.  \n  \n### setVrThread\n\nAdded in API level 25\n\n    \n    \n    public static void setVrThread (int tid)\n\nEnable more aggressive scheduling for latency-sensitive low-runtime VR\nthreads. Only one thread can be a VR thread in a process at a time, and that\nthread may be subject to restrictions on the amount of time it can run. If\npersistent VR mode is set, whatever thread has been granted aggressive\nscheduling via this method will return to normal operation, and calling this\nmethod will do nothing while persistent VR mode is enabled. To reset the VR\nthread for an application, a tid of 0 can be passed.\n\nParameters  \n---  \ntid| int: tid of the VR thread  \n  \nSee also:\n\n  * Process.myTid()\n\n### setWatchHeapLimit\n\nAdded in API level 23\n\n    \n    \n    public void setWatchHeapLimit (long pssSize)\n\nRequest that the system start watching for the calling process to exceed a pss\nsize as given here. Once called, the system will look for any occasions where\nit sees the associated process with a larger pss size and, when this happens,\nautomatically pull a heap dump from it and allow the user to share the data.\nNote that this request continues running even if the process is killed and\nrestarted. To remove the watch, use clearWatchHeapLimit().\n\nThis API only works if the calling process has been marked as\nApplicationInfo#FLAG_DEBUGGABLE or this is running on a debuggable (userdebug\nor eng) build.\n\nCallers can optionally implement ACTION_REPORT_HEAP_LIMIT to directly handle\nheap limit reports themselves.\n\nParameters  \n---  \npssSize| long: The size in bytes to set the limit at.  \n  \nWas this helpful?\n\nContent and code samples on this page are subject to the licenses described in\nthe Content License. Java and OpenJDK are trademarks or registered trademarks\nof Oracle and/or its affiliates.\n\nLast updated 2024-04-11 UTC.\n\n", "frontpage": false}
