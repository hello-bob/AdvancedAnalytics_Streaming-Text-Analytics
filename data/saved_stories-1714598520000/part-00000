{"aid": "40224539", "title": "Show HN: An OpenAPI guide written for developers", "url": "https://www.speakeasyapi.dev/openapi", "domain": "speakeasyapi.dev", "votes": 2, "user": "indybonez", "posted_at": "2024-05-01 15:20:24", "comments": 0, "source_title": "OpenAPI Reference | Speakeasy", "source_text": "OpenAPI Reference | Speakeasy\n\nTry It Now\n\nLog in\n\n  * Intro to OpenAPI\n  * Info\n  * Servers\n\n    * Server Variables\n\n  * Security\n\n    * Security Schemes\n\n      * API Key Security\n      * Basic Security\n      * Bearer Security\n      * OAuth2.0 Security\n      * OpenID Connect Security\n\n  * Tags\n  * Paths\n\n    * Parameters\n\n      * Path Parameters\n      * Header Parameters\n      * Query Parameters\n      * Cookie Parameters\n\n    * Operations\n\n      * Content & Media Types\n      * Requests\n      * Responses\n\n        * Links\n        * Headers\n\n      * Callbacks\n\n  * Webhooks\n  * Schemas\n\n    * Data Types\n    * Strings\n    * Numbers\n    * Booleans\n    * Arrays\n    * Objects\n\n      * OneOf, AllOf, AnyOf\n      * XML\n\n    * Enums\n    * Null\n\n  * Components\n  * Examples\n  * References $ref\n  * Extensions\n  * External Documentation\n  * OpenAPI Overlays\n  * OpenAPI Workflows\n\n# OpenAPI 3.1. Reference\n\nContribute!\n\nHi! \ud83d\udc4b This documentation is Open source. If you have any feedback,\nsuggestions, or want to contribute, check out our GitHub repo (opens in a new\ntab).\n\n## Quicklinks\n\nRequestsResponsesSchemas\n\nAsk AI\n\n## Introduction\n\nAPI design is important. An API that developers enjoy interacting with turns a\nSaaS business into a platform. However great design is only useful if it's\nwell-documented and consistently represented across every API surface area\n(docs, SDKs, etc.).\n\nThat is where OpenAPI comes in. Trying to manually create & maintain all your\nsurfaces will inevitably lead to frustration and inconsistencies. Instead, if\nyou are building a RESTful API, OpenAPI will be (should be) the source of\ntruth that undergirds the creation of all your public surfaces (docs, SDKs,\netc.).\n\nThis documentation will help you understand the OpenAPI Specification.\n\n## What is OpenAPI and why use it?\n\nWhen we refer to OpenAPI, we mean the OpenAPI Specification - a standardized\ndocument structure for describing HTTP APIs in a way that humans and computers\ncan understand.\n\nOpenAPI files are written as JSON or YAML, describing your API using a\nstandard vocabulary defined by the Specification - we'll call this JSON or\nYAML file an OpenAPI document.\n\nA valid OpenAPI document describes your RESTful API and serves as the\ninstruction set for tooling that generates API documentation, SDKs, and more.\nWe will refer to an app or tool that reads an OpenAPI document to perform an\naction as an OpenAPI tool. Speakeasy is one such tool, a full list can be\nfound here (opens in a new tab).\n\n### OpenAPI Document Basics\n\nYour OpenAPI document is composed of keywords (some required, some optional).\nTogether, the document covers the key elements of your API:\n\n  * What security is required to access it?\n  * Which endpoints expose which resources?\n  * How are those resources constructed?\n\n#### openapi\n\nThe version of the OpenAPI Specification that the document conforms to, should\nbe one of the supported versions (opens in a new tab).\n\nNote: Speakeasy tooling currently only supports OpenAPI Specification versions\n3.0.x and 3.1.x.\n\n#### info\n\nContains information about the document including fields like title, version,\nand description that help to identify the purpose and owner of the document.\n\n#### servers\n\nContains an optional list of servers the API is available on. If not provided,\nthe default URL is assumed to be /, a path relative to where the OpenAPI\ndocument is hosted.\n\n#### security\n\nContains an optional list of security requirements that apply to all\noperations in the API. If not provided, the default security requirements are\nassumed to be [], an empty array.\n\n#### tags\n\nContains an optional list of tags that are generally used to group or\ncategorize a set of Operations.\n\n#### paths\n\nContains the paths and operations available within the API.\n\n#### components\n\nContains an optional list of reusable schemas that can be referenced from\nother parts of the document. This improves the readability and maintainability\nof the document by allowing common schemas to be defined once and reused in\nmultiple places.\n\nopenapi.yaml\n\nopenapi: 3.1.0\n\ninfo:\n\ntitle: The Speakeasy Bar\n\nversion: 1.0.0\n\nservers:\n\n\\- url: https://speakeasy.bar\n\ndescription: The production server\n\nsecurity:\n\n\\- apiKey: []\n\ntags:\n\n\\- name: drinks\n\ndescription: Operations related to drinks\n\npaths:\n\n/drinks:\n\nget:\n\ntags:\n\n\\- drinks\n\noperationId: listDrinks\n\nsummary: Get a list of drinks\n\nresponses:\n\n\"200\":\n\ndescription: A list of drinks\n\ncontent:\n\napplication/json:\n\nschema:\n\ntype: array\n\nitems:\n\n$ref: \"#/components/schemas/Drink\"\n\ncomponents:\n\nschemas:\n\nDrink:\n\ntype: object\n\ntitle: Drink\n\nproperties:\n\nname:\n\ntype: string\n\nprice:\n\ntype: number\n\nsecuritySchemes:\n\napiKey:\n\ntype: apiKey\n\nname: Authorization\n\nin: header\n\n## Format and File Structure\n\nAn OpenAPI document is a JSON or YAML file that contains either an entire API\ndefinition or a partial definition of an API and/or its components. All field\nnames in the specification are case-sensitive unless otherwise specified.\n\nA document can be split into multiple files, and the files can be in different\nformats. For example, you can have a JSON file that contains the API\ndefinition and a YAML file that contains the components, or a collection of\nfiles that contain partial definitions of the API and its components.\n\nGenerally, the main API definition file is called openapi.json or\nopenapi.yaml, and the component files are called components.json or\ncomponents.yaml, though this is not a requirement.\n\nSome common organizational patterns for OpenAPI documents are:\n\n  * A single file that contains the entire API definition.\n  * A main file that contains the API definition and a components file that contains the components.\n\n    * This is normally achieved by using the $ref keyword to reference the components file from the main file. Click here for more information on references.\n  * A collection of files that contain partial definitions of the API and its components.\n\n    * Some tools support this pattern by allowing multiple files to be provided. Others, such as the Speakeasy Generator, require the individual files to be merged into a single file before being passed to the tool, which can be achieved using the Speakeasy CLI tool. Click here for more information on the Speakeasy CLI merge tool (opens in a new tab).\n\n## How is this different to the official OpenAPI documentation?\n\nThe goal of this documentation is to provide a practioner's guide for\ndevelopers interested in understanding the impact of OpenAPI design on their\ndownstream API surfaces. This guide prioritizes approachability and\npracticality over technical completeness.\n\nWe've structured the documentation according to the needs of OpenAPI users of\nany skill level.\n\nWhich versions of the OpenAPI Specification does this documentation cover?\n\nThis documentation will cover versions 3.0.x and 3.1.x of the OpenAPI\nspecification. Where there is an important difference between the two\nversions, we will call it out specifically, otherwise the documentation will\napply to both versions.\n\nOpenAPI is a standard for describing RESTful APIs. OpenAPI allows developers\nto define all the core elements of an API: endpoints, request and response\ndata formats, authentication methods, etc.\n\nThere are several versions of the OpenAPI specification in circulation: 2.0\n(also known as Swagger), 3.0, and 3.1.\n\nSpeakeasy supports OpenAPI versions 3.0 and 3.1. We recommend developers use\nOpenAPI version 3.1 for all projects. The advantage of using OpenAPI version\n3.1 is that it is fully compatible with JSON Schema (opens in a new tab),\nwhich gives you access to a much larger ecosystem of tools and libraries.\n\nTry It Now\n\nLog in\n\nBlog\n\nAbout Us\n\nWe're Hiring!\n\nGet in touch\n\nDocs\n\nChangelog\n\nCommunity\n\nEvents\n\nStatus\n\nRoadmap\n\nBook a Demo\n\nTerms of Service\n\nPrivacy Policy\n\n\u00a9 2024 Speakeasy, Inc. All Rights Reserved.\n\n", "frontpage": false}
