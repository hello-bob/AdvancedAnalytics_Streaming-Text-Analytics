{"aid": "40272538", "title": "Binary embedding API for BGE embeddings", "url": "https://github.com/ozonetelgit/ozonetel-ai-sdk", "domain": "github.com/ozonetelgit", "votes": 1, "user": "nutanc", "posted_at": "2024-05-06 08:43:49", "comments": 0, "source_title": "GitHub - ozonetelgit/ozonetel-ai-sdk", "source_text": "GitHub - ozonetelgit/ozonetel-ai-sdk\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nozonetelgit / ozonetel-ai-sdk Public\n\n  * Notifications\n  * Fork 0\n  * Star 0\n\n### License\n\nMIT license\n\n0 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# ozonetelgit/ozonetel-ai-sdk\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n2 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nBiswajit2902bugfix and feature addMay 6, 20244dc3352 \u00b7 May 6, 2024May 6, 2024\n\n## History\n\n28 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Update ci.yml| Apr 23, 2024  \n  \n### examples\n\n|\n\n### examples\n\n| updated docs and functionalities| May 3, 2024  \n  \n### ozoneai\n\n|\n\n### ozoneai\n\n| bugfix and feature add| May 6, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| added examples| May 2, 2024  \n  \n### CHANGES.md\n\n|\n\n### CHANGES.md\n\n| bugfix and feature add| May 6, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Apr 22, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| bugfix and feature add| May 6, 2024  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| updated quantisation methods| Apr 24, 2024  \n  \n### setup.py\n\n|\n\n### setup.py\n\n| bugfix and feature add| May 6, 2024  \n  \n## Repository files navigation\n\n# Ozonetel AI\n\n## Overview\n\nThe Ozonetel AI project is designed to provide a user-friendly interface for\nsoftware development using Ozonetel's in-house AI libraries, models, and\nsoftware solutions. It offers seamless integration with Ozonetel's advanced AI\ncapabilities, allowing developers to harness the power of AI to enhance their\napplications.\n\n## Features\n\n  * Text Embedding (Binary Embeddings): The Ozonetel AI project currently offers text embedding functionality, allowing users to convert text into high-dimensional bit vectors for various natural language processing tasks.\n\n## Getting Started\n\nTo get started with the Ozonetel AI project, follow the steps below:\n\n  1. Usage\n\n    1. Installation\n    \n        pip install ozonetel-ai\n\n    2. compute binary embedding\n    \n        from ozoneai.embeddings import BinarizeEmbedding from ozoneai.utils import bit_sim from sentence_transformers import SentenceTransformer credential = {\"username\":\"\", \"bearer_token\":\"\"} model = SentenceTransformer(\"BAAI/bge-m3\") binary_encoder = BinarizeEmbedding(endcoder_modelid=\"BAAI/bge-m3\",credential=credential)\n\n  2. Set Credentials: Before using the text embedding feature, set your credentials by importing the os module and setting the OZAI_API_CREDENTIALS environment variable to point to your credentials file.\n\nExample:\n\n    \n        import os os.environ[\"OZAI_API_CREDENTIALS\"] = \"./cred.json\"\n\nor,\n\n    \n        credential = {\"username\":\"\", \"bearer_token\":\"\"}\n\n  3. Text Embedding Extraction Text embedding converts textual data into numerical representations, aiding natural language processing tasks. By capturing semantic meaning, it enhances sentiment analysis, document classification, and named entity recognition. Efficient and transferable, embeddings facilitate faster computation and enable machine learning models to better understand and process text. BinarizeSentenceEmbedding binarizes base embeddings and represents in bits.\n\nExample:\n\n     * Binary Embedding extraction\n        \n                # Import `BinarizeSentenceEmbedding` class from the `ozoneai.embeddings` module. from ozoneai.embeddings import BinarizeSentenceEmbedding # Extract Embeddings: Use the `binarize` method to obtain binarized embeddings for given texts . # Supported models encoders are `sentence-transformers/paraphrase-multilingual-mpnet-base-v2` and `BAAI/bge-m3` # Alternatively if you have stored these models in local directory you can use like `/path/to/paraphrase-multilingual-mpnet-base-v2` or `/path/to/bge-m3` # Note: for safest use `OZAI_API_CREDENTIALS`. In that case `credential` argument can be ignored. if `credential` is not defined `OZAI_API_CREDENTIALS` will be considered. binary_encoder = BinarizeSentenceEmbedding(endcoder_modelid=\"BAAI/bge-m3\", credential = credential) emb = binary_encoder.encode([\"Try me Out\"]) emb_binarized = binary_encoder.get_binary_embeddings(emb, model=\"sieve-bge-m3-en-aug-v1\") # max limit 20 vectors per request # Access Embedding Attributes: Retrieve various attributes of the embedding object, such as bits, unsigned binary, and signed binary. # Get binary representation embeddings = emb_binarized.embedding\n\n     * List the supported models\n        \n                from ozoneai.embeddings import list_models list_models()\n\n     * Document Similarity\n        \n                from ozoneai.embeddings import BinarizeEmbedding from ozoneai.utils import bit_sim from sentence_transformers import SentenceTransformer credential = {\"username\":\"\", \"bearer_token\":\"\"} model = SentenceTransformer(\"BAAI/bge-m3\") binary_encoder = BinarizeEmbedding(endcoder_modelid=\"BAAI/bge-m3\",credential=credential) # Compute embedding for both lists query = [\"What is BGE M3?\", \"Define BM25\"] document = [\"BGE M3 is an embedding model supporting dense retrieval, lexical matching and multi-vector interaction.\", \"BM25 is a bag-of-words retrieval function that ranks a set of documents based on the query terms appearing in each document\"] query_embeddings = binary_encoder.get_binary_embeddings(model.encode(query), model=\"sieve-bge-m3-en-aug-v1\").embedding doc_embeddings = binary_encoder.get_binary_embeddings(model.encode(document), model=\"sieve-bge-m3-en-aug-v1\").embedding # Compute similarities scores = bit_sim(query_embeddings, doc_embeddings) for i, qs in enumerate(scores): for j, ds in enumerate(qs): print(f\"query {i} vs doc {j} : similarity - {round(float(ds), 3)}\")\n        \n                output: query 0 vs doc 0 : similarity - 0.627 query 0 vs doc 1 : similarity - 0.537 query 1 vs doc 0 : similarity - 0.528 query 1 vs doc 1 : similarity - 0.634\n\n## Sample Applications\n\n### Search And Index:\n\n    \n    \n    import numpy as np, os from ozoneai.embeddings import BinarizeEmbedding from sentence_transformers import SentenceTransformer # define credentials # os.environ[\"OZAI_API_CREDENTIALS\"] = \"./cred.json\" credential = {\"username\":\"\", \"bearer_token\":\"\"} base_model = SentenceTransformer(\"BAAI/bge-m3\") binary_encoder = BinarizeEmbedding(endcoder_modelid=\"BAAI/bge-m3\",credential=credential) # Documents to be Indexed docs = [ \"The cat sits outside\", \"A man is playing guitar\", \"I love pasta\", \"The new movie is awesome\", \"The cat plays in the garden\", \"A woman watches TV\", \"The new movie is so great\", \"Do you like pizza?\", \"Artifical intelligence is all about enabling computers to simulate human capabilities.\", \"Artifical intelligence is there to help human\", \"Language moodel has lot of impact on artifical intelligence\", \"Artifical intelligence is reigning in industry\", \"ROI is one the useful measure for any investors\", \"Understand before you invest\" ] # Extract Embeddings for documents to be indexed docs_emb = base_model.encode(docs) # Binarise embeedings docs_emb_binarized = binary_encoder.get_binary_embeddings(docs_emb, model=\"sieve-bge-m3-en-aug-v1\") # Searching # query_text = \"the girl was sitting in the park\" query_text = \"I love Artifical Intellegence\" # query_text = \"Artifical intellegence helps optimising software\" # query_text = \"what is machine learning\" # Extract Embeddings query # Compute sentence embedding using SentenceTransformers (i.e. bge-m3 or paraphrase-multilingual-mpnet-base-v2) query_emb = base_model.encode([query_text]) # Binarise embeedings query_emb_binarized = binary_encoder.get_binary_embeddings(query_emb, model=\"sieve-bge-m3-en-aug-v1\") scores = bit_sim(query_emb_binarized.embedding, docs_emb_binarized.embedding).flatten() topn = 5 topn_indices = np.argsort(-scores)[:topn] # Print search result in order for i, doci in enumerate(topn_indices): print(f\"{i}. {docs[doci]} [{doci}] ({scores[doci]})\")\n\ntry more..\n\n## Benchmarks\n\n### Classification\n\nS.N| Dataset| paraphrase-multilingual-mpnet-base-v2| siv-sentence-bitnet-\npmbv2-wikid-small| bge-m3| sieve-bge-m3-en-aug-v0| sieve-bge-m3-en-aug-v1  \n---|---|---|---|---|---|---  \n1| Amazon Counterfactual Classification(en)| 75.81| 79.06| 75.63| 79.23| 78.28  \n2| Amazon Polarity Classification| 76.41| 70.19| 91.01| 86.81| 85.69  \n3| Amazon Reviews Classification| 38.51| 34.29| 46.99| 43.51| 43  \n4| Banking 77 Classification| 81.07| 75.89| 81.93| 82.06| 82.75  \n5| Emotion Classification| 45.83| 40.26| 50.16| 42.34| 42.4  \n6| Imdb Classification| 64.57| 61.14| 87.84| 85.06| 84.44  \n7| Massive Intent Classification (en)| 69.32| 65.6| 71.08| 68.9| 70.22  \n8| Massive Scenario Classification (en)| 75.35| 70.37| 76.64| 71.29| 72.68  \n9| MTOP Domain Classification (en)| 89.24| 87.22| 93.36| 87.56| 88.37  \n10| MTOP Intent Classification (en)| 68.69| 69.45| 66.58| 74.11| 74.02  \n11| Toxic Conversations Classification| 71.02| 70.26| 72.6| 68| 68.59  \n12| Tweet Sentiment Extraction Classification| 59.03| 54.49| 63.71| 56.96|\n56.91  \n  \n### STS\n\nS.N| Dataset| paraphrase-multilingual-mpnet-base-v2| siv-sentence-bitnet-\npmbv2-wikid-small| bge-m3| sieve-bge-m3-en-aug-v0| sieve-bge-m3-en-aug-v1  \n---|---|---|---|---|---|---  \n1| BIOSSES| 76.27| 65.29| 83.38| 82.91| 83.97  \n2| SICK-R| 79.62| 76.01| 79.91| 75.26| 76.5  \n3| STS12| 77.9| 71.25| 78.73| 66.95| 68.88  \n4| STS13| 85.11| 78.4| 79.6| 64| 69.09  \n5| STS14| 80.81| 74.23| 79| 62.83| 67.74  \n6| STS15| 87.48| 81.41| 87.81| 80| 82.08  \n7| STS16| 83.2| 79.13| 85.4| 77.87| 79.31  \n8| STS17(en-en)| 86.99| 85.4| 87.13| 84.1| 85.32  \n9| STS Benchmark| 86.82| 81.34| 84.85| 74.13| 77.19  \n  \n## License\n\nThe Ozonetel AI project is licensed under the MIT License. Please refer to the\nLICENSE file for more information.\n\n## About\n\nNo description, website, or topics provided.\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n0 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 2\n\nv0.0.14 Latest\n\nMay 6, 2024\n\n\\+ 1 release\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * Biswajit2902 Biswajit Satapathy\n  * ozonetelgit\n\n## Languages\n\n  * Python 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
