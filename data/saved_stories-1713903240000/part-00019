{"aid": "40131474", "title": "Create Custom Inspections with IntelliJ Idea and JetBrains Qodana", "url": "https://blog.jetbrains.com/qodana/2024/04/qodana-2024-1-release/", "domain": "jetbrains.com", "votes": 1, "user": "KerryBeetge", "posted_at": "2024-04-23 13:01:31", "comments": 0, "source_title": "Create Custom Code Inspections in IntelliJ IDEA \u2013 and More \u2013 With Qodana 2024.1 | The Qodana Blog", "source_text": "Create Custom Code Inspections in IntelliJ IDEA \u2013 and More \u2013 With Qodana 2024.1 | The Qodana Blog\n\nBlog\n\nSkip to content\n\n  * Blogs by Topic\n  * Search\n\nBurger menu icon\n\n## The Qodana Blog\n\nThe code quality platform for teams\n\nFollow\n\n  * Follow:\n  * Twitter Twitter\n  * RSS RSS\n\nGet Qodana\n\nAll Things Web Code Review Coding Collaboration Development Kotlin Plugins\nReleases\n\n# Create Custom Code Inspections in IntelliJ IDEA \u2013 and More \u2013 With Qodana\n2024.1\n\nKerry Beetge\n\nApril 22, 2024\n\nJetBrains Qodana has been the talk of the code quality town since its official\ncommercial release in July 2023.\n\nNot only is it the official JetBrains static code analysis platform for teams\nand therefore highly compatible with JetBrains IDEs and team tools, but Qodana\nalso comprises a range of unique inspections, accompanied by outstanding\ncustomer support throughout your experience.\n\nQodana\u2019s global adoption marks the perfect time to unveil new functionalities\nand updates, bolstering teams to uphold software quality in an industry that\nneeds it more than ever.\n\nWhether you\u2019re looking to create custom inspections for your team, audit\nlicenses by default to become or remain compliant, or simply navigate code\nanalysis results more easily, Qodana is bringing you these capabilities, and\nmore, in the 2024.1 release*.\n\nTry Qodana\n\nJump to:\n\nFlexInspect Diff analysis for qodana-dotnet License Audit enabled, out-of-the-\nbox GitLab Code Quality and BitBucket Code Insight support IDE Plugin UX\nimprovements Default linter choice when it\u2019s not defined via qodana.yaml\nCustom name for qodana.yaml configuration file Book a demo\n\n## FlexInspect \u2013 a new way to write custom inspections\n\nEvery team has unique needs when it comes to code quality. As it stands, no\nsingle code quality tool covers the full spectrum of rules by default,\npotentially leaving gaps for teams with specific requirements.\n\nWith Qodana\u2019s FlexInspect, you can now create custom code inspections for any\nrule you want to enforce in your code or repository. Then you can run these\ninspections against your project in IntelliJ IDEA or using Qodana in your\nCI/CD pipeline.\n\nFlexInspect \u2013 custom code inspections from Qodana.\n\nThis way, you can identify the issues that are specific to your codebase and\nyour team, saving time and effort.\n\nTo write a custom inspection using the Kotlin IntelliJ API within IntelliJ\nIDEA, follow these steps:\n\n  * Access the source code\u2019s AST (abstract syntax tree).\n  * Debug how a new inspection functions on the code in real time.\n  * Observe your new custom inspections in action, including the highlighting of code segments that do not meet the expected behavior.\n\nWith this feature, you get access to PSI \u2013 the API used by all IntelliJ and\nQodana inspections, and can implement any additional custom checks that you\nmight need.\n\nHere\u2019s how you can access the AST of your code with the IntelliJ IDEA PSI\nviewer:\n\nPSI viewer.\n\nFlexInspect allows you to analyze code in a variety of languages, including\nJava, Kotlin, JavaScript, TypeScript, PHP, Go, Python, Ruby, SQL, XML, CSS,\nYAML, JSON, shell, and Dockerfile. We\u2019re working on expanding this list, so\nstay tuned!\n\nPlease note: Implementing custom inspections requires you to write code in\nKotlin, which means you will need to use IntelliJ IDEA Ultimate.\n\nAlso, as this is the first release of FlexInspect, our support team is on\nstandby to assist you should you encounter any issues. Contact us for help at\nqodana-support@jetbrains.com, or submit any bug reports to the Qodana issue\ntracker.\n\n## Diff analysis added to Qodana for .NET\n\nNow you can use the QDnet linter to only analyze merge and pull requests when\nyou\u2019d like to, rather than having it scan your entire codebase.\n\nUse this mode to run incremental or diff analysis on a change-set, i.e. on a\nmerge or pull request. For users of qodana-github-action, this change will be\npicked up automatically.\n\nHow to use it:\n\n\u201cI just finished my commit and want to analyze my changes.\u201d\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\nqodana scan --diff-start=$GIT_START_HASH\n\nqodana scan --diff-start=$GIT_START_HASH\n\n    \n    \n    qodana scan --diff-start=$GIT_START_HASH\n\n\u201cI want to analyze a set of changes between two commits.\u201d\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\nqodana scan --diff-start=$GIT_HASH_START --diff-end=$GIT_HASH_END\n\nqodana scan --diff-start=$GIT_HASH_START --diff-end=$GIT_HASH_END\n\n    \n    \n    qodana scan --diff-start=$GIT_HASH_START --diff-end=$GIT_HASH_END\n\n\u201cI am using the Qodana GitHub action for my CI runs.\u201d\n\nIt will work automatically.\n\nPlease note: This feature is only supported by the paid Qodana for .NET linter\nbut not by the Qodana for .NET Community linter.\n\n## License Audit enabled by default\n\nCompliance can be a nightmare without the right tools, which is part of why\nour License Audit feature is so popular with users. Now the License Audit\nfeature is enabled by default (if you have the Ultimate Plus license, the only\nlicense that supports this feature in general).\n\nAny information that Qodana finds about your project dependency licenses will\nbe automatically displayed in the License Audit tab of your project in Qodana\nCloud, so you don\u2019t need to configure your analysis to run it.\n\nWe\u2019ve also made it possible for existing License Audit users to view audit\nissues in the Qodana Cloud UI tab, instead of in the overall problems list. If\nyou and your team would prefer to keep seeing license issues in overall\nproblems, please update your configuration accordingly.\n\nQodana License Audit.\n\n## GitLab code quality and BitBucket code insight support (pull request\ndecoration)\n\nStarting with 2024.1, Qodana linters support pull request decoration for\nBitBucket Pipelines and GitLab CI. Previously, this functionality was only\navailable for GitHub Actions.\n\nNow Qodana is able to enhance code reviews with automated insights into code\nquality directly within the pull or merge request interface for GitHub\nActions, GitLab CI, and BitBucket Pipelines.\n\nThanks to this integration, you can access the specific lines of code where\nissues were detected, along with descriptions of the problems and possible\nsolutions or recommendations \u2013 right from your pull or merge request.\n\nHow to enable the feature:\n\n  * BitBucket Code Insights: No additional configuration is needed \u2013 just update your linter to the 2024.1 version.\n  * GitLab Code Quality: Additional configuration is needed (specify the report file location).\n\nscript:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\n\\- qodana --results-dir=$CI_PROJECT_DIR/.qodana/results\n\n\\--cache-dir=$CI_PROJECT_DIR/.qodana/cache\n\n\\- qodana --results-dir=$CI_PROJECT_DIR/.qodana/results --cache-\ndir=$CI_PROJECT_DIR/.qodana/cache\n\n    \n    \n    - qodana --results-dir=$CI_PROJECT_DIR/.qodana/results --cache-dir=$CI_PROJECT_DIR/.qodana/cache\n\nartifacts:\n\nreports:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\ncodequality: .qodana/results/gl-code-quality-report.json\n\ncodequality: .qodana/results/gl-code-quality-report.json\n\n    \n    \n    codequality: .qodana/results/gl-code-quality-report.json\n\nBitbucket example.\n\n## Default linter choice when not defined via qodana.yaml\n\nWe\u2019re introducing a change in the default linter choice for JVM and Python\nprojects. To provide users with the most advanced and feature-rich analysis\ncapabilities, Qodana will now default to using the Ultimate versions of our\nlinters \u2013 QDJVM for JVM projects and QDPY for Python projects \u2013 over the\nCommunity versions (QDJVMC and QDPYC, respectively).\n\nThis change means that, if your qodana.yaml configuration does not specify a\nparticular linter version and the Qodana Cloud token is not provided, the\nUltimate version will be used automatically, allowing you to experience the\nfull range of Qodana\u2019s capabilities.\n\nShould you prefer the Community version, make sure to explicitly define this\nin the qodana.yaml file to avoid disruptions after your upgrade to Qodana\n2024.1.\n\n## Improved UX for the IDE plugin\n\n  1. Qodana highlighting no longer duplicates the IDE\u2019s highlighting. If a problem from the Qodana report is already highlighted by the IDE, the Qodana plugin doesn\u2019t try to highlight it.\n  2. When you fix one of the problems listed in the Qodana report or adjust the related piece of code, the Qodana plugin automatically updates the status of the problem in the report to Fixed (if it was fixed) or Not found (if the related piece of code was removed).\n\nThis way, you can immediately see which problems from the report have been\naddressed, and continue working on the rest.\n\nIDE plugin improvements.\n\n## Configuring quality gates by problem severity\n\nYou don\u2019t want to fail your builds because of low severity issues. Now you can\nfine-tune the build failure.\n\nAll linters except Qodana Community for .NET allow you to configure separate\nquality gates for each problem severity, and exceeding just one setting\nlimitation will make the build fail, including the total number of problems.\nHere\u2019s an example of a qodana.yaml severity configuration:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\nfailureConditions:\n\nseverityThresholds:\n\nany: <number> # Total problems\n\ncritical: <number> # Critical and other severities\n\nhigh: <number>\n\nmoderate: <number>\n\nlow: <number>\n\ninfo: <number>\n\nfailureConditions: severityThresholds: any: <number> # Total problems\ncritical: <number> # Critical and other severities high: <number> moderate:\n<number> low: <number> info: <number>\n\n    \n    \n    failureConditions: severityThresholds: any: <number> # Total problems critical: <number> # Critical and other severities high: <number> moderate: <number> low: <number> info: <number>\n\n## Parameter for custom qodana.yaml file\n\nVersion 2024.1 simplifies the process of running multiple Qodana builds with\nvarious configurations on the same repository.\n\nIn previous versions, Qodana linters used a qodana.yaml file that preserves\nthe configuration and defines how the linter behaves (including the set of\ninspections it runs, folders and files that should be analyzed, etc.).\n\nTo run a CI job with a linter using a different configuration, you\u2019d need to\nreplace the qodana.yaml file.\n\nAlso, if you had a monorepository with, for example, JavaScript, PHP, and\nPython, and you ran three respective jobs for each linter, you might have\nwanted to use different qodana.yaml files, but in the past you couldn\u2019t do\nthis.\n\nStarting with Qodana 2024.1, you can use any file name and just pass it as a\nparameter. All linters now provide an optional parameter called config that\nallows you to pass any file as a configuration.\n\nUsage examples:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\n#qodana-cli\n\nqodana scan --config custom.qodana.yaml\n\n#qodana docker\n\ndocker run \\\\\\\n\n-v <source-directory>:/data/project \\\\\\\n\n-v <output-directory>:/data/results \\\\\\\n\njetbrains/qodana-jvm:2024.1 \\\\\\\n\n\\--config .qodana/license-check.qodana.yaml\n\n#qodana-cli qodana scan --config custom.qodana.yaml #qodana docker docker run\n\\\\\\ -v <source-directory>:/data/project \\\\\\ -v <output-\ndirectory>:/data/results \\\\\\ jetbrains/qodana-jvm:2024.1 \\\\\\ --config\n.qodana/license-check.qodana.yaml\n\n    \n    \n    #qodana-cli qodana scan --config custom.qodana.yaml #qodana docker docker run \\\\ -v <source-directory>:/data/project \\\\ -v <output-directory>:/data/results \\\\ jetbrains/qodana-jvm:2024.1 \\\\ --config .qodana/license-check.qodana.yaml\n\nThese are some of the most important highlights for now but there are more on\nthe way soon. If you\u2019d like to see a new feature or functionality that you\nfeel is missing, please let us know on the Qodana YouTrack board. You can read\nthe full Qodana 2024.1 release documentation for more.\n\n### Get the news first\n\nFollow Qodana on Twitter and LinkedIn or read our blog to be the first to hear\nwhat\u2019s new with the productor catch special events in your area or online.\n\nSchedule a Qodana demo\n\ncode quality code review Custom inspections Qodana demo\n\n  * Share\n  * Facebook\n  * Twitter\n  * Linkedin\n\nPrev post Improving Code Quality in JavaScript Projects With Qodana\n\n#### Subscribe to Qodana Blog updates\n\nThanks, we've got you!\n\n  1. FlexInspect \u2013 a new way to write custom inspections\n  2. Diff analysis added to Qodana for .NET\n  3. License Audit enabled by default\n  4. GitLab code quality and BitBucket code insight support (pull request decoration)\n  5. Default linter choice when not defined via qodana.yaml\n  6. Improved UX for the IDE plugin\n  7. Configuring quality gates by problem severity\n  8. Parameter for custom qodana.yaml file\n\n    1. Get the news first\n\n## Discover more\n\n#### Improving Code Quality in JavaScript Projects With Qodana\n\nUse JetBrains Qodana to set up static code analysis in an open-source\nrepository, find critical and high-severity issues early, and explore results.\n\nMaksim Grushchenko April 17, 2024\n\n0\n\n#### New! Improve Team Code Quality in Unity and .NET Projects With Qodana\n\nQodana - bring all the custom Unity inspections from JetBrains Rider into your\nCI/CD pipeline - for better collaboration on team code in game development!\n\nKerry Beetge January 31, 2024\n\n0\n\n#### How to improve code quality in game development with Qodana and Unity\n\nWe tried Qodana on an internal Unity project \u2013 Archipelago, a virtual reality\napp that visualizes sales in the form of mountains. Qodana brings all of\nRider\u2019s Unity inspections to CI analysis so the whole team can review code.\n\nEkaterina Trukhan January 31, 2024\n\n2\n\n#### Qodana for .NET 8 is almost ready! Try the EAP and let us know what you\nthink\n\nQodana now supports .NET 8, starting from the 2023.3-eap version, with plans\nto release the official linter before the end of the year.\n\nKerry Beetge December 1, 2023\n\n0\n\n  * Privacy & Security\n  * Terms of Use\n  * Legal\n  * Genuine tools\n\n  * Twitter\n  * Facebook\n  * Linkedin\n  * Instagram\n  * Youtube\n  * RSS\n  * Tiktok\n\nMerchandise store iconMerchandise store\n\nCopyright \u00a9 2000 JetBrains s.r.o.\n\nHelp make JetBrains websites better!\n\nJetBrains may occasionally record how you interact with our websites.\nInteractions are recorded anonymously. These records are used solely to\nimprove the usability of our websites and are made and used subject to the\nJetBrains Privacy Policy and Terms of Use. JetBrains may use third-party\nservices for this purpose. You can revoke your consent at any time by visiting\nthe Opt-Out page.\n\n[Y]es, I agree] [N]o, thanks]\n\n~ root#\n\n[X]\n\n", "frontpage": false}
