{"aid": "40264214", "title": "Kvql: SQL-like query language on general Key-Value DB", "url": "https://github.com/c4pt0r/kvql", "domain": "github.com/c4pt0r", "votes": 2, "user": "nalgeon", "posted_at": "2024-05-05 12:04:57", "comments": 0, "source_title": "GitHub - c4pt0r/kvql: A SQL-like query language on general Key-Value DB", "source_text": "GitHub - c4pt0r/kvql: A SQL-like query language on general Key-Value DB\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nc4pt0r / kvql Public\n\n  * Notifications\n  * Fork 0\n  * Star 17\n\nA SQL-like query language on general Key-Value DB\n\n### License\n\nApache-2.0 license\n\n17 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# c4pt0r/kvql\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nblacktear23Merge pull request #8 from c4pt0r/docsMay 5, 2024c264b53 \u00b7 May 5,\n2024May 5, 2024\n\n## History\n\n28 Commits  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Add Makefile and fix some bugs found by fuzzing test| Apr 30, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Apr 28, 2024  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Add Makefile and fix some bugs found by fuzzing test| Apr 30, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Refine documents for golang API usage| May 5, 2024  \n  \n### aggr_func.go\n\n|\n\n### aggr_func.go\n\n| first commit| Apr 28, 2024  \n  \n### aggregate_plan.go\n\n|\n\n### aggregate_plan.go\n\n| first commit| Apr 28, 2024  \n  \n### checker.go\n\n|\n\n### checker.go\n\n| add put/remove| Apr 28, 2024  \n  \n### delete_plan.go\n\n|\n\n### delete_plan.go\n\n| Update readme and fix bug| Apr 30, 2024  \n  \n### errors.go\n\n|\n\n### errors.go\n\n| Refactor error report, add padding interface| May 4, 2024  \n  \n### expression.go\n\n|\n\n### expression.go\n\n| Add and, or keyword| Apr 28, 2024  \n  \n### expression_exec.go\n\n|\n\n### expression_exec.go\n\n| Add and, or keyword| Apr 28, 2024  \n  \n### expression_exec_test.go\n\n|\n\n### expression_exec_test.go\n\n| Add batch put and batch delete method for KV interface| Apr 28, 2024  \n  \n### expression_exec_vec.go\n\n|\n\n### expression_exec_vec.go\n\n| Add and, or keyword| Apr 28, 2024  \n  \n### expression_optimizer.go\n\n|\n\n### expression_optimizer.go\n\n| first commit| Apr 28, 2024  \n  \n### expression_test.go\n\n|\n\n### expression_test.go\n\n| Add batch put and batch delete method for KV interface| Apr 28, 2024  \n  \n### filter_optimizer.go\n\n|\n\n### filter_optimizer.go\n\n| Add and, or keyword| Apr 28, 2024  \n  \n### filter_optimizer_test.go\n\n|\n\n### filter_optimizer_test.go\n\n| Add and, or keyword| Apr 28, 2024  \n  \n### func.go\n\n|\n\n### func.go\n\n| add put/remove| Apr 28, 2024  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| first commit| Apr 28, 2024  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| first commit| Apr 28, 2024  \n  \n### kv.go\n\n|\n\n### kv.go\n\n| Add batch put and batch delete method for KV interface| Apr 28, 2024  \n  \n### lexer.go\n\n|\n\n### lexer.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### lexer_test.go\n\n|\n\n### lexer_test.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### limit_plan.go\n\n|\n\n### limit_plan.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### optimizer.go\n\n|\n\n### optimizer.go\n\n| Fix fuzzing bug| May 5, 2024  \n  \n### optimizer_test.go\n\n|\n\n### optimizer_test.go\n\n| Add optimizer unit test for fuzz failed query test| May 5, 2024  \n  \n### order_plan.go\n\n|\n\n### order_plan.go\n\n| first commit| Apr 28, 2024  \n  \n### parser.go\n\n|\n\n### parser.go\n\n| Add Makefile and fix some bugs found by fuzzing test| Apr 30, 2024  \n  \n### parser_fuzz_test.go\n\n|\n\n### parser_fuzz_test.go\n\n| Add Makefile and fix some bugs found by fuzzing test| Apr 30, 2024  \n  \n### parser_test.go\n\n|\n\n### parser_test.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### plan.go\n\n|\n\n### plan.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### projection_plan.go\n\n|\n\n### projection_plan.go\n\n| first commit| Apr 28, 2024  \n  \n### put_plan.go\n\n|\n\n### put_plan.go\n\n| Add batch put and batch delete method for KV interface| Apr 28, 2024  \n  \n### remove_plan.go\n\n|\n\n### remove_plan.go\n\n| Add batch put and batch delete method for KV interface| Apr 28, 2024  \n  \n### scalar_func.go\n\n|\n\n### scalar_func.go\n\n| add put/remove| Apr 28, 2024  \n  \n### scalar_func_vec.go\n\n|\n\n### scalar_func_vec.go\n\n| add put/remove| Apr 28, 2024  \n  \n### scan_plan.go\n\n|\n\n### scan_plan.go\n\n| first commit| Apr 28, 2024  \n  \n### spec.md\n\n|\n\n### spec.md\n\n| add put/remove| Apr 28, 2024  \n  \n### statement.go\n\n|\n\n### statement.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### utils.go\n\n|\n\n### utils.go\n\n| add put/remove| Apr 28, 2024  \n  \n## Repository files navigation\n\n# kvql\n\nA SQL-like query language on general Key-Value DB\n\n## Syntax\n\nBasic Types:\n\n    \n    \n    Number: number such as integer or float String: string around by ', \", \\`, Boolean: true or false\n\nSelect Statement:\n\n    \n    \n    SelectStmt ::= \"SELECT\" Fields \"WHERE\" WhereConditions (\"ORDER\" \"BY\" OrderByFields)? (\"GROUP\" \"BY\" GroupByFields)? (\"LIMIT\" LimitParameter)? Fields ::= Field (, Field)* | \"*\" Field ::= Expression (\"AS\" FieldName)? FieldName ::= String OrderByFields ::= OrderByField (, OrderByField)* OrderByField ::= FieldName (\"ASC\" | \"DESC\")* GroupByFields ::= FieldName (, FieldName)* LimitParameter ::= Number \",\" Number | Number WhereConditions ::= \"!\"? Expression Expression ::= \"(\"? BinaryExpression | UnaryExpression \")\"? UnaryExpression ::= KeyValueField | String | Number | Boolean | FunctionCall BinaryExpression ::= Expression Operator Expression | Expression \"BETWEEN\" Expression \"AND\" Expression | Expression \"IN\" \"(\" Expression (, Expression)* \")\" | Expression \"IN\" FunctionCall Operator ::= MathOperator | CompareOperator | AndOrOperator AndOrOperator ::= \"&\" | \"|\" | \"AND\" | \"OR\" MathOperator ::= \"+\" | \"-\" | \"*\" | \"/\" CompareOperator ::= \"=\" | \"!=\" | \"^=\" | \"~=\" | \">\" | \">=\" | \"<\" | \"<=\" KeyValueField ::= \"KEY\" | \"VALUE\" FunctionCall ::= FunctionName \"(\" FunctionArgs \")\" | FunctionName \"(\" FunctionArgs \")\" FieldAccessExpression* FunctionName ::= String FunctionArgs ::= FunctionArg (\",\" FunctionArg)* FunctionArg ::= Expression FieldAccessExpression ::= \"[\" String \"]\" | \"[\" Number \"]\"\n\nPut Statement:\n\n    \n    \n    PutStmt ::= \"PUT\" KVPair (, KVPair)* KVPair ::= \"(\" Expression, Expression \")\"\n\nRemove Statement:\n\n    \n    \n    RemoveStmt ::= \"REMOVE\" Expression (, Expression)*\n\nDelete Statement:\n\n    \n    \n    DeleteStmt ::= \"DELETE\" \"WHERE\" WhereConditions (\"LIMIT\" LimitParameter)?\n\nFeatures:\n\n  1. Scan ranger optimize: EmptyResult, PrefixScan, RangeScan, MultiGet\n  2. Plan support Volcano model and Batch model\n  3. Expression constant folding\n  4. Support scalar function and aggregate function\n  5. Support hash aggregate plan\n  6. Support JSON and field access expression\n\n## Known User\n\n  * c4pt0r/tcli CLI tool for TiKV\n\n## Examples:\n\n    \n    \n    # Simple query, get all the key-value pairs with key prefix 'k' select * where key ^= 'k' # Projection and complex condition select key, int(value) + 1 where key in ('k1', 'k2', 'k3') & is_int(value) # Aggregation query select count(1), sum(int(value)) as sum, substr(key, 0, 2) as kprefix where key between 'k' and 'l' group by kprefix order by sum desc # JSON access select key, json(value)['x']['y'] where key ^= 'k' & int(json(value)['test']) >= 1 select key, json(value)['list'][1] where key ^= 'k' # Filter by field name defined in select statement select key, int(value) as f1 where f1 > 10 select key, split(value) as f1 where 'a' in f1 select key, value, l2_distance(list(1,2,3,4), json(value)) as l2_dis where key ^= 'embedding_json' & l2_dis > 0.6 order by l2_dis desc limit 5 # Put data put ('k1', 'v1'), ('k2', upper('v' + key)) # Remove data remove 'k1', 'k2' # Delete data by filter and limit delete rows delete where key ^= 'prefix' and value ~= '^val_' limit 10\n\n## How to use this library\n\nFirst implements interfaces defined in kv.go:\n\n    \n    \n    type Txn interface { Get(key []byte) (value []byte, err error) Put(key []byte, value []byte) error BatchPut(kvs []KVPair) error Delete(key []byte) error BatchDelete(keys [][]byte) error Cursor() (cursor Cursor, err error) } type Cursor interface { Seek(prefix []byte) error Next() (key []byte, value []byte, err error) }\n\nThen execute query:\n\n    \n    \n    var ( query string = \"select * where key ^= 'k'\" txn kvql.Txn = buildClientTxn() ) opt := kvql.NewOptimizer(query) plan, err := opt.BuildPlan(txn) if err != nil { fatal(err) } execCtx := kvql.NewExecuteCtx() for { rows, err := plan.Batch(execCtx) if err != nil { fatal(err) } if len(rows) == 0 { break } execCtx.Clear() for _, cols := range rows { // Process columns... } }\n\nTo get better error report, you can conver the error to QueryBinder and set\nthe origin query like below:\n\n    \n    \n    ... opt := kvql.NewOptimizer(query) plan, err := opt.BuildPlan(txn) if err != nil { if qerr, ok := err.(kvql.QueryBinder); ok { qerr.BindQuery(query) } fmt.Printf(\"Error: %s\\n\", err.Error()) } ...\n\nAfter bind the query to error it will output error result like:\n\n    \n    \n    padding query v-----vv--------------------------------------------v Error: select * where key ^= 'asdf' and val ^= 'test' < query line ^-- < error position Syntax Error: ^= operator with invalid left expression < error message\n\nAbout padding: user can use kvql.DefaultErrorPadding to change the default\nleft padding spaces. Or can use kvql.QueryBinder.SetPadding function to change\nspecify error's padding. The default padding is 7 space characters (length of\nError: ).\n\nIf you want to display the plan tree, like EXPLAIN statement in SQL, the\nkvql.FinalPlan.Explain function will return the plan tree in a string list,\nyou can use below code to format the explain output:\n\n    \n    \n    ... opt := kvql.NewOptimizer(query) plan, err := opt.BuildPlan(txn) if err != nil { fatal(err) } output := \"\" for i, plan := range plan.Explain() { padding := \"\" for x := 0; x < i*3; x++ { padding += \" \" } if i == 0 { output += fmt.Sprintf(\"%s%s\\n\", padding, plan) } else { output += fmt.Sprintf(\"%s`-%s\\n\", padding, plan) } } fmt.Println(output)\n\n## Operators and Functions\n\n### Operators\n\nConparation operators\n\n  * =: bytes level equals\n  * !=: bytes level not equals\n  * ^=: prefix match\n  * ~=: regexp match\n  * >: number or string greater than\n  * >=: number or string greater or equals than\n  * <: number or string less than\n  * <=: number or string less or equals than\n  * BETWEEN x AND y: great or equals than x and less or equals than y\n  * IN (...): in list followed by in operator\n\nLogical operators\n\n  * &, AND: logical and\n  * |, OR: logical or\n  * !: logical not\n\nMath operators\n\n  * +: number add or string concate\n  * -: number subtraction\n  * *: number multiply\n  * /: number division\n\n### Scalar Functions\n\nFunction| Description  \n---|---  \nlower(value: str): str| convert value string into lower case  \nupper(value: str): str| convert value string into upper case  \nint(value: any): int| convert value into integer, if cannot convert to integer\njust return error  \nfloat(value: any): float| convert value into float, if cannot convert to float\njust return error  \nstr(value: any): str| convert value into string  \nis_int(value: any): bool| return is value can be converted into integer  \nis_float(value: any): bool| return is value can be converted into float  \nsubstr(value: str, start: int, end: int): str| return substring of value from\nstart position to end position  \nsplit(value: str, spliter: str): list| split value into a string list by\nspliter string  \nlist(elem1: any, elem2: any...): list| convert many elements into a list, list\nelements' type must be same, the list type support int, str, float types  \nfloat_list(elem1: float, elem2: float...): list| convert many float elements\ninto a list  \nflist(elem1: float, elem2: float...): list| same as float_list  \nint_list(elem1: int, elem2: int...): list| convert many integer elements into\na list  \nilist(elem1: int, elem2: int...): list| same as int_list  \nlen(value: list): int| return value list length  \nl2_distance(left: list, right: list): float| calculate l2 distance of two list  \ncosine_distance(left: list, right: list): float| calculate cosine distance of\ntwo list  \njson(value: str): json| parse string value into json type  \njoin(seperator: str, val1: any, val2: any...): str| join values by seperator  \n  \n### Aggregation Functions\n\nFunction| Description  \n---|---  \ncount(value: int): int| Count value by group  \nsum(value: int): int| Sum value by group  \navg(value: int): int| Calculate average value by group  \nmin(value: int): int| Find the minimum value by group  \nmax(value: int): int| Find the maxmum value by group  \nquantile(value: float, percent: float): float| Calculate the Quantile by group  \n  \n## About\n\nA SQL-like query language on general Key-Value DB\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\n### Stars\n\n17 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * blacktear23 Rain Li\n  * c4pt0r dongxu\n\n## Languages\n\n  * Go 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
