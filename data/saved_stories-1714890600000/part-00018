{"aid": "40259737", "title": "100x Faster Babel `scope.rename()`", "url": "https://gist.github.com/remorses/9a11d96f9f00d3af1388a197be2a7878", "domain": "gist.github.com", "votes": 1, "user": "remorses", "posted_at": "2024-05-04 19:29:40", "comments": 0, "source_title": "Babel `BatchRenamer`, 100x faster babel `scope.rename()` when you have many identifier to rename", "source_text": "Babel `BatchRenamer`, 100x faster babel `scope.rename()` when you have many\nidentifier to rename \u00b7 GitHub\n\nSkip to content\n\nSign in Sign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nInstantly share code, notes, and snippets.\n\n# remorses/renamer.ts\n\nLast active May 4, 2024 19:40\n\nShow Gist options\n\n  * Download ZIP\n\n  * Star 1 You must be signed in to star a gist\n  * Fork 0 You must be signed in to fork a gist\n\n  *     * Learn more about clone URLs\n\n  * Save remorses/9a11d96f9f00d3af1388a197be2a7878 to your computer and use it in GitHub Desktop.\n\n  * Learn more about clone URLs\n\nSave remorses/9a11d96f9f00d3af1388a197be2a7878 to your computer and use it in\nGitHub Desktop.\n\nDownload ZIP\n\nBabel `BatchRenamer`, 100x faster babel `scope.rename()` when you have many\nidentifier to rename\n\nRaw\n\nrenamer.ts\n\n// original\nhttps://github.com/babel/babel/blob/9c77558234c87b9220604fbc1519089e2d6334e2/packages/babel-\ntraverse/src/scope/lib/renamer.ts#L61  \n---  \nimport splitExportDeclaration from '@babel/helper-split-export-declaration'  \nimport type { Scope } from '@babel/traverse'  \nimport { visitors } from '@babel/traverse'  \nimport { traverseNode } from '@babel/traverse/lib/traverse-node'  \nimport * as t from '@babel/types'  \nimport { NodePath, Visitor } from '@babel/core'  \nimport type { Identifier } from '@babel/types'  \nconst renameVisitor: Visitor<BatchRenamer> = {  \nReferencedIdentifier({ node }, state) {  \nfor (let [oldName, newName] of state.map) {  \n// console.log(node.name, oldName, newName)  \nif (node.name === oldName) {  \nnode.name = newName  \n}  \n}  \n},  \nObjectProperty({ node, scope }, state) {  \nconst { name } = node.key as Identifier  \nif (  \nnode.shorthand &&  \n// In destructuring the identifier is already renamed by the  \n// AssignmentExpression|Declaration|VariableDeclarator visitor,  \n// while in object literals it's renamed later by the  \n// ReferencedIdentifier visitor.  \n// (name === state.oldName || name === state.newName) &&  \n(state.map.has(name) || inverseMap(state.map).has(name)) &&  \n// Ignore shadowed bindings  \n[...state.map.keys()].some(  \n(oldName) =>  \nstate.scope.getBindingIdentifier(oldName) ===  \nscope.getBindingIdentifier(name),  \n)  \n) {  \nnode.shorthand = false  \nif (node.extra?.shorthand) node.extra.shorthand = false  \n}  \n},  \n// @ts-ignore  \n'AssignmentExpression|Declaration|VariableDeclarator'(  \npath: NodePath<  \nt.AssignmentPattern | t.Declaration | t.VariableDeclarator  \n>,  \nstate,  \n) {  \nif (path.isVariableDeclaration()) return  \nconst ids = path.getOuterBindingIdentifiers()  \nfor (const name in ids) {  \nfor (let [oldName, newName] of state.map) {  \n// console.log(name, oldName, newName)  \nif (name === oldName) ids[name].name = newName  \n}  \n}  \n},  \n}  \nlet cache = new WeakMap()  \nfunction inverseMap(map: Map<string, string>) {  \nif (cache.has(map)) return cache.get(map)  \nconst inverse = new Map()  \nfor (let [key, value] of map) {  \ninverse.set(value, key)  \n}  \ncache.set(map, inverse)  \nreturn inverse  \n}  \nexport default class BatchRenamer {  \nconstructor(scope: Scope, map: Map<string, string>) {  \nthis.map = map  \nthis.scope = scope  \n}  \ndeclare map: Map<string, string>  \ndeclare scope: Scope  \nmaybeConvertFromExportDeclaration(parentDeclar: NodePath) {  \nconst maybeExportDeclar = parentDeclar.parentPath  \nif (!maybeExportDeclar?.isExportDeclaration()) {  \nreturn  \n}  \nif (maybeExportDeclar.isExportDefaultDeclaration()) {  \nconst { declaration } = maybeExportDeclar.node  \nif (t.isDeclaration(declaration) && !declaration.id) {  \nreturn  \n}  \n}  \nif (maybeExportDeclar.isExportAllDeclaration()) {  \nreturn  \n}  \nsplitExportDeclaration(  \nmaybeExportDeclar as NodePath<  \nExclude<t.ExportDeclaration, t.ExportAllDeclaration>  \n>,  \n)  \n}  \nmaybeConvertFromClassFunctionExpression(path: NodePath) {  \nreturn path  \n}  \nrename(/* Babel 7 - block?: t.Pattern | t.Scopable */) {  \nconst { scope, map } = this  \nfor (let binding of [...map.keys()].map((name) =>  \nscope.getBinding(name),  \n)) {  \nconst path = binding!.path  \nconst parentDeclar = path.find(  \n(path) =>  \npath.isDeclaration() ||  \npath.isFunctionExpression() ||  \npath.isClassExpression(),  \n)  \nif (parentDeclar) {  \nconst bindingIds = parentDeclar.getOuterBindingIdentifiers()  \nconst oldNames = Object.keys(bindingIds)  \nfor (let oldName of oldNames) {  \nconst binding = scope.getBinding(oldName)  \nif (binding && bindingIds[oldName] === binding.identifier) {  \n// When we are renaming an exported identifier, we need to ensure that  \n// the exported binding keeps the old name.  \nthis.maybeConvertFromExportDeclaration(parentDeclar)  \n}  \n}  \n}  \n}  \ntraverseNode(  \nscope.block,  \nvisitors.explode(renameVisitor),  \nscope,  \nthis,  \nscope.path,  \n// When blockToTraverse is a SwitchStatement, the discriminant  \n// is not part of the current scope and thus should be skipped.  \n{ discriminant: true },  \n)  \nfor (let [oldName, newName] of map) {  \nif (oldName === newName) continue  \nif (!arguments[0]) {  \nscope.removeOwnBinding(oldName)  \nconst binding = scope.getBinding(oldName)  \nif (binding) {  \nbinding.identifier.name = newName  \nscope.bindings[newName] = binding  \n} else {  \nconsole.log(`binding not found for ${oldName}`)  \n}  \n}  \n}  \n}  \n}  \n  \nRaw\n\nusage.ts\n\nconst renamer = new BatchRenamer(  \n---  \npath.scope, // for example body.scope to rename all variables in an AST  \nnew Map('oldName', 'newName'),  \n)  \nrenamer.rename()  \n  \nSign up for free to join this conversation on GitHub. Already have an account?\nSign in to comment\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
