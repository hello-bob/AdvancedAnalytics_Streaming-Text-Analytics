{"aid": "40051527", "title": "LLM in a Flash: Efficient Large Language Model Inference with Limited Memory", "url": "https://arxiv.org/abs/2312.11514", "domain": "arxiv.org", "votes": 1, "user": "abhinavk", "posted_at": "2024-04-16 13:19:31", "comments": 0, "source_title": "LLM in a flash: Efficient Large Language Model Inference with Limited Memory", "source_text": "[2312.11514] LLM in a flash: Efficient Large Language Model Inference with\nLimited Memory\n\nSkip to main content\n\nWe gratefully acknowledge support from the Simons Foundation, member\ninstitutions, and all contributors. Donate\n\n> cs > arXiv:2312.11514\n\n# Computer Science > Computation and Language\n\narXiv:2312.11514 (cs)\n\n[Submitted on 12 Dec 2023 (v1), last revised 4 Jan 2024 (this version, v2)]\n\n# Title:LLM in a flash: Efficient Large Language Model Inference with Limited\nMemory\n\nAuthors:Keivan Alizadeh, Iman Mirzadeh, Dmitry Belenko, Karen Khatamifard,\nMinsik Cho, Carlo C Del Mundo, Mohammad Rastegari, Mehrdad Farajtabar\n\nView a PDF of the paper titled LLM in a flash: Efficient Large Language Model\nInference with Limited Memory, by Keivan Alizadeh and 7 other authors\n\nView PDF HTML (experimental)\n\n> Abstract:Large language models (LLMs) are central to modern natural language\n> processing, delivering exceptional performance in various tasks. However,\n> their substantial computational and memory requirements present challenges,\n> especially for devices with limited DRAM capacity. This paper tackles the\n> challenge of efficiently running LLMs that exceed the available DRAM\n> capacity by storing the model parameters in flash memory, but bringing them\n> on demand to DRAM. Our method involves constructing an inference cost model\n> that takes into account the characteristics of flash memory, guiding us to\n> optimize in two critical areas: reducing the volume of data transferred from\n> flash and reading data in larger, more contiguous chunks. Within this\n> hardware-informed framework, we introduce two principal techniques. First,\n> \"windowing\" strategically reduces data transfer by reusing previously\n> activated neurons, and second, \"row-column bundling\", tailored to the\n> sequential data access strengths of flash memory, increases the size of data\n> chunks read from flash memory. These methods collectively enable running\n> models up to twice the size of the available DRAM, with a 4-5x and 20-25x\n> increase in inference speed compared to naive loading approaches in CPU and\n> GPU, respectively. Our integration of sparsity awareness, context-adaptive\n> loading, and a hardware-oriented design paves the way for effective\n> inference of LLMs on devices with limited memory.\n\nComments:| preprint  \n---|---  \nSubjects:| Computation and Language (cs.CL); Artificial Intelligence (cs.AI);\nMachine Learning (cs.LG)  \nCite as:| arXiv:2312.11514 [cs.CL]  \n(or arXiv:2312.11514v2 [cs.CL] for this version)  \nhttps://doi.org/10.48550/arXiv.2312.11514arXiv-issued DOI via DataCite  \n  \n## Submission history\n\nFrom: Seyed Iman Mirzadeh [view email] [v1] Tue, 12 Dec 2023 18:57:08 UTC (951\nKB) [v2] Thu, 4 Jan 2024 22:28:37 UTC (954 KB)\n\nFull-text links:\n\n## Access Paper:\n\nView a PDF of the paper titled LLM in a flash: Efficient Large Language Model\nInference with Limited Memory, by Keivan Alizadeh and 7 other authors\n\n  * View PDF\n  * HTML (experimental)\n  * TeX Source\n  * Other Formats\n\nview license\n\nCurrent browse context:\n\ncs.CL\n\n< prev | next >\n\nnew | recent | 2312\n\nChange to browse by:\n\ncs cs.AI cs.LG\n\n### References & Citations\n\n  * NASA ADS\n  * Google Scholar\n  * Semantic Scholar\n\na export BibTeX citation Loading...\n\n## BibTeX formatted citation\n\n\u00d7\n\nData provided by:\n\n### Bookmark\n\n# Bibliographic and Citation Tools\n\nBibliographic Explorer (What is the Explorer?)\n\nLitmaps (What is Litmaps?)\n\nscite Smart Citations (What are Smart Citations?)\n\n# Code, Data and Media Associated with this Article\n\nCatalyzeX Code Finder for Papers (What is CatalyzeX?)\n\nDagsHub (What is DagsHub?)\n\nGotit.pub (What is GotitPub?)\n\nPapers with Code (What is Papers with Code?)\n\nScienceCast (What is ScienceCast?)\n\n# Demos\n\nReplicate (What is Replicate?)\n\nHugging Face Spaces (What is Spaces?)\n\nTXYZ.AI (What is TXYZ.AI?)\n\n# Recommenders and Search Tools\n\nInfluence Flower (What are Influence Flowers?)\n\nConnected Papers (What is Connected Papers?)\n\nCORE Recommender (What is CORE?)\n\n  * Author\n  * Venue\n  * Institution\n  * Topic\n\n# arXivLabs: experimental projects with community collaborators\n\narXivLabs is a framework that allows collaborators to develop and share new\narXiv features directly on our website.\n\nBoth individuals and organizations that work with arXivLabs have embraced and\naccepted our values of openness, community, excellence, and user data privacy.\narXiv is committed to these values and only works with partners that adhere to\nthem.\n\nHave an idea for a project that will add value for arXiv's community? Learn\nmore about arXivLabs.\n\nWhich authors of this paper are endorsers? | Disable MathJax (What is MathJax?)\n\n  * About\n  * Help\n\n  * Contact\n  * Subscribe\n\n  * Copyright\n  * Privacy Policy\n\n  * Web Accessibility Assistance\n  * arXiv Operational Status Get status notifications via email or slack\n\n", "frontpage": false}
