{"aid": "40184066", "title": "Picodash: A tiny JavaScript library for connecting data sources to widgets", "url": "https://github.com/EternityForest/picodash", "domain": "github.com/eternityforest", "votes": 1, "user": "eternityforest", "posted_at": "2024-04-27 22:12:38", "comments": 0, "source_title": "GitHub - EternityForest/picodash: Tiny dashboard library for linking data sources to widgets", "source_text": "GitHub - EternityForest/picodash: Tiny dashboard library for linking data\nsources to widgets\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nEternityForest / picodash Public\n\n  * Notifications\n  * Fork 0\n  * Star 0\n\nTiny dashboard library for linking data sources to widgets\n\n### License\n\nMIT license\n\n0 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# EternityForest/picodash\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nDaniel DunnDocument creating a providerApr 27, 20240511b68 \u00b7 Apr 27, 2024Apr\n27, 2024\n\n## History\n\n4 Commits  \n  \n### src\n\n|\n\n### src\n\n| Demo link, auto disable inputs for readonly sources| Apr 27, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial commit| Apr 27, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Apr 27, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Document creating a provider| Apr 27, 2024  \n  \n### barrel.css\n\n|\n\n### barrel.css\n\n| First commit| Apr 27, 2024  \n  \n### index.html\n\n|\n\n### index.html\n\n| First commit| Apr 27, 2024  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| First commit| Apr 27, 2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| First commit| Apr 27, 2024  \n  \n### rollup.config.mjs\n\n|\n\n### rollup.config.mjs\n\n| First commit| Apr 27, 2024  \n  \n## Repository files navigation\n\n# Picodash: A very minimal dashboard framework\n\nSee the Demo!\n\nPicodash is a library for making dashboards. It connects widgets to data\nsources, letting you build your dashboard in simple HTML.\n\nCurrently under 3k min+zip!\n\nIt comes with some simple widgets and data sources, and makes it very easy to\nbuild more.\n\nConsider this a pre-alpha experiment. Breaking changes are very likely.\n\nThe demo page uses Barrel.css for visual styling, but the base element set is\nindependent of any particular CSS framework.\n\n    \n    \n    <script src=\"./dist/picodash-base.esm.js\"></script> <label>Random: <ds-span source=\"random:\"></ds-span> </label>\n\n## Data Sources\n\nA Data Source is an object that lets you subscribe to changes in data. It has\na type string indicating what other features it supports.\n\nNames are globally unique, and can be made implicitly on-demand.\n\nNames for on-demand sources always take the form of <provider>:<name>\n\nA data source provider is simply a class that inherits from DataSource.\n\nData sources are made on-demand, and destroyed when the last subscribed\nlistener is unsubscribed.\n\nData sources are writable, so you can have control widgets, not just displays.\n\n### Manually Creating them\n\nA data souce can also be made manually:\n\n    \n    \n    var ds1 = new picodash.SimpleVariableDataSource(\"myDataSource\", {}) await ds1.register() await ds1.pushData(90)\n\nNote that registering a data source is async. This is because data sources can\nbe made after the widgets linked to them, and it may take a while to set up\nall the pending widgets.\n\nA subclass might also decide to do some heavier setup like creating websocket\nconnections here.\n\n### Defining a new data source\n\nDefining new sources is easy. Here's the included SimpleVariableDataSource,\nwhich just holds a variable.\n\nThe config may be user-supplied, but data sources can also set their own\nconfig props with backend data.\n\nThis is already a builtin data source provider, but let's see how it works:\n\n    \n    \n    class FixedDataSource extends picodash.DataSource { constructor(name, config) { super(name, config); this.config.readonly = true this.data = JSON.parse(name.split(\":\")[1] || '') } async getData() { return this.data } async pushData(data) { // Don't allow changes. data = this.data super.pushData(data) } async register() { super.register() // We call ready() right away, since we don't have any // delayed setup to do. super.ready() } } addDataSourceProvider(\"fixed\", FixedDataSource)\n\nNow you can use it as an on-demand datasource type! This will have a fixed\nvalue of 42.\n\n    \n    \n    <label>Random: <ds-span source=\"fixed: 42\"></ds-span> </label>\n\n### Manually Subscribing to them\n\n    \n    \n    async function f(){ var ds = picodash.getDataSource(name) ds.subscribe(console.log) } // We have no idea when or if a source will // Be available picodash.whenSourceAvailable(name, f) // Later, to unsubscribe. // The data source will be marked for deletion // When it goes from 0 to 1 ds.unsubscribe(console.log)\n\n## Widgets\n\nA widget is just an HTML custom element. Use any framework or no framework.\n\n    \n    \n    class SpanDashWidget extends picodash.BaseDashWidget { async onData(data) { // Called by the framework with new data this.innerText = data } async onDataReady() { // Called when this.source is ready var x = await this.source.getData() await this.onData(x) } } customElements.define(\"ds-span\", SpanDashWidget);\n\nThe widdget has a source attribute that points to a data source.\n\nThe widget must have a onData() function, which data sources will use to\nnotify it abouut updates.\n\nA widget may check the type of it's source and enable ay number of optional\nfeatures beyond this.\n\n### Builtin Widgets\n\n#### ds-input\n\nUse like you would use a regular input tag. Has 2-way binding to it's source.\n\n#### ds-meter\n\nUse like a meter tag.\n\n#### ds-span\n\nJust a span that shows the data.\n\n#### ds-logwindow\n\n## Filters\n\nFilters convert between filtered and unfiltered versions of a value. They are\nusually two-way, but you can build one-way filters if needed.\n\nThey take a space-separated set of arguments.\n\nLets make a filter that multiplies a value for display, and divides user-set\nvals again.\n\n    \n    \n    class Mult extends picodash.Filter { constructor(s, conf, prev) { // Prev can be undefined, the data source object, // Or the previous filter super(s, conf, prev) this.m = parseFloat(this.args[0]) } async get(unfiltered) { // Convert from unfiltered to filtered return unfiltered * this.m } async set(val) { // Convert from filtered to unfiltered return val / this.m } } filterProviders[\"mult\"] = Mult\n\nUse your filter\n\n    \n    \n    <label>Same data source, but with multiplier filter <ds-input type=\"number\" source=\"myDataSource\" filter=\"mult: 5\"></ds-input> </label>\n\n## Building\n\n    \n    \n    npm install --include=dev npm run build # Check out the demo page npm run serve # http://127.0.0.1:8080\n\n## About\n\nTiny dashboard library for linking data sources to widgets\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n0 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * CSS 77.8%\n  * JavaScript 19.0%\n  * HTML 3.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
