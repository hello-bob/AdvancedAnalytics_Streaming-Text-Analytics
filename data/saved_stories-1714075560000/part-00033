{"aid": "40155713", "title": "Fragmented thinking is a bigger threat to flow state than interruptions", "url": "https://blog.stackblitz.com/posts/flow-state/", "domain": "stackblitz.com", "votes": 1, "user": "nickwritesit", "posted_at": "2024-04-25 10:33:28", "comments": 0, "source_title": "Flow state: Why fragmented thinking is worse than any interruption", "source_text": "Flow state: Why fragmented thinking is worse than any interruption\n\nEngineering March 21, 2024\n\n# Flow state: Why fragmented thinking is worse than any interruption\n\nNick Moore Technical Writer\n\nGuest Author\n\n\u201cFlow state\u201d\u2014the feeling that you\u2019re so focused that you\u2019re lost in your\nwork\u2014is a battleground.\n\nOn one side, we have developers who frequently fight to protect their\nworkflows by staving off meetings and Slack messages. On the other, managers\nand coworkers who have good and bad reasons for interrupting but tend, either\nway, to underestimate the costs of those interruptions.\n\nBefore I started writing this article, I thought the situation was simple:\nDevelopers need time and space to enter a flow state, but once they\u2019re in a\nflow state, they\u2019re at their most productive.\n\nSurely, there are good reasons to interrupt\u2014high-priority bugs, important\ncalibration meetings, a fire in the building\u2014but it otherwise seemed obvious\nto me that companies and development teams should work toward optimizing away\nfrom distraction and toward focus.\n\nWhy are companies hiring developers, after all, if they\u2019re going to distract\nthem from developing?\n\nOver the past few weeks, though, I read over a dozen papers on flow state and\ndeveloper productivity. The nuances of flow states are much more complex than\nI thought, and the black-and-white battleground image I had was simplistic.\nAlmost everyone, as it turns out, is wrong about flow.\n\n## Flow state: What it (really) is and why it\u2019s been watered down\n\nWhen I think of developers and flow state, I (and I\u2019m sure many others) think\nabout this comic by Jason Heeris.\n\nImage credit: Jason Heeris\n\nIn it, a developer is facing a problem and is gradually constructing the\nscaffolding to a solution. Suddenly, a coworker pops in to say, \u201cHey, so I\njust sent you an email about that thing,\u201d and the developer\u2019s thought bubble\nbursts. The coworker walks away whistling while the developer returns to the\nscreen, and the unsolved problem remains\u2014all the progress has evaporated.\n\nThis comic, made more than a decade ago, resonates because it really does\nreflect a common experience for developers. But when we capture this\nexperience so simply, what do we miss? That\u2019s what I set out to learn.\n\n### Flow state origins\n\nMihaly Csikszentmihalyi, a Hungarian-American psychologist, is often known as\nthe \u201cfather of flow\u201d because of the pioneering research he did on the subject\nin the 1970s.\n\nThe original emphasis of this research, however, wasn\u2019t on sheer focus nor on\nthe cognitive load of solving complex problems. Csikszentmihalyi was most\ninterested in figuring out when and how people were able to work without\nneeding to think or reflect on their work while they did it.\n\n> Now, \u201cflow state\u201d has all sorts of associations\u2014some scientific, some folk,\n> and some a mix of both. For many, the term has just become a dressed-up\n> version of focusing.\n\nFlow state, in its original meaning, had little to do with complex problem-\nsolving. Csikszentmihalyi\u2019s initial inspiration was painters who would, he\nsaid, \u201cfinish a work of art, and instead of enjoying it...put it against the\nwall and start a new painting.\u201d\n\nTheir drive wasn\u2019t about the painting, he realized\u2014it was about entering,\nmaintaining, and enjoying what he\u2019d eventually call a \u201cflow state.\u201d A flurry\nof studies followed in the 1980s and 1990s, bringing the concept closer and\ncloser to public understanding.\n\nBeyond the arts, many of the people most interested in flow were athletes.\nAfter the Dallas Cowboys won the 1993 Super Bowl, for example, the coach,\nJimmy Johnson, credited Csikszentmihalyi\u2019s book on flow, saying, \u201cMy team has\nwon because of this book.\u201d\n\nSource: https://www.dallasnews.com/photos/2015/01/31/career-in-a-year-\nphotos-1993-cowboys-beat-bills-to-start-1990-s-super-bowl-run/\n\nAnd in 2000, Malcolm Gladwell wrote an article analyzing why Jana Novotna, a\nprofessional tennis player, \u201cchoked\u201d at Wimbledon. His argument: Novotna\nfailed to maintain a flow state.\n\nI was surprised initially, but it makes sense.\n\nBoth arts and athletics involve a lot of deft physical movement, and I could\nsee why professionals in those fields would benefit from learning to resist\noverthinking so they can \u201cjust do it.\u201d\n\nAlmost every profession involves some need for focus, however, so you can see\nwhy, over time, the idea of a flow state breached its original limits. Now,\n\u201cflow state\u201d has all sorts of associations\u2014some scientific, some folk, and\nsome a mix of both. For many, the term has just become a dressed-up version of\nfocusing.\n\n### What flow state misses\n\nI\u2019m typically not one to gatekeep a term. But the more I read the research and\nthe more I talked to developers, the more I felt our watered-down definition\nof flow state leaves us without a lot of the richness that made the concept so\npopular in the first place.\n\n> Before I started writing this article, I thought the situation was simple:\n> Developers need time and space to enter a flow state, but once they\u2019re in a\n> flow state, they\u2019re at their most productive.\n\nFlow state became popular primarily because of what it does and how it feels.\nBut too much emphasis on the feeling of being \u201cin flow\u201d can mean losing sight\nof what you should actually be doing. We know that the most impactful\ndevelopment can\u2019t be measured in lines of code, but we can still slip into\noveremphasizing flow and fighting against all interruptions\u2014whether they break\nfocus or align focus.\n\nThe greatest threat isn\u2019t an external interruption but an internal\nfragmentation\n\nIn other words, flow\u2014which is, in its ideal form\u2014a means to productive,\ncreative ends, can turn into an end in itself.\n\nA high-priority vulnerability, for example, warrants an interruption. The lost\nfocus is likely a good tradeoff. These \u201cworthy interruptions,\u201d however, extend\nbeyond meetings.\n\nOne of the core findings in flow state research is that people need more than\njust focus to get to a flow state. In the illustration below, for example, you\ncan see how only a particular alignment of skills and challenge leads to flow.\n\nSource: https://blog.aowaw.com/doing-twice-the-work-in-half-the-\ntime-4ca1a30eb143\n\nYou might be focused on development, but if the particular task is emotionally\nchallenging while requiring little skill, you might just be alert and focused.\nSimilarly, if your current work requires a lot of skill but involves little\nchallenge, you might feel in control and confident but not in flow. The\nconditions for flow, in other words, might not always be available.\n\nThe more I read, the more I realized we all need to upgrade our thinking about\nflow state. In the decades since Csikszentmihalyi\u2019s initial research, there\nhave been dozens of studies on how developers work.\n\n  * A 2023 study found, for example, that there is a huge range of barriers to flow\u2014many of which aren\u2019t just interruptions from coworkers. They categorized these as situational barriers, such as interruptions and distractions; personal barriers, such as the work being too challenging or not challenging enough; and interpersonal barriers, such as poor management and poor team dynamics.\n\n  * A 2018 study found, in addition, that the most disruptive interruptions aren\u2019t external\u2014they\u2019re internal. 81% of the participants predicted internal interruptions would be worse, but they were wrong. \u201cSelf-interruptions,\u201d the researchers wrote, \u201cmake task switching and interruptions more disruptive by negatively impacting the length of the suspension period and the number of nested interruptions.\u201d\n\nThese two studies, as well as the dozen or more I read to find these two, give\nme a theory. There are many barriers to flow, but the worst barriers and the\nworst interruptions are internal, meaning the development workflow itself\nneeds to improve.\n\nThe greatest threat isn\u2019t an external interruption but an internal\nfragmentation\u2014developers allowing themselves to suspend flow state in favor of\nimportant but ultimately distracting tasks.\n\nGood news: We have more power than we think when it comes to maintaining flow.\nBad news: We might need to let our coworkers with dumb questions off the hook\n(at least a little bit).\n\n## Why fragmented thinking is the silent killer for developers\n\nI started looking into this not to make developers more productive but to see\nwhether developers who thought they were focusing were really succeeding. I\nworried that the popularization of \u201cflow state\u201d amongst developers had\nresulted in many developers thinking they were doing all they could do by\nturning off Slack notifications or blocking off their calendars.\n\n### Fragmented thinking IRL\n\nI don\u2019t mean to be too critical of the common sense assumptions developers\ntend to make about flow state. That famous comic by Jason Heeris, for example,\ncaptures a useful truth.\n\nThe comic illustrates that the problem isn\u2019t just restarting work or returning\nto a task in progress. The interruption shatters a flow state and forces the\ndeveloper to restart the complex system thinking necessary to solve the\nproblem in front of them.\n\nWith this in mind, you can see why a voluntary self-interruption can be worse\nthan an external one. You\u2019re fully shifting your thinking from one task to\nanother\u2014ensuring the flow state and the systems thinking your brain is holding\naloft are broken instead of just suspended.\n\nLet\u2019s imagine, for example, that you\u2019re building a feature that depends on an\nalgorithm, and the dependencies involved make the whole problem tricky. For\nproblems like these, higher-level systems thinking is necessary. The problem\nis too complex and too interdependent.\n\nWith that risk in mind, you might insulate yourself from Slack messages and\nmeetings, but standard development practices can break your flow state anyway\nby fragmenting your focus. As you finish a section of code, you might slip\nfrom flow once you go to write a commit message, for example.\n\nBut because no one literally interrupted your work, you might be unaware of\nthe costs of that rote, mundane work. You might even castigate yourself over\nthe day for not getting the work done: You fought for a distraction-free day,\ngot it, and you have nothing to show for it. It can feel bad.\n\n### Three ways to reduce fragmented thinking\n\nAn upside to reframing the problem as fragmented thinking is that there are a\nlot of opportunities to reduce fragmentation; the downside is that there are a\nlot of opportunities to choose from. Some take team-wide investment, but you\ncan do individual-level work while you advocate for bigger process changes.\n\nCreate mindfulness and nudging practices. A 2018 study focused on good work\nhabits, and a sequel study in 2023 focused on nudging found that reflective\ngoal-setting can increase productivity (80% agreed that daily reflection\nhelped), and regular nudging can help developers better structure their work\ndays and work habits. It sounds simple, but it\u2019s proven to be effective: By\nbeing more aware of the productivity and focus threats (especially self-\ninterruption, given what we found earlier), you can make demonstrable\nimprovements.\n\nReduce tech debt to waste less time. In a 2018 study, researchers found that\ndevelopers waste 23% of their working time as a result of technical debt. Most\nof that wasted time comes from performing additional testing, source code\nanalysis, and refactoring. Of course, \u201cJust eliminate your tech debt!\u201d is\nlikely impractical advice, but it points to the fact that a seemingly\nindividual problem, staying focused, is often downstream from an\norganizational problem.\n\nMake information accessible so you can keep developing. In 2023, as they do\nevery year, StackOverflow surveyed a wide range of developers, and a few of\nthe results are relevant here. According to the research:\n\n  * 54% of developers find that \u201cWaiting on answers to questions often causes interruptions and disrupts my workflow.\u201d\n\n  * 64% of developers encounter knowledge silos as often as five times per week.\n\n  * 63% of developers report that searching for answers and solutions takes at least 30 minutes per day.\n\nBetter documentation and collaborative workflows can do a lot to reduce\ncontext switching and increase focus. Tooling can also help\u2014consider adopting\ndeveloper portals and AI-enabled documentation search tools, for example.\n\n## Invest in your laziness\n\nDevelopers, in my experience, already detest useless meetings, and they\u2019re\nright to protect themselves. If you can also learn the costs of self-\ninterruptions and work toward protecting yourself from fragmented thinking,\nyou can stay in flow even longer.\n\nThis work, however, requires some investment beyond the individual. Ask\nyourself and your organization questions like these:\n\n  * How can teams building internal tools and design systems help to simplify or erase lower-level work?\n\n  * What tooling choices can you make that reduce lower-level thinking and optimize for higher-level thinking?\n\n  * What can you learn from other developers so that you can keep improving your work and development environments?\n\nYou can and should be lazy because frenetic, distracted, fragmented work\ndoesn\u2019t lead to productivity or value. Earning the right to be lazy in that\nway, however, requires team-wide work and organization-wide investment. It\u2019s a\nchallenge, but everyone benefits from meeting it\u2014including the coworker who\nwill no longer have their head bitten off for reminding you of an email about\na thing.\n\nTags:\n\n  * Essay\n\nNick Moore Guest Author\n\nFreelance writer creating technical content marketing and essays for\ndevelopers and engineers\n\n##### More posts by Nick\n\nView all\n\nEngineering\n\n5 lessons design systems teams can learn from open-source maintainers\n\nHere, we\u2019ve gathered 5 of the best lessons design systems teams can take from\nopen source and apply to their work.\n\n##### Related Posts\n\nView all from Engineering\n\nBringing Sharp to WebAssembly and WebContainers\n\nChallenges of porting native Node.js modules like Sharp to more platforms with\nWebAssembly.\n\nIngvar Stepanyan Guest Author\n\nThe Atomic Waltz: Unraveling WebAssembly Issues in V8 and SpiderMonkey\n\nDeep dive into WebAssembly performance issues on Apple Silicon and browser\nengines.\n\nDominic Elm\n\nNow I am become the Destroyer of Threads\n\nLow-level hacking on multithreaded WebAssembly\n\nRoberto Vidal\n\nDown the caching-hole: adventures in 'HTTP caching and Faraday' land\n\nLearn about HTTP caches, how Faraday middleware work, and how to use them to\nautomagically start caching API calls.\n\nSvyatoslav Kryukov\n\n##### Explore more from StackBlitz\n\nJoin the Community Get a hand, lend a hand, share your projects and be part of\nour growing community of developers. Join the Discord\n\nEnterprise Server The power of StackBlitz behind your firewall. Contact Sales\n\nDocumentation Learn StackBlitz in-depth, integrate into your workflows, and\nbuild your own apps on top of WebContainer. Browse the docs\n\nWork with us! Help make the world's software faster and more secure. Check out\nopen positions\n\n## Subscribe to StackBlitz Updates\n\nA newsletter from StackBlitz covering engineering achievements, product\nfeatures, and updates from the community.\n\n## Using StackBlitz at work?\n\nCreate in-browser preview apps for every issue or pull request, share private\ntemplates with your org, manage your design system with zero overhead, and\nmore.\n\nTry StackBlitz Teams\n\nProducts\n\n  * Codeflow\n  * Enterprise Server\n  * WebContainer API\n  * Web Publisher\n\nPlatform\n\n  * Pricing\n\nSupport\n\n  * Community\n  * Docs\n\nCompany\n\n  * Blog\n  * Careers\n  * Newsletter\n\n* \u00a9 2024 StackBlitz Inc.\n* Terms of Service\n* Privacy Policy\n\nStackBlitz Codeflow and the Infinite Pull Request logo are trademarks of\nStackBlitz Inc.\n\n", "frontpage": false}
