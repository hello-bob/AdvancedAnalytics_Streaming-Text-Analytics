{"aid": "40197355", "title": "Generating AWS Diagrams with Resource Explorer and Ilograph", "url": "https://www.ilograph.com/blog/posts/generate-aws-diagrams-with-resource-explorer-and-ilograph/", "domain": "ilograph.com", "votes": 1, "user": "Veuxdo", "posted_at": "2024-04-29 12:21:05", "comments": 0, "source_title": "How to Generate AWS Diagrams with Resource Explorer and Ilograph", "source_text": "How to Generate AWS Diagrams with Resource Explorer and Ilograph | Ilograph Blog\n\nIlographBlog\n\nGet Ilograph\n\n^\n\n  * Ilograph for Web - Use Ilograph in the browser\n  * Ilograph for Desktop - Use Ilograph as an offline desktop app\n  * Ilograph for Confluence - Use Ilograph in your Confluence Cloud instance\n\nFeatures Pricing Docs Architecture Center Blog\n\nHome Ilograph for Web Ilograph for Desktop Ilograph for Confluence Features\nPricing Docs Architecture Center Blog Ilograph on Twitter\n\n# How to Generate AWS Diagrams with Resource Explorer and Ilograph\n\nApr 29, 2024 \u00b7 10 min read \u00b7 Article \u00b7\n\nShare on:\n\nWelcome. This article shows how to generate architecture diagrams from\nresources in an AWS account (or multiple accounts). The techniques used here\nmake use of only free tools and don\u2019t require giving access to your AWS\naccount(s). The diagrams will be interactive and show the resources from\nmultiple perspectives:\n\nAlong with source code and written documentation, system architecture diagrams\nare excellent tools for documentation, onboarding, and knowledge-sharing.\nViewers can quickly scan architecture diagrams to ascertain the system\u2019s\nscope, scale, and patterns. Diagrams documenting actual systems (such as those\ndeployed to AWS) are especially valuable.\n\nThis guide uses two free tools:\n\n  * AWS Resource Explorer to export resources from an AWS account. Resource Explorer is free to use.\n  * Ilograph to import the resources and generate diagrams with them. Everything described here can be done using the free online version of Ilograph, regardless of the size and scope of the diagrammed AWS account(s). You can also use Ilograph Desktop or Ilograph for Confluence (both paid) if preferred.\n\nNote that the process will not be completely automated. These tools can\ngenerate significant portions of the diagrams (Parts 1 and 2), but human\nknowledge will be needed to diagram a system fully (Parts 3 and 4).\n\n## Part 1: Exporting resource data using AWS Resource Explorer\n\nThe first step is to export information about your AWS account\u2019s resources\nusing AWS Resource Explorer. These resources can include EC2 instances,\nDynamoDB tables, and IAM roles. Even simple architectures deployed to AWS can\nhave a surprisingly large number of resources. In Part 2, you will import\nthese resources into Ilograph to visualize them.\n\n> The sample diagrams used throughout this article are based on a deployment\n> of the Generative AI Application Builder on AWS solution. Click here to view\n> them.\n\nTo begin, click here to open the \u201cViews\u201d page in Resource Explorer. If there\nare no views already, click the orange \u201cCreate View\u201d button:\n\nGive the view a name (here, I\u2019ve chosen \u201call-resources\u201d) and leave the filter\nsetting on \u201cInclude all resources\u201d. Be sure to un-check the \u201cTags\u201d checkbox.\nExporting tag attributes isn\u2019t necessary and can slow down the time it takes\nto export resources.\n\nWhen ready, click the \u201cCreate View\u201d button at the bottom of the page, then\nnavigate to the resource search page. Resources should begin appearing in the\ntable. Depending on the number and type of resources in the account, it can\ntake several minutes to an hour for all resources to appear.\n\nOnce all the resources are present, select the gear icon to customize the\ncolumns in the resource table. The visible columns will determine what\nresources get exported to the CSV file:\n\nIn the preferences pop-up, ensure that Identifier, Resource Type, Region, and\nAWS Account are selected. These are required for the import to work in the\nnext part:\n\nThe same sequence as above, but with more context\n\nOptionally, you may include ARN (Amazon Resource Name) as an exported column.\nBy including this field in the export, resources in the generated diagrams\nwill have links back to their location in the AWS console.\n\nConfirming your choices returns you to the view screen. From there, export all\nvisible columns using the dropdown in the top-right of the page:\n\nIn the exported to a CSV, each line contains the ID, type, region, AWS account\nnumber, and optionally, ARN of a resource:\n\nThe above steps cover exporting resources from a single AWS account. Repeat\nthe steps above for each account to export from multiple AWS accounts, then\ncombine the fields into one CSV file. Ensure the combined CSV file has only\none header (the first line of the CSV).\n\n> Is this data sensitive? Not really. None of these fields contain passwords\n> or keys, and ARNs are not considered secrets. Bad actors won\u2019t be able to\n> use this information without first compromising the AWS account.\n\nWith the resources exported, it is time for the second step: importing them\ninto Ilograph.\n\n## Part 2: Importing resources into Ilograph\n\nIn this section, you will copy the exported data into Ilograph, explore your\nresources, and optionally rename them and create new ones.\n\nTo begin, click here to open the AWS resource importer in Ilograph. The app\nwill greet you with a textbox inviting you to paste the CSV data created in\nPart 1. Paste in the data, including the header information in the first line.\nIf everything works as expected, the blue \u201cImport\u201d button will become\navailable:\n\n### Browsing your resources\n\nOnce imported, your AWS resources will appear as boxes (also called resources)\nin Ilograph:\n\nThe number and type of resources, and how they appear, will vary greatly\ndepending on how many there are.\n\nYou won\u2019t be editing right away, so to give yourself more space, close the\neditor window on the left by clicking this black tab:\n\nBy default, the resources appear in their respective AWS services. This layout\ncan be changed using the \u201cContext\u201d dropdown in the app\u2019s top-right corner:\n\nAvailable options include sorting by service, region, and account. Depending\non the number of regions and accounts in your solution, these layouts will be\nmore or less enlightening.\n\nReturning to the \u201cService\u201d context, you can click on a service to see all\nresources in that service. You can also click on the resources themselves:\n\nWhen selected, some resources will have links back to the resource in the AWS\nconsole. These appear if resource ARNs were exported and included in the CSV\nfile (see Part 1 above):\n\nTo find a specific resource by name, type Ctrl-F (Cmd-F on Mac) to open the\nfind window. This find function is convenient when browsing accounts with many\nresources:\n\n### Renaming resources (Optional)\n\nResources exported from Resource Explorer don\u2019t always have human-friendly\nidentifiers. To rename a resource, follow these steps:\n\nFirst, reopen up the editor using the black tab on the left edge of the app\nwindow:\n\nSelect the resource you\u2019d like to rename, then click the \u201cedit\u201d icon (the\npencil) by its name:\n\nEnter a more human-friendly name in the textbox, then click \u201cOK\u201d to finish\nrenaming.\n\n### Adding resources (Optional)\n\nYou may add resources that were not part of the original export. To do so, add\nthem to the \u201cresources\u201d section in the editor on the left. In the example\nbelow, two \u201cclient\u201d resources have been added; they will be used in examples\nin the next section.\n\n> Note that you can rename and add resources at any time.\n\n## Part 3: Showing relations between resources\n\nWith the resources imported into Ilograph, you can now start creating\nperspectives with them. Perspectives are views of resources showing how they\nare related (relation perspectives) or interact with each other (sequence\nperspectives). You will create relation perspectives in this part and sequence\nperspectives in Part 4.\n\n> Until now, you did not need direct knowledge of the solution. From this\n> point forward, you will need first-hand knowledge of the system(s) you are\n> diagramming.\n\n### Relation Perspective 1: Run-time dependencies\n\nTo add a new perspective, first reopen the editor if it isn\u2019t already open.\nThen click the \u201cNew perspective\u201d button in the bottom tray of the application:\n\nIn the editor, a new section called \u201cperspectives\u201d is added with a new\nperspective (called, naturally, \u201cNew Perspective\u201d). Change the name of this\nperspective to \u201cRun-time dependencies\u201d:\n\nBack in the tray, click on the perspective name to select it:\n\nThe perspective is initially empty. To populate it, consider the most\nessential run-time relations between your resources. For example, your system\nmight have a REST API (GenAIAppBuilder) which calls a Lambda function\n(UseCaseManager). Add this relation from GenAIAppBuilder to UseCaseManager to\nthe relations section of the perspective:\n\nThe perspective should now look like this:\n\nYou may want to say more about this relation; do so by adding a \u201cdescription\u201d\nto it that will appear on mouse-over:\n\nThe lambda likely has downstream dependencies at run-time. For example, it may\nread from and write to a DynamoDB database. Add this as a second relation:\n\nContinue to add run-time relations. If your AWS account contains multiple\nindependent systems, consider breaking them up into multiple perspectives. The\nexample below shows relations between the API, lambdas, and other downstream\ndependencies:\n\n> This perspective shows how these resources are related but not their exact\n> interactions. You will document these in Part 4.\n\n## Relation Perspective 2: Static dependencies\n\nThe previous perspective focuses on run-time perspectives; it does not show\nstatic relations related to DNS and CloudFront origins. Instead of adding\nthese relations to this perspective, create a new perspective dedicated to\nthese relations.\n\nUse the \u201cNew perspective\u201d button again to create a new perspective, then name\nit \u201cStatic dependencies.\u201d Add relations like before to document how your\nresources are configured regarding DNS (Route53), CDN (CloudFront), and\nsimilar technologies. Avoid adding dynamic run-time relations (better suited\nto the previous perspective) or build-time relations (better suited to the\nfollowing perspective).\n\nFor example, users may use a static website hosted in an S3 bucket and\naccessed from a CloudFront distribution. This distribution uses a Route53\nhosted zone for DNS resolution:\n\nContinue to add static dependency relations. Like before, you can break these\ninto multiple perspectives if you have a large account with multiple\nindependent systems:\n\nNotice that GenAIAppBuilder is present in both perspectives in our example:\n\n### Relation Perspective 3: Deployment\n\nThe final relational perspective covered in this guide concerns build-time\nrelations. In addition to run-time and static dependencies, your audience may\nwant to know how your resources were deployed. Create a Deployment perspective\nto cover this; an example looks like this:\n\nThis example perspective shows which resources were deployed by which\nCloudFormation stacks. Selecting a stack focuses on the resources it was\nresponsible for deploying:\n\nLike before, you can toggle between this perspective and the others to see\ntheir commonalities:\n\n## Part 4: Showing interactions between resources\n\nPart 3 covered relational perspectives, which showed, at a high level, how\nyour AWS resources are related. Part 4 focuses on sequence perspectives, which\nshow interactions between your resources. Sequence perspectives are generally\nmore detailed and excellent for explaining exactly how critical functionality\nworks.\n\nThe exact interactions between your AWS resources are, of course, particular\nto what your system does. Instead of prescribing perspectives like in Part 3,\nwe will switch gears and look at two example sequence perspectives.\n\n### Example Sequence Perspective 1: Deploying a new app\n\nThe Run-time dependencies perspective created in Part 3 shows that the\nUseCaseManager Lambda function writes to the UseCaseTable DynamoDB table and\ndeploys stacks using CloudFormation. This high-level information is valuable,\nbut it would be valueable to demonstrate when and why these things happen.\n\nThe Generative AI Application Builder solution allows users to deploy (and\ndelete) AI apps. We will create two sequence perspectives to show how our\nresources interact in these two scenarios. The first perspective, \u201cCreate new\napp,\u201d shows what these resources do when users deploy a new app:\n\nWhile perspectives in Part 3 defined \u201crelations\u201d in the editor window, the\nperspective defines a sequence:\n\nThe syntax of sequence diagrams should be easy enough to understand. Each step\ndefines a resource and a label for the arrow.\n\nUnlike the Run-time dependencies perspective, the sequence perspective shows\nthe detailed back-and-forth between resources, including the order of\noperations. However, this perspective covers only a single interaction. We\nneed other sequence perspectives to show different scenarios.\n\n### Example Sequence Perspective 2: Removing an app\n\nOur first sequence perspective showed how creating an app works. Our second\nshows the opposite action, removing an app:\n\nOur resources are mostly the same in this scenario. Toggling between our two\nsequence perspectives and the run-time dependencies perspective emphasizes how\nthey are different views on (mostly) the same resources:\n\nSmall systems may have only a few paths of functionality; larger systems may\nhave hundreds or more. Consider documenting the most important critical\nfunctional paths with sequence perspectives.\n\n### Addendum: Adding more details\n\nIlograph provides a few additional ways to enrich your diagram with more\ninformation:\n\nResource descriptions - Descriptions can be added to each resource to provide\nmore information about them. The description is visible when the resource is\nselected:\n\nRelation and step descriptions - Every step and relation can also be given a\ndescription. These appear on mouse-over:\n\nPerspective notes - Notes can be added to perspectives. These are excellent\nfor orienting new viewers to what the perspective is showing:\n\n> If you haven\u2019t already, click here to view the sample diagrams used\n> throughout this article.\n\nQuestions or comments? Please reach out to me on LinkedIn, Twitter or by email\nat billy@ilograph.com.\n\nShare this article on LinkedIn\n\nShare this article on Facebook\n\nShare this article on Twitter\n\n## Featured Posts\n\n  * How to Generate AWS Diagrams with Resource Explorer and Ilograph\n  * Why Ilograph Added Contexts\n  * Better AWS Architecture Diagrams: Distributed Load Testing\n  * Better AWS Architecture Diagrams: Video-On-Demand Service\n  * Concrete Diagramming Models, a Lightweight Alternative to C4\n\n## Categories\n\n## Recent Posts\n\n  * Ilograph 1.7.3 Release Notes\n  * Ilograph 1.7.1 Release Notes\n  * Ilograph 1.6.9 Release Notes\n  * Ilograph 1.6.8 Release Notes\n  * Ilograph 1.6.7 Release Notes\n  * Ilograph 1.6.4 Release Notes\n  * Better AWS Architecture Diagrams: Distributed Load Testing\n  * Better AWS Architecture Diagrams: Video-On-Demand Service\n  * Concrete Diagramming Models, a Lightweight Alternative to C4\n\nCopyright 2024 Ilograph LLC. All Rights Reserved\n\n", "frontpage": false}
