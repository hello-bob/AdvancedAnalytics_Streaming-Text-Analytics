{"aid": "40187605", "title": "Show HN: PgQueuer \u2013 Over 5k Jobs/sec with PostgreSQL", "url": "https://github.com/janbjorge/PgQueuer", "domain": "github.com/janbjorge", "votes": 2, "user": "jeeybee", "posted_at": "2024-04-28 10:51:54", "comments": 0, "source_title": "GitHub - janbjorge/PgQueuer: PgQueuer is a Python library leveraging PostgreSQL for efficient job queuing.", "source_text": "GitHub - janbjorge/PgQueuer: PgQueuer is a Python library leveraging\nPostgreSQL for efficient job queuing.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\njanbjorge / PgQueuer Public\n\n  * Notifications\n  * Fork 0\n  * Star 2\n\nPgQueuer is a Python library leveraging PostgreSQL for efficient job queuing.\n\n### License\n\nMIT license\n\n2 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# janbjorge/PgQueuer\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n3 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\njanbjorgeReadme benchmark summaryApr 28, 2024a118a4f \u00b7 Apr 28, 2024Apr 28,\n2024\n\n## History\n\n17 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Add ci step: check-all-ci-passed| Apr 27, 2024  \n  \n### src/PgQueuer\n\n|\n\n### src/PgQueuer\n\n| Readme benchmark summary| Apr 28, 2024  \n  \n### test\n\n|\n\n### test\n\n| Reset connection after run| Apr 27, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| A few tests| Apr 21, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| MVP| Apr 20, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Readme benchmark summary| Apr 28, 2024  \n  \n### docker-compose.yml\n\n|\n\n### docker-compose.yml\n\n| Add CI| Apr 26, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| Remove docs dep.| Apr 27, 2024  \n  \n## Repository files navigation\n\n## \ud83d\ude80 PgQueuer - Building Smoother Workflows One Queue at a Time \ud83d\ude80\n\n\ud83d\udcda Documentation: Explore the Docs \ud83d\udcd6\n\n\ud83d\udd0d Source Code: View on GitHub \ud83d\udcbe\n\n## PgQueuer\n\nPgQueuer is a minimalist, high-performance job queue library for Python,\nleveraging the robustness of PostgreSQL. Designed for simplicity and\nefficiency, PgQueuer uses PostgreSQL's LISTEN/NOTIFY to manage job queues\neffortlessly.\n\n### Features\n\n  * Simple Integration: Easy to integrate with existing Python applications using PostgreSQL.\n  * Efficient Concurrency Handling: Utilizes PostgreSQL's FOR UPDATE SKIP LOCKED for reliable and concurrent job processing.\n  * Real-time Notifications: Leverages LISTEN and NOTIFY for real-time updates on job status changes.\n\n### Installation\n\nTo install PgQueuer, simply install with pip the following command:\n\n    \n    \n    pip install PgQueuer\n\n### Database Configuration\n\nPgQueuer provides a command-line interface for easy management of installation\nand uninstallation. Ensure you have configured your environment variables or\nuse the appropriate flags to specify your database credentials.\n\n  * Installing PgQueuer Database Components:\n    \n        python -m PgQueuer install\n\n  * Uninstalling PgQueuer Database Components:\n    \n        python -m uninstall\n\nThe CLI supports several flags to customize the connection settings. Use\n--help to see all available options.\n\n### Show-Case: Processing Incoming Data Messages\n\nIn this scenario, the system is designed to manage a queue of incoming data\nmessages that need to be processed. Each message is encapsulated as a job, and\nthese jobs are then processed by a designated function linked to an\nentrypoint. This is typical in systems where large volumes of data are\ncollected continuously, such as telemetry data from IoT devices, logs from web\nservers, or transaction data in financial systems.\n\n#### Function Description:\n\nThe fetch function, tied to the fetch entrypoint, is responsible for\nprocessing each message. It simulates a processing task by printing the\ncontent of each message. This function could be adapted to perform more\ncomplex operations such as parsing, analyzing, storing, or forwarding the data\nas required by the application.\n\n    \n    \n    import asyncio import asyncpg from PgQueuer.models import Job from PgQueuer.qm import QueueManager async def main() -> None: # Set up a connection pool with a minimum of 2 connections. pool = await asyncpg.create_pool(min_size=2) # Initialize the QueueManager with the connection pool and query handler. qm = QueueManager(pool) # Number of messages to simulate. N = 10_000 # Enqueue messages. for n in range(N): await qm.queries.enqueue(\"fetch\", f\"this is from me: {n}\".encode()) # Define a processing function for each message. @qm.entrypoint(\"fetch\") async def process_message(job: Job) -> None: # Print the message to simulate processing. print(f\"Processed message: {job}\") await qm.run() if __name__ == \"__main__\": asyncio.run(main())\n\n### Benchmark Summary\n\nThe PgQueuer underwent basic benchmark testing to assess its performance\nacross varying job volumes and concurrency levels.\n\n#### Key Observations:\n\n  * Scalability: Performance increases with higher concurrency, demonstrating the library's ability to efficiently manage larger workloads.\n  * Consistency: PgQueuer maintains consistent throughput across different job counts, ensuring reliable performance.\n  * Optimal Performance: The highest throughput observed was 5,224 jobs per second at a concurrency level of 5, highlighting the library's robust handling capabilities.\n\n## About\n\nPgQueuer is a Python library leveraging PostgreSQL for efficient job queuing.\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n2 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 3\n\nv0.2.1 Latest\n\nApr 28, 2024\n\n\\+ 2 releases\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Python 97.1%\n  * Dockerfile 1.9%\n  * Shell 1.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
