{"aid": "40264698", "title": "What to Say in Code Reviews", "url": "https://read.highgrowthengineer.com/p/exactly-what-to-say-in-code-reviews", "domain": "highgrowthengineer.com", "votes": 2, "user": "redbell", "posted_at": "2024-05-05 13:20:41", "comments": 0, "source_title": "Exactly what to say in code reviews", "source_text": "Exactly what to say in code reviews - by Jordan Cutler\n\n# High Growth Engineer\n\nShare this post\n\n#### Exactly what to say in code reviews\n\nread.highgrowthengineer.com\n\n#### Discover more from High Growth Engineer\n\nGrow faster in your software engineering career with weekly actionable tips\nyou can use right away.\n\nOver 59,000 subscribers\n\nContinue reading\n\nSign in\n\n# Exactly what to say in code reviews\n\n### 7 techniques to add to your daily toolkit when giving code review feedback\n\nJordan Cutler\n\nApr 07, 2024\n\n163\n\nShare this post\n\n#### Exactly what to say in code reviews\n\nread.highgrowthengineer.com\n\n23\n\nShare\n\nYou want to give someone feedback in code review, but you know text is so hard\nto get right. It\u2019s misinterpreted all the time.\n\nYou don\u2019t want your message to come across the wrong way. You want the other\nperson to be open to your suggestion and see your point of view.\n\nThis is surprisingly hard to get right!\n\nIn the past, I gave feedback which slowly built tension throughout the review\nuntil there were multi-paragraph-long comment threads. My teammates were\ndefensive, and I was at fault.\n\nI tried a few approaches to fix this and observed other engineers who gave\ngreat code reviews. After learning a few tricks, I never ran into the same\nissues.\n\nThis article will give you 7 simple techniques I learned to respectfully give\nfeedback in code reviews.\n\nFor each technique, I\u2019ll give you examples of how and when to use it.\n\nSource\n\n##\n\n\ud83d\udce3 Announcement: Actionable insight library\n\nI released a library of 100+ actionable career growth insights you can read in\nan hour!\n\nIt\u2019s perfect if you want a condensed version of everything you can do to level\nup in your career from the past articles. You can get it for free as the\nsecond referral reward!\n\nGet 100+ insights to level up\n\nFinally, this is the last call to lock in a paid subscription at $5/month\nbefore it goes up to $12/month this Wednesday. If you\u2019re interested in the\nTLDR library, you can even get a 40% discount after upgrading.\n\nAlright, let\u2019s get into the techniques!\n\n##\n\n1) I wonder...\n\n> I wonder if we could use a switch statement here instead of multiple if-else\n> blocks.\n\n> I wonder about the scalability of this solution. As the dataset grows, will\n> this approach continue to perform well, or should we consider implementing\n> pagination or lazy loading?\n\nWhen to use it: When you want to suggest lightly while opening it up for\ndiscussion.\n\n##\n\n2) I\u2019m curious...\n\n> I'm curious about the use of this external library. Have we evaluated its\n> performance impact and compatibility with our codebase?\n\n> I'm curious about the accessibility of these custom UI components. Do we\n> have something in place to give us guarantees around that?\n\nWhen to use it: When you want to call out that something about the current\napproach might not be the best and understand the author\u2019s perspective.\n\n##\n\n3) What do you think about...\n\n> What do you think about using `map` here instead of mutating the array for\n> safety?\n\n> What do you think about abstracting this repeated logic into a separate\n> function or a custom hook to reduce duplication and improve testability?\n\nAnother quick alternative to this one is: \u201cWould <x> make sense?\u201d\n\n> Would adding an error boundary here make sense to serve a fallback UI?\n\nWhen to use it: Making a direct suggestion while still leaving room for the\nother person to give their thoughts.\n\nBelow are similar suggestions from Aleksandar (Senior Software Engineer) when\nyou want to make a direct suggestion.\n\nAleksandar shared how to make a direct suggestion respectfully\n\n##\n\n4) What would happen if...\n\n> What would happen if this list was empty?\n\n> What would happen if the API returns an error here?\n\nAnother variation of this one is: \u201cIf <x> happened, would we run into <y>\nissue?\u201d This is a little more direct of what you\u2019re thinking could happen.\n\n> If we received a large spike of users, would out-of-memory issues be a\n> concern?\n\nSwapping to that variation for the original 2 examples, it would look like:\n\n  * \u201cIf the list was empty, would we error out from not having any results?\u201d\n\n  * \u201cIf the API returned an error here, would this page fail to load?\u201d\n\nWhen to use it: You are pretty sure an edge case is not handled, but you still\nwant to allow the other person to tell you something you don\u2019t know. For\nexample, it might not matter that the case is not handled for now.\n\n##\n\n5) I noticed... What are your thoughts?\n\n> I noticed multiple levels of nested callbacks here. What are your thoughts\n> on updating to async/await to reduce the nesting for readability?\n\n> I noticed we might not be handling errors from the API here. What are your\n> thoughts on adding checks for the different status codes?\n\n> I noticed the other files in this folder have <x> convention. What do you\n> think about matching that here?\n\nWhen to use it: You notice something that seems off about the approach or\ncould be better. You want the other person to see what you are seeing and open\nit up for discussion to solve together.\n\n##\n\n6) What > Why\n\nOne lightbulb moment for me was to stop using \u201cwhy\u201d wherever possible and\nreplace it with \u201cwhat.\u201d\n\nTell me which one makes you feel less defensive:\n\n  * Why did you decide to add custom logic here instead of using a library?\n\n  * What\u2019s the reason for adding custom logic here instead of using a library?\n\nIt\u2019s a small tweak, but \u201cwhy\u201d triggers defensiveness which can be avoided with\n\u201cwhat.\u201d\n\nI think it\u2019s because growing up you hear \u201cwhy\u201d when you are scolded\u2014like \u201cWhy\ndid you eat all the cookies!!??\u201d\n\nSomething \u201cwhy\u201d often leans into is using \u201cyou\u201d, which is also a no-no. Try to\nspeak about the code, not the person.\n\nSo replace your \u201cwhys\u201d with \u201cwhats\u201d and you\u2019ll see instant results.\n\n##\n\n7) Empathizing words > Prescriptive words\n\nBoth\n\nIrina Stanescu\n\nand\n\nWes Kao\n\nhave shared about empathizing words vs. prescriptive words.\n\nEmpathizing words allow people to let their guard down.\n\nPrescriptive words do the opposite.\n\nHere are some empathizing words I often use in code review:\n\n  * Consider\n\n  * Might\n\n  * Could\n\n  * Suggest\n\n  * Seem\n\n  * Likely\n\n  * Think\n\nHere are prescriptive words I generally avoid:\n\n  * Must\n\n  * Should\n\n  * Have to\n\n  * Never\n\n  * Always\n\n  * Only\n\n  * Know\n\nThe difference between them is how certain you appear.\n\nDmitry (Tech Lead) shared how being too certain can lead to unpleasant\nsituations.\n\nWhenever you give feedback, you could be wrong. By using empathizing words,\nyou are leaving it up to the other person to decide if you are wrong based on\nthe information you gave them.\n\nThis makes it more collaborative because you aren\u2019t declaring you are right.\nYou are inviting feedback.\n\nHere are two examples:\n\n> \u274c This should use the new pattern we adopted last month\n>\n> \u2705 This could use the new pattern we adopted last month. What do you think?\n\nYou\u2019ll notice that the second one sounds a bit softer. \u201cWhat do you think?\u201d\nalso only makes sense in the second one, since it\u2019s a bit strange to make a\ndeclaration with \u201cshould\u201d and then ask what the other person thinks.\n\nDeya shared the difference between empathizing and prescriptive wording\n\nAs Deya pointed out in the image above, \u201cCan we\u201d is another great option.\n\nIt uses \u201cwe\u201d instead of \u201cyou\u201d and asks a question instead of giving a command.\n\n\u201cCan we\u201d is a good option if you are fairly certain it\u2019s the right thing to\ndo, but you still don\u2019t want to command the other person.\n\n##\n\n\ud83e\udd14 What if the other person doesn\u2019t listen?\n\nYou may wonder, if we are using softer language, what happens if the other\nperson disagrees?\n\nWell, that\u2019s the whole point! We\u2019re inviting disagreement rather than\nresentment.\n\nIf they disagree, they should provide a valid reason. If they don\u2019t provide\none, ask!\n\nIn my experience, using softer language has not only invited valid reasons I\u2019m\nwrong but also increased the chance my teammates accept my suggestions the\nfirst time.\n\nInstead of feeling judged, they see me as an ally working toward a common\ngoal.\n\n##\n\n\u2b50\ufe0f Bonus wordings\n\nDan Goslen, a friend of mine, wrote a full book, Code Review Champion, on\nbeing a great reviewer and putting up changes that reviewers love.\n\nIn his book, he shares \u201cI wonder\u201d in more depth along with 2 other wordings:\n\n  * Have you considered...?\n\n  * Can you help me understand...?\n\nDan is offering a discount for High Growth Engineer subscribers to pick up the\nbook for just $10. The link above has the code auto-applied.\n\nI read through it and it covers everything you\u2019d need to know. I\u2019d recommend\nit for early-career engineers and any engineer who wants to polish their\nskills in code reviews.\n\nThe book is just 130 pages. Dan is also giving you all one of his bonus\nresources: A pull request template you can start using right away.\n\n##\n\n\ud83d\udcd6 TL;DR\n\n  * \u201cI wonder...\u201d - Use it to suggest lightly while opening it up for discussion\n\n    * Example: \u201cI wonder if we could use a switch statement here instead of multiple if-else blocks.\u201d\n\n  * \u201cI\u2019m curious...\u201d - Use it to call out something that may not be great about the current approach\n\n    * Example: \u201cI'm curious about the accessibility of these custom UI components. Do we have something in place to give us guarantees around that?\u201d\n\n  * \u201cWhat do you think about...\u201d - Use it to make a direct suggestion while still leaving room for the other person to give their thoughts\n\n    * Example: \u201cWhat do you think about using `map` here instead of mutating the array for safety?\u201d\n\n  * \u201cWhat would happen if...\u201d - Use it when you are pretty sure an edge case is not handled, but you still want to allow the other person to tell you something you\u2019re not aware of.\n\n    * Example: \u201cWhat would happen if the API returns an error here?\u201d\n\n  * \u201cI noticed... What are your thoughts?\u201d - Use it if you notice something about the approach that could be better but want to invite feedback on your suggestion\n\n    * Example: \u201cI noticed the other files in this folder have <x> convention. Should we match that here?\u201d\n\n  * \u201cWhat > why\u201d - Use \u201cwhat\u201d instead of \u201cwhy\u201d wherever possible. It softens the language to avoid defensiveness.\n\n    * Example: \u201cWhat\u2019s the reason for adding custom logic here instead of using a library?\u201d is better than \u201cWhy did you decide to add custom logic here instead of using a library?\u201d\n\n  * Empathizing words > prescriptive words\n\n    * Check how certain you appear in your statement.\n\n    * Use words like \u201cconsider\u201d, \u201cmight\u201d, and \u201ccould\u201d instead of words like \u201cmust\u201d, \u201chave to\u201d, and \u201cshould\u201d\n\n##\n\n\ud83d\udce3 Shout-outs of the week\n\n  * How to use your mentor effectively by\n\nRaviraj Achar\n\non\n\nTechlead Mentor\n\n\u2014 5 great tips on getting the most value from your mentors.\n\n  * How to manage up as an engineer or engineering manager by\n\nGregor Ojstersek\n\non\n\nEngineering Leadership\n\n\u2014 3 mistakes Gregor made in the past and a 5-step framework for managing up\neffectively\n\n  * 10 Must-Reads for Engineering Leaders by\n\nAnton Zaides\n\non\n\nLeading Developers\n\n\u2014 Concise article with takeaways on 10 great books for leveling up as a\nleader.\n\n##\n\n\ud83d\udccb Job Board\n\nI\u2019m experimenting with a High Growth Engineer job board for the next few\nweeks. I\u2019ll prioritize remote jobs to share with you all. Note: I do get a\ncommission if you\u2019re hired.\n\n  * Senior Software Engineer, SMS Team - Remote US @ OneSignal - $160-$180k base\n\n  * Senior Software Engineer, User Data Team - Remote US @ OneSignal - $160-$180k base\n\n  * Senior Software Engineer - Remote Israel @ SeatGeek\n\nThank you for your continued support of the newsletter and the growth to 55k+\nsubscribers \ud83d\ude4f\n\n\\- Jordan\n\nP.S. Here are a few other things which may interest you:\n\n  1. Path to Senior Engineer Handbook (9k+ stars)\u2014Everything you need to get to Senior. Let\u2019s get to 10k stars!\n\n  2. My LinkedIn: I write daily content to 60k+ engineers. I\u2019m also ramping on Twitter/X\n\n  3. Newsletter sponsorships: Feel free to reply to this email or check the Sponsorship packages\n\nDid you find this issue valuable? If so, there are two ways you can help:\n\nJoin 55k+ subscribers and 350+ paid subscribers and get all my templates to\nlevel up\n\nYou can also hit the like \u2764\ufe0f button at the bottom of this email to help\nsupport me or share this with a friend. It really helps!\n\n163 Likes\n\n\u00b7\n\n16 Restacks\n\n163\n\nShare this post\n\n#### Exactly what to say in code reviews\n\nread.highgrowthengineer.com\n\n23\n\nShare\n\n23 Comments\n\nAnton ZaidesLeading DevelopersApr 8Liked by Jordan CutlerI loved the What vs\nwhy tip, never thought about it!Great article Jordan \ud83d\ude4fExpand full commentLike\n(3)ReplyShare  \n---  \n  \n1 reply by Jordan Cutler\n\nVitApr 7Liked by Jordan CutlerI find these advises good if you are in N.\nAmerican company and N.American team. But the moment you have international\nteam, you quickly realize that indirect feedback doesn't work with people who\nprefer direct feedback. To understand the subject, I recommend the book\nCulture Map.Also, don't forget that code review is a review of the CODE, not\nthe AUTHOR of the code. If both sides agree on that, then it's much easier to\ngive effective concise feedback in code reviews.Expand full commentLike\n(3)ReplyShare  \n---  \n  \n1 reply by Jordan Cutler\n\n21 more comments...\n\n5 Lessons I learned the hard way from 6 years as a software engineer\n\nHey there, Jordan here \ud83d\udc4b. You\u2019re probably familiar with most of my articles\nbeing a \u201chow-to\u201d guide. Those guides come from my real-world experience and...\n\nMar 3 \u2022\n\nJordan Cutler\n\n204\n\nShare this post\n\n#### 5 Lessons I learned the hard way from 6 years as a software engineer\n\nread.highgrowthengineer.com\n\n20\n\nI wish I started doing this on day 0 of my career as an engineer\n\nAvoid constant interruptions and make progress on what matters\n\nFeb 18 \u2022\n\nJordan Cutler\n\n176\n\nShare this post\n\n#### I wish I started doing this on day 0 of my career as an engineer\n\nread.highgrowthengineer.com\n\n33\n\nHow to lead projects from start to finish as a software engineer\n\nThe best engineers don't just know how to code. They know how to lead.\n\nMar 10 \u2022\n\nJordan Cutler\n\n156\n\nShare this post\n\n#### How to lead projects from start to finish as a software engineer\n\nread.highgrowthengineer.com\n\n30\n\nReady for more?\n\n\u00a9 2024 Jordan Cutler\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
