{"aid": "40293461", "title": "Did GitHub Copilot increase my productivity?", "url": "https://trace.yshui.dev/2024-05-copilot.html", "domain": "yshui.dev", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-05-08 01:31:34", "comments": 0, "source_title": "Is Copilot good? - yshui --log-level=trace", "source_text": "Is Copilot good? - yshui --log-level=trace\n\n# yshui --log-level=trace\n\n# Did GitHub Copilot really increase my productivity?\n\nI had free access to GitHub Copilot for about a year, I used it, got used to\nit, and slowly started to take it for granted, until one day it was taken\naway. I had to re-adapt to a life without Copilot, but it also gave me a\nchance to look back at how I used Copilot, and reflect - had Copilot actually\nbeen helpful to me?\n\nCopilot definitely feels a little bit magical when it works. It's like it\nplucked code straight from my brain and put it on the screen for me to accept.\nWithout it, I find myself getting grumpy a lot more often when I need to write\nboilerplate code - \"Ugh, Copilot would have done it for me!\", and now I have\nto type it all out myself. That being said, the answer to my question above is\na very definite \"no, I am more productive without it\". Let me explain.\n\nDisclaimer! This article only talks about my own personal experiences, as you\nwill be able to see, the kind of code I ask Copilot to write is probably a\nlittle bit atypical. Still, if you are contemplating if you should pay for\nCopilot, I hope this article can serve as a data point. Also, I want to\nacknowledge that generative AI is a hot-potato topic right now - Is it morally\ngood? Is it infringing copyright? Is it fair that companies train their model\non open source code then benefit from it? Which are all very very important\nproblems. However please allow me to put all that aside for this article, and\ntalk about productivity only.\n\nOK, let me give you some background first. For reasons you can probably guess,\nI do not use Copilot for my day job. I use it for my own projects only, and\nnowadays most of my free time is spent on a singular project - picom, a X11\ncompositor, which I am a maintainer of. I am not sure how many people reading\nthis will know what a \"compositor\" is. It really is a dying breed after all,\ngiven the fact X11 is pretty much at its end-of-life, and everyone is slowly\nbut surely moving to wayland. Yes, each of the major desktop environments\ncomes with its own compositor, but if you want something that is not attached\nto any DE, picom is pretty much the only option left. Which is to say, it is a\nsomewhat \"one of a kind\" project.\n\nOf course, as is the case with any software projects, you will be able to find\nmany commonly seen components in picom: a logging system, string manipulation\nfunctions, sorting, etc. But how they all fit together in picom is pretty\nunique. As a consequence, large scale reasoning of the codebase with Copilot\nis out of the window. Since it has not seen a project like this during\ntraining, it's going to have a really hard time understanding what it's doing.\nWhich means my usage of Copilot is mostly limited to writing boilerplates,\nrepetitive code, etc. To give a concrete example, say you need to parse an\nescaped character:\n\n    \n    \n    if (pattern[offset] == '\\\\') { switch (pattern[offset + 1]) { case 't': *(output++) = '\\t'; break; // ???? } }\n\nIf you put your cursor at the position indicated by ????, you can pretty\nreliably expect Copilot to write the rest of the code for you. Other examples\ninclude mapping enums to strings, write glue functions that have a common\npattern, etc. In other words, the most simple and boring stuff. Which is very\ngood. See, I am someone who wants programming to be fun, and writing these\nboring, repetitive code is the least fun part of programming for me. I am more\nthan delighted to have someone (or rather, something) take it away from me.\n\nSo, what is wrong then? Why did I say I am more productive without Copilot?\nWell, that's because Copilot has two glaring problems:\n\n### 1\\. Copilot is unpredictable\n\nCopilot can be really really helpful when it gets things right, however, it's\nreally difficult to predict what it will get right, and what it won't. After a\nyear of working with Copilot, I would say I am better at that than when I\nfirst started using it, but I have yet to fully grasp all the intricacies. It\nis easy to fall into the trap of anthropomorphising Copilot, and trying to\ngauge its ability like you would a human. For instance, you might think, \"Hmm,\nit was able to write that function based on my comments, so it must be able to\nwrite this too\". But you are more than likely to be proven wrong by the chunk\nof gibberish Copilot throws at you. This is because, Artificial Intelligence\nis very much unlike Human Intelligence. The intuition you've developed through\na lifetime's interaction with other humans, is not going to work with an AI.\nWhich means, short of letting Copilot actually try, there is oftentimes no\nsurefire way to know whether it's going to work or not. And this problem is\ncompounded by the other big problem of Copilot:\n\n### 2\\. Copilot is slooooow\n\nclangd, my C language server of choice, is very fast. It's faster than I can\ntype, which means practically speaking, its suggestions are instant. Even when\nthe suggestions are unhelpful, it costs me nothing. I don't have to pause, or\nwait, so my flow is uninterrupted. Compared to that, Copilot is much much\nslower. I would wait at least 2~3 seconds to get any suggestion from Copilot.\nIf Copilot decided, for whatever reason, to write a large chunk of code, it\nwould take a lot longer. And in many instances I would wait all those seconds\nonly to see Copilot spit out unusable code. And I would have to decide if I\nneed to refine the instructions in comments and try again; or partially accept\nthe suggestion and do the rest myself. Even though this doesn't happen that\noften, (after you have gotten to know Copilot a bit better), much time is\nwasted in the back-and-forth.\n\nSo yeah, that's pretty much all I have to say. At least at this very moment, I\ndo not think Copilot will improve my productivity, so I definitely wouldn't be\npaying for it. If GitHub's plan was to give me a year's free access of Copilot\nto get me addicted, then their plot has conclusively failed. But that being\nsaid, if Copilot is a little bit smarter, or several times faster than it\ncurrently is, maybe the scale will tip the other way.\n\nHmm, should I be scared?\n\n", "frontpage": false}
