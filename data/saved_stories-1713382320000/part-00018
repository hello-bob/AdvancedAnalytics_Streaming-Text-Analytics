{"aid": "40064286", "title": "Creating an Encrypted Portable Container for ZeroNet", "url": "https://znano.eu.org/blog/posts/creating-an-encrypted-portable-container-for-zeronet", "domain": "znano.eu.org", "votes": 1, "user": "znano", "posted_at": "2024-04-17 13:28:27", "comments": 0, "source_title": "Creating an Encrypted Portable Container for ZeroNet", "source_text": "Creating an Encrypted Portable Container for ZeroNet \u00b7 Zola Gonano\n\n### Zola's Blog Where I share everything that Im interested in\n\n# Creating an Encrypted Portable Container for ZeroNet\n\nAt 17 Apr 2024 By Zola Gonano\n\nI have two Linux machines that I constantly switch between, and I had a\nproblem syncing my ZeroNet^1 data between my machines. Additionally, I didn\u2019t\nwant to share my data with a third-party server. So, I decided to make a\nportable USB stick for my ZeroNet that could not only be used with my devices\nbut also with any other device running Linux. This approach also solved\nanother problem I had with ZeroNet, which was its lack of encryption. Now, I\ncould encrypt my USB stick and my ZeroNet data inside it without any\ncomplications.\n\nAnd I thought that sharing the process of doing so would save a lot of time\nfor someone experiencing the same problem. So here\u2019s how I set up my portable\ncontainer:\n\n## 1\\. Wiping the USB Stick\n\nAlways before encrypting any devices, you should securely wipe the device so\nthat the previous data on it becomes unrecoverable in case you lose the device\nor it gets stolen. To wipe this USB stick, all I did was fill it with zeros\nuntil there was no space left on it:\n\nTo do so, you first need to identify the device that you want to wipe:\n\nFor that, you can run the lsblk command which will show all your devices and\ntheir names:\n\n    \n    \n    $ lsblk -p NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS ... /dev/sdc 8:32 1 29.3G 0 disk\n\nThe output shows me that the USB stick that I\u2019m going to use is located at\n/dev/sdc.\n\nThen, use the dd command to read from /dev/zero or /dev/urandom into it until\nit\u2019s filled with zeros:\n\n    \n    \n    sudo dd if=/dev/zero of=/dev/sdc status=progress bs=128M\n\nNote: You should replace /dev/sdc with your own device.\n\nI recommend reading from /dev/urandom as most modern Flash Memory devices use\ncompression features, which can compress a pattern of zeros and prevent the\ndevice from getting fully and securely wiped. However, with /dev/urandom,\nyou\u2019ll get fairly fast-generated pseudo-random data that cannot be compressed,\nmaking it the safer approach.\n\nYou should wait until you get the \u201cNo space left on device\u201d message from the\ndd command. Then, you can proceed to encrypt the device.\n\n## 2\\. Encrypting the USB Stick\n\nTo encrypt the device, I used LUKS^2 as I only have Linux machines and I don\u2019t\nneed my USB stick to be readable on Windows machines. However, if you want to\nmake it cross-platform, you can use VeraCrypt instead.\n\n**Note: ** To encrypt the device using the LUKS format, you\u2019ll need to install\nthe cryptsetup package (usually it is already installed in most Linux\ndistributions).\n\n    \n    \n    sudo cryptsetup -y -v --type luks2 luksFormat /dev/sdc\n\nBy running the command above, you\u2019ll be prompted to accept the risks of\noverwriting data on your device. Then, you\u2019ll be asked for a passphrase, which\nwill be used to decrypt and unlock the USB stick.\n\nAfter you set up encryption, you need to open the device using luksOpen and\ncreate a file system on it. For the file system, I\u2019ve used BTRFS, which is a\nmodern and stable enough filesystem for my purpose. You can use EXT4 as well\nif you want something older and more stable, but the journaling of EXT4 can\ncause some additional wear and tear on your device.\n\n    \n    \n    sudo cryptsetup luksOpen /dev/sdc DeviceName\n\nAfter you open and decrypt the device, it will be available at\n/dev/mapper/DeviceName, and you can use this path to create a file system on\nthe device:\n\n    \n    \n    sudo mkfs.btrfs /dev/mapper/DeviceName -L WhateverLabelYouWant -f\n\nNow you can mount your encrypted device and put the ZeroNet on it (it will\nmount your device on /mnt/zeronet_container):\n\n    \n    \n    sudo mkdir /mnt/zeronet_container sudo mount /dev/mapper/DeviceName /mnt/zeronet_container\n\n## 3\\. Setting-Up ZeroNet Bundle\n\nNext, you want to download the ZeroNet Bundle, which includes all the\nexecutables inside it and doesn\u2019t need any additional packages to work. For\nthat, I\u2019ve downloaded the ZeroNetX Bundle, which is an actively maintained\nfork of ZeroNet:\n\n    \n    \n    cd /mnt/zeronet_container wget https://github.com/ZeroNetX/ZeroNet/releases/latest/download/ZeroNet-linux.zip unzip ZeroNet-linux.zip cd ZeroNet-linux\n\nThen, create a zeronet.conf file in the Zeronet-linux directory to enable TOR\nsupport:\n\n    \n    \n    force_encryption = True tor_proxy = 127.0.0.1:9150 tor_controller = 127.0.0.1:9151 tor = always\n\nNote: The ports 9150 and 9151 are default ports for the TOR Browser, which we\nwill include in our container. This way, when you open your Tor Browser to\naccess the ZeroNet, the ZeroNet will use the browser\u2019s controller port to\ncommunicate with Tor, minimizing the need for setting up Tor and granting\naccess to ZeroNet to use its controller port.\n\n## 4\\. Setting-Up a Portable TOR Browser\n\nMaking a portable Tor Browser is fairly easy. You only need to download the\nTor Browser onto your USB stick and extract it there. Every time you want to\nuse it, run it from there.\n\nTo download the Tor Browser for Linux, you should go to\nhttps://www.torproject.org/download/ and after downloading it, extract it into\nyour USB stick.\n\n## 5\\. Now your Portable ZeroNet is Ready to Use\n\nAfter you set everything up, you can just plug your USB stick into your\nmachine, open it up, and run the Tor Browser and ZeroNet from there.\n\nAdditionally, you can run your ZeroNet with FireJail to isolate it from the\nrest of your system and provide some sandboxing for it.\n\nAnother method, if you want to use your ZeroNet on untrusted machines\nportably, is through using Tails OS. You can download and boot the Tails OS on\nyour USB stick and enable Persisted Encrypted Storage on it. Then, put your\nZeroNet Bundle on the Persisted storage inside Tails and boot the device on\nany machine to use your ZeroNet without leaving any trace on the machine or\nhaving to trust the machine (to some extent).\n\nMy blog and all of its content are available under the CC by SA 4.0 License on\nmy GitHub. If you notice any problems or have any improvements for the blog or\nits content, you\u2019re always welcome to open a pull request.\n\n  1. ZeroNet is a peer-to-peer web-like network, which I have covered in detail in my blog. \u21a9\n\n  2. LUKS (Linux Unified Key Setup) is a disk encryption specification that provides an easy-to-use, platform-independent method for securing data on storage devices. It allows users to encrypt entire partitions or storage devices, ensuring that data remains protected even if the device is lost or stolen \u21a9\n\n### Related posts\n\n  * Hacking a CTF: Do not use ECB mode for encryption 03 Jan 2024\n  * A Guide to Security, Privacy, and Anonymity on ZeroNet 08 Aug 2023\n  * A Very Technical Look at ZeroNet 17 Jul 2023\n\nAll the content is available under CC BY-SA 4.0\n\n", "frontpage": false}
