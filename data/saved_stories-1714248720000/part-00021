{"aid": "40179926", "title": "Keeping track of directories using pushd and pop", "url": "https://www.lewis8s.codes/bash/linux/shell/2024/04/19/Keeping-track-of-directories-using-pushd-and-pop", "domain": "lewis8s.codes", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-27 13:47:59", "comments": 0, "source_title": "Keeping track of directories using pushd and pop", "source_text": "Keeping track of directories using pushd and pop\n\n# Keeping track of directories using pushd and pop\n\nApril 19, 2024\n\nIt can sometimes be hard navigate a number of directories across your\nfilesystem, say you\u2019re working on a personal project at the same time as a\n$WORK project. Usually, you\u2019d use something like tmux or screen to have a\nseparate workspace for each. This can work in graphical environments, but if\nyou\u2019re only at a tty then you\u2019re stuck with the screen space you have. By\nusing our friend, the stack, we can quickly navigate a number of directories\nfrom within the shell. Learning this should take only a few minutes, but the\ntime saved (and boredom of typing cd) will save you hours over a year.\n\n## Pushd\n\nLet\u2019s say we have the following folders\n\n    \n    \n    ~/code/work/lib/ ~/code/work/app/ ~/code/personal/\n\nBy default your current working directory is at the top of the stack. The\ncurrent state of the stack, for each shell, can be found by running dirs. If\nyou\u2019re a visual person like me, you can add the -v flag to get a top-down view\nof the stack. Helpfully, this also includes the index of each directory.\n\n    \n    \n    $ dirs -v 0 ~/code/personal 1 ~/code/work/app 2 ~/code/work/lib 3 ~/code\n\nWhilst working on all these projects we need to edit our nvim config file at:\n~/.config/nvim/init.lua. We now can pushd to the directory.\n\n    \n    \n    $ pushd ~/.config/nvim ~/.config/nvim ~/code/personal ~/code/work/app ~/code/work/lib ~/code\n\nAs you can see, pushd adds the directory onto the stack, cds to that directory\nand then prints out the current state of the stack. The current directory is\nthe left-most directory when using the commands and the top-most when using\ndirs.\n\n## Popd\n\nAfter we\u2019ve made the greatest ever change to our nvim lua file, it\u2019s time to\nfinish off our personal Haskell project.\n\n    \n    \n    $ popd ~/code/personal ~/code/work/app ~/code/work/lib ~/code\n\npopd behaves in the same way as pushd, but instead of adding a directory to\nthe stack we now pop it from the stack. The process is as follows: pop the\ntop-most directory from the stack, cd to the pop\u2019d directory and finally print\nthe state of the stack.\n\nWe can double check the state of the stack using dirs:\n\n    \n    \n    $ dirs -v 0 ~/code/personal 1 ~/code/work/app 2 ~/code/work/lib 3 ~/code\n\nNavigating back to $WORK is another popd command. Eventually you\u2019ll reach the\nend of the stack, but you can build it up again by simply using pushd.\n\n## Replacement for cd:\n\nAn interesting feature of pushd is that it in rotates the top two directories\nin the stack when you supply it with no arguments, this is similar to how cd -\nbehaves. There are additional toggles I suggest you research such as -N. You\ncan find out more about each command, just by supplying --help to pushd.\n\nBack to top\n\n", "frontpage": false}
