{"aid": "40162699", "title": "Virtual Machine Administration Using QEMU Monitor", "url": "https://documentation.suse.com/sles/12-SP5/html/SLES-all/cha-qemu-monitor.html", "domain": "suse.com", "votes": 4, "user": "whereistimbo", "posted_at": "2024-04-25 20:38:53", "comments": 0, "source_title": "Virtual Machine Administration Using QEMU Monitor", "source_text": "SLES 12 SP5 | Virtualization Guide | Virtual Machine Administration Using QEMU Monitor\n\nJump to contentJump to page navigation: previous page [access key p]/next page\n[access key n]\n\ndocumentation.suse.com / SUSE Linux Enterprise Server Documentation /\nVirtualization Guide / Managing Virtual Machines with QEMU / Virtual Machine\nAdministration Using QEMU Monitor\n\nApplies to SUSE Linux Enterprise Server 12 SP5\n\n# 30 Virtual Machine Administration Using QEMU Monitor #\n\nWhen a virtual machine is invoked by the qemu-system-ARCH command, for example\nqemu-system-x86_64, a monitor console is provided for performing interaction\nwith the user. Using the commands available in the monitor console, it is\npossible to inspect the running operating system, change removable media, take\nscreenshots or audio grabs and control other aspects of the virtual machine.\n\nNote\n\nThe following sections list selected useful QEMU monitor commands and their\npurpose. To get the full list, enter help in the QEMU monitor command line.\n\n## 30.1 Accessing Monitor Console #\n\nTip: No Monitor Console for libvirt\n\nYou can access the monitor console only if you started the virtual machine\ndirectly with the qemu-system-ARCH command and are viewing its graphical\noutput in a native QEMU window.\n\nIf you started the virtual machine with libvirt (for example using virt-\nmanager) and are viewing its output via VNC or Spice sessions, you cannot\naccess the monitor console directly. You can, however, send the monitor\ncommand to the virtual machine via virsh:\n\n    \n    \n    root # virsh qemu-monitor-command COMMAND\n\nThe way you access the monitor console depends on which display device you use\nto view the output of a virtual machine. Find more details about displays in\nSection 29.3.2.2, \u201cDisplay Options\u201d. For example, to view the monitor while\nthe -display gtk option is in use, press Ctrl\u2013Alt\u20132. Similarly, when the\n-nographic option is in use, you can switch to the monitor console by pressing\nCtrl\u2013ac.\n\nTo get help while using the console, use help or ?. To get help for a specific\ncommand, use help COMMAND.\n\n## 30.2 Getting Information about the Guest System #\n\nTo get information about the guest system, use info. If used without any\noption, the list of possible options is printed. Options determine which part\nof the system will be analyzed:\n\ninfo version\n\n    \n\nShows the version of QEMU.\n\ninfo commands\n\n    \n\nLists available QMP commands.\n\ninfo network\n\n    \n\nShows the network state.\n\ninfo chardev\n\n    \n\nShows the character devices.\n\ninfo block\n\n    \n\nInformation about block devices, such as hard disks, floppy drives, or CD-\nROMs.\n\ninfo blockstats\n\n    \n\nRead and write statistics on block devices.\n\ninfo registers\n\n    \n\nShows the CPU registers.\n\ninfo cpus\n\n    \n\nShows information about available CPUs.\n\ninfo history\n\n    \n\nShows the command line history.\n\ninfo irq\n\n    \n\nShows the interrupt statistics.\n\ninfo pic\n\n    \n\nShows the i8259 (PIC) state.\n\ninfo pci\n\n    \n\nShows the PCI information.\n\ninfo tlb\n\n    \n\nShows virtual to physical memory mappings.\n\ninfo mem\n\n    \n\nShows the active virtual memory mappings.\n\ninfo jit\n\n    \n\nShows dynamic compiler information.\n\ninfo kvm\n\n    \n\nShows the KVM information.\n\ninfo numa\n\n    \n\nShows the NUMA information.\n\ninfo usb\n\n    \n\nShows the guest USB devices.\n\ninfo usbhost\n\n    \n\nShows the host USB devices.\n\ninfo profile\n\n    \n\nShows the profiling information.\n\ninfo capture\n\n    \n\nShows the capture (audio grab) information.\n\ninfo snapshots\n\n    \n\nShows the currently saved virtual machine snapshots.\n\ninfo status\n\n    \n\nShows the current virtual machine status.\n\ninfo pcmcia\n\n    \n\nShows the guest PCMCIA status.\n\ninfo mice\n\n    \n\nShows which guest mice are receiving events.\n\ninfo vnc\n\n    \n\nShows the VNC server status.\n\ninfo name\n\n    \n\nShows the current virtual machine name.\n\ninfo uuid\n\n    \n\nShows the current virtual machine UUID.\n\ninfo usernet\n\n    \n\nShows the user network stack connection states.\n\ninfo migrate\n\n    \n\nShows the migration status.\n\ninfo balloon\n\n    \n\nShows the balloon device information.\n\ninfo qtree\n\n    \n\nShows the device tree.\n\ninfo qdm\n\n    \n\nShows the qdev device model list.\n\ninfo roms\n\n    \n\nShows the ROMs.\n\ninfo migrate_cache_size\n\n    \n\nShows the current migration xbzrle (\u201cXor Based Zero Run Length Encoding\u201d)\ncache size.\n\ninfo migrate_capabilities\n\n    \n\nShows the status of the various migration capabilities, such as xbzrle\ncompression.\n\ninfo mtree\n\n    \n\nShows the VM Guest memory hierarchy.\n\ninfo trace-events\n\n    \n\nShows available trace-events and their status.\n\n## 30.3 Changing VNC Password #\n\nTo change the VNC password, use the change vnc password command and enter the\nnew password:\n\n    \n    \n    (qemu) change vnc password Password: ******** (qemu)\n\n## 30.4 Managing Devices #\n\nTo add a new disk while the guest is running (hotplug), use the drive_add and\ndevice_add commands. First define a new drive to be added as a device to bus\n0:\n\n    \n    \n    (qemu) drive_add 0 if=none,file=/tmp/test.img,format=raw,if=disk1 OK\n\nYou can confirm your new device by querying the block subsystem:\n\n    \n    \n    (qemu) info block [...] disk1: removable=1 locked=0 tray-open=0 file=/tmp/test.img ro=0 drv=raw \\ encrypted=0 bps=0 bps_rd=0 bps_wr=0 iops=0 iops_rd=0 iops_wr=0\n\nAfter the new drive is defined, it needs to be connected to a device so that\nthe guest can see it. The typical device would be a virtio-blk-pci or scsi-\ndisk. To get the full list of available driver values, run:\n\n    \n    \n    (qemu) device_add ? name \"VGA\", bus PCI name \"usb-storage\", bus usb-bus [...] name \"virtio-blk-pci\", bus virtio-bus\n\nNow add the device\n\n    \n    \n    (qemu) device_add virtio-blk-pci,drive=disk1,id=myvirtio1\n\nand confirm with\n\n    \n    \n    (qemu) info pci [...] Bus 0, device 4, function 0: SCSI controller: PCI device 1af4:1001 IRQ 0. BAR0: I/O at 0xffffffffffffffff [0x003e]. BAR1: 32 bit memory at 0xffffffffffffffff [0x00000ffe]. id \"myvirtio1\"\n\nTip\n\nDevices added with the device_add command can be removed from the guest with\ndevice_del. Enter help device_del on the QEMU monitor command line for more\ninformation.\n\nTo release the device or file connected to the removable media device, use the\neject DEVICE command. Use the optional -f to force ejection.\n\nTo change removable media (like CD-ROMs), use the change DEVICE command. The\nname of the removable media can be determined using the info block command:\n\n    \n    \n    (qemu) info block ide1-cd0: type=cdrom removable=1 locked=0 file=/dev/sr0 ro=1 drv=host_device (qemu) change ide1-cd0 /path/to/image\n\n## 30.5 Controlling Keyboard and Mouse #\n\nIt is possible to use the monitor console to emulate keyboard and mouse input\nif necessary. For example, if your graphical user interface intercepts some\nkey combinations at low level (such as Ctrl\u2013Alt\u2013F1 in X Window), you can still\nenter them using the sendkey KEYS:\n\n    \n    \n    sendkey ctrl-alt-f1\n\nTo list the key names used in the KEYS option, enter sendkey and press \u2192|.\n\nTo control the mouse, the following commands can be used:\n\nmouse_moveDXdy [DZ]\n\n    \n\nMove the active mouse pointer to the specified coordinates dx, dy with the\noptional scroll axis dz.\n\nmouse_buttonVAL\n\n    \n\nChange the state of the mouse buttons (1=left, 2=middle, 4=right).\n\nmouse_setINDEX\n\n    \n\nSet which mouse device receives events. Device index numbers can be obtained\nwith the info mice command.\n\n## 30.6 Changing Available Memory #\n\nIf the virtual machine was started with the -balloon virtio option (the\nparavirtualized balloon device is therefore enabled), you can change the\navailable memory dynamically. For more information about enabling the balloon\ndevice, see Section 28.1, \u201cBasic Installation with qemu-system-ARCH\u201d.\n\nTo get information about the balloon device in the monitor console and to\ndetermine whether the device is enabled, use the info balloon command:\n\n    \n    \n    (qemu) info balloon\n\nIf the balloon device is enabled, use the balloon MEMORY_IN_MB command to set\nthe requested amount of memory:\n\n    \n    \n    (qemu) balloon 400\n\n## 30.7 Dumping Virtual Machine Memory #\n\nTo save the content of the virtual machine memory to a disk or console output,\nuse the following commands:\n\nmemsaveADDRSIZEFILENAME\n\n    \n\nSaves virtual memory dump starting at ADDR of size SIZE to file FILENAME\n\npmemsaveADDRSIZEFILENAME\n\n    \n\nSaves physical memory dump starting at ADDR of size SIZE to file FILENAME-\n\nx /FMTADDR\n\n    \n\nMakes a virtual memory dump starting at address ADDR and formatted according\nto the FMT string. The FMT string consists of three parameters\nCOUNTFORMATSIZE:\n\nThe COUNT parameter is the number of items to be dumped.\n\nThe FORMAT can be x (hex), d (signed decimal), u (unsigned decimal), o\n(octal), c (char) or i (assembly instruction).\n\nThe SIZE parameter can be b (8 bits), h (16 bits), w (32 bits) or g (64 bits).\nOn x86, h or w can be specified with the i format to respectively select 16 or\n32-bit code instruction size.\n\nxp /FMTADDR\n\n    \n\nMakes a physical memory dump starting at address ADDR and formatted according\nto the FMT string. The FMT string consists of three parameters\nCOUNTFORMATSIZE:\n\nThe COUNT parameter is the number of the items to be dumped.\n\nThe FORMAT can be x (hex), d (signed decimal), u (unsigned decimal), o\n(octal), c (char) or i (asm instruction).\n\nThe SIZE parameter can be b (8 bits), h (16 bits), w (32 bits) or g (64 bits).\nOn x86, h or w can be specified with thei format to respectively select 16 or\n32-bit code instruction size.\n\n## 30.8 Managing Virtual Machine Snapshots #\n\nManaging snapshots in QEMU monitor is not officially supported by SUSE yet.\nThe information found in this section may be helpful in specific cases.\n\nVirtual Machine snapshots are snapshots of the complete virtual machine\nincluding the state of CPU, RAM, and the content of all writable disks. To use\nvirtual machine snapshots, you must have at least one non-removable and\nwritable block device using the qcow2 disk image format.\n\nSnapshots are helpful when you need to save your virtual machine in a\nparticular state. For example, after you have configured network services on a\nvirtualized server and want to quickly start the virtual machine in the same\nstate that was saved last. You can also create a snapshot after the virtual\nmachine has been powered off to create a backup state before you try something\nexperimental and possibly make VM Guest unstable. This section introduces the\nformer case, while the latter is described in Section 28.2.3, \u201cManaging\nSnapshots of Virtual Machines with qemu-img\u201d.\n\nThe following commands are available for managing snapshots in QEMU monitor:\n\nsavevmNAME\n\n    \n\nCreates a new virtual machine snapshot under the tag NAME or replaces an\nexisting snapshot.\n\nloadvmNAME\n\n    \n\nLoads a virtual machine snapshot tagged NAME.\n\ndelvm\n\n    \n\nDeletes a virtual machine snapshot.\n\ninfo snapshots\n\n    \n\nPrints information about available snapshots.\n\n    \n    \n    (qemu) info snapshots Snapshot list: ID1 TAG2 VM SIZE3 DATE4 VM CLOCK5 1 booting 4.4M 2013-11-22 10:51:10 00:00:20.476 2 booted 184M 2013-11-22 10:53:03 00:02:05.394 3 logged_in 273M 2013-11-22 11:00:25 00:04:34.843 4 ff_and_term_running 372M 2013-11-22 11:12:27 00:08:44.965\n\n1| Unique identification number of the snapshot. Usually auto-incremented.  \n---|---  \n2| Unique description string of the snapshot. It is meant as a human readable\nversion of the ID.  \n3| The disk space occupied by the snapshot. Note that the more memory is\nconsumed by running applications, the bigger the snapshot is.  \n4| Time and date the snapshot was created.  \n5| The current state of the virtual machine's clock.  \n  \n## 30.9 Suspending and Resuming Virtual Machine Execution #\n\nThe following commands are available for suspending and resuming virtual\nmachines:\n\nstop\n\n    \n\nSuspends the execution of the virtual machine.\n\ncont\n\n    \n\nResumes the execution of the virtual machine.\n\nsystem_reset\n\n    \n\nResets the virtual machine. The effect is similar to the reset button on a\nphysical machine. This may leave the file system in an unclean state.\n\nsystem_powerdown\n\n    \n\nSends an ACPI shutdown request to the machine. The effect is similar to the\npower button on a physical machine.\n\nq or quit\n\n    \n\nTerminates QEMU immediately.\n\n## 30.10 Live Migration #\n\nThe live migration process allows to transmit any virtual machine from one\nhost system to another host system without any interruption in availability.\nIt is possible to change hosts permanently or only during maintenance.\n\nThe requirements for live migration:\n\n  * All requirements from Section 10.7.1, \u201cMigration Requirements\u201d are applicable.\n\n  * Live migration is only possible between VM Host Servers with the same CPU features.\n\n  * AHCI interface, VirtFS feature, and the -mem-path command line option are not compatible with migration.\n\n  * The guest on the source and destination hosts must be started in the same way.\n\n  * -snapshot qemu command line option should not be used for migration (and this qemu command line option is not supported).\n\nImportant: Support Status\n\nThe postcopy mode is not yet supported in SUSE Linux Enterprise Server. It is\nreleased as a technology preview only. For more information about postcopy,\nsee http://wiki.qemu.org/Features/PostCopyLiveMigration.\n\nMore recommendations can be found at the following Web site: http://www.linux-\nkvm.org/page/Migration\n\nThe live migration process has the following steps:\n\n  1. The virtual machine instance is running on the source host.\n\n  2. The virtual machine is started on the destination host in the frozen listening mode. The parameters used are the same as on the source host plus the -incoming tcp:IP:PORT parameter, where IP specifies the IP address and PORT specifies the port for listening to the incoming migration. If 0 is set as IP address, the virtual machine listens on all interfaces.\n\n  3. On the source host, switch to the monitor console and use the migrate -d tcp: DESTINATION_IP:PORT command to initiate the migration.\n\n  4. To determine the state of the migration, use the info migrate command in the monitor console on the source host.\n\n  5. To cancel the migration, use the migrate_cancel command in the monitor console on the source host.\n\n  6. To set the maximum tolerable downtime for migration in seconds, use the migrate_set_downtime NUMBER_OF_SECONDS command.\n\n  7. To set the maximum speed for migration in bytes per second, use the migrate_set_speed BYTES_PER_SECOND command.\n\n## 30.11 QMP - QEMU Machine Protocol #\n\nQMP is a JSON-based protocol that allows applications\u2014such as libvirt\u2014to\ncommunicate with a running QEMU instance. There are several ways you can\naccess the QEMU monitor using QMP commands.\n\n### 30.11.1 Access QMP via Standard Input/Output #\n\nThe most flexible way to use QMP is by specifying the -mon option. The\nfollowing example creates a QMP instance using standard input/output. Note\nthat in the following examples, -> marks lines with commands sent from client\nto the running QEMU instance, while <\\- marks lines with the output returned\nfrom QEMU.\n\n    \n    \n    # qemu-system-x86_64 [...] \\ -chardev stdio,id=mon0 \\ -mon chardev=mon0,mode=control,pretty=on <- { \"QMP\": { \"version\": { \"qemu\": { \"micro\": 0, \"minor\": 0, \"major\": 2 }, \"package\": \"\" }, \"capabilities\": [ ] } }\n\nWhen a new QMP connection is established, QMP sends its greeting message and\nenters capabilities negotiation mode. In this mode, only the qmp_capabilities\ncommand works. To exit capabilities negotiation mode and enter command mode,\nthe qmp_capabilities command must be issued first:\n\n    \n    \n    -> { \"execute\": \"qmp_capabilities\" } <- { \"return\": { } }\n\nNote that \"return\": {} is a QMP's success response.\n\nQMP's commands can have arguments. For example to eject a CD-ROM drive, enter\nthe following:\n\n    \n    \n    ->{ \"execute\": \"eject\", \"arguments\": { \"device\": \"ide1-cd0\" } } <- { \"timestamp\": { \"seconds\": 1410353381, \"microseconds\": 763480 }, \"event\": \"DEVICE_TRAY_MOVED\", \"data\": { \"device\": \"ide1-cd0\", \"tray-open\": true } } { \"return\": { } }\n\n### 30.11.2 Access QMP via Telnet #\n\nInstead of the standard input/output, you can connect the QMP interface to a\nnetwork socket and communicate with it via a specified port:\n\n    \n    \n    # qemu-system-x86_64 [...] \\ -chardev socket,id=mon0,host=localhost,port=4444,server,nowait \\ -mon chardev=mon0,mode=control,pretty=on\n\nAnd then run telnet to connect to port 4444:\n\n    \n    \n    # telnet localhost 4444 Trying ::1... Connected to localhost. Escape character is '^]'. <- { \"QMP\": { \"version\": { \"qemu\": { \"micro\": 0, \"minor\": 0, \"major\": 2 }, \"package\": \"\" }, \"capabilities\": [ ] } }\n\nYou can create several monitor interfaces at the same time. The following\nexample creates one HMP instance\u2014human monitor which understands 'normal' QEMU\nmonitor's commands\u2014on the standard input/output, and one QMP instance on\nlocalhost port 4444:\n\n    \n    \n    # qemu-system-x86_64 [...] \\ -chardev stdio,id=mon0 -mon chardev=mon0,mode=readline \\ -chardev socket,id=mon1,host=localhost,port=4444,server,nowait \\ -mon chardev=mon1,mode=control,pretty=on\n\n### 30.11.3 Access QMP via Unix Socket #\n\nInvoke QEMU using the -qmp option, and create a unix socket:\n\n    \n    \n    # qemu-system-x86_64 [...] \\ -qmp unix:/tmp/qmp-sock,server --monitor stdio QEMU waiting for connection on: unix:./qmp-sock,server\n\nTo communicate with the QEMU instance via the /tmp/qmp-sock socket, use nc\n(see man 1 nc for more information) from another terminal on the same host:\n\n    \n    \n    # nc -U /tmp/qmp-sock <- {\"QMP\": {\"version\": {\"qemu\": {\"micro\": 0, \"minor\": 0, \"major\": 2} [...]\n\n### 30.11.4 Access QMP via libvirt's virsh Command #\n\nIf you run your virtual machines under libvirt (see Part II, \u201cManaging Virtual\nMachines with libvirt\u201d), you can communicate with its running guests by\nrunning the virsh qemu-monitor-command:\n\n    \n    \n    # virsh qemu-monitor-command vm_guest1 \\ --pretty '{\"execute\":\"query-kvm\"}' <- { \"return\": { \"enabled\": true, \"present\": true }, \"id\": \"libvirt-8\" }\n\nIn the above example, we ran the simple command query-kvm which checks if the\nhost is capable of running KVM and if KVM is enabled.\n\nTip: Generating Human-Readable Output\n\nTo use the standard human-readable output format of QEMU instead of the JSON\nformat, use the --hmp option:\n\n    \n    \n    # virsh qemu-monitor-command vm_guest1 --hmp \"query-kvm\"\n\nOn this page\n\n  * 30.1 Accessing Monitor Console\n  * 30.2 Getting Information about the Guest System\n  * 30.3 Changing VNC Password\n  * 30.4 Managing Devices\n  * 30.5 Controlling Keyboard and Mouse\n  * 30.6 Changing Available Memory\n  * 30.7 Dumping Virtual Machine Memory\n  * 30.8 Managing Virtual Machine Snapshots\n  * 30.9 Suspending and Resuming Virtual Machine Execution\n  * 30.10 Live Migration\n  * 30.11 QMP - QEMU Machine Protocol\n\nShare this page\n\n\u00a9 SUSE 2024\n\n## How We Use Cookies\n\nWe use cookies to give you a better experience, improve performance and\nanalyze traffic. Please visit our privacy policy for more information.\n\n## Privacy Preference Center\n\nWhen you visit any website, it may store or retrieve information on your\nbrowser, mostly in the form of cookies. This information might be about you,\nyour preferences or your device and is mostly used to make the site work as\nyou expect it to. The information does not usually directly identify you, but\nit can give you a more personalized web experience. Because we respect your\nright to privacy, you can choose not to allow some types of cookies. Click on\nthe different category headings to find out more and change our default\nsettings. However, blocking some types of cookies may impact your experience\nof the site and the services we are able to offer. More information\n\n### Manage Consent Preferences\n\n#### Targeting Cookies\n\nThese cookies may be set through our site by our advertising partners. They\nmay be used by those companies to build a profile of your interests and show\nyou relevant adverts on other sites. They do not store directly personal\ninformation, but are based on uniquely identifying your browser and internet\ndevice. If you do not allow these cookies, you will experience less targeted\nadvertising.\n\n#### Performance Cookies\n\nThese cookies allow us to count visits and traffic sources so we can measure\nand improve the performance of our site. They help us to know which pages are\nthe most and least popular and see how visitors move around the site. All\ninformation these cookies collect is aggregated and therefore anonymous. If\nyou do not allow these cookies we will not know when you have visited our\nsite, and will not be able to monitor its performance.\n\n#### Functional Cookies\n\nThese cookies enable the website to provide enhanced functionality and\npersonalisation. They may be set by us or by third party providers whose\nservices we have added to our pages. If you do not allow these cookies then\nsome or all of these services may not function properly.\n\n#### Strictly Necessary Cookies\n\nAlways Active\n\nThese cookies are necessary for the website to function and cannot be switched\noff in our systems. They are usually only set in response to actions made by\nyou which amount to a request for services, such as setting your privacy\npreferences, logging in or filling in forms. You can set your browser to block\nor alert you about these cookies, but some parts of the site will not then\nwork. These cookies do not store any personally identifiable information.\n\n#### Flagged\n\nRecategorised cookies as of 17 June 2020\n\n### Cookie List\n\nlabel\n\nConsent Leg.Interest\n\nlabel\n\nlabel\n\nlabel\n\n## Privacy Preference Center\n\nWhen you visit any website, it may store or retrieve information on your\nbrowser, mostly in the form of cookies. This information might be about you,\nyour preferences or your device and is mostly used to make the site work as\nyou expect it to. The information does not usually directly identify you, but\nit can give you a more personalized web experience. Because we respect your\nright to privacy, you can choose not to allow some types of cookies. Click on\nthe different category headings to find out more and change our default\nsettings. However, blocking some types of cookies may impact your experience\nof the site and the services we are able to offer. More information\n\n### Manage Consent Preferences\n\n#### Targeting Cookies\n\nThese cookies may be set through our site by our advertising partners. They\nmay be used by those companies to build a profile of your interests and show\nyou relevant adverts on other sites. They do not store directly personal\ninformation, but are based on uniquely identifying your browser and internet\ndevice. If you do not allow these cookies, you will experience less targeted\nadvertising.\n\n#### Performance Cookies\n\nThese cookies allow us to count visits and traffic sources so we can measure\nand improve the performance of our site. They help us to know which pages are\nthe most and least popular and see how visitors move around the site. All\ninformation these cookies collect is aggregated and therefore anonymous. If\nyou do not allow these cookies we will not know when you have visited our\nsite, and will not be able to monitor its performance.\n\n#### Functional Cookies\n\nThese cookies enable the website to provide enhanced functionality and\npersonalisation. They may be set by us or by third party providers whose\nservices we have added to our pages. If you do not allow these cookies then\nsome or all of these services may not function properly.\n\n#### Strictly Necessary Cookies\n\nAlways Active\n\nThese cookies are necessary for the website to function and cannot be switched\noff in our systems. They are usually only set in response to actions made by\nyou which amount to a request for services, such as setting your privacy\npreferences, logging in or filling in forms. You can set your browser to block\nor alert you about these cookies, but some parts of the site will not then\nwork. These cookies do not store any personally identifiable information.\n\n#### Flagged\n\nRecategorised cookies as of 17 June 2020\n\n### Back\n\nlabel\n\nConsent Leg.Interest\n\nlabel\n\nlabel\n\nlabel\n\n", "frontpage": true}
