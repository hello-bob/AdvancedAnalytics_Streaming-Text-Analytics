{"aid": "40292905", "title": "Show HN: Wk \u2013 a which-key like popup menu for your key chords (X11/Wayland)", "url": "https://github.com/3L0C/wk", "domain": "github.com/3l0c", "votes": 1, "user": "3L0C", "posted_at": "2024-05-08 00:00:05", "comments": 0, "source_title": "GitHub - 3L0C/wk: wk - Which-Key via X11 and Wayland, inspired by dmenu and bemenu respectively.", "source_text": "GitHub - 3L0C/wk: wk - Which-Key via X11 and Wayland, inspired by dmenu and\nbemenu respectively.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\n3L0C / wk Public\n\n  * Notifications\n  * Fork 0\n  * Star 1\n\nwk - Which-Key via X11 and Wayland, inspired by dmenu and bemenu respectively.\n\n### License\n\nGPL-3.0 license\n\n1 star 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# 3L0C/wk\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\n3L0CUpdate README to reflect new help menuMay 4, 2024b119d95 \u00b7 May 4, 2024May\n4, 2024\n\n## History\n\n226 Commits  \n  \n### config\n\n|\n\n### config\n\n| Add +ignore-sort flag| May 4, 2024  \n  \n### examples\n\n|\n\n### examples\n\n| Add sorted with +ignore-sort example| May 4, 2024  \n  \n### man\n\n|\n\n### man\n\n| Update docs to include new flag & other changes| May 4, 2024  \n  \n### src\n\n|\n\n### src\n\n| Update docs to include new flag & other changes| May 4, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Add LICENSE and remove README.org| Apr 18, 2024  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Change Makefile to only include necessary dirs| Apr 13, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README to reflect new help menu| May 4, 2024  \n  \n### clean_man_files.sh\n\n|\n\n### clean_man_files.sh\n\n| Fix some man formatting| May 3, 2024  \n  \n### wk-which-key.png\n\n|\n\n### wk-which-key.png\n\n| Add color to hint text| Apr 24, 2024  \n  \n### wk.png\n\n|\n\n### wk.png\n\n| Begin work on README| Apr 18, 2024  \n  \n## Repository files navigation\n\n# wk\n\nwk - Which-Key via X11 and Wayland. Displays available key chords in a popup\nwindow. Inspired by emacs-which-key, dmenu, and bemenu.\n\n# Introduction\n\nwk offers users a portable, scriptable, and highly customizable interface for\ntheir key chord mappings through a number of sources. Key chords can be built\ninto the binary via the key_chords.def.h header, read from a wks file, or read\nfrom stdin with the same wks syntax.\n\n# Building\n\n    \n    \n    # Make wk for X11 and Wayland make # Make wk for X11 make x11 # Make wk for wayland make wayland # Install make clean && make && sudo make install\n\n# Dependencies\n\n  * C compiler\n\nAll runtime dependencies below are searched with pkg-config.\n\nBackend| Dependencies  \n---|---  \nCommon| cairo, pango, pangocairo  \nX11| x11, xinerama  \nWayland| wayland-client, wayland-protocols xkbcommon  \n  \n## About Wayland support\n\nWayland is only supported by compositors that implement the wlr-layer-shell\nprotocol. Typically wlroots-based compositors. For those not on a wlroots-\nbased compositor, Xwayland does work based on my testing, but the popup menu\nseems to only display on one screen.\n\n# Usage\n\n    \n    \n    # Display built-in key chords. wk # Display menu at the top of the screen. wk --top # Display key chords in a `wks` file. wk --key-chords my_key_chords.wks # Try to pre-press keys 'C-c', and 'x'. Both options work the same. wk --press 'C-cx' wk --press 'C-c x' # Transpile the key chords in a `wks` file and print a properly # formated `key_chords.def.h` header to stdout. wk --transpile my_key_chords.wks # Read script from stdin printf '%s\\n' 'a \"Chord\" %{{echo \"Hello, world!\"}}' | wk --script # Everything else wk --help usage: wk [options] options: -h, --help Display help message and exit. -v, --version Display version number and exit. -d, --debug Print debug information. -D, --delay INT Delay the popup menu by INT milliseconds from startup/last keypress (default 1000 ms). -t, --top Position menu at top of screen. -b, --bottom Position menu at bottom of screen. -s, --script Read script from stdin to use as key chords. -S, --sort Sort key chords read from --key-chords, --script, or --transpile. -m, --max-columns INT Set the maximum menu columns to INT (defualt 5). -p, --press KEY(s) Press KEY(s) before dispalying menu. -T, --transpile FILE Transpile FILE to valid 'key_chords.h' syntax and print to stdout. -k, --key-chords FILE Use FILE for key chords rather than those precompiled. -w, --menu-width INT Set menu width to INT. Set to '-1' for a width equal to 1/2 of the screen width (default -1) -g, --menu-gap INT Set menu gap between top/bottom of screen to INT. Set to '-1' for a gap equal to 1/10th of the screen height (default -1). --border-width INT Set border width to INT (default 4). --border-radius NUM Set border radius to NUM degrees. 0 means no curve (default 0). --wpadding INT Set left and right padding around hint text to INT (default 6). --hpadding INT Set top and bottom padding around hint text to INT (default 2). --fg COLOR Set all menu foreground text to COLOR where color is some hex string i.e. '#F1CD39' (default unset). --fg-key COLOR Set foreground key to COLOR (default '#DCD7BA'). --fg-delimiter COLOR Set foreground delimiter to COLOR (default '#525259'). --fg-prefix COLOR Set foreground prefix to COLOR (default '#AF9FC9'). --fg-chord COLOR Set foreground chord to COLOR (default '#DCD7BA'). --bg COLOR Set background to COLOR (default '#181616'). --bd COLOR Set border to COLOR (default '#7FB4CA'). --shell STRING Set shell to STRING (default '/bin/sh'). --font STRING Set font to STRING. Should be a valid Pango font description (default 'monospace, 14'). run `man 1 wk` for more info on each option.\n\n# Configuration\n\nwk can be configured at the command line as shown in the above help message,\nor your configuration can be built into the binary by changing the settings in\nconfig.def.h.\n\n# wks Files\n\nWhich-Key source (wks) files are the driving force behind wk. The syntax is\nnovel but provides a flexible means to manage and express key chords.\n\n## Comments\n\nIn wks files, comments can be added using the pound character (#). When a\npound character is encountered, it signifies the start of a comment. The\ncomment extends from the pound character until the end of the line. It's\nimportant to note that the pound character is treated as a literal character\nwithin descriptions and commands and does not indicate the start of a comment\nin those contexts.\n\n## Key Chords\n\n    \n    \n    key_chord -> ( chord | prefix | chord_array ) ;\n\nThe key chord is the main building block of a wks file. This can be either a\nchord, prefix, or a chord array. The chord is the most basic example of a key\nchord and serves as a good entry point for this discussion.\n\n### Chords\n\nA chord is a key chord that results in wk performing some action, like\nexecuting a command, when the trigger key is pressed.\n\n    \n    \n    chord -> trigger_key description keyword* command ;\n\nAll chords must have a trigger key, description, and a command. Zero or more\nkeywords may be given between the description and command. These will be\naddressed later. For now, let's break down the required parts of the chord.\n\n#### Trigger Keys\n\nA trigger key represents the specific keypress or key combination that\ntriggers a corresponding action or command. In a wks file, it is the written\nrepresentation of the physical key(s) pressed by the user on their keyboard.\n\n    \n    \n    trigger_key -> modifier* ( normal_key | special_key ) ;\n\nA trigger key is then zero or more modifiers followed by a normal key or a\nspecial key.\n\n#### Normal Keys\n\nA normal key is any printable, non-whitespace, utf8 character.\n\n    \n    \n    normal_key -> ( '\\\\' [\\\\\\[\\]{}#\":^+()] | [^\\s\\[\\]{}#\":^+()] ) ;\n\nThe characters \\, [, ], {, }, #, \", :, ^, +, (, and ) have special meanings in\nwks files. To use any of these as a normal key, simply precede them with a\nbackslash (\\\\).\n\nAll other non-whitespace, printable utf8 characters prior to a description\nwill be interpreted as a normal key. Those that are whitespace or non-\nprintable fall into the special key category.\n\n#### Special Keys\n\nSpecial keys like tab, escape, spacebar, and F1 can still be used as trigger\nkeys in wks files via their special forms.\n\nSpecial Key| wks form  \n---|---  \nLeft arrow| Left  \nRight arrow| Right  \nUp arrow| Up  \nDown arrow| Down  \nTab| TAB  \nSpace| SPC  \nEnter/Return| RET  \nDelete| DEL  \nEsc| ESC  \nHome| Home  \nPage up| PgUp  \nPage down| PgDown  \nEnd| End  \nBegin| Begin  \nF[1-35]| F[1-35]  \nVolume Down| VolDown  \nMute Vol| VolMute  \nVolume Up| VolUp  \nPlay Audio| Play  \nStop Audio| Stop  \nAudio Previous| Prev  \nAudio Next| Next  \n  \nIn wks files, whitespace is generally not significant around individual parts\nof the syntax, with one notable exception: special keys. When using special\nkeys, it is required to include whitespace between the end of the special key\nand the start of the next item in the wks file.\n\nIf you have any additional special keys that you would like wks files to\nsupport, please open an issue or a pull request.\n\n#### Modifiers\n\nAs mentioned above, zero or more modifiers can be given in a trigger key.\nModifiers can be used in wks files via their special forms.\n\nModifier| wks form  \n---|---  \nControl| C-  \nAlt| M-  \nHyper/Super| H-  \nShift| S-  \n  \nModifiers act as one would expect. To match the keypress Control+c use the\nform C-c in your wks file.\n\nAmong the modifiers, the Shift modifier (S-) has a unique behavior when used\nwith standard utf8 key characters. Due to the way normal keys are interpreted,\nthe S- modifier is not always necessary. To determine whether S- is required,\nit is recommended to test the character in a wks file by typing it with and\nwithout the Shift key pressed.\n\nIf the character is non-whitespace, printable, and the shifted and unshifted\nversions produce different output, then the S- modifier is not needed. For\ninstance, pressing the a key with the Shift key held down produces an\nuppercase A. This test demonstrates that the key's output changes based on the\nShift key state.\n\nIn such cases, using S-a in a wks file would not work as expected because the\nkey will never match when the user presses Shift+a.\n\nI am open to changing it so that S-a and A match the same Shift+a keypress,\nbut I have yet to find a fitting solution. The ones I can think of either\ninvolve depending on some utf8 library, writing the code by hand, or\npermitting this syntax for ASCII but not other character sets. Each has its\nown drawback, and I find the current solution to be intuitive in practice.\n\n#### Descriptions\n\nDescriptions provide a hint about the purpose of the chord or prefix.\n\n    \n    \n    description -> '\"' ( '\\\\\"' | [^\"] | interpolation )* '\"' ;\n\nA description starts with a double quote (\"), followed by zero or more escaped\ndouble quotes, non-double quote characters, or an interpolation and ends with\na double quote. Aside from interpolations, a description looks like your\ntypical string in many programming languages.\n\n#### Commands\n\nCommands are the actions executed upon completing a key chord sequence.\n\n    \n    \n    command -> '%' delimiter ( . | interpolation )* delimiter ;\n\nA command begins with the percent character (%) followed by a delimiter. After\nthe delimiter zero or more characters, or interpolations may be given. A\ncommand is ended with the same delimiter that followed the percent character.\n\nBecause the delimiter is user defined, there should be no misinterpretation of\nanything between the delimiters. This means any command given at the command-\nline should be right at home in between the delimiters.\n\n#### Delimiters\n\nA delimiter acts as a start and stop marker for a command in a wks file.\n\n    \n    \n    delimiter -> ( open_delim | close_delim | .{2} ) ; open_delim -> ( '{{' | '((' | '[[' ) ; close_delim -> ( '}}' | '))' | ']]' ) ;\n\nThe delimiter from one command to the next may be completely different. This\nputs the burden on the user to ensure their delimiter is compatible with the\ncontent of the command. The only restriction is that the delimiter is one\nASCII character repeated exactly twice. Note this excludes any null bytes (\\0)\nas these are used to determine the end of a wks file.\n\nHere are some examples of different delimiters for the same command.\n\n    \n    \n    # The traditional example %{{echo \"hello, world\"}} # Valid alternatives %||echo \"hello, world\"|| %((echo \"hello, world\")) %\\\\echo \"hello, world\"\\\\ %%%echo \"hello, world\"%% %zzecho \"hello, world\"zz\n\nInspired by sed, this should keep wks syntax compatible with shell commands,\nalmost indefinitely. It also makes it possible to nest a wks script within a\nwks command if you want to get really weird.\n\n#### Basic Chord Example\n\nHaving learned a large portion of the syntax so far, we can create our first\nchord using wks syntax.\n\n    \n    \n    a \"Chord\" %{{echo \"Hello, world!\"}}\n\nA lot of explanation to do something simple, but this will set us up for\nsuccess in the long run. Next is the humble prefix.\n\n### Prefixes\n\nA prefix is a special type of key chord that acts as a container for other key\nchords. It represents an incomplete key combination that does not trigger a\ncommand on its own.\n\n    \n    \n    prefix -> trigger_key description keyword* '{' ( key_chord )+ '}' ;\n\nA prefix has many of the same components as a chord. It begins with a trigger\nkey, followed by a description, zero or more keywords and then a block of one\nor more key chords surrounded by an opening and closing brace ({, and }).\n\nNote that a key chord may be a prefix, a chord, or a chord array, meaning many\nprefixes can be nested one inside another.\n\nHere is a simple example of a prefix:\n\n    \n    \n    m \"+Music\" { n \"Next\" %{{mpc next}} p \"Prev\" %{{mpc prev}} }\n\n### Chord Arrays\n\nChords and prefixes are standard fare in the realm of key chords, so what the\nheck is a chord array? Well, mostly syntactic sugar so you do not have to\nrepeat yourself when it comes to chords that are very similar but only differ\nin slightly different ways.\n\n    \n    \n    chord_array -> '[' ( trigger_key | chord_expression )+ ']' description keyword* command ;\n\nTo use a chord array begin with an open bracket ([) followed by one or more\ntrigger keys or chord expressions. The array portion ends with a closing\nbracket (]) followed by the standard chord components, a description, zero or\nmore keywords, and a command.\n\nI think an example will make things clear:\n\n    \n    \n    # Chord array version [arstgmnei] \"Switch workspace %(index+1)\" %{{xdotool set_desktop %(index)}} # Individual chords and no interpolation a \"Switch workspace 1\" %{{xdotool set_desktop 0}} r \"Switch workspace 2\" %{{xdotool set_desktop 1}} s \"Switch workspace 3\" %{{xdotool set_desktop 2}} t \"Switch workspace 4\" %{{xdotool set_desktop 3}} g \"Switch workspace 5\" %{{xdotool set_desktop 4}} m \"Switch workspace 6\" %{{xdotool set_desktop 5}} n \"Switch workspace 7\" %{{xdotool set_desktop 6}} e \"Switch workspace 8\" %{{xdotool set_desktop 7}} i \"Switch workspace 9\" %{{xdotool set_desktop 8}}\n\nAs you can see, chord arrays can cut down on the need to repeat common\ninformation across chords. However, this would not be useful if the resulting\nchords were exactly the same. Thankfully, interpolations make it easy for the\nresulting chords to differ without interfering with the common elements.\n\nInterpolations are covered in full detail later, but the main idea is they\nprovide a means of inserting metadata about a chord into descriptions and\ncommands.\n\n#### Chord Expressions\n\nChord arrays can be very simple with each chord being only slightly different\nfrom one another. However, it may make sense to include chords that mostly fit\ninto the chord array with some more distinct differences. For this situation,\nchord expressions may be the answer.\n\n    \n    \n    chord_expression -> '(' trigger_key description keyword* command? ')' ;\n\nA chord expression is only valid within a chord array, and it is essentially a\nchord wrapped in parentheses with some added flexibility. Normally, a chord\nrequires at least a trigger key, a description, and a command. A chord\nexpression, on the other hand, requires only a key and a description. Any\nother information will be filled in by the surrounding chord array.\n\nHere is an example of a chord expression within a chord array:\n\n    \n    \n    # With chord arrays and chord expressions [ (b \"Brave\") (c \"Mullvad Chrome\" %{{mullvad-exclude chrome ~/startpage.html}}) x ] \"XDG-OPEN\" %{{%(desc,,) ~/startpage.html}} # With chords and no interpolation b \"Brave\" %{{brave ~/startpage.html}} c \"Mullvad Chrome\" %{{mullvad-exclude chrome ~/startpage.html}} x \"XDG-OPEN\" %{{xdg-open ~/startpage.html}}\n\nAdmittedly, chord expressions may not be that useful but they were easy to\nimplement so they are here for those who want to use them.\n\n### Interpolations\n\nI have used interpolations in the last few examples without any explanation.\nLet's fix that.\n\n    \n    \n    interpolation -> '%(' identifier ')' ;\n\nThe basic syntax for an interpolation begins with a %( delimiter followed by\nan identifier and closing parenthesis ()).\n\nNote that interpolations can only be used in descriptions and commands.\n\nThe basic idea of interpolation is to provide users with easy access to\nmetadata about a chord. The following identifiers are recognized in an\ninterpolation along with their corresponding metadata.\n\nIdentifier| Metadata  \n---|---  \nkey| The key portion of the chord.  \nindex| The base 0 index of the chord in the current scope (prefixes begin new\nscopes).  \nindex+1| The base 1 index of the chord in the current scope (prefixes begin\nnew scopes).  \ndesc| The description of the current chord. May not be given within the\ndescription.  \ndesc^| The description of the current chord with the first character\ncapitalized.  \ndesc^^| The description of the current chord with all characters capitalized.  \ndesc,| The description of the current chord with the first character\ndowncased.  \ndesc,,| The description of the current chord with all characters downcased.  \n  \nThere are only a few identifiers that can be interpolated, but even this small\nset makes wk more scriptable.\n\n### Keywords\n\nSo far keywords have been glossed over, but they are very handy.\n\n    \n    \n    keyword -> ( hook | flag ) ;\n\nA keyword is either a hook or a flag. Both have equal precedence, meaning they\ncan be mixed up wherever they are permitted.\n\n#### Hooks\n\nHooks provide means of adding additional commands to a chord or prefix.\n\n    \n    \n    hook -> '^' ( 'before' | 'after' | 'sync-before' | 'sync-after' ) command ;\n\nA hook begins with the caret character (^), followed by the type of hook, and\nfinally the command the hook will run.\n\nThe hook type has to do with the order the command will be run. The before\nhooks run before the chord's command, and the after hooks run after the\nchord's command.\n\nThe sync-* hooks relate to how wk runs the commands. By default, all commands\nare run asynchronously to prevent a command from blocking wk. However, if the\nhook must complete before wk can proceed you can use the sync-* variant to\nenforce this behavior.\n\nNote that a blocking command may prevent wk from ever resuming execution. In\nthe event that this happens, users may need to restart their system entirely\nto regain control of their keyboard.\n\nUsers can certainly chain commands together the same way one would chain\ncommands in a regular shell, but hooks help to reduce repetition. They also\nmake more sense in the context of prefixes.\n\n    \n    \n    # With hooked prefix e \"+Emacs\" ^before %{{xdotool set_desktop 1}} { o \"Open\" %{{emacsclient -c -a \"\"}} r \"Roam\" %{{emacsclient -c -a \"\" ~/20240101080032-startpage.org}} } # Without hooks e \"+Emacs\" { o \"Open\" %{{xdotool set_desktop 1 ; emacsclient -c -a \"\"}} r \"Roam\" %{{xdotool set_desktop 1 ; emacsclient -c -a \"\" ~/20240101080032-startpage.org}} }\n\nAs you can see, this helps to cut down on repetition, but it also helps\nenforce a workflow rule without the need to setup desktop environment rules\nand such.\n\nThis example also hints at the idea of inheritance as the hook was given to a\nprefix and not to individual chords. This topic is covered after introducing\nflags as these also factor into the discussion.\n\n#### Flags\n\nFlags are similar to command-line flags in that they change the behavior of\nwk.\n\n    \n    \n    flag -> '+' ( 'keep' | 'close' | 'inherit' | 'ignore' | 'ignore-sort' | 'unhook' | 'deflag' | 'no-before' | 'no-after' | 'write' | 'execute' | 'sync-command' ) ;\n\nFlags begin with a plus character (+), followed by the flag itself. Here is\nhow each flag changes the behavior of wk:\n\nFlag| Behavior  \n---|---  \nkeep| Instead of closing after wk finds a matching chord, it keeps the wk menu\nopen.  \nclose| Forces the wk window to close. Useful when +keep was given to a\nsurrounding prefix.  \ninherit| Causes the prefix to inherit flags and hooks from its parent. Has no\neffect when given to a chord.  \nignore| Ignore all hooks and flags from the surrounding prefix. Has no effect\nwhen given to a prefix.  \nignore-sort| Chord is ignored during sorting leaving it in it in the same\nposition it was parsed in.  \nunhook| Ignore all hooks from the surrounding prefix.  \ndeflag| Ignore all flags from the surrounding prefix.  \nno-before| Ignore before and sync-before hooks from the surrounding prefix.  \nno-after| Ignore after and sync-after hooks from the surrounding prefix.  \nwrite| Write commands to stdout rather than executing them.  \nexecute| Execute the command rather than writing them to stdout. Useful when\n+write was given to a surrounding prefix.  \nsync-command| Execute the command in a blocking fashion. See the note in hooks\nregarding potential issues with blocking commands.  \n  \nEach flag has a time and a place but I find +keep, and +write to be the most\nuseful out of the bunch.\n\nThe +keep flag can turn wk into a hydra of sorts. I use this to control music\nplayback on my system like this:\n\n    \n    \n    m \"+Music\" +keep { c \"Clear mpc\" %{{mpc clear}} d \"Display Song\" %{{songinfo}} h \"Seek -5\" %{{mpc seek \"-5\"}} l \"Seek +5\" %{{mpc seek \"+5\"}} n \"Next song\" %{{mpc next}} p \"Prev song\" %{{mpc prev}} o \"Open mpc\" +close %{{st -e ncmpcpp}} y \"Playlist\" +close %{{st -e ncmpcpp --screen playlist}} }\n\nThe +write flag is useful for scripting purposes. In the same way that dmenu\nand co print selections to stdout, this turns wk into a prompt for users to\nchoose from some list of options with less typing.\n\n#### Inheritance\n\nInheritance relates to hooks and flags given to prefixes. The idea is fairly\nsimple. A hook or flag given to a prefix is inherited by any chord within the\nprefix. Nested prefixes do not inherit the hooks and flags given to their\nparent.\n\n    \n    \n    a \"+Prefix\" +write { w \"Write it!\" %{{I get written!}} n \"+Nested Prefix\" { r \"Run it!\" %{{echo \"I get run!\"}} } }\n\nIn the above example, the key chord a w causes I get written! to be printed to\nstdout. The key chord a n r runs the command echo \"I get run!\".\n\nTo force a nested prefix to inherit from its parent the +inherit flag must be\ngiven. Additionally, if the prefix only wishes to inherit certain hooks or\nflags additional flags may be given to ignore unwanted behavior.\n\n#### Sorting\n\nKey chords will be sorted when processing a wks file if the --sort flag is\npassed to wk. This has knock-on effects with index interpolations (often for\nchord arrays). A wks file like this will produce different results sorted vs\nunsorted (the default).\n\n    \n    \n    # Base file [neio] \"Switch %(index+1)\" %{{xdotool set_desktop %(index)}} b \"Second?\" +write %{{%(index)}} a \"First?\" +write %{{%(index)}} # Unsorted result n \"Switch 1\" %{{xdotool set_desktop 0}} e \"Switch 2\" %{{xdotool set_desktop 1}} i \"Switch 3\" %{{xdotool set_desktop 2}} o \"Switch 4\" %{{xdotool set_desktop 3}} b \"Second?\" +write %{{4}} a \"First?\" +write %{{5}} # Sorted result a \"First?\" +write %{{0}} b \"Second?\" +write %{{1}} e \"Switch 3\" %{{xdotool set_desktop 2}} i \"Switch 4\" %{{xdotool set_desktop 3}} n \"Switch 5\" %{{xdotool set_desktop 4}} o \"Switch 6\" %{{xdotool set_desktop 5}}\n\nTo avoid this you can add the +ignore-sort flag to any key chord to ensure the\nvalue of the index interpolations.\n\n    \n    \n    # Base file [neio] \"Switch %(index+1)\" +ignore-sort %{{xdotool set_desktop %(index)}} b \"Second?\" +write %{{%(index)}} a \"First?\" +write %{{%(index)}} # Sorted with `+ignore-sort` result e \"Switch 1\" %{{xdotool set_desktop 0}} i \"Switch 2\" %{{xdotool set_desktop 1}} n \"Switch 3\" %{{xdotool set_desktop 2}} o \"Switch 4\" %{{xdotool set_desktop 3}} a \"First?\" +write %{{4}} b \"Second?\" +write %{{5}}\n\n## Preprocessor Macros\n\nThere are a number of preprocessor macros that can be used in wks files. These\nhave a number of uses from making wks files more modular to controlling the\nlook and feel of wk.\n\n    \n    \n    preprocessor_macro -> ':' ( string_macro | switch_macro | integer_macro | unsigned_macro | number_macro ) ;\n\nA preprocessor macro begins with the colon character (:) followed by a\nspecific macro form.\n\nThe majority of macros correspond to the command-line arguments that wk\nsupports. When given, these override anything given at the command-line. They\nare here to provide a baked-in alternative to the command-line versions making\nit easy to simply run the wks file and get the desired look and feel without\nhaving to give the same arguments each time. It can also help distinguish the\npurpose of the key chords if it is intended to be used as part of a script by\nmaking the wk popup window different from the builtin settings.\n\n### String Macros\n\nString macros require a string argument.\n\n    \n    \n    string_macro -> ( 'include' | 'fg-color' | 'bg-color' | 'bd-color' | 'shell' | 'font' ) '\"' ( '\\\\\"' | [^\"] )* '\"' ;\n\nMany of the macros here work the same as their command-line counterparts.\nSimply use :MACRO \"ARGUMENT\" to make use of any string macro, (e.g. :shell\n\"/usr/bin/env zsh\").\n\n#### The Include Macro\n\nOut of the string macros, the :include macro is not present as a command-line\nargument to wk. This is because this macro has more to do with wks files than\nthe look and feel of wk.\n\nThe :include macro works similarly to the #include macro found in C/C++. It\nallows users to bring other wks files into a single file.\n\nNote, self includes and recursive includes are not permitted and will cause an\nerror.\n\nNote, the same file may be included multiple times. This is not an error, and\nmay even be desirable for some users.\n\nHere is an example of the include macro:\n\n    \n    \n    # File main.wks --------------- # Browser prefix b \"+Browser\" { :include \"browser_key_chords.wks\" } # Emacs prefix e \"+Emacs\" ^before %{{xdotool set_desktop 1}} { :include \"emacs_key_chords.wks\" } # Music prefix m \"+Music\" +keep { :include \"music_key_chords.wks\" } # File browser_key_chords.wks ----------------------------- [ (b \"Brave\") (c \"Chrome\") (f \"Firefox\") ] \"null\" %{{%(desc,,)}} # Mullvad-exclude prefix m \"+Mullvad Exclude\" { [ (b \"Brave\") (c \"Chrome\") (f \"Firefox\") ] \"null\" %{{mullvad-exclude %(desc_)}} } # File emacs_key_chords.wks --------------------------- b \"Open blank\" %{{emacsclient -c -a \"\"}} p \"+Projects\" { w \"wk\" %{{emacs \"~/Projects/wk\"}} } # File music_key_chords.wks --------------------------- c \"Clear mpc\" %{{mpc clear}} d \"Display song\" %{{songinfo}} h \"Seek -5s\" %{{mpc seek \"-5\"}} l \"Seek +5s\" %{{mpc seek \"+5\"}} n \"Next song\" %{{mpc next}} p \"Prev song\" %{{mpc prev}} o \"Open mpc\" +close %{{st -e ncmpcpp}}\n\nThis allows users to create key chords in a more modular manner. This can be\nbeneficial when you may want to reuse a wks file in a different context than\nyour main key chords.\n\nNote, while the #include macro in C/C++ has restrictions on where it can go in\na file, the:include macro in a wks file may go literally anywhere. In the\nabove example, this was given in the middle of a prefix without error.\n\nYou can even do silly things like this:\n\n    \n    \n    # File part_one.wks ------------------- A \"silly :include \"part_two.wks\" # File part_two.wks ------------------- example\" %{{echo \"You wouldn't do this right??\"}} # Resulting wks file -------------------- A \"silly example\" %{{echo \"You wouldn't do this right??\"}}\n\nAs for file resolution, it's pretty simple. A relative path is assumed to be\nin the same directory as the file being executed, and absolute paths are just\nthat, absolute.\n\n### Switch Macros\n\nSwitch macros are the simplest of the bunch. They are essentially an on switch\nfor the corresponding menu settings.\n\n    \n    \n    switch_macro -> ( 'debug' | 'sort' | 'top' | 'bottom' );\n\nAll the switch macros correspond to their cli flags for wk. See the help\nmessage or the man page for more info.\n\n### Integer Macros\n\nThe integer macros require a positive or negative integer argument to the\nmacro.\n\n    \n    \n    integer_macro -> ( 'menu-width' | 'menu-gap' ) '-'? [0-9]+ ;\n\nAll the integer macros correspond to their cli flags for wk. See the help\nmessage or the man page for more info.\n\n### Unsigned Macros\n\nThe unsigned macros require a positive integer argument to the macro.\n\n    \n    \n    unsigned_macro -> ( 'max-columns' | 'border-width' | 'width-padding' | 'height-padding' | 'delay' ) [0-9]+ ;\n\nAll the unsigned macros correspond to their cli flags for wk. See the help\nmessage or the man page for more info.\n\n### Number Macros\n\nThe number macros require a positive number argument to the macro.\n\n    \n    \n    number_macro -> ( 'border-radius' ) '-'? [0-9]+ ( '.' [0-9]* )? ;\n\nAll the number macros correspond to their cli flags for wk. See the help\nmessage or the man page for more info.\n\n## Full documentation\n\nThe above should serve as a solid introduction to wks file syntax. The man\npage for wks files contains the same information. When wk is installed, simply\nrun man 5 wks to get refrence examples and a full break down of wks syntax.\n\nAdditionally, there are several example files included in the examples section\nfor testing and understanding.\n\n## wks-mode Emacs Package\n\nThere is also a wks-mode package for Emacs provides syntax highlighting, and\nproper indentation in wks files. I'm no elisp wizard, if you have any way to\nmake that package better, please reach out.\n\n# Acknowledgments\n\nThis project would not be where it is without dmenu, and bemenu. I first tried\nto hack dmenu into an which-key like abomination, but failing to do that I\nlooked to create my own solution. However, I am not a programmer by trade, and\nmy knowledge of X11 and Wayland is very limited. It is thanks to those\nprojects that wk runs on either environment. bemenu especially was a life\nsaver. The code for the Wayland runtime has been lightly addapted for use with\nwk. All credit goes to the people who work on that project for the code there.\n\n# Contributing\n\nContributions are welcome! If you find any issues or have suggestions for\nimprovements, please open an issue or submit a pull request.\n\n## About\n\nwk - Which-Key via X11 and Wayland, inspired by dmenu and bemenu respectively.\n\n### Resources\n\nReadme\n\n### License\n\nGPL-3.0 license\n\nActivity\n\n### Stars\n\n1 star\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * C 97.4%\n  * Makefile 2.3%\n  * Shell 0.3%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
