{"aid": "40256872", "title": "Why I'm Optimistic about the Tech Recession", "url": "https://ryanmichaeltech.net/Blog/Why+I%27m+Optimistic+about+the+Tech+Recession", "domain": "ryanmichaeltech.net", "votes": 1, "user": "redbell", "posted_at": "2024-05-04 11:37:08", "comments": 0, "source_title": "Why I'm Optimistic about the Tech Recession -", "source_text": "Why I'm Optimistic about the Tech Recession -\n\nBlog\n\nRockstar Developers Exist.\n\nWhat React Taught me about Functional Programming\n\nWhy I'm Optimistic about the Tech Recession\n\nWhy I'm Using Obsidian for My Tech Blog\n\nWelcome!\n\nWhy I'm Optimistic about the Tech Recession\n\nI was a damn lucky kid when I graduated college. It was 2019, and recruiters\nwere flooding my LinkedIn messages with positions in every major city near the\nsuburb I lived in. I had so many offers I was able to negotiate a salary\nalmost as large as the collective income my two parents raised me with, and\nthat was the floor for my budding career. The pandemic soon followed in its\nhorror, but the position I landed almost seamlessly transferred into remote\nwork. Not only was I safe, I was still getting calls for job offer after job\noffer. Recruiters had more junior positions than they could fill, and were\ndesperate to put butts in seats. I was in an employee's market that may never\nhappen again in my lifetime.\n\nTimes were good. Materially. But there were many...interesting quirks in the\npositions I worked.\n\nAt my first position one of the first tasks my supervisor gave me was to\nremove all the \"unit tests\" my predecessor wrote because they kept failing. I\nwrite \"unit tests\" in quotes because at best they had more mock statements\nthan actual exercised code. Others had deep integrations with remote\ndatabases, and seemingly passed and failed at random. I was actively\ndiscouraged from writing automated tests, which meant single line changes\nended with me having to exercise entire codebases by hand and examine\ngigabytes of data. For every day I spent coding I spent a week testing. And\nmanual testing came with manual errors. In a perfect world, I would have been\ngiven as much time as I wanted to refactor the entire codebase with automated\ntests running at 100% coverage. And upon concluding my work I would have been\nseen as the hero of my company. In a less perfect world, management would be\naware of these issues would consult me on what could be done to address them.\nWe would work together to synthesize good-enough solutions that were\nreasonable and suited business needs.\n\nHowever, we live in a world where there was a culture in our department to\nblame end users for code instability. If something crashed on a new input, I\nwas expected to make a case to other departments that they wrote their\nrequirements wrong. I had an end user come up to me one day almost trembling\nin fear. She sneezed when she clicked on a job submission, accidentally hit\nthe mouse twice, and concurrently set off two work processes which ended up\nbringing down our backend. I'm glad I was able to reboot everything before any\nhigher ups noticed what happened.\n\nThese objective quality issues don't even speak to the subjective quality of\nthis code, which despite being Python, looked like cargo-culted Java written\nin styles popular before I was born. They didn't speak to the passwords we\ndumped to plaintext logs, or the private binary keys my seniors were\ncommitting to source, or the hand-rolled json parsers and formatters written\nwith C styled for loops in the front end, or at this point I just remembered\nsanity is a finite resource and I think I'm going to stop.\n\nLooking for greener grass, I moved to a new position. I took a contract that\nshould have been a simple ETL migration. My team consisted of me, another\nprogrammer, a project manager, and a business analyst. I was tasked with\nsetting up the cloud infrastructure while the other programmer wrote the\nbusiness logic. I still remember the first day I got on a Teams call with the\nother programmer. He shared his screen and had a tutorial up on how to write a\nfor loop. Uh-oh.\n\nThis project was a mess for more reasons than I can write up here. But by the\ntime this other programmer had 1) not finished his work and 2) \"moved on to a\nbetter position,\" we were well past deadline. I inherited a bunch of barely\nfunctioning StackOverflow copy/paste headaches and by the time I was able to\ndeliver this project we were so over deadline there was no way I was being\nconsidered for a contract renewal.\n\nIt turns out our hiring manager was interviewing so many candidates that were\nlying or otherwise dishonest about their work experience he thought highly of\ncandidates willing to say they didn't know something. During my interview I\nforgot the terms OLTP and OLAP. I said as much, which I found out later the\ninterviewer appreciated. I guess the other guy said \"I forgot\" a lot sooner.\n\nSometimes you get dealt a bad hand. But the job market was still hot and I\nmoved on. Within two weeks of my contract ending I had a full time position at\nan AI shop. Do you think this story gets better or worse?\n\nNo test environments. Just a bunch of EC2 instances where we all shared a root\npassword. Databases in containers without volume mounts. Code full of\ntry:except:pass. In one project, data was \"stored\" in message queues. When\ncode consumed the messages and failed there was no way to trace the failure,\nif it was even noticed. It's really tough to get called out for having errors\nin your code when they all disappear into the ether!\n\nBut to be fair, perfect code doesn't ship, and with a lot of manual\nintervention everything was able to run. And we shipped our data analysis to\nour clients! And so much of it was incomplete and incorrect at least one of\nthem stopped paying us.\n\nThis place eventually popped. And when I went looking for a new job, there\nweren't any.\n\nI entered the workforce when interest rates were so low people were\nspeculating on what would happen if they went negative. Investors had to make\nmoney but also had to compete with loans that would barely turn a profit. So\nthey casted extremely wide nets throwing money at anyone with an idea in hopes\nof getting any return possible. A lot of these ideas needed programmers. And\nit turns out when companies are desperate for programmers, they will hire\nalmost anyone.\n\nBut now it's more expensive to borrow money, so investors are funding less\nideas and they're not desperate anymore. Jobs are harder to find, salaries are\nlower, and the luxury of working remote is fading.\n\nBut the other side of this coin is these companies are now desperate to make a\nprofit. That means they need good ideas and they need those ideas to actually\nwork. Snake oil and grifts are going to die faster, and they're going to suck\nup less of the supply of coders. The fakers and incompetent are going to have\nto fight harder to not get weeded out, and I hope the ones that fight become\ncompetent and capable. I'm optimistic that ideas that were never viable are\ngoing to be better vetted by investors in the future. And I'm optimistic that\nviable products are going to need viable teams. I've worked with more\ncompetent developers I loved and respected than the damaging ones I've\nmentioned, and I know they were being dragged down with me through all these\nissues. So I'm optimistic that company processes will correct to vet out bad\napples ruining these great bunches.\n\nAnd I'm also optimistic to take this market as an opportunity to clean out any\nbad apple habits I have picked up over the years. After years of finding new\nand exciting ways to iterate over parquet and CSV files, I failed an interview\nbecause I couldn't write a BFS, which I don't find acceptable. So I'm playing\naround with leetcode. I don't want to solve the hardest esoteric problems but\nI need to make sure I'm not writing excessively na\u00efve and inefficient\nalgorithms. I'm also building a front end portfolio so I can transition from\nbackend to full stack. Plus I'm putting this blog together to work on my\ncommunication skills and become active in more coding communities. I'm growing\nand going to become better.\n\nGood luck out there, and when times are good again, remember interviews work\nboth ways. \ud83d\ude09\n\nPublished 2024-05-03\n\nWhy I'm Optimistic about the Tech Recession\n\nNot found\n\nThis page does not exist\n\nInteractive graph\n\nOn this page\n\nPowered by Obsidian Publish\n\n", "frontpage": false}
