{"aid": "40196853", "title": "Cloud-native key-value storage for sequential data", "url": "https://github.com/monotone-studio/monotone", "domain": "github.com/monotone-studio", "votes": 1, "user": "pmwkaa", "posted_at": "2024-04-29 11:08:43", "comments": 0, "source_title": "GitHub - monotone-studio/monotone: embeddable cloud-native storage for events and time-series data", "source_text": "GitHub - monotone-studio/monotone: embeddable cloud-native storage for events\nand time-series data\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nmonotone-studio / monotone Public\n\n  * Notifications\n  * Fork 1\n  * Star 34\n\nembeddable cloud-native storage for events and time-series data\n\nmonotone.studio\n\n### License\n\n34 stars 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# monotone-studio/monotone\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n13 Branches\n\n1 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\npmwkaarework named guardsApr 28, 2024db3d637 \u00b7 Apr 28, 2024Apr 28, 2024\n\n## History\n\n1,323 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| update benchmark gif| Apr 8, 2024  \n  \n### build\n\n|\n\n### build\n\n| Release v1.0.0| Apr 16, 2024  \n  \n### cli\n\n|\n\n### cli\n\n| cli/tests: update tests and bench| Apr 15, 2024  \n  \n### examples\n\n|\n\n### examples\n\n| cli/tests: update tests and bench| Apr 15, 2024  \n  \n### monotone\n\n|\n\n### monotone\n\n| rework named guards| Apr 28, 2024  \n  \n### test\n\n|\n\n### test\n\n| Release v1.0.0| Apr 16, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| update gitignore| Mar 22, 2024  \n  \n### ARCHITECTURE.md\n\n|\n\n### ARCHITECTURE.md\n\n| Update ARCHITECTURE.md| Apr 15, 2024  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| Release v1.0.0| Apr 16, 2024  \n  \n### LICENSE-LGPL\n\n|\n\n### LICENSE-LGPL\n\n| add licenses| Apr 7, 2024  \n  \n### LICENSE.md\n\n|\n\n### LICENSE.md\n\n| add licenses| Apr 7, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 16, 2024  \n  \n### VERSION\n\n|\n\n### VERSION\n\n| Release v1.0.0| Apr 16, 2024  \n  \n### makefile\n\n|\n\n### makefile\n\n| update makefile| Mar 16, 2024  \n  \n## Repository files navigation\n\n### Storage for Sequential data\n\nMonotone is a modern embeddable data storage designed from the ground up\nprecisely for sequential workloads, such as append write and range scans.\n\nSequential workloads are at the foundation of the following use cases: IoT,\nevents, time series, crypto, blockchain, finance, monitoring, logs collection,\nand Kafka-style workloads.\n\nUsing Monotone, you can create high-performance serverless solutions for\nstorage and processing data directly within your application.\n\nMade to match the following requirements:\n\n  * Collect and process events in large volumes serially or by time (auto-increment by default)\n  * Write events as fast as possible, maintaining order and persistence\n  * Delete or Update events by primary key when necessary (but rarely or never needed)\n  * Read any range of events as fast as possible using the primary key\n  * Efficiently store and manage large volumes of data using partitions\n  * Efficiently compress and encrypt data\n  * Transparently update partitions and recompress, decrypt data without blocking readers and writers\n  * Extend disk space without downtime by plugging additional storage\n  * Seamlessly work on top of S3\n  * Make sense of Hot and Cold data patterns using Data Tiering\n\nThe storage architecture is inspired by a Log-Structured approach and\nimplements a custom-made memory-disk-cloud hybrid engine. Learn more about its\nArchitecture.\n\nOfficial Documentation.\n\n### Features\n\n  * Automatic Range Partitioning\n\nAutomatically partition data by range or time intervals (min/max).\nTransparently create partitions on write. Support partitions in the past and\nfuture. Automatically or manually refresh partitions on disk or cloud after\nbeing updated. Automatically exclude unrelated partitions during reading.\n\n  * Transparent Compression\n\nCompress and recompress partitions automatically on refresh or partition move.\nAllow different compression types and compression level settings. Everything\nis done transparently without blocking readers and writers.\n\n  * Transparent Encryption\n\nEncrypt and decrypt partitions automatically on refresh, partition move, or\nread. Compatible with compression and done transparently without blocking\nreaders and writers.\n\n  * Multiple Storages\n\nCreate storage to store data on different storage devices. Set different\nstorage settings, such as compression, encryption, associated cloud, etc.\nManually or automatically move partitions between storages. Automatic\ncompaction is made when moving to change settings. Create or drop storage\nonline. Extend disk space by adding new storage without downtime.\n\n  * Data Tiering\n\nUnderstand Hot and Cold data by creating data policies involving several\nstorages. Define Pipeline to specify where partitions are created and when\nthey need to be moved or dropped. All are done automatically or manually.\n\n    \n        -- -- Create and keep all new partitions on SSD storage for a short duration -- of time for a faster refresh and read. Automatically move partitions -- to cold HDD storage when hot storage reaches its limit. Automatically -- Delete older partitions from cold storage when they reach their limit. -- CREATE STORAGE hot (path '/mnt/ssd', compression 'zstd') CREATE STORAGE cold (path '/mnt/hdd', compression 'zstd') ALTER PIPELINE hot (size 10G), cold (size 100G)\n\n  * Bottomless Storage\n\nAssociate storage with the cloud for extensive and cheaper storage.\nTransparently access partitions on the cloud. Automate partitions lifecycle\nfor the cloud using Pipeline.\n\nAutomatically or manually handle updates by reuploading partitions to the\ncloud. Download or upload partitions. Move partitions between local storage\nand the cloud. Move partitions between different cloud services.\n\n    \n        -- Store recent data on SSD for one day, then move to S3. CREATE CLOUD s3 (type 's3', access_key 'minioadmin', secret_key 'minioadmin', url 'localhost:9000') CREATE STORAGE hot (compression 'zstd') CREATE STORAGE cold (cloud 's3', compression 'zstd', encryption 'aes') ALTER PIPELINE hot (duration 1day), cold\n    \n        -- Work on top of S3. CREATE CLOUD s3 (type 's3', access_key 'minioadmin', secret_key 'minioadmin', url 'localhost:9000') ALTER STORAGE main (cloud 's3', compression 'zstd')\n\n### API\n\nMonotone provides simple C API.\n\nInsert (and replace/delete) is done in batches using the event id associated\nwith optional key/value data. Data are read using cursors. Data management,\nadministration, and monitoring are done by using SQL-style DDL commands.\n\n#### Interactive Benchmarking\n\nMonotone ships with the client application, which can do simple interactive\nbenchmarking and execute commands in runtime: monotone bench. You can use it\nto experiment with settings and data management commands and get a sense of\nperformance.\n\n#### Performance\n\nSome arbitrary performance numbers for single instance using single writer\nthread:\n\nWith WAL\n\nWith standard settings (100 bytes per event):\n\n    \n    \n    monotone bench write: 5847000 rps (5.85 million events/sec, 165.18 million metrics/sec), 630.10 MiB/sec\n\nMaxing out metrics: (1000 bytes per event = 250 metrics per event):\n\n    \n    \n    monotone bench -s 1000 write: 1867200 rps (1.87 million events/sec, 472.87 million metrics/sec), 1803.85 MiB/sec\n\nWriting 1.5+ GiB to WAL (uncompressed), performance depends on your storage\ndevice throughput.\n\nMax event throughput with WAL (data size set to zero, 1000 events per write):\n\n    \n    \n    monotone bench -s 0 -b 1000 write: 8059000 rps (8.06 million events/sec, 0.00 million metrics/sec), 99.91 MiB/sec\n\nRead all events:\n\n    \n    \n    > /select 0 432000000 read: 30513948 rps (30.51 million events/sec, 862.02 million metrics/sec), 3288.30 MiB/sec read events: 432000000 (432.0 millions) read metrics: 47412.0 millions read size: 46554.6 MiB read time: 14.2 secs\n\nWithout WAL\n\nDisabling WAL allows us to get maximum out of the storage performance and not\nget bound by IO. Write is in-memory. Partitions are compressed, flushed, and\nsynced to disk ASAP by background workers.\n\nWith standard settings (100 bytes per event):\n\n    \n    \n    monotone bench -n write: 10954400 rps (10.95 million events/sec, 309.46 million metrics/sec), 1180.50 MiB/sec\n\n#### Five Seconds to Mars\n\nFollowing results depend on your hardware (RAM / CPU) and can be scaled\nfurther by playing with the benchmark settings.\n\nMaxing out metrics: (1000 bytes per event = 250 metrics per event):\n\n    \n    \n    monotone bench -n -s 1000 write: 6949800 rps (6.95 million events/sec, 1760.04 million metrics/sec), 6714.01 MiB/sec\n\nThe expected compression rate using zstd is 25-86x, and write performance is\nmore than 1.5 billion metrics per second for a single thread writer.\n\nParallel writing to two independent storage instances:\n\n    \n    \n    monotone bench -n -s 1000 -i2 write: 9007800 rps (9.01 million events/sec, 2281.23 million metrics/sec), 8702.18 MiB/sec\n\nPlease note that writing 5+ GiB into memory requires appropriate memory\ncapacity to fit the updates until partitions are flushed to disk and\nCPU/compaction workers to handle the compaction.\n\n#### Build\n\n#### OS\n\nCurrently only Linux environments are supported.\n\n#### Dependencies\n\n  * cmake\n  * gcc (recommended) or clang\n  * libcurl\n  * openssl\n  * zstd\n  * lz4\n\n#### Build Release\n\n    \n    \n    make release\n\n#### Build Release (pass cmake options directly)\n\n    \n    \n    cd build cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=<install_path> . make\n\n#### Build Debug\n\n    \n    \n    make debug\n\n#### Running tests\n\n    \n    \n    make cd test ./monotone-test\n\n## About\n\nembeddable cloud-native storage for events and time-series data\n\nmonotone.studio\n\n### Topics\n\niot events cloud crypto monitoring embeddable time-series serverless key-value\nlogging blockchain cloud-native document-store key-value-store embeddable-\ndatabase\n\n### Resources\n\nReadme\n\n### License\n\nActivity\n\nCustom properties\n\n### Stars\n\n34 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases 1\n\nRelease v1.0.0. (GA) Latest\n\nApr 16, 2024\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * C 98.2%\n  * CMake 1.5%\n  * Other 0.3%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
