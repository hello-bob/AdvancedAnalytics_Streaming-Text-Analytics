{"aid": "40272931", "title": "Rust's Trademark Concerns", "url": "https://wiki.hyperbola.info/doku.php?id=en:philosophy:rust_trademark", "domain": "hyperbola.info", "votes": 2, "user": "klez", "posted_at": "2024-05-06 09:55:55", "comments": 0, "source_title": "en:philosophy:rust_trademark [HyperWiki]", "source_text": "en:philosophy:rust_trademark [HyperWiki]\n\n# Hyperbola GNU/Linux-Libre\n\n  * Home\n  * Packages\n  * Forums\n  * Wiki\n  * Issues\n  * Git\n  * Donate\n  * Download\n\n# HyperWiki\n\n  * Show pagesource\n  * Recent Changes\n  * Sitemap\n\n  * Admin\n  * Log In\n\n  * Show pagesource\n  * Recent Changes\n  * Sitemap\n  * Admin\n  * Log In\n\n  * en\n\n### rust_trademark\n\nYou are here: start \u00bb en \u00bb philosophy \u00bb rust_trademark\n\n## Menu\n\n  * Start\n\n    * Introduction\n\n    * Frequently Asked Questions\n\n    * Social Contract\n\n    * Teamwork\n\n    * HyperbolaBSD Roadmap\n\n    * Frequently Asked Questions about HyperbolaBSD\n\n    * Update philosophy\n\n  * Project:\n\n    * Downloads\n\n    * Sources\n\n    * Releases\n\n    * Repositories\n\n    * Nomenclatures\n\n    * Filesystem Hierarchy Standard\n\n    * Hidden Services\n\n    * Sponsorship\n\n    * Donations\n\n  * Manual:\n\n    * Reference Installation\n\n    * Verify Images\n\n    * Deblob Kernel\n\n    * VM Manager\n\n  * System:\n\n    * Display Servers\n\n    * Available Window Managers\n\n    * Desktop Environments\n\n    * Init Systems\n\n    * Emulators\n\n  * Applications:\n\n    * Iceweasel-UXP\n\n    * Iceweasel Addons\n\n    * Icedove-UXP\n\n    * Icedove Addons\n\n    * Iceape-UXP\n\n    * Iceape Addons\n\n  * Philosophy:\n\n    * Hyperbola is a stable, long-term supported system\n\n    * Community-oriented software\n\n    * Free software and its current logic failures\n\n    * Trademarks\n\n    * Non-functional data\n\n    * Bluetooth security issues\n\n    * sysInit Freedom\n\n    * Failure of D-Bus\n\n    * Sudo Complexity\n\n    * Chromium's Flaws\n\n    * Java's Downfalls\n\n    * Rust's Trademarks\n\n    * Trademark Concerns and Problems with PHP\n\n    * Incompatible Packages and Projects\n\n  * Development:\n\n    * Packaging Guidelines\n\n    * Code Styling Guidelines\n\n    * Documentation Syntax Standards\n\n# Rust's Trademark Concerns\n\nAs free software users, we all enjoy using the latest and greatest in free\nsoftware, but we need to make sure that the software we are using really does\nrespect our freedom. The desire to run Rust is clear to be seen, since it\nappears to be fully free software, but it still fails in several ways.\n\n## What are the issues?\n\nRust and also Cargo (the Rust package manager) violate the freedom to\nredistribute without \u201cexplicit\u201d approval. Their trademark license imposes\nrequirements for the distribution of modified versions that make it\ninconvenient to exercise freedom 3. To quote:\n\n    \n    \n    Distributing a modified version of the Rust programming language, compiler, or the Cargo package manager with modifications other than those permitted above and calling it Rust or Cargo requires explicit, written permission from the Rust Foundation. We will usually allow these uses as long as the modifications are (1) relatively small and (2) very clearly communicated to end-users.\n\nExactly the phrases relatively small and very clearly communicated to end-\nusers are parts of the problems: They are vague in their meaning and it is\nclear that the Rust Foundation has no real interest to have modified versions\ndistributed. So for example to have Cargo removed as otherwise non-free\npackages could be used from projects being compiled. In fact Rust is that kind\nof complex with demanding dependencies that a removal of its internal package-\nmanagement (Cargo) makes it not working and so there are even plugins to\ncontrol licenses before applying something. That violates also Hyperbolas\npoint of minimalism and the possibility to rebuild any package with own\nmodifications from users at any given time! We talk here about making free,\nlibre software good to handle and learn for technical emancipation, while Rust\nis going even more complicated and complex.\n\nIn short, the Rust Foundation won't be happy with us applying patches and\nmodifications to their trademarked language without \u201cexplicit approval\u201d, so it\nis a freedom issue. We should not have to ask for modifications. For further\nreferences, there is a report in Rust about those trademark restrictions and\nNiko's response (one of the members of the Rust Legal Team).\n\nFurthermore Rust has a very strict point when it comes to modified versions\ndistributed and shared. To quote their points from their own media guide:\n\n    \n    \n    (...) Distributing a modified version of the Rust programming language, compiler, or the Cargo package manager, provided that the modifications are limited to: * code adjustments for the purpose of porting to a different platform, architecture, or system, or integrating the software with the packaging system of that platform; or * fixing local paths; or * adding patches that have been made available upstream and accepted, or submitted upstream and not yet rejected (but you must remove either the patch or the trademark once the patch has been been rejected). (...)\n\nTo summarize the issues:\n\n  * demands to ask for allowing modifications\n\n  * complex structures\n\n  * mandatory package-manager for build\n\n  * packages downloaded at build-time can be non-free, so keeping that outside makes the whole build-system and infrastructure even more complex\n\nThe listing above only shows the major points, furthermore the Rust-Foundation\nis overreacting in our perspective with their trademarked language and demands\nhandlings violating in fact free, libre software as it is based most on ethics\nand moral decisions as important, not what possible legal issues could be\nthere.\n\n## Big Picture\n\nThere are important applications integrating Rust as a first-class language.\nTor is one of them, and at some point in the future, the Tor team has plans to\nannounce a release and release date where Rust will be required. Even the\nLinux Kernel Team is interested in providing modules written in Rust.\n\nAs an alternative to Tor, i2pd (I2P Daemon) may be used. It is a full-featured\nC++ implementation of I2P client, useful for building and using the anonymous\nI2P network. However, i2pd isn't compatible with the Tor network and uses .i2p\nrather than .onion sites (also known as Tor Hidden Services).\n\nAlso many other projects are changing their approach or get a complete rewrite\nin Rust as first-class language, some further examples:\n\n  * implementation for libsignal as libsignal-protocol-c is no longer active maintained\n\n  * neovim adding tree-sitter as mandatory dependency since v0.7.0, as tree-sitter is a full Rust-depending project\n\n  * librsvg being completely rewritten in Rust\n\n  * ClamAV is enforcing the Rust-toolchain since v0.105\n\n  * GNU coreutils getting a cross-platform implementation in Rust\n\nThe list can be enhanced for sure and clear to say that Rust is not only some\nsideload toolchain. As the buzzword \u201cmemory safety\u201d is being in usage more and\nmore projects get on this. Yes, the rewrite of GNU coreutils is not the main\nproject. But who says exactly that this won't be the near future? As all the\nother points in this article were long before described, not solved and just\naccepted. It is a bad and foul compromise, endangering freedom of choice, user\nfreedom for sure and also the freedom for system-distributions and operating-\nsystems like Hyperbola.\n\nIt should be also mentioned that the Rust Foundation has a comparable members-\nlist like the Linux Foundation. Speaking about a \u201ccommunity\u201d is therefore not\nfitting in any way as those members are just companies and corporations.\nNeither Rust nor Linux are real community-oriented software and the FSF has\nfailed to fork the kernel as GNU/Linux-libre for a long time now. That's the\npoint for Hyperbola to become independent in a whole.\n\n## Solutions\n\n  * Rebranding the entire language to avoid the trademark restriction. Such as IceCat was made to replace Firefox and Iceweasel-UXP to replace Basilisk; however it is a programming language, not a browser. A rebranded version of Rust maintained by the GNU Project and FSDG-compliant distros could be the way. However, we would need patches to adapt all Rust-dependant applications to the modified version of Rust, since it is a programming language. We would also need to maintain a list of nonfree cargo packages for blacklisting purpose.\n\n  * Getting Rust to change its trademark agreement to allow modifications on the rust binary for any purpose in respect of Freedom 3.\n\n  * Keep all Rust-based projects aside and focus only on the ones with a clear stance and accept not to include Rust in any way.\n\nHyperbola has taken the decision to keep Rust complete out of the\nrepositories, including also all applications and libraries using Rust. We\ndecline this kind of \u201cfreedom\u201d under the influence of trademark-bullying.\n\n## About Rebranding\n\nWe know that there is the claim it would be \u201ceasy to rebrand like Mozilla\nFirefox\u201d, so we want to take this point and explain further why those things\nare different levels of complexity.\n\nRust is a complex language and framework including also an own package-\nmanager, documentation and sources for building. Firefox is an application for\nusers. Rebranding an application is one thing and rebranding a complete\nprogramming-language is not comparable. When people use this claim for Rust,\nthey are doing something being not honest in the perspective that it is not\nsufficient to just rename some resulting binaries: The rebranding of Rust\nincludes not only the binaries and some messages, there is the documentation,\nthe included sources, naming for files, possible notes within the source-\nfiles, libraries and also the whole building-framework around. Yes, we also\nknow about the project CrabLang. But that exactly underlines again our points:\nIf it would have been that easy as some people say, this project would have\nalready made a stable release and informed about that.\n\nAnd all besides rebranding alone is also not enough: As we also mentioned\nalready that Cargo may pull non-free packages and dependencies. Again to point\nout: It is not enough to talk about \u201crebranding\u201d as Rust itself needs\ntherefore also to be completely reworked for having it easier to handle with\nits dependencies at build-time.\n\n## Comparisons with other software trademarks\n\nSome users have correctly mentioned that many other software packages have\ntrademarks, do we plan to remove them all? No, but we see trademarks generic\nalso not under a positive aspect when they are used that kind of harsh.\n\nAs an example, neither Python PSF nor Perl Trademarks currently prohibit\npatching the code without prior approval. They do prohibit abuse of their\ntrademarks, e.g. you cannot create a company called \u201cPython\u201d, but this does\nnot affect your ability to modify their free software and/or apply patches.\nAnd to underline again: We just refer towards patching the software-packages,\nnot towards the generic trademark.\n\nDue to the very strict written modification-clause, Rust is a non-permissive\ntrademark that violates user freedom.\n\n## But including Perl and / or Python, while both having also a strong\ntrademark?\n\nBoth projects have a clear trademark to protect the usage of the software\nitself against fraud. There is a difference as Python and Perl allow patching\nand modification defined within the four freedoms.\n\nFrom Python:\n\n    \n    \n    (...) Use of the word \"Python\" when redistributing the Python programming language as part of a freely distributed application -- Allowed. If the standard version of the Python programming language is modified, this should be clearly indicated. For commercial distributions, contact the PSF for permission if your use is not covered by the nominative use rules described in the section \"Uses that Never Require Approval\" above. (...)\n\nFrom Perl:\n\n    \n    \n    (...) People sometimes ask if TPF's use of an onion in the Perl logo means that independent projects that use or relate to Perl need TPF's permission to use an onion of their own design in connection with their project. The answer is \"not necessarily\" as long as no likelihood of confusion is created. One of the fundamental legal bases for trademark protection is to make sure that the public can depend on a mark as an accurate indicator of a particular source or relationship, and one way of defining trademark infringement is to say that the infringing mark creates a likelihood of confusion. Likelihood of confusion is determined based not only on making a comparison of the marks side-by-side, but also on making a comparison of the contexts in which they are actually used. Thus, it's easy to imagine independent onions that would be fine, and independent onions that might not be. Contact us at trademark@perlfoundation.org if you have any questions, or would like us to evaluate a particular logo or usage to see if it would be an infringement. (...)\n\nThe comparisons are done intentional as Rust has no further interest within\npatching and modifications outside for special use-cases. We refer here\nexactly to the point again: It is possible to modify Python and Perl, calling\nboth same way. It is not possible to modify Rust and a modification and\ncomplete rebranding is beyond possible without approaching that generic. So\nthis is surely no point for a small team and project like Hyperbola!\n\nAnd we close again for all interested with the definition of freedom: Freedom\nis the power or right to act, speak, and change as one wants without hindrance\nor restraint. Demanding the opposite is not freedom per definition and surely\nfreedom always is included with responsibility. So we speak only on behalf for\nHyperbola as project as we write down our reasoning. Others may see it\ndifferent, but this does not redefine our points here.\n\nen/philosophy/rust_trademark.txt \u00b7 Last modified: 2024/03/20 00:22 by throgh\n\nExcept where otherwise noted, content on this wiki is licensed under the\nfollowing license: Creative Commons Attribution-ShareAlike 4.0 International\nLicense\n\n", "frontpage": false}
