{"aid": "40237413", "title": "Easy Gradient Palettes", "url": "https://www.pausly.app/blog/easy-gradient-palettes", "domain": "pausly.app", "votes": 1, "user": "floitsch", "posted_at": "2024-05-02 15:33:27", "comments": 0, "source_title": "Easy Gradient Palettes - Pausly blog", "source_text": "Easy Gradient Palettes - Pausly blog\n\nLogin\n\n## Easy Gradient Palettes\n\nTuesday, April 30th, 2024, 13:04 #dev\n\nGradient palettes are an invaluable asset in UI design, offering a streamlined\nway to select a color\u2014or more precisely, a hue\u2014and its lighter or darker\nvariations. Though it may seem straightforward in theory, in reality crafting\ngradient palettes is quite complex and poses significant challenges due to the\ncomplexity of the matter.\n\nThat's why we have developed a user-friendly and free tool that simplifies the\ncreation of gradient palettes by integrating modern browser technologies.\n\nCheck out our Oklch Palette Generator here.\n\nFor those eager to dive into the specifics, this article has you covered.\nHowever, here's a brief overview of what our Palette Generator offers:\n\n  1. The ability to input one or more colors, generating a gradient that incorporates them seamlessly.\n  2. Assurance of consistent gradients, where colors of different gradients have the same lightness level, allowing for reliable color substitution and guaranteed contrast.\n  3. Utilization of Oklch to achieve uniform gradients, capitalizing on Oklch's consistent lightness feature. This adaptability means it can also leverage all colors within the capabilities of modern displays.\n  4. Export options, enabling you to seamlessly integrate these colors into your CSS files, JavaScript configurations, or Figma projects.\n\nIn essence, our tool seeks to streamline the creation of gradient palettes,\nmaking it an effortless task for designers to achieve the perfect color blend\nfor their projects.\n\n## The Challenge of Crafting Gradient Palettes\n\nColor theory can be tricky, especially when it comes to gradients. Before the\nadvent of HSL, there wasn't a straightforward method to generate gradients.\nTake, for example, a blue shade represented by the HEX code #3cacf7. This code\nsignifies the RGB (Red, Green, Blue) values of a color, with numbers ranging\nfrom 0 (00) to 255 (ff). The higher the number, the more intense the color.\nSo, black is when all values are 00, and white is when they're all ff.\n\nNow, here's the puzzle: it's incredibly hard to figure out how to modify\n#3cacf7 to make it lighter or darker without losing its original feel.\nEssentially, without affecting its hue and saturation in a way that looks\nnatural and balanced.\n\nWith the debut of CSS3 in 2010 came a new function to define colors: HSL,\nshort for Hue, Saturation, and Lightness. This seems like the perfect\nsolution! Take our previous example of blue (#3cacf7) and convert it to its\nHSL equivalent: hsl(204.06, 92.12%, 60.2%). The last number here refers to\nlightness, suggesting that to forge a gradient, we might just need to adjust\nthis lightness value across a set of colors.\n\nSo, if we go ahead and generate a sequence of 12 colors based on this\nprinciple, here's how it turns out:\n\nNot too shabby! Yet, a couple of things could be better. For instance, the\ndifference in lightness between the lightest color and the one following it is\na tad too pronounced. However, that's an easy fix.\n\nLet's mix in a few more shades.\n\nAnd this is where we run into a classic HSL hiccup: A green hue at 50%\nlightness looks markedly lighter than a purple of the same lightness\npercentage. Notice the legibility challenge with the \"50%\" text on the purple\nbackground as opposed to the green.\n\nAnother observation here: the green seems to drift ever so slightly, adopting\na subtle yellow hue in its lighter variants.\n\nThese challenges often lead designers back to meticulously craft these\ngradients by hand-picking each color.\n\n## How Oklch Addresses Some Problems\n\nOklch provides a neat solution to some of the issues we faced. Unlike HSL,\nwhere adjustments in lightness don't always correspond to how we perceive\ncolor brightness, Oklch's lightness corresponds to perceived lightness. This\nfeature ensures that if we compare two colors both set to 50% lightness in\nOklch, they'll appear equally bright to our eyes.\n\n> Lch, the basis of Oklch, represents Lightness, Chroma (akin to saturation),\n> and Hue. Oklch improves on this algorithm, preventing unwanted hue shifts\n> when altering lightness.\n\nAdditionally, what sets Oklch apart is its use of the P3 color space. This\nallows you to define colors in the full range of the capabilities of\ncontemporary displays. The result? More consistent, visually pleasing\ngradients across a broader range of devices.\n\nLet's recreate the same gradients in Oklch:\n\nAlright, that addresses one challenge: achieving uniform lightness across\ncolors. However, this approach leads to another problem where the lighter\ncolors may appear overly vibrant. This situation arises because Oklch doesn't\nset a cap on color intensity. It permits the specification of hues that might\nnot yet be displayable on current screens but could be on future ones.\n\n## Our Solution\n\nAs you can see, Oklch is not a silver bullet. Our tool tackles these issues by\nadopting smooth falloff curves for the lightness values, aiming for minimal\nvariation at the extremes of the lightness spectrum where human perception is\nmost sensitive to changes. Moreover, instead of a uniform value, it adjusts\nchroma relative to lightness, leading to a decrease in chroma for lighter and\ndarker shades.\n\nThis is what these gradients look like with our tool:\n\nWhile our generator creates very balanced gradients, in some cases, they might\nseem slightly subdued. Imagine if a vivid neon green is central to your brand.\nBy inputting this color into our generator, you receive a palette like this:\n\nOur algorithm is designed to identify where your chosen color fits within an\n\"ideal\" gradient, crafting the surrounding palette accordingly.\n\nThis approach creates a palette that complements others, yet incorporates your\nvibrant green. A nice side effect is that these gradients particularly shine\non P3 displays.\n\n## What Sets Our Tool Apart?\n\nSure, there are plenty of tools for creating gradient palettes on the\ninternet, but we didn't find a solution that ticked all the boxes we needed.\nWe've tweaked the brightness levels of our palettes to ensure that both the\nlightest and darkest colors are actually useful in UI design. More\nimportantly, our tool can gracefully include specific brand colors, ensuring\nthey integrate well within the palette.\n\nAdditionally, our generator stands out by accommodating multiple colors within\na single gradient, an advantage for working with challenging shades like\nyellow, which can lose appeal when darkened. Take a look at our approach to\nthe yellow gradient palette:\n\nNotice how the gradient transitions into red as it darkens, avoiding dull,\nbrownish tones and instead, resulting in a set of colors that are a pleasing\nto the eye.\n\n## Our Journey to the Final Product\n\nBefore we reached the practical solution you see today we explored various\nother versions. Among these, we initially developed a tool designed to\nmanipulate curves across lightness, chroma, and hue values.\n\nWhile this method informed many elements of our final design, we faced\nsignificant challenges due to its reliance on functional curves. Achieving\nprecise results or integrating multiple concrete colors into a single palette\nproved to be nearly impossible, making this approach impractical.\n\nWe hope that this tool is useful to you and will help you create wonderful\ncolors in your next project.\n\nThanks for reading, and happy pausing!\n\n", "frontpage": false}
