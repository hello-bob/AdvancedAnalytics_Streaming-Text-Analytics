{"aid": "40278333", "title": "Improving video quality on Discord Go Live on AMD GPUs", "url": "https://discord.com/blog/from-blocky-to-brilliant-improving-video-quality-on-discord-go-live-on-amd-gpus", "domain": "discord.com", "votes": 1, "user": "mmcclure", "posted_at": "2024-05-06 19:09:58", "comments": 0, "source_title": "From Blocky to Brilliant: Improving Video Quality on Discord Go Live on AMD GPUs", "source_text": "From Blocky to Brilliant: Improving Video Quality on Discord Go Live on AMD\nGPUs\n\nEngineering & DevelopersFrom Blocky to Brilliant: Improving Video Quality on\nDiscord Go Live on AMD GPUs\n\nAlex Converse\n\nMay 1, 2024\n\nTags\n\nDiscord\u2019s Go Live feature is designed to bring high-quality, high-framerate\nstreams of games or applications at a low enough latency that lets viewers\ntalk and interact with the streamer in real time. Check out our first blog\npost all about Go Live here to catch up.\n\nTo achieve both the quality and speed needed for Go Live, Discord uses its own\ncustom capture and encoding code that integrates with operating systems and\nvideo drivers, using WebRTC to transport the video from streamer to viewer.\n\nTo keep latency low, WebRTC is constantly tuning target bitrates and frame\nrates based on what's going on in the transport in real time.\n\nEven with this parameter adaptation, we\u2019ve seen cases where we weren\u2019t happy\nwith the visual quality or encoding performance of Go Live. Sessions using AMD\ngraphics cards seemed particularly worse \u2014 we even had a Discord staff member\ntell us about the choppy and blocky streaming experience on their new PC with\na recent AMD video card.\n\nSo... how can we fix this? Let\u2019s dive in together and make Go Live the best it\ncan be:\n\n## Too Many Key Frames\n\nIn video compression, a \u201ckey frame\u201d is a self-contained video frame that\ndepends on no previous content. When either a new viewer joins a Go Live\nsession or an existing viewer loses the previous picture, a new key frame must\nbe sent. Following the new key frame, a much smaller \u201cdelta frame\u201d is used\ninstead which only encodes the changes from the previous frame.\n\nIn a well-behaved Go Live stream, key frames are typically 6 to 10 times the\ndata size of a delta frame. These key frames need to be large enough to\nprovide enough context for the following frames, but small enough to not\ncongest the user\u2019s network or slow down delivery of the video. One way to\navoid the tradeoffs presented by optimizing key frames is to send as few key\nframes as possible.\n\nWhen working to optimize Go Live, we found some of the adjustments we were\nmaking to key frames and delta frames ended up causing the encoder to\ncompletely reset and produce a new key frame every parameter update. Instead\nof getting a key frame every 60 seconds, we were spitting out keyframes *every\ntime* webrtc signaled a frame rate change - up to once a second! Sending these\nlarge key frames at such a rapid rate was eating up all of the allocated\nbandwidth.\n\nThese regular dips in per-frame VMAF were caused by key frames.\n\nTo meet our target of one key frame per minute, we had been asking our encoder\nto update an internal key frame interval about once per second as frame rate\ncounts were updating. However, this API was always forcing a new key frame. We\nstopped calling that API all together and instead just started counting frames\nand time on the outside to figure out when a key frame should be inserted.\n\nChanging the API we used to ask the encoder for key frames solved this\nproblem! Now, the system was only sending a key frame every 60 seconds,\ncausing key frames to take up much less bandwidth. Less bandwidth, more\nstreaming, more fun!\n\n## Low Quality Key Frames\n\nWe\u2019ve made progress! But the visual quality of both the key frames and the\nrest of the stream was still lacking. If key frames are low quality, the\nencoder is going to have a harder time making the rest of the frames look good\n\u2014 especially with high-complexity content like the new 4X strategy game you\u2019ve\nbeen wanting to stream. In addition, the pixel content of key frames is re-\nused by delta frames, meaning if the key frames are bad, those delta frames\ncan wind up looking worse, too!\n\nDespite the final stream not looking so hot, we noticed our encoder wasn\u2019t\nusing the full power of the bitrate allocated to the video stream. Why wasn\u2019t\nour encoder spending all the bits available to it to improve its stream\u2019s\nquality?\n\nWhen looking at each individual compressed frame coming out of the encoder (we\nhave tools that act like microscopes for this!), we saw that the poor quality\nseemed to be caused by the encoder dutifully following a set of strict rate-\ntargeting rules we gave it \u2014 whoops! We were asking the encoder to encode\nevery frame by an equal fraction of the bit target \u2014for example, at 60 fps we\nasked for each frame to be no more than one-sixtieth of the average bitrate.\n\nThis might seem reasonable at first, but the encoder wasn\u2019t provided with\nenough bits to start a fresh key frame since nothing was carrying over from\nprevious pictures. The encoder treated the frame target as a hard limit, so\nit\u2019s conservative about rate allocation within the frame, which caused each\nframe to undershoot its goal. And when the encoder undershoots on a frame, it\ncouldn\u2019t spend those leftover bits on the next frame.\n\nBy relaxing the period of time in which the bitrate was expected to average\nout, we were able to get much higher quality key frames, better quality after\nthe key frames, and achieved an average bitrate much closer to the target\nbitrate.\n\n## Plagued by the Frame Dropper\n\nAt this point, both the key frames and the subsequent frames looked much\nbetter, and standalone encoding worked well outside of the app. However, when\nwe plugged all this power into Discord, we saw some... odd results: when\nstreaming with our new encoding configuration, sometimes the frame rate would\nquickly fall from 60 fps to 30 fps and stay there for good.\n\nOnce we did some digging into these new low framerates, we saw something\nstrange going on: WebRTC would occasionally drop some frames if it thought the\nencoder was overshooting the target bitrate. When that happened, we would\nreconfigure the encoder with the lower frame rate at which the pipeline was\nrunning. This effectively meant assigning more bits to each remaining frame,\ncausing individual frame sizes to go up and frame drops to compound. This\nprocess would repeat over and over until the frame dropper was dropping half\nthe frames, which turned 60fps to 30fps.\n\nOnce identified, the issue was easy to mitigate! By leaving a little bit of\nheadroom to take into consideration the difference between the actual frame\nrate and the target frame rate, the encoder would no longer overspend right\nafter a frame drop. As a bonus, frame drops from other sources such as the\ncapture pipeline lagging would also be protected from overspend as they\nrecovered on their own.\n\nWith this fix in place, achieved frame rates not only recovered but exceeded\ntheir previous levels!\n\n## Conclusion\n\nWe were able to drive a massive increase in perceptual quality on AMD cards\nlike our staff member was using thanks to fewer key frames and less strict\nrate control. While the less-strict rate control drove some immediate FPS\nregressions, we were able to repair the FPS decrease by working around the\nlimits of the frame dropper, and even increase the average FPS! Average FPS\nfor streams targeting 60 FPS improved by 2 frames per second and the\npercentage of sessions seeing fewer than 50 FPS fell from 39% to 18%.\n\nWe hope you enjoyed our deep dive into this AMD mystery! If tackling problems\nsuch as this is something that you love, consider taking a peek at our Jobs\npage from time to time \u2014 we\u2019d love to have you aboard!\n\nContents\n\nIntroductionToo Many Key FramesLow Quality Key FramesPlagued by the Frame\nDropperConclusion\n\nTHE AUTHOR\n\nAlex Converse\n\nSenior Engineer, Client Audio/Video\n\nMORE FROM\n\nEngineering & Developers\n\nEngineering & Developers\n\nAccess: A New Portal for Managing Internal Authorization\n\nEngineering & Developers\n\nIt\u2019s time to Pitch Your Discord Apps!!\n\nEngineering & Developers\n\nHeaded to GDC 2024? Check Out the Latest News for Discord Game Devs\n\nEnglish, USA\n\n\u010ce\u0161tina\n\nDansk\n\nDeutsch\n\nEnglish\n\nEnglish (UK)\n\nEspa\u00f1ol\n\nEspa\u00f1ol (Am\u00e9rica Latina)\n\nFran\u00e7ais\n\nHrvatski\n\nItaliano\n\nlietuvi\u0173 kalba\n\nMagyar\n\nNederlands\n\nNorsk\n\nPolski\n\nPortugu\u00eas (Brasil)\n\nRom\u00e2n\u0103\n\nSuomi\n\nSvenska\n\nTi\u1ebfng Vi\u1ec7t\n\nT\u00fcrk\u00e7e\n\n\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\n\n\u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\n\n\u0420\u0443\u0441\u0441\u043a\u0438\u0439\n\n\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n\n\u0939\u093f\u0902\u0926\u0940\n\n\u0e44\u0e17\u0e22\n\n\ud55c\uad6d\uc5b4\n\n\u4e2d\u6587\n\n\u4e2d\u6587(\u7e41\u9ad4)\n\n\u65e5\u672c\u8a9e\n\nEnglish\n\nProduct\n\nDownloadNitroStatusApp DirectoryNew Mobile Experience\n\nCompany\n\nAboutJobsBrandNewsroom\n\nResources\n\nCollegeSupportSafetyBlogFeedbackStreamKitCreatorsCommunityDevelopersGamingQuestsOfficial\n3rd Party Merch\n\nPolicies\n\nTermsPrivacyCookie SettingsGuidelinesAcknowledgementsLicensesModeration\n\nSign up\n\n## Discord\n\nBy clicking \u201cAccept All Cookies\u201d, you agree to the storing of cookies on your\ndevice to enhance site navigation, analyze site usage, and assist in our\nmarketing efforts.Privacy Notice\n\n", "frontpage": false}
