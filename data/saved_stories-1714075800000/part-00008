{"aid": "40156268", "title": "We were wrong, we need a database", "url": "https://simonedutto.github.io/2024-04-09/no-ret-no-party", "domain": "simonedutto.github.io", "votes": 3, "user": "nelu", "posted_at": "2024-04-25 11:47:10", "comments": 0, "source_title": "No Database No Retention No Party", "source_text": "No Database No Retention No Party | Simone Dutto\n\nWritten by Simone Dutto on April 09, 2024\n\n# No Database No Retention No Party\n\nOne month ago I wrote this article You don\u2019t need a database, a queue, a\ndistributed system: Go is enough. and I posted it on HackerNews.\n\nThe result was interesting: it generated quite a bit of discussion and a lot\nof people decided to play with Binary Duel.\n\n# The Good\n\nAt a certain point, there were from 80 to 150 contemporary games and\neverything was good: no errors, the Golang backend was behaving in the best\nway. ( \ud83c\udf89 wohooo \ud83c\udf89)\n\nI was right, what an engineer!\n\n# The Bad\n\nAfter this initial boom, only a few people decided to revisit the game (approx\n10 a day).\n\n# The solution\n\nThe solution is quite trivial: we need a db, need login, need a leaderboard,\nwe need a way to incentivize competition between users, and a ranking system.\nAnd that is exactly what we have done! And again, Golang comes with a special\ntreat:\n\nYou don\u2019t actually need any dependency to do what you want, you can just code\nit.\n\n### We needed a way to cache the leaderboard since it is quite expensive to\nbuild.\n\nBuilding a leaderboard is expensive and difficult to maintain it updated. So\nonce we get it, we need to cache it. So, here is how you can implement a\nsimple route cache (in memory) with TTL:\n\n    \n    \n    type CacheEntry struct { cachedResponse interface{} t0 time.Time } var routeCache map[string]CacheEntry if cEnt, ok := routeCache[\"<cache-key>\"]; ok && time.Since(cEnt.t0) < TTL { // return response cached } else { // produce response routeCache[\"<cache-key>\"] = value }\n\n### We needed a way to bulk write operations to save precious free tier\noperations.\n\nSo here is how you can implement a ticker to bulk save games and assign points\nin the database\n\n    \n    \n    go func() { for { PersistGamesAndAssignPoints() time.Sleep(CLEANING_WINDOW_SECONDS * time.Second) } }()\n\nI am having so much fun using this stack and implementing it all in this\nartisanal way. And I am looking forward to the moment the scale will force me\nto rewrite it all!\n\nWill all of this manage to increase retention?\n\nDo you have any ideas or comments to improve Binary Duel?\n\nLeave them under this HK post or email me via\nsimonedutto8+binaryduel_at_gmail.com\n\nStay tuned!\n\n\u2192 Top\n\n\u00a9 2024 Simone Dutto. Made with Jekyll using the Tale theme.\n\n", "frontpage": false}
