{"aid": "40105121", "title": "I love programming but I hate the programming industry", "url": "https://www.deathbyabstraction.com/I-love-programming-but-I-hate-the-programming-industry", "domain": "deathbyabstraction.com", "votes": 90, "user": "conquestofdread", "posted_at": "2024-04-21 12:20:20", "comments": 48, "source_title": "I love programming but I hate the programming industry", "source_text": "I love programming but I hate the programming industry\n\n# death by abstraction\n\n# I love programming but I hate the programming industry\n\n### On being a faulty cog in a machine when the machine itself is faulty\n\n27 Mar 2024\n\nI never really fit into any software engineering job I\u2019ve had. The technical\nside of things got boring after I had gained a basic grasp of the inner logic\nof the codebase and no longer felt challenged, and then I wanted to do more,\nand more importantly - do it differently. I wondered about design decisions\nand their broader purpose: why are we doing this and why are we doing it in\nthis specific way? Might there be a better way? What metrics are we using to\ndetermine success and why? Although these questions weren\u2019t always posed aloud\nI got told I \u2018think too much\u2019 and \u2018care too much\u2019 when I could be using this\ntime to churn out more lines of code. I didn\u2019t belong, and I was too young and\ninsecure to articulate that this wasn\u2019t just a simple mismatch between my\ntalent and my position. It was that I fundamentally disagreed with the way\nthese places operate and wanted to do work to change them rather than\nperpetuate them.\n\nIf there ever was a part of me that thought \u2018there has to be better things out\nthere\u2019, looking at job postings for a couple of weeks in 2023 was enough to\nkill that illusion. 90% of the time when I read descriptions it is\nexcruciatingly obvious to me that whatever code the chosen candidates will end\nup writing at this job will be completely removed from any important problem\nnot only humanity, but even any individual human has ever had. Startup culture\nis shamelessly at the forefront of this industry\u2019s \u2018produce more code and ask\nless questions\u2019 policy. All most startups do is move investors money around\nwhile trying to acquire paid users by convincing them they need a product that\nis more often than not marginally useful at best. They usually fail at that,\nleaving behind thousands of lines of unmaintainable spaghetti code engineers\nwere bullied into writing in weeks instead of months using arbitrary trendy\ntechnologies. No one will ever look at that shit again except maybe as an\nexample of bad coding practices, engineers\u2019 time has been wasted and venture\ncapital largely ends up in the hands of the people that already possess\nsignificant capital - they may use that to fund another startup, and this\nwretched cycle continues. Job ads that try to paint this as some kind of\nexciting meaningful endeavour that will enrich people\u2019s lives and stimulate my\nengineering growth are an insult to my intelligence. I don\u2019t want to be a part\nof this - not just because it is arguably immoral but because it is\nfundamentally and infuriatingly boring and pointless.\n\nWhile established tech companies differ from startups organisationally and\nfinancially, they don\u2019t really contrast them culturally. Sure, the code you\nwrite at a FAANG might actually make its way to users, but what you as an\nindividual happen to think about any aspect of writing code will be more\nirrelevant than ever. You are a cog in a machine not only in the sense that\nthe product you are building is likely automating the worst aspects of\ncapitalism in increasingly sinister ways, but also in a practical sense,\nyou\u2019re a number: the size of your backend stack, or your tech interview score,\nor your performance review score. It\u2019s not so much this reality itself that\u2019s\nso atrocious to me, but more the fact that as engineers we\u2019re expected to find\nthis empty and humiliating grind even more aspirational than many other\nworkers are, and are even more discouraged from questioning any aspect of it.\n\nEssentially, the concept of critical thinking has been made anathema to\nengineering: as a programmer you are to focus solely on the how, rarely on the\nwhat, and certainly never on the why. For the rare code monkey that finds\nthemselves able and willing to critique the system they\u2019re producing for the\nmessage is clear: leave that shit at the door. A code monkey is prohibited\nfrom even identifying the lack of autonomy and creativity inherent to the\nposition - they can only strive to build more, never to build differently, or\nbuild different and better things.\n\nSo while this do-more-ask-less mentality of the tech world might produce more\ncode it also consistently leads to worse software. Even in the cases where\ncapital and other forces outside of our immediate control theoretically allow\nfor us to build software in a way that is sustainable, or has a positive\nimpact on the world at large, or is at the very least useful practically we\nstill often don\u2019t, because of simple inertia: it\u2019s easier and usually more\nviable to do what\u2019s on trend and reproduce the status quo once more. Worse\nyet, this same inertia then seeps into the entire tech stack this societally\nuseless product is built upon. The technologies all the way down to the\nlanguages, libraries, frameworks, and even code patterns become infected with\nthe same brand of novelty and gimmicks before actual innovation that plagues\nthe industry as a whole. After all, if you\u2019re not solving unconventional\nproblems, why would you need unconventional engineering?\n\nIn truth, the most interesting engineering problems are usually the ones which\narise naturally in our society, as opposed to those where technological\nadvancement is an end in and of itself, or even those which attempt to\nartificially create a market demand where there isn\u2019t one. Societal necessity\nis the best possible driving force of innovation - remember that historically\nthe most groundbreaking achievements in early computing have happened in the\nservice of the greater good. This is what I really want to do: I want every\nhow - from the programming language and paradigm, architecture, down to every\nline of code and piece of syntax - to be informed by the why of the system\nthat is being built. And I want that why to be a reflection of a genuine\nexisting need, not some bullshit business metric which pretty much exists for\nits own sake.\n\nSo far I haven\u2019t had the chance to actually meet someone who would share these\nvalues in any significant sense and would want to do this kind of engineering\nwork. Despite the isolation I often experience in my interactions with this\nindustry, I am confident in the value of my work and the importance of the\nthings I have to say. So if you are that person please reach out - it would be\ninteresting to know if a place for someone like me already exists somewhere.\nAnd if not I think it would benefit us to create it.\n\ncontact@deathbyabstraction.com\n\n", "frontpage": true}
