{"aid": "40157468", "title": "Austral: A systems language with linear types. (2021)", "url": "https://github.com/austral/austral", "domain": "github.com/austral", "votes": 2, "user": "fanf2", "posted_at": "2024-04-25 13:42:05", "comments": 0, "source_title": "GitHub - austral/austral: Systems language with linear types and capability-based security.", "source_text": "GitHub - austral/austral: Systems language with linear types and capability-\nbased security.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\naustral / austral Public\n\n  * Notifications\n  * Fork 34\n  * Star 1k\n\nSystems language with linear types and capability-based security.\n\naustral-lang.org/\n\n### License\n\nApache-2.0 license\n\n1k stars 34 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# austral/austral\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n11 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nsamestepFollow tutorial instructions for macOS build (#593)Feb 18, 202471258c2\n\u00b7 Feb 18, 2024Feb 18, 2024\n\n## History\n\n8,946 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Follow tutorial instructions for macOS build (#593)| Feb 18, 2024  \n  \n### bin\n\n|\n\n### bin\n\n| Add license information to all files in bin| Mar 1, 2023  \n  \n### docs\n\n|\n\n### docs\n\n| Add path documentation| Mar 26, 2023  \n  \n### editor\n\n|\n\n### editor\n\n| Clean up VS Code extension build process (#591)| Feb 17, 2024  \n  \n### examples\n\n|\n\n### examples\n\n| add Example.Greet (#578)| Jan 1, 2024  \n  \n### lib\n\n|\n\n### lib\n\n| Correct integer encoding of '\\n' newline char constant literal. (#580)| Jan\n1, 2024  \n  \n### standard\n\n|\n\n### standard\n\n| Fix fromLiteral for empty string (#594)| Feb 17, 2024  \n  \n### test-programs\n\n|\n\n### test-programs\n\n| Ensure import for ToFloat and Remainder. (#575)| Nov 7, 2023  \n  \n### test\n\n|\n\n### test\n\n| Add an --error-format flag| May 9, 2023  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Add flake.nix (#559)| Aug 8, 2023  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Install dependencies via dune-project / austral.opam| Jun 11, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Add LICENSE file| Mar 1, 2023  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Add flake.nix (#559)| Aug 8, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Add \"no implicit copies\" to anti-features list| Jul 9, 2023  \n  \n### ROADMAP.md\n\n|\n\n### ROADMAP.md\n\n| Fix year| Jan 2, 2023  \n  \n### austral.opam\n\n|\n\n### austral.opam\n\n| Install dependencies via dune-project / austral.opam| Jun 11, 2023  \n  \n### concat_builtins.py\n\n|\n\n### concat_builtins.py\n\n| Add license information to Python scripts| Mar 1, 2023  \n  \n### dune-project\n\n|\n\n### dune-project\n\n| Install dependencies via dune-project / austral.opam| Jun 11, 2023  \n  \n### flake.lock\n\n|\n\n### flake.lock\n\n| Add flake.nix (#559)| Aug 8, 2023  \n  \n### flake.nix\n\n|\n\n### flake.nix\n\n| Add flake.nix (#559)| Aug 8, 2023  \n  \n### run-examples.sh\n\n|\n\n### run-examples.sh\n\n| add Example.Greet (#578)| Jan 1, 2024  \n  \n### run-tests.sh\n\n|\n\n### run-tests.sh\n\n| Add license information to shell scripts| Mar 1, 2023  \n  \n### shell.nix\n\n|\n\n### shell.nix\n\n| Add Python 3.11 to the shell.nix| Jun 3, 2023  \n  \n## Repository files navigation\n\n# Austral\n\nAustral is a new language.\n\nFeatures:\n\n  * Linear types: linear types allow resources to be handled in a provably-safe manner. Memory can be managed safely and without runtime overhead, avoiding double free(), use-after-free errors, and double fetch errors. Other resources like file or database handles can also be handled safely.\n\n  * Capabilities: linear capabilities enable fine-grained permissioned access to low-level facilities. Third-party dependencies can be constrained in what types of resources they can access. This makes the language less vulnerable to supply chain attacks.\n\n  * Typeclasses: typeclasses, borrowed from Haskell, allow for bounded ad-hoc polymorphism.\n\n  * Safe Arithmetic: Austral has well-defined semantics for all arithmetic operations on numeric types. There are distinct operations for trap-on-overflow arithmetic and modular arithmetic, as in Ada.\n\n  * Algebraic Data Types: algebraic data types, as in ML or Haskell, with exhaustiveness checking.\n\nAnti-features:\n\n  * No garbage collection.\n  * No destructors.\n  * No exceptions (and no surprise control flow).\n  * No implicit function calls.\n  * No implicit type conversions.\n  * No implicit copies.\n  * No global state.\n  * No subtyping.\n  * No macros.\n  * No reflection.\n  * No Java-style @Annotations.\n  * No type inference, type information flows in one direction.\n  * No uninitialized variables.\n  * No pre/post increment/decrement (x++ in C).\n  * No first-class async.\n  * No function overloading (except through typeclasses, where it is bounded).\n  * No arithmetic precedence.\n  * No variable shadowing.\n\n## Example\n\nCalculate and print the 10th Fibonacci number:\n\n    \n    \n    module body Fib is function fib(n: Nat64): Nat64 is if n < 2 then return n; else return fib(n - 1) + fib(n - 2); end if; end; function main(): ExitCode is print(\"fib(10) = \"); printLn(fib(10)); return ExitSuccess(); end; end module body.\n\nBuild and run:\n\n    \n    \n    $ austral compile fib.aum --entrypoint=Fib:main --output=fib $ ./fib fib(10) = 55\n\n## Building with Nix\n\nIf you have Nix, this will be much simpler. Just:\n\n    \n    \n    $ nix-shell $ make\n\nAnd you're done.\n\n## Building without Nix\n\nBuilding the austral compiler requires make and the dune build system for\nOCaml, and a C compiler for building the resulting output. You should install\nOCaml 4.13.0 or above.\n\nFirst:\n\n    \n    \n    $ git clone git@github.com:austral/austral.git $ cd austral\n\nNext, install opam. On Debian/Ubuntu you can just do:\n\n    \n    \n    $ sudo apt-get install opam $ opam init\n\nThen, create an opam switch for austral and install dependencies via opam:\n\n    \n    \n    opam switch create austral 4.13.0 eval $(opam env --switch=austral) opam install --deps-only -y .\n\nFinally:\n\n    \n    \n    make\n\nTo run the tests:\n\n    \n    \n    $ ./run-tests.sh\n\nTo build the standard library:\n\n    \n    \n    $ cd standard $ make\n\n## Usage\n\nSuppose you have a program with modules A, B, and C, in the following files:\n\n    \n    \n    src/A.aui src/A.aum src/B.aui src/B.aum src/C.aui src/C.aum\n\nTo compile this, run:\n\n    \n    \n    $ austral compile \\ src/A.aui,src/A.aum \\ src/B.aui,src/B.aum \\ src/C.aui,src/C.aum \\ --entrypoint=C:main \\ --output=program\n\nThe --entrypoint option must be the name of a module, followed by a colon,\nfollowed by the name of a public function with either of the following\nsignatures:\n\n  1. function main(): ExitCode;\n  2. function main(root: RootCapability): ExitCode;\n\nThe ExitCode type has two constructors: ExitSuccess() and ExitFailure().\n\nFinally, the --output option is just the path to dump the compiled C to.\n\nBy default, the compiler will emit C code and invoke cc automatically to\nproduce an executable. To just produce C code, use:\n\n    \n    \n    $ austral compile --target-type=c [modules...] --entrypoint=Foo:main --output=program.c\n\nIf you don't need an entrypoint (because you're compiling a library), instead\nof --entrypoint you have to pass --no-entrypoint:\n\n    \n    \n    $ austral compile --target-type=c [modules...] --no-entrypoint --output=program.c\n\nIf you just want to typecheck without compiling, use the tc target type:\n\n    \n    \n    $ austral compile --target-type=tc [modules...]\n\nGenerated C code should be compiled with:\n\n    \n    \n    $ gcc -fwrapv generated.c -lm\n\n## Status\n\n  1. The bootstrapping compiler, written in OCaml, is implemented. The main limitation is it does not support separate compilation. In practice this is not a problem: there's not enough Austral code for this to matter.\n\n  2. The compiler implements every feature of the spec.\n\n  3. A standard library with a few basic data structures and capability-based filesystem access is being designed.\n\n## Contributing\n\nSee: CONTRIBUTING.md\n\n## Community\n\n  * Discord\n\n## Roadmap\n\nCurrently:\n\n  * Expanding the standard library.\n\nNear-future work:\n\n  * Build tooling and package manager.\n\n# License\n\nCopyright 2018\u20132023 Fernando Borretti.\n\nLicensed under the Apache 2.0 license with the LLVM exception. See the LICENSE\nfile for details.\n\n## About\n\nSystems language with linear types and capability-based security.\n\naustral-lang.org/\n\n### Topics\n\ncompiler capabilities linear-types\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\nCustom properties\n\n### Stars\n\n1k stars\n\n### Watchers\n\n28 watching\n\n### Forks\n\n34 forks\n\nReport repository\n\n## Releases 11\n\n0.2.0 Latest\n\nJun 27, 2023\n\n\\+ 10 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 21\n\n\\+ 7 contributors\n\n## Languages\n\n  * OCaml 85.5%\n  * TypeScript 5.5%\n  * Python 3.9%\n  * Standard ML 1.3%\n  * C 1.1%\n  * Vim Script 0.9%\n  * Other 1.8%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
