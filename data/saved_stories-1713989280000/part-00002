{"aid": "40144575", "title": "\u300e 0x61 \u300f- Cloud and Tunnels", "url": "https://x61.ar/log/2024/01/11012024104105-cloud_and_tunnels.html", "domain": "x61.ar", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-24 14:07:33", "comments": 0, "source_title": "\u300e 0x61 \u300f- /var/log", "source_text": "\u300e 0x61 \u300f- /var/log\n\n## \u30b4\u30f3\u30b6\u30ed\n\n[x61]\n\n# :.: Cloud and tunnels\n\nEveryone have a cloud, I want a cloud too... but in between countries!\n\n## :. The problem\n\nCountry A have no possibility to open a port to the internet and expose my\nhttpd(8) with nextcloud on it... but what I do have is another server on\nCountry B with full control of the ports and connection and all the OpenBSD\nset of tools to play with it. In this episode we'll combine wg(4), httpd(8)\nand relayd(8) to solve this issue.\n\n## :. The setup\n\nCountry A is an apu2 running nextcloud, the setup is the same I described on\nthat article but without relayd(8), which instead will be in Country B where I\nhave full control of the open ports and flow connections, you have a full\nrelayd(8) setup on the nextcloud article. We have Country A with a full\nnextcloud setup over httpd(8) as the MESSAGE in the package says (fully\nfunctional over local network of course) and we have Country B exposed to the\ninternet, how we can connect the cloud to the open internet? Exactly! Let's\nmake a wg(4) tunnel from A to B.\n\nSorry but no, I will not explain how to make a tunnel between 2 OpenBSD\nmachines, I already did that here and if you don't like my way, solene also\nwrote one.\n\n## :. The solution\n\nWe have now Country A and Country B connected by wireguard, let's say that\nCountry B has a 10.10.0.0/24 network for the VPN and it's the gateway with the\nIP 10.10.0.1 and Country A it's connected to it with the internal IP\n10.10.0.10.\n\nOn Country A I set my pf to allow the http (not https since that will be\nmanage by Country B over relayd(8)) and ssh connections over all the networks\nI have, local and VPN with something like:\n\n    \n    \n    ... pass in log on any proto tcp from any to any port 22 ## http pass in log on any proto tcp from any to any port 80 ...\n\nLet's check if we can reach Country A's ports from Country B inside the\ntunnel, the result should be something like this:\n\n    \n    \n    countra_b$ telnet 10.10.0.10 80 Trying 10.10.0.10... Connected to 10.10.0.10. Escape character is '^]'.\n\nThe locations can see each other now, time to add the Country A to the\nrelayd(8) config. If you already read the article specially the relayd(8)\npart, you have it running on Country B with other sites and servers, so\nfollowing the same syntax we add the Country A stuff.\n\nThe table:\n\n    \n    \n    ... table <countra_a> { 10.10.0.10 } ...\n\nThe protocol:\n\n    \n    \n    ... tls keypair \"cloud.country-a.com\" ... match request quick header \"Host\" value \"cloud.country-a.com\" tag \"country_a\" pass request quick tagged \"country_a\" forward to <countra_a> ...\n\nThe relay:\n\n    \n    \n    ... forward to <countra_a> port 80 check tcp ...\n\nPretty easy, now reload it, and check that the host is UP across countries:\n\n    \n    \n    $ doas rcctl reload relayd relayd(ok) $ doas relayctl show hosts 4 table country_a:80 active (1 hosts) 4 host 10.10.0.10 100.00% up total: 2/2 checks\n\nWe are done, if you go to the url cloud.country-a.com you should see the\nnextcloud instance or whatever you have running there, we have now a cloud\nacross countries running inside a tunnel and exposed to the internet using\nalmost all OpenBSD's base tools.\n\nfind me at: honk | mastodon | twitter | rss\n\npage generated: 11012024104105\n\n", "frontpage": false}
