{"aid": "40136714", "title": "Testing the Practical Common Lisp Code on Medley", "url": "https://journal.paoloamoroso.com/testing-the-practical-common-lisp-code-on-medley", "domain": "paoloamoroso.com", "votes": 1, "user": "zeveb", "posted_at": "2024-04-23 20:12:49", "comments": 0, "source_title": "Testing the Practical Common Lisp code on Medley", "source_text": "Testing the Practical Common Lisp code on Medley \u2014 Paolo Amoroso's Journal\n\n# Paolo Amoroso's Journal\n\n## Testing the Practical Common Lisp code on Medley\n\nApril 14, 2024\n\nWhen the Medley Interlisp Project began reviving the system around 2020, its\nCommon Lisp implementation was in the state it had when commercial development\npetered off in the 1990s, mostly prior to the ANSI standard.\n\nBack then Medley Common Lisp mostly supported CLtL1 plus CLOS and the\ncondition system. Some patches submitted several years later to bring the\nlanguage closer to CLtL2 needed review and integration.\n\nAside from these general areas there was no detailed information on what\nMedley missed or differed from ANSI Common Lisp.\n\nIn late 2021 Larry Masinter proposed to evaluate the ANSI compatibility of\nMedley Common Lisp by running the code of popular Common Lisp books and\ndocumenting any divergences. In March of 2024 I set to work to test the code\nof the book Practical Common Lisp by Peter Seibel.\n\nI went over the book chapter by chapter and completed a first pass,\ndocumenting the effort in a GitHub issue and a series of discussion posts. In\naddition I updated a running list of divergences from ANSI Common Lisp.\n\n## Methodology\n\nPart of the code of the book is contained in the examples in the text and the\nrest in the downloadable source files, which constitute some more substantial\nprojects.\n\nTo test the code on Medley I evaluated the definitions and expressions at a\nXerox Common Lisp Exec, noting any errors or differences from the expected\noutcomes. When relevant source files were available I loaded them prior to\nevaluating the test expressions so that any required definitions and\ndependencies were present. ASDF hasn't been ported to Medley, so I loaded the\nfiles manually.\n\n### Adapting the code\n\nBefore running the code I had to apply a number of changes. I filled in any\nmissing function and class definitions the book leaves out as incidental to\nthe exposition. This also involved adding appropriate function calls and\nobject instantiations to exercise the definitions or produce the expected\noutput.\n\nThe source files of the book needed adaptation too due to the way Medley\nhandles pure Common Lisp files.\n\n### Skipped code\n\nThe text and source files contain also code I couldn't run because some\nfeatures are known to be missing from Medley, or key dependencies can't be\nfulfilled. For example, a few chapters rely on the AllegroServe HTTP server\nwhich doesn't run on Medley. Although Medley does have a XNS network stack,\nproviding the TCP/IP network functions AllegroServe assumes would be a major\nproject.\n\nSome chapters depend on code in earlier chapters that uses features not\navailable in Medley Common Lisp, so I had to skip those too.\n\n## Findings\n\nHaving completed the first pass over Practical Common Lisp, my initial\nimpression is Medley's implementation of Common Lisp is capable and extensive.\nIt can run with minor or no changes code that uses most basic and intermediate\nCommon Lisp features.\n\nThe majority of the code I tried ran as expected. However, this work did\nreveal significant gaps and divergences from ANSI.\n\nTo account for the residential environment and other peculiarities of Medley,\npackages need to be defined in a specific way. For example, some common\ndefpackage keyword arguments differ from ANSI. Also, uppercase strings seem to\nwork better than keywords as package designators.\n\nAs for the gaps the loop iteration macro, symbol-macrolet, the #p reader\nmacro, and other features turned out to be missing or not work.\n\nWhile the incompatibilities with ANSI Common Lisp are relativaly easy to\naddress or work around, what new users may find more difficult is\nunderstanding and using the residential environment of Medley.\n\n## Bringing Medley closer to ANSI Common Lisp\n\nTo plug the gaps this project uncovered Larry ported or implemented some of\nthe missing features and fixed a few issues.\n\nHe ported a loop implementation which he's enhancing to add missing\nfunctionality like iterating over hash tables. Iterating over packages, which\nloop lacks at this time, is trickier. More work went into adding #p and an\nexperimental symbol-macrolet.\n\nReviewing and merging the CLtL2 patches is still an open issue, a major\nproject that involves substantial effort.\n\n## Future work and conclusion\n\nWhen the new features are ready I'll do a second pass to check if more of the\nskipped code runs. Another outcome of the work may be the beginning of a test\nsuite for Medley Common Lisp.\n\nRegardless of the limitations, what the project highlighted is Medley is ready\nas a development environment for writing new Common Lisp code, or porting\nlibraries and applications of small to medium complexity.\n\n#CommonLisp #Interlisp #Lisp\n\nDiscuss... Email | Reply @amoroso@fosstodon.org\n\n", "frontpage": false}
