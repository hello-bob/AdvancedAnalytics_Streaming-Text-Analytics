{"aid": "40133278", "title": "Taking regular screenshots of my website", "url": "https://alexwlchan.net/2024/scheduled-screenshots/", "domain": "alexwlchan.net", "votes": 2, "user": "todsacerdoti", "posted_at": "2024-04-23 15:46:51", "comments": 0, "source_title": "Taking regular screenshots of my website", "source_text": "Taking regular screenshots of my website \u2013 alexwlchan\n\nSkip to main content\n\n# Taking regular screenshots of my website\n\n  * Posted 23 April 2024\n  * Tagged with digital-preservation, screenshots\n\nA few weeks ago I was reading the DPC Bit List, an inventory of digital\nmaterials and the risks associated with their long-term preservation. What\nformats need urgent attention before they\u2019re lost forever, what mediums are\nalready being well-preserved, and so on. For example, Adobe Flash animations\nare \u201cpractically extinct\u201d, while emails are merely \u201cendangered\u201d.\n\nSomething that struck me is how the Bit List treats the content and interface\nof online services as two separate concerns. Most preservation efforts focus\non saving the content \u2013 the photos, videos, and text that we upload to the\nweb. We don\u2019t have as many records of the interfaces \u2013 the \u201clook and feel\u201d of\nthese sites. But if you only save one and not the other, you\u2019re losing a lot\nof important context about how we use those sites, and the influence of their\ndesigns.\n\nOne present-day example is TikTok. It popularised the use of vertical swiping\nto move between videos, and that design makes it easy for users to watch a\ncontinuous stream of content. It\u2019s very effective at keeping people in the\napp, and it\u2019s been copied by lots of other services. Although it seems well-\nknown and obvious to us today, it\u2019ll be easy to forget the novelty and impact\nof this idea as social media continues to evolve.\n\nThis user interface is behind concerns about the addictive nature of TikTok,\nbecause it requires minimal effort to stay in the app and watch another video.\nIt\u2019s also affected how videos are made, because creators need to capture your\nattention quickly before you swipe to watch something else. Popular videos on\nTikTok look different to those on YouTube, on television, or in cinema.\n\nYou can\u2019t understand TikTok or its effect on the world without understanding\nthis interface. Watching a single TikTok video in an isolated player isn\u2019t the\nsame as experiencing it in the app.\n\nThis distinction between content and interfaces got me thinking about how you\npreserve user interfaces. One challenge is that most user interfaces don\u2019t\nhave a single version. Designs are constantly changing as companies add\nfeatures, fix bugs, and try to find new ways to get more of our attention.\nEven if you put aside the technical issues, we can only really preserve\nsnapshots of how a service looked at a particular point in time.\n\nOne way to create these snapshots is with screenshots or screen recordings. I\nthink they represent a good tradeoff of effort and preservation value. A\nstatic screenshot isn\u2019t as complete as a fully interactive, working copy of a\nthing, but it\u2019s much easier to create, to preserve, and to access later. It\nrecords the look, if not the feel.\n\nI was mulling over this for a while, and I had an idea. I like having a set of\nscreenshots as a visual history of the stuff I\u2019ve worked on (including this\nsite), but I\u2019m not very good at remembering to create them. I just finished a\nbunch of design tweaking on this site, and I completely forgot to take a\nscreenshot of what it looked like before I started making changes.\n\nComputers are pretty good at doing things on a repetitive schedule \u2013 wouldn\u2019t\nit be nice if I could automate taking these screenshots? What if a computer\ntook a screenshot of my website every month? Or every week? Or every day?\n\nI already had a vague idea of how to take screenshots programatically. At my\nlast job we used Playwright as a way to do end-to-end testing of our websites.\nPlaywright is a library for automating web browsers \u2013 for example, you can use\nit to open a website in Chromium, click buttons, check the page loads\ncorrectly, and so on.\n\nIt can also take a screenshot of a web page, like so:\n\n    \n    \n    $ npm install playwright $ npx playwright install chromium $ npx playwright screenshot --full-page \"alexwlchan.net\" \"screenshot.png\"\n\nThis installs Playwright, then opens my website in Chromium and takes a\nscreenshot of the page. The --full-page flag ensures the image contains the\nentire scrollable page, as if you had a tall screen and could fit the whole\npage in view without scrolling.\n\nOnce I knew how to take a screenshot once, I wanted to do it on a regular\nschedule, and save those images somewhere. There are lots of ways to run code\non a schedule; I decided to use GitHub Actions because it\u2019s what I\u2019m familiar\nwith.\n\nMy code for taking scheduled screenshots is entirely contained in a single\nGitHub Actions workflow. It\u2019s in a file called\n.github/workflows/take_screenshots.yml, and it\u2019s only 79 lines:\n\n    \n    \n    name: Take screenshots on: push: branches: - main schedule: - cron: '7 7 * * 1' # Every Monday at 7:07am UTC jobs: take-screenshots: runs-on: macos-latest strategy: matrix: include: - url: alexwlchan.net filename_prefix: alexwlchan.net - url: books.alexwlchan.net filename_prefix: books # Setting max-parallel ensures that these jobs will run in serial, # not parallel, so we don't have conflicting tasks trying to # push new commits. max-parallel: 1 steps: - name: Checkout repository uses: actions/checkout@v4 with: # Check out the latest version of main, which may not be the # commit that triggered this event -- jobs in this workflow will # push new commits and update main, and we want each job to # get the latest code from main. ref: main # Make sure we don't download the existing screenshots as part # of this process -- this Action is strictly append-only, so # don't waste limited LFS bandwidth on it. lfs: false - name: Install Node.js uses: actions/setup-node@v4 with: node-version: 20 - name: Install Playwright and browser run: | npm install playwright npx playwright install chromium - name: Take screenshot run: | today=$(date +\"%Y-%m-%d\") screenshot_path=\"screenshots/${{ matrix.filename_prefix }}.$today.png\" # Make these variables available to subsequent steps # See https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable echo \"today=$today\" >> \"$GITHUB_ENV\" echo \"screenshot_path=$screenshot_path\" >> \"$GITHUB_ENV\" mkdir -p \"$(dirname \"$screenshot_path\")\" # If there's already a screenshot for today, don't # bother overwriting it. if [[ -f \"$screenshot_path\" ]]; then exit 0; fi npx playwright screenshot \\ --full-page \\ --wait-for-timeout 10000 \\ \"${{ matrix.url }}\" \"$screenshot_path\" - name: Push changes to GitHub run: | git add \"$screenshot_path\" git commit -m \"Add screenshot for ${{ matrix.url }} for $today\" || exit 0 git push origin main\n\nThis runs once a week on Monday mornings \u2013 I don\u2019t update my websites that\noften, so I don\u2019t need more frequent screenshots.\n\nIt installs Playwright, and uses it to take screenshots of two websites:\nalexwlchan.net (this site) and books.alexwlchan.net (my book tracker). The\nimages are saved in a folder called screenshots, and the filenames include\nboth the name of the site and the date taken, e.g.\nalexwlchan.net.2024-04-22.png or books.2024-03-21.png.\n\nIf I want to get screenshots of a different website, I can add to the list in\nthe matrix section.\n\nI had to add a timeout to Playwright (--wait-for-timeout 10000) to ensure it\ndownloads all the images correctly. Before I added that option, I\u2019d sometimes\nget screenshots with holes where the images hadn\u2019t loaded in time.\n\nOnce the screenshot has been created, it gets committed to Git and pushed to\nGitHub. I had to tweak the GITHUB_TOKEN permissions to allow GitHub Actions to\npush commits to my repo. This is inspired by Simon Willison\u2019s \u201cgit scraping\u201d\ntechnique, but I\u2019m tracking images rather than text.\n\nBecause PNG files can get quite big and I have a lot of them, I decided to use\nGit Large File Storage (LFS) with this repo \u2013 vanilla Git can struggle with\nlarge binary files. This is my first time using Git LFS, and it was pleasantly\neasy to set up following the Getting Started guide:\n\n    \n    \n    $ brew install git-lfs $ git lfs install $ cd ~/repos/scheduled-screenshots $ git lfs track \"*.png\" $ git add .gitattributes $ git commit -m \"Add .gitattributes file to store PNG images in Git LFS\"\n\nAnd that\u2019s what it took to set up scheduled screenshots. If you want to see\nthe code in a repo, or see the growing collection of screenshots, the GitHub\nrepo is alexwlchan/scheduled-screenshots.\n\nThis is great for creating new screenshots, but what about everything that\ncame before? This site is nearly 12 years old, and it\u2019d be nice for that to be\nreflected in the visual record.\n\nI dove into the Wayback Machine to backfill the old screenshots. My site isn\u2019t\nindexed that often \u2013 on average about once a month \u2013 but I can fill in some of\nthe gaps this way. First I used the Wayback Machine\u2019s CDX Server API to get a\nlist of captures, then I used Playwright to take screenshots. I had to adjust\nthe timeouts to make sure everything loaded correctly, but I got them all to\nwork eventually, and I got a hundred or so historical screenshots.\n\nI was surprised by was how many issues I found. There were 116 captures of my\nbook tracker, and of those 13 were clearly broken \u2013 the CSS or images hadn\u2019t\nbeen saved, and so the page was unstyled or had gaps where the images were\nmeant to go.\n\nA further 7 were broken in subtle ways, where the HTML and CSS didn\u2019t match.\nFor example, I found one HTML capture from 2021 that\u2019s loading CSS from 2024.\nThe Wayback Machine shows you a working page, but it\u2019s a hallucination \u2013\nthat\u2019s not what the page looked like in 2021. (The rounded corners are a dead\ngiveaway \u2013 I didn\u2019t add those until 2022.)\n\nI love the Wayback Machine and I think it\u2019s a great service, but you shouldn\u2019t\nrely on it to preserve your website. I\u2019m glad these captures exist exist, but\nthey\u2019re a bit shaky as a preservation record. If there\u2019s a website you care\nabout, make sure you have your own system that saves the stuff you think is\nimportant \u2013 don\u2019t just rely on the Wayback Machine.\n\nMy scheduled screenshots are now up and running, and every Monday I\u2019ll get a\nnew image to record the visual history of this site.\n\nIf you want to set up something similar for your websites, here are the steps:\n\n  1. Create a new GitHub repository\n  2. Create a new file .github/workflows/take_screenshots.yml with the contents of the YAML file earlier in this post\n  3. Give write access to the GITHUB_TOKEN used by GitHub Actions, so it can push to your repo\n  4. Change the list of URLs/filename prefixes in the matrix block for the websites you want to screenshot\n\nThe best time to start taking regular screenshots of my website was when I\nregistered the domain name. The second best time is now.\n\nBy Alex Chan. If you like what I do, perhaps say thanks? Non-code content\nlicensed under CC BY 4.0; code under MIT. Privacy policy.\n\n  * email\n  * what I\u2019m reading\n  * RSS feed\n  * Mastodon\n  * Kofi\n\n", "frontpage": false}
