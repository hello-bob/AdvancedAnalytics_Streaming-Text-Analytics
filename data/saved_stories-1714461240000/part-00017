{"aid": "40203676", "title": "I Built an Ld_preload Worm", "url": "https://lcamtuf.substack.com/p/that-time-i-built-an-ld_preload-worm", "domain": "lcamtuf.substack.com", "votes": 9, "user": "zdw", "posted_at": "2024-04-29 20:23:32", "comments": 0, "source_title": "That time I built an LD_PRELOAD worm", "source_text": "That time I built an LD_PRELOAD worm - lcamtuf\u2019s thing\n\n# lcamtuf\u2019s thing\n\nShare this post\n\n#### That time I built an LD_PRELOAD worm\n\nlcamtuf.substack.com\n\n# That time I built an LD_PRELOAD worm\n\n### Teenagers' hands are the devil's playthings.\n\nApr 29, 2024\n\n12\n\nShare this post\n\n#### That time I built an LD_PRELOAD worm\n\nlcamtuf.substack.com\n\n3\n\nShare\n\nOne of the most interesting aspects of working in information security is the\ntask of developing proof-of-concept code. In essence, you often find yourself\nwriting malicious programs to prove that a hypothesized flaw is real \u2014 and to\nconvince coworkers, clients, or third-party software vendors that they need to\nact.\n\nThe line between securing systems and aiding the bad guys can be thin; it\ntakes just a couple of finishing touches to turn a proof-of-concept exploit\ninto a tool that can do real harm. In one famous instance \u2014 the Morris worm of\n1988 \u2014 it was the researcher himself who couldn\u2019t resist the temptation. In\nmost other cases, the work is done by less scrupulous parties who get their\nhands on the research, thus leading to endless debates about the ethics of\nvulnerability disclosure.\n\nWell \u2014 yesterday, while digging through the backups of my files from the late\n1990s and thereabouts, I accidentally rediscovered by far the most risqu\u00e9\nproof-of-concept of my own making: a privately-shared demonstration of an\nLD_PRELOAD worm, dubbed unicorns.so, and apparently written to settle an\nargument about distributed trust.\n\nIf you\u2019re unfamiliar with LD_PRELOAD, it\u2019s a fabulous debugging mechanism on\nUnix-like systems. Almost all common programs are dynamically linked; in other\nwords, instead of carrying their own copies of functions such as fopen(), they\npull them in from a system-wide shared library. The LD_PRELOAD variable is\nused to instruct the linker \u2014 a small program responsible for finding and\nloading this shared code \u2014 to check a location of your choice first. In\neffect, it lets you provide a replacement for any library call.\n\nThe unicorns.so library had three major components. The first and least\ninteresting part simply hid its own existence from the affected process. For\nexample, to conceal the LD_PRELOAD variable in the output of the set command,\nit tampered with printf():\n\n>\n>     int printf(char* format, ...) { int r; char* o; va_list p; va_start(p,\n> format); o = va_arg(p, char*); va_end(p); if (unicorn_printf_ignore > 0) {\n> unicorn_printf_ignore--; return 0; } if ((!strcmp(format, \"%s=\")) &&\n> (!strcmp(o, \"LD_PRELOAD\"))) { debug(\"Unicorns: Trying to hide LD_PRELOAD\n> list attempt (set).\\n\"); unicorn_printf_ignore = 2; return 0; } va_start(p,\n> format); r = vprintf(format, p); va_end(p); return r; }\n\nThe second component of the library messed with Tatu Yl\u00f6nen\u2019s SSH program,\nalong with its then-nascent replacement: OpenSSH. When it detected a\nsuccessful connection to a remote server, it injected a couple of hidden\ncommands. The commands propagated the library to the target system by adding\nan LD_PRELOAD line to the remote account\u2019s shell initialization files:\n\n>\n>     test -s .addressbook.lu~ && exit 1 cat >.addressbook.lu~\n> QQ=`LD_PRELOAD=$PWD/.addressbook.lu~ ls /etc/passwd` test \"$QQ\" = \"\" && rm\n> -f .addressbook.lu~ test \"$QQ\" = \"\" && exit 1 echo -e '\\nexport\n> LD_PRELOAD='$PWD/.addressbook.lu~ exec bash >>.bash_profile exit 0\n\nIn effect, unicorns.so was a computer worm; it hopped from system to system by\nexploiting transitive trust. All you had to do is bootstrap it once the\nfollowing way:\n\n>\n>     LD_PRELOAD=$PWD/unicorns.so bash ssh user@somehost\n\nThe final component of the library was responsible for detecting and\nintercepting the execution of su or sudo. The two programs are the most common\nway to elevate privileges on Unix-like systems, and are incorrectly believed\nto be safer than logging in directly into the administrator\u2019s account. To\namplify its spread to other servers, the worm needed to infect all user\naccounts on the affected machine \u2014 and so it needed to follow this path.\n\nThe two binaries themselves are setuid \u2014 that is, they have a special\nfilesystem flag that prompts the operating system to execute them with\nelevated privileges, and instructs the linker to disregard LD_PRELOAD. That\nsaid, this security boundary is illusory. You don\u2019t need to tamper with the\nprograms themselves; it\u2019s sufficient to tamper with their I/O.\n\nThe most elegant way to do this is probably to allocate a new pseudo-terminal\nvia /dev/ptmx, run su on that new terminal, and act as an intermediary \u2014\ninjecting evil commands while presenting the user with a sanitized view. A\nsimpler option is to exploit a neat race condition: when two programs perform\na blocking read() on the same terminal, one wins and another loses \u2014 and when\nsu displays a password prompt, we could make sure that the winner is the evil\nlibrary. The captured password could be then seamlessly re-injected by using\nthe TIOCSTI call.\n\nMy motivation for this code was to demonstrate the fragility of distributed\ntrust and to take a potshot at the paradigm of using su and sudo instead of\nlogging in as root. That said, I played myself: discussing the implementation\npublicly seemed too risky, so the code ended up in the drawer \u2014 and the\nsporadic discussion of these security issues continued for another two decades\nor so. Now that the era of multi-tenant Unix systems is mostly over, the\nproblems are less pressing than they used to be.\n\n12\n\nShare this post\n\n#### That time I built an LD_PRELOAD worm\n\nlcamtuf.substack.com\n\n3\n\nShare\n\n3 Comments\n\nBen Hekster2 hrs agoVery cool! Not really the same thing, but reminded me of\n'Reflections on Trusting Trust';\nhttps://dl.acm.org/doi/10.1145/358198.358210Expand full commentLikeReplyShare  \n---  \n  \nJoey5 hrs agoAwesome but your unicorn.so link is dead :-)Expand full\ncommentLikeReplyShare  \n---  \n  \n1 more comment...\n\nReady for more?\n\n\u00a9 2024 lcamtuf\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": true}
