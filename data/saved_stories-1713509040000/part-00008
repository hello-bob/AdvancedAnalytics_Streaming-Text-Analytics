{"aid": "40080910", "title": "Show HN: Tiger \u2013 Function Hub for LLM Agents", "url": "https://github.com/Upsonic/Tiger", "domain": "github.com/upsonic", "votes": 8, "user": "gorkemcetin", "posted_at": "2024-04-18 21:28:47", "comments": 0, "source_title": "GitHub - Upsonic/Tiger: Neuralink for your AI Agents", "source_text": "GitHub - Upsonic/Tiger: Neuralink for your AI Agents\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nUpsonic / Tiger Public\n\n  * Notifications\n  * Fork 3\n  * Star 51\n\nNeuralink for your AI Agents\n\ndocs.upsonic.co/tiger\n\n### License\n\nMIT license\n\n51 stars 3 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# Upsonic/Tiger\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n6 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nonuratakanUpdate signin.pyApr 17, 20241ffa70c \u00b7 Apr 17, 2024Apr 17, 2024\n\n## History\n\n57 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Added upload.yml to upload paths| Apr 9, 2024  \n  \n### assets\n\n|\n\n### assets\n\n| Add files via upload| Apr 11, 2024  \n  \n### tiger\n\n|\n\n### tiger\n\n| Update signin.py| Apr 17, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial commit| Apr 5, 2024  \n  \n### CODE_OF_CONDUCT.md\n\n|\n\n### CODE_OF_CONDUCT.md\n\n| Create CODE_OF_CONDUCT.md| Apr 7, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Changed copyright holder| Apr 5, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 17, 2024  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| Added telegram module| Apr 13, 2024  \n  \n## Repository files navigation\n\n# Tiger: Neuralink for your AI Agents\n\nSetup \u2022\n\nIntegrations: crewAI Integration \u2022 LangChain Integration \u2022 AutoGen Integration\n\u2022 Telegram Integration \u2022\n\nSources: Currently Tools \u2022 Custom Tools (On-Prem Docker) \u2022 Public Dashboard \u2022\n\n# What is Tiger?\n\nTiger is a community-driven project developing a reusable and integrated tool\necosystem for LLM Agent Revolution. It utilizes Upsonic for isolated tool\nstorage, profillibg and for the automatic generation of documents. With Tiger,\nyou can create a customized environment for your agents or leverage the robust\nand publicly maintained Tiger \ud83d\udc05 curated by the community itself.\n\n## Details\n\nTiger, influenced by Neuralink, provides an AI-oriented computer interface\nwith threads connected to the LLM interface. It offers a platform for AIs to\ncontrol a computer by simply 'thinking'.\n\nWith Tiger, your LLM agents can write and execute code, use search engines,\nmanage your calendar, control your mouse and keyboard, speak into your\nheadphones, and much more. Essentially, anything conceived by your agent,\nTiger will transform into concrete actions. This embodies the core philosophy\nof the Tiger project \u2013 to harness AI intelligence to generate tangible actions\nand support standard infrastructures. Our goals include:\n\n  * Providing a Utility point for agent tools across any framework that utilizes a function call mechanism,\n  * Building and nurturing a Community of tool support across diverse technologies and disciplines,\n  * Developing a Free, Open and MIT licensed tool library for the AI agent ecosystem.\n\n# Setup\n\nTiger projects have a general usage public library at tiger.upsonic.co. Its\ninclude the tools that in tools library. For usage this you can use the\nstandart connection that in upsonic python library. After installing the\nupsonic library we will use the Tiger object wand integrate to your agents.\n\n  * Tiger requires equal or higher python version to 3.8\n\n    \n    \n    pip3 install upsonic\n\n## Currently Tools\n\nWe are working on Upsonic and the tools that inside the tools folder is\nsending to public tiger in each release. We are aiming to create tools without\nany api key and just like normal human events like searching on google with\nmouse, keyboard and browser.\n\n  * Interpreter\n\n    * python\n\n      * check_package\n      * execute\n      * install_package\n    * sh\n\n      * execute\n  * Search\n\n    * google\n    * duckduckgo\n    * read_website\n  * System\n\n    * os_name\n    * architecture\n    * python_version\n  * Knowledge\n\n    * put\n    * pull\n    * delete\n    * index\n    * reset\n  * Communication\n\n    * telegram\n\n      * as_user\n\n        * delete_message\n        * get_last_dialogs\n        * get_last_messages\n        * send_message\n        * signin\n\nIf you want to add functions to public and strongest Tiger you can see to\nAdding Tools section.\n\n## Public Dashboard\n\nFor the public Tiger you can see the functions and their documentations and\nreadmes in tiger.upsonic.co. You can use this place for documentation also.\n\nAuth\n\n  * username: tiger\n  * password: tiger\n\n## Documentation of Tiger Tools\n\nThanks to Upsonic we just write the codes and its gives us an storage system\nwith detailed documentation and cpu ram usage for each function. Also you can\nmake search and use functions in your other projects with connection code.\n\nAuth\n\n  * username: tiger\n  * password: tiger\n\n# crewAI Integration\n\nTiger project aim is being available for most popular agent framworks like\ncrewAI. In this example you can see the easiest tool integration for an AI\nagent. We are asking for who is Onur Atakan ULUSOY and waits.\n\n    \n    \n    # Geting the tiger tools from upsonic import Tiger tools = Tiger().crewai() from langchain_openai import ChatOpenAI llm = ChatOpenAI(model=\"gpt-4-0125-preview\", api_key=OPENAI_API_KEY) from crewai import Agent, Task, Crew, Process researcher = Agent( role='Senior Research Analyst', goal='Uncover cutting-edge developments in AI and data science', verbose=True, allow_delegation=False, tools=tools, llm=llm ) task1 = Task( description=\"\"\"Who is Onur Atakan ULUSOY\"\"\", expected_output=\"Full analysis report of Onur Atakan ULUSOY and putting the report to knowledge\", agent=researcher ) crew = Crew( agents=[researcher], tasks=[task1, task2, task3], verbose=2, ) result = crew.kickoff()\n\n# LangChain Integration\n\nTiger is able to make a collabration for sharing tools with LangChain agents\nwith this your agents will able to use Tiger functions. In this example we are\nasking for an multiplation question and the agent will use the tiger and after\nthat its write a python code and tiger will give the result in behind. With\nthis agent will able to make mathematical operations in just two lines of\ncode.\n\n    \n    \n    # Geting the tiger tools from upsonic import Tiger tools = Tiger().langchain() # Generating Agent and executor with tiger tool set from langchain_openai import ChatOpenAI from langchain import hub from langchain.agents import AgentExecutor, create_openai_functions_agent llm = ChatOpenAI(model=\"gpt-4-0125-preview\", api_key=OPENAI_API_KEY) prompt = hub.pull(\"hwchase17/openai-functions-agent\") agent = create_openai_functions_agent(llm, tools, prompt) agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True) # Asking for 15231 * 64231 agent_executor.invoke({\"input\": \"What is the result of 15231 * 64231\"})\n\n# AutoGen Integration\n\nTiger is also have a integration with AutoGen agents. You can put a tiger to\nyour AutoGen agents. In this examples we will use the 'interpreter.python'\nmodule and with this your autogen agent able to run and view result of python\ncodes. With this your agent will able to wait 2 second as we request.\n\n    \n    \n    # Generating Agents with tiger tool set from typing_extensions import Annotated import autogen config_list = [ { 'model': 'gpt-4-0125-preview', 'api_key': OPENAI_API_KEY, }, ] llm_config = { \"config_list\": config_list, \"timeout\": 120, } chatbot = autogen.AssistantAgent( name=\"chatbot\", system_message=\"For coding tasks, only use the functions you have been provided with. Reply TERMINATE when the task is done.\", llm_config=llm_config, ) user_proxy = autogen.UserProxyAgent( name=\"user_proxy\", is_termination_msg=lambda x: x.get(\"content\", \"\") and x.get(\"content\", \"\").rstrip().endswith(\"TERMINATE\"), human_input_mode=\"NEVER\", max_consecutive_auto_reply=10, ) # Geting the tiger tools from upsonic import Tiger Tiger().autogen(chatbot, userproxy) # Asking sleep 2 second user_proxy.initiate_chat( chatbot, message=\"What is Upsonic.co\", )\n\n## Signin to Telegram\n\nThe user who wants to use telegram functionalities in their LLM agents must\ntrig the signin function before all. For this you can use this function and\nits will ask for phone number and verification code.\n\n    \n    \n    from upsonic import Tiger Tiger().get(\"communication.telegram.as_user.signin__user\")()\n\n## Adding Tools\n\nTiger project is open to any contribution for public tiger, also in the bottom\nwe have another way to create your own, offline tiger. For adding the public\ntiger you should create a pull request with your new tool.\n\n  1. Create a python file in tiger/tools section. for ex: tiger/tools/interpreter/python/execute.py\n\n  2. Write your function in this format\n\n    \n    \n    #imports def my_function(query:str) -> str: return query + \" hi\" tool_name = \"test.my_function\" tool_obj = my_function tool_requirements = [\"beautifulsoup4==4.12.3\"]\n\n  3. Create the pull request. When its merged its will be available at public Tiger and dashboard.\n\n## Creating your Own Tiger\n\nFor creating your own tiger you should install a Upsonic On-Prem docker\ncontainer. Its will give a dashboard for viewing your own tools and will make\ndocumentation automatic. After that you should use the Upsonic Client to\nconnect your On-Prem for this you should get the connection code from your\ndashboard and finaly you use the tiger function in upsonic client.\n\nInstallation document\n\n    \n    \n    #from upsonic import Tiger #Tiger().autogen(chatbot, userproxy) # to #Your Upsonic Connection Code upsonic.autogen(chatbot, userproxy)\n\n## Star History\n\n## About\n\nNeuralink for your AI Agents\n\ndocs.upsonic.co/tiger\n\n### Topics\n\nagent tools ai autogen neuralink llm langchain function-calling\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Code of conduct\n\nCode of conduct\n\nActivity\n\nCustom properties\n\n### Stars\n\n51 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n3 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Contributors 2\n\n  * onuratakan Onur ULUSOY\n  * restyled-commits Restyled Commits\n\n## Languages\n\n  * Python 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
