{"aid": "40144195", "title": "Funding Open Source", "url": "https://benconrad.net/posts/230717_fundingOpenSource/", "domain": "benconrad.net", "votes": 1, "user": "bcon", "posted_at": "2024-04-24 13:33:33", "comments": 0, "source_title": "Funding open source", "source_text": "Funding open source\n\n# Ben's Website\n\nSerious musings\n\n  * Home\n  * Archive\n  * About Me\n\n# Funding open source\n\n2023 Jul 17open sourcefundingbusiness model\n\nIsn't it weird that massively scalable software relies on legalities and paper\nto look after itself, instead of...software?\n\nOpen source licensing is widely appreciated but its core problem is that value\nonly flows from authors to users, there is no counter flow of value. This is\nsolely due to the generosity of the open source authors: their decision to\nrelease their work to the public is founded on a combination of personal\npride, community spirit, ideological priors, and somewhat nebulous market-\nshaping preferences. These motivations are, I think, generally appreciated and\nattained. Removing expense or use limitations does enable more people to use\nyour work. But as Thomas Sanladerer recently presented, the problem is that\ncompensation is not among these goals, and is often undermined by them.\n\nThe reason that other people use open source work is because it is useful to\nthem, useful to some problem downstream of or different from that which\nmotivated the original creation. For some reason, though, the original author\ndoes not have access to the full breadth of the problem, they cannot solve all\nof the problems that end-users have and therefore do not have visibility in to\nthe full size of the problem(s) which they are helping to solve, and are\nthereby limited in their ability to understand and capture value off of those\nend solutions.\n\nThis is in contrast to an idealized, econ101 market, where, say, some\ncollection of companies all have unique capabilities that they provide, with\nmutual contracts linking these isolated capabilities into competitive\nofferings for customers. In this 101 ideal, each of the specialists\nindividually operate their piece of the overall solution, giving them\ninformation on the overall size of the problem and incentive to perform their\npiece in a manner appropriate and efficient to the problem. It also permits\nthe specialized providers to consider their joint position and discuss whether\nother arrangements would be more efficient, ie through combination or\nredistribution of tasks. This idealized market works because each specialist\ncan see both the originating problem and overall solution. It is rarely\nrealized because the specialists have coordination costs that slow solution\ndevelopment and provision. Integrating these specialists into a vertical\nentity, which works from say raw supplies to deliver a product ready for end\nuse, streamlines these capabilities at the cost of preventing these\nspecialists from contributing to other products.\n\nThe low cost of executing software to perform specific tasks provides an\nalternate and inferior solution to the problem of coordination: instead of\ncoordinating multiple entities, just ship the software to entities closer to\nthe problems and who can provide the end-solutions themselves.\n\nDistanced from customer need, open source developers are free from many\nrequirements and able to pursue, in many cases, technically novel and quickly-\nchanging capabilities. But there are many anecdotes relating that the hard\npart of innovation is not having the idea - and writing a performant solution\n- but bringing that to market, which is surrounding the core innovation with\nthe soft interfaces that enable it to plug into the market. No matter how\nrevolutionary the battery, it still needs a motor, transmission, trigger, and\ncasing to be used as a drill.\n\nSo, the real question of making open source sustainable is a question of\nanimating the market mechanisms in a way appropriate to and more harmonious\nwith the other values, goods, and distinguishing features of open source.\nDoubling down on ideology is not a solution. There are real costs to\ndevelopers and to the ecosystem in general when individuals miss-apply their\nefforts. Right now, we only see the disgruntled blog posts and videos, but\nthere are many others.\n\nWhat if open source licenses included a right of third party action or other\nfinder's fee?\n\nMy terminology can surely be improved, but the objective would be to create\nnew mechanisms for developers to learn about how software is being used so\nthat they can better moderate their own investments. For instance, http://gpl-\nviolations.org/about/ and other organizations offer rewards for reporting GPL\nviolations. What if instead of being privately funded these rewards were baked\ninto the license? For instance, the SEC has long included the funding of\nwhistleblower rewards into their settlements, knowing that the best way to\nencourage a culture of self-policing is to create incentives for those with\nknowledge of problems to do their own math. The same can be envisioned for\nlicense compliance.\n\nBut to stop there would be a failure to realize the above, that while license\ncompliance and mechanisms that encourage that are important, they are not\nenough. If all code were infected by viral licenses, we would just end up with\na plethora of open code and no real change to what the code does or how value\nis distributed among the creators.\n\nContinuing then, most attempts to determine 'equitable' assignments of value\nto various (sub)sub-components fail; I'd argue they cannot succeed if only for\nthe simple reason that their contribution to the value created decreases with\ntime. The market is the only way to solve this assignment problem, and the\nonly way it can do that is with accurate information on use and value created.\nClosed source is one collection of approaches, as are the numerous variations\non open core and dual-licensing. Without specifying further, it is clear that\nhaving more information is essential to enabling developers to apply their\nefforts correctly: instead of just creating and releasing software they can\ninstead ask some of their likely users whether they want, and want to support,\nthe creation of the software. There will always be a gap between the\ntechnically-possible capabilities and those utilized in a market, if only for\nthe delay between realizing and implementing capabilities. The goal of helping\ndevelopers to better apply their resources is to create, in an open way, some\nof the resource coordination capabilities that vertically-integrated companies\nenjoy, while also preserving their independence.\n\nI see two motions in this direction. First are the success of open communities\nfacilitated by GitHub, GitLab, etc. Second are task brokers like UpWork. These\nare the same thing; the first is nominally designing the work and the second\nincenting its creation, though today they are performed by unrelated entities.\n\n(As an aside, UpWork is close to having a really interesting database of\nplain-language requirements, valuations, and \u2014 what they're lacking \u2014\ndelivered code.)\n\nIf you have followed through this far, the question is what mechanisms are\npermissable to begin this information return function. Well, as above, I see\nno reason for software license compliance to be restricted to text. If GPL\ncode must be released online, it seems trivial to have compliance verification\nbe part of the software, even included in init(). Indeed, for companies this\ncompliance evaluation is seen as a much larger cost than actually releasing\nthe code, that it is harder to determine what must be released and in what\nform than to actually do so. If, as part of instantiating the api the user\nneeded to provide the address of the hosted code and a 3rd-party verifier's\nhash, that could be immediately performed, and on every instance. The host\nwould be in on it, hosting the code and providing a fast hash verification\nwhile also producing license validation reports and use analytics.\n\nI won't spend time addressing the various objections to this sort of\ninformation exchange beyond saying that in my view this exchange is much\nbetter than the continued under-valuation of open source.\n\nOk, so that's my opinion and thought. What am I doing about it? Well, here's a\nfirst attempt to solicit interest and assistance in creating an animator for\nModelica result files. I'm pretty bandwidth-limited, but I have a bunch of\nrelated ideas that will hopefully make it up here or to Mechanomy at some\npoint, in case you would like to [follow along]. I'd also welcome email,\ntwitter, or other discussion on this and related topics.\n\nOverall, I'm pretty convinced that the only way to improve things is to make\nproblems more known and definite so that enough people can appreciate the\nsolution. How we do this is a fundamental question to much of modern life.\n\n  * Next: AI Doesn't Matter to the Market..yet\n  * Previous: Influencing Scarcity\n\nCopyright 2023\n\n", "frontpage": false}
