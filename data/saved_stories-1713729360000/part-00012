{"aid": "40105264", "title": "Keyper: SSH Key and Certificate Manager", "url": "https://keyper.dbsentry.com/", "domain": "dbsentry.com", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-21 12:37:06", "comments": 0, "source_title": "KEYPER: Manage SSH Key and Certificate Based Authentication", "source_text": "KEYPER: Manage SSH Key and Certificate Based Authentication\n\n# Search\n\n# Keyper\n\nSSH Key and Certificate Manager\n\nDownload Source\n\nLatest release\n\n# KEYPER\n\nKeyper is an Open Source SSH Key and Certificate-Based Authentication Manager.\nKeyper acts as an SSH Certificate Authority (CA). It standardizes and\ncentralizes the storage of SSH public keys and SSH Certificates for all Linux\nusers in your organization and saves significant time and effort it takes to\nmanage SSH keys and certificates on each Linux Server. Keyper also maintains\nan active Key Revocation List, which prevents the use of Key/Cert once\nrevoked. Keyper is a lightweight container taking less than 100MB. It supports\nboth using Docker and Podman. You can be up and running within minutes instead\nof days.\n\nFeatures include:\n\n  * Public key storage\n  * SSH CA\n  * Certificate Signing and Storage\n  * Certificate Expiration\n  * Public Key Expiration\n  * Key Revocation List (KRL)\n  * Forced Key rotation\n  * Streamlined provision or de-provisioning of users\n  * Segmentation of Servers using groups\n  * Policy definition to restrict user\u2019s access to the server(s)\n  * Centralized user account lockout\n  * Docker container\n\n# Quickstart\n\nRun Keyper docker image using docker cli:\n\n    \n    \n    $ docker run \\ -p 8080:80 \\ -p 8443:443 \\ --hostname <hostname> \\ -it dbsentry/keyper\n\nRun Keyper docker image using podman cli:\n\n    \n    \n    $ podman run -p 8080:80 \\ -p 8443:443 \\ --hostname <hostname> \\ -it quay.io/dbsentry/keyper\n\nEither command starts a new container with Keyper processes (OpenLDAP,\nGunicorn, Nginx) running inside.\n\nThe above commands are for demo only and start a new container with OpenLDAP\nserver storing data within the container. That means on re-start, data would\nnot persist. If you want data persistence, start the container with\nappropriate command line parameters. Refer to the documentation.\n\nBy default, this image creates an LDAP server for the company Example Inc and\nthe domain keyper.example.org. By default, all passwords are set to\nsuperdupersecret. All the default settings can be changed by passing\nparameters to the docker/podman command line or using a parameter config file.\n\nCustomary 5 min installation Demo\n\n# Pricing\n\n#### Personal\n\nFree for personal use.\n\n#### Commercial\n\nFree for upto 20 servers and 5 users. $1/month for additional servers and\nusers. Contact sales@dbsentry.com\n\n# FAQ\n\n## Table of Contents\n\n# General\n\n## What is Keyper?\n\nKeyper is an SSH Key and Certificate-Based Authentication Manager\n\n## Why Keyper?\n\nWe, as system administrators and developers, regularly use OpenSSH\u2019s public\nkey authentication (aka password-less login) on Linux servers or Certificate-\nbased authentication (more secure). The mechanism works based on public-key\ncryptography. One adds his/her RSA/DSA key to the authorized_keys file on the\nserver. The user with the corresponding private key can login without a\npassword. It works great until the number of servers starts to grow. It\nbecomes a pain to manage the authorized_keys file on all the servers. Account\nrevocation becomes a pain as well. Keyper aims to centralize all such SSH\nPublic Keys within an organization. With Keyper, one can force key rotation,\neasily revoke keys, and centrally lock accounts.\n\n## Why Certificate-based authentication\n\nSSH Key-based authentication does a great job. Certificate-based\nauthentication eliminates a few limitations associated with Key-based\nauthentication. When using certificates, both clients and servers use\ncertificates signed by a trusted third party (e.g. Keyper). Certificates take\ncare of long time known issue such as Trust-on-First-Use (TOFU). Instead of\nX.509 format, SSH uses its own, simpler, certificate format.\n\n## Why should one use Keyper for certificate-based authentication\n\nThere is one little inconvenience with certificates, and that is a user cannot\nsign their keys themselves as they do not have access to CA\u2019s private key. A\nprocess must be put in place to sign the keys. Once the administrator sets up\na user in the Keyper system, s/he can upload keys to be signed by the CA.\nKeyper system generates the certificate on the fly based on pre-defined rules\n(like duration of the certificate, and what servers/principals any given user\nhas access to).\n\n## Is Keyper opensource?\n\nNot yet. However, we are working to get it open-sourced under GPLv2 (pending\npermission from our corporate overlords). Yes! We Opensourced Keyper under\nGPLv3 license. The source repositories are located at keyper-docker, keyper,\nand keyper-fe. All of the following components of keyper are open-source:\n\n  * keyper frontend (Vue)\n  * keyper REST API (Python/Flask)\n  * keyper docker image builder\n  * All artifacts related to OpenLDAP schema\n\nThe above stack can also be administered using curl CLI.\n\nThe web-based administration console for Keyper has not been open-sourced.\n\nThe above arrangement should satisfy the needs of most of our users as smaller\ncommercial customers can continue to use the web based admin console bundled\nwith a docker image up to 20 servers. After which they have the option to\npurchase a license.\n\nCommercial Customers can purchase license to receive support.\n\n## Where can I get Keyper?\n\nKeyper can be downloaded from the docker registry either using docker or\npodman.\n\n## I have a question/suggestion/need to report a bug. How can I contact you?\n\nThanks in advance. We love suggestions/bug reports. Please drop us a line at\nsupport@dbsentry.com\n\n## Where is the documentation?\n\nAll documentation is located here\n\n## Do you have a Demo/Sandbox for Keyper?\n\nYes, we do. We have a demo system running on https://sprout.dbsentry.com plus\nfour containers running SSH for testing. Here are credentials to access the\nweb console:\n\nUser ID| Password  \n---|---  \nalice| keyper  \nbob| keyper  \ncarol| keyper  \nerin| keyper  \nfrank| keyper  \ngrace| keyper  \n  \nBesides, you can test the following containers running SSH using the above\nuser ids after you add your SSH public key to the web-console:\n\nServer| SSH Port  \n---|---  \nmavrix2.dbsentry.com| 2022  \nmavrix3.dbsentry.com| 3022  \nmavrix4.dbsentry.com| 4022  \nmavrix5.dbsentry.com| 5022  \n  \nSo, if you want to access server mavrix4.dbsentry.com as user frank, you need\nto add your SSH public key (typically ~/.ssh/id_rsa.pub or ~/.ssh/id_dsa.pub)\nto user frank and then connect using ssh:\n\n    \n    \n    $ ssh -l frank -p 4022 mavrix4.dbsentry.com\n\nAny issues, drop us a line at support@dbsentry.com.\n\nThis demo system is limited and only allows you to upload/delete SSH public\nkeys (Keyper User Role). You do not have admin access to add/modify\nusers/hosts/groups (Keyper Admin Role). To see admin features in action, we\nsuggest that you download and run the docker image either using docker or\npodman on your Linux system.\n\nYou are sharing these demo systems with others. Please be respectful of\nothers. We delete all uploaded keys every night.\n\n## I have a question that is not answered.\n\nSend your question to support@dbsentry.com, and we\u2019ll try to address it. You\ncan also hang out with us on Discord\n\n## How can I help?\n\nThanks in advance. We can use your help in frontend development (Vue), backend\ndevelopment (Python/Flask), or documentation maintenance. Please drop us a\nline at support@dbsentry.com and we\u2019ll hook you up.\n\n# Technical\n\n## What is under the hood?\n\nKeyper is a Docker container, which can also be run using podman. The stack\nincludes:\n\n  * Alpine Linux\n  * OpenLDAP acting as a directory that stores all users, SSH Public Keys, and rules\n  * Python Flask REST API\n  * VueJS frontend app running on Nginx\n  * All the above services are managed using runit\n\n## What version of SSH Keyper supports?\n\nAny Linux server running OpenSSH 6.8 or newer should be fine. An SSH server\nthat supports AuthorizedKeysCommand is needed.\n\n## What is Podman?\n\nPer podman project\u2019s website: \u201cPodman is a daemonless, open-source, Linux\nnative tool designed to make it easy to find, run, build, share and deploy\napplications using Open Containers Initiative (OCI) Containers and Container\nImages. Podman provides a command-line interface (CLI) familiar to anyone who\nhas used the Docker Container Engine. Most users can simply alias Docker to\nPodman (alias docker=podman) without any problems.\u201d The best thing we liked\nabout podman is that one need not be root to run a container. It comes bundled\nwith RHEL (or any RHEL based distro) by default. If you do not have it install\nit using yum:\n\n    \n    \n    # yum install podman\n\n## How to persist OpenLDAP data on restart?\n\nBy default, Keyper creates OpenLDAP database within container under\n/var/lib/openldap/openldap-data and /etc/openldap/slapd.d. For data to persist\nafter a restart, we need to present local docker volumes as a parameter.\nSomething like this:\n\n    \n    \n    $ docker volume create slapd.d $ docker volume create openldap-data $ docker run -p 80:80 -p 443:443 -p 389:389 -p 636:636 --hostname <hostname> --mount source=slapd.d,target=/etc/openldap/slapd.d --mount source=openldap-data,target=/var/lib/openldap/openldap-data -it dbsentry/keyper\n\nFor more information about docker data volume, please refer to:\n\n> https://docs.docker.com/engine/tutorials/dockervolumes/\n\n## What is the purpose of a hostname as a parameter?\n\nKeyper uses this hostname to generate a self-signed certificate. OpenLDAP and\nNginx use this certificate for secure communication. Also, this hostname gets\nembedded in the auth.sh script, which you need to download and deploy on each\nLinux server.\n\n## I want to connect to Keyper on a different terminal to see its inside?\n\nGreat. First find the container id of the running container, and then use\ndocker exec to connect. Something like this:\n\n    \n    \n    $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 25b2869f1a71 dbsentry/keyper \"/container/tools/run\" 21 hours ago Up 21 hours 0.0.0.0:8080->80/tcp, 0.0.0.0:2389->389/tcp, 0.0.0.0:8443->443/tcp, 0.0.0.0:2636->636/tcp peaceful_lewin 66d33bbdd32c jenkinsci/blueocean \"/sbin/tini -- /usr/...\" 13 days ago Up 13 days 0.0.0.0:50000->50000/tcp, 0.0.0.0:8000->8080/tcp jenkins-blueocean $ docker exec -it 25b2869f1a71 /bin/sh / # ls bin dev home media opt root sbin sys usr container etc lib mnt proc run srv tmp var / #\n\n## What environment variables can I set?\n\nFollowing environment variables can be set while starting the container:\n\nEnvironment Variable| Description| Default  \n---|---|---  \nLDAP_PORT| ldap bind port| 389  \nLDAPS_PORT| ldaps bind port| 636  \nLDAP_ORGANIZATION_NAME| Name of the Organization| Example Inc.  \nLDAP_DOMAIN| LDAP Domain| keyper.example.org  \nLDAP_LDAP_ADMIN_PASSWORD| Admin password on LDAP| superdupersecret  \nLDAP_TLS_CA_CRT_FILENAME| CA Cert File Name| ca.crt  \nLDAP_TLS_CRT_FILENAME| Cert File Name| server.crt  \nLDAP_TLS_KEY_FILENAME| Cert Key File Name| server.key  \nLDAP_TLS_DH_PARAM_FILENAME| DH Param File Name| dhparam.pem  \nLDAP_TLS_CIPHER_SUITE| Default Cipher Suite| TLSv1.2:HIGH:!aNULL:!eNULL  \nFLASK_CONFIG| Flask Config (dev/prod)| prod  \nHOSTNAME| Hostname| {docker generated}  \nNGINX_UID| linux nginx user uid| 10080  \nNGINX_UID| linux nginx user uid| 10080  \nSSH_CA_HOST_KEY| CA Host Key| ca_host_key  \nSSH_CA_USER_KEY| CA USER Key| ca_user_key  \n  \n## How can I see Debug messages for the REST API?\n\nRunning a container with FLASK_CONFIG=dev would force Flask REST API to run in\ndebug mode.\n\n## Where is the auditlog for OpenLDAP located\n\n/var/log/openldap/auditlog.ldif. It may be a better idea to create docker\nvolume for /var/log and mount it in the container to persist logs\n\n## How can I backup Keyper?\n\nAs far as you have a backup for the OpenLDAP database, you are good to go. For\nthe rest, as far as you specify the same CLI params, things should work fine.\n\n## How do I use a real X.509 SSL certificate with Keyper?\n\nOpenLDAP and Nginx require the X.509 certificate. You can set custom\ncertificate at run time by mounting a directory containing those files to\n/container/service/nginx/assets/certs and adjust their name per the\nenvironment variables defined above.\n\n## What is SSH Key Revocation List (KRL)?\n\nA Key Revocation List (KRL) is a list identifying the revoked Keys and\nCertificates. In Keyper, a Key or Certificate once deleted, gets added to the\nKRL. Both Key-based and Certificate-based SSH authentication on Keyper uses\nKRL verification as the first step during authentication and prevents the use\nof revoked Keys/Certificates.\n\n## How can I access the KRL File?\n\nThe KRL file is located on the running container under /etc/sshca/ca_krl. It\ncan also be downloaded using API call https://servername/api/krlca\n\n# Subscribe\n\n# Contact\n\n  * support@dbsentry.com\n  * +1 318-618-9449\n  * 6760 San Fernando, Irving, TX 75039\n  * DM Me\n  * Discuss on Discord\n\n\u00a9 2021 DBSentry Corp.\n\n##### Cite\n\nCopy Download\n\n", "frontpage": false}
