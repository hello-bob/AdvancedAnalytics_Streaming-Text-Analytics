{"aid": "40113687", "title": "Partytown: Run Third-Party Scripts from a Web Worker", "url": "https://partytown.builder.io/", "domain": "builder.io", "votes": 2, "user": "robin_reala", "posted_at": "2024-04-22 12:26:07", "comments": 0, "source_title": "Introduction - Partytown", "source_text": "Welcome To Partytown\n\nAnnouncing Visual Copilot - Figma to production in half the time\n\nSkip to Content\n\n# Run Third-Party Scripts From A Web Worker\n\nPartytown is a lazy-loaded library to help relocate resource intensive scripts\ninto a web worker, and off of the main thread. Its goal is to help speed up\nsites by dedicating the main thread to your code, and offloading third-party\nscripts to a web worker.\n\n> Note: Partytown is still in beta and not guaranteed to work in every\n> scenario. Please see our FAQ and Trade-Off sections for more info.\n\nEven with a fast and highly tuned website following all of today\u2019s best\npractices, it\u2019s all too common for your performance wins to be erased the\nmoment third-party scripts are added. By third-party scripts we mean code that\nis embedded within your site, but not directly under your control. A few\nexamples include: analytics, metrics, ads, A/B testing, trackers, etc.\n\nPartytown is maintained by Builder.io and is currently in Beta.\n\n  * Partytown, Google Slides Presentation\n  * Smashing Magazine: How Partytown Eliminates Website Bloat From Third-Party Scripts\n\n## Goals\n\nWe set out to solve this situation, so that apps of all sizes will be able to\ncontinue to use third-party scripts without the performance hit. Some of\nPartytown\u2019s goals include:\n\n  * Free up main thread resources to be used only for the primary web app execution.\n  * Sandbox third-party scripts and allow or deny their access to main thread APIs.\n  * Isolate long-running tasks within the web worker thread.\n  * Reduce layout thrashing coming from third-party scripts by batching DOM setters/getter into group updates.\n  * Throttle third-party scripts\u2019 access to the main thread.\n  * Allow third-party scripts to run exactly how they\u2019re coded and without any alterations.\n  * Read and write main thread DOM operations synchronously from within a web worker, allowing scripts running from the web worker to execute as expected.\n\n## Web Workers\n\nPartytown\u2019s philosophy is that the main thread should be dedicated to your\ncode, and any scripts that are not required to be in the critical path should\nbe moved to a web worker. Main thread performance is, without question, more\nimportant than web worker thread performance. Please see the test pages for\nsome live demos.\n\n## Negative Impacts from Third-Party Scripts\n\nBelow is a summary of potential issues after add third-party scripts,\nreferenced from Loading Third-Party JavaScript:\n\n  * Firing too many network requests to multiple servers. The more requests a site has to make, the longer it can take to load.\n  * Sending too much JavaScript which keeps the main thread busy. Too much JavaScript can block DOM construction, delaying how quickly pages can render.\n  * CPU-intensive script parsing and execution can delay user interaction and cause battery drain.\n  * Third-party scripts that were loaded without care can be a single-point of failure (SPOF).\n  * Insufficient HTTP caching, forcing resources to be fetched from the network often.\n  * The use of legacy APIs (e.g document.write()), which are known to be harmful to the user experience.\n  * Excessive DOM elements or expensive CSS selectors.\n  * Including multiple third-party embeds that can lead to multiple frameworks and libraries being pulled in several times, which exacerbates the performance issues.\n  * Third-party scripts also often use embed techniques that can block window.onload, even if the embed is using async or defer.\n\n## Use-Cases\n\nWhile full webapps \u201ccan\u201d run from within Partytown, it\u2019s actually best\nintended for code that doesn\u2019t need to be in the critical rendering path. Most\nthird-party scripts fall into this category, as they\u2019re not required for the\nfirst-paint. Additionally, the asynchronous nature of most third-party script\nworks well with Partytown, as they can lazily receive user events and post\ndata to their respective services.\n\nBelow are just a few examples of third-party scripts that might be a good\ncandidate to run from within a web worker. The goal is to continue validating\ncommonly used services to ensure Partytown has the correct API, but Partytown\nitself does not hardcode to any specific services. Help us test and contribute\nto this page in Github when you find good working scripts!\n\n  * Google Tag Manager (GTM)\n  * Google Analytics (GA)\n  * Facebook Pixel\n  * Mixpanel\n  * Hubspot\n  * Segment\n  * Amplitude\n\n## \u201dReady to Party\u201d Plugins / Libraries\n\nWe try and keep a list of all the plugins and libraries that we know of that\nworks out-of-the-box in Partytown, but we would love your help as plugin &\nlibrary authors and contributors to keep this list growing.\n\nWe have some documentation on how you could create and check-in an integration\ntest that shows how your library / plugin works on Partytown. And if it works,\nthen we would love to have the configuration needed (if any) on our Common\nServices page\n\n## Articles\n\n  * Smashing Magazine: How Partytown Eliminates Website Bloat From Third-Party Scripts\n  * Introducing Partytown: Run Third-Party Scripts From a Web Worker\n  * How Partytown\u2019s Sync Communication Works\n  * How we cut 99% of our JavaScript with Qwik + Partytown\n  * Partytown is now in Beta\n  * Patterns: Optimize loading third-parties\n\nMade with \u2764\ufe0f by\n\n\u00a9 2023 Builder.io, Inc.\n\nIntroducing Visual Copilot.\n\n100% free. Supports all popular frameworks.\n\nTry Visual Copilot\n\n", "frontpage": false}
