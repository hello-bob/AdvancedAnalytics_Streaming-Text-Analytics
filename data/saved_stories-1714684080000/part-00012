{"aid": "40235209", "title": "New Cuttlefish malware intercepts router traffic, steals credentials", "url": "https://blog.lumen.com/eight-arms-to-hold-you-the-cuttlefish-malware/", "domain": "lumen.com", "votes": 1, "user": "campuscodi", "posted_at": "2024-05-02 12:08:47", "comments": 0, "source_title": "Eight Arms to Hold You: The Cuttlefish Malware", "source_text": "Eight Arms to Hold You: The Cuttlefish Malware - Lumen\n\n  * Technologies\n\n    * Black Lotus Labs\n    * Cloud\n    * Edge Compute\n    * Collaboration\n    * Managed Services\n    * Network\n    * Security\n  * Business Advice\n\n    * Business Continuity & Disaster Recovery\n    * Customer Experience\n    * Data Driven Business\n    * Operational Efficiency\n    * Tech Trends\n  * Industries\n\n    * Financial Services\n    * Healthcare\n    * Gaming\n    * Manufacturing\n    * Media and Entertainment\n    * Pharmaceutical\n    * Public Sector\n    * Retail\n    * Technology\n  * About Us\n\n    * Leadership Perspectives\n    * NewsRoom\n\n  * Technologies\n\n    * Black Lotus Labs\n    * Cloud\n    * Edge Compute\n    * Collaboration\n    * Managed Services\n    * Network\n    * Security\n  * Business Advice\n\n    * Business Continuity & Disaster Recovery\n    * Customer Experience\n    * Data Driven Business\n    * Operational Efficiency\n    * Tech Trends\n  * Industries\n\n    * Financial Services\n    * Healthcare\n    * Gaming\n    * Manufacturing\n    * Media and Entertainment\n    * Pharmaceutical\n    * Public Sector\n    * Retail\n    * Technology\n  * About Us\n\n    * Leadership Perspectives\n    * NewsRoom\n\n# Eight Arms to Hold You: The Cuttlefish Malware\n\nBlack Lotus Labs Posted On May 1, 2024\n\n0\n\n7.1K Views\n\n0\n\nShares\n\n  * Share On Facebook\n  * Tweet It\n\nFacebookTwitterLinkedInPinterestEmailShare\n\n## Executive Summary:\n\nThe Black Lotus Labs team at Lumen Technologies is tracking a malware platform\nwe\u2019ve named Cuttlefish, that targets networking equipment, specifically\nenterprise-grade small office/home office (SOHO) routers. This malware is\nmodular, designed primarily to steal authentication material found in web\nrequests that transit the router from the adjacent local area network (LAN). A\nsecondary function gives it the capacity to perform both DNS and HTTP\nhijacking for connections to private IP space, associated with communications\non an internal network. Cuttlefish also has the ability to interact with other\ndevices on the LAN and move material or introduce new agents. Based upon code\nsimilarities in conjunction with embedded build paths, we have found overlap\nwith a previously reported activity cluster called HiatusRat, whose targeting\naligns with the interest of the People\u2019s Republic of China. While there is\ncode overlap between these two malware families, we have not observed shared\nvictimology. We assess that these activity clusters are operating\nconcurrently.\n\nThe Cuttlefish malware offers a zero-click approach to capturing data from\nusers and devices behind the targeted network\u2019s edge. Any data sent across\nnetwork equipment infiltrated by this malware, is potentially exposed. What\nmakes this malware family so insidious is the ability to perform HTTP and DNS\nhijacking for connections to private IP addresses. Cuttlefish lies in wait,\npassively sniffing packets, acting only when triggered by a predefined\nruleset. The packet sniffer used by Cuttlefish was designed to acquire\nauthentication material, with an emphasis on public cloud-based services. To\nexfiltrate data, the threat actor first creates either a proxy or VPN tunnel\nback through a compromised router, then uses stolen credentials to access\ntargeted resources. By sending the request through the router, we suspect the\nactor can evade anomalous sign-in based analytics by using the stolen\nauthentication credentials.\n\nOur analysis suggests this malware has been active since at least July 27,\n2023, however we found code references indicating there were previous\niterations. This latest campaign ran from October 2023, through April 2024.\nThe infection pattern was unique as 99% of infections occurred within Turkey,\nmainly stemming from two telecommunications providers. These two telecom firms\naccounted for roughly 93% percent of infections \u2013 600 unique IP addresses. The\nhandful of non-Turkish victims included IP addresses of likely clients\nassociated with global satellite phone providers, and a potential US-based\ndatacenter.\n\n## Introduction\n\nBlack Lotus Labs recently discovered a series of malicious files that\ntriggered an investigation into an undocumented activity cluster targeting\nnetworking equipment. We are currently unable to determine the initial access\nvector; however, once exploited, the threat actor deploys a bash script that\ngathers certain host-based data to send to the C2. The bash script also\ndownloads and executes Cuttlefish, a malicious binary compiled for all major\narchitectures used by SOHO operating systems. This agent implements a multi-\nstep process that begins with installing a packet filter for the inspection of\nall outbound connections and use of specific ports, protocols, and destination\nIP addresses. Cuttlefish constantly monitors all traffic through the device\nand only engages when it sees a particular set of activities. The rules of\nengagement are updated and specified in a configuration file sent by the C2\nafter it receives the host-based enumeration from the initial entry. The\nruleset directs the malware to hijack traffic destined to a private IP\naddress, and if heading to a public IP it will initiate a sniffer function to\nsteal credentials if certain parameters are met.\n\n  1. The initial hijack parameters are based on connections to a private IP address when the connection is on either UDP/Port 53 or TCP/Port 80. If the agent observes a DNS request to a private IP, it redirects the request to a DNS server in the configuration file. HTTP requests are purloined by inserting a 302-error code (or \u201cresource temporarily redirected / unavailable\u201d) into the data stream, allowing the connection to be redirected toward actor-controlled infrastructure. We suspect that could allow them to gain access to resources that were internal to a network, or not publicly accessible.\n  2. Traffic to a public IP on a given set of ports and protocols will initiate a sniffer function. Cuttlefish will passively search for \u201ccredential markers\u201d typically associated with authentication material in both GET and POST requests.\n\n    1. If a web request hits on the specified port/protocol, is sent to a public IP, and carries credential markers; the malware logs that information on the infected device until the log file hits a certain file size limit. On reaching the defined limit, it sends the log file to the upload server.\n\nRegardless of which path, following a successful intercept the threat actor\ncreates either a VPN or proxy tunnel back into the compromised router, to\npresumably weaponize the stolen tokens and retrieve data hosted on cloud\nresources.\n\nFigure 1: Flow diagram for packet filter and hijacking parameters\n\nWe assess that Cuttlefish represents the latest adaptation in networking\nequipment-based malware, as it combines multiple attributes. It has the\nability to perform route manipulation, hijack connections, and employs passive\nsniffing capability. With the stolen key material, the actor not only\nretrieves cloud resources associated with the targeted entity but gains a\nfoothold into that cloud ecosystem. We assess that while this most recent\nmalware iteration went undetected for nine months and replaced a prior version\ncalled \u201c.putin,\u201d it had the potential for long-term persistent access.\n\n## Technical Details\n\n### Malicious Files \u2013 Bash Script\n\nThe deployed bash script begins to enumerate the device, looking for details\nsuch as the directory listing, the contents of /etc, running processes, active\nconnections (via netstat), and the mounts. Once it has acquired this\ninformation along with the contents of \u201c/etc/config,\u201d it compresses all data\nand names the file \u201cco.tmp.tar.gz.\u201d This material is uploaded to the actor-\ncontrolled domain hxxps://kkthreas[.]com/upload. The domain in question was\nfirst registered on December 22, 2023, and resolved to IP address\n198.98.56[.]93. One of the details that drew our suspicion was that this IP\naddress hosted a self-signed X.509 certificate. This certificate\u2019s common name\nwas in a private IP address \u201c192.168.10[.]39\u201d, the certificate was first\nobserved on July 23, 2023.\n\nFollowing the upload of contents, the file is deleted from the infected\ndevice. The final command in the bash script, retrieves the trojan from the\npayload server located at hxxp://209.141.49[.]178/dajfdsfadsfa/{architecture}.\nThis file is then hidden in the tmp directory and named \u201c.timezone.\u201d Appending\nthe file with a \u201c.\u201d prefix enables the attacker to elude a simple \u201cls\u201d search\nfor files within that directory. Permissions are changed to allow the file to\nbe executable by any user, and the file is then executed.\n\nOnce \u201ctimezone\u201d is up and running in memory, it is deleted from the file\nsystem to hamper recovery efforts. While the primary file path was designed to\ngrab an ARM-based payload, there are secondary file paths embedded that are\ndesigned to work on all the major router architectures; i386, i386_i686,\ni386_x64, mips32, mips64.\n\nFigure 2: Depicting the network connections associated with Cuttlefish\nactivity\n\n### Malicious Files \u2013 Primary Payload, Cuttlefish\n\nWhen the file first executes it opens and binds to port 61235 on localhost to\nensure only one instance is run. If the file detects that this port is being\nused by another process, it displays an error message \u201cmutex fial!\u201d[sic]. Once\nit establishes that there is only one instance running on the device, it then\nchecks for command line arguments that were passed when the file was executed.\nWhen we analyzed one of the received bash scripts we observed the following\nsyntax:\n\n/tmp/.timezone -a -b 5000 -z -d\n\nOur analysis of the malicious file identified the following prebuilt\nparameters, and their purposes were as follows:\n\n  * -a: auto selects the interface on the targeted router\n  * -b: defines the log file size\n  * -d: denoted whether or not to run as daemon\n  * -h: help\n  * -k: kill old agent\n  * -f: compress and send the specified file to the supplied upload file name\n  * -u: compress and send the specified file to the supplied upload URL\n  * -s: appoints the external interface for the sniffer function, this would be used in lieu of -a\n  * -t: timeout\n  * -i: identifies the internal IP addresses to hijack, this would be used in lieu of -a\n  * -v: verbose\n  * -z: defines whether to hide the process on the local file system.\n\nWe noticed that parameters, -k, -h, -v, -u, -f, appeared in the more recent\nversion from late January, but not in the version from December 2023. The\noptions -a and -z, warrant further discussion. If the -a option is supplied on\nthe command line, the binary will collect the network interfaces and store\nthem in two comma separated strings. IPs in the 127.0.0.0/8 range are ignored,\ninternal IP ranges are stored in one variable (hijack), and external IPs are\nstored in another (filter and steal creds).\n\nIf the -z option is supplied, the sample hides itself by creating the\nhardcoded directory \u201c/tmp/.Pg88s51gQG4tFyImFsT9qy6ZM5TeTF8.so\u201d mounting to the\ncurrent /proc/{PID}, and then deleting\n\u201c/tmp/.Pg88s51gQG4tFyImFsT9qy6ZM5TeTF8.so\u201d from the file system hampering\nrecovery efforts of the file while keeping the malware in memory.\n\nNext it sets up a logger to log output to the hardcoded location\n\u201c/tmp/log.txt\u201d and creates a uuid from the mac address of eth0, unless it uses\nthe value \u201c000000000000.\u201d If it cannot locate \u201ceth0\u201d it will use the mac\naddress of the first interface that is not \u2018\u2018000000000000.\u201d After converting\nthe uuid from the mac address, it will check for the presence of the file\n\u201c/tmp/.putin.\u201d If this file exists, it will overwrite the uuid with the\ncontents from the file. We suspect that this denotes that the file \u201c.putin\u201d\nwas an earlier iteration of this malware.\n\n### Retrieval of RuleSets\n\nThe payload sets up a secure connection to the C2 using an embedded RSA\ncertificate, to download and update the ruleset. It retrieves the policy using\nthe following URL structure\nhttps://205.185.122[.]121:443/rules?uuid=UUID_CREATED_EARLIER\n\nThe payload then saves the output as /tmp/config.js. It will then parse the\nconfig JS file, updating \u201chttp_rule_hearttime\u201d, \u201cdns log status\u201d, \u201cscript\u201d and\n\u201chttp_rule_version.\u201d If the http_rule_version is greater than the current rule\nversion, it will update the HTTP rules. On one run, the \u201cscript\u201d option\ncontained a Base64-encoded script to download what appeared to be an updated\nversion of the malware. The http_rule_hearttime defines an interval the\nmalware should wait before reconnecting back to the C2, to see if there are\nnew rules available.\n\nOnce it has the configuration file in place, the malware creates two threads.\nOne thread keeps track of the heartbeat time to check for periodic module\nupdates. The second thread monitors traffic moving across the selected\ninterfaces specified via the command line, upon execution.\n\nFigure 3: Functionality to use the embedded RSA certificate when making the\nrequest\n\n### Credential Harvesting Functionality\n\nThe sample uses libpcap to create an extended Berkeley Packet Filter (eBPF)\nfor eavesdropping and hijacking IP ranges. The filter parameters can be broken\ndown into two logical components, with the first part comparing outbound\nnetwork traffic to a dictionary list of ports and protocols. If the connection\nhits one of the outbound network parameter combinations in the dictionary, the\nmalware searches for certain credential \u201cmarkers.\u201d These credential markers\ncontain a list of predefined strings, some of which appeared to be generic\nlike \u201cusername,\u201d \u201cpassword\u201d or \u201caccess_token,\u201d while others were much more\ntargeted like \u201caws_secret_key\u201d and \u201ccloudflare_auth_key.\u201d Any traffic that\nmatches both the network filters and markers is logged and sent to the C2;\nHTTP messages are Base64 encoded. A list of extracted credential markers, as\nwell as the predefined ports/protocol list, can be found on our Github linked\nhere. Many of the specific markers were associated with cloud-based services\nsuch as Alicloud, AWS, Digital Ocean, CloudFlare, and BitBucket. This caught\nour attention as many of these services would be used to store data otherwise\nfound within the network. Capturing credentials in transit could allow the\nthreat actors to copy data from cloud resources that do not have the same type\nof logging or controls in place as traditional network perimeters.\n\nThe one oddity in this process, is that while there were network rules for\noutbound TCP data transmitted via port 443 traffic, we did not see any\nembedded functionality to bypass or degrade network encryption such as TLS. So\nwhile much of the data may hit on one of the conditions, it is unclear how\nsuccessful the packet filter\u2019s functionality would be given the rapid adoption\nof TLS. We suspect that the actors likely had more success implementing the\nhijack functionality.\n\n### Logger and Data transmission Function\n\nOnce a log file of filtered traffic reaches the size supplied on the command\nline, or the maximum size set by the malware 0x100000 (1048576) bytes,\nCuttlefish will gzip and then upload the file to the C2 using the previously\ncomputed uuid and a hardcoded value of \u201ctid\u201d:\n\nhxxps://205.185.122[.]121:443/upload?uuid=%s&filename=%s&tid={hex value}\n\n### Hijack Functionality\n\nThe hijack functionality begins by downloading rules from the C2, then saving\nthe file as \u201c/tmp/thconfigjs\u201d and parsing out the following fields:\n\n  * http_hijack_hearttime: beacon interval to check for update rules\n  * http_hijack_version: configuration version number\n  * http: hijack parameters for HTTP requests\n  * dns: hijack parameters to insert when the connection is hijacked\n\nOnce the malware executes it initiates two threads. The first thread monitors\nthe http_hijack_hearttime interval to continuously check for updates, while\nthe second thread monitors all network traffic traversing the router, waiting\nfor the two conditions to be present that initiate the hijack. The first of\nthese are connections to private IP addresses. A sample is shown below:\n\nFigure 4: Comparing internal interfaces to a list of known private IP\naddresses\n\nThe second condition is met if it finds TCP connections to port 80 (both GET\nand POST messages) or outbound UDP-based connections to port 53, typically\nused for DNS. As for HTTP, it creates the hijack by taking advantage of HTTP\nresponse error code \u201c302,\u201d which indicates \u201cresource temporarily relocated.\u201d\n\nLeveraging the 302 error, the malware can replace any request to internal IPs\nwith values from the file /tmp/thconfig. In one of the recovered configuration\nfiles, the HTTP connections were sent to 114.114.114[.]114, associated with a\npublic DNS server \u201cpublic 114dns\u201d in China, while the DNS requests were sent\nto fadsdsdasaf2233[.]com and had an IP value of \u201c2.2.2[.]2.\u201d When we queried\nour telemetry holdings for routers compromised by this activity cluster, we\ndid observe some DNS interactions with the 114.114.114[.]114 node, but no\ninteractions with the 2.2.2[.]2 IP address.\n\nFigure 5: Snippet from /tmp/thconfigjs showing hijacking destinations\n\nWe suspect this capability enables Cuttlefish to hijack internal (a.k.a.\n\u201ceast-west\u201d) traffic through the router, or site-to-site traffic where there\nis a VPN connection established between routers. The additional function opens\nthe door to secured resources that are not accessible via the public internet.\nThe capability was further supported by the actor using a self-signed X.509\ncertificate with a subject common name of \u201c192.168.10.39,\u201d a private IP\naddress. This class of private-to-private IP address traffic would bypass the\nparameters of the malware\u2019s sniffer function, thus the addition of hijack\nfunctionality.\n\nOnce they possess authentication material from the HTTP hijack, the actor may\nconnect back into the targeted LAN using a VPN embedded in the malware, which\nwill be described in the next section. We suspect this type of attack could be\nparticularly hard to detect as it occurs over a trusted internal network,\nwhereas many security tools are focused on connections occurring to and from\nthe internal network and the internet.\n\n### VPN Functionality\n\nWe discovered one module to provide VPN functionality based off of the open-\nsource project called n2n.\n\nThe VPN function starts by running the following commands on the compromised\nhost:\n\necho 1 > /proc/sys/net/ipv4/ip_forward\n\niptables -P FORWARD ACCEPT\n\niptables -t nat -A POSTROUTING -j MASQUERADE\n\nNext the sample will get the IP of the hardcoded domain pp.kkthreas[.]com\nusing CloudFlare\u2019s DNS API using the URL hxxps://cloudflare-dns[.]com/dns-\nquery?name=%s&type=A.\n\nIt then downloads the rules from the C2 on port 443 and saves the output as\n/tmp/n2nconfigjs. Then it will read and parse the following rules for the n2n\nmodule:\n\n  * \u201cproxy_rule_hearttime\u201d: 1000,\n  * \u201cproxy_rule_version\u201d: 13,\n  * \u201cn2n_rule_hearttime\u201d: 10800,\n  * \u201cn2n_rule_version\u201d: 11,\n  * \u201cn2n_community\u201d: \u201cmynetworks\u201d,\n  * \u201cn2n_secret_pass\u201d: \u201c{redacted}\u201d,\n  * \u201cn2n_supernode\u201d: \u201c107.189.28[.]251:7777\u201d,\n  * \u201cn2n_nic_ip\u201d: \u201c100.126.229.9\u201d,\n  * \u201cn2n_status\u201d: 1\n\nIf n2n_status is set to 1, it creates a thread to join an n2n community and\nprocess connections as shown below. We suspect that this could allow the\nactors the ability to impersonate the legitimate victims true IP address when\naccess public cloud services, or even give them the ability to interact with\nthe local LAN from a private IP address, thus bypassing some perimeter-based\nsecurity measures.\n\nFigure 6: Screenshot showing the resolution, retrieval and writing of the n2n\nparameters to disk\n\n### Private Proxy Functionality\n\nThe proxy functionality is used as an alternative to a VPN tunnel in routing\ntraffic back through the infected device, allowing them to weaponize the\nstolen credential material from an IP address associated with a known user.\nThis function appears to be based on an open-source project called\n\u201csocks_proxy.\u201d The sample will bind to all external interfaces on what appears\nto be a random port and uses the hard coded username and password for socks5\nproxy authentication. Unlike other proxy malware such as TheMoon, where the\nproxy services are sold to other actors, we assess that this proxy pool is\nonly used by the cuttlefish actors.\n\nFigure 7: Proxy functionality\n\n### Historical Context for the Campaigns\n\nThus far we have identified two campaigns. One campaign took place around\nDecember 22, 2023, where the i386 and x86-64 version appeared to communicate\nwith the hard-coded IP address 205.185.122[.]121. The ARM, and all other\nversions, appeared to communicate with the embedded domain kkthreas[.]com that\nresolved to the IP address hxxps://198.98.56[.]93. In a more recent campaign,\nwe observed the same payload server, but a different file path is utilized.\nThis version of the binary appeared to be more robust and once again\ncommunicated with the hardcoded IP address 198.98.56[.]93. This sample was\nfirst submitted to VirusTotal on August 11, 2023.\n\nBased on x.509 certificates, we assess Cuttlefish has been active since at\nleast July 27, 2023. The first documented campaign to deploy the malware dates\nback to August 11, 2023, and at least one additional campaign took place on\nDecember 31, 2023.\n\n### Overlap with HiatusRat\n\nThe binary displayed associations to a previously documented activity cluster\nwe named \u201cHiatusRat.\u201d One of the strongest correlations came from the embedded\nbuild paths, which were the same across both the Cuttlefish and HiatusRat\nsamples. A search across VirusTotal for the first part of the build path,\n\u201c/home/test/qwert/buildroot-2020.02.4,\u201d returned only five results; four of\nwhich were associated with Cuttlefish, and the other with a previously\ndocumented HiatusRat sample.\n\nEmbedded build paths from Cuttlefish:\n\n/home/test/qwert/buildroot-2020.02.4.arm/output/build/mbedtls-2.16.7/library/ssl_tls.c\n\n/home/test/qwert/buildroot-2020.02.4.arm/output/build/mbedtls-2.16.7/library/ssl_cli.c\n\n/home/test/qwert/buildroot-2020.02.4.arm/output/build/mbedtls-2.16.7/library/ssl_srv.c\n\nEmbedded build paths from HiatusRat:\n\n/home/test/qwert/buildroot-2020.02.4.arm/output/build/mbedtls-2.16.7/library/ssl_tls.c\n\n/home/test/qwert/buildroot-2020.02.4.arm/output/build/mbedtls-2.16.7/library/ssl_cli.c\n\n/home/test/qwert/buildroot-2020.02.4.arm/output/build/mbedtls-2.16.7/library/ssl_srv.c\n\nWe compared Cuttlefish and HiatusRat binaries using BinDiff, which showed 2271\nout of 2938 functions match, this correlated to 77% overlap. We believe that\nthe overlap of the build path and the function match indicate the same\ndevelopers were behind both malware families.\n\n## Black Lotus Labs Global Telemetry and Analysis\n\n### Victimology\n\nLumen\u2019s global network telemetry surrounding the Cuttlefish campaigns was\npeculiar, in that approximately 99% of the connections to the confirmed C2\nstemmed from Turkish-based IP addresses going back to early October 2023.\nWhile we have observed several hundred IP addresses interacting with the\nidentified C2 servers, gauging the number of true infections is difficult\ngiven that 93% are stemming from two cellular network providers, and as such\nthese typically have a higher DHCP churn. So, while the targeting was almost\nexclusively limited to Turkey, there was a wide scale compromise of entities\nwho rely on Turkish infrastructure.\n\nSome of the more prominent entities include the infection stemming from an IP\naddress associated with a Turkish-based airline, and a handful of IP addresses\nassociated with satellite service providers from two different firms.\n\nThe first and most recent US victim communicated with one of the C2s for over\n23 days, a likely indication of infection. This was a US-based IP address\nassociated with a datacenter. At this time, we are unable to confirm if it is\nthe datacenter itself that was compromised, or someone who is leasing servers\nand IP addresses from the data center, as there were two IP addresses used\nconcurrently within the same subnet.\n\n### Creating VPN/Proxy Tunnels to Weaponize Stolen Key Material\n\nAnother compromised router had communications with one of the C2s for a single\nday in December. During this interaction the compromised router received a\nconnection on port 1194 from the C2, this port is associated with OpenVPN. We\nassess that they used this function prior to implementing the n2n module. When\nwe analyzed the primary C2 node,107.189.28[.]251, we observed a large number\nof UDP-based connections to compromised routers using dynamic Turkish-based IP\naddresses. While these connections were all brief (typically less than 24hrs),\nthey indicated large UDP based data transfers.\n\nWe assess the threat actor was connecting through the compromised router with\na Virtual Private Network (VPN) protocol such as n2n, or a proxy service like\nsocks_proxy. This would allow them to weaponize the stolen authentication\nmaterial, and retrieve data associated with the targeted entities. By\nimplementing the VPN connection through the compromised router, the actor is\nattempting to avert suspicion from abnormal login-based alerts, as the IP\naddress of said router (now used as a proxy), is associated with the targeted\norganization.\n\n## Conclusion\n\nCuttlefish represents the latest evolution in passive eavesdropping malware\nfor edge networking equipment, allowing an actor to adapt and overcome the TLS\nconfigurations adopted by more modern enterprises. We also believe these\ninnovations are the next generation in malware capabilities; the ability to\neavesdrop and perform DNS and HTTP hijacking has seldom been observed \u2013 the\nfew publicly identified campaigns include ZuoRat, VPNFilter, Attor, and Plead.\nHowever, this is the first instance where we have seen rules specifically\ndesigned to seek out private IP connections to hijack. We assess that the\nunderlying actor would likely deploy HiatusRat (which relies on tcpdump) on\nlegacy networks where resources such as email servers were hosted on-premise,\nwhich may explain some of the peculiar targeting associated with the first\nHiatusRat report.\n\nAn interesting feature of this campaign was the choice to seek cloud-based\nauthentication material. As Gartner predicts, the influence of public cloud\nwill only increase and \u201cbecome a necessity by 2028,\u201d thus far security\ncontrols have not kept pace. So while there have been a few reports of cloud-\ncentric intrusions from apex actors like Storm-558 and Midnight Blizzard, we\nsuspect that trend is likely going to increase until proper controls and\nlogging are widely configured. Additional recommendations on how to hunt\nthrough Cloud Logs and managing Identity access guidance have been released by\nthe US National Security Agency (NSA) and Cybersecurity infrastructure agency\n(CISA) within the US Department of Homeland Security (DHS) on this topic.\n\nWe suspect that targeting these cloud services allows the attackers to gain\naccess to many of the same materials hosted internally, without having to\ncontend with security controls like EDR or network segmentation. We assess the\ncombination of targeting networking equipment (which is frequently\nunmonitored), to gaining access to cloud environments (which frequently do not\nhave logging in place), is intended to grant long term persistent access to\nthose targeted ecosystems.\n\nBlack Lotus Labs continues to monitor and track SOHO/IoT-based malware to help\nprotect and help better secure the internet as a whole. To that end, we have\nblocked traffic across the Lumen global backbone to all of the infrastructure\nrelated to Cuttlefish. We have added the indicators of compromise (IoCs) from\nthis campaign into the threat intelligence feed that fuels the Lumen Connected\nSecurity portfolio. We will continue to monitor new infrastructure, targeting\nactivity, and expanding TTPs, and we will continue to collaborate with the\nsecurity research community to share findings related to this activity.\n\nWe encourage the community to monitor for and alert on these and any similar\nIoCs. We also advise the following:\n\nCorporate Network Defenders:\n\n  * Continue to look for attacks on weak credentials and suspicious login attempts, even when they originate from residential IP addresses which bypass geofencing and ASN-based blocking.\n  * To encrypt network traffic with TLS/SSL, to prevent sniffing when retrieving or sending data located remotely, such as when you are using cloud-based services or performing any type of authentication.\n  * We recommend the inspection of SOHO devices for abnormal files such as binaries located in the /tmp directory or rogue iptables entries. We also recommend routinely power cycling these devices to help remove malware samples in-memory.\n  * To implement certificate pinning when remotely connecting to high-value assets, such as cloud assets, to prevent threat actors from being able to hijack connections.\n\nConsumers with SOHO routers:\n\n  * Users should follow best practices of regularly rebooting routers and installing security updates and patches. For guidance on how to perform these actions, please see the \u201cbest practices\u201d document prepared by Canadian Centre for Cybersecurity.\n  * For Organizations that manage SOHO routers: make sure devices do not rely upon common default passwords. They should also ensure that the management interfaces are properly secured and not accessible via the internet. For more information on securing management interfaces, please see DHS\u2019 CISA BoD 23-02 on securing networking equipment.\n  * We also recommend routinely power cycling these devices to help remove malware samples in-memory.\n  * We also recommend replacing devices once they reach their manufacturer end-of-life (EOL) and are no longer supported.\n\nAnalysis for this report was performed by Steve Rudd and Danny Adamitis.\nTechnical editing by Ryan English.\n\nFor additional IoCs associated with this campaign, please visit our GitHub\npage.\n\nIf you would like to collaborate on similar research, please contact us on\nTwitter @BlackLotusLabs.\n\nThis information is provided \u201cas is\u201d without any warranty or condition of any\nkind, either express or implied. Use of this information is at the end user\u2019s\nown risk.\n\nPost Views: 7,138\n\nNo related posts.\n\n0\n\nShares\n\n  * Share On Facebook\n  * Tweet It\n\nBlack Lotus LabsDefending Cloud ResourcesEdge Networking DevicesNation-State\nthreat actorsRemote WorkSOHO malware\n\nAuthor\n\n#### Black Lotus Labs\n\nThe mission of Black Lotus Labs is to leverage our network visibility to help\nprotect customers and keep the internet clean.\n\n##### Trending Now\n\n###### The Future of Retail is Omnichannel and AI-Driven\n\nGordon Ong April 2, 2024\n\n###### Securely adopt AI for your growing business\n\nDarwin Hernandez April 2, 2024\n\n##### You may also like\n\nThe Darkside of TheMoon\n\nMarch 26, 2024\n\nKV-Botnet: Don\u2019t call it a Comeback\n\nFebruary 7, 2024\n\nRouters Roasting on an Open Firewall: the KV-botnet Investigation\n\nDecember 13, 2023\n\nRead Next\n\n### Lumen DDoS Essentials: Your Shield Against Cyber Threats\n\n  * ## Categories\n\nAdaptive Networking\n\nConnected Security\n\nHybrid Cloud\n\nCommunications and Collaboration\n\nEdge Computing\n\nSASE\n\n  * Lumen is guided by our belief that humanity is at its best when technology advances the way we live and work. With 450,000 route fiber miles serving customers in more than 60 countries, we deliver the fastest, most secure platform for applications and data to help businesses, government and communities deliver amazing experiences.\n\nServices not available everywhere. \u00a92022 Lumen Technologies. All Rights\nReserved.\n\n\u2713\n\nThanks for sharing!\n\nAddToAny\n\nMore...\n\nBy continuing to use our site, you agree to our use of cookies. We use cookies\nto personalize content and ads, to provide social media features and to\nanalyse our traffic. We also share information about your use of our site with\nour social media, advertising and analytics partners. For more details see our\nPrivacy Notice and Cookie Notice.\n\nYour Opt Out Preference Signal is Honored\n\n## Privacy Preference Center\n\nWhen you visit any website, it may store or retrieve information on your\nbrowser, mostly in the form of cookies. This information might be about you,\nyour preferences or your device and is mostly used to make the site work as\nyou expect it to. The information does not usually directly identify you, but\nit can give you a more personalized web experience. Because we respect your\nright to privacy, you can choose not to allow some types of cookies. Click on\nthe different category headings to find out more and change our default\nsettings. However, blocking some types of cookies may impact your experience\nof the site and the services we are able to offer. Cookie Notice\n\nUser ID: c05140f7-d9a7-4b70-80e6-1f22f08c0601\n\nThis User ID will be used as a unique identifier while storing and accessing\nyour preferences for future.\n\nTimestamp: --\n\n### Manage Consent Preferences\n\n#### Targeting Cookies\n\nThese cookies may be set through our site by our advertising partners. They\nmay be used by those companies to build a profile of your interests and show\nyou relevant adverts on other sites. They do not store directly personal\ninformation, but are based on uniquely identifying your browser and internet\ndevice. If you do not allow these cookies, you will experience less targeted\nadvertising.\n\n#### Performance Cookies\n\nThese cookies allow us to count visits and traffic sources so we can measure\nand improve the performance of our site. They help us to know which pages are\nthe most and least popular and see how visitors move around the site. All\ninformation these cookies collect is aggregated and therefore anonymous. If\nyou do not allow these cookies we will not know when you have visited our\nsite, and will not be able to monitor its performance.\n\n#### Functional Cookies\n\nThese cookies enable the website to provide enhanced functionality and\npersonalisation. They may be set by us or by third party providers whose\nservices we have added to our pages. If you do not allow these cookies then\nsome or all of these services may not function properly.\n\n#### Strictly Necessary Cookies\n\nAlways Active\n\nThese cookies are necessary for the website to function and cannot be switched\noff in our systems. They are usually only set in response to actions made by\nyou which amount to a request for services, such as setting your privacy\npreferences, logging in or filling in forms. You can set your browser to block\nor alert you about these cookies, but some parts of the site will not then\nwork. These cookies do not store any personally identifiable information.\n\n### Cookie List\n\nlabel\n\nConsent Leg.Interest\n\nlabel\n\nlabel\n\nlabel\n\n", "frontpage": false}
