{"aid": "40059636", "title": "Method of Differences and Newton Polynomials", "url": "https://eli.thegreenplace.net/2024/method-of-differences-and-newton-polynomials/", "domain": "thegreenplace.net", "votes": 1, "user": "mfrw", "posted_at": "2024-04-17 02:01:13", "comments": 0, "source_title": "Method of differences and Newton polynomials", "source_text": "Method of differences and Newton polynomials - Eli Bendersky's website\n\nEli Bendersky's website\n\n  * About\n  * Projects\n  * Archives\n\n# Method of differences and Newton polynomials\n\nApril 16, 2024 at 05:54 Tags math\n\nI was reading about Babbage's Difference engine the other day, and stumbled\nupon a very interesting application of the forward differences method. It\nturns out that if we get a sequence generated by a polynomial, under certain\nconditions we can find the generating polynomial from just a few elements in\nthe sequence.\n\nFor example, 0, 1, 5, 12, 22, 35, 51... is a sequence known as the pentagonal\nnumbers, and we can use this technique to figure out that the polynomial\ngenerates it [1].\n\n## Notation\n\nLet's start with some mathematical notation. We'll call the underlying\nfunction generating the sequence . In our example, , , , and so on.\n\n  * The first difference is the sequence , , etc.\n  * The second difference is the sequence , etc.\n  * In general, the k-th difference is: .\n  * As a starting condition in the induction of differences, we can say that itself is the 0-th difference.\n\n## Difference table\n\nWe can construct the difference table for our sequence and observe its\nproperties. In a difference table, the first column is n, which runs from 0 to\nwhatever number of elements we have for the sequence. The second column is the\nvalues of the sequence at these n. Then come the first difference, the second\ndifference and so on. For our sample sequence we get the table:\n\nNotice how at some point the differences become all-zero! We'll soon see why.\n\nObviously, we can construct such a table from only the column of - that's what\nwe just did! A more interesting observation is that if we accept that all\ndifferences (columns) are 0 from a certain point, we can also construct this\ntable from just the first row! For example, with and in hand, we know ; with\nand , we know etc. Try it!\n\n## Inferring the polynomial's degree from the table\n\nClaim: if has degree k, then the k-th difference column in the table is\nconstant.\n\nProof: this is a general k-th degree polynomial with coefficients :\n\nBy definition of the first difference, if we expand the polynomial form and\nperform the subtraction per power of n:\n\nUsing the binomial theorem we know that:\n\nTherefore:\n\nNow if we look at the sum we got for again, we'll notice that in each term,\nthe j-th power of n gets canceled out. This means that the highest power of n\nin is going to be k-1.\n\nWe can similarly show that in , the highest power of n is going to be k-2.\nTherefore, the k-th difference will be constant .\n\nTwo observations for extra credit:\n\n  1. Note that the claim goes one way - if is a k-th degree polynomial, the k-th difference is constant. What we observe in the table is the k-th difference is constant, so can we infer that the function is a k-th degree polynomial? Not in the general case! The sequence could be generated by some higher-degree polynomial, or by a completely different kind of function. That said, since we assume is polynomial and are seeking to find the simplest (lowest degree) one, this inference is valid.\n  2. Did you notice the equivalence to derivatives of polynomials? The k-th difference of a polynomial of degree k is constant... but the same is true for the k-th derivative! This is not by chance - since we have a discrete domain, differences play largely the same role as derivatives for continuous functions. This isn't a rigorous proof - but think about the definition of derivatives (the one with the limit) - what do you get when you take (also sometimes called h) and set it to 1?\n\n## Finding the coefficients with the Newton polynomial\n\nPolynomial interpolation can fit any N points (with distinct x values) with a\nN-1 degree polynomial. One way of finding such a polynomial was discovered by\nIsaac Newton and is called the Newton polynomial.\n\nOur problem of finding a polynomial that generates a given set of points can\nbe reduced to this interpolation problem, since we've just figured out the\ndegree of the generating polynomial! Looking at the difference table, we've\nfound when the difference becomes constant, and that gives us the polynomial's\ndegree k. So all we need is the first k+1 points.\n\nHere's how to develop the Newton polynomial from scratch; we'll start with the\nfirst few coefficients and will then generalize for any k.\n\nThe Newton polynomial for our set of forward differences can be expressed as\nfollows:\n\nThis polynomial is constructed in a clever way; notice that for any p, when we\ncalculate all the elements starting with will be multiplied by zero and\nvanish. This helps us determine this polynomial's coefficients in a gradual\nmanner.\n\nWe'll start with the point , substituting it into the Newton polynomial:\n\nThis gives us the first coefficient . Next, let's look at :\n\nSince we know that , we can infer that . Another way to express that is .\n\nContinuing to :\n\nWe've substituted the values of and that we've found earlier; let's solve for\nnow:\n\nThe last line's numerator is - by definition - :\n\nWe can keep going with this (feel free to do as an exercise), but the emerging\ngeneralization is that:\n\nAnd a concise way to write Newton's polynomial for forward differences is:\n\nWhere is:\n\nNote that we only use the differences for , meaning that we need just the\nfirst row of the difference table! Let's try it for the pentagonal numbers\nexample.\n\nFirst, we've determined that is a constant, so the degree of the polynomial is\n2. We only need to calculate until i=2 in the sum:\n\nSubstituting the values from the difference table we have for n=0, we get:\n\nWhich is exactly what we expected!\n\n## Another example\n\nLet's work through another example, taking the sequence -8, -12, -6, 16, 60...\nWe'll start by constructing the difference table:\n\nThe difference appears to be constant, so we can generate this sequence with a\ndegree 3 polynomial. Let's use the first line of the table to construct the\nNewton polynomial for it.\n\nVerifying that this polynomial generates our sequence as its first 5 elements\nis an easy exercise.\n\nNote that given 5 elements, we can always find a 4th-degree polynomial fitting\nit. Here we found a 3rd-degree one, though, leveraging the technique of\ndifferences. This becomes more acute if we have more elements in the sequence\n- using differences it's often possible to find significantly simpler\npolynomials.\n\n## Recap\n\nFor an integer sequence, if this sequence is generated by a polynomial we can\nfigure out which polynomial it is - given enough elements. We start by\nconstructing a difference table and noticing if a column becomes constant from\nsome point on. This tells us the degree of the generating polynomial. With\nthat in hand, we can use the Newton polynomial to discover a polynomial that\ngenerates the sequence.\n\n## Resources\n\n  * This blog post was the original inspiration. The post explains how Babbage's difference engine worked, and makes off-hand remarks like \"for a 2nd degree polynomial, we only need up to the second difference to know everything\". This follow-up by the same author mentioned going from sequences back to polynomials.\n  * The old Encyclopedia of integer sequences has an intriguing section 2.5, which unfortunately presents several lemmas with no proofs.\n  * This wiki page from brilliant.org is the best single resource, though its proof of constructing the Newton polynomial is lacking, IMHO.\n  * Wikipedia: Divided differences and Newton polynomial pages.\n  * Newton's forward differences YouTube lecture.\n  * Knuth covers this very briefly in section 4.6.4 of Part 2 of TAOCP, relegating the derivation of the Newton polynomial to an exercise that has a terse solution.\n\n## Appendix: Another way to find the polynomial's coefficients\n\nHere's another way to discover the coefficients of the polynomial; the\nfollowing discusses the coefficients of the highest power, but can be\ngeneralized to other powers as well. Using Newton's polynomial is simpler,\nthough, so this is just an appendix for some extra practice in manipulating\nsuch polynomials.\n\nClaim: if has degree k, its coefficient is equal to . Since we've proven that\nis a constant, we can find the precise value of this way.\n\nProof: Let's go back to the sum formulation of from the previous proof.\n\nExpanding the binomial, we get:\n\nThe highest power of n here is k-1; its coefficient comes only from the first\nterm of the binomial expansion for j=k, and is equal to . In order not to deal\nwith long sums, let's just focus on the highest-degree term in :\n\nWhere represents other elements with lower powers of k, so we don't care about\nthem for this discussion [2]. Let's move on to the next difference:\n\nWe've just found the coefficient of the highest power of n in . It's clear\nthat if we continue doing this, will be:\n\nIn other words, , meaning that we can know the coefficient of the highest\npower of n in from the k-th difference .\n\n[1]| Naturally, there's an infinitude of potential functions that generate\nthis sequence; it's more precise to say we're looking for the simplest (lowest\ndegree) polynomial that would do this.  \n---|---  \n[2]| In the following calculation, we're playing loose with the s to represent\n\"anything with lower powers of n that we don't care about\".  \n---|---  \n  \nFor comments, please send me an email.\n\n\u00a9 2003-2024 Eli Bendersky\n\nBack to top\n\n", "frontpage": false}
