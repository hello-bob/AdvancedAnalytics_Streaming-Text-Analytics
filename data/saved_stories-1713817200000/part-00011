{"aid": "40114344", "title": "Beyond the Bottom Line: The ROI of Investing in Developer Experience", "url": "https://www.mootoday.com/blog/beyond-the-bottom-line-the-roi-of-investing-in-developer-experience", "domain": "mootoday.com", "votes": 1, "user": "mootoday", "posted_at": "2024-04-22 13:49:12", "comments": 0, "source_title": "Beyond the Bottom Line: The ROI of Investing in Developer Experience", "source_text": "Beyond the Bottom Line: The ROI of Investing in Developer Experience -\nmootoday.com\n\n# Beyond the Bottom Line: The ROI of Investing in Developer Experience\n\nApril 22, 2024\n\nKey takeaways\n\n  * Great developer experience is a competitive advantage on many levels.\n  * Measure how long it takes to fix a spelling mistake, improve from there.\n  * Manual and automated processes break, but only with automated processes do you know when they break.\n  * It is all an ever-moving target, keep up and make it a priority.\n  * Send me a link to your open source project and I will reduce your onboarding to a single command.\n\n> \ud83d\ude4f Thank you to @mohsenari for the detailed reviews and the valuable feedback\n> throughout the creation of this blog post!\n\nDeveloper experience, DX, DevX, platform engineering \u2013 it comes in many shapes\nand forms, but at its core it refers to the interactions and feelings a\ndeveloper has while using or working on a product.\n\nAs obvious as it sounds given the name, the focus of developer experience is\nto improve a developer\u2019s experience with your product.\n\nWhen we talk about developer experience, it is important to differentiate\nbetween internal and external developer experience.\n\n## Internal developer experience\n\nAs the name implies, this chapter is all about how to improve your own\ndevelopers\u2019 productivity, reduce their cognitive load, and provide overall\ngreat day-to-day satisfaction. For open source projects, \u201cinternal\u201d applies to\nanyone who contributes to the project.\n\nThe following chapters discuss various promises and what you can do to make\nthese promises come true.\n\n### Faster time to market\n\nThe promise: Ship impactful, high quality software faster.\n\nHow to achieve it: Create a checklist of every task that is required to fix a\nspelling mistake in production (see below for a template). Measure how long\neach of these tasks take.\n\nReview the time measurements with the team and brainstorm how to accelerate\neach task. Repeat this process every three to six months.\n\nMore context: Faster time to market can be measured and improved easily.\nFirst, measure how long everything takes. Without a baseline, you do not know\nwhat you do not know. From working with dozens of companies, I learned many\nsignificantly underestimate how long various tasks take.\n\nStart with the macro level and work your way down to micro tasks. The most\nimportant measurement to start with:\n\n> How long does it take to fix, deploy, and verify a spelling mistake?\n\nBefore you continue, carefully think through that process as it relates to\nyour project and adjust the list of tasks below accordingly.\n\nHow long do you think it takes to work through these tasks? Ask your boss (and\ntheir boss if applicable) too. Write it down, you are going to need it soon\n:-).\n\nNow, go ahead and actually work through your task list and track how long each\ntask takes (write the duration in seconds). If you do not have a spelling\nmistake, improve the wording of an error message instead.\n\nTask| Duration [in seconds]  \n---|---  \nCreate a bug ticket  \nMark the ticket \"In progress\"  \nCreate a branch & ensure the correct dependencies are installed  \nStart the dev server(s)  \nReview the current state, i.e. look at the app to verify there is a spelling\nmistake  \nFix the spelling mistake  \nReview the new state, i.e. look at the app to verify there is no spelling\nmistake \u2022 Do you have to stop & start the server(s)? \u2022 Does the server auto-\nreload?  \nCommit the changes & open a pull request \u2022 Do git hooks run to format / lint\nthe code? How long do they take?  \nAre there CI checks? How long does each one take?  \nHave a team member review the changes locally \u2022 Locally is important! \u2022 What\nsteps are required for them to get the code from the PR running locally? \u2022\nWhat happens if they currently have their own feature branch checked out? \u2022\nHow long does it take to switch to the PR branch? \u2022 How long does it take to\ninstall the correct dependencies?  \nOnce the PR is reviewed, merge it \u2022 If it deploys to a staging environment,\nmeasure how long it takes to deploy & review in staging. \u2022 Measure every step\nto go from staging to prod  \nDeploy to production \u2022 Is it automated? Is it manual? \u2022 Are there CI checks? \u2022\nDoes it require additional approvals? \u2022 Measure how long each task takes.  \nVerify the spelling fix in production  \nAre there any follow-up tasks required? Delete the PR branch? Resolve a bug\nticket?  \nTotal time| 0s  \n  \n> The total time you get by doing that is the minimum amount of time it takes\n> to make a small code change.\n\nAny feature more complex than fixing a spelling mistake takes more time!\n\nThat is your baseline. Check your notes, how close is it compared to your\nestimate from earlier? How close were your boss and their boss? From personal\nexperience, everyone is off by 20%+, with people higher up in the reporting\nchain being further off from the actual result.\n\nFrom this point on, your goal is to lower how long individual tasks take. You\nmight be surprised how much you can automate to improve this end-to-end\nprocess significantly.\n\n> Feeling overwhelmed? Reach out and let me and my team take care of this for\n> you. See onboarding.webstone.app.\n\n### Improved quality of work\n\nThe promise: Teams with a strong focus on developer experience ship fewer\nbugs.\n\nHow to achieve it: Invest in a robust, reliable, actively maintained testing\ninfrastructure.\n\nWrite more maintainable code by experimenting with pair programming \u2013at the\nvery least, you know two people understand the code rather than only one.\n\nRemove any friction from a developer\u2019s daily tasks and before you know it,\npeople have the mental capacity to experiment with features or improvements.\nYou never know what individuals may come up with!\n\nMore context: Quality in software development is often associated with bugs.\nThat is likely because bugs are tangible, they are easy to understand and can\nbe counted. From personal experience, teams with a strong focus on their\ndeveloper experience ship fewer bugs. That is the case because they not only\nrely on their tests and automations, but also regularly verify what they do is\nthe best they can do.\n\nLet us go beyond bugs though, to areas that are much more difficult to\nquantify or measure, but are equally important.\n\nThe first area is code maintainability. We read more code than we write,\nwithout a doubt. Teams I have worked with who are actively aware of that as\nthey write code make it more pleasant for themselves and their team members to\ncontribute to someone else\u2019s code without scratching their heads. For every\n\u201cWait a sec, what is going on here?\u201d moment, time is wasted and the likelihood\nof bugs being introduced increases. With the right team members, pair\nprogramming is an incredible way to ensure code is written in a way that is\neasy to understand. Why? As the code is written, there are at least two people\nwho have to agree what is written is understandable.\n\n> On a slightly unrelated note: Pair programming may eliminate the need for\n> pull request code reviews, which often artificially slow down the software\n> development lifecycle significantly.\n\nUnfortunately, pair programming requires people to leave their ego at the\ndoor. This is very hard for certain people, in which case pair programming is\nincredibly painful for the other person... How do you know if someone is great\nat pair programming or not? When I hire software engineers, I do not give them\na take-home assignment (they are a waste of everyone\u2019s time, IMHO). Instead, I\nor a team member pair program with the candidates for 30 - 45 minutes.\n\nThe other area is that excellent internal developer experience leads to more\ninnovative solutions. Just like with code maintainability, how do you know if\nthe effort you invest in internal developer experience leads to more\ninnovative solutions?\n\nThe simpler answer: You do not know until you improve your internal developer\nexperience, wait for three to six months and look back.\n\nWhat can companies expect though? Remove any friction from development teams\nand suddenly, instead of being exhausted by the daily little annoyances, teams\nhave extra mental capacity to experiment with the product. I have seen it many\ntimes where a team member sends a message saying something similar to \u201cA\nthought crossed my mind and I quickly whipped something up this morning. My\nexperiment resulted in 25 percent faster request handling.\u201d Instant customer\nimpact right there, besides cost savings!\n\nBut for the love of [insert your religious figure of choice], do not mandate\ncompany-wide hackathons! They may be fun for little children who recently\nlearned how to write software or people who have no other interests in life.\nIf your project is easy to experiment with and your team feels excited,\nexperiments with incredible results will happen organically. I have\nexperienced it and it was awesome!\n\nIf you really, truly believe your company needs to run a hackathon: make\nattendance optional.\n\n### Positive company culture\n\nThe promise: Happy, highly satisfied team members spread their happiness to\nfriends & social media, leading to higher quality hires and increased inbound\ncustomer interest.\n\nHow to achieve it: Experiment with a 4-day work week \u2013 you will be surprised\nthat time to market is not impacted, but instead people have more energy to\nbuild quality software. Try every week, every other, once a month, whatever\nyou feel comfortable with.\n\nCancel unnecessary meetings. Got a weekly All Hands scheduled, but nothing to\ntalk about? Say so, cancel it, tell people to go for a walk instead. That hour\nwould have been \u201cwasted\u201d (from a company\u2019s point of view) regardless of\nwhether the All Hands without much content happened or not.\n\nMore context: Ah, company culture. I could write a separate post about that\ntopic and how companies are not families etc \ud83d\ude05. For now though, the focus is\non how internal developer experience improves whatever it is you consider your\ncompany culture.\n\nFor the sake of this chapter, I define company culture as follows:\n\n> Whatever it takes to make a group of people who work on the same project as\n> happy and satisfied as possible for the duration they work together.\n\nIf your development team has a great time on a daily basis, they will tell\ntheir friends and share their experience on social media. They will reply to\n\u201c#fail\u201d posts on X saying \u201cNot at @company, we solved this by ...\u201d This is a\ncompany\u2019s best talent acquisition strategy!\n\nHowever, this only works wonderfully as long as people have a great time and\ninternal developer experience is continuously valued and focused on. Hire\nsomeone who does not care as much or even worse, a non-engineer who introduces\ntedious, unnecessary processes or any sort of friction, and things go downhill\nmuch quicker than they went uphill! People who brought their friends to the\nteam will suddenly leave and before you add 1+1 together, you find yourself\nwith a group of new people who have none of the tribal knowledge your initial\nengineers had. Costly to say the least.\n\nThere is another benefit to happy team members: It may attract new customers.\nIn a past role, I selected one vendor over another based on how their team\nmembers talked about the company publicly \u2013 given equal satisfaction for all\nother evaluation criteria. Think about it, who would you rather work with? A\ncompany where employees happily talk about their experience or a company where\nyou have no insights other than the marketing team\u2019s carefully curated\nmaterial?\n\n## External developer experience\n\nIn this chapter, we dive into how external people perceive your product. There\nis some overlap between external developer experience and overall user\nexperience. However, the former focuses on technical individuals who work with\nyour product while the latter includes any audience that interacts with your\nproduct, which includes your marketing material, email campaigns, events, web\ninterfaces, etc.\n\nRemember, focus on internal developer experience (see above) first, at least\ngive it one pass to remove the biggest daily frictions. The topics we are\nabout to discuss can be achieved much easier if the team is already used to a\ngreat internal developer experience.\n\n### Lower friction leads to higher product adoption\n\nThe promise: The quicker developers experience your product, the more likely\nthey are to adopt it.\n\nHow to achieve it:\n\nFor APIs: Provide an OpenAPI spec and with it, leverage Swagger UI and Swagger\nCodegen. In addition, provide Hoppscotch and/or Postman collections for your\nAPI endpoints.\n\nFor GraphQL APIs: Expose a GraphiQL interface for developers to explore your\nAPI.\n\nIdeally, expose a sandbox environment that is highly rate limited but does not\nrequire authentication.\n\nFor SDKs: Automate the process to provide SDKs for as many programming\nlanguages as possible. One way to do that is with Swagger Codegen.\n\nDisplay these SDKs prominently in the docs so people can find them with a\nclick or two.\n\nFor CLIs: Let people install your CLI with curl https://your-domain.com | sh and provide a default command that guides people through the onboarding, i.e. my-cli without any arguments or flags kicks off an interactive wizard. To learn how to do that, see my instructions here.\n\nFor web interfaces: The best place to let people experience your web interface\nis on your website\u2019s landing page (e.g. melt-ui.com).\n\nThe second best place is behind a Sign Up button that provides SSO options and\ndoes not require a credit card or any additional setup steps.\n\nMore context: With every click, every second looking at a spinner, every\ncommand to run, a certain percentage of people drop off and look for an\nalternative solution. Regularly review that initial impression and brainstorm\nwhat can be done to improve the experience further.\n\nRegardless of how developers use your product, be predictable. For CLI\ncommands and API endpoints, use nouns and verbs your target audience\nunderstands. Use the same verbs for all commands. For example, if your CLI has\na projects list command, it should also have users list and services list\ncommands. If you provide projects list, users show --all and services all\ncommands, I can guarantee your business is losing customers.\n\nThe same predictability applies to a web interface. Lists of projects, users,\nand services should look & feel alike, except for different table columns. If\none uses a list of cards vs a table, all should use cards vs a table. The same\napplies to project, user, and service detail pages. Define and follow design\npatterns.\n\n### Community growth\n\nThe promise: Developers who like your product invest their time in answering\nquestions, contribute to documentation, and generally advocate on your behalf.\n\nHow to achieve it: Decide where you want to provide public support for your\nproduct. Choose a medium where anyone can contribute, such as a Discord server\nor GitHub Discussions. Do not use 1:1 chats, emails, or Slack workspaces.\n\nBe present, answer questions, share your roadmap, release changelogs, publish\nannouncements. Have your customer success or engineering team members be\npresent too. Developers love to hear from the people who build a product they\nuse, leverage that fact. Most importantly: be open and transparent.\n\nMore context: The days where companies developed software behind closed doors\nand occasionally emerged to present a new version are long gone. Developers,\nand people in general, value transparency and involvement now more than ever.\nA public forum for customers and product developers to mingle opens doors that\nsimply do not exist without that direct connection.\n\nIt is a win-win where developers who use your product feel valued and heard\nwhile you get feedback from the most important people possible: your\ncustomers.\n\nThe more superfans you have, the less there is to do in that public forum for\na product team. Over time, people organically help each other. The key is over\ntime... You do have to invest time upfront to ensure it is a place where\npeople feel safe, heard, and valued. It is well worth the effort though.\n\n### Advocacy\n\nThe promise: Developers wear a dozen hats and value great products that make\ntheir life simpler. When they find such a product, they love talking about it.\n\nCrucially though, developers also like to trash products that are, well,\ntrash. Watch out for that, you can often spot when things go downhill if you\npay attention.\n\nHow to achieve it: Monitor your public forum (see previous chapter) and social\nmedia. Engage with people who mention your product, both in positive and\nnegative scenarios. Let technical people reply to technical content to match\nthe language and provide details and insights your marketing or support teams\nmay not have.\n\nIf things went wrong in whatever way, publish a thorough post-mortem.\nDevelopers love reading them and you may very well end up on Hackernews or\nReddit where you can gain invaluable insights from the comments.\n\nMore context: There is not much more to say :-).\n\n### Ecosystem development\n\nThe promise: Develop your software with extensibility in mind and the sky is\nthe limit of what people will do with it.\n\nHow to achieve it:\n\nFor APIs: Version your APIs and do not introduce breaking changes without\nchanging the API version. There is not much more frustrating than for someone\nto build an integration on top of an API only to discover it changed without\nnotice, breaking their code and impacting their customers.\n\nAllow for user-defined output formats, e.g. JSON or YAML. Decide on a format\nyou use internally (e.g. JSON), but allow external developers to specify the\noutput format for each request (e.g. YAML). If YAML is requested, convert your\ninternal JSON structure to YAML right before you send the response. For\nincoming requests, convert the incoming YAML to JSON in the request handler\nand continue any further processing based on the JSON representation.\n\nFor CLIs: Include a CHANGELOG.md in each release and strictly follow semver\nversioning.\n\nProvide human and machine-readable output. Tables, colors, spinners, etc. are\ngreat for humans, but add no value when someone, for example, wants to pipe a\nCLI command\u2019s output to another script.\n\nEvery command must be 100 percent non-interactive when machine-readable output\nis requested. For example, my-cli users create without any flags may invoke an\ninteractive wizard whereas my-cli users create --output json --name \"John Doe\"\nprints no output other than whatever is documented as the success / error\noutput of this command. A note on errors: my-cli users create --output json\nshould exit with a non-zero exit code and machine-readable output of an error\nmentioning that a --name command flag is required.\n\nConsider support for a plugin ecosystem. Develop your CLI so that anyone can\nextend it with additional commands by placing their command\u2019s code in a\ncertain location on the file system. An incredible example of how to do this\nright is Gluegun\u2019s plugin system.\n\nFor web interfaces: Yes, even web interfaces can be extended by external\ndevelopers. Either with bookmarklets or browser extensions. To support these\nextensions, one approach is to provide data-* HTML attributes on various\nelements.This lets anyone who wants to add functionality hook into your web\ninterface and extend it as they wish.\n\nMore context: Extensibility is a powerful, yet often underestimated secret\ncompetitive advantage. Your team may be excellent, but there are always\npassionate developers who use your product and find ways to improve it in ways\nyou cannot imagine. Take Raycast for example: They make it very simple for\npeople to write extensions. If your API, CLI, or web interface allow\ndevelopers to easily hook in, they may develop a Raycast extension you would\nnot have thought of or prioritized internally. By the way, if you find such an\nextension for your product, reach out to the developer(s) and offer them to\nsponsor their work \u2013 it\u2019s the right thing to do as a business who profits from\nother people\u2019s work.\n\n### Reduce support costs\n\nThe promise: A self-explanatory product with impeccable docs leads to fewer\nsupport tickets.\n\nHow to achieve it: Constantly improve the developer experience based on\nquestions in your public forum (see above), support emails, ad-hoc\nconversations, etc. This means, engineers should rotate or at the very least\nhave access to your customer success team\u2019s tools & processes.\n\nThe majority of questions you get should be answered with a link to your docs.\nIf an answer does not exist in the docs, update the docs, then reply to the\ncustomer with the link to the docs.\n\nMore context: As information travels, details are lost. What a customer tells\nyour support team member is not the same as the support team member writes in\nan internal engineering ticket. Even that is not the same as what the\ndeveloper reading said ticket understands. The best way for developers to\nexperience what customers experience is for developers to read customer emails\nor watch user feedback video recordings.\n\nThis can be achieved asynchronously, or as part of a rotation where engineers\nwork as part of the support team a day a week / month / etc. Perhaps it is\nthat each engineer answers one customer email per week, there are many ways to\nachieve that.\n\nAnyone, technical or not, at your company should be able to update the\ndocumentation without friction and do so whenever they see a gap. A person on\nthe sales team gets a question about pricing? Check docs, update docs if\ninformation is missing. A person on the marketing team is asked about a past\nevent the company attended? Check docs, add events calendar if it does not\nexist.\n\n### Competitive advantage\n\nThe promise: A better external developer experience, despite missing features,\nleads to more customers.\n\nHow to achieve it: Apply all the suggestions from the chapters above.\n\nMore context: You have to select one of the following two companies:\n\n  * Company A: Provides all the features you need today, but you cannot get started unless you read the docs, create an account, provide a credit card and \u201cschedule a quick call with one of their sales experts\u201d\n  * Company B: Provides most of the features you need today, but you can get started within minutes and experience the product. You also see the missing features listed on the roadmap, along with past velocity, including a public status page with detailed postmortems on what went wrong.\n\nYour choice :-)\n\n## Suggestions you can apply today\n\n### Open source everything that is not \u201csecret sauce\u201d\n\nIs your marketing website open source? What about your docs? Open source both\ntoday. If you feel uncomfortable, why? Fix what makes you uncomfortable, then\nopen source the code. Increased transparency leads to increased trust!\n\nAdd an \u201cEdit this page\u201d link to every page in your documentation. Make it a\none-click effort so anyone can fix spelling mistakes, suggest better wording,\netc.\n\nThere is going to be a bit of management overhead with public source code, but\nas is the case with anything else we discussed in this article, you iterate\nand improve on it as the need arises and it will pay for itself.\n\nDo customers have access to your roadmap? Why? Why not? Are you worried your\ncompetitors will launch a feature before you do? If you really think you have\na killer feature you want to keep secret, omit it from the public roadmap \u2013\njust do not make it a habit to hide 90 percent of the features... With a\npublic roadmap, let customers provide their prioritization preferences. Make\nit clear this is no guarantee to develop features as they request them, but it\nprovides an extra signal your product team can take into account.\n\n### Deluxe error messages\n\n> \u274c Something went wrong. We are looking into it.\n\n> \u2705 The user could not be created. We had an issue connecting to the database.\n> Please try again now and one more time in five minutes. If the error\n> persists, please contact us at oops@domain.com and include this request\u2019s\n> ID: 1247e403-8dcd-4872-abd2-1a4287cf147d. You can also learn more about this\n> error at https://docs.domain.com/e/database-connection-issue.\n\nIn your code, centralize error handling. Work with internal unique error codes\nand map these codes to verbose error messages as shown above. Also centralize\nall links to docs and have an automated process that verifies a GET request to\neach link returns a 200 OK HTTP response code.\n\n### Show docs within your product\n\nAn easy, non-intrusive way to have context-aware documentation is by providing\na ? tooltip next to important areas in the web interface.\n\nAnother approach is a drawer that slides in/out with page-specific\ndocumentation.\n\nAs a last resort, and still better than nothing, you can provide links to\ndocumentation that open in a new browser tab. Remember though, there is a\npotential a user navigates to the newly opened browser tab, gets distracted\nand ends up on their social media site of choice, not returning back to your\nproduct.\n\n## Conclusion\n\nInternal & external developer experience is key to business success. It\nimpacts everything from customers, to retention, to sales, to support, and of\ncourse developers.\n\nThere is a lot to it, as you can tell by the length of this article \ud83d\ude05. My team\nand I have done this kind of work for years and helped businesses worldwide to\nimprove their developer experience.\n\nWe always start by improving a project\u2019s onboarding. It is the first\nexperience new hires and customers have with a product and with that, it is\nthe most important aspect to polish to perfection.\n\nFrom there, we dive into the daily processes and work closely with your team\nto improve internal & external developer experience.\n\nWhat is next?\n\nReturn to the tasks list above and start to reduce individual task\u2019s duration.\nAnother fairly low-hanging fruit is to improve your error messages as\ndiscussed in Deluxe error messages.\n\nAnother idea: Contact me. My team and I will provide in-depth feedback on your\nexisting developer experience. For many years, we have helped businesses\nreduce their project onboarding to a single command!\n\nIf you have an open source project, send me a link to the repository. We are\ngoing to reduce your project onboarding to minutes and send you a recording of\nwhat that looks like for your project. If you like what you see, we work\ntogether and my team and I help you improve your developer experience across\nyour product(s).\n\nLearn more at onboarding.webstone.app.\n\n\ud83d\udc4b\n\n##### Was this helpful?\n\n", "frontpage": false}
