{"aid": "40292407", "title": "From Tmux to Kitty", "url": "https://andrew.hau.st/blog/from-tmux-to-kitty/", "domain": "hau.st", "votes": 2, "user": "sodapopcan", "posted_at": "2024-05-07 22:44:56", "comments": 0, "source_title": "From Tmux to Kitty", "source_text": "From Tmux to Kitty \u2022 Andrew Haust\n\n# From Tmux to Kitty\n\nby Andrew Haust\n\nMay 7, 2024 ~16 min read\n\nFor the past several years I had been avoiding the Kitty terminal for same\nreason I was interested in it: the prospect of ditching my old friend Tmux.\n\nWhile I really enjoy customizing the ever-living heck out of my dev setup, I\u2019m\na huge fan of stability. I\u2019ve been using the Vim+Tmux combo exclusively for\nwell over a decade at this point (that\u2019s Vim with a V, not an N) and I know it\nvery well. I usually go one to two years between doing any major work on it\nand there is no shortage of other things I would rather be doing than trying\nout new editors and terminals. But I\u2019m also a fan of simplicity and\nmaintaining separate Tmux and Alacritty configs doesn\u2019t quite fit that bill.\nSo Kitty always appealed to me, I just knew it would mean dedicating a bunch\nof time learning it and making sure I could get all the must-have features\nfrom Tmux, or find suitable alternatives.\n\nThrough a combination of being recently unemployed and having an Alacritty\nupdate break things, I decided it was time to at least give Kitty a try. This\narticle serves to document the process of getting it to parity with what I had\nin Tmux. I will also share some initial thoughts with a quick overview for\nthose who need it. Please note: I work almost exclusively locally so I never\nreally used session restoration in Tmux. If you were hoping to find an answer\nto that here, you will not.\n\n## Table of Contents\n\n  * Initial Thoughts / Overview\n  * Seamless Window Navigation\n  * Window Zoom\n  * Resizing Windows\n  * Broadcasting to all windows\n  * Fonts and Symbols\n  * Copy Mode\n  * Layouts and (lack of) Sessions\n  * Conclusion\n  * Appendix\n\n## Initial thoughts / Overview\n\nI\u2019ve been using Kitty for a little over a month now and am overall quite happy\nwith it. The first obvious quality of life improvement is that cutting out a\nwhole piece of tech simplifies configuration quite a bit. With Alacritty+Tmux,\nI had to maintain two separate configs in two different formats. Alacritty\nused YAML (well, now TOML-only which is one of the things that broke my\nupdate) and requires sending raw escape codes to Tmux. Tmux has its own config\nDSL which isn\u2019t bad, but it\u2019s full of cryptic single-letter flags. Kitty also\nhas its own config DSL but it reads extremely well. For example, here is my\nconfig for moving window around:\n\n    \n    \n    map kitty_mod+ctrl+h move_window left map kitty_mod+ctrl+j move_window bottom map kitty_mod+ctrl+k move_window top map kitty_mod+ctrl+l move_window right\n\nIt\u2019s all in plain English which makes coming back to it later much easier.\nkitty_mod is a setting that lets you pick a Kitty modifier which can be a\ncombination of any keys. A simple + is used to combine keys. Key sequences are\ndenoted with >. For example, let\u2019s say you wanted to emulate Tmux\u2019s ctrl+b\nprefix, that would look like this:\n\n    \n    \n    kitty_mod ctrl+a map kitty_mod>h move_window left\n\nI\u2019m on macos and have always just used cmd as my terminal key\u2013even when I was\non iTerm which required some ugly trickery\u2014but I like to set kitty_mod anyway:\n\n    \n    \n    kitty_mod super\n\nAnother nice thing is that Kitty is clearly made with Vim in mind. Tmux had a\nminor annoyance in that it introduces from mismatched terminology\u2014What Vim\ncalls a window, Tmux calls a pane, and what Vim calls a tab, Tmux calls a\nwindow. This wasn\u2019t the biggest deal, but it\u2019s nice no longer having to make\nthe mental swap. Kitty\u2019s config even uses the same strange line continuations\nthat vimscript does: a backslash on the following line. Most would not\nconsider this to be a good thing, and in fact vim9script has done away with\nit, but I still appreciate it :) You will see this in action below.\n\nWhile Kitty is super customizable through its base config language alone, you\ncan take it way further through Python scripts called \u201ckittens.\u201d In fact, a\nlarge portion of Kitty is written in Python. Having managed to avoid this\nlanguage for the ~35 years of computer use this has probably been the biggest\ndownside of Kitty so far but hey, it\u2019s by no means a deal-breaker. My brother\nuses it a lot so it\u2019s been a good opportunity to learn a bit more so we\u2019ll be\na little bit more on the same wavelength when we chat. I\u2019ll show you a kitten\nI wrote at the end of this post.\n\nI\u2019m not a big mouse-user, but I am by no stretch anti-mouse. Using it through\nTmux was always a bit of pain as it would first have to switch to copy mode\nand selection could be a tad clunky. Since Kitty isn\u2019t using a multiplexer, it\njust works as you would expect in any terminal. Honestly, though, this is\npretty minor as it\u2019s not that bad Tmux.\n\nFinally, it\u2019s a nice touch that Kitty lets you change its icon by simply\nputting a png called kitty.app.png in your config dir. This makes it easy to\nkeep under source control. There are some nice icons out there but I got\ninspired to make my own. It looks like this:\n\nIt\u2019s not as flashy as some of the other available ones, but I like it. Feel\nfree to use it if you do too!\n\nThat\u2019s enough initial thoughts, let\u2019s getting to config\u2019ing.\n\n## Seamless Window Navigation\n\nPossibly the most crucial thing for me is the ability to seamlessly move my\ncursor between Kitty and Vim windows with the same keybindings. Tmux has Vim\nTmux Navigator and thankfully, Kitty has Vim Kitty Navigator .\n\nVim Kitty Navigator is a kitten along with a Vim plugin. If you use vim-plug\nthen you can install them both in one go like so:\n\n    \n    \n    Plug 'knubie/vim-kitty-navigator', {'do': 'cp ./*.py ~/.config/kitty/'}\n\nThis copies two kitten files into your Kitty config dir and creates the\nclassic ctrl+h/j/k/l Vim mappings for moving between windows. You then need to\nadd mappings to your Kitty config. I prefer to use my kitty_mod for this\nespecially since I frequently use the native functions of both ctrl+h and\nctrl+l at the command line (backspace and clearscreen, respectively). It also\nfrees up some prime homerow real estate for other Vim mappings.\n\nSo instead I create some pretty esoteric Vim mappings will never get in my\nway:\n\n    \n    \n    let g:kitty_navigator_no_mappings = 1 nnoremap <silent> <c-`>h :KittyNavigateLeft<cr> nnoremap <silent> <c-`>j :KittyNavigateDown<cr> nnoremap <silent> <c-`>k :KittyNavigateUp<cr> nnoremap <silent> <c-`>l :KittyNavigateRight<cr>\n\nThen I have the following to my Kitty config:\n\n    \n    \n    map kitty_mod+h kitten pass_keys.py left ctrl+\\`>h map kitty_mod+j kitten pass_keys.py bottom ctrl+\\`>j map kitty_mod+k kitten pass_keys.py top ctrl+\\`>k map kitty_mod+l kitten pass_keys.py right ctrl+\\`>l\n\n## Window Zoom\n\nKitty doesn\u2019t have window zoom in name, but it does has a simple way to make\nit happen. Like Tmux, Kitty has layouts and one of those is the stack layout\nwhere windows within a tab are stacked on top of one another. So switching\nbetween stack and any other layout is equivalent to zoom! Let\u2019s get this\nworking:\n\nFirst, you actually have to opt into the layouts you want. I just use splits\nwhich is the one you use when you want full control. So I enable that along\nwith stack:\n\n    \n    \n    enabled_layouts splits,stack\n\nFrom here, the simplest way forward is by using Kitty\u2019s toggle_layout mappable\naction.\n\n    \n    \n    map kitty_mod+z toggle_layout stack\n\nHowever, this doesn\u2019t does quite get us to how it works in Tmux. Upon entering\nthe stack layout, the window is re-drawn with its currently visible text\nanchored to the top leaving your prompt floating somewhere near the middle of\nthe screen. Kitty has a very convenient action called scroll_prompt_to_bottom\nas well as another useful one called combine which lets you, well, combine\narbitrary actions. So our desired behaviour can be achieved like so:\n\n    \n    \n    map kitty_mod+z combine : toggle_layout stack : scroll_prompt_to_bottom\n\nThe :s here can be any character (or characters!) you want to use as an action\nseparator.\n\nLastly, I like to have an indicator when a tab has been zoomed. At the moment\nI just use a # beside the tab\u2019s name. For this we can use tab_title_template.\nThe value is parsed as a Python f string so we can put Python expressions\nwithin {}s in our tab title template. Mine looks like this:\n\n    \n    \n    tab_title_template \"{' #' if layout_name == 'stack' else ' '}{fmt.fg.red}{bell_symbol}{fmt.fg.tab}{title} \"\n\n## Resizing Windows\n\nTmux has the concept of \u201cdirectional resizing\u201d where you can resize panes up,\ndown, left, and right. Kitty takes an alternate approach in that where you\nmake a window taller, shorter, wider, and narrower. This paradigm made me\nrealize I could simplify things a by just having a two mappings, one for\ntaller and one for wider, so I tried it for a few hours. Normally I can get\nused to new things like this but there were a little too many new things\nhappening. It also made me aware of just how often I resize windows! I may try\nand re-train myself in the future but for the time being I just wanted what I\nhad in Tmux back. So thanks to github user @chancez for creating the relative\nresize kitten .\n\nCopy that file into your Kitty config directory then added the following\nconfig:\n\n    \n    \n    map kitty_mod+shift+h kitten relative_resize.py left map kitty_mod+shift+j kitten relative_resize.py down map kitty_mod+shift+k kitten relative_resize.py up map kitty_mod+shift+l kitten relative_resize.py right\n\nThis doesn\u2019t work perfectly. For example, If you have three horizontal splits,\nresizing the middle one moves in the opposite direction you\u2019d expect and\nresizing the bottom one also moves the middle one. In practice I never have\nthis situation so this works perfectly for me.\n\n## Broadcasting to all windows\n\nThis isn\u2019t something I use daily or even weekly, but I do use it often enough\nthat I didn\u2019t want to work around not having it. Kitty ships with a kitten to\ndo this and, once again, it works a bit differently. While Tmux lets you enter\n\u201cpane sync mode\u201d where you type at any available prompt, Kitty opens up a\ndedicated window with a non-shell prompt that does nothing other than\nbroadcast its input to all other windows. You close it when you\u2019re done.\n\nThis isn\u2019t quite as \u201cslick\u201d as Tmux\u2019s version but it turns out I like it quite\na bit better. In Tmux I would add some very bright yellow highlights to my\ntabline to indicate that I was in this mode but even then I would sometimes\nforget to switch it off. This is pretty much impossible with the dedicated\nwindow.\n\nBy default, the text will broadcast to all windows, even ones in other tabs. I\ndon\u2019t ever want this so here\u2019s how to confine it to only the current tab. I\nalso use esc to quit:\n\n    \n    \n    map kitty_mod+shift+s launch --allow-remote-control \\ kitty +kitten broadcast \\ --match-tab state:focused \\ --end-session esc\n\n## Fonts and Symbols\n\nI use a Nerd Font and only a very minimal set of standard UTF-8 symbols as\nindicators. I\u2019m not going to dive into it but there are issues where some\nsymbols don\u2019t render. This blog post explains it and recommends installing the\nNerd Symbol font. It also gives you a whole list of character codes to map to\nit\u2014Kitty gives you per-character control over which font to use which is\npretty cool! Since UTF-8 suits me just fine, I have a very simple font config:\n\n    \n    \n    font_family BlexMono Nerd Font symbol_map U+017F-U+1869F Menlo\n\nThis uses BlexMono for the Latin alphabet, including diacritics, and Menlo for\neverything else.\n\nIf your needs are different, this is a very helpful page .\n\n## Copy mode\n\nThis is where things start to get hairy for many people because, by design,\nKitty does not have copy mode.\n\nIt\u2019s an often-requested feature , but the author stands his ground. His\nreasoning is actually pretty sound: why implement such a feature when you\ncould just use Vim. This would be great if there was a universally dead simple\nand cross-platform way to make it work. Digging into this issue was\nexhausting. It seems there are possibly good solutions for NeoVim but not\nnecessarily for Vim (rude).\n\nI\u2019ve ultimately been flip-flopping between two solutions. One is Kitty Grab .\nIt\u2019s not quite as good as Tmux\u2019s copy mode\u2014the Vim motions are a little wonky\nand it lacks any kind of indication that you are in this mode (though I\u2019m sure\nI could figure out how to add that) but it works. The other option, which I\ncurrently have enabled, is the standard recommendation of using Vim but, as\nmentioned previously, it wasn\u2019t simple to get working. I found a solution\nburied in the previously linked github issue and ended up with this:\n\n    \n    \n    scrollback_pager vim -u NONE - \\ -c 'w! /tmp/kitty_scrollback' \\ -c 'term ++curwin cat /tmp/kitty_scrollback' \\ -c \"set clipboard=unnamed\" \\ -c \"hi Normal ctermbg=235\" \\ -c \"nnoremap Y y$\" \\ -c \"tnoremap i ZQ\"\n\nThen map a scrollback key like so:\n\n    \n    \n    map kitty_mod+i show_scrollback\n\nIt\u2019s a bit convoluted and requires writing a tmp file, but it is what it is! A\nquick explanation of what\u2019s going on here:\n\n  * start Vim with no vimrc\n  * write Kitty\u2019s scrollback to /tmp/kitty_scrollback\n  * call :term with the current directory and read in the tmp file\n  * set unnamed clipboard option so use the system clipboard\n  * darken the background slightly so it\u2019s super obvious I\u2019m in this mode\n  * make Y work like you\u2019d expect it to as it\u2019s useful in this mode\n  * use i to to return to prompt, which is similar to exiting :term\n\nThere is some weirdness with it\u2014cat adds an extra blank line at the end (not a\nbig deal but some people were complaining about it) and if there is a lot of\nscrollback, it can be jarring while it loads it all in but overall it works.\n\nI am aware of vimpager but I couldn\u2019t get it to work \ud83e\udd37\n\nOtherwise, because just regular scrollback works. I have cmd+ctrl+y and\ncmd+ctrl+e to scroll up and down (mimicking Vim) and, as previously mentioned,\nhighlighting with the mouse is a pleasant experience since we\u2019re not in a\nspecific copy mode. So this is always an option too if you don\u2019t completely\nshun the mouse.\n\n## Layouts and (lack of) Sessions\n\nAs mentioned earlier, I don\u2019t use predefined \u201cauto\u201d layouts, nor did I use\nTmux\u2019s session restoration. For this reason, this section will veer more into\nmy personal workflow and out of scope of Kitty-Tmux parity. If that doesn\u2019t\ninterest you, you can safely skip to the conclusion or, you know, just stop\nreading here!\n\nWhile I don\u2019t use auto-layouts, I do always work in one of manual layouts. I\nsometimes make temporary new windows, but I prefer to have full control over\nwhere those are. My two mappings for creating Kitty windows are:\n\n    \n    \n    map kitty_mod+_ launch --location=hsplit --cwd=current map kitty_mod+| launch --location=vsplit --cwd=current\n\nThese are very similar to my Vim mappings:\n\n    \n    \n    nnoremap <silent> _ :split<CR> nnoremap <silent> \\| :vsplit<CR>\n\nWhen it comes to session restoration, I really only care about my Vim sessions\nand for that, I have been a very long time user of obession.vim . When it\ncomes to terminal window layouts, I\u2019m usually able to work very compactly in\none tab per project.\n\nAll my web projects have this layout:\n\nVim is in the top. I have a server log running in the bottom right corner and\nsince I exclusively work on Elixir projects these days, that also doubles as a\nREPL. On the bottom left for misc things. Sometimes I open a dedicated REPL in\nthere, or a db client\u2014though I mostly use DadBod and DadBodUI \u2014and of course I\noften just run commands there when I want easy reference to their output. I do\nalso sometimes use Vim\u2019s terminal if I\u2019m feeling saucy and of course use :!.\n\nFor non-web dev stuff, I use a 2-window tab like so:\n\nAnd finally I sometimes use just one window, though I don\u2019t need to show you\nwhat that looks like.\n\nTo get myself a new tab for a project in any of these layouts, I made myself a\nkitten. I invoke it with one of cmd+1, cmd+2, or cmd+3 for one, two, or three\nwindows, respectively. It prompts me for a project\u2019s path, or partial path,\nthen in a new tab starts opening each window and calling autojump with the\npath. It also auto-opens Vim in the main window as I almost never don\u2019t want\nthat.\n\nSometimes I have to give autojump more context to get the right directory. For\nexample, I have a directory called playground/ full of subdirectories for many\ndifferent programming languages I like to try things out in. So if I want a\nnew tab in playground/elixir I\u2019ll type play elixir, but I\u2019d rather the tab\njust be called elixir. Using : as a delimiter, I can provide a name for the\ntab, eg: play elixir:elixir. I considered splitting on space and taking the\nlast token as the name but I decided I wanted the extra control for now.\n\nThe kitten looks like this:\n\n    \n    \n    def main(_args): location_and_maybe_name = input('New tab: ') return location_and_maybe_name def handle_result(args, location_and_maybe_name, target_window_id, boss): num_windows = int(args[1]) pieces = location_and_maybe_name.split(':') location = pieces[0] if len(pieces) > 1: title = pieces[1] else: title = location window = boss.window_id_map.get(target_window_id) if window is not None: boss.call_remote_control(window, ('action', 'new_tab')) boss.call_remote_control(window, ('action', 'set_tab_title', title)) _set_win(boss, window, location) if num_windows > 1: boss.call_remote_control(window, ('launch', '--type=window', '--location=hsplit')) _set_win(boss, window, location) if num_windows > 2: boss.call_remote_control(window, ('launch', '--type=window', '--location=vsplit')) _set_win(boss, window, location) boss.call_remote_control(window, ('action', 'previous_window')) boss.call_remote_control(window, ('action', 'previous_window')) boss.call_remote_control(window, ('action', 'resize_window taller 20')) boss.call_remote_control(window, ('send-text', 'e\\n')) # `e` is my terminal alias for vim def _set_win(boss, window, location): if location != \"\": boss.call_remote_control(window, ('send-text', f'autojump {location}\\n'))\n\nThen in my Kitty config I have the following:\n\n    \n    \n    map kitty_mod+1 kitten new_tab.py 1 map kitty_mod+2 kitten new_tab.py 2 map kitty_mod+3 kitten new_tab.py 3\n\nThe whole thing is quite bone-headed, really. My initial version shelled out\nto autojump then passed the returned path to Kitty\u2019s launch command to create\neach window but it didn\u2019t work outside of development mode. I\u2019m assuming it\nhas to do with this issue .\n\nAs stated earlier, I don\u2019t know Python very well and there is a still a lot\nfor me to learn about Kitty when it comes to even grokking how scripting it\nactually works. For that reason I\u2019m not going to do a deep dive into what\u2019s\ngoing on here, I just wanted to share the kitten.\n\n## Conclusion\n\nHopefully this helped you get Kitty more on par with your Tmux setup. My only\nreal sticking point is scrollback which I\u2019m hoping I can find a better\nsolution for at some point, but overall I\u2019m super happy with Kitty and hoping\nto stick with it for the next several years at least. I also still have a lot\nto get used to in terms of Kitty\u2019s scripting model but that will come with\ntime. For now I\u2019m at a good place with it right now so it\u2019ll likely be a while\nbefore I dive in again. But we\u2019ll see!\n\n## Appendix\n\n  * Seamless Window Navigation\n  * Window Zoom\n  * Resizing Window\n  * Broadcasting to all Windows\n  * Symbols\n  * Copy Mode\n\n### Seamless Window Navigation\n\nInstall: Vim Kitty Navigator\n\n    \n    \n    \" vimrc let g:kitty_navigator_no_mappings = 1 nnoremap <silent> <c-`>h :KittyNavigateLeft<cr> nnoremap <silent> <c-`>j :KittyNavigateDown<cr> nnoremap <silent> <c-`>k :KittyNavigateUp<cr> nnoremap <silent> <c-`>l :KittyNavigateRight<cr>\n    \n    \n    # Kitty config map kitty_mod+h kitten pass_keys.py left ctrl+\\`>h map kitty_mod+j kitten pass_keys.py bottom ctrl+\\`>j map kitty_mod+k kitten pass_keys.py top ctrl+\\`>k map kitty_mod+l kitten pass_keys.py right ctrl+\\`>l\n\n### Window Zoom\n\n    \n    \n    enabled_layouts splits,stack map kitty_mod+z combine : toggle_layout stack : scroll_prompt_to_bottom tab_title_template \"{' #' if layout_name == 'stack' else ' '}{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{title} \"\n\n### Resizing Windows\n\nCopy this kitten into your Kitty config dir then add the following to your\nconfig file:\n\n    \n    \n    map kitty_mod+shift+h kitten relative_resize.py left map kitty_mod+shift+j kitten relative_resize.py down map kitty_mod+shift+k kitten relative_resize.py up map kitty_mod+shift+l kitten relative_resize.py right\n\n### Broadcast to all Windows\n\n    \n    \n    map kitty_mod+shift+s launch --allow-remote-control \\ kitty +kitten broadcast \\ --match-tab state:focused \\ --end-session esc\n\n### Symbols\n\n    \n    \n    font_family BlexMono Nerd Font symbol_map U+017F-U+1869F Menlo\n\n### Copy Mode\n\nEither use Kitty Grab or use Vim as a pager:\n\n    \n    \n    scrollback_pager vim -u NONE - \\ -c 'w! /tmp/kitty_scrollback' \\ -c 'term ++curwin cat /tmp/kitty_scrollback' \\ -c \"set clipboard=unnamed\" \\ -c \"hi Normal ctermbg=235\" \\ -c \"nnoremap Y y$\" \\ -c \"tnoremap i ZQ\" map kitty_mod+i show_scrollback\n\nGlobal .gitignores for All!\n\n", "frontpage": false}
