{"aid": "40237649", "title": "Combining CSS:Has() and HTML <Select> for Greater Conditional Styling", "url": "https://www.smashingmagazine.com/2024/05/combining-css-has-html-select-conditional-styling/", "domain": "smashingmagazine.com", "votes": 1, "user": "ulrischa", "posted_at": "2024-05-02 15:53:19", "comments": 0, "source_title": "Combining CSS :has() And HTML <select> For Greater Conditional Styling", "source_text": "Combining CSS :has() And HTML <select> For Greater Conditional Styling \u2014\nSmashing Magazine\n\nSkip to main content Start reading the article Jump to list of all articles\nJump to all topics\n\n  * Amit Sheen\n  * May 2, 2024\n  * 0 comments\n\n# Combining CSS :has() And HTML <select> For Greater Conditional Styling\n\n  * 6 min read\n  * CSS, Techniques, Design\n  * Share on Twitter, LinkedIn\n\n#### About The Author\n\nAmit is an experienced web developer who mainly does front-end, specializing\nin CSS, animations, and creative coding. Over the years, he\u2019s taken part in\n... More about Amit \u21ac\n\n#### Email Newsletter\n\nWeekly tips on front-end & UX. Trusted by 200,000+ folks.\n\n  * Flexible CMS. Headless & API 1st\n\n  * Accessibility for Designers, with St\u00e9phanie Walter\n  * Smart Interface Design Patterns, 10h video + UX training\n\n  * Creating and Maintaining Successful Design Systems, with Brad Fost\n  * Behavioral Design Workshop, with Susan and Guthrie Weinschenk\n\nWhile the CSS :has() pseudo-class is widely celebrated for its ability to\nselect a parent element up the chain conditionally based on its contents,\nthere is more conditional logic it is capable of handling when we move it up\nthe chain, so to speak. Amit Sheen demonstrates using :has() to apply styles\nconditionally when a certain <option> in a <select> element is chosen by the\nuser and how we gain even more conditional styling capabilities when chaining\n:has() with other pseudo-classes, such as :not() \u2014 no JavaScript necessary.\n\nEven though the CSS :has() pseudo-class is relatively new, we already know a\nlot about it, thanks to many, many articles and tutorials demonstrating its\npowerful ability to conditionally select elements based on their contents.\nWe\u2019ve all seen the card component and header examples, but the conditional\nnature of :has() actually makes it adept at working with form controls, which\nare pretty conditional in nature as well.\n\nLet\u2019s look specifically at the <select> element. With it, we can make a choice\nfrom a series of <option>s. Combined with :has(), we are capable of\nmanipulating styles based on the selected <option>.\n\n    \n    \n    <select> <option value=\"1\" selected>Option 1</option> <option value=\"2\">Option 2</option> <option value=\"3\">Option 3</option> <option value=\"4\">Option 4</option> <option value=\"5\">Option 5</option> </select>\n\nThis is your standard <select> usage, producing a dropdown menu that contains\noptions for user selection. And while it\u2019s not mandatory, I\u2019ve added the\nselected attribute to the first <option> to set it as the initial selected\noption.\n\nApplying styles based on a user\u2019s selection is not a new thing. We\u2019ve had the\nCheckbox Hack in our pockets for years, using the :checked CSS pseudo-class to\nstyle the element based on the selected option. In this next example, I\u2019m\nchanging the element\u2019s color and the background-color properties based on the\nselected <option>.\n\nSee the Pen [demo 01 - Using the :has selector on a dropdown\nmenu](https://codepen.io/smashingmag/pen/oNOwded) by Amit Sheen.\n\nSee the Pen demo 01 - Using the :has selector on a dropdown menu by Amit\nSheen.\n\nMeet Smashing Workshops on front-end, design & UX, with practical takeaways,\nlive sessions, video recordings and a friendly Q&A. With Brad Frost, St\u00e9ph\nWalter and so many others.\n\nJump to the workshops \u21ac\n\nBut that\u2019s limited to styling the current element, right? If a particular\n<option> is :checked, then we style its style. We can write a more complex\nselector and style child elements based on whether an <option> is selected up\nthe chain, but that\u2019s a one-way road in that we are unable to style up parent\nelements even further up the chain.\n\nThat\u2019s where :has() comes in because styling up the chain is exactly what it\nis designed to do; in fact, it\u2019s often called the \u201cparent selector\u201d for this\nreason (although \u201cfamily selector\u201d may be a better descriptor).\n\nFor example, if we want to change the background-color of the <select> element\naccording to the value of the selected <option>, we select the element if it\nhas a specific [value] that is :checked.\n\nSee the Pen [demo 02 - Using the :has selector on a dropdown\nmenu](https://codepen.io/smashingmag/pen/eYoRopZ) by Amit Sheen.\n\nSee the Pen demo 02 - Using the :has selector on a dropdown menu by Amit\nSheen.\n\nJust how practical is this? One way I\u2019m using it is to style mandatory\n<select> elements without a valid selected <option>. So, instead of applying\nstyles if the element :has() a :checked state, I am applying styles if the\nrequired element does :not(:has(:checked)).\n\nSee the Pen [demo 02.1 - Using the :has selector on a dropdown\nmenu](https://codepen.io/smashingmag/pen/jORLoVM) by Amit Sheen.\n\nSee the Pen demo 02.1 - Using the :has selector on a dropdown menu by Amit\nSheen.\n\nBut why stop there? If we can use :has() to style the <select> element as the\nparent of an <option>, then we can also use it to style the parent of the\n<select>, as well as its parent, in addition to its parent, and even its\nparent... all the way up the chain to the :root element. We could even bring\n:has() all the way up the chain and sniff out whether any <select> child of\nthe document :root :has() a particular <option> that is :checked:\n\n    \n    \n    :root:has(select [value=\"foo\"]:checked) { // Styles applied if <option value=\"foo\"> is <select>-ed }\n\nThis is useful for setting a custom property value dynamically or applying a\nset of styles for the whole page. Let\u2019s make a little style picker that\nillustrates the idea of setting styles on an entire page.\n\nSee the Pen [demo 03 - Using the :has selector on a dropdown\nmenu](https://codepen.io/smashingmag/pen/yLrXroO) by Amit Sheen.\n\nSee the Pen demo 03 - Using the :has selector on a dropdown menu by Amit\nSheen.\n\nOr perhaps a theme picker:\n\nSee the Pen [demo 04 - Using the :has selector on a dropdown\nmenu](https://codepen.io/smashingmag/pen/OJGgjaJ) by Amit Sheen.\n\nSee the Pen demo 04 - Using the :has selector on a dropdown menu by Amit\nSheen.\n\nHow that last example works is that I added a class to each <select> element\nand referenced that class inside the :has() selector in order to prevent\nunwanted selections in the event that there are multiple <select> elements on\nthe page.\n\nAnd, of course, we don\u2019t have to go all the way up to the :root element. If\nwe\u2019re working with a specific component, we can scope :has() to that component\nlike in the following demo of a star rating component.\n\nSee the Pen [demo 05 - Using the :has selector on a dropdown\nmenu](https://codepen.io/smashingmag/pen/rNbwvqz) by Amit Sheen.\n\nSee the Pen demo 05 - Using the :has selector on a dropdown menu by Amit\nSheen.\n\n> Watch a short video tutorial I made on using CSS to create 3D animated\n> stars.\n\n## Conclusion\n\nWe\u2019d be doing :has() a great disservice if we only saw it as a \u201cparent\nselector\u201d rather than the great conditional operator it is for applying styles\nall the way up the chain. Seen this way, it\u2019s more of a modern upgrade to the\nCheckbox Hack in that it sends styles up like we were never able to do before.\n\nThere are endless examples of using :has() to create style variations of a\ncomponent according to its contents. We\u2019ve even seen it used to accomplish the\nonce-complicated linked card pattern. But now you have an example for using it\nto create dropdown menus that conditionally apply styles (or don\u2019t) to a page\nor component based the currently selected option \u2014 depending on how far up the\nchain we scope it.\n\nI\u2019ve used this technique a few different ways \u2014 e.g., as form validation, a\nstyle picker, and star ratings \u2014 but I\u2019m sure there are plenty of other ways\nyou can imagine how to use it in your own work. And if you are using :has() on\na <select> element for something different or interesting, let me know because\nI\u2019d love to see it!\n\n#### Further Reading On SmashingMag\n\n  * \u201cLevel Up Your CSS Skills With The :has() Selector,\u201d Stephanie Eckles\n  * \u201cMeet :has, A Native CSS Parent Selector (And More),\u201d Adrian Bece\n  * \u201cSetting And Persisting Color Scheme Preferences With CSS And A \u201cTouch\u201d Of JavaScript,\u201d Henry Bley-Vroman\n  * \u201cThe Complex But Awesome CSS border-image Property,\u201d Temani Afif\n\n(gg, yk)\n\nExplore more on\n\n#### Smashing Newsletter\n\nTips on front-end & UX, delivered weekly in your inbox. Just the things you\ncan actually use.\n\n#### Front-End & UX Workshops, Online\n\nWith practical takeaways, live sessions, video recordings and a friendly Q&A.\n\n#### TypeScript in 50 Lessons\n\nEverything TypeScript, with code walkthroughs and examples. And other printed\nbooks.\n\n#### Browse All Smashing Magazine Topics\n\n  * Accessibility\n  * Best practices\n  * Business\n  * Career\n  * Checklists\n  * CSS\n  * Data Visualization\n  * Design\n  * Design Patterns\n  * Design Systems\n  * E-Commerce\n  * Figma\n  * Freebies\n  * HTML\n  * Illustrator\n  * Inspiration\n  * JavaScript\n  * Mobile\n  * Performance\n  * Privacy\n  * React\n  * Responsive Design\n  * Round-Ups\n  * SEO\n  * Typography\n  * Tools\n  * UI\n  * Usability\n  * UX\n  * Vue\n  * Wallpapers\n  * Web Design\n  * Workflow\n\nWith a commitment to quality content for the design community.\n\nFounded by Vitaly Friedman and Sven Lennartz. 2006\u20132024.\n\nSmashing is proudly running on Netlify, TinaCMS and Swell.\n\nFonts by Latinotype.\n\n  * \u270e Write for us\n  * Contact us\n  * About us (Impressum)\n  * Privacy policy\n  * Membership login\n  * Delivery times\n  * Advertise\n\n", "frontpage": false}
