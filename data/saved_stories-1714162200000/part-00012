{"aid": "40168242", "title": "PEP 686 \u2013 Make UTF-8 mode default", "url": "https://peps.python.org/pep-0686/", "domain": "python.org", "votes": 3, "user": "GalaxySnail", "posted_at": "2024-04-26 11:55:14", "comments": 0, "source_title": "PEP 686 \u2013 Make UTF-8 mode default | peps.python.org", "source_text": "PEP 686 \u2013 Make UTF-8 mode default | peps.python.org\n\n# Python Enhancement Proposals\n\n  * Python \u00bb\n  * PEP Index \u00bb\n  * PEP 686\n\n# PEP 686 \u2013 Make UTF-8 mode default\n\nAuthor:\n\n    Inada Naoki <songofacandy at gmail.com>\nDiscussions-To:\n\n    Discourse thread\nStatus:\n\n    Accepted\nType:\n\n    Standards Track\nCreated:\n\n    18-Mar-2022\nPython-Version:\n\n    3.15\nPost-History:\n\n    18-Mar-2022, 31-Mar-2022\nResolution:\n\n    Discourse message\n\n## Abstract\n\nThis PEP proposes enabling UTF-8 mode by default.\n\nWith this change, Python consistently uses UTF-8 for default encoding of\nfiles, stdio, and pipes.\n\n## Motivation\n\nUTF-8 becomes de facto standard text encoding.\n\n  * The default encoding of Python source files is UTF-8.\n  * JSON, TOML, YAML use UTF-8.\n  * Most text editors, including Visual Studio Code and Windows Notepad use UTF-8 by default.\n  * Most websites and text data on the internet use UTF-8.\n  * And many other popular programming languages, including Node.js, Go, Rust, and Java uses UTF-8 by default.\n\nChanging the default encoding to UTF-8 makes it easier for Python to\ninteroperate with them.\n\nAdditionally, many Python developers using Unix forget that the default\nencoding is platform dependent. They omit to specify encoding=\"utf-8\" when\nthey read text files encoded in UTF-8 (e.g. JSON, TOML, Markdown, and Python\nsource files). Inconsistent default encoding causes many bugs.\n\n## Specification\n\n### Enable UTF-8 mode by default\n\nPython will enable UTF-8 mode by default from Python 3.15.\n\nUsers can still disable UTF-8 mode by setting PYTHONUTF8=0 or -X utf8=0.\n\n### locale.getencoding()\n\nSince UTF-8 mode affects locale.getpreferredencoding(False), we need an API to\nget locale encoding regardless of UTF-8 mode.\n\nlocale.getencoding() will be added for this purpose. It returns locale\nencoding too, but ignores UTF-8 mode.\n\nWhen warn_default_encoding option is specified, locale.getpreferredencoding()\nwill emit EncodingWarning like open() (see also PEP 597).\n\nThis API was added in Python 3.11.\n\n### Fixing encoding=\"locale\" option\n\nPEP 597 added the encoding=\"locale\" option to the TextIOWrapper. This option\nis used to specify the locale encoding explicitly. TextIOWrapper should use\nlocale encoding when the option is specified, regardless of default text\nencoding.\n\nBut TextIOWrapper uses \"UTF-8\" in UTF-8 mode even if encoding=\"locale\" is\nspecified for now. This behavior is inconsistent with the PEP 597 motivation.\nIt is because we didn\u2019t expect making UTF-8 mode default when Python changes\nits default text encoding.\n\nThis inconsistency should be fixed before making UTF-8 mode default.\nTextIOWrapper should use locale encoding when encoding=\"locale\" is passed even\nin UTF-8 mode.\n\nThis issue was fixed in Python 3.11.\n\n## Backward Compatibility\n\nMost Unix systems use UTF-8 locale and Python enables UTF-8 mode when its\nlocale is C or POSIX. So this change mostly affects Windows users.\n\nWhen a Python program depends on the default encoding, this change may cause\nUnicodeError, mojibake, or even silent data corruption. So this change should\nbe announced loudly.\n\nThis is the guideline to fix this backward compatibility issue:\n\n  1. Disable UTF-8 mode.\n  2. Use EncodingWarning (PEP 597) to find every places UTF-8 mode affects.\n\n     * If encoding option is omitted, consider using encoding=\"utf-8\" or encoding=\"locale\".\n     * If locale.getpreferredencoding() is used, consider using \"utf-8\" or locale.getencoding().\n  3. Test the application with UTF-8 mode.\n\n## Preceding examples\n\n  * Ruby changed the default external_encoding to UTF-8 on Windows in Ruby 3.0 (2020).\n  * Java changed the default text encoding to UTF-8 in JDK 18. (2022).\n\nBoth Ruby and Java have an option for backward compatibility. They don\u2019t\nprovide any warning like PEP 597\u2019s EncodingWarning in Python for use of the\ndefault encoding.\n\n## Rejected Alternative\n\n### Deprecate implicit encoding\n\nDeprecating the use of the default encoding is considered.\n\nBut there are many cases that the default encoding is used for reading/writing\nonly ASCII text. Additionally, such warnings are not useful for non-cross\nplatform applications run on Unix.\n\nSo forcing users to specify the encoding everywhere is too painful. Emitting a\nlot of DeprecationWarning will lead users ignore warnings.\n\nPEP 387 requires adding a warning for backward incompatible changes. But it\ndoesn\u2019t require using DeprecationWarning. So using optional EncodingWarning\ndoesn\u2019t violate the PEP 387.\n\nJava also rejected this idea in JEP 400.\n\n### Use PYTHONIOENCODING for PIPEs\n\nTo ease backward compatibility issue, using PYTHONIOENCODING as the default\nencoding of PIPEs in the subprocess module is considered.\n\nWith this idea, users can use legacy encoding for subprocess.Popen(text=True)\neven in UTF-8 mode.\n\nBut this idea makes \u201cdefault encoding\u201d complicated. And this idea is also\nbackward incompatible.\n\nSo this idea is rejected. Users can disable UTF-8 mode until they replace\ntext=True with encoding=\"utf-8\" or encoding=\"locale\".\n\n## How to teach this\n\nFor new users, this change reduces things that need to teach. Users don\u2019t need\nto learn about text encoding in their first year. They should learn it when\nthey need to use non-UTF-8 text files.\n\nFor existing users, see the Backward compatibility section.\n\n## Copyright\n\nThis document is placed in the public domain or under the CC0-1.0-Universal\nlicense, whichever is more permissive.\n\nSource: https://github.com/python/peps/blob/main/peps/pep-0686.rst\n\nLast modified: 2023-09-09 17:39:29 GMT\n\n", "frontpage": true}
