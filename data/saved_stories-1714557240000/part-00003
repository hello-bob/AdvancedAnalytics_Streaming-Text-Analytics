{"aid": "40218926", "title": "Slashing Latency: How Uber's Cloud Proxy Transformed India's User Experience", "url": "https://todo-fix-this.blogspot.com/2024/04/slashing-latency-how-ubers-cloud-proxy.html", "domain": "todo-fix-this.blogspot.com", "votes": 1, "user": "MrDavidCampbell", "posted_at": "2024-05-01 02:35:26", "comments": 0, "source_title": "Slashing Latency: How Uber's Cloud Proxy Transformed India's User Experience", "source_text": "TODO: Fix This: Slashing Latency: How Uber's Cloud Proxy Transformed India's\nUser Experience\n\n# TODO: Fix This\n\nJust another engineer wrestling with AI. From Silicon Valley startups to\ncongressional showcases, I\u2019m hacking away at the future of responsible AI, one\npost at a time.\n\n## Tuesday, April 30, 2024\n\n### Slashing Latency: How Uber's Cloud Proxy Transformed India's User\nExperience\n\nIn the fast-paced world of globally scaled technology, every millisecond\ncounts. I joined Uber in April of 2015, and if I'm being truly honest, I'm not\nsure if this story happened at the end of 2015 or in 2016. It all sort of\nblurs together when you're working at a startup like Uber. For the sake of\nthis story, I'm going to say that it's late 2015. We were already a global\ncompany and were constantly under the immense pressure of scale.\n\nOne day, while working in the office at 555 Market Street in downtown San\nFrancisco, I overheard a conversation that piqued my interest. If I'm being\nhonest, it sort of pissed me off. A team was discussing the high latency\nissues faced by our users in India. The latency was so severe that it took\nover 900 milliseconds to initialize the first fetch, stacking on each other\nand making the experience miserable. In hindsight, anger may have been a\ntelling state of my emotional headspace at the time, but that's for another\nstory. But I was angry for our users in India. I was angry they had to wait\nSECONDS just for the page to load. Adding to that, most of India at the time\nwas on the 3G networking and on remote or rural connectivity, and their\nexperiences would have made my mind numb.\n\nThink about that. When most of us load an app that takes longer than 250 ms to\ninitially fetch data, you'll usually do 1 of two things.\n\n  1. Close the app and re-open it, hoping it's a transient issue.\n  2. Close the app and never return.\n\nBack at Uber HQ (or it was HQ at the time), I continued to listen to a group\nof engineers talking about how they wanted to approach this problem. They had\nbeen discussing using Squid, Nginx, or even a CDN to cache data at the edge of\nour data centers... They wanted to cache assets in our data centers... IN THE\nUNITED STATES! This was simply unacceptable. Anyone that has experienced any\ntype of scale before can tell you this wouldn't even make a dent in terms of\nactual latency reduction. If I had to guess, it'd be in the terms of 10s of\nmilliseconds, if that. As I continued to listen, it came up that they had been\nworking on solving this problem for 3 weeks! Three whole weeks we had known\nabout the issue and they were still on drawing board in terms of a solution.\n\nNow, I had worked at Nest Labs prior to Uber and while it wasn't at all the\nsame size in terms of scale, we did face problems with devices connecting from\naround the world. I knew the main culprit as soon as I heard the engineer\noutline the problem. The ocean has a lot of dead space in terms of traveling\npackets, and we're limited by the speed of light when it comes to global\nlatency.\n\nMy mind was blown. I was motivated by their lack of progress and confident\nenough in my Go skills that in 15 minutes, while two engineers and a senior\nmanager brainstormed a solution, I had written a proof of concept tool that\nwould eventually become known as Cloudley, a companion to the service mesh\ntool known as Muttley.\n\nI don't have the original code, but it was small, something like 120 lines of\ncode, but the real driving factor was Go's ReverseProxy. Using Go's\nReverseProxy I was able to establish and cache a connection to the Uber Front\nEnd, persisting that secure connection and eliminating the need to do a 900+\nmillisecond TLS handshake each time a new request was made.\n\nWith this code snippet built and tested the goal was now simple: reduce\nlatency and improve the user experience in India. Seven days later, we\nlaunched the product, pushing it as close to the end user as possible in a POP\n(point of presence) and the results were astounding. Latency dropped from 900+\nmilliseconds to a mere 400 milliseconds. The graph was used for various brown\nbags and all hands for a good 8 months, which was decades at Uber.\n\n## The Science Behind the Speed\n\nTo understand the significance of this improvement, let's dive into the math.\nOur primary ingress at the time was located in California, with a secondary\ndata center in Virginia. The distance from California to India is\napproximately 13,000 kilometers. Considering the speed of light (around\n300,000 km/s) and the fact that India was primarily using 3G networks at the\ntime (which reduces the effective speed to about 133,333 km/s), we can\ncalculate the round-trip time (RTT) as follows:\n\nRTT = (13,142 km / 133,333 km/s) * 2 \u2248 197ms\n\nNow, let's factor in the TLS handshake. TLS uses a three-way handshake, which\nmeans three round trips across the ocean. This translates to a p50 (median)\nlatency of roughly 600 milliseconds just to establish the TLS connection. Add\nin the final hop back with data, and you get a total latency of around 800\nmilliseconds.\n\nHalub3, CC BY-SA 4.0 <https://creativecommons.org/licenses/by-sa/4.0>, via\nWikimedia Commons  \n---  \n  \n## The Power of Go and Edge Computing\n\nOur cloud proxy leveraged Go's reverse proxy functionality to establish a\nsecure TLS connection to Uber's frontend. By deploying the proxy onto cloud\nproviders right at the edge in India, we effectively eliminated the need for\nmultiple round trips across the ocean. This simple yet powerful solution\nslashed nearly 600 milliseconds from each new request, resulting in a\ndramatically improved user experience.\n\nWhile I've pivoted my career towards AI Risk and Security, I'm thankful for\nthis (and many other) experiences I had at Uber. This was just once of many\nexamples of some amazing ingenuity we developed and it will always be a fond\nmemory for me.\n\nI'm curious if you have ever experienced insanely high latency or come against\nunreasonable road blocks that you ran through to accomplish amazing\nengineering feats. Let me know on Twitter!\n\nI want to thank Twitter user @gillarohith for suggesting I turn this thread\ninto a blog post. Thank you!\n\nat\n\nApril 30, 2024\n\nEmail ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest\n\nLabels: Edge Computing, Go, Latency\n\n#### No comments:\n\n#### Post a Comment\n\nOlder Post Home\n\nSubscribe to: Post Comments (Atom)\n\n### Slashing Latency: How Uber's Cloud Proxy Transformed India's User\nExperience\n\nIn the fast-paced world of globally scaled technology, every millisecond\ncounts. I joined Uber in April of 2015, and if I'm being truly...\n\n  * Slashing Latency: How Uber's Cloud Proxy Transformed India's User Experience\n\nIn the fast-paced world of globally scaled technology, every millisecond\ncounts. I joined Uber in April of 2015, and if I'm being truly...\n\n  * DEF CON 31 AIV Post Mortem\n\nDEF CON is always a flurry of activity, pushing technology to its limits and\noften revealing unforeseen challenges. This year, amidst all...\n\n## Search This Blog\n\n  * Home\n\n## About Me\n\nDavid Campbell\n\nView my complete profile\n\n### Report Abuse\n\n|\n\n## Labels\n\n  * AI Red Teaming\n  * DEF CON\n  * Edge Computing\n  * Go\n  * Latency\n\n  \n---|---  \n  \n## Blog Archive\n\n  * April 2024 (1)\n  * January 2024 (1)\n\nAwesome Inc. theme. Powered by Blogger.\n\nDiese Website verwendet Cookies von Google, um Dienste anzubieten und Zugriffe\nzu analysieren. Deine IP-Adresse und dein User-Agent werden zusammen mit\nMesswerten zur Leistung und Sicherheit f\u00fcr Google freigegeben. So k\u00f6nnen\nNutzungsstatistiken generiert, Missbrauchsf\u00e4lle erkannt und behoben und die\nQualit\u00e4t des Dienstes gew\u00e4hrleistet werden.Weitere InformationenOk\n\n", "frontpage": false}
