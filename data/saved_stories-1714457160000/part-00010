{"aid": "40202283", "title": "We're moving continuous integration back to developer machines", "url": "https://world.hey.com/dhh/we-re-moving-continuous-integration-back-to-developer-machines-3ac6c611", "domain": "world.hey.com", "votes": 7, "user": "lylejantzi3rd", "posted_at": "2024-04-29 18:45:08", "comments": 0, "source_title": "We're moving continuous integration back to developer machines", "source_text": "We're moving continuous integration back to developer machines\n\nDavid Heinemeier Hansson\n\nApril 29, 2024\n\n## We're moving continuous integration back to developer machines\n\nBetween running Rubocop style rules, Brakeman security scans, and model-\ncontroller-system tests, it takes our remote BuildKite-based continuous\nintegration setup about 5m30s to verify a code change is ready to ship for\nHEY. My Intel 14900K-based Linux box can do that in less than half the time\n(and my M3 Max isn't that much slower!). So we're going to drop the remote\nrunners and just bring continuous integration back to developer machines at\n37signals.\n\nIt's remarkable how big of a leap multi-core developer machines have taken\nover the last five-to-seven years or so. Running all these checks and\nvalidations in a reasonable time on a local machine would have been\nunthinkable not too long ago. But the 14900K has over 20 cores, the M3 Max has\n16, and even a lowly M2 MacBook has 8. They're all capable of doing a\ntremendous amount of parallelized work that would have seem fantastical to do\nlocally in the mid 2010s.\n\nHEY is a pretty substantial code base too. About 55,000 lines of Ruby code,\nwhich is verified by some 5,000 test cases along with another 300-some system\ntests. Virtually all of these tests go through the full-stack and hit the\ndatabase. These are not mocked to the hilt.\n\nTo me, the most satisfying part of the improved performance of modern\ndeveloper CPUs is the possibility to simplify our stacks. Installing,\noperating, and caring for a remote CI setup is a substantial complication.\nEither you do it on your own hardware, and deal with that complexity directly,\nor you pay through the nose for a cloud-based setup. Getting to flush all of\nit down the simplification drain is an amazing step forward.\n\nIn fact, it's what I like most about paying attention to the progress of our\nplatforms. Oh, browsers now have really good JavaScript and CSS engines?\nAwesome. Let's go #nobuild. Oh, developer CPUs now have dozens of cores?\nSweet. Let's pull CI home. Oh, single-core performance is way up? Wonderful.\nLet's drop gotcha-hinged accelerators like Spring.\n\nAs always, the simplified future is not evenly distributed. I can't see the\nlikes of Shopify or GitHub being able to run the full battery of tests against\ntheir millions of lines of code locally any time soon. But 99.99% of all web\napps are much closer to HEY in breadth than they are to those behemoths. And\nsmall teams ought to remove all the moving parts possible. Never aspire to a\nmore complicated stack than what your application calls for.\n\nSo we need to keep burning those bridges of complexity once we get to the\nother side. I can't wait to set fire to every single one of the remote\ncontinuous integration bridges we have here at 37signals. Progress is a\nbonfire.\n\nAbout David Heinemeier Hansson\n\nMade Basecamp and HEY for the underdogs as co-owner and CTO of 37signals.\nCreated Ruby on Rails. Wrote REWORK, It Doesn't Have to Be Crazy at Work, and\nREMOTE. Won at Le Mans as a racing driver. Fought the big tech monopolies as\nan antitrust advocate. Invested in Danish startups.\n\nSent to the world with HEY\n\n", "frontpage": true}
