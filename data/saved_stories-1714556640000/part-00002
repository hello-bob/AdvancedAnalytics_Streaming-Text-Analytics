{"aid": "40216739", "title": "DBOS: A better way to build applications?", "url": "https://www.infoworld.com/article/3715410/dbos-a-better-way-to-build-applications.html", "domain": "infoworld.com", "votes": 1, "user": "galaxyLogic", "posted_at": "2024-04-30 21:44:26", "comments": 0, "source_title": "DBOS: A better way to build applications?", "source_text": "DBOS: A better way to build applications? | InfoWorld\n\nClose Ad\n\ninfoworld\n\nUNITED STATES\n\n  * United States\n  * United Kingdom\n\n  * App Dev\n  * Cloud\n  * Gen AI\n  * Machine Learning\n  * Analytics\n  * Newsletters\n  * White Papers/Webcasts\n\n\u00d7\n\nClose\n\n# DBOS: A better way to build applications?\n\n### An operating system on top of a distributed database, DBOS is a\ntantalizing glimpse of something that may eventually turn out to be cool.\n\nBy Martin Heller\n\nContributor, InfoWorld\n\n| Apr 29, 2024 2:00 am PDT\n\nPHOTOCREO Michal Bednarek / Shutterstock\n\nAt a Glance\n\n  * ### DBOS Cloud 1.0\n\nLearn more\n\non DBOS\n\nAt the end of March 2024, Mike Stonebraker announced in a blog post the\nrelease of DBOS Cloud, \u201ca transactional serverless computing platform, made\npossible by a revolutionary new operating system, DBOS, that implements OS\nservices on top of a distributed database.\u201d That sounds odd, to put it mildly,\nbut it makes more sense when you read the origin story:\n\n> The idea for DBOS (DataBase oriented Operating System) originated 3 years\n> ago with my realization that the state an operating system must maintain\n> (files, processes, threads, messages, etc.) has increased in size by about 6\n> orders of magnitude since I began using Unix on a PDP-11/40 in 1973. As\n> such, storing OS state is a database problem. Also, Linux is legacy code at\n> the present time and is having difficulty making forward progress. For\n> example there is no multi-node version of Linux, requiring people to run an\n> orchestrator such as Kubernetes. When I heard a talk by Matei Zaharia in\n> which he said Databricks could not use traditional OS scheduling technology\n> at the scale they were running and had turned to a DBMS solution instead, it\n> was clear that it was time to move the DBMS into the kernel and build a new\n> operating system.\u201d\n\nIf you don\u2019t know Stonebraker, he\u2019s been a database-focused computer scientist\n(and professor) since the early 1970s, when he and his UC Berkeley colleagues\nEugene Wong and Larry Rowe founded Ingres. Ingres later inspired Sybase, which\nwas eventually the basis for Microsoft SQL Server. After selling Ingres to\nComputer Associates, Stonebraker and Rowe started researching Postgres, which\nlater became PostgreSQL and also evolved into Illustra, which was purchased by\nInformix.\n\nI heard Stonebraker talk about Postgres at a DBMS conference in 1980. What I\ngot out of that talk, aside from an image of \u201cjungle drums\u201d calling for SQL,\nwas the idea that you could add support for complex data types to the database\nby implementing new index types, extending the query language, and adding\nsupport for that to the query parser and optimizer. The example he used was\ngeospatial information, and he explained one kind of index structure that\nwould make 2D geometric database queries go very fast. (This facility\neventually became PostGIS. The R-tree currently used by default in PostGIS\nGiST indexes wasn\u2019t invented until 1984, so Mike was probably talking about\nthe older quadtree index.)\n\n#### [ Coding with AI: Tips and best practices from developers ]\n\nSkipping ahead 44 years, it should surprise precisely nobody in the database\nfield that DBOS uses a distributed version of PostgreSQL as its kernel\ndatabase layer.\n\nIDG\n\nThe DBOS system diagram makes it clear that a database is part of the OS\nkernel. The distributed database relies on a minimal kernel, but sits under\nthe OS services instead of running in the application layer as a normal\ndatabase would.\n\n## DBOS features\n\nDBOS Transact, an open-source TypeScript framework, supports Postgres-\ncompatible transactions, reliable workflow orchestration, HTTP serving using\nGET and POST, communication with external services and third-party APIs,\nidempotent requests using UUID keys, authentication and authorization, Kafka\nintegration with exactly-once semantics, unit testing, and self-hosting. DBOS\nCloud, a transactional serverless platform for deploying DBOS Transact\napplications, supports serverless app deployment, time-travel debugging, cloud\ndatabase management, and observability.\n\nLet\u2019s highlight some major areas of interest.\n\n## DBOS Transact\n\nThe code shown in the screenshot below demonstrates transactions, as well as\nHTTP serving using GET. It\u2019s worthwhile to read the code closely. It\u2019s only 18\nlines, not counting blank lines.\n\nThe first import (line 1) brings in the DBOS SDK classes that we\u2019ll need. The\nsecond import (line 2) brings in the Knex.js SQL query builder, which handles\nsending the parameterized query to the Postgres database and returning the\nresulting rows. The database table schema is defined in lines 4 through 8; the\nonly columns are a name string and a greet_count integer.\n\nThere is only one method in the Hello class, helloTransaction. It is wrapped\nin @GetApi and @Transaction decorators, which respectively cause the method to\nbe served in response to an HTTP GET request on the path /greeting/ followed\nby the username parameter you want to pass in and wrap the database call in a\ntransaction, so that two instances can\u2019t update the database simultaneously.\n\nThe database query string (line 16) uses PostgreSQL syntax to try to insert a\nrow into the database for the supplied name and an initial count of 1. If the\nrow already exists, then the ON CONFLICT trigger runs an update operation that\nincrements the count in the database.\n\nLine 17 uses Knex.js to send the SQL query to the DBOS system database and\nretrieves the result. Line 18 pulls the count out of the first row of results\nand returns the greeting string to the calling program.\n\nThe use of SQL and a database for what feels like should be a core in-memory\nsystem API, such as a Linux atomic counter or a Windows interlocked variable,\nseems deeply weird. Nevertheless, it works.\n\nIDG\n\nThis TypeScript code for a Hello class is generated when you perform a DBOS\ncreate operation. As you can see, it relies on the @GetApi and @Transaction\ndecorators to serve the function from HTTP GET requests and run the function\nas a database transaction.\n\n## DBOS Time Travel Debugger\n\nWhen you run an application in DBOS Cloud it records every step and change it\nmakes (the workflow) in the database. You can debug that using Visual Studio\nCode and the DBOS Time Travel Debugger extension. The time-travel debugger\nallows you to debug your DBOS application against the database as it existed\nat the time the selected workflow originally executed.\n\nIDG\n\nTo perform time-travel debugging, you first start with a CodeLens to list\nsaved trace workflows. Once you choose the one you want, you can debug it\nusing Visual Studio Code with a plugin, or from the command line.\n\nIDG\n\nTime-travel debugging with a saved workflow looks very much like ordinary\ndebugging in Visual Studio Code. The code being debugged is the same Hello\nclass you saw earlier.\n\n## DBOS Quickstart\n\nThe DBOS Quickstart tutorial requires Node.js 20 or later and a PostgreSQL\ndatabase you can connect to, either locally, in a Docker container, or\nremotely. I already had Node.js v20.9.0 installed on my M1 MacBook, but I\nupgraded it to v20.12.1 from the Node.js website.\n\nI didn\u2019t have PostgreSQL installed, so I downloaded and ran the interactive\ninstaller for v16.2 from EnterpriseDB. This installer creates a full-blown\nmacOS server and applications. If I had used Homebrew instead, it would have\ncreated command-line applications, and if I had used Postgres.app, I would\nhave gotten a menu-bar app.\n\nThe Quickstart proper starts by creating a DBOS app directory using Node.js.\n\n    \n    \n    martinheller@Martins-M1-MBP ~ % npx -y @dbos-inc/create@latest -n myapp Merged .gitignore files saved to myapp/.gitignore added 590 packages, and audited 591 packages in 25s found 0 vulnerabilities added 1 package, and audited 592 packages in 1s found 0 vulnerabilities added 129 packages, and audited 721 packages in 5s found 0 vulnerabilities Application initialized successfully!\n\nThen you configure the app to use your Postgres server and export your\nPostgres password into an enviroment variable.\n\n    \n    \n    martinheller@Martins-M1-MBP ~ % cd myapp martinheller@Martins-M1-MBP myapp % npx dbos configure ? What is the hostname of your Postgres server? localhost ? What is the port of your Postgres server? 5432 ? What is your Postgres username? postgres martinheller@Martins-M1-MBP myapp % export PGPASSWORD=*********\n\nAfter that, you create a \u201cHello\u201d database using Node.js and Knex.js.\n\n    \n    \n    martinheller@Martins-M1-MBP myapp % npx dbos migrate 2024-04-09 15:01:42 [info]: Starting migration: creating database hello if it does not exist 2024-04-09 15:01:42 [info]: Database hello does not exist, creating... 2024-04-09 15:01:42 [info]: Executing migration command: npx knex migrate:latest 2024-04-09 15:01:43 [info]: Batch 1 run: 1 migrations 2024-04-09 15:01:43 [info]: Creating DBOS tables and system database. 2024-04-09 15:01:43 [info]: Migration successful!\n\nWith that complete, you build and run the DBOS app locally.\n\n    \n    \n    martinheller@Martins-M1-MBP myapp % npm run build npx dbos start > myapp@0.0.1 build > tsc 2024-04-09 15:02:30 [info]: Workflow executor initialized 2024-04-09 15:02:30 [info]: HTTP endpoints supported: 2024-04-09 15:02:30 [info]: GET : /greeting/:user 2024-04-09 15:02:30 [info]: DBOS Server is running at http://localhost:3000 2024-04-09 15:02:30 [info]: DBOS Admin Server is running at http://localhost:3001 ^C\n\nAt this point, you can browse to http://localhost:3000 to test the\napplication. That done, you register for the DBOS Cloud and provision your own\ndatabase there.\n\n    \n    \n    martinheller@Martins-M1-MBP myapp % npx dbos-cloud register -u meheller 2024-04-09 15:11:35 [info]: Welcome to DBOS Cloud! 2024-04-09 15:11:35 [info]: Before creating an account, please tell us a bit about yourself! Enter First/Given Name: Martin Enter Last/Family Name: Heller Enter Company: self 2024-04-09 15:12:06 [info]: Please authenticate with DBOS Cloud! Login URL: https://login.dbos.dev/activate?user_code=QWKW-TXTB 2024-04-09 15:12:12 [info]: Waiting for login... 2024-04-09 15:12:17 [info]: Waiting for login... 2024-04-09 15:12:22 [info]: Waiting for login... 2024-04-09 15:12:27 [info]: Waiting for login... 2024-04-09 15:12:32 [info]: Waiting for login... 2024-04-09 15:12:38 [info]: Waiting for login... 2024-04-09 15:12:44 [info]: meheller successfully registered! martinheller@Martins-M1-MBP myapp % npx dbos-cloud db provision iw_db -U meheller Database Password: ******** 2024-04-09 15:19:22 [info]: Successfully started provisioning database: iw_db 2024-04-09 15:19:28 [info]: {\"PostgresInstanceName\":\"iw_db\",\"HostName\":\"userdb-51fcc211-6ed3-4450-a90e-0f864fc1066c.cvc4gmaa6qm9.us-east-1.rds.amazonaws.com\",\"Status\":\"available\",\"Port\":5432,\"DatabaseUsername\":\"meheller\",\"AdminUsername\":\"meheller\"} 2024-04-09 15:19:28 [info]: Database successfully provisioned!\n\nFinally, you can register and deploy your app in the DBOS Cloud.\n\n    \n    \n    martinheller@Martins-M1-MBP myapp % npx dbos-cloud app register -d iw_db 2024-04-09 15:20:09 [info]: Loaded application name from package.json: myapp 2024-04-09 15:20:09 [info]: Registering application: myapp 2024-04-09 15:20:11 [info]: myapp ID: d8806829-c5b8-4df0-8b5a-2d1bf87c3322 2024-04-09 15:20:11 [info]: Successfully registered myapp! martinheller@Martins-M1-MBP myapp % npx dbos-cloud app deploy 2024-04-09 15:20:35 [info]: Loaded application name from package.json: myapp 2024-04-09 15:20:35 [info]: Submitting deploy request for myapp 2024-04-09 15:21:09 [info]: Submitted deploy request for myapp. Assigned version: 1712676035 2024-04-09 15:21:13 [info]: Waiting for myapp with version 1712676035 to be available 2024-04-09 15:21:21 [info]: Successfully deployed myapp! 2024-04-09 15:21:21 [info]: Access your application at https://meheller-myapp.cloud.dbos.dev/\n\nIDG\n\nThe \u201cHello\u201d application running in the DBOS Cloud counts every greeting. It\nuses the code you saw earlier.\n\n## DBOS applications\n\nThe \u201cHello\u201d application does illustrate some of the core features of DBOS\nTransact and the DBOS Cloud, but it\u2019s so basic that it\u2019s barely a toy. The\nProgramming Quickstart adds a few more details, and it\u2019s worth your time to go\nthrough it. You\u2019ll learn how to use communicator functions to access third-\nparty services (email, in this example) as well as how to compose reliable\nworkflows. You\u2019ll literally interrupt the workflow and restart it without re-\nsending the email: DBOS workflows always run to completion and each of their\noperations executes once and only once. That\u2019s possible because DBOS persists\nthe output of each step in your database.\n\nOnce you\u2019ve understood the programming Quickstart, you\u2019ll be ready to try out\nthe two DBOS demo applications, which do rise to the level of being toys. Both\ndemos use Next.js for their front ends, and both use DBOS workflows,\ntransactions, and communicators.\n\nThe first demo, E-Commerce, is a web shopping and payment processing system.\nIt\u2019s worthwhile reading the Under the Covers section of the README in the\ndemo\u2019s repository to understand how it works and how you might want to upgrade\nit to, for example, use a real-world payment provider.\n\nThe second demo, YKY Social, simulates a simple social network, and uses\nTypeORM rather than Knex.js for its database code. It also uses Amazon S3 for\nprofile photos. If you\u2019re serious about using DBOS yourself, you should work\nthough both demo applications.\n\n## A tantalizing glimpse\n\nI have to say that DBOS and DBOS Cloud look very interesting. Reliable\nexecution and time-travel debugging, for example, are quite desirable. On the\nother hand, I wouldn\u2019t want to build a real application on DBOS or DBOS Cloud\nat this point. I have lots of questions, starting with \u201cHow does it scale in\npractice?\u201d and probably ending with \u201cHow much will it cost at X scale?\u201d\n\nI mentioned earlier that DBOS code looks weird but works. I would imagine that\nany programming shop considering writing an application on it would be\ndiscouraged or even repelled by the \u201cit looks weird\u201d part, as developers tend\nto be set in their ways until what they are doing no longer works.\n\nI also have to point out that the current implementation of DBOS is very far\nfrom the system diagram you saw near the beginning of this review. Where\u2019s the\nminimal kernel? DBOS currently runs on macOS, Linux, and Windows. None of\nthose are minimal kernels. DBOS Cloud currently runs on AWS. Again, not a\nminimal kernel.\n\nSo, overall, DBOS is a tantalizing glimpse of something that may eventually\nturn out to be cool. It\u2019s new and shiny, and it comes from smart people, but\nit will be awhile before it could possibly become a mainstream system.\n\n\u2014\n\nCost: Free with usage limits; paid plans require you to contact sales.\n\nPlatform: macOS, Linux, Windows, AWS.\n\nNext read this:\n\n  * Why companies are leaving the cloud\n  * 5 easy ways to run an LLM locally\n  * Coding with AI: Tips and best practices from developers\n  * Meet Zig: The modern alternative to C\n  * What is generative AI? Artificial intelligence that creates\n  * The best open source software of 2023\n\nAt a Glance\n\n  * ### DBOS Cloud 1.0\n\nLearn more\n\non DBOS\n\nDBOS and DBOS Cloud look very interesting: Reliable execution and time-travel\ndebugging, for example, are quite desirable. On the other hand, I wouldn\u2019t\nwant to build a real application on either DBOS or DBOS Cloud at this point.\n\n#### Pros\n\n    * Provides reliable execution and high availability\n    * Supports time-travel debugging\n    * Has transactionality and fault tolerance\n\n#### Cons\n\n    * Code for DBOS is new and different\n    * Nobody really has experience building apps for DBOS outside of the company\n    * Doesn\u2019t actually conform to its own system diagram, at least not yet\n\nRelated:\n\n  * Software Development\n  * Database\n  * PostgreSQL\n  * Serverless Computing\n  * Cloud Computing\n\nMartin Heller is a contributing editor and reviewer for InfoWorld. Formerly a\nweb and Windows programming consultant, he developed databases, software, and\nwebsites from 1986 to 2010. More recently, he has served as VP of technology\nand education at Alpha Software and chairman and CEO at Tubifi.\n\nFollow\n\nCopyright \u00a9 2024 IDG Communications, Inc.\n\nInfoWorld\n\nCopyright \u00a9 2024 IDG Communications, Inc.\n\nExplore the Foundry Network descend\n\n  * CIO\n  * Computerworld\n  * CSO Online\n  * InfoWorld\n  * Network World\n\n", "frontpage": false}
