{"aid": "40131931", "title": "Vulnerabilities across keyboard apps reveal keystrokes to network eavesdroppers", "url": "https://citizenlab.ca/2024/04/vulnerabilities-across-keyboard-apps-reveal-keystrokes-to-network-eavesdroppers/", "domain": "citizenlab.ca", "votes": 3, "user": "skilled", "posted_at": "2024-04-23 13:48:27", "comments": 0, "source_title": "The not-so-silent type", "source_text": "The not-so-silent type: Vulnerabilities across keyboard apps reveal keystrokes\nto network eavesdroppers - The Citizen Lab\n\nOpen main menu\n\nSkip to main content\n\nClose main menu\n\nResearchApp Privacy and Controls\n\n# The not-so-silent type Vulnerabilities across keyboard apps reveal\nkeystrokes to network eavesdroppers\n\nBy Jeffrey Knockel, Mona Wang, and Zo\u00eb Reichert\n\nApril 23, 2024\n\n\u9605\u8bfb\u672c\u62a5\u544a\u7684\u7b80\u4f53\u4e2d\u6587\u7248\u6458\u8981 | \u95b1\u8b80\u672c\u5831\u544a\u7684\u7e41\u9ad4\u4e2d\u6587\u7248\u6458\u8981 | Read the Report on Github\n\nDownload this report\n\nWe urge users to install the latest updates to their keyboard apps and that\nthey keep their mobile operating systems up to date. We also recommend that\nat-risk users consider switching from a cloud-based keyboard app to one that\noperates entirely on-device. Read the FAQ accompanying this report.\n\n# Key findings\n\n  * We analyzed the security of cloud-based pinyin keyboard apps from nine vendors \u2014 Baidu, Honor, Huawei, iFlytek, OPPO, Samsung, Tencent, Vivo, and Xiaomi \u2014 and examined their transmission of users\u2019 keystrokes for vulnerabilities.\n  * Our analysis revealed critical vulnerabilities in keyboard apps from eight out of the nine vendors in which we could exploit that vulnerability to completely reveal the contents of users\u2019 keystrokes in transit. Most of the vulnerable apps can be exploited by an entirely passive network eavesdropper.\n  * Combining the vulnerabilities discovered in this and our previous report analyzing Sogou\u2019s keyboard apps, we estimate that up to one billion users are affected by these vulnerabilities. Given the scope of these vulnerabilities, the sensitivity of what users type on their devices, the ease with which these vulnerabilities may have been discovered, and that the Five Eyes have previously exploited similar vulnerabilities in Chinese apps for surveillance, it is possible that such users\u2019 keystrokes may have also been under mass surveillance.\n  * We reported these vulnerabilities to all nine vendors. Most vendors responded, took the issue seriously, and fixed the reported vulnerabilities, although some keyboard apps remain vulnerable.\n  * We conclude our report by summarizing our recommendations to various stakeholders to attempt to reduce future harm from apps which might feature similar vulnerabilities.\n\n# Introduction\n\nTyping logographic languages such as Chinese is more difficult than typing\nalphabetic languages, where each letter can be represented by one key. There\nis no way to fit the tens of thousands of Chinese characters that exist onto a\nsingle keyboard. Despite this obvious challenge, technologies have developed\nwhich make typing in Chinese possible. To enable the input of Chinese\ncharacters, a writer will generally use a keyboard app with an \u201cInput Method\nEditor\u201d (IME). IMEs offer a variety of approaches to inputting Chinese\ncharacters, including via handwriting, voice, and optical character\nrecognition (OCR). One popular phonetic input method is Zhuyin, and shape or\nstroke-based input methods such as Cangjie or Wubi are commonly used as well.\nHowever, used by nearly 76% of mainland Chinese keyboard users, the most\npopular way of typing in Chinese is the pinyin method, which is based on the\npinyin romanization of Chinese characters.\n\nAll of the keyboard apps we analyze in this report fall into the category of\ninput method editors (IMEs) that offer pinyin input. These keyboard apps are\nparticularly interesting because they have grown to accommodate the challenge\nof allowing users to type Chinese characters quickly and easily. While many\nkeyboard apps operate locally, solely within a user\u2019s device, IME-based\nkeyboard apps often have cloud features which enhance their functionality.\nBecause of the complexities of predicting which characters a user may want to\ntype next, especially in logographic languages like Chinese, IMEs often offer\n\u201ccloud-based\u201d prediction services which reach out over the network. Enabling\n\u201ccloud-based\u201d features in these apps means that longer strings of syllables\nthat users type will be transmitted to servers elsewhere. As many have\npreviously pointed out, \u201ccloud-based\u201d keyboards and input methods can function\nas vectors for surveillance and essentially behave as keyloggers. While the\ncontent of what users type is traveling from their device to the cloud, it is\nadditionally vulnerable to network attackers if not properly secured. This\nreport is not about how operators of cloud-based IMEs read users\u2019 keystrokes,\nwhich is a phenomenon that has already been extensively studied and\ndocumented. This report is primarily concerned with the issue of protecting\nthis sensitive data from network eavesdroppers.\n\nIn this report, we analyze the security of cloud-based pinyin keyboard apps\nfrom nine vendors: Baidu, Honor, Huawei, iFlytek, OPPO, Samsung, Tencent,\nVivo, and Xiaomi. We examined these apps\u2019 transmission of users\u2019 keystrokes\nfor vulnerabilities. Our analysis revealed critical vulnerabilities in\nkeyboard apps from eight out of the nine vendors \u2014 all but Huawei \u2014 in which\nwe could exploit that vulnerability to completely reveal the contents of\nusers\u2019 keystrokes in transit.\n\nBetween this report and our Sogou report, we estimate that close to one\nbillion users are affected by this class of vulnerabilities. Sogou, Baidu, and\niFlytek IMEs alone comprise over 95% of the market share for third-party IMEs\nin China, which are used by around a billion people. In addition to the users\nof third party keyboard apps, we found that the default keyboards on devices\nfrom three manufacturers (Honor, OPPO, and Xiaomi) were also vulnerable to our\nattacks. Devices from Samsung and Vivo also bundled a vulnerable keyboard, but\nit was not used by default. In 2023, Honor, OPPO, and Xiaomi alone comprised\nnearly 50% of the smartphone market in China.\n\nHaving the capability to read what users type on their devices is of interest\nto a number of actors \u2014 including government intelligence agencies that\noperate globally \u2014 because it may encompass exceptionally sensitive\ninformation about users and their contacts including financial information,\nlogin credentials such as usernames or passwords, and messages that are\notherwise end-to-end encrypted. Given the known capabilities of state actors,\nand that Five Eyes agencies have previously exploited similar vulnerabilities\nin Chinese apps for the express purpose of mass surveillance, it is possible\nthat we were not the first to discover these vulnerabilities and that they\nhave previously been exploited on a mass scale for surveillance purposes.\n\nWe reported these issues to all eight of the vendors in whose keyboards we\nfound vulnerabilities. Most vendors responded, took the issue seriously, and\nfixed the reported vulnerabilities, although some keyboard apps remain\nvulnerable. Users should keep their apps and operating systems up to date. We\nrecommend that they consider switching from a cloud-based keyboard app to one\nthat operates entirely on-device if they are concerned about these privacy\nissues.\n\nThe remainder of this report is structured as follows. In the \u201cRelated work\u201d\nsection, we outline previous security and privacy research that has been\nconducted on IME apps and past research which relates to issues of encryption\nin the Chinese app ecosystem. In \u201cMethodology\u201d, we describe the reverse\nengineering tools and techniques we used to analyze the above apps. In the\n\u201cFindings\u201d section, we explain the vulnerabilities we discovered in each app\nand (where applicable) how we exploited these vulnerabilities. In \u201cCoordinated\ndisclosure\u201d, we discuss how we reported the vulnerabilities we found to the\ncompanies and their responses to our outreach. Finally, in \u201cDiscussion\u201d, we\nreflect on the impact of the vulnerabilities we discovered, how they came to\nbe, and ways that we can avoid similar problems in the future. We provide\nrecommendations to all stakeholders in this systemic privacy and security\nfailure, including users, IME and keyboard developers, operating systems,\nmobile device manufacturers, app store operators, International standards\nbodies, and security researchers.\n\n# Related work\n\nThere has been much work analyzing East Asian apps for their security and\nprivacy properties. As examples from outside of China, researchers studied\nLINE, a Japanese-developed app, and KakaoTalk, a South Korean-developed app,\nfinding that they have faults in their end-to-end encryption implementations.\nWhen it comes to Chinese software, the Citizen Lab has previously revealed\nprivacy and security issues in several Chinese web browsers, and identified\nvulnerabilities in the Zoom video conferencing platform and the MY2022\nOlympics app. Unfortunately, even developers of extremely popular apps often\noverlook implementing proper security measures and protecting user privacy.\n\nSome work has been concerned specifically with the privacy issues with cloud-\nbased keyboard apps. As the technology powering keyboard apps became more\npopular and sophisticated, awareness of the potential security risks\nassociated with these apps grew. Two main areas of concern have received the\nmost attention from security researchers when it comes to cloud-based keyboard\napps: whether user data is secure in the cloud servers and whether it is\nsecure in transit as it moves from the user\u2019s device to a cloud server.\n\nSome researchers have expressed concern over companies handling sensitive\nkeystroke data and have made attempts to ameliorate the risk of the cloud\nserver being able to record what you typed. In 2013, the Japanese government\npublished concerns it had with privacy regarding the Baidu IME, particularly\nthe cloud input function. Researchers have also been concerned with\nsurveillance via other \u201ccloud-based\u201d IMEs, like iFlytek\u2019s voice input. While\nthere has been a push to develop privacy-aware cloud-based IMEs that would\nkeep user data secret, they are not widely used. While it is concerning what\ncompanies might do with user keystroke data, our research pertains to the\nsecurity of user keystroke data before it even reaches cloud servers and who\nelse other than the cloud operator may be able to read it.\n\nOther research has studied the leakage of sensitive information when user\nkeystroke data is in transit between a user\u2019s device to a remote cloud server.\nIf not properly encrypted, data can be intercepted and collected by network\neavesdroppers. In 2015 security researchers proposed and evaluated a system to\nidentify keystroke leakages in IME traffic, revealing that at least one IME\nwas transmitting sensitive data without encrypting it at all. Another\ninvestigation in the same year showed that the most popular IME, Sogou, was\nsending users\u2019 device identifiers in the clear. In our 2023 report we exposed\nSogou falling short once more, finding that Sogou allowed network\neavesdroppers to read what users were typing\u2014as they typed\u2014in any application.\nAll of these discoveries point to developers of these applications overlooking\nthe importance of transport security to protect user data from network\nattackers.\n\nWhile previous work studying the security of keystroke network data in transit\ninvestigates single keyboard apps at a time, our report is the first to\nholistically evaluate the network security of the cloud-based keyboard app\nlandscape in China.\n\n# Methodology\n\nWe analyzed the Android and, if present, the iOS and Windows versions of\nkeyboard apps from the following keyboard app vendors: Tencent, Baidu,\niFlytek, Samsung, Huawei, Xiaomi, OPPO, Vivo, and Honor. The first three \u2014\nTencent, Baidu, and iFlytek \u2014 are software developers of keyboard apps whereas\nthe remaining six \u2014 Samsung, Huawei, Xiaomi, OPPO, Vivo, and Honor \u2014 are\nmobile device manufacturers who either developed their own keyboard apps or\ninclude one or more of the other three developers\u2019 keyboard apps preinstalled\non their devices. We selected these nine vendors because we identified them as\nhaving integrated cloud recommendation functionality into their products and\nbecause they are popularly used. To procure the versions we analyzed, between\nAugust and November, 2023, we downloaded the latest versions of them from\ntheir product websites, the Apple App Store, or, in the case of the apps\ndeveloped or bundled by mobile device manufacturers, by procuring a mobile\ndevice that has the app preinstalled on the ROM. In the case that we obtained\nthe app as pre-installed on a mobile device, we ensured that the device\u2019s apps\nand operating system were fully updated before beginning analysis of its apps.\nThe devices we obtained were intended for the mainland Chinese market, and,\nwhen device manufacturers had two editions of their device, a Chinese edition\nand a global edition, we analyzed the Chinese edition.\n\nTo better understand whether these vendors\u2019 keyboard apps securely implemented\ntheir cloud recommendation functionality, we analyzed them to determine\nwhether they sufficiently encrypted users\u2019 typed keystrokes. To do so, we used\nboth static and dynamic analysis methods. We used jadx to decompile and\nstatically analyze Dalvik bytecode and IDA Pro to decompile and statically\nanalyze native machine code. We used frida to dynamically analyze the Android\nand iOS versions and IDA Pro to dynamically analyze the Windows version.\nFinally, we used Wireshark and mitmproxy to perform network traffic capture\nand analysis.\n\nTo prepare for our dynamic analysis of each keyboard app, after installing it,\nwe enabled the pinyin input if it was not already enabled. The keyboards we\nanalyzed generally prompted users to enable cloud functionality after\ninstallation or on first use. In such cases, we answered such prompts in the\naffirmative or otherwise enabled cloud functionality through the mobile\ndevice\u2019s or app\u2019s settings.\n\nIn our analysis, we assume a fairly conservative threat model. For most of our\nattacks, we assume a passive network eavesdropper that monitors network\npackets that are sent from a user\u2019s keyboard app to a keyboard app\u2019s cloud\nserver. In one of our attacks, specifically against apps using Tencent\u2019s Sogou\nAPI, we allow the adversary to be active in a limited way in that the\nadversary may additionally transmit network traffic to the cloud server but\ndoes not necessarily have to be a machine-in-the-middle (MITM) or spoof\nmessages from the user in a layer 3 sense. In all of our attacks, the\nadversary also has access to a copy of the client software, but the server is\na black box.\n\nWe note that, as neither Apple\u2019s nor Google\u2019s keyboard apps have a feature to\ntransmit keystrokes to cloud servers for cloud-based recommendations, we did\n(and could) not analyze these keyboards for the security of this feature.\nHowever, we observed that none of the mobile devices that we analyzed included\nGoogle\u2019s keyboard, Gboard, preinstalled, either. This finding likely results\nfrom Google\u2019s exit from China reportedly due to the company\u2019s failure to\ncomply with China\u2019s pervasive censorship requirements.\n\n# Findings\n\nAmong the nine vendors whose apps we analyzed, we found that there was only\none vendor, Huawei, in whose apps we could not find any security issues\nregarding the transmission of users\u2019 keystrokes. For each of the remaining\neight vendors, in at least one of their apps, we discovered a vulnerability in\nwhich keystrokes could be completely revealed by a passive network\neavesdropper (see Table 1 for details).\n\nLegend  \n---  \n\u2718\u2718| working exploit created to decrypt transmitted keystrokes for both active\nand passive eavesdroppers  \n\u2718| working exploit created to decrypt transmitted keystrokes for an active\neavesdropper  \n!| weaknesses present in cryptography implementation  \nno known issues  \nN/A| product not offered or not present on device analyzed  \nKeyboard developer| Android| iOS| Windows  \n---|---|---|---  \nTencent^\u2020| \u2718| N/A| \u2718  \nBaidu| !| !| \u2718\u2718  \niFlytek| \u2718\u2718  \n  \nPre-installed keyboard developer\n\nDevice manufacturer| Own| Sogou| Baidu| iFlytek| iOS| Windows  \n---|---|---|---|---|---|---  \nSamsung| \u2718\u2718| *| \u2718\u2718| N/A| N/A| N/A  \nHuawei| *| N/A| N/A| N/A| N/A  \nXiaomi| N/A| \u2718*| \u2718\u2718| \u2718\u2718| N/A| N/A  \nOPPO| N/A| \u2718| \u2718\u2718*| N/A| N/A| N/A  \nVivo| *| \u2718| N/A| N/A| N/A| N/A  \nHonor| N/A| N/A| \u2718\u2718*| N/A| N/A| N/A  \n  \nTable 1: Summary of vulnerabilities discovered in popular keyboards and in\nkeyboards pre-installed on popular phones. * Default keyboard app on our test\ndevice. ^\u2020 Both QQ Pinyin and Sogou IME are developed by Tencent; in this\nreport we analyzed QQ Pinyin and found the same issues as we had in Sogou IME.\n\nThe ease with which the keystrokes in these apps could be revealed varied. In\none app, Samsung Keyboard, we found that the app performed no encryption\nwhatsoever. Some apps appeared to internally use Sogou\u2019s cloud functionality\nand were vulnerable to an attack which we previously published. Most\nvulnerable apps failed to use asymmetric cryptography and mistakenly relied\nsolely on home-rolled symmetric encryption to protect users\u2019 keystrokes.\n\nThe remainder of this section details further analysis of the apps we analyzed\nfrom each vendor and, when present, their vulnerabilities.\n\n## Tencent\n\nWe have previously analyzed one Tencent keyboard app, Sogou, in a previous\nreport. We were motivated by our previous findings analyzing Sogou to analyze\nanother Tencent keyboard app, QQ Pinyin. We analyzed QQ Pinyin on Android and\nWindows. We found that the Android version (8.6.3) and Windows version\n(6.6.6304.400) of this software communicated to similar cloud servers as Sogou\nand contained the same vulnerabilities to those which we previously reported\nin Sogou IME (see Table 2 for details).\n\nPlatform| File/Package Name| Version analyzed| Secure?  \n---|---|---|---  \nAndroid| com.tencent.qqpinyin| 8.6.3| \u2718  \nWindows| QQPinyin_Setup_6.6.6304.400.exe| 6.6.6304.400| \u2718  \n  \nTable 2: The versions of QQ Pinyin that we analyzed.\n\n## Baidu\n\nWe analyzed Baidu IME for Windows, Android, and iOS. We found that Baidu IME\nfor Windows includes a vulnerability which allows network eavesdroppers to\ndecrypt network transmissions. This means third parties can obtain sensitive\npersonal information including what users have typed. We also found privacy\nand security weaknesses in the encryption used by the Android and iOS versions\nof Baidu IME (see Table 3 for details).\n\nPlatform| File/Package Name| Version analyzed| Secure?| Protocol  \n---|---|---|---|---  \nWindows| BaiduPinyinSetup_6.0.3.44.exe| 6.0.3.44| \u2718\u2718| BAIDUv3.1  \nAndroid| com.baidu.input| 11.7.19.9| !| BAIDUv4.0  \niOS| com.baidu.inputMethod| 11.7.20| !| BAIDUv4.0  \n  \nTable 3: The versions of Baidu IME that we analyzed.\n\nThe Android version transmitted keystrokes information via UDP packets to\nudpolimeok.baidu.com and that the Windows and iOS versions transmitted\nkeystrokes to udpolimenew.baidu.com. The two mobile versions that we analyzed,\nnamely the Android and iOS versions, transmitted these keystrokes according to\na stronger protocol, whose payload begins with the bytes 0x04 0x00. The\nWindows version transmitted these keystrokes according to a weaker protocol,\nwhose UDP payload begins with the bytes 0x03 0x01. We henceforth refer to\nthese protocols as the BAIDUv4.0 and BAIDUv3.1 protocols, respectively. In the\nremainder of this section we detail multiple weaknesses in the BAIDUv4.0\nprotocol used by the Android and iOS versions and explain how a network\neavesdropper can decrypt the contents of keystrokes transmitted by the\nBAIDUv3.1 protocol.\n\n### Weaknesses in BAIDUv4.0 protocol\n\nTo encrypt keystroke information, the BAIDUv4.0 protocol uses elliptic-curve\nDiffie-Hellman and a pinned server public key (pk_s) to establish a shared\nsecret key for use in a modified version of AES.\n\nUpon opening the keyboard, before the first outgoing BAIDUv4.0 protocol\nmessage is sent, the application randomly generates a client Curve25519\npublic-private key pair, which we will call (pk_c, sk_c). Then, a Diffie-\nHellman shared secret k is generated using sk_c and a pinned public key pk_s.\nTo send a message with plaintext P, the application reuses the first 16 bytes\nof pk_c as the initialization vector (IV) for symmetric encryption, and k is\nused as the symmetric encryption key. The resulting symmetric encryption of P\nis then sent along with pk_c to the server. The server can then obtain the\nsame Diffie-Hellman shared secret k from pk_c and sk_s, the private key\ncorresponding to pk_s, to decrypt the ciphertext.\n\nThe BAIDUv4.0 protocol symmetrically encrypts data using a modified version of\nAES, which symbols in the code indicate Baidu has called AESv3. Compared to\nordinary AES, AESv3 has a built-in cipher mode and padding. AESv3\u2019s built-in\ncipher mode mixes bytes differently and uses a modified counter (CTR) mode\nwhich we call Baidu CTR (BCTR) mode, illustrated in Figure 1.\n\nFigure 1: Illustration of BCTR mode encryption scheme used by Baidu IME on\nAndroid and iOS. Adapted from this figure.\n\nGenerally speaking, any CTR cipher mode involves combining an initialization\nvector v with the value i of some counter, whose combination we shall notate\nas v + i. Most commonly, the counter value used for block i is simply i, i.e.,\nit begins at zero and increments for each subsequent block, and AESv3\u2019s\nimplementation follows this convention. There is no standard way to compute v\n+ i in CTR mode, but the way that BCTR combines v and i is by adding i to the\nleft-most 32-bits of v, interpreting this portion of v and i in little-endian\nbyte order. If the sum overflows, then no carrying is performed on bytes to\nthe right of this 32-bit value. The implementation details we have thus far\ndescribed do not significantly deviate from a typical CTR implementation.\nHowever, where BCTR mode differs from ordinary CTR mode is in how the value v\n+ i is used during encryption. In ordinary CTR mode, to encrypt block i with\nkey k, you would compute\n\nplain_i XOR encrypt(v + i, k).\n\nIn BCTR mode, to encrypt block i, you compute\n\nencrypt(plain_i XOR (v + i), k).\n\nAs we will see later, this deviation will have implications for the security\nof the algorithm.\n\nWhile ordinarily CTR mode does not require the final block length to be a\nmultiple of the cipher\u2019s block size (in the case of AES, 16 bytes), due to\nBaidu\u2019s modifications, BCTR mode no longer automatically possesses this\nproperty but rather achieves it by employing ciphertext stealing. If the final\nblock length n is less than 16, AESv3\u2019s implementation encrypts the final 16\nbyte block by taking the last (16 \u2013 n) bytes of the penultimate ciphertext\nblock and prepending them to the n bytes of the ultimate plaintext block. The\nencryption of the resultant block fills the last (16 \u2013 n) bytes of the\npenultimate ciphertext block and the n bytes of the final ciphertext block.\nNote, however, that this practice only works when the plaintext consists of at\nleast two blocks. Therefore, if there exists only one plaintext block, then\nAESv3 right-zero-pads that block to be 16 bytes.\n\n#### Privacy issues with key and IV re-use\n\nSince the IV and key are both directly derived from the client key pair, the\nIV and key are reused until the application generates a new key pair. This\nonly happens when the application restarts, such as when the user restarts the\nmobile device, the user switches to a different keyboard and back, or the\nkeyboard app is evicted from memory. From our testing, we have observed the\nsame key and IV in use for over 24 hours. There are various issues that arise\nfrom key and IV reuse.\n\nRe-using the same IV and key means that the same inputs will encrypt to the\nsame encrypted ciphertext. Additionally, due to the way the block cipher is\nconstructed, if blocks in the same positions of the plaintexts are the same,\nthey will encrypt to the same ciphertext blocks. As an example, if the second\nblock of two plaintexts are the same, the second block of the corresponding\nciphertexts will be the same.\n\n#### Weakness in cipher mode\n\nThe electronic codebook (ECB) cipher mode is notorious for having the\nundesirable property that equivalent plaintext blocks encrypt to equivalent\nciphertext blocks, allowing patterns in the plaintext to be revealed in the\nciphertext (see Figure 2 for an illustration).\n\nFigure 2: When a bitmap image (left) is encrypted in ECB mode, patterns in the\nimage are still visible in the ciphertext (right). Adapted from these figures.\n\nWhile BCTR mode used by Baidu does not as flagrantly reveal patterns to the\nsame extent as ECB mode, there do exist circumstances in which patterns in the\nplaintext can still be revealed in the ciphertext. Specifically, there exist\ncircumstances in which there exists a counter-like pattern in the plaintext\nwhich can be revealed by the ciphertext (see Figure 3 for an example). These\ncircumstances are possible due to the fact that (IV + i) is XORed with each\nplaintext block i and then encrypted, unlike ordinary CTR mode which encrypts\n(IV + i) and XORs it with the plaintext. Thus, when using BCTR mode, if the\nplaintext exhibits similar counting patterns as (IV + i), then for multiple\nblocks the value ((IV + i) XOR plaintext block i) may be equivalent and thus\nencrypt to an equivalent ciphertext.\n\nFigure 3: When encrypted with the randomly generated key\n\u201c\\x96f\\x08\\xd1o\\x80\\x82\\x86\\xa7\\xb7\\xdaC\\x96\\xee\\xd1\\xa2\u201d and IV\n\u201cH[T\\x92\\x0c\\x80\\xa6 )o\\x95\\xe5\\xc5j=\\xe2\u201d using Baidu\u2019s modified CTR mode,\nthe above plaintext blocks in positions 0 and 1 encrypt to the same\nciphertext.\n\nMore generally, BCTR mode fails to provide the cryptographic property of\ndiffusion. Specifically, if an algorithm provides diffusion, then, when we\nchange a single bit of the plaintext, we expect half of the bits of the\nciphertext to change. However, the example in Figure 3 illustrates a case\nwhere changing a single bit of the plaintext caused zero bits of the\nciphertext to change, a clear violation of the expectations of this property.\nThe property of diffusion is vital in secure cryptographic algorithms so that\npatterns in the plaintext are not visible as patterns in the ciphertext.\n\n#### Other privacy and security weaknesses\n\nThere are other weaknesses in the custom encryption protocol designed by Baidu\nIME that are not consistent with the expected standards for a modern\nencryption protocol used by hundreds of millions of devices.\n\n##### Forward secrecy issues with static Diffie-Hellman\n\nThe use of a pinned static server key means that the cipher is not forward\nsecret, a property of other modern network encryption ciphers like TLS. If the\nserver key is ever revealed, any past message where the shared secret was\ngenerated with that key can be successfully decrypted.\n\n##### Lack of message integrity\n\nThere are no cryptographically secure message integrity checks, which means\nthat a network attacker may freely modify the ciphertext. There is a CRC32\nchecksum calculated and included with the plaintext data, but a CRC32 checksum\ndoes not provide cryptographic integrity, as it is easy to generate CRC32\nchecksum collisions. Therefore, modifying the ciphertext may be possible. In\ncombination with the issue concerning key and IV reuse, this protocol may be\nvulnerable to a swapped block attack.\n\n### Vulnerability in BAIDUv3.1 protocol\n\nThe BAIDUv3.1 protocol is weaker than the BAIDUv4.0 protocol and contains a\ncritical vulnerability that allows an eavesdropper to decrypt any messages\nencrypted with it. The protocol in the versions of Baidu\u2019s keyboard apps that\nwe analyzed encrypts keystrokes using a modified version of AES which we call\nAESv2, as we believe it to be the predecessor cipher to Baidu\u2019s AESv3. When a\nkeyboard app uses the BAIDUv3.1 protocol with the AESv2 cipher, we say that it\nuses the BAIDUv3.1+AESv2 scheme. Normally, AES when used with a 128-bit key\nperforms 10 rounds of encryption on each block. However, we found that AESv2\nuses only 9 rounds but is otherwise equivalent to AES encryption with a\n128-bit key.\n\nThe BAIDUv3.1+AESv2 scheme encrypts keystrokes using AESv2 in the following\nmanner. First, a key is derived according to a fixed function (see Figure 4).\nNote that the function takes no input nor references any external state and\nthus always generates the same static key k_f =\n\u201c\\xff\\x9e\\xd5H\\x07Z\\x10\\xe4\\xef\\x06\\xc7.\\xa7\\xa2\\xf26\u201d.\n\n    \n    \n    def derive_fixed_key(): key = [] x = 0 for i in range(16): key.append((~i ^ ((i + 11) * (x >> (i & 3)))) & 0xff) x += 1937 return bytes(key)\n\nFigure 4:\n\nPython code equivalent to the code that the BAIDUv3.1 protocol uses to derive\nits fixed key. The function takes no input and derives the same key on every\ninvocation.\n\nTo encrypt a protobuf-serialized message, the BAIDUv3.1 protocol first snappy-\ncompresses it, forming a compressed buffer. The 32-bit, little-endian length\nof this compressed message is then prepended to the compressed buffer, forming\nthe plaintext. A randomly generated 128-bit key k_m is used to encrypt the\nplaintext using AESv2 in ECB mode. The resulting ciphertext is stored in bytes\n44 until the end of the final UDP payload. Key k_f is used to encrypt k_m\nusing AESv2 in ECB mode. The resulting ciphertext is stored in bytes 28 until\n44 of the final UDP payload.\n\nWe found that these encrypted protobuf serializations include our typed\nkeystrokes as well as the name of the application into which we were typing\nthem (see Figure 5).\n\n    \n    \n    [...] 2 { 1: \"nihaocanyoureadthis\" 5: 3407918 } 3 { 1: 107 2: 10 5: 1 } 4 { 1: \"1133d4c64afbf1feda85d3c497dd6164|0\" 2: \"wn1||0\" 3: \"6.0.3.44\" 4: \"notepad.exe\" } [...]\n\nFigure 5:\n\nExcerpt of decrypted information, including what we had typed\n(\u201cnihaocanyoureadthis\u201d) and the app into which it was typed (\u201cnotepad.exe\u201d).\n\nA vulnerability exists in the BAIDUv3.1+AESv2 scheme that allows a network\neavesdropper to decrypt the contents of these messages. Since AES is a\nsymmetric encryption algorithm, the same key used to encrypt a message can\nalso be used to decrypt it. Since k_f is fixed, any network eavesdropper with\nknowledge of k_f, such as from performing the same analysis of the app as we\nperformed, can decrypt k_m and thus can decrypt the plaintext contents of each\nmessage encrypted in the manner described above. As we found that users\u2019\nkeystrokes and the names of the applications they were using were sent in\nthese messages, a network eavesdropper who is eavesdropping on a user\u2019s\nnetwork traffic can observe what that user is typing and into which\napplication they are typing it by taking advantage of this vulnerability.\n\n## iFlytek\n\nWe analyzed iFlytek (also called x\u00f9nf\u0113i from the pinyin of \u8baf\u98de) IME on Android,\niOS, and Windows. We found that iFlytek IME for Android includes a\nvulnerability which allows network eavesdroppers to recover the plaintext of\ninsufficiently encrypted network transmissions, revealing sensitive\ninformation including what users have typed (see Table 4 for details).\n\nPlatform| File/Package Name| Version analyzed| Secure?  \n---|---|---|---  \nAndroid| com.iflytek.inputmethod| 12.1.10| \u2718\u2718  \niOS| com.iflytek.inputime| 12.1.3338  \nWindows| iFlyIME_Setup_3.0.1734.exe| 3.0.1734  \n  \nTable 4: The versions of Xunfei IME analyzed.\n\nThe Android version of iFlytek IME encrypts the payload of each HTTP request\nsent to pinyin.voicecloud.cn with the following algorithm. Let s be the\ncurrent time in seconds since the Unix epoch at the time of the request. For\neach request, an 8-byte encryption key is then derived by first performing the\nfollowing computation:\n\nx = (s % 0x5F5E100) ^ 0x1001111\n\nThe 8-byte key k is then derived from x as the lowest 8 ASCII-encoded digits\nof x, left-padded with leading zeroes if necessary, in big-endian order. In\nPython, the above can be summarized by the following expression:\n\nk = b\u2019%08u\u2019 % ((s % 0x5F5E100) ^ 0x1001111)\n\nThe payload of the request is then padded with PKCS#7 padding and then\nencrypted with DES using key k in ECB mode. The value s is transmitted in the\nHTTP request in the clear as a GET parameter named \u201ctime\u201d.\n\nSince DES is a symmetric encryption algorithm, the same key used to encrypt a\nmessage can also be used to decrypt it. Since k can be easily derived from s\nand since s is transmitted in the clear in every HTTP request encrypted by k,\nany network eavesdropper can easily decrypt the contents of each HTTP request\nencrypted in the manner described above. (Since s is simply the time in single\nsecond resolution, it also stands to reason that a network eavesdropper would\nhave general knowledge of s in any case.)\n\nWe found that users\u2019 keystrokes were transmitted in a protobuf serialization\nand encrypted in this manner (see Figure 6). Therefore, a network eavesdropper\nwho is eavesdropping on a user\u2019s network traffic can observe what that user is\ntyping by taking advantage of this vulnerability.\n\n    \n    \n    1: 0 2: 0 3: 49 4: \"xxxxx\" 5: 0 7 { 1: \"app_id\" 2: \"100IME\" } 7 { 1: \"uid\" 2: \"230817031752396418\" } 7 { 1: \"cli_ver\" 2: \"12.1.14983\" } 7 { 1: \"net_type\" 2: \"wifi\" } 7 { 1: \"OS\" 2: \"android\" } 8: 8\n\nFigure 6:\n\nDecrypted information revealing what we had typed (\u201cxxxxx\u201d).\n\nFinally, the DES encryption algorithm is an older encryption algorithm with\nknown weaknesses, and the ECB block cipher mode is a simplistic and\nproblematic cipher mode. The use of each of these technologies is problematic\nin itself and opens the Android version of iFlytek IME\u2019s communications to\nadditional attacks.\n\n## Samsung\n\nWe analyzed Samsung Keyboard on Android as well as the versions of Sogou IME\nand Baidu IME that Samsung bundled with our test device, an SM-T220 tablet\nrunning ROM version T220CHN4CWF4. We found that Samsung Keyboard for Android\nand Samsung\u2019s bundled version Baidu IME includes a vulnerability that allows\nnetwork eavesdroppers to recover the plaintext of insufficiently encrypted\nnetwork transmissions, revealing sensitive information including what users\nhave typed (see Table 5 for details).\n\nPlatform| Application name| Package name| Version analyzed| Secure?  \n---|---|---|---|---  \nOneUI 5.1| Samsung Keyboard| com.samsung.android.honeyboard| 5.6.10.26| \u2718\u2718  \nOneUI 5.1| \u767e\u5ea6\u8f93\u5165\u6cd5 (Baidu IME)| com.baidu.input| 8.5.20.4| \u2718\u2718  \nOneUI 5.1| \u641c\u72d7\u8f93\u5165\u6cd5\u4e09\u661f\u7248 (Sogou IME Samsung Version)|\ncom.sohu.inputmethod.sogou.samsung| 10.32.38.202307281642  \n  \nTable 5: The keyboards analyzed on our Samsung test device.\n\n### Samsung Keyboard (com.samsung.android.honeyboard)\n\nWe found that when using Samsung Keyboard on the Chinese edition of a Samsung\ndevice and when Pinyin is chosen as Samsung Keyboard\u2019s input language, Samsung\nKeyboard transmits keystroke data to the following URL in the clear via HTTP\nPOST:\n\nhttp://shouji.sogou.com/web_ime/mobile_pb.php?durtot=339&h=8f2bc112-bbec-3f96-86ca-652e98316ad8&r=android_oem_samsung_open&v=8.13.10038.413173&s=&e=&i=&fc=0&base=dW5rbm93biswLjArMC4w&ext_ver=0\n\nThe keystroke data is contained in the request\u2019s HTTP payload in a protobuf\nserialization (see Figure 7 below).\n\n    \n    \n    1 { 1: \"8f2bc112-bbec-3f96-86ca-652e98316ad8\" 2: \"android_oem_samsung_open\" 3: \"8.13.10038.413173\" 4: \"999\" 5: 1 7: 2 } 2 { 1: \"\\351\\000\" 2: \"\\372\\213\" } 4: \"com.tencent.mobileqq\" 7: \"nihaocanyoureadthis\" 16: 10 17 { 3 { 1: 1 2: 5 } 5: 1 9: 1 } 18: \"\" 19 { 1: \"0\" 4: \"339\" }\n\nFigure 7:\n\nProtobuf message transmitted after typing \u201cnihaocanyoureadthis\u201d.\n\nThe device on which we were testing was fully updated on the date of testing\n(October 7, 2023) in that it had all OS updates applied and had all updates\nfrom the Samsung Galaxy Store applied.\n\nSince Samsung Keyboard transmits keystroke data via plain, unencrypted HTTP\nand since there is no encryption applied at any other layer, a network\neavesdropper who is monitoring a Samsung Keyboard user\u2019s network traffic can\neasily observe that user\u2019s keystrokes if that user is using the Chinese\nedition of the ROM with the Pinyin input language selected.\n\nWhen using the global edition of the ROM or when using a non-Pinyin input\nlanguage, we did not observe the Samsung keyboard communicating with cloud\nservers.\n\n### \u767e\u5ea6\u8f93\u5165\u6cd5 (\u201cBaidu IME\u201d, com.baidu.input)\n\nWe found that the version of Baidu IME bundled with our Samsung test device\ntransmitted keystroke information via UDP packets to udpolimenew.baidu.com.\nThis version of Baidu IME used the BAIDUv3.1 protocol that we describe in the\nBaidu section earlier but with a different cipher and compression algorithm as\nindicated in each transmission\u2019s header. In the remainder of this section we\nexplain how a network eavesdropper can, just like with AESv2, decrypt the\ncontents of messages encrypted using a scheme we call BAIDUv3.1+AESv1 (see\nTable 6).\n\nProtocol| Scheme| Cipher| Mode| Comparison of cipher to AES  \n---|---|---|---|---  \nBAIDUv3.1| BAIDUv3.1+AESv1| AESv1| ECB| Additional permutations  \nBAIDUv3.1+AESv2| AESv2| ECB| Missing round  \nBAIDUv4.0| BAIDUv4.0+AESv3| AESv3| BCTR| Uses home-rolled cipher mode  \n  \nTable 6: Summary of ciphers used across different Baidu protocols.\n\nSamsung\u2019s bundled version of Baidu IME encrypts keystrokes using a modified\nversion of AES which we name AESv1, as we believe it to be the predecessor to\nBaidu\u2019s AESv2. When encrypting, AESv1\u2019s key expansion is like that of standard\nAES, except, on each but the first subkey, the order of the subkey\u2019s bytes are\nadditionally permuted. Furthermore, on the encryption of each block, the bytes\nof the block are additionally permuted in two locations, once near the\nbeginning of the block\u2019s encryption immediately after the block has been XOR\u2019d\nby the first subkey and again near the end of the block\u2019s encryption\nimmediately before S-box substitution. Aside from complicating our analysis,\nwe are not aware of these modifications altering the security properties of\nAES, and we have developed an implementation of this algorithm to both encrypt\nand decrypt messages given a plaintext or ciphertext and a key.\n\nSamsung\u2019s bundled version of Baidu IME encrypts keystrokes by applying AESv1\nin electronic codebook (ECB) mode in the following manner. First, the app uses\nthe fixed 128-bit key, k_f =\n\u201c\\xff\\x9e\\xd5H\\x07Z\\x10\\xe4\\xef\\x06\\xc7.\\xa7\\xa2\\xf26\u201d, to encrypt another,\ngenerated, key, k_m. The fixed key k_f is the same key the BAIDUv3.1 protocol\nuses for AESv2 (see Figure 4). The encryption of k_m is stored in bytes 64\nuntil 80 of each UDP packet\u2019s payload. The key k_m is then used to encrypt the\nremainder of a zlib-compressed message payload, which is stored at byte 80\nuntil the end of the UDP payload. We found that the encrypted payload\nincluded, in a binary container format which we did not recognize, our typed\nkeystrokes as well as the name of the application into which we were typing\nthem (see Figure 8).\n\n    \n    \n    0: [800, 1276, 10, 0, \"92F8EE78F1DDCBE74CFEB1166F70883D%7C0\", \"a1|SM-T220-gta7litewifi|320\", \"8.5.20.4\", \"com.android.settings.intelligence\", \"1012497q\", \"\", \"2\u4f60\u597d\u60e8\u53c8\u70ed\u5927\u817f\", \"\"], 1: [0, \"\", \"nihaocanyoureadthis\"]\n\nFigure 8:\n\nThe decrypted and decompressed payload, revealing what we had typed\n(\u201cnihaocanyoureadthis\u201d, highlighted) and the app into which it was typed\n(\u201ccom.android.settings.intelligence\u201d); on top is a hex dump of, when decrypted\nand decompressed, the resulting proprietary binary blob, and below it is our\nunderstanding of how to parse it.\n\nA vulnerability exists in the BAIDUv3.1+AESv1 scheme that allows a network\neavesdropper to decrypt the contents of these messages. Since AES, including\nAESv1, is a symmetric encryption algorithm, the same key used to encrypt a\nmessage can also be used to decrypt it. Since k_f is hard-coded, any network\neavesdropper with knowledge of k_f can decrypt k_m and thus decrypt the\nplaintext contents of each message encrypted in the manner described above. As\nwe found that users\u2019 keystrokes and the names of the applications they were\nusing were sent in these messages, a network eavesdropper who is eavesdropping\non a user\u2019s network traffic can observe what that user is typing and into\nwhich application they are typing it by taking advantage of this\nvulnerability.\n\nAdditionally, in the version of Baidu Input Method distributed by Samsung, we\nfound that key k_m was not securely generated using a secure pseudorandom\nnumber generator (secure PRNG). Instead, it was seeded using a custom-designed\nPRNG that we believe to have poor security properties, and, instead of using a\nhigh entropy seed, the PRNG generating k_m was seeded using the message\nplaintext. However, even without these weaknesses in the generation of k_m,\nthe protocol is already completely insecure to network eavesdroppers as\ndescribed in the previous paragraphs.\n\n## Huawei\n\nWe analyzed the keyboards preinstalled on our Huawei Mate 50 Pro test device.\nWe found no vulnerabilities in the manner of transmission of users\u2019 keystrokes\nin the versions of Huawei\u2019s keyboard apps that we analyzed (see Table 7 for\ndetails). Specifically, Huawei used TLS to encrypt keystrokes in each version\nthat we analyzed.\n\nPlatform| Application name| Package Name| Version analyzed| Secure?  \n---|---|---|---|---  \nHarmonyOS 4.0.0| \u641c\u72d7\u8f93\u5165\u6cd5 (Sogou IME)| com.sohu.inputmethod.sogou| 11.31  \nHarmonyOS 4.0.0| \u5c0f\u827a\u8f93\u5165\u6cd5 (Celia IME)| com.huawei.ohos.inputmethod| 1.0.19.333  \n  \nTable 7: The versions of the Huawei keyboard apps analyzed.\n\n## Xiaomi\n\nWe analyzed the keyboards preinstalled on our Xiaomi Mi 11 test device. We\nfound that they all include vulnerabilities that allow network eavesdroppers\nto decrypt network transmissions from the keyboards (see Table 8 for details).\nThis means that network eavesdroppers can obtain sensitive personal\ninformation, including what users have typed.\n\nPlatform| Application name| Package Name| Version analyzed| Secure?  \n---|---|---|---|---  \nMIUI 14.0.31| \u767e\u5ea6\u8f93\u5165\u6cd5\u5c0f\u7c73\u7248 (Baidu IME Xiaomi Version)| com.baidu.input_mi|\n10.6.120.480| \u2718\u2718  \nMIUI 14.0.31| \u641c\u72d7\u8f93\u5165\u6cd5\u5c0f\u7c73\u7248 (Sogou IME Xiaomi Version)|\ncom.sohu.inputmethod.sogou.xiaomi| 10.32.21.202210221903| \u2718  \nMIUI 14.0.31| \u8baf\u98de\u8f93\u5165\u6cd5\u5c0f\u7c73\u7248 (iFlytek IME Xiaomi Version)|\ncom.iflytek.inputmethod.miui| 8.1.8014| \u2718\u2718  \n  \nTable 8: The versions of the Xiaomi keyboard apps analyzed.\n\nIn this section we detail vulnerabilities in three different keyboard apps\nincluded with MIUI 14.0.31 in which users\u2019 keystrokes can be, if necessary,\ndecrypted, and read by network eavesdroppers.\n\n### \u767e\u5ea6\u8f93\u5165\u6cd5\u5c0f\u7c73\u7248 (\u201cBaidu IME Xiaomi Version\u201d, com.baidu.input_mi)\n\nWe found that Xiaomi\u2019s Baidu-based keyboard app encrypts keystrokes using the\nBAIDUv3.1+AESv2 scheme which we detailed previously. When the app\u2019s messages\nare decrypted and deserialized, we found that they include our typed\nkeystrokes as well as the name of the application into which we were typing\nthem (see Figure 9).\n\n    \n    \n    [...] 2 { 1: \"nihaonihaoqqwerty\" } 3 { 1: 53 2: 10 3: 1080 4: 2166 5: 5 } 4 { 1: \"DC0F75E6809F0FAAB46EDE2F2D6302ED%7CVAPBN4NOH\" 2: \"p-a1-3-66|2211133C|720\" 3: \"10.6.120.480\" 4: \"com.miui.notes\" 5: \"1000228c\" 6: \"\\346\\242\\205\\345\\267\\236\" } [...]\n\nFigure 9:\n\nExcerpt of decrypted information, including what we had typed\n(\u201cnihaonihaoqqwerty\u201d) and the application into which it was typed\n(\u201ccom.miui.notes\u201d).\n\nLike we explained previously, a vulnerability exists in the BAIDUv3.1+AESv2\nscheme that allows a network eavesdropper to decrypt the contents of these\nmessages. As we found that users\u2019 keystrokes and the names of the applications\nthey were using were sent in these messages, a network eavesdropper who is\neavesdropping on a user\u2019s network traffic can observe what that user is typing\nand into which application they are typing it by taking advantage of this\nvulnerability.\n\n### \u641c\u72d7\u8f93\u5165\u6cd5\u5c0f\u7c73\u7248 (\u201cSogou IME Xiaomi Version\u201d, com.sohu.inputmethod.sogou.xiaomi)\n\nThe Sogou-based keyboard app is subject to a vulnerability which we have\nalready publicly disclosed in Sogou IME (\u641c\u72d7\u8f93\u5165\u6cd5) in which a network\neavesdropper can decrypt and recover users\u2019 transmitted keystrokes. Please see\nthe corresponding details in this report for full details. Tencent responded\nby securing Sogou IME transmissions using TLS, but we found that Xiaomi\u2019s\nSogou-based keyboard had not been fixed.\n\n### \u8baf\u98de\u8f93\u5165\u6cd5\u5c0f\u7c73\u7248 (\u201ciFlytek IME Xiaomi Version\u201d, com.iflytek.inputmethod.miui)\n\nSimilar to iFlytek\u2019s own IME for Android, we found that Xiaomi\u2019s iFlytek\nkeyboard app used the same faulty encryption. We found that users\u2019 keystrokes\nwere sent to pinyin.voicecloud.cn and encrypted in this manner.\n\n{\u201cp\u201d:{\u201cm\u201d:53,\u201df\u201d:0,\u201dl\u201d:0},\u201di\u201d:\u201dnihaoniba\u201d}\n\nFigure 10:\n\nExcerpt of decrypted information, including what we had typed (\u201cnihaoniba\u201d).\n\nTherefore, a network eavesdropper who is eavesdropping on a user\u2019s network\ntraffic can observe what that user is typing by taking advantage of this\nvulnerability (see Figure 10).\n\n## OPPO\n\nWe analyzed the keyboard apps preinstalled on our OPPO OnePlus Ace test\ndevice. We found that they all include vulnerabilities that allow network\neavesdroppers to decrypt network transmissions from the keyboards (see Table 9\nfor details). This means that network eavesdroppers can obtain sensitive\npersonal information, including what users have typed.\n\nPlatform| Application name| Package Name| Version analyzed| Secure?  \n---|---|---|---|---  \nColorOS 13.1| \u767e\u5ea6\u8f93\u5165\u6cd5\u5b9a\u5236\u7248 (Baidu IME Custom Version)| com.baidu.input_oppo|\n8.5.30.503| \u2718\u2718  \nColorOS 13.1| \u641c\u72d7\u8f93\u5165\u6cd5\u5b9a\u5236\u7248 (Sogou IME Custom Version)|\ncom.sohu.inputmethod.sogouoem| 8.32.0322.2305171502| \u2718  \n  \nTable 9: The versions of the OPPO keyboard apps analyzed.\n\nIn this section we detail vulnerabilities in two different keyboard apps\nincluded with MIUI 14.0.31 in which users\u2019 keystrokes can be, if necessary,\ndecrypted, and read by network eavesdroppers.\n\n### \u767e\u5ea6\u8f93\u5165\u6cd5\u5b9a\u5236\u7248 (\u201cBaidu IME Custom Version\u201d, com.baidu.input_oppo)\n\nWe found that OPPO\u2019s Baidu-based keyboard app encrypts keystrokes using the\nBAIDUv3.1+AESv2 scheme which we detailed previously. When the app\u2019s messages\nare decrypted and deserialized, we found that they include our typed\nkeystrokes as well as the name of the application into which we were typing\nthem (see Figure 11).\n\n    \n    \n    [...] 2 { 1: \"nihaonihao\" } 3 { 1: 28 2: 10 3: 1240 4: 2662 5: 5 } 4 { 1: \"47148455BDAEBA8A253ACBCC1CA40B1B%7CV7JTLNPID\" 2: \"p-a1-5-105|PHK110|720\" 3: \"8.5.30.503\" 4: \"com.android.mms\" 5: \"1021078a\" } [...]\n\nFigure 11:\n\nExcerpt of decrypted information, including what we had typed (\u201cnihaonihao\u201d)\nand the application into which it was typed (\u201ccom.android.mms\u201d).\n\nLike we explained previously, a vulnerability exists in the BAIDUv3.1+AESv2\nscheme that allows a network eavesdropper to decrypt the contents of these\nmessages. As we found that users\u2019 keystrokes and the names of the applications\nthey were using were sent in these messages, a network eavesdropper who is\neavesdropping on a user\u2019s network traffic can observe what that user is typing\nand into which application they are typing it by taking advantage of this\nvulnerability.\n\n### \u641c\u72d7\u8f93\u5165\u6cd5\u5b9a\u5236\u7248 (\u201cSogou IME Custom Version\u201d, com.sohu.inputmethod.sogouoem)\n\nThe Sogou-based keyboard app is subject to a vulnerability which we have\nalready publicly disclosed in Sogou IME (\u641c\u72d7\u8f93\u5165\u6cd5) in which a network\neavesdropper can decrypt and recover users\u2019 transmitted keystrokes. Please see\nthe corresponding details in this report for full details. Tencent responded\nby securing Sogou IME transmissions using TLS, but we found that OPPO\u2019s Sogou-\nbased keyboard had not been fixed.\n\n## Vivo\n\nWe analyzed the keyboard apps preinstalled on our Vivo Y78+ test device. We\nfound that the Sogou-based one includes vulnerabilities that allow network\neavesdroppers to decrypt network transmissions from the keyboards (see Table\n10 for details). This means that network eavesdroppers can obtain sensitive\npersonal information, including what users have typed.\n\nPlatform| Keyboard name| Package Name| Version analyzed| Secure?  \n---|---|---|---|---  \norigin OS 3| \u641c\u72d7\u8f93\u5165\u6cd5\u5b9a\u5236\u7248 (Sogou IME Custom Version)|\ncom.sohu.inputmethod.sogou.vivo| 10.32.13023.2305191843| \u2718  \norigin OS 3| Jovi\u8f93\u5165\u6cd5 (Jovi IME)| com.vivo.ai.ime| 2.6.1.2305231  \n  \nTable 10: The versions of the Vivo keyboard apps analyzed.\n\nThe Sogou-based keyboard app is subject to a vulnerability which we have\nalready publicly disclosed in Sogou IME (\u641c\u72d7\u8f93\u5165\u6cd5) in which a network\neavesdropper can decrypt and recover users\u2019 transmitted keystrokes. Please see\nthe corresponding details in this report for full details. Tencent responded\nby securing Sogou IME transmissions using TLS, but we found that Vivo\u2019s Sogou-\nbased keyboard had not been fixed.\n\n## Honor\n\nWe analyzed the keyboard apps preinstalled on our Honor Play7T test device. We\nfound that the Baidu-based one includes vulnerabilities that allow network\neavesdroppers to decrypt network transmissions from the keyboards (see Table\n11 for details). This means that network eavesdroppers can obtain sensitive\npersonal information, including what users have typed.\n\nPlatform| Application name| Package Name| Version analyzed| Secure?  \n---|---|---|---|---  \nMagic UI 6.1.0| \u767e\u5ea6\u8f93\u5165\u6cd5\u8363\u8000\u7248 (Baidu IME Honor Version)| com.baidu.input_hihonor|\n8.2.501.1| \u2718\u2718  \n  \nTable 11: The versions of the Honor keyboard apps analyzed.\n\nWe found that Honor\u2019s Baidu-based keyboard app encrypts keystrokes using the\nBAIDUv3.1+AESv2 scheme which we detailed previously. When the app\u2019s messages\nare decrypted and deserialized, we found that they include our typed\nkeystrokes as well as the name of the application into which we were typing\nthem (see Figure 12).\n\n    \n    \n    [...] 2 { 1: \"nihaonihaonihaoq\" 5: 6422639 } 3 { 1: 91 2: 10 3: 720 4: 1552 5: 5 } 4 { 1: \"A49AD3D3789A136975C2B28201753F03%7C0\" 2: \"p-a1-5-115|RKY-AN10|720\" 3: \"8.2.501.1\" 4: \"com.hihonor.mms\" 5: \"1023233d\" 7: \"A00-TWGTFEV5OFZ7WZ2AFN5TCDE4BPNO7XRZ-BVEZBI4D\" } [...]\n\nFigure 12:\n\nExcerpt of decrypted information, including what we had typed\n(\u201cnihaonihaonihaoq\u201d) and the application into which it was typed\n(\u201ccom.hihonor.mms\u201d).\n\nLike we explained previously, a vulnerability exists in the BAIDUv3.1+AESv2\nscheme that allows a network eavesdropper to decrypt the contents of these\nmessages. As we found that users\u2019 keystrokes and the names of the applications\nthey were using were sent in these messages, a network eavesdropper who is\neavesdropping on a user\u2019s network traffic can observe what that user is typing\nand into which application they are typing it by taking advantage of this\nvulnerability.\n\nAs of April 1, 2024, \u201cBaidu IME Honor Version\u201d, the default IME on the Honor\ndevice we tested, is still vulnerable to passive decryption. We also\ndiscovered that on our Play7T device, there was no way to update \u201cBaidu IME\nHonor Version\u201d through the device\u2019s app store. In responding to our\ndisclosures, Honor asked us to disclose to Baidu and that it was Baidu\u2019s\nresponsibility to patch this issue.\n\n# Other affected keyboard apps\n\nGiven our limited resources to analyze apps, we were not able to analyze every\ncloud-based keyboard app available. Nevertheless, given that these\nvulnerabilities appeared to affect APIs that were used by multiple apps, we\nwanted to approximate the total number of apps affected by these\nvulnerabilities.\n\nWe began by searching VirusTotal, a database of software and other files that\nhave been uploaded for automated virus scanning, for Android apps which\nreference the string \u201cget.sogou.com\u201d, the API endpoint used by Sogou IME, as\nthese apps may require additional investigation to determine whether they are\nvulnerable. Excluding apps that we analyzed above, this search yielded the\nfollowing apps:\n\n  * com.sohu.sohuvideo\n  * com.tencent.docs\n  * com.sogou.reader.free\n  * com.sohu.inputmethod.sogou.samsung\n  * com.sogou.text\n  * com.sogou.novel\n  * com.sogo.appmall\n  * com.blank_app\n  * com.sohu.inputmethod.sogou.nubia\n  * com.sogou.androidtool\n  * com.sohu.inputmethod.sogou.meizu\n  * com.sohu.inputmethod.sogou.zte\n  * sogou.mobile.explorer.hmct\n  * sogou.mobile.explorer\n  * com.sogou.translatorpen\n  * com.sec.android.inputmethod.beta\n  * com.sohu.inputmethod.sogou.meitu\n  * com.sec.android.inputmethod\n  * sogou.mobile.explorer.online\n  * com.sohu.sohuvideo.meizu\n  * com.sohu.inputmethod.sogou.oem\n  * com.sogou.map.android.maps\n  * sogou.llq.online\n  * com.sohu.inputmethod.sogou.coolpad\n  * com.sohu.inputmethod.sogou.chuizi\n  * com.sogou.toptennews\n  * com.sogou.recmaster\n  * com.meizu.flyme.input\n\nWe have not analyzed these apps and thus cannot conclude that they are\nnecessarily vulnerable, or even keyboard apps, but we provide this list to\nhelp reveal the possible scope of the vulnerabilities that we discovered. When\nwe disclosed this list to Tencent, Tencent requested an additional three\nmonths to fix the vulnerabilities before we publicly disclosed this list,\nsuggesting credence to the idea that apps in this list are largely vulnerable.\nSimilarly, after excluding apps that we had already analyzed, the following\nare other Android apps which reference the strings \u201cudpolimenew.baidu.com\u201d or\n\u201cudpolimeok.baidu.com\u201d, the API endpoints used by Baidu Input Method:\n\n  * com.adamrocker.android.input.simeji\n  * com.facemoji.lite.xiaomi.gp\n  * com.facemoji.lite.xiaomi\n  * com.preff.kb.xm\n  * com.facemoji.lite.transsion\n  * com.txthinking.brook\n  * com.facemoji.lite.vivo\n  * com.baidu.input_huawei\n  * com.baidu.input_vivo\n  * com.baidu.input_oem\n  * com.preff.kb.op\n  * com.txthinking.shiliew\n  * mark.via.gp\n  * com.qinggan.app.windlink\n  * com.baidu.mapauto\n\nThese findings suggest that a large ecosystem of apps may be affected by the\nvulnerabilities that we discovered in this report.\n\n# Coordinated disclosure\n\nWe reported the vulnerabilities that we discovered to each vendor in\naccordance with our vulnerability disclosure policy. All companies except\nBaidu, Vivo, and Xiaomi responded to our disclosures. Baidu fixed the most\nserious issues we reported to them shortly after our disclosure, but Baidu has\nyet to fix all issues that we reported to them. The mobile device\nmanufacturers whose preinstalled keyboard apps we analyzed fixed issues in\ntheir apps except for their Baidu apps, which either only had the most serious\nissues addressed or, in the case of Honor, did not address any issues (see\nTable 12 for details). Regarding QQ Pinyin, Tencent indicated that \u201cwith the\nexception of end-of-life products, we aim to finalize the upgrade for all\nactive products to transmit EncryptWall requests via HTTPS by the conclusion\nof Q1 [2024]\u201d, but, as of April 1, 2024, we have not seen any fixes to this\nproduct. Tencent may consider QQ Pinyin end-of-life as it has not received\nupdates since 2020, although we note that it is still available for download.\nFor timelines and full correspondence of our disclosures to each vendor,\nplease see the Appendix.\n\nLegend  \n---  \n\u2718\u2718| working exploit created to decrypt transmitted keystrokes for both active\nand passive eavesdroppers  \n\u2718| working exploit created to decrypt transmitted keystrokes for an active\neavesdropper  \n!| weaknesses present in cryptography implementation  \nno known issues or all known issues fixed  \nN/A| product not offered or not present on device analyzed  \nKeyboard developer| Android| iOS| Windows  \n---|---|---|---  \nTencent^\u2020| \u2718| N/A| \u2718  \nBaidu| !| !| !  \niFlytek  \n  \nPre-installed keyboard developer\n\nDevice manufacturer| Own| Sogou| Baidu| iFlytek| iOS| Windows  \n---|---|---|---|---|---|---  \nSamsung| *| !| N/A| N/A| N/A  \nHuawei| *| N/A| N/A| N/A| N/A  \nXiaomi| N/A| *| !| N/A| N/A  \nOPPO| N/A| !*| N/A| N/A| N/A  \nVivo| *| N/A| N/A| N/A| N/A  \nHonor| N/A| N/A| \u2718\u2718*| N/A| N/A| N/A  \n  \n* Default keyboard app on our test device. ^\u2020 Both QQ Pinyin and Sogou IME are developed by Tencent; in this report we analyzed QQ Pinyin and found the same issues as we had in Sogou IME.\n\nTable 12: Status of vulnerabilities after disclosure as of April 1, 2024.\n\nTo summarize, we no longer have working exploits against any products except\nHonor\u2019s keyboard app and Tencent\u2019s QQ Pinyin. Baidu\u2019s keyboard apps on other\ndevices continue to contain weaknesses in their cryptography which we are\nunable to exploit at this time to fully decrypt users\u2019 keystrokes in transit.\n\n## Barriers to users receiving security updates\n\nUsers can receive updates to their keyboard apps on their phones\u2019 app stores,\nand such updates typically install in the background without user\nintervention. In our testing, updating keyboard apps was typically performed\nwithout friction. However, in some cases, a user may need to also ensure that\nthey have fully updated their operating system before they will receive the\nfixes to our reported vulnerabilities for their keyboard app through the app\nstore. In the case of the Honor device we tested, there was no update\nmechanism for the default keyboard used by the operating system through the\napp store. Honor devices bundled with a vulnerable version of the keyboard\nwill remain vulnerable to passive decryption. In the case of the Samsung\nGalaxy Store, we found that on our device a user must sign in with a Samsung\naccount before receiving security updates to their keyboard app. In the case\nthe user does not have a Samsung account, then they must create one. We\nbelieve that installing important security updates should be frictionless, and\nwe recommend that Samsung and app stores in general not require the\nregistration of a user account before receiving important security updates.\n\nWe also learned from communication with Samsung\u2019s security team that our test\ndevice had been artificially stuck on an older version of Baidu IME (version\n8.5.20.4) compared to the one in the Samsung Galaxy Store. This is because,\nalthough the test device was using a Chinese ROM, we were prevented from\nreceiving updates to Baidu IME because the app was geographically unavailable\nin Canada, where we were testing from. Samsung addressed this issue by adding\nBaidu\u2019s keyboard app to the global market. Generally speaking, we recommend\nthat Samsung and other app stores do not geoblock security updates to apps\nthat are already installed.\n\n## Language barriers in responsible disclosures\n\nWe suspect that a language barrier may have prevented iFlytek from responding\nto our initial disclosure in English. After we did not receive a response for\none month, we re-sent the same disclosure e-mail, but with a subject line and\none-sentence summary in simplified Chinese. iFlytek responded within three\ndays of this second email and promptly fixed the issues we noted. All future\ndisclosure emails to the Chinese mobile device manufacturers were then written\nwith Chinese subject lines and a short summary in Chinese. Though obvious in\nhindsight, we encourage security researchers to consider if the company to\nwhich they are disclosing uses a different language than the researcher. We\nsuggest submitting vulnerability disclosures, at the very least, with short\nsummaries and email subject lines in the official language of the company\u2019s\njurisdiction to prevent similar delays as we may have encountered in\ndisclosure timelines.\n\n# Limitations\n\nIn this report we detail vulnerabilities relating to the security of the\ntransmission of users\u2019 keystrokes in multiple keyboard apps. In this work we\ndid not perform a full audit of any app or make any attempt to exhaustively\nfind every security vulnerability in any software. Our report concerns\nanalyzing keyboard apps for a class of vulnerabilities that we discovered, and\nthe absence of our reporting of other vulnerabilities should not be considered\nevidence of their absence.\n\n# Discussion\n\nIn this section we discuss the impact of the vulnerabilities that we found,\nspeculate as to the factors that gave rise to them, and conclude by\nintroducing possible ways to systemically prevent such vulnerabilities from\narising in the future.\n\n## Impact of these vulnerabilities\n\nThe scope of these severe vulnerabilities cannot be understated: until this\nand our previous Sogou report, the majority of Chinese mobile users\u2019\nkeystrokes were decryptable by network adversaries. The keyboards we studied\ncomprise over 95% of the third-party IME market share, which is estimated to\nbe over 780 million users by marketing agencies. In addition, the three phone\nmanufacturers which pre-installed and by default used vulnerable keyboard apps\ncomprise nearly 50% of China\u2019s smartphone market.\n\nThe vulnerabilities that we discovered would be inevitably discovered by\nanyone who thinks to look for them. Furthermore, the vulnerabilities do not\nrequire technological sophistication to exploit. With the exception of the\nvulnerability affecting many Sogou-based keyboard apps that we previously\ndiscovered, all of the vulnerabilities that we covered in this report can be\nexploited entirely passively without sending any additional network traffic.\nThis also means any existing logs of network data sent by these keyboards can\nbe decrypted in the future. As such, we might wonder, are these\nvulnerabilities actively under mass exploitation?\n\nFigure 13: Locations of XKEYSCORE servers as described in a 2008 NSA slide\ndeck.\n\nWhile many governments may possess sophisticated mass surveillance\ncapabilities, the Snowden revelations gave us unique insight into the\ncapabilities of the United States National Security Agency (NSA) and more\nbroadly the Five Eyes. The revelations disclosed, among other programs, an NSA\nprogram called XKEYSCORE for collecting and searching Internet data in\nrealtime across the globe (see Figure 13). Leaked slides describing the\nprogram specifically reveal only a few examples of XKEYSCORE plugins. However,\none was a plugin that was written by a Five Eyes team to take advantage of\nvulnerabilities in the cryptography of Chinese-developed UC Browser to enable\nthe Five Eyes to collect device identifiers, SIM card identifiers, and account\ninformation pertaining to UC Browser users (see Figure 14 for an\nillustration).\n\nFigure 14: The dashboard of an XKEYSCORE plugin used to monitor for\ntransmissions of sensitive data insufficiently encrypted by UC Browser as\ndescribed in a 2012 Five Eyes slide deck.\n\nThe similarity of the vulnerability exploited by this XKEYSCORE plugin and the\nvulnerabilities described in this report are uncanny, as they are all\nvulnerabilities in the encryption of sensitive data transmissions in software\npredominantly used by Chinese users. Given the known capabilities of\nXKEYSCORE, we surmise that the Five Eyes would have the capability to globally\nsurveil the keystrokes of all of the keyboard apps that we analyzed with the\nexception of Sogou and the apps licensing its software. This single exception\nexists because Sogou cannot be monitored passively and would require sending\npackets to Sogou servers. Such communications would be measurable at Sogou\u2019s\nservers and at other vantage points, potentially revealing the Five Eyes\u2019s\ntarget(s) of surveillance to Sogou or Chinese network operators. Therefore,\ntargets of outdated Sogou software would be undesirable victims of mass\nsurveillance, even if such non-passive measurements were within the known\ncapabilities of XKEYSCORE or other Five Eyes programs.\n\nGiven the enormous intelligence value of knowing what users are typing, we can\nconclude that not only do the NSA and more broadly the Five Eyes have the\ncapabilities to mass exploit the vulnerabilities we found but also the strong\nmotivation to exploit them. If the Five Eyes\u2019 capabilities are an accurate\nreflection of the capabilities and motivations of other governments, then we\ncan assume that many other governments are also capable and motivated to mass\nexploit these vulnerabilities. The only remaining question is whether any\ngovernment had knowledge of these vulnerabilities. If they did not have such\nknowledge before our original report analyzing Sogou, they may have acquired\nafter it in the same way that our original research inspired us to look at\nsimilar keyboard apps for analogous vulnerabilities. Unfortunately, short of\nfuture government leaks, we may never know if or to what extent any state\nactors mass exploited these vulnerabilities.\n\nEven though we disclosed the vulnerabilities to vendors, some vendors failed\nto fix the issues that we reported. Moreover, users of devices which are out\nof support or that otherwise no longer receive updates may continue to be\nvulnerable. As such, many users of these apps may continue to be under mass\nsurveillance for the foreseeable future.\n\n## How did these vulnerabilities arise\n\nWe analyzed a broad sample of Chinese keyboard apps, finding that they are\nalmost universally vulnerable to having their users\u2019 keystrokes being\ndecrypted by network eavesdroppers. Yet there is no common library or a single\nimplementation flaw responsible for these vulnerabilities. While some of the\nkeyboard apps did license their code from other companies, our overall\nfindings can only be explained by a large number of developers independently\nmaking the same kind of mistake. As such, we might ask, how could such a large\nnumber of independent developers almost universally make such a critical\nmistake?\n\nOne attempt to answer this question is to suggest that these were not mistakes\nat all but deliberate backdoors introduced by the Chinese government. However,\nthis hypothesis is rather weak. First, user keystroke data is already being\nsent to servers within Chinese legal jurisdiction, and so the Chinese\ngovernment would have access to such data anyways. Second, the vulnerabilities\nthat we found give the ability not just to the Chinese government to decrypt\ntransmitted keystrokes but to any other actor as well. In an ideal backdoor,\nthe Chinese government would want the desirable property that only they have\naccess to the backdoor. Finally, the Chinese government has made strides to\nstudy and improve the data security of apps developed and used in China,\nattempting to prevent and fix the very sort of vulnerabilities which we\ndiscovered. For instance, a 2020 report from CNCERT/CC found that 60 percent\nof the 50 banking applications that they investigated did not encrypt any user\ndata transmitted over the network, among a litany of other common security\nissues.\n\nWere Chinese app developers skeptical of using cryptographic standards\nperceived as \u201cWestern\u201d? Countries such as China and Russia have their own\nencryption standards and ciphers. To our knowledge none of the faulty\nencryption implementations that we analyzed adhered to any sort of known\nstandard in any country, and each appeared to be home-rolled ciphers. However,\nit is possible that Asian developers are less inclined to use encryption\nstandards that they fear may contain backdoors such as the potential\nDual_EC_DRBG backdoor.\n\nPerhaps Chinese app developers could be skeptical of standards such as SSL/TLS\nas well. The TLS ecosystem has also only become nearly-universal in the past\ndecade. Especially before broad oversight of certificate authorities became\ncommonplace, there were many valid criticisms of the SSL/TLS ecosystem. In\n2011, digital rights organizations EFF and Access Now were both concerned\nabout the certificate authority (CA) infrastructure underpinning SSL/TLS\ntransport encryption. Even today, the vast majority of root certificates\ntrusted by major OSes and browsers are operated by certificate authorities\nbased in the Global North. We also note that all of the IMEs containing\nvulnerabilities were first released before 2013 and likely had a need for\nsecure network transmission before SSL/TLS became the de-facto standard for\nstrong transport encryption.\n\nStill, it has been a decade since the Snowden leaks demonstrated the global,\nurgent, and practical need for strong encryption of data-in-transit in 2013,\nand the TLS ecosystem has largely stabilized, with CA root lists of many major\nbrowsers and OSes controlled by voting bodies and certificate transparency\ndeployed. As of 2024, almost 95% of web traffic from users of Firefox in the\nUnited States is traveling over HTTPS. In addition, the speed in which both\niFlytek and Sogou switched to TLS demonstrates that making the change to\nstandard TLS is not necessarily a time or resource issue. Even if skepticism\ntowards SSL/TLS explains the reluctance to adopt it in the early 2010s, we are\nnot sure why there is much more inertia in the Chinese Internet ecosystem\nagainst making the switch to TLS.\n\nFinally, mobile devices and other operating systems are still incapable of\nguaranteeing the security of data under transmission, despite iOS and Android\nhaving introduced restrictions into their APIs. For instance, iOS 9\nimplemented App Transport Security, a policy placing restrictions on the\nability to transmit data without TLS. However, there are two limitations of\nthis technology. First, an app can specify exceptions to this policy in its\nInfo.plist resource. Second, the policy affects high level APIs and leaves\ncommunications over lower level socket-based APIs unregulated. Similar to iOS,\nAndroid 9 disables cleartext traffic using certain high level APIs by default,\nbut an app may exclude specific domains or avoid the policy by using lower\nlevel APIs.\n\n## Can we systemically address these vulnerabilities?\n\nIndividually analyzing apps for this class of vulnerabilities and individually\nreporting issues discovered is limited in the scale of apps that it can fix.\nFirst, while we can attempt to manually analyze some of the most popular\nkeyboard apps, we will never be able to analyze every app at large. Second, we\nmight not be able to predict which apps to look at in the first place. For\ninstance, before we analyzed Sogou and the keyboard apps featured in this\nreport, we never would have expected that their network transmissions would be\nso easily vulnerable to interception. In light of the limitations of the\nmethods that we employed in this report, in the remainder of this section we\ndiscuss possibilities for how we might systematically or wholesale address\napps which transmit sensitive data over networks without sufficient\nencryption.\n\n### By security researchers paying more attention to the Chinese Internet\n\nThere appears to be a general failure of researchers to analyze Chinese apps\nand the Chinese Internet ecosystem at large, despite its size and influence.\nThe Google Play Store and Apple App Store ecosystems, for instance, are\ncommonly studied by privacy researchers, but many Chinese app stores are\noverlooked, despite that many popular Chinese apps have more users than their\ncounterparts on the Google Play Store. While the vulnerabilities that we\ndiscovered were not all trivial to find and many took substantial analysis to\nattack, most would have been inevitably discovered by any researcher analyzing\nthese apps for data security. A researcher studying network traffic from users\nof Chinese devices could also have identified strange, non-standard traffic.\n\n### By using app store enforcement\n\nOne might call on app stores to enforce the use of sufficient encryption to\nprotect sensitive data in transit. App stores already have a number of rules\nthat they enforce through a combination of automated and manual review.\nCalling on app stores to enforce sufficient encryption of in-transit sensitive\ndata is tempting given the resources of the companies operating the app\nstores. However, failing any other innovation, the same scaling issues that\napply to other researchers studying these apps will apply to those working for\nthese companies.\n\n### By using device permission models\n\nOn Android devices, installing any keyboard, regardless of whether or how it\ncommunicates with servers over the Internet, brings up a pop-up with the\nfollowing text:\n\nThis input method may be able to collect all the text you type, including\npersonal data like passwords and credit card numbers.\n\nThe wording of these warning messages is overbroad and does not necessarily\nhelp users distinguish between keyboards that transmit keystrokes over the\nnetwork, keyboards that transmit keystrokes insecurely (using something other\nthan standard TLS) over the network, and keyboards that do not transmit any\ndata at all.\n\niOS devices, on the other hand, sandbox their keyboards by default. There is a\n\u201cFull Access\u201d or \u201copen access\u201d permission that must be explicitly granted to\nkeyboards before they have network access, among other privileges. Without\nthis permission, third-party keyboards cannot transmit network data. We\nrecommend Android also adopt a more fine-grained permission model for\nkeyboards.\n\nFurthermore, the vulnerable apps that we studied transmit data using low level\nsocket APIs versus higher level APIs that require the usage of TLS or HTTPS.\nOne might desire that separate system calls be designed for TLS or HTTPS\ntraffic in addition to the lower level socket system calls so that devices\ncould implement an UNSAFE_INTERNET permission that would be required for apps\nto use the lower level system calls while still allowing TLS-encrypted traffic\nfor apps that do not have this permission.\n\nWhile this approach may have some merit, it also has certain drawbacks. It\nmakes sense for situations where apps are untrustworthy and the operating\nsystem is completely trustworthy, but there are common situations where the\noperating system could be not as or even less trustworthy than apps that it is\nrunning. One common case would be a user who is running an up-to-date app on\nan out of date operating system, possibly because the user\u2019s device is no\nlonger receiving operating system updates. In such a case, the app\u2019s\nimplementation of TLS is more likely to be secure than that of the operating\nsystem. Furthermore, a user\u2019s operating system may be compromised by malware\nor otherwise be untrustworthy in itself. Introducing a TLS system call would\ncentralize the encryption of all sensitive data and grant the operating system\neasy visibility into all unencrypted data. In any case, innovating in areas of\nencryption is an important right of application developers, and it may not\nmake sense to stifle apps like Signal because of their use of end-to-end or\nother novel encryption by requiring them to obtain an UNSAFE_INTERNET\npermission.\n\nOne might alternatively desire for apps at large to not be able to access the\nInternet at all. Instead of an UNSAFE_INTERNET permission, what about\nintroducing an INTERNET permission to govern all Internet socket access,\nsimilar to the \u201cFull Access\u201d permission which iOS already applies to keyboard\napps? Android devices in fact already have such a permission that apps must\nrequest to use Internet (AF_INET) sockets, but it is not a permission that is\nexposed to ordinary users either in the Google Play Store or through any stock\nAndroid user interface, and it is automatically granted when installing an\napp. Unfortunately, given all of the interprocess communication (IPC) vehicles\non modern smart devices, restricting Internet socket access may not guarantee\nthat the app could not communicate over the Internet (e.g., through Google\nPlay services). GrapheneOS, an open source Android-based operating system,\nimplements a NETWORK permission. However, denying this permission can lead to\nsurprising results where apps can still communicate with the Internet via IPC\nwith other apps. As such, we recommend that both the developers of Android and\niOS work toward a meaningful INTERNET permission that would adequately inform\nusers of whether an app communicates over the Internet.\n\n### By international standards bodies better engaging with Chinese developers\n\nWe encourage International standards bodies like the IETF to continue to\nengage and outreach Chinese Internet companies and engineers in good faith to\nfurther reduce friction in cross-linguistic knowledge transfer. The presence\nof these similar but independent vulnerabilities demonstrate that there is a\nfriction in the transfer and implementation of knowledge between the English-\nspeaking cryptography community and the Chinese cryptography community. For\ninstance, Schneier\u2019s Law or the oft-repeated mantra \u201cdon\u2019t roll your own\ncrypto\u201d may be common knowledge to cryptographers trained in English, but\nperhaps lost in translation. A lag across linguistic boundaries means that\ngeneral information like the recent stabilization of TLS and webPKI\ninfrastructure may travel more slowly, and updating encryption software to\nreflect new information may lag even further behind. One other possible\nexample of this phenomenon is that, according to Firefox Telemetry, up until\n2020, the Japanese Internet ecosystem also significantly lagged behind the\nglobal average in HTTPS adoption.\n\nAlthough protocols put out by IETF and other International standards bodies\ncan be far from bulletproof, these bodies can still help facilitate\ninternational communication about the current state-of-the-art in protocol\nencryption. The burden of cross-linguistic and cross-cultural exchange on\ntechnical standards falls on global standards bodies. Western media outlets\nand researchers tend to uniformly attribute the actions and participation of\nprivate Chinese companies within standards bodies to government actors seeking\nsovereignty over Internet standards. While skepticism may be warranted in\ncertain cases, there is also research that challenges a simplistic and\noverbroad narrative. As a single data point, we note that we did not find\nthese issues in Huawei\u2019s keyboards, whose employees are often noted as\nespecially active participants in IETF standard-setting.\n\n### By using automated static or dynamic analysis\n\nThere has been a failure of automated tools to detect insecure traffic at\nlarge. Longitudinal TLS telemetry has largely been focused on web-based\nperspectives (i.e., how many domains support TLS or how many web connections\nare encrypted by TLS?), and the mobile perspective is often overlooked,\ndespite the increasing dominance of mobile traffic globally. Although there\nare some research projects that survey TLS usage in Android mobile apps at\nscale, there is no public longitudinal data from these projects (i.e., they\nare run as one-off studies), and many focus on the Google Play\u2019s Android\necosystem, thereby excluding the Chinese mobile Internet. There is perhaps a\nneed for public longitudinal TLS telemetry for popular mobile applications\nglobally, via automated static or dynamic analysis at scale.\n\n### By using attestations in app stores\n\nAnother way for users to gain visibility into the security and privacy\nproperties of their apps is through the use of developer attestations, such as\nthe ones that appear in data safety sections in many popular app stores. Both\nthe Apple App Store and the Google Play Store collect and display such\nattestations to varying extents, including attestations as to what data an app\ncollects (if any) and with whom it is shared (if anyone). Additionally, the\nPlay Store allows developers the opportunity to attest to performing\n\u201cencryption in transit\u201d (see Figure 15 for an example). These attestations\nallow users to clearly see what security and privacy properties an app\u2019s\ndeveloper claims it to have and, like privacy policies, they provide means of\nredress if violated.\n\nFigure 15: An example of an attestation for Microsoft SwiftKey.\n\nWe wanted to evaluate whether the apps that we analyzed lived up to their\nattestations concerning their encryption in the app stores in which they are\navailable. Among the apps that we analyzed, only Baidu IME was available in\nthe Play Store. At the time of this writing, it does not attest to its data\nbeing encrypted in transit. Although other apps that we analyzed were\navailable in Apple\u2019s App Store, to our knowledge, this store does not display\nan attestation for whether the app encrypts data in transit. As such, across\nboth the Google Play and the Apple App stores, attestations were insufficient\nfor compelling the keyboard apps\u2019 developers to implement proper encryption or\nin providing users any opportunity for redress.\n\nIn light of the above findings, we believe that users would benefit from the\nfollowing recommendations: (1) that app store operators require developers to\nattest to whether or not an app encrypts data in transit, (2) that app store\noperators display not only when developers attest to all data being encrypted\nin transit but also display a warning when they fail to, and (3) that app\nstore operators require apps in certain sensitive categories, such as keyboard\napps, to either positively attest to encrypting all data in transit or to\nattest to not transmitting any data at all.\n\nSince most of the apps that we found perform some type of encryption, even if\nit were wholly inadequate, one might wonder if attesting that data is merely\n\u201cencrypted\u201d is enough, since the data arguably did have some manner of\nencryption applied to it during transit. The Play Store provides some guidance\non this topic. Under the question \u2014 \u201cHow should I encrypt data in transit?\u201d \u2014\nthe documentation notes: \u201cYou should follow best industry standards to safely\nencrypt your app\u2019s data in transit. Common encryption protocols include TLS\n(Transport Layer Security) and HTTPS.\u201d\n\nAnother issue with attestations is that they provide no guarantee that an app\nbehaves as its developers attest, as developers can, after all, make false\nattestations. While we wish that attestations could guarantee that an app\nsufficiently implements proper cryptography to the same extent that a\npermission system can guarantee an app does not use a microphone, false\nattestations provide an opportunity for redress. For instance, apps which are\nfound to violate attestations would be subject to removal from app stores.\nFurthermore, apps which violate attestations could be subject to fines by\nregulatory bodies such as the FTC. Finally, apps which violate the attestation\ncould be liable to civil suits.\n\nWhile the apps we analyzed were predominantly available from Chinese app\nstores, we equally recommend that Chinese app stores adopt these\nrecommendations in addition to the Apple App Store and the Google Play Store.\nMoreover, while this report focuses on the problem of poor encryption\npractices as it applies to Chinese apps, the problem to varying extents\napplies to apps of all other provenances.\n\n# Summary of recommendations\n\nWe conclude our report by summarizing our recommendations to multiple\nstakeholders.\n\n## Recommendations to security researchers\n\n  * Researchers should analyze more apps from the East Asian app ecosystem and from other popular ecosystems which may be outside of their own locale.\n  * Researchers should develop better static and dynamic analysis techniques to recognize the types of vulnerabilities that we discovered in this report at scale.\n  * Researchers submitting vulnerability disclosures to a company should include short summaries and email subject lines in the official language of the company\u2019s jurisdiction.\n\n## Recommendations to international standards bodies\n\n  * International standards bodies should continue to engage with security engineers from Chinese Internet companies.\n\n## Recommendations to app store operators\n\n  * App stores should not require account registration as a condition to receive security updates.\n  * App stores should not geoblock security updates.\n  * App stores should allow developers to attest to all data being transmitted with encryption, similar to the ability in the Google Play Store.\n  * App stores should display not only when developers attest to all data being encrypted in transit but also display a warning when they fail to.\n  * App stores should require apps in certain sensitive categories, such as keyboard apps, to either positively attest to encrypting all data in transit or to attest to not transmitting any data at all.\n\n## Recommendations to keyboard app developers\n\n  * Use well-tested and standard encryption protocols, like TLS or QUIC.\n  * Make every attempt to provide features on-device without requiring transmitting sensitive data to cloud servers.\n\n## Recommendations to mobile operating system developers\n\n  * Android should implement sandboxing by default for keyboard apps, similar to iOS, that prevents a keyboard from transmitting network traffic among other activities until a user grants the app full access.\n  * The developers of Android and iOS should work toward a meaningful INTERNET permission that would adequately inform users of whether any app communicates over the Internet.\n\n## Recommendations to device manufacturers\n\n  * Conduct security audits of third-party keyboards that you intend to pre-install by default on your operating systems.\n\n## Recommendations to users\n\n  * Users of Honor\u2019s pre-installed keyboard or users of QQ pinyin should switch keyboards immediately.\n  * Users of any Sogou, Baidu, or iFlytek keyboard, including the versions that are bundled or pre-installed on operating systems, should ensure their keyboards and operating systems are up-to-date.\n  * Users of any Baidu IME keyboard should consider switching to a different keyboard or disabling the \u201ccloud-based\u201d feature.\n  * Users with privacy concerns should not enable \u201ccloud-based\u201d features on their keyboards or IMEs or should switch to a keyboard that does not offer \u201ccloud-based\u201d prediction.\n  * iOS users with privacy concerns should not enable \u201cFull Access\u201d for their keyboards or IMEs.\n\n# Acknowledgments\n\nWe would like to thank Jedidiah Crandall, Jakub Dalek, Pellaeon Lin, and Sarah\nScheffler for their guidance and review of this report. Research for this\nproject was supervised by Ron Deibert.\n\n# Appendix\n\n## Known affected software\n\nWe recommend that all users keep their operating systems and apps, including\nkeyboard apps, up to date. If you use any of the following software, we\nespecially recommend you update to the most recent version of your OS and\napplication. As of April 1, 2024, the following software has fixes available:\n\nSeparately installed, third-party keyboards\n\n  * Sogou IME / \u641c\u72d7\u8f93\u5165\u6cd5 for Android and Windows\n  * Baidu IME / \u767e\u5ea6\u8f93\u5165\u6cd5 for Windows (this software has only been partially fixed, see below)\n  * iFlytek IME / \u8baf\u98de\u8f93\u5165\u6cd5 for Android\n\nPre-installed on Samsung devices with Chinese edition ROM\n\n  * Samsung Keyboard\n  * Baidu IME / \u767e\u5ea6\u8f93\u5165\u6cd5\n\nPre-installed on Xiaomi devices with Chinese edition ROM\n\n  * Sogou IME Xiaomi Version / \u641c\u72d7\u8f93\u5165\u6cd5\u5c0f\u7c73\u7248\n  * iFlytek IME Xiaomi Version / \u8baf\u98de\u8f93\u5165\u6cd5\u5c0f\u7c73\u7248\n\nPre-installed on OPPO devices with Chinese edition ROM\n\n  * Sogou IME Custom Version / \u641c\u72d7\u8f93\u5165\u6cd5\u5b9a\u5236\u7248\n\nPre-installed on Vivo devices with Chinese edition ROM\n\n  * Sogou IME Custom Version / \u641c\u72d7\u8f93\u5165\u6cd5\u5b9a\u5236\u7248\n\nThe following software does not use TLS and may still contain weaknesses:\n\nSeparately installed, third-party keyboards\n\n  * Baidu IME / \u767e\u5ea6\u8f93\u5165\u6cd5 for Android, Windows, and iOS\n\nPre-installed on Xiaomi devices with Chinese edition ROM\n\n  * Baidu IME Xiaomi Version / \u767e\u5ea6\u8f93\u5165\u6cd5\u5c0f\u7c73\u7248\n\nPre-installed on OPPO devices with Chinese edition ROM\n\n  * Baidu IME Custom Version / \u767e\u5ea6\u8f93\u5165\u6cd5\u5b9a\u5236\u7248\n\nThe following software has not been fixed and is easily exploitable, and we\nsuggest that users switch to another keyboard entirely:\n\nSeparately installed, third-party keyboards\n\n  * QQ Pinyin IME / QQ\u62fc\u97f3\u8f93\u5165\u6cd5 for Android and Windows\n\nPre-installed on Honor devices with Chinese edition ROM\n\n  * Baidu IME Honor Version / \u767e\u5ea6\u8f93\u5165\u6cd5\u8363\u8000\u7248\n\n## Disclosure timelines\n\n### Baidu\n\n### Honor\n\n### iFlytek\n\n### OPPO\n\n### Samsung\n\n### Tencent\n\n### Vivo\n\n### Xiaomi\n\nShare this report:\n\nRelated Posts\n\n  * \u300c\u8acb\u52ff\u516c\u958b\u300d:\u641c\u72d7\u62fc\u97f3\u8f38\u5165\u6cd5 (Sogou Keyboard) \u52a0\u5bc6\u4e2d\u7684\u6f0f\u6d1e\u4f7f\u6309\u9375\u66b4\u9732\u65bc\u7db2\u8def\u7aca\u807d\u4e4b\u98a8\u96aa\n\n  * New York Times: Security Flaws Seen in China\u2019s Mandatory Olympics App for Athletes\n\n## Connect\n\n## Newsletter\n\nPrivacy Policy\n\nUnless otherwise noted this site and its contents are licensed under a\nCreative Commons Attribution 2.5 Canada license.\n\n", "frontpage": false}
