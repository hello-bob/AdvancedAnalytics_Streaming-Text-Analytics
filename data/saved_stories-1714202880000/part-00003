{"aid": "40173716", "title": "How the TC39 Signal Proposal can supercharge React app performance", "url": "https://github.com/arif-rachim/react-hook-signal", "domain": "github.com/arif-rachim", "votes": 2, "user": "rachim2901", "posted_at": "2024-04-26 20:15:13", "comments": 0, "source_title": "GitHub - arif-rachim/react-hook-signal", "source_text": "GitHub - arif-rachim/react-hook-signal\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\narif-rachim / react-hook-signal Public\n\n  * Notifications\n  * Fork 1\n  * Star 1\n\n### License\n\nMIT license\n\n1 star 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# arif-rachim/react-hook-signal\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\narif-rachimdocs(readme): introduce example code in sample signalApr 26,\n202405d56ee \u00b7 Apr 26, 2024Apr 26, 2024\n\n## History\n\n37 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| ci(ci): integrate to upload coverage report to codecov| Apr 20, 2024  \n  \n### .husky\n\n|\n\n### .husky\n\n| ci(husky): improve husky to support commitizen,and ensure test before...|\nApr 20, 2024  \n  \n### assets\n\n|\n\n### assets\n\n| docs(readme): introduce example code in sample signal| Apr 26, 2024  \n  \n### examples/1-just-signal\n\n|\n\n### examples/1-just-signal\n\n| docs(readme): improve readme and update sample signal implementation| Apr\n26, 2024  \n  \n### src\n\n|\n\n### src\n\n| docs(example just signal): example how we can use signal in react wit...|\nApr 26, 2024  \n  \n### .eslintrc.cjs\n\n|\n\n### .eslintrc.cjs\n\n| Initial commit| Apr 10, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| ci(husky): improve husky to support commitizen,and ensure test before...|\nApr 20, 2024  \n  \n### CODE_OF_CONDUCT.md\n\n|\n\n### CODE_OF_CONDUCT.md\n\n| Create CODE_OF_CONDUCT.md| Apr 21, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| build(package.json): introduce commitizen to make conventional commit...|\nApr 20, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| docs(readme): introduce example code in sample signal| Apr 26, 2024  \n  \n### index.html\n\n|\n\n### index.html\n\n| Initial commit| Apr 10, 2024  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| feat(1-just-signal): continue working on the sample product| Apr 24, 2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| test(examples): preparing examples project for showcase| Apr 22, 2024  \n  \n### tsconfig.json\n\n|\n\n### tsconfig.json\n\n| Initial commit| Apr 10, 2024  \n  \n### tsconfig.node.json\n\n|\n\n### tsconfig.node.json\n\n| Initial commit| Apr 10, 2024  \n  \n### vite.config.ts\n\n|\n\n### vite.config.ts\n\n| test(examples): preparing examples project for showcase| Apr 22, 2024  \n  \n## Repository files navigation\n\n> React-Hook-Signal is a tiny library, less than 1kb. It helps you integrate\n> Signal with your React components easily.\n\n### Installation\n\n    \n    \n    npm install react-hook-signal signal-polyfill\n\n## What are Signals?\n\nThe TC39 Proposal for Signals in JavaScript aims to establish a mechanism for\ncomponents to communicate effectively. This proposal includes a polyfill for\nprototyping purposes.\n\n### Understanding Signals\n\n  * Refer to https://eisenbergeffect.medium.com/a-tc39-proposal-for-signals-f0bedd37a335 for detailed explanation.\n  * Explore the proposal repository: https://github.com/proposal-signals/proposal-signals\n\nOnce adopted, JavaScript will have a native signaling system, referred to as\nSignal throughout this guide.\n\n### How signal can efficiently re-render react component\n\nIn React components, re-rendering starts at the component's beginning and\nextends to the end of the JSX element. Signal usage allows precise re-\nrendering, boosting performance and simplifying development without the need\nfor memoization or useCallback functions.\n\n## Why choose React-Hook-Signal?\n\n  * It's straightforward: Just React and Native Signal, no extra babel plugin needed.\n  * Enjoy full TypeScript support for an improved Developer Experience.\n  * Flexibility is key: Opt-in for integration in your React project, seamlessly blending state and signal.\n  * It's incredibly lightweight, clocking in at less than 1kb\n\n## Steps to Integrate Signals with React\n\n### STEP 1: Rendering Signal Values:\n\n  * Utilize notifiable components provided by react-hook-signal.\n  * notifiable components accept standard HTML attributes, Signal, and Lambda for detecting dependency changes.\n\nExample:\n\n    \n    \n    // Global.tsx import {Signal} from \"signal-polyfill\"; import {JSXAttribute} from \"react-hook-signal\"; export const count = new Signal.State(0) export const renderCount = new Signal.Computed(() => { return <div>Count {count.get()}</div> })\n\nThe fastest way to integrate these Signals is to use the notifiable\ncomponents.\n\n    \n    \n    import {count,renderCount} from \"./GlobalSignals.tsx\"; // here we are importing react-hook-signal:notifiable import {notifiable} from \"react-hook-signal\"; export function App() { return <> {/* When user click button it will update the state */} <button onClick={() => count.set(count.get() + 1)}>Click here</button> {/* Following line will get auto update when user click button*/} <notifiable.div>{renderCount}</notifiable.div> </> }\n\nnotifiable component attributes is not only capable of accepting the Signal\ntype but also can receive Lambda\n\n> Lambda is a callback that's able to listen for changes in the signals it\n> depends on.\n    \n    \n    import {count} from \"./GlobalSignals.tsx\"; import {notifiable} from \"react-hook-signal\"; export function App() { return <> {/* When user click button it will update the state */} <button onClick={() => count.set(count.get() + 1)}>Click here</button> {/* Following line will get auto update when user click button*/} <notifiable.div>{() => { return <div>Count {count.get()}</div> }}</notifiable.div> </> }\n\n### STEP 2: Observing Signal Changes\n\n  * Use the useSignalEffect hook to listen for changes in Signal.\n  * This hook accepts a callback that reads the final signal value and can optionally return a cleanup function.\n\n#### Important Note:\n\n  * useSignalEffect doesn't automatically re-render the component. Use React.useState to trigger a re-render.\n\nExample:\n\n    \n    \n    import {count} from \"./GlobalSignals.tsx\"; import {useSignalEffect} from \"react-hook-signal\"; import {useState} from \"react\"; export function App() { const [countState,setCountState] = useState(count.get()) useSignalEffect(() => { // Here, within the useSignalEffect hook, I can listen for updates on any Signal.State or Signal.Computed setCountState(count.get()) }) return <div style={{display:'flex',flexDirection:'column',alignItems:'center'}}> {/* When user click button it will update the state */} <button onClick={() => count.set(count.get() + 1)}>Click here</button> {/* Following line will be updated because of countState updated*/} <div>{countState}</div> </div> }\n\n### STEP 3: Creating Signals in React Components:\n\n  * useSignal is a hook that creates Signal.State, and useComputed is a hook that creates Signal.Computed.\n\n  * These hooks generate signals that are linked to the component's lifecycle.\n\n  * To create a Signal.State, simply provide a constant value as a parameter when calling useSignal.\n\n  * To create a Signal.Computed,simply provide a Lambda that returns the result of a dynamic computation.\n\nExample :\n\n    \n    \n    import {notifiable, useSignal, useComputed} from \"react-hook-signal\"; export function App() { // creating Signal.State count const count = useSignal(0); // creating Signal.Computed countString const countString = useComputed(() => (count.get() * 2).toString()); // creating Signal.Computed style const style = useComputed(() => { const isEven = count.get() % 2 === 0; return { background: isEven ? 'white' : 'black', color: isEven ? 'black' : 'white' } }) // creating Signal.Computed text const text = useComputed(() => { const isWhite = style.get().background === 'white' return <div>{isWhite ? 'Background is White' : 'Background is Black'}</div> }) return <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}> {/* When user click button it will update the state */} <button onClick={() => count.set(count.get() + 1)}>Click here</button> {/* Following line will never get auto update*/} <div>{countString.get()}</div> {/* Following line will get auto update when user click button*/} <notifiable.div>{countString}</notifiable.div> {/* Following line will get auto update when user click button*/} <notifiable.div style={style}>{text}</notifiable.div> </div> }\n\n### STEP 4: Encapsulate any Component with a Notifiable :\n\n  * Use Notifiable component to wrap any React Functional or Class Component\n  * A React component encapsulated within the Notifiable component will inherently enable its properties and children to utilize Lambda expressions or Signals seamlessly\n\nExample :\n\n    \n    \n    import {Notifiable} from \"react-hook-signal\"; export function App() { const count = useSignal(0); return <div style={{display:'flex',flexDirection:'column',alignItems:'center'}}> {/* When user click button it will update the state */} <button onClick={() => count.set(count.get() + 1)}>Click here</button> {/* Following line will be updated because of count updated*/} <Notifiable component={MyComponent} title={() => { return count.get() + ' Times' }}></Notifiable> </div> } function MyComponent(props:{title:string}){ return <div>Here is the title {props.title}</div> }\n\n### Summary\n\nThe integration of Signal into the React application can be done in various\nways tailored to the needs and complexity of the app.\n\n## About\n\nNo description, website, or topics provided.\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Code of conduct\n\nCode of conduct\n\nActivity\n\n### Stars\n\n1 star\n\n### Watchers\n\n1 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * TypeScript 96.7%\n  * JavaScript 1.8%\n  * HTML 1.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
