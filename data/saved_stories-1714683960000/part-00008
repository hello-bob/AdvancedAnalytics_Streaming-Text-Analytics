{"aid": "40234854", "title": "Basic launched May 1 in 1964", "url": "https://en.wikipedia.org/wiki/BASIC", "domain": "wikipedia.org", "votes": 2, "user": "doener", "posted_at": "2024-05-02 11:17:26", "comments": 0, "source_title": "BASIC", "source_text": "BASIC - Wikipedia\n\nJump to content\n\nSearch\n\nWiki Loves Earth\n\nPhotograph nature for Wikipedia and win!\n\n# BASIC\n\n  * Afrikaans\n  * \u12a0\u121b\u122d\u129b\n  * \u0627\u0644\u0639\u0631\u0628\u064a\u0629\n  * Aragon\u00e9s\n  * Asturianu\n  * Az\u0259rbaycanca\n  * \u09ac\u09be\u0982\u09b2\u09be\n  * \u95a9\u5357\u8a9e / B\u00e2n-l\u00e2m-g\u00fa\n  * \u0411\u0430\u0448\u04a1\u043e\u0440\u0442\u0441\u0430\n  * \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f\n  * \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430)\n  * \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\n  * Bosanski\n  * Catal\u00e0\n  * \u010ce\u0161tina\n  * Corsu\n  * Dansk\n  * Deutsch\n  * Eesti\n  * \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\n  * Espa\u00f1ol\n  * Esperanto\n  * Euskara\n  * \u0641\u0627\u0631\u0633\u06cc\n  * Fran\u00e7ais\n  * Gaeilge\n  * Galego\n  * \ud55c\uad6d\uc5b4\n  * Hrvatski\n  * Ido\n  * Bahasa Indonesia\n  * Interlingua\n  * \u00cdslenska\n  * Italiano\n  * \u05e2\u05d1\u05e8\u05d9\u05ea\n  * \u0c95\u0ca8\u0ccd\u0ca8\u0ca1\n  * \u049a\u0430\u0437\u0430\u049b\u0448\u0430\n  * Kiswahili\n  * \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430\n  * Latina\n  * Latvie\u0161u\n  * Lietuvi\u0173\n  * Lombard\n  * Magyar\n  * \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438\n  * \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02\n  * \u092e\u0930\u093e\u0920\u0940\n  * Bahasa Melayu\n  * \u041c\u043e\u043d\u0433\u043e\u043b\n  * Nederlands\n  * \u0928\u0947\u092a\u093e\u0932\u0940\n  * \u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e\n  * \u65e5\u672c\u8a9e\n  * Norsk bokm\u00e5l\n  * Norsk nynorsk\n  * O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430\n  * \u067e\u0646\u062c\u0627\u0628\u06cc\n  * Polski\n  * Portugu\u00eas\n  * Rom\u00e2n\u0103\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * \u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430\n  * Shqip\n  * Simple English\n  * Sloven\u010dina\n  * Sloven\u0161\u010dina\n  * \u06a9\u0648\u0631\u062f\u06cc\n  * \u0421\u0440\u043f\u0441\u043a\u0438 / srpski\n  * Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438\n  * Suomi\n  * Svenska\n  * Tagalog\n  * \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\n  * Taqbaylit\n  * \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41\n  * \u0e44\u0e17\u0e22\n  * \u0422\u043e\u04b7\u0438\u043a\u04e3\n  * T\u00fcrk\u00e7e\n  * \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n  * Ti\u1ebfng Vi\u1ec7t\n  * \u6587\u8a00\n  * \u5434\u8bed\n  * \u7cb5\u8a9e\n  * \u017demait\u0117\u0161ka\n  * \u4e2d\u6587\n\nEdit links\n\nFrom Wikipedia, the free encyclopedia\n\nFamily of programming languages\n\nFor other uses, see BASIC (disambiguation).\n\nBASICAtari BASIC (1979) for the Atari 8-bit family  \n---  \nParadigm| Non-structured, later procedural, later object-oriented  \nDesigned by|\n\n  * John G. Kemeny\n  * Thomas E. Kurtz\n\n  \nFirst appeared| May 1, 1964; 60 years ago (1964-05-01)  \nMajor implementations  \n  \n  * Dartmouth BASIC\n  * Tiny BASIC\n  * Applesoft BASIC\n  * Atari BASIC\n  * Sinclair BASIC\n  * Commodore BASIC\n  * BBC BASIC\n  * TI-BASIC\n  * Casio BASIC\n  * Microsoft BASIC\n  * QB64\n  * FreeBASIC\n  * Liberty BASIC\n  * PowerBASIC\n  * QuickBASIC\n\n  \nInfluenced by  \n  \n  * ALGOL 60\n  * FORTRAN II\n  * JOSS\n\n  \nInfluenced  \n  \n  * COMAL\n  * Visual Basic\n  * Visual Basic .NET\n  * GRASS\n  * Xojo\n\n  \n  \n  * BASIC Programming at Wikibooks\n\n  \n  \nBASIC (Beginners' All-purpose Symbolic Instruction Code)^[1] is a family of\ngeneral-purpose, high-level programming languages designed for ease of use.\nThe original version was created by John G. Kemeny and Thomas E. Kurtz at\nDartmouth College in 1963. They wanted to enable students in non-scientific\nfields to use computers. At the time, nearly all computers required writing\ncustom software, which only scientists and mathematicians tended to learn.\n\nIn addition to the programming language, Kemeny and Kurtz developed the\nDartmouth Time Sharing System (DTSS), which allowed multiple users to edit and\nrun BASIC programs simultaneously on remote terminals. This general model\nbecame popular on minicomputer systems like the PDP-11 and Data General Nova\nin the late 1960s and early 1970s. Hewlett-Packard produced an entire computer\nline for this method of operation, introducing the HP2000 series in the late\n1960s and continuing sales into the 1980s. Many early video games trace their\nhistory to one of these versions of BASIC.\n\nThe emergence of microcomputers in the mid-1970s led to the development of\nmultiple BASIC dialects, including Microsoft BASIC in 1975. Due to the tiny\nmain memory available on these machines, often 4 KB, a variety of Tiny BASIC\ndialects were also created. BASIC was available for almost any system of the\nera, and became the de facto programming language for home computer systems\nthat emerged in the late 1970s. These PCs almost always had a BASIC\ninterpreter installed by default, often in the machine's firmware or sometimes\non a ROM cartridge.\n\nBASIC declined in popularity in the 1990s, as more powerful microcomputers\ncame to market and programming languages with advanced features (such as\nPascal and C) became tenable on such computers. By then, most nontechnical\npersonal computer users relied on pre-written applications rather than writing\ntheir own programs. In 1991, Microsoft released Visual Basic, combining an\nupdated version of BASIC with a visual forms builder. This reignited use of\nthe language and \"VB\" remains a major programming language^[2]^[3] in the form\nof VB.NET, while a hobbyist scene for BASIC more broadly continues to\nexist.^[4]^[5]\n\n## Origin[edit]\n\nJohn G. Kemeny was the chairman of the Dartmouth College Mathematics\nDepartment. Based largely on his reputation as an innovator in math teaching,\nin 1959 the College won an Alfred P. Sloan Foundation award for $500,000 to\nbuild a new department building.^[6] Thomas E. Kurtz had joined the department\nin 1956, and from the 1960s Kemeny and Kurtz agreed on the need for\nprogramming literacy among students outside the traditional STEM fields.\nKemeny later noted that \"Our vision was that every student on campus should\nhave access to a computer, and any faculty member should be able to use a\ncomputer in the classroom whenever appropriate. It was as simple as that.\"^[7]\n\nKemeny and Kurtz had made two previous experiments with simplified languages,\nDARSIMCO (Dartmouth Simplified Code) and DOPE (Dartmouth Oversimplified\nProgramming Experiment). These did not progress past a single freshman class.\nNew experiments using Fortran and ALGOL followed, but Kurtz concluded these\nlanguages were too tricky for what they desired. As Kurtz noted, Fortran had\nnumerous oddly formed commands, notably an \"almost impossible-to-memorize\nconvention for specifying a loop: DO 100, I = 1, 10, 2. Is it '1, 10, 2' or\n'1, 2, 10', and is the comma after the line number required or not?\"^[7]\n\nMoreover, the lack of any sort of immediate feedback was a key problem; the\nmachines of the era used batch processing and took a long time to complete a\nrun of a program. While Kurtz was visiting MIT, John McCarthy suggested that\ntime-sharing offered a solution; a single machine could divide up its\nprocessing time among many users, giving them the illusion of having a (slow)\ncomputer to themselves.^[8] Small programs would return results in a few\nseconds. This led to increasing interest in a system using time-sharing and a\nnew language specifically for use by non-STEM students.^[7]\n\nKemeny wrote the first version of BASIC. The acronym BASIC comes from the name\nof an unpublished paper by Thomas Kurtz.^[9] The new language was heavily\npatterned on FORTRAN II; statements were one-to-a-line, numbers were used to\nindicate the target of loops and branches, and many of the commands were\nsimilar or identical to Fortran. However, the syntax was changed wherever it\ncould be improved. For instance, the difficult to remember DO loop was\nreplaced by the much easier to remember FOR I = 1 TO 10 STEP 2, and the line\nnumber used in the DO was instead indicated by the NEXT I.^[a] Likewise, the\ncryptic IF statement of Fortran, whose syntax matched a particular instruction\nof the machine on which it was originally written, became the simpler IF I=5\nTHEN GOTO 100. These changes made the language much less idiosyncratic while\nstill having an overall structure and feel similar to the original\nFORTRAN.^[7]\n\nThe project received a $300,000 grant from the National Science Foundation,\nwhich was used to purchase a GE-225 computer for processing, and a Datanet-30\nrealtime processor to handle the Teletype Model 33 teleprinters used for input\nand output. A team of a dozen undergraduates worked on the project for about a\nyear, writing both the DTSS system and the BASIC compiler.^[7] The first\nversion BASIC language was released on 1 May 1964.^[10]^[11]\n\nInitially, BASIC concentrated on supporting straightforward mathematical work,\nwith matrix arithmetic support from its initial implementation as a batch\nlanguage, and character string functionality being added by 1965. Usage in the\nuniversity rapidly expanded, requiring the main CPU to be replaced by a\nGE-235,^[7] and still later by a GE-635. By the early 1970s there were\nhundreds of terminals connected to the machines at Dartmouth, some of them\nremotely.\n\nWanting use of the language to become widespread, its designers made the\ncompiler available free of charge. In the 1960s, software became a chargeable\ncommodity; until then, it was provided without charge as a service with\nexpensive computers, usually available only to lease. They also made it\navailable to high schools in the Hanover, New Hampshire, area and regionally\nthroughout New England on Teletype Model 33 and Model 35 teleprinter terminals\nconnected to Dartmouth via dial-up phone lines, and they put considerable\neffort into promoting the language. In the following years, as other dialects\nof BASIC appeared, Kemeny and Kurtz's original BASIC dialect became known as\nDartmouth BASIC.\n\nNew Hampshire recognized the accomplishment in 2019 when it erected a highway\nhistorical marker in Hanover describing the creation of \"the first user-\nfriendly programming language\".^[12]\n\n## Spread on time-sharing services[edit]\n\nThe emergence of BASIC took place as part of a wider movement toward time-\nsharing systems. First conceptualized during the late 1950s, the idea became\nso dominant in the computer industry by the early 1960s that its proponents\nwere speaking of a future in which users would \"buy time on the computer much\nthe same way that the average household buys power and water from utility\ncompanies\".^[13]\n\nGeneral Electric, having worked on the Dartmouth project, wrote their own\nunderlying operating system and launched an online time-sharing system known\nas Mark I. It featured BASIC as one of its primary selling points. Other\ncompanies in the emerging field quickly followed suit; Tymshare introduced\nSUPER BASIC in 1968, CompuServe had a version on the DEC-10 at their launch in\n1969, and by the early 1970s BASIC was largely universal on general-purpose\nmainframe computers. Even IBM eventually joined the club with the introduction\nof VS-BASIC in 1973.^[14]\n\nAlthough time-sharing services with BASIC were successful for a time, the\nwidespread success predicted earlier was not to be. The emergence of\nminicomputers during the same period, and especially low-cost microcomputers\nin the mid-1970s, allowed anyone to purchase and run their own systems rather\nthan buy online time which was typically billed at dollars per\nminute.^[b]^[15]\n\n## Spread on minicomputers[edit]\n\nThe HP 2000 system was designed to run time-shared BASIC as its primary task.\n\nBASIC, by its very nature of being small, was naturally suited to porting to\nthe minicomputer market, which was emerging at the same time as the time-\nsharing services. These machines had small main memory, perhaps as little as 4\nKB in modern terminology,^[c] and lacked high-performance storage like hard\ndrives that make compilers practical. On these systems, BASIC was normally\nimplemented as an interpreter rather than a compiler due to its lower\nrequirement for working memory.^[d]\n\nA particularly important example was HP Time-Shared BASIC, which, like the\noriginal Dartmouth system, used two computers working together to implement a\ntime-sharing system. The first, a low-end machine in the HP 2100 series, was\nused to control user input and save and load their programs to tape or disk.\nThe other, a high-end version of the same underlying machine, ran the programs\nand generated output. For a cost of about $100,000, one could own a machine\ncapable of running between 16 and 32 users at the same time.^[16] The system,\nbundled as the HP 2000, was the first mini platform to offer time-sharing and\nwas an immediate runaway success, catapulting HP to become the third-largest\nvendor in the minicomputer space, behind DEC and Data General (DG).^[17]\n\nDEC, the leader in the minicomputer space since the mid-1960s, had initially\nignored BASIC. This was due to their work with RAND Corporation, who had\npurchased a PDP-6 to run their JOSS language, which was conceptually very\nsimilar to BASIC.^[18] This led DEC to introduce a smaller, cleaned up version\nof JOSS known as FOCAL, which they heavily promoted in the late 1960s.\nHowever, with timesharing systems widely offering BASIC, and all of their\ncompetition in the minicomputer space doing the same, DEC's customers were\nclamoring for BASIC. After management repeatedly ignored their pleas, David H.\nAhl took it upon himself to buy a BASIC for the PDP-8, which was a major\nsuccess in the education market. By the early 1970s, FOCAL and JOSS had been\nforgotten and BASIC had become almost universal in the minicomputer\nmarket.^[19] DEC would go on to introduce their updated version, BASIC-PLUS,\nfor use on the RSTS/E time-sharing operating system.\n\nDuring this period a number of simple text-based games were written in BASIC,\nmost notably Mike Mayfield's Star Trek. David Ahl collected these, some ported\nfrom FOCAL, and published them in an educational newsletter he compiled. He\nlater collected a number of these into book form, 101 BASIC Computer Games,\npublished in 1973.^[20] During the same period, Ahl was involved in the\ncreation of a small computer for education use, an early personal computer.\nWhen management refused to support the concept, Ahl left DEC in 1974 to found\nthe seminal computer magazine, Creative Computing. The book remained popular,\nand was re-published on several occasions.^[21]\n\n## Explosive growth: the home computer era[edit]\n\nSee also: List of computers with on-board BASIC\n\nCommodore BASIC v2.0 on the Commodore 64MSX BASIC version 3.0\"Train Basic\nevery day!\"\u2014reads a poster (bottom center) in a Russian school (c. 1985\u20131986)\n\nThe introduction of the first microcomputers in the mid-1970s was the start of\nexplosive growth for BASIC. It had the advantage that it was fairly well known\nto the young designers and computer hobbyists who took an interest in\nmicrocomputers, many of whom had seen BASIC on minis or mainframes. Despite\nDijkstra's famous judgement in 1975, \"It is practically impossible to teach\ngood programming to students that have had a prior exposure to BASIC: as\npotential programmers they are mentally mutilated beyond hope of\nregeneration\",^[22] BASIC was one of the few languages that was both high-\nlevel enough to be usable by those without training and small enough to fit\ninto the microcomputers of the day, making it the de facto standard\nprogramming language on early microcomputers.\n\nThe first microcomputer version of BASIC was co-written by Bill Gates, Paul\nAllen and Monte Davidoff for their newly formed company, Micro-Soft.^[23] This\nwas released by MITS in punch tape format for the Altair 8800 shortly after\nthe machine itself,^[24] immediately cementing BASIC as the primary language\nof early microcomputers. Members of the Homebrew Computer Club began\ncirculating copies of the program, causing Gates to write his Open Letter to\nHobbyists, complaining about this early example of software piracy.\n\nPartially in response to Gates's letter, and partially to make an even smaller\nBASIC that would run usefully on 4 KB machines,^[e] Bob Albrecht urged Dennis\nAllison to write their own variation of the language. How to design and\nimplement a stripped-down version of an interpreter for the BASIC language was\ncovered in articles by Allison in the first three quarterly issues of the\nPeople's Computer Company newsletter published in 1975 and implementations\nwith source code published in Dr. Dobb's Journal of Tiny BASIC Calisthenics &\nOrthodontia: Running Light Without Overbyte. This led to a wide variety of\nTiny BASICs with added features or other improvements, with versions from Tom\nPittman and Li-Chen Wang becoming particularly well known.^[25]\n\nMicro-Soft, by this time Microsoft, ported their interpreter for the MOS 6502,\nwhich quickly become one of the most popular microprocessors of the 8-bit era.\nWhen new microcomputers began to appear, notably the \"1977 trinity\" of the\nTRS-80, Commodore PET and Apple II, they either included a version of the MS\ncode, or quickly introduced new models with it. Ohio Scientific's personal\ncomputers also joined this trend at that time. By 1978, MS BASIC was a de\nfacto standard and practically every home computer of the 1980s included it in\nROM. Upon boot, a BASIC interpreter in direct mode was presented.\n\nCommodore Business Machines included Commodore BASIC, based on Microsoft\nBASIC. The Apple II and TRS-80 each had two versions of BASIC, a smaller\nintroductory version introduced with the initial releases of the machines and\nan MS-based version introduced as interest in the platforms increased. As new\ncompanies entered the field, additional versions were added that subtly\nchanged the BASIC family. The Atari 8-bit family had its own Atari BASIC that\nwas modified in order to fit on an 8 KB ROM cartridge. Sinclair BASIC was\nintroduced in 1980 with the Sinclair ZX80, and was later extended for the\nSinclair ZX81 and the Sinclair ZX Spectrum. The BBC published BBC BASIC,\ndeveloped by Acorn Computers Ltd, incorporating many extra structured\nprogramming keywords and advanced floating-point operation features.\n\nAs the popularity of BASIC grew in this period, computer magazines published\ncomplete source code in BASIC for video games, utilities, and other programs.\nGiven BASIC's straightforward nature, it was a simple matter to type in the\ncode from the magazine and execute the program. Different magazines were\npublished featuring programs for specific computers, though some BASIC\nprograms were considered universal and could be used in machines running any\nvariant of BASIC (sometimes with minor adaptations). Many books of type-in\nprograms were also available, and in particular, Ahl published versions of the\noriginal 101 BASIC games converted into the Microsoft dialect and published it\nfrom Creative Computing as BASIC Computer Games. This book, and its sequels,\nprovided hundreds of ready-to-go programs that could be easily converted to\npractically any BASIC-running platform.^[20]^[26]^[27] The book reached the\nstores in 1978, just as the home computer market was starting off, and it\nbecame the first million-selling computer book. Later packages, such as Learn\nto Program BASIC would also have gaming as an introductory focus. On the\nbusiness-focused CP/M computers which soon became widespread in small business\nenvironments, Microsoft BASIC (MBASIC) was one of the leading\napplications.^[28]\n\nIn 1978, David Lien published the first edition of The BASIC Handbook: An\nEncyclopedia of the BASIC Computer Language, documenting keywords across over\n78 different computers. By 1981, the second edition documented keywords from\nover 250 different computers, showcasing the explosive growth of the\nmicrocomputer era.^[29]\n\n## IBM PC and compatibles[edit]\n\nIBM Cassette BASIC 1.10\n\nWhen IBM was designing the IBM PC, they followed the paradigm of existing home\ncomputers in having a built-in BASIC interpreter. They sourced this from\nMicrosoft \u2013 IBM Cassette BASIC \u2013 but Microsoft also produced several other\nversions of BASIC for MS-DOS/PC DOS including IBM Disk BASIC (BASIC D), IBM\nBASICA (BASIC A), GW-BASIC (a BASICA-compatible version that did not need\nIBM's ROM)^[30] and QBasic, all typically bundled with the machine. In\naddition they produced the Microsoft BASIC Compiler aimed at professional\nprogrammers. Turbo Pascal-publisher Borland published Turbo Basic 1.0 in 1985\n(successor versions are still being marketed under the name PowerBASIC). On\nUnix-like systems, specialized implementations were created such as XBasic and\nX11-Basic.^[31] XBasic was ported to Microsoft Windows as XBLite, and cross-\nplatform variants such as SmallBasic, yabasic, Bywater BASIC,^[32]^[33]\nnuBasic,^[34] MyBasic,^[35] Logic Basic,^[36] Liberty BASIC, and wxBasic\nemerged. FutureBASIC and Chipmunk Basic meanwhile targeted the Apple\nMacintosh, while yab is a version of yaBasic optimized for BeOS, ZETA and\nHaiku.^[37]\n\nThese later variations introduced many extensions, such as improved string\nmanipulation and graphics support, access to the file system and additional\ndata types. More important were the facilities for structured programming,\nincluding additional control structures and proper subroutines supporting\nlocal variables.^[38] However, by the latter half of the 1980s, users were\nincreasingly using pre-made applications written by others rather than\nlearning programming themselves; while professional programmers now had a wide\nrange of more advanced languages available on small computers. C and later C++\nbecame the languages of choice for professional \"shrink wrap\" application\ndevelopment.^[39]^[40]\n\nA niche that BASIC continued to fill was for hobbyist video game development,\nas game creation systems and readily available game engines were still in\ntheir infancy. The Atari ST had STOS BASIC while the Amiga had AMOS BASIC for\nthis purpose. Microsoft first exhibited BASIC for game development with\nDONKEY.BAS for GW-BASIC, and later GORILLA.BAS and NIBBLES.BAS for QuickBASIC.\nQBasic maintained an active game development community,^[41]^[42] which helped\nlater spawn the QB64 and FreeBASIC implementations.^[43] In 2013 a game\nwritten in QBasic and compiled with QB64 for modern computers entitled Black\nAnnex was released on Steam.^[44]^[45] Blitz Basic, Dark Basic, SdlBasic,\nSuper Game System Basic,^[46] PlayBASIC,^[47] CoolBasic,^[48]\nAllegroBASIC,^[49] ethosBASIC,^[50] GLBasic and Basic4GL further filled this\ndemand, right up to the modern RCBasic,^[51] NaaLaa,^[52] AppGameKit,^[53]\nMonkey 2 and Cerberus-X.^[54]\n\n## Visual Basic[edit]\n\nMain article: Visual Basic (classic)\n\nIn 1991, Microsoft introduced Visual Basic, an evolutionary development of\nQuickBASIC. It included constructs from that language such as block-structured\ncontrol statements, parameterized subroutines and optional static typing as\nwell as object-oriented constructs from other languages such as \"With\" and\n\"For Each\". The language retained some compatibility with its predecessors,\nsuch as the Dim keyword for declarations, \"Gosub\"/Return statements and\noptional line numbers which could be used to locate errors. An important\ndriver for the development of Visual Basic was as the new macro language for\nMicrosoft Excel, a spreadsheet program. To the surprise of many at Microsoft\nwho still initially marketed it as a language for hobbyists, the language came\ninto widespread use for small custom business applications shortly after the\nrelease of VB version 3.0, which is widely considered the first relatively\nstable version. Microsoft also spun it off as Visual Basic for Applications\nand Embedded Visual Basic.\n\nWhile many advanced programmers still scoffed at its use, VB met the needs of\nsmall businesses efficiently as by that time, computers running Windows 3.1\nhad become fast enough that many business-related processes could be completed\n\"in the blink of an eye\" even using a \"slow\" language, as long as large\namounts of data were not involved. Many small business owners found they could\ncreate their own small, yet useful applications in a few evenings to meet\ntheir own specialized needs. Eventually, during the lengthy lifetime of VB3,\nknowledge of Visual Basic had become a marketable job skill. Microsoft also\nproduced VBScript in 1996 and Visual Basic .NET in 2001. The latter has\nessentially the same power as C# and Java but with syntax that reflects the\noriginal Basic language, and also features some cross-platform capability\nthrough implementations such as Mono-Basic.^[55] The IDE, with its event-\ndriven GUI builder, was also influential on other rapid application\ndevelopment tools, most notably Borland Software's Delphi for Object Pascal\nand its own descendants such as Lazarus.^[56]^[57]\n\nMainstream support for the final version 6.0 of the original Visual Basic\nended on March 31, 2005, followed by extended support in March 2008.^[58]\nOwing to its persistent remaining popularity,^[59] third-party attempts to\nfurther support it, such as Rubberduck and ModernVB, exist.^[60] On February\n2, 2017 Microsoft announced that development on VB.NET would no longer be in\nparallel with that of C#,^[61] and on March 11, 2020 it was announced that\nevolution of the VB.NET language had also concluded.^[62] Even so, the\nlanguage was still supported^[63] and the third-party Mercury extension has\nsince been produced.^[64] Meanwhile, competitors exist such as B4X,^[65] RAD\nBasic,^[66] twinBASIC,^[67] VisualFBEditor,^[68] InForm,^[69] Xojo,^[70] and\nGambas.^[71]\n\nThree modern Basic variants: Mono Basic, OpenOffice.org Basic and Gambas\n\n## Post-1990 versions and dialects[edit]\n\nMany other BASIC dialects have also sprung up since 1990, including the open\nsource QB64 and FreeBASIC, inspired by QBasic, and the Visual Basic-styled\nRapidQ, HBasic, Basic For Qt and Gambas.^[72] Modern commercial incarnations\ninclude PureBasic, PowerBASIC, Xojo, Monkey X and True BASIC (the direct\nsuccessor to Dartmouth BASIC from a company controlled by Kurtz).\n\nSeveral web-based simple BASIC interpreters also now exist, including Quite\nBasic by Nikko Strom,^[73] as well as Microsoft's Small Basic and Google's\nwwwBASIC.^[74] A number of compilers also exist that convert BASIC into\nJavaScript,^[75] such as JSBasic which re-implements Applesoft BASIC,^[76]\nSpider BASIC,^[77] and NS Basic.\n\nBuilding from earlier efforts such as Mobile Basic and\nCellularBASIC,^[78]^[79] many dialects are now available for smartphones and\ntablets. Through the Apple App Store for iOS options include Hand BASIC,^[80]\nLearn BASIC,^[81] Smart Basic based on Minimal BASIC,^[82] Basic! by\nmiSoft,^[83] and BASIC by Anastasia Kovba.^[84] The Google Play store for\nAndroid meanwhile has the touchscreen focused Touch Basic,^[85] B4A, the RFO\nBASIC!^[f] interpreter based on Dartmouth Basic,^[86] and adaptations of\nSmallBasic, BBC Basic, Tiny Basic, X11-Basic,^[87] and NS Basic.\n\nOn game consoles, an application for the Nintendo 3DS and Nintendo DSi called\nPetit Computer allows for programming in a slightly modified version of BASIC\nwith DS button support. A version has also been released for Nintendo Switch,\nwhich has also been supplied a version of the Fuze Code System,^[88] a BASIC\nvariant^[89] first implemented as a custom Raspberry Pi machine.^[90]\nPreviously BASIC was made available on consoles as Family BASIC (for the\nNintendo Famicom) and PSX Chipmunk Basic (for the original PlayStation), while\nyabasic was ported to the PlayStation 2 and FreeBASIC to the original Xbox.\nDragon BASIC was created for homebrew on the Game Boy Advance and Nintendo\nDS,^[91] with NEXTBasic,^[92] BasiEgaXorz^[93] and SecondBASIC^[94] being\ncreated for the Sega Genesis.\n\n## Calculators[edit]\n\nVariants of BASIC are available on graphing and otherwise programmable\ncalculators made by Texas Instruments (TI-BASIC), HP (HP BASIC), Casio (Casio\nBASIC), and others.\n\n## Windows command-line[edit]\n\nQBasic, a version of Microsoft QuickBASIC without the linker to make EXE\nfiles, is present in the Windows NT and DOS-Windows 95 streams of operating\nsystems and can be obtained for more recent releases like Windows 7 which do\nnot have them. Prior to DOS 5, the Basic interpreter was GW-Basic. QuickBasic\nis part of a series of three languages issued by Microsoft for the home and\noffice power user and small-scale professional development; QuickC and\nQuickPascal are the other two. For Windows 95 and 98, which do not have QBasic\ninstalled by default, they can be copied from the installation disc, which\nwill have a set of directories for old and optional software; other missing\ncommands like Exe2Bin and others are in these same directories.\n\n## Other[edit]\n\nBASIC came to some video game systems, such as the Nintendo Famicom.\n\nThe various Microsoft, Lotus, and Corel office suites and related products are\nprogrammable with Visual Basic in one form or another, including LotusScript,\nwhich is very similar to VBA 6. The Host Explorer terminal emulator uses WWB\nas a macro language; or more recently the programme and the suite in which it\nis contained is programmable in an in-house Basic variant known as Hummingbird\nBasic. The VBScript variant is used for programming web content, Outlook 97,\nInternet Explorer, and the Windows Script Host. WSH also has a Visual Basic\nfor Applications (VBA) engine installed as the third of the default engines\nalong with VBScript, JScript, and the numerous proprietary or open source\nengines which can be installed like PerlScript, a couple of Rexx-based\nengines, Python, Ruby, Tcl, Delphi, XLNT, PHP, and others; meaning that the\ntwo versions of Basic can be used along with the other mentioned languages, as\nwell as LotusScript, in a WSF file, through the component object model, and\nother WSH and VBA constructions. VBScript is one of the languages that can be\naccessed by the 4Dos, 4NT, and Take Command enhanced shells. SaxBasic and WWB\nare also very similar to the Visual Basic line of Basic implementations. The\npre-Office 97 macro language for Microsoft Word is known as WordBASIC. Excel 4\nand 5 use Visual Basic itself as a macro language. Chipmunk Basic, an old-\nschool interpreter similar to BASICs of the 1970s, is available for Linux,\nMicrosoft Windows and macOS.\n\n## Legacy[edit]\n\nThe ubiquity of BASIC interpreters on personal computers was such that\ntextbooks once included simple \"Try It In BASIC\" exercises that encouraged\nstudents to experiment with mathematical and computational concepts on\nclassroom or home computers. Popular computer magazines of the day typically\nincluded type-in programs.\n\nFuturist and sci-fi writer David Brin mourned the loss of ubiquitous BASIC in\na 2006 Salon article^[95] as have others who first used computers during this\nera. In turn, the article prompted Microsoft to develop and release Small\nBasic;^[96] it also inspired similar projects like Basic-256^[97]^[98] and the\nweb based Quite Basic.^[99] Dartmouth held a 50th anniversary celebration for\nBASIC on 1 May 2014,^[100] as did other organisations; at least one\norganisation of VBA programmers organised a 35th anniversary observance in\n1999.^[101]^[better source needed] The pedagogical use of BASIC has been\nfollowed by other languages, such as Pascal, Java and particularly\nPython.^[102]\n\nDartmouth College celebrated the 50th anniversary of the BASIC language with a\nday of events^[103] on April 30, 2014. A short documentary film was produced\nfor the event.^[104]\n\n## Syntax[edit]\n\n### Typical BASIC keywords[edit]\n\n#### Data manipulation[edit]\n\nLET\n\n    assigns a value (which may be the result of an expression) to a variable. In most dialects of BASIC, LET is optional, and a line with no other identifiable keyword will assume the keyword to be LET.\nDATA\n\n    holds a list of values which are assigned sequentially using the READ command.\nREAD\n\n    reads a value from a DATA statement and assigns it to a variable. An internal pointer keeps track of the last DATA element that was read and moves it one position forward with each READ. Most dialects allow multiple variables as parameters, reading several values in a single operation.\nRESTORE\n\n    resets the internal pointer to the first DATA statement, allowing the program to begin READing from the first value. Many dialects allow an optional line number or ordinal value to allow the pointer to be reset to a selected location.\nDIM\n\n    Sets up an array.\n\n#### Program flow control[edit]\n\nIF ... THEN ... {ELSE}\n\n    used to perform comparisons or make decisions. Early dialects only allowed a line number after the THEN, but later versions allowed any valid statement to follow. ELSE was not widely supported, especially in earlier versions.\nFOR ... TO ... {STEP} ... NEXT\n\n    repeat a section of code a given number of times. A variable that acts as a counter, the \"index\", is available within the loop.\nWHILE ... WEND and REPEAT ... UNTIL\n\n    repeat a section of code while the specified condition is true. The condition may be evaluated before each iteration of the loop, or after. Both of these commands are found mostly in later dialects.\nDO ... LOOP {WHILE} or {UNTIL}\n\n    repeat a section of code indefinitely or while/until the specified condition is true. The condition may be evaluated before each iteration of the loop, or after. Similar to WHILE, these keywords are mostly found in later dialects.\nGOTO\n\n    jumps to a numbered or labelled line in the program. Most dialects also allowed the form GO TO.\nGOSUB ... RETURN\n\n    jumps to a numbered or labelled line, executes the code it finds there until it reaches a RETURN command, on which it jumps back to the statement following the GOSUB, either after a colon, or on the next line. This is used to implement subroutines.\nON ... GOTO/GOSUB\n\n    chooses where to jump based on the specified conditions. See Switch statement for other forms.\nDEF FN\n\n    a pair of keywords introduced in the early 1960s to define functions. The original BASIC functions were modelled on FORTRAN single-line functions. BASIC functions were one expression with variable arguments, rather than subroutines, with a syntax on the model of DEF FND(x) = x*x at the beginning of a program. Function names were originally restricted to FN, plus one letter, i.e., FNA, FNB ...\n\n#### Input and output[edit]\n\nLIST\n\n    displays the full source code of the current program.\nPRINT\n\n    displays a message on the screen or other output device.\nINPUT\n\n    asks the user to enter the value of a variable. The statement may include a prompt message.\nTAB\n\n    used with PRINT to set the position where the next character will be shown on the screen or printed on paper. AT is an alternative form.\nSPC\n\n    prints out a number of space characters. Similar in concept to TAB but moves by a number of additional spaces from the current column rather than moving to a specified column.\n\n#### Mathematical functions[edit]\n\nABS\n\n    Absolute value\nATN\n\n    Arctangent (result in radians)\nCOS\n\n    Cosine (argument in radians)\nEXP\n\n    Exponential function\nINT\n\n    Integer part (typically floor function)\nLOG\n\n    Natural logarithm\nRND\n\n    Random number generation\nSIN\n\n    Sine (argument in radians)\nSQR\n\n    Square root\nTAN\n\n    Tangent (argument in radians)\n\n#### Miscellaneous[edit]\n\nREM\n\n    holds a programmer's comment or REMark; often used to give a title to the program and to help identify the purpose of a given section of code.\nUSR (\"User Serviceable Routine\")\n\n    transfers program control to a machine language subroutine, usually entered as an alphanumeric string or in a list of DATA statements.\nCALL\n\n    alternative form of USR found in some dialects. Does not require an artificial parameter to complete the function-like syntax of USR, and has a clearly defined method of calling different routines in memory.\nTRON / TROFF\n\n    turns on display of each line number as it is run (\"TRace ON\"). This was useful for debugging or correcting of problems in a program. TROFF turns it back off again.\nASM\n\n    some compilers such as Freebasic,^[105] Purebasic,^[106] and Powerbasic^[107] also support inline assembly language, allowing the programmer to intermix high-level and low-level code, typically prefixed with \"ASM\" or \"!\" statements.\n\n### Data types and variables[edit]\n\nMinimal versions of BASIC had only integer variables and one- or two-letter\nvariable names, which minimized requirements of limited and expensive memory\n(RAM). More powerful versions had floating-point arithmetic, and variables\ncould be labelled with names six or more characters long. There were some\nproblems and restrictions in early implementations; for example, Applesoft\nBASIC allowed variable names to be several characters long, but only the first\ntwo were significant, thus it was possible to inadvertently write a program\nwith variables \"LOSS\" and \"LOAN\", which would be treated as being the same;\nassigning a value to \"LOAN\" would silently overwrite the value intended as\n\"LOSS\". Keywords could not be used in variables in many early BASICs; \"SCORE\"\nwould be interpreted as \"SC\" OR \"E\", where OR was a keyword. String variables\nare usually distinguished in many microcomputer dialects by having $ suffixed\nto their name as a sigil, and values are often identified as strings by being\ndelimited by \"double quotation marks\". Arrays in BASIC could contain integers,\nfloating point or string variables.\n\nSome dialects of BASIC supported matrices and matrix operations, which can be\nused to solve sets of simultaneous linear algebraic equations. These dialects\nwould directly support matrix operations such as assignment, addition,\nmultiplication (of compatible matrix types), and evaluation of a determinant.\nMany microcomputer BASICs did not support this data type; matrix operations\nwere still possible, but had to be programmed explicitly on array elements.\n\n### Examples[edit]\n\nA simple game implemented in BASIC\n\n#### Unstructured BASIC[edit]\n\nNew BASIC programmers on a home computer might start with a simple program,\nperhaps using the language's PRINT statement to display a message on the\nscreen; a well-known and often-replicated example is Kernighan and Ritchie's\n\"Hello, World!\" program:\n\n    \n    \n    10 PRINT \"Hello, World!\" 20 END\n\nAn infinite loop could be used to fill the display with the message:\n\n    \n    \n    10 PRINT \"Hello, World!\" 20 GOTO 10\n\nNote that the END statement is optional and has no action in most dialects of\nBASIC. It was not always included, as is the case in this example. This same\nprogram can be modified to print a fixed number of messages using the common\nFOR...NEXT statement:\n\n    \n    \n    10 LET N=10 20 FOR I=1 TO N 30 PRINT \"Hello, World!\" 40 NEXT I\n\nMost home computers BASIC versions, such as MSX BASIC and GW-BASIC, supported\nsimple data types, loop cycles, and arrays. The following example is written\nfor GW-BASIC, but will work in most versions of BASIC with minimal changes:\n\n    \n    \n    10 INPUT \"What is your name: \"; U$ 20 PRINT \"Hello \"; U$ 30 INPUT \"How many stars do you want: \"; N 40 S$ = \"\" 50 FOR I = 1 TO N 60 S$ = S$ + \"*\" 70 NEXT I 80 PRINT S$ 90 INPUT \"Do you want more stars? \"; A$ 100 IF LEN(A$) = 0 THEN GOTO 90 110 A$ = LEFT$(A$, 1) 120 IF A$ = \"Y\" OR A$ = \"y\" THEN GOTO 30 130 PRINT \"Goodbye \"; U$ 140 END\n\nThe resulting dialog might resemble:\n\n    \n    \n    What is your name: Mike Hello Mike How many stars do you want: 7 ******* Do you want more stars? yes How many stars do you want: 3 *** Do you want more stars? no Goodbye Mike\n\nThe original Dartmouth Basic was unusual in having a matrix keyword, MAT.^[g]\nAlthough not implemented by most later microprocessor derivatives, it is used\nin this example from the 1968 manual^[108] which averages the numbers that are\ninput:\n\n    \n    \n    5 LET S = 0 10 MAT INPUT V 20 LET N = NUM 30 IF N = 0 THEN 99 40 FOR I = 1 TO N 45 LET S = S + V(I) 50 NEXT I 60 PRINT S/N 70 GO TO 5 99 END\n\n#### Structured BASIC[edit]\n\nSecond-generation BASICs (for example, VAX Basic, SuperBASIC, True BASIC,\nQuickBASIC, BBC BASIC, Pick BASIC, PowerBASIC, Liberty BASIC, QB64 and\n(arguably) COMAL) introduced a number of features into the language, primarily\nrelated to structured and procedure-oriented programming. Usually, line\nnumbering is omitted from the language and replaced with labels (for GOTO) and\nprocedures to encourage easier and more flexible design.^[38] In addition\nkeywords and structures to support repetition, selection and procedures with\nlocal variables were introduced.\n\nThe following example is in Microsoft QuickBASIC:\n\n    \n    \n    REM QuickBASIC example REM Forward declaration - allows the main code to call a REM subroutine that is defined later in the source code DECLARE SUB PrintSomeStars (StarCount!) REM Main program follows INPUT \"What is your name: \", UserName$ PRINT \"Hello \"; UserName$ DO INPUT \"How many stars do you want: \", NumStars CALL PrintSomeStars(NumStars) DO INPUT \"Do you want more stars? \", Answer$ LOOP UNTIL Answer$ <> \"\" Answer$ = LEFT$(Answer$, 1) LOOP WHILE UCASE$(Answer$) = \"Y\" PRINT \"Goodbye \"; UserName$ END REM subroutine definition SUB PrintSomeStars (StarCount) REM This procedure uses a local variable called Stars$ Stars$ = STRING$(StarCount, \"*\") PRINT Stars$ END SUB\n\n#### Object-oriented BASIC[edit]\n\nThird-generation BASIC dialects such as Visual Basic, Xojo, Gambas, StarOffice\nBasic, BlitzMax and PureBasic introduced features to support object-oriented\nand event-driven programming paradigm. Most built-in procedures and functions\nare now represented as methods of standard objects rather than operators.\nAlso, the operating system became increasingly accessible to the BASIC\nlanguage.\n\nThe following example is in Visual Basic .NET:\n\n    \n    \n    Public Module StarsProgram Private Function Ask(prompt As String) As String Console.Write(prompt) Return Console.ReadLine() End Function Public Sub Main() Dim userName = Ask(\"What is your name: \") Console.WriteLine(\"Hello {0}\", userName) Dim answer As String Do Dim numStars = CInt(Ask(\"How many stars do you want: \")) Dim stars As New String(\"*\"c, numStars) Console.WriteLine(stars) Do answer = Ask(\"Do you want more stars? \") Loop Until answer <> \"\" Loop While answer.StartsWith(\"Y\", StringComparison.OrdinalIgnoreCase) Console.WriteLine(\"Goodbye {0}\", userName) End Sub End Module\n\n## Standards[edit]\n\n  * ANSI/ISO/IEC Standard for Minimal BASIC:\n\n    * ANSI X3.60-1978 \"For minimal BASIC\"\n    * ISO/IEC 6373:1984 \"Data Processing\u2014Programming Languages\u2014Minimal BASIC\"\n  * ECMA-55 Minimal BASIC (withdrawn, similar to ANSI X3.60-1978)\n  * ANSI/ISO/IEC Standard for Full BASIC:\n\n    * ANSI X3.113-1987 \"Programming Languages Full BASIC\"\n    * INCITS/ISO/IEC 10279-1991 (R2005) \"Information Technology \u2013 Programming Languages \u2013 Full BASIC\"\n  * ANSI/ISO/IEC Addendum Defining Modules:\n\n    * ANSI X3.113 Interpretations-1992 \"BASIC Technical Information Bulletin # 1 Interpretations of ANSI 03.113-1987\"\n    * ISO/IEC 10279:1991/ Amd 1:1994 \"Modules and Single Character Input Enhancement\"\n  * ECMA-116 BASIC (withdrawn, similar to ANSI X3.113-1987)\n\n## Compilers and interpreters[edit]\n\nThis section is an excerpt from List of compilers \u00a7 BASIC compilers.[edit]\n\nThis list is incomplete; you can help by adding missing items. (June 2016)  \n---  \nCompiler| Author| Working state| Windows| Unix-like| Other OSs| License type|\nStandard conformance  \n---|---|---|---|---|---|---|---  \nMinimal BASIC| Full BASIC  \nAppGameKit| The Game Creators| Current| Yes| Yes| No| Proprietary| ?| ?  \nBASIC-PLUS-2| Digital Equipment Corporation now HPE| Current| No| ?| RSTS/E,\nRSX-11M, VMS| Proprietary| ?| ?  \nB4X| Erel Uziel| Current| Yes| Yes (Android, iOS)| Yes (JVM)| No| No  \nBlitzMax| Blitz Research| Discontinued| Yes| Yes (Linux, macOS)| No| No| No  \nDarkBASIC| The Game Creators| Inactive| Yes| No| No| No| No  \nECMA-55 Minimal BASIC compiler^[109]| John Gatewood Ham| Current| No| Linux|\nNo| Yes| No  \nFreeBASIC| FreeBASIC Development Team| Current| Yes| Yes| DOS, FreeBSD, Linux|\nPartial^[110]| No  \nFutureBASIC| Brilor Software| Current| No| macOS| Classic Mac OS| Proprietary|\nPartial| No  \nGambas| Beno\u00eet Minisini| Current| No| Yes| No| No| No  \nGFA BASIC| Frank Ostrowski| Abandoned| Yes| No| Amiga, Atari ST, DOS|\nProprietary| No| No  \nMercury| RemObjects| Current| Yes| Yes (Linux, macOS, Android, iOS)| Yes\n(WebAssembly)| Proprietary| No| No  \nPowerBASIC (formerly Turbo Basic)| PowerBASIC, Inc.| Inactive| Yes| No| DOS|\nProprietary| ?| ?  \nPureBasic| Fantaisie Software| Current| Yes| Yes| Yes| Proprietary| No| No  \nQB64| Galleon| Current| Yes| Yes| Yes| Partial| No  \nQuickBASIC| Microsoft| Discontinued| No| No| DOS| Proprietary| Partial| No  \nTandem BASIC| Tandem Computers| Historic| No| No| Guardian, NonStop Kernel,\nNonStop OS| Proprietary| No| No  \nTrue BASIC| True BASIC| Current| Yes| No| No| Proprietary| Yes| Partial^[111]  \nVSI BASIC for OpenVMS| VMS Software, Inc.| Current| No| No| OpenVMS|\nProprietary| No| No  \nXojo (formerly REALbasic)| Xojo Inc. (formerly Real Software)| Current| Yes|\nYes| Yes| Proprietary| No| No  \n  \nThis section is an excerpt from List of compilers \u00a7 BASIC interpreters.[edit]\n\nThis list is incomplete; you can help by adding missing items. (December 2010)  \n---  \nInterpreter| Author| Windows| Unix-like| Other OSs| License type  \n---|---|---|---|---|---  \nBASIC-PLUS| Digital Equipment Corporation| No| No| RSTS/E| Proprietary  \nBBC BASIC (SDL 2.0)| Richard T. Russell| Yes| Yes| Android, iOS, macOS,\nRaspberry Pi OS, Web Browser  \nBywater BASIC (bwBASIC)| Ted Campbell| No| Yes| ?  \nLiberty BASIC| Shoptalk Systems| Yes| No| No| Proprietary  \nGW-BASIC| Microsoft| No| No| MS-DOS| Proprietary  \nQBasic| Microsoft| No| No| MS-DOS| Proprietary  \nChipmunk Basic| Ronald H. Nicholson, Jr.| Yes| Yes| Yes| Freeware  \nTI Basic| Texas Instruments| No| No| TI-99/4A| Proprietary  \nTI Extended Basic| Texas Instruments| No| No| TI-99/4A| Proprietary  \nRocky Mountain BASIC| [Trans Era]| Yes| No| HP 9000| Proprietary  \nBas| Michael Haardt| No| Yes| No  \nYabasic| Marc-Oliver Ihm| Yes| Yes| Haiku  \nSmallBASIC| SmallBASIC| Yes| Yes| Android, macOS  \nSuperBASIC| Jan Jones| No| No| Sinclair QL| Proprietary  \nthinBasic| thinBasic| Yes| No| No| Proprietary  \nPC-BASIC| Rob Hagemans| Yes| Yes| macOS  \nLevel I BASIC| Steve Leininger| No| No| TRS-80 ROM| Proprietary  \nLevel II BASIC| Microsoft| No| No| TRSDOS, NewDos/80, MultiDOS, DosPlus, LDOS|\nProprietary  \nLevel III BASIC| Microsoft| No| No| TRSDOS, NewDos/80, MultiDOS, DosPlus,\nLDOS| Proprietary  \n  \n## See also[edit]\n\n  * List of BASIC dialects\n\n## Notes[edit]\n\n  1. ^ Fortran's DO had a continue for this purpose, but still required the line number to be entered.\n  2. ^ Tymshare charged about US$10 per hour (equivalent to $78 in 2023) for accessing their systems.\n  3. ^ Widely regarded as the first \"true\" mini, the PDP-8's 12-bit memory space allowed 4,096 address of 12-bits each, or 6,144 bytes.\n  4. ^ Interpreters are ultimately similar to compilers in the tasks they perform, converting source code to machine code, but differ in when they perform it. Compilers convert the entire program at once and output a separate runnable program. Interpreters generally convert only a single line at a time (or even just a portion of it) and then immediately release that code once the line has completed running. This means they require only enough memory to run a single line, and do not require some form of high-performance secondary memory like a hard drive.\n  5. ^ Microsoft BASIC left 780 bytes free for user program code and variable values on a 4K machine, and that was running a cut-down version lacking string variables and other functionality.\n  6. ^ Also known simply as BASIC! and BASIC! Super User\n  7. ^ From version 3 onwards.\n\n## References[edit]\n\n  1. ^ Kemeny, John G.; Kurtz, Thomas E. (1963). Basic: a manual for BASIC, the elementary algebraic language designed for use with the Dartmouth Time Sharing System (PDF) (1st ed.). Hanover, N.H.: Dartmouth College Computation Center. Archived (PDF) from the original on October 9, 2022.\n  2. ^ Ramel, David (February 12, 2019). \"VB.NET Popularity Still Rising\". Visual Studio Magazine. Retrieved March 28, 2023.\n  3. ^ Swersky, David (January 25, 2023). \"40 most popular programming languages 2023: When and how to use them\". Raygun. Retrieved March 25, 2023.\n  4. ^ Proven, Liam (March 28, 2023). \"Nostalgic for VB? BASIC is anything but dead\". The Register. Retrieved September 27, 2023.\n  5. ^ Boss, Chris (November 15, 2022). \"BASIC is Not Dead. Time to Erase the Myths about Basic\". Code Project. Retrieved January 31, 2024.\n  6. ^ \"High Math at Hanover\". Time. February 23, 1959.\n  7. ^ Jump up to: ^a ^b ^c ^d ^e ^f Time 2014.\n  8. ^ Rankin, Joy Lisi (2018), A People's History of Computing in the United States, Cambridge, Massachusetts: Harvard University Press, ISBN 9780674970977, p. 23\n  9. ^ \"BASIC\". Jargon File. Retrieved June 13, 2017.\n  10. ^ \"Thomas E. Kurtz \u2013 History of Computer Programming Languages\". cis-alumni.org. Retrieved June 13, 2017.\n  11. ^ Alfred, Randy (January 5, 2008). \"May 1, 1964: First Basic Program Runs\". Wired. Retrieved June 13, 2017.\n  12. ^ Brooks, David (11 June 2019). \"Finally, a historical marker that talks about something important\". Concord Monitor. Archived from the original on 11 June 2019. Retrieved 11 August 2019.\n  13. ^ Bauer, W. F., Computer design from the programmer's viewpoint Archived July 23, 2016, at the Wayback Machine (Eastern Joint Computer Conference, December 1958) One of the first descriptions of computer time-sharing.\n  14. ^ \"IBM VS the World: That's How It Is\". Computerworld. December 5, 1973.\n  15. ^ Bourne, Charles; Hahn, Trudi Bellardo (August 2003). A History of Online Information Services, 1963\u20131976. MIT Press. p. 387. ISBN 9780262261753.\n  16. ^ \"2000 Timeshare System\".\n  17. ^ \"Passing the 10-year mark\". MEASURE Magazine. Hewlett Packard. October 1976.\n  18. ^ Marks, Shirley (December 1971). The JOSS Years: Reflections on an experiment (PDF) (Technical report). Rand. Archived (PDF) from the original on October 9, 2022.\n  19. ^ Savetz, Kevin (April 2013). \"Dave Ahl and Betsy Ahl\" (Interview).\n  20. ^ Jump up to: ^a ^b Ahl, David H. (1973). 101 Basic computer games. Morristown, N.J.: Creative Computing Press. OCLC 896774158.\n  21. ^ Ahl, David H. (May 11, 1981). \"Computer Games\". InfoWorld. Vol. 3, no. 9. p. 44. ISSN 0199-6649.\n  22. ^ Dijkstra, Edsger W. (June 18, 1975). \"How do we tell truths that might hurt\" (PDF). Selected Writings on Computing: A Personal Perspective. Springer-Verlag (published 1982). pp. 129\u2013131. ISBN 978-0387906522. OCLC 693424350. Archived (PDF) from the original on October 9, 2022.\n  23. ^ Johnson, Phil (January 21, 2015). \"The source code behind Microsoft BASIC for 6502 comes to light\". Computerworld. Retrieved October 24, 2022.\n  24. ^ \"We have a BASIC\". New Mexico Museum of Natural History and Science. Archived from the original on November 30, 2012. Retrieved April 18, 2007.\n  25. ^ Pittman, Tom. \"you had to pay $5 up front to get it...\". www.ittybittycomputers.com. Retrieved June 14, 2017.\n  26. ^ Ahl, David H. (1979). More basic computer games. Morristown: Creative Computing Press. ISBN 978-0894801372. OCLC 839377789.\n  27. ^ Ahl, David H. (1984). Big computer games. Morris Plains, N.J.: Creative Computing Press. ISBN 978-0916688400. OCLC 872675092.\n  28. ^ \"Osborne 1\". oldcomputers.net. Retrieved June 14, 2017.\n  29. ^ Lien, David (1981). The BASIC Handbook (Second ed.). San Diego, CA: Compusoft Publishing. p. inside cover. ISBN 0-932760-00-7.\n  30. ^ \"Back to BASICs\". peyre.sqweebs.com. Archived from the original on October 26, 2009. Retrieved February 25, 2023.\n  31. ^ Perr, John (January 1, 2003). \"BASIC programming with Unix\". LinuxFocus. Retrieved September 26, 2023.\n  32. ^ \"bwBASIC: The Bywater BASIC Interpreter\". OSS Blog. August 25, 2018. Retrieved September 30, 2023.\n  33. ^ Hall, Jim (June 23, 2021). \"Program on FreeDOS with Bywater BASIC\". Opensource.com. Retrieved September 30, 2023.\n  34. ^ Calderone, Antonia. \"Why nuBASIC\". Retrieved September 30, 2023.\n  35. ^ Song, Liu Xue (October 12, 2003). \"MyBasic - A Custom-BASIC language interpreter written in C++\". Code Project. Retrieved September 30, 2023.\n  36. ^ \"LOGIC BASIC - Free programming language\". Retrieved October 7, 2023.\n  37. ^ Albrecht, Christian (October 2, 2022). \"yab Beginners tutorial\". BeSly - BeOS, Haiku & Zeta. Translation by Luc Schrijvers (Begasus). Retrieved February 25, 2024.\n  38. ^ Jump up to: ^a ^b \"Differences Between GW-BASIC and QBasic\". May 12, 2003. Archived from the original on October 19, 2013. Retrieved June 28, 2008.\n  39. ^ Pravin, Jain (2011). The Class Of Java. Pearson Education India. ISBN 9788131755440.\n  40. ^ \"GNE: the C programming language\". fysh.org. Retrieved June 14, 2017. \"During the 1980s, C compilers spread widely, and C became an extremely popular language.\"\n  41. ^ Dance, Michael. \"Easy to Make Qbasic Games\". Techwalla. Retrieved September 30, 2023.\n  42. ^ \"QBasic Games Directory\". Phatcode. Retrieved September 30, 2023.\n  43. ^ \"FreeBASIC Games Directory\". FreeBASIC. Retrieved September 30, 2023.\n  44. ^ Cocilova, Alex (April 16, 2013). \"Black Annex is the best QBASIC game you've ever seen\". PC World. Retrieved September 30, 2023.\n  45. ^ Serrels, Mark (June 24, 2013). \"The Australian Who Built A Video Game Using QBASIC\". Kotaku. Retrieved September 30, 2023.\n  46. ^ \"Super Game System Basic\". IndieDB. November 21, 2017. Retrieved September 30, 2023.\n  47. ^ \"PlayBasic\". itch.io. Retrieved September 30, 2023.\n  48. ^ \"CoolBasic\". IndieDB. December 6, 2005. Retrieved September 30, 2023.\n  49. ^ \"AllegroBASIC Homepage\". AllegroBASIC. Archived from the original on November 15, 2018. Retrieved October 7, 2023.\n  50. ^ \"Ethos Game Basic 1.3\". shareApp. Retrieved September 30, 2023.\n  51. ^ \"RC Basic\". ModDB. August 18, 2015. Retrieved September 30, 2023.\n  52. ^ Fercalo, Andrei (August 8, 2014). \"NaaLaa\". Softpedia. Retrieved October 1, 2023.\n  53. ^ \"A Closer Look At AppGameKit 2\". GameFromScratch. June 12, 2015. Retrieved September 30, 2023.\n  54. ^ \"Cerberus X 2018-08-10 Released\". GameFromScratch. August 10, 2018. Retrieved September 30, 2023.\n  55. ^ Clarke, Gavin (February 21, 2007). \"Linux breakthrough for Visual Basic developers\". The Register. Retrieved October 1, 2023.\n  56. ^ Anderson, Tim (February 14, 2020). \"25 years of Delphi and no Oracle in sight: Not a Visual Basic killer but hard to kill\". The Register. Retrieved March 25, 2023. \"Enter Borland Delphi, which combined Object Pascal with a VB-like visual form builder. Object Pascal was Borland's own language, with full support for inheritance. It is case-insensitive and not much harder than VB for coding, once you get used to typing begin and end a lot (loosely equivalent to curly braces in C). Unlike VB, it sensibly has different operators for assignment (:=) and comparison (=).\"\n  57. ^ Speed, Richard (May 6, 2022). \"RAD Basic \u2013 the Visual Basic 7 that never was \u2013 releases third alpha\". The Register. Retrieved March 26, 2023. \"Alternatively, one can relive the days of the whole BASIC/Pascal rivalry with Delphi-compatible Lazarus.\"\n  58. ^ \"Product Family Life Cycle Guidelines for Visual Basic 6.0\". Msdn2.microsoft.com. March 31, 2005. Retrieved June 16, 2009.\n  59. ^ Ramel, David (July 7, 2020). \"Popularity Index: Classic Visual Basic Hangs In There\". Visual Studio Magazine. Retrieved March 28, 2023.\n  60. ^ Ramel, David (February 28, 2020). \"Visual Basic Resurgence? Project Seeks to 'Bring the VBE into This Century!'\". Visual Studio Magazine. Retrieved March 28, 2023.\n  61. ^ Domingo, Michael (June 13, 2017). \"Viva, Visual Basic! Or, Does VB Have a Future?\". Visual Studio Magazine. Retrieved March 26, 2023.\n  62. ^ Ramel, David (March 12, 2020). \"Microsoft: 'We Do Not Plan to Evolve Visual Basic as a Language'\". Visual Studio Magazine. Retrieved March 26, 2023.\n  63. ^ Ramel, David (February 8, 2023). \"Microsoft Reaffirms Fate of Visual Basic\". Visual Studio Magazine. Retrieved March 25, 2023.\n  64. ^ Ramel, David (August 25, 2020). \"Mercury Is Latest 3rd-Party Visual Basic Effort: 'Multiplatform VB++'\". Visual Studio Magazine. Retrieved March 28, 2023.\n  65. ^ Ramel, David (August 18, 2015). \"B4J Keeps Classic Visual Basic Alive\". Visual Studio Magazine. Retrieved March 26, 2023.\n  66. ^ Speed, Richard (May 6, 2021). \"Visual Basic 6 returns: You've been a good developer all year. You have social distanced, you have helped your mom. Here's your reward\". The Register. Retrieved March 26, 2023.\n  67. ^ Minhorst, Andre (April 1, 2022). \"twinBASIC: Visual Basic f\u00fcr die Zukunft\". Datenbankentwickler. Retrieved March 26, 2023.\n  68. ^ Speed, Richard (May 6, 2022). \"RAD Basic \u2013 the Visual Basic 7 that never was \u2013 releases third alpha\". The Register. Retrieved March 26, 2023. \"RAD Basic is not the only game in town. Alternatives in varying stages of development include twinBASIC, which also aims to be backwards compatible with VB6 and VBA; and FreeBASIC, which implements much of what lurked in Microsoft QuickBASIC (and has a nifty IDE in the form of VisualFBEditor).\"\n  69. ^ Rogoz, Ivan (April 7, 2022). \"Blast from the past - QBasic 4.5\". Barn Lab. Retrieved September 26, 2023. \"QB64 comes with a WYSIWYG IDE editor called InForm which brings it closer to everyday use as a quick and dirty language for automation for Windows.\"\n  70. ^ \"The Modern Alternative to Visual Basic\". Xojo. May 19, 2013. Retrieved March 26, 2023.\n  71. ^ Morgan, R. (June 29, 2014). \"Welcome\". Gambas Magazine. Archived from the original on April 8, 2016.\n  72. ^ Proven, Liam (March 28, 2023). \"Nostalgic for VB? BASIC is anything but dead\". The Register. Retrieved September 27, 2023.\n  73. ^ Toktosunov, Azim (April 17, 2013). \"Quite BASIC: Web-Based Classic BASIC Programming Environment\". MakeUseOf. Retrieved February 25, 2024.\n  74. ^ Williams, Al (September 17, 2018). \"It's The Web, Basically\". Hackaday. Retrieved September 28, 2023.\n  75. ^ Veteanu, Marian (February 14, 2017). \"JavaScript compilers. Part II: Languages that compile to JavaScript\". Code Avenger.\n  76. ^ Flower, Daniel (January 20, 2013). \"JSBasic - A BASIC to JavaScript Compiler\". Code Project. Retrieved September 30, 2023.\n  77. ^ Schnell, Stefan (February 10, 2016). \"SpiderBasic (JavaScript) Language in the Context of SAP Web Application Server\". SAP Blogs. Retrieved October 1, 2023.\n  78. ^ \"Java \u2013 What programming languages target J2ME\". iTecNote. Retrieved September 30, 2023. \"Now I've heard of other languages which supposedly make possible development without recourse to Java, languages like CellularBASIC (which looks a bit like QBASIC) and Hecl (which seems to be based on Tcl).\"\n  79. ^ Tello, Guillaume (December 15, 2007). \"LG KS 360\". Archived from the original on October 28, 2010. Retrieved September 30, 2023. \"After some research on the Net, I came across this site about the CellularBASIC. It is a complete BASIC interpreter written in JAVA.\"\n  80. ^ \"Hand BASIC - CBM Flavor\". Appsftw. Retrieved October 1, 2023.\n  81. ^ \"Learn BASIC Programming for iOS\". CNET. Retrieved October 1, 2023.\n  82. ^ \"BASIC: programming language by Nikolay Denislamov\". AppAgg. January 26, 2021. Retrieved October 1, 2023.\n  83. ^ \"Basic! on the App Store\". Apple.com. May 5, 2019. Retrieved October 1, 2023.\n  84. ^ \"Basic Programming Language for PC\". APP for Windows. Retrieved October 1, 2023.\n  85. ^ Robinson, Curtis. \"About\". Touch Basic. Retrieved September 30, 2023.\n  86. ^ Darwin, Ian F. (May 10, 2017). Android Cookbook: Problems and Solutions for Android Developers. United States: O'Reilly Media, Inc. p. 623. ISBN 9781449374495.\n  87. ^ Hoffmann, Markus. \"X11-Basic\". F-Droid. Retrieved September 30, 2023.\n  88. ^ Miller, Paul (June 19, 2017). \"Fuze Code Studio will let kids use the Switch to code their own Switch games\". The Verge. Retrieved September 30, 2023.\n  89. ^ Porter, Matt (December 18, 2015). \"Now kids can get back to BASIC with Fuze\". The Gadget Man. Retrieved September 30, 2023.\n  90. ^ Bedford, Mike (October 21, 2015). \"FUZE powered by Raspberry Pi V2 review\". The Gadget Man. Retrieved September 30, 2023.\n  91. ^ Hibiki, Ryoga. \"Dragon Basic documentation\". Academia.edu. Retrieved September 30, 2023.\n  92. ^ \"gotBASIC.com\". Retrieved April 13, 2024. \"NEXTBasic: A customized Basic language, inspired by Visual Basic .NET, that targets the Sega Genesis (Mega Drive).\"\n  93. ^ \"BasiEgaXorz\". Sega Retro. May 10, 2012. Retrieved April 13, 2024.\n  94. ^ \"SecondBASIC\". gotBASIC.com. Retrieved April 13, 2024.\n  95. ^ Brin, David (September 14, 2006). \"Why Johnny Can't Code\". Salon. Archived from the original on September 18, 2013. Retrieved June 19, 2017.\n  96. ^ \"Small Basic\". Microsoft Developer Network. Archived from the original on March 17, 2014. Retrieved June 19, 2017.\n  97. ^ \"BASIC-256 homepage\". \"Check out \"Why Johnny Can't Code,\" the article that inspired BASIC-256.\"\n  98. ^ Ratliff Sr., Gary L. (October 2008). \"An Alphabet of Computer Languages: BASIC\". PCLinuxOS Magazine. Retrieved February 25, 2024.\n  99. ^ Koster, Raph (November 21, 2006). \"Quite BASIC \u2014 Web BASIC programming\". Retrieved February 25, 2024.\n  100. ^ \"Dartmouth plans celebration for 50th anniversary of BASIC computer language\". New Hampshire Union Leader. April 28, 2014. Archived from the original on June 20, 2017. Retrieved June 14, 2017.\n  101. ^ \"50th anniversary of BASIC \u2013 Google Search\". Google.\n  102. ^ Wood, Lamont (June 23, 2011). \"How are students learning programming in a post-Basic world?\". Computerworld. Retrieved February 26, 2024.\n  103. ^ \"BASIC at 50 \u2013 Event Schedule\". Dartmouth College. Retrieved June 14, 2017.\n  104. ^ \"BASIC at 50\". Dartmouth College. Retrieved June 14, 2017.\n  105. ^ \"KeyPgAsm\". FreeBasic Wiki. Retrieved August 2, 2017.\n  106. ^ \"Inline x86 ASM\". Pure Basic. Retrieved August 2, 2017.\n  107. ^ \"Using assembly-language in your code\". Power Basic. Archived from the original on August 2, 2017. Retrieved August 2, 2017.\n  108. ^ Kemeny, John G.; Kurtz, Thomas E. (January 1968). Basic: a manual for BASIC, the elementary algebraic language designed for use with the Dartmouth Time Sharing System (PDF) (4th ed.). Hanover, N.H.: Dartmouth College Computation Center. p. 53. Archived (PDF) from the original on January 3, 2014.\n  109. ^ John Gatewood Ham (2014). \"An ECMA-55 Minimal BASIC Compiler for x86-64 Linux\u00ae\". Computers. 3 (3): 69\u2013116. doi:10.3390/computers3030069. S2CID 40383760.\n  110. ^ angros47 (July 29, 2013). \"ANSI Basic: is FreeBasic standard-compliant?\". freebasic.net. Archived from the original on September 28, 2023.{{cite web}}: CS1 maint: numeric names: authors list (link)\n  111. ^ Bantchev, Boyko (2008). \"The True 'True BASIC'\". Institute of Mathematics and Informatics. Archived from the original on March 13, 2011.\n\n### General references[edit]\n\n  * Sammet, Jean E. (1969). Programming languages: history and fundamentals. Englewood Cliffs, N.J.: Prentice-Hall. OCLC 819683527.\n  * Kurtz, Thomas E. (1981). \"BASIC\". In Wexelblat, Richard (ed.). History of programming languages. History of Programming Languages I. New York: ACM. pp. 515\u2013537. doi:10.1145/800025.1198404. ISBN 978-0127450407.\n  * Kemeny, John G.; Kurtz, Thomas E. (1985). Back To BASIC: The History, Corruption, and Future of the Language. Addison-Wesley. p. 141. ISBN 9780201134339. OCLC 11399298.\n  * Lien, David A. (1986). The Basic Handbook: Encyclopedia of the BASIC Computer Language (3rd ed.). Compusoft Publishing. ISBN 9780932760333. OCLC 12548310.\n  * \"Fifty Years of BASIC, the Programming Language That Made Computers Personal\". Time. April 29, 2014.\n\n## External links[edit]\n\nWikibooks has a book on the topic of: Programming:BASIC\n\n  * BASIC at Curlie\n  * \"BASIC\u2014Beginners All-purpose Symbolic Instruction Code\". The Encyclopedia of Computer Languages. Murdoch University.\n  * The Birth of Basic on YouTube\n  * gotBASIC.com - For all people interested in the continued usage and evolution of the BASIC programming language.\n  * Awesome Basic - A curated list of awesome BASIC dialects, IDEs, and tutorials.\n  * The Basics' page (Since 2001) - Comprehensive listing of dialects.\n\n  * v\n  * t\n  * e\n\nProgramming languages  \n---  \n  \n  * Comparison\n  * Timeline\n  * History\n\n  \n  \n  * Ada\n  * ALGOL\n  * APL\n  * ArkTS\n  * Assembly\n  * BASIC\n  * C\n  * C++\n  * C#\n  * Classic Visual Basic\n  * COBOL\n  * Erlang\n  * Forth\n  * Fortran\n  * Go\n  * Haskell\n  * Java\n  * JavaScript\n  * Julia\n  * Kotlin\n  * Lisp\n  * Lua\n  * MATLAB\n  * ML\n  * Object Pascal\n  * Pascal\n  * Perl\n  * PHP\n  * Prolog\n  * Python\n  * R\n  * Ruby\n  * Rust\n  * SQL\n  * Scratch\n  * Shell\n  * Simula\n  * Smalltalk\n  * Swift\n  * Visual Basic\n  * more...\n\n  \n  \n  * Lists: Alphabetical\n  * Categorical\n  * Generational\n  * Non-English-based\n  * Category\n\n  \n  \n  * v\n  * t\n  * e\n\nDialects of the BASIC programming language (list)  \n---  \nClassic| | Microsoft| \n\n  * Microsoft BASIC\n  * TRS-80 BASICs (Level I, Level II/III)\n  * Thomson BASIC 1.0\n\n  \n---|---  \nTexas Instruments|\n\n  * TI-BASIC (calculators)\n  * TI Extended BASIC (aka XBasic)\n  * TI-BASIC 83\n\n  \nHewlett-Packard|\n\n  * HP Time-Shared BASIC\n  * Rocky Mountain BASIC\n  * HP Basic\n\n  \nLocomotive Software|\n\n  * Locomotive BASIC\n  * Mallard BASIC\n\n  \nMicrocomputers|\n\n  * Atom BASIC\n  * Integer BASIC\n  * North Star BASIC\n  * SCELBAL\n\n  \nMinicomputers|\n\n  * BASIC-11\n  * Business Basic (B32, Data General)\n  * Data General Extended BASIC\n  * Southampton BASIC System\n  * Wang BASIC\n\n  \nTime-sharing computers|\n\n  * BASIC-PLUS\n  * VSI BASIC for OpenVMS\n  * SUPER BASIC\n  * CALL/360:BASIC\n\n  \nOther|\n\n  * AlphaBasic\n  * Astro BASIC\n  * BASICODE\n  * BAL\n  * Casio BASIC\n  * CBASIC\n  * PBASIC\n  * SDS BASIC\n  * Tiny BASIC\n  * UBASIC\n  * ZBasic\n  * ETBASIC [zh]\n\n  \nExtenders|\n\n  * BASIC 8\n  * Graphics BASIC\n  * Simons' BASIC\n  * Super Expander\n  * Super Expander 64\n  * YS MegaBasic\n\n  \nProcedure- oriented| | Proprietary| \n\n  * AmigaBASIC\n  * AMOS BASIC\n  * ASIC\n  * BasicX\n  * Beta BASIC\n  * FutureBASIC\n  * GRASS\n  * Liberty BASIC\n  * LSE\n  * MapBasic\n  * Mobile BASIC\n  * OWBasic\n  * PowerBASIC\n  * PureBasic\n  * SmileBASIC\n  * ThinBasic\n  * Tiger-BASIC\n  * True BASIC\n  * Turbo Basic\n  * WordBASIC\n\n  \n---|---  \nFree and open source|\n\n  * Basic-256\n  * Basic4GL\n  * DarkBASIC\n  * Euphoria\n  * Indic BASIC\n  * Open Programming Language\n  * SdlBasic\n  * SmallBASIC\n  * QB64\n  * wxBasic\n  * XBasic\n  * Xblite\n  * Yabasic\n\n  \nWith object extensions| | Proprietary| \n\n  * AutoIt\n  * Chipmunk Basic\n  * GLBasic\n  * LotusScript\n  * Morfik\n  * PowerBASIC\n  * ProvideX\n  * Run BASIC\n  * VBA\n  * VBScript\n  * VB 5 for Microsoft Excel 5.0\n    * VSTO\n    * VSTA\n  * Embedded Visual Basic\n  * WinWrap Basic\n\n  \n---|---  \nFree and open source|\n\n  * BlitzMax\n  * FreeBASIC\n  * Microsoft Small Basic\n  * Mono-Basic\n  * OpenOffice Basic\n  * ScriptBasic\n  * Roslyn\n\n  \nRAD designers| | Proprietary| \n\n  * CA-Realizer\n  * Visual Basic (classic)\n  * NS Basic\n  * RapidQ\n  * Visual Basic .NET (Mercury)\n  * Xojo\n\n  \n---|---  \nFree and open source|\n\n  * B4X (Basic4android, Basic4ppc)\n  * Gambas\n  * WinFBE, Visual FB Editor\n\n  \nDefunct|\n\n  * Altair BASIC\n  * Applesoft BASIC\n  * Atari BASIC\n  * Atari Microsoft BASIC\n  * Atari ST BASIC\n  * BASIC A+\n  * BASIC XE\n  * BASIC XL\n  * BASIC Programming (Atari 2600)\n  * BBC BASIC\n  * Benton Harbor BASIC\n  * Chinese BASIC\n  * Commodore BASIC\n  * Color BASIC\n  * Dartmouth BASIC\n  * Disk Extended Color BASIC\n  * Extended Color BASIC\n  * Family BASIC\n  * GFA BASIC\n  * GW-BASIC\n  * IBM BASIC\n  * JR-BASIC\n  * MacBASIC\n  * MBASIC\n  * MSX BASIC\n  * MS BASIC for Macintosh\n  * QBasic\n  * QuickBASIC\n  * Phoenix Object Basic\n  * S-BASIC\n  * Sinclair BASIC\n  * STOS BASIC\n  * SuperBASIC\n  * TI BASIC (TI 99/4A)\n  * Turbo-BASIC XL\n  * Vilnius BASIC\n\n  \n  \nAuthority control databases  \n---  \nNational|\n\n  * France\n  * BnF data\n  * Germany\n  * Israel\n  * United States\n  * Czech Republic\n\n  \nOther|\n\n  * IdRef\n\n  \n  \nRetrieved from\n\"https://en.wikipedia.org/w/index.php?title=BASIC&oldid=1220997650\"\n\nCategories:\n\n  * BASIC programming language family\n  * American inventions\n  * Programming languages\n  * Programming languages created in 1964\n  * Programming languages with an ISO standard\n\nHidden categories:\n\n  * Webarchive template wayback links\n  * CS1 maint: numeric names: authors list\n  * Articles with short description\n  * Short description is different from Wikidata\n  * Use mdy dates from March 2018\n  * All articles lacking reliable references\n  * Articles lacking reliable references from November 2023\n  * Articles with excerpts\n  * Articles with Curlie links\n  * Articles with BNF identifiers\n  * Articles with BNFdata identifiers\n  * Articles with GND identifiers\n  * Articles with J9U identifiers\n  * Articles with LCCN identifiers\n  * Articles with NKC identifiers\n  * Articles with SUDOC identifiers\n  * Articles with example BASIC code\n\n  * This page was last edited on 27 April 2024, at 06:10 (UTC).\n  * Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n  * Privacy policy\n  * About Wikipedia\n  * Disclaimers\n  * Contact Wikipedia\n  * Code of Conduct\n  * Developers\n  * Statistics\n  * Cookie statement\n  * Mobile view\n  * Edit preview settings\n\n", "frontpage": false}
