{"aid": "40081553", "title": "SoumniBot: The new Android banker's unique techniques", "url": "https://securelist.com/soumnibot-android-banker-obfuscates-app-manifest/112334/", "domain": "securelist.com", "votes": 2, "user": "dirtyhippiefree", "posted_at": "2024-04-18 22:46:57", "comments": 0, "source_title": "Analysis of the SoumniBot Android banker", "source_text": "Analysis of the SoumniBot Android banker | Securelist\n\nby Kaspersky\n\n  * CompanyAccount\n  * Get In Touch\n  * Dark mode off\n  * English\n\n    * Russian\n    * Spanish\n\n  * Subscribe Dark mode off Login\n  * Securelist menu\n  * English\n\n    * Russian\n    * Spanish\n  * Existing Customers\n\n    * Personal\n\n      * My Kaspersky\n      * Renew your product\n      * Update your product\n      * Customer support\n    * Business\n\n      * KSOS portal\n      * Kaspersky Business Hub\n      * Technical Support\n      * Knowledge Base\n      * Renew License\n  * Home\n\n    * Products\n    * Trials&Update\n    * Resource Center\n  * Business\n\n    * Kaspersky Next\n    * Small Business (1-50 employees)\n    * Medium Business (51-999 employees)\n    * Enterprise (1000+ employees)\n  * Securelist\n  * Threats\n\n    * Financial threats\n    * Mobile threats\n    * Web threats\n    * Secure environment (IoT)\n    * Vulnerabilities and exploits\n    * Spam and Phishing\n    * Industrial threats\n  * Categories\n\n    * APT reports\n    * Incidents\n    * Research\n    * Malware reports\n    * Spam and phishing reports\n    * Publications\n    * Kaspersky Security Bulletin\n  * Archive\n  * All Tags\n  * APT Logbook\n  * Webinars\n  * Statistics\n  * Encyclopedia\n  * Threats descriptions\n  * KSB 2021\n  * About Us\n\n    * Company\n    * Transparency\n    * Corporate News\n    * Press Center\n    * Careers\n    * Sponsorships\n    * Policy Blog\n    * Contacts\n  * Partners\n\n    * Find a Partner\n    * Partner Program\n\nContent menu Close\n\nSubscribe\n\nMalware descriptions\n\n# SoumniBot: the new Android banker\u2019s unique techniques\n\nMalware descriptions\n\n17 Apr 2024\n\n5 minute read\n\nTable of Contents\n\n  * SoumniBot obfuscation: exploiting bugs in the Android manifest extraction and parsing procedure\n    * Technique 1: Invalid Compression method value\n    * Technique 2: Invalid manifest size\n    * Technique 3: Long namespace names\n  * What\u2019s under the obfuscation: SoumniBot\u2019s functionality\n  * Conclusion\n  * Indicators of compromise\n\nAuthors\n\n  * Dmitry Kalinin\n\nThe creators of widespread malware programs often employ various tools that\nhinder code detection and analysis, and Android malware is no exception. As an\nexample of this, droppers, such as Badpack and Hqwar, designed for stealthily\ndelivering Trojan bankers or spyware to smartphones, are very popular among\nmalicious actors who attack mobile devices. That said, we recently discovered\na new banker, SoumniBot, which targets Korean users and is notable for an\nunconventional approach to evading analysis and detection, namely obfuscation\nof the Android manifest.\n\n## SoumniBot obfuscation: exploiting bugs in the Android manifest extraction\nand parsing procedure\n\nAny APK file is a ZIP archive with AndroidManifest.xml in the root folder.\nThis file contains information about the declared components, permissions and\nother app data, and helps the operating system to retrieve information about\nvarious app entry points. Just like the operating system, the analyst starts\nby inspecting the manifest to find the entry points, which is where code\nanalysis should start. This is likely what motivated the developers of\nSoumniBot to research the implementation of the manifest parsing and extracion\nroutine, where they found several interesting opportunities to obfuscate APKs.\n\n### Technique 1: Invalid Compression method value\n\nThis is a relatively well-known technique used by various types of malware\nincluding SoumniBot and associated with the way manifests are unpacked. In\nlibziparchive library, the standard unarchiving function permits only two\nCompression method values in the record header: 0x0000 (STORED, that is\nuncompressed) \u0438 0x0008 (DEFLATED, that is compressed with deflate from the\nzlib library), or else it returns an error.\n\nlibziparchive unarchiving algorithm\n\nYet, instead of using this function, the developers of Android chose to\nimplement an alternate scenario, where the value of the Compression method\nfield is validated incorrectly.\n\nManifest extraction procedure\n\nIf the APK parser comes across any Compression method value but 0x0008\n(DEFLATED) in the APK for the AndroidManifest.xml entry, it considers the data\nuncompressed. This allows app developers to put any value except 8 into\nCompression method and write uncompressed data. Although any unpacker that\ncorrectly implements compression method validation would consider a manifest\nlike that invalid, the Android APK parser recognizes it correctly and allows\nthe application to be installed. The image below illustrates the way the\ntechnique is executed in the file b456430b4ed0879271e6164a7c0e4f6e.\n\nInvalid Compression method value followed by uncompressed data\n\n### Technique 2: Invalid manifest size\n\nLet\u2019s use the file 0318b7b906e9a34427bf6bbcf64b6fc8 as an example to review\nthe essence of this technique. The header of AndroidManifest.xml entry inside\nthe ZIP archive states the size of the manifest file. If the entry is stored\nuncompressed, it will be copied from the archive unchanged, even if its size\nis stated incorrectly. The manifest parser ignores any overlay, that is\ninformation following the payload that\u2019s unrelated to the manifest. The\nmalware takes advantage of this: the size of the archived manifest stated in\nit exceeds its actual size, which results in overlay, with some of the archive\ncontent being added to the unpacked manifest. Stricter manifest parsers\nwouldn\u2019t be able to read a file like that, whereas the Android parser handles\nthe invalid manifest without any errors.\n\nThe stated size of the manifest is much larger than its actual size\n\nNote that although live devices interpret these files as valid, apkanalyzer,\nGoogle\u2019s own official utility for analyzing assembled APKs, cannot handle\nthem. We have notified Google accordingly.\n\n### Technique 3: Long namespace names\n\nThe SoumniBot malware family, for example the file\nfa8b1592c9cda268d8affb6bceb7a120, has used this technique as well. The\nmanifest contains very long strings, used as the names of XML namespaces.\n\nVery long strings in the manifest...\n\n...used as namespace names\n\nManifests that contain strings like these become unreadable for both humans\nand programs, with the latter may not be able to allocate enough memory to\nprocess them. The manifest parser in the OS itself completely ignores\nnamespaces, so the manifest is handled without errors.\n\n## What\u2019s under the obfuscation: SoumniBot\u2019s functionality\n\nWhen started, the application requests a configuration with two parameters,\nmainsite \u0438 mqtt, from the server, whose address being a hardcoded constant.\n\nParameter request\n\nBoth parameters are server addresses, which the malware needs for proper\nfunctioning. The mainsite server receives collected data, and mqtt provides\nMQTT messaging functionality for receiving commands. If the source server did\nnot provide these parameters for some reason, the application will use the\ndefault addresses, also stored in the code.\n\nAfter requesting the parameters, the application starts a malicious service.\nIf it cannot start or stops for some reason, a new attempt is made every 16\nminutes. When run for the first time, the Trojan hides the app icon to\ncomplicate removal, and then starts to upload data in the background from the\nvictim\u2019s device to mainsite every 15 seconds. The data includes the IP\naddress, country deduced from that, contact and account lists, SMS and MMS\nmessages, and the victim\u2019s ID generated with the help of the trustdevice-\nandroid library. The Trojan also subscribes to messages from the MQTT server\nto receive the commands described below.\n\n#| Description| Parameters  \n---|---|---  \n0| Sends information about the infected device: phone number, carrier, etc.,\nand the Trojan version, followed by all of the victim\u2019s SMS messages,\ncontacts, accounts, photos, videos and online banking digital certificates.| \u2013  \n1| Sends the victim\u2019s contact list.| \u2013  \n2| Deletes a contact on the victim\u2019s device.| data: the name of the contact to\ndelete  \n3| Sends the victim\u2019s SMS and MMS messages.| \u2013  \n4| A debugging command likely to be replaced with sending call logs in a new\nversion.| \u2013  \n5| Sends the victim\u2019s photos and videos.| \u2013  \n8| Sends an SMS message.| data: ID that the malware uses to receive a message\nto forward. The Trojan sends the ID to mainsite and gets message text in\nreturn.  \n24| Sends a list of installed apps.| \u2013  \n30| Adds a new contact on the device.| name: contact name; phoneNum: phone\nnumber  \n41| Gets ringtone volume levels.| \u2013  \n42| Turns silent mode on or off.| data: a flag set to 1 to turn on silent mode\nand to 0 to turn it off  \n99| Sends a pong message in response to an MQTT ping request.| \u2013  \n100| Turns on debug mode.| \u2013  \n101| Turns off debug mode.| \u2013  \n  \nThe command with the number 0 is worth special mention. It searches, among\nother things, external storage media for .key and .der files that contain\npaths to /NPKI/yessign.\n\n1234567891011121314151617181920| public static List getAllBankingKeys(Context\ncontext) {List list = new ArrayList();Cursor cursor =\ncontext.getContentResolver().query(MediaStore.Files.getContentUri(\"external\"),new\nString[]{\"_id\", \"mime_type\", \"_size\", \"date_modified\", \"_data\"},\"(_data LIKE\n\\'%.key\\' OR _data LIKE \\'%.der\\')\", null, null);int index = cursor == null ?\n0 : cursor.getColumnIndexOrThrow(\"_data\");if (cursor != null) {while\n(cursor.moveToNext()) {String s = cursor.getString(index);If\n(!s.contains(\"/NPKI/yessign\")) {continue;}Logger.log(\"path is:\" +\ns);list.add(s);break;}cursor.close();}return list;}  \n---|---  \n  \nIf the application finds files like that, it copies the directory where they\nare located into a ZIP archive and sends it to the C&C server. These files are\ndigital certificates issued by Korean banks to their clients and used for\nsigning in to online banking services or confirming banking transactions. This\ntechnique is quite uncommon for Android banking malware. Kaspersky security\nsolutions detect SoumniBot despite its sophisticated obfuscation techniques,\nand assign to it the verdict of Trojan-Banker.AndroidOS.SoumniBot.\n\n## Conclusion\n\nMalware creators seek to maximize the number of devices they infect without\nbeing noticed. This motivates them to look for new ways of complicating\ndetection. The developers of SoumniBot unfortunately succeeded due to\ninsufficiently strict validations in the Android manifest parser code.\n\nWe have detailed the techniques used by this Trojan, so that researchers\naround the world are aware of the tactics, which other types of malware might\nborrow in the future. Besides the unconventional obfuscation, SoumniBot is\nnotable for stealing Korean online banking keys, which we rarely observe in\nAndroid bankers. This feature lets malicious actors empty unwitting victims\u2019\nwallets and circumvent authentication methods used by banks. To avoid becoming\na victim of malware like that, we recommend using a reliable security solution\non your smartphone to detect the Trojan and prevent it from being installed\ndespite all its tricks.\n\n## Indicators of compromise\n\nMD5 0318b7b906e9a34427bf6bbcf64b6fc8 00aa9900205771b8c9e7927153b77cf2\nb456430b4ed0879271e6164a7c0e4f6e fa8b1592c9cda268d8affb6bceb7a120\n\nC&C https[://]google.kt9[.]site https[://]dbdb.addea.workers[.]dev\n\n  * Google Android\n  * Malware\n  * Malware Descriptions\n  * Malware Technologies\n  * Mobile Malware\n  * Trojan\n  * Trojan Banker\n\nAuthors\n\n  * Dmitry Kalinin\n\nSoumniBot: the new Android banker\u2019s unique techniques\n\nTable of Contents\n\n  * SoumniBot obfuscation: exploiting bugs in the Android manifest extraction and parsing procedure\n    * Technique 1: Invalid Compression method value\n    * Technique 2: Invalid manifest size\n    * Technique 3: Long namespace names\n  * What\u2019s under the obfuscation: SoumniBot\u2019s functionality\n  * Conclusion\n  * Indicators of compromise\n\nGReAT webinars\n\n13 May 2021, 1:00pm\n\n### GReAT Ideas. Balalaika Edition\n\n  * Boris Larin\n  * Denis Legezo\n\n26 Feb 2021, 12:00pm\n\n### GReAT Ideas. Green Tea Edition\n\n  * John Hultquist\n  * Brian Bartholomew\n  * Suguru Ishimaru\n  * Vitaly Kamluk\n  * Seongsu Park\n  * Yusuke Niwa\n  * Motohiko Sato\n\n17 Jun 2020, 1:00pm\n\n### GReAT Ideas. Powered by SAS: malware attribution and next-gen IoT\nhoneypots\n\n  * Marco Preuss\n  * Denis Legezo\n  * Costin Raiu\n  * Kurt Baumgartner\n  * Dan Demeter\n  * Yaroslav Shmelev\n\n26 Aug 2020, 2:00pm\n\n### GReAT Ideas. Powered by SAS: threat actors advance on new fronts\n\n  * Ivan Kwiatkowski\n  * Maher Yamout\n  * Noushin Shabab\n  * Pierre Delcher\n  * F\u00e9lix Aime\n  * Giampaolo Dedola\n  * Santiago Pontiroli\n\n22 Jul 2020, 2:00pm\n\n### GReAT Ideas. Powered by SAS: threat hunting and new techniques\n\n  * Dmitry Bestuzhev\n  * Costin Raiu\n  * Pierre Delcher\n  * Brian Bartholomew\n  * Boris Larin\n  * Ariel Jungheit\n  * Fabio Assolini\n\nFrom the same authors\n\n### WhatsApp spy mod spreads through Telegram, attacks Arabic-speaking users\n\n### Not quite an Easter egg: a new family of Trojan subscribers on Google Play\n\n### Malicious WhatsApp mod distributed through legitimate apps\n\n##### Subscribe to our weekly e-mails\n\nThe hottest research right in your inbox\n\nIn the same category\n\n### Using the LockBit builder to generate targeted ransomware\n\n### DinodasRAT Linux implant targeting entities worldwide\n\n### What\u2019s in your notepad? Infected text editors target Chinese users\n\n### Coyote: A multi-stage banking Trojan abusing the Squirrel installer\n\n### Cracked software beats gold: new macOS backdoor stealing cryptowallets\n\n##### Latest Posts\n\nIncidents\n\n### XZ backdoor story \u2013 Initial analysis\n\n  * GReAT\n\nMalware descriptions\n\n### DinodasRAT Linux implant targeting entities worldwide\n\n  * Anderson Leite\n  * Lisandro Ubiedo\n\nMalware reports\n\n### Android malware, Android malware and more Android malware\n\n  * GReAT\n\nIndustrial threats\n\n### Threat landscape for industrial automation systems. H2 2023\n\n  * Kaspersky ICS CERT\n\n##### Latest Webinars\n\nTechnologies and services\n\n11 Dec 2023, 4:00pm 60 min\n\n### The Future of AI in cybersecurity: what to expect in 2024\n\n  * Vladimir Dashchenko\n  * Victor Sergeev\n  * Vladislav Tushkanov\n  * Dennis Kipker\n\nThreat intelligence and IR\n\n30 Nov 2023, 4:00pm 70 min\n\n### Responding to a data breach: a step-by-step guide\n\n  * Anna Pavlovskaya\n\nCyberthreat talks\n\n14 Nov 2023, 4:00pm 60 min\n\n### 2024 Advanced persistent threat predictions\n\n  * Igor Kuznetsov\n  * David Emm\n  * Marc Rivero\n  * Dan Demeter\n  * Sherif Magdy\n\nCyberthreat talks\n\n09 Nov 2023, 5:00pm 60 min\n\n### Overview of modern car compromise techniques and methods of protection\n\n  * Alexander Kozlov\n  * Sergey Anufrienko\n\n##### Reports\n\n### DuneQuixote campaign targets Middle Eastern entities with \u201cCR4T\u201d malware\n\nNew unattributed DuneQuixote campaign targeting entities in the Middle East\nemploys droppers disguised as Total Commander installer and CR4T backdoor in C\nand Go.\n\n### HrServ \u2013 Previously unknown web shell used in APT attack\n\nIn this report Kaspersky researchers provide an analysis of the previously\nunknown HrServ web shell, which exhibits both APT and crimeware features and\nhas likely been active since 2021.\n\n### Modern Asian APT groups\u2019 tactics, techniques and procedures (TTPs)\n\nAsian APT groups target various organizations from a multitude of regions and\nindustries. We created this report to provide the cybersecurity community with\nthe best-prepared intelligence data to effectively counteract Asian APT\ngroups.\n\n### A cascade of compromise: unveiling Lazarus\u2019 new campaign\n\nWe unveil a Lazarus campaign exploiting security company products and examine\nits intricate connections with other campaigns\n\n##### Subscribe to our weekly e-mails\n\nThe hottest research right in your inbox\n\nThreats\n\nThreats\n\n  * APT (Targeted attacks)\n  * Secure environment (IoT)\n  * Mobile threats\n  * Financial threats\n  * Spam and phishing\n  * Industrial threats\n  * Web threats\n  * Vulnerabilities and exploits\n\nCategories\n\nCategories\n\n  * APT reports\n  * Malware descriptions\n  * Security Bulletin\n  * Malware reports\n  * Spam and phishing reports\n  * Security technologies\n  * Research\n  * Publications\n\nOther sections\n\n  * Archive\n  * All tags\n  * Webinars\n  * APT Logbook\n  * Statistics\n  * Encyclopedia\n  * Threats descriptions\n  * KSB 2023\n\n\u00a9 2024 AO Kaspersky Lab. All Rights Reserved. Registered trademarks and\nservice marks are the property of their respective owners.\n\n  * Privacy Policy\n  * License Agreement\n  * Cookies\n\n##### Subscribe to our weekly e-mails\n\nThe hottest research right in your inbox\n\nNotifications\n\n", "frontpage": false}
