{"aid": "40069921", "title": "Tips for Chakra UI Developers", "url": "https://www.ayrshare.com/the-top-5-chakra-ui-tips-and-tricks-for-react-developers/", "domain": "ayrshare.com", "votes": 1, "user": "gbourne", "posted_at": "2024-04-17 20:50:15", "comments": 0, "source_title": "The Top 5 Chakra UI Tips and Tricks for React Developers", "source_text": "The Top 5 Chakra UI Tips and Tricks for React Developers\n\nSkip to content\n\nNeed to post to your users' social networks? Learn more about the Business\nPlan\n\n# The Top 5 Chakra UI Tips and Tricks for React Developers\n\nApril 16, 2024\n\nChakra UI is a popular component library for building customizable React\napplications. It provides a solid foundation of reusable UI components that\nallow you to rapidly create polished, professional-looking interfaces. Here at\nAyrshare, we recently rewrote our social media dashboard in Chakra UI \u2013 we\nwere previously using an offshoot of Bootstrap. No matter how much research\nyou do or POCs, you never know until you start the real work. Thankfully, we\nfound Chakra UI lived up to its reputation: the breadth of components, speed,\nand flexibility was fantastic.\n\nLet\u2019s now dive into what we discovered during our dashboard rebuild: our top\nfive Chakra UI tips and tricks for React developers.\n\n## 1\\. Theme Customization Made Easy\n\nOne of the greatest strengths of Chakra UI is its theme customization\ncapabilities. With just a few lines of code, you can tailor the colors,\ntypography, component styles, and other visual aspects of your entire\napplication.\n\nTo customize your theme, start by creating a custom theme object. You can\neither extend the default Chakra UI theme using the extendTheme function or\nbuild your theme from scratch. Here\u2019s an example of extending the default\ntheme with some custom colors, fonts, and component overrides:\n\n    \n    \n    import { extendTheme } from \"@chakra-ui/react\";import \"@fontsource-variable/inter\";const customTheme = extendTheme({ colors: { brand: { 100: \"#f0e8e2\", // ... 900: \"#3f2c1d\", }, }, fonts: { heading: \"'Inter Variable', sans-serif\", body: \"'Inter Variable', sans-serif\", }, components: { Button: { baseStyle: { fontWeight: \"semibold\", borderRadius: \"lg\", }, sizes: { xl: { h: \"56px\", fontSize: \"lg\", px: \"32px\", }, }, variants: { outline: { border: \"2px solid\", borderColor: \"brand.500\", color: \"brand.500\", }, }, }, },});\n\nLet\u2019s break down what\u2019s happening here:\n\n\u2013 We import the extendTheme function from Chakra UI and the Inter font from\n@fontsource-variable/inter.\n\n\u2013 We create a customTheme object using extendTheme, which allows us to extend\nthe default Chakra UI theme.\n\n\u2013 We define custom colors under the colors key, in this case, a brand color\npalette with shades from 100 to 900.\n\n\u2013 We set the fonts for headings and body text to use the Inter font.\n\n\u2013 We customize the Button component by specifying base styles, sizes, and\nvariants. The base style sets the font weight and border radius for all\nbuttons, the sizes object defines a custom xl size, and the variants object\ncreates a new outline variant.\n\nTo apply your custom theme across your application, wrap your root component\nwith the ChakraProvider and pass in your theme object:\n\n    \n    \n    import { ChakraProvider } from \"@chakra-ui/react\"; function App() { return ( <ChakraProvider theme={customTheme}> {/* Your application code */} </ChakraProvider> ); }\n\n## 2\\. Responsive Styles Made Simple\n\nChakra UI makes it a breeze to create responsive designs that adapt to\ndifferent screen sizes. It provides a convenient array syntax that allows you\nto specify styles for different breakpoints.\n\n    \n    \n    const breakpoints = { sm: \"30em\", md: \"48em\", lg: \"62em\", xl: \"80em\", \"2xl\": \"96em\", };\n\nTo apply responsive styles, simply pass an array of values to a style prop,\nwhere each value corresponds to a breakpoint:\n\n    \n    \n    <Stack direction={[\"column\", \"row\"]} spacing=\"24px\"> <Box w={[\"100%\", \"50%\", \"25%\"]} h=\"200px\" bg=\"blue.500\" /> <Box w={[\"100%\", \"50%\", \"75%\"]} h=\"200px\" bg=\"red.500\" /> </Stack>\n\nHere\u2019s how this works:\n\n\u2013 The Stack component will display its children in a column on small screens\n(the base breakpoint), and in a row on screens wider than the sm breakpoint\n(30em).\n\n\u2013 The width of the first child Box will be 100% on small screens, 50% on\nmedium screens (30em to 48em), and 25% on screens wider than 48em.\n\n\u2013 The width of the second child Box will be 100% on small screens, 50% on\nmedium screens, and 75% on screens wider than 48em.\n\nYou can also use the object syntax for more explicit control:\n\n    \n    \n    <Grid templateColumns={{ base: \"1fr\", sm: \"repeat(2, 1fr)\", md: \"repeat(3, 1fr)\", lg: \"repeat(4, 1fr)\", }} gap={6} > <GridItem bg=\"blue.500\" h=\"200px\" /> <GridItem bg=\"red.500\" h=\"200px\" /> <GridItem bg=\"green.500\" h=\"200px\" /> <GridItem bg=\"purple.500\" h=\"200px\" /> </Grid>\n\nThis Grid component uses the object syntax to define its templateColumns\nresponsively:\n\n\u2013 On the base breakpoint, it will display its children in a single column.\n\n\u2013 On the sm breakpoint, it will display its children in 2 columns.\n\n\u2013 On the md breakpoint, it will display its children in 3 columns.\n\n\u2013 On the lg breakpoint and above, it will display its children in 4 columns.\n\n## 3\\. Useful Default Style Props\n\nChakra UI provides a set of default style props that act as shorthand for\ncommonly used CSS properties. These props can save you a significant amount of\ntime and keep your code concise and readable. Here are some examples:\n\n    \n    \n    <Box m={4} p={3} bg=\"blue.500\" color=\"white\" fontSize=\"xl\" fontWeight=\"bold\" borderRadius=\"md\" boxShadow=\"base\" _hover={{ bg: \"blue.600\", color: \"white\", boxShadow: \"lg\", }} > Hover over me! </Box>\n\nLet\u2019s dissect the style props used in this `Box` component:\n\n\u2013 m={4} sets the margin on all sides to 1rem (Chakra UI uses a 4px base).\n\n\u2013 p={3} sets the padding on all sides to 0.75rem.\n\n\u2013 bg=\"blue.500\" sets the background color to the `blue.500` color from the\ntheme.\n\n\u2013 color=\"white\" sets the text color to white.\n\n\u2013 fontSize=\"xl\" sets the font size to 1.25rem.\n\n\u2013 fontWeight=\"bold\" sets the font weight to bold.\n\n\u2013 borderRadius=\"md\" sets the border radius to 0.375rem.\n\n\u2013 boxShadow=\"base` applies a base box shadow.\n\n\u2013 _hover is a pseudo style prop that applies styles on hover. In this case, it\nchanges the background color to blue.600, text color to white, and applies a\nlarge box shadow.\n\n## 4\\. Conditional Rendering Based on Screen Size\n\nChakra UI provides a handy useMediaQuery hook that allows you to conditionally\nrender components based on the current screen size. This is particularly\nuseful for creating responsive layouts that adapt to different devices. Here\u2019s\nan example:\n\n    \n    \n    import { useMediaQuery } from \"@chakra-ui/react\"; function NavBar() { const [isLargerThan768] = useMediaQuery(\"(min-width: 768px)\"); return ( <Box bg=\"blue.500\" color=\"white\" py={4}> <Container maxW=\"container.lg\"> <Flex align=\"center\" justify=\"space-between\"> <Text fontSize=\"2xl\" fontWeight=\"bold\"> My Logo </Text> {isLargerThan768 ? ( <HStack spacing={8}> <Link to=\"/\">Home</Link> <Link to=\"/about\">About</Link> <Link to=\"/contact\">Contact</Link> </HStack> ) : ( <IconButton icon={<HamburgerIcon />} aria-label=\"Open menu\" onClick={onOpen} /> )} </Flex> </Container> </Box> ); }\n\nIn this example:\n\n\u2013 We use the useMediaQuery hook to check if the screen width is larger than\n768px. The result is stored in the isLargerThan768 variable.\n\n\u2013 In the JSX, we conditionally render either a row of navigation links\n(HStack) or a hamburger menu icon (IconButton) based on the value of\nisLargerThan768.\n\n\u2013 If isLargerThan768 is true (screen width is larger than 768px), we render\nthe HStack with the navigation links.\n\n\u2013 If isLargerThan768 is false (screen width is smaller than 768px), we render\nthe IconButton with the hamburger menu icon.\n\n\u2013 The onClick prop on the `IconButton could be used to trigger the opening of\na drawer or menu on small screens.\n\n## 5\\. Accessible and Customizable Drawer Component\n\nChakra UI\u2019s Drawer component is a versatile tool for creating sidebars, modal\ndialogs, and other overlay elements. One particularly useful feature is the\nability to create a responsive drawer that adapts its behavior based on the\nscreen size.\n\nFor example, you might want a sidebar that is always open on larger screens\nbut can be toggled on smaller screens using a hamburger menu icon. Here\u2019s how\nyou can achieve this with Chakra UI:\n\nFirst, we customize the Drawer component by adding a variant called permanent.\nThis variant will make sure the sidebar will be always open:\n\n    \n    \n    import { useMediaQuery } from \"@chakra-ui/react\";function Sidebar({ isOpen, onClose }) { const [isLargerThan1024] = useMediaQuery(\"(min-width: 1024px)\"); return ( <Drawer isOpen={isOpen} placement=\"left\" onClose={onClose} variant={isLargerThan1024 ? \"permanent\" : \"\"} > <DrawerOverlay> <DrawerContent> <DrawerCloseButton /> <DrawerHeader>Sidebar</DrawerHeader> <DrawerBody>{/* Sidebar content */}</DrawerBody> </DrawerContent> </DrawerOverlay> </Drawer> );}\n\nThen, you can use this new variant in your Drawer component:\n\n    \n    \n    import { useMediaQuery } from \"@chakra-ui/react\";function Sidebar({ isOpen, onClose }) { const [isLargerThan1024] = useMediaQuery(\"(min-width: 1024px)\"); return ( <Drawer isOpen={isOpen} placement=\"left\" onClose={onClose} variant={isLargerThan1024 ? \"permanent\" : \"\"} > <DrawerOverlay> <DrawerContent> <DrawerCloseButton /> <DrawerHeader>Sidebar</DrawerHeader> <DrawerBody>{/* Sidebar content */}</DrawerBody> </DrawerContent> </DrawerOverlay> </Drawer> );}\n\nLet\u2019s break this down:\n\n\u2013 We use the useMediaQuery hook to check if the screen width is larger than\n1024px and store the result in the isLargerThan1024 variable.\n\n\u2013 The Drawer component receives the isOpen and onClose props to control its\nvisibility and provide a way to close it.\n\n\u2013 We conditionally set the variant prop of the Drawer based on the screen\nsize:\n\n\u2013 If isLargerThan1024 is true (screen width is larger than 1024px), we set the\nvariant to \"permanent\", which means the drawer will be always visible.\n\n\u2013 If isLargerThan1024 is false (screen width is smaller than 1024px), we set\nthe variant to \"\", which means the drawer will be a temporary overlay that can\nbe opened and closed, the default behavior.\u2013 The DrawerOverlay, DrawerContent,\nDrawerCloseButton, DrawerHeader, and DrawerBody components are used to\nstructure the drawer and provide accessibility features like a close button\nand proper ARIA roles.\n\n## Keep Exploring\n\nChakra UI is a flexible library that can boost your productivity when building\nReact applications. By leveraging its theme customization, responsive styles,\ndefault style props, conditional rendering, and accessible components, you can\ncreate good-looking interfaces with minimal effort.\n\nRemember, the key to mastering any tool is to explore its capabilities,\nexperiment with different approaches, and find what works best for your\nspecific use case. The examples and explanations in this article should give\nyou a solid foundation to build upon.\n\n### It's easy to get started. Start posting today!\n\nSocial media APIs to help you achieve your goals.\n\nGet Started Now\n\nAyrshare\n\n142 W 57 Street New York, NY 10019\n\nAbout Us\n\nPricing\n\nPrivacy\n\nTerms\n\nData Protection Agreement\n\nWe're Hiring\n\nLearn More\n\nBusiness Plan: Manage multiple user accounts\n\nCreator Data API\n\nAutomatically post your RSS Feed & Substack\n\nImage Generation API\n\nStatus Page\n\niOS App | Android App\n\nBlog | Podcast\n\nAyrlink Link in Bio\n\nProfessional Services\n\nSDKs & Integrations\n\nNPM Node.js Package\n\nPyPI Python Package\n\nFlutter Package\n\nOracle Integration\n\nAirtable Integration\n\nBubble Integration\n\nAll Integrations\n\nCompare\n\nHootsuite API Alternative | Buffer API Alternative | SocialPilot API Alternative | OneAll API Alternative | Sendible API Alternative | Sprout Social API Alternative | SocialOomph API Alternative | Zoho Social API Alternative | Loomly API Alternative | Later API Alternative\n\nSubscribe to the Newsletter\n\n\u00a92024 Nevermind Solutions LLC .\n\nAyrshare\n\nLast Updated November 16, 2021\n\nPRIVACY POLICYThis privacy policy (\u201cPolicy\u201d) describes how Nevermind Solutions\nLLC and its related companies (\u201cCompany\u201d) collect, use and share personal\ninformation of consumer users of this website, www.ayrshare.com and the mobile\napps in the Apple App Store and the Google Play Store (the \u201cApps\u201d).\n\nWHAT WE COLLECT\n\nWe get information about you in a range of ways.\n\nInformation You Give Us. We collect your name, email address as well as other\ninformation you directly give us in our Apps.\n\nInformation We Get From Others. We may get information about you from other\nsources. We may add this to information we get from this Apps.\n\nInformation Automatically Collected. We automatically log information about\nyou and your computer. For example, when visiting our Apps, we log your\ncomputer operating system type, browser type, browser language, pages you\nviewed, access times and information about your use of and actions on our\nApps.\n\nCookies. We may log information using \u201ccookies.\u201d Cookies are small data files\nstored on your hard drive by a website. We may use both session Cookies (which\nexpire once you close your web browser) and persistent Cookies (which stay on\nyour computer until you delete them) to provide you with a more personal and\ninteractive experience on our Apps. This type of information is collected to\nmake the Apps more useful to you and to tailor the experience with us to meet\nyour special interests and needs.\n\nUSE OF PERSONAL INFORMATION\n\nWe use your personal information as follows:\n\n  * We use your personal information to operate, maintain, and improve our sites, products, and services.\n  * We use your personal information to respond to comments and questions and provide customer service.\n  * We use your personal information to send information including confirmations, invoices, technical notices, updates, security alerts, and support and administrative messages.\n  * We use your personal information to communicate about promotions, upcoming events, and other news about products and services offered by us and our selected partners.\n  * We use your personal information to provide and deliver products and services customers request.\n\nSHARING OF PERSONAL INFORMATION\n\nWe may share personal information as follows:\n\n  * We may share personal information with your consent. For example, you may let us share personal information with others for their own marketing uses. Those uses will be subject to their privacy policies.\n  * We may share personal information when we do a business deal, or negotiate a business deal, involving the sale or transfer of all or a part of our business or assets. These deals can include any merger, financing, acquisition, or bankruptcy transaction or proceeding.\n  * We may share personal information for legal, protection, and safety purposes.\n  * We may share information to comply with laws.\n\n  * We may share information to respond to lawful requests and legal processes.\n  * We may share information to protect the rights and property of Nevermind Solutions LLC, our agents, customers, and others. This includes enforcing our agreements, policies, and terms of use.\n  * We may share information in an emergency. This includes protecting the safety of our employees and agents, our customers, or any person.\n\n  * We may share information with those who need it to do work for us.\n\nWe may also share aggregated and/or anonymized data with others for their own\nuses.\n\nINFORMATION CHOICES AND CHANGES\n\nOur marketing emails tell you how to \u201copt-out.\u201d If you opt out, we may still\nsend you non-marketing emails. Non-marketing emails include emails about your\naccounts and our business dealings with you.\n\nYou can typically remove and reject cookies from our Apps with your browser\nsettings. Many browsers are set to accept cookies until you change your\nsettings. If you remove or reject our cookies, it could affect how our Apps\nworks for you.\n\nCHANGES TO THIS PRIVACY POLICY\n\nWe may change this privacy policy at any time and post it to this site.\n\nTHIRD PARTY PLATFORMS\n\nAll third party platforms which you connect to your account have their own\nprivacy policies. By linking your account in the Apps to a third party\nplatform, you choose to share your information with that platform. One\nplatform that you can choose to link is Youtube which is accessible via the\nYouTube API. By connecting your account to YouTube, you agree to the Google\nPrivacy Policy. At any time you can revoke the Apps access to your Google\naccount by unlinking via the Apps or via the Google security settings page.\n\nClose the privacy policy.\n\nPowered by\n\nWe use cookies to improve our services and remember your preferences. By\nclicking \u201cAccept\u201d, you consent to the use of cookies.\n\nRead MoreACCEPT\n\nManage consent\n\n#### Cookies Overview\n\nThis website uses cookies to improve your experience while you navigate\nthrough the website. Out of these, the cookies that are categorized as\nnecessary are stored on your browser as they are essential for the working of\nbasic functionalities of the ...\n\n", "frontpage": false}
