{"aid": "40059385", "title": "6 months of playing with Lego bricks", "url": "https://fbruzzesi.github.io/blog/2024/04/14/6-months-of-playing-with-lego-bricks-/", "domain": "fbruzzesi.github.io", "votes": 1, "user": "sebg", "posted_at": "2024-04-17 01:22:25", "comments": 0, "source_title": "6 months of playing with lego bricks \ud83e\uddf1 - One commit at a time", "source_text": "6 months of playing with lego bricks \ud83e\uddf1 - One commit at a time\n\nSkip to content\n\n# 6 months of playing with lego bricks \ud83e\uddf1\u00b6\n\nNo I am not talking about the physical legos. Although as a kid I truly loved\nplaying with them, I am talking about collaborating in the maintenance and\ndevelopment of scikit-lego.\n\n## How it started\u00b6\n\nIf I remember correctly I got to know the library directly from a talk by\nVincent at PyData Eindhoven 2019, and in 2020 scikit-lego was providing a\ncouple of features I was looking for, namely:\n\n  * IdentityTransformer which just passes the data through, useful for pipelines, before remainder=\"passthrough\" was a thing in scikit-learn.\n  * GroupedPredictor a meta-estimator that fits a separate estimator for each group in the input data.\n\nI was starting out in my career and certainly I was not confident enough to\ncontribute to open source projects, at best I was reporting issues when I\nfound them in OSS libraries. Nevertheless I often found/find myself looking up\nat the source code of the libraries I use, trying to understand how specific\nfeatures work and how they are implemented.\n\nThis is certainly not necessary, but it works for me as a way to learn and\nunderstand better the tools I use when in doubt about something. Sometimes it\nis even faster than reading the documentation in search of edge cases.\n\nNow having a bit more experience and confidence, as well as being a scikit-\nlego user for a few years, I found myself answering a couple of questions in\nthe issue section of the repository.\n\nUntil we got to the point in which Vincent gently offers to bother him at\nPyData Amsterdam 2023:\n\nwhich I certainly did. That started a conversation with Vincent and Matthijs,\nthe two creators of scikit-lego, which led to being invited as a project\nmaintainer.\n\nThis is not an article about OSS (maybe I will write one in the future), all I\nwant to say on the reasons why I (kind of) activately searched for such\nopportunity: I enjoy the process of building and maintaining developers tools,\nand until that point my target audience has never been larger than my company\nfor internal work, and a handful of people in the open source community.\n\nscikit-lego was a chance to maintain a library that has a fairly large reach\nin the data science community, yet it is not too big that I would feel\noverwhelmed by the amount of tech debt before being able to contribute, nor\nthat the responsibility and pressure to maintain it would be too high. It\nhonestly felt like the perfect opportunity to start contributing to a project\nthat I use and love.\n\n## The first few contributions\u00b6\n\nWhen I joined as a mainter the codebase had roughly ~7k lines of codes, and\nuntil that moment I had been mostly a user, and certainly I was not aware of\nmost of the features or details of the library.\n\nThe first good opportunity to contribute and explore the library in more\ndetail was made possible by a few rendering bugs in the documentation, caused\nby a mixed style of numpy and sphinx usage in the docstrings. I felt like the\ndocs were deserving more love and attention, and that was a low hanging fruit\nto start learning more about features I never used before.\n\nThat played out quite well (for me \ud83d\ude07 ^1):\n\n  * I discovered a few cool features I was not aware of.\n  * I learned more about the implementation details of the library.\n  * Finally, I was able to make a list of features I wanted to implement in the future as well as a list of issues I wanted to tackle.\n\n## My favourite feature\u00b6\n\nUp to recent times, my favourite feature remained the GroupedPredictor meta-\nestimator, which I found very useful in multiple projects I worked on.\n\nThat was until... a quite relevant bug was reported by a user.\n\nThe TL;DR of the bug is: the class is not working as expected in\nclassification tasks if the GroupedPredictor is initialized with some set of\nparameters (when shrinkage is used).\n\nThat led to a deep dive into the codebase, some debugging, and a few\ndiscussions, as while taking a look at the code I realized that further\nimprovements could be made to the class. To mention the most relevant ones:\n\n  * Parallel fitting of the estimators for each group.\n  * Fallback methods to the first available parent group instead of a global model.\n\nHowever, that would have led to either a huge breaking change in the API or a\nmessy implementation of if-else cases, which would have been hard to both\nmaintain and clearly explain in full detail in the documentation. Therefore,\nwe decided to move forward with an entire new class and implementation from\nscratch.\n\nEnter the HierarchicalPredictor class \ud83c\udf89\n\nThis is a more flexible and capable (and so far bug free) base class that\nimplements the improvements just mentioned and from which two task specific\nclasses, HierarchicalClassifier and HierarchicalRegressor, inherit.\n\nFor these reasons, I had to change my mind on what my favourite feature is \ud83d\ude09\n\n## The best part of it all \u2728\u00b6\n\nPersonally there are a few good reasons why I love to work on this project.\n\nscikit-lego allows to implement features that may appear to be very\nexperimental, yet they have a somewhat clear use case in practice. This kind\nof freedom in thought and implementation is something I value a lot, and it is\nnot always possible.\n\nSecondly we move fast calmly and (may) break things:\n\n  * Calmly because there is no pressure to release a new version every day-week-month. We release whenever new features are implemented, and there is no deadline to meet for that.\n  * Break things, we actually try not to, yet sometimes it happens if that means we can improve the codebase.\n\n## Conclusion\u00b6\n\nIf you are a data scientist or ML engineer, I believe we have a lot of cool\nfeatures and neat tricks to offer you.\n\nAnd if you like building tools for other developers, I believe scikit-lego is\na great place to start.\n\nHappy coding! \ud83d\ude80\n\n  1. Vincent had to review two not so nice PRs of mine. #586 and #589 \u21a9\n\nMade with Material for MkDocs\n\n", "frontpage": false}
