{"aid": "40063204", "title": "Essential Database Design: Five Fields Every Table Must Have", "url": "http://www.dipkumar.dev/posts/essential-db-design-1/", "domain": "dipkumar.dev", "votes": 3, "user": "immortal3", "posted_at": "2024-04-17 11:44:36", "comments": 0, "source_title": "Essential Database Design: Five Fields Every Table Must Have", "source_text": "Essential Database Design: Five Fields Every Table Must Have | Becoming The Unbeatable against AGI\n\nHome \u00bb Posts\n\n# Essential Database Design: Five Fields Every Table Must Have\n\nApril 17, 2024 \u00b7 4 min \u00b7 Me\n\n# Essential Fields#\n\nBe it relational or not, every table should have these 5 fields:\n\n  1. created_at (default now())\n  2. updated_at (default now())\n  3. deleted_at (default null)\n  4. created_by (not null)\n  5. updated_by (not null)\n\n## Why should you include this fields ?#\n\n### Auditability#\n\nIncorporating these fields into every table significantly simplifies the\nauditing process. They enable you to track who created or modified an entry\nand when these actions occurred. It\u2019s important to note that while this\ndoesn\u2019t provide a complete audit trail, not all tables require exhaustive\naudit trails. These fields deliver sufficient oversight for many applications.\n\n### Soft Delete Capability#\n\nUtilizing the deleted_at field for soft deletions boosts data recovery and\nerror correction capabilities, enabling businesses to effortlessly restore\nmistakenly deleted data or perform historical data analysis without relying on\nintricate backup systems. Additionally, you can set up a cron job to transfer\ndata to an archive table periodically. For instance, you might move all data\nmarked as deleted over three months ago to cold storage. This strategy helps\nmaintain manageable table sizes by systematically archiving older records.\n\n### Row Level Security/Permissions (RLS)#\n\nThese fields might seem superfluous at first, but they are incredibly useful\nfor controlling user access to specific rows within a table. For instance, you\nmay want to prevent a user from updating a row that was created by someone\nelse. By using these fields, you can define such permissions clearly and\neffectively. Furthermore, they enable more nuanced scenarios\u2014for example,\nallowing a user to restore a deleted row only if they were the original\ncreator, while still permitting any user to delete a row. This level of\ndetailed control ensures both data integrity and adherence to specified access\nprotocols.\n\n### Avoiding Nightmares: A Cautionary Tale#\n\nImagine you\u2019ve deployed a cron job in the background designed to update\ncertain attributes in your table based on specific business logic. It ran\nflawlessly during the staging tests, so you pushed it to production without\nfurther validation. But then, disaster strikes: the script modifies incorrect\ndata. Fortunately, the updated_at and updated_by fields can come to your\nrescue (though not always). To identify the affected data, you can execute a\nquery like:\n\n    \n    \n    SELECT * FROM items WHERE updated_at BETWEEN {script_begin} AND {script_end} AND updated_by = {script_user};\n\nThis allows you to pinpoint the exact entries altered during the time the\nscript ran, providing a straightforward way to assess and rectify the\nunintended changes. This is a prime example of how such fields can help\nmitigate potential disasters, helping you manage crises more effectively.\n\n## ORM: Django#\n\nif you\u2019re using some framework for accessing db like ORM in your codebase, it\nbecomes easier to add these fields to your tables and helper queries. For\nexample, I am showcasing you how to add these fields in django (python).\n\n### 1\\. Create mixin class#\n\n    \n    \n    from django.db import models from django.utils import timezone from django.conf import settings class AuditFieldsMixin(models.Model): created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) deleted_at = models.DateTimeField(null=True, blank=True) created_by = models.ForeignKey(settings.AUTH_USER_MODEL, related_name=\"%(class)s_created_by\", on_delete=models.SET_NULL, null=True) updated_by = models.ForeignKey(settings.AUTH_USER_MODEL, related_name=\"%(class)s_updated_by\", on_delete=models.SET_NULL, null=True) class Meta: abstract = True def soft_delete(self): self.deleted_at = timezone.now() self.save()\n\nWhat\u2019s going on here? We\u2019re defining fields that automatically capture when\nand by whom a record was created or updated. Plus, we threw in a soft_delete\nmethod for good measure, so you can \u201cdelete\u201d records without actually losing\nthem.\n\n#### Slap the Mixin on a Model#\n\nUsing this mixin is as easy as pie. Just inherit from AuditFieldsMixin in your\nmodel:\n\n    \n    \n    class Item(AuditFieldsMixin): name = models.CharField(max_length=255) description = models.TextField() price = models.DecimalField(max_digits=5, decimal_places=2) # Imagine there are other fields here too!\n\n### 2\\. QuerySets That Ignore Deleted Stuff#\n\nYou don\u2019t want your default queries pulling up deleted records, right? Let\u2019s\nfix that by tweaking the model\u2019s manager to ignore anything that\u2019s been soft-\ndeleted:\n\n    \n    \n    class AuditQuerySet(models.QuerySet): def active(self): return self.filter(deleted_at__isnull=True) def deleted(self): return self.filter(deleted_at__isnull=False) class AuditManager(models.Manager): def get_queryset(self): return AuditQuerySet(self.model, using=self._db).active() class Item(AuditFieldsMixin): objects = AuditManager() all_objects = models.Manager() # This lets you access ALL records, even the \"deleted\" ones name = models.CharField(max_length=255) description = models.TextField() price = models.DecimalField(max_digits=5, decimal_places=2) # More fields, potentially\n\n## Conclusion#\n\nWhy do you need conclusion ? This is ain\u2019t generated by GPT. I am just a human\nbeing trying to help you.\n\nIf you have any past expirences of getting saved by some random fields, please\nlet me know. I would be happy to learn.\n\nSend me an email at pate@ + dipkumar.dev\n\n  * database\n  * db\n  * design\n\n\u00a9 2024 Becoming The Unbeatable against AGI Powered by Hugo & PaperMod\n\n", "frontpage": false}
