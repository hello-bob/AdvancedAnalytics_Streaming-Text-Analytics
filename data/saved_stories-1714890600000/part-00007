{"aid": "40259606", "title": "An alternative proposal for CSS masonry \u2013 Blog \u2013 Chrome for Developers", "url": "https://developer.chrome.com/blog/masonry", "domain": "chrome.com", "votes": 1, "user": "tambourine_man", "posted_at": "2024-05-04 19:03:26", "comments": 0, "source_title": "An alternative proposal for CSS masonry | Blog | Chrome for Developers", "source_text": "An alternative proposal for CSS masonry | Blog | Chrome for Developers\n\ndeveloper.chrome.com uses cookies from Google to deliver and enhance the\nquality of its services and to analyze traffic. Learn more.\n\n  * English\n  * Deutsch\n  * Espa\u00f1ol \u2013 Am\u00e9rica Latina\n  * Fran\u00e7ais\n  * Indonesia\n  * Italiano\n  * Nederlands\n  * Polski\n  * Portugu\u00eas \u2013 Brasil\n  * Ti\u1ebfng Vi\u1ec7t\n  * T\u00fcrk\u00e7e\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * \u05e2\u05d1\u05e8\u05d9\u05ea\n  * \u0627\u0644\u0639\u0631\u0628\u064a\u0651\u0629\n  * \u0641\u0627\u0631\u0633\u06cc\n  * \u0939\u093f\u0902\u0926\u0940\n  * \u09ac\u09be\u0982\u09b2\u09be\n  * \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22\n  * \u4e2d\u6587 \u2013 \u7b80\u4f53\n  * \u4e2d\u6587 \u2013 \u7e41\u9ad4\n  * \u65e5\u672c\u8a9e\n  * \ud55c\uad6d\uc5b4\n\nSign in\n\n  * Blog\n\n  * On this page\n  * Should masonry be part of grid?\n\n    * Performance\n    * What do we do about the things that don't make sense in each layout method?\n  * An alternative proposal\n\n    * Classic masonry layout\n    * Use grid type track sizing for different column widths\n    * Additional track sizing for masonry\n    * Allow content to span columns, and place items on the masonry layout\n    * Sub-masonry or subgrid adopting masonry tracks\n  * Conclusion\n\n  * Chrome for Developers\n  * Blog\n\n# An alternative proposal for CSS masonry\n\nbookmark_borderbookmark Stay organized with collections Save and categorize\ncontent based on your preferences.\n\n  * On this page\n  * Should masonry be part of grid?\n\n    * Performance\n    * What do we do about the things that don't make sense in each layout method?\n  * An alternative proposal\n\n    * Classic masonry layout\n    * Use grid type track sizing for different column widths\n    * Additional track sizing for masonry\n    * Allow content to span columns, and place items on the masonry layout\n    * Sub-masonry or subgrid adopting masonry tracks\n  * Conclusion\n\nRachel Andrew\n\nThe Chrome team is keen to see an implementation of masonry type layouts on\nthe web. However, we feel that implementing it as part of the CSS Grid\nspecification as proposed in the recent WebKit post would be a mistake. We\nalso feel that the WebKit post argued against a version of masonry that no one\nwas proposing.\n\nTherefore, this post aims to explain why we at Chrome have concerns about\nimplementing masonry as part of the CSS Grid Layout specification, and clarify\nexactly what the alternate proposal enables. In short:\n\n  * The Chrome team is very keen to unblock masonry, we know it's something developers want.\n  * Adding masonry to the grid specification is problematic for reasons other than whether you think masonry is a grid or not.\n  * Defining masonry outside of the grid specification does not prevent multiple track sizes for masonry, or the use of properties such as alignment or gaps, or any other features used in grid layout.\n\n## Should masonry be part of grid?\n\nThe Chrome team believes that masonry should be a separate layout method,\ndefined using display: masonry (or another keyword should a better name be\ndecided upon). Later in this post, you can see some examples of what that\ncould look like in code.\n\nThere are two related reasons why we feel that masonry is better defined\noutside of grid layout\u2014the potential of layout performance issues, and the\nfact that both masonry and grid have features that make sense in one layout\nmethod but not the other.\n\nNote: This post attempts to highlight the core problems rather than give a\ncomplete and detailed explanation of each. Visit the linked issues for full\ndetails.\n\n### Performance\n\nGrid and masonry are opposite in terms of how the browser deals with sizing\nand placement. When a grid is laid out, all items are placed before layout and\nthe browser knows exactly what is in each track. This enables the complex\nintrinsic sizing that's so useful in grid. With masonry, the items are placed\nas they are laid out, and the browser doesn't know how many are in each track.\nThis isn't a problem with all intrinsic sized tracks or all fixed sized tracks\nbut is if you mix fixed and intrinsic tracks. To get round the problem, the\nbrowser needs to do a pre-layout step of laying out every item in every\npossible way to get measurements, with a large grid this would contribute to\nlayout performance issues.\n\nTherefore, if you had a masonry layout with a track definition of grid-\ntemplate-columns: 200px auto 200px\u2014a very common thing to do in grid\u2014you start\nto run into problems. These problems become exponential once you add subgrids.\n\nThere is an argument that most people won't run into this, however we already\nknow that people do have very large grids. We don't want to ship something\nthat has limits to how it can be used, when there is an alternative approach.\n\n### What do we do about the things that don't make sense in each layout\nmethod?\n\nWhen flexbox and grid became part of CSS, developers often felt that they\nbehaved in an inconsistent way. The inconsistency they were experiencing was\nbecause of long-held assumptions about how layout worked, based on block\nlayout. Over time, developers have started to get an understanding of\nformatting contexts. When we switch into a grid or flex formatting context\nsome things behave differently. For example, you know that when you are in\nflexbox, not all of the alignment methods are available, because flexbox is\none-dimensional.\n\nBundling masonry into grid breaks this clear link between formatting context\nand availability of things like alignment properties, which are defined in the\nBox Alignment specification per formatting context.\n\nIf we decide to deal with the performance issue outlined previously by making\nmixed intrinsic and fixed track definitions illegal in masonry, then you will\nhave to remember that a very common pattern for grid layouts doesn't work for\nmasonry.\n\nThere are also patterns that would make sense in masonry, for example grid-\ntemplate-columns: repeat(auto-fill, max-content), because you don't have cross\nconstraints, but need to remain invalid in grid. The following is a list of\nproperties that we expect to behave differently or have different valid\nvalues.\n\n  * grid-template-areas: In masonry you can only specify the initial row in the non-masonry direction.\n  * grid-template: The shorthand would need to account for all differences.\n  * Track sizing values for grid-template-columns and grid-template-rows due to differences in legal values.\n  * grid-auto-flow doesn't apply to masonry and masonry-auto-flow doesn't apply to grid. Merging them would create problems of things that are invalid due to the layout method you are in.\n  * Grid has four placement properties (grid-column-start and so on), masonry only has two.\n  * Grid can use all six of the justify-* and align-* properties, but Masonry uses only a subset like flexbox.\n\nThere will also be a requirement to specify what happens in all of the new\nerror cases caused by developers using a value that isn't valid in grid-with-\nmasonry or grid-without-masonry. For example, it's valid to use grid-template-\ncolumns: masonry or grid-template-rows: masonry but not both at once. What\nhappens if you do use both at once? These details have to be specified so that\nall browsers do the same thing.\n\nThis all becomes complicated from a specification point of view, now and in\nthe future. We will need to ensure that everything takes into account masonry,\nand whether it does or does not work in masonry. It's also confusing from the\npoint of view of developers. Why should you need to keep in your head that\ndespite using display: grid some things don't work on account of using\nmasonry?\n\n## An alternative proposal\n\nAs already mentioned, the Chrome team would like to define masonry outside of\nthe grid specification. This does not mean that it would be limited to a very\nsimple layout method with identical column sizes. All of the demos in the\nWebKit post would still be possible.\n\nNote: The examples use display: masonry and masonry-* properties, there's a\nseparate issue as to whether masonry is the best name to use.\n\n### Classic masonry layout\n\nWhen most people think of masonry, they think of a layout with multiple, equal\nsized columns. This would be defined using the following CSS, which needs a\nline less code than the equivalent grid bundled version.\n\n    \n    \n    .masonry { display: masonry; masonry-template-tracks: repeat(auto-fill, minmax(14rem, 1fr)); gap: 1rem; }\n\n### Use grid type track sizing for different column widths\n\nOther than the previously mentioned issue with mixed intrinsic and fixed track\nsizing, you could use all of the track sizing that you love from grid. Such as\nthe example from the WebKit blog post, a pattern of repeating narrow and wider\ncolumns.\n\n    \n    \n    .masonry { display: masonry; masonry-template-tracks: repeat(auto-fill, minmax(8rem, 1fr) minmax(16rem, 2fr)) minmax(8rem, 1fr); gap: 1rem; }\n\n### Additional track sizing for masonry\n\nThere are additional track sizing options that we don't allow in grid because\nof the fact that grid is a two-dimensional layout method. These would be\nuseful in masonry but it would be confusing if they then didn't work in grid.\n\nAuto-filling max-content sized tracks.\n\n    \n    \n    .masonry { display: masonry; masonry-template-tracks: repeat(auto-fill, max-content); gap: 1rem; }\n\nAuto-filling auto sized tracks, which will create tracks of the same size,\nauto-sized to accommodate the largest one.\n\n    \n    \n    .masonry { display: masonry; masonry-template-tracks: repeat(auto-fill, auto); gap: 1rem; }\n\n### Allow content to span columns, and place items on the masonry layout\n\nThere's no reason not to have content spanning columns in a separate masonry\nspecification. This might use a masonry-track property, being a shorthand for\nmasonry-track-start and masonry-track-end as you only have one dimension to\nspan things when in a masonry layout.\n\n    \n    \n    .masonry { display: masonry; masonry-template-tracks: repeat(auto-fill, auto); }\n    \n    .span-2 { masonry-track: span 2; /* spans two columns */ }\n    \n    .placed { masonry-track: 2 / 5; /* covers tracks 2, 3, and 4 */ }\n\n### Sub-masonry or subgrid adopting masonry tracks\n\nThis could be supported with a separate masonry specification, again with the\nproviso that mixed intrinsic and fixed sized tracks are disallowed. Exactly\nwhat that looks like will need to be defined. We see no reason that this\nwouldn't work.\n\n## Conclusion\n\nWe would love to get to a point of a specification that can be shipped\ninteroperably. However, we want to do that in a way that works well now and in\nthe future, and that can be relied upon by developers. The only way to deal\nwith the performance issues outlined, would be to make the second issue\u2014that\nof having parts of grid illegal in masonry\u2014worse. We don't think that's a good\nsolution, especially when it's possible to have all the grid features you want\nwhile keeping the things that are different clearly separated.\n\nIf you have any feedback, join the discussion in Issue 9041.\n\nThanks to Bramus, Tab Atkins-Bittner, Una Kravets, Ian Kilpatrick, and Chris\nHarrelson for review of this post and the discussions that informed it.\n\nExcept as otherwise noted, the content of this page is licensed under the\nCreative Commons Attribution 4.0 License, and code samples are licensed under\nthe Apache 2.0 License. For details, see the Google Developers Site Policies.\nJava is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2024-04-30 UTC.\n\n", "frontpage": false}
