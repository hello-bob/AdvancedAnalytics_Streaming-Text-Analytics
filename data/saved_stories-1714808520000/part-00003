{"aid": "40252353", "title": "If someone can watch it, they can steal it: securing video content on the web", "url": "https://www.mux.com/blog/if-someone-can-watch-it-they-can-steal-it-securing-video-content-on-the-internet", "domain": "mux.com", "votes": 3, "user": "mmcclure", "posted_at": "2024-05-03 21:02:15", "comments": 0, "source_title": "If someone can watch it, they can steal it: securing video content on the internet | Mux", "source_text": "If someone can watch it, they can steal it: securing video content on the internet | Mux\n\nSkip to content\n\nMux Logo\n\nBack to Blog Home\n\nSign upSign up\n\nGet a demoGet a demoLog inLog in\n\nPublished on May 1, 2024 (2 days ago)\n\n# If someone can watch it, they can steal it: securing video content on the\ninternet\n\nBy Dylan Jhaveri \u2022 16 min read \u2022 Engineering\n\nIf someone can watch your video, they can steal your video. A sufficiently\nmotivated attacker can find a way to steal your videos if they really want to.\nLike content moderation, it's another arms race where your job is to put up\nthe best defense you can while managing the cost and complexity \u2014 making it\nhard enough for someone to steal your videos that they decide it's not worth\ntheir time.\n\n## How to steal video content (not a tutorial...)\n\nIn order to protect yourself from video thieves, you'll have to first\nunderstand how people try to steal video content on the internet. Let's talk\nabout the different attack vectors that you should keep in mind.\n\n### Hotlinking/embedding\n\nSomeone can grab the URL from the video element that's in your page. This is\ntrivial in a web browser: open the developer tools and you\u2019ll see it all right\nthere, either on the video element itself or with a few clicks in the network\ntab. We're not talking about grabbing the URL from the URL bar at the top of\nthe browser window. You can protect users from accessing your web application\nin a number of ways. What we're talking about is someone logging in, loading a\nweb page that has a video player, and then using the developer tools to grab\nthe URL to where the video is hosted. It's slightly more inconvenient on\nmobile apps, but still fairly easy. All it takes is monitoring the network\nactivity of the app and grabbing the URL. An attacker can take that URL and\nembed it in their own site. Then promote their site, getting a bunch of\ntraffic to their sketchy landing page papered with ads, they're making ad\nrevenue and you\u2019re footing the video bill. Not great for you.\n\n### Downloading\n\nDownloading videos is fairly easy too. Non-adaptive formats like MP4 are the\neasiest, but even with adaptive formats like HTTP Live Streaming (HLS) it's\neasy enough to download the video segments and stitch them together to\nreconstruct the full video. There are even browser extensions and CLI tools\nthat help folks do this.\n\nYou might not care about users downloading videos. You might even allow users\nto download videos, but you'll still want to control that action and make sure\nonly authorized users are downloading.\n\n### Screen-recording software\n\nOn desktop computers and mobile devices, it takes only a few clicks to record\nthe screen and audio. Later in this post, we'll talk about how you can protect\nyourself from this.\n\n### Physical screen recording\n\nBack in the '90s, people could go to a movie theater with a camcorder and\nsimply record the big screen. Physical screen recording is the modern-day\nequivalent \u2014 only you can't kick them out of the theater, because they're\ndoing it in their own home.\n\nTry as you might, there is no surefire way to stop this attack vector. Someone\ncan play your video and point a separate physical recording device at their\nscreen. They can light the room just right and angle the camera carefully to\navoid any reflection from the screen as they record.\n\n## What can you do to protect your video content?\n\nThere's a whole spectrum of options, starting with no protection at all (which\nis honestly fine for many use cases) all the way up to very strong protection.\nBefore we get into it, keep in mind that protecting your content is not free.\nAnd we don't only mean free in terms of dollars, there are multiple costs to\nconsider:\n\n  * Development: Every layer of protection you add will take time to implement.\n  * Maintenance: More code, more maintenance. Anything you build today will need some level of maintenance. Solutions like Digital Rights Management (DRM), for example, are a constant moving target, requiring continuous code updates to make sure your DRM-protected videos can still be played when new OS versions are released.\n  * Playback errors: This is often overlooked, but every time you add a layer of security to protect your video from unauthorized viewers, some legitimate users will get an error when they try to watch. This can be minimized with thorough testing, attention to detail, and close monitoring but inevitably, you can expect to see some increase in your playback error percentage\n  * Dollars: Some tools to lock down your video content cost actual money. Unlike the others, at least this cost is easy to measure!\n\nBefore you start slapping DRM on all your videos, consider the cost, the\nrisks, and who you are protecting. Every software project comes down to\nunderstanding tradeoffs, risks and benefits, and deciding how to protect your\nvideo content is no different.\n\nThere's another potential line of defense: even if you can't prevent someone\nfrom stealing your video, if you can identify who they are you can mitigate\nthe impact by banning the user from your product or pursuing legal action. If\nyou're dealing with multiple people stealing your video content, this can turn\ninto a time-consuming game of whack-a-mole: banning one user, only for another\nvideo thief to pop up.\n\nLet's explore some of the different ways you can protect your video content.\n\n### Control access with signed URLs\n\nThis is the most basic form of content protection. When a user loads up a\nvideo in your application, the video URL contains an individual access token:\nit can only be accessed under certain constraints. This is most commonly used\nto add a time-based restriction (roughly the length of the video itself, or a\nbit longer if you expect users to be scrubbing back and forth). Signed URLs\nfor video work the same way as signed URLs to access a file on Amazon S3 or\nsimilar services. After authenticating and authorizing the user, you generate\na signed token on your server and pass that token down to the client. That\ntoken will expire at some point in the future and when it does, the client\nwill no longer be able to use it. If they want to watch again they have to go\nback to your server and request a new signed URL.\n\nSigned URLs are fairly straightforward to implement and generating signed\ntokens on the server side doesn't require any network requests, so your\napplication can generate them quickly and easily without much extra latency to\nfulfill the user's request.\n\nRemember how we talked about increased playback errors? With signed URLs, you\nhave to think through a few different scenarios to reduce those errors. Let's\nsay someone opens a browser tab, loads your video, starts playing, then pauses\nto go get lunch ... and comes back several hours later and hits the play\nbutton again. That URL might have expired so you need to catch that error, get\na refreshed URL from your server, and re-load the player (without losing the\ntimestamp of where they were in the video).\n\n#### Mitigation with signed URLs\n\nA user can still take your signed URL and share it with someone else \u2014 and\nthat person can use the exact same URL to watch the video (until the URL\nexpires). But one under-used feature of signing URLs is that you can embed a\nsession ID or a user ID into the token to help you identify the person who\nleaks a signed URL.\n\nImagine this scenario:\n\n  * You are using signed URLs and your app requires login.\n  * Users log in, you give them a signed URL, and they can watch a video.\n  * You notice that your video is being talked about on Reddit or another site where you did not post it.\n  * As you dig in, you find that someone took your signed URL and shared it publicly, and now a bunch of people are using that URL directly \u2014 bypassing your website entirely.\n\nAfter you find the URL that was shared, you can grab the token from the URL\nquery param, decode it, pull out an identifier like user_id or session_id, and\nuse that to identify the bad actor.\n\n### Block viewers outside of your domain with Referrer protection\n\nThis applies to playing videos in web browsers (not native applications). When\nbrowsers load a video URL, the browser sends a Referer header. One thing you\ncan do on the server side is make sure the Referer header on the request\nmatches the domain of your website. If it doesn't, your server can then reject\nthe request.\n\nThis gives you one layer of protection against people grabbing the playback\nURL and putting it on their own site. It's not a cure-all because referrers\ncan be easily spoofed. Someone who steals your video and wants to make it\nappear that they are watching from a certain domain can do that fairly easily.\nStill, it's a handy protective measure against one common attack vector: a\nnefarious user who steals your video to embed it on their own site (let's call\nit mybadsite.com). When the rest of the world visits mybadsite.com, their\nbrowser will send mybadsite.com as the referrer and you can block those\nrequests server-side.\n\nHowever, requests from mobile apps do not automatically send referrer headers.\nIf you are playing your videos in a mobile app, you have to allow requests\nthat do not contain referrer headers, so you're out of luck with this\napproach. Here's another thing to keep in mind: if you want to allow users to\nAirPlay or Chromecast your videos, then the Referer header is going to be a\ndifferent value (not the website where they initiated the AirPlay or casting).\nSo make sure you\u2019re allowing domains: mediaservices.cdn-apple.com (for Apple\u2019s\nAirPlay) and www.gstatic.com (for Chromecast).\n\nOne way to do referrer protection is in combination with signed URLs, so you\nbake in the allowed referrers as part of the claims in the signed token, and\nverify the referrer server-side.\n\n### Eliminate unwanted clients with User-Agent Filtering\n\nSimilar to referrer protection, you can disallow requests based on user-agent.\nYou may want to only allow certain clients, like browsers and phones, and\ndisallow user-agents like VLC media player or other unknown agents that might\nbe attempting to play your video from a client that you don't want people\nusing. Similar to the Referer header, the User-Agent header is a self-reported\nvalue by the client, so you can't trust its authenticity and it can be easily\nspoofed.\n\nSimilar to referrer protection, this is often paired with signed URLs. In your\nsigned token you can encode the allowed user agents and verify the token and\nuser-agent server-side.\n\n### Encrypt with ClearKey and HLSe\n\nOK, let's get into some more advanced options. You might be thinking: can I\nencrypt the video content so that only my intended clients can decrypt it? Of\ncourse you can! But when you encrypt your content, you have to think about how\nthe client receives the keys necessary for decrypting. There is a pattern with\nClearKey and HLSe where you encrypt the video content using standard AES-128\nencryption, send it over the network, and then the client decrypts it after\nit's downloaded. To do that, the client needs to get the keys for decrypting \u2014\nso you send them the keys over the network. It's kind of like putting your\nvaluables into a briefcase, locking the briefcase with a key, and then giving\nsomeone the briefcase and the key together. Did you accomplish anything?\n\nWell, kind of. You have encrypted the content \"at rest.\" So if someone gains\naccess to your file system that stores the video segments, they won't be able\nto decrypt the videos without the keys. This strategy was much more common in\nthe past, when not all devices were able to use HTTPS for both the keys and\nthe chunk segments. Nowadays HTTPS is the default for everything, making this\nstrategy much less practical. This gives you some protection, but not much.\n\n### Paint it black with DRM solutions\n\nAll the options up until now provide zero protection against software-level\nscreen recording and little protection against downloading. The only way to\nprotect your content from these attack vectors is to use a DRM solution like\nFairPlay, Widevine, or PlayReady. In broad strokes, here's how DRM works. Your\nencrypted video content gets downloaded by a client and the client makes extra\nrequests to a licensing server to download the keys. The software on your\ndevice receives the keys and decrypts the content in a secure way that is\nbuilt into the device's operating system \u2014 so the decryption keys aren't\nexposed directly to the client. The decryption can happen at multiple levels\nbelow the application: the operating system, the secure memory context in the\nOS, or the hardware itself. The OS enforces the security around screenshots,\nscreen recording, and downloading. If you're playing a Netflix video on your\nlaptop and try to screen-record it, you'll see black. If you're watching\ntelevision content on YouTube TV on your phone and attempt a screen recording,\nthen (you've guessed it) you'll see black.\n\nDon't believe me? Try it yourself.\n\nThe video content itself is encrypted over the network, and the operating\nsystem is taking extra steps to obtain the keys from a licensing server,\ndecrypt the video bitstream, and play it for you.\n\n### Trap bad actors with forensic watermarking\n\nElon Musk famously identified who at Tesla was leaking confidential\ninformation to the press. Normally when an email is sent to all employees,\nthey receive the exact same text \u2014 but this time everyone got a slightly\ndifferent email. Between different sentences there was either one or two\nspaces, creating a unique watermark on every email. When emails were leaked to\nthe press, Tesla could quickly identify who shared them. This follows the same\nprinciple as forensic watermarking. Normally when you deliver a video to a\nlarge group of people, you send everyone the same video. With a forensic\nwatermarking strategy, you ever-so-slightly alter the video for each\nindividual person \u2014 in a way that is invisible or otherwise imperceptible.\nThis doesn't prevent your video from being stolen, but it does allow you to\nidentify who leaked it so you can ban their account or pursue legal action.\n\nThe downside of forensic watermarking is that it's much more expensive than\nother protections. You can't simply encode the video once and send the same\nvideo to every viewer. There are different approaches but you will need at\nleast two encodes and logic on the delivery side to create a unique pattern of\nA- and B-encoded segments for each specific user.\n\nThat doesn't mean it's not valuable. For the most sensitive video content,\nforensic watermarking might be worth it. And as more people do more things\nwith video online, we might see more use cases for forensic watermarking in\nthe future.\n\n## Bottom line: How should you protect your video?\n\nThere's no catch-all for every use case. The right answer is \"it depends.\" But\nthis post should help you understand the tools that are available and\ntradeoffs for each approach.\n\nThe solutions you choose will depend on the type of content you're streaming\nand how motivated attackers are to steal it. Ultimately, you need to balance\nthe different tradeoffs that come with adding layers of security. The more\nsecurity you have, the higher the development and maintenance costs, the more\nplayback errors you will see, and the more it will cost in dollars.\n\n## Mux's video security toolkit\n\nThe first option is no security, with Public Playback IDs. If you're building\na brand new app, or you're just kicking the tires with Mux, start here. No\nneed to add complexity until you know you'll need it.\n\nSee Mux's secure video playback guide for more information on the following\noptions:\n\n  * Time-based signed URLs. This works the same as signed URLs on Amazon S3. Use a signing token server-side to generate a time-based signature.\n  * Signed URLs with referrer production. This uses a Playback Restriction with referrer settings.\n  * Signed URLs with user-agent protection. This uses a Playback Restriction with user_agent settings.\n  * Signed URLs with custom parameters. This will help you identify the culprit if a signed URL is leaked.\n\nWant to talk to us about DRM? Reach out here about Mux's DRM offering.\n\n## Written By\n\n### Dylan Jhaveri \u2013 Director of Self Service\n\nSoftware Engineer and cold water surfer. Previously startup co-founder. Trying\nto find the best cheeseburger in San Francisco.\n\n## Leave your wallet where it is\n\nNo credit card required to get started.\n\nSign upSign up\n\n## Read more like this\n\nPublished on January 31, 2024 \u2022 By Colton Karoses\n\n### AI models on CPUs: accurate audio transcriptions without breaking the bank\n\nPublished on March 8, 2023 \u2022 By Justin Sanford\n\n### Edge Config: first line of defense against script kiddies\n\nPublished on November 1, 2022 \u2022 By Darius Cepulis\n\n### How we made Mux Player\u2019s loading feel great\n\n### Check out our newsletter\n\nA monthly-ish digest of all the best new blog posts and features\n\nMux Logo\n\n## United States\n\n50 Beale Street, Floor 9 San Francisco, CA, 94105 510-402-2257\n\n## United Kingdom\n\n34-37 Liverpool Street London, EC2M 7PP\n\nContact usMux on TwitterMux on LinkedInMux on GitHub\n\n## Platform\n\n### Mux Video\n\nOverviewFeaturesOn-DemandLiveInteractiveEncodingPricing\n\n### Mux Data\n\nOverviewMonitoringPricing\n\n### Mux Player\n\nOverview\n\nBeta features\n\n## Docs and Tools\n\nMux Video docsMux Data docsMux Player docsAPI referenceWebhook referenceOpen\nsource software\n\n### Integrations\n\nNodeRubyPHPPythonElixirGoSvelteKitNext.jsRemix.jsGenerative AI\n\n## Company\n\nTeamJobsBlogCustomersResourcesPartnersSupportDownload Press Kit\n\n## More Video\n\nVideo glossaryLearn about videoSign up for our newsletterDemuxedHowVideo.Works\n\n\u00a9 Mux, Inc. 2024\n\nTerms of serviceSecurityPrivacy policySitemap\n\nStatus:Loading....\n\n", "frontpage": false}
