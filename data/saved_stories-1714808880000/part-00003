{"aid": "40253759", "title": "sudon't", "url": "https://dotat.at/@/2024-05-02-sudo.html", "domain": "dotat.at", "votes": 1, "user": "fanf2", "posted_at": "2024-05-04 00:21:25", "comments": 0, "source_title": "sudon't \u2013 Tony Finch", "source_text": "sudon't \u2013 Tony Finch\n\n# Tony Finch \u2013 blog\n\n  * home\n  * search\n  * archive\n  * recent\n  * feed\n  * links\n  * elsewhere\n\nMy opinion is not mainstream, but I think if you really examine the practices\nand security processes that use and recommend sudo, the reasons for using it\nare mostly bullshit.\n\nWhen I started my career in the late 1990s, I was already aware of really(8)\nand userv because one of my friends wrote them. As tools they embody\ncriticisms of sudo\u2019s design. (really came from Cambridge University\u2019s central\nunix timesharing service CUS in about 1990, and before that from the Computer\nLab unix systems in the 1980s.)\n\nMy first job after university was at Demon Internet where it was normal for\nops staff to log in as root over ssh. Demon had patched sshd to change how it\nfound user public keys, which allowed the security team to manage which staff\nhad access to which servers. (In practice, most ops staff had access to\neverything, which was sometimes fun!) At that time I was paying attention to\nthe prevailing sysadmin wisdom, and sudo was being suggested as a good idea.\nIt was not yet dogma, but it was heading that way.\n\nThere were a bunch of reasons for recommending sudo:\n\n  1. As a safety guard.\n\nIf you never have a root shell prompt it\u2019s harder to accidentally do something\nwith root powers that has catastrophic consequences. This is also what\nreally(8) is for, and it\u2019s about 1000x simpler than sudo.\n\nI have never been persuaded by this argument. As a safety guard sudo is pretty\nfeeble. The idea is to provide some mechanical assistance to the sysadmin\u2019s\nsituational awareness: do I really mean to run this command as root? In my\ncareer I have always been working with distributed systems, so a simple\nprivileged/unprivileged sudo-or-not guard fails to capture many of the other\nways to fuck up: like, are you even logged into the right system?\n\nOther tools you can use to avoid mistakes include:\n\n     * put your username, hostname, and working directory in your shell prompt, and pay attention to it so you maintain your situational awareness\n\n     * use multiple terminal windows \u2013 I always took this for granted, but only a few years before I started my career, X terminals were a rare privilege. Spatial awareness is a powerful tool for keeping track of things, so use it to separate root or not, this machine or that machine.\n\n     * use colours or decorations to make privileged terminal prompts or privileged windows more obvious\n\n  2. Because you should not log in to root directly.\n\nThere\u2019s a lot of angst out there about the dangers of exposing a root login to\nthe big bad internet. It is not backed by a rational assessment of the\nsecurity of root\u2019s login credentials (whether keys or passwords) nor by any\nanalysis of whether you get a meaningful security improvement from logging in\nas another user then raising privilege with sudo.\n\nBy the time Ansible came along, this advice had turned into dogma. Ansible by\ndefault prefers to log in to a remote system using a non-root account then\nescalate to root using sudo or some alternative. Because Ansible is an\nautomation tool, it must be able to escalate privilege without interaction. So\nthere is no meaningful security boundary, and this non-root account is\neffectively equivalent to root. So Ansible has a lot of gratuitous complexity\njust to conform to this dogma.\n\n  3. For auditing.\n\nI doubt I have ever seen or heard of sudo\u2019s logs being used effectively.\n\nBut (assuming there is in fact some practical use to it) sudo was better at\nlogging who did what than other privilege escalation tools, such as login or\nsu. In particular, sshd was for a long time unable to log which public key was\nused to authenticate, which is a sad omission especially for shared privileged\naccounts such as root.\n\n  4. It\u2019s a general-purpose tool.\n\nThis is sudo as a bad userv, rather than sudo as a bloated really(8).\n\nIn the early 1990s it was not easy to provide a tool that crossed privilege\nboundaries. That was before it made sense to make a web app to handle such\nthings. It was wasteful of limited computing resources to have a persistent\ndaemon (like userv) when you could use setuid (like sudo). And back then\nSCM_CREDS was advanced technology not available everywhere, which led to some\ncompromises in userv\u2019s design.\n\nI think sudo became popular because of this broad utility, then it became the\nrecommended way to escalate to root (for reasons 1 and 2). However sudo has a\nreally complicated rules language to describe which users can run which tools\nwith which privileges, which is the cause of many of its security\nvulnerabilities (undermining 1 and 2).\n\nOne of the things that surprised me about doas was that it still implements\nmost of a sudo-style rules language. When they said it was radically stripped\ndown I expected something like really(8), but no!\n\n  5. For single-user workstations.\n\nAfter sudo was already a thing, Mac OS X and Ubuntu needed to solve the\nproblem of allowing the workstation\u2019s user to get administrative access\nwithout making their account trivially equivalent to root.\n\nInstead of demanding the credentials of the target account, sudo authenticates\nthe user making the request. So a single user workstation can be set up\nwithout a root password, and its owner only has to worry about the credentials\nfor a single login.\n\nAnd sudo allows you to authenticate once, then run it several times without\nre-authenticating. It\u2019s almost as convenient as a root shell!\n\nI think this use of sudo in the most widespread unix systems really cemented\ndogmas 1 and 2. It\u2019s popular so it must be right!\n\nIn this case, sudo is more about usability than security. It\u2019s doing an\nimportant job, but it\u2019s far more complicated than necessary. Better would be\nsomething like really(8), with more authentication to verify the presence of\nthe user.\n\nSo, to summarize, I think reasons 1, 2, 3 are bad reasons for using sudo. If\nyou need to provide tools that cross security boundaries (4) then userv or a\nsmall web app is better. For single-user workstations (5) unfortunately there\nisn\u2019t a good alternative to sudo. Personally I prefer to set up a root account\nthat I can log into directly, but I\u2019m not an average user.\n\nComments welcome via \u2022 Dreamwidth \u2022 Fediverse \u2022\n\nTony Finch <dot@dotat.at>\n\n", "frontpage": false}
