{"aid": "40236923", "title": "Delimited Generators \u2013 A more natural API for JS generators", "url": "http://axisofeval.blogspot.com/2024/05/delimited-generators.html", "domain": "axisofeval.blogspot.com", "votes": 3, "user": "jchanimal", "posted_at": "2024-05-02 14:47:17", "comments": 0, "source_title": "Delimited Generators - A more natural API for JS generators", "source_text": "The Axis of Eval: Delimited Generators - A more natural API for JS generators\n\nskip to main | skip to sidebar\n\nManuel Simoni's blog about programming (languages).\n\n## Thursday, May 2, 2024\n\n### Delimited Generators - A more natural API for JS generators\n\nI have been studying ways to work around the horrors issues of JavaScript's\nasync APIs for years. I have even built a series of increasingly elaborate\ncontinuation-based Lisp interpreters (here's the latest one, it's quite good,\nif I may say so).\n\nBut recently I finally came to the point where I understood JS generators well\nenough to realize that generators already solve the problem! With a small\nconstant syntactic overhead (having to use function* to define generators,\nhaving to use yield* to call them, and using next() to call them from non-\ngenerator functions), one can program asynchronous code in a quasi-direct\nstyle.\n\nBut the plain generator interface is rather low-level, and not very intuitive\nto use. So I built delimgen, a thin layer on top of plain generators, that\nmimics delimited control. Delimited control is initially hard to understand,\nbut once you grok it it's a very natural approach (previous post).\n\nHere's how a simple delimited generator looks like. See it in action here.\n\n// Simple generator that prints something and sleeps in an infinite loop  \n---  \nfunction* my_generator()  \n{  \nwhile (true) {  \nconsole.log(\"hello\");  \nyield* sleep(500);  \n}  \n}  \n// Wrap generator in run() and kick it off by calling next()  \nrun(my_generator()).next();  \n  \nview raw simple-gen.mjs hosted with \u2764 by GitHub\n\nYou can easily spawn multiple independent generators. See it in action here.\n\nfunction* sleeper(id)  \n---  \n{  \nwhile (true) {  \nconsole.log(\"hello from \" + id);  \nyield* sleep(1000);  \n}  \n}  \n/*  \n* Spawn some generators, sleeping a little in between.  \n*/  \nfunction* main()  \n{  \nfor (let i = 1; i <= 4; i++) {  \nyield* run(sleeper(i));  \nyield* sleep(200);  \n}  \n}  \nrun(main()).next();  \n  \nview raw multiple-gen.mjs hosted with \u2764 by GitHub\n\nYou can also do blocking event loops easily. See it in action here.\n\nfunction* main()  \n---  \n{  \n/*  \n* Spawn some pre-existing balls.  \n*/  \nyield* run(ball(100, 200));  \nyield* run(ball(200, 300));  \nyield* run(ball(300, 400));  \n/*  \n* Main loop.  \n*  \n* Block on click events, spawn a new ball on each click.  \n*/  \nwhile (true) {  \nconst event = yield* get_next_event();  \nyield* run(ball(event.pageX, event.pageY));  \n}  \n}  \nwindow.onload = () => run(main()).next();  \n  \nview raw balls.mjs hosted with \u2764 by GitHub\n\nI'm not claiming any novelty here. You also cannot do anything with this\nlibrary that you couldn't do with plain generators, but for me, seeing that\nyou can write quasi-blocking code in JS with some small overhead was a real\neye opener.\n\nPosted by Manuel Simoni at\n\n11:23\n\n#### No comments:\n\nPost a Comment\n\nOlder Post Home\n\nSubscribe to: Post Comments (Atom)\n\n## Elsewhere\n\n@msimoni\n\ngithub.com/manuel\n\n## Archives\n\n  * \u25bc 2024 (2)\n\n    * \u25bc May (1)\n\n      * Delimited Generators - A more natural API for JS g...\n    * \u25ba January (1)\n\n  * \u25ba 2016 (2)\n\n    * \u25ba July (1)\n    * \u25ba May (1)\n\n  * \u25ba 2015 (4)\n\n    * \u25ba August (1)\n    * \u25ba July (1)\n    * \u25ba June (2)\n\n  * \u25ba 2014 (2)\n\n    * \u25ba June (2)\n\n  * \u25ba 2013 (8)\n\n    * \u25ba June (1)\n    * \u25ba May (4)\n    * \u25ba April (1)\n    * \u25ba February (1)\n    * \u25ba January (1)\n\n  * \u25ba 2012 (85)\n\n    * \u25ba November (11)\n    * \u25ba September (5)\n    * \u25ba August (8)\n    * \u25ba July (23)\n    * \u25ba June (2)\n    * \u25ba May (4)\n    * \u25ba April (9)\n    * \u25ba March (13)\n    * \u25ba February (2)\n    * \u25ba January (8)\n\n  * \u25ba 2011 (94)\n\n    * \u25ba December (5)\n    * \u25ba November (5)\n    * \u25ba October (5)\n    * \u25ba September (7)\n    * \u25ba August (13)\n    * \u25ba July (9)\n    * \u25ba June (7)\n    * \u25ba May (9)\n    * \u25ba April (9)\n    * \u25ba March (9)\n    * \u25ba February (6)\n    * \u25ba January (10)\n\n  * \u25ba 2010 (102)\n\n    * \u25ba December (9)\n    * \u25ba November (8)\n    * \u25ba October (5)\n    * \u25ba September (13)\n    * \u25ba August (7)\n    * \u25ba July (16)\n    * \u25ba June (22)\n    * \u25ba May (14)\n    * \u25ba April (8)\n\n## Linkroll\n\n  * Alarming Development\n  * Alex Payne \u2014 Online Writing\n  * Arcane Sentiment\n  * Awelon Blue\n  * blog.might.net\n  * Dependent Types Reddit\n  * Dynamic Aspects\n  * eighty-twenty\n  * Existential Type\n  * Hack the Planet\n  * HXA7241\n  * Kazimir Majorinc's Lisp Notes\n  * Lambda the Ultimate\n  * Linux Weekly News\n  * Loper OS\n  * Luke Gorrie's weblog\n  * Making it stick.\n  * One Mistake After Another\n  * Paul Graham\n  * Paul Snively's Blog\n  * Philosophy Made Manifest\n  * PiLuD: Programming Language Design\n  * Proggit\n  * Real World Technologies Forums\n  * Send More Paramedics\n  * State of Code\n  * Stevey's Blog Rants\n  * Structural insight\n  * Subvert the dominant paradigm\n  * Taylor Campbell's blag\n  * The BileBlog\n  * The ByteBaker\n  * Trivium\n  * Ward's wiki\n  * wingolog\n\nDiese Website verwendet Cookies von Google, um Dienste anzubieten und Zugriffe\nzu analysieren. Deine IP-Adresse und dein User-Agent werden zusammen mit\nMesswerten zur Leistung und Sicherheit f\u00fcr Google freigegeben. So k\u00f6nnen\nNutzungsstatistiken generiert, Missbrauchsf\u00e4lle erkannt und behoben und die\nQualit\u00e4t des Dienstes gew\u00e4hrleistet werden.Weitere InformationenOk\n\n", "frontpage": true}
