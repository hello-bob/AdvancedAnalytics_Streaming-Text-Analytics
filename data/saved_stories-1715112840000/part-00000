{"aid": "40283418", "title": "Repoman: Python tool to manage GitHub Organizations and perform backup", "url": "https://github.com/O3-Cyber/Repoman", "domain": "github.com/o3-cyber", "votes": 1, "user": "ingve", "posted_at": "2024-05-07 08:13:04", "comments": 0, "source_title": "GitHub - O3-Cyber/Repoman: A Python tool to manage GitHub Organizations and perform backup", "source_text": "GitHub - O3-Cyber/Repoman: A Python tool to manage GitHub Organizations and\nperform backup\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nO3-Cyber / Repoman Public\n\n  * Notifications\n  * Fork 0\n  * Star 1\n\nA Python tool to manage GitHub Organizations and perform backup\n\n1 star 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# O3-Cyber/Repoman\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nkarimelmelUpdate example.pyApr 30, 20241498e92 \u00b7 Apr 30, 2024Apr 30, 2024\n\n## History\n\n4 Commits  \n  \n### package\n\n|\n\n### package\n\n| Initial release| Apr 29, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial release| Apr 29, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 29, 2024  \n  \n### example.py\n\n|\n\n### example.py\n\n| Update example.py| Apr 30, 2024  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| Initial release| Apr 29, 2024  \n  \n## Repository files navigation\n\n# Repoman\n\nRepoman is a tool designed to manage GitHub repositories. It provides\nfunctionalities such as creating repositories, enabling vulnerability alerts,\nautomated fixes, branch protection, and creating environments.\n\nIt also offers a backup client that allows using the Organization Migrations\nAPI to backup a GitHub organization to an Azure Storage Container.\n\n## Prerequisites\n\n  * Python3\n  * A GitHub token with the necessary permissions\n  * An Azure Storage Account for the backup client\n\n## Usage\n\n  1. Clone the repository:\n\n    \n    \n    git clone https://github.com/O3-Cyber/Repoman.git\n\n  2. Navigate to the project directory:\n\n    \n    \n    cd repoman\n\n  3. Install the required dependencies:\n\n    \n    \n    pip install -r requirements.txt\n\n  4. Set the environment variables:\n\n    \n    \n    export GITHUB_TOKEN=your-github-token export ORG_OR_USER=your-org-or-user export AZURE_STORAGE_ACCOUNT_NAME=your-azure-storage-account-name export AZURE_STORAGE_CONTAINER_NAME=your-azure-storage-container-name\n\n## Examples\n\n### Creating a Repository\n\n    \n    \n    from package.repoclient import GithubRepoClient # Instantiate the client client = GithubRepoClient('your-github-token') # Create a repository client.create_repos('your-org-or-user', [{'repo_name': 'name-of-repository'}])\n\n### Creating a Team\n\n    \n    \n    from package.teamclient import GithubTeamClient # Instantiate the client client = GithubTeamClient('your-github-token') team_data = { 'team_name': 'example-team', 'description': 'This is a description for example-team', 'permission': 'push' } client.create_team('your-org', team_data)\n\n### Assocating a Team with an IDP Group\n\n    \n    \n    teams_data = [ { 'team_name': 'team1', 'idp_group_name': 'idp_group1' }, { 'team_name': 'team2', 'idp_group_name': 'idp_group2' } ] # Associate teams client.associate_teams_idp(os.environ['ORG_OR_USER'], teams_data)\n\n### Adding Secrets to a Repository\n\n    \n    \n    from package.secretsclient import GithubSecretsClient # Instantiate the client client = GithubSecretsClient('your_github_token', 'org_or_user') # Add a secret to a repository client.add_secrets('repo_name', 'secret_name', 'secret_value')\n\n### Backing up a GitHub Organization\n\n    \n    \n    import os import logging from package.backupclient import GithubBackupClientAzure from package.repoclient import GithubRepoClient from package.secretsclient import GithubSecretsClient from package.teamclient import GithubTeamClient from package.utils import load_env_vars # Configure logging logging.basicConfig(level=logging.INFO) def load_env_vars(var_names): return {var: os.getenv(var) for var in var_names} def main(): env_vars = load_env_vars([ 'GITHUB_TOKEN', 'ORG_OR_USER', 'AZURE_STORAGE_ACCOUNT_NAME', 'AZURE_STORAGE_CONTAINER_NAME' ]) missing_vars = [var for var, value in env_vars.items() if value is None] if missing_vars: error_message = f'Missing environment variables: {\", \".join(missing_vars)}' logging.error(error_message) raise ValueError(error_message) try: logging.info(\"Starting backup process...\") backup = GithubBackupClientAzure( env_vars['GITHUB_TOKEN'], env_vars['ORG_OR_USER'], env_vars['AZURE_STORAGE_ACCOUNT_NAME'], env_vars['AZURE_STORAGE_CONTAINER_NAME'] ) backup.create_gh_backup() logging.info(\"Backup process completed.\") except Exception as e: logging.error(f\"An error occurred while creating backups: {e}\") return if __name__ == \"__main__\": main()\n\n### Creating a Repositories object\n\nThe first part of this section shows an array of objects, each representing a\nrepository to be created. Each object can contain the following properties:\n\n  * repo_name: The name of the repository. (Required)\n  * description: A description of the repository.\n  * environments: An array of objects, each representing an environment to be created in the repository. Each environment object can contain the following properties:\n  * environment_name: The name of the environment.\n  * protected_branches_only: A boolean indicating whether the environment should only be available for protected branches.\n  * branch_protection: A boolean indicating whether branch protection should be enabled for the repository.\n  * auto_init: A boolean indicating whether the repository should be automatically initialized with a README.\n\n    \n    \n    repositories = [ { \"repo_name\": \"company-project\", \"description\": \"This is a configuration repository\", \"repo_secrets\": [ {\"secret_name\": \"SECRET1\", \"secret_value\": \"value1\"}, {\"secret_name\": \"SECRET2\", \"secret_value\": \"value2\"} ] }, { \"repo_name\": \"test-automation\", \"description\": \"This is a test automation repository\", \"environments\": [ {\"environment_name\": \"production\", \"protected_branches_only\": True} ] }, { \"repo_name\": \"no-init-no-branchprotection\", \"description\": \"This is a no init to branch protection repository\", \"branch_protection\": False, \"auto_init\": False } ]\n\n### Creating a Branch Protection Object\n\nThe second part of this section shows an example of a branch protection\nobject. This object can contain the following properties:\n\n  * required_status_checks: An array of status checks that must pass before merging.\n  * enforce_admins: A boolean indicating whether the protection rules should also apply to admins.\n  * required_pull_request_reviews: An object containing rules for pull request reviews.\n  * restrictions: An object specifying who can push to the protected branch.\n  * required_linear_history: A boolean indicating whether the repository should only allow linear commit histories.\n  * allow_force_pushes: A boolean indicating whether force pushes should be allowed on the protected branch.\n  * allow_deletions: A boolean indicating whether deletions of the protected branch should be allowed.\n  * block_creations: A boolean indicating whether new branches should be blocked from being created.\n  * required_conversation_resolution: A boolean indicating whether all conversations in a pull request must be resolved before merging.\n  * lock_branch: A boolean indicating whether the branch should be locked to prevent changes.\n  * allow_fork_syncing: A boolean indicating whether forks of the repository should be allowed to sync with the original repository.\n\nThese objects are used as input when calling the methods to create\nrepositories and branch protection rules.\n\n    \n    \n    branch_protection_payload = { \"required_status_checks\": None, \"enforce_admins\": True, \"required_pull_request_reviews\": { \"dismissal_restrictions\": {}, \"dismiss_stale_reviews\": True, \"require_code_owner_reviews\": False, \"required_approving_review_count\": 1, \"require_last_push_approval\": True, \"bypass_pull_request_allowances\": { \"users\": [], \"teams\": [] } }, \"restrictions\": None, \"required_linear_history\": True, \"allow_force_pushes\": False, \"allow_deletions\": False, \"block_creations\": True, \"required_conversation_resolution\": True, \"lock_branch\": False, \"allow_fork_syncing\": False }\n\n### Creating Teams object\n\n    \n    \n    teams_data = { \"teams\": [ { \"team_name\": \"developers\", \"description\": \"Developers team responsible for coding\", \"permission\": \"push\", \"groups\": [ { \"group_id\": \"<IDP Object ID>\", \"group_name\": \"Developers\", \"group_description\": \"This group comprises developers\" } ], \"repo_names\": [\"company-project\"] }, { \"team_name\": \"testers\", \"description\": \"Quality assurance team for testing\", \"permission\": \"pull\", \"groups\": [ { \"group_id\": \"qa\", \"group_name\": \"QA Team\", \"group_description\": \"This group is responsible for quality assurance\" } ], \"repo_names\": [\"company-project\", \"test-automation\"] } ] }\n\n## Environment Variables\n\nThe script uses the following environment variables:\n\n  * GITHUB_TOKEN: Your GitHub token.\n  * ORG_OR_USER: The name of the GitHub organization or user for which the script should perform actions.\n  * AZURE_STORAGE_ACCOUNT_NAME: The name of the Azure storage account where backups should be stored.\n  * AZURE_STORAGE_CONTAINER_NAME: The name of the Azure storage container where backups should be stored.\n\n## Contributing\n\nWe warmly welcome contributions that aim to enhance the functionality,\nperformance, and usability of this project. Whether you're fixing bugs, adding\nnew features, improving documentation, or suggesting updates, your efforts are\ngreatly appreciated.\n\nBefore contributing, please ensure you have a clear understanding of the\nproject's structure and goals. Feel free to open an issue to discuss any major\nchanges or enhancements you have in mind.\n\nThank you for considering contributing to our project!\n\n## About\n\nA Python tool to manage GitHub Organizations and perform backup\n\n### Resources\n\nReadme\n\nActivity\n\nCustom properties\n\n### Stars\n\n1 star\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Languages\n\n  * Python 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
