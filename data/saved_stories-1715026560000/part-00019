{"aid": "40274571", "title": "Show HN: Arbitrarily nestable tabs and splits for the qtile window manager", "url": "https://github.com/aravinda0/qtile-bonsai", "domain": "github.com/aravinda0", "votes": 1, "user": "shrubbery", "posted_at": "2024-05-06 13:41:14", "comments": 0, "source_title": "GitHub - aravinda0/qtile-bonsai: A flexible layout for the qtile tiling window manager that allows arbitrarily nestable tabs and splits", "source_text": "GitHub - aravinda0/qtile-bonsai: A flexible layout for the qtile tiling window\nmanager that allows arbitrarily nestable tabs and splits\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\naravinda0 / qtile-bonsai Public\n\n  * Sponsor\n  * Notifications\n  * Fork 0\n  * Star 5\n\nA flexible layout for the qtile tiling window manager that allows arbitrarily\nnestable tabs and splits\n\n### License\n\nMIT license\n\n5 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# aravinda0/qtile-bonsai\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n5 Branches\n\n1 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\naravinda0docs(layout): ensure docs generation uses default_value_label when\nav...May 6, 2024d6e18f9 \u00b7 May 6, 2024May 6, 2024\n\n## History\n\n259 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| chore: enable beggar link since unemployed bum| May 4, 2024  \n  \n### scripts\n\n|\n\n### scripts\n\n| docs(layout): ensure docs generation uses default_value_label when av...|\nMay 6, 2024  \n  \n### src/qtile_bonsai\n\n|\n\n### src/qtile_bonsai\n\n| docs(layout): fix inverted descriptions of x/y splits| May 6, 2024  \n  \n### static/visual_guide\n\n|\n\n### static/visual_guide\n\n| chore: make visual guide responsive| May 4, 2024  \n  \n### templates\n\n|\n\n### templates\n\n| chore(readme): add clearer installation instructions| May 5, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| fix(core/tree): ensure pruning happens when applicable in merge_tabs()| May\n2, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| chore: add .envrc to gitignore| Dec 25, 2023  \n  \n### .pre-commit-config.yaml\n\n|\n\n### .pre-commit-config.yaml\n\n| chore: switch to pdm for lockfile support| Oct 14, 2023  \n  \n### LICENSE.txt\n\n|\n\n### LICENSE.txt\n\n| chore: set up project scaffolding| Jan 24, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| docs(layout): ensure docs generation uses default_value_label when av...|\nMay 6, 2024  \n  \n### index.html\n\n|\n\n### index.html\n\n| chore: add index.html for github project site| May 1, 2024  \n  \n### pdm.lock\n\n|\n\n### pdm.lock\n\n| chore: update dev dependencies| Mar 4, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| chore: clean up pyproject.toml| May 4, 2024  \n  \n## Repository files navigation\n\n# Qtile Bonsai\n\n## Introduction\n\nQtile Bonsai provides a flexible layout for the qtile tiling window manager\nthat allows you to arrange windows as tabs, splits and even subtabs inside\nsplits.\n\nFor a quick feeler, take a look at the demo video below, or the visual guide\nfurther below.\n\n## Getting Started\n\n### Installation\n\nAssuming you already have qtile up and running, you can just install qtile-\nbonsai from PyPI.\n\n    \n    \n    pip install qtile-bonsai\n\nNote\n\nIf you've installed qtile using your distro's package manager, you'll have to\nrun:\n\npip install qtile-bonsai --break-system-packages.\n\nThat will allow the system-installed qtile and qtile-bonsai to 'see' each\nother.\n\nThe alternative would be to have installed qtile via pipx and then 'inject'\nqtile-bonsai into the same virtualenv where qtile resides:\n\npipx inject qtile qtile-bonsai\n\n### Configuration\n\n#### 1\\. Make Bonsai available as a layout in your qtile config\n\n    \n    \n    from qtile_bonsai import Bonsai layouts = [ Bonsai(**{ # Specify any desired options here. These examples are defaults. \"window.border_size\": 1, \"tab_bar.height\": 20, # You can specify subtab level specific options if desired by prefixing # the option key with the appropriate level, eg. L1, L2, L3 etc. # For example, the following options affect only 2nd level subtabs and # their windows. eg: # \"L2.window.border_color\": \"#ff0000\", # \"L2.window.margin\": 5, }), ]\n\n#### 2\\. Add your personal keybindings to your qtile config\n\n    \n    \n    from libqtile.config import EzKey, KeyChord from libqtile.utils import guess_terminal terminal = guess_terminal() rofi_run_cmd = \"rofi -show drun -m -1\" keys = [ # Open your terminal emulator quickly. See further below for more bindings # to directly open apps as splits/tabs using something like rofi. EzKey(\"M-v\", lazy.layout.spawn_split(terminal, \"x\")), EzKey(\"M-x\", lazy.layout.spawn_split(terminal, \"y\")), EzKey(\"M-t\", lazy.layout.spawn_tab(terminal)), EzKey(\"M-S-t\", lazy.layout.spawn_tab(terminal, new_level=True)), # Motions to move focus. The names are compatible with built-in layouts. EzKey(\"M-h\", lazy.layout.left()), EzKey(\"M-l\", lazy.layout.right()), EzKey(\"M-k\", lazy.layout.up()), EzKey(\"M-j\", lazy.layout.down()), EzKey(\"A-d\", lazy.layout.prev_tab()), EzKey(\"A-f\", lazy.layout.next_tab()), # Resize operations EzKey(\"M-C-h\", lazy.layout.resize(\"left\", 100)), EzKey(\"M-C-l\", lazy.layout.resize(\"right\", 100)), EzKey(\"M-C-k\", lazy.layout.resize(\"up\", 100)), EzKey(\"M-C-j\", lazy.layout.resize(\"down\", 100)), # Swap windows/tabs with neighbors EzKey(\"M-S-h\", lazy.layout.swap(\"left\")), EzKey(\"M-S-l\", lazy.layout.swap(\"right\")), EzKey(\"M-S-k\", lazy.layout.swap(\"up\")), EzKey(\"M-S-j\", lazy.layout.swap(\"down\")), EzKey(\"A-S-d\", lazy.layout.swap_tab_prev()), EzKey(\"A-S-f\", lazy.layout.swap_tab_next()), # It's kinda nice to have more advanced window management commands under a # qtile key chord. KeyChord( [\"mod4\"], \"w\", [ # Use something like rofi to pick GUI apps to open as splits/tabs. EzKey(\"v\", lazy.layout.spawn_split(rofi_run_cmd, \"x\")), EzKey(\"x\", lazy.layout.spawn_split(rofi_run_cmd, \"y\")), EzKey(\"t\", lazy.layout.spawn_tab(rofi_run_cmd)), EzKey(\"S-t\", lazy.layout.spawn_tab(rofi_run_cmd, new_level=True)), EzKey(\"r\", lazy.layout.rename_tab()), EzKey(\"o\", lazy.layout.pull_out()), EzKey(\"u\", lazy.layout.pull_out_to_tab()), # Directional commands to merge windows with their neighbor into subtabs. KeyChord( [], \"m\", [ EzKey(\"h\", lazy.layout.merge_to_subtab(\"left\")), EzKey(\"l\", lazy.layout.merge_to_subtab(\"right\")), EzKey(\"j\", lazy.layout.merge_to_subtab(\"down\")), EzKey(\"k\", lazy.layout.merge_to_subtab(\"up\")), # Merge entire tabs with each other as splits EzKey(\"S-h\", lazy.layout.merge_tabs(\"previous\")), EzKey(\"S-l\", lazy.layout.merge_tabs(\"next\")), ], ), # Directional commands for push_in() to move window inside neighbor space. KeyChord( [], \"i\", [ EzKey(\"j\", lazy.layout.push_in(\"down\")), EzKey(\"k\", lazy.layout.push_in(\"up\")), EzKey(\"h\", lazy.layout.push_in(\"left\")), EzKey(\"l\", lazy.layout.push_in(\"right\")), # It's nice to be able to push directly into the deepest # neighbor node when desired. The default bindings above # will have us push into the largest neighbor container. EzKey( \"S-j\", lazy.layout.push_in(\"down\", dest_selection=\"mru_deepest\"), ), EzKey( \"S-k\", lazy.layout.push_in(\"up\", dest_selection=\"mru_deepest\"), ), EzKey( \"S-h\", lazy.layout.push_in(\"left\", dest_selection=\"mru_deepest\"), ), EzKey( \"S-l\", lazy.layout.push_in(\"right\", dest_selection=\"mru_deepest\"), ), ], ), ] ), # Your other bindings # ... ]\n\n## Visual Guide\n\nClick on the image to open a full-size web view.\n\n## Reference\n\n### Configuration\n\nTip\n\nMost options have subtab-level support! ie. you can have one setting for top\nlevel windows (eg. \"window.margin\" = 10) and another setting for windows under\n2nd level subtabs (eg. \"L2.window.margin\" = 5). Just prefix the option with\nL<subtab-level>.\n\nOption Name| Default Value| Description  \n---|---|---  \nwindow.margin| 0| Size of the margin space around windows. Can be an int or a\nlist of ints in [top, right, bottom, left] ordering.  \nwindow.border_size| 1| Width of the border around windows. Must be a single\ninteger value since that's what qtile allows for window borders.  \nwindow.border_color| Gruvbox.darker_yellow| Color of the border around windows  \nwindow.active.border_color| Gruvbox.dark_yellow| Color of the border around an\nactive window  \nwindow.normalize_on_remove| True| Whether or not to normalize the remaining\nwindows after a window is removed. If True, the remaining sibling windows will\nall become of equal size. If False, the next (right/down) window will take up\nthe free space.  \nwindow.default_add_mode| tab| (Experimental)Determines how windows get added\nif they are not explicitly spawned as a split or a tab. Can be one of \"tab\" or\n\"match_previous\". If \"match_previous\", then then new window will get added in\nthe same way the previous window was. eg. if the previous window was added as\na y-split, so will the new window.NOTE: Setting this to \"tab\" may seem\nconvenient, since externally spawned GUI apps get added as background tabs\ninstead of messing up the current split layout. But due to how the window\ncreation flow happens, when many splits are requested in quick succession,\nthis may cause some windows requested as a split to open up as a tab instead.  \ntab_bar.height| 20| Height of tab bars  \ntab_bar.hide_when| single_tab| When to hide the tab bar. Allowed values are\n'never', 'always', 'single_tab'.When 'single_tab' is configured, the bar is\nnot shown whenever there is a lone tab remaining, but shows up again when\nanother tab is added.For nested tab levels, configuring 'always' or\n'single_tab' actually means that when only a single tab remains, its contents\nget 'merged' upwards, eliminating the sub-tab level.  \ntab_bar.margin| 0| Size of the margin space around tab bars.Can be an int or a\nlist of ints in [top, right, bottom, left] ordering.  \ntab_bar.border_size| 0| Size of the border around tab bars  \ntab_bar.border_color| Gruvbox.dark_yellow| Color of border around tab bars  \ntab_bar.bg_color| Gruvbox.bg0| Background color of tab bars, beind their tabs  \ntab_bar.tab.min_width| 50| Minimum width of a tab on a tab bar  \ntab_bar.tab.margin| 0| Size of the margin space around individual tabs  \ntab_bar.tab.padding| 20| Size of the padding space inside individual tabs  \ntab_bar.tab.bg_color| Gruvbox.bg1| Background color of individual tabs  \ntab_bar.tab.fg_color| Gruvbox.fg1| Foreground text color of individual tabs  \ntab_bar.tab.font_family| Mono| Font family to use for tab titles  \ntab_bar.tab.font_size| 15| Font size to use for tab titles  \ntab_bar.tab.active.bg_color| Gruvbox.bg4| Background color of active tabs  \ntab_bar.tab.active.fg_color| Gruvbox.fg1| Foreground text color of the active\ntab  \nauto_cwd_for_terminals| True| (Experimental)If True, when spawning new windows\nby specifying a program that happens to be a well-known terminal emulator,\nwill try to open the new terminal window in same working directory as the last\nfocused window.  \nrestore.threshold_seconds| 4| You likely don't need to tweak this. Controls\nthe time within which a persisted state file is considered to be from a recent\nqtile config-reload/restart event. If the persisted file is this many seconds\nold, we restore our window tree from it.  \n  \n### Commands\n\nCommand Name| Description  \n---|---  \nspawn_split| Launch the provided program into a new window that splits the\ncurrently focused window along the specified axis.Args: program: The program\nto launch. axis: The axis along which to split the currently focused window.\nCan be 'x' or 'y'. An x split will end up with two left/right windows. A y\nsplit will end up with two top/bottom windows. ratio: The ratio of sizes by\nwhich to split the current window. If a window has a width of 100, then\nsplitting on the x-axis with a ratio = 0.3 will result in a left window of\nwidth 30 and a right window of width 70. Defaults to 0.5. normalize: If True,\noverrides ratio and leads to the new window and all sibling windows becoming\nof equal size along the corresponding split axis. Defaults to True. position:\nWhether the new split content appears after or before the currently focused\nwindow. Can be \"next\" or \"previous\". Defaults to \"next\".Examples: -\nlayout.spawn_split(my_terminal, \"x\") - layout.spawn_split(my_terminal, \"y\",\nratio=0.2, normalize=False) - layout.spawn_split(my_terminal, \"x\",\nposition=\"previous\")  \nspawn_tab| Launch the provided program into a new window as a new tab.Args:\nprogram: The program to launch. new_level: If True, create a new sub-tab level\nwith 2 tabs. The first sub-tab being the currently focused window, the second\nsub-tab being the newly launched program. level: If provided, launch the new\nwindow as a tab at the provided level of tabs in the currently focused\nwindow's tab hierarchy. Level 1 is the topmost level.Examples: -\nlayout.spawn_tab(my_terminal) - layout.spawn_tab(my_terminal, new_level=True)\n- layout.spawn_tab(\"qutebrowser\", level=1)  \nmove_focus| Move focus to the window in the specified direction relative to\nthe currently focused window. If there are multiple candidates, the most\nrecently focused of them will be chosen.Args: wrap: If True, will wrap around\nthe edge and select windows from the other end of the screen. Defaults to\nTrue.  \nleft| Same as move_focus(\"left\"). For compatibility with API of other built-in\nlayouts.  \nright| Same as move_focus(\"right\"). For compatibility with API of other built-\nin layouts.  \nup| Same as move_focus(\"up\"). For compatibility with API of other built-in\nlayouts.  \ndown| Same as move_focus(\"down\"). For compatibility with API of other built-in\nlayouts.  \nnext_tab| Switch focus to the next tab. The window that was previously active\nthere will be focused.Args: wrap: If True, will cycle back to the fist tab if\ninvoked on the last tab. Defaults to True.  \nprev_tab| Same as next_tab() but switches focus to the previous tab.  \nresize| Resizes by moving an appropriate border leftwards. Usually this is the\nright/bottom border, but for the 'last' node under a SplitContainer, it will\nbe the left/top border.Basically the way tmux does resizing.If there are\nmultiple nested windows under the area being resized, those windows are\nresized proportionally.Args: amount: The amount by which to resize.Examples: -\nlayout.resize(\"left\", 100) - layout.resize(\"right\", 100)  \nswap| Swaps the currently focused window with the nearest window in the\nspecified direction. If there are multiple candidates to pick from, then the\nmost recently focused one is chosen.Args: wrap: If True, will wrap around the\nedge and select windows from the other end of the screen to swap. Defaults to\nFalse.  \nswap_tabs| Swaps the currently active tab with the previous tab.Args: wrap: If\nTrue, will wrap around the edge of the tab bar and swap with the last tab.\nDefaults to True.  \nrename_tab| Rename the currently active tab.Args: widget: The qtile widget\nthat should be used for obtaining user input for the renaming. The 'prompt'\nwidget is used by default.  \nmerge_tabs| Merge the currently active tab with another tab, such that both\ntabs' contents now appear in 2 splits.Args: direction: Which neighbor tab to\nmerge with. Can be either \"next\" or \"previous\". axis: The axis along which the\nmerged content should appear as splits.Examples: -\nlayout.merge_tabs(\"previous\") - layout.merge_tabs(\"next\", \"y\")  \nmerge_to_subtab| Merge the currently focused window (or an ancestor node) with\na neighboring node in the specified direction, so that they both come under a\n(possibly new) subtab.Args: direction: The direction in which to find a\nneighbor to merge with. src_selection: Determines how the source window/node\nshould be resolved. ie. do we pick just the current window, or all windows\nunder an appropriate ancestor container. Valid values are defined in\nNodeHierarchySelectionMode. See below. dest_selection: Determines how the\nneighboring node should be resolved, similar to how src_selection is resolved.\nValid values are defined in NodeHierarchySelectionMode. See below. normalize:\nIf True, any removals during the merge process will ensure all sibling nodes\nare resized to be of equal dimensions.Valid values for\nNodeHierarchySelectionMode are: \"mru_deepest\": Pick a single innermost window.\nIf there are multiple such neighboring windows, pick the most recently used\n(MRU) one. \"mru_subtab_else_deepest\" (default): If the target is under a\nsubtab, pick the subtab. If there is no subtab in play, behaves like\nmru_deepest. \"mru_largest\" Given a window, pick the largest ancestor node that\nthe window's border is a fragment of. This resolves to a SplitContainer or a\nTabContainer. \"mru_subtab_else_largest\" If the target is under a subtab, pick\nthe subtab. If there is no subtab in play, behaves like mru_largest.Examples:\n- layout.merge_to_subtab( \"right\", dest_selection=\"mru_subtab_else_deepest\", )\n- layout.merge_to_subtab( \"up\", src_selection=\"mru_deepest\",\ndest_selection=\"mru_deepest\", )  \npush_in| Move the currently focused window (or a related node in its\nhierarchy) into a neighboring window's container.Args: direction: The\ndirection in which to find a neighbor whose container we push into.\nsrc_selection: (See docs in merge_to_subtab()) dest_selection: (See docs in\nmerge_to_subtab()) normalize: If True, any removals during the process will\nensure all sibling nodes are resized to be of equal dimensions. wrap: If True,\nwill wrap around the edge of the screen and push into the container on the\nother end.Examples: - layout.push_in(\"right\", dest_selection=\"mru_deepest\") -\nlayout.push_in(\"down\", dest_selection=\"mru_largest\", wrap=False)  \npull_out| Move the currently focused window out from its SplitContainer into\nan ancestor SplitContainer at a higher level. It effectively moves a window\n'outwards'.Args: position: Whether the pulled out node appears before or after\nits original container node. Can be \"next\" or \"previous\". Defaults to\n\"previous\". src_selection: Can either be \"mru_deepest\" (default) or\n\"mru_subtab_else_deepest\". (See docs in merge_to_subtab()) normalize: If True,\nall sibling nodes involved in the rearrangement are resized to be of equal\ndimensions.Examples: - layout.pull_out() -\nlayout.pull_out(src_selection=\"mru_subtab_else_deepest\") -\nlayout.pull_out(position=\"next\")  \npull_out_to_tab| Extract the currently focused window into a new tab at the\nnearest TabContainer.Args: normalize: If True, any removals during the process\nwill ensure all sibling nodes are resized to be of equal dimensions.  \nnormalize| Starting from the focused window's SplitContainer, make all windows\nin the container of equal size.Args: recurse: If True, then nested nodes are\nalso normalized similarly.  \nnormalize_tab| Starting from the focused window's tab, make all windows in the\ntab of equal size.Args: recurse: If True, then nested nodes are also\nnormalized similarly. Defaults to True.  \nnormalize_all| Make all windows under all tabs be of equal size.  \n  \n## Roadmap\n\n  * Basic mouse support (click on tab to focus)\n  * Grow/shrink style resizing\n  * Some nicer ricing possibilities for subtabs\n\n## Support\n\nFor any bug reports, please file an issue. For questions/discussions, use the\nGitHub Discussions section, or you can ask on the qtile subreddit.\n\n## About\n\nA flexible layout for the qtile tiling window manager that allows arbitrarily\nnestable tabs and splits\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n5 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 1\n\nv0.1.0 Latest\n\nMay 4, 2024\n\n## Sponsor this project\n\naravinda0 Aravinda Rao\n\nSponsor\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Python 87.2%\n  * HTML 11.4%\n  * Other 1.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
