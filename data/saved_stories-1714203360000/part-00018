{"aid": "40175418", "title": "Netflix Case Study \u2013 FreeBSD Foundation", "url": "https://freebsdfoundation.org/netflix-case-study/", "domain": "freebsdfoundation.org", "votes": 1, "user": "lladnar", "posted_at": "2024-04-26 23:22:46", "comments": 0, "source_title": "Netflix Case Study", "source_text": "Netflix Case Study \u2013 FreeBSD Foundation\n\nMENU\n\n###### Goal: $2,000,000\n\n###### Current Donations: $256,917\n\n###### Donors:229\n\nDONATE NOW\n\n# Netflix Case Study\n\n# Case Study: Maintaining the World\u2019s Fastest Content Delivery Network at\nNetflix on FreeBSD\n\nNetflix is a global entertainment company that revolutionized the way people\nconsume TV shows and movies with its streaming service. Headquartered in Los\nGatos, California, Netflix has grown into one of the world\u2019s leading streaming\nplatforms, boasting millions of subscribers in over 190 countries. Known for\nits extensive catalog of films, television series, and documentaries,\nincluding critically acclaimed original productions, Netflix continues to\nshape the entertainment industry by investing in innovative content and\ntechnology.\n\n## The fastest and highest-trafficked network on the internet, all running\nFreeBSD\n\nGleb Smirnoff is a skilled software engineer and experienced FreeBSD committer\nwho works at Netflix and manages the customized and performance-optimized\nFreeBSD-based firmware for Open Connect, the company\u2019s content delivery\nnetwork (CDN).\n\nDuring his presentation at the FreeBSD Vendor Summit in November 2023,\nSmirnoff emphasized the massive scale of Netflix\u2019s operations.\n\n\u201cWe are one of the biggest sources of traffic on the internet \u2013 sending\nterabits per second, powered by thousands of servers or appliances, all\nrunning FreeBSD.\u201d\n\nAs Smirnoff notes, Netflix\u2019s Open Connect originally operated on a standard\nFreeBSD platform, which was gradually improved for better performance. In\n2012, a proof-of-concept CDN was started on vanilla FreeBSD 9.0-RELEASE and\nnginx that was provisioned on servers equipped with a single 10 Gbit/s\ninterface.\n\nOver time, it became evident that achieving rapid growth required exceeding\nthe limits of the operating system\u2019s current capabilities. The expected scale\nof Netflix\u2019s Content Delivery Network (CDN) was so massive that it was\nworthwhile to invest in the ongoing open source development of FreeBSD.\n\nNetflix realized that when deploying a CDN at a global scale, even a single\npercentage point increase in performance results in savings worth hundreds of\nthousands of dollars. Netflix\u2019s customized version of FreeBSD enabled deeper\nintegration and more precise optimization at the kernel level, leading to\nsignificant performance improvements.\n\n## Tracking FreeBSD-CURRENT at Netflix\n\nNetflix carefully balanced its modifications with the need to stay aligned\nwith the FreeBSD project\u2019s core codebase. This ensured that their custom\nenhancements improved the system\u2019s capabilities without causing an\nunsustainable divergence from the original FreeBSD source. This delicate\nbalance allowed Netflix to leverage FreeBSD\u2019s strengths while creating a\ntailored solution that met their specific high-performance needs.\n\nAnother Open Connect team member, Drew Gallatin, detailed insights into\nFreeBSD\u2019s customization at Netflix during his March 2024 talk at OpenFest\nBulgaria, a prominent technology and open source conference.\n\nWith over 25 years of experience contributing to FreeBSD, Gallatin shared his\njourney and challenges in optimizing FreeBSD for Netflix\u2019s Open Connect and\nemphasized the strategic decision-making process behind tracking FreeBSD-\nCURRENT, stating:\n\n\u201cWe decided what we were doing was silly, and what we should do is track\nFreeBSD-CURRENT. It sounds crazy because that\u2019s where everybody pushes all\ntheir stuff, but it\u2019s actually the best thing in the world for us.\u201d\n\nDuring his talk, he also shared anecdotes from the \u201cMagical Mystery Merge,\u201d\nillustrating the importance of running the CURRENT branch. Gallatin explained,\nreflecting Netflix\u2019s proactive approach to maintaining system performance and\nstability:\n\n\u201cWhen we run FreeBSD-CURRENT, we catch things really fast. If there\u2019s some\nregression, we catch it right away. There\u2019s no two\u2014or three-year delay between\nsomebody committing something and us finding it\u2019s a problem.\u201d\n\nAdding to the narrative on the subtree integration, Gallatin pointed out the\nbenefits of this approach, highlighting the streamlined development and\nmaintenance processes that resulted from Netflix\u2019s strategic alignment with\nFreeBSD-CURRENT:\n\n\u201cOur tree is almost identical to the upstream FreeBSD tree... it greatly\nreduces the technical debt we accumulate by keeping our own patches.\u201d\n\n## Strategic integration and performance optimization of FreeBSD\n\nNetflix carefully manages the code flow between the in-house FreeBSD\nimplementation and the wider FreeBSD community. A rigorous testing framework,\ncontinuous integration, and unit testing are the foundation of Netflix\u2019s\ndevelopment strategy. Regular merges include upstream changes, and special\nfocus is given to incorporating performance-enhancing patches ahead of their\nofficial inclusion in FreeBSD. A/B testing is performed for each merge to\nmaintain or improve system performance and stability.\n\nThe evolution of Netflix\u2019s FreeBSD implementation involved refining the kernel\nto alleviate performance bottlenecks and handle the increasing data traffic,\nwhich includes RACK (Recent ACKnowledgment), a TCP stack developed by Randall\nStewart, designed to improve the performance and reliability of data\ntransmission. Other notable enhancements to FreeBSD by Netflix include\nasynchronous sendfile operations, which facilitate non-blocking data\ntransfers, and advanced VM page caching techniques that improve data handling\nefficiency and network throughput.\n\nThe Netflix CDN team has also notably collaborated with the FreeBSD community\nto enhance the security and efficiency of data transmissions using Kernel TLS\n(KTLS).\n\nKTLS is a technology that moves the processing of TLS (Transport Layer\nSecurity) from user applications to the operating system kernel. This improves\nperformance for file and web servers using sendfile(9) by encrypting the data\nin the kernel, where it resides, and avoiding extra copying of the data into\nand out of user-space just to encrypt it. KTLS is helpful for high-throughput\napplications, like web servers, that require secure data transmission. It\nallows for efficient data handling and has enabled Netflix to achieve 400 Gb/s\nthroughput on its CDN servers. Gallatin explains:\n\n\u201cWe had the first 100 gigabit per second production CDN server in the world...\ndue to Kernel TLS.\u201d\n\n\u201cWhat\u2019s kernel TLS? We moved bulk crypto into the kernel (from nginx) to\npreserve the sendfile pipeline.\u201d\n\n\u201cWith sendfile and kernel TLS, we can eliminate many of these memory bandwidth\nbottlenecks, and now things become much more possible. By accounting for\nbandwidth and CPU utilization, we get about 375 gigs at about 53% busy CPU\nwith FreeBSD.\u201d\n\nKernel TLS in FreeBSD is a large project and has undergone significant\ndevelopment through collaboration within the community. While at Netflix,\nScott Long first proposed integrating TLS into the kernel. Together with\nRandall Stewart, they developed the foundational software TLS transmission\nmechanisms. Drew Gallatin contributed significantly to the project by\nintroducing external pages mbufs and M_NOTREADY mbufs, which were essential\nfor handling encrypted data within the kernel. He also developed a pluggable\ninterface for various software TLS backends.\n\nLater versions of KTLS made notable enhancements to the system. For instance,\nfor FreeBSD 13, the transmission of Transport Layer Security (TLS) through\noffloading to network interface cards (NICs) was added. Drew Gallatin first\nimplemented this feature in collaboration with Chelsio, which co-sponsored the\nproject with Netflix for Chelsio T6 adapters. Later, Hans Petter Selasky\nextended this functionality to include Mellanox ConnectX-6 Dx adapters,\nenabling support for a wider range of hardware acceleration.\n\nThis ongoing development, backed by contributions from Netflix, Chelsio, and\nMellanox, highlights the strong, community-driven efforts to enhance FreeBSD\u2019s\nnetwork security and performance capabilities.\n\n## Giving back to the community\n\nNetflix\u2019s strategy in managing its FreeBSD implementation for Open Connect\nreflects a deep commitment to the broader FreeBSD community. Smirnoff\nhighlighted the significance of aligning closely with FreeBSD\u2019s development:\n\n\u201cIt\u2019s crucial to reduce the divergence of your operating system to FreeBSD,\nwhich means that you need to upstream your changes.\u201d\n\nHe also articulated the practical benefits of this strategy, explaining,\n\n\u201cTracking FreeBSD-CURRENT ... allowed us to collaborate with upstream\ndevelopers and get our changes into FreeBSD quickly.\u201d\n\nThis approach has minimized technical debt and facilitated rapid incorporation\nof the latest features and improvements, keeping Netflix at the forefront of\ntechnological innovation in streaming.\n\n## Lessons learned and best practices\n\nThe successful management of large-scale FreeBSD implementations, such as\nNetflix\u2019s, provides valuable lessons on the importance of community\ninvolvement and open source collaboration.\n\n  * Engaging with the community early on and proactively contributing to the project is crucial to harnessing FreeBSD\u2019s full potential. These practices ensure that any adaptations to the system align well with ongoing developments in the broader ecosystem.\n\n  * Over time, refining the strategy for managing an organization\u2019s FreeBSD implementation by prioritizing community engagement, regular testing, and strategic upstream contributions can yield significant benefits.\n\n  * Adopting new FreeBSD features and conducting thorough testing to identify potential system degradations early in development is essential. This proactive approach helps maintain a clear understanding of how an organization\u2019s customized fork diverges from the primary FreeBSD Project, ensuring that enhancements improve the system\u2019s capabilities without leading to unsustainable divergences.\n\n  * Having a well-defined process for integrating external code and managing internal changes is critical. Setting clear protocols for code review, integration, and testing is vital to maintaining system integrity and performance.\n\nBy adopting these practices, organizations can effectively manage their\nFreeBSD-based systems, ensuring they meet specific operational needs while\nstaying ahead of technological advancements.\n\n## Future directions\n\nNetflix is committed to using FreeBSD\u2019s flexibility and performance\ncapabilities and will continue collaborating with the community, focusing on\ngrowth and innovation. Netflix has set a precedent in the industry by\nsuccessfully maintaining a customized FreeBSD implementation through strategic\nforesight, rigorous testing, and active community engagement.\n\n## Getting started with FreeBSD\n\nReflecting on Netflix\u2019s journey with FreeBSD, Netflix\u2019s CDN team offers\nvaluable advice to organizations considering using FreeBSD. They suggest\nproactively engaging with the FreeBSD community and leveraging resources like\nThe FreeBSD Foundation, which can provide crucial support on technical issues,\nimplementation challenges, and community connections. For Netflix, the\nstrategy was not just about adopting FreeBSD but integrating it into its\necosystem, contributing to its development, and sharing its innovations\nupstream. The FreeBSD Foundation can assist with technical and implementation\nquestions, networking, and connecting community members. If your organization\nis thinking about getting started with FreeBSD, email the Foundation using the\nContact Us page of their website, or download FreeBSD to get started today.\n\nDownload the PDF  \n---  \n  \n3980 Broadway Street STE #103-107 Boulder CO 80304\n\n1-720-207-5142\n\ninfo@freebsdfoundation.org\n\n  * Forms\n  * Finances\n  * Legal\n  * Privacy Policy\n  * Advocacy\n\nInstagram Facebook Twitter LinkedIn\n\n\u00a92001-2024 The FreeBSD Foundation. Website designed and built by Giant Rabbit.\n\nJoin Our Mailing List\n\n", "frontpage": false}
