{"aid": "40063786", "title": "Unpacking the Blackjack Group's Fuxnet Malware", "url": "https://claroty.com/team82/research/unpacking-the-blackjack-groups-fuxnet-malware", "domain": "claroty.com", "votes": 1, "user": "IndrekR", "posted_at": "2024-04-17 12:37:45", "comments": 0, "source_title": "Unpacking the Blackjack Group's Fuxnet Malware", "source_text": "Unpacking the Blackjack Group's Fuxnet Malware | Claroty\n\nThis website stores cookies on your computer. These cookies are used to\ncollect information about how you interact with our website and allow us to\nremember you. We use this information in order to improve and customize your\nbrowsing experience and for analytics and metrics about our visitors both on\nthis website and other media. To find out more about how we use cookies, see\nour Privacy Policy.\n\nIf you decline the use of cookies, your information won\u2019t be tracked when you\nvisit this website. A single cookie will be used in your browser to remember\nyour preference not to be tracked.\n\n  * Research\n  * Vulnerability Dashboard\n  * Talks\n  * Tools\n  * About\n\nTeam82 Research\n\n# Unpacking the Blackjack Group's Fuxnet Malware\n\nTeam82\n\n/ April 12th, 2024\n\n> Update as of April 15:\n>\n> The Blackjack hacker group reached out to Team82 following publication of\n> this blog with some updates, in particular around Team82\u2019s contention\u2014based\n> on our initial research from publicly available information published by\n> Blackjack\u2014that only around 500 sensor-gateways had been impacted by a\n> cyberattack. Blackjack said that the JSON files it made public were only a\n> sample of the full extent of their activity, and that the attack was carried\n> out against 2,659 sensor-gateways, about 1,700 of which were \u201creachable and\n> successfully attacked.\u201d\n>\n> The group also said it never claimed to have destroyed 87,000 sensors,\n> rather disabled them by destroying the gateways and fuzzing the sensors\n> using a dedicated M-Bus fuzzer within the malware\u2019s code.\n>\n> \u201cWe cannot tell how many sensors actually got fried (by M-Bus fuzzing)\n> because ...well...we took down the network and disabled network access to\n> the sensor-gateways and nobody (us or them) has the means of checking until\n> all routers are restored,\u201d Blackjack said in a message to Team82. \u201cWe\n> disabled smsd (which they used to trigger remote reboots) so the M-Bus\n> fuzzer will just keep ion flooding until somebody physically turns off the\n> sensor-gateway.\u201d\n>\n> Blackjack also updated its website to reflect this new information, below:\n> https://ruexfil.com/mos/. Team82 has updated this blog with new information\n> on M-Bus fuzzing and how this attack disables the sensor gateways and floods\n> the sensors they manage with random packets of data.\n\n## Introduction\n\nThe Blackjack hacking group, believed to be affiliated with Ukrainian\nintelligence services, claims to have carried out a cyberattack that has\ndamaged emergency detection and response capabilities in Moscow and beyond the\nRussian capital. The group, linked to cyberattacks this year against a Russian\ninternet provider and Russian military infrastructure, released information\nthis week about an attack it claims to have carried out against Moscollector,\na Moscow-based company, that is responsible for the construction and\nmonitoring of underground water and sewage and communications infrastructure.\n\nThe website ruexfil.com hosts a trove of extensive information about the\nMoscollector attack, including the Fuxnet malware Blackjack said it used to\ndamage the Moscollector network operations center. The attackers also posted\nscreenshots of monitoring systems, servers, and databases they say have been\nwiped and rendered unusable. Other data, including password dumps, allegedly\nstolen from Moscollector is also posted on this site.\n\nA screenshot from the ruexfil website where it has shared information,\nincluding screenshots and stolen data, from its attack against Moscollector.\n\nTeam82 and Claroty have not been able to confirm the attackers\u2019 claims, nor\nwhether a cyberattack has had an impact on the Russian government\u2019s emergency\nresponse capabilities. What follows is our analysis of the Fuxnet malware and\nclaims made by Blackjack, based on the information shared by the attackers.\n\nFor example, Blackjack claims to have damaged or destroyed 87,000 remote\nsensors and IoT collectors. However, our analysis of data leaked by Blackjack,\nincluding the Fuxnet malware, indicates that only a little more than 500\nsensor gateways were bricked by the malware in the attack, and the remote\nsensors and controllers likely remain intact. If the gateways were indeed\ndamaged, the repairs could be extensive given that these devices are spread\nout geographically across Moscow and its suburbs, and must be either replaced\nor their firmware must be individually reflashed.\n\n## Moscollector Attack Overview\n\nBlackjack claims its initial compromise of Moscollector began in June 2023,\nand since then the group said it has worked slowly in an attempt to cripple\nthe industrial sensors and monitoring infrastructure managed by the company.\nOn Tuesday, the hackers publicly released information about their activities\nagainst Moscollector and the information stolen in the attack on the ruexfil\nwebsite. Some of their claims include:\n\n  * Gaining access to Russia\u2019s 112 emergency service number.\n\n  * Hacking and bricking sensors and controllers in critical infrastructure (including airports, subways, gas-pipelines), all of which have been disabled.\n\n  * Sharing details about and code from the Fuxnet malware used in the attack\n\n  * Disabling network appliances such as routers and firewalls\n\n  * Deleting servers, workstations and databases; 30 TB of data has been wiped, including backup drives.\n\n  * Disabling access to the Moscollector office building (all keycards have been invalidated).\n\n  * Dumping passwords from multiple internal services\n\nSome of the screenshots are below:\n\nA defaced workstation showing a Blackjack image.Dumps of usernames and\npasswords from Moscollector main datacenter servers.Dumps of databases from\nkey servers.Dumps of plaintext credentials from a Django-based web server,\nlikely responsible for the sensor management system.\n\n## Identifying Equipment Targeted in the Attack\n\nScreenshots released by the attackers indicate that the impacted sensors are\nmanufactured by a company named AO SBK, a Russian company that manufactures a\nvariety of sensor types, ranging from gas measurement sensors to environmental\nmonitoring equipment.\n\nA screenshot released by the attackers shows the SBK URL in the code.\n\nThe array of sensors are used in different types of environments, including\nwithin fire alarms, gas monitoring systems, lighting controls, and more. SBK\nlists all of them on their website:\n\nA screenshot from the SBK website detailing the different types of sensors\nthey manufacture.\n\nThe sensors collect physical data, such as temperature, and transmit it via a\nserial/bus such as an RS485/Meter-Bus to a gateway. All the sensors are\nconnected to a gateway, which is a transmission unit that enables telemetry to\nbe sent over the internet to a global monitoring system that allows operators\nvisibility into these systems.\n\nAccording to the leaked data by the attackers (including screenshots and JSON\nexports), there are two types of AO SBK gateways that were hacked during the\nattack:\n\n  * MPSB: Designed for information exchange with external devices through various interfaces. It supports ethernet and serial communication protocols including CAN, RS-232, and RS-485.\n\n  * TMSB: Similar to MPSB; includes a built-in 3/4G modem that enables it to transmit data over the internet to a remote system.\n\nThe end goal is to transmit data to a global monitoring system. The two common\nscenarios are:\n\nSensor \u2014--- MBus/RS485 \u2192 MPSB + IoT Router \u2014---Internet \u2192 Monitoring system\n\nSensor \u2014--- MBus/RS485 \u2192 TMSB (3g/4g modem) \u2014---Internet \u2192 Monitoring system\n\nTo fully explain the attack, we need to start with its most basic targeted\ncomponent, the end sensor and traverse up to the full management and\nmonitoring system.\n\n#### Sensors\n\nAt the bottom of the hierarchy are the physical sensors. AO SBK sells a wide\nrange of sensors, including a gas analyzer that reads the measurements of\ndifferent gasses in the air, a temperature sensor, and more. These sensors are\nlow-level devices whose only goal is to take measurements.\n\nIn order to send the measurements collected by the sensor, a connection is\nmade over a serial/bus to a sensor gateway using Meter-Bus/RS485 serial\ncommunication channel.\n\nThe environmental monitoring equipment available from AO SKB\n\nHere are three examples of sensors sold by SBK:\n\n  * Gas analyzer of the security system (GASBM): Designed for continuous automatic measurements of the volume of methane (CH4), carbon dioxide (CO2), oxygen (O2) and/or mass concentration of carbon monoxide (CO) in the air of industrial and non-industrial premises (collectors, warehouses , etc.).\n\nGas analyzer of the security system (GASBM)\n\n  * Fire and security system console (PPOSB): Activates an alarm when the sensors read signals of fire or smoke.\n\nFire and security system console.\n\n  * Temperature and humidity sensor (TVSB): Converts the physical values of temperature and humidity into a digital signal and transmits them to the sensor gateway.\n\n## Sensor Gateways\n\nThe sensor ecosystem is built with physical sensors such as the gas and\nelectricity analyzers that take physical measurements, and\norchestrator/gateway devices (MPSB and TMSB) that read and control these basic\nI/O sensors and transmit the data to a global monitoring system for central\nmonitoring.\n\nHere are screenshots of the MPSB and TMSB sensor gateways:\n\nThe MPSB sensor gateway, designed for information exchange with external\ndevices through various interfaces. It supports ethernet and serial\ncommunication protocols including CAN, RS-232, and RS-485.The TMSB sensor\ngateway, similar to MPSB, and includes a built-in 3/4G modem that enables it\nto transmit data over the internet to a remote system.\n\nWe can see, from the attackers\u2019 leak, that when one connects to the gateways\nvia SSH they are greeted with a notice from the manufacturer that includes a\ndefault username and password.\n\n  * Username: sbk\n\n  * Password: temppwd\n\nA screenshot released by the attackers, demonstrating how they connect to a\nsensor using SSH.\n\nThe attackers also released JSON files with information about the sensor\ngateways that were impacted in the attack, including device types and names,\nIP addresses, communication ports, location data, and more.\n\nA JSON file released by the attackers containing information about all\ncompromised sensors.\n\nSome information about the type of devices in the exported device JSON list\nincludes:\n\n  * MPSB (sensor gateway): 424 Devices\n\n  * TMSB (sensor gateway+modem): 93 Devices\n\n  * IBZ (3g router): 93 Devices\n\n  * Windows 10 (workstation): 9 Devices\n\n  * Windows 7 (workstation): 1 Device\n\n  * Windows XP (workstation): 1 Device\n\nNote that there are fewer entries than the 87,000 that were claimed by\nBlackjack. We believe this is because the only compromised devices are the\nsensor gateways and not the actual end sensors. Any number of sensors may be\nconnected behind these gateways via a serial bus such as RS485/Meter-Bus.\n\nWe correlated this information with two Youtube videos (here, here) the\nattackers released showing the deployment of the Fuxnet malware. All of the\nlisted devices from the videos matched the gateways from the JSON of the\nextracted devices, which confirms our assumption that only the TMSB/MPSB\ngateways were attacked with Fuxnet.\n\nCorrelating attacked devices with the sensor gateways from the leaked\nextracted JSON file\n\nFurthermore, In these files, we also see diagrams and screenshots from the\nsensor management UI such as these, showcasing the network topology:\n\nA network topology diagram released by Blackjack.\n\nThe information depicted corresponds to the JSON file described above.\n\nThe information from the JSON file correlates the information from the UI.\n\n#### 3G Router: iRZ RL22w\n\nAside from the TMSB module with the built-in 3/4G capabilities, another option\nto transmit the data outside to the internet is via an IoT router. The\nattackers reference these routers as iRZ RL22w in their leaks, which are\nmanufactured by a Russian company named iRZ that specializes in wireless\ndevice manufacturing. The router model attacked is iRZ RL22w, a 3G router.\nBehind the scenes, the RL22w uses OpenWRT, an open-source project for embedded\ndevices based on Linux, used primarily for networking devices, including\nrouters.\n\nAn IRZ RL22w, the 3G router attacked by Blackjack.\n\nThese routers were likely used as internet-gateway devices, allowing the\nsensors to be easily internet-connected. By connecting a SIM card to the\nrouter, and using its 3G capabilities, it can allow remote sites to connect to\nthe internet.\n\nWhile there are some publicly known vulnerabilities for IRZ 3G routers, they\ndo not enable zero-click remote code execution. Instead, the attackers chose\nto use the SSH service to connect to these IoT devices and tunnel to internal\ndevices, probably after obtaining the root passwords for these devices.\nEventually, the attackers were able to gain full access as shown in the\nscreenshots they released.\n\nA screenshot released by Blackjack showing them connecting a compromised IRZ\nrouter using the root account.\n\nWhen searching for Internet-exposed IRZ devices using Shodan, we discovered\nthousands of devices, most of which are located in Russia. Currently, there\nare around 4,100 IRZ routers that expose their services to the internet\ndirectly and around 500 of them enable telnet.\n\nShodan and Censys detects thousands of iRZ routers exposed on the internetOf\nthose directly exposed, Shodan and Censys searches show 500 of them enable\nTelnet.\n\n## Sensor Management and Commissioning Software\n\nIn order to manage and configure the sensor, engineers must use the SBKManager\nsoftware suite. This software, as shown in pictures on SBK\u2019s website, connects\nto devices using their proprietary protocol running over TCP/4321.\n\nThe SBKManager interface shows a connection to sensors that enables engineers\nto configure them.\n\nUsing this software, it is possible to connect to the sensor and configure its\nI/O, nodes and readings.\n\n## Sensor Monitoring System\n\nLastly, there is a sensor monitoring system that Blackjack also claims to have\ncompromised. This system is most likely a monitoring system that receives\ntelemetry and status reports from all sensors. Using this system, it is\npossible to receive alerts and logs from each sensor, and control it remotely.\nBy compromising this system, the attackers were able to get a full list of\nmanaged sensors, and correlate the sensors on a map.\n\nA screenshot from the sensor monitoring system with geolocation markingsA\nsensor monitoring system view that shows a hospital facility in top bar\nselection.\n\n## Analyzing the Fuxnet Malware\n\nAn analysis of the behavior of the Fuxnet malware helped identify its logical\nprocesses. These are the steps the attackers took:\n\n  * Deploy Script\n\n  * Lock up the device and destroy the filesystem\n\n  * Destroy NAND Chips\n\n  * Destroy UBI Volume\n\n  * Flood M-Bus\n\n#### Deployment Script\n\nThe first step the attackers took was to compose a full list of target sensor\ngateways IPs they wished to attack, along with a description of the sensor\ncorrelating to its physical location, down to its neighborhood, street, or\nfacility. They then distributed their malware to each target, likely either\nthrough remote-access protocols such as SSH or the sensor protocol (SBK) over\nport 4321.\n\nThe deployment script for the Fuxnet malware.\n\n## Locking Up Devices and Destroying the Filesystem\n\nOnce running on the target device, the malware forks a new child process to\nlock out the device. It starts by remounting the filesystem and giving it\nwrite access. Then it begins to delete crucial filesystem files and\ndirectories, along with shutting down remote access services such as SSH,\nHTTP, telnet, and SNMP. This way, even if the router remains in working\ncondition, no one can access it remotely to restore its operations.\n\nThen, the attackers delete the routing table for the router, rendering its\nability to communicate with other devices inoperable.\n\nLastly, the malware deletes the filesystem of the device, and rewrites the\nflash memory using the operating system mtdblock devices.\n\nThe reaper_start routine, responsible for filesystem corruption and device\nlockout.\n\n#### Destroying NAND Chips\n\nAfter corrupting the filesystem and blocking access to the device, the malware\nmoves on to physically destroy the NAND memory chips on the device. In order\nto do so, the malware performs a bit-flip operation on entire sections of the\nSSD NAND chip, constantly writing and rewriting the memory, only stopping when\nthe malware fails to write to the memory due to it being corrupted. Since the\ngateway uses NAND memory, which can only write and re-write data a certain\nnumber of times (known as the NAND write cycles), constantly rewriting the\nmemory causes the chip to malfunction and be inoperable.\n\nThe routine in charge of corrupting the Nand memory.\n\n#### Destroying UBI Volume\n\nIn order to ensure the sensor does not reboot again, the malware rewrites the\nUBI volume. First, the malware uses the IOCTL interface UBI_IOCVOLUP allowing\nit to interact with the management layer controlling the flash memory, which\ntells the kernel that the UBI volume will be rewritten, and that x-number of\nbytes will be written. In its normal behavior, the kernel will know that the\nrewrite is finished only when x-number of bytes were written. However, the\nmalware will not write x-number of bytes to the UBI, instead it will write\nfewer bytes than it declares, causing the device to wait for the rewrite to\nfinish indefinitely.\n\nThen the malware overwrites the UBI volume with junk data (0xFF), rendering\nthe UBI useless and the filesystem unstable.\n\nA source code snippet presenting the routine overwriting and disrupting the\nUBI volume managing the flash memory peripheral\n\n#### Denial-Of-Service on Monitoring\n\nAs mentioned earlier, the sensor gateway is responsible for receiving\ninformation from the sensors and delivering it to the global monitoring\nsystem. Meaning, behind each gateway, over a dedicated serial bus, there are\nmultiple sensors that are collecting physical data. Usually the sensors are\nconnected to the gateway over RS485/Meter-Bus channel.\n\nA look at the serial ports on the TMSB gateway. Sensors will be connected\nbehind these ports. The malware will try to flood these ports with unknown\npackets.\n\nThe malware tries its best to disrupt the sensors behind the gateway by\nflooding the serial channels with presumably random data, effectively\noverloading the serial bus and the sensors.\n\nDuring the malware operation, it will repeatedly write arbitrary data over the\nMeter-Bus channel. This will prevent the sensors and the sensor gateway from\nsending and receiving data, rendering the sensor data acquisition useless.\nTherefore, despite the attackers\u2019 claim of compromising 87,000 devices, it\nseems that they actually managed to infect the sensor gateways only and were\ntrying to cause further disruption by flooding the Meter-Bus channel\nconnecting the different sensors to the gateway, similar to network fuzzing\nthe different connected sensor equipment. As a result, it appears only the\nsensor gateways were bricked, and not the end-sensors.\n\nA screenshot released by the attackers, flooding the M-Bus bus with packets.\n\n## Frying Sensors?\n\n#### M-Bus\n\nThe serial M-Bus (Meter-Bus) communication protocol is primarily used in\nmetering applications, especially for remote reading of utility meters like\nelectricity, gas, water, and heat. It's based on the EN-13757 series of\nEuropean standards.\n\nAt its core, M-Bus is a complex, yet detailed, serial protocol operating over\na two-wire bus, allowing for asynchronous serial communication over different\nbaud rates. Per this protocol, a Master node connects to various slave nodes;\nin the case of the Moscollector attack, these are the sensor devices\ncollecting data, and polling them for data over the bus.\n\nDiagram presenting the basic M-Bus channel construct.\n\nThe message structure of the M-Bus protocol consists of a series of data\nframes sent constantly over the bus. Each frame begins with an M-Bus start\ndelimiter, followed by the unique identifier of the sensor being accessed\n(each sensor has a unique identifier, allowing the master to communicate with\nspecific devices), the data being sent, and a checksum.\n\nIn the AO SBK architecture, the physical sensors are the M-Bus slaves, sending\nonly the metrics they collect to the sensor-gateway (MPSB/TMSB modules), which\nact as the Master node. By gaining control over the sensor gateway, it is\npossible to send M-Bus messages to all sensors that are connected to it over\nthe serial bus.\n\nHere are some examples of M-Bus packets as depicted in the M-Bus\ndocumentation.\n\nSet the slave to primary address 8 without changing anything else:\n\n68 06 06 68 | 53 FE 51 | 01 7A 08 | 25 16\n\nSet the complete identification of the slave (ID=01020304, Man=4024h (PAD),\nGen=1, Med=4 (Heat):\n\n68 0D 0D 68 | 53 FE 51 | 07 79 04 03 02 01 24 40 01 04 | 95 16\n\nSet identification number of the slave to \"12345678\" and the 8 digit BCD-\nCounter (unit 1 kWh) to 107 kWh.\n\n68 0F 0F 68 | 53 FE 51| 0C 79 78 56 34 12 | 0C 06 07 01 00 00 | 55 16\n\nM-Bus is well documented and there are even multiple clients enabling users to\ncommunicate easily with M-Bus support devices, for example pyMeterBus.\n\nThe attackers shared the M-Bus message struct they used in order to create and\nsend M-Bus messages, as well as their CRC constants. This code can be seen\nhere:\n\nA picture released by the attackers, showcasing their MBus protocol structures\nand constants.\n\n## ICS Malware, M-Bus Fuzzing\n\nWith the goal of attacking and corrupting the sensor components of Moscow\u2019s\ngas and electricity monitoring infrastructure. Blackjack implemented a custom-\nmade industrial malware. As stated above, we called this attack an \u201cM-Bus\nFlooding,\u201d or the process of sending M-Bus frames constantly over the serial\nchannel, most likely RS485.\n\nWe inferred that the attackers tried to overwhelm the bus channel with the\namount of frames they were sending, in order to disable sensor communication\nover that channel. It seems like the attackers wanted to both flood the serial\nchannel and also potentially trigger a bug or vulnerability in the sensors\nthat would damage them.\n\nIn order to fuzz the M-Bus protocol stack of the different sensors, the\nattackers had to implement a module in the ICS malware implant which carries\nout this part of the attack. After more research and reviewing new screenshots\nreleased by attackers (on April 15), we discovered their fuzzing approach.\n\nThe code released by the attackers, which handles the M-Bus fuzzing process.\n\nIn their malware, Blackjack implemented two approaches of M-Bus fuzzing:\nstructured fuzzing and random fuzzing. In their random approach (lines 305-310\nmk_mbus_mode == 1), Blackjack\u2019s malware simply generates random bytes and\nsends them over the M-Bus wire. In order to make sure frames are not dropped\nby the sensors, the malware also calculates a simple M-Bus CRC, appending it\nto the random frame. This approach \u201cruns\u201d over the whole range of possible\nM-Bus payloads, valid or not, with the hope of causing issues in the sensors.\nThis is similar to the methodology for fuzzing software looking for a zero-day\nvulnerability.\n\nIn Blackjack\u2019s structured fuzzing (lines 285-303 mk_mbus_mode == 0) approach,\nFuxnet tries to generate a valid M-Bus frame, only randomizing specific M-Bus\nfields. This way, the malware adheres to the M-Bus protocol structure, which\nincreases the likelihood of the sensor treating the packet as valid and fully\nparsing it. This way, more parsing flow is executed by the sensor, which\nincreases the chances for a vulnerability triggering.\n\nBy implementing these two fuzzing approaches in its malware, Blackjack showed\nthat its real goal was not simply overwhelming the bus channel, but instead\nthey hoped to trigger an existing undiscovered vulnerability and corrupt the\nsensors themselves.\n\n## Key Takeaways\n\nBlackjack\u2019s alleged attack against Moscollector, a key provider to civilian\ninfrastructure in Moscow and beyond, and its impact on emergency detection and\nresponse capabilities cannot be confirmed beyond information leaked by the\nhacker group and published reports from Ukrainian media.\n\nTeam82\u2019s analysis of the published information from the attack, including the\nFuxnet malware, demonstrates an understanding of the connected devices\ncritical to these services operated and managed by Moscollector.\n\nThe attackers developed and deployed malware that targeted the gateways and\ndeleted filesystems, directories, disabled remote access services, routing\nservices for each device, and rewrote flash memory, destroyed NAND memory\nchips, UBI volumes and other actions that further disrupted operation of these\ngateways.\n\nThe ruexfil website also claims the destruction of 87,000 remote sensors and\nIoT collectors dispersed across Moscow and beyond. Team82 believes that the\nsensors and collectors are likely intact, and that only 500 or more sensor\ngateways were damaged. Each would have to be individually replaced or have\ntheir firmware re-flashed.\n\nShare\n\nLinkedIn Twitter Facebook\n\n##### Stay in the know\n\n## Get the Team82 Newsletter\n\nShare\n\nLinkedIn Twitter Facebook\n\n#### Recent Vulnerability Disclosures\n\n  * ##### CVE-2024-3746\n\nCWE-284 IMPROPER ACCESS CONTROL:\n\nThe entire parent directory - C:\\ScadaPro and its sub-directories and files\nare configured by default to allow users, including unprivileged users, to\nwrite or overwrite files.\n\nMeasuresoft recommends that users manually reconfigure the vulnerable\ndirectories so that they are not writable by everyone.\n\nCVSS v3: 5.5\n\n  * ##### CVE-2024-25138\n\nCWE-256: Plaintext Storage of a Password\n\nIn Automation-Direct C-MORE EA9 HMI credentials used by the platform are\nstored as plain text on the device.\n\nAutomationDirect recommends that users update C-MORE EA9 HMI to V6.78\n\nAffected versions:\n\n    * C-MORE EA9 HMI EA9-T6CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T7CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA0-T7CL-R: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T8CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T10CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T10WCL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T12CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T15CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T15CL-R: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-RHMI: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-PGMSW: Version 6.77 and prior\n\nCVSS v3: 6.5\n\n  * ##### CVE-2024-25137\n\nCWE-121: Stack-based Buffer Overflow\n\nIn Automation-Direct C-MORE EA9 HMI there is a program that copies a buffer of\na size controlled by the user into a limited sized buffer on the stack which\nleads to a stack overflow. The result of this stack-based buffer overflow will\nlead to a denial-of-service conditions.\n\nAutomationDirect recommends that users update C-MORE EA9 HMI to V6.78\n\nAffected versions:\n\n    * C-MORE EA9 HMI EA9-T6CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T7CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA0-T7CL-R: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T8CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T10CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T10WCL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T12CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T15CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T15CL-R: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-RHMI: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-PGMSW: Version 6.77 and prior\n\nCVSS v3: 4.3\n\n  * ##### CVE-2024-25136\n\nCWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path\nTraversal')\n\nThere is a function in Automation-Direct C-MORE EA9 HMI that allows an\nattacker to send a relative path in the URL without proper sanitizing of the\ncontent.\n\nAutomationDirect recommends that users update C-MORE EA9 HMI to V6.78\n\nAffected versions:\n\n    * C-MORE EA9 HMI EA9-T6CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T7CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA0-T7CL-R: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T8CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T10CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T10WCL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T12CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T15CL: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-T15CL-R: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-RHMI: Version 6.77 and prior\n    * C-MORE EA9 HMI EA9-PGMSW: Version 6.77 and prior\n\nCVSS v3: 7.5\n\n  * ##### CVE-2024-0860\n\nCWE-319: CLEARTEXT TRANSMISSION OF SENSITIVE INFORMATION\n\nThe affected product is vulnerable to a cleartext transmission of sensitive\ninformation vulnerability, which may allow an attacker to capture packets to\ncraft their own requests.\n\nSofting edgeConnector: Version 3.60 and Softing edgeAggregator: Version 3.60\nare affected. Update Softing edgeConnector and edgeAggregator to v3.70 or\ngreater.\n\nCVSS v3: 8.0\n\n##### Solutions\n\n  * Industrial Cybersecurity\n  * Healthcare Cybersecurity\n  * Commercial Cybersecurity\n  * Public Sector Cybersecurity\n\n##### Threat Research\n\n  * Team82 Home\n  * Vulnerability Disclosure Dashboard\n  * Research\n  * PGP Key\n\n##### Partners\n\n  * Partners\n  * Technology Alliance Partners\n  * Channel Partners\n  * Managed Security Service Providers\n  * Become a Partner\n  * Find a Partner\n  * Partner Login\n\n##### Resources\n\n  * Resource Library\n  * Blog\n  * White Papers\n  * Reports\n  * Case Studies\n  * Datasheets\n  * Integration Briefs\n  * Podcasts\n  * Videos\n\n##### Company\n\n  * About Us\n  * Careers\n  * Leadership\n  * Newsroom\n  * Trust Center\n  * Events\n  * Contact Us\n\n\u00a9 2024 Claroty. All rights reserved.\n\nLinkedIn Twitter YouTube Facebook\n\nTerms & Conditions / Privacy Policy\n\n  * Industrial\n\nIndustrial Home xDome Edge Secure Remote Access (SRA) CTD Cyber Resilience\nOperational Resilience Asset Discovery Asset Management Network Protection\nVulnerability & Risk Management Threat Detection\n\n  * Healthcare\n\nHealthcare Home Medigate by Claroty Cyber Resilience Operational Resilience\nDevice Discovery Device & Lifecycle Management Threat Detection Network\nProtection Operational Intelligence Vulnerability & Risk Management\n\n  * Commercial\n\nCommercial Home xDome Edge Secure Remote Access CTD Cyber Resilience\nOperational Resilience Asset Discovery Asset Management Network Protection\nVulnerability & Risk Management Threat Detection\n\n  * Public Sector\n\nPublic Sector Home U.S. Federal Government State, Local, Tribal, and\nTerritorial (SLTT) National and International Government Government Regulatory\n& Policy Compliance\n\n  * Threat Research\n\nTeam82 Home Vulnerability Disclosure Dashboard Research Talks PGP Key\n\n  * Partners\n\nPartners Technology Alliance Partners Channel Partners Managed Security\nService Providers Become a Partner Find a Partner Partner Login\n\n  * Resources\n\nBlog Reports White Papers Datasheets & Solution Overviews Integration Briefs\nCase Studies On-Demand Webinars Podcasts\n\n  * Company\n\nAbout Us Careers Leadership Newsroom Trust Center Events Contact Us\n\n  * Search\n\nLinkedIn Twitter YouTube Facebook\n\n", "frontpage": false}
