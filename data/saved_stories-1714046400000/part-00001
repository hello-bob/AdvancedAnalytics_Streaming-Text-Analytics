{"aid": "40153160", "title": "HashiCorp Vault: Connecting Entities, Auth Back Ends, Groups, and Policies Oh My", "url": "https://holdmybeersecurity.com/2020/09/15/vault-connecting-entities-auth-backends-groups-and-policies-oh-my/", "domain": "holdmybeersecurity.com", "votes": 2, "user": "thunderbong", "posted_at": "2024-04-25 03:41:54", "comments": 0, "source_title": "Vault: Connecting entities, auth backends, groups, and policies OH MY | HoldMyBeer", "source_text": "Vault: Connecting entities, auth backends, groups, and policies OH MY | HoldMyBeer\n\n# HoldMyBeer\n\n## Cause every great story starts with \"Hold my beer\"\n\n  * Home\n  * About Me\n  * Resources\n\nSep 15 2020\n\nLeave a comment\n\nBy spartan2194 DevOps, System Administration, Tools\n\n## Vault: Connecting entities, auth backends, groups, and policies OH MY\n\nWhile working on my osquery-file-carve-server project I determined my\napplication needed authentication. However, I didn\u2019t want to pigeon hole my\napplication to a single platform/service for authentication. After some\nresearch, I decided to implement support for Vault into my application because\nit provides the ability for users to authenticate using various methods.\nHowever, during my research, I had a hard time understanding how the various\nVault components connected to create this functionality.\n\nThis blog post will provide an understanding of the Vault components used to\nimplement this functionality. In addition, it will demonstrate the\nrelationship between the various Vault components: authentication backends,\nentities, groups, and policies. The final result of combining these Vault\ncomponents is a system that can authenticate a single user using different\nauthentication services.\n\n# DISCLAIMER\n\nThis blog post is a proof of concept (POC) for a homelab and does NOT\nimplement best practices for an enterprise environment. Please review the\nHashicorp Vault documentation for best practices.\n\n# DISCLAIMER\n\n# Goals\n\n  * Setup Vault to use Auth0 and Github as auth backends\n  * Use Auth0 OR Github to generate a Vault token\n  * Understand the relationship between auth backends, policies, groups, and entities\n\n# Background\n\n## Vault components?\n\n  * Policies \u2013 Defines what an entity can do \u2013 create, read, modify, delete\n  * Auth backend \u2013 A service that can authenticate users\n  * Entities \u2013 An entity ties different user accounts from different auth backends to a single entity. For example, my Auth0 username is \u201cbbornholm\u201d but my Github username is \u201cCptOfEvilMinions\u201d. In either case, the account is still ME, just a different platform and/or username. Entities tie of all these different auth services and usernames together as a single object.\n  * Groups \u2013 A group makes all this magic come together. Not only is a group a collection of entities ( users and auth backends) but an assignment of policies that defines what each entity can perform.\n\n# Diagram of relationships\n\nThe diagram above shows the relationships between policies, groups, entities,\nand authentication backends. At first, none of this made sense until I was\nable to map these relationships. In this blog post, I have three user accounts\non three separate authentication backends which are Auth0, Github, and LDAP.\nAll of these accounts are ME but I have three different usernames on three\ndifferent platforms. An entity provides a layer of abstraction that says this\nentity can be associated with the following user account on its respective\nplatform.\n\nBy default, the default policy on Vault provides common permissions \u2013 if a\npolicy does not contain a rule to allow an action, the default action is to\nDENY. In order to allow a user to perform an action such as reading a secret,\na policy must be created explicitly allowing that action. Next, a group is\ncreated which is a collection of entities and policies. The group provides a\nunion of policies and entities, allowing the entities within the group to\nperform predefined actions within the policies on the Vault platform.\n\nIn this blog post scenario, we are going to create an entity with a friendly\nname of \u201cbbornholm\u201d. The entity \u201cbbornholm\u201d can utilize the following user\naccounts: the \u201cthunderwagon\u201d account from Auth0, the \u201cCptOfEvilMinions\u201d\naccount from Github, or the \u201cbbornholm2194\u201d account via LDAP to login. Next,\nwe will create a policy named \u201ctest-read-only\u201d that contains a set of rules to\nallow\n\nREAD\n\nREADing and\n\nLIST\n\nLISTing all secrets from the following path\n\nsecrets/hello\n\nsecrets/hello.\n\nBy default since the policy does not explicitly allow\n\nDELETE\n\nDELETE,\n\nUPDATE\n\nUPDATE, or,\n\nCREATE\n\nCREATE; therefore, these actions are blocked by default. Lastly, the entity\n\u201cbbornholm\u201d and our policy \u201ctest-read-only\u201d will be applied to a group named\n\u201ctest-group\u201d. This step connects policies and entities together to allow\nentities to perform the actions set by the policies.\n\n# Setup/Configure Vault\n\n## Step 0: Spin up Vault with Docker\n\nThis blog post assumes you have Vault setup, if you do not, take a look at my\nblog post: Install/Setup Vault for PKI + NGINX + Docker \u2013 Becoming your own\nCA.\n\n  1. git clone https://github.com/CptOfEvilMinions/BlogProjects\n\ngit clone https://github.com/CptOfEvilMinions/BlogProjects\n\n  2. cd BlogProjects/vault-entities-groups-auths\n\ncd BlogProjects/vault-entities-groups-auths\n\n## Step 1: Create some SUPER DUPER secrets\n\n  1. export VAULT_ADDR=https://<Vault hostname>:<port>\n\nexport VAULT_ADDR=https://<Vault hostname>:<port>\n\n  2. vault login\n\nvault login\n\n    1. Login as root\n  3. vault secrets enable -path=secrets kv\n\nvault secrets enable -path=secrets kv\n\n    1. Enable KV secrets engine\n  4. vault kv put secrets/hello target=world\n\nvault kv put secrets/hello target=world\n\n    1. Create a secret\n  5. vault kv get secrets/hello\n\nvault kv get secrets/hello\n\n    1. Query secret\n\n## Step 2: Create policies\n\n  1. vault policy write <POLICY_NAME> <POLICY_FILE>\n\nvault policy write <POLICY_NAME> <POLICY_FILE>\n\n    1. Create a read-only policy\n  2. vault policy write <POLICY_NAME> <POLICY_FILE>\n\nvault policy write <POLICY_NAME> <POLICY_FILE>\n\n    1. Create an admin policy\n  3. vault policy list\n\nvault policy list\n\n    1. Lists policies\n  4. vault policy read <POLICY_NAME>\n\nvault policy read <POLICY_NAME>\n\n## Step 2: Setup Github for auth backend\n\n  1. vault auth enable github\n\nvault auth enable github\n\n  2. vault write auth/github/config organization=<ORG_NAME>\n\nvault write auth/github/config organization=<ORG_NAME>\n\n    1. Enable Github auth for the specified Github org\n\n## Step 3: Setup FreeIPA(LDAP) for auth backend\n\n  1. vault auth enable ldap\n\nvault auth enable ldap\n\n  2. vault write auth/ldap/config \\<br> url=\"ldap[s]://ldap.example.com\" \\<br> userdn=\"cn=users,cn=accounts,dc=example,dc=com\" \\<br> userattr=\"uid\" \\<br> insecure_tls=<true/false> \\<br> starttls=<true/false> \\<br> groupdn=\"cn=groups,cn=accounts,dc=example,dc=com\" \\<br> groupattr=\"cn\" \\<br> binddn=\"uid=<BIND_USERNAME>,cn=sysaccounts,cn=etc,dc=example,dc=com\" \\<br> bindpass=\"<BIND_PASSWORD>\"\n\nvault write auth/ldap/config \\ url=\"ldap[s]://ldap.example.com\" \\\nuserdn=\"cn=users,cn=accounts,dc=example,dc=com\" \\ userattr=\"uid\" \\\ninsecure_tls=<true/false> \\ starttls=<true/false> \\\ngroupdn=\"cn=groups,cn=accounts,dc=example,dc=com\" \\ groupattr=\"cn\" \\\nbinddn=\"uid=<BIND_USERNAME>,cn=sysaccounts,cn=etc,dc=example,dc=com\" \\\nbindpass=\"<BIND_PASSWORD>\"\n\n## Step 3: Create/Setup Auth0 for auth backend\n\n### Create Application\n\n  1. Create an Auth0 account if you don\u2019t already have one\n  2. Login in to your Auth0 account as an admin\n  3. Select \u201cApplications\u201d on the left\n\n    1. Enter a name for the app\n    2. Select \u201cNative\u201d for type\n    3. Select \u201cCreate\u201d\n  4. Select the \u201cSettings\u201d tab\n  5. Enter the following URLs below into the \u201cAllowed Callback URLs\u201d section\n\n    1. https://<vault_server_address>:8200/ui/vault/auth/oidc/oidc/callback\n\nhttps://<vault_server_address>:8200/ui/vault/auth/oidc/oidc/callback\n\n    2. URLs must be separated by a comma\n    3. https://<vault_server_address>:8250/oidc/callback\n\nhttps://<vault_server_address>:8250/oidc/callback\n\n  6. Copy the domain value\n  7. Copy the client ID value\n  8. Select \u201cSave changes\u201d\n\n### Create a user (optional)\n\n  1. Select \u201cUsers & Roles\u201d on the right\n  2. Select \u201cCreate user +\u201d\n\n    1. Enter e-mail for the user\n    2. Enter password\n    3. Select \u201cUsername-Password-Authentication\u201d for Connection\n    4. Select \u201cCreate\u201d\n\n### Enable Auth0 on Vault\n\n  1. export AUTH0_DOMAIN=\"<Auth0 domain>\"\n\nexport AUTH0_DOMAIN=\"<Auth0 domain>\"\n\n  2. export AUTH0_CLIENT_ID=\"<AUTH0_CLIENT_ID>\"\n\nexport AUTH0_CLIENT_ID=\"<AUTH0_CLIENT_ID>\"\n\n  3. export AUTH0_CLIENT_SECRET=\"<AUTH0_CLIENT_SECRET>\"\n\nexport AUTH0_CLIENT_SECRET=\"<AUTH0_CLIENT_SECRET>\"\n\n  4. vault auth enable oidc\n\nvault auth enable oidc\n\n  5. vault write auth/oidc/config oidc_discovery_url=\"https://<AUTH0_DOMAIN>/\" oidc_client_id=\"<AUTH0_CLIENT_ID>\" oidc_client_secret=\"<AUTH0_CLIENT_SECRET>\" default_role=\"reader\"\n\nvault write auth/oidc/config oidc_discovery_url=\"https://<AUTH0_DOMAIN>/\"\noidc_client_id=\"<AUTH0_CLIENT_ID>\" oidc_client_secret=\"<AUTH0_CLIENT_SECRET>\"\ndefault_role=\"reader\"\n\n    1. The\n\noidc_discovery_url\n\noidc_discovery_url value needs a trailing \u201c/\u201d\n\n  6. vault write auth/oidc/role/reader bound_audiences=\"<AUTH0_CLIENT_ID>\" allowed_redirect_uris=\"http://<VAULT_HOSTNAME>:<VAULT_PORT>/ui/vault/auth/oidc/oidc/callback\"\n\nvault write auth/oidc/role/reader bound_audiences=\"<AUTH0_CLIENT_ID>\"\nallowed_redirect_uris=\"http://<VAULT_HOSTNAME>:<VAULT_PORT>/ui/vault/auth/oidc/oidc/callback\"\n\nuser_claim=\"sub\" policies=\"reader\"\n\nuser_claim=\"sub\" policies=\"reader\"\n\n## Step 5: Create an entity\n\n  1. vault auth list\n\nvault auth list\n\n    1. Get accessor IDs for each auth backend\n    2. Copy Accessor IDs for each auth backend\n  2. vault write identity/entity name=\"<entity username>\" policies=\"<POICY_NAME>\" metadata=organization=\"<ORG_NAME>\" metadata=team=\"<TEAM_NAME>\"\n\nvault write identity/entity name=\"<entity username>\" policies=\"<POICY_NAME>\"\nmetadata=organization=\"<ORG_NAME>\" metadata=team=\"<TEAM_NAME>\"\n\n    1. Create an entity with metadata contain org name and team name\n  3. vault write identity/entity-alias name=\"<LDAP USERNAME>\" canonical_id=\"<ENTITY_ID>\" mount_accessor=\"<LDAP access ID>\"\n\nvault write identity/entity-alias name=\"<LDAP USERNAME>\"\ncanonical_id=\"<ENTITY_ID>\" mount_accessor=\"<LDAP access ID>\"\n\n    1. Add the LDAP user account to the entity as an alias\n  4. vault write identity/entity-alias name=\"<GITHUB_USERNAME>\" canonical_id=<ENTITY_ID> mount_accessor=<GITHUB_ACCESSOR_ID>\n\nvault write identity/entity-alias name=\"<GITHUB_USERNAME>\"\ncanonical_id=<ENTITY_ID> mount_accessor=<GITHUB_ACCESSOR_ID>\n\n    1. Add the Github user account to the entity as an alias\n  5. vault write identity/entity-alias name=\"<AUTH0_USERNAME>\" canonical_id=<ENTITY_ID> mount_accessor=<AUTH0_ACCESSOR_ID>\n\nvault write identity/entity-alias name=\"<AUTH0_USERNAME>\"\ncanonical_id=<ENTITY_ID> mount_accessor=<AUTH0_ACCESSOR_ID>\n\n    1. Add the Auth0 user account to the entity as an alias\n  6. vault read identity/entity/id/<entity_id>\n\nvault read identity/entity/id/<entity_id>\n\n    1. The output should include the entity aliases, metadata (organization, and team), and base policy\n\n## Step 6: Create an internal group\n\nIt is common for organizations to enable auth methods such as LDAP, Auht0, and\nperhaps GitHub to handle the Vault user authentication, and individual user\u2019s\ngroup memberships are defined within those identity providers. In order to\nmanage the group-level authorization, you can create an external group to link\nVault with the external identity provider (auth provider) and attach\nappropriate policies to the group.\n\n  1. vault write identity/group name=\"test-group\" policies=\"test-read-only\" member_entity_ids=<entity_id> metadata=team=\"Engineering\" metadata=region=\"North America\"\n\nvault write identity/group name=\"test-group\" policies=\"test-read-only\"\nmember_entity_ids=<entity_id> metadata=team=\"Engineering\"\nmetadata=region=\"North America\"\n\n# Test access\n\n## Use LDAP to access secret\n\n  1. vault login -method=ldap username=<LDAP username>\n\nvault login -method=ldap username=<LDAP username>\n\n  2. vault kv get kv/hello\n\nvault kv get kv/hello\n\n## Use Auth0 to access secret\n\n  1. vault login -method=oidc role=\"reader\"\n\nvault login -method=oidc role=\"reader\"\n\n    1. A browser should open and direct you to the Auth0 login portal\n  2. vault kv get kv/hello\n\nvault kv get kv/hello\n\n## Use Github to access secret\n\n### Generate Github app token\n\n  1. Login into Github as an org admin\n  2. In the upper-right corner of any page, click your profile photo, then click Settings\n  3. In the left sidebar, click Developer settings\n  4. In the left sidebar, click Personal access tokens\n  5. Select \u201cGenerate new token\u201d\n\n    1. Enter \u201c<app name>\u201d\n    2. Check \u201cread:org\u201d permission\n    3. Select \u201cGenerate token\u201d\n  6. Copy token\n\n### Login with token\n\n  1. vault login -method=github\n\nvault login -method=github\n\n    1. Enter GitHub Personal Access Token\n  2. vault kv get kv/hello\n\nvault kv get kv/hello\n\n# Lessons learned\n\nI am currently reading a book called \u201cCracking the Coding Interview\u201d and it is\na great book. One interesting part of the book is their matrix to describe\nprojects you worked on and the matrix contains the following sections which\nare: challenges, mistakes/failures, enjoyed, leadership, conflicts, and what\nwould you do differently. I am going to try and use this model at the end of\nmy blog posts to summarize and reflect on the things I learn. I don\u2019t blog to\npost things that I know, I blog to learn new things and to share the knowledge\nof my security research.\n\n## New skills/knowledge\n\n  * Improved my understanding of Hashicorp Vault\n  * Learned how to create Vault policies\n  * Learned how to use Vault to support multiple authentication backends for a single entity\n  * Used the following new service Auth0\n\n## Challenges\n\n  * Finding documentation to setup auth backends with Vault in a secure manner\n\n## What You\u2019d Do Differently\n\n  * This blog post was a proof-of-concept (PoC) for using Vault with various auth backends. However, I wish I had time to research OIDC to implement the authentication backend in a more secure manner.\n\n# References\n\n  * Vault \u2013 Secrets Engines\n  * Essential Patterns of Vault \u2014 Part 1\n  * Vault Policies\n  * GitHub Auth Method\n  * OIDC Auth Method\n  * Identity: Entities and Groups\n  * HashiCorp Vault and FreeIPA\n  * JSON on the command line with jq\n  * Vault \u2013 Read Entity by Name\n  * Versioned Key/Value Secrets Engine\n  * Okta Authentication in Vault using OpenID Connect (OIDC)\n  * Vault \u2013 LDAP\n  * Vault Policies\n\n### Leave a Reply Cancel reply\n\n\u2190 Previous post\n\nNext post \u2192\n\n### Recent Posts\n\n  * Spark, JupyterHub, Minio, and Helm on Kubernetes\n  * A hero\u2019s journey to learning and conquering the Kubernetes tech beast\n  * Part 3: Intro to threat hunting \u2013 Hunting the imposter among us with the Elastic stack and Sysmon\n  * Getting started with Autopsy multi-user cluster\n  * Connecting to my homelab remotely with Hashicorp Boundary v0.2.0 and Auth0\n\n### Recent Comments\n\n  * admin on Install/Setup Graylog 3 on Ubuntu 18.04 \u2013 Zeeks logs + threat intel pipeline\n  * Alessio on Install/Setup Graylog 3 on Ubuntu 18.04 \u2013 Zeeks logs + threat intel pipeline\n  * spartan2194 on Getting started with FleetDM\n  * Miguel on Tales of a Blue Teamer: Detecting Powershell Empire shenanigans with Sysinternals\n  * Jason on Getting started with FleetDM\n\n### Archives\n\n  * February 2024\n  * January 2024\n  * June 2021\n  * May 2021\n  * April 2021\n  * March 2021\n  * February 2021\n  * January 2021\n  * December 2020\n  * November 2020\n  * October 2020\n  * September 2020\n  * August 2020\n  * July 2020\n  * June 2020\n  * May 2020\n  * March 2020\n  * February 2020\n  * January 2020\n  * December 2019\n  * October 2019\n  * May 2019\n  * April 2019\n  * March 2019\n  * February 2019\n  * December 2018\n  * November 2018\n  * June 2018\n  * April 2018\n  * January 2018\n  * December 2017\n  * October 2017\n  * September 2017\n  * August 2017\n  * July 2017\n  * June 2017\n  * May 2017\n  * February 2017\n  * January 2017\n  * December 2016\n  * November 2016\n  * September 2016\n  * June 2016\n\n### Categories\n\n  * DevOps\n  * DevOps Tales\n  * ForFunAndWumbos\n  * Honeypot\n  * How to red team\n  * Incident Response\n  * IR Tales\n  * Logging\n  * macOS\n  * Malware Analysis\n  * Memory Forensics\n  * Network Security\n  * Pen Testing\n  * PoC\n  * Red Teaming\n  * System Administration\n  * Tales of a Blue Teamer\n  * Tales of a Red Teamer\n  * Threat Detection Engineering\n  * Threat Hunting\n  * Threat Intelligence\n  * Tools\n  * Uncategorized\n  * WebSec\n\n### Meta\n\n  * Log in\n  * Entries feed\n  * Comments feed\n  * WordPress.org\n\nProudly powered by WordPress | Theme: Chunk by WordPress.com.\n\n", "frontpage": false}
