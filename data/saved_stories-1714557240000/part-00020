{"aid": "40219131", "title": "How to install Linux from a Windows installer", "url": "https://prose.nsood.in/linux-from-windows-installer", "domain": "prose.nsood.in", "votes": 7, "user": "todsacerdoti", "posted_at": "2024-05-01 03:16:49", "comments": 0, "source_title": "Prose", "source_text": "How to install Linux from a Windows installer \u2013 Prose\n\n# Prose\n\nApr 30 2024, 11:06 PM\n\n# How to install Linux from a Windows installer\n\n## I'm not sure why you would want to do this. Presumably for the same reason\nas me? I also don't know what that was.\n\nA few days ago, I made this relatively-popular post on my Fediverse account,\nwhich had a picture of a Windows installer offering to install Alpine Linux:\n\nAnd a day or two after that, I posted a YouTube video showing the entire\ninstall process from start to finish:\n\nCountless^1 people have suggested that I should write a blog post about how I\ndid this, so here we go.\n\n### Step 1: Install Linux on an NTFS partition\n\nThis is actually pretty easy these days! You want to pick a Linux distribution\nthat will let you mount partitions by hand and then uncritically install to\nthose mountpoints without questioning your decisions. Two Linux distributions\nthat I\u2019m aware of that will let you do this are Arch Linux and Alpine Linux.\n\n#### The partition scheme\n\nThis is approximately what the partitioning scheme looks like:\n\n  1. We are using UEFI/GPT. Presumably you could make this work with legacy boot/MBR, but that would require you to somehow install the grub boot sector from Windows. I don\u2019t know how to do that.\n\n  2. The first partition is an EFI partition, about 100MB in size. Your Linux distributions may want you to create bigger partitions, but the Windows installer will only create a 100MB partition so you\u2019re stuck with this size anyway. This is formatted as FAT32, and mounted at /boot the usual way.\n\n  3. The second partition is a 16MB partition that we don\u2019t need to use, but need to correctly offset the partition numbers, since the Windows installer will create a 16MB partition between the EFI partition and the system partition for some reason.\n\n  4. The third partition is your root filesystem, filling up the rest of the disk. This is formatted as NTFS, mounted at / using the ntfs3 partition type and the acl and windows_names mount options. The acl flag enables the driver to use POSIX ACLs (think: file permissions), and the windows_names flag prevents the creation of files that would not work on a Windows computer (say, anything that contains a : or is named con).\n\n#### Making the partitions and installing\n\nUsing the Alpine semi-automatic installation guide as a reference, you might\ncreate your partitions like so:\n\n    \n    \n    // ntfs-3g-progs is required for mkfs.ntfs, which does not ship on // the alpine live iso for some reason # apk add ntfs-3g-progs parted # alias p=\"parted -sa optimal /dev/sda\" # p mklabel gpt # p mkpart p 0M 100M # p mkpart p 100M 116M # p mkpart p 116M 100% # p set 1 esp // required so Windows will detect this as a valid NTFS partition // later # p set 3 msftdata # mkfs.vfat -F32 /dev/sda1 # mkfs.ntfs -Q /dev/sda3 # mount -t ntfs3 -o acl,windows_names /dev/sda3 /mnt # mkdir /mnt/boot # mount /dev/sda1 /mnt/boot\n\nAfter that, you simply proceed with the installation as normal. At this point,\nif you\u2019re using Arch Linux, your pacstrap command will fail, because pacman\nexpects to be able to create files with :s in the name, and as we discussed,\nthat\u2019s illegal. So, uh, try not to use a Linux distro that relies on the\nability to do that. The rest of this guide will assume you\u2019re installing\nAlpine.\n\n#### Getting the system to boot\n\nWhile Alpine correctly adds rootfstype=ntfs3 to your kernel cmdline, for some\nreason, as of writing, the initramfs it generates does not include the ntfs3\nkernel module. Also, the Alpine installer will generate an fstab that uses\nUUIDs to identify partitions. Since we\u2019ll be relying on the partitions created\nby the Windows installer, which will have fresh UUIDs, we need to change the\nfstab to use the ol' unreliable drive names instead.\n\nSo after you\u2019re done installing, open /mnt/etc/fstab and change the first\ncolumn of the EFI partition to say /dev/sda1, and the first column of the root\npartition to say /dev/sda3.\n\nNext, we need to add ntfs3 to the initramfs. For that, install the mkinitfs\npackage on the live environment, create a file\n/mnt/etc/mkinitfs/features.d/ntfs3.modules that contains the text\nkernel/fs/ntfs3, and make sure that /mnt/etc/mkinitfs/mkinitfs.conf\u2019s features\nline contains the ntfs3 feature.\n\n> Side note: At the time of writing, you need to open /sbin/mkinitfs in a text\n> editor and prefix the sysconfdir variable at the top of the file with /mnt,\n> since mkinitfs\u2019s -b flag doesn\u2019t apply to that variable for some reason.\n> I\u2019ve filed a bug report for this so hopefully that can be fixed and we can\n> all start installing Alpine Linux to NTFS partitions as God Gates intended.\n\nAfter that, running mkinitfs -b /mnt -f /mnt/etc/fstab 6.6.28-0-lts should\nregenerate your initramfs in a way that works with our shenanigans. Replace\nthe kernel version string with whatever\u2019s there in /mnt/lib/modules.\n\nFinally, we need to tell grub to stop using UUIDs as well. Open\n/mnt/boot/grub/grub.cfg, find the Alpine Linux menu entry, replace the line\nsearch ... --set root <UUID of the EFI partition> with set root='hd0,gpt1'\n(that line may already exist, so let it be if so), and change the linux ...\nroot=UUID=<UUID of root partition> ... line to say root=/dev/sda3 instead.\n\nThere\u2019s probably a better way to do this by changing /mnt/etc/default/grub and\nregenerating the config using grub-mkconfig but I don\u2019t understand how that\nworks and so this is what I did.\n\n#### Behold the monster\n\nNow, unmount /mnt/boot and /mnt, and you should be ready to reboot into your\nnew Alpine installation! Unmounting is very important since if the dirty bit\nis set on an NTFS partition (which it is while it is mounted), ntfs3 will\nrefuse to mount it read-write until you run chkdsk on it from a Windows system\nor ntfsfix on it from a Linux system with ntfs-3g-progs. You do not want your\nroot partition to be mounted read-only, it makes life hard.\n\nAfter verifying that it does boot, we can move on to the hard part.\n\n### Step 2: Stuff Linux into a WIM file\n\nThis section (and transitively, the rest of this article) was motivated by the\nfollowing exchange on Discord about the Windows installer:\n\nFor context, a WIM (Windows Image) file is a compressed storage format used by\nMicrosoft in the Windows installer. Think of it as a fancy ZIP file that the\ninstaller extracts onto your hard drive. A single WIM file can contain\nmultiple images, and the Windows installer can pick which image it wants to\ninstall, either based on your product key, or what edition you choose during\nsetup.\n\nOur goal, then, is to add an image to the Windows installer\u2019s WIM file\n(sources\\install.wim in your Windows ISO/USB) whose contents are our Linux\ninstallation.\n\n#### Laying out the plan\n\nCreating a WIM file with our Linux installation is easy \u2014 Microsoft themselves\nprovide tools for you to create your own WIM files, using a tool called DISM^2\n(Deployment Image Service and Management tool). I\u2019ve been using a convenient\nGUI frontend for DISM called GImageX, but if you\u2019re a Microsoft purist you\ncould just use DISM directly for the same effect.\n\nThe hard part is making Linux bootable. bcdboot does not know what a Linux is.\nIt only knows how to make Windows bootable. I thought of solving this problem\nby replacing bcdboot in the Windows setup with something that installs GRUB,\nbut that felt against the spirit of the whole thing and also kinda hard.\nInstead, I came up with the following strategy:\n\n  1. Install a copy of the Windows Preinstallation Environment (WinPE) on the same rootfs as Linux, putting them both in the same WIM image\n  2. Have the Windows installer make WinPE bootable and the computer reboot into WinPE after the first phase of Windows setup\n  3. Have WinPE make the necessary adjustments to make Linux bootable, and reboot into Linux\n\n#### Meet the Windows Preinstallation Environment\n\nWinPE is made freely available by Microsoft as part of the Windows Assessment\nand Deployment Kit, and Microsoft even provides instructions on how to\ndownload WinPE, customize it for your purposes, and use it in your custom\napplications. The only thing they disallow you from doing is using it as a\ngeneral-purpose OS, but that\u2019s fine, since we\u2019re not doing that.\n\n> Side note: You will need to use Windows to follow the steps below, since the\n> Windows ADK is not available for other platforms. You may have luck with\n> obtaining a copy of WinPE through some other means and using wimlib-imagex\n> to capture and apply your WIM files from within Linux, but I found that that\n> tool would happily generate files from partitions that cause Windows to\n> choke \u2014 which are useless since we\u2019ll be using them in the Windows setup or\n> in WinPE, both of which would also choke on them.\n\nAfter installing the Windows ADK and the WinPE addons, open the Deployment and\nImaging Tools Environment from the Start menu as an administrator, and run the\nfollowing command to get a working copy of WinPE.\n\n    \n    \n    > copype amd64 c:\\pe_amd64\n\nThis will dump a copy of a WIM file containing Windows PE in\nC:\\pe_amd64\\media\\sources\\boot.wim. Apply this image to the drive containing\nyour Linux rootfs, either using the Dism /Apply-Image command or using the\nApply tab in GImageX. The Linux rootfs drive is E:\\ in this screenshot:\n\nNow that we have WinPE, we can make it do our bidding.\n\n#### Making Linux bootable\n\nThe great thing about UEFI boot is that there doesn\u2019t need to be any magic\nbootcode in the first 512 bytes of the hard drive. You can inject magic UEFI\nboot entries into the firmware (Windows will inject one called \u201cWindows Boot\nManager\u201d, and grub will inject one with whatever name you pass in the\n--bootloader-id flag while running grub-install), but you don\u2019t have to. If\nyou boot from a hard drive directly, without the help of any magic boot entry,\nthe UEFI will simply read efi\\boot\\bootx64.efi from the EFI partition in that\ndrive and run it.\n\nbcdboot will put a file there that will load Windows, in addition to creating\nthe UEFI entry. And if you specify --removable while running grub-install,\ngrub will also put a file there that will load grub and read grub/grub.cfg\nfrom the EFI partition. Conveniently, Alpine specifies --removable, so no\nmagic UEFI entries to worry about creating.\n\nRecall that when we installed Linux, we made /boot our EFI partition. So all\nwe need to do to make Linux bootable from WinPE is to drop into the EFI\npartition the files that Alpine put in /boot. It\u2019ll drop the\nefi\\boot\\bootx64.efi in place, and that will make it so that booting from the\nhard drive will boot grub, which will load Alpine.\n\nTo do this, first, we need to save a copy of the Linux EFI partition. In\nWindows, run the diskpart command^3, and run the following commands in the\ndiskpart prompt:\n\n    \n    \n    > list disk // note N, the disk number of your Linux drive > select disk N > select partition 1 > assign letter=S\n\nThis will make the Linux EFI partition available as S:\\ on Windows. Once\nthat\u2019s done, you can use the Dism /Capture-Image command or the \u201cCapture\u201d tab\nin GImageX to capture the S:\\ drive as efi.wim on your Linux rootfs.\n\nThe Name and Description fields are not important, for now.\n\nNow that we have the contents of the EFI partition, we just need to get WinPE\nto apply them. Conveniently, the default build of WinPE simply executes\n\\Windows\\System32\\startnet.cmd on startup, so we can make that file do what we\nwant.\n\nOpen E:\\Windows\\System32\\startnet.cmd in Notepad as administrator. It should\nalready have a line that says wpeinit in it \u2014 as the name suggests, that\ninitializes a WinPE environment. I have no idea if it\u2019s necessary, but it\ndoesn\u2019t hurt so I just left it in there. Add the following lines:\n\n    \n    \n    diskpart /s mount-efi.txt dism /Apply-Image /ImageFile:\"C:\\efi.wim\" /Index:1 /ApplyDir:S:\\ bcdedit /delete {bootmgr} /f exit\n\nThe second line should be fairly self-explanatory \u2014 we\u2019re applying the EFI\nimage we captured to the S:\\ drive, which presumably is where our EFI\npartition is. The first line is what we use to put it there. By default, EFI\npartitions are not assigned a drive letter, but as we did above, you can use\ndiskpart to give them one. The /s flag allows you to give a script to execute\nto diskpart rather than it reading commands from the terminal. Create a file\ncalled mount-efi.txt in the System32 folder, and give it the following\ncontents to mount the EFI partition:\n\n    \n    \n    select disk 0 select partition 1 assign letter=S exit\n\nThe third line we added in startnet.cmd deletes the magic UEFI boot entry that\nthe Windows installer creates to boot Windows. This entry has a higher\nprecedence than booting directly from the hard drive, so we want to delete it\nto boot into grub like we want.\n\nAnd that should be it! Now, booting into our Linux rootfs will start a copy of\nWinPE, which will render itself unbootable and make Linux bootable in its\nstead, then reboot.\n\n#### One more thing\n\nThis took me three days of headbanging, trial and error, giving up, retrying,\nand more, to figure out. You could capture the Linux rootfs into a WIM file at\nthis point, and put it into a Windows ISO and boot from it. The installer will\nappear to run successfully, until the installer asks you for a product key and\nyou say you don\u2019t have one. Then you\u2019ll see this screen:\n\nTypical Microsoft behavior.\n\nIt turns out that the Windows installer will read the EULA out from within the\nWIM file, and from within the specific image you chose. It will look for this\nEULA in\n\\Windows\\System32\\\\[Locale]\\Licenses\\\\[Channel]\\\\[Edition]\\license.rtf. The\nlocale is the language and country code, like en-US, the channel is one of\n_Default, OEM, or Volume, and the Edition is set for the image by the software\nthat captured your WIM file. I thought that this corresponded to the SKU\ndropdown in GImageX, but that seems to not be the case, it seems to instead be\nauto-detected by DISM. The channel for WinPE is, well, WindowsPE.\n\nSo download a copy of the GNU General Public License v2.0 in RTF format, open\nit in WordPad to set the font to Segoe UI so that it renders properly, and\nthen save it as E:\\Windows\\System32\\en-\nUS\\Licenses\\WindowsPE\\\\_Default\\license.rtf, where E: is your Linux rootfs.\nYou may also have to populate the OEM and Volume directories \u2014 I\u2019m not sure\nwhich one the installer read, since I populated all three in my testing.\n\n#### The capture\n\nNow, we can use Dism /Capture-Image or GImageX\u2019s Capture tab to capture the\nLinux rootfs into your Windows setup. Copy the contents of a Windows ISO into\na convenient folder (I used C:\\win10 since I was using a Windows 10 ISO), and\ncapture your Linux rootfs drive into the sources\\install.wim in that folder.\nUse the \u201cappend\u201d mode if you want to keep the existing Windows images in the\nWIM file, or \u201ccreate\u201d mode if you want to overwrite the file entirely and only\nbe able to install Linux.\n\nThis is where the Name and Description fields become important.\n\nAnd that\u2019s it! The Windows installer in that directory will now be able to\ninstall Alpine Linux. Or rather, it will be able to install a copy of Windows\nPE that incidentally has an entire installation of Alpine Linux embedded in\nit, and whose only job is to make that copy of Alpine Linux bootable. Same\nthing.\n\nYou can turn this folder into a bootable ISO using the oscdimg.exe command\nprovided in the Windows ADK. Instructions for doing that are in this wonderful\nElevenForum post. I\u2019m so glad I found that post, because I have no idea how\nanyone would be expected to figure out those magic value in that command. In\ncase the forum post goes down, there\u2019s an archive of that URL in the Wayback\nMachine.\n\n### Step 3: Profit?\n\nAt this point, you should be able to boot the ISO and install Alpine Linux\nusing the Windows installer onto a blank hard drive. Note that I do not\nrecommend using this installer for anything important, for various reasons:\n\n  * The installer is incredibly fragile. I basically hardcoded the disk and partition layouts into the Linux installation, as well as the diskpart commands that WinPE runs. This will only work for installing to the first hard drive in a computer when it is completely blank before the Windows installer touches it. And if the installer changes the partition layout it creates on a blank hard drive, it\u2019s over. For the record, the installer I used was the Windows 10 22H2 ISO from the Microsoft website.\n  * The WIM capture does not preserve UNIX file permissions, so while the installed copy of Linux boots, you will need to fix permissions for the entire installation afterwards somehow.\n  * The grub changes are very hacky and I don\u2019t know if they\u2019ll survive an update.\n  * Using NTFS for your Linux rootfs is honestly just a really bad time. As I mentioned before, if the dirty bit is set that will make your entire rootfs read-only, making normal use of the computer impossible until you boot from a live CD to clear it. Also, while the base Alpine install works, there\u2019s no guarantee that any software you install won\u2019t expect to be able to create files with names prohibited by Windows.\n  * You literally already installed Alpine the normal way as a sub-procedure of this. Just do that. Please.\n\nBut you have to admit, it\u2019s quite funny.\n\nPlease redirect any hate mail to \"spam\\x40tends\\x2eto\". :)\n\n  1. two \u21a9\ufe0e\n\n  2. formerly ImageX \u21a9\ufe0e\n\n  3. diskpart is like fdisk for Windows people \u21a9\ufe0e\n\n\u2190 Back home\n\nMade by Naman Sood, with love.\n\nRSS\n\n", "frontpage": true}
