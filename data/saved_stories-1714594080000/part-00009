{"aid": "40221786", "title": "Handling the Indentation of a Treeview Component", "url": "https://ishadeed.com/article/tree-view-css-indent/", "domain": "ishadeed.com", "votes": 1, "user": "soheilpro", "posted_at": "2024-05-01 11:17:12", "comments": 0, "source_title": "Handling The Indentation of a Treeview Component", "source_text": "Handling The Indentation of a Treeview Component\n\n# Ahmad Shadeed\n\n# Handling The Indentation of a Treeview Component\n\nApr 30, 2024\n\nBack in the school days, the math teacher said that what he likes about math\nis that you can have many solutions for the same problem.\n\nSome solutions are easier or harder than others. I think the same about\nsolving UI problems with CSS.\n\nIn a nutshell, the problem is to build a UI that contains nested components\nwith an increasing indentation for each one. The problem is common on the web,\nbut I will highlight the ones from Github, Figma, Adobe and more.\n\nLet\u2019s dive in.\n\n## What we are going to disassemble\n\nIn the following figure, we have a list of three components. The difference\nbetween them is that the deeper the nesting, the more spacing the component\nhas.\n\nHere is another version with spacing highlighted:\n\nHow would you solve that in CSS? Well, that\u2019s the topic of the article. I will\nshow you how GitHub, Figma, and Adobe solved this problem.\n\n## A look at the similar UIs\n\nThis UI pattern is very common on the web. Here are examples of the same\nconcept with different UIs:\n\nNow that you have an idea about what each UI looks like, let\u2019s explore how\neach of them built it.\n\n### GitHub component\n\nIn GitHub, the component consists of the following:\n\n  * Spacer\n  * Toggle\n  * Content wrapper\n\n    * Icon\n    * Label\n\nHere is the HTML:\n\n    \n    \n    <div class=\"TreeView-item\"> <div class=\"spacer\"></div> <div class=\"toggle\"></div> <div class=\"content\"> <div class=\"TreeView-item-visual\"></div> <span class=\"TreeView-item-text\">ReactART-test.js.snap</span> </div> </div>\n\nIn CSS, the team used CSS grid to handle the layout.\n\n    \n    \n    .TreeView-item { --toggle-width: 1rem; --spacer-col: 1rem; /* will go into this later */ display: grid; grid-template-columns: var(--spacer-col) var(--toggle-width) 1fr; grid-template-areas: \"spacer toggle content\"; } .spacer { grid-area: spacer; } .toggle { grid-area: toggle; } .content { grid-area: content; }\n\nHere is a closer look at the UI:\n\nThe usage of CSS grid for the UI is useful. Here are a few reasons:\n\n  * By using the grid-area, we can assign the column for each item in the component.\n  * The last nested layer doesn\u2019t have a toggle. With CSS grid, its space will be reserved and won\u2019t collapse the UI.\n  * Depending on the depth level, the width of the first column will change based on a CSS variable on the component.\n\n#### The spacer column\n\nIn the CSS, the first column is for the spacer. See the following:\n\n    \n    \n    .TreeView-item { --toggle-width: 1rem; --spacer-col: 1rem; /* will go into this later */ display: grid; grid-template-columns: var(--spacer-col) var(--toggle-width) 1fr; grid-template-areas: \"spacer toggle content\"; }\n\nTo calculate the spacer column width, the CSS in GitHub uses the toggle width\nand the depth level.\n\n    \n    \n    .TreeView-item { --spacer-col: calc( calc(var(--level) - 1) * (var(--toggle-width) / 2) ); }\n\nThe minimum spacing is 8px. While this works, I\u2019m thinking about the reason to\nuse the --toggle-width variable. I found no reason except for having a minimum\nspacing of 8px.\n\n### Adobe way\n\nIn the web version of Photoshop, the layers UI has a similar structure to the\ntree view in GitHub.\n\nHere is the HTML\n\n    \n    \n    <psw-tree-view-item indent=\"0\" layer-visible can-open dir=\"ltr\" open> <div id=\"link\"> <span id=\"first-column\"></span> <span id=\"second-column\"></span> <span id=\"label\"></span> </div> </psw-tree-view-item>\n\nAnd a closer look at the tree view item:\n\nThe layout is built with CSS flexbox. For the nested items, the spacing is\nmanaged via padding-right on the first column.\n\n    \n    \n    :host([dir=\"ltr\"][indent=\"1\"]) #first-column { padding-right: var(--spectrum-global-dimension-size-200); } :host([dir=\"ltr\"][indent=\"2\"]) #first-column { padding-right: calc(2 * var(--spectrum-global-dimension-size-200)); } /* and so on */\n\nWhile this works, it\u2019s not the best solution for me. I can make it a bit\nbetter and use CSS logical properties.\n\n    \n    \n    :host([indent=\"2\"]) #first-column { padding-inline-end: calc( 2 * var(--spectrum-global-dimension-size-200) ); }\n\nI\u2019m not a fan of using hardcoded values in CSS.\n\n### Figma way\n\nFigma\u2019s solution is different from Adobe and GitHub. Here is the UI:\n\n    \n    \n    <div class=\"object_row\"> <span class=\"object_row--indents\"> <span class=\"object_row--indent\"></span> <!-- The more nesting, the more indent items.. --> <span class=\"svg-container object_row--expandCaret\"></span> </span> <span class=\"object_row--layerIcon\"></span> <span class=\"object_row--rowText\"></span> <span class=\"object_row--rowActions\"></span> </div>\n\nThe layout is built with Flexbox, similar to Photoshop Web. Here are a few\ndifferences:\n\n  * The toggle arrow is placed inside the idents group (it has position: absolute) to take it out of the flow.\n  * The spacing is managed via Javascript. The more nesting, the more spacer elements.\n\nIn the following figure, notice how four spans represent the spacing.\n\nNot my favorite solution.\n\n### Carbon design system\n\nThe tree view items in Carbon design system don\u2019t use depth but instead have\nmore padding from the left side.\n\nThe reason you see a negative margin in the screenshot above is that the\nselected item should be clickable. Without the negative margin, the clickable\narea will only be at the start of the text till the end of the element.\n\nWhile it works, I would prefer to flatten all lists and keep the depth per\nitem level.\n\n### Adobe Spectrum design system\n\nEach tree view component is indented based on the nesting level. However, to\nmake an item fully clickable, they used a pseudo-element that fills the entire\nspace.\n\nSee the following video:\n\nFor me, using a pseudo-element is much better than dealing with negative\nmargins (Like in Carbon design system).\n\n## My favorite\n\nI like how GitHub solved this. Here is why:\n\n  * The indentation is being handled per item basis. No need for complex relationships between child and parents.\n  * If there is no toggle, its space will still be reserved.\n  * Works great for left-to-right (LTR) and right-to-left (RTL) layouts.\n\nDepth: 1\n\nlabel\n\nWe can do the same by using CSS max() function.\n\n    \n    \n    .TreeView-item { --spacer-col: max(8px, var(--level) * 8px); }\n\nThis is much cleaner and easier to understand for me. The minimum value is 8px\nand the maximum value depends on the nesting depth.\n\nThe final thing to mention is using content-visibility on each treeview item.\nI spotted this:\n\n    \n    \n    .PRIVATE_TreeView-item-container { content-visibility: auto; contain-intrinsic-size: auto 2rem; }\n\nThis is very useful for performance. Imagine browsing a tree view with\nthousands of sub items.\n\nAccording to MDN:\n\n> Size containment allows a user agent to lay out an element as though it had\n> a fixed size, preventing unnecessary reflows by avoiding the re-rendering of\n> child elements to determine the actual size (thereby improving user\n> experience).\n\n## Outro\n\nThat was a fun exploration. The interesting thing is that it\u2019s only about the\nindentation part. There are many more areas to cover, but this is what caught\nmy eye. I hope you enjoyed it and thank you for reading.\n\nEnjoyed the read? If you'd like to support my work, consider buying me a\ncoffee. Each article takes about 10 cups to create. Thanks a latte!\n\n## Subscribe to my newsletter\n\nA place where I share all the awesome CSS articles, demos, and updates that I\nlike.\n\nThe online studio of Ahmad Shadeed. 2012\u20132024 \u00a9 Ahmad Shadeed.\n\n### Find me online\n\n", "frontpage": false}
