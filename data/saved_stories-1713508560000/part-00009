{"aid": "40079472", "title": "How to Make a Realtime Multiplayer Page on Your Static Website", "url": "https://sudocss.vercel.app/articles/how-to-make-a-realtime-multiplayer-page-on-your-static-website/", "domain": "sudocss.vercel.app", "votes": 1, "user": "sudoCss", "posted_at": "2024-04-18 18:50:40", "comments": 0, "source_title": "How to Make a Realtime Multiplayer Page on Your Static Website", "source_text": "How to Make a Realtime Multiplayer Page on Your Static Website | sudoCss\n\n# How to Make a Realtime Multiplayer Page on Your Static Website\n\nBy Hamza Kalash April 18th, 2024.\n\nAbout 4 min to read | 818 words.\n\nTags:\n\n  * #web\n  * #javascript\n  * #webrtc\n  * #realtime\n\nRealtime communication has become increasingly vital for creating engaging\nuser experiences. Traditionally, achieving realtime features like video/audio\ncalling or live chat on the web required server side implementations. However,\nwith WebRTC (Web Real-Time Communication), you can integrate realtime\ncapabilities directly into your web apps and web pages, without the need for\nan intermediary.\n\nUnfortunately, we do not see many developers who are aware of WebRTC and the\nfacilities and capabilities that it offers, so I wanted to talk about it a\nlittle and to share some ideas with the community in the hope that more fellow\ndevelopers will be curious to learn about this technology and use it to build\nmore cool stuff.\n\nNow you maybe thinking that the article title is a clickbait, but I promise it\nisn\u2019t. Although there is no games on this page, but it\u2019s actually realtime\nmultiplayer(or multireader to be more specific).\n\nAcquaint Keep an eye on this paragraph above \ud83d\udc46, it should update when other\npeople open this page, or you open it in another tab..\n\n## But what is WebRTC? #\n\nTo answer this question, one of the best places to start from that I know of\nis MDN Docs section dedicated to WebRTC, it begins with:\n\n> WebRTC (Web Real-Time Communication) is a technology that enables Web\n> applications and sites to capture and optionally stream audio and/or video\n> media, as well as to exchange arbitrary data between browsers without\n> requiring an intermediary. The set of standards that comprise WebRTC makes\n> it possible to share data and perform teleconferencing peer-to-peer, without\n> requiring that the user install plug-ins or any other third-party software.\n\nAlso, there is a great video by Fireship that explains exactly how WebRTC\nworks, and actually builds a video chat app from scratch:\n\nAnd after those, I don\u2019t have much left to say, really.. so yeah I totally\n\u201coutsourced\u201d this entire part.\n\nIt\u2019s really not that hard, but hey, we can make it easier!\n\n### Trystero #\n\nThere is this library called Trystero (be sure to check out the website, it\u2019s\npretty cool).\n\nTrystero is a library that abstracts away the logic of establishing a direct\npeer-to-peer connection with WebRTC. It offers a simple API for you to create\nreal-time applications without the need for a server. It supports multiple\nstrategies for connecting peers, including BitTorrent, Nostr, MQTT, IPFS, and\nFirebase, all using the same API. This flexibility allows you to choose the\nbest strategy for your application based on your specific needs and the\ninfrastructure you prefer to use.\n\nSimply put, all you have to do is:\n\n    \n    \n    1import { joinRoom } from \"trystero\"; // (trystero.min.js with a localfile) 2 3const config = { 4 appId: \"a_unique_id\", 5}; 6const room = joinRoom(config, \"room_0\");\n\nAs the documentation states:\n\n> By default, the BitTorrent strategy is used. To use a different one just\n> deep import like so (your bundler should handle including only relevant\n> code):\n>  \n>  \n>     1import { joinRoom } from \"trystero/nostr\"; // (trystero-nostr.min.js\n> with a localfile) 2// or 3import { joinRoom } from \"trystero/mqtt\"; //\n> (trystero-mqtt.min.js) 4// or 5import { joinRoom } from \"trystero/firebase\";\n> // (trystero-firebase.min.js) 6// or 7import { joinRoom } from\n> \"trystero/ipfs\"; // (trystero-ipfs.min.js)\n\nSo check out the Strategy Comparison section.\n\nAnd from here on, the Trystero\u2019s API is pretty simple and easy to use.\n\nI\u2019ve used Trystero to build the peers counter component you saw above, and the\nfollowing simple chat component so you can chat with others reading this\narticle at the same time:\n\nNot good code\n\nMy goal with those simple demos was for them to be as self contained as\npossible(other than the dependencies via imports), my usage of Preact was\narbitrary, and they aren\u2019t customizable via attributes or anything.\n\nAnd also, I\u2019m not a pro, I\u2019m just experimenting with web components, really..\n\nBy leveraging Trystero\u2019s \u201cserverless\u201d approach to WebRTC, you can add real-\ntime collaboration features to your web apps and web pages without the need\nfor a dedicated server infrastructure. This not only simplifies the\ndevelopment process but also reduces the overall cost and complexity of your\napplication.\n\n## Who is even using this WebRTC thing? #\n\nAs far as public data and search results show, Discord, Slack, Google Meet,\nand others are using WebRTC under the hood for video/audio and other features.\n\nThere is also the FOSS(free and open source software) Chitchatter built with\nWebRTC and Trystero, which is a very nice and useful application, and you can\nlearn a lot from diving into it\u2019s source code.\n\n## What you can do with WebRTC #\n\nIt\u2019s easy, free, and powerful, so here the fun begins. You can use it to build\nmultiplayer games, collaborative applications, communication services, little\nsurprises all around your personal portfolio, even bring life to static web\npages, and really anything that comes to your mind.\n\nI\u2019ll be more than happy to check out anything this little article inspired you\nto build, just drop a link in the comments, or directly via Email or Telegram.\n\nThank you for your time.\n\nMade with \ud83d\udc9a by Hamza Kalash. Licensed under CC BY 4.0 \u00a9 2023\u2014Present.\n\nPowered by Hugo, Vercel, and GitLab.\n\nLatest build: April 18th, 2024.\n\n", "frontpage": false}
