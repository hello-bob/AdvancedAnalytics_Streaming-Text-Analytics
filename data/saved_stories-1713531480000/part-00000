{"aid": "40084081", "title": "DDR5 Spec Update Has All It Needs to End Rowhammer: Will It?", "url": "https://stefan.t8k2.com/rh/PRAC/index.html", "domain": "t8k2.com", "votes": 2, "user": "tzoompy", "posted_at": "2024-04-19 06:56:34", "comments": 0, "source_title": "Stefan Saroiu", "source_text": "Stefan Saroiu\n\n## DDR5 Spec Update Has All It Needs to End Rowhammer: Will It?\n\nNote: This article makes heavy use of Rowhammer terminology, which may be\nchallenging for non-experts. For assistance, refer to my Rowhammer terminology\ncheat sheet and watch my video presentation on DRAM and Rowhammer. You can\nalso explore other online resources, such as Prof. Mutlu's lectures.\n\nA new updated DDR5 spec (JESD79-5C) is out and includes a brand new chapter --\nChapter 16: \"DDR5 Per Row Activation Counting (PRAC)\". PRAC introduces two key\nmechanisms for comprehensive Rowhammer defenses: an Activation Counter for\nevery DRAM row and a mechanism that triggers when an Activation Counter\nreaches a specific threshold. This allows the DRAM to pause the memory\ncontroller from issuing new commands, giving it time to refresh potential\nvictim rows.\n\nIn the words of a DRAM industry veteran who will remain nameless, PRAC is the\nbiggest change to DRAM in decades. \ud83d\ude01 Thus, I thought I should write up a brief\narticle summarizing the change and its potential to solve Rowhammer once and\nfor all.\n\n##### Background\n\nAs many researchers have shown, current in-DRAM Rowhammer defenses, also known\nas Target Row Refresh (TRR), have significant shortcomings. There are two\nreasons for this. First, these defenses attempt to track aggressor rows by\nleveraging a small set of counters. Sophisticated Rowhammer attack patterns\nmay overwhelm the tracking ability of these counters. Second, even when an\naggressor row is correctly identified, the DRAM must find time to refresh its\ncorresponding victim rows. Unfortunately, DRAM protocols are synchronous and\nthus the memory controller solely dictates how time is spent. DRAM protocols\nhave never adopted a provision that allows the DRAM itself to control how time\nis allocated or, at the very least, instructs the DRAM to pause issuing new\ncommands to allow time for refreshes to complete.\n\nPRAC solves both these problems. Each row in DRAM is equipped with Activation\nCounter bits that track the number of activations a row receives. When this\ncounter reaches a threshold, known as the Rowhammer threshold, the DRAM will\ninternally attempt to find time to refresh its corresponding victim rows.\nHowever, if the DRAM cannot find enough time to refresh the victim rows, it\ncan leverage a back-off protocol based on the ALERTn signal. The spec\ndeliberately avoids being prescriptive about PRAC implementation and\nconfiguration details.\n\nInstead, I will discuss Panopticon\n(https://stefan.t8k2.com/publications/dramsec/2021/panopticon.pdf), a research\npaper that introduced these exact two mechanisms. Panopticon influenced the\ndesign of PRAC. Panopticon was published in DRAMSec in 2021 and is openly\navailable. You can also watch a 15-minute presentation or experiment with the\ncode.\n\n##### High-Level Overview of Per Row Activation Counters in Panopticon\n\nEach DRAM row is equipped with its own counter. When a counter reaches the\nRowhammer threshold, a signal is sent to a service queue to enqueue the row\naddress. Once enqueued, Panopticon must refresh potential victim rows in a\ntimely manner to avoid the possibility of Rowhammer bit flips. One option is\nto provide extra time for mitigations during regular background refresh\noperations. With this design, Panopticon can service the queue when it\nreceives a REF command (each tREFI). However, should the DRAM have no extra\ntime or should the queue be full, the DRAM must find a way to signal the\nmemory controller that it needs time to perform the Rowhammer remedies.\nUnfortunately, DRAM protocols do not specify a way for the DRAM to ask for\nfree time.\n\nPanopticon retrofits an existing signal in the DDR specification, called\nALERTn, to effectively \u201ctrick\u201d the memory controller to pause issuing new DDR\ncommands. DRAM uses ALERTn to signal errors to the memory controller. Upon\nreceiving this signal, the memory controller stops issuing new DRAM commands\nand instead re-issues the old memory access. By making use of ALERTn,\nPanopticon requires no modifications to any hardware other than DRAM itself.\n\nPanopticon makes several key contributions to design PRAC inside the DRAM\nitself in way that is efficient.\n\n  * Counter Mats. Panopticon leverages an open-space design to place the counters mats in a staggered pattern.\n\n  * Incrementer. The incrementer makes use of the read and writeback cycle inherent in DRAM row activation to perform its logic.\n\n  * Service Queue. When a high-order bit of a counter toggles, Panopticon sends a signal to the refresh logic to enqueue the row address in a service queue. Once enqueued, a row must be serviced in a timely manner. Servicing a row requires refreshing multiple corresponding victim rows.\n\n  * Threshold Bit rather than Threshold Value. Panopticon does not maintain a Rowhammer threshold value, but a threshold bit. Whenever this bit is toggled during a counter increment, Panopticon enqueues the row address into a service queue.\n\n##### Why Does PRAC Have the Potential to Put Rowhammer to Rest?\n\nPRAC has the potential to make two strong guarantees. First, PRAC can\nguarantee that no aggressor row can escape tracking. For the first time, DRAM\nhas a mechanism to track every single activation of every single row. Second,\nPRAC can guarantee that every victim row is refreshed in a timely manner. This\nis because the DRAM can now signal the memory controller to pause issuing new\ncommands whenever it needs time to refresh potential victim rows.\n\nA PRAC implementation that makes these two guarantees could eliminate\nRowhammer once and for all. This is a huge step forward for the DRAM industry\nand for the security community. Kudos to them!\n\nHowever, the devil is in the details. First, a small pet peeve of mine, the\nspec is written in the typical ambiguous language that has permeated all DDR\nspecs in JEDEC. For example, the per-row counter stores a count associated\nwith the number of activations received by a row. What does associated mean?\nDoes it mean the counter stores the actual count or some other value that\nsomehow is vaguely \"associated\" with the actual count. Ugh!\n\nSecond, there is long list of potential pitfalls that could make PRAC stop\nshort from delivering its potential. Here's a brief laundry list:\n\n  * Correct configuration. The spec lacks details on how PRAC is configured. For example, what if the Rowhammer threshold is set incorrectly?\n\n  * Counter reset. The spec indicates that the per-row counters are periodically reset. Unfortunately, deciding when to reset a counter value is fraught with peril. For example, what if the counter is reset too early?\n\n  * Accounting for fudge factors. The spec does not guarantee that an aggressor row will stop being activated even after its counter has reached the Rowhammer threshold. This is typically addressed through a fudge factor -- the threshold is conservatively set lower than necessary to accommodate this extra time. Other similar factors exist. What if they are not properly accounted for?\n\n  * RowPress. Counting row activations is not effective against RowPress. Perhaps that's what the spec refers to when it says that count values are associated with the number of activations rather than count the actual number of activations.\n\n  * Blast Radius. Since an aggressor row can affect distant victim rows, PRAC must refresh these distant victims as well. This is challenging to handle correctly.\n\nI will leave a more thorough analysis of these pitfalls for a future article.\n\nFor now, I am excited to see the DRAM industry implement PRAC and to see the\nfirst DDR5 devices shipped with it. Despite my complaints, with PRAC, the DRAM\nindustry has taken a huge step forward in addressing Rowhammer. I am excited\nto see what the future holds.\n\nstefan@t8k2.com Thanks to Alec Wolman for reading drafts of this document.\nApril 17th, 2024\n\n", "frontpage": false}
