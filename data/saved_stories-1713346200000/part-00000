{"aid": "40060123", "title": "Ten years of improvements in PostgreSQL's optimizer", "url": "https://rmarcus.info/blog/2024/04/12/pg-over-time.html", "domain": "rmarcus.info", "votes": 11, "user": "samaysharma", "posted_at": "2024-04-17 03:27:58", "comments": 0, "source_title": "Ten years of improvements in PostgreSQL's optimizer \u00b7 Ryan Marcus", "source_text": "Ten years of improvements in PostgreSQL's optimizer \u00b7 Ryan Marcus\n\nRyan Marcus, assistant professor at the University of Pennsylvania (Fall '23).\nUsing machine learning to build the next generation of data systems.\n\n    \n    \n    ____ __ ___ / __ \\__ ______ _____ / |/ /___ _____________ _______ / /_/ / / / / __ `/ __ \\ / /|_/ / __ `/ ___/ ___/ / / / ___/ / _, _/ /_/ / /_/ / / / / / / / / /_/ / / / /__/ /_/ (__ ) /_/ |_|\\__, /\\__,_/_/ /_/ /_/ /_/\\__,_/_/ \\___/\\__,_/____/ /____/\n    \n    \n    ___ __ ___ / _ \\__ _____ ____ / |/ /__ ___________ _____ / , _/ // / _ `/ _ \\ / /|_/ / _ `/ __/ __/ // (_-< /_/|_|\\_, /\\_,_/_//_/ /_/ /_/\\_,_/_/ \\__/\\_,_/___/ /___/\n    \n    \n    ___ __ ___ / _ \\/ |/ /__ ___________ _____ / , _/ /|_/ / _ `/ __/ __/ // (_-< /_/|_/_/ /_/\\_,_/_/ \\__/\\_,_/___/\n\n  * Home\n  * Publications\n  * Teaching\n  * Mastodon\n\n# Ten years of improvements in PostgreSQL's optimizer\n\n12 Apr 2024\n\nAs a query optimization researcher, I\u2019ve spent the last 10 years of my life\nplaying with, learning from, and building on top of the most sophisticated\nopen source query optimizer out there, PostgreSQL. I recently wondered how\nmuch PostgreSQL had improved over the decade since I started working on\ndatabases. While changelogs and opinion pieces were plentiful, I couldn\u2019t find\nany strong empirical comparisons, so I decided to run the join order benchmark\n(JOB)^1 on PostgreSQL 8 through 16. I recorded the 90th percentile query\nlatency for each database version.\n\nI built each version^2 of PostgreSQL using GCC 13.2 inside a Docker container\nwith Arch Linux. Since I wanted to measure the quality of the query optimizer,\nand not index/IO performance, I set shared_buffers to 8GB (large enough to\nhold the entire database). I also set work_mem to 8MB for all versions. Each\nquery is executed once to warm the cache, then the median latency of 5\nadditional runs in recorded.\n\nOverall, PostgreSQL\u2019s tail performance has improved drastically, although\nversions 13 through 16 have been mostly stable. Comparing version 8 to version\n16, PostgreSQL\u2019s optimizer has dropped tail latency by nearly half in the last\n10 years!\n\nWe can also investigate the entire query distribution (note the log scale):\n\nWe can use regression analysis to (1) confirm that the downward slope in\nlatency is significant, and (2) quantify how much improvement is brought by\neach version of PostgreSQL. If we regress the PostgreSQL major version number\nagainst query latency, we see that each new major version of PostgreSQL\nbrings, on average, a 15% performance improvement on the Join Order Benchmark\n(). However, a linear model is arguably a poor measure of the change ().\n\nOf course, not all of these improvements are attributable to the query\noptimizer. Improvements to the execution engine \u2013 from parallel workers to\njust-in-time (JIT) compilation \u2013 also play a role. It would be interesting to\ninvestigate how each query plan in JOB has changed over the year... maybe next\ntime!\n\nQuantifying the improvement aside:\n\n  * Upgrade your database! Going from PostgreSQL 8 to 16 has the potential to massively improve your workload\u2019s tail latency.\n  * Researchers should note that PostgreSQL is a bit of a moving target. Learned query optimization research has compared with different versions of PostgreSQL over time (e.g., Neo and Bao compare with version 11, whereas newer work compare with version 14, 15, or 16.) So just because an older technique improves on PostgreSQL by 30%, and a newer technique only improves on PostgreSQL by 25%, the newer technique may be comparing against a stronger PostgreSQL.\n\nYou can also check out the raw data for yourself.\n\n## Notes\n\n  1. The join order benchmark is a set of complex queries with many joins. The benchmark was introduced in the seminal paper \u201cHow Good are Query Optimizers, Really?\u201d, in which the authors showcase the difficult nature of the join order benchmark. \u21a9\n\n  2. I used the most recent minor version for each major version of PostgreSQL. For example, for PostgreSQL 8, I used version 8.4.22. These minor versions are often released after new major versions are available, but generally only contain bug fixes (not new features or performance improvements). \u21a9\n\n## Related Posts\n\n  * ### Most influential database papers 25 Jul 2023\n\n  * ### Generating bios with large language models 20 Dec 2022\n\n  * ### Applying Bao to distributed systems 17 Jun 2021\n\n", "frontpage": true}
