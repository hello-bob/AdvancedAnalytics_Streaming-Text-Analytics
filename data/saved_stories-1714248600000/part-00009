{"aid": "40179194", "title": "Practical Vim Command Workflow", "url": "https://m4xshen.dev/posts/vim-command-workflow/", "domain": "m4xshen.dev", "votes": 1, "user": "tosh", "posted_at": "2024-04-27 11:40:57", "comments": 0, "source_title": "Practical Vim command workflow | Max Shen Dev", "source_text": "Practical Vim command workflow | Max Shen Dev\n\n# Practical Vim command workflow\n\nJan 26, 2023\n\nThere are many commands in Vim, which means that you can achieve a same goal\nwith many approaches. Therefore it is difficult for beginner to learn how to\naccomplish an editing task with less keystrokes. In this tutorial, I\u2019ll share\nmy Vim command workflow and give you some guidelines about how to move/edit\ntext in Vim efficiently.\n\n## Guidelines\n\nHere are some general rules of my workflow.\n\n  1. Don\u2019t use arrow keys and mouse.\n  2. Use relative jump (eg: 5k 12j) for vertical movement inside screen.\n  3. Use CTRL-U CTRL-D CTRL-B CTRL-F gg G for vertical movement outside screen.\n  4. Use word-motion (w W b B e E ge gE) for short distance horizontal movement.\n  5. Use f F t T 0 ^ $ , ; for mid long distance horizontal movement.\n  6. Use operator + motion/text-object (eg: ci{ d5j) whenever possible.\n\nIf you are not familiar with some of these concepts, please learn about the\nEssential Vim commands for efficient text editing first.\n\n## Examples\n\nHere are 4 real situations I faced when creating a todo list website with\njavascript. You can think about how you will achieve the editing goal first\nand then see my approach.\n\nNotes:\n\n  * ^ or v points to the position of the cursor.\n  * There are line number and relative line number on the left.\n\n### Situation 1\n\nGoal: Change activeList to this and add a ; at the end of the line.\n\n    \n    \n    // current mode: Normal 2 if(this.sortMethod == 'Name') { 1 activeList.uncheckedTodo.sort(sortWithName) 189 } ^\n\nMy approach is -cwthis<ESC>A;<ESC>.\n\n  * -: Go 1 line upward, on the first non-blank character\n  * cwthis: Change the word and type this.\n  * <ESC>: Leave insert mode.\n  * A;<ESC>: Jump to the end of the line, type ; and leave Insert mode.\n\n### Situation 2\n\nGoal: Change i-s+1 to d and add new before Date(y, m, d).\n\n    \n    \n    // current mode: Normal 454 console.log(Date(y, m, i-s+1)); ^\n\nMy approach is Wct)d<C-o>FDnew <ESC>. (<C-o> means CTRL-O)\n\n  * W: Go one word forward, ignore symbol.\n  * ct)d: Change till before the occurrence of ) to the right and type d.\n  * <C-o>: Execute one command in Normal mode and then return to Insert mode.\n  * FD: Go to the occurrence of D to the left.\n  * new <ESC>: Type new and leave Insert mode.\n\n### Situation 3\n\nGoal: Add a line activeList.sortMethod = 'Date'; below\ndocument.querySelector('.sort-date')....\n\n    \n    \n    // current mode: Insert 1 document.querySelector('.sort-name').addEventListener('click', () => { 343 activeList.sortMethod = 'Name'; 1 activeList.update(); ^ 2 }) 3 4 document.querySelector('.sort-date').addEventListener('click', () => { 5 activeList.update(); 6 })\n\nMy approach is <ESC>yy4jpci'Date<ESC>.\n\n  * <ESC>: Leave insert mode.\n  * yy: Yank current line.\n  * 4j: Go down 4 line.\n  * p: Paste the line we just yanked.\n  * ci'Date<ESC>: Change the content inside single quote, type Date and leave Insert mode.\n\n### Situation 4\n\nGoal: Move the whole block of //sort (line 200 ~ 207) to the beginning of\nupdate() function.\n\n    \n    \n    // current mode: Normal 8 update() { 7 this.checkedTodo.forEach((todo) => { 6 this.element.insertBefore(todo.element, todoCreator.nextSibling); 5 }); 4 this.uncheckedTodo.forEach((todo) => { 3 this.element.insertBefore(todo.element, todoCreator.nextSibling); 2 }); 1 v 200 // sort 1 if(this.sortMethod == 'Name') { 2 this.uncheckedTodo.sort(sortWithName); 3 } 4 else if(this.sortMethod == 'Date') { 5 this.uncheckedTodo.sort(sortWithDate); 6 } 7 8 createCalendar(currentYear, currentMonth, this); 9 }\n\nMy approach is dap8kp.\n\n  * dap: Delete around the paragraph.\n  * 8k: Go up 8 lines.\n  * p: Paste the paragraph we just deleted.\n\n## Final Words\n\nIf you are using Neovim, I recommend you to try out a plugin hardtime.nvim,\nwhich can help you establish good command workflow and display hints for\nbetter commands.\n\nIf you just start learning Vim operators, motions, it may take some times to\nthink of what commands to use for each situation. However, If you keep\npracticing and using them, you\u2019ll become faster and faster. After a while,\nyou\u2019ll develop muscle memory for using these commands.\n\n\u00a9 2024 Max Shen. All rights reserved.\n\n", "frontpage": false}
