{"aid": "40129935", "title": "How to Use I2C Devices in (Apache) NuttX: Scanning for Devices", "url": "https://www.EmbeddedRelated.com/showarticle/1656.php", "domain": "embeddedrelated.com", "votes": 1, "user": "lupyuen", "posted_at": "2024-04-23 08:59:09", "comments": 0, "source_title": "How to use I2C devices in (Apache) NuttX: Scanning for Devices - Alan C Assis", "source_text": "How to use I2C devices in (Apache) NuttX: Scanning for Devices - Alan C Assis\n\nLoading [Contrib]/a11y/accessibility-menu.js\n\nBlogs\n\n  * Home\n  * Blogs\n  * Forums\n  * Quizzes!\n  * Courses\n  * Tutorials\n  * Books\n  * Free PDFs\n  * Webinars\n  * Code Snippets\n  * Login / Register\n\n  * Home\n  * Blogs\n\n    * From the Editor\n    * Recent Posts\n    * Popular (this month)\n    * Popular (all time)\n  * Forums\n  * Quizzes!\n  * Courses\n  * Tutorials\n  * Books\n  * Free PDFs\n  * Webinars\n  * Code Snippets\n\nhide\n\n### This website uses cookies\n\nThis site uses cookies to deliver our services and to show you relevant ads\nand job listings. By using our site, you acknowledge that you have read and\nunderstand our Cookie Policy, Privacy Policy, and our Terms of Service. Your\nuse of the Related Sites, including DSPRelated.com, FPGARelated.com,\nEmbeddedRelated.com and Electronics-Related.com, is subject to these policies\nand terms.\n\nBlogs Alan C Assis\n\n# How to use I2C devices in (Apache) NuttX: Scanning for Devices\n\nAlan C Assis\u25cfApril 22, 2024\n\nPreviously in this EmbeddedRelated article, we saw how to use Buttons\nSubsystem on NuttX using a RaspberryPi Pico board. Now we will change from\nuser input device (buttons) for something more generic: I2C protocol. NuttX\nsupports a lot of I2C devices (sensors, displays, EEPROMs, I/O Expanders, I2C\nmultiplexers, and many more). And most important: because NuttX is a Linux-\nlike RTOS you will find the very familiar i2ctool to search for devices in\nyour I2C bus. So, lets to get started!\n\nAs most of ours readers know, the I2C protocol was invented by Philips\nSemiconductors in the 80's to interconnect devices inside circuit boards.\nCompared to current interfaces standard this protocol is slow: the Standard\nmode (Sm) uses 100 kbit/s; Fast mode (Fm) use 400 kbit/s; Fast mode plus (Fm+)\nat 1 Mbit/s, High-speed mode (Hs) at 1.7 Mbit/s or 3.4 Mbit/s, Ultra-fast mode\n(UFm) at 5 Mbit/s.\n\nAlthough there are many I2C modes, at end of day you will work mostly with\nStandard mode devices (100 kbit/s) and Fast mode devices (400 kbit/s).\n\nThis article is available in PDF format for easy printing\n\nIn order to support an I2C device on NuttX, first your microcontroller\narchitecture needs a driver that will interact with the I2C controller inside\nthis microcontroller and will control all I2C operations / transactions. For\nthe RP2040 microcontroller used on Raspberry Pi Pico board, this driver is\nlocated at nuttx/arch/arm/src/rp2040/rp2040_i2c.c.\n\nSo, when your board initializes it will call a\n\"rp2040_i2cbus_initialize(port);\" to initialize the I2C port of your\nmicrocontrooler (RP2040 has two I2C ports: I2C0 and I2C1). That function will\nreturn a pointer to a \"struct i2c_master_s\", this is a generic i2c master\ninstance, that is used by all I2C devices supported by NuttX. No matter what\nis your microcontroller or your board, it will return an i2c master instance\nthat is used as a generic \"glue\" to interface with any I2C device supported by\nNuttX.\n\nFor instance, if you want to use a BMP280 pressure sensor, you will call\n\"bmp280_register(devno, i2c);\". The first parameter is the number you want\nassign to your BMP280 sensor inside NuttX (i.e. \"/dev/press0\"), if you are a\nLinux user probably you are used to see something like \"/dev/ttyUSB0\",\n\"/dev/fb0\", etc. The second parameter \"i2c\" is the i2c_master_s instance\nreturned previously by that rp2040_i2cbus_initialize().\n\nSince now you know how things work under the hood of NuttX, we can move to the\nnext steps: 1) connect the BMP280 to the RaspberryPi Pico and 2) configure the\nNuttX with \"i2ctool\" to verify if our device (i.e. BMP280 sensor) is correctly\nconnected in the I2C Bus before you try to register it in our code.\n\nWiring the sensor to the board is very simple:\n\nThe NuttX configuration also is straight forward, as we will see:\n\nStart clearing your previous configuration:\n\n    \n    \n    $ make distclean\n\nWe will use the NSH over USB to avoid connecting an external USB/Serial\nadapter to the serial pins, so run:\n\n    \n    \n    $ ./tools/configure.sh raspberrypi-pico:usbnsh\n\nNow we can select the options to get the \"i2ctool\" working:\n\n    \n    \n    $ make menuconfig\n\nEnter inside \"System Type --->\" and select \"I2C Master\", \"I2C0\" and \"I2C\ncharacter driver\"\n\nCase you decide to add the BMP280 on I2C1 bus, you need to select \"I2C1\"\ninstead of \"I2C0\", or, case you want to have devices on both I2C ports you\nneed to select both.\n\nYou can \"Exit\" from \"System Type\" and enter inside \"Device Drivers --->\", as\nyou can see \"I2C Driver Support\" is automatically selected (pay attention at\n\"-*-\" in front of it, instead of \"[*]\")\n\nSome chips doesn't select it automatically (i.e STM32), in this case you need\nenable \"I2C Driver Support\" manually and enter inside it and enable \"I2C\ncharacter driver\", to create the \"/dev/i2c0\". In our case, this option also is\nenabled automatically.\n\nWe don't need to enable the BMP280 driver now, because all we want is run\n\"i2ctool\" and see if the device appears in the bus. So you can \"Exit\" from\n\"Device Drivers\" to return to main menu.\n\nEnter inside \"Application Configuration --->\" and then \"System Libraries and\nNSH Add-Ons --->\" and enable \"I2C tool --->\"\n\nEnter inside \"I2C tool --->\" and change the \"Maximum bus number\" to 1, since\nRP2040 has only I2C0 and I2C1:\n\nFinally you can select: \"Exit\", \"Exit\", \"Exit\" and \"Exit\". It will ask if you\nwant to Save, confirm it.\n\nAt this point we can compile:\n\n    \n    \n    $ make -j\n\nIf you see this message at the end:\n\nPICO_SDK_PATH must be specified for flash boot\n\nIt means you forgot to include the SDK in your PATH, you need to include it,\nin my case:\n\n    \n    \n    $ export PICO_SDK_PATH=/home/alan/pico-sdk\n\nCompile again and you need to see these lines at the end:\n\nLD: nuttx Generating: nuttx.uf2 tools/rp2040/elf2uf2 nuttx nuttx.uf2; Done.\n\nAs you did in previous article, press and hold the Raspibbery Pi Pico BOOTSEL\nbutton and connect the USB cable. A \"RPI-RP2\" virtual disk should appear on\nyour file manager, the copy nuttx.uf2 to it.\n\nAfter the file is flash the green LED will turn on, you can also run \"sudo\ndmesg\" to confirm that USB CDC/ACM was detected correctly.\n\nRun minicom (or your preferred terminal console tool) and press \"Enter\" three\ntime to let the \"NSH>\" appears. If you type \"help\" or \"?\" you will see that\n\"i2c\" tool application appeared:\n\nYou can type \"i2c bus\" to verify which ports are enabled. We will see only\nI2C0 enabled because we only enabled that I2C port in the menuconfig, if you\nenable I2C1 too you should see both with \"YES\" value.\n\nFinally we can run \"i2c dev -b 0 0x03 0x7f\" to search for some device in the\nbus. Some important notes: \"-b 0\" means we want to use \"i2c0\"; \"0x03\" is the\ninitial I2C address to search and \"0x7f is the final address.\n\nAs you can see it found our BMP280 sensor at I2C address 0x76. If instead\nusing the BMP280 sensor you had added an SSD1306 OLED display (yes, that small\ndisplay used on MMDVM Duplex Hotspot Module) you should see it at 0x3c\naddress.\n\nThat is it, in the next tutorial we will see how to add the BMP280 sensor in\nyour board configuration and read pressure information from it.\n\nYou might also like... (promoted content)\n\nThe 2024 Embedded Online Conference - Register Early and Save with Promo Code\nER2024!\n\nThe 2024 Embedded Online Conference - Register Early and Save with Promo Code\nER2024!\n\nUpcoming Course - Python Applications for Digital Design and Signal Processing\n\nUpcoming Course - Python Applications for Digital Design and Signal Processing\n\nCheck out Memfault's New Sandbox!\n\nCheck out Memfault's New Sandbox!\n\nhide\n\n### This website uses cookies\n\nThis site uses cookies to deliver our services and to show you relevant ads\nand job listings. By using our site, you acknowledge that you have read and\nunderstand our Cookie Policy, Privacy Policy, and our Terms of Service. Your\nuse of the Related Sites, including DSPRelated.com, FPGARelated.com,\nEmbeddedRelated.com and Electronics-Related.com, is subject to these policies\nand terms.\n\nComments\n\n  * Comments\n  * Write a Comment\n\nSelect to add a comment\n\nTo post reply to a comment, click on the 'reply' button attached to each\ncomment. To post a new comment (not a reply to a comment) check out the 'Write\na Comment' tab at the top of the comments.\n\nPlease login (on the right) if you already have an account on this platform.\n\nOtherwise, please use this form to register (free) an join one of the largest\nonline community for Electrical/Embedded/DSP/FPGA/ML engineers:\n\nThank you for your patience while we process your registration.\n\n## Sign in\n\n## You might also like...\n\nThe 2024 Embedded Online Conference - Register Early and Save with Promo Code\nER2024!\n\n## About Alan C Assis\n\nAlan Carvalho de Assis graduated in Computer Science and holds a Master's\nDegree in Electrical Engineering. Alan started working with embedded systems\nin 1998 (PIC MCUs) and with embedded Linux (uCLinux) in 2001. He worked\ndeveloping Linux embedded systems at Freescale (now NXP) and other local\ncompanies in Brazil. In 2010 he discovered NuttX RTOS while reading an article\nin the Linux Journal and started using it to develop projects for many\ndifferent companies. Currently Alan works as Embedded Systems Engineer at\nEspressif porting NuttX to ESP32xx families\n\n## Popular Posts by Alan C Assis\n\n  * Using (Apache) NuttX Buttons Subsystem\n  * Getting Started with NuttX RTOS on Three Low Cost Boards\n  * Using GPIO in (Apache) NuttX RTOS\n  * Getting Started with (Apache) NuttX RTOS - Part 1\n  * Getting Started with (Apache) NuttX RTOS Part 2 - Looking Inside and Creating Your Customized Image\n\n## Blogs - Hall of Fame\n\nSo You Want To Be An Embedded Systems Developer Steve Branam\n\nIntroduction to Microcontrollers Mike Silva\n\nImportant Programming Concepts (Even on Embedded Systems) Jason Sachs\n\nHow FPGAs Work and Why You'll Buy One Yossi Krenin\n\nMSP430 Launchpad Tutorial Enrico Garante\n\nArduino Robotics Lonnie Honeycutt\n\n## Free PDF Downloads\n\nIntroduction to Embedded Systems - A Cyber-Physical Systems Approach\n\nIntroduction to Arduino\n\nInterrupt handling in an ARM processor\n\n## Quick Links\n\n  * Home\n  * Blogs\n  * Forums\n  * Quizzes!\n  * Courses\n  * Tutorials\n  * Books\n  * Free PDFs\n  * Webinars\n  * Code Snippets\n  * comp.arch.embedded\n\n## About EmbeddedRelated.com\n\n  * Advertise\n  * Contact\n  * Privacy Policy\n  * Terms of Service\n  * Cookies Policy\n\n## Social Networks\n\n## The Related Media Group\n\nLogin\n\nCreate free account | Forgot password?\n\n", "frontpage": false}
