{"aid": "40139603", "title": "OpenInterpreter \u2013 Natural language interface to your computer", "url": "https://github.com/OpenInterpreter/open-interpreter", "domain": "github.com/openinterpreter", "votes": 1, "user": "kristianpaul", "posted_at": "2024-04-24 01:58:10", "comments": 0, "source_title": "GitHub - OpenInterpreter/open-interpreter: A natural language interface for computers", "source_text": "GitHub - OpenInterpreter/open-interpreter: A natural language interface for\ncomputers\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nOpenInterpreter / open-interpreter Public\n\n  * Notifications\n  * Fork 4.1k\n  * Star 47.7k\n\nA natural language interface for computers\n\nopeninterpreter.com/\n\n### License\n\nAGPL-3.0 license\n\n47.7k stars 4.1k forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# OpenInterpreter/open-interpreter\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n14 Branches\n\n31 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nKillianLucasMerge pull request #1229 from MikeBirdTech/improve-local-system-\nmessageApr 24, 2024321d0a8 \u00b7 Apr 24, 2024Apr 24, 2024\n\n## History\n\n2,600 Commits  \n  \n### .devcontainer\n\n|\n\n### .devcontainer\n\n| Support devcontainer| Mar 27, 2024  \n  \n### .github\n\n|\n\n### .github\n\n| The New Computer Update (fast keyboard)| Dec 28, 2023  \n  \n### docs\n\n|\n\n### docs\n\n| Merge pull request #1212 from RateteApple/main| Apr 24, 2024  \n  \n### installers\n\n|\n\n### installers\n\n| Updated Mac Installer, formatted local.py| Apr 24, 2024  \n  \n### interpreter\n\n|\n\n### interpreter\n\n| Merge branch 'main' into improve-local-system-message| Apr 24, 2024  \n  \n### scripts\n\n|\n\n### scripts\n\n| Fixed bug, may have broken something else but I don't think so| Apr 4, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| Updated packages, updating test model| Apr 17, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| The New Computer Update| Jan 4, 2024  \n  \n### .pre-commit-config.yaml\n\n|\n\n### .pre-commit-config.yaml\n\n| The New Computer Update| Jan 4, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Updated license of Open Interpreter to AGPL| Nov 29, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 20, 2024  \n  \n### poetry.lock\n\n|\n\n### poetry.lock\n\n| Regenerate poetry.lock| Apr 18, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| Merge branch 'main' into main| Apr 18, 2024  \n  \n## Repository files navigation\n\n# \u25cf Open Interpreter\n\nGet early access to the desktop app | Documentation\n\nThe New Computer Update introduced --os and a new Computer API. Read On \u2192\n\n    \n    \n    pip install open-interpreter\n\n> Not working? Read our setup guide.\n    \n    \n    interpreter\n\nOpen Interpreter lets LLMs run code (Python, Javascript, Shell, and more)\nlocally. You can chat with Open Interpreter through a ChatGPT-like interface\nin your terminal by running $ interpreter after installing.\n\nThis provides a natural-language interface to your computer's general-purpose\ncapabilities:\n\n  * Create and edit photos, videos, PDFs, etc.\n  * Control a Chrome browser to perform research\n  * Plot, clean, and analyze large datasets\n  * ...etc.\n\n\u26a0\ufe0f Note: You'll be asked to approve code before it's run.\n\n## Demo\n\n#### An interactive demo is also available on Google Colab:\n\n#### Along with an example voice interface, inspired by Her:\n\n## Quick Start\n\n    \n    \n    pip install open-interpreter\n\n### Terminal\n\nAfter installation, simply run interpreter:\n\n    \n    \n    interpreter\n\n### Python\n\n    \n    \n    from interpreter import interpreter interpreter.chat(\"Plot AAPL and META's normalized stock prices\") # Executes a single command interpreter.chat() # Starts an interactive chat\n\n### GitHub Codespaces\n\nPress the , key on this repository's GitHub page to create a codespace. After\na moment, you'll receive a cloud virtual machine environment pre-installed\nwith open-interpreter. You can then start interacting with it directly and\nfreely confirm its execution of system commands without worrying about\ndamaging the system.\n\n## Comparison to ChatGPT's Code Interpreter\n\nOpenAI's release of Code Interpreter with GPT-4 presents a fantastic\nopportunity to accomplish real-world tasks with ChatGPT.\n\nHowever, OpenAI's service is hosted, closed-source, and heavily restricted:\n\n  * No internet access.\n  * Limited set of pre-installed packages.\n  * 100 MB maximum upload, 120.0 second runtime limit.\n  * State is cleared (along with any generated files or links) when the environment dies.\n\nOpen Interpreter overcomes these limitations by running in your local\nenvironment. It has full access to the internet, isn't restricted by time or\nfile size, and can utilize any package or library.\n\nThis combines the power of GPT-4's Code Interpreter with the flexibility of\nyour local development environment.\n\n## Commands\n\nUpdate: The Generator Update (0.1.5) introduced streaming:\n\n    \n    \n    message = \"What operating system are we on?\" for chunk in interpreter.chat(message, display=False, stream=True): print(chunk)\n\n### Interactive Chat\n\nTo start an interactive chat in your terminal, either run interpreter from the\ncommand line:\n\n    \n    \n    interpreter\n\nOr interpreter.chat() from a .py file:\n\n    \n    \n    interpreter.chat()\n\nYou can also stream each chunk:\n\n    \n    \n    message = \"What operating system are we on?\" for chunk in interpreter.chat(message, display=False, stream=True): print(chunk)\n\n### Programmatic Chat\n\nFor more precise control, you can pass messages directly to .chat(message):\n\n    \n    \n    interpreter.chat(\"Add subtitles to all videos in /videos.\") # ... Streams output to your terminal, completes task ... interpreter.chat(\"These look great but can you make the subtitles bigger?\") # ...\n\n### Start a New Chat\n\nIn Python, Open Interpreter remembers conversation history. If you want to\nstart fresh, you can reset it:\n\n    \n    \n    interpreter.messages = []\n\n### Save and Restore Chats\n\ninterpreter.chat() returns a List of messages, which can be used to resume a\nconversation with interpreter.messages = messages:\n\n    \n    \n    messages = interpreter.chat(\"My name is Killian.\") # Save messages to 'messages' interpreter.messages = [] # Reset interpreter (\"Killian\" will be forgotten) interpreter.messages = messages # Resume chat from 'messages' (\"Killian\" will be remembered)\n\n### Customize System Message\n\nYou can inspect and configure Open Interpreter's system message to extend its\nfunctionality, modify permissions, or give it more context.\n\n    \n    \n    interpreter.system_message += \"\"\" Run shell commands with -y so the user doesn't have to confirm them. \"\"\" print(interpreter.system_message)\n\n### Change your Language Model\n\nOpen Interpreter uses LiteLLM to connect to hosted language models.\n\nYou can change the model by setting the model parameter:\n\n    \n    \n    interpreter --model gpt-3.5-turbo interpreter --model claude-2 interpreter --model command-nightly\n\nIn Python, set the model on the object:\n\n    \n    \n    interpreter.llm.model = \"gpt-3.5-turbo\"\n\nFind the appropriate \"model\" string for your language model here.\n\n### Running Open Interpreter locally\n\n#### Terminal\n\nOpen Interpreter can use OpenAI-compatible server to run models locally. (LM\nStudio, jan.ai, ollama etc)\n\nSimply run interpreter with the api_base URL of your inference server (for LM\nstudio it is http://localhost:1234/v1 by default):\n\n    \n    \n    interpreter --api_base \"http://localhost:1234/v1\" --api_key \"fake_key\"\n\nAlternatively you can use Llamafile without installing any third party\nsoftware just by running\n\n    \n    \n    interpreter --local\n\nfor a more detailed guide check out this video by Mike Bird\n\nHow to run LM Studio in the background.\n\n  1. Download https://lmstudio.ai/ then start it.\n  2. Select a model then click \u2193 Download.\n  3. Click the \u2194\ufe0f button on the left (below \ud83d\udcac).\n  4. Select your model at the top, then click Start Server.\n\nOnce the server is running, you can begin your conversation with Open\nInterpreter.\n\n> Note: Local mode sets your context_window to 3000, and your max_tokens to\n> 1000. If your model has different requirements, set these parameters\n> manually (see below).\n\n#### Python\n\nOur Python package gives you more control over each setting. To replicate and\nconnect to LM Studio, use these settings:\n\n    \n    \n    from interpreter import interpreter interpreter.offline = True # Disables online features like Open Procedures interpreter.llm.model = \"openai/x\" # Tells OI to send messages in OpenAI's format interpreter.llm.api_key = \"fake_key\" # LiteLLM, which we use to talk to LM Studio, requires this interpreter.llm.api_base = \"http://localhost:1234/v1\" # Point this at any OpenAI compatible server interpreter.chat()\n\n#### Context Window, Max Tokens\n\nYou can modify the max_tokens and context_window (in tokens) of locally\nrunning models.\n\nFor local mode, smaller context windows will use less RAM, so we recommend\ntrying a much shorter window (~1000) if it's failing / if it's slow. Make sure\nmax_tokens is less than context_window.\n\n    \n    \n    interpreter --local --max_tokens 1000 --context_window 3000\n\n### Verbose mode\n\nTo help you inspect Open Interpreter we have a --verbose mode for debugging.\n\nYou can activate verbose mode by using its flag (interpreter --verbose), or\nmid-chat:\n\n    \n    \n    $ interpreter ... > %verbose true <- Turns on verbose mode > %verbose false <- Turns off verbose mode\n\n### Interactive Mode Commands\n\nIn the interactive mode, you can use the below commands to enhance your\nexperience. Here's a list of available commands:\n\nAvailable Commands:\n\n  * %verbose [true/false]: Toggle verbose mode. Without arguments or with true it enters verbose mode. With false it exits verbose mode.\n  * %reset: Resets the current session's conversation.\n  * %undo: Removes the previous user message and the AI's response from the message history.\n  * %tokens [prompt]: (Experimental) Calculate the tokens that will be sent with the next prompt as context and estimate their cost. Optionally calculate the tokens and estimated cost of a prompt if one is provided. Relies on LiteLLM's cost_per_token() method for estimated costs.\n  * %help: Show the help message.\n\n### Configuration / Profiles\n\nOpen Interpreter allows you to set default behaviors using yaml files.\n\nThis provides a flexible way to configure the interpreter without changing\ncommand-line arguments every time.\n\nRun the following command to open the profiles directory:\n\n    \n    \n    interpreter --profiles\n\nYou can add yaml files there. The default profile is named default.yaml.\n\n#### Multiple Profiles\n\nOpen Interpreter supports multiple yaml files, allowing you to easily switch\nbetween configurations:\n\n    \n    \n    interpreter --profile my_profile.yaml\n\n## Sample FastAPI Server\n\nThe generator update enables Open Interpreter to be controlled via HTTP REST\nendpoints:\n\n    \n    \n    # server.py from fastapi import FastAPI from fastapi.responses import StreamingResponse from interpreter import interpreter app = FastAPI() @app.get(\"/chat\") def chat_endpoint(message: str): def event_stream(): for result in interpreter.chat(message, stream=True): yield f\"data: {result}\\n\\n\" return StreamingResponse(event_stream(), media_type=\"text/event-stream\") @app.get(\"/history\") def history_endpoint(): return interpreter.messages\n    \n    \n    pip install fastapi uvicorn uvicorn server:app --reload\n\nYou can also start a server identical to the one above by simply running\ninterpreter.server().\n\n## Android\n\nThe step-by-step guide for installing Open Interpreter on your Android device\ncan be found in the open-interpreter-termux repo.\n\n## Safety Notice\n\nSince generated code is executed in your local environment, it can interact\nwith your files and system settings, potentially leading to unexpected\noutcomes like data loss or security risks.\n\n\u26a0\ufe0f Open Interpreter will ask for user confirmation before executing code.\n\nYou can run interpreter -y or set interpreter.auto_run = True to bypass this\nconfirmation, in which case:\n\n  * Be cautious when requesting commands that modify files or system settings.\n  * Watch Open Interpreter like a self-driving car, and be prepared to end the process by closing your terminal.\n  * Consider running Open Interpreter in a restricted environment like Google Colab or Replit. These environments are more isolated, reducing the risks of executing arbitrary code.\n\nThere is experimental support for a safe mode to help mitigate some risks.\n\n## How Does it Work?\n\nOpen Interpreter equips a function-calling language model with an exec()\nfunction, which accepts a language (like \"Python\" or \"JavaScript\") and code to\nrun.\n\nWe then stream the model's messages, code, and your system's outputs to the\nterminal as Markdown.\n\n# Access Documentation Offline\n\nThe full documentation is accessible on-the-go without the need for an\ninternet connection.\n\nNode is a pre-requisite:\n\n  * Version 18.17.0 or any later 18.x.x version.\n  * Version 20.3.0 or any later 20.x.x version.\n  * Any version starting from 21.0.0 onwards, with no upper limit specified.\n\nInstall Mintlify:\n\n    \n    \n    npm i -g mintlify@latest\n\nChange into the docs directory and run the appropriate command:\n\n    \n    \n    # Assuming you're at the project's root directory cd ./docs # Run the documentation server mintlify dev\n\nA new browser window should open. The documentation will be available at\nhttp://localhost:3000 as long as the documentation server is running.\n\n# Contributing\n\nThank you for your interest in contributing! We welcome involvement from the\ncommunity.\n\nPlease see our contributing guidelines for more details on how to get\ninvolved.\n\n# Roadmap\n\nVisit our roadmap to preview the future of Open Interpreter.\n\nNote: This software is not affiliated with OpenAI.\n\n> Having access to a junior programmer working at the speed of your fingertips\n> ... can make new workflows effortless and efficient, as well as open the\n> benefits of programming to new audiences.\n>\n> \u2014 OpenAI's Code Interpreter Release\n\n## About\n\nA natural language interface for computers\n\nopeninterpreter.com/\n\n### Topics\n\nnodejs javascript python interpreter gpt-4 chatgpt\n\n### Resources\n\nReadme\n\n### License\n\nAGPL-3.0 license\n\n### Security policy\n\nSecurity policy\n\nActivity\n\nCustom properties\n\n### Stars\n\n47.7k stars\n\n### Watchers\n\n354 watching\n\n### Forks\n\n4.1k forks\n\nReport repository\n\n## Releases\n\n31 tags\n\n## Used by 314\n\n\\+ 306\n\n## Contributors 103\n\n\\+ 89 contributors\n\n## Languages\n\n  * Python 98.4%\n  * Shell 1.2%\n  * PowerShell 0.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
