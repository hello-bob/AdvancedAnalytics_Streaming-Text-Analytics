{"aid": "40217334", "title": "Dream-HTML \u2013 render HTML, SVG, MathML, Htmx markup from OCaml", "url": "https://github.com/yawaramin/dream-html", "domain": "github.com/yawaramin", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-30 22:41:54", "comments": 0, "source_title": "GitHub - yawaramin/dream-html: Render HTML, SVG, MathML, htmx markup from your OCaml Dream backend server", "source_text": "GitHub - yawaramin/dream-html: Render HTML, SVG, MathML, htmx markup from your\nOCaml Dream backend server\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nyawaramin / dream-html Public\n\n  * Notifications\n  * Fork 10\n  * Star 101\n\nRender HTML, SVG, MathML, htmx markup from your OCaml Dream backend server\n\nyawaramin.github.io/dream-html/dream-html/dream_html/\n\n### License\n\nGPL-3.0 license\n\n101 stars 10 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# yawaramin/dream-html\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n3 Branches\n\n17 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nyawaraminAdjust docstrings and formattingApr 28, 2024eb71189 \u00b7 Apr 28, 2024Apr\n28, 2024\n\n## History\n\n123 Commits  \n  \n### lib\n\n|\n\n### lib\n\n| Adjust docstrings and formatting| Apr 28, 2024  \n  \n### test\n\n|\n\n### test\n\n| Fix rendering of XML tags| Apr 6, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Escape text node values and attribute values differently| Aug 6, 2023  \n  \n### .ocamlformat\n\n|\n\n### .ocamlformat\n\n| Tweak formatting| May 11, 2023  \n  \n### CHANGES.md\n\n|\n\n### CHANGES.md\n\n| Changelog| May 13, 2023  \n  \n### COPYING.txt\n\n|\n\n### COPYING.txt\n\n| Initial import| Apr 22, 2023  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| No need to add a new commit in the history for every new doc publish| Apr\n27, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Tweak readme| Apr 26, 2024  \n  \n### dream-html.opam\n\n|\n\n### dream-html.opam\n\n| Adapt the Dream livereload implementation| Apr 23, 2024  \n  \n### dune-project\n\n|\n\n### dune-project\n\n| Adapt the Dream livereload implementation| Apr 23, 2024  \n  \n### import_html.js\n\n|\n\n### import_html.js\n\n| More complete support for importing ARIA and htmx attributes| Feb 4, 2024  \n  \n## Repository files navigation\n\nAPI Reference\n\n## dream-html - generate HTML markup from your Dream backend server\n\nCopyright 2023 Yawar Amin\n\nThis file is part of dream-html.\n\ndream-html is free software: you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation, either version 3 of the License, or (at your option) any later\nversion.\n\ndream-html is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\nA PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with\ndream-html. If not, see https://www.gnu.org/licenses/.\n\n## What\n\nAn HTML, SVG, and MathML rendering library that is closely integrated with\nDream. Most HTML elements and attributes from the Mozilla Developer Network\nreferences are included. Almost all non-standard or deprecated tags/attributes\ndeliberately omitted. CSS support is out of scope. htmx attributes supported\nout of the box.\n\n## Why\n\n  * TyXML is a bit too complex.\n  * Dream's built-in eml (Embedded ML) has some drawbacks like no editor support, quirky syntax that can be hard to debug and refactor, and manual dune rule setup for each view file\n  * In general string-based HTML templating is suboptimal and mostly driven by familiarity.\n\n## First look\n\n    \n    \n    let page req = let open Dream_html in let open HTML in (* automatically injects <!doctype html> *) html [lang \"en\"] [ head [] [ title [] \"Dream-html\" ]; body [] [ h1 [] [txt \"Dream-html\"]; p [] [txt \"Is cool!\"]; form [method_ `POST; action \"/feedback\"] [ (* Integrated with Dream's CSRF token generation *) csrf_tag req; label [for_ \"what-you-think\"] [txt \"Tell us what you think!\"]; input [name \"what-you-think\"; id \"what-you-think\"]; input [type_ \"submit\"; value \"Send\"] ] ] ] (* Integrated with Dream response *) let handler req = Dream_html.respond (page req)\n\n## Security (HTML escaping)\n\nAttribute and text values are escaped using rules very similar to standards-\ncompliant web browsers:\n\n    \n    \n    utop # open Dream_html;; utop # open HTML;; utop # #install_printer pp;; utop # let user_input = \"<script>alert('You have been pwned')</script>\";; val user_input : string = \"<script>alert('You have been pwned')</script>\" utop # p [] [txt \"%s\" user_input];; - : node = <p>&lt;script&gt;alert('You have been pwned')&lt;/script&gt;</p> utop # div [title_ {|\"%s|} user_input] [];; - : node = <div title=\"&quot;<script>alert('You have been pwned')</script>\"></div>\n\n## How to install\n\nMake sure your local copy of the opam repository is up-to-date first:\n\n    \n    \n    opam update opam install dream-html\n\nAlternatively, to install the latest commit that may not have been released\nyet:\n\n    \n    \n    opam pin add dream-html git+https://github.com/yawaramin/dream-html\n\n## Usage\n\nA convenience is provided to respond with an HTML node from a handler:\n\n    \n    \n    Dream_html.respond greeting\n\nYou can compose multiple HTML nodes together into a single node without an\nextra DOM node, like React fragments:\n\n    \n    \n    let view = null [p [] [txt \"Hello\"]; p [] [txt \"World\"]]\n\nYou can do string interpolation of text nodes using txt and any attribute\nwhich takes a string value:\n\n    \n    \n    let greet name = p [id \"greet-%s\" name] [txt \"Hello, %s!\" name]\n\nYou can conditionally render an attribute, and void elements are statically\nenforced as childless:\n\n    \n    \n    let entry = input [ if should_focus then autofocus else null_; id \"email\"; name \"email\"; value \"Email address\" ]\n\nYou can also embed HTML comments in the generated document:\n\n    \n    \n    div [] [comment \"TODO: xyz.\"; p [] [txt \"Hello!\"]] (* <div><!-- TODO: xyz. -->Hello!</div> *)\n\nYou have precise control over whitespace in the rendered HTML; dream-html does\nnot insert any whitespace by itself\u2013all whitespace must be inserted inside\ntext nodes explicitly:\n\n    \n    \n    p [] [txt \"hello, \"; txt \"world!\"];; (* <p>hello, world!</p> *)\n\nYou can also conveniently hot-reload the webapp in the browser using the\nDream_html.Livereload module. See the API reference for details.\n\n## Import HTML\n\nOne issue that you may come across is that the syntax of HTML is different\nfrom the syntax of dream-html markup. To ease this problem, you may use the\nbookmarklet import_html.js provided in this project. Simply create a new\nbookmark in your browser with any name, and set the URL to the content of that\nfile (make sure it is exactly the given content).\n\nThen, whenever you have a web page open, just click on the bookmarklet to copy\nits markup to the clipboard in dream-html format. From there you can simple\npaste it into your project.\n\nNote that the dream-html version is not formatted nicely, because the\nexpectation is that you will use ocamlformat to fix the formatting.\n\nAlso note that the translation done by this bookmarklet is on a best-effort\nbasis. Many web pages don't strictly conform to the rules of correct HTML\nmarkup, so you will likely need to fix those issues for your build to work.\n\n## Test\n\nRun the test and print out diff if it fails:\n\n    \n    \n    dune runtest # Will also exit 1 on failure\n\nSet the new version of the output as correct:\n\n    \n    \n    dune promote\n\n## Prior art/design notes\n\nSurface design obviously lifted straight from elm-html.\n\nImplementation inspired by both elm-html and ScalaTags.\n\nMany languages and libraries have similar HTML embedded DSLs:\n\n  * Phlex - Ruby\n  * hiccl - Common Lisp\n  * scribble-html-lib - Racket\n  * hiccup - Clojure\n  * std/htmlgen - Nim\n  * Falco.Markup - F#\n  * htpy - Python\n  * Arbre - Ruby\n  * j2html - Java\n  * Lucid - Haskell\n\n## About\n\nRender HTML, SVG, MathML, htmx markup from your OCaml Dream backend server\n\nyawaramin.github.io/dream-html/dream-html/Dream_html/\n\n### Topics\n\nsvg html ocaml mathml htmx\n\n### Resources\n\nReadme\n\n### License\n\nGPL-3.0 license\n\nActivity\n\n### Stars\n\n101 stars\n\n### Watchers\n\n4 watching\n\n### Forks\n\n10 forks\n\nReport repository\n\n## Releases 16\n\n3.4.1 Latest\n\nApr 27, 2024\n\n\\+ 15 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 6\n\n## Languages\n\n  * OCaml 85.5%\n  * JavaScript 8.0%\n  * HTML 5.9%\n  * Makefile 0.6%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
