{"aid": "40222025", "title": "Show HN: Drf-simple-API-errors \u2013 Fixing Django Rest Framework API error messages", "url": "https://github.com/gripep/drf-simple-api-errors", "domain": "github.com/gripep", "votes": 1, "user": "gripep", "posted_at": "2024-05-01 11:56:08", "comments": 0, "source_title": "GitHub - gripep/drf-simple-api-errors: A library for Django Rest Framework returning consistent, predictable and easy-to-parse API error messages inspired by RFC7807 guidelines.", "source_text": "GitHub - gripep/drf-simple-api-errors: A library for Django Rest Framework\nreturning consistent, predictable and easy-to-parse API error messages\ninspired by RFC7807 guidelines.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ngripep / drf-simple-api-errors Public\n\n  * Notifications\n  * Fork 0\n  * Star 2\n\nA library for Django Rest Framework returning consistent, predictable and\neasy-to-parse API error messages inspired by RFC7807 guidelines.\n\n### License\n\nMIT license\n\n2 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# gripep/drf-simple-api-errors\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n2 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ngripepRelease v1.0.1Apr 30, 2024435ccf1 \u00b7 Apr 30, 2024Apr 30, 2024\n\n## History\n\n8 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Add codecov integration| Apr 28, 2024  \n  \n### drf_simple_api_errors\n\n|\n\n### drf_simple_api_errors\n\n| Release v1.0.1| Apr 30, 2024  \n  \n### test_project\n\n|\n\n### test_project\n\n| Release v1.0.0| Apr 26, 2024  \n  \n### .coveragerc\n\n|\n\n### .coveragerc\n\n| Release v1.0.0| Apr 26, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Release v1.0.0| Apr 26, 2024  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| Upgrade dependencies| Apr 30, 2024  \n  \n### LICENSE.md\n\n|\n\n### LICENSE.md\n\n| Release v1.0.0| Apr 26, 2024  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Add test coverage xml output| Apr 28, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README| Apr 30, 2024  \n  \n### poetry.lock\n\n|\n\n### poetry.lock\n\n| Upgrade dependencies| Apr 30, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| Release v1.0.1| Apr 30, 2024  \n  \n### tox.ini\n\n|\n\n### tox.ini\n\n| Add codecov integration| Apr 28, 2024  \n  \n## Repository files navigation\n\n# Django Rest Framework Simple API Errors\n\n## What is this?\n\nA library for Django Rest Framework returning consistent, predictable and\neasy-to-parse API error messages.\n\nThis library was built with RFC7807 guidelines in mind, but with a small\ntwist: it defines a \"problem detail\" as a list but it still serves as a way to\ninclude errors in a predictable and easy-to-parse format for any API consumer.\n\nErrors are formatted with RFC7807 keywords and DRF exception data. This\nlibrary was designed to be used by anyone who had enough of DRF API error\nmessages format.\n\n## Table of Contents\n\n  * Installation\n  * Usage\n\n    * Exception Handler\n    * Error structure overview\n    * Example JSON Error Responses\n    * Settings\n\n      * CAMELIZE\n      * EXTRA_HANDLERS\n      * FIELDS_SEPARATOR\n  * Testing\n  * Support\n  * Contributing\n\n## Installation\n\nInstall using the command line:\n\n    \n    \n    pip install drf-simple-api-errors\n\n## Usage\n\n### Exception Handler\n\nAdd EXCEPTION_HANDLER in your REST_FRAMEWORK settings of your Django project\nsettings file:\n\n    \n    \n    REST_FRAMEWORK = { # ... \"EXCEPTION_HANDLER\": \"drf_simple_api_errors.exception_handler\", }\n\n### Error structure overview\n\nAPI error messages typically include the following keys:\n\n  * \"title\" (str): A brief summary that describes the problem type\n  * \"detail\" (list[str] | None): A list of specific explanations related to the problem\n  * \"invalid_params\" (list[dict] | None): A list of dict containing details about parameters that were invalid or malformed in the request. Each dict within this list provides:\n\n    * \"name\" (str): The name of the parameter that was found to be invalid\n    * \"reasons\" (list[str]): A list of strings describing the specific reasons why the parameter was considered invalid or malformed\n\n    \n    \n    { \"title\": \"Error message.\", \"detail\": [ \"error\", ... ], \"invalid_params\": [ { \"name\": \"field_name\", \"reason\": [ \"error\", ... ] }, ... ] }\n\n### Example JSON Error Responses\n\n#### Field validation errors\n\n    \n    \n    { \"title\": \"Error message.\", \"invalid_params\": [ { \"name\": \"field_name\", \"reason\": [ \"error\", ... ] }, ... ] }\n\n#### Non-fields validation errors\n\n    \n    \n    { \"title\": \"Error message.\", \"detail\": [ \"error\", ... ] }\n\n#### Other bad requests with no detail\n\n    \n    \n    { \"title\": \"Error message.\" }\n\n## Settings\n\nDefault available settings:\n\n    \n    \n    DRF_SIMPLE_API_ERRORS = { \"CAMELIZE\": False, \"EXTRA_HANDLERS\": [], \"FIELDS_SEPARATOR\": \".\", }\n\n  * #### CAMELIZE\n\nCamel case support for Django Rest Framework exceptions JSON error responses.\n\nIf CAMELIZE is set to True:\n\n    \n    \n    { \"title\": \"Error message.\", \"invalidParams\": [ { \"name\": \"fieldName\", \"reason\": [ \"error\", ... ] } ... ] }\n\n  * #### EXTRA_HANDLERS\n\nSupport for exceptions that differ from the standard structure of the Django\nRest Framework.\n\nFor instance, you may want to specify you own exception:\n\n    \n    \n    class AuthenticationFailed(exceptions.AuthenticationFailed): def __init__(self, detail=None, code=None): \"\"\" Builds a detail dictionary for the error to give more information to API users. \"\"\" detail_dict = {\"detail\": self.default_detail, \"code\": self.default_code} if isinstance(detail, dict): detail_dict.update(detail) elif detail is not None: detail_dict[\"detail\"] = detail if code is not None: detail_dict[\"code\"] = code super().__init__(detail_dict)\n\nUse exception in code:\n\n    \n    \n    def my_func(): raise AuthenticationFailed( { \"detail\": _(\"Error message.\"), \"messages\": [ { \"metadata\": \"metadata_data\", \"type\": \"type_name\", \"message\": \"error message\", } ], } )\n\nThis will result in:\n\n    \n    \n    AuthenticationFailed( { \"detail\": \"Error message.\", \"messages\": [ { \"metadata\": \"metadata_data\", \"type\": \"type_name\", \"message\": \"error message\", } ], } )\n\nYou can handle this by creating a handlers.py file and specifying an handler\nfor your use case:\n\n    \n    \n    def handle_exc_custom_authentication_failed(exc): from path.to.my.exceptions import AuthenticationFailed if isinstance(exc, AuthenticationFailed): try: exc.detail = exc.detail[\"messages\"][0][\"message\"] except (KeyError, IndexError): exc.detail = exc.detail[\"detail\"] return exc\n\nThen add it to the EXTRA_HANDLERS list in this package settings:\n\n    \n    \n    DRF_SIMPLE_API_ERRORS = { \"EXTRA_HANDLERS\": [ \"path.to.my.handlers.handle_exc_custom_authentication_failed\", # ... ] }\n\n  * #### FIELDS_SEPARATOR\n\nSupport for nested dicts containing multiple fields to be flattened.\n\nIf FIELDS_SEPARATOR is set to .:\n\n    \n    \n    { \"field1\": { \"field2\": \"value\" } }\n\nWill result in:\n\n    \n    \n    { \"field1.field2\": \"value\" }\n\n## Testing\n\nAll the necessary commands are included in the Makefile.\n\nWe are using tox and poetry to run tests in every supported Python version.\n\nRun test with the commands below:\n\n    \n    \n    make install make test\n\n## Support\n\nPlease open an issue.\n\n## Contributing\n\nPlease use the Github Flow. In a nutshell, create a branch, commit your code,\nand open a pull request.\n\n## About\n\nA library for Django Rest Framework returning consistent, predictable and\neasy-to-parse API error messages inspired by RFC7807 guidelines.\n\n### Topics\n\npython api django django-rest-framework error-handler error-messages easy-to-\nuse error-response standard-error\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n2 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 2\n\n1.0.1 Latest\n\nApr 30, 2024\n\n\\+ 1 release\n\n## Languages\n\n  * Python 97.4%\n  * Makefile 2.6%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
