{"aid": "40264778", "title": "Canary AWS credentials: Beyond a token effort", "url": "https://tracebit.com/blog/2024/05/deploying-effective-canary-aws-credentials/", "domain": "tracebit.com", "votes": 1, "user": "tracebit", "posted_at": "2024-05-05 13:32:01", "comments": 0, "source_title": "Canary AWS credentials: Beyond a token effort", "source_text": "Canary AWS credentials: Beyond a token effort\n\nSam Cox\n\nCTO & Co-Founder\n\nFri, May 3, 2024\n\n# Canary AWS credentials: Beyond a token effort\n\nFor a malicious actor, AWS credentials represent the enticing prospect of\nbeing able to access an organization's cloud environment. They may be\nexplicitly sought out and are likely to be used if found. Canary AWS\ncredentials are AWS credentials which are created, planted and monitored for\nuse specifically to detect possible breaches of the systems in which they are\nlocated. Unsurprisingly, this can be a valuable method of intrusion detection!\n\nIn this post we'll explore some of the technical considerations when building\nor deploying canary AWS credentials at scale, guided by the latest security\nresearch. There's at least one existing service in this space^[1], but I'd\ninvite you to consider the below as we think there's value in digging a little\ndeeper, no matter what approach you choose.\n\n## Considerations when deploying Canary AWS Credentials\n\n  1. Anti-patterns\n  2. Placement\n  3. Short term vs Long term credentials\n  4. Automated Deployment\n  5. Identification\n  6. Account Fingerprinting\n  7. Permissions\n  8. False Positives\n  9. Conclusion\n\n## Anti-patterns\n\nI don't believe there is a one size fits all canary AWS credential strategy,\nas you'll see below, there's plenty of detail worth considering to avoid\nwasting effort on a deployment that fails to provide value or quickly becomes\nstale.\n\nWhat I will confidently attest is that a quick and dirty \"spray and pray\"\napproach is unlikely to provide value. What this might look like:\n\n  * selecting a handful of high value assets and manually deploying canary credentials to them\n  * skipping solving for the long term maintenance of the canary credentials deployment (will you cycle a credential that triggers? how will you on board new assets?)\n  * placing canary credentials in places they'll never be discovered\n  * placing canary credentials in places so discoverable they get discovered far too often (with a vague idea this might provide 'threat intel')\n\nIf these examples sound familiar then perhaps I can help you consider the\nvariables necessary to take an approach that may not be perfect immediately\nbut will at least allow for iteration and avoid wasted effort. Let's dive in!\n\n## Placement\n\nAs a starting point, it's worth having a picture of why and where you want to\ndeploy the canaries. This can be guided by e.g.\n\n  * your threat model\n  * reports about threat actors' activity\n  * the level of existing alerting and monitoring capabilities you have in place\n\nThis will likely be quite specific to your organization. Here are a few\nconcrete examples:\n\n### Endpoint or workstation devices\n\nAWS credentials can be placed on endpoint devices to detect activity\nassociated with certain malware. For instance, Palo Alto's Unit 42 reported on\nthe Kazuar backdoor which contains capabilities designed to steal\n~/.aws/credentials files. If canary AWS credentials were planted in this\nlocation and subsequently used, this activity could be detected.\n\n### Docker Container hosts\n\nDatadog recently reported on a threat actor compromising exposed Docker API\nendpoints and deploying cloud credential stealers designed to obtain AWS\ncredentials from the Instance Metadata Service (IMDS) as well as several\nlocations on disk. SysDig previously reported a similar technique used by\nTeamTNT after exploiting a service hosted within Kubernetes.\n\n### CI or Build environments\n\nCI environments represent an attractive target for malicious actors looking to\nsteal code, inject payloads into builds or laterally move into cloud\nenvironments. In the Codecov and CircleCI breaches sensitive environment\nvariables (including AWS access keys) were made available to attackers. In the\nlatter example, the compromise was detected because of canary AWS credentials.\nCI systems could potentially also represent one of the earliest opportunities\nto detect supply chain compromise of third party dependencies. For instance, a\nsupply chain attack compromising the Python package ctx led to environment\nvariables being exfiltrated, including any AWS credentials available to the\nprocess.\n\n## Short term vs Long term credentials\n\nAn important, and sometimes overlooked, consideration is whether to issue\nshort term or long term credentials as canaries.\n\n### Long term credentials\n\nLong term credentials are those which are valid until they are otherwise\nrevoked. These are access keys associated with IAM users. Long term\ncredentials are stored within AWS and validated for each request.\n\n### Short term credentials\n\nThese are credentials which have an explicit expiration date, determined at\nthe point of issue. There are a number of different means of obtaining short\nterm credentials (e.g. associated with assumed roles, federated users, etc).\nShort term credentials include an AWS_SESSION_TOKEN. These credentials can be\nvalid for as long as 36 hours.\n\n### Quotas\n\nIf building this yourself, there is a limit of 5,000 IAM users within an AWS\naccount, and each IAM user can have two active access keys. This effectively\nplaces a maximum of 10,000 active long term credentials which can be issued\nfrom a single AWS account.\n\nShort term credentials operate quite differently - the session token they\ninclude is effectively an encrypted blob, produced by STS when the credentials\nare issued. This token can be used to authenticate a request to AWS but is not\notherwise stored within AWS. This means that the number of active short term\ncredentials is effectively unlimited.\n\n### Detection\n\nA key requirement of canary credentials is to be able to detect when they are\nused. Primarily this relies on CloudTrail, which logs activity within AWS and\nincludes various details about the principal which performed an action. We can\nwatch CloudTrail for activity associated with the canary credentials to detect\nwhen they have been used.\n\nIt's important to note however that CloudTrail will not log all API requests\nmade. A simple example of this is a request like S3:GetObject - if data events\nare not enabled within CloudTrail then there won't be a record of that\nactivity. In a previous blog post, I also showed that VPC endpoint policies\ncan prevent certain activity from being logged in CloudTrail. Finally some\nevents just aren't supported by CloudTrail - for instance SQS:ListQueues^[2].\n\nThere is however one additional option for detection for long term\ncredentials. You can call IAM:GetAccessKeyLastUsed or\nIAM:GenerateCredentialReport to determine some very rudimentary details about\nan access key - including the timestamp, service name and region in which it\nwas last used. This provides much less information than is available in\nCloudTrail but it is a very effective method of determining whether\ncredentials have been used at all. I speculate that these details are recorded\nby AWS' internal Runtime Authentication Service as an inherent part of\nauthenticating the request and so I consider it unlikely that there is any\ntechnique to evade this system while using the key itself.\n\nOne significant advantage of short term credentials from AWS' perspective is\nthat they are stateless and do not need to be stored internally by their\nsystems. It seems therefore unlikely that a similar \"last used\" mechanism\nwould ever be implemented for short term credentials.\n\n### Detection Window\n\nIt's worth remembering that it is only possible to trigger credentials which\nare valid at the time of use. With short term credentials, this can be up to\n36 hours from the point in time at which they are issued. With long term\ncredentials, this will be until the access key is explicitly deactivated or\ndeleted.\n\nIn certain cases this may make long term credentials preferable, but it is\nworth considering what your response to an alert will look like. For instance,\nif long term credentials were issued two years ago and they trigger today;\nthere is a very long time window in which the system containing those\ncredentials could potentially have been breached. In comparison, if short term\ncredentials trigger - you know that the credentials were obtained and used\nwithin a short period of time (<36 hours) which could significantly focus the\nscope of investigation.\n\nOf course, just because long term credentials last indefinitely, it doesn't\nmean they have to! You can cycle them much more frequently.\n\n### Plausibility\n\nThe use of canary credentials is a relatively well-known technique, so it's\nworth thinking about how plausible the credentials are in the context in which\nthey're placed. Many organizations are trying to move away from the use of\nlong term credentials where possible. If found stored on a USB device stored\nin an office safe, long term credentials may appear quite plausible. On the\nother hand, one set of long term credentials among many short term credentials\non an Engineer's laptop might stand out as potential canaries in the context\nof your organization and be actively avoided by attackers.\n\n## Automated Deployment\n\nIt's important to think about how you intend to deploy or make available the\ncanary credentials. This is highly dependent on where you intend to place\nthem. For instance, when deploying on endpoints, can you make use of your\nMobile Device Management (MDM) software to facilitate their deployment?\nPerhaps they need to be namespaced (e.g. under a different AWS CLI profile) to\navoid conflicting with other credentials.\n\nIn a CI environment, can you automate the issuing of credentials ahead of each\njob; or placing them in the associated secret stores?\n\nFor virtual machines, can you automatically create them at launch time?\nWilliam Bengston describes an advanced technique in which they could be\nreturned via an IMDS proxy.\n\n## Identification\n\nYou will want to be able to identify which system may have been compromised\nwhen a particular credential is triggered. For instance, if deploying\ncredentials to many endpoints, you'll likely want distinct credentials per\ndevice with at least the hostname associated with each one. When deploying\ncanary credentials in CI, you may wish to associate them with a CI build\nidentifier. This is critical to significantly narrow the scope of\ninvestigation if one triggers.\n\nThe simplest form of identification would be to ensure that the identifier\n(e.g. hostname) appears in the principal ARN - which in turn will appear in\nCloudTrail when the credentials are used. For instance, when using long term\ncredentials, you could create an IAM user with the name including the host and\nissue an access key for that user. With short term credentials, you could pass\nthe hostname as the RoleSessionName when assuming the role. I would caution\nhowever that you should not place sensitive information in the principal ARN -\nit's readily available to anyone with the credentials. Encryption could\naddress this concern but comes with its own challenges. Restrictions on length\nand format of these various names also prevent placing much metadata in the\nprincipal ARN.\n\nFor this reason it may be useful to store some metadata about each credential\nissued (e.g. in DynamoDB). This allows you to store as much more information\nabout each credential, without concerns about it being exposed. This can also\nallow you to easily see how many credentials you have active (e.g. indexed by\ndevice), without resorting to listing IAM users or hunting in CloudTrail.\n\nOne word of warning is that - at least for short term credentials - AWS Access\nKey IDs themselves are not unique. At high enough volumes, you will encounter\nduplicates (including concurrently valid ones!). You'll want to create your\nown unique identifier to place in the Principal ARN.\n\n## Account fingerprinting\n\nIn October 2023, a fairly low key piece of research changed significantly how\nteams should think about the impacts of account fingerprinting.\n\nIt's now possible to determine the AWS account ID associated with an AWS\naccess key without making any requests to AWS. This is because the AWS account\nID is encoded within the access key itself. This means that if an attacker\nfinds an access key, they can determine the account ID associated with it\nwithout any risk of detection. Previously, attackers used the CloudTrail\nevasion techniques discussed above, which could be detected, itself a strong\nsignal. This is no longer necessary for attackers and they can stealthily\ndetermine the account ID.\n\nSome tools have already built in capabilities to detect whether AWS\ncredentials are associated with accounts known to issue canary credentials.\nEven if an account isn't in such a list, a sophisticated attacker could\nconsider whether the credentials are plausible in the context in which they\nfind them:\n\n  * do they match the account in any other credentials found?\n  * do they match the account ID contained in any ARNs in the environment?\n  * are they included in a list of account IDs associated with your organization which they might have been able to obtain by other means?\n\nAlthough I'm not aware of any public technique to determine an AWS\nOrganization ID from an AWS Account ID, issuing credentials from an account\nowned by your Organization (rather than a third party) could make the\ncredentials more plausible.\n\n## Permissions\n\nWhen issuing canary credentials from your own AWS account, it's crucial to\nmake sure you give very careful consideration to permissions associated with\nthe credentials. I would highly recommend that they are granted no\npermissions. It's tempting to think that granting some limited additional\npermissions might provide threat intelligence if the credentials are ever used\nbut I would be very wary about the additional risks associated with this.\n\nIt is not enough to rely on the \"implicit deny\" of not attaching any policies\nto the user or role associated with the credentials. One risk is that\nresource-based IAM policies within your account or others could permit the\ncredentials access even though no such identity-based policy grants access.\nInadvertently adding additional policies to the principal could also permit\nmore access than intended. For this reason an explicit deny should be\nspecified in the policy. Consider also using SCPs or Permission Boundaries\nwith explicit denies against the principal as another failsafe.\n\nIt is not possible to deny the credentials from calling sts:GetCallerIdentity.\n\n## False positives\n\nThere's a trade-off between the discoverability of these credentials and the\nchance that they will be inadvertently triggered. This depends where they're\nplaced. For instance, threat actors may specifically target\n~/.aws/credentials, so you probably want to place them in there, but perhaps\nnot as the default profile if it's on an Engineer's machine! But on your CEOs\nor CFOs machine? That could be a very strong signal with a very low false\npositive rate (depending, of course, on your CEO or CFO!).\n\n# Conclusion\n\nThere are obviously quite a few factors which you can consider when it comes\nto canary credentials, each with its own trade-offs. My general recommendation\nwould be:\n\n  * invest in automating the deployment, regular replacement and tracking of credentials in specific places that you want to improve your detections\n\n  * aim to do this in a way which requires no manual intervention as new resources are provisioned\n\n  * abstract the details of issuing of credentials from the devices themselves - e.g. put it behind an API\n\n  * issue granular credentials and associate enough metadata with them to enable an effective response\n\nI think investing in this flexibility is more valuable than spending too much\nthought ahead of time about long-term vs short-term, principal names and\naccounts from which to issue credentials. These decisions can ultimately be\nchanged fairly easily if you have automated and abstracted the deployment\nprocess.\n\nGiven the increasing research interest in fingerprinting canary credentials\nand unauthenticated information gathering about AWS resources, it's important\nto be able to adapt and renew credentials easily to maintain their long term\neffectiveness - rather than one day find that your manually and carefully\nplaced credentials can be trivially identified!\n\nI'm keen to hear about your own experience with canary credentials - please do\nreach out!\n\n  1. Thinkst's Canary Tokens: https://canarytokens.org/ \u21a9\ufe0e\n\n  2. As you can imagine, CloudTrail evasion is a topic that's under active research, e.g. some recent research from Nick Frichette \u21a9\ufe0e\n\nThanks for reading this far, we hope you got something from this article.\nWe're building a product to operationalise and scale cloud canaries to allow\norganizations to 'assume breach' with minimal set up and maintenance. If\nyou\u2019re interested to learn more about what that looks like please reach out\n(we currently support AWS, with Azure & GCP coming soon).\n\n  * AWS\n  * honeypots\n  * canary credentials\n  * security\n\n## Sign up for our newsletter\n\nSubscribe to stay in the loop of future posts and Tracebit updates\n\n\u00a9 2024 Tracebit \u00b7 Contact\n\n", "frontpage": false}
