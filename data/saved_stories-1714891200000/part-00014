{"aid": "40261436", "title": "How to (not) lock yourself into architectural drawbacks", "url": "https://ebellani.github.io/blog/2024/microservices-as-reification/", "domain": "ebellani.github.io", "votes": 1, "user": "b-man", "posted_at": "2024-05-05 00:32:45", "comments": 0, "source_title": "How to (not) lock yourself into architectural drawbacks, or, Microservice architecture as the reification of Pi-Calculus", "source_text": "How to (not) lock yourself into architectural drawbacks, or, Microservice\narchitecture as the reification of Pi-Calculus\n\n## How to (not) lock yourself into architectural drawbacks, or, Microservice\narchitecture as the reification of Pi-Calculus May 4, 2024 by Eduardo Bellani\n\n> Reification: the treatment of something abstract as a material or concrete\n> thing, as in the following lines from Matthew Arnold\u2019s poem \u201cDover Beach\u201d:\n> (Britannica 2018)\n>\n> /The Sea of Faith Was once, too, at the full, and round earth\u2019s shore Lay\n> like the folds of a bright girdle furled./\n\nThe microservice architecture(MA) has taken a deep hold in the collective\nimagination of the software engineering community since at least 2014^1. This\nhas happened despite serious and well documented drawbacks.\n\nSuch combination calls for an explanation. A sketch of such explanation is my\nintent here, starting with what MA is, at bottom. At a later date I intend to\nprovide a history of how it came to be a dominant architecture on our\nindustry.\n\nMy position is that MA is a reification(Britannica 2018) of abstract processes\nas defined by the Pi-Calculus (PC). Why do I think of that? Let\u2019s start by\ndefining things.\n\n## Definitions\n\nPC is a model of message-based concurrent computation and its essential\nfeatures are(Pierce 1997):\n\n>   * focusing on interaction via communication rather than shared variables,\n>   * describing concurrent systems using a small set of primitive operators\n> and\n>   * on deriving useful algebraic laws for manipulating expressions written\n> using these operators.\n>\n\nMore concretely:\n\n> ... \u03c0-calculus lets you represent processes, parallel composition of\n> processes, synchronous communication between processes through channels,\n> creation of fresh channels, replication of processes, and nondeterminism ...\n> A process is an abstraction of an independent thread of control. A channel\n> is an abstraction of the communication link between two processes. Processes\n> interact with each other by sending and receiving messages over channels.\n> (Wing 2002)\n\nHere is the best definition of the MA that I know of:\n\n> The microservice architecture pattern structures the system as a collection\n> of independently deployable services that communicate only via messages\n> through service interfaces. (Bass et al. 2021)\n\n## How are they mapped?\n\nSo here is PC is mapped to MA:\n\n  1. Processes are Services(binaries loaded into memory),\n  2. Channels are either queues or some form of APIs (RPC or REST),\n  3. Messages are network calls,\n  4. The avoidance of shared variables as an avoidance of a shared DBMS.\n\n## Conclusion\n\nThe reader might well ask, so what? Isn\u2019t that a good thing? Well, no, it\u2019s a\nvery bad thing. Why?\n\nBecause once you mistake a formal entity such as the PC with a material one\nsuch as the MA, you lock yourself out of possibilities and in specific\ndrawbacks that might not exist in other ways to implement the PC.\n\nLet me illustrate the point here with a metaphor:\n\nSay you think the formal entity called Boat can only be implemented by Yacht.\nYou now are locked into the design choices of that concrete instantiation of\nthe Boat form. Transatlantic or Canoe are not possible for you.\n\nComing back to the case at hand, here are some examples of how you could\nimplement the pi-calculus without MA:\n\n  * Use a language/runtime that supports it, such as Erlang/ERT, SML/NJ or F#/.net.\n  * Use a framework such as Akka.\n  * Use a DBMS where several applications share the same DBMS but you use permissions and views to manage access and have logical independence.\n\n## Appendix: The Drawbacks\n\n>   * It hurts performance. The overhead of serializing data and sending it\n> across the network is increasingly becoming a bottleneck. When developers\n> over-split their applications, these overheads compound.\n>   * It hurts correctness. It is extremely challenging to reason about the\n> interactions between every deployed version of every microservice. In a case\n> study of over 100 catastrophic failures of eight widely used systems, two-\n> thirds of failures were caused by the interactions between multiple versions\n> of a system.\n>   * It is hard to manage. Rather than having a single binary to build, test,\n> and deploy, developers have to manage n different binaries, each on their\n> own release schedule. Running end-to-end tests with a local instance of the\n> application becomes an engineering feat.\n>   * It freezes APIs. Once a microservice establishes an API, it becomes hard\n> to change without breaking the other services that consume the API. Legacy\n> APIs linger around, and new APIs are patched on top.^2\n>   * It slows down application development. When making changes that affect\n> multiple microservices, developers cannot implement and deploy the changes\n> atomically. They have to carefully plan how to introduce the change across n\n> microservices with their own release schedules.\n>\n\n>\n> (Ghemawat et al. 2023)\n\nFigure 1: Cathedral of Phnom Penhl, destroyed shortly after by the Khmer\nRouge. The Ministry of Posts and Telecommunications now stands on the site of\nthe former cathedral\n\n## References\n\nBass, L., P. Clements, R. Kazman, and an O\u2019Reilly Media Company Safari. 2021.\nSoftware Architecture in Practice, 4th Edition. Sei Series in Software\nEngineering. Addison-Wesley Professional.\n\nBritannica, The Editors of Encyclopaedia. 2018. \u201cReification.\u201d In Encyclopedia\nBritannica. https://www.britannica.com/topic/reification.\n\nGhemawat, Sanjay, Robert Grandl, Srdjan Petrovic, Michael Whittaker, Parveen\nPatel, Ivan Posva, and Amin Vahdat. 2023. \u201cTowards Modern Development of Cloud\nApplications.\u201d In Proceedings of the 19th Workshop on Hot Topics in Operating\nSystems, 110\u201317. Hotos \u201923. Providence, RI, USA: Association for Computing\nMachinery. https://doi.org/10.1145/3593856.3595909.\n\nPierce, Benjamin C. 1997. \u201cFoundational Calculi for Programming Languages.\u201d In\nThe Computer Science and Engineering Handbook, edited by Allen B. Tucker,\n2190\u20132207. CRC Press. http://dblp.uni-\ntrier.de/db/books/collections/tucker97.html#Pierce97.\n\nWing, Jeannette M. 2002. \u201cFaq on $\\Pi$-Calculus.\u201d\nhttps://www.cs.cmu.edu/~wing/publications/Wing02a.pdf.\n\n  1. https://trends.google.com/trends/explore?date=all&geo=US&q=microservices \u21a9\ufe0e\n\n  2. In a certain sense, all externally facing APIs face this. Microservices just make this problem worse by making everything external and not part of the same checkable runtime. \u21a9\ufe0e\n\nFeel free to send me an email: ebellani -at- gmail -dot- com\n\nFingerprint: 48C50C6F1139C5160AA0DC2BC54D00BC4DF7CA7C\n\n", "frontpage": false}
