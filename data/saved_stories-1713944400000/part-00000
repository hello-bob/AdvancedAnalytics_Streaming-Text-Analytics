{"aid": "40139464", "title": "How to Identify a Good Programmer", "url": "https://morads.substack.com/p/how-to-identify-a-good-programmer", "domain": "morads.substack.com", "votes": 7, "user": "nashaat", "posted_at": "2024-04-24 01:37:42", "comments": 3, "source_title": "How To Identify A Good Programmer", "source_text": "How To Identify A Good Programmer - by Morad s\n\n# Morad\u2019s Substack\n\nShare this post\n\n#### How To Identify A Good Programmer\n\nmorads.substack.com\n\n#### Discover more from Morad\u2019s Substack\n\nMy personal Substack\n\nContinue reading\n\nSign in\n\n# How To Identify A Good Programmer\n\nMorad s\n\nApr 24, 2024\n\nShare this post\n\n#### How To Identify A Good Programmer\n\nmorads.substack.com\n\nShare\n\nHow do you recognise good programmers if you\u2019re a business guy?\n\nIt\u2019s not as easy as it sounds. CV experience is only of limited use here,\nbecause great programmers don\u2019t always have the \u201cofficial\u201d experience to\ndemonstrate that they\u2019re great. In fact, a lot of that CV experience can be\nmisleading. Yet there are a number of subtle cues that you can get, even from\nthe CV, to figure out whether someone\u2019s a great programmer.\n\nI consider myself to be a pretty good programmer. At the same time, I\u2019ve spent\na fair amount of time on the business side of the fence, filtering technical\nCVs for projects, interviewing people, etc. Thanks to this, I think I have a\nbit of experience in recognising good programmers, and I want to share it in\nthis article, in the hope that it may help other \u201cbusiness guys\u201d to recognise\ngood programmers. And, who knows, perhaps some programmers who have the\npotential to be good but haven\u2019t really exploited this can also read this and\nrealise what they need to do to become good (although, as I\u2019ll argue, that\u2019s\ndefinitely not accessible to all programmers!).\n\nIn his article The 18 mistakes that kill startups, Paul Graham makes the\nfollowing point:\n\n\u201c... what killed most of the startups in the e-commerce business back in the\n90s, it was bad programmers. A lot of those companies were started by business\nguys who thought the way startups worked was that you had some clever idea and\nthen hired programmers to implement it. That\u2019s actually much harder than it\nsounds\u2014almost impossibly hard in fact\u2014because business guys can\u2019t tell which\nare the good programmers. They don\u2019t even get a shot at the best ones, because\nno one really good wants a job implementing the vision of a business guy.\n\nIn practice what happens is that the business guys choose people they think\nare good programmers (it says here on his resume that he\u2019s a Microsoft\nCertified Developer) but who aren\u2019t. Then they\u2019re mystified to find that their\nstartup lumbers along like a World War II bomber while their competitors\nscream past like jet fighters. This kind of startup is in the same position as\na big company, but without the advantages.\n\nSo how do you pick good programmers if you\u2019re not a programmer? I don\u2019t think\nthere\u2019s an answer. I was about to say you\u2019d have to find a good programmer to\nhelp you hire people. But if you can\u2019t recognize good programmers, how would\nyou even do that?\u201d\n\nI disagree with Mr Graham on this one. I think there are a number of very\nstrong indicators of a \u201cgood programmer\u201d (and, conversely, strong indicators\nof a \u201cnot-so-good programmer\u201d) that even a business guy can recognise. I\u2019ll\nsummarise some key indicators and counter-indicators in a list at the end of\nthe article.\n\n####\n\n#1 : Passion\n\nIn my corporate experience, I met a kind of technical guy I\u2019d never met\nbefore: the career programmer. This is a person who\u2019s doing IT because they\nthink it\u2019s a good career. They don\u2019t do any programming in their spare time.\nThey\u2019re shocked when they find out I have a LAN and 3 computers at home. They\njust do it at work. They don\u2019t learn new stuff unless sent on a training\nprogram (or motivated by the need to get a job that requires that technology).\nThey do \u201cprogramming\u201d as a day job. They don\u2019t really want to talk about it\noutside of work. When they do, they talk with a distinctive lack of\nenthusiasm. Basically, they lack passion.\n\nI believe that good developers are always passionate about programming. Good\ndevelopers would do some programming even if they weren\u2019t being paid for it.\nGood programmers will have a tendency to talk your ear off about some\ntechnical detail of what they\u2019re working on (but while clearly believing,\nsincerely, that what they\u2019re talking about is really worth talking about).\nSome people might see that as maladapted social skills (which it is), but if\nyou want to recognise a good developer, this passion for what they\u2019re doing at\nthe expense of social smoothness is a very strong indicator. Can you get this\nguy to excitedly chat up a technology that he\u2019s using, for a whole half hour,\nwithout losing steam? Then you might be onto a winner.\n\n####\n\n#2 : Self-teaching and love of learning\n\nProgramming is the ultimate moving target. Not a year goes by without some new\ntechnology robbing an old, established standard blind and changing half the\ndevelopment universe. This is not to say that all good programmers pick up\nthese changes and ride the bleeding edge. However, there\u2019s a class of\nprogrammers that will never, ever pick up a new technology unless forced to,\nbecause they don\u2019t like learning new stuff. These programmers will typically\nhave learnt programming at university, and expect to get by on whatever skills\nthey picked up there, plus whatever courses their company is willing to send\nthem on.\n\nIf you\u2019re thinking of hiring someone as a programmer, and he ever utters the\nwords \u201cI can work with that, just send me on a training course for a week and\nI\u2019ll be good at it\u201d, don\u2019t hire that guy. A good programmer doesn\u2019t need a\ntraining course to learn a new technology. In fact, the great programmer will\nbe the one talking your ear off about a new technology that you haven\u2019t even\nheard of, explaining to you why you must use it in your business, even if none\nof your staff knows how to use it. Even if it\u2019s a technology he doesn\u2019t know\nhow to use yet.\n\n####\n\n#3 : Intelligence\n\nSome business people assume that lack of social tact and lack of intelligence\nare the same. Actually, intelligence has several facets, and emotional/social\nintelligence is only one of them. Good programmers aren\u2019t dumb. Ever. In fact,\ngood programmers are usually amongst the smartest people you know. Many of\nthem will actually have pretty good social skills too. The clich\u00e9 of the\nprogrammer who\u2019s incapable of having a conversation is just that - a clich\u00e9.\nI\u2019ve been to a few meetings of the London Ruby User Group and I can say that\nwith only a very few exceptions, most people there are smart, talkative,\nsociable, have varied interests, etc. You wouldn\u2019t look at them chattering\naway in the pub and think \u201cwhat a bunch of geeks!\u201d - at least until you\napproach a group and realise they\u2019re talking about the best way to design a\nRESTful application with a heavy UI frontend.\n\nThis doesn\u2019t mean that they\u2019ll all feel comfortable in every social context.\nBut it does mean that if the context is comfortable and non-threatening\nenough, you\u2019ll be able to have as great a conversation with them as you would\nwith the most \u201csocially enabled\u201d people (perhaps better, since most good\nprogrammers I know like their conversation to revolve around actually useful\ntopics, rather than just inane banter).\n\nDon\u2019t ever hire a dumb person thinking they\u2019re a good developer. They\u2019re not.\nIf you can\u2019t have a great conversation with them in a relaxed social context,\nthey\u2019re very likely not a good programmer. On the other hand, anyone who\u2019s\nclearly very smart at the very least has a strong potential to be a good or\ngreat programmer.\n\n####\n\n#4 : Hidden experience\n\nThis is correlated with the \u201cPassion\u201d point, but it is such a strong indicator\nthat I\u2019d like to emphasise it with its own point.\n\nI started programming when I was about 9, on a Commodore 64. I then migrated\nonto the PC, did some Pascal. When I was 14 I wrote a raycasting engine in C\nand Assembler, spent a large amount of time playing with cool graphic effects\nthat you could get your computer to do by messing directly with the video\ncard. This was what I call my \u201ccoccoon stage\u201d. When I entered that stage, I\nwas a mediocre programmer, and lacked the confidence to do anything really\ncomplicated. When I finished it, I had gained that confidence. I knew that I\ncould code pretty much anything so long as I put my mind to it.\n\nHas that ever appeared on my CV? Nope.\n\nI strongly believe that most good programmers will have a hidden iceberg or\ntwo like this that doesn\u2019t appear on their CV or profile. Something they think\nisn\u2019t really relevant, because it\u2019s not \u201cproper experience\u201d, but which\nactually represents an awesome accomplishment. A good question to ask a\npotential \u201cgood programmer\u201d in an interview would be \u201ccan you tell me about a\npersonal project - even or especially one that\u2019s completely irrelevant - that\nyou did in your spare time, and that\u2019s not on your CV?\u201d If they can\u2019t (unless\ntheir CV is 20 pages long), they\u2019re probably not a good programmer. Even a\nprogrammer with an exhaustive CV will have some significant projects that are\nmissing from there.\n\n####\n\n#5 : Variety of technologies\n\nThis one\u2019s pretty simple. Because of the love of learning and toying with new\ntechnologies that comes with the package of being a \u201cgood programmer\u201d, it\u2019s\ninevitable that any \u201cgood programmer\u201d over the age of 22 will be fluent in a\ndozen different technologies. They can\u2019t help it. Learning a new technology is\none of the most fun things a programmer with any passion can do. So they\u2019ll do\nit all the time, and accumulate a portfolio of things they\u2019ve \u201cplayed around\nwith\u201d. They may not be experts at all of them, but all decent programmers will\nbe fluent in a large inventory of unrelated technologies.\n\nThat \u201cunrelated\u201d bit is the subtle twist. Every half-decent java programmer\nwill be able to list a set of technologies like \u201cJava, J2EE, Ant, XML, SQL,\nHibernate, Spring, Struts, EJB, Shell scripting\u201d, etc.. But those are all part\nof the same technology stack, all directly related to each other. This is\npossibly hard to recognise for non-programmers, but it is possible to tell\nwhether their technology stack is varied by talking to them about it, and\nasking them how the different technologies they know relate to each other.\nOver-specialisation in a single technology stack is an indicator of a not-so-\ngood programmer.\n\n####\n\n#6 : Formal qualifications\n\nThis is more a of non-indicator than a counter-indicator. The key point to\noutline here is that formal qualifications don\u2019t mean squat when you\u2019re trying\nto recognise a good programmer. Many good programmers will have a degree in\nComputer Science. Many won\u2019t. Certifications, like MCSE or SCJP or the like,\ndon\u2019t mean anything either. These are designed to be accessible and desirable\nto all. The only thing they indicate is a certain level of knowledge of a\ntechnology. They\u2019re safeguards that allow technology recruitment people in\nlarge corporations to know \u201cok, this guy knows java, he\u2019s got a certification\nto prove it\u201d without having to interview them.\n\nIf you\u2019re hiring for a small business, or you need really smart developers for\na crack team that will implement agile development in your enterprise, you\nshould disregard most formal qualifications as noise. They really don\u2019t tell\nyou very much about whether the programmer is good. Similarly, disregard age.\nSome programmers are awesome at 18. Others are awesome at 40. You can\u2019t base\nyour decisions about programmer quality on age (though you might decide to\nhire people around a certain age to have a better fit in the company; please\ndo note that age discrimination is illegal in most countries!).\n\nAs a final note to this, in my experience most average or poor programmers\nstart programming at university, for their Computer Science course. Most good\nprogrammers started programming long before, and the degree was just a natural\ncontinuation of their hobby. If your potential programmer didn\u2019t do any\nprogramming before university, and all his experience starts when she got her\nfirst job, she\u2019s probably not a good programmer.\n\n###\n\nDisclaimer\n\nNone of the indicators above or below are sure-fire indicators. You will find\ngreat programmers who break some of those moulds. However, my view is, you\u2019ll\nrarely find a great programmer that breaks all of them. Similarly, you may\nfind poor programmers that meet (or appear to meet) some of these criteria.\nBut I do strongly believe that the more of these criteria a programmer meets,\nthe more likely they are to be one of those elusive \u201cgood programmers\u201d that,\nas a business guy, you need to partner with.\n\n###\n\nThe criteria in bullets\n\nSo, in summary, here are some indicators and counter-indicators that should\nhelp you recognise a good programmer.\n\nPositive indicators:\n\n  * Passionate about technology\n\n  * Programs as a hobby\n\n  * Will talk your ear off on a technical subject if encouraged\n\n  * Significant (and often numerous) personal side-projects over the years\n\n  * Learns new technologies on his/her own\n\n  * Opinionated about which technologies are better for various usages\n\n  * Very uncomfortable about the idea of working with a technology he doesn\u2019t believe to be \u201cright\u201d\n\n  * Clearly smart, can have great conversations on a variety of topics\n\n  * Started programming long before university/work\n\n  * Has some hidden \u201cicebergs\u201d, large personal projects under the CV radar\n\n  * Knowledge of a large variety of unrelated technologies (may not be on CV)\n\nNegative indicators:\n\n  * Programming is a day job\n\n  * Don\u2019t really want to \u201ctalk shop\u201d, even when encouraged to\n\n  * Learns new technologies in company-sponsored courses\n\n  * Happy to work with whatever technology you\u2019ve picked, \u201call technologies are good\u201d\n\n  * Doesn\u2019t seem too smart\n\n  * Started programming at university\n\n  * All programming experience is on the CV\n\n  * Focused mainly on one or two technology stacks (e.g. everything to do with developing a java application), with no experience outside of it\n\nI hope these help. Let me know below if you have any comments, or anything to\nadd to them!\n\nThanks for reading.\n\n### Subscribe to Morad\u2019s Substack\n\nBy Morad s \u00b7 Launched 5 minutes ago\n\nMy personal Substack\n\n1 Like\n\nShare this post\n\n#### How To Identify A Good Programmer\n\nmorads.substack.com\n\nShare\n\nComments\n\nNo posts\n\nReady for more?\n\n\u00a9 2024 Morad s\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
