{"aid": "40179610", "title": "Show HN: tRPC for Go", "url": "https://turborpc.github.io/", "domain": "turborpc.github.io", "votes": 1, "user": "ola", "posted_at": "2024-04-27 12:56:57", "comments": 0, "source_title": "TurboRPC: Run Fast, Move Fast, Beak Nothing", "source_text": "TurboRPC: Run Fast, Move Fast, Beak Nothing\n\nCombination of tRPC and net/rpc. Run Fast, Move Fast, Break Nothing.\n\nWrite Go methods, get a type safe client for your frontend.\n\nServices are just Go objects with methods on the form func (s Service)\nMethod(ctx context.Context, input Input) (Output, error).\n\nGithub repository\n\n## Example\n\n    \n    \n    package main import ( \"context\" \"net/http\" \"sync/atomic\" \"github.com/turborpc/turborpc\" ) type Counter atomic.Int64 func (c *Counter) Add(ctx context.Context, delta int64) (int64, error) { return (*atomic.Int64)(c).Add(delta), nil } func main() { rpc := turborpc.NewServer(turborpc.WithServerJavaScriptClient()) _ = rpc.Register(&Counter{}) http.Handle(\"/rpc\", rpc) http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(` <!DOCTYPE html> <html> <head> <title>Counter</title> <script src=\"/rpc\"></script> </head> <body> <strong id=\"count\"></strong> <button id=\"plus\">+</button> <button id=\"minus\">-</button> <script> const rpc = new Counter(\"/rpc\"); const setCount = (v) => document.getElementById(\"count\").innerText = v; document.getElementById(\"plus\").onclick = () => rpc.add(1).then(setCount); document.getElementById(\"minus\").onclick = () => rpc.add(-1).then(setCount); rpc.add(0).then(setCount); </script> </body> `)) }) http.ListenAndServe(\":3000\", nil) }\n\n## More examples\n\n", "frontpage": false}
