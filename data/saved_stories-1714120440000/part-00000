{"aid": "40165384", "title": "Service Workers are too hard to clean-up", "url": "https://github.com/w3c/ServiceWorker/issues/1695", "domain": "github.com/w3c", "votes": 1, "user": "bluehex", "posted_at": "2024-04-26 02:32:54", "comments": 0, "source_title": "Service Workers are too hard to clean-up \u00b7 Issue #1695 \u00b7 w3c/ServiceWorker", "source_text": "Service Workers are too hard to clean-up \u00b7 Issue #1695 \u00b7 w3c/ServiceWorker \u00b7\nGitHub\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nw3c / ServiceWorker Public\n\n  * Notifications\n  * Fork 313\n  * Star 3.6k\n\nJump to bottom\n\n# Service Workers are too hard to clean-up #1695\n\nOpen\n\nHornwitser opened this issue Oct 30, 2023 \u00b7 3 comments\n\nOpen\n\n# Service Workers are too hard to clean-up #1695\n\nHornwitser opened this issue Oct 30, 2023 \u00b7 3 comments\n\n## Comments\n\n###\n\nHornwitser commented Oct 30, 2023\n\nI have noticed an upwards trend in the number of websites that are broken for\nme due to service workers being published on them and then left to rot in my\nbrowser's caches. A while ago I ran a query on the status codes returned by\nover 400 service workers registered in my Edge browser and got the following\nHTTP response codes:| HTTP Code| Count  \n---|---  \nno response| 8  \n200| 336  \n301| 15  \n302| 2  \n400| 5  \n403| 17  \n404| 29  \n418| 1  \n500| 1  \n502| 1  \n504| 1  \nTotal| 416  \n  \n51 out of 416 service workers registered in my browser are registered on\nlocations that now return 4xx response codes indicating the client made an\nerror making the request. The failure mode from leaving a stale service worker\non a site ranges from giving stale data to the website being completely\ninaccessible.\n\nFor example when I want to go buy tickets from my reginal train company sj.no\nI'm greeted by this\n\nIf you compare this to what the live site actually looks like you may notice\nit is very different. The ticket ordering does not work, and pretty much every\npage you can navigate to is not functional.\n\n## Correctly removing Service Workers is far too difficult\n\nService workers once registered lives on indefinitely, and will not go away\nuntil explicitly removed. However removing them is deceptively hard. If you\ntry to search for how to uninstall a service worker you'll get stack overflow\nquestions filled with wrong answers.\n\nJust to illustrate how difficult it is, going back to my regional train\nprovider sj.no they actually tried to remove their stale service worker by\nhosting a new at the same resources location as the old one that attempts to\nremove the old one.\n\n    \n    \n    // Content of https://www.sj.no/service-worker.js // Deregister old PWAs console.debug(\"Deregistering service workers...\"); navigator.serviceWorker.getRegistrations().then(workers => { console.debug(workers); workers.forEach(worker => { console.debug(\"Deregistered service worker\"); worker.unregister(); }); });\n\nUnfortunately this was probably copied and pasted from misinformation and\ndoesn't work. Edge throws the following error when it is loaded, and the old\none is therefore never removed.\n\n    \n    \n    service-worker.js:3 Uncaught TypeError: Cannot read properties of undefined (reading 'getRegistrations') at service-worker.js:3:25 (anonymous) @ service-worker.js:3\n\nIt should not be this hard to remove a service worker. HTTP's 404 status code\nmeans the resource does not exist. What rationale does the Service Workers\nhave to stay alive after the origin server says it no longer exists? How are\nHTTP server operators supposed to know that they can't remove a service\nworker, instead they need to replace it with a self destructing service worked\nand host that forever.\n\nWhat if you take over a domain that previously hosted service workers. Are you\nsupposed to just know that you need to configure your webserver to reply to\nall requests with a Service-Worker header present with a self destructing\nService Worker?\n\nViolating HTTP semantics for the sake of some sort of longevity that is now\ndemonstrably breaking real world websites is not a good way for this to work.\nI see no sensible reason for why a Service Worker should keep on living if the\norigin server replies with a 4xx status code when it's updated. Similarly if\nduring an update the newly fetched service worker throws an error during\nexecution this should also be taken as a signal to remove the existing Server\nWorker.\n\n## Diagnosing a broken Service Worker is impossible for an end user\n\nImagine you're an end user that has no idea what a Service Worker is and the\nwebpage you need to interact with is broken due to a stale Service Worker. You\nreload the page. You Ctrl+Reload the page. You reboot your computer. You even\nreinstall your browser (which then behind the scenes reused your existing\nprofile and caches). But no matter what you do the webpage seemingly just\ndoesn't want to work or your computer.\n\nYou then contact support who also have no idea about Service Workers and they\ntest the site on their end and it works fine, and despite going through a\nbunch of steps the website is still broken for you and support can't help you.\nSure a competent web developer can say you can easily remove the service\nworker by right clicking on the web page, select inspect, go to the\napplication pane, click on the Service workers section and then click on\nunregister. But what if you're on a phone or a tablet?\n\n## Conclusion\n\nThe difficulty in correctly using Service Workers are leaving real word\nwebsites permanently broken in ways that are difficult for developers, site\noperators and end users to diagnose and correct. If not even Web Framework\ndevelopers can get this right, (as is the case for svelte.dev) what hope does\nregular web developers have in getting it right?\n\nFailing to properly implementing Service Workers should result in the browser\nremoving the service worker rather than the website becoming inoperable. And\nremoving a Service Worker should be as simple as removing the service worker\nscript for the server. Requiring server operators to host a special self\ndestructing service worker until the end of time in order for returning users\nto not end up with a permanently broken website is not an acceptable way for\nthis technology to work.  \n  \nThe text was updated successfully, but these errors were encountered:  \n  \nwanderview changed the title Service Workers are an abject failure Service\nWorkers are too hard to clean-up Oct 30, 2023\n\nMember\n\n###\n\nwanderview commented Oct 30, 2023\n\nI think there is reasonable feedback here on the difficulty of cleaning up\nservice workers that are no longer wanted, so I changed the title to clarify\nthat.  \n---  \n  \n###\n\nasutherland commented Mar 12, 2024\n\nThere was some long-running discussion of this issue in #204 where #204\n(comment) is the most recent decision that was made as a result of a F2F\ndiscussion.The documented decision there was made on the basis of 2 very large\nsites having occasional transient problems where it would be undesirable to\nunregister the ServiceWorker due to a configuration hiccup that served a 4xx\nresponse, but the concern does seem universal. I think that's compatible with\nthe observation on this issue that persistent 4xx responses do happen and are\nreasonable to handle. Clear-site-data has been mentioned in this context and\nis useful for sites that still exist, but it's still a big hammer[1] and not\nan option for expired domains, etc.If we were to spec a solution to this, we\ncould potentially do something like:\n\n  * Each registration would maintain a \"failed update count\" that is incremented whenever we perform an update check and the registration was stale or some other mechanism to ensure we only increment the counter at most once a day.\n  * If the counter reaches a threshold, we unregister the registration. This may trigger cleanup for things associated with the registration, but would not touch the default bucket. (Or the storage bucket the SW is associated with; the semantics described in the buckets explain's Storage buckets and service workers section only defines a relationship to clear the SW when clearing the data, not the reverse, although honestly that could be nice. But at least if the registrations were removed due to no longer existing, that would make the bucket more subject to data clearing for lack of use.\n  * We could optionally let sites specify the desired number of failed updates before removal, but would have a default if not specified, allowing existing stale registrations to be removed by the spec and without requiring opt-in. I think it would be reasonable to also establish an upper bound on this value, although I would not be shocked to find there are people who would like to enable sneakernet-type use cases where the SW only updates on private networks and is otherwise inaccessible. (Although that raises questions of how such an origin could be a secure context.)\n\n1: In particular, there isn't a way to express \"clear the site data if the\nuser's last visit/data mutation is older than date Y when we overhauled the\nsite. It had been proposed in passing but there is nothing in the storage spec\nat this time to enable such functionality.  \n---  \n  \n###\n\nZipdox2 commented Mar 13, 2024\n\nI recently had an incident where a Gatsby site ran by my friend still seemed\nto work despite it being offline and the domain having expired a long time\nago. This caused a lot of confusion for my friend and I. It took some\ninvestigation and using Wireshark before I figured out that it was a service\nworker serving the site. It's understandable that this would be the case if I\nwas offline, but I think the spec should have some kind of mechanism for\ndetecting the site being gone.  \n---  \n  \nSign up for free to join this conversation on GitHub. Already have an account?\nSign in to comment\n\nLabels\n\nNone yet\n\n4 participants\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
