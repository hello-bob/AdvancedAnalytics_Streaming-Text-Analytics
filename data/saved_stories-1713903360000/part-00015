{"aid": "40131870", "title": "HTTP and WebSocket Server Run from Chrome Using Direct Sockets TCPServerSocket", "url": "https://github.com/guest271314/direct-sockets-http-ws-server", "domain": "github.com/guest271314", "votes": 2, "user": "thunderbong", "posted_at": "2024-04-23 13:41:54", "comments": 0, "source_title": "GitHub - guest271314/direct-sockets-http-ws-server: HTTP and WebSocket server run from Chrome browser using Direct Sockets TCPServerSocket", "source_text": "GitHub - guest271314/direct-sockets-http-ws-server: HTTP and WebSocket server\nrun from Chrome browser using Direct Sockets TCPServerSocket\n\n## Navigation Menu\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nguest271314 / direct-sockets-http-ws-server Public\n\n  * Notifications\n  * Fork 0\n  * Star 2\n\nHTTP and WebSocket server run from Chrome browser using Direct Sockets\nTCPServerSocket\n\n### License\n\nWTFPL license\n\n2 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# guest271314/direct-sockets-http-ws-server\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nguest271314Update README.mdApr 23, 20242e1fc0b \u00b7 Apr 23, 2024Apr 23, 2024\n\n## History\n\n11 Commits  \n  \n### assests\n\n|\n\n### assests\n\n| Update| Apr 23, 2024  \n  \n### examples\n\n|\n\n### examples\n\n| Update| Apr 23, 2024  \n  \n### shared\n\n|\n\n### shared\n\n| Update| Apr 23, 2024  \n  \n### src\n\n|\n\n### src\n\n| Update| Apr 23, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Create LICENSE| Apr 23, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 23, 2024  \n  \n### deno_install.js\n\n|\n\n### deno_install.js\n\n| Update| Apr 23, 2024  \n  \n### generateWebCryptoKeys.js\n\n|\n\n### generateWebCryptoKeys.js\n\n| Update| Apr 23, 2024  \n  \n### import-map.json\n\n|\n\n### import-map.json\n\n| Update| Apr 23, 2024  \n  \n### index.js\n\n|\n\n### index.js\n\n| Update| Apr 23, 2024  \n  \n### install_from_github.sh\n\n|\n\n### install_from_github.sh\n\n| Update| Apr 23, 2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| Update| Apr 23, 2024  \n  \n### wbn-bundle.js\n\n|\n\n### wbn-bundle.js\n\n| Update| Apr 23, 2024  \n  \n## Repository files navigation\n\n## direct-sockets-http-ws-server\n\nHTTP and WebSocket server run from Chromium and Chrome browsers using Direct\nSockets TCPServerSocket.\n\n## Synopsis\n\nWICG Direct Sockets specifies an API that provides TCPSocket, UDPSocket, and\nTCPServerSocket. Prior art: chrome.socket.\n\nIn Chromium based browsers, for example Chrome, this capability is exposed in\nIsolated Web Apps (IWA).\n\nPreviously we have created an IWA that we launch from arbitrary Web sites with\nopen(), including SDP from a RTCDataChannel in query string of the URL,\ncreated in the Web page, and exchanged signals with the RTCDataChannel created\nin the IWA window using WICG File System Access for the ability to send data\nto the IWA which is then passed to a TCPSocket instance for that sends the\ndata to a Node.js, Deno, Bun, or txiki.js TCP socket server for processing,\nthen sends the processed data back to the Web page using RTCDataChannel in\neach window, see telnet-client (user-defined-tcpsocket-controller-web-api\nbranch), which is a fork of telnet-client.\n\nNow we will use the browser itself as a HTTP and WebSocket server over the\nTCPServerSocket interface.\n\n### HTTP server\n\n> Basic aspects of HTTP\n>\n> HTTP is simple\n>\n> HTTP is generally designed to be simple and human-readable, even with the\n> added complexity introduced in HTTP/2 by encapsulating HTTP messages into\n> frames. HTTP messages can be read and understood by humans, providing easier\n> testing for developers, and reduced complexity for newcomers.\n\nWe'll also note this claim on the MDN Web Docs page from Client: the user-\nagent\n\n> The browser is always the entity initiating the request. It is never the\n> server (though some mechanisms have been added over the years to simulate\n> server-initiated messages).\n\nis not technically accurate, as we'll demonstrate below, in code.\n\nSome further reading about HTTP can be found here HTTP - Hypertext Transfer\nProtocol.\n\nThe reason for and use of the Access-Control-Request-Private-Network and\nAccess-Control-Allow-Private-Network headers can be found here Private Network\nAccess: introducing preflights.\n\nAn article and example of a basic HTTP server with comments explaining what is\ngoing on, including comments in the code, written in C, can be found here\nMaking a simple HTTP webserver in C. We have previously used that example to\ncreate a simple HTTP Web server for QuickJS, which does not include a built-in\nWeb server in the compiled qjs executable, see webserver-c (quickjs-webserver\nbranch).\n\n### WebSocket server\n\nFor the WebSocket implementation WebSocket - binary broadcast example (pure\nNodeJs implementation without any dependency) is used.\n\n### Isolated Web App and Signed Web Bundle\n\n  * Substitute Web Cryptography API (wbn-sign-webcrypto) for node:crypto implementation of Ed25519 algorithm\n  * Install and run same JavaScript source code in different JavaScript runtimes, e.g., node, deno, bun\n\n### TODO\n\n  * Create valid close frame (server to client) for WebSocket server; currently we abort the request in the server with AbortController when the WebSocket client closes the connection\n  * TLS and HTTP/2 support\n  * Create Signed Web Bundle and Isolated Web App in the browser\n\n## Building\n\n### Fetch dependencies\n\nCreates a node_modules folder containing dependencies\n\n    \n    \n    bun install\n\nor\n\n    \n    \n    npm install\n\nor\n\n    \n    \n    deno run -A deno_install.js\n\n### Signed Web Bundle/Isolated Web App source files\n\nEntry point is assets directory which contains index.html, script.js, .well-\nknown directory with manifest.webmanifest, and any other scripts or resources\nto be bundled.\n\n### Generate private and public keys, write to file system\n\nThis only has to be done once. generateWebCryptoKeys.js can be run with node,\ndeno, or bun.\n\n    \n    \n    node --experimental-default-type=module generateWebCryptoKeys.js\n\n### Build the Signed Web Bundle and Isolated Web App\n\nWrite signed.swbn to current directory\n\nNode.js\n\n    \n    \n    node --experimental-default-type=module index.js\n\nBun\n\n    \n    \n    bun run index.js\n\nDeno\n\n    \n    \n    deno run --unstable-byonm -A index.js\n\n#### Dynamically fetch dependencies without creating a node_modules folder and\ncreate the .swbn file and IWA.\n\n    \n    \n    deno run -A --unstable-byonm --import-map=import-map.json index.js\n\n### Build/rebuild wbn-bundle.js from src/index.ts with bun\n\n    \n    \n    try { console.log( await Bun.build({ entrypoints: [\"./src/index.ts\"], outdir: \".\", sourcemap: \"external\", splitting: false, target: \"bun\" // or \"node\" format: \"esm\", // minify: true, external: [\"mime\", \"base32-encode\", \"wbn-sign-webcrypto\", \"wbn\"], naming: { entry: \"[dir]/wbn-bundle.[ext]\", }, }), ); } catch (e) { console.log(e); }\n\n## Install Isolated Web App using Signed Web Bundle\n\nNavigate to chrome://web-app-internals/, on the line beginning with Install\nIWA from Signed Web Bundle: click Select file... and select signed.swbn.\n\n## Usage\n\nSee https.js and ws.js in examples directory.\n\nWe open the IWA window from arbitrary Web sites in DevTools console or\nSnippets with\n\n    \n    \n    var iwa = open(\"isolated-app://<IWA_ID>\");\n\n### HTTP and WebSocket server\n\n    \n    \n    const socket = new TCPServerSocket(\"0.0.0.0\", { localPort: 8080, }); const { readable: server, localAddress, localPort, } = await socket.opened; console.log({ server }); // TODO: Handle multiple connections await server.pipeTo( new WritableStream({ async write(connection) { const { readable: client, writable, remoteAddress, remotePort, } = await connection.opened; console.log({ connection }); const writer = writable.getWriter(); console.log({ remoteAddress, remotePort, }); const abortable = new AbortController(); const { signal } = abortable; // Text streaming // .pipeThrough(new TextDecoderStream()) await client.pipeTo( new WritableStream({ start(controller) { console.log(controller); }, async write(r, controller) { const request = decoder.decode(r); console.log(request); // HTTP and WebSocket request and response logic // TODO: Create and send valid WebSocket close frame to client }, close: () => { console.log(\"Client closed\"); }, abort(reason) { console.log(reason); }, }) , {signal}).catch(console.warn); }, close() { console.log(\"Host closed\"); }, abort(reason) { console.log(\"Host aborted\", reason); }, }), ).then(() => console.log(\"Server closed\")).catch(console.warn); };\n\n### HTTP client\n\nUsing WHATWG Fetch\n\n    \n    \n    fetch(\"http://0.0.0.0:8080\", { method: \"post\", body: \"test\", headers: { \"Access-Control-Request-Private-Network\": true, }, }) .then((r) => r.text()).then((text) => console.log({ text, }) ).catch(console.error);\n\n### WebSocket client\n\n    \n    \n    var wss = new WebSocketStream(\"ws://0.0.0.0:8080\"); console.log(wss); wss.closed.catch((e) => {}); wss.opened.catch((e) => {}); var { readable, writable, } = await wss.opened.catch(console.error); var writer = writable.getWriter(); var abortable = new AbortController(); var { signal, } = abortable; // .pipeThrough(new TextDecoderStream()) var pipe = readable.pipeTo( new WritableStream({ start(c) { console.log(\"Start\", c); }, async write(v) { console.log(v, decoder.decode(v)); }, close() { console.log(\"Socket closed\"); }, abort(reason) { // console.log({ reason }); }, }), { signal, }, ).then(() => ({ done: true, e: null })).catch((e) => ({ done: true, e })); var encoder = new TextEncoder(); var decoder = new TextDecoder(); var encode = (text) => encoder.encode(text); await writer.write(encode(\"X\")); // Later on close the WebSocketStream connection await writer.close().catch(() => pipe).then(console.log);\n\n## License\n\nDo What the Fuck You Want to Public License WTFPLv2\n\n## About\n\nHTTP and WebSocket server run from Chrome browser using Direct Sockets\nTCPServerSocket\n\n### Topics\n\nchrome tcp websocket-server chromium http-server isolated-web-apps direct-\nsockets\n\n### Resources\n\nReadme\n\n### License\n\nWTFPL license\n\nActivity\n\n### Stars\n\n2 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * JavaScript 84.8%\n  * TypeScript 14.7%\n  * Other 0.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
