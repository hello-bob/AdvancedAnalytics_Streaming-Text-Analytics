{"aid": "40167730", "title": "\"90% of Java services have critical or security vulnerabilities\"", "url": "https://vived.substack.com/p/90-of-java-services-have-critical", "domain": "vived.substack.com", "votes": 3, "user": "mihau", "posted_at": "2024-04-26 10:39:23", "comments": 0, "source_title": "\"90% of Java services have critical or severe security vulnerabilities\"... or about the quirks of security reporting \u2013 JVM Weekly vol. 80", "source_text": "\"90% of Java services have critical or severe security vulnerabilities\"... or\nabout the quirks of security reporting \u2013 JVM Weekly vol. 80\n\nShare this post\n\n#### \"90% of Java services have critical or severe security\nvulnerabilities\"... or about the quirks of security reporting \u2013 JVM Weekly\nvol. 80\n\nvived.substack.com\n\n#### Discover more from JVM Weekly\n\nFrom the latest updates in JVM languages like Java, Kotlin, and Scala to\nemerging technologies like GraalVM and Quarkus, this newsletter covers a wide\nrange of topics that are of interest to developers and tech enthusiasts.\n\nOver 2,000 subscribers\n\nContinue reading\n\nSign in\n\n# \"90% of Java services have critical or severe security vulnerabilities\"...\nor about the quirks of security reporting \u2013 JVM Weekly vol. 80\n\n### Today, only one topic, but that's because I wanted to share my broader\nthoughts on the latest Datadog report.\n\nArtur Skowronski\n\nApr 25, 2024\n\n3\n\nShare this post\n\n#### \"90% of Java services have critical or severe security\nvulnerabilities\"... or about the quirks of security reporting \u2013 JVM Weekly\nvol. 80\n\nvived.substack.com\n\nShare\n\nThis time it's going to be a bit philosophical. As you've probably guessed,\nwhen choosing topics for each successive edition I wade through a mass of\nheadlines and topics to pick realistically what's most interesting from my\nperspective. That's why when I saw that The State of DevSecOps report by\nDatadog had a lot of space devoted to Java, I decided I needed to get better\nacquainted with the post. Security is an important thing, so let's see what\nthey've unearthed there. And what greeted me?\n\nAt this point, I concluded that I no longer understand the world. Either we\nhave a total apocalypse when it comes to software and software supply chain,\nor there is something wrong with these numbers. Because you know - since 90%\nof Java services have REAL security vulnerabilities, given that these days any\nkid with a ChatGPT can supposedly become a hacker, this should be gone in this\nmajority of businesses, right? That's why I figured I'd use this situation to\nclarify things a bit, as it fits perfectly into the wider discussion on\nthreats and vulnerabilities reporting.\n\nThanks for reading JVM Weekly! Subscribe for free to receive new posts and\nsupport my work.\n\nWell, but what does The State of DevSecOps really tell us? The report, based\non telemetry data collected in bulk by DataDog, summarises (among other\nthings) the number of applications that have dangerous vulnerabilities, based\non the Known Exploited Vulnerabilities (KEV) directory maintained by the US\nCyber Security and Infrastructure Security Agency (CISA). This catalog, which\nis continuously updated, contains information about vulnerabilities actively\nused by cybercriminals to compromise systems. Analysis of the data from KEV\nshows that Java services are over-represented relative to other programming\nlanguages, with 55% of Java services affected, compared to only 7% of services\nbuilt using other technologies. I honestly don't know where the 90% figure in\nthe graph came from - digging into the methodologies, it probably results from\nthe Software Composition Analysis mentioned in the methodology, Datadog\nApplication Security Management functionality.\n\nThe State of DevSecOps report delves into why vulnerabilities in Java\nfrequently stem from indirect dependencies. These are third-party libraries\nthat come bundled with the dependencies the application use, even though\nthey're not directly added by the developers themselves. This topic is part of\nthe broader Software Supply Chain conversation that has gained attention in\nrecent years. Indirect dependencies are the main source of third-party\ndependency vulnerabilities, complicating the process of identifying and\nmanaging potential security risks. In this regard, Java lags behind almost\nevery other compared ecosystem. However, if you read into the report's\nmethodology, there is a small quibble.\n\nAll the apps are sick, the Java ones have just been better diagnosed\n\nThe article highlights the importance of thoroughly analyzing the entire\ndependency tree, including both direct and indirect dependencies, when\nchecking applications for vulnerabilities. It's wise advice to be fully aware\nof the components your project relies on. Additionally, it introduces tools\nlike Scorecard from OpenSSF, which evaluates the health of open-source\nlibraries, providing us with a wealth of valuable information.\n\nAnd this is all good advice, but...\n\nThe KEV, which is grounded in the CVSS framework, offers a standardized\napproach for evaluating the severity of IT security vulnerabilities. CVSS\nassigns a numerical score ranging from 0 to 10 to each vulnerability. This\nscore is determined by considering various factors, including the complexity\nof the exploit, and its impact on confidentiality, system integrity, and\navailability, among others.\n\nThe whole focus is therefore on assessing the so-called 'worst-case risk' -\nthe risk in the worst possible scenario. This means that the prioritization of\nvulnerabilities in KEV is based on the assumption that if a vulnerability can\nbe used for serious attacks, such as remote code execution or full system\ntakeover, it is treated with the highest priority. Prioritisation therefore\ntakes into account the potential maximum impact that a vulnerability could\ncause, regardless of the current circumstances or the specifics of the\nenvironment that could reduce this risk in a particular case.\n\nThis conservative approach to risk assessment is critical to successfully\ndefending against the most disruptive attacks, as it allows organizations to\nprepare for the worst, even though actual exploitation conditions may be less\ncritical. By focusing on the worst-case scenario, KEV helps identify and\nprioritize vulnerabilities that have the greatest potential impact on overall\nsecurity.\n\nWell, here's the (Data)dog buried and a topic that has been bothering me for a\nlong time. Remember December 2021, when the entire IT world was patching the\nLog4Shell vulnerability that was about to threaten the entire global\ninfrastructure? Back then, researchers were already reporting that 93% of\ncloud solutions could be vulnerable, and last time the White House mentioned\nit in its report, citing an example of a dangerous vulnerability from recent\nyears. And while we did indeed avoid a dangerous situation then thanks to\ncollective action, a few spectacular incidents happened along the way. More\nrecently, we also completely accidentally avoided a similarly threatening\nsituation with the xz library - a truly fascinating story.\n\nHowever, I don't know about you, but when I hear that 90% of applications have\na serious attack vector (although as I wrote, when you look at it better it's\nmore like 55%, which is still some cosmic number), it reads downright\nunrealistic. And that's probably why more and more in the security community\n(and as I'm not a Security Engineer on the subject, I've deliberately bounced\nthese thoughts off the experts with a request for proofreading) people are\ntalking about the problems with CVSS, coming up with alternative metrics like\nVISS (Vulnerability Impact Scoring System) from Zoom or EPSS (Exploit\nPrediction Scoring System). Even though the aforementioned Java\nvulnerabilities are indeed dangerous according to the EPSS, and even though\nDataDog itself warns of the deceptiveness of the \"criticality\" of individual\nthreats, it does so only after first scaring everyone with twisted numbers. On\ntop of this, vulnerabilities in the languages and libraries themselves are of\na different nature than vulnerabilities in, for example, a network device, as\nthey are much harder to get at, as few interfaces are exposed directly to the\ninternet. And the question is whether it is not worth emphasizing more clearly\nthat a vulnerability in a component does not mean a vulnerability in an\napplication - because the function may not be used and/or there is no easy\nexploitation path.\n\nAnd to be clear, I'm not writing this to downplay the security risk of\nvulnerabilities (and yes the wider business will be doing just that, even\nwithout me adding stones to the garden). What I'm wondering about is whether\nwe're simply doing ourselves a disservice with such flashy headlines and they\njust put people to sleep more than they realistically translate into raising\nawareness of the organization. The fact is that most of the people to whom the\narticle may reach do not know how to understand the terms used in it, making\nit easy to pick the wrong targets - such as eliminating Java (well, because\nit's dangerous) or investing in even better vulnerability scanners (to detect\neven more vulnerabilities, in large enterprises, they can run into the\nthousands).\n\nThanks to my daughter, I am rediscovering the wisdom contained in old fairy\ntales, and really old ones at that, because we are talking about Aesop here.\nIn his The Boy Who Cried Wolf, where the eponymous Boy repeatedly gave false\nalarms about a wolf attack, and when it appeared, no one believed him and came\nto his aid. I think the analogy here is clear.\n\nThanks for reading JVM Weekly! Subscribe for free to receive new posts and\nsupport my work.\n\n3 Likes\n\n3\n\nShare this post\n\n#### \"90% of Java services have critical or severe security\nvulnerabilities\"... or about the quirks of security reporting \u2013 JVM Weekly\nvol. 80\n\nvived.substack.com\n\nShare\n\nComments\n\nThe compact overview of JDK 21's \"frozen\" feature list - JVM Weekly vol. 46\n\nToday's main topic is the \"freezing\" of the JEP list in JDK 21. In addition to\nthat, however, we will also talk about Nulls in Valhalla. And finally...\n\nJun 9, 2023 \u2022\n\nArtur Skowronski\n\n4\n\nShare this post\n\n#### The compact overview of JDK 21's \"frozen\" feature list - JVM Weekly vol.\n46\n\nvived.substack.com\n\nEverything you might have missed in Java in 2022 - JVM Weekly #28\n\nAs 2023 has begun, I decided to devote this year's first edition to a summary\nof what happened in 2022.\n\nJan 5, 2023 \u2022\n\nArtur Skowronski\n\n6\n\nShare this post\n\n#### Everything you might have missed in Java in 2022 - JVM Weekly #28\n\nvived.substack.com\n\n3\n\nEverything you might have missed in Java in 2023 \u2013 JVM Weekly vol. 66\n\nWelcome to 2024 \ud83e\udd42! But before we move forward, let\u2019s recall with historical\ndiligence what happened in 2023!\n\nJan 4 \u2022\n\nArtur Skowronski\n\n10\n\nShare this post\n\n#### Everything you might have missed in Java in 2023 \u2013 JVM Weekly vol. 66\n\nvived.substack.com\n\nReady for more?\n\n\u00a9 2024 Artur Skowronski\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
