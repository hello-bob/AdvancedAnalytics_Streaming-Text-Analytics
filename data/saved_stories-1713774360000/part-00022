{"aid": "40109326", "title": "How to generate color palettes for design systems", "url": "https://matthewstrom.com/writing/generating-color-palettes/", "domain": "matthewstrom.com", "votes": 1, "user": "spacebuffer", "posted_at": "2024-04-21 21:17:12", "comments": 0, "source_title": "How to generate color palettes for design systems", "source_text": "How to generate color palettes for design systems || Matthew Str\u00f6m, designer-\nleader\n\n# How to generate color palettes for design systems\n\nApril 20, 2024 \u00b7 46 min read\n\nIt used to be easy to pick colors for design systems. Years ago, you could\npick a handful of colors to match your brand\u2019s ethos, or start with an off-\nthe-shelf palette (remember flatuicolors.com?). Each hue and shade served a\npurpose, and usually had a quirky name like \u201cidea yellow\u201d or \u201cinnovation\nblue\u201d. This hands-on approach allowed for control and creativity, resulting in\ncolor schemes that could convey any mood or style.\n\nBut as design systems have grown to keep up with ever-expanding software\nneeds, the demands on color palette have grown exponentially too. Modern\nsoftware needs accessibility, adaptability, and consistency across dozens of\ndevices, themes, and contexts. Picking colors by hand is practically\nimpossible.\n\nThis is a familiar problem to the Stripe design team. In \u201cDesigning accessible\ncolor systems,\u201d Daryl Koopersmith and Wilson Miner presented Stripe\u2019s\napproach: using perceptually uniform color spaces to create aesthetically\npleasing and accessible systems. Their method offered a new approach to\nselection to enhance beauty and usability, grounded in scientific\nunderstanding of human vision.\n\nIn the four years since that post, Stripe has stretched those colors to the\nlimit. The design system\u2019s resilience through massive growth is a testament to\nthe team\u2019s original approach, but last year we started to see the need for a\nmore flexible, scalable, and inclusive color system. This meant both an\nexpansion of our color palette and a rethinking of how we generate and apply\nthese colors to accommodate our still-growing products.\n\nThis essay will take you through my attempts to solve these problems. Through\nthis process, I\u2019ve created a tool for generating expressive, functional, and\naccessible color systems for any design system. I\u2019ll share the full code of my\nsolution at the end of the essay; it represents not just a technical solution\nbut a philosophical shift in how we think about color in design systems,\nemphasizing the balance between creativity and inclusivity.\n\n## Why don\u2019t the existing tools work?\n\nIn the past few years, I\u2019ve come across dozens of tools that promise to\ngenerate color palettes for design systems. Some are simple, like Adobe Color,\nwhich generates color palettes based on a single input color, or even an\nimage. Others are more complex, like Colorbox, which generates color scales\nbased on a long list of parameters, easing curves, and input hues.\n\nBut I\u2019ve found that each of these tools has critical limitations. Complex\ntools like Colorbox or color x color allow for a high degree of customization,\nbut they require a lot of manual input and don\u2019t provide guidelines for\naccessibility. Simple tools like Adobe\u2019s Color and Leonardo provide more\nconstraints and accessibility features, but they does so at the expense of\nflexibility and extensibility.\n\nNone of the tools I\u2019ve found can integrate tightly with an existing design\nsystem; all are simply apps that generate an initial set of colors. None can\nrespond to the unique constraints of your design system, or adapt as you add\nmore themes, modes, or components.\n\nThat\u2019s why I ended up going back to first principles, and decided to build up\na framework that can be adapted to any codebase, design tool, or end user\ninterface.\n\n## So what makes a good color palette?\n\nTo build palettes from first principles, we need a strong conceptual\nfoundation. A great color palette is like a Swiss Army knife, built to address\na wide array of needs. But that same flexibility can make the system unwieldy\nand clunky. Through years of working on design systems, two principles have\nemerged as a constant benchmark for quality color palettes: utility and\nconsistency.\n\nA color palette with high utility is vital for a robust design system,\nencompassing both adaptability and functionality. It should offer a wide array\nof shades and hues to cater to diverse use cases, such as status changes\u2014reds\nfor errors, greens for successes, and yellows for warnings\u2014and interaction\nstates like hovering, disabled, or active selections. It\u2019s also essential for\nsignifying actionable items like links and buttons. Beyond functionality, an\nadaptable palette enables smooth transitions between light, dark, and high\ncontrast modes, supporting the evolution of your product and differing brand\nexpressions. This ensures that your user interfaces remain consistent and\nrecognizable across various platforms and usage contexts. Moreover, an\nadaptable palette underscores a commitment to accessibility\u2014it should provide\naccessible contrast ratios across all components, accommodating users with\nvisual impairments, and offer high-contrast modes that enhance visibility and\nfunctionality without sacrificing style.\n\nConsistency is another crucial aspect of a well-designed color palette.\nDespite the diverse range of components and their variants, a consistent\npalette maintains a coherent visual language throughout the system. This\ncoherence ensures that elements like badges retain a consistent visual weight,\navoiding misleading emphasis, and the relative contrast of components remains\nbalanced between dark and light modes. This consistency helps preserve clarity\nand hierarchy, further enhancing the user experience and the overall\naesthetics of the design system.\n\nAs you\u2019ll see, even simple questions about these goals reveals a deep rabbit\nhole of possible solutions.\n\n### Through the looking glass: perceptual uniformity\n\nThe principles of utility and consistency make selecting a color palette more\ncomplex. There\u2019s a question at the heart of both constraints: what makes two\ncolors look different? We have an intuitive sense that yellow and orange are\nmore similar than green and blue, but can we prove it objectively? Scientists\nand artists have spent the last decade puzzling this out, and their answer is\nthe concept of perceptual uniformity.\n\nPerceptual uniformity is rooted in how our eyes work. Humans see colors\nbecause of the interaction between wavelengths of light and cells in our eyes.\nIn 1850, before we could look at cells under a microscope, scientist Hermann\nvon Helmholtz theorized that there were three color vision cells (now known as\ncones) for blue, green, and red light.\n\nThomas Young and Hermann von Helmholtz assumed that the eye\u2019s retina consists\nof three different kinds of light receptors for red, green and blue. Public\nDomain via Wikipedia\n\nMost modern screens depend on this century-old theory, mixing red, green, and\nblue light to produce colors. Every combination of these colors produces a\ndistinct one; 10% red, 50% green, and 25% blue light create the cartoon green\nof the Simpson\u2019s yard. 75% red, 85% green, and 95% blue is the blindingly pale\nblue of the snow in Game of Thrones.\n\nVon Helmholtz was amazingly close to the truth, but until 1983, we didn\u2019t have\na full understanding of the exact way that each cell in our eyes responds to\nlight. While it\u2019s true that we have three kinds of color vision cells, and\nthat each responds strongly to either red, green, or blue light, the full\nmechanism of color vision is much more nuanced. So, while it\u2019s technologically\nsimple to mix red, green, and blue lights to reproduce color, the red, green,\nand blue coordinate system \u2014 the RGB color space \u2014 isn\u2019t perceptually uniform.\n\n### Picking the right color space\n\nDespite not being perceptually uniform, many design systems still use RGB\ncolor space (and its derivative, HSL space) for picking colors. But over the\npast century, scientists and artists have invented more useful ways to map the\nlandscape of color. Whether it\u2019s capturing skin tones accurately in\nphotographs or creating smooth gradients for data visualization, these\ndifferent color spaces give us perceptually uniform paths through a gamut.\n\nLab is an example of a perceptually uniform color space. Developed by the\nInternational Commission on Illumination, or CIE, the Lab color space is\ndesigned to be device-independent, encompassing all perceivable colors. Its\nthree dimensions depict lightness (L), and color opponents (a and b) \u2014 the\nlatter two varying between green-red and blue-yellow axes respectively. This\nmakes it useful for measuring the differences between colors. However, it\u2019s\nnot very intuitive; for example, unless you\u2019ve spent a lot of time working\nwith the lab color space, it\u2019s probably hard to imagine what a pair of (a, b)\nvalues like (70, -15), represents.^1\n\nLCh (Luminosity, Chroma, hue) is more ergonomic, but still perceptually\nuniform color space. It\u2019s a cylindrical color space, which means that along\nthe hue axis, colors change from red to blue to green, and then back to red \u2014\nlike traveling on a roundabout. Along the way, each color appears equally\nbright and colorful. Moving along the luminosity axis, a color appears\nbrighter or dimmer but equally colorful, like adjusting a flashlight\u2019s\ndistance from a painted wall. Along the chroma axis, a color stays equally\nbright but looks more or less colorful, like it\u2019s being mixed with different\namounts of gray paint.\n\nThe LCh color space. Note the uneven peaks of chroma at different hues. via\nHueplot\n\nLCh trades off some of lab\u2019s functionality for being more intuitive. But LCh\ncan be clunky, too, because the C (chroma) axis starts at 0 and don\u2019t have a\nstrict upper limit. Chroma is meant to be a relative measure of a color\u2019s\n\u201ccolorfulness\u201d. Some colors are brighter and more colorful than others: is a\nlight aqua blue as colorful as a neon lime green? How does a brick red compare\nto a grape soda purple? The chroma scale is meant to make these comparisons\npossible.\n\nBut try for a moment to imagine a sea green as rich and deep as an ultraviolet\nblue. Lab and LCh both let you specify these \u201cimpossible\u201d colors that don\u2019t\nhave a real-world representation. In technical parlance, they\u2019re called \u201cout\nof gamut,\u201d since they can\u2019t be produced by screens, or seen by human eyes.\n\nThe existence of out-of-gamut colors makes it hard to reliably build a color\nsystem in LCh or lab color space. Finding colors with consistent properties is\na manual process; when Stripe was building its previous color system using\nlab, the team made a specialized tool for visualizing the boundaries of\npossible colors, allowing designers to tweak each shade to maximize its\nsaturation. This isn\u2019t a tenable solution for most teams; what if there was a\ncolor space that combined the simplicity of RGB and HSL with the perceptual\nuniformity of lab and LCh?\n\nBj\u00f6rn Ottosson, creator of the OKLab color space, did just that in his blog\npost \u201cOKHsv and OKHsl \u2014 two new color spaces for color picking.\u201d OKHsl is\nsimilar to Lch in that it has three components, one for hue, one for\ncolorfulness, and one for lightness. Like LCh, the hue axis is a circle with\n360 degrees. The lightness axis is similar to Lch\u2019s luminosity, going from 0\nto 1 for every hue. In place of Lch\u2019s chroma channel, though, OKHsl uses an\nabsolute saturation axis that goes from 0 to 1 for every hue, at every\nlightness. 0 represents the least saturated color (grays ranging from white to\nblack), and 1 represents the most saturated color available in the sRGB gamut.\n\nThe OKHsl color space. It\u2019s a cylinder, which makes it much better for\ngenerating color palettes. via Hueplot\n\nPractically, OKHsl allows for easier color selection and manipulation. It\nbypasses the issues found in LCh or lab, creating an intuitive,\nstraightforward, and user-friendly system that can produce the desired colors\nwithout worrying about out-of-gamut colors. That\u2019s why it\u2019s the best space for\ngenerating color pallettes for design systems.\n\n### Using OKHsl\n\nPractically speaking, to use OKHsl, you need to be able to convert colors to\nand from sRGB. This is a fairly straightforward calculation, but it\u2019s not\nbuilt into most design tools. Bjorn Ottosson linked the javascript code to do\nthis conversion in his blog post, and the library colorjs.io will soon have\nsupport for OKHsl.\n\nGoing forward, I\u2019ll assume you have a way to convert colors to and from OKHsl.\nIf you don\u2019t, you can use the code I\u2019ve written to generate a color palette in\nOKHsl, and then convert it to sRGB for use in your design system.\n\n## First steps with generated scales\n\nTo get started generating our color scales, we need a few values:\n\n  1. The hue of the color we want to generate\n  2. The saturation of the color we want to generate\n  3. A list of lightness values we want to generate\n\nFor example, we can generate a cool neutral color scale by choosing these\nvalues:\n\n  1. Hue: 250\n  2. Saturation: 5\n  3. Lightness values:\n\n     * Light: 85\n     * Medium: 50\n     * Dark: 15\n\nUsing those values to pick colors in the OKHsl color space, we get the\nfollowing palette:\n\nNeutral  \n---  \nOKHsl| sRGB Hex  \n250, 5, 85| #d2d5d8  \n250, 5, 50| #73787c  \n250, 5, 15| #212325  \n  \nWe can do the same thing for all our colors, picking numbers to build out the\nentire system.\n\nNeutral| Blue  \n---|---  \nOKHsl| sRGB Hex| OKHsl| sRGB Hex  \n250, 5, 85| #d2d5d8| 250, 90, 85| #b6d9fd  \n250, 5, 50| #73787c| 250, 90, 50| #1a7acb  \n250, 5, 15| #252628| 250, 90, 15| #022342  \nGreen| Red| Yellow  \n---|---|---  \nOKHsl| sRGB Hex| OKHsl| sRGB Hex| OKHsl| sRGB Hex  \n145, 90, 85| #6af778| 20, 90, 85| #fec3ca| 100, 90, 85| #eed63d  \n145, 90, 50| #388b3f| 20, 90, 50| #d32d43| 100, 90, 50| #877814  \n145, 90, 15| #0c2a0e| 20, 90, 15| #45060f| 100, 90, 15| #282302  \n  \n## Scaling up\n\nFor bigger projects, you\u2019ll often need more than just three shades per color.\nChoosing the right number can be tricky: too few shades limit your options,\nbut too many can cause confusion.\n\nThis can seem daunting, particularly in the early stages of your design\nsystem. But there\u2019s a method to simplify this: use a consistent numbering\nsystem, ensuring your color choices remain versatile no matter how your system\nevolves.\n\nThis system is often referred to as \u2018magic numbers.\u2019 If you\u2019re familiar with\nTailwind CSS or Material Design, you\u2019ve seen this in action. Instead of naming\nshades like \u2018light\u2019 or \u2018dark,\u2019 each shade gets a number. For instance, in\nTailwind, the scale goes from 0 to 1,000, and in Material Design, it\u2019s 0 to\n100. The extremes often correspond to near-white or near-black, with middle\nnumbers denoting pure hues.\n\nThe beauty of this system is its flexibility. If you initially use shades\nnamed \u2018red 500\u2019 and \u2018red 700\u2019, and later need something in between, you can\nsimply introduce \u2018red 600\u2019. This keeps your design adaptable and intuitive.\nAnother bonus of magic numbers is that we can often plug the number directly\ninto a color picker to scale the lightness of the shade. That\u2019s why, for the\nrest of this essay, I\u2019ll call these scale numbers.\n\nFor example, if we wanted to create a more extensive color scale for our\nblues, we could use the following values in the OKHsl color space:\n\nBlue  \n---  \nScale Number| OKHsl| sRGB Hex  \n0| 250, 90, 100| #ffffff  \n10| 250, 90, 90| #cfe5fe  \n20| 250, 90, 80| #9dccfd  \n30| 250, 90, 70| #68b1f9  \n40| 250, 90, 60| #3395ed  \n50| 250, 90, 50| #1b7acb  \n60| 250, 90, 40| #0f60a3  \n70| 250, 90, 30| #08477c  \n80| 250, 90, 20| #032f55  \n90| 250, 90, 10| #01172e  \n100| 250, 90, 0| #000000  \n  \nWe\u2019ve turned the scale number into the lightness value with the function . In\nthis formula, n is a normalized value \u2014 one that goes from 0 to 1 \u2014 that\nrepresents our scale number, and L(n) is the lightness value in OKHsl.\n\nIt turns out that using functions and formulas in combination with scale\nnumbers is a powerful way to create expressive color scales that can power\nbeautiful design systems.\n\n## Making scales expressive: Leveraging hue and saturation\n\nOne advantage of scale numbers is the ability to plug them directly into a\ncolor picker to dictate the lightness of a shade. But scale numbers really\nshow their usefulness and versatility when you leverage them across every\ncomponent of your color system. That means venturing beyond lightness to\nexplore hue and saturation, too.\n\n### Hue\n\nWhen using scale numbers to control lightness, it\u2019s easy to assume hue and\nsaturation will behave consistently across the lightness range. However, our\nperception of color doesn\u2019t work that simply.\n\nHue can appear to shift dramatically between light and dark shades of the same\ncolor due to a phenomenon called the Bezold\u2013Br\u00fccke effect: colors tend to look\nmore purplish in shadows and more yellowish in highlights.\n\nSo if we want to maintain consistent hue perception, we can use scale numbers\nfor adapting the hues of our color scales. As lightness decreases, blues and\nreds should shift slightly towards more violet/purple tones to counteract the\nBezold\u2013Br\u00fccke effect. Likewise, as lightness increases, yellows, oranges, and\nreds should shift towards more yellowish hues. ^2^3\n\nPurple without (top) and with (bottom) accounting for the Bezold\u2013Br\u00fccke\nshiftRed without (top) and with (bottom) accounting for the Bezold\u2013Br\u00fccke\nshift\n\nIn both examples above, we\u2019ve used the scale number to shift the hue slightly\nas the lightness increases. This looks like the following formula: . H(n) is\nthe hue at a given normalized scale value; H_base is the \u201cbase hue\u201d of the\ncolor. The 5*(1 - n) term means the hue will change by 5 degrees as the scale\nnumber goes from one end to the other. If you\u2019re using this formula, you\nshould tweak the numbers to your liking.\n\nBy making hue a function of lightness, with the scale number adjusting hue\naccordingly, hues look more consistent and harmonious across the entire scale.\nThe shifts don\u2019t need to be large \u2013 even subtle hue variations of a few\npercentage points can perceptually compensate for natural hue shifts with\nchanging brightness.\n\n### Saturation and Chroma\n\nFrom our understanding of the CIE LCh color space and its sibling, the OKHsl\ncolor space, we know that colors generally attain their peak chroma around the\nmiddle of the lightness scale.^4\n\nIn design, this presents a fantastic opportunity. By designing our color\nscales such that the midpoint is the most chromatically rich, we can make sure\nthat our colors are the most vibrant and saturated where it matters most.\nConversely, as we veer towards the lightness extremes, we can have chroma\nvalues that taper off, ensuring that our brightest and darkest shades remain\nsubtle and balanced.\n\nOKHsl gives us a saturation component that goes from 0% to 100% of the\npossible chroma at a given hue and lightness value. We can take advantage of\nthis by using the normalized scale number as an input to a function that goes\nfrom a minimum saturation to a maximum and back again.\n\nGreen with constant saturation (top) and varying saturation (bottom)\n\nIn practice, the formula for achieving this looks like this: , where S(n) is\nthe saturation at a given (normalized, as before) scale value n. The formula\nis an upside-down parabola, which starts at 0% and peaks at 100% when the\nscale value is 0.5.\n\nYou can add a few terms to adjust the minimum and maximum saturation if you\u2019d\nlike to adjust the scale further:\n\nNeutrals, for example, don\u2019t need a high maximum saturation. But most colors\ndo well moving between 0% and 100% saturation.\n\n## In practice: Crafting colors with functions\n\nLet\u2019s put this into practice and generate an extensive color scale with only a\nhandful of functions. Functions allow us to build a flexible framework that is\nresilient to change and can be easily adapted to new requirements; if we need\nto add colors, tweak hues, or adjust saturation, we can do so without\nrewriting the entire system.\n\n### Pick base hues\n\nFirst, let\u2019s pick a handful of base hues. At the very least, you\u2019ll need a\nblue for interactive elements like links and buttons, and green, red, and\nyellow for statuses. Your neutrals need a hue, too; though it won\u2019t show up\nmuch, a cool neutral and a warm neutral have very different effects on the\noverall system.\n\nNeutral| Blue| Green| Red| Yellow  \n---|---|---|---|---  \nBase hue (H_base)| 250| 250| 145| 20| 70  \n  \n### Add functions for hue, saturation, and lightness\n\nNext, let\u2019s use the functions we came up with earlier to indicate how the\ncolors should change depending on scale numbers.\n\nNeutral| Blue| Green| Red| Yellow  \n---|---|---|---|---  \nBase hue (H_base)| 250| 250| 145| 20| 70  \nHue function  \nSaturation function  \nLightness function  \n  \nThe hue function is a constant for neutrals, and for the colors we use the\nfunction that accounts for the Bezold\u2013Br\u00fccke shift.\n\nAs for saturation, the neutral colors have a maximum saturation of 20% instead\nof the full 100%; the rest of the colors use the function that goes from 0% to\n100% and back.\n\nThe lightness function is the same for all colors.\n\n### Calculate the colors for each scale number\n\nNow let\u2019s let the math work its magic. For each scale number, for every color,\nwe have all the information we need from the base hue, hue function,\nsaturation function, and lightness function.\n\nsRGB Hex  \n---  \nScale Number| Neutral| Blue| Green| Red| Yellow  \n0| #ffffff| #ffffff| #ffffff| #ffffff| #ffffff  \n10| #e0e3e6| #dae4f0| #d8e8d4| #f9d1d6| #f7e9a3  \n20| #bfc8d1| #aacaf1| #9adb90| #f1b5b7| #ebbe83  \n30| #9fadbd| #73aff6| #67c55b| #f7838c| #e09c34  \n40| #8193a6| #2e92f9| #39ac30| #fa405e| #c3810a  \n50| #67798c| #0077d8| #009100| #dd0042| #a26900  \n60| #506070| #065faa| #227021| #ae0f33| #815304  \n70| #3c4752| #0e477c| #255125| #7e1a28| #5f3e0b  \n80| #292f35| #12304d| #1c351c| #4e1b1e| #3e290f  \n90| #141619| #0d1722| #101910| #221111| #1d150b  \n100| #000000| #000000| #000000| #000000| #000000  \n  \nOf course, this palette is fairly basic and might not be optimal for your\nneeds. But using formulas and functions to calculate colors from scale numbers\nhas a powerful advantage over manually picking each color; you can make tweaks\nto the formulas themselves and instantly see the entire palette adapt.\n\n## Making scales adaptive: Using background color as an input\n\nToday, color modes like dark mode and high-contrast accessibility mode are\ntable stakes in design systems. So, if you\u2019re picking colors manually, you\nhave to pick an additional 50 colors for each mode, carefully balancing the\nunique perception of color against each different background.\n\nHowever, with the functions-and-formulas approach to picking colors, we can\nabstract a color palette to respond to any background color we might want to\napply. Let\u2019s go back to the lightness formula we used in the previous\npalettes:\n\nUsing this formula, the lightness will decrease as the scale number increases.\nIn dark mode, we want the opposite: lightness should increase as the scale\nnumber increases. We can use a more detailed formula to switch the direction\nof our scale if the lightness of a background color is less than a specific\nvalue:\n\nThe \u201cY_b\u201d in this equation is the background color\u2019s Y value in the XYZ color\nspace. As I explained at the beginning of this essay, color spaces are\ndifferent ways of mapping all the colors in a gamut; XYZ is an extremely\nprecise and comprehensive color space. While the X and Z components don\u2019t map\nneatly to phenomenological aspects of a color (like a and b in the LAB color\nspace), the Y component represents the luminosity of a color.\n\nYou may be wondering why we\u2019re using another color space (in addition to\nOKHsl) to dictate lightness. This is because the WCAG (Web Content\nAccessibility Guidelines) color contrast algorithm compares Y values in XYZ\nspace, which will be more relevant in the next section.\n\nA color with a Y value of 0.18 will have the particular quality of passing\nWCAG contrast level AA^5 on both pure white ( #ffffff) and pure black (\n#000000). That makes it a good test to see if a color is a light background\n(Y_b > 0.18) or a dark background (Y_b < 0.18).\n\nUsing this equation for our color system, we can now get both dark mode and\nlight mode colors, calculated automatically based on the background color we\nchoose.\n\n#### The color palette calculated with a background color of #000000 (Y_b = 0)\n\nsRGB Hex  \n---  \nScale Number| Neutral| Blue| Green| Red| Yellow  \n0| #000000| #000000| #000000| #000000| #000000  \n10| #141619| #0e1722| #10190f| #221112| #1c150b  \n20| #292f35| #132f4f| #1e351a| #4e1a20| #3d2a0f  \n30| #3c4752| #10467f| #275122| #7e192b| #5e3e0b  \n40| #506070| #075eac| #25701e| #ae0e36| #805304  \n50| #67798c| #0077d8| #009100| #dd0042| #a26900  \n60| #8193a6| #2993f8| #35ac35| #fa405c| #c4810a  \n70| #9fadbd| #6fb0f6| #61c660| #f78489| #e29b35  \n80| #bfc8d1| #a7caf1| #96db94| #f1b5b5| #ecbd86  \n90| #e0e3e6| #d9e4f0| #d6e9d6| #f0dedd| #eee0d1  \n100| #ffffff| #ffffff| #ffffff| #ffffff| #ffffff  \n  \n## Making scales accessible: Building in the WCAG contrast calculation\n\nOne of the most helpful aspects of scale numbers is that they can simplify\naccessibility substantially. The first time I saw this feature was with the US\nWeb Design System\u2019s (USWDS) design tokens.The USWDS color tokens have scale\nnumbers from 0\u2013100; using any tokens that have a scale number of 50 or more\nguarantees that those colors will meet the WCAG color contrast criteria at AA\nlevel.\n\nThis makes designing accessible interfaces much easier. Instead of manually\nrunning each color pairing through a color contrast check, you can compare the\nscale numbers of the design tokens and instantly know if the combination meets\naccessibility criteria.\n\nWhen I first set out to build out a system of functions for Stripe\u2019s color\npalette, this was the most daunting part of the challenge. Going in, I wasn\u2019t\neven sure if it was possible to systematically target contrast ratios across\nall hues. However, after seeing the technique used in Adobe\u2019s Leonardo, I had\nsome degree of hope that such a function existed. After many false starts and\ndead ends, I found the right set of operations.\n\n### Step 1: Calculate a target contrast ratio based on scale step\n\nStripe\u2019s color scales follow the lead of the USWDS; when scale numbers differ\nby 500 or greater, those two colors conform to the AA-level contrast ratio of\n4.5:1. This means that when neutral.500 is used on top of neutral.0 (or vice\nversa), the color combination should be accessible.\n\nTo accomplish this with calculated colors, it\u2019s important to understand how\nWCAG\u2019s contrast ratio is measured. A contrast ratio like 4.5:1 is the output \u00ae\nof the following formula, which the WCAG calls \u201crelative luminance\u201d:^6\n\nIn this equation, L1 is the luminance (i.e., the Y value of the color in XYZ\ncolor space) of the lighter color, and L2 is the luminance of the darker\ncolor.\n\nSo how do we use this knowledge to transform scale steps into contrast ratios?\nWell, we know step 0 and 500 need to have a ratio of 4.5. Step 100 and step\n600 also need to have a ratio of 4.5, and so on, up the scale. This is a\nfeature of exponential equations; equally-spaced points along the function\nhave consistent ratios. Exponential equations also model the growth of a\npopulation, or the spread of a virus. It happens that luminosity is also an\nexponential function of scale step, which shouldn\u2019t be surprising if you know\na bit of calculus.\n\nExponential functions take the form , where k is some constant. In our case,\nwe\u2019ll call the function r(x) (for contrast ratio), where x is a number between\n0 and 1 that represents our scale step; we need to solve for k to find the\nexact constant that produces the correct contrast ratios. Since r(0.5) should\nbe 4.5 \u2014 that is, scale step 500 has a contrast ratio of 4.5:1 with step 0 \u2014\nwe start with . Solving for k yields . To make this a little easier to work\nwith, we can use a close approximation of this value, 3.009.\n\nAnd if browsers were perfect pieces of software, that would be that. But color\nin web browsers is a tricky technical problem. Specifically, when you convert\nan RGB color like rgb(129.3, 129.3, 129.3) to a hex color, it\u2019s rounded off;\nthe result is #818181, which is exactly rgb(129, 129, 129). The formula we\nderived, is exact, so if you round a color\u2019s values at all after calculating\nit, you may end up with inaccessible colors.\n\nTherefore, in testing this function, I\u2019ve found that adding a little extra\ncontrast to the overall system helps guard against rounding errors. The final\nformula I used to calculate the contrast ratio from a scale step is as\nfollows:\n\nWhere r(x) is the target contrast ratio and x is a number from 0 to 1 that\nrepresents the scale number. If your scale numbers (like Stripe\u2019s) goes from 0\nto 1,000, then a scale number of 500 correlates to x=0.5.\n\n### Step 2: Calculate lightness based on a target contrast ratio\n\nNow that we have a function to calculate a contrast ratio based on our scale\nnumber, let\u2019s return to the relative luminance equation:\n\nIf we solve this equation for L2, we get an equation for the luminosity of a\ncolor with the desired contrast ratio with a given color.\n\nThis is true as long as L1 is greater than L2. Put another way, this covers\ncases where we\u2019re generating a darker color than our given (background) color.\nFor the opposite case, we can use the same formula, solved for L1 instead of\nL2. This gets us the following piecewise equation:\n\nAs explained earlier, the 0.18 in this equation represents the luminosity of\n\u201cmiddle gray,\u201d a color equally contrasting with #000000 and #ffffff; Each case\ndepends on whether the background color is dark or light.^7\n\nSo, for example, if I want a foreground to have a 4.5:1 contrast ratio with\nthe background color, I can calculate the luminosity of that color by\ninputting the luminosity of the background as Y_b and the contrast ratio as\n4.5. If the background is #ffffff, which has a luminosity of 1, Y_f comes out\nto 0.183.\n\nWe can substitute in our function for r(x) to get the following:\n\nThis is a function that takes:\n\n  1. A number from 0 to 1 that represents a scale number, and\n  2. The Y value of a background color, and provides the Y value (i.e., luminance) of a color at the given scale number.\n\n### Step 3: Translate from XYZ Y to OKHsl L\n\nDespite its scientific accuracy, XYZ is not a great colorspace to work in for\ngenerating color scales for design systems \u2014 while we can step through the Y\nvalues in a fairly straightforward way, calculating X and Z values of a given\ncolor requires matrix multiplication. Instead, we can translate XYZ\u2019s Y value\ninto OKHsl\u2019s l value with the following two-step process:\n\nFirst, we can use the following formula to convert the Y value to the\nlightness value in lab:^8\n\nThen, OKHsl uses a \u201ctoe\u201d function to map the lab lightness value to a\nperceptually accurate lightness value. Essentially it adds a little space to\nthe dark end of the spectrum. This function is a little complicated:\n\nThe math gets a lot more manageable if we put it all into a javascript\nfunction:\n\n    \n    \n    const YtoL = Y => { if (Y <= 0.0088564516) { return Y * 903.2962962; } else { return 116 * Math.pow(Y, 1/3) - 16; } }\n    \n    const toe = l => { const k_1 = 0.206 const k_2 = 0.03 const k_3 = (1+k_1)/(1+k_2)\n    \n    return 0.5*(k_3*l - k_1 + Math.sqrt((k_3*l - k_1)*(k_3*l - k_1) + 4*k_2*k_3*l)) }\n    \n    const computeScaleLightness = (scaleValue, backgroundY) => { let foregroundY; if (backgroundY > 0.18) { foregroundY = (backgroundY + 0.05) / Math.exp(3.04 * scaleValue) - 0.05; } else { foregroundY = Math.exp(3.04 * scaleValue) * (backgroundY + 0.05) - 0.05; }\n    \n    return toe(YtoL(foregroundY)); }\n\nThe function computeScaleLightness takes two values, the normalized scale\nvalue and the Y value of your background color, and returns an OKHsl L\n(lightness) value for the color at that scale step.\n\nWith this, we have all the pieces we need to generate a complete accessible\ncolor palette for any design system.\n\n## Putting it all together: All the code you need\n\nNow we have all the components to write a complete color generation library.\n\n    \n    \n    // utility functions const YtoL = (Y) => { if (Y <= 0.0088564516) { return Y * 903.2962962; } else { return 116 * Math.pow(Y, 1 / 3) - 16; } };\n    \n    const toe = (l) => { const k_1 = 0.206; const k_2 = 0.03; const k_3 = (1 + k_1) / (1 + k_2);\n    \n    return ( 0.5 * (k_3 * l - k_1 + Math.sqrt((k_3 * l - k_1) * (k_3 * l - k_1) + 4 * k_2 * k_3 * l)) ); };\n    \n    const normalizeScaleNumber = (scaleNumber, maxScaleNumber) => scaleNumber / maxScaleNumber;\n    \n    // hue, chroma, and lightness functions const computeScaleHue = (scaleValue, baseHue) => baseHue + 5 * (1 - scaleValue);\n    \n    const computeScaleChroma = (scaleValue, minChroma, maxChroma) => { const chromaDifference = maxChroma - minChroma; return ( -4 * chromaDifference * Math.pow(scaleValue, 2) + 4 * chromaDifference * scaleValue + minChroma ); };\n    \n    const computeScaleLightness = (scaleValue, backgroundY) => { let foregroundY; if (backgroundY > 0.18) { foregroundY = (backgroundY + 0.05) / Math.exp(3.04 * scaleValue) - 0.05; } else { foregroundY = Math.exp(3.04 * scaleValue) * (backgroundY + 0.05) - 0.05; }\n    \n    return toe(YtoL(foregroundY)); };\n    \n    // color generator function const computeColorAtScaleNumber = ( scaleNumber, maxScaleNumber, baseHue, minChroma, maxChroma, backgroundY, ) => { // create an OKHsl color object; this might look different depending on what library you use const okhslColor = {}; // normalize scale number const scaleValue = normalizeScaleNumber(scaleNumber, maxScaleNumber); // compute color values okhslColor.h = computeScaleHue(scaleValue, baseHue); okhslColor.s = computeScaleChroma(scaleValue, minChroma, maxChroma); okhslColor.l = computeScaleLightness(scaleValue, backgroundY); // convert OKHsl to sRGB hex; this will look different depending on what library you use return convertToHex(okhslColor); };\n\nFor this code to work, you\u2019ll need a library to convert from OKHsl to sRGB\nhex. The upcoming version of colorjs.io supports this, as does culori. I\u2019ve\nmarked where that matters, in case you\u2019d like to use a different color\nconversion utility.\n\n## What does it look like in practice?\n\nHere are some examples of the same design in a number of themes, with\ndifferent background colors:\n\nThree generated color palettes\n\nBy adjusting the hue, chroma, and saturation when we generate our colors, we\ncan get a broad and expressive range of hues, while ensuring each shade is\naccessible when used in the same context.\n\n## What we\u2019ve learned and where we\u2019re going\n\nAt Stripe, we\u2019ve implemented this approach to generating color palettes. It\u2019s\nnow the foundation of the colors in our design system, Sail. The color\ngeneration function is also available to the users of our design system; this\nmeans that teams can offer theming features to end users, which is especially\nuseful when Stripe\u2019s merchants embed our UI in their own applications.\n\nOne important lesson I learned while on this journey is the importance of\ntoken APIs. This is a bit of an esoteric topic and might be worthy of its own\nessay. The short version is: Using color aliases (like color.button.background\nreferring to color.action.500 referring to color.base.blue.500) allows theming\nto happen \u201cbehind the scenes,\u201d and ensures that components don\u2019t need to\nupdate their code when switching themes.\n\nSo where do we go from here? There are two features that I\u2019d like to explore\nin the future to make this approach to color even more robust.\n\nFirst, I\u2019d like to develop an alternative color lightness scale for APCA. The\nAPCA color contrast function is an alternative to the current WCAG contrast\nratio function. It purports to more accurately reflect contrast between\ncolors, taking into account the \u201cpolarity\u201d of the colors (e.g., dark-on-light\nor light-on-dark) and the font size of any text. The math behind the APCA\ncontrast function is a bit more complicated than the WCAG function, and my\nearly experiments weren\u2019t very successful.\n\nSecond, I\u2019d like to extend this approach to work in wide-gamut color spaces\nlike display P3. Currently, OKHsl only covers the sRGB gamut; more and more\nscreens are capable of displaying colors beyond the sRGB gamut, offering even\nmore possibilities for accessible color palettes. Calculating a P3 version of\nOKHsl should be possible, but it\u2019s definitely outside the scope of my current\nability/comprehension.\n\nUltimately, however, the approach outlined in this essay should be a solid\nbasis for generating colors for any design system. No matter how many hues you\nneed, how expressive you\u2019d like to be, how many shades your system consists\nof, or what kinds of themes you design, the set of functions I\u2019ve covered will\nprovide accessible color combinations.\n\nSpecial thanks to Dmitry Belyaev for providing feedback on a draft of this\nessay.\n\nFootnotes & References\n\n  1. (70, -15) is the coordinate for pink in lab colors space. \u21a9\ufe0e\n\n  2. R. W. Pridmore, \u201cBezold\u2013Br\u00fccke Hue-Shift as Functions of Luminance Level, Luminance Ratio, Interstimulus Interval and Adapting White for Aperture and Object Colors,\u201d Vision Research 39, no. 19 (1999): 3873-3891. \u21a9\ufe0e\n\n  3. Jes\u00fas Lillo et al., \u201cLightness and Hue Perception: The Bezold-Br\u00fccke Effect and Colour Basic Categories,\u201d Psicol\u00f3gica 25, no. 1 (2004): 23-43. \u21a9\ufe0e\n\n  4. However, it\u2019s important to note that this peak can vary slightly depending on the specific hue in question. \u21a9\ufe0e\n\n  5. AA is generally accepted as the standard for accessibility. A and AAA ratings exist, but are much more lax and more more strict, respectively. You can read more about conformance levels on the W3C website. \u21a9\ufe0e\n\n  6. https://www.w3.org/WAI/GL/wiki/Contrast_ratio \u21a9\ufe0e\n\n  7. This isn\u2019t extremely rigorous; you might want a \u201clight theme\u201d that starts from a dark gray background and gets darker as the scale number increases. I\u2019ll leave that as an exercise to the reader. This formula will cover the typical dark and light mode calculations. \u21a9\ufe0e\n\n  8. If you\u2019re like me and get suspicious when you see oddly specific numbers like 903.2962962 in equations like these, a quick explanation: unlike in the RGB color space, the XYZ color space has no \u201ctrue white.\u201d Because our eyes can perceive true white differently according to what light source is used, to transfer colors in and out of XYZ color space we often need to also define true white. The most common values are defined by something cryptically called the \u201cCIE standard illuminant D65\u201d, which corresponds roughly to what white looks like on a clear day in northern Europe. I am not making this up. \u21a9\ufe0e\n\nOlder:\n\nMarch 24, 2023\n\n### Creating a positive workplace community\n\n### Join the mailing list\n\nI'll send new posts to your inbox, along with links to related content and a\nsong recommendation or two.\n\nTwitter \u00b7 RSS \u00b7 Email\n\n", "frontpage": false}
