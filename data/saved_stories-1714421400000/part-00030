{"aid": "40197632", "title": "Show HN: Sanctum \u2013 a privilege separated VPN daemon", "url": "https://sanctorum.se/sanctum/", "domain": "sanctorum.se", "votes": 1, "user": "jvink", "posted_at": "2024-04-29 12:51:05", "comments": 0, "source_title": "Sanctum introduction", "source_text": "Sanctum introduction\n\nLatest release: sanctum 0.9.3\n\n## What is sanctum?\n\nSanctum is a small, reviewable, experimental and fully privilege seperated VPN\ndaemon capable of transporting encrypted network traffic between two peers.\n\n## Multi-process\n\nSanctum is built using a multi-process approach where each process is only\ndoing one thing. This allows for more fine-grained sandboxing in relation to\npermissions or allowed system calls.\n\nSeveral different processes exist that all only perform one task:\n\n  * bless - The encryption process.\n  * confess - The decryption process.\n  * chapel - The key exchange process.\n  * heaven-rx - The red side receiving process.\n  * heaven-tx - The red side transmitting process.\n  * purgatory-rx - The black side receiving process.\n  * purgatory-tx - The black side transmitting process.\n\nPackets flow between these processes in a well-defined manner making it\nimpossible to move a packet straight from the red side to the black side\nwithout passing the encryption process and vice-versa.\n\n## Traffic encryption\n\nTraffic is usually encrypted under AES256-GCM with unique keys in both RX and\nTX directions, using a 64-bit packet counter as the nonce.\n\nUsing the CIPHER environment variable you can however change traffic\nencryption to use Agelas, which is an experimental duplex-sponge AEAD cipher\nbased on the Keccak-p[1600,24] permutation.\n\n## Key exchange\n\nSanctum uses strong shared symmetrical secrets from which an encryption key is\nderived for wrapping a generated session key that is transmitted to its peer.\nEach sanctum instance is responsible for sending its RX session key to its\nconfigured peer periodically.\n\nKeys are expired automatically after a given number of packets have been\nsubmitted on them (1 << 34), or after 1-hour.\n\nThe underlying algorithm for wrapping the generated session key is the AEAD\nduplex-sponge stream cipher mentioned earlier. The entire key derivation and\noffer process is as follows:\n\n    \n    \n    Wrapping key (wk) derivation: s = shared secret, 256-bit se = seed selected uniformly at random, 512-bit wk = KMAC256(s, len(se) || se), 512-bit Key offer: now = Seconds since boot, 64-bit salt = The salt for nonce construction, 32-bit id = unique sanctum ID generated at start, 64-bit key = session key selected uniformly at random, 256-bit seed = se from wk derivation above spi = The SPI for this association header = magic || spi || seed encdata = id || now || key || salt encdata = Agelas(wk, aad=header, encdata) send(header || encdata)\n\n## Why did you write sanctum?\n\nI wrote it so I can be certain that my packets are blessed correctly according\nto the scriptures of cryptology.\n\n## Huh?\n\nOk, I wrote sanctum because I wanted something I can trust fully myself. I am\na very private person and want to excercise my right to privacy, even online.\nThere are definitely alternatives, but I opted to carve out something for\nmyself.\n\nPlus, it's cool to hack on stuff.\n\n## What makes you qualified to build this?\n\nIf you are asking yourself that question, that's ok. The people who know,\nknow. I have been building these type of things for many years at high\nassurance levels. Now, if this makes you nervous and rather not use Sanctum\nthat is fine, there are plenty of alternatives.\n\nBut none of them have cool mythology though ;)\n\n## Source?\n\nLatest release: sanctum 0.9.3\n\nA mirror of the repository is available on github.\n\n## How?\n\nA small simple guide is available here.\n\n## I want to contribute!\n\nmail diffs to joris snabel-a sanctorum punkt se\n\n", "frontpage": false}
