{"aid": "40290972", "title": "Less is More: A rich functionality behind Spartan interface (2012)", "url": "https://softpanorama.org/Articles/introduction_to_orthodox_file_managers.shtml", "domain": "softpanorama.org", "votes": 1, "user": "kqr", "posted_at": "2024-05-07 20:18:03", "comments": 0, "source_title": "Less is More: A rich functionality behind Spartan interface of Orthodox File Managers", "source_text": "Less is More: A rich functionality behind Spartan interface of Orthodox File\nManagers\n\nSoftpanoramaMay the source be with you, but remember the KISS principle ;-)|\nHome| Switchboard| Unix Administration| Red Hat| TCP/IP Networks|\nNeoliberalism| Toxic Managers  \n---|---|---|---|---|---|---|---  \n(slightly skeptical) Educational society promoting \"Back to basics\" movement\nagainst IT overcomplexity and bastardization of classic Unix  \n  \n# Less is More: A rich functionality behind Spartan interface of Orthodox File\nManagers\n\n## Introduction to Orthodox File Managers (OFM)\n\n### Dr Nikolai Bezroukov\n\nVersion 1.6, November, 2012\n\nCopyright 2012, Dr. Nikolai Bezroukov. This is a copyrighted unpublished work.\nAll rights reserved.\n\nNote: Version 1.5 of this paper was published in Softpanorama Bulletin Vol.24,\nNo.3 (2012)\n\n  * Introduction\n  * The history of the term\n  * Notion of Orthodox interface\n  * Members of the OFM family and their properties\n  * Comparison Table\n  * Understanding OFMs as sysadmin IDE\n  * Ten OFM Commandments\n  * Recommendations for Users\n  * Some recommendations for Orthodox file managers designers\n\n  * Conclusions\n\n### Abstract\n\n> The Orthodox File Managers (OFMs) that are also known as \"Commanders\" are\n> remote descendants of Norton Commander (NC) written by John Socha and first\n> released in 1986 for MS DOS. Despite Spartan interface (or, more correctly,\n> due to it) Orthodox file managers provide an extremely rich functionality,\n> unsurpassed by any other type of file managers. Including a unique way of\n> shell and file manager integration via user menu with a set of\n> macrovariables as well as shell terminal window, making them natural\n> sysadmin IDE. Due to unique blend of power, flexibility and portability they\n> became the tool of choice for system administrators, especially in xUSSR\n> region, Eastern Europe, Germany and Scandinavian countries. Those regions\n> were place of birth of the most impressive OFM implementations such as Far,\n> Total Commander, deco, Volkov Commander, Dos Navigator, Altap Salamander and\n> many others.\n>\n> There are three fundamental properties of Orthodox file managers:\n>\n>   1. Conservative (as in \"far from being fancy\"), very stable (25 years\n> without major changes) interface with two symmetrical windows (called\n> panels, with trademark white on blue letters, by default) that hides behind\n> Spartan interface very rich functionality. It really teaches us that \"less\n> is more\"\n>   2. One \"terminal style\" window that initially is minimized to a single\n> line at the bottom of panels, but can be expanded to full screen, half-\n> screen or any number of lines. The user can work in this window like with\n> regular console screen.\n>   3. Additional way of integration with the underling OS shell via so called\n> User menu and extension menu using the same set of macro variables that are\n> available for command line, which is also used in the built-in editor,\n> providing an opportunity to pipe results of the shell script execution to\n> the place after the cursor or pipe a selected block as input of some script.\n>\n\n>\n> At the same time they represent just one instance of a larger category that\n> can be called Orthodox interface. This category includes editors such as vi\n> and THE (orthodox editors), windows multiplexers (GNU screen), windows\n> managers (such as ratpoison) and probably some other that I just don't yet\n> discovered. I am still working on refining this notion but as a set of raw\n> ideas it includes:\n>\n>   1. Distinct command set layer with commands that can be entered from the\n> command line and reflected in GUI interface. In this sense vi is a reference\n> implementation and OFM inspired by vi have some interesting, distinct from\n> traditional line of OFM ideas implemented. See ranger and vifm.\n>   2. Tiled, nonoverlapping windows with minimum decorations\n>   3. Stress on availability of all commands via keyboard, not only via mouse\n> clicks, although mouse can be productively used and is used in such\n> interface.\n>   4. Ability to redirect output of commands executed in one window to other\n> windows and processes.\n>   5. Usage of GUI elements to generate commands on command line\n> (macrovariables and such commands as Ctrl-Enter, Ctrl-[ and Ctrl-] in OFM. )\n>   6. Accent of extensibility and programmability (with shell and/or\n> scripting languages) instead of eye candy.\n>\n>\n\n## Introduction\n\nThe Orthodox File Managers (OFMs) also known as \"Commanders\" are remote\ndescendants of Norton Commander (NC) written by John Socha. The latter was\nfirst released in 1986 for MS DOS but later replicated in multiple free,\nshareware and open source clones, which, essentially, created the \"brand\".\n\nOrthodox file managers provide a unique way of shell and file manager\nintegration making them a natural sysadmin IDE. Due to power, flexibility and\nportability they became the tool of choice for many system administrators both\non Unix and Windows, especially in xUSSR region, Eastern Europe, Germany and\nScandinavian countries. Those regions were place of birth of the most\nimpressive OFM implementations such as Far, Total Commander, deco, Volkov\nCommander, Dos Navigator, Altap Salamander and many others.\n\nThe word \"Orthodox\" comes from Greek orthos (\"right\", \"true\", \"straight\") +\ndoxa (\"opinion\" or \"belief\", related to dokein, \"to think\"). And OFMs are\nreally in my humble opinion \"true way of thinking\" about complex file\nmanagement operations. As a former editor of Softpanorama bulletin, a ezine\nwhich was published on floppies from 1989 till 2006, I was amazed by\ntremendous enhancement of my productivity they provided.\n\nIt goes without saying that publishing of it would be impossible, if I did not\nlearn how to use Norton Commander 2.0 in early 1989 (at the end of the year I\nswitched to NC 3.0 and in 1992 to Volkov Commander). Provided by user menu\nsimple extensibility proved for me to be an indispensable tool. Later FAR\nadded the concert of plug-ins which make extensibility of this type of\nmanagers even more impressive and then implemented LUA extension -- adding a\nscripting language programmability which is very natural for this type of\napplications, as significant percentage of end users are system\nadministrators, who by definition, would know programming at least on\nscripting languages level (there is an MC fork that also implement LUA\nextensibility). Even without writing your own plug-in you can configure a set\nof custom scripts that provides more critical for you functions and enhances\nyour productivity. Some custom plug-in are also very useful. For example, for\nme such an indispensable thing proved to be WinSCP plug-in.\n\nWhile many sysadmin/webmaster tasks can be accomplished in many different\nways, I think high level of mastery of OFM provides one of the best\napproaches, as it stimulated \"macro thinking\": thinking in bigger chunks\nsimilar to the process of writing a script in Unix shell. but it's more then\nthat it is also similar to playing on such instrument as piano, when you learn\nsome standard tunes or \"musical phases\" and then can repeat then almost\nsubconsciously. Some users who use those file managers for a decade or more\nhave pretty rich repertoire, and sometimes can amaze friends and accidental\nobserver performing then on the keyboard with amazing for untrained observer\nspeed and precision.\n\nIn other words OFM functionality tends to organizes your thinking (and\nkinesthetic memory) along the notion of complex file operation which serve as\na chunks or statements of some abstract language designed to simplify typical\nsysadmin tasks, especially connected with operations of one or several files.\nAs such it really represents \"true way of thinking\". That's why I called by\neBook about those file managers The Orthodox File Manager(OFM) Paradigm.\n\nOFMs provide a unique integration of three components critical for sysadmin\nIDE -- file manager, file viewer and file editor. Advanced OFMs has\nextensibility via two major mechanisms:\n\n  * user menu with a set of script typically written in shell (but shell can serve as just envelope for passing \"internal\" variables into scripts written in other languages)\n  * Plugins. For more advanced OFM (FAR, MC) they can be written in a scripting language (typically LUA)\n\nThe most promising from the point of view of extensibility are OFMs written in\nPython or other scripting language, but there are very few such OFMs. See\nScripting Language based OFMs\n\n## The history of the term\n\nI introduced the term \"orthodox file managers\" in 1996 (see OFM Bulletin 1998\n) because this type of file managers has an interplay of three features:\n\n  * They are remnants of long gone world of text terminals. Like Amish's dress they look like belonging to a different epoch.\n  * They belong to the rare category of \"command line enabled\" GUI tools (Which also include vi, Xedit, THE editor, Gnu screen and several other programs) and as such implicitly promote the use of shell. Knowledge of shell (like OFMs themselves) went out of fashion with the demise of MS DOS, much like Orthodox Christianity went out of fashion with the demise of Byzantium ;-). Now they found new home in Unix, were shell programming traditions still run strong. With the ability to overlay panels and shell terminal window they can be considered as an interesting and innovative extension of shell -- a kind of graphic shell, if you wish. To a certain extent we can talk about \"Orthodox GUI interface\" as a third, distinct type of GUI interface, different from either Apple-style GUI interface or Windows-style GUI interface (which actually pretty much converged).\n  * They have found the second home and became tremendously popular (dominant in DOS days) in the USSR and Eastern European countries with the population at least formally belonging to Eastern Orthodox Church with its unique polyphonic musical tradition (Basso profondo from Russia, Do not reject me in the time of old age, Orthodox music and Basso Profundo Beautiful Russia in Winter, Let my prayer come true, Gabriel Appeared, Lord, now lettest thou thy servant depart in peace, Glandsome Light, Great Litany). This is some at least superficial similarity in how they with just human voice create magnificent masterpieces to the way keyboard is also pushed to the extreme in OFMs (although mouse can and should be used)\n\n  * They emphasize computer minimalism philosophy. In a way orthodox file managers represent a different way of thinking (paradigm) about file operations, a remnant of DOS culture that emphasized the value of keyboard, simple text interface and simplicity in general. They also have an implicit appeal as simple, minimal tools as opposite to baroque, complex tool typical for modern Windows and Linux environments. With its adherence to command line and character-based interface they represent a trend that is often called computing minimalism. Modern \"click-drag-click\" GUI interface designers view such approach to interface as antiquated and worthless, but ability to mix and match keyboard with mouse operations carries a rich and valuable cultural tradition from glorious, but long forgotten DOS days of personal computers. As old PC users remember the original versions of IBM PCs did not have mouse, it was introduced only with IBM PS/2 series in 1987. Actually key assignments for OFMs are difficult to understand without knowing about 83 keys XT keyboard with 10 F-keys to the left in two rows F1-F2, F3-F4 (View/Edit in OFM), F5-F6(Copy/Move in OFM), F7-F8(Make directory/Delete in OFM), and F9-F10), keyboards which disappeared around 1994-1996 (recently they were revived in a new form of gaming keyboards which represent direct interest to OFM users). So from 1987 DOS users tried to combine the best features of both interfaces. Symmetrical two panels with hidden command window interface also speaks volumes about the value of simplicity and because such software can be replicated independently and you do not have a vendor lock. As such, simple flexible interfaces like used ion OFMs can survive for many decades, producing enormous benefits for the long-term users. Ability to use the same interface for 20 years or more produces level of motor skills when operations became almost subconscious and user can think about file management problems is a larger \"chunks\" of OFM operations like (make_directory-select files-move chunk, or compare_directories-move_newer chunk). This way of thinking gradually evolves into the second nature of the users and a way of thinking about all file operations (paradigm).\n\nNote: After demise of XP some keyboard manufactures tried to incorporate XT\nkeyboard F-keys into AT keyboard layout but none was particular successful\n(the most long lasting and popular was probably Gateway AnyKey). Some\nprogrammable keyboards contain XT-style two columns of programmable keys on\nthe left side of keyboard (for example, Logitech G110 (now discontinued, look\nfor G510s). Those keys can be programmed into \"classic\" OFM configuration (see\nProgrammable Keyboards) making OFM usage more enjoyable and operations\nslightly faster.\n\nWhile not perfect, the term Orthodox File Managers is much more precise and\ndefinitive then alternatives. There are actually three main alternatives:\n\n  * \"Norton commander clones\". This one is clearly a bad idea as modern OFMs are far more then that. Also \"Norton Commander clone\" or \"Norton-style file manager\" terms has element of advertising in them. As Symantec abandoned the product in the most inappropriate fashion (without releasing code of old versions, or making it freeware) I strongly object to those type of terms. Moreover, historically starting from NC3.0 \"clones\" became much more advanced then the original and it was Symantec that clone ideas from other implementations, not the other way around. So, in a way, NC 4.0 and 5.0 were clones, not vise versa. The truth is that starting from Volkov Commander (1992) and DN, Symantec was in deep trouble as for original ideas. Volkov Commander essentially smashed the value of Symantec brand into tiny peaces. The initiative was on the other side: from the historical point of view many new features in NC 4 and especially NC 5 were implemented in other OFMs at least a year before, so it is fair to say that it was the attempt of Symantec to play catch up with independent developers (that failed in NC4 but was pretty successful in NC5) that can be called cloning :-). When Symantec betrayed the product and ideas behind OFMs, it was independent developers that keep it afloat. Just compare functionality on NC 5.5 with Orthodox File Managers Standard 1999(OFM1999) - minimal OFM requirements and The Orthodox File Managers Standard 2004 (OFM2004) Advanced OFM requirements ) which reflect the progress of leading OFM implementations for the last 15 years.\n  * Commanders. This one is better (similar related word is Navigators), but unfortunately it widely used for unrelated programs. So it brings more confusion then clarity. The term \"Commander\" is widely used in games, NFS and Samba mounting helpers, security tools (Checkpoint commander), sound card controllers, image processing programs, etc). BTW the Norton Commander is also the name of a motorcycle made by British manufacturer Norton Motors and if you search Google for the word \"Commander\" that will be 90% of what you'll get. The other problem is that file managers completely unrelated to Norton Commander, especially those that resemble Windows File Explorer often call themselves Commanders.\n  * 2-pane or two panel managers is a wrong term as it does not reflects the critical importance of the command line window in the interface, which in the default mode is minimized to a single line. This third, initially minimized window that behaves as it is hidden behind two panels is the principal, distinguishing feature of this type of managers. Also this term does not reflect a unique troika of command line integration features, extension menu, and user menu based integration. The latter is probably the most important and existence of so called \"user menu\" and a related a set of macro variables (the current file, path to the current panel, path to the passive panel, etc) allow to extent this type of managers in a unique fashion. It also hides close analogies of OFMs with such programs as XEDIT, The Hessling Editor, vi (the category which I call Orthodox editors) as well as GNU screen and minimalist windows managers for X11 like Ratpoison. So in a way this is a culture that emphasize the value of keyboard. All those programs has nothing to do with two panel concept but they all utilize command line interface, although is different ways and attract similar type of power users -- first of all system administrators.\n\nYou can read more about pro-and-contra those alternative terms in Wikipedia\ndiscussion, which among other thing contains some very emotional philippics\nagainst the term \"orthodox file manager\" and judge the level of participants\non the either side of the debate yourselves. The funniest argument, that\nprobably deserve to be published by Onion were along the lines:\n\n> Waah, if those are orthodox then all others are unorthodox and that means\n> infidel. So they called my favorite file manager infidel ! Bastards. Damn\n> the author and the term ;-).\n\nWith one particularly nasty Wikipedia user was going as far as claiming that\nthe term was inserted by me at all pages with them that can be found on the\nWEB...\n\nOf course any term has drawback, but this one still the term reflects my\nconvictions that interface provided by OFMs reflects \"less in more\" approach\nand its Spartan interface somewhat reflect ideas asceticism propagated (but\nnot always followed) by Orthodox Priests. If also reflects judging of this\ninterface as a \"right, but now viewed as archaic\" pretty well and I am\nsticking to it :-).\n\nOrthodox file managers is also appropriate name in a sense that they stress\nthe value of ability of working with command line using the command set\ninstead of click & drag type of interface that is typical for modern GUI\nprograms. OFMs also managed to preserve \"look and feel\" of the original\nprogram which is now more then 25 years old (this is amazing case of interface\nlongevity, if you think about it). This unique, recognizable two symmetrical\npanel (often with white letters on blue background) interface is a hallmark of\nthe genre with its ability to shrink and manipulate visibility of left and\nright panel windows as well as expand command window (preferably gradually but\nat least to half-screen and full-screen) despite the fact that this interface\nis quite different from the established by Apple and Microsoft standard for\nthose programs. In this sense we can call Microsoft type of GUI interface with\nits excessive attention to GUI details \"a catholic interface\" ;-).\n\n## Notion of Orthodox interface\n\nOrthodox interface is the interface that has both command line interface\nelements and GUI interface elements glued together. As cynics would say this\nis a half-baked GUI-interface and this statement definitely has some truth as\nat least one of them emerge during attempts to convert previously pure command\nline tool to GUI (text terminal GUI) mode: this was the case with vi which was\ntext terminal GUI extension of ex editor. Apple and Microsoft GUI interface\nattempt to hide from us the internal command that you mouse gestures are\ngenerating, while orthodox interface attempts to expose it.\n\nIn Orthodox interface there is always a set of commands that exists as a\nlanguage with text names for functions and parameters and glued together by\ncontrol structures. Special keys and key combinations as well as mouse buttons\nand mouse gestures are just shortcuts to this basic set of commands. So\ninterface is split into two parts:\n\n  * Generation of internal commands via GUI\n\n  * Execution of generated internal command by internal language processor.\n\nThis existence of formal internal language is the most distinctive feature of\northodox interface.\n\nAnd this idea was invented and reinvented by so many people that it looks like\nthis is a new different type of interface, distinct from Apple-Microsoft\ninterface.\n\nFor example this is true for various OFM, for orthodox editors such as vi or\nXEDIT like of editors (Edit, Kedit, THE, Slickedit), for GNU screen, smith in\nAIX and many other programs. Those tools were from the beginning designed is a\nway that allow coexistence of command line with GUI interface. So in a way\nOrthodox interface is all about co-existence of two principal forms of\ncomputer interfaces in a single program by using command line as the focal\npoint.\n\nThat means that we can look at orthodox interface as a compiler of GUI\n\"gestures\" into regular command language with text representation. Those\ngenerated statements of this command line language are executed to achieve the\ndesired effect.\n\nWe can also introduce idea of channel: each channel forward generated or\nmanually written commands to specific processor. For example we can thing\nabout vi as having two command channels: one is \": channel\" (internal commands\nchannel) which process commands directed to editor buffer and another is \"!\nchannel\" (external commands channel) which direct commands to OS with the\npossibility of using all or part of editing buffer as input as well as to\nmodify all or part of the editing buffer using output of executed in OS\ncommand of complex pipe.\n\nIn OFMs this is implemented differently: there is a single \"OS command\nchannel\", but there is not distinct \"internal command language\", althouth some\nOFMs recently moved in this direction.\n\nAll-in-all I am convinced that the notion of Orthodox interface as an\ninterface distinct from and based on different principles then Apple and\nWindows GUI interfaces (which are actually became much closer with time). As\nsuch this is a much wider phenomenon then either OFMs and orthodox editors\nsuch as vi and THE (orthodox editors), windows multiplexers (GNU screen),\nwindows managers (such as ratpoison).\n\nI am still working on refining this notion but as a set of ideas it definitely\nincludes three following notions:\n\n  1. Extensibility and programmability (with shell and/or scripting languages) are key to enhancing productivity of advanced users and as such they should have much higher priority for designers of the interface then chrome. This \"the ability to program as second literacy\" paradigm (see Ershov1972 ) inherent in orthodox interface is actually radically different design paradigm than the one used in classic Apple-Microsoft GUI with their emphasis on \"users\" and multicolor eye candy with gradient colors icons and fancy animations.\n  2. Orthodox GUI is a \"visual shell\". Like classic Unix shells, Orthodox GUI should have least one \"command channel\": ability to type statements in some formal language which, when executed, change the state of GUI. In other words they implement what can be called \"command line controlled GUI\". It can be just \"external\" command channel where commands go directly to OS (like in OFMs), or internal command channel where commands are processed by internal interpreter (for example REXX or Lua) and reflected on the part of editing buffer that is displayed as in orthodox editors, or some combination of both. Commands that are entered into command channel are executed immediately like in shell and the result is immediately reflected in GUI interface. They can be glued into complex scripts by some ad-hoc or (preferably) standard scripting language like REXX or LUA.\n  3. Elements of automatic program generation with the help of GUI. Another way of looking on orthodox interface is to assume that GUI \"gestures\" in it first are compiled into some command line language and that those generated statement are executed by command processor and cause corresponding changes in GUI screen. That means that we can (and probably should) look at orthodox interface as a compiler of GUI \"gestures\" into regular command language with text representation. Those generated statements of this command line language are executed to achieve the desired effect.\n\nGUI can also be used in supplementary role to generate part of command line\nconstruct that are written by the user on the command line by inserting\ncertain elements via macros or shortcuts like (Ctrl-Enter, Ctrl-[ and Ctrl-]\nin OFMs) and any other creative way. Generally in OFMs you can \"assemble\"\npretty complex commands from elements of GUI (and freely move within directory\ntree in a process without destroying it, the capability that was always a\ndesirable part of Unix command interface)\n\nRecently those ideas related to vi and orthodox editors started cross-\npollinated OFM that consider themselves not derivatives of Norton Commander,\nbut derivatives by vi See ranger and vifm. have some interesting, distinct\nfrom traditional \"Norton\" line of OFM ideas implemented.\n\nThere are also some other common features but they just overlap and extend the\nthree more fundamental features listed above:\n\n  1. Tiled, nonoverlapping windows with minimum decorations. Generally both Orthodox editors and Orthodox file manager feather rather Spartan interface.\n  2. Stress on availability of all commands via keyboard, not only via mouse clicks, althouth mouse can be productively used and is widely used in such interface. In this sense claim that such interfaces are \"mouse-less\" is completely untrue. Simply mouse plays the role of important but supporting instrument, not as the primary instrument as \"drag and drop\" type of interface.\n  3. Stress on availability of macrogenerator. This is connected with viewing shortcuts as the means to generate some internal commands.\n  4. Stress on the ability to utilize pipes and external program as a source of gui elements. This is especially visible in vi with its ! and !! commands. Ability to redirect output of commands executed in one window to other windows and processes. That includes the ability of forwarding result of particular command execution into panel in OFMs (panelize command in OFMs, especially external panelize command in Midnight Commander) and capability of ! command to use part of editing buffer as input and pipe the result into selected part of editing buffer in vi. For example, the command:\n    \n        :1,$!indent\n\nwill beautify your program using standard Unix beautifier (indent). This is a\nclassic example of using piping in vi.\n\n## Members of the OFM family and their properties\n\nMembers of this family of file managers that are represented by such popular\nfile managers as FAR, FC, Total Commander and WinSCP on Windows as well as MC\n(Midnight Commander) in Unix. Less popular names include probably a dozens of\nimplementations (Demos Commander, Krusader , EmelFM2, GNU Commander, GNOME\nCommander in Linux, FreeCommander, Altap Salamander, Necromancer's DOS\nNavigator on Windows, see CategoryOrthodox file managers in Wikipedia). All of\nthem use simple yet very powerful paradigm of three windows: two symmetrical\npanels and command window (shell terminal window) hidden behind them with only\nthe last line of this window (command line) visible. There are three\nfundamental properties of Orthodox file managers:\n\n  1. Conservative (as in \"far from being fancy\"), very stable (25 years without major changes), very flexible interface with two symmetrical windows (called panels, with default trademark white on blue letters). It teaches us that less is more. By default panels contain listings of files in two (not necessary different -- they can provide two different views of the same directory, for example, sorted by time and by name) directories. One panel is \"active\" (it has cursor in it), the other is \"passive\". Tab changes active panel to passive and makes other panel active. All manipulations are performed from active panel with possible target of passive panel directory (in case of copy operations). In advanced OFM along with vertical split panels can be displayed with horizontally which is useful for Unix as permits displaying both attributes of the files and its ownership. Key variables that describe status of those two panels (often called macrovariables), should be exported to the environment and available as a keyboard shortcuts (for example Ctrl-Enter, Ctrl-[ and Ctrl-] in FAR) for inserting into command line. In a sense OFM is for users who learned this interface, found it highly usable and don't care about with \"innovation\" like drag and drop and eye candy unless they really increase productivity. Remember that an important part of KISS principle is famous \"If it aren't broke, don't fix it\"... Every time you hear the screams of millions of users crying because of another \"innovation\" from MS or Apple like happened in change of interface from Office 2003 to Office 2007, remember that simple reliable tools like OFM give people what they want and what they already learned and get used to, not an \"Even-Newer-Paradigm\" each three to five years. The classic \"orthodox\" lesson that OFM teach us that \"If you've got time on your hands, and are looking for something to do, please spend it on improving functionality and flexibility of the application, not the visual candy. \" The UI does not need anything \"new\", nor do the users want anything new or unfamiliar. It's more than enough hassle to keep up with \"innovations\" in the OS space... please don't make us learn new tricks for the file managers, which are good enough... As we saw in some popular GUI programs the lion share of \"innovations\" in new releases is confined to endless variations of GUI interface. Not so much adding functionality, as adding confusion. And the pace is such that sometimes users just get used to new interface and, voila it got updated. The impression is that aging brass imitates \"creativity\" by meeting some stupid formal parameters in yet another spreadsheet staffed in the endless maze of bureaucratic perversions. Imitates without a soul. And after brass creates \"grand plan for innovation\" a lower level boss pushes plan for interface \"innovations\" to worker bees. Who knowing the situation all too well and understand that \"resistance is futile\" say, \"OK, boss. As you wish !\" Let's shuffle the menu from vertical to horizontal and change location and shape of the buttons. Done deal! Everybody is now happy. And in order to meet the deadline, let's do not fix existing bugs. Because real quality control is gone as the key criteria of their work became meeting the release date too. So both management, software development and quality control are now just imitations of \"real thing\". The release date hangs over their heads like Damocles sword. And only after the release, the real attempts to fix bugs begin. Until a new \"innovation cycle\" starts....\n\nYou got the idea of such an \"innovation process\". And described perversion and\nwaste of talent and resources for meaningless changes of eye candy under the\nname of innovation happens with GUI based applications way too often, so often\nthat the description above does not looks so much as a caricature. I think in\nthis respect US software developers finally reached the level on which\nindustrial projects were completed in the USSR just before its dissolution!\nWhich suggests not only widespread rot at the top, but something deeper and\nmore menacing...\n\nWith OFM the situation is different. Interface is primitive and its structure\nwas fixed 26 years ago. Users learned it long ago and expect it to stay the\nsame; they do not take \"innovations\" very friendly to say the least. Moreover,\nthere is one stupid guy named Bezroukov who put an effort to document it and\npublished widely ignored but still available standard. And now if somebody\ndeviates from it too much, he/she might be shamed by some too curious user who\nread OFM1999 or old hand who used FAR or Norton Commander 3.0, who expected\nthat that this feature should be done not this way, but that way ;-). Which\ncreates implicit pressure to keep the interface compatible with good old\nNorton Commander and channel your creative energy into something more valuable\nthen deciding which key combination should be designated for \"copy\" and which\nfor \"move\" :-). Or how many panels your file manager should have. Or how shell\nterminal window should behave.\n\n  2. Integration with shell via \"shell terminal style\" window, which initially is minimized to a single line at the bottom of panels but can be expanded to full screen, half-screen or any number of lines like in GNU screen with the ability to use special set of macrovariables (current file, path to the active panel, path to the passive panel, etc). Classic Norton Commander provided two preselected sizes of \"shell terminal\" window: half screen and full screen; FAR introduced the ability to expand command line windows by any number of lines necessary. At least the ability hide panel and work with full screen command windows should be present. Unfortunately this feature is very poorly understood and as such is very poorly implemented (paradoxically it is implemented especially bad in Unix OFMs). At the same time this is what makes OFM close to visual shell -- as you can use environment variables and shortcuts related to panels in command line. This is a really unique feature of OFM. Unfortunately in Midnight Commander, the most popular Unix OFM, the implementation was completely screwed until version 4.8 ( and it is have bugs in version 4.8.6 as well as complete absence of important \"half-screen\" shell terminal windows visibility (only one line or full screen capabilities are present)). So the leading Unix OFM fared worse the Windows-based FAR in command window support ;-). The capability to extend the third windows above single line is completely absent from Total Commander -- probably the best GUI-based OFM for Windows. I think this is a serious flaw. So I would like to stress it again, that the key, principal feature of orthodox file managers is usually very badly implemented with the exception of the original Norton Commander and FAR.\n\nAn additional twist of this capability is the ability to paste macrovariables\n(current file, path to left and right panel, list of selected files, etc) not\nonly via putting the names of macrovariables in your input string, but also by\nusing keyboard shortcuts such as Ctrl-F (current file), Ctrl-[ (path to left\npanel), Ctrl-] (path to right panel). This feature introduced in Volkov\nCommander simplifies many operations in comparison with both die hard command\nline Unix users on one hand and CDD (click-drag-drop) addicted type of Windows\nusers on the other. I always admired the persistence with which Windows users\ncan repeat the same operation using strictly mouse \"drag and drop\" four dozen\ntimes, for example moving 50 files to 10 different directories one by one,\nwhen in OFM it takes just slightly more then a dozen of keystrokes :-). As\nwell as Unix command line users who type command ls probably several hundred\ntimes a day each day (the ability to suppress ls command in bash history\nexists not without a reason) and still feel great and don't even suspect that\nthere is a better way ;-)\n\nThis \"visual shell\" memo is one of the most powerful ideas within OFM\nparadigm, but unfortunately \"the religion became corrupted\" as it often\nhappens. Only FAR and Midnight commander (starting from version 4.8) implement\nthis idea correctly, but with different strong points of the implementation:\n\n     * Midnight Commander 4.8 implements commands window better than FAR in a sense it is a real \"first class citizen\" shell terminal window in Linux. For example, you can source your own profile with custom prompt and it will be reflected in the shell terminal window. History is available with arrow keys, Ctrl-R works like it should. Generally you can work with it as with regular shell terminal. It would be great if Midnight Commander implemented the possibility of shrinking of the panels to \"half-screen\" mode but may be I am asking too much. Its already has a huge codebase and developer resources are really scarce...\n     * FAR shell windows has different properties then Windows command line (which is extremely primitive anyway), but it implements an important possibility of shrinking panels to half size of more providing visual clues of executed commands on the file system along with output of those commends in the bottom part of the screen. Still, for example, loss of scrolling history which is implemented in regular Windows shell window is a serious drawback.\n\nI would like to stress it again that such a popular Windows OFM implementation\nas Total Commander is completely defective in this respect: the third command\nline allow only a single command to be executed and output is not visible\nother that (if this is command affects file in the panel) with the feedback\nvia changes in listed in panels files.\n\n  3. Extensibility due to integration of small scripts via so called User menu and extension menu using the same set of macro variables that are available for command line. In addition the same user menu and macro variables can be made available in the built-in editor. This way \"user menu\" provide a user with he capability to write his own simple extensions some of which can be quite useful. Here is an example taken from Midnight Commander User menu (which has a unique feature that it is dynamic and only those items of the menu that are applicable to the current file type and presence/absence of selected files are shown to the user):\n    \n        = t r + ! t y Gzip or unzip current file unset DECOMP case %f in *.gz) DECOMP=-d;; *.[zZ]) DECOMP=-d;; esac gzip $DECOMP -v %f + t t Y Gzip or gunzip tagged files for i in %t do unset DECOMP case \"$i\" in *.gz) DECOMP=-d;; *.[zZ]) DECOMP=-d;; esac gzip $DECOMP -v \"$i\" done + f \\.tar.gz$ | f \\.tgz$ | f \\.tpz$ | f \\.tar.Z$ | f \\.tar.z$ | f \\.tar.bz2$ | f \\.tar.F$ & t r & ! t t z Extract compressed tar file to subdirectory unset D set gzip -cd case %f in *.tar.gz) D=\"`basename %f .tar.gz`\";; *.tgz) D=\"`basename %f .tgz`\";; *.tpz) D=\"`basename %f .tpz`\";; *.tar.Z) D=\"`basename %f .tar.Z`\";; *.tar.z) D=\"`basename %f .tar.z`\";; *.tar.bz2) D=\"`basename %f .tar.bz2`\"; set bunzip2 -c ;; *.tar.F) D=\"`basename %f .tar.F`\"; set freeze -dc; esac mkdir \"$D\"; cd \"$D\" && (\"$1\" \"$2\" ../%f | tar xvf -)\n\nFor Linux/Unix users the simplest way to understand Orthodox file manager\ninterface is to view it as a specialized implementation of GNU screen that\ncontains three predefined windows: two symmetrical panels side by site at the\ntop and a regular command line window (by default minimized to a single line)\nat the bottom The unique feature is that operation in one window (command line\nwindow) cause changes in other two windows (panels). This feature actually can\nbe implemented in screen by running two programs in panels that read two files\nin, say /tmp directory with location of current (active -- always shows the\ncurrent directory) and passive (say previous directory) and then update\ncontent of their window.\n\nParadoxically leading Windows implementation (FAR) has richer interface with\nshell then leading Unix version -- Midnight Commander (partially because of\ndesign flaws in Midnight commander where shell interface is implemented as a\nhack). There are also many GUI version of orthodox file managers that\nimplement mainly file handling capabilities but not \"visual shell\"\ncapabilities. The most prominent example is Total commander which in 2007\nbecame fifteen years old implementation.\n\nThere are numerous advantages of modern Orthodox File Managers, which refines\nthe functionality of the original Norton Commander for DOS and incorporated\ninto the same interface more then 20 years of development by many talented\nprogrammers including John Socha, Vsevolod Volkov, Eugene Roshal (of RAR fame)\nand Christian Ghisler (Total Commander). Three main advantages are:\n\n  * Close integration with shell. That is reflected the ability to perform all operations using just keyboard as well as in such features as extensions menu and user menu both of which allow usage of parameterless macros representing various elements displayed on the panels, bridging the gap between command line and GUI worlds in a very flexible and unique way. Hierarchical context dependent (MC) user menu is also a unique and pretty powerful scheme of invocation of scripts and programs, more powerful then GUI icons as invocation can incorporate context elements from both panels, such as active directory, passive directory, current file, selected files, etc.\n  * Portability. OFM are probably the most portable type of file managers in existence as it is one of the few that can work OK without mouse or similar pointing device. Implementations exist for any major OS including Windows CE and most smartphones; they proved to be pretty usable on Blackberry which is a popular type of corporate smartphones) See, for example, Total Commander CE/Pocket 2.51. As interface is pretty Spartan implementers can concentrate on providing advance functionality instead of eyes candy.\n  * Availability of public standards. Two Public standards are available (OFM1999 and OFM2004), one in in development stage(OFM2012). Existence of standards ensure that OFMs are and will continue to remain one of the few types of managers where skills you get twenty years ago are still mostly usable on any more modern implementation. This is unique situation as interface usually changes pretty quickly, often in less then a decade. Compare for example this with the evolution of Windows managers were key features of interlace are somewhat different between Windows 4.1, NT 4.0, Windows 2000, XP, Windows 7 and Window 8 Metro interface. Or Office 2003 and Office 2007 (to be fair Office 2003 interface existed for a decade or so). And Microsoft is a company which historically proved to be very good in preserving compatibility.\n\nThree main advantages of OFM are (1) close integration with the shell, (2)\nportability and (3) the availability of public standard  \n---  \n  \nAll OFMs have a Spartan interface with the main window which is divided into\nthree sub-windows. Two of them are called \"panels\" that are identical in\nstructure (but can have different sizes and/or be hidden), and are usually\npositioned side by side at the top of the screen (in Unix positioning one on\ntop of the other is more common as there are additional attributes to display\nwith files). The third screen-wide window contains an instance of the shell\nand usually is minimized to one line but can be expanded either gradually,\nlike by line (like in FAR) and/or is large increments (half screen and full\nscreen as in classic Norton Commander implementation). You should view this\ncommand line as a almost minimized (to a single line) command window. Or, if\nyou wish, a separate telnet session to localhost. In case panels are hidden\n(with hotkey Ctrl-O ) command window should provide full functionality of the\nOS shell window including history of commands, command completion and other\nniceties.\n\nIn essence OFMs can be viewed as a special type of windows manager (similar to\nGNU screen) with functions of two upper windows (panels) largely fixed. But\nthe important feature of OFMs is that panels are implicitly connected to the\noperations performed in command window in several ways:\n\n  * ##### One of the panels always contain the current directory and automatically reflects changes in it.\n\n  * It is possible to copy certain elements of the left or right panel to the command like using special key combination and special macro variables. Typical examples are the current path, path to the left panel, path to the right panel, the list of names of selected files.\n  * There are also set of operation for exchange of information between panels (always from active to passive)\n  * Panel also can contain editor window of viewer for a particular file.\n  * Panels are shrinkable and can expose hidden behind them terminal window, while normally only the last line of this window (command line) is visible. The latter permits viewing the results of execution the shell command entered on the command line (e.g. via Ctrl-O shortcut in Norton Commander);\n  * The ability of user to extend functionality of the manager via so called User menu or Start menu and extensions menu. The ability to create their own file associations and scripts that are invoked for certain file types ( it was Norton Commander who introduced the concept of file associations that is now used in all file managers).\n\nSurprisingly, this Spartan interface proved to be long lasting feature of\nOFMs. There were attempts to create the OFM manager with four panels. There\nwere attempts to use tree view as the right panel (similar to Windows\nExplorer) and most OFM has the ability to replace left panel with tree view.\nBut I personally and many advanced users whom I know never learned to use this\nproductively and prefer classic symmetrical panel view with two directories.\nStrangely enough this two symmetrical panel with two directories remain the\nmost productive for a very wide spectrum of real life file operations that are\nused by sysadmins and advanced users. When I need tree view for quick\nnavigation I usually use separate view available vie Alt-F10 (find folder).\nProbably there are some structures in brain that provide higher productivity\nwith the symmetrical two panels interface vs. various often more sophisticated\nasymmetrical variants. Moreover after you achieve proficiency with it, it's\nrather difficult to switch to any other: all of them look inferior even if in\nreality they are more expressive for some operations (like the Windows File\nExplorer asymmetric interface with tree on the left side or XTree interface,\nwhich provides very good capabilities of coping/moving files from left panel\nto the arbitrary place in the directory tree). There is some kind of implicit\n\"lock in\": after several years of usage you start thinking about file\nmovements and directories restructurings in terms of OFM operations. That also\nprovide you with some hidden \"language\" using which you can perform pretty\nsophisticated directories transformations, the skill that often amazed those\nwho never using OFM manager and observe operations of an advanced user.\n\nAnother, already mentioned, advantage of OFM is that this is the only type of\nfile manager that is standardized and the skills are transferable from command\nlike to GUI and back as well as from one platform to another (for example\nWindows to Unix -- this is an excellent way to dampen shock of the Unix\ncommand line for Windows users who want also use or even migrate to Unix).\n\nAnother advantage of OFM is that this is the only type of file manager that is\nstandardized and the skills are transferable from command like to GUI and back\nas well as from one platform to another (for example Windows to Unix -- this\nis an excellent way to dampen shock of the Unix command line for Windows users\nwho want also use or even migrate to Unix)  \n---  \n  \nOFMs are not for dummies. You will be more productive if you know the shell of\nthe OS you are using. In this case you can use OFM as a navigational helper\nand a simple generator of complex command as you can easily insert into\ncommand line such elements of two panels as the current file, the current\ndirectory, directory of inactive panel and so on. That's why they are\nextremely popular among administrators, especially in Eastern Europe and xUSSR\narea.\n\nThe author argues that this simple classic interface offers the most efficient\nway to perform complex file operations, and both users and software developers\ndeserve some help in the form of the standard and some kind of commentary\nabout \"the state of the art\" of this type of file managers. That's why I spend\nconsiderable time writing my online book The Orthodox File Manager (OFM)\nParadigm that introduced two level of standards (OFM1999 - minimal OFM\nrequirements and Dr Nikolai Bezroukov. The Orthodox File Manager (OFM)\nParadigm. Ch. 9 The OFM2004 provide both commentary and overview of major\nimplementations. This is a volunteer effort and some parts are outdated. Still\nthis is the only e-book on the subject and as such it can help system\nadministrators more consciously choose the implementation they need and polish\nthe methods of work with OFM.\n\nIn this eBook I tried to distill several possible reasons for this\nsurprisingly high productivity of OFM users, the productivity that despite of\nthe age of the interface (more then 25 years) and its Spartan character\nremains unmatched. Please read at least Ch.1 of the OFM book, the chapter that\nintroduces the concept.\n\nBut even if you do not want to read it, selects and enjoy any OFM you like! I\nam using this class of filemanagers since 1987 (NC 2.0) and still learn new\nthings each year, things that help to increase my productivity. Despite\ninterface simplicity latest OFMs are very powerful and flexible programs, that\nhave rather steep learning curve and you will be better off learning\nincrementally, starting with simple file operations and gradually moving\ntoward full power that bring customarization and availability of user many,\nextensions menu and several other features of OFM.\n\nI also have found OFMs to be indispensable productivity tool for webmasters\nand despite my interest and professional exposure to other Windows and Unix\nfilemanagers I am still convinced that in the hands of professional,\nproductivity-wise, OFMs have a huge edge. BTW I never managed to fully\nswitched to GUI based OFMs, and still use mc in Unix and FAR in Windows\nenvironments although recently I spent considerable time using Total\nCommander. That's because command line OFMs should be viewed not only as\nfilemanagers but as a new ingenious graphical interface to shell, interface\nthat makes standard Unix-style typing command on the terminal irrevocably\nbackward. Professional Unix administrator fully versed in OFM usually\noutperform Unix administrator limited to \"pure\" commend line by a factor of\ntwo in not more. It's actually a pity to see how this poor folk spends\nvaluable time typing innumerous ls commands ;-)\n\nAnd that brings us to an important point. While invented as a file manager in\nreality (and especially in Unix environment) OFM should be viewed as new\ngeneration of shell interface (visual shell) and as such they should be\nclosely integrated with shell. Unfortunately this point was missed by most\nUnix developers and capabilities of typical Unix implementation in this\nrespect are rather primitive. In a way you should think about Unix OFM\nimplementation as a fork of screen with specially predefined top windows split\nvertically (I know screen cannot split windows vertically but let's assume\nthat this is just an implementation limitation). This ides of \"OFM as a visual\nshell for Unix\" is the main point that I advocate in my eBook especially in\nchapter 4 devoted to Unix OFMs. That's why despite their origin in Windows\nOFMs proved to be extremely natural to Linux/Unix environment. IMHO a\nLinux/Unix sysadmin with good OFM skills can be probably twice more productive\nthen any super-skilled UNIX guru that use just plain vanilla command line ;-)\nActually good knowledge of OFMs is a trademark of best Unix administrators\nfrom Eastern Europe.\n\nBut while Europe (especially xUSSR region, Eastern Europe and Germany) became\nthe new home of Captain Norton, the initial versions of NC were written by a\ntalented American programmer John Socha. Like with any brilliant idea it did\nnot take long to implement and develop it to a mature condition: all the major\nwork concentrates in just two years 1985-1987. At this time John Socha was the\nfirst director of research and development for now defunct small software\ncompany: Peter Norton Computing. Peter Norton who wrote the initial version of\nNorton Utilities, but AFAIK was not involved in writing Norton Commander was\none of the pioneer entrepreneurs in PC software development; now he is known\nmainly due to his role as a photo model on the boxes of Norton Utilities and\nother Symantec products belonging to a \"Norton line\" ;-).\n\nThe first version of Norton Commander was released in 1986 and it instantly\nbecame the dominant file manager for DOS. In 1987-1991 more then a million\ncopies were sold. In Eastern Europe Norton commander became a synonym of DOS\ninterface and many users did not even understand that this is an add-on\nprogram.\n\nIn 1990 Peter Norton sold his company to Symantec to pursue his interests\noutside programming. John Socha left the company after the merger and created\nhis own company, which was later acquired by Asymetrix. He continued\ncooperation with the Norton division of Symantec and wrote for them several\ngood computer books including classic introductory assembler textbook Peter\nNorton's Assembly Language Book for the IBM PC .\n\nSymantec first displayed some lukewarm support for this cash cow, but with the\nintroduction of Windows killed it (as well as some other brilliant DOS product\nit acquired -- XtreeGold). Later they understood the mistake they made and in\n1997 there was a reincarnation attempt: Norton Commander for Windows 1.0 was\nreintroduced in the Symantec product line. But talent was already gone and it\nwas \"too little, too late\" and after version 2.0 it died again (still as of\nJanuary 2003 you can buy Norton Commander for Windows 2.0 in Europe,\nespecially in Eastern Europe). Not that I advice you to do that :-)\n\nI would repeat it again that OFM can increase the productivity of sysadmins\nseveral times, especially for performing complex operation on Unix-style\nhierarchical file systems. For some unknown reasons no other file manager can\ncompete with OFM in performing complex copying or moving of files on the\ndirectory tree. I several time managed to win a bottle of wine competing\nagainst Unix administrators who used only command line, and believe me as\ntypists they were much better them me. The only other tools that I know, that\nhave a similar semi-religious status with its adherents (but in a different\narea) are Xedit and vi editor (see my Orthodox Editors for details). That's\nwhy I consider OFMs to be a must (along with orthodox editors) for any\nadvanced user, sysadmin or webmaster (both Windows and Unix). As I wrote in my\nbook:\n\n> One of the most distinctive advantages of OFMs is that the productivity of\n> the power users is really amazing, especially in the command-line\n> environment. To the uninitiated it often looks like a magic -- the speed\n> with which an advanced user can perform complex file operations. It looks\n> much like playing piano. Advanced user probably have \"motor maps\" for\n> typical operations that are executed on subconscious level much like a good\n> piano player can instantly recognized specific accords in music notation.\n\nOFMs can be found on all major and minor operating systems including all\nflavors of UNIX, OS/2, all existing versions of DOS, Windows 3.1, 9x, NT and\neven PalmOS and Personal PC. Actually OFMs probably represent the most\nportable family of filemanagers in existence (Xtree is also a very good\nfilemanager available on several platforms, but not that many; Windows\nExplorer is an average filemanager that was also widely ported to almost any\nOS in existence because of the influence of Microsoft Windows).\n\nThe first and the main advantage of OFMs is simplicity and stability. Attempts\nto radically enhance this simple, Spartan interface largely failed. Also after\nthe first three years of using OFM most file operations can be performed so\nfast that usefulness of further improvements might be marginal ;-)  \n---  \n  \nThere is now a large number of OFM users who have more then 20 years\nexperience with this category of file managers, wand who while achieving\namazing productivity due to multi-year day-to-day experience, still are\npolishing and improving their skills. Few other types of file mangers can\nboast such dedicated and \"hardcore\" user base. And that includes myself. I use\nOFMs daily for the last 23 years. And my memorized keyboard shortcuts and\ntricks that I first learned using Norton Commander 2.0 or 3.0 are still\napplicable to modern OFMs. And I am still finding some new features of tricks\nthat increase my productivity, some (or most ;-) of them I was aware at some\ntime in the past 20 years but forgot ;-).\n\nActually forgetting useful functionality is a problem as one fundamental\nshortcoming of relying of keyboard shortcuts is that there way too many of\nthem. This is a problem that require paying special attention to help\nfacilities. OFM always have had a bottom line (or bottom menu as item are\nclickable by the mouse) that describes function of each of F1-F12 keys and if\nCtrl or Alt is pressed and hold this dynamic \"mini cheat sheet\" changes\naccordingly. This feature needs to be implemented uniformly and extended to\nall dialogs.\n\n## Understanding OFMs as sysadmin IDE\n\nThe right way to look on OFMs is not as on file managers, but as an IDE for\nsysadmin. That means the quality of shell terminal window provided is of\nparamount importance for OFMs and the role of user menu is central.\nUnfortunately most current implementation are very weak in this area and that\nmight be the reason OFMs did not got the popularity among sysadmins they\ndeserve. Some like Total Commander treat shell terminal window functionality\nlike red hair step child despite availability and great productivity enhancing\npotential of PowerShell on Windows. In Unix OFMs the low quality of shell\nterminal window implementation (that should be equal to GNU Screen split\nwindow implementation) in my view greatly influenced the fact that particular\nOFM implementation have difficulties to attract critical mass of sysadmins as\nis visible from scarcity of manpower and development resources in most\nimplementations.\n\nUnfortunately most current implementation are very weak in this area and that\nmight be the reason OFMs did not got the popularity among sysadmins they\ndeserve. Some like Total Commander treat shell terminal window functionality\nlike red hair step child despite availability and great productivity enhancing\npotential of PowerShell on Windows. On Unix quality of shell terminal window\nimplementation (that should be equal to GNU Screen split window\nimplementation) in my view greatly influence whether particular OFM\nimplementation can attract critical mass of users, or not.  \n---  \n  \nSimplifying the reference implementation for OFM terminal window\nimplementation should serve GNU screen. Anything less than make them much less\nattractive for Unix sysadmins. That also means that internal viewer and built-\nin editor are very important, \"first class citizens\" parts of OFMs and\nimplementation of them should get attention they deserve. The quality of their\nintegration with panel-based file management subsystem by-and-large-determine\nthe quality of this IDE. In this respect pioneered by Midnight Commander\neditor user menu is an important step forward and should be implemented in\nother OFMs, especially Unix/Linux OFMs. I would say that without this feature\nas well as dynamic user menu (also pioneered by Midnight Commander) OFM looks\nlike second rate tools. Unfortunately Midnight Commander is not that perfect\nin shell terminal window implementation although there is a progress from\nversion 4.6 to version 4.8 and implementation in version 4.8 while far from\nperfect looks more sysadmin friendly.\n\nThey can also serve the role of IDE for webmasters of the sites that use\nplain-vanilla HTML (as opposed to database driven sites). With ftp and SSH\nvirtual filesystems available for such site an OFM is a quintessential\nWebmaster tool. It definitely plays this role for Softpanorama. This unique\nrole that OFMs can play as a webmaster IDE fuels my interest in the field\nafter more then two decades of usage.\n\nAlong with integration of file managers, internal viewer and editor OFM also\nintegrate functionality of a dozen command line utilities including but not\nlimited to:\n\n  1. touch via files attribute dialog\n  2. tar -- via Archive VFS\n  3. gzip -- same\n  4. bzip -- same\n  5. zip/unzip - same\n  6. ln -- via F5/F6 operations ability to create symbolic and hard links\n  7. chown -- via change attributes dialog\n  8. chmod -- via change attributes dialog\n  9. find -- via FindFile dialog\n  10. grep -- via FindFile dialog\n  11. more -- via internal viewer\n  12. cd -- via NCD panel\n  13. history -- duplicating management of command history with the additional recoding of history of all dialog boxes.\n\n## Comparison Table (from Ch.2 of the OFM book)\n\nOFM name (and link to a book chapter)| NC Norton Commander| FC File Commander|\nDN Dos Navigator| FAR Far Manager| MC Midnight Commander| NCW Norton Commander\nfor Windows| Total Commander| WinSCP| Krusader| EmelFM2| FreeCommander| mu\nCommander| Altar Salamander  \n---|---|---|---|---|---|---|---|---|---|---|---|---|---  \nOFM Type| Classic| Classic| Classic| Classic| Classic| GUI| GUI| GUI| GUI|\nGUI| GUI| GUI| GUI  \nStatus of development (active if the the version is less then six month old,\nstalled if a year, frozen if more the a year)| Aban- doned| Stalled| Stalled|\nActive| Active| Abandoned| Active| Active| Stalled| Stalled| Stalled, but\nforum is active| Active| Stalled  \nLast stable version| 5.0| 2.4 (as of March 2011)| ndnv 2.31.5309 (Mar 23,\n2010)| 1.75 build 2634 and 2.0 build 1897 (Feb 03, 2011)Far 3.0 built 2884|\n4.8.1 (Sept 2012)| 2.01| 8.01 (Aug, 2012)| 5.1.5 (May,2013)| 2.0.0/2.4.0-beta2\n(Mar, 2011)| 2-0.8.1 (2012-04-20)| 2009.02b| 0.9 (as of July, 2012)| 2.54,\nSept 2010  \nOS supported| DOS| OS/2, Win 9x,Linux, Solaris, FreeBSD| Win, Linux (ndn)|\nWin| Linux & Unix| Win 98, Win2000, Win XP| Win XP, Win 7, Win 8| Win XP, Win\n7, Win 8| Linux, KDE| Linux, GTK+| Win| Multi-platform (Java)| Windows XP and\nWin7  \nSize of compressed distribution| 1.4M| 0.3M| ~1M| 1M| 1.56 M| 2M| 3.5M| 4.78|\n4M| 1M (source)| 2.54M| 4M| 7MB  \nSoftware type and download link (if different from the development|\nCommercial| Shareware| Open source: 2 major versions: ndn & dnosp| Far 1.75 is\nfree,Far 2.0 is open source| GNU License| Commercial| Shareware| GNU License|\nGNU License| GNU License| Freeware| GNU License| Commercial  \nPrice| $90 ?| $35| $0| $25| $0| \u00a321/\u20ac 35| $44/\u20ac 32| $0| $0| $0| $0| $0| $29.95  \n  \n## Ten OFM Commandments ;-)\n\n\"I have found Jesus. He came to me in the form of muCommander.\"\\-- A happy\nuser  \n---  \n  \nThere is a large variety among OFM implementations. Moreover different OFMs\nare good for different situations and tasks -- there is no and never will be\nthe best OFM for all situations and environments. But they all share same\ndistinctive interface framework and the following basic features:\n\n  1. Spartan interface with unique, \"non-fashionable\" but very functional structure: two symmetrical panels that display files in two directories and a minimized (but extendable to half and full screen) telnet-style terminal session with local host ( command line ) at the bottom of the screen.\n\n     * One panel is current (active) and second is passive; they are switchable with the Tab key and identical in functionality. For all \"binary\" file operations (copy, move, symbolic link, etc) the target by default is the directory of the opposite (passive) panel.\n     * Unique (incompatible with usual Windows assignments) keystrokes assigned to each function. Traditional OFM key assignments are: F1 - help, F2- user menu, F3 file view, F4 - file edit, F5 - file copy, F6 - file move/tree move, F7 - make a directory, F8 - file delete, F9 - top menu, F10 - exit. Those key assignments are also depicted on the bottom line as buttons clickable by the mouse. And this line also serves as \"sheet sheet\" as content changes if you press Alt, Ctrl or Shift key. Although functional key assignments are traditionally preserved in OFM implementations, they are not a part of OFM paradigm. If remapping of the keys is implemented (for example in a way, similar to vim implementation), than any other combinations (including more Windows like) can be used. Again only semantics of the operations is fixed and should be implemented \"as is\", although consistency of key assignments has value as \"old finger habits die hard\" ;-).\n     * The ability to perform most functions without mouse which is especially useful on the laptops and now palmtops as well as for troubleshooting; mouse serves as a useful supplementary, not primary input device in OFMs.\n     * Unique help line at the bottom of the screen (below command line) that displays the functions of F-keys and values in which change if you press and hold Ctrl, Alt or Shift keys. In the latter case it should depict function performed by corresponding shortcut, say for F5 functions performed by Ctrl-F5, Alt-F5 and Shift-F5 shortcuts. The same approach should be implemented (but often is not) in dialogs as one fundamental problem with applications that emphasize usage of keyboard is \"too many shortcuts\" problem. This OFM feature significantly alleviate the pain and should be treated as fundamental feature of interface, not something superficial that can be implemented or not.\n  2. Seamless integration with the shell making OFMs a synonym to \"Visual shell.\". There are two features that are obligatory for orthodox file managers\n\n     * Command line windows can be extended either gradually (expanding/shrinking line by line) or at least in two steps (half screen/full screen) providing native shell window like in telnet to the localhost. Any command line OFM should provide perfect emulation of telnet terminal capabilities for supported sizes of command line window with the ability to view more data by expanding the window (with size increasing by line or in larger chunks, for example from one line to half-screen and then to full screen). In all cases where more then one line window is present the user should be able to view (and possibly scroll) the results of execution of commands entered on the command line like in regular telnet client (in this case telnet to localhost). This command window capability links OFMs with famous Unix program GNU screen and derivative Spartan text-mode windows managers like Ion (with fully documented configuration and scripting interface on top of the lightweight Lua extension language), Ratpoison, twin, evilwm, and several other that I forgot to mention.\n     * You can insert elements from the panel (such as the current file on active and passive panels, path to active panel, path to passive panel, selected files, etc) in the command line. This capability should be available both using keyboard shortcuts (Ctrl-F for current file. Ctrl-[ and Ctrl-] for path to left and right panels, etc) and using macros (for example \"%f\" for the current file, \"%F\" for the current file in the passive panel, \"%d\" for the current directory name, \"%D\" for the same on passive panel, \"%t\" for the currently tagged files and \"%T\" for the same on passive panel). The ability to assemble complex commands on the command line using elements visible on the panel is an interesting alternative to drag and drop. It allows richer functionality, as operation performed is not fixed unlike drag and drop. The same macros (or environmental variables) should be available for scripts in user menu (F2 menu) and in extensions menu.\n  3. The ability to extend file manager functionality with custom scripts providing users with script library (called user menu and traditionally available via F2). Both command line and GUI-based OFMs should have the ability to create a library of \"helpers\": simple (or not so simple) shell scripts accessible using F2 . You can invoke them by assigning each of them special hotkey. Scripts should permit macro variables that reflect the current status of both panels (path to active/passive panel, the current file on active/passive panel, selected files , if any, etc). This simple, ingenious, and very functional extensibility with custom shell scripts make OFM very attractive for system administrators. They are useful for advanced users as they greatly simplify working with archives, ISO and so on and so forth. Actually in late 80th, early 90th of the last century in the former USSR region many DOS users never suspected that any other DOS interface exists: OFM interface was the standard and the only DOS interface they knew.\n  4. The availability of scripts associated with file extensions via special file extension menu and invoked by pressing Enter on the file with the particular extension on a panel. This is another way to extend file manager functionality and file extension associations were pioneered by Norton Commander. Special customizable extension files that permit context-dependent invocation of scripts and programs on a file click (execute), F3(view) and in F4(edit). Customizable file extension menu should provides automatic passing of various panel-based parameters to shell scripts via macro variables (or environment variables) that were discussed above (active file, path to left and right panels, list of selected files, etc)\n  5. \"History for everything\" approach to user input in command line and dialogs. Starting from Norton Commander all OFMs provided the history of commands. Modern OFMs add to this the history of directories visited, files edited, selections, etc. Some advanced OFMs like Midnight Commander add to this the idea of \"file/text completion for everything\".\n  6. Integration of application protocols into file manager framework via virtual file systems(VFS). Most popular are ftp client VFS and archive VFS. Commonly they are implemented as plug-in based on some defined plug-ins API. Less popular, but still very important are Search VFS and \"flat tree\" VFS. They are all based on the same concept of a virtual file system:\n\n     * FTP virtual file system -- historically important capability which provides that capability of working with ftp session like with the local filesystems. Perfect for complex ftp operations and as powerful as most standalone GUI FTP clients. Now with the availability of FTP virtual filesystems and ssh is less useful.\n     * Archive VFS: Extremely polished VFS-based interface with archives (gzip, zip, rar, arj) and, in case of Unix OFMs, installation packages (RPM). It was historically first VFS implemented in OFMs and dates back to NC3 extensions.\n     * Search VFS: This VFS is usually implemented via \"panelize command\" and permit viewing on a panel as in virtual directory all the files and directories that were found in a particular search operation.\n     * XTree or \"Flat tree\" VFS. Most modern OFMs provide the possibility of viewing all files in a branch of the tree in a \"flat\" representation (often bound to Ctrl-B). This representation is extremely important for working with files dispersed into several directories as is often the case in most application installations.\n  7. Tight integration of text files viewer and editor within OFM. An integrated viewer for text files and an integrated editor provide some additional and valuable integrating capabilities\n\nBoth editor and viewer should be able to work in full screen mode (default)\nand \"panelized\" and should have access to information on both panels (current\nfile, path to the active/passive panel, etc) and ability to treat selections\nas objects to past into command line (for example for moving to directories).\nBoth editor and viewer should permit pasting information to from the editor to\npanel (for example, change directory to selected, paste selected into command\nline, etc) and getting information from panel (names of selected files, etc)\nand selected parts of the command execution screen back into the editor.\n\n     * Editor\n\n       * Editor should usually support syntax coloring and regular expressions search (like in MC and FAR).\n       * There should also be a possibility of \"sequential edit\" or viewing of selected files. In this case closing the file switches editor or viewer on the next selected file.\n       * The editor should have an information line at the top and key shortcuts buttons at the bottom (similar to the panel view help buttons); the position of cursor and the current letter under the cursor should be visible both in ASCII and hex at the editor information line.\n       * Editor should be able to execute script on selected part of the buffer or all the buffer like vi ! command, providing ability to extend its functionality via editor menu similar to user menu.\n     * Viewer\n\n       * The viewer should has ASCII and hex modes of viewing files. In panelized mode it should allow viewing selected files one by one: closing of one file opens the next selected file in implicit loop. Previous file is deselected (behavior similar to copy and move operations on selected files).\n       * There should be a possibility of switching from the viewer to the editor and back.\n  8. The ability to add search results to a browsable virtual panel (panelize command) and a special \"directory only\" search in a special \"find folder\" panel. There should be abilities to find an arbitrary file(s) in the filesystem with capabilities equal of better then Unix find and grep utilities, but with more friendly interface. All panel operations that make sense (view, edit, copy, move, rename, delete) operations should be available from panelized search results:\n\n     * The possibility of viewing and editing found files using built-in or external viewer or editor any found file.\n     * Possibilities to create a panel out of search results or copy them to temporary panel and work with it as with regular directory panel (panelize command). This is essentially another variant of search VFS.\n     * Ability to search directories only using NCD derived quick search method on directory trees: In OFMs there are two distinct tree panels:\n\n       * A regular tree panel. Activated by Ctrl-T. In this case tree replaces the passive panel Tree panel should work in three modes:\n\n         * The default mode: The cursor can be moved independently and does not affect the opposite panel. Pressing Enter opens the directory under the cursor in the opposite panel. Copy and Move operations from the opposite panel are targeted to the current directory on the tree. Quick view mode (\"dive into the directory mode\") should be available via hotkey Ctrl-Q. No such mode exists. Navigation is limited to cursor keys and Enter. Quick search is available but the is no capability to find the next directory with the same prefix.\n         * Quick view mode (\"dive into the directory mode\") Switchable with Ctrl-Q. This mode is similar to the behavior of Windows Explorer movement of the cursor opens the directory under the cursor in the opposite window. Mostly used for quick traversing of the directory tree in a mode similar to quick view with directories opening as we move the cursor (quick diving into subdirectories). Quick search should be available.\n         * Information mode (Ctrl-L). Similar to quick view mode. But in this case the movement of the cursor on the tree panel opens not a listing of files in the directory but the information window should be shown that calculated statistics for the directory (number of the files, total size, number of subfolders, attributes, owners, etc).\n       * The directory search panel. Activated by Alt-F10. Also present in the top Command menu. This panel should instantly provide a quick search window. It should be also accessible from copy/move dialogs (via F10) and it is often used not only for the \"directory completion\" and traversing of the tree, but also for the quick selection of the target directory for copy/move operations.\n  9. Client-server connectivity. There should be some kind of client-server connectivity between two instances of OFMs (preferably SSL based TCP/IP connection, or unencrypted TCP/IP connection like in MC, or connection via serial cable like in NC3-NC5, or parallel cable and USB cable like in Total Commander). This is a fundamental feature because it dictates client-server architecture of OFM with client part and server part separated by some kind of API. Generally one instance OFM should be able to perform as a server (represented by one panel) and second as a slave (represented be the other panel) with the ability to copy files and perform commands on the remote host.\n  10. Extensibility via plug-ins mechanism. System of plug-ins that extends functionality of the OFM (FAR, Total Commander) and corresponding API. This is important for OFM architecture as it separates panel interface from the rest of OFM. FAR is now open source and its plug-in API can serve as an inspiration for future developers.\n\nAgain those are Commandments and like in everyday life not everybody is\nobserving them ;-). The worst situation is with providing ability to extend\ncommand line at the bottom to command line window. Please note that This\nunique, innovative capability of Norton Commander (the one that makes it a\ngraphical shell) for some reason is rarely implemented correctly if at all.\nPlease remember that the original name of Norton Commander was VDOS -- visual\nshell for DOS.\n\nPlease remember that the original name of Norton Commander was VDOS -- visual\nshell for DOS.  \n---  \n  \nEven such leading OFMs like Total Commander and Midnight Commander do not\nimplement them correctly. For example, in Total Commander just basic command\nline functionality is available without ability to extend command line window\nto half screen of full screen.\n\nIn Midnight Commander only full screen command line window available but its\nfunctionality is limited (no ability to extend command line window to half\nscreen or expand it line by line as in FAR) and behavior of command line\nwindow is different from typical bash shell command line windows which makes\nit unattractive for power users (compare with GNU screen \"split windows\" mode,\nwhich should serve as reference implementation of this feature). In other\nwords MC command window implementation represent example of a cheap hack.\nParadoxically Unix OFMs users (and first of all Unix sysadmins) who would\nbenefit from this functionality most (as culture of using command line is\nstrongest in Unix) need to deal with the weakest in implementation of this\nfeature\n\nNotwithstanding differences and weaknesses of existing implementations three\nkey features stands out and are the key postulates of faith of the \"OFM\nreligion\":\n\n  * Three tiles interface with two upper tiles representing symmetrical panels that display two directories and lower \"wide\" tile command line windows with shell interface. Among two upper panels one is called active and it displays the current directory ($PWD in Unix) and the other passive and displays the directory the user navigated to while it was active). Tab changes active panel to passive and vice versa. Each or both can be hidden exposing command line windows. Size of active and passive panels should not be fixed and there should be at least possibility to shrink them to 50% of the screen.\n  * The ability to invoke user scripts with context elements from both active and passive panels such as the current file, path to active panel, path to passive panel, etc. The latter capability is provided via the set of macro variables representing elements of the active and passive panels. User panel contains small self-contained scripts that expend the functionality of OFM and in advanced OFM can be hierarchical and/or dynamic (only elements that make sense based on the current context are present in the menu). User menu is usually invoked via F2. The same set of macro variables can be used in command line. In addition they can re represented by shortcuts such as Ctrl-Enter (current file), Ctrl-[ path to left panel, Ctrl-] -- path to right panel, etc. The same shortcuts can be used in internal editor, which should have capability to send selections back to command line.\n  * The ability to perform any operation with the keyboard and the ability to assemble complex commands on the command line from elements of the panel (as well as launch scripts that inherit values of elements of panels via macro variables). Mouse functionality is a nice addition and can be more efficient the keyboard for some operations, but still keyboard alternatives should be provided in each and every case. Ability to assemble complex commands on the command line using predefined elements of left and right panel actually is step forward in comparison with drag and drop and allow richer functionality, never possible with drag and drop. In can be called drag and drop on steroids.\n\nComplex file operations using mouse is not faster and as cases became more\ncomplex are less convenient then performing the same operations using\nkeyboard-based interface using the file manager that implements Orthodox\ninterface paradigm. In a way orthodox means \"having the right\nopinion/following the right practice\". And using full power of keyboard (while\nnot rejecting mouse) looks exactly like this. Provided by OFMs unique\ncombination of GUI elements with the preservation of the power of command line\nis superior to any \"mono\" interface: either \"classic Unix command line\"\ninterface or Windows-style GUI interface. There are several reasons for that.\nSee GUI vs Command line interface.\n\n## Recommendations for Users\n\nOFM are tools written by programmers for programmers, sysadmins and power\nusers. The elite of PC users. We can distinguish between two levels of OFM\nskills:\n\n  * Power user level when the user can perform basic operation without looking into help and realize most of the advantages of OFM. Such users typically use OFM strictly as file manager, not so much as sysadmin IDE, and usually do not need or make use of such features as user and extension menus and plugin API. Still power user actions on keyboard often remind for uninitiated the way top piano players perform, achieving tremendous speed for pretty complex and non-trivial file manipulations. This is the level most users can easily achieve with some effort and experience. With time methods of navigating filesystem used by user typically became more sophisticated automatically. For example usage of Alt-F10 for selecting new directory. You need to discover it once and its benefits are so obvious that you will user it ever since. Same is true for usage of filtering (Ctrl-I) for browsing only \"relevant\" files and usage of temporary panel for working with \"projects\" and other similar features.\n  * Master level is a more difficult to achieve level at which user is able to thinks about file operations in \"OFM-way\" and can generalize them into user menu items and plug-ins. They customize their OFM setup with keyboard macros, custom entries in the user menu and extension menu as well as tuned to their tasks set of plug-ins which further increases productivity. Some can write their own plugins. But the key criteria of \"master level\" is the ability to create your own user menu entries and modify extensions menu to your needs. A user without knowledge of shell (or other suitable scripting language) and without his own original menu entries and custom extension definitions can't be considered to be on master level, no matter how well he can perform on the keyboard.\n\nAlthough basic skills can be acquired in less then a week and gradually can be\nenhanced to \"power user\" level, this is not true for master level skills.\nFirst of all getting to this level require knowledge of shell (or other\nscripting language). Also you need to spend some time studying default \"user\nmenu\" supplied with mc (for a given user many entries are redundant and he/she\ncan start with deleting them) and, if possible, experience of your colleagues\nin this area. But return of investment is tremendous -- you really will be\nworking in more productive environment, environment productivity of which\ncan't be matched with any number of \"off-the-shelf\" tools.\n\nFundamental problem with any interface oriented on extensive keyboard usage is\nthat the set of commands is large. That means that some important commands and\nmethods are easily forgotten without practice (this situation is typical for\nany tool with extensive command set, such as vim). Based on my more then 20\nyears experience with OFM (I started using them in 1989) I would recommend the\nfollowing methods of enhancing your skills:\n\n  * High level of OFM skills (like piano playing skills, or arms mastery) require constant practice. Also, the basic level is perfectly fine and most users can be very productive on this level. After all, we rarely learn things we can do without :-). IMHO the real stimulus to go to the real depth of OFM interface capabilities exists only for \"netslaves\" who spend eight or more hours daily behind the screen ;-) Without practice skills are quickly lost and only gradually can be restored to previous level; it happened to me more then once.\n  * Keep a logbook. It helps, especially at the beginning to write a daily entries in the log and reread them. That speeds acquiring the necessary skills. White down tips and procedures for typical situations, then rewrite and improve them. Some most efficient methods of performing typical tasks are often discovered accidentally when you deviate from your typical path and are easily forgotten if you never wrote them down. Some of repetitive tasks that you have found ways of efficiently performing with OFM can be automated using macros and user menu.\n  * Maintain your own cheetsheet. Put it on the top of your terminal (for example using one of those plastic cutting boards that you can buy in any store) or buy a mousepad that allow inserting paper in it. Start with something simple and readily available. Exclude items that are already etched in your memory. Provide in Cheetsheet references to pages of the log where you discovered and or discussed particular keyboard shortcut or tip. It is not uncommon to discover new methods of working with particular OFM even after ten years of intensive daily usage.\n  * Create and maintain your own set of keyboard macros and own user menu. If your OFM does not support keyboard macro recorder use some external macro recorder like expect, AutoHotkey, macro capabilities of terminal emulator like TeraTerm or buy a programmable keyboard (less then $50 new, $30 used). This is simple and tremendously powerful method for extending OFM functionality. Some OFM (FAR and Total Commander are two notable examples) support plug-ins which is even a better tool, but unless you are a programmer you are limited to plug-in written by others which might be not exactly what you need. But just with keyboard macros and user menu parameterized mini-scripts regular sysadmin and/or power user can do a lot. Really a lot. Allocate time on documenting them and experimenting with new, potentially useful entries.\n  * If your OFM has user forum participate in it (for example both Total Commander and Midnight Commander have active web forums). Post questions and try to answer the questions of other users.\n\nTime spend on those activities will be repaid many times. Learning OFM is one\nof the best investment in time you can make. Good luck !\n\n## Some recommendations for Orthodox file managers designers\n\nThere is an old saying that \"Really innovative ideas are never stolen.\" It is\nvery true because \"innovative\" means ideas or products that go against\nestablished practice/fashion. Just read Talk: Orthodox file manager -\nWikipedia, the free encyclopedia to get some insight into related mentality\n(Wikipedia actually removed the page \"Orthodox file managers\").\n\n> Why are they called Orthodox? --Error 23:55, 12 March 2006 (UTC)\n>\n>     Exactly. Because some 'tard' here is totally dependent on the MU way of\n> thinking, never progressed beyond, and is not trying to convert the world.\n> Of course there is nothing orthodox about them. Try 'crippled' - a much more\n> appropriate term. I suspect the MU Commander people are behind it, shilling\n> their own product. It's not ethical for Wiki. \u2014Preceding unsigned comment\n> added by 86.213.91.157 (talk \u2022 contribs)\n>\n>     The existence of that page just goes to show what a joke Wikipedia is.--\n> 88.149.233.68 09:17, 21 May 2007 (UTC)\n>\n> Who dreamed up this definition? A Google search for \"Orthodox file manager\"\n> yelds a measly 305 results. Moreover, there is NO MENTION of this thing in\n> the Jargon file. The term \"orthodox\" is NEVER mentioned in GNU Midnight\n> Commander 's home page. This entry is either a joke or somebody's personal\n> \"invention\" and should be removed. --88.149.168.128 10:35, 28 November 2006\n> (UTC)\n>\n>     I agree. --24.21.72.22 16:16, 26 March 2007 (UTC)\n>  \n>\n> Third the motion. So we should now seen this page removed, right? \u2014The\n> preceding unsigned comment was added by 86.213.91.157 (talk) 16:13, 5 May\n> 2007 (UTC).\n>\n>     I think everyone knows your opinion. You're not getting very far by\n> writing (unsigned) criticism all over this page. We had the AFD following\n> the comments from 88.149.168.128. Since then, there seems to have been two\n> complaints about the name of this article & both came from anonymous IPs. I\n> think that deletion of this article is unlikely, but we do have a process\n> for that if it is something you believe so strongly in. A move might be more\n> reasonable, since the article (while not well written) is hardly \"nonsense\"\n> & does describe something worth describing. I don't think anyone would argue\n> that \"orthodox file manager\" isn't a neologism. However, it is a useful one.\n> It has been adopted on the interwikis, by DMOZ, and by others. --Karnesky\n> 23:17, 5 May 2007 (UTC)\n>\n> Inappropriate\n>\n> Unless the term is a de facto standard - which it is not - then the use of\n> 'orthodox' to describe something as retarded as a Norton file manager is\n> tantamount to shilling and advertising. I strongly object to this. This page\n> was evidently started over two years ago from an IP in China. I call on Wiki\n> to show more discretion and as others I call on Wiki to IMMEDIATELY remove\n> this STUPID PAGE. If you don't - we shall. \u2014Preceding unsigned comment added\n> by 86.213.91.157 (talk \u2022 contribs)\n\nUsually reception on innovative ideas is deeply hostile and there are great\ndifficulties even to convince potential users to try them or venture\ncapitalists to finance the project. Inertia on one hand and (opposites meet\n;-) fashion on the other rule IT (I think IT is more subjected to fashion\nwhims then woman clothing with a new fad each second year playing role of the\nlength of woman hemline and style of shoes; right now this is cloud computing\n;-). As Charles Simonyi who oversaw the development of Excel and MS Word at\nMicrosoft once noted:\n\n> \u201cI have always worried that when these claimed incredible new benefits come,\n> we will lose all the old ones. Then it becomes a kind of trade-off situation\n> where you have to see if you are better off. I like clear wins. I would bet\n> on improving what we have while maintaining all the benefits and eliminating\n> the drawbacks, rather than introducing new games where there are new\n> benefits and new drawbacks.\u201d\n\nOFM contains a set of innovative ideas that were only recently analyzed and\nsomewhat generalized despite 25 years history. The level of adoption of this\nset of ideas (and first of all the idea of graphical shell) is surprisingly\nlow. It is very low even among Unix sysadmin, who theoretically should be\nearly adopters of this technology due to obvious OFM style visual shell\ninterface advantages over plain vanilla command line interface. One reason for\nthis that proper implementation of shell terminal window capability in OFM is\nrare and this feature is mostly treated like red hair step child in current\nOFM implementations.\n\nThat's why I am still working on analyzing the set of key ideas behind OFMs\nand popularizing this set of ideas to wider audience. I think that while each\nnew implementation is an important step in popularizing the OFM concepts, only\nthose implementation which try fully integrate into the design the visual\nshell \"paradigm\" and the idea that OFMs is actually a specialized IDE for\nsystem administrators and power users (that that entails deep integration of\nbuild-in editor into OFM along the line of editor user menu pioneered by\nMidnight Commander) can scratch a deeper itch and have a lasting value.\n\nCommercial success of OFMs was and is limited and there little chance that\nsituation might change in the future, although some market openings probably\nexist for smartphone which are now much more powerful then old IBM PC (and has\nbetter screens). But in general this type of software does not feed developers\nwell. Consider this as a special kind of academic research. Actually all open\nsource development can be viewed this way.\n\nHistory suggests that OFM as research field has difficulties in attracting and\nretaining the most talented developers. John Socha switched to other projects\njust four years after release of Norton Commander 1.0 (it was released in 1986\nand in 2000, one year after the release of NC 3.0 (1999) he left the company).\nIf we add, say, additional two years before the first release it would six\nyears in total.\n\nVladislav Volkov worked on his Volkov Commander even less, but manage to\ncreate a true masterpiece of assembler programming which even now looks\nincredible achievement (he started it being a student and did not even have\nhad his own PC at the time).\n\nEugene Roshal was involved with his OFM (FAR) approximately five years or so.\nSo far only Christian Gisler succeeded maintaining and enhancing his shareware\nTotal Commander for almost two decades...\n\nStill for young, ambitious developers that can be the field where they can\nprove their value as a programmers to the surprised world and learn quite a\nlot in the process. The latter part is probably the most important no matter\nwhat will be the final destiny of the product created and is one of the main\nattraction of open source in my opinion, making it somewhat similar to\nacademic research, In old day there was a saying that in order for a computer\nscience student to become a \"real\" programmer he need to write his own text\neditor. Now it can be reformulated that the student need to write file manager\nwith integrated viewer and editor. This way you really learn OS API, and learn\nto work with substantial codebase and experience problems typical for such\nprojects (including gradual decrease of enthusiasm ;-) on your own skin.\n\nMoreover, even small OFM projects are visible and have early adopters, who not\nonly stimulate you to overcome difficulties, but also provide some helpful\nadvice, or at least encouragement. Look at two very interesting projects\nrelated to creating vi-style OFMs ( ranger and vifm ). Linking OFMs with vi\nconcepts and vi culture proved to be a treasure trove of new ideas.\n\nJust don't expect the project last forever and be ready to move to other\nthings when you feel it became more of a burden then a education tool and\nwriting new code for it, and especially maintaining the old one, lost most of\nthe fun. But why not to try? There are visible gaps in functionality not\nfilled by current implementations. For example as I already mentioned Unix\nimplementation are surprisingly, dismally weak in implementing the idea of\n\"visual shell\" even on FAR level. If you manage to advance OFM in this\ndirection you may attract enough following to continue the project when you'll\nleave it.\n\nActually for open source project it can happen that project died and then\nafter several years the codebase is resonated with somebody own ideas and is\npicked up by a new talented developer who continued it for a while (that\nhappened with FTE editor and GNU screen). That's the beauty of open source\nwhich again make it close to academic research, for example research in\nmathematics (one may argue that each program is a kind of specialized\nmathematical theory).\n\nBut it is not always that fact that a talented developer picks up the code\nbase. Sometimes the situation is quite opposite.\n\nSo you do not need to start your project from scratch. You can pickup some\npromising but abandoned project and try to move it one step further. If you\ndoing so it is important to resist natural temptation to wile out all traces\nof the original author. Again this is more like academic research so please\ntreat them as you want further generation of OFM developers to treat your\nmodest contribution to the field. Among project that I think have value for\ndeveloping further are\n\n  * All Python-based OFM projects as well as Perl and Ruby-based projects, as scripting languages can provide a better implementation language for OFMs than alternatives.\n  * Bash Commander by Sergey Vakulenko\n\n##### This is a project of Sergey Vakulenko, the author of deco -- one of the\nfirst OFM for Unix. Looks like abandonware. Still the direct integration with\nshell is the best, the most optimal way of implementing OFM, which in essence\nis nothing more that an attempt to create a graphical shell. The problem here\nis the most shells are moving target and as they develop the codebase needs to\nbe resynchronize with each new version. Which in most cases dooms the project.\nSo the only way such a project can be successful is when it is integrated with\nthe development of shell itself. Some shells, such as ksh93 are pretty stable\nand development is almost stopped. For them such a project is more viable.\nAlso for shells that undeservingly are sidelined, such as zsh, this may be a\nchance to get into mainstream, as zsh integrated with OFM leaves \"pure\" bash\nin the dust.\n\n> > 'Bash Commander' is a version of the GNU Bourne Again shell extended with\n> two-panel file manager. Visit http://groups.google.com/group/bashc for\n> project news, FAQ, discussions etc.\n\n  * Minimalist OFMs such as deco.\n  * Implement OFM as clean client-server system. Here is some relevant information from Chapter 7 of my eBook:\n\n> Starting from version 3 Norton Commander has client-server capabilities\n> (initially via serial null modem line). It was clear even in tiles of DOS\n> that OFM actually consists of two parts:\n>\n>     * Client -- part that provides typical for OFM interface\n>     * Server -- which consists of different programs performing actual\n> manipulations with the filesystem\n>\n> Now those capabilities are reimplemented using more modern technology.\n> Client part can be implemented as a an extension of a browser and there is\n> at least one such an implementation: firecommander in Google Projects\n>\n> CGI interface looks pretty adequate for communication with various program\n> that perform user actions. Moreover CGI-based interface between client and\n> server parts of OFM make it almost infinitely portable: all you need to run\n> it on a new platform is some basic web-server. Browser with JavaScript\n> capabilities can be on other platform. And Web server implementations exist\n> for any platform.\n>\n> The second approach for the creating of truly portable OFM is to use Java\n> for both parts. Java can be run inside the browser and that solve the client\n> part of equation. And Java can run on any server and that solve that server\n> part of equation.\n>\n> In other words the principal idea here is to split OFM into two independent\n> parts communicating well established and refined HTTP or HTTPS protocol.\n>\n> This is also provides an interesting capability for X11 based remote\n> solutions such as VNC for administering servers over dial-up lines or other\n> low bandwidth communication lines. Also in this case keyboard emulation can\n> be perfect and does not depend on idiosyncrasies of terminfo database on a\n> particular platform -- the issue that hunts Unix OFMs.\n>\n> Another reason is the crisis of several implementation, like Midnight\n> Commander, which grow codebase to the extent that it became a complex mess\n> of different libraries that are typical only for Linux. Which created\n> problems with portability and actually discourage usage such OFM as mc as\n> portability outside a couple of platforms (Linux and Solaris) is\n> problematic.\n>\n> In this case, even usage of traditional implementation of OFM using Java,\n> such as muCommander along with VNC represents much more portable solution as\n> long as JVM is already installed (which is true for all Unix flavors).\n\nOf course it is difficult to sustain project of pure enthusiasm and time will\ncome to leave it. Please provide documentation for the next generation of\ndevelopers, as they might come. Even if you abandon your project, you efforts\nare not in wait as any such project is a great programming school, the school\nthat you can't attend anywhere else for any money. And your experience in\ndeveloping OFM has a great value in itself as for the reason I explained\nabove, and so be it. Move on.\n\nThere are several ways to beat older OFM implementations in the same game,\ndespite having much small resources:\n\n  * To use scripting language as your implementation language or at least integrate scripting language (for example, LUA) into design from the very beginning\n  * Use programmable editor as a base of your implementation\n  * Use windows manager like GNU screen or Ratpoison as the base of your implementation\n  * Consider reusing some open source IDE framework\n  * Other possible avenues\n  * Adhere to standards.\n\n### Use scripting language as your implementation language or at least\nintegrate scripting language (for example, LUA) into design from the very\nbeginning\n\nA very promising way of simplifying codebase and lessening the amount of lines\nwhich are needed to achieve given set of OFM functions is to use a popular\nscripting language as implementation language and, simultaneously as a macro\nlanguage. Or at least try to integrate scripting language like LUA into design\nfrom the very beginning.\n\nTo make your effort more productive it is of paramount importance to use the highest level of language that you know well (or plan to learn; writing an OFM is perfect programmer training exercise) and that is available on the platform of your choice. In case of scripting language you can get some decent functionality with a manageable for regular human size of codebase (say less then 5K of lines instead of more common for light-weight OFMs sizes like 10K lines; please note that mc is ~72K lines including comments if we count them via command cat `find ./src` | wc -l)\n\nI think it makes great sense to restrict yourself to certain number of\n\"kilolines\" and try to do something useful within those restrictions. Projects\nlike mc have pretty high barrier of entry, although they are modular and the\nlargest part probably less then 45K lines with comments or ~25K without them.\n\nIf you will feel interest and see perspectives for the project, you can later\nabandon those restrictions or, better, start anew with a new level of\nunderstanding of the problem and the benefit of already acquired experience.\nAbandoning a couple of thousand lines is not that painful. Abandoning 10K\nlines written partially on weekends and stolen from family and friends is\nquite another story (despite the fact that a very good programmer can easily\nwrite 1K lines in a weekend). Another benefit of small codebase is that you do\nnot need to kill yourself in endless debugging sessions.\n\nIn any case for those who are rotting in some large corporation and feel that\nthey can leave their brains in the morning at home and still perform well this\nis one way to lessen the frustration from working in a large corporation and\nenjoying good salary, great benefits, access to the latest hardware and other\npluses that large corporation provide. Talented system administrators with\nprogramming abilities can definitely try this path as for them the level of\nfrustration after university is especially high and designing own or\nsupporting an existing OFM project provide immediate value in their primary\nwork environment. See Social Problem in Enterprise Unix Administration\n\n### Use a programmable editor as a base of your implementation\n\nClassic example of an application with a command line interface and a\nscripting language as a macrolanguage is XEDIT and its derivatives KEDIT and\nTHE. The latter is an open source implementation. While it uses REXX which is\nnot very popular those days, all key implementation ideas are applicable to\nany other scripting language. This way all options in panel configuration\n(sorting by specific attributes, filtering files of specific types, etc can be\ndelegated to this macro language and all you need to implement is the\nfiltering of file list via this user supplied macro. This alone saves provably\n30% of codebase. Even larger savings can be achieved by implementing panels as\nspecialized editor windows with read-only files in them. Editors and OFMs are\nactually two very similar projects and if you have editor of your liking with\nopen source codebase available this is probably the best way to learning it in\nprofessional level. Tight integration of built-in editor and filemanager is a\npromising but never properly implemented idea that still wait for some\nbreakthrough implementation.\n\nAs power users are generally very attached to their editors, you can try to\nimplement some minimal implementation of OFM within the framework available\nfor existing programmable editor. As OFMs are genetically oriented toward\nsysadmins, vi is a natural choice. Emacs is also a possibility but it way too\ncomplex to serve as a reference platform although usage of lisp or lisp-like\nlanguage for extending OFM like Emacs worth investigating.\n\nVIM is an obvious candidate and there are already several file managers\nimplemented for it. Similarly some implementations already exist for Emacs\n(Sunrise Commander) which was implemented on top of Emacs in elisp. Even if\nyour OFM project fail, after programming those extensions and learning API you\nwill became a real specialist in this editor. And deep knowledge of editor is\na tremendous asset in your professional career.\n\nYou can also leave the codebase alone and just to use ideas of editors in\nOFMs, for example the idea of distinct command set (: command in vi) and\n(piping from and into the editor which actually now is also present in some\nOFMs such as Midnight Commander). That can be in interesting and promising\nangle. For example vi has set of ideas that really can enrich OFM concepts.\nLook not only at attempts to create OFM inside vim in a macrolanguage, but\nalso on attempts to emulate vim concepts in OFM. There are two very\ninteresting projects related to creating vi-style OFMs ( ranger and vifm ).\nLinking OFMs with vi concepts and vi culture proved to be a treasure trove of\nnew ideas.\n\n### Use windows manager like GNU screen or Ratpoison as the base of your\nimplementation\n\nOFM in reality represent something \"in-between\" tile windows manager (look at\nRatpoison for inspiration) and multi-window terminal emulator like GNU screen\non one hand and editors on another. The people who manage to find right\narchitectural solution along those lines stand better change to compete with\nestablished players, because they can reuse pretty rich codebases. While\nconvoluted ad-hoc solutions to those problems hamper \"old-style\" OFM\nimplementations. Again Achilles part here is the implementation of command\nline window and the flexibility of integration of internal editor on the base\nof common macrolanguage and common library of primitives. Ad-hoc hacks in\nthose areas inhibit further growth.\n\n### Consider reusing some open source IDE framework\n\nAs we mentioned before, one way to look at OFMs as to view them as an IDE for\nsystem administrators, who have different needs and preferences them\nprogrammers.\n\nBut that does not exclude reusing some open-source framework created for, say,\nscripting language and written in scripting language. You can definitely reuse\na part of implementation of windows system and the editor.\n\nWho candidates that instantly come into mind are Parde or Eclipse. Please not\nthat I hate Eclipse as it is a heavy weight framework, but for experimentation\nwith new OFM features this is a perfect tool. Using IDE also will help you as\na developer, as you will be more productive due to in depth knowledge of this\nIDE.\n\nIn case your chosen IDE is Eslipse, the knowledge you obtain in process of\nreuse it has great market value: an additional advantage of this approach is\nthat cal simultaneously became an expert in Eclipse which has its own value on\nthe marketplace. In any case IDE architecture already resolves one way or\nanother all major problems that OFM designer faces and if particular IDE is\nstill developed here again there can be a synergy between two project that can\nbenefit both. Which is always good for open source projects that are typically\nstarved for money and workforce and survive mainly on the enthusiasm of a\nsingle developer or a very small team of dedicated designers who really\nsacrifice their time to the project. Look at ht history of Midnight Commander\nfor more information. In this sense donations to the project are very\nimportant and users of open source products would always remember that there\nis no free lunch. If they do not support the project it has significant\nchances of dying and they will be hanging in the cold, if they depend on it.\nAnd forced to pay the price of switching to another which can be really\nsignificant. In this sense shareware development (possibly with open code base\n-- the danger of stealing codebase of significant complexity in reality is\nclose to zero) is more sustainable then open source development. Also FSF can\n(and should) act as a charity, not as a Stallman vanity promoting venture that\nstamps GNU label on the projects as a seal of approval of project license with\nzero real support. It should allocate some money for important projects like\nGNU Midnight Commander from member dues. Actually for orthodox file managers,\northodox monks should also provide some help ;-)\n\n### Other possible avenues\n\nIf existing file manager is flexible enough you can try to modify it to comply\nwith the requirements of OFM1999 standard. Victor Zverovich tried the same for\nNautilus, see his captain-nemo.\n\nOf cause there are other opportunities about which I do not know. For example\nyou can use screen and implement panels as shell windows using screen vertical\nsplit patch. There probably other interesting architectural opportunities for\nOFM about existence of which I do not even suspect.\n\n### Adhere to standards\n\nI know everybody thinks that he can do better and that's mostly true. But this\nis not the all truth. Real truth is deeper. Remember that, as artists know all\ntoo well, \"form liberates\" and the less time you spend on designing your own\ninterface and set of keyboard shortcuts, the more time you have on developing\nquality implementation of features that you value most. Under Spartan\ninterface of OFM and within restriction put by OFM1999 there are tremendous\npossibilities for innovation. First of all in the area of integration with\nshell and virtual panels (in general panel can contain arbitrary set of files,\nnot just content of some directory). Then in integration on built-in editor\nwith the rest of file manager (the difference between the editor and panel\nmanagement code is not that big -- panels can be considered as read only\nwindows of the editor and implemented as such)\n\n### Focus on key features is the key\n\nIn view that involvement of most OFM developers is limited in both time and\nthe total size of codebase (if this is a single person project, but mist such\nprojects are), the most optimal way of designing new OFM managers is to\nconcentrate on better implementation of one of two key ideas and limit \"bells\nand whistles\" to some future period when and if users provide feedback and\nmake it clear that it makes sense to develop the product further.\n\nA single developer simply can't compete with, say, Midnight Commander, or FAR,\nor Total Commander in the \"total coverage\" of functions. But you can implement\nminimal OFM standard and try to beat other developers by attacking a different\nset of problem or implementing one of the features that are\n\"misunderimplemented\" in current implementations. For Windows OFM the key is\nusage (and integration with) PowerShell; for Unix implementing command like\nwindow should in in a style of GNU screen, as a \"first class citizen\" not as a\nbastard child like in Midnight Commander.\n\nIn this sense it is important to understand that 80% of your users will\nprobably be limited to basic features described in minimal OFM standard\n(Orthodox File Managers Standard 1999(OFM1999) - minimal OFM requirements).\nThey will be attracted by \"the feature\" that your OFM implements better then\ncompetitors, not the general richness of features and \"total coverage\"...\n\n### Key unresolved problems with OFMs\n\nFor standalone application the question if you can built a better mousetrap\nprobably revolves around three features that IMHO are badly addressed in\ncurrent generation of OFMs:\n\n  * Compensating for excessive number of keyboard shortcuts the user needs to know/learn to use OFM productively. There might be some inventive approaches but, for example, in Unix a better implementation of \"helpline\" at the bottom of the screen (under the command line) and extending this concept to all dialog boxes can provide great benefits for users, including yourself as the primary user. I for example forget half of \"more esoteric\" functionality of FAR when I do not use it on daily basis for a week or so. I think other users have the same problem -- too rich set of keyboard key combinations is a self-defeating idea :-(.\n\nIn case of Unix/Linux with its severe restrictions of keyboard driver\ncapabilities you can imitate DOS helpline functionality by \"rotating\" line\nwith some shortcut with each \"slot\" representing one of the four position like\nin the revolver -- plain (no special keys pressed), Alt, Ctrl and Shift.\n\nThis problem with \"excessive richness\" of command set for keyboard oriented\napplications is a generic problem, for example vim suffers from it too. So\nputting efforts in solving it in some elegant way might have far greater\nreturn than just your OFM.\n\nIn a way quality of such built-in cheat sheet like OFM bottom \"helpline\" is\nmuch more important for applications that emphasize keyboard usage, then for\nGUI applications. And solving it in an elegant, inventive way will definitely\nattract users, especially users who have some investment in other OFM but hit\nthe \"glass ceiling\" and just can't remember more shortcuts. For example, from\nmy own experience I suspect that this is a fundamental problem for users of\nMidnight Commander which does not implement \"helpline\" properly and in menus\ndoes not implement anything sophisticated in this area at all.\n\n  * Integration with shell. An Achilles spot of many popular OFM implementation is the compete, absolute lack of understanding of command window semantic. Classic example in this respect is Total Commander. It also negatively affects the of implementation of user menu (called start menu). Developers who can do better in this area provide for users much better functionality can rightly advertise this advantage and hope to attract power users who value this feature (most OFM users do use command line). There are multiple neat ways cleanly implement the concept of command line window and in case GNU screen approach is used functionality of GNU screen can be extended to OFMs. That really might make a difference for the users. Another possible avenue of increasing user attractiveness of OFM is providing its own macrolanguage such as LUA which automatically guarantee you full support of regular expressions in dialogs via PCRE library. This for example is important for the implementation of dynamic user menus and in implementation files search.\n  * Integration with internal editor and viewer. The main danger in to make your codebase too big. One way to cut the size of the codebase is to exploit hidden synergy between internal editor and panel management code. False solution here is to drop internal editor altogether (Total Commander is an example of this approach). As editor code can be studies and borrowed from several first class open source implementations that creates an opportunity of reuse of this library (and possibly internal macro language, if the programmable editor serves as a reference model is ). If the editor is still actively developed there can be synergy and sharing with the developer of the editor as part of functionality of OFM related for file management is useful for editor two. This way instead of team of one, you can have a team of two. The library used in development of a good editor contain probably 60% what is needed for the development of OFM and polishing of this library can benefit both projects. So an interesting approach to OFM development would be to start with some editor implementation and try to extend it to OFM maximizing reuse of common elements and the macro language of the programmable editor. One interesting example of this approach is Sunrise Commander which was implemented on top of Emacs in elisp.\n\nYour web site can as a powerful tool of popularizing the idea that you have\nchosen. In case you are doing open source development; don't be shy to ask for\ndonations, especially in a form of equipment.\n\n### Conclusions\n\nI think that for system administrators this is a question of \"esprit de corps\"\nto support development of one of OFMs. As sysadmin IDE this open source\ndevelopment helps everybody and this page is my small contribution to the\ndevelopment of OFMs as sysadmin IDE of choice. If you think how dull typical\nenterprise environment is, you probably can find a couple of hours a month to\ncontribute to the project. It is not necessarily contribution via coding.\nTesting and creation of documentation are also very valuable, albeit much\nunderappreciated activities.\n\nA challenge for human-computer interface is to support creativity and that's\nflexibility that OFM interface provides and close integration with shell make\nthem far more extensible and \"creativity friendly\" from other types of file\nmanagers.\n\nIf you are a sysadmin who never tried one, please spend a couple of hours (or\nbetter days) and play with Midnight Commander or FC for Linux/Unix and FAR on\nWindows. All of them provide some implementation of shell terminal windows\nwhich is of primary importance for sysadmins. FAR also provides rich set of\nplug-ins and integration with LUA. Please note that OFMs have a rather steep\nlearning curve and don't be discouraged by initial difficulties. Your\npersistence will pay you nicely...\n\n## Webliography\n\nOrthodox File Managers\n\nThe Orthodox File Manager(OFM) Paradigm\n\nDr. Nikolai Bezroukov\n\n## Etc\n\nSociety\n\n> Groupthink : Two Party System as Polyarchy : Corruption of Regulators :\n> Bureaucracies : Understanding Micromanagers and Control Freaks : Toxic\n> Managers : Harvard Mafia : Diplomatic Communication : Surviving a Bad\n> Performance Review : Insufficient Retirement Funds as Immanent Problem of\n> Neoliberal Regime : PseudoScience : Who Rules America : Neoliberalism : The\n> Iron Law of Oligarchy : Libertarian Philosophy\n\nQuotes\n\n> War and Peace : Skeptical Finance : John Kenneth Galbraith :Talleyrand :\n> Oscar Wilde : Otto Von Bismarck : Keynes : George Carlin : Skeptics :\n> Propaganda : SE quotes : Language Design and Programming Quotes : Random IT-\n> related quotes : Somerset Maugham : Marcus Aurelius : Kurt Vonnegut : Eric\n> Hoffer : Winston Churchill : Napoleon Bonaparte : Ambrose Bierce : Bernard\n> Shaw : Mark Twain Quotes\n\nBulletin:\n\n> Vol 25, No.12 (December, 2013) Rational Fools vs. Efficient Crooks The\n> efficient markets hypothesis : Political Skeptic Bulletin, 2013 :\n> Unemployment Bulletin, 2010 : Vol 23, No.10 (October, 2011) An observation\n> about corporate security departments : Slightly Skeptical Euromaydan\n> Chronicles, June 2014 : Greenspan legacy bulletin, 2008 : Vol 25, No.10\n> (October, 2013) Cryptolocker Trojan (Win32/Crilock.A) : Vol 25, No.08\n> (August, 2013) Cloud providers as intelligence collection hubs : Financial\n> Humor Bulletin, 2010 : Inequality Bulletin, 2009 : Financial Humor Bulletin,\n> 2008 : Copyleft Problems Bulletin, 2004 : Financial Humor Bulletin, 2011 :\n> Energy Bulletin, 2010 : Malware Protection Bulletin, 2010 : Vol 26, No.1\n> (January, 2013) Object-Oriented Cult : Political Skeptic Bulletin, 2011 :\n> Vol 23, No.11 (November, 2011) Softpanorama classification of sysadmin\n> horror stories : Vol 25, No.05 (May, 2013) Corporate bullshit as a\n> communication method : Vol 25, No.06 (June, 2013) A Note on the Relationship\n> of Brooks Law and Conway Law\n\nHistory:\n\n> Fifty glorious years (1950-2000): the triumph of the US computer engineering\n> : Donald Knuth : TAoCP and its Influence of Computer Science : Richard\n> Stallman : Linus Torvalds : Larry Wall : John K. Ousterhout : CTSS : Multix\n> OS Unix History : Unix shell history : VI editor : History of pipes concept\n> : Solaris : MS DOS : Programming Languages History : PL/1 : Simula 67 : C :\n> History of GCC development : Scripting Languages : Perl history : OS History\n> : Mail : DNS : SSH : CPU Instruction Sets : SPARC systems 1987-2006 : Norton\n> Commander : Norton Utilities : Norton Ghost : Frontpage history : Malware\n> Defense History : GNU Screen : OSS early history\n\nClassic books:\n\n> The Peter Principle : Parkinson Law : 1984 : The Mythical Man-Month : How to\n> Solve It by George Polya : The Art of Computer Programming : The Elements of\n> Programming Style : The Unix Hater\u2019s Handbook : The Jargon file : The True\n> Believer : Programming Pearls : The Good Soldier Svejk : The Power Elite\n\nMost popular humor pages:\n\n> Manifest of the Softpanorama IT Slacker Society : Ten Commandments of the IT\n> Slackers Society : Computer Humor Collection : BSD Logo Story : The Cuckoo's\n> Egg : IT Slang : C++ Humor : ARE YOU A BBS ADDICT? : The Perl Purity Test :\n> Object oriented programmers of all nations : Financial Humor : Financial\n> Humor Bulletin, 2008 : Financial Humor Bulletin, 2010 : The Most\n> Comprehensive Collection of Editor-related Humor : Programming Language\n> Humor : Goldman Sachs related humor : Greenspan humor : C Humor : Scripting\n> Humor : Real Programmers Humor : Web Humor : GPL-related Humor : OFM Humor :\n> Politically Incorrect Humor : IDS Humor : \"Linux Sucks\" Humor : Russian\n> Musical Humor : Best Russian Programmer Humor : Microsoft plans to buy\n> Catholic Church : Richard Stallman Related Humor : Admin Humor : Perl-\n> related Humor : Linus Torvalds Related humor : PseudoScience Related Humor :\n> Networking Humor : Shell Humor : Financial Humor Bulletin, 2011 : Financial\n> Humor Bulletin, 2012 : Financial Humor Bulletin, 2013 : Java Humor :\n> Software Engineering Humor : Sun Solaris Related Humor : Education Humor :\n> IBM Humor : Assembler-related Humor : VIM Humor : Computer Viruses Humor :\n> Bright tomorrow is rescheduled to a day after tomorrow : Classic Computer\n> Humor\n\nThe Last but not Least Technology is dominated by two types of people: those\nwho understand what they do not manage and those who manage what they do not\nunderstand ~Archibald Putt. Ph.D\n\nCopyright \u00a9 1996-2021 by Softpanorama Society. www.softpanorama.org was\ninitially created as a service to the (now defunct) UN Sustainable Development\nNetworking Programme (SDNP) without any remuneration. This document is an\nindustrial compilation designed and created exclusively for educational use\nand is distributed under the Softpanorama Content License. Original materials\ncopyright belong to respective owners. Quotes are made for educational\npurposes only in compliance with the fair use doctrine.\n\nFAIR USE NOTICE This site contains copyrighted material the use of which has\nnot always been specifically authorized by the copyright owner. We are making\nsuch material available to advance understanding of computer science, IT\ntechnology, economic, scientific, and social issues. We believe this\nconstitutes a 'fair use' of any such copyrighted material as provided by\nsection 107 of the US Copyright Law according to which such material can be\ndistributed without profit exclusively for research and educational purposes.\n\nThis is a Spartan WHYFF (We Help You For Free) site written by people for whom\nEnglish is not a native language. Grammar and spelling errors should be\nexpected. The site contain some broken links as it develops like a living\ntree...\n\nYou can use PayPal to to buy a cup of coffee for authors of this site  \n---  \n  \nDisclaimer:\n\nThe statements, views and opinions presented on this web page are those of the\nauthor (or referenced source) and are not endorsed by, nor do they necessarily\nreflect, the opinions of the Softpanorama society. We do not warrant the\ncorrectness of the information provided or its fitness for any purpose. The\nsite uses AdSense so you need to be aware of Google privacy policy. You you do\nnot want to be tracked by Google please disable Javascript for this site. This\nsite is perfectly usable without Javascript.\n\nLast modified: March 12, 2019\n\n", "frontpage": false}
