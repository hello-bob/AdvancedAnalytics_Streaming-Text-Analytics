{"aid": "40198858", "title": "The Case for API-Driven Design", "url": "https://blog.hardlyoverthought.com/p/the-case-for-api-driven-design", "domain": "hardlyoverthought.com", "votes": 1, "user": "flowsn4ke", "posted_at": "2024-04-29 14:35:56", "comments": 0, "source_title": "The case for API-driven Design \ud83e\udd84", "source_text": "The case for API-driven Design \ud83e\udd84 - by Theo Louvel\n\n# Hardly Overthought\n\nShare this post\n\n#### The case for API-driven Design \ud83e\udd84\n\nblog.hardlyoverthought.com\n\n#### Discover more from Hardly Overthought\n\nLearning to make products fail faster and better.\n\nContinue reading\n\nSign in\n\n# The case for API-driven Design \ud83e\udd84\n\n### While they come from the software industry, we can use APIs as a mental\nmodel to bake better design into our products right from the start.\n\nTheo Louvel\n\nApr 19, 2024\n\nShare this post\n\n#### The case for API-driven Design \ud83e\udd84\n\nblog.hardlyoverthought.com\n\nShare\n\nNot long ago, around coffee break, I was trying to explain to H. (Bob! Desk\u2019s\nCEO) what an API is. I started with the obvious, breaking down the acronym. An\nAPI is an Application Programming Interface... which sounded clearer in my\nhead.\n\nNext, I stated that it\u2019s the user-facing interface of a system. Didn\u2019t help\nmuch, and Google Translate wasn\u2019t going to cut it to translate from engineer\nto sales rep.\n\n####\n\nThe coffee maker\u2019s API\n\nBothered, I then looked down at the coffee maker next to us, and got the idea\nof explaining him APIs with this analogy: Think of it as the buttons of a\ncoffee maker. Altogether, those represent the API of the coffee maker.\n\nAPIs come in all shapes and form, some of them abstracting more from the user\nthan others \u2615\ufe0f Cartoon by Tommy Siegel\n\nIn other words, it represents how you need to interact with a system for it to\nproduce a result. Push the button on the coffee machine to get your coffee,\npush on the brake pedal for your car to stop, and so on.\n\n####\n\nSoftware APIs\n\nThe term API comes from software and usually refers (for non-technical people,\nat least), to the way you should ask a web server holding data to provide you\nwith information (or to perform any other task). For instance, to see how a\nweb server response might look like, check out this dummy to-do list.\n\nJSON is a popular format for web servers to respond in, like the response\nyou\u2019ll get from the link above.\n\nTo view this very page, your browser is using Substack\u2019s API to ask their\nservers for the page. When it gets the code for the page, your browser\ninterprets it and renders it onto the screen with all the pretty colors and\nfonts and images you\u2019re seeing.\n\nIf you have a technical background, you already know that the term (I\u2019m\nalready tired to write API) refers to the way you interact with a given piece\nof code (aka package or library): How you\u2019re supposed to use it so that it can\nproduce what it was designed for.\n\nThe trick, though, is to break the concept out of the software industry: You\ncan successfully apply this idea to virtually anything that can be operated by\na person.\n\n####\n\nProduct APIs\n\nThey\u2019re a useful mental model for designing product interfaces from the user\u2019s\nperspective. APIs are virtually everywhere, tons of them in desperate need of\na revamp, like Microsoft Azure\u2019s portal, Fujifilm cameras\u2019 menu, my\nmicrowave\u2019s cryptic buttons, public transportation maps...\n\nIf you\u2019re building products, you are creating APIs, and would probably benefit\nfrom asking questions like the one below before you design your product (or\nwrite code):\n\n  * How should users interact with the product? Do they bring their own coffee and water to make themselves a cup of coffee?\n\n  * Should they have more or less control over how it operates? Should they be able to decide how grinded the coffee is, or how long it brews?\n\n  * Do they care how it works? Is the process of making coffee important to them, or would they rather have a quick coffee so they can get back to work?\n\nIsn\u2019t it better to have users bring their own water and coffee because this is\nwhat they wanted to do, not because you didn\u2019t think about it?\n\n####\n\nAPI-first design\n\nAs tempting as it may be to leave as much control to the user as possible, so\n\u201cyou don\u2019t close the door on yourself\u201d, this lazy-design strategy often\nresults in user frustration.\n\nDon\u2019t make the configuration panel grow too big. Don\u2019t put too many buttons on\nmy microwave that all look the same. Make smart choices for me, please: I\ndon\u2019t have time to read an Encyclopedia every time I use your product !\n\nLeaving as little control to the user as possibly needed usually leads to\nbetter design, the user spending less time guessing how they\u2019re supposed to\noperate or configure your product or system. Good products make it easy to use\nthem right.\n\n####\n\nUnexpected benefits\n\nEven then, your API might be as simple as could be, you\u2019d still be shocked how\ncreative can people be to come up with new, unexpected ways of using a\nproduct.\n\nDecide how the users should use your product, or let they\u2019ll do it for you \ud83e\udd27\n\nAs an example, Kleenex was initially making disposable towels intended to wipe\noff make-up. When they learned people were using the towels to blow their\nnoses, they started advertising their product as tissues and doubled their\nsales.\n\n####\n\nUnexpected APIs\n\nUsers inventing new usages for a product is good news. But unclear APIs are\nnot. Hoping for someone to rise and come up with a good usage for something\nyou didn\u2019t think through is not a winning strategy. It takes time, luck, and\npeople actually willing to use your product.\n\nI really wonder why Hitachi's Xybernaut laptop computer never caught on... \ud83e\uddd0\n\n####\n\nThe magic recipe\n\nTo hack your luck, start with API design. Instead of spending time pondering\nhow you\u2019re going to manufacture a product, put yourself in your customer\u2019s\nshoes and wonder what magic tool you would like to have to solve the problem\nyou\u2019re facing. What buttons would you like to have if you could wish for\nanything?\n\nThose are the kind of questions that foster change, innovation, and the\nappearance of tools like linear.\n\nOnce you\u2019ve figured out your product\u2019s API, it\u2019s easy to derive solutions from\nthere. All the functions you attach to your API\u2019s entry points act as black\nboxes for the user, who ends up having to interact only with the parts they\nactually care about to do just what they intended.\n\nForget what you want to do, embrace your users\u2019 perspective.\n\nSometimes that hurts.\n\nThanks for reading Hardly Overthought! Subscribe for free to receive new posts\nand support my work.\n\nShare this post\n\n#### The case for API-driven Design \ud83e\udd84\n\nblog.hardlyoverthought.com\n\nShare\n\nComments\n\nReady for more?\n\n\u00a9 2024 Theo Louvel\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
