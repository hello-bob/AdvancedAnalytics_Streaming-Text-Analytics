{"aid": "40178738", "title": "How to Get Startup Ideas (2012)", "url": "https://paulgraham.com/startupideas.html", "domain": "paulgraham.com", "votes": 1, "user": "tosh", "posted_at": "2024-04-27 09:56:32", "comments": 0, "source_title": "How to Get Startup Ideas", "source_text": "How to Get Startup Ideas\n\n| | Want to start a startup? Get funded by Y Combinator.  \n---  \n  \nNovember 2012\n\nThe way to get startup ideas is not to try to think of startup ideas. It's to\nlook for problems, preferably problems you have yourself.\n\nThe very best startup ideas tend to have three things in common: they're\nsomething the founders themselves want, that they themselves can build, and\nthat few others realize are worth doing. Microsoft, Apple, Yahoo, Google, and\nFacebook all began this way.\n\nProblems\n\nWhy is it so important to work on a problem you have? Among other things, it\nensures the problem really exists. It sounds obvious to say you should only\nwork on problems that exist. And yet by far the most common mistake startups\nmake is to solve problems no one has.\n\nI made it myself. In 1995 I started a company to put art galleries online. But\ngalleries didn't want to be online. It's not how the art business works. So\nwhy did I spend 6 months working on this stupid idea? Because I didn't pay\nattention to users. I invented a model of the world that didn't correspond to\nreality, and worked from that. I didn't notice my model was wrong until I\ntried to convince users to pay for what we'd built. Even then I took\nembarrassingly long to catch on. I was attached to my model of the world, and\nI'd spent a lot of time on the software. They had to want it!\n\nWhy do so many founders build things no one wants? Because they begin by\ntrying to think of startup ideas. That m.o. is doubly dangerous: it doesn't\nmerely yield few good ideas; it yields bad ideas that sound plausible enough\nto fool you into working on them.\n\nAt YC we call these \"made-up\" or \"sitcom\" startup ideas. Imagine one of the\ncharacters on a TV show was starting a startup. The writers would have to\ninvent something for it to do. But coming up with good startup ideas is hard.\nIt's not something you can do for the asking. So (unless they got amazingly\nlucky) the writers would come up with an idea that sounded plausible, but was\nactually bad.\n\nFor example, a social network for pet owners. It doesn't sound obviously\nmistaken. Millions of people have pets. Often they care a lot about their pets\nand spend a lot of money on them. Surely many of these people would like a\nsite where they could talk to other pet owners. Not all of them perhaps, but\nif just 2 or 3 percent were regular visitors, you could have millions of\nusers. You could serve them targeted offers, and maybe charge for premium\nfeatures. [1]\n\nThe danger of an idea like this is that when you run it by your friends with\npets, they don't say \"I would never use this.\" They say \"Yeah, maybe I could\nsee using something like that.\" Even when the startup launches, it will sound\nplausible to a lot of people. They don't want to use it themselves, at least\nnot right now, but they could imagine other people wanting it. Sum that\nreaction across the entire population, and you have zero users. [2]\n\nWell\n\nWhen a startup launches, there have to be at least some users who really need\nwhat they're making \u2014 not just people who could see themselves using it one\nday, but who want it urgently. Usually this initial group of users is small,\nfor the simple reason that if there were something that large numbers of\npeople urgently needed and that could be built with the amount of effort a\nstartup usually puts into a version one, it would probably already exist.\nWhich means you have to compromise on one dimension: you can either build\nsomething a large number of people want a small amount, or something a small\nnumber of people want a large amount. Choose the latter. Not all ideas of that\ntype are good startup ideas, but nearly all good startup ideas are of that\ntype.\n\nImagine a graph whose x axis represents all the people who might want what\nyou're making and whose y axis represents how much they want it. If you invert\nthe scale on the y axis, you can envision companies as holes. Google is an\nimmense crater: hundreds of millions of people use it, and they need it a lot.\nA startup just starting out can't expect to excavate that much volume. So you\nhave two choices about the shape of hole you start with. You can either dig a\nhole that's broad but shallow, or one that's narrow and deep, like a well.\n\nMade-up startup ideas are usually of the first type. Lots of people are mildly\ninterested in a social network for pet owners.\n\nNearly all good startup ideas are of the second type. Microsoft was a well\nwhen they made Altair Basic. There were only a couple thousand Altair owners,\nbut without this software they were programming in machine language. Thirty\nyears later Facebook had the same shape. Their first site was exclusively for\nHarvard students, of which there are only a few thousand, but those few\nthousand users wanted it a lot.\n\nWhen you have an idea for a startup, ask yourself: who wants this right now?\nWho wants this so much that they'll use it even when it's a crappy version one\nmade by a two-person startup they've never heard of? If you can't answer that,\nthe idea is probably bad. [3]\n\nYou don't need the narrowness of the well per se. It's depth you need; you get\nnarrowness as a byproduct of optimizing for depth (and speed). But you almost\nalways do get it. In practice the link between depth and narrowness is so\nstrong that it's a good sign when you know that an idea will appeal strongly\nto a specific group or type of user.\n\nBut while demand shaped like a well is almost a necessary condition for a good\nstartup idea, it's not a sufficient one. If Mark Zuckerberg had built\nsomething that could only ever have appealed to Harvard students, it would not\nhave been a good startup idea. Facebook was a good idea because it started\nwith a small market there was a fast path out of. Colleges are similar enough\nthat if you build a facebook that works at Harvard, it will work at any\ncollege. So you spread rapidly through all the colleges. Once you have all the\ncollege students, you get everyone else simply by letting them in.\n\nSimilarly for Microsoft: Basic for the Altair; Basic for other machines; other\nlanguages besides Basic; operating systems; applications; IPO.\n\nSelf\n\nHow do you tell whether there's a path out of an idea? How do you tell whether\nsomething is the germ of a giant company, or just a niche product? Often you\ncan't. The founders of Airbnb didn't realize at first how big a market they\nwere tapping. Initially they had a much narrower idea. They were going to let\nhosts rent out space on their floors during conventions. They didn't foresee\nthe expansion of this idea; it forced itself upon them gradually. All they\nknew at first is that they were onto something. That's probably as much as\nBill Gates or Mark Zuckerberg knew at first.\n\nOccasionally it's obvious from the beginning when there's a path out of the\ninitial niche. And sometimes I can see a path that's not immediately obvious;\nthat's one of our specialties at YC. But there are limits to how well this can\nbe done, no matter how much experience you have. The most important thing to\nunderstand about paths out of the initial idea is the meta-fact that these are\nhard to see.\n\nSo if you can't predict whether there's a path out of an idea, how do you\nchoose between ideas? The truth is disappointing but interesting: if you're\nthe right sort of person, you have the right sort of hunches. If you're at the\nleading edge of a field that's changing fast, when you have a hunch that\nsomething is worth doing, you're more likely to be right.\n\nIn Zen and the Art of Motorcycle Maintenance, Robert Pirsig says:\n\n> You want to know how to paint a perfect painting? It's easy. Make yourself\n> perfect and then just paint naturally.\n\nI've wondered about that passage since I read it in high school. I'm not sure\nhow useful his advice is for painting specifically, but it fits this situation\nwell. Empirically, the way to have good startup ideas is to become the sort of\nperson who has them.\n\nBeing at the leading edge of a field doesn't mean you have to be one of the\npeople pushing it forward. You can also be at the leading edge as a user. It\nwas not so much because he was a programmer that Facebook seemed a good idea\nto Mark Zuckerberg as because he used computers so much. If you'd asked most\n40 year olds in 2004 whether they'd like to publish their lives semi-publicly\non the Internet, they'd have been horrified at the idea. But Mark already\nlived online; to him it seemed natural.\n\nPaul Buchheit says that people at the leading edge of a rapidly changing field\n\"live in the future.\" Combine that with Pirsig and you get:\n\n> Live in the future, then build what's missing.\n\nThat describes the way many if not most of the biggest startups got started.\nNeither Apple nor Yahoo nor Google nor Facebook were even supposed to be\ncompanies at first. They grew out of things their founders built because there\nseemed a gap in the world.\n\nIf you look at the way successful founders have had their ideas, it's\ngenerally the result of some external stimulus hitting a prepared mind. Bill\nGates and Paul Allen hear about the Altair and think \"I bet we could write a\nBasic interpreter for it.\" Drew Houston realizes he's forgotten his USB stick\nand thinks \"I really need to make my files live online.\" Lots of people heard\nabout the Altair. Lots forgot USB sticks. The reason those stimuli caused\nthose founders to start companies was that their experiences had prepared them\nto notice the opportunities they represented.\n\nThe verb you want to be using with respect to startup ideas is not \"think up\"\nbut \"notice.\" At YC we call ideas that grow naturally out of the founders' own\nexperiences \"organic\" startup ideas. The most successful startups almost all\nbegin this way.\n\nThat may not have been what you wanted to hear. You may have expected recipes\nfor coming up with startup ideas, and instead I'm telling you that the key is\nto have a mind that's prepared in the right way. But disappointing though it\nmay be, this is the truth. And it is a recipe of a sort, just one that in the\nworst case takes a year rather than a weekend.\n\nIf you're not at the leading edge of some rapidly changing field, you can get\nto one. For example, anyone reasonably smart can probably get to an edge of\nprogramming (e.g. building mobile apps) in a year. Since a successful startup\nwill consume at least 3-5 years of your life, a year's preparation would be a\nreasonable investment. Especially if you're also looking for a cofounder. [4]\n\nYou don't have to learn programming to be at the leading edge of a domain\nthat's changing fast. Other domains change fast. But while learning to hack is\nnot necessary, it is for the forseeable future sufficient. As Marc Andreessen\nput it, software is eating the world, and this trend has decades left to run.\n\nKnowing how to hack also means that when you have ideas, you'll be able to\nimplement them. That's not absolutely necessary (Jeff Bezos couldn't) but it's\nan advantage. It's a big advantage, when you're considering an idea like\nputting a college facebook online, if instead of merely thinking \"That's an\ninteresting idea,\" you can think instead \"That's an interesting idea. I'll try\nbuilding an initial version tonight.\" It's even better when you're both a\nprogrammer and the target user, because then the cycle of generating new\nversions and testing them on users can happen inside one head.\n\nNoticing\n\nOnce you're living in the future in some respect, the way to notice startup\nideas is to look for things that seem to be missing. If you're really at the\nleading edge of a rapidly changing field, there will be things that are\nobviously missing. What won't be obvious is that they're startup ideas. So if\nyou want to find startup ideas, don't merely turn on the filter \"What's\nmissing?\" Also turn off every other filter, particularly \"Could this be a big\ncompany?\" There's plenty of time to apply that test later. But if you're\nthinking about that initially, it may not only filter out lots of good ideas,\nbut also cause you to focus on bad ones.\n\nMost things that are missing will take some time to see. You almost have to\ntrick yourself into seeing the ideas around you.\n\nBut you know the ideas are out there. This is not one of those problems where\nthere might not be an answer. It's impossibly unlikely that this is the exact\nmoment when technological progress stops. You can be sure people are going to\nbuild things in the next few years that will make you think \"What did I do\nbefore x?\"\n\nAnd when these problems get solved, they will probably seem flamingly obvious\nin retrospect. What you need to do is turn off the filters that usually\nprevent you from seeing them. The most powerful is simply taking the current\nstate of the world for granted. Even the most radically open-minded of us\nmostly do that. You couldn't get from your bed to the front door if you\nstopped to question everything.\n\nBut if you're looking for startup ideas you can sacrifice some of the\nefficiency of taking the status quo for granted and start to question things.\nWhy is your inbox overflowing? Because you get a lot of email, or because it's\nhard to get email out of your inbox? Why do you get so much email? What\nproblems are people trying to solve by sending you email? Are there better\nways to solve them? And why is it hard to get emails out of your inbox? Why do\nyou keep emails around after you've read them? Is an inbox the optimal tool\nfor that?\n\nPay particular attention to things that chafe you. The advantage of taking the\nstatus quo for granted is not just that it makes life (locally) more\nefficient, but also that it makes life more tolerable. If you knew about all\nthe things we'll get in the next 50 years but don't have yet, you'd find\npresent day life pretty constraining, just as someone from the present would\nif they were sent back 50 years in a time machine. When something annoys you,\nit could be because you're living in the future.\n\nWhen you find the right sort of problem, you should probably be able to\ndescribe it as obvious, at least to you. When we started Viaweb, all the\nonline stores were built by hand, by web designers making individual HTML\npages. It was obvious to us as programmers that these sites would have to be\ngenerated by software. [5]\n\nWhich means, strangely enough, that coming up with startup ideas is a question\nof seeing the obvious. That suggests how weird this process is: you're trying\nto see things that are obvious, and yet that you hadn't seen.\n\nSince what you need to do here is loosen up your own mind, it may be best not\nto make too much of a direct frontal attack on the problem \u2014 i.e. to sit down\nand try to think of ideas. The best plan may be just to keep a background\nprocess running, looking for things that seem to be missing. Work on hard\nproblems, driven mainly by curiosity, but have a second self watching over\nyour shoulder, taking note of gaps and anomalies. [6]\n\nGive yourself some time. You have a lot of control over the rate at which you\nturn yours into a prepared mind, but you have less control over the stimuli\nthat spark ideas when they hit it. If Bill Gates and Paul Allen had\nconstrained themselves to come up with a startup idea in one month, what if\nthey'd chosen a month before the Altair appeared? They probably would have\nworked on a less promising idea. Drew Houston did work on a less promising\nidea before Dropbox: an SAT prep startup. But Dropbox was a much better idea,\nboth in the absolute sense and also as a match for his skills. [7]\n\nA good way to trick yourself into noticing ideas is to work on projects that\nseem like they'd be cool. If you do that, you'll naturally tend to build\nthings that are missing. It wouldn't seem as interesting to build something\nthat already existed.\n\nJust as trying to think up startup ideas tends to produce bad ones, working on\nthings that could be dismissed as \"toys\" often produces good ones. When\nsomething is described as a toy, that means it has everything an idea needs\nexcept being important. It's cool; users love it; it just doesn't matter. But\nif you're living in the future and you build something cool that users love,\nit may matter more than outsiders think. Microcomputers seemed like toys when\nApple and Microsoft started working on them. I'm old enough to remember that\nera; the usual term for people with their own microcomputers was \"hobbyists.\"\nBackRub seemed like an inconsequential science project. The Facebook was just\na way for undergrads to stalk one another.\n\nAt YC we're excited when we meet startups working on things that we could\nimagine know-it-alls on forums dismissing as toys. To us that's positive\nevidence an idea is good.\n\nIf you can afford to take a long view (and arguably you can't afford not to),\nyou can turn \"Live in the future and build what's missing\" into something even\nbetter:\n\n> Live in the future and build what seems interesting.\n\nSchool\n\nThat's what I'd advise college students to do, rather than trying to learn\nabout \"entrepreneurship.\" \"Entrepreneurship\" is something you learn best by\ndoing it. The examples of the most successful founders make that clear. What\nyou should be spending your time on in college is ratcheting yourself into the\nfuture. College is an incomparable opportunity to do that. What a waste to\nsacrifice an opportunity to solve the hard part of starting a startup \u2014\nbecoming the sort of person who can have organic startup ideas \u2014 by spending\ntime learning about the easy part. Especially since you won't even really\nlearn about it, any more than you'd learn about sex in a class. All you'll\nlearn is the words for things.\n\nThe clash of domains is a particularly fruitful source of ideas. If you know a\nlot about programming and you start learning about some other field, you'll\nprobably see problems that software could solve. In fact, you're doubly likely\nto find good problems in another domain: (a) the inhabitants of that domain\nare not as likely as software people to have already solved their problems\nwith software, and (b) since you come into the new domain totally ignorant,\nyou don't even know what the status quo is to take it for granted.\n\nSo if you're a CS major and you want to start a startup, instead of taking a\nclass on entrepreneurship you're better off taking a class on, say, genetics.\nOr better still, go work for a biotech company. CS majors normally get summer\njobs at computer hardware or software companies. But if you want to find\nstartup ideas, you might do better to get a summer job in some unrelated\nfield. [8]\n\nOr don't take any extra classes, and just build things. It's no coincidence\nthat Microsoft and Facebook both got started in January. At Harvard that is\n(or was) Reading Period, when students have no classes to attend because\nthey're supposed to be studying for finals. [9]\n\nBut don't feel like you have to build things that will become startups. That's\npremature optimization. Just build things. Preferably with other students.\nIt's not just the classes that make a university such a good place to crank\noneself into the future. You're also surrounded by other people trying to do\nthe same thing. If you work together with them on projects, you'll end up\nproducing not just organic ideas, but organic ideas with organic founding\nteams \u2014 and that, empirically, is the best combination.\n\nBeware of research. If an undergrad writes something all his friends start\nusing, it's quite likely to represent a good startup idea. Whereas a PhD\ndissertation is extremely unlikely to. For some reason, the more a project has\nto count as research, the less likely it is to be something that could be\nturned into a startup. [10] I think the reason is that the subset of ideas\nthat count as research is so narrow that it's unlikely that a project that\nsatisfied that constraint would also satisfy the orthogonal constraint of\nsolving users' problems. Whereas when students (or professors) build something\nas a side-project, they automatically gravitate toward solving users' problems\n\u2014 perhaps even with an additional energy that comes from being freed from the\nconstraints of research.\n\nCompetition\n\nBecause a good idea should seem obvious, when you have one you'll tend to feel\nthat you're late. Don't let that deter you. Worrying that you're late is one\nof the signs of a good idea. Ten minutes of searching the web will usually\nsettle the question. Even if you find someone else working on the same thing,\nyou're probably not too late. It's exceptionally rare for startups to be\nkilled by competitors \u2014 so rare that you can almost discount the possibility.\nSo unless you discover a competitor with the sort of lock-in that would\nprevent users from choosing you, don't discard the idea.\n\nIf you're uncertain, ask users. The question of whether you're too late is\nsubsumed by the question of whether anyone urgently needs what you plan to\nmake. If you have something that no competitor does and that some subset of\nusers urgently need, you have a beachhead. [11]\n\nThe question then is whether that beachhead is big enough. Or more\nimportantly, who's in it: if the beachhead consists of people doing something\nlots more people will be doing in the future, then it's probably big enough no\nmatter how small it is. For example, if you're building something\ndifferentiated from competitors by the fact that it works on phones, but it\nonly works on the newest phones, that's probably a big enough beachhead.\n\nErr on the side of doing things where you'll face competitors. Inexperienced\nfounders usually give competitors more credit than they deserve. Whether you\nsucceed depends far more on you than on your competitors. So better a good\nidea with competitors than a bad one without.\n\nYou don't need to worry about entering a \"crowded market\" so long as you have\na thesis about what everyone else in it is overlooking. In fact that's a very\npromising starting point. Google was that type of idea. Your thesis has to be\nmore precise than \"we're going to make an x that doesn't suck\" though. You\nhave to be able to phrase it in terms of something the incumbents are\noverlooking. Best of all is when you can say that they didn't have the courage\nof their convictions, and that your plan is what they'd have done if they'd\nfollowed through on their own insights. Google was that type of idea too. The\nsearch engines that preceded them shied away from the most radical\nimplications of what they were doing \u2014 particularly that the better a job they\ndid, the faster users would leave.\n\nA crowded market is actually a good sign, because it means both that there's\ndemand and that none of the existing solutions are good enough. A startup\ncan't hope to enter a market that's obviously big and yet in which they have\nno competitors. So any startup that succeeds is either going to be entering a\nmarket with existing competitors, but armed with some secret weapon that will\nget them all the users (like Google), or entering a market that looks small\nbut which will turn out to be big (like Microsoft). [12]\n\nFilters\n\nThere are two more filters you'll need to turn off if you want to notice\nstartup ideas: the unsexy filter and the schlep filter.\n\nMost programmers wish they could start a startup by just writing some\nbrilliant code, pushing it to a server, and having users pay them lots of\nmoney. They'd prefer not to deal with tedious problems or get involved in\nmessy ways with the real world. Which is a reasonable preference, because such\nthings slow you down. But this preference is so widespread that the space of\nconvenient startup ideas has been stripped pretty clean. If you let your mind\nwander a few blocks down the street to the messy, tedious ideas, you'll find\nvaluable ones just sitting there waiting to be implemented.\n\nThe schlep filter is so dangerous that I wrote a separate essay about the\ncondition it induces, which I called schlep blindness. I gave Stripe as an\nexample of a startup that benefited from turning off this filter, and a pretty\nstriking example it is. Thousands of programmers were in a position to see\nthis idea; thousands of programmers knew how painful it was to process\npayments before Stripe. But when they looked for startup ideas they didn't see\nthis one, because unconsciously they shrank from having to deal with payments.\nAnd dealing with payments is a schlep for Stripe, but not an intolerable one.\nIn fact they might have had net less pain; because the fear of dealing with\npayments kept most people away from this idea, Stripe has had comparatively\nsmooth sailing in other areas that are sometimes painful, like user\nacquisition. They didn't have to try very hard to make themselves heard by\nusers, because users were desperately waiting for what they were building.\n\nThe unsexy filter is similar to the schlep filter, except it keeps you from\nworking on problems you despise rather than ones you fear. We overcame this\none to work on Viaweb. There were interesting things about the architecture of\nour software, but we weren't interested in ecommerce per se. We could see the\nproblem was one that needed to be solved though.\n\nTurning off the schlep filter is more important than turning off the unsexy\nfilter, because the schlep filter is more likely to be an illusion. And even\nto the degree it isn't, it's a worse form of self-indulgence. Starting a\nsuccessful startup is going to be fairly laborious no matter what. Even if the\nproduct doesn't entail a lot of schleps, you'll still have plenty dealing with\ninvestors, hiring and firing people, and so on. So if there's some idea you\nthink would be cool but you're kept away from by fear of the schleps involved,\ndon't worry: any sufficiently good idea will have as many.\n\nThe unsexy filter, while still a source of error, is not as entirely useless\nas the schlep filter. If you're at the leading edge of a field that's changing\nrapidly, your ideas about what's sexy will be somewhat correlated with what's\nvaluable in practice. Particularly as you get older and more experienced. Plus\nif you find an idea sexy, you'll work on it more enthusiastically. [13]\n\nRecipes\n\nWhile the best way to discover startup ideas is to become the sort of person\nwho has them and then build whatever interests you, sometimes you don't have\nthat luxury. Sometimes you need an idea now. For example, if you're working on\na startup and your initial idea turns out to be bad.\n\nFor the rest of this essay I'll talk about tricks for coming up with startup\nideas on demand. Although empirically you're better off using the organic\nstrategy, you could succeed this way. You just have to be more disciplined.\nWhen you use the organic method, you don't even notice an idea unless it's\nevidence that something is truly missing. But when you make a conscious effort\nto think of startup ideas, you have to replace this natural constraint with\nself-discipline. You'll see a lot more ideas, most of them bad, so you need to\nbe able to filter them.\n\nOne of the biggest dangers of not using the organic method is the example of\nthe organic method. Organic ideas feel like inspirations. There are a lot of\nstories about successful startups that began when the founders had what seemed\na crazy idea but \"just knew\" it was promising. When you feel that about an\nidea you've had while trying to come up with startup ideas, you're probably\nmistaken.\n\nWhen searching for ideas, look in areas where you have some expertise. If\nyou're a database expert, don't build a chat app for teenagers (unless you're\nalso a teenager). Maybe it's a good idea, but you can't trust your judgment\nabout that, so ignore it. There have to be other ideas that involve databases,\nand whose quality you can judge. Do you find it hard to come up with good\nideas involving databases? That's because your expertise raises your\nstandards. Your ideas about chat apps are just as bad, but you're giving\nyourself a Dunning-Kruger pass in that domain.\n\nThe place to start looking for ideas is things you need. There must be things\nyou need. [14]\n\nOne good trick is to ask yourself whether in your previous job you ever found\nyourself saying \"Why doesn't someone make x? If someone made x we'd buy it in\na second.\" If you can think of any x people said that about, you probably have\nan idea. You know there's demand, and people don't say that about things that\nare impossible to build.\n\nMore generally, try asking yourself whether there's something unusual about\nyou that makes your needs different from most other people's. You're probably\nnot the only one. It's especially good if you're different in a way people\nwill increasingly be.\n\nIf you're changing ideas, one unusual thing about you is the idea you'd\npreviously been working on. Did you discover any needs while working on it?\nSeveral well-known startups began this way. Hotmail began as something its\nfounders wrote to talk about their previous startup idea while they were\nworking at their day jobs. [15]\n\nA particularly promising way to be unusual is to be young. Some of the most\nvaluable new ideas take root first among people in their teens and early\ntwenties. And while young founders are at a disadvantage in some respects,\nthey're the only ones who really understand their peers. It would have been\nvery hard for someone who wasn't a college student to start Facebook. So if\nyou're a young founder (under 23 say), are there things you and your friends\nwould like to do that current technology won't let you?\n\nThe next best thing to an unmet need of your own is an unmet need of someone\nelse. Try talking to everyone you can about the gaps they find in the world.\nWhat's missing? What would they like to do that they can't? What's tedious or\nannoying, particularly in their work? Let the conversation get general; don't\nbe trying too hard to find startup ideas. You're just looking for something to\nspark a thought. Maybe you'll notice a problem they didn't consciously realize\nthey had, because you know how to solve it.\n\nWhen you find an unmet need that isn't your own, it may be somewhat blurry at\nfirst. The person who needs something may not know exactly what they need. In\nthat case I often recommend that founders act like consultants \u2014 that they do\nwhat they'd do if they'd been retained to solve the problems of this one user.\nPeople's problems are similar enough that nearly all the code you write this\nway will be reusable, and whatever isn't will be a small price to start out\ncertain that you've reached the bottom of the well. [16]\n\nOne way to ensure you do a good job solving other people's problems is to make\nthem your own. When Rajat Suri of E la Carte decided to write software for\nrestaurants, he got a job as a waiter to learn how restaurants worked. That\nmay seem like taking things to extremes, but startups are extreme. We love it\nwhen founders do such things.\n\nIn fact, one strategy I recommend to people who need a new idea is not merely\nto turn off their schlep and unsexy filters, but to seek out ideas that are\nunsexy or involve schleps. Don't try to start Twitter. Those ideas are so rare\nthat you can't find them by looking for them. Make something unsexy that\npeople will pay you for.\n\nA good trick for bypassing the schlep and to some extent the unsexy filter is\nto ask what you wish someone else would build, so that you could use it. What\nwould you pay for right now?\n\nSince startups often garbage-collect broken companies and industries, it can\nbe a good trick to look for those that are dying, or deserve to, and try to\nimagine what kind of company would profit from their demise. For example,\njournalism is in free fall at the moment. But there may still be money to be\nmade from something like journalism. What sort of company might cause people\nin the future to say \"this replaced journalism\" on some axis?\n\nBut imagine asking that in the future, not now. When one company or industry\nreplaces another, it usually comes in from the side. So don't look for a\nreplacement for x; look for something that people will later say turned out to\nbe a replacement for x. And be imaginative about the axis along which the\nreplacement occurs. Traditional journalism, for example, is a way for readers\nto get information and to kill time, a way for writers to make money and to\nget attention, and a vehicle for several different types of advertising. It\ncould be replaced on any of these axes (it has already started to be on most).\n\nWhen startups consume incumbents, they usually start by serving some small but\nimportant market that the big players ignore. It's particularly good if\nthere's an admixture of disdain in the big players' attitude, because that\noften misleads them. For example, after Steve Wozniak built the computer that\nbecame the Apple I, he felt obliged to give his then-employer Hewlett-Packard\nthe option to produce it. Fortunately for him, they turned it down, and one of\nthe reasons they did was that it used a TV for a monitor, which seemed\nintolerably d\u00e9class\u00e9 to a high-end hardware company like HP was at the time.\n[17]\n\nAre there groups of scruffy but sophisticated users like the early\nmicrocomputer \"hobbyists\" that are currently being ignored by the big players?\nA startup with its sights set on bigger things can often capture a small\nmarket easily by expending an effort that wouldn't be justified by that market\nalone.\n\nSimilarly, since the most successful startups generally ride some wave bigger\nthan themselves, it could be a good trick to look for waves and ask how one\ncould benefit from them. The prices of gene sequencing and 3D printing are\nboth experiencing Moore's Law-like declines. What new things will we be able\nto do in the new world we'll have in a few years? What are we unconsciously\nruling out as impossible that will soon be possible?\n\nOrganic\n\nBut talking about looking explicitly for waves makes it clear that such\nrecipes are plan B for getting startup ideas. Looking for waves is essentially\na way to simulate the organic method. If you're at the leading edge of some\nrapidly changing field, you don't have to look for waves; you are the wave.\n\nFinding startup ideas is a subtle business, and that's why most people who try\nfail so miserably. It doesn't work well simply to try to think of startup\nideas. If you do that, you get bad ones that sound dangerously plausible. The\nbest approach is more indirect: if you have the right sort of background, good\nstartup ideas will seem obvious to you. But even then, not immediately. It\ntakes time to come across situations where you notice something missing. And\noften these gaps won't seem to be ideas for companies, just things that would\nbe interesting to build. Which is why it's good to have the time and the\ninclination to build things just because they're interesting.\n\nLive in the future and build what seems interesting. Strange as it sounds,\nthat's the real recipe.\n\nNotes\n\n[1] This form of bad idea has been around as long as the web. It was common in\nthe 1990s, except then people who had it used to say they were going to create\na portal for x instead of a social network for x. Structurally the idea is\nstone soup: you post a sign saying \"this is the place for people interested in\nx,\" and all those people show up and you make money from them. What lures\nfounders into this sort of idea are statistics about the millions of people\nwho might be interested in each type of x. What they forget is that any given\nperson might have 20 affinities by this standard, and no one is going to visit\n20 different communities regularly.\n\n[2] I'm not saying, incidentally, that I know for sure a social network for\npet owners is a bad idea. I know it's a bad idea the way I know randomly\ngenerated DNA would not produce a viable organism. The set of plausible\nsounding startup ideas is many times larger than the set of good ones, and\nmany of the good ones don't even sound that plausible. So if all you know\nabout a startup idea is that it sounds plausible, you have to assume it's bad.\n\n[3] More precisely, the users' need has to give them sufficient activation\nenergy to start using whatever you make, which can vary a lot. For example,\nthe activation energy for enterprise software sold through traditional\nchannels is very high, so you'd have to be a lot better to get users to\nswitch. Whereas the activation energy required to switch to a new search\nengine is low. Which in turn is why search engines are so much better than\nenterprise software.\n\n[4] This gets harder as you get older. While the space of ideas doesn't have\ndangerous local maxima, the space of careers does. There are fairly high walls\nbetween most of the paths people take through life, and the older you get, the\nhigher the walls become.\n\n[5] It was also obvious to us that the web was going to be a big deal. Few\nnon-programmers grasped that in 1995, but the programmers had seen what GUIs\nhad done for desktop computers.\n\n[6] Maybe it would work to have this second self keep a journal, and each\nnight to make a brief entry listing the gaps and anomalies you'd noticed that\nday. Not startup ideas, just the raw gaps and anomalies.\n\n[7] Sam Altman points out that taking time to come up with an idea is not\nmerely a better strategy in an absolute sense, but also like an undervalued\nstock in that so few founders do it.\n\nThere's comparatively little competition for the best ideas, because few\nfounders are willing to put in the time required to notice them. Whereas there\nis a great deal of competition for mediocre ideas, because when people make up\nstartup ideas, they tend to make up the same ones.\n\n[8] For the computer hardware and software companies, summer jobs are the\nfirst phase of the recruiting funnel. But if you're good you can skip the\nfirst phase. If you're good you'll have no trouble getting hired by these\ncompanies when you graduate, regardless of how you spent your summers.\n\n[9] The empirical evidence suggests that if colleges want to help their\nstudents start startups, the best thing they can do is leave them alone in the\nright way.\n\n[10] I'm speaking here of IT startups; in biotech things are different.\n\n[11] This is an instance of a more general rule: focus on users, not\ncompetitors. The most important information about competitors is what you\nlearn via users anyway.\n\n[12] In practice most successful startups have elements of both. And you can\ndescribe each strategy in terms of the other by adjusting the boundaries of\nwhat you call the market. But it's useful to consider these two ideas\nseparately.\n\n[13] I almost hesitate to raise that point though. Startups are businesses;\nthe point of a business is to make money; and with that additional constraint,\nyou can't expect you'll be able to spend all your time working on what\ninterests you most.\n\n[14] The need has to be a strong one. You can retroactively describe any made-\nup idea as something you need. But do you really need that recipe site or\nlocal event aggregator as much as Drew Houston needed Dropbox, or Brian Chesky\nand Joe Gebbia needed Airbnb?\n\nQuite often at YC I find myself asking founders \"Would you use this thing\nyourself, if you hadn't written it?\" and you'd be surprised how often the\nanswer is no.\n\n[15] Paul Buchheit points out that trying to sell something bad can be a\nsource of better ideas:\n\n\"The best technique I've found for dealing with YC companies that have bad\nideas is to tell them to go sell the product ASAP (before wasting time\nbuilding it). Not only do they learn that nobody wants what they are building,\nthey very often come back with a real idea that they discovered in the process\nof trying to sell the bad idea.\"\n\n[16] Here's a recipe that might produce the next Facebook, if you're college\nstudents. If you have a connection to one of the more powerful sororities at\nyour school, approach the queen bees thereof and offer to be their personal IT\nconsultants, building anything they could imagine needing in their social\nlives that didn't already exist. Anything that got built this way would be\nvery promising, because such users are not just the most demanding but also\nthe perfect point to spread from.\n\nI have no idea whether this would work.\n\n[17] And the reason it used a TV for a monitor is that Steve Wozniak started\nout by solving his own problems. He, like most of his peers, couldn't afford a\nmonitor.\n\nThanks to Sam Altman, Mike Arrington, Paul Buchheit, John Collison, Patrick\nCollison, Garry Tan, and Harj Taggar for reading drafts of this, and Marc\nAndreessen, Joe Gebbia, Reid Hoffman, Shel Kaphan, Mike Moritz and Kevin\nSystrom for answering my questions about startup history.  \n  \nJapanese Translation| Italian Translation  \n---|---  \nSpanish Translation\n\n", "frontpage": false}
