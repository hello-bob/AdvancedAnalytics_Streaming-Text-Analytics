{"aid": "40167976", "title": "Heed v0.20: Safest and most maintained Rust wrapper for the LMDB key-value store", "url": "https://github.com/meilisearch/heed/releases/tag/v0.20.0", "domain": "github.com/meilisearch", "votes": 2, "user": "Kerollmops", "posted_at": "2024-04-26 11:16:50", "comments": 0, "source_title": "Release v0.20.0 \ud83d\udec1 \u00b7 meilisearch/heed", "source_text": "Release v0.20.0 \ud83d\udec1 \u00b7 meilisearch/heed \u00b7 GitHub\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nmeilisearch / heed Public\n\n  * Notifications\n  * Fork 48\n  * Star 437\n\n# v0.20.0 \ud83d\udec1\n\nLatest\n\nLatest\n\nKerollmops released this 26 Apr 10:59\n\n\u00b7 2 commits to main since this release\n\nv0.20.0\n\naa7bf8a\n\n# heed\n\nHeed is a fully typed LMDB wrapper with minimum overhead. It is also the most\nmaintained Rust wrapper on top of LMDB and is used by meilisearch/meilisearch.\nLMDB is a memory-mapped key-value store that has been battle-tested for a long\ntime.\n\nThis release is about more than 80 closed PRs and issues \u2728. All of them to\nimprove the safety of the library and the usage simplicity. We now even have a\ngreat cookbook to help library users do tricky or advanced operations with\nHeed and LMDB.\n\n## Fix a Soundness Issue with the sync-read-txn Feature\n\nWe removed the unsound sync-read-txn feature that was making the RoTxn: Sync\nwhen it mustn't as it is not safe. We replaced this feature with the read-txn-\nno-tls, which makes the RoTxn: Send, usable from different threads using a\nMutex.\n\nWe apologize for this and are discussing with the RustSec advisory team how\nbest to advise people not to use this unsound feature.\n\n## Opening an Environment is Now Unsafe\n\nThanks to @hinto-janai, opening an environment is now unsafe. There has been a\nlot of discussion about memory mapping and its safety, so I decided to follow\nthe general mood around that. The EnvOpenOptions::open() is unsafe now, and we\nhave a safety paragraph explaining why.\n\n## Support a Lot More LMDB Features\n\nWe exposed nearly every LMDB features: DUPSORT, INTERGER_KEY/DUP,\nREVERSE_KEY/DUP... You'll also be able to iterate over duplicate items or skip\nthem. That's your choice.\n\nYou'll also be able to use the new Database::put_with_flags and\n<Iterator>::put_current_with_flags methods that support the NO_DUP_DATA,\nNO_OVERWRITE, APPEND, and APPEND_DUP flags. Allowing you to append data faster\non keys or duplicate data.\n\nWe improved the iterators' put_current and put_current_reserved methods to\naccept flags and the codec to serialize the data. It is easier to do custom\nencoding operations on databases.\n\n## Support Custom Key Comparison Function\n\nThanks to @xiaoyawei, you can use the LMDB key comparison custom functions and\nnot only rely on the default lexicographic comparison. You can read more about\nthis key-value feature in the LMDB source code.\n\n    \n    \n    use std::cmp::Ordering; use heed_traits::Comparator; enum StringAsIntCmp {} impl Comparator for StringAsIntCmp { fn compare(a: &[u8], b: &[u8]) -> Ordering { let a: i32 = str::from_utf8(a).unwrap().parse().unwrap(); let b: i32 = str::from_utf8(b).unwrap().parse().unwrap(); a.cmp(&b) } } let mut wtxn = env.write_txn()?; let db = env.database_options().types::<Str, Unit>().key_comparator::<StringAsIntCmp>().create(&mut wtxn)?; db.put(&mut wtxn, \"-1000\", &())?; db.put(&mut wtxn, \"-100\", &())?; db.put(&mut wtxn, \"100\", &())?; let mut iter = db.iter(&wtxn)?; assert_eq!(iter.next().transpose()?, Some((\"-1000\", ()))); assert_eq!(iter.next().transpose()?, Some((\"-100\", ()))); assert_eq!(iter.next().transpose()?, Some((\"100\", ()))); assert_eq!(iter.next().transpose()?, None);\n\n## Simplify our Internal Processes\n\nWe now have our own update-to-date lmdb-master-sys crate. It represents the\nbindgen-generated bindings to the LMDB library, and heed is directly plugged\ninto it.\n\nIt will be easier for Meilisearch to bump the engine's LMDB version now. We\npreviously used a fork of the outdated lmdb-rkv-sys crate of Mozilla, but it\nwas cumbersome to bump three repositories, i.e., our fork, meilisearch/lmdb-rs\nand finally heed.\n\nNow we can make all the changes in the heed repository to bump the LMDB\nversion \ud83c\udf89\n\n## Use it with Apple App's SandBoxed applications\n\nThanks to @GregoryConrad, we now have a posix-sem feature. This change allows\niOS and macOS build to comply with Apple's App Sandbox (necessary for\ndistribution in the App Store) and possible speed improvements brought upon by\nthe POSIX semaphores.\n\n## Simplify the Number-Typed Database\n\nYou can now declare a heed Database with a number as the key or the value\nstraightforwardly. Just specify the endianness of it, and that's it.\n\n    \n    \n    use heed::byteorder::BE; use heed::types::*; type BEI64 = I64<BE>; let mut wtxn = env.write_txn()?; let db: Database<BEI64, Unit> = env.create_database(&mut wtxn, Some(\"big-endian-iter\"))?; let ret = db.put(&mut wtxn, &0, &())?; let ret = db.put(&mut wtxn, &68, &())?; let ret = db.put(&mut wtxn, &35, &())?; let ret = db.put(&mut wtxn, &42, &())?; wtxn.commit()?;\n\n## Know the Stats of your Database\n\n@irevoire added some new Env methods to get the size of a database:\n\n  * The Env::map_size returns the size of the original memory map.\n  * The Env::real_disk_size returns the size on the disk as seen by the file system.\n  * The Env::non_free_pages_size returns the size of the non-free pages of the current transaction.\n  * @quake added the Env::resize unsafe method to resize the environment.\n  * You can use the Database::stat method to get detailed information about the internal BTree pages of a database.\n\nYou'll also be able to get the number of entries in a database in a snap. We\nno longer .iter().count() internally and directly ask LMDB about this count.\n\n## Reduce the Number of Copies to Write into your Database\n\nSometimes, it is possible to directly write into your database without first\nserializing your data into an intermediary buffer. For example, it can be true\nfor many data structures like RoaringBitmaps.\n\n    \n    \n    use roaring::RoaringBitmap; type BEI64 = I64<BE>; let mut wtxn = env.write_txn()?; let db = env.create_database::<BEI32, ByteSlice>(&mut wtxn, Some(\"number-string\"))?; let bitmap = RoaringBitmap::from_iter([1, 2, 3, 4]); // Instead of serializing the data into a buffer, as you know the length of it, //You can directly write the data in the LMDB value reserved space. db.put_reserved(&mut wtxn, &42, bitmap.serialize_size(), |reserved| { bitmap.serialize_into(reserved) })?;\n\n## Better Error Handling and Debugging\n\n### Return Expressive Errors when Encoding and Decoding Data\n\nThe support for custom encoding/decoding errors has been added. Weren't you\nfrustrated when heed triggered an error in one of the encoding/decoding\ntraits, and you could not understand why? It is no longer an issue as the\nBytesEncode/BytesDecode traits can return a BoxedError to keep the information\nand let you decide what to do with it.\n\n### Safer Environment Opening\n\nWe introduced the BadOpenOptions heed error when a database is already opened\nin the same program, but you tried to open it with different options. This\nbehavior will also be improved in v0.20.0 to simplify the usage of the lib and\nmake it more correct towards LMDB behaviors around the map size.\n\n### Implement Debug for most Structs\n\nA lot more types implement the Debug trait. It will be easier to embed an Env,\na Database, or even an iterator in a struct that already implements Debug.\n\n### Document Every Public Types\n\nThanks to @AureliaDolo and @darnuria, we have a much better documentation\ncovering and added examples to nearly everything that could look complex. On\nthe other hand, @wackbyte improved the general documentation and quality of\nthe sentences.\n\n## Always use the Vendored Version of LMDB\n\n> The principle of least astonishment applies to user interface and software\n> design. It proposes that a system component should behave how most users\n> expect it to behave. The behavior should not astonish or surprise users.\n\nSince the early days of heed, it has automatically linked to the already\navailable libmdb library installed on the system. We saw a lot of strange\nissues, non-reproducible on our side, and later discovered that the system-\nLMDB of Arch Linux was used by heed instead of the vendored one!\n\nIt is no longer an issue as we removed this behavior for the build.rs. The\nvendored version is always used. We no longer use an unknown version of LMDB.\n\n## Simplify Transaction Usage\n\n### Make it Possible to use Read-Only LMDB Environments\n\nThanks to @darnuria again, read-only transactions sometimes need to commit to\nmaking databases globally usable in the program. We now have tests to open and\ncommit databases in read-only environments. However, this change is subtle. We\nmust commit to making a just-opened database global and not just local.\n\n    \n    \n    let rtxn = env.read_txn()?; let db = env.open_poly_database(&rtxn, Some(\"my-database\"))?; rtxn.commit()?; // We can store and use `db` here if the database is alive.\n\nThis detail raised an issue in heed. It is currently not safe to use a\nDatabase. We must redefine how we open and create databases to make them safe.\nThe new API should be released for v0.20.0.\n\nIn this release, the RwTxn::abort method no longer returns a heed::Result as\nLMDB can't fail. It was introduced when we were supporting MDBX.\n\n### Merge Two Lifetimes\n\nWe simplified the signature of the RoTxn and RwTxn types by removing one\nlifetime and only keeping a single one. The new signature only has a single 'p\nlifetime, the environment lifetime, or the parent transaction. The\nsimplification was possible as the parent transaction must already live longer\nthan the environment.\n\n    \n    \n    // Previous Signature struct RwTxn<'env, 'parent, T = ()>; // New Signature struct RwTxn<'p>;\n\n### Replace the Generic Parameter with a Runtime Check\n\nWe also removed the types of transactions. Those types were first introduced\nto avoid using a transaction opened with one environment with another one.\nUnfortunately, as the T type was optional, it wasn't used much. We decided\nthat a runtime check would be better and added a bunch of assert_eq! to be\nsure that transactions and environments weren't mixed.\n\n### We no Longer use Nested Transactions when Opening Databases\n\nThe previous version of Heed used nested transactions when opening or creating\ndatabases. The operation did it this way to simplify internal methods.\nUnfortunately, LMDB has some limitations: using nested transactions with the\nMDB_WRITEMAP option is impossible.\n\nIt is now possible to use LMDB with MDB_WRITEMAP and open databases freely \ud83d\ude0a\n\n### Expose the Advanced MDB_IDL_LOGN parameter\n\nYou can change the MDB_IDL_LOGN parameter to change the internal behavior of\nLMDB. This parameter is mainly used to control memory usage and the size of\nthe dirty pages pool, which affects the transaction size. You can read more on\nthis on the tracking issue, why Mozilla used it, and how.\n\n### Contributors\n\nquake, darnuria, and 6 other contributors\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
