{"aid": "40140636", "title": "Shipping Rails Logs with Kamal and Vector", "url": "https://www.honeybadger.io/blog/kamal-vector-logs/", "domain": "honeybadger.io", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-24 04:37:21", "comments": 0, "source_title": "Shipping Rails logs with Kamal and Vector", "source_text": "Shipping Rails logs with Kamal and Vector - Honeybadger Developer Blog\n\n\ud83c\udf89 Introducing Honeybadger Insights \u2014 logging and observability from\nHoneybadger! Check it out \u2192\n\n# Shipping Rails logs with Kamal and Vector\n\nYou've deployed your Rails app with Kamal, but now what? How do you know\nwhat's happening under the hood? You can tail your logs on the server\n(otherwise known as hard mode), but there's a better way: ship them off-site\nwith Vector!\n\n  * By Roel Bondoc\n  * #ruby #rails #kamal\n  * Apr 23, 2024\n\nUp and running with Kamal (2 part series)\n\n  * 1 Deploy a Rails app to a VPS with Kamal\n  * 2 Shipping Rails logs with Kamal and Vector\n\nThe ability to record and see everything happening across your web\napplications is essential when building resilient and highly available\nsystems. All of your events\u2014from application logs to errors to user\nbehavior\u2014contain data that could be useful to you and your team. When you have\na central place to access all this information, finding issues and their root\ncauses becomes easier because you have the data at your fingertips. At\nHoneybadger, we're making that easier for everyone with our new observability\nplatform, Honeybadger Insights. While you can send many things to Insights,\nlogging is one of the quickest wins with the most gain.\n\nIn this tutorial, we'll deploy a Rails application to production with Kamal,\nwith structured application logs sent to Honeybadger Insights. If you want to\nskip ahead and see the final result, I've posted the source code I used to\ncreate this tutorial here: github.com/roelbondoc/rails-kamal-vector.\n\n## Requirements\n\nYou'll need a few things before getting started with this tutorial:\n\n  * Rails application\n  * Docker registry for pushing images\n  * Server to deploy your service\n  * Honeybadger account, it's free!\n\n## Generate a new Rails application\n\nTo follow this tutorial, you'll need a Rails application. If you'd like\ndetailed instructions on how to create one, the Getting Started guide on the\nRuby on Rails website is a great resource. Here's a quick breakdown of how to\ndo that if you need a refresher:\n\nFirst, ensure you have a recent version of Ruby installed. You can check this\nby running the following in a terminal:\n\n    \n    \n    ruby -v\n\nThis will return the version currently installed on your system. At the time\nof this writing, you'll need at least version 2.7.0 or higher.\n\nInstall the rails gem:\n\n    \n    \n    gem install rails\n\nAnd generate a new Rails application:\n\n    \n    \n    rails new my-app\n\n\u201cEveryone is in love with Honeybadger ... the UI is spot on.\u201d\n\nMolly Struve, Sr. Site Reliability Engineer, Netflix\n\nStart free trial\n\n## Configuring Rails logs\n\nBy default, Rails outputs logs using a plain unformatted formatter. This is\nfine in development when building your application and examining log output\nfor debugging purposes. However, you'll want to introduce structured logging\nto make the most of an observability platform. With structured logs and a\nservice to store them, logging becomes extremely powerful as part of your\nobservability toolbelt. One way to do this in Rails is by using the Lograge\ngem.\n\nAdd the gem to your Rails application:\n\n    \n    \n    bundle add lograge\n\nConfigure the logging in your production.rb file:\n\n    \n    \n    config.logger = ActiveSupport::Logger.new(STDOUT) config.lograge.enabled = true config.lograge.formatter = Lograge::Formatters::Json.new\n\nBy enabling Lograge with a JSON formatter in your Rails app, you'll get to\ntake advantage of any values passed into your logs. Notice how the logger is\nconfigured to output to STDOUT. This will output the logs to the Docker\ndaemon. We'll use Vector to read those logs and ship them off to Honeybadger.\n\n## Kamal\n\nKamal is an open source deployment strategy created by the folks at 37Signals.\nYou can think of Kamal as the successor to Capistrano. The great thing about\nKamal is that it takes advantage of container-based deployments but wraps\neverything up in easy-to-understand commands.\n\nIf you are using the sample application above, you'll see a .env.sample file\nin the repo. Make a copy of this file with the name .env in the same directory\nlocation. Modify the KAMAL_REGISTRY_PASSWORD with the password for your docker\nregistry service. Next, replace the following fields in the config/deploy.yml\nfile:\n\n  * <your registry path> \\- This would be the URL path of where you will push your images.\n  * <your registry username> \\- The username you use to log into your registry.\n  * <your server ip address> \\- The destination server to which you will deploy our application.\n\nIf you are setting up Kamal on your own application for the first time, take a\nlook at my previous article for more information about configuring Kamal.\n\nAfter successfully configuring Kamal, you should be able to deploy your\napplication like this:\n\n    \n    \n    kamal deploy\n\n## Kamal Accessories\n\nIn Kamal, accessories aren't part of your Rails app but rather run alongside\nyour Rails app. These can be things like cache services, databases, or other\nexternal appliances. Adding Vector as an accessory is pretty simple.\n\nAdd the following to the bottom of your deploy.yml file.\n\n    \n    \n    accessories: vector: image: timberio/vector:latest-alpine roles: - web volumes: - /var/run/docker.sock:/var/run/docker.sock files: - \"./config/vector/vector.yaml:/etc/vector/vector.yaml\"\n\nThis defines an accessory called vector that uses the docker image\ntimberio/vector:latest-alpine. This will run on all hosts with the role web,\nwhich is useful if you need to horizontally scale your application. Mounting\nthe /var/run/docker.sock volume allows Vector to monitor the logs of any\ncontainers running on the host (remember how the Rails app is configured to\noutput to STDOUT?). Finally, we'll configure Vector with a vector.yaml file.\n\nAt the time of this writing, the files configuration seems to be an\nundocumented feature. When Kamal deploys your app, it'll make a copy of the\nvector.yaml file on each web host and mount it to the vector accessory.\n\n## Vector\n\nVector is an open source tool used for observability infrastructure. We can\nuse Vector to monitor and observe our application logs and ship them to\nHoneybadger Insights for storage and processing.\n\nCreate a file located at config/vector/vector.yaml in your project directory,\nand start with the following:\n\n    \n    \n    sources: docker: type: \"docker_logs\"\n\nVector works on a series of pipelines: starting from a source, going through a\nseries of transforms, and finally ending up in a sink. In this configuration,\nwe are telling Vector that one of our sources is docker_logs. Vector will\nmonitor the Docker socket for any logs outputted.\n\nAdd a transform for processing the docker source:\n\n    \n    \n    transforms: parse_logs: type: \"remap\" inputs: [\"docker\"] source: | payload, err = parse_json(string!(.message)) if err == null { .payload = payload del(.message) }\n\nAs you may have heard, structured logging is good! That's why Vector has\nbuilt-in functionality to handle this. This transform takes in the docker\nsource and pipes it into a bit of code. If the log message can be parsed as a\nJSON object, it gets set to a payload key and the initial message gets\nremoved. If the log message can't be parsed, the log message gets passed on.\n\nFinish off the pipeline with a sink. Add the following to your vector.yaml:\n\n    \n    \n    sinks: honeybadger_events: type: \"http\" inputs: [\"parse_logs\"] uri: \"https://api.honeybadger.io/v1/events\" request: headers: X-API-Key: \"<YOUR HONEYBADGER API KEY HERE>\" encoding: codec: \"json\" framing: method: \"newline_delimited\"\n\nTaking the parse_logs transform output, this sink tells Vector to send the\nlogs to the Honeybadger events endpoint for processing. Be sure to set your\nHoneybadger API key first. This completes the Vector configuration.\n\nPush up the vector configuration file:\n\n    \n    \n    kamal env push\n\nStart (or restart) the vector container on each web host, mounting the volumes\nand files as needed:\n\n    \n    \n    kamal accessory reboot vector\n\nVector will start monitoring the docker daemon on your server and ship any\nlogs to Insights. If you take a look at your Insights tab in Honeybadger, you\nshould see logs coming through!\n\nRails application logs from Kamal in Honeybadger Insights\n\n## Dive into Insights\n\nHoneybadger Insights is our new logging, observability, and event-tracking\nplatform. By integrating your existing Honeybadger data\u2014like errors and uptime\nmonitoring\u2014with your application logs, custom events, and metrics, Insights\nlets you get deeper into data analytics like never before. Here are a few\nthings you can do:\n\n  * Query your Rails logs and filter based on the context attached via your structured logs.\n  * Cross-reference errors with logs and see the data in one place.\n  * Collect metrics and gain visibility into your application performance.\n  * Build custom dashboards to detect anomalies and see everything at a glance.\n\nBest of all, Insights is available on our free Developer plan, so you can\nstart sending your events right away!\n\nLogs are just one of the things Insights is great for. Insights helps you go\nbeyond just basic observability and monitoring. Take a look at Josh's article\non Visualizing Ahoy analytics in Rails for another practical example of what\nyou can do with Insights.\n\nWhat to do next:\n\n  1. Try Honeybadger for FREE\n\nHoneybadger helps you find and fix errors before your users can even report\nthem. Get set up in minutes and check monitoring off your to-do list.\n\nStart free trial\n\nEasy 5-minute setup \u2014 No credit card required\n\n  2. Get the Honeybadger newsletter\n\nEach month we share news, best practices, and stories from the DevOps &\nmonitoring community\u2014exclusively for developers like you.\n\n#### Roel Bondoc\n\nThroughout his career, Roel has worked with various languages and frameworks\nlike ColdFusion, C#, VB, Perl, PHP, and Python. He found his true calling\nworking with Ruby on Rails. Now he's a software developer for Honeybadger\nworking on the things he enjoys most!\n\n  * @roelbondoc Author Twitter\n  * GitHub Author GitHub\n  * Mastodon Author Mastodon\n\nMore articles by Roel Bondoc\n\n## More Ruby articles\n\n  * Apr 09, 2024 Account-based subdomains in Rails\n  * Mar 12, 2024 Let's build a Hanami app\n  * Mar 05, 2024 How to deploy a Rails app to Render\n  * Feb 12, 2024 Visualizing Ahoy analytics in Rails\n  * Feb 07, 2024 Building reusable UI components in Rails with ViewComponent\n  * Jan 17, 2024 Composite primary keys in Rails\n  * Dec 14, 2023 Deploy a Rails app to a VPS with Kamal\n  * Nov 20, 2023 How to build your own user authentication system in Rails\n  * Nov 02, 2023 How to organize your code using Rails Concerns\n  * Oct 16, 2023 FactoryBot for Rails testing\n\nStop wasting time manually checking logs for errors!\n\nTry the only application health monitoring tool that allows you to track\napplication errors, uptime, and cron jobs in one simple platform.\n\n  * Know when critical errors occur, and which customers are affected.\n  * Respond instantly when your systems go down.\n  * Improve the health of your systems over time.\n  * Fix problems before your customers can report them!\n\nAs developers ourselves, we hated wasting time tracking down errors\u2014so we\nbuilt the system we always wanted.\n\nHoneybadger tracks everything you need and nothing you don't, creating one\nsimple solution to keep your application running and error free so you can do\nwhat you do best\u2014release new code. Try it free and see for yourself.\n\nStart free trial\n\nSimple 5-minute setup \u2014 No credit card required\n\nLearn more\n\n\"We've looked at a lot of error management systems. Honeybadger is head and\nshoulders above the rest and somehow gets better with every new release.\" \u2014\nMichael Smith, Cofounder & CTO of YvesBlue\n\nHoneybadger is trusted by top companies like:\n\n\u201cEveryone is in love with Honeybadger ... the UI is spot on.\u201d\n\nMolly Struve, Sr. Site Reliability Engineer, Netflix\n\nStart free trial\n\nAre you using Sentry, Rollbar, Bugsnag, or Airbrake for your monitoring?\nHoneybadger includes error tracking with a whole suite of amazing monitoring\ntools \u2014 all for probably less than you're paying now. Discover why so many\ncompanies are switching to Honeybadger here.\n\nStart free trial\n\nProduct\n\nStacks\n\nCompany\n\nResources\n\n", "frontpage": false}
