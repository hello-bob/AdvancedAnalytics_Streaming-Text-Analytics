{"aid": "40253090", "title": "LCD FeatherWing", "url": "https://www.oddlyspecificobjects.com/products/lcdwing/", "domain": "oddlyspecificobjects.com", "votes": 1, "user": "kristianpaul", "posted_at": "2024-05-03 22:32:09", "comments": 0, "source_title": "LCD FeatherWing \u00b7 Oddly Specific Objects", "source_text": "LCD FeatherWing \u00b7 Oddly Specific Objects\n\nCC-BY-SA 4.0 Joey Castillo, except for the bear!\n\n# LCD FeatherWing\n\nThe LCD FeatherWing is a low-power display compatible with Adafruit\u2019s Feather\nline of development boards. It uses the BU9796 segment LCD controller to drive\na custom liquid crystal display glass with 48 segments, including:\n\n  * Five indicator icons: Bell, Wifi, Moon, Arrows and Battery\n  * Five 7-segment digits, plus a sign indicator\n  * Four decimal points, one between each pair of digits\n  * AM and PM indicators, plus a colon for displaying the time\n\n## Contents\n\n  * Assembly Instructions\n  * CircuitPython usage\n  * Arduino usage\n  * Notes for both platforms\n  * Putting It All Together: a Simple Clock App\n  * Advanced Configuration\n\n## Assembly Instructions\n\nFirst, insert the LCD glass on the front of the wing (the side with the big\nwhite box). Then flip the wing over, and solder the LCD pins into the through\nholes on the back.\n\nNext, insert the Feather headers from the back, and solder them in on the\nfront.\n\n## Usage\n\nLibraries exist for both CircuitPython and Arduino, so you can get started\nquickly.\n\n### CircuitPython Usage\n\n  1. Download the Adafruit library and driver bundle, as well as the CircuitPython driver for LCD FeatherWing.\n  2. Plug in your Feather board running CircyutPython, and ensure that you can see the CIRCUITPY drive on your computer.\n  3. Copy both the adafruit_bus_device folder and the oso_lcd folder to your board\u2019s lib folder.\n\nYou\u2019re done! Now you can instantiate the LCD driver and write to the display\nlike so:\n\n    \n    \n    import board from oso_lcd.lcdwing_lite import LCDWingLite display = LCDWingLite(board.I2C()) display.print(\"HELLO\")\n\nFrom here, skip ahead to the notes for both platforms section for more details\nabout working with the LCD.\n\n### Arduino Usage\n\nIn the Arduino library manager, search for and install the \u201cOddly Specific\nObjects LCD FeatherWing Library\u201d. It may ask about a dependency, the \u201cAdafruit\nBus Device\u201d library. If it does, make sure to install that library too.\n\nNow, you can instantiate the LCD driver (after #includeing OSO_LCD.h):\n\n    \n    \n    OSO_LCDWing display; if (!display.begin()) { while (1) Serial.println(\"ERR\"); }\n\nThis checks to make sure that the LCD driver initialized successfully, and\ndisplays an error message on the serial terminal if it did not.\n\nYou can clear the LCD like this:\n\n    \n    \n    display.fill(0);\n\nand energize all segments like so:\n\n    \n    \n    display.fill(1);\n\nPrinting text to the LCD is easy:\n\n    \n    \n    display.print(\"hello\");\n\nFor more details, read onto the next section, notes for both platforms.\n\n### Notes for Both Platforms\n\nWhether you are using CircuitPython or Arduino, the API for both platforms is\nlargely identical, as is the character set. These guidelines apply to both\nplatforms, and where syntax differences exist, the difference will be called\nout and the syntax described for each.\n\n#### Character Set Notes\n\nThe character set in the LCD FeatherWing library displays characters in mixed\ncase in order to give each character a unique representation. Both uppercase\nand lowercase letters in your string display in the case chosen by the\nlibrary; there is no difference between display.print(\"ABCDE\") and\ndisplay.print(\"abcde\"). A appears as uppercase, but B and D appear as\nlowercase to distinguish them from the 8 and 0 characters:\n\nSimilarly, C appears in lowercase to distinguish it from the open parenthesis\n(, as seen here when we display.print(\"(789)\"):\n\nSome characters simply don\u2019t work well as a seven-segment digit. In this\nexample, we\u2019ve called display.print(\"Wifi\") and display.print(\"Main\"). The W\nappears as an upside down A, and the M appears as a tall N:\n\nIf you are willing to sacrifice two characters, you can display these letters\nusing some two character codes: $J displays a W, and &7 displays an M. So you\ncould display \u201cWifi\u201d by calling display.print(\"$Jifi\"), or \u201cMain\u201d by calling\ndisplay.print(\"&7ain\"):\n\nFinally, there\u2019s one character that doesn\u2019t do what you would expect. Since\nthe # symbol doesn\u2019t translate well to a 7-segment display, the library uses\nthis character to display the degree symbol. So if you wanted to display a\ntemperature of 72.4\u00b0 F, you would do it like so: display.print(\"72.4#F\").\n\n#### The Colon\n\nWhen you call display.print, the LCD FeatherWing library automatically sets\nthe colon if there is a colon in the appropriate spot (usually the third\ncharacter in a string). So, for example, calling display.print(\"12:34\") will\nset the colon.\n\nHowever, calling display.print(\"1:23\") will not set the colon.\n\nInstead, add a space before: display.print(\" 1:23\"). The additional space at\nthe beginning of the string pushes the colon to the correct spot.\n\nThere is also a special method to toggle the colon. Call\ndisplay.toggle_colon() and it will set the colon to the opposite of its\ncurrent state: if it was on, it turns off, and if it was off it turns on.\nCalling this method twice a second is a good way to display a clock ticking.\n\n#### Sign Indicator and Decimal Points\n\nIf the first character in your string is a minus sign (-), the LCD FeatherWing\nlibrary will set the sign indicator to the left of the digits instead of\nputting the sign in the first digit. This means that you can display any\nnumber from -99999 to 99999.\n\nIt also means that if you are using the colon, it will be expected in the\nfourth position instead of the third, as in this countdown clock:\ndisplay.print(\"-10:00.0\").\n\nThere are four decimal points, one between each digit. The LCD FeatherWing\nlibrary will automatically set the appropriate decimal point if it is included\nin your string, unless it occurs before the first digit or after the last one.\nThis is because there is no decimal point to the left of the first digit or\nthe right of the last one. So, for example, display.print(\".1234\") will\ndisplay incorrectly, but display.print(\"0.1234\") will work. Similarly,\ndisplay.print(\"Thurs.\") will omit the period at the end, but\ndisplay.print(\"Thur.\") will display it.\n\n#### Indicator Icons\n\nThere are seven indicators on the LCD, including five icons as well as the AM\nand PM indicators on the right.\n\nYou can control these indicators using the set_indicator and clear_indicator\nmethods, but note that the names you pass to these functions differ between\nCircuitPython and Arduino.\n\n##### CircuitPython indicator names\n\nThe indicator names are defined in the Indicator class in the lcdwing_lite\nmodule. Their definitions, clockwise from top left:\n\n  * Indicator.BELL\n  * Indicator.WIFI\n  * Indicator.AM\n  * Indicator.PM\n  * Indicator.BATTERY\n  * Indicator.DATA (the paired arrows)\n  * Indicator.MOON\n\nThere is also a special value, Indicator.ALL, that is useful to clear all\nindicators at once: display.clear_indicator(Indicator.ALL).\n\n##### Arduino indicator names\n\nThe indicator names are constants defined in OSO_LCD.h. Their names, clockwise\nfrom top left:\n\n  * OSO_INDICATOR_BELL\n  * OSO_INDICATOR_WIFI\n  * OSO_INDICATOR_AM\n  * OSO_INDICATOR_PM\n  * OSO_INDICATOR_BATTERY\n  * OSO_INDICATOR_DATA (the paired arrows)\n  * OSO_INDICATOR_MOON\n\nThere is also a special value, OSO_INDICATOR_ALL, that is useful to clear all\nindicators at once: display.clear_indicator(OSO_INDICATOR_ALL).\n\n### Putting It All Together: a Simple Clock App\n\n#### CircuitPython\n\nThis Python script is available in the examples folder of the LCD FeatherWing\nCircuitPython library. It\u2019s a simple clock that uses CircuitPython\u2019s built-in\nRTC module to display the current time.\n\n    \n    \n    import board import time import rtc from oso_lcd.lcdwing_lite import LCDWingLite, Indicator display = LCDWingLite(board.I2C()) minute = None clock = rtc.RTC() clock.datetime = time.struct_time((2022, 6, 30, 11, 59, 55, 0, -1, -1)) while True: if minute != clock.datetime.tm_min: dt = clock.datetime hour = dt.tm_hour % 12 minute = dt.tm_min display.clear_indicator(Indicator.ALL) display.print(\"{:2d}:{:02d}\".format(hour if hour else 12, minute)) if dt.tm_hour < 12: display.set_indicator(Indicator.AM) else: display.set_indicator(Indicator.PM) display.toggle_colon() time.sleep(0.5)\n\n#### Arduino\n\nThis Arduino sketch is available in the examples folder of the LCD FeatherWing\nArduino library. It functions identically to the CircuitPython script above.\nNote that it is designed for the Feather M0, and requires the ZeroRTC library.\n\n    \n    \n    #include <OSO_LCD.h> #include <RTCZero.h> RTCZero rtc; OSO_LCDWing display; void setup() { rtc.begin(); if (!display.begin()) { while (1) Serial.println(\"ERR\"); } display.fill(0); rtc.setHours(11); rtc.setMinutes(59); rtc.setSeconds(55); } int minute = -1; char buf[10]; void loop() { int newMinute = rtc.getMinutes(); if (minute != newMinute) { int hours = rtc.getHours() % 12; minute = newMinute; sprintf(buf, \"%2d%02d \", hours ? hours : 12, minute); display.clear_indicator(OSO_INDICATOR_ALL); if (rtc.getHours() < 12) { display.set_indicator(OSO_INDICATOR_AM); } else { display.set_indicator(OSO_INDICATOR_PM); } display.print(buf); } display.toggle_colon(); delay(500); }\n\n## Resources\n\n  * LCD FeatherWing CircuitPython library\n  * LCD FeatherWing Arduino library\n  * Design files for LCD wing and custom LCD\n  * BU9796 data sheet\n\n# Advanced Configuration\n\nThere are two solder jumpers on the back of the circuit board that allow for\nadvanced configuration. In general, you don\u2019t need to do anything to them, but\nthey can be useful in some specific cases.\n\n### JP1: Software Contrast Control\n\nJP1 allows you to control the LCD driving voltage using the DAC pin on an\nESP32 Feather or a Feather M4. This can be useful to lower the contrast of the\ndisplay if you intend to view it from an extreme angle.\n\nTo enable this functionality, use an Exacto knife to cut the bridge connecting\nJP1 to the pad on the right (GND). Then use a blob of solder to bridge the\ncenter pad to the left pad (A0).\n\nNow, the voltage on A0 will define the LCD voltage according to the following\nformula: VLCD = 3.3 - A0. Setting A0 to 0 V will drive the LCD at 3.3 volts;\nsetting A0 to 0.3 V will drive it at 3.0 volts, etc.\n\n### SDA and SCL jumpers: alternate I2C bus\n\nThe BU9796 has no address pins, so you can only drive one display on an I2C\nbus. However, some Feather boards can support two or even more I2C buses! By\nsoldering wires to these pads and rerouting some signals, you can drive\nmultiple LCD FeahterWings from one Feather.\n\nPlease note: THIS IS AN ADVANCED HACK and it\u2019s easy to inadvertently cut a\ntrace, pull a pad or knock off a surface mount resistor while doing this.\nPlease only attempt this if you feel comfortable working in a very small area.\n\nTo do this hack, fully cut the bridge connecting the top and bottom of the SDA\nand SCL jumpers. Then solder a wire to the BOTTOM half of the jumper. Connect\nthe other side of the wire to an alternate SDA or SCL pin.\n\nSome guidance on which pins work:\n\n#### ESP32/S2/S3 and NRF52840 Feathers\n\nThese devices have two I2C peripherals. In addition to the main I2C bus on SDA\nand SCL, any two pins can function as a second I2C bus.\n\n#### Feather M0 and M0 Express\n\nThese devices can support up to four I2C buses. In addition to the main I2C\nbus on SDA and SCL, you can use the following pins to create three additional\nI2C buses:\n\n  * A1 (SDA) and A2 (SCL) *\n  * A3 (SDA) and A4 (SCL)\n  * 11 (SDA) and 13 (SCL)\n\n* Note that in this configuration, you will be unable to use the SPI pins as an SPI bus, although they\u2019ll still work fine as GPIO.\n\n#### Feather M4 Express\n\nThis device can support up to SIX I2C buses! In addition to the main I2C bus\non SDA and SCL, you can use the following pins to create five additional I2C\nbuses:\n\n  * A2 (SDA) and A3 (SCL)\n  * A4 (SDA) and A1 (SCL)\n  * 12 (SDA) and 13 (SCL)\n  * TX (SDA) and RX (SCL)\n  * 5 (SDA) and SCK (SCL)\n\n", "frontpage": false}
