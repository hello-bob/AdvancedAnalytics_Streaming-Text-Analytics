{"aid": "40197478", "title": "IsBooleanTooLongAndComplex", "url": "https://testing.googleblog.com/2024/04/isbooleantoolongandcomplex.html", "domain": "googleblog.com", "votes": 1, "user": "mooreds", "posted_at": "2024-04-29 12:35:32", "comments": 0, "source_title": "isBooleanTooLongAndComplex", "source_text": "Google Testing Blog: isBooleanTooLongAndComplex\n\n## Testing Blog\n\n## isBooleanTooLongAndComplex\n\nThursday, April 25, 2024\n\nThis is another post in our Code Health series. A version of this post\noriginally appeared in Google bathrooms worldwide as a Google Testing on the\nToilet episode. You can download a printer-friendly version to display in your\noffice.\n\nBy Yiming Sun\n\nYou may have come across some complex, hard-to-read Boolean expressions in\nyour codebase and wished they were easier to understand. For example, let's\nsay we want to decide whether a pizza is fantastic:\n\n// Decide whether this pizza is fantastic.if ((!pepperoniService.empty() ||\nsausages.size() > 0)&& (useOnionFlag.get() || hasMushroom(ENOKI, PORTOBELLO))\n&& hasCheese()) {...}  \n---  \n  \nA first step toward improving this is to extract the condition into a well-\nnamed variable:\n\nboolean isPizzaFantastic =(!pepperoniService.empty() || sausages.size() > 0)&&\n(useOnionFlag.get() || hasMushroom(ENOKI, PORTOBELLO)) && hasCheese();if\n(isPizzaFantastic) {...}  \n---  \n  \nHowever, the Boolean expression is still too complex. It's potentially\nconfusing to calculate the value of isPizzaFantastic from a given set of\ninputs. You might need to grab a pen and paper, or start a server locally and\nset breakpoints.\n\nInstead, try to group the details into intermediate Booleans that provide\nmeaningful abstractions. Each Boolean below represents a single well-defined\nquality, and you no longer need to mix && and || within an expression. Without\nchanging the business logic, you\u2019ve made it easier to see how the Booleans\nrelate to each other:\n\nboolean hasGoodMeat = !pepperoniService.empty() || sausages.size() > 0;boolean\nhasGoodVeggies = useOnionFlag.get() || hasMushroom(ENOKI, PORTOBELLO);boolean\nisPizzaFantastic = hasGoodMeat && hasGoodVeggies && hasCheese();  \n---  \n  \nAnother option is to hide the logic in a separate method. This also offers the\npossibility of early returns using guard clauses, further reducing the need to\nkeep track of intermediate states:\n\nboolean isPizzaFantastic() {if (!hasCheese()) {return false;}if\n(pepperoniService.empty() && sausages.size() == 0) {return false;}return\nuseOnionFlag.get() || hasMushroom(ENOKI, PORTOBELLO); }  \n---  \n  \nGoogle\n\nLabels: Code Health , TotT , Yiming Sun\n\n#### No comments :\n\n#### Post a Comment\n\nThe comments you read and contribute here belong only to the person who posted\nthem. We reserve the right to remove off-topic comments.\n\n## Labels\n\n  * TotT 95\n  * GTAC 61\n  * James Whittaker 42\n  * Misko Hevery 32\n  * Anthony Vallone 27\n  * Code Health 25\n  * Patrick Copeland 23\n  * Jobs 18\n  * Andrew Trenk 12\n  * C++ 11\n  * Patrik H\u00f6glund 8\n  * JavaScript 7\n  * Allen Hutchison 6\n  * George Pirocanac 6\n  * Zhanyong Wan 6\n  * Harry Robinson 5\n  * Java 5\n  * Julian Harty 5\n  * Alberto Savoia 4\n  * Ben Yu 4\n  * Erik Kuefler 4\n  * Philip Zembrod 4\n  * Shyam Seshadri 4\n  * Adam Bender 3\n  * Chrome 3\n  * Dillon Bly 3\n  * John Thomas 3\n  * Lesley Katzen 3\n  * Marc Kaplan 3\n  * Markus Clermont 3\n  * Max Kanat-Alexander 3\n  * Sonal Shah 3\n  * APIs 2\n  * Abhishek Arya 2\n  * Alan Myrvold 2\n  * Alek Icev 2\n  * Android 2\n  * April Fools 2\n  * Chaitali Narla 2\n  * Chris Lewis 2\n  * Chrome OS 2\n  * Diego Salas 2\n  * Dori Reuveni 2\n  * Jason Arbon 2\n  * Jochen Wuttke 2\n  * Kostya Serebryany 2\n  * Marc Eaddy 2\n  * Marko Ivankovi\u0107 2\n  * Mobile 2\n  * Oliver Chang 2\n  * Simon Stewart 2\n  * Stefan Kennedy 2\n  * Test Flakiness 2\n  * Tony Voellm 2\n  * WebRTC 2\n  * Yiming Sun 2\n  * Yvette Nameth 2\n  * Zuri Kemp 2\n  * Aaron Jacobs 1\n  * Adam Porter 1\n  * Adam Raider 1\n  * Adel Saoud 1\n  * Alan Faulkner 1\n  * Alex Eagle 1\n  * Anantha Keesara 1\n  * Antoine Picard 1\n  * App Engine 1\n  * Ari Shamash 1\n  * Arif Sukoco 1\n  * Benjamin Pick 1\n  * Bob Nystrom 1\n  * Bruce Leban 1\n  * Carlos Arguelles 1\n  * Carlos Israel Ortiz Garc\u00eda 1\n  * Cathal Weakliam 1\n  * Christopher Semturs 1\n  * Clay Murphy 1\n  * Dagang Wei 1\n  * Dan Shi 1\n  * Dan Willemsen 1\n  * Dave Chen 1\n  * Dave Gladfelter 1\n  * David Mandelberg 1\n  * Derek Snyder 1\n  * Diego Cavalcanti 1\n  * Dmitry Vyukov 1\n  * Eduardo Bravo Ortiz 1\n  * Ekaterina Kamenskaya 1\n  * Elliott Karpilovsky 1\n  * Espresso 1\n  * Felipe Sodr\u00e9 1\n  * Francois Aube 1\n  * Google+ 1\n  * Goran Petrovic 1\n  * Goranka Bjedov 1\n  * Hank Duan 1\n  * Havard Rast Blok 1\n  * Hongfei Ding 1\n  * Jason Elbaum 1\n  * Jason Huggins 1\n  * Jay Han 1\n  * Jeff Hoy 1\n  * Jeff Listfield 1\n  * Jessica Tomechak 1\n  * Jim Reardon 1\n  * Joe Allan Muharsky 1\n  * Joel Hynoski 1\n  * John Micco 1\n  * John Penix 1\n  * Jonathan Rockway 1\n  * Jonathan Velasquez 1\n  * Josh Armour 1\n  * Julie Ralph 1\n  * Kai Kent 1\n  * Karin Lundberg 1\n  * Kaue Silveira 1\n  * Kevin Bourrillion 1\n  * Kevin Graney 1\n  * Kirkland 1\n  * Kurt Alfred Kluever 1\n  * Manjusha Parvathaneni 1\n  * Marek Kiszkis 1\n  * Marius Latinis 1\n  * Mark Ivey 1\n  * Mark Manley 1\n  * Mark Striebeck 1\n  * Matt Lowrie 1\n  * Meredith Whittaker 1\n  * Michael Bachman 1\n  * Michael Klepikov 1\n  * Mike Aizatsky 1\n  * Mike Wacker 1\n  * Mona El Mahdy 1\n  * Noel Yap 1\n  * Palak Bansal 1\n  * Patricia Legaspi 1\n  * Per Jacobsson 1\n  * Peter Arrenbrecht 1\n  * Peter Spragins 1\n  * Phil Norman 1\n  * Phil Rollet 1\n  * Pooja Gupta 1\n  * Project Showcase 1\n  * Radoslav Vasilev 1\n  * Rajat Dewan 1\n  * Rajat Jain 1\n  * Rich Martin 1\n  * Richard Bustamante 1\n  * Roshan Sembacuttiaratchy 1\n  * Ruslan Khamitov 1\n  * Sam Lee 1\n  * Sean Jordan 1\n  * Sharon Zhou 1\n  * Shiva Garg 1\n  * Siddartha Janga 1\n  * Simran Basi 1\n  * Stan Chan 1\n  * Stephen Ng 1\n  * Tejas Shah 1\n  * Test Analytics 1\n  * Test Engineer 1\n  * Tim Lyakhovetskiy 1\n  * Titus Winters 1\n  * Tom O'Neill 1\n  * Vojta J\u00edna 1\n  * automation 1\n  * dead code 1\n  * iOS 1\n  * mutation testing 1\n\n## Archive\n\n  * \u25bc 2024 (5)\n\n    * \u25bc Apr (3)\n\n      * isBooleanTooLongAndComplex\n      * How I Learned To Stop Writing Brittle Tests and Lo...\n      * Prefer Narrow Assertions in Unit Tests\n    * \u25ba Mar (1)\n    * \u25ba Feb (1)\n\n  * \u25ba 2023 (14)\n\n    * \u25ba Dec (2)\n    * \u25ba Nov (2)\n    * \u25ba Oct (5)\n    * \u25ba Sep (3)\n    * \u25ba Aug (1)\n    * \u25ba Apr (1)\n\n  * \u25ba 2022 (2)\n\n    * \u25ba Feb (2)\n\n  * \u25ba 2021 (3)\n\n    * \u25ba Jun (1)\n    * \u25ba Apr (1)\n    * \u25ba Mar (1)\n\n  * \u25ba 2020 (8)\n\n    * \u25ba Dec (2)\n    * \u25ba Nov (1)\n    * \u25ba Oct (1)\n    * \u25ba Aug (2)\n    * \u25ba Jul (1)\n    * \u25ba May (1)\n\n  * \u25ba 2019 (4)\n\n    * \u25ba Dec (1)\n    * \u25ba Nov (1)\n    * \u25ba Jul (1)\n    * \u25ba Jan (1)\n\n  * \u25ba 2018 (7)\n\n    * \u25ba Nov (1)\n    * \u25ba Sep (1)\n    * \u25ba Jul (1)\n    * \u25ba Jun (2)\n    * \u25ba May (1)\n    * \u25ba Feb (1)\n\n  * \u25ba 2017 (17)\n\n    * \u25ba Dec (1)\n    * \u25ba Nov (1)\n    * \u25ba Oct (1)\n    * \u25ba Sep (1)\n    * \u25ba Aug (1)\n    * \u25ba Jul (2)\n    * \u25ba Jun (2)\n    * \u25ba May (3)\n    * \u25ba Apr (2)\n    * \u25ba Feb (1)\n    * \u25ba Jan (2)\n\n  * \u25ba 2016 (15)\n\n    * \u25ba Dec (1)\n    * \u25ba Nov (2)\n    * \u25ba Oct (1)\n    * \u25ba Sep (2)\n    * \u25ba Aug (1)\n    * \u25ba Jun (2)\n    * \u25ba May (3)\n    * \u25ba Apr (1)\n    * \u25ba Mar (1)\n    * \u25ba Feb (1)\n\n  * \u25ba 2015 (14)\n\n    * \u25ba Dec (1)\n    * \u25ba Nov (1)\n    * \u25ba Oct (2)\n    * \u25ba Aug (1)\n    * \u25ba Jun (1)\n    * \u25ba May (2)\n    * \u25ba Apr (2)\n    * \u25ba Mar (1)\n    * \u25ba Feb (1)\n    * \u25ba Jan (2)\n\n  * \u25ba 2014 (24)\n\n    * \u25ba Dec (2)\n    * \u25ba Nov (1)\n    * \u25ba Oct (2)\n    * \u25ba Sep (2)\n    * \u25ba Aug (2)\n    * \u25ba Jul (3)\n    * \u25ba Jun (3)\n    * \u25ba May (2)\n    * \u25ba Apr (2)\n    * \u25ba Mar (2)\n    * \u25ba Feb (1)\n    * \u25ba Jan (2)\n\n  * \u25ba 2013 (16)\n\n    * \u25ba Dec (1)\n    * \u25ba Nov (1)\n    * \u25ba Oct (1)\n    * \u25ba Aug (2)\n    * \u25ba Jul (1)\n    * \u25ba Jun (2)\n    * \u25ba May (2)\n    * \u25ba Apr (2)\n    * \u25ba Mar (2)\n    * \u25ba Jan (2)\n\n  * \u25ba 2012 (11)\n\n    * \u25ba Dec (1)\n    * \u25ba Nov (2)\n    * \u25ba Oct (3)\n    * \u25ba Sep (1)\n    * \u25ba Aug (4)\n\n  * \u25ba 2011 (39)\n\n    * \u25ba Nov (2)\n    * \u25ba Oct (5)\n    * \u25ba Sep (2)\n    * \u25ba Aug (4)\n    * \u25ba Jul (2)\n    * \u25ba Jun (5)\n    * \u25ba May (4)\n    * \u25ba Apr (3)\n    * \u25ba Mar (4)\n    * \u25ba Feb (5)\n    * \u25ba Jan (3)\n\n  * \u25ba 2010 (37)\n\n    * \u25ba Dec (3)\n    * \u25ba Nov (3)\n    * \u25ba Oct (4)\n    * \u25ba Sep (8)\n    * \u25ba Aug (3)\n    * \u25ba Jul (3)\n    * \u25ba Jun (2)\n    * \u25ba May (2)\n    * \u25ba Apr (3)\n    * \u25ba Mar (3)\n    * \u25ba Feb (2)\n    * \u25ba Jan (1)\n\n  * \u25ba 2009 (54)\n\n    * \u25ba Dec (3)\n    * \u25ba Nov (2)\n    * \u25ba Oct (3)\n    * \u25ba Sep (5)\n    * \u25ba Aug (4)\n    * \u25ba Jul (15)\n    * \u25ba Jun (8)\n    * \u25ba May (3)\n    * \u25ba Apr (2)\n    * \u25ba Feb (5)\n    * \u25ba Jan (4)\n\n  * \u25ba 2008 (75)\n\n    * \u25ba Dec (6)\n    * \u25ba Nov (8)\n    * \u25ba Oct (9)\n    * \u25ba Sep (8)\n    * \u25ba Aug (9)\n    * \u25ba Jul (9)\n    * \u25ba Jun (6)\n    * \u25ba May (6)\n    * \u25ba Apr (4)\n    * \u25ba Mar (4)\n    * \u25ba Feb (4)\n    * \u25ba Jan (2)\n\n  * \u25ba 2007 (41)\n\n    * \u25ba Oct (6)\n    * \u25ba Sep (5)\n    * \u25ba Aug (3)\n    * \u25ba Jul (2)\n    * \u25ba Jun (2)\n    * \u25ba May (2)\n    * \u25ba Apr (7)\n    * \u25ba Mar (5)\n    * \u25ba Feb (5)\n    * \u25ba Jan (4)\n\n## Feed\n\n  * Google\n  * Privacy\n  * Terms\n\nDiese Website verwendet Cookies von Google, um Dienste anzubieten und Zugriffe\nzu analysieren. Deine IP-Adresse und dein User-Agent werden zusammen mit\nMesswerten zur Leistung und Sicherheit f\u00fcr Google freigegeben. So k\u00f6nnen\nNutzungsstatistiken generiert, Missbrauchsf\u00e4lle erkannt und behoben und die\nQualit\u00e4t des Dienstes gew\u00e4hrleistet werden.Weitere InformationenOk\n\n", "frontpage": false}
