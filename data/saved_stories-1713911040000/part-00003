{"aid": "40133728", "title": "Building Bluesky (Real-World Engineering Challenges)", "url": "https://newsletter.pragmaticengineer.com/p/bluesky", "domain": "pragmaticengineer.com", "votes": 4, "user": "steveklabnik", "posted_at": "2024-04-23 16:20:57", "comments": 0, "source_title": "Building Bluesky: a Distributed Social Network (Real-World Engineering Challenges)", "source_text": "Building Bluesky: a Distributed Social Network (Real-World Engineering\nChallenges)\n\n# The Pragmatic Engineer\n\nShare this post\n\n#### Building Bluesky: a Distributed Social Network (Real-World Engineering\nChallenges)\n\nnewsletter.pragmaticengineer.com\n\n#### Discover more from The Pragmatic Engineer\n\nBig Tech and startups, from the inside. Highly relevant for software engineers\nand managers, useful for those working in tech.\n\nOver 635,000 subscribers\n\nContinue reading\n\nSign in\n\n# Building Bluesky: a Distributed Social Network (Real-World Engineering\nChallenges)\n\n### Bluesky is built by around 10 engineers, and has amassed 5 million users\nsince publicly launching in February this year. A deep dive into novel design\ndecisions, moving off AWS, and more.\n\nGergely Orosz\n\nand\n\nElin Nilsson\n\nApr 23, 2024\n\n41\n\nShare this post\n\n#### Building Bluesky: a Distributed Social Network (Real-World Engineering\nChallenges)\n\nnewsletter.pragmaticengineer.com\n\nShare\n\nBefore we start: AI tooling for software development feels like it has hit\n\"peak hype\" across mainstream media. We would like to do a \"reality check\" and\nfind out how engineers and teams are using these tools (and which tools/use\ncases are genuinely efficient). Please help us by filling out this survey.\n\nFill out the survey on AI tools\n\nWe will share the full report with all of you who share detailed insights.\nThanks for your help!\n\n\u2018Real-world engineering challenges\u2019 is a series in which we interpret\ninteresting software engineering or engineering management case studies from\ntech companies.\n\nBluesky is known as a Twitter-alternative. It launched two years ago, with an\ninvite-only beta launch last year. It\u2019s already grown to an impressive 5.5\nmillion registered users. Interestingly for software engineers, Bluesky is\nalso a fascinating engineering project unlike any other mainstream social\nnetwork. Martin Kleppman, author of the Designing Data Intensive Applications\nbook, is involved as a technical advisor, and has published a paper outlining\nthe novel approaches Bluesky has taken.\n\nThe biggest differences between Bluesky and other large social networks:\n\n  * Decentralized. Bluesky is a \u201cdecentralized social network,\u201d meaning anyone can run their own servers. If Bluesky\u2019s core team turned off all services today, the network would keep functioning. As such, Bluesky offers a way for users to truly own their data and services.\n\n  * Open source. Nearly everything about Bluesky builds is open source, and hosted on GitHub.\n\n  * Rapid growth. The product went from zero to 5 million users in around 12 months after announcing an invite-only beta.\n\n  * Small team. Bluesky was built with a small team of 3 engineers during the first year, and with 12 software engineers at the time of publication.\n\nOther social networks have achieved some of these things; such as Mastodon\nallowing users to own their data and identity, and Meta achieving eye-catching\ngrowth by getting 100 million users in just a week. Still, only Bluesky has\npulled off them all.\n\nToday, we dive into how Bluesky is built, sitting down with its two founding\nengineers: Daniel Holmgren and Paul Frazee. They take us through:\n\n  1. Development timeline. How Bluesky went from a vague idea with few specific details, to a decentralized social network with millions of users.\n\n  2. Experimentation phase. A team of 2-3 engineers prototyped for 9 months, established the development principles, and laid the groundwork for the protocol and app.\n\n  3. v1 architecture. An overview of Bluesky\u2019s architecture at the launch of its public beta offering. This was a Postgres database built on top of AWS, and used Pulumi.\n\n  4. v2 architecture. Extending Bluesky to support \u201cfederation,\u201d allowing users to run their own Bluesky instances.\n\n  5. Scaling the database layer. PostgreSQL didn\u2019t scale with the site\u2019s growth, so it was time to migrate. The team chose ScyllaDB and SQLite.\n\n  6. Infra stack: from AWS to on-prem. AWS was becoming too costly, so Bluesky moved over to dedicated data centers and bare-metal machines.\n\n  7. Reality of building a social network. Typical firefighting issues, Elon Musk, and outages not being \u201clife-or-death\u201d crises.\n\n##\n\n1\\. Development timeline\n\nBluesky has been in development for just over 2 years, and has been publicly\navailable for around 12 months. Here\u2019s the timeline:\n\nBluesky\u2019s development timeline and major milestones\n\nAdding in the three phases we\u2019ll discuss below:\n\nBluesky\u2019s development, split into three phases\n\n####\n\nPhase 1: Experimentation\n\nThe first 10 months of the project between January and October 2022 were all\nabout exploration, and the team started to work fully in the open after 4\nmonths. The first project the team open sourced was Authenticated Data\nExperiment (ADX), an experimental personal data server and a command-line\nclient, accompanied by a network architecture overview.\n\nIn April 2022, heavy Twitter user, Elon Musk, raised the prospect of\npotentially acquiring the site, which created interest in alternatives to the\nbird app, as any major change in a market-leading social network does.\n\nThe first commit for the Bluesky mobile app was made in June 2022, and Paul\nFrazee worked on it. It started as a proof-of-concept to validate that the\nprotocol worked correctly, and to aid protocol development via real-world use.\nConventional wisdom says that prototypes are thrown away after serving their\npurpose.\n\nHowever, in this case this mobile app that a single person had built, became\nthe production app, following the unforeseen spike of interest in it caused by\ntakeover news at Twitter. This is a good reminder that real world events can\npush conventional wisdom out of the window!\n\nIn October 2022, the team announced the Authenticated Transfer Protocol (AT\nProtocol) and the app\u2019s waitlist, just a few days after news that Elon Musk\nwas to acquire Twitter. This led many tweeters to seek alternative social\nnetworks, and drove a major signup spike for Bluesky\u2019s private beta. This\ndevelopment put pressure on the Bluesky team to seize the unexpected\nopportunity by getting the protocol and app ready for beta users. See details\non the AT Protocol.\n\n####\n\nPhase 2: invite-only launch and the first 1M users\n\nIn October 2022, Bluesky consisted solely of Jay Graber CEO, and two software\nengineers; Daniel and Paul. Engineer #3, Devin, joined the same month.\nAnnouncing the AT Protocol and waitlist generated some media buzz and Bluesky\nattracted more interest during this period.\n\nIn March 2023, the company was confident that the protocol and mobile app were\nstable enough to invite more users by sending invites.\n\n\u201cBlocking\u201d was implemented in a single night. After the app opened up to more\nusers, there was an influx of offensive posts and of users verbally harassing\nother accounts. This made it clear that implementing blocks to restrict\nindividual accounts from viewing and commenting on a user\u2019s posts, was\nurgently-needed functionality.\n\nThe three earliest developers \u2013 Paul, Devin and Daniel \u2013 jumped on a call,\nthen got to work. In the community, developers saw the pull requests (PRs) on\nthis feature appear on GitHub, and started to point out bugs, and cheer on the\nrapid implementation. They wrapped it up and launched the feature by the end\nof the same day. To date, this is the most rapidly-built feature, and is still\nused across the protocol and the app!\n\nIn June 2023, Bluesky passed the 100,000-users milestone when the team\nnumbered 6 developers, who\u2019d shipped features like custom feeds, blocking and\nmuting, moderation controls, and custom domains. A web application built on\nReact Native was also in production.\n\nIn September 2023, Bluesky passed 1 million users \u2013 a 900,000 increase in just\n3 months!\n\n####\n\nPhase 3: Preparing for public launch\n\nIn the 6 months following the 1 million-user milestone, the focus was on\npreparing to open up Bluesky to the public with no waitlist or throttling of\ninvites.\n\nFederation (internal.) To prepare for \u201cproper\u201d federation, the team made\narchitecture changes to enable internal federation of Bluesky servers.\n\nFederation is a key concept in distributed networks. It means a group of nodes\ncan send messages to one another. For Bluesky, it meant that \u2013 eventually \u2013\nusers should be able to run their own PDS instances that host their own user\ninformation (and user information of users on that server.) And the Bluesky\nnetwork operates seamlessly with this distributed backend.\n\nA new logo and a reference to Twitter. The team prepared a new logo for\nlaunch, and announced it in December 2023:\n\nThe old and new logo\n\nThe butterfly logo is intended as a symbol of freedom and change. Existing\ncentralized social media platforms \u2013 like X (formerly Twitter,) Instagram,\nTikTok, and Youtube \u2013 are platforms that want to lock users into their website\nand apps. Bluesky, on the other hand, offers its protocol, but doesn\u2019t dictate\nwhich apps or websites people use. It doesn\u2019t even want to dictate the hosting\nof content:\n\nThe final slide of Jay Graber\u2019s presentation for Twitter about the vision for\nBluesky. It was Twitter that granted Bluesky its initial $13M funding in 2021\n\u2013 partially based on this vision. The image visualizes the blue bird freed\nfrom a closed platform into Bluesky\u2019s open ecosystem. Source: Bluesky\n\nLet\u2019s dive into each phase of the building process.\n\n##\n\n2\\. Experimentation phase\n\nDuring Bluesky\u2019s first 9 months (January-September 2022) two software\nengineers built the protocol and apps \u2013 Daniel Holmgren and Paul Frazee \u2013 and\nJay the CEO signed off design decisions. The first couple of months were about\nexperimenting and tech \u201cspiking,\u201d which means timeboxing the time and effort\nspent building and trying out ideas. Here\u2019s Paul:\n\n> \u201cWe would greenfield for a period, then attack what we had just created to\n> see if it holds up. We gave the existing technologies a really close look;\n> if we didn\u2019t see meaningful improvements from the existing protocols, then\n> we decided we\u2019d use what was already out there.\u201d\n\nWhen the direction wasn\u2019t clear, the team kept trying out new approaches, says\nDaniel:\n\n> \u201cWe set out to use as many existing specs as we could. We spent a lot of\n> time early on investigating things like Activity Pub and seriously trying to\n> figure out how we could make it work, and realizing that it didn't really\n> work for our use case.\u201d\n\n####\n\nDevelopment principles\n\nThe still-small team set up principles to ensure continuous progress:\n\n  1. No backward steps. Ease of use, scale, and feature developer experience, can not be worse than existing social networks\u2019.\n\n  2. Unify app development with protocol development. Never make tech decisions in isolation from practical use cases.\n\n  3. Don\u2019t be precious! If an idea or design doesn\u2019t work, just throw it out!\n\n####\n\nApproach to building a new, novel decentralized protocol\n\nThe team prioritized flexible design choices in order to not lock themselves\ninto a technology, until they knew exactly what they were building. Not\ncoupling the data layer too closely with Postgres is an example of this. See\nbelow.\n\nBuilding for flexibility, not scalability, was deliberate. The idea was to\nswap this approach to prioritize scale once everyone knew exactly what to\nbuild. The knowledge that decisions are hard to undo made the team\u2019s own\ndecision-making more thorough, Daniel reflects:\n\n> \u201cThe most difficult part of building Bluesky has been the constant awareness\n> that small decisions you make may be locked in for years and have ripple\n> effects. In a decentralized environment, these can be difficult to unwind.\n> It puts a lot of weight on every decision, and we have to double and triple\n> check choices that we make so that we hopefully don\u2019t regret them.\u201d\n\nInventing new approaches was never a goal. The original idea was to take a\nprotocol or technology off the shelf, and push it as far as possible to reveal\na requirement that didn\u2019t quite fit. For example, Lexicon \u2013 the schema used to\ndefine remote procedure call (RPC) methods and record types \u2013 started out as\nJSON schemas. The team tried hard to keep it lightweight, and stuck to JSON\nschemas. But they ended up bending over backwards to make it work. In the end,\nthe team decided to fork off from JSON schemas and added features to it, which\nis how Lexicon was born.\n\nBluesky gets criticism for inventing new approaches which are non-standard\nacross decentralized networks. Paul explains it like this:\n\n> \u201cWe never set out to live the \u2018not invented here\u2019 (NIH) syndrome. I don\u2019t\n> think anyone building something new has this goal. In the end, it just\n> naturally evolved in this direction.\n>\n> No one had done a high-scale decentralized social network before this! If\n> someone had, we probably wouldn\u2019t have needed to invent as many things.\u201d\n\nBluesky takes inspiration from existing web technologies. As Daniel puts it:\n\n> \u201cThe AT Protocol is a pretty typical JSON API collection over HTTP. The\n> architecture of Bluesky looks very similar to a traditional social media\n> data center turned inside out. The firehose API looks a lot like Kafka \u2013 and\n> we\u2019re probably going to shard it in a similar way.\u201d\n\n##\n\n3\\. v1 architecture: not really scalable and not federated \u2013 yet\n\n####\n\nInfrastructure choices\n\nPostgreSQL was the team\u2019s database of choice when starting development.\nPostgres is often called the \u201cSwiss Army knife of databases\u201d because it\u2019s\nspeedy for development, great for prototyping, with a vast number of\nextensions. One drawback is that Postgres is a single bottleneck in the\nsystem, which can cause issues when scaling to handle massive loads that never\nmaterialize for most projects.\n\nFor the team, using Postgres worked really well while they were unsure exactly\nwhat they were building, or how they would query things. Paul\u2019s summary of the\nchoice to use Postgres:\n\n> \u201cYou start with a giant Postgres database and see how far that can take you,\n> so that you can move quickly early on.\u201d\n\nAWS infrastructure was what the team started with because it\u2019s quick to set up\nand easy to use, says Daniel:\n\n> \u201cWe were running everything out of AWS, and that is great because you can\n> just spin up new VMs very easily, and spin up new stacks and services\n> easily.\u201d\n\nThe first infra hire at Bluesky, Jake Gold, iterated on the AWS setup:\n\n> \u201cThe basic idea we have right now is we\u2019re using AWS, we have auto-scaling\n> groups, and those auto-scaling groups are just EC2 instances running Docker\n> Community Edition (CE) for the runtime and for containers. And then we have\n> a load balancer in front and a Postgres multi-availability zone instance in\n> the back on Relational Database Service (RDS). It\u2019s a really simple setup.\u201d\n\nTo facilitate deployments on AWS, the team used infrastructure-as-code\nservice, Pulumi.\n\nModularizing the architecture for an open network was an effort the team\nkicked off early. The goal of modularization was to spin out parts of the\nnetwork which users could host themselves. Daniel says:\n\n> \u201cOur early insight was that we should give developers building on top of\n> Bluesky the ability to focus on the parts of the network that they want to\n> focus on. This is the microservices part.\n>\n> An external developer building a feed should not need to index every \u201clike\u201d\n> in the network. Someone self-hosting their own account should not need to\n> consume thousands of posts to create a timeline. You can split the network\n> into specific roles and have them work in concert.\u201d\n\n####\n\nPersonal Data Server\n\nAt first, the architecture of Bluesky consisted of one centralized server, the\nPDS (Personal Data Server.)\n\nThe Bluesky backend in March 2023\n\nThe strategy was to split this centralized service into smaller parts and\nallow for federation, eventually.\n\nBluesky being a federated network means individual users can run their own\n\u201cBluesky instance\u201d and curate their own network.\n\n####\n\nThe feed generator\n\nThe backend in May 2023, after the feed generator was moved into its own\ncomponent\n\nIn May 2023, the Bluesky team moved the feed generator to its own role. This\nservice allows any developer to create a custom algorithm, and choose one to\nuse. Developers can spin up a new Feed Generator service and make it\ndiscoverable to the Bluesky network, to add a new algorithm. Bluesky also\nallows users to choose from several predefined algorithms.\n\nThe Feed Generator interface was the first case of Bluesky as a decentralized\nnetwork. From then, the Bluesky network was not solely the services which the\nBluesky team operated, it was also third-party services like Feed Generator\ninstances that plugged into the Bluesky network.\n\n####\n\nDedicated \u201cAppview\u201d service\n\nFor the next step, the view logic was moved from the PDS, to an \u201cAppview\u201d\nservice. This is a pretty standard approach for backend systems, to move\neverything view-related to its own service, and not to trouble other systems\nwith presenting data to web and mobile applications.\n\nSplitting out application view logic into its own service\n\n####\n\nRelays to crawl the network\n\nIn the future, there could be hundreds or thousands of PDSs in the Bluesky\nnetwork. So, how will all the data be synchronized with them? The answer is\nthat a \u201ccrawler\u201d will go through all these PDSs. In preparation for this crawl\nthe team introduced a Relay service:\n\nPreparing for federation and multiple PDSs by adding a Relay service to\n\u201ccrawl\u201d later\n\n##\n\n4\\. v2 architecture: scaleable and federated\n\nThe v1 architecture needed to evolve in order to support full federation, and\nthe team always planned to move on from it. But they expected v1 to last\nlonger than only 6 months.\n\n####\n\nFederation\n\nFederation sandbox. Before shipping a first version of federation, the team\nbuilt a Federation Sandbox to test the architecture, as a safe space to try\nnew features like modulation and curation tooling.\n\nInternal federation. To prepare for federation proper, the next refactoring\nwas to add support for multiple Personal Data Servers. As a first step, the\nBluesky team did this internally. Users noticed nothing of this transition,\nwhich was intentional, and Bluesky was then federated! Proving that federation\nworked was a large milestone.\n\nAs a reminder, federation was critical to Bluesky because it made the network\ntruly distributed. With federation, any user can run their own Bluesky server.\n\nPrior to federation, Bluesky created 10 PDS services, wrapped into an Entryway\ninterface\n\nThe \u201cinternally federated\u201d PDS servers worked exactly like a self-hosted PDS.\nBluesky made one addition, to wrap the internal PDS servers into a new service\ncalled \u201cEntryway,\u201d which provides the \u201cbsky.social\u201d identity to the PDSes.\nEntryway will become the \u201cofficial\u201d Bluesky OAuth authorization server for\nusers who choose bsky.social servers, and one operated as a self-hosted\nserver.\n\nLater, Bluesky increased the number of internal PDS servers from 10 to 20 for\ncapacity reasons, and to test that adding PDS servers worked as expected.\n\nExternal federation. With everything ready to support self-hosted Personal\nData Servers, Bluesky flipped to switch, and started to \u201ccrawl\u201d those servers\nin February 2024:\n\nAdding support for \u201cproper\u201d federation. Anyone can self-host a \u201cBluesky\ninstance\u201d in PDS form\n\nTo date, Bluesky has more than 300 self-hosted PDSs. This change has made the\nnetwork properly distributed, anyone wanting to own their data on Bluesky can\nself-host an instance. Over time, we could also see services launch which\nself-host instances and allow for full data ownership in exchange for a fee.\n\n####\n\nAppview: further refactoring\n\nRecently, Bluesky further refactored its Appview service, and pulled out the\nmoderation functionality into its own service, called Ozone:\n\nMoving moderation and post labeling functionality from Appview to Ozone\n\nUsers can run their own Ozone service \u2013 meaning to be a moderator in the\nBluesky system. Here are details on how to self-host this service, and more\nabout Ozone.\n\n####\n\nAn architectural overview, with Martin Kleppman\n\nMartin is the author of the popular software engineering book, Designing Data\nIntensive Applications, and he also advises the Bluesky team in weekly calls.\n\nMartin and the Bluesky team published a paper describing the Bluesky system,\nBluesky and the AT Protocol: Usable decentralized social media. In it, they\noffer a detailed overview of the architecture:\n\nThe architecture of Bluesky. Image source: Bluesky and the AT Protocol\n\nThe diagram above shows how data flows occur in the application:\n\n  1. Personal data server (PDS): these can be Bluesky-hosted (around 20 today) or self-hosted (around 300)\n\n  2. Relays: these collect events from the PDSs. Bluesky has its \u201cofficial\u201d relay hosted in its own infrastructure, but other developers can set up alternative relays that listen to all PDSs.\n\n  3. Firehose: the output of the relays.\n\n  4. Labelers and feed generators: these digest firehose events. They can be Bluesky-hosted, or be hosted independently of Bluesky.\n\n  5. App View: The Bluesky-hosted \u201cofficial\u201d app view, or alternate app views\n\n  6. Data flowing back to PDSs: feed generators hosted by Bluesky or externally, feed events data back to the PDSs.\n\n##\n\n5\\. Scaling the database layer\n\n####\n\nScaling issues with Postgres\n\nScaling issues emerged 2-3 months after the public beta launch in mid-2023.\n\n  * Connection pool issues and lock contention. The Postgres connection pool backup and Node\u2019s event loop got into a bad feedback loop. The team observed Postgres lock contention issues. This refers to multiple processes trying to access the same data simultaneously, but the data is locked to all except one process. For example, when multiple processes attempt to update the same row.\n\n  * Small Postgres outages. Postgres doesn\u2019t give the developer much control over which query plan it will take. Bluesky had a few smaller outages due to a query plan randomly flipping to something that ran about 1,000x times slower.\n\n  * The need for horizontal scaling. Horizontal scaling is adding more machines to a service, so that the throughput of this system improves linearly with each new machine. But Postgres does not support horizontal scaling because it runs as a single database with transactional guarantees, meaning it becomes a bottleneck \u2013 if a necessary one \u2013 for the entire network.\n\nAs a reminder, the team was still tiny when all these scaling challenges\nemerged. There were only 6 developers (Daniel, Devin, Bryan and Jake on the\nbackend, and Paul and Ansh on the frontend). Then in summer 2023, Daniel had a\ndream:\n\n> \u201cAfter one stressful day, I dreamt that me, Jay [Bluesky\u2019s CEO], and Devin\n> were in my backyard. There were snakes everywhere you looked. We were going\n> to wrangle and round up the snakes in a panic. But that that point, Devin\n> stops and says to all of us: \u2018wait, wait, guys, I think there\u2019s a Postgres\n> extension for this!\u2019\u201d\n\n####\n\nScyllaDB replacing Postgres\n\nThe team knew they needed a horizontally scalable data storage solution, with\nfine-grained control of how data is indexed and queried.\n\nScyllaDB was an obvious choice because it supports horizontal scalability due\nto being a wide-column database (a NoSQL type.) Wide-column databases store\ndata in flexible columns that can be spread across multiple servers or\ndatabase rows. They can also support two rows having different columns, which\ngives a lot more flexibility for data storage!\n\nWide-column databases store data in columns so it\u2019s highly scalable and\nflexible. Two rows in one table can have different types or numbers of\ncolumns. Source: AWS\n\nThe biggest tradeoffs:\n\n  * Data must be denormalized, meaning it isn\u2019t stored as efficiently as in a relational database. Basically, you\u2019ll store more data and require more storage space.\n\n  * Data needs to be indexed on write. Writing to a wide column database is more expensive than to a relational database. For each row and column changed, the relevant indexes need to be updated, which typically makes these databases more write-intensive than relational ones.\n\nThe team was satisfied with their early choice of Postgres, says Daniel:\n\n> \u201cPostgres was great early on because we didn\u2019t quite know exactly what\n> questions we\u2019d be asking of the data. It let us toss data into the database\n> and figure it out from there. Now we understand the data and the types of\n> queries we need to run, it frees us up to index it in Scylla in exactly the\n> manner we need and provide APIs for the exact queries we\u2019ll be asking.\u201d\n\n####\n\nSQLite\n\nScyllaDB is used for the Appview, which is Bluesky\u2019s most read-heavy service.\nHowever, the Personal Data Servers use something else entirely: SQLite. This\nis a database written in the C language which stores the whole database in a\nsingle file on the host machine. SQLite is considered \u201czero configuration,\u201d\nunlike most other databases that require service management \u2013 like startup\nscripts \u2013 or access control management. SQLite requires none of this and can\nbe started up from a single process with no system administrative privileges.\nIt \u201cjust works.\u201d\n\nDaniel explains why SQLite was ideal for the PDSs:\n\n> \u201cWe took a somewhat novel approach of giving every user their own SQLite\n> database. By removing the Postgres dependency, we made it possible to run a\n> \u2018PDS in a box\u2019 without having to worry about managing a database. We didn\u2019t\n> have to worry about things like replicas or failover. For those thinking\n> this is irresponsible: don\u2019t worry, we are backing up all the data on our\n> PDSs!\u201d\n>\n> SQLite worked really well because the PDS \u2013 in its ideal form \u2013 is a single-\n> tenant system. We owned up to that by having these single tenant SQLite\n> databases.\n>\n> We also leaned into the fact that we\u2019re building a federated network. We\n> federated our data hosting in the exact same manner that it works for non-\n> Bluesky PDSs.\u201d\n\nMigrating the PDSs from Postgre to SQLite created fantastic improvement in\noperations, Daniel adds:\n\n> \u201cPDSs have been a dream to run since this refactor. They are cheap to\n> operate (no Postgres service!) and require virtually no operational\n> overhead!\u201d\n\n##\n\n6\\. Infra stack: from AWS to on-prem\n\nBluesky\u2019s infrastructure was initially hosted on Amazon Web Services (AWS) and\nthe team used infrastructure-as-a-code service, Pulumi. This approach let them\nmove quickly early on, and also to scale their infra as the network grew. Of\ncourse, as the network grew so did the infrastructure bill.\n\n####\n\nMove to on-prem\n\nCost and performance were the main drivers in moving on-prem. The team got\nhardware that was more than 10x as powerful as before, for a fraction of the\nprice. How was this decision made? A key hire played a big role.\n\nBluesky\u2019s first hire with large-scale experience was Jake Gold, who joined in\nJanuary 2023, and began a cost analysis of AWS versus on-prem. He eventually\nconvinced the team to make this big change.\n\nBut how did the team forecast future load, and calculate the hardware\nfootprint they\u2019d need? Daniel recalls:\n\n> \u201cWe looked at the trends and tried to make a safe bet. We were thinking:\n> \u2018okay, today we're over-provisioned. We want to stay over-provisioned, so we\n> have room to grow without upgrading the hardware, but also just so we have\n> stability if something happens in the world, and everyone decides to post\n> about it.\u2019\n>\n> We built our architecture to be horizontally scalable so that we can add\n> more capacity just by throwing more machines at it. There is some lead time\n> to buying new machines, but we have space in the rack. We have room in the\n> network connections. The switches are good for it.\n>\n> If we need to scale, it\u2019s really just about \u2018get some more servers and hook\n> them up!\u2019 We can get to twice the capacity after doubling the machines we\u2019re\n> running in our data center. This is sweet!\u201d\n\nBecoming cloud-agonistic was the first step in moving off AWS. By June 2023,\nsix months after Jake joined, Bluesky\u2019s infrastructure was cloud agonistic.\n\nBluesky always has the option of using AWS to scale if needed, and is designed\nin a way that it would not be overly difficult to stand up additional virtual\nmachines on AWS, if the existing infrastructure has capacity or scaling\nissues.\n\nToday, the Personal Data Servers are bare-metal servers hosted by cloud\ninfrastructure vendor, Vultr. Bluesky currently operates 20 and shards them so\nthat each PDS supports about 300,000 users.\n\n####\n\nBluesky\u2019s load by the numbers\n\nCurrently, Bluesky\u2019s system sees this sort of load:\n\n  * 60-100 events/second received by the firehose service, which is the \u201cmain\u201d service that emits messages sent on the network in real time. During the public launch of Bluesky in February, the peak was 400 events/second.\n\n  * 400 timeline loads/second. A timeline load is when a user (or client) makes a request to fetch their current timeline.\n\n  * 3,500 requests/second across the network.\n\n##\n\n7\\. Reality of building a social network\n\nTo close, we (Gergely and Elin) asked the teams some questions on what it\u2019s\nlike to build a high-growth social network.\n\nWhat is a typical firefighting issue you often encounter?\n\n> \u201cEvery influx of users brought new problems, and we found ourselves doing\n> quite a bit of firefighting. One day, after a particularly notable incident,\n> growth showed no signs of stopping, and we had to temporarily disable\n> signups in order to keep the service running.\u201d \u2013 Daniel\n\nWhat were the events referred to as \u201cElon Musk?\u201d\n\n> \u201cWe never quite knew when a user bump was going to come, and invites were\n> out in the wild waiting to be used. Then something would happen, and\n> thousands of users suddenly joined. We started referring to these days as\n> EMEs (Elon Musk Events) because they were normally precipitated by some\n> change on Twitter.\u201d \u2013 Daniel\n>\n> \u201cIt was a bit like throwing a party and everybody showing up 2 hours early,\n> while you\u2019re still setting up the chairs and telling people to get drinks\n> from the fridge. And then about ten times more people show up than\n> expected.\u201d \u2013 Paul\n\nHow are outages different for a social network?\n\n> \u201cDisabling signups or pausing the service is never fun to do, but it\n> actually created a bunch of excitement and a strange sense of pride in the\n> user base.\u201d \u2013 Daniel\n>\n> \u201cOutages are not fun, but they\u2019re not life and death, generally. And if you\n> look at the traffic, usually what happens is after an outage, traffic tends\n> to go up. And a lot of people who joined, they\u2019re just talking about the fun\n> outage that they missed because they weren\u2019t on the network.\u201d \u2013 Jake\n\nThe whole developer team is on Bluesky, and actively responding to user\nfeedback. How do you do this, and why?\n\n> \u201cPeople just pinging us in the app and explaining their problem, is so good.\n> We can just respond, \"Hey, can you give me a screenshot? What platform are\n> you on?\" It's such a fast support turnaround. The big benefit of building a\n> social app is that your customers are right there, and will tell you if\n> something's not working.\n>\n> Real time user feedback was how mute words got prioritized, recently. In\n> terms of a signal about how important something is, when you start getting\n> PRs to add the feature, and you get a ton of people plus-oneing the issue \u2013\n> not to mention people asking for it in the app \u2013 that tells you a lot.\u201d \u2013\n> Paul\n\n##\n\nTakeaways\n\nGergely here. Many thanks to Daniel and Paul for part one of this deep dive\ninto how Bluesky works! You can try out Bluesky for yourself, learn more about\nBluesky\u2019s AT Protocol, or about its architecture. And I\u2019m also on Bluesky.\n\nDecentralized architectures require a different way of thinking. I\u2019ll be\nhonest, I\u2019m so used to building and designing \u201ccentralized\u201d architecture, that\nthe thought of servers being operated outside of the company is very alien. My\nimmediate thoughts were:\n\n  * Is it secure enough? Malicious actors could run anything on those servers and attempt to overload the network or exploit vulnerabilities in the system. The Bluesky team also stressed how the security model is something you thoroughly need to consider as you design APIs for such a system.\n\n  * What about external nodes that don\u2019t ever update the version of the software? How do they get bug fixes? And what about versioning? How to ensure \u201coutdated clients\u201d are cut off from the network?\n\n  * Finally, I thought; \u201cwow, this kind of reminds me of the confusion I initially felt about Skype\u2019s peer-to-peer network\u201d\n\nI\u2019m delighted we did a deep dive about Bluesky because it has forced me to\nthink more broadly. A server drawing on a diagram no longer just means \u201ca\ngroup of our servers,\u201d it can also mean \u201cplus, a group of external servers.\u201d\nOnce this is understood, it\u2019s easy. And this skill of designing distributed\nand federated systems may be useful in the future, as I expect the concept of\ndistributed architecture to become more popular.\n\nIt\u2019s impressive what a tiny team of experienced engineers can build. I had to\ntriple-check that Bluesky\u2019s core team was only two engineers for almost nine\nmonths, during which time they built the basics of the protocol, and made\nprogress with the iOS and Android apps. Even now, Bluesky is a very lean team\nof around 12 engineers for the complexity they build with and the company\u2019s\ngrowth.\n\nIn the next part of this deep dive into Bluesky, we cover more on how the team\nworks.\n\nOwning your own infrastructure instead of using the cloud seems a rational\nchoice. Bluesky found large savings by moving off AWS once they could forecast\nthe type of load they needed. Jake Gold, the engineer driving this transition,\nhas been vocal about how cloud providers have become more expensive than many\npeople realize. Speaking on the podcast, Last Week in AWS, he said:\n\n> \u201cWith the original vision of AWS I first started using in 2006, or whenever\n> launched, they said they would lower your bill every so often, as Moore\u2019s\n> law makes their bill lower. And that kind of happened a little bit here and\n> there, but it hasn\u2019t happened to the same degree as I think we all hoped it\n> would.\u201d\n\nDon\u2019t forget, it\u2019s not only Bluesky which rejects cloud providers for\nefficiency. We previously did a deep dive into travel booking platform Agoda,\nand why it isn\u2019t on the cloud.\n\nI\u2019m slowly changing my mind about decentralized and federated social networks.\nI also tried out Mastodon, which is another federated social network, when it\nlaunched. At the time, Mastodon felt a lot more clunky in onboarding than\nBluesky. You had to choose a server to use, but different servers have\ndifferent rules, whereas Bluesky was much smoother. Still, as a user, I was\nblissfully unaware of how different these social networks are from the\ndominant platforms.\n\nIt was only by learning about Bluesky\u2019s architecture that I appreciated the\ndesign goals of a decentralized social network. Currently, mainstream social\nnetworks are operated exclusively by the company that owns them. But a\ndecentralized network allows servers to be operated by other\nteams/organizations/individuals. This might not seem like a big deal, but it\nmeans a social network is no longer dependent on the moderation policies of a\nparent company.\n\nDecentralized social networks also allows users to use custom algorithms,\nwebsites and mobile apps, which creates opportunities for developers to build\ninnovative experiences. In contrast, you cannot build a custom third-party\nclient for X, Threads, or LinkedIn.\n\nI\u2019m still unsure how much mainstream appeal decentralized social networks hold\nfor non-technical people, but I\u2019m rooting for Bluesky, Mastodon, and the other\ndecentralized social apps. Perhaps they can challenge Big Tech\u2019s dominance of\nsocial media, or at least change people\u2019s understanding of what a social\nnetwork can be.\n\nIn a follow-up issue, we\u2019ll look deeper into the engineering culture at\nBluesky: the company culture, a deeper look at the tech stack, and how they\nare building seemingly so much with a surprisingly small team and company. I\nsuspect we can all learn a lot in how a dozen engineers help a startup scale\nto more than 5 million users.\n\nEnjoyed this issue? Subscribe to get this newsletter every week \ud83d\udc47\n\n41 Likes\n\n41\n\nShare this post\n\n#### Building Bluesky: a Distributed Social Network (Real-World Engineering\nChallenges)\n\nnewsletter.pragmaticengineer.com\n\nShare\n\nA guest post by| Elin NilssonTech industry researcher, engineer, enthusiast of\nthings \ud83e\uddd1\ud83d\udcbb Doing research for The Pragmatic Engineer.| Subscribe to Elin  \n---|---  \n  \nComments\n\nThe end of 0% interest rates: what the new normal means for software engineers\n\nThe end of 10+ years of 0% interest rates is set to change the tech industry.\nWhat do higher rates mean for software engineering jobs, developers, and...\n\nJan 30 \u2022\n\nGergely Orosz\n\n414\n\nShare this post\n\n#### The end of 0% interest rates: what the new normal means for software\nengineers\n\nnewsletter.pragmaticengineer.com\n\n7\n\nMeasuring developer productivity? A response to McKinsey\n\nThe consulting firm came up with a methodology they claim can measure software\ndeveloper productivity. But that measurement comes at a high price \u2013 and...\n\nAug 29, 2023 \u2022\n\nGergely Orosz\n\nand\n\nKent Beck\n\n588\n\nShare this post\n\n#### Measuring developer productivity? A response to McKinsey\n\nnewsletter.pragmaticengineer.com\n\n22\n\nThe end of 0% interest rates: what it means for tech startups and the industry\n\nThe past 15 years saw the lowest interest rates in modern history, and this\n\u201czero interest-rate period\u201d (ZIRP) meant growing tech companies was easy...\n\nJan 9 \u2022\n\nGergely Orosz\n\n403\n\nShare this post\n\n#### The end of 0% interest rates: what it means for tech startups and the\nindustry\n\nnewsletter.pragmaticengineer.com\n\n7\n\nReady for more?\n\n\u00a9 2024 Gergely Orosz\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
