{"aid": "40188289", "title": "Writing A Wasm Runtime in Rust", "url": "https://skanehira.github.io/writing-a-wasm-runtime-in-rust/", "domain": "skanehira.github.io", "votes": 1, "user": "skanehira", "posted_at": "2024-04-28 13:02:21", "comments": 0, "source_title": "Introduction - Writing A Wasm Runtime In Rust", "source_text": "Introduction - Writing A Wasm Runtime In Rust\n\n# Writing A Wasm Runtime In Rust\n\n# Introduction\n\nWasm (WebAssembly) is a virtual instruction set that can be executed in modern\nmajor browsers.\n\nIt has the following main features:\n\n  * Can be executed in major browsers\n  * Not dependent on OS or CPU\n  * Runs in a secure sandbox environment\n  * Provides performance close to native^1\n  * Can be compiled from multiple languages (Rust, Go, C, etc.)\n\nWith a Runtime environment, Wasm binaries can be executed not only in browsers\nbut also on the server-side. For example, Wasm can be adopted in an\napplication's plugin system or utilized in serverless application development.\n\nThe interest in Wasm, which is expected to continue to grow, is likely shared\nby many who are curious about its operation principles. In this document,\nafter introducing Wasm and explaining its use cases, we aim to understand the\noperational principles by implementing a small Runtime from scratch using Rust\nto output Hello World.\n\nEven though understanding a small Runtime may require some effort, we will\nexplain each aspect step by step, so let's proceed together without rushing.\n\nThings you need to understand for the small Runtime include:\n\n  * Understanding the data structure of Wasm binaries\n  * Understanding the instruction set of Wasm used\n  * Understanding the mechanism of instruction processing\n  * Implementing Wasm binary decoding\n  * Implementing instruction processing\n\nBy the way, the Runtime to be implemented adheres to the specifications of\nversion 1 (specification). The specification may be challenging to read, but\nfor those interested, we encourage you to continue implementing based on the\nexplanations provided in this document.\n\n## Target Audience\n\nThe target audience of this document is as follows:\n\n  * Those who understand the basics of Rust and can read and write in it\n  * Those interested in Wasm\n  * Those who want to understand how Wasm is executed\n\n## Glossary\n\nThe terms used in this document are as follows:\n\n  * Wasm Abbreviation for WebAssembly Refers to the entire ecosystem\n  * Wasm binary Refers to *.wasm files Contains bytecode\n  * Wasm Runtime Environment that can execute Wasm, also known as an interpreter This document will implement a Runtime that can read and execute *.wasm files\n  * Wasm Spec Refers to the specifications of Wasm This document adheres to the specifications of version 1\n\n## About This Document\n\nThe manuscript of this document is available in this repository, so if you\nfind any confusing parts or strange explanations, please submit a pull\nrequest.\n\n## About the Author\n\nskanehira\n\n^1\n\nStrictly depends on the implementation of the Runtime\n\n", "frontpage": false}
