{"aid": "40280102", "title": "RIP Software Devs, Long Live Software Devs", "url": "https://www.felicis.com/insight/software-devs-ai-agents", "domain": "felicis.com", "votes": 1, "user": "reubensandwich", "posted_at": "2024-05-06 22:11:33", "comments": 0, "source_title": "RIP Software Devs, Long Live Software Devs | Felicis", "source_text": "RIP Software Devs, Long Live Software Devs | Felicis\n\nFelicis\n\nPronunciation: fell-e-sis\n\nLatin, meaning: lucky, fortunate, happy\n\nMay 6, 2024\n\n# RIP Software Devs, Long Live Software Devs\n\n## Why Copilots and Agents Will Bring a New Golden Age of Development\n\nTobi Coker\n\nYou\u2019ve seen the headlines \u2014 the entry-level software developer position is\ndead. As much as some are willing to bet on that future reality, I will argue\nwe are further away from that reality than most of us think.\n\nBut perhaps the future will resemble an Ironman-style software developer \u2013\npart human and part machine. A Jarvis for every company, rather than a Devin.\nAnd if this is the case, what form factor will this future software developer\ntake?\n\nWill it be one agent to rule them all \u2014 an agentic software developer capable\nof autonomously doing low-level software development work? Is it an agent for\neach function \u2013 requirements gathering, system design, coding, review,\ntesting/Q+A, deployment, monitoring, and documentation \u2014 stitched together in\nan agentic system? Opinions may differ on how close to either future state we\nare, but what is clear is that we are in the age of AI-enhanced copilots.\n\nGitHub Copilot was the first to usher in the generative pair programmer, and\nthe market has quickly evolved. Cognition.ai\u2019s Devin took social media by\nstorm with a demo of a semi-autonomous coding agent, and then the hype\ndeflated a little more recently. There are also companies like Nustrom, whose\nagents are building side hustles, and Felicis investment poolside, which is\nputting together an incredible team of deep learning experts to build highly\ncapable ML coding assistants.\n\nWith all this focus, it\u2019s understandable if someone might feel this is\nreminiscent of the self-driving car phenomenon in the early 2010s. At the\ntime, many investors bet that self-driving cars would be a possibility before\nthe end of the decade, and despite billions of dollars, we are still chasing\nafter full self-driving cars. And while the complexity of the problem may not\nbe equivalent, I would posit we are still far away from fully autonomous\nagents for software development. The reason is threefold:\n\n  * Lack of reasoning. Agents still fundamentally lack the ability to make judgments or decisions based on common sense or experience. Several engineering tasks, from system design to coding and debugging, require human-level intuition and experience. Luckily, several groups are working on AI reasoning, including Fei-Fei Li and the MIT-IBM Watson AI Lab.\n  * Limited context understanding. Agents perform well in bounded tasks and environments but struggle to extrapolate beyond their training data. This is difficult in a field like engineering that relies heavily on past experience in tackling new, amorphous problems.\n  * Resource scarcity and data dependency. The equation for a successful AI startup is vast amounts of talent, data, and compute. Most enterprises are hamstrung by some combination of all three, particularly data and compute. Until these issues can be addressed through additional capital and infrastructure, this will continue to be a bottleneck for progress.\n\nYet there\u2019s no doubt that AI will change the development landscape completely:\n\n  * AI is already shifting how we write and build code\n  * This will surface a whole set of new problems that need new tools\n  * These problems will spawn new companies\n\nIt\u2019s worth considering which parts of the software development stack are most\nsusceptible to automation. To get there, this post will examine:\n\n  * The history behind DevOps and how it emerged as a category\n  * What has enabled AI software to emerge as a category now\n  * A framework for which workflows (and, by extension, public companies) are most susceptible to agentic automation\n  * Where startups have an advantage over incumbents and the opportunities/risks\n\n## First, some history\n\nDeveloper operations and tooling companies have had a 15-year bull run since\nthe start of the early 2010s. The rise of DevOps in the late 2000s/early 2010s\ncan be traced back to a few factors, including:\n\n### Standardization of Infrastructure\n\nStandardization of infrastructure accelerated the adoption of the key\ntechnologies required for the growth of DevOps companies. This includes:\n\n  1. Cloud computing (i.e., AWS, Azure, GCP), which provided the backend infrastructure\n  2. Containerization, which simplified application scaling\n  3. Infrastructure as code (IAC), like Kubernetes, emerged as a way to standardize across containers and infrastructure. IaC companies like Hashicorp introduced the ability to manage and provision computing infrastructure, like code, abstracting away the complexity through a standardized language format\n  4. Microservices architecture, which emerged to compartmentalize and streamline the development process\n\nSoftware products were developed (and, by extension, companies that\ncommercialized these services) to resolve the problems introduced by the scale\nand complexity of the new infrastructure stack. Providers like New Relic,\nSplunk, and Datadog grew to address new sprawling infrastructure observability\ndemands. Docker helped to manage the container creation and management\nprocess. Kubernetes, as mentioned above, managed the orchestration process\nacross containers, and Hashicorp abstracted away infrastructure in the form of\ncode. GitLab, CircleCI, and others facilitated faster deployment processes\nthrough the CI/CD process. These companies established the foundation for\nfurther development tooling, including Twilio, PagerDuty, JFrog, and many\nothers.\n\n### Developer growth and the rise of agile\n\nThe U.S. Bureau of Labor Statistics (BLS) reports the number of software\ndevelopers grew ~4x from 913K in 2010 to 4.2m in 2020 in the U.S. alone, and\nthe worldwide population has been quoted anywhere from ~5-6x that number. This\ngreatly expanded the number of users of Developer operations and tooling\nproducts.\n\nCompanies also increasingly adopted agile dev practices. This approach\nincreased the need for developer operations/tools that enabled collaboration\namong developers and their peers, catalyzing companies like GitHub, Atlassian,\nCircleCI, and others.\n\nDuring the 2010s, numerous developer-related companies went public or had\nhigh-profile acquisitions, including:\n\nThese companies reinvented the software developer lifecycle (SDLC) to better\nfit this new agile world. While some, like PagerDuty, went after clear areas\nlike Alerting, this new way of working required a new category of tools\ncentering on collaboration, which gave rise to some of the decade\u2019s biggest\nopportunities like Atlassian, GitLab, and GitHub.\n\nSeveral patterns emerge once you begin to study commonalities among companies\nthat made it to an IPO and continue to scale effectively once in the public\nmarkets. These include a focus on a key, intractable problem for developers\nand companies. Common problems/themes:\n\n  * Alerting - what do I need to do when things break?\n  * Observability - how are my applications and network performing?\n  * Collaboration - how do I work across my team best?\n  * Infrastructure management - how can I improve managing my infrastructure?\n  * Data management - can I move and manage data more effectively?\n\n## AI\u2019s infra moment\n\nA similar convergence of technologies has enabled AI software development\ntools. In particular,\n\n  * Computing resources like GPUs and data centers have provided the infrastructure to train large language models\n  * The introduction of the transformer architecture has ushered in more efficient handling of sequential data and enabled the training of larger models\n  * Large language models and training techniques like in-context learning, reinforcement learning, and domain-specific pre-training have made it possible to build large models for coding use cases\n  * AI infrastructure tooling to support the storage of data, pre-training, and intelligent search\n\nSimilar to how AWS, Containers, IaC, and other infrastructure converged to\ncreate the opportunity for DevOps + Devtools companies to emerge, the AI\ninfrastructure stack is quickly getting to a place capable of supporting a\nrobust ecosystem of software providers.\n\nGPU providers like CoreWeave, Together, Crusoe (a Felicis company), and others\nare effectively the new AWS. Model infrastructure and tooling like Weights +\nBiases (a Felicis company) and LangChain have facilitated cross-talk between\nML backends. Companies offering vector databases (i.e., Felicis company\nSupabase as well as Pinecone and Weaviate) and RAG systems (i.e.,\nUnstructured, Superlinked, TensorLake) have facilitated the intelligent search\nrequired to return answers from prompts. This has laid the foundation for app\nlayer companies like RunwayML (a Felicis company), Jasper, Perplexity, and\nothers to grow extremely quickly.\n\n## How does AI change the landscape?\n\nAn optimistic outlook of how AI will change the software building landscape\nincludes these ideas:\n\n  * AI will create financial efficiencies within software companies that will not be limited to DevOps organizations\n  * AI will automate software layer developer tooling that is more manual or workflow-related, like incident response, documentation, planning, code review, and debugging\n  * The first evolution will be domain/workflow-specific agents that, over time, could evolve into semi-autonomous agents responsible for parts of the SDLC. If a common agentic framework and language are developed, this could evolve into a single agent (but this is likely far out\n  * We are further out from end-to-end agentic software development than most investors believe\n\nTomasz Tunguz of Theory has posited that AI will be largely deflationary\nacross R&D, S&M, and G&A. This position is grounded in the belief that\ncompanies should become more efficient over time once implementing AI, thus\nreducing the amount of required spend for each of these categories (both in\nlabor cost replacement and increased productivity).\n\nIf this is true, then one must believe that AI will also have a market\nexpansion effect \u2013 improving the profitability of these companies and,\ntherefore, valuation. Companies may also benefit from the ability to place a\npremium price on AI-native products, also improving topline growth.\n\nFigure 2. AI\u2019s effect on IS (Tomasz Tunguz)\n\nThe first iteration of AI development tools will likely follow the prior\ngeneration \u2013 focusing on a specific part of the SDLC to automate. Tasks that\nrequire human iteration will be abstracted away and automated by the agent,\nincreasing efficiency. Our framework for tools that are susceptible to\ndisruption is:\n\n  * Highly iterative or manual process that requires significant human input\n  * Low switching costs or no network effects\n  * Low NPS with existing users\n\nThis could diverge if agents start to learn adjacent tasks and some of these\nworkflows become consolidated by one tool. Codium is an example of a company\nthat is taking this approach.\n\nFigure 3. Generate AI Applications, by Corporate Function (Kelvin Mu,\nSubstack)\n\n## Where do startups have an advantage?\n\nStartups have an opportunity to solve existing problems with a new approach.\nIn particular, they can:\n\n  * Build an AI-native product and tech stack: They have the benefit of little tech debt and not having to retrofit AI into existing infrastructure\n  * Iterate on product more quickly: It\u2019s becoming quickly apparent that AI-native companies are shipping faster than others, likely due to the rapid pace of innovation and intense competition\n  * Service a new issue that arises because of the adoption of ML infra: Several companies in the last wave were built to service the needs of the shift to new software development practices and infrastructure and there are likely similar opportunities in this new wave\n\nWhile each criterion above is necessary, startups need to think through how\nthey set up systems to more quickly iterate and beat out incumbents. Their\nproduct strategy has to be rooted in an enduring competitive advantage over an\nincumbent\u2014this can be through technical architecture (technical choices that\nenable better scale economics), building network effects into their business,\nor targeting different end customers.\n\n## Opportunities, risks, and timing\n\nWhen imagining the future of software development, we know AI has massive\npotential to create a wonderful state of productivity and innovation. But the\nbig question, of course, is how any of these AI opportunities overlap with\nexisting developer workflows and needs.\n\nWhat are the most painful manual parts of the development process? Using the\nframework above, we can see opportunities for AI to address these challenges:\n\n  * Alerting/Incident Response: How can we improve the signal-to-noise ratio of alerting and automate the incident response process? Companies like Beeps are tackling this problem.\n  * Observability: How can we start to automate the remediation of the performance of applications and infrastructure? Companies like Flip.ai are building LLM-powered observability products.\n  * Infrastructure Management: Can we generate infrastructure from code automatically? Companies like appCD are taking compelling approaches to fixing this problem.\n  * Data management: Can AI push us toward on-demand intelligent data retrieval?\n\nFurther, we think there is ample opportunity for new categories to emerge\nincluding:\n\n  * Code generation: Companies like Poolside, GitHub, Magic.dev and others are developing models trained on large corpora of code.\n  * Code management: As more code gets automatically generated, there are additional opportunities to better debug, secure, and perform tasks on code. Interesting companies here are Antithesis (debugging), Codium (testing), Semgrep (A Felicis company focused on code security), Sourcegraph\u2019s Cody (A Felicis company focused on developer productivity) and several others.\n  * (I)IDE: Companies like Replit, Codeium, Cursor, are intelligent integrated development environments.\n\nThe integration of artificial intelligence will become a pivotal force in\nreshaping the software development market, creating additional market value\nfor incumbents and leaving opportunities for new companies to challenge the\nstatus quo.\n\nWe are excited to see how this will play out in both the public and private\nmarkets. If you are building in this space, please reach out to us at\nai@felicis.com.\n\nA special thanks to collaborators and editors of this piece including Ian\nLivingstone, Steve Kamman, Corey Harrison, Astasia Myers, and Mischa Vaughn.\n\nMore Stories\n\ndate is not set\n\nApril 19, 2024\n\n## AI Will Impact Security More Than The Cloud\n\ndate is not set\n\nApril 8, 2024\n\n## Minecraft, Physics, and ML\n\ndate is not set\n\nMarch 14, 2024\n\n## Software and a Service\n\ndate is not set\n\nMarch 6, 2024\n\n## Financial Services are the New Wedge\n\ndate is not set\n\nMarch 5, 2024\n\n## Investing in Metaplane\n\ndate is not set\n\nFebruary 29, 2024\n\n## AI Has Killed the Traditional SaaS GTM Playbook\n\nMore Stories\n\nAbout us\n\nFounder PledgeFounders on FelicisImpactBenchmark Your Org\n\nMission\n\nTeam\n\nCompanies\n\nFocus Areas\n\nAIGlobal ResilienceInfraHealth & BioSecurityVertical SaaS\n\nInsights\n\nGet updates about Felicis, our founders, and our insights in your inbox:\n\nThank you! Your submission has been received!\n\nOops! Something went wrong while submitting the form.\n\nTerms of ServicePrivacy Policy\n\nCopyright \u00a9 2024. Felicis All rights reserved.\n\nTobi Coker\n\n", "frontpage": false}
