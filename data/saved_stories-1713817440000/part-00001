{"aid": "40114679", "title": "Hitchstory \u2013 Type-safe StrictYAML Python integration testing framework", "url": "https://hitchdev.com/hitchstory/", "domain": "hitchdev.com", "votes": 1, "user": "amai", "posted_at": "2024-04-22 14:23:17", "comments": 0, "source_title": "HitchStory - HitchDev", "source_text": "HitchStory - HitchDev\n\nSkip to content\n\nType-safe StrictYAML python integration testing framework. With this\nframework, your tests can:\n\n## Rewrite themselves from program output (command line test example)\n\n## Autogenerate documentation (website test example)\n\nThe tests can be run on their own or as pytest tests.\n\n## Demo projects with demo tests\n\nProject| Storytests| Python code| Doc template| Autogenerated docs  \n---|---|---|---|---  \nWebsite| add todo, correct spelling| engine.py| docstory.yml| Add todo,\nCorrect my spelling  \nREST API| add todo, correct spelling| engine.py| docstory.yml| Add todo,\nCorrect my spelling  \nInteractive command line app| add todo, correct spelling| test_integration.py|\ndocstory.yml| Add todo, Correct my spelling  \nA Python API| add todo, correct spelling| test_integration.py| docstory.yml|\nAdd todo, Correct my spelling  \n  \n# Code Example\n\nexample.story:\n\n    \n    \n    Logged in: given: website: /login # preconditions steps: - Form filled: username: AzureDiamond password: hunter2 - Clicked: login Email sent: about: | The most basic email with no subject, cc or bcc set. based on: logged in # inherits from and continues from test above following steps: - Clicked: new email - Form filled: to: Cthon98@aol.com contents: | # long form text Hey guys, I think I got hacked! - Clicked: send email - Email was sent\n\nengine.py:\n\n    \n    \n    from hitchstory import BaseEngine, GivenDefinition, GivenProperty from hitchstory import Failure, strings_match from strictyaml import Str class Engine(BaseEngine): given_definition = GivenDefinition( website=GivenProperty(Str()), ) def __init__(self, rewrite=False): self._rewrite = rewrite def set_up(self): print(f\"Load web page at {self.given['website']}\") def form_filled(self, **textboxes): for name, contents in sorted(textboxes.items()): print(f\"Put {contents} in name\") def clicked(self, name): print(f\"Click on {name}\") def failing_step(self): raise Failure(\"This was not supposed to happen\") def error_message_displayed(self, expected_message): \"\"\"Demonstrates steps that can rewrite themselves.\"\"\" actual_message = \"error message!\" try: strings_match(expected_message, actual_message) except Failure: if self._rewrite: self.current_step.rewrite(\"expected_message\").to(actual_message) else: raise def email_was_sent(self): print(\"Check email was sent!\")\n    \n    \n    >>> from hitchstory import StoryCollection >>> from pathlib import Path >>> from engine import Engine >>> >>> StoryCollection(Path(\".\").glob(\"*.story\"), Engine()).named(\"Email sent\").play() RUNNING Email sent in /path/to/working/example.story ... Load web page at /login Put hunter2 in name Put AzureDiamond in name Click on login Click on new email Put Hey guys, I think I got hacked! in name Put Cthon98@aol.com in name Click on send email Check email was sent! SUCCESS in 0.1 seconds.\n\n## Install\n\n    \n    \n    $ pip install hitchstory\n\n## Community\n\nHelp is available if you ask questions in these places: Github discussions | Github issues (not just for bugs) | Slack channel\n\n## Using HitchStory\n\nEvery feature of this library is documented and listed below. It is tested and\ndocumented with itself.\n\n## Using HitchStory: With Pytest\n\nIf you already have pytest set up, you can quickly and easily write a test\nusing hitchstory that runs alongside your other pytest tests:\n\n  * Self rewriting tests with pytest and hitchstory\n\n## Using HitchStory: Engine\n\nHow to use the different features of the story engine:\n\n  * Hiding stacktraces for expected exceptions\n  * Given preconditions\n  * Gradual typing of story steps\n  * Match two JSON snippets\n  * Match two strings and show diff on failure\n  * Extra story metadata - e.g. adding JIRA ticket numbers to stories\n  * Story with parameters\n  * Story that rewrites given preconditions\n  * Story that rewrites itself\n  * Story that rewrites the sub key of an argument\n  * Raising a Failure exception to conceal the stacktrace\n  * Arguments to steps\n  * Strong typing\n\n## Using HitchStory: Documentation Generation\n\nHow to autogenerate documentation from your tests:\n\n  * Generate documentation with extra variables and functions\n  * Generate documentation from story\n\n## Using HitchStory: Inheritance\n\nInheriting stories from each other:\n\n  * Inherit one story from another simply\n  * Story inheritance - given mapping preconditions overridden\n  * Story inheritance - override given scalar preconditions\n  * Story inheritance - parameters\n  * Story inheritance - steps\n  * Variations\n\n## Using HitchStory: Runner\n\nRunning the stories in different ways:\n\n  * Continue on failure when playing multiple stories\n  * Flaky story detection\n  * Play multiple stories in sequence\n  * Run one story in collection\n  * Shortcut lookup for story names\n\n## Approach to using HitchStory\n\nBest practices, how the tool was meant to be used, etc.\n\n  * Is HitchStory a BDD tool? How do I do BDD with hitchstory?\n  * Complementary tools\n  * Domain Appropriate Scenario Language (DASL)\n  * Executable specifications\n  * Flaky Tests\n  * The Hermetic End to End Testing Pattern\n  * ANTIPATTERN - Analysts writing stories for the developer\n  * Separation of Test Concerns\n  * Snapshot Test Driven Development (STDD)\n  * Test Artefact Environment Isolation\n  * Test concern leakage\n  * Tests as an investment\n  * What is the difference betweeen a test and a story?\n  * The importance of test realism\n  * Testing non-deterministic code\n  * Specification Documentation Test Triality\n\n## Design decisions and principles\n\nDesign decisions are justified here:\n\n  * Declarative User Stories\n  * Why does hitchstory mandate the use of given but not when and then?\n  * Why is inheritance a feature of hitchstory stories?\n  * Why does hitchstory not have an opinion on what counts as interesting to \"the business\"?\n  * Why does hitchstory not have a command line interface?\n  * Principles\n  * Why does HitchStory have no CLI runner - only a pure python API?\n  * Why Rewritable Test Driven Development (RTDD)?\n  * Why does HitchStory use StrictYAML?\n\n## Why not X instead?\n\nHitchStory is not the only integration testing framework. This is how it\ncompares with the others:\n\n  * Why use Hitchstory instead of Behave, Lettuce or Cucumber (Gherkin)?\n  * Why not use the Robot Framework?\n  * Why use hitchstory instead of a unit testing framework?\n\n## Using HitchStory: Setup on its own\n\nIf you want to use HitchStory without pytest:\n\n  * Creating a basic command line test runner\n\n## Using HitchStory: Behavior\n\nMiscellaneous docs about behavior of the framework:\n\n  * Abort a story with ctrl-C\n  * Upgrade breaking changes between v0.14 and v0.15\n  * Handling failing tests\n  * Running a single named story successfully\n\nCopyright \u00a9 2018 - 2023 Colm O'Connor\n\nMade with Material for MkDocs\n\n", "frontpage": false}
