{"aid": "40178984", "title": "What Makes a Popular Song on Spotify? (2018)", "url": "https://student.elon.edu/slichtenstein/SpotifyAnalysis/", "domain": "elon.edu", "votes": 1, "user": "liminal-dev", "posted_at": "2024-04-27 10:54:13", "comments": 0, "source_title": "Spotify's API", "source_text": "Spotify's API\n\n# What Makes a Popular Song on Spotify?\n\n## Background\n\nWith 70 million subscribers and counting, Spotify is the world's largest music\nstreaming service. I have had a Spotify account for many years. As a stingy\ncollege student, it's one of the few online subscriptions that I'm willing to\npay a recurring fee for myself.\n\nFor this project, I wanted to look at the common features between popular\nsongs on Spotify. Spotify's ability to suggest songs based on my previous\nplays is exceptional. The company uses various audio features to classify all\nof the complexities found in a song into universal categories, mainly for the\npurpose of predicting a user's tastes. Is there something that links popular\nmusic together? How likely are popular songs to be classified as happy or sad?\nDo artists with higher stream numbers on their songs have similar\nclassifications on Spotify? I think that popular artists will have happier and\nmore upbeat songs that will reflect in Spotify's audio categories.\n\n### The Most Streamed Songs of All Time\n\nAlong with its extensive song metrics, Spotify records the total amount of\nplays or streams that one track accumulates. Click here for the latest version\nof the most streamed songs on Spotify. This table organizes the most streamed\nsongs on Spotify of all time. All of the Spotify numbers used in this report\nare accurate as of May 2, 2018.\n\nTo get a better sense of the distribution of songs over time on the Top 100\nlist, I graphed the frequency of songs per year.\n\n2015-2017 are the only years with more than 20 songs on the list. However,\nthis might be attributed to Spotify's ever-growing user base in the past few\nyears. With 29 songs on the list, 2016 was the most popular year for Spotify\nsongs. Classics like \"Starboy\" by The Weeknd and \"Let Me Love You\" by DJ Snake\nheadline that year's overall success. Both songs have nearly a billion plays.\n\n### Which Individual Artists Have Multiple Songs on the Top 100 Most Streamed\nList?\n\nAnyone can have a one-hit wonder, but which artists seem to have the special\nformula for creating hit tracks? The graph below shows artists with more than\none song on the Top 100 Most Streamed List.\n\nWith five songs on the list, The Weeknd narrowly edges out Ed Sheeran and\nImagine Dragons as the most common artist found on the list. The Weeknd found\nincredible success with his third studio album, \"Starboy\", which has two songs\non the list featuring Daft Punk as well as three songs from his sophomore\nalbum, \"Beauty Behind the Madness.\" Ed Sheeran, with four songs on the list,\nhas the most streamed song of all time, \"Shape of You.\"\n\n### How Does Spotify Classify Songs?\n\nOne of Spotify's most effective tools is its ability to recommend songs to its\nusers based on previous choices. The company does this by classifying songs\ninto different categories. Categories include: danceability, energy, key,\nvalence, acousticness, instrumentalness, liveness and tempo. When a song fits\na certain amount of criteria based on user feedback, a new song will appear on\na customer's \"discover weekly\" playlist. To look at Spotify's explanations\nbehind their metrics, click here.\n\nOut of all of the categories on Spotify's API, I am most interested in\nvalence, danceability, energy and speechiness. These are categories that\ndirectly refer to innate human emotions. In the context of songs that just\nabout everyone knows, how alike are these categories with one another? First,\nI examined the correlation between valence and danceability.\n\nSpotify uses the word \u201cvalence\u201d to measure whether a song is likely to make\nsomeone feel happy (higher valence) or sad (lower valence). The metric is\nmeasured on a scale from 0.0 to 1.0. \"Danceability\" refers to how suitable a\ntrack is for dancing based on a combination of musical elements. A value of\n0.0 is least danceable and 1.0 is most danceable.\n\nIn order to better understand the relationship between these two seemingly\narbitrary measurements, I plotted a scatterplot that examines the correlation\nbetween the two variables. My prediction is that the two features will have a\npositive correlation with one another. Each dot belowrepresents a song by one\nof the artists with more than one song on the list.\n\nOther than a few outliers, valence and danceability appear to have a moderate,\npositive correlation with one another. As valence increases, so does\ndanceability. The most \"danceable\" song on the top 100 list, according to\nSpotify, is Drake's \"Hotline Bling\", the highest dot on the graph above.\nAlthough \"Hotline Bling\" has a high danceability rate, it is middle-of-the-\nroad in terms of valence. The happiest song in terms of valence are Shawn\nMendes' \"There's Nothing Holding Me Back\", followed closely by \"Shape of You\"\nby Ed Sheeran. Both tracks have high danceability ratings as well.\n\n#### Do Lyrics Take Away From a Song's Energy?\n\nNext, I analyzed the relationship between the measures, \"Speechiness\" and\n\"Energy.\" Speechiness detects the presence of spoken words in a track. The\nmore words in a track, the closer the measure will be to 1.0. Less words will\nlead to a value closer to 0.0. It is also important to consider that since\nSpotify is home to audiobooks and podcasts as well, most songs lie between 0.1\nand 0.4 range. Energy is a measure from 0.0 to 1.0 and represents a perceptual\nmeasure of intensity and activity. Typically, energetic tracks feel fast,\nloud, and noisy. A death heavy metal song will have a significantly higher\nenergy level than a piece by Mozart.\n\nI plotted another scatterplot below with the same rules. I think that these\ntwo audio features will have a negative correlation.\n\nThere seems to be a weaker, positive correlation between speechiness and\nenergy. This means that in most cases, but not all, the amount of words on a\ntrack leads to a higher energy level in popular music. The most \"speechy\"\nsongs on the consolidated list are \"Starboy\" by The Weeknd and \"Treat You\nBetter\" by Shawn Mendes. Both songs have above average valence ratings as\nwell. Ed Sheeran's \"Perfect\" and \"Thinking Out Loud\" have the lowest\nspeechiness ratings on the list, as well as below average energy levels.\n\n### Categories Over Time\n\nNow that we know how the features interact with one another, have any of them\nchanged over time? In order to answer this question, I calculated the average\nof each metric and graphed each answer by year. Each graph is color-coated\nbased on the correlation comparisons above.\n\nAlthough 2013 seems to have an inverse correlation between energy and\nspeechiness, it should be noted that both songs on the list from that year are\nby The Imagine Dragons, a band known for their high energy instrumentals and\nnot for their lyrical prowess. 2015, the highest year for both categories, has\na diverse range of songs, from Shawn Mendes' \"Stitches\" to Major Lazer's\n\"Light it Up\". Overall, I was surprised to see that the speechiness of songs\nby popular artists has increased in the past few years.\n\n#### Danceability and Valence Over Time\n\nNext, I looked at the danceability and valence of popular songs over time.\nAccording to Spotify's records, the average valence and danceability of\npopular music over the past fifty years hovers around 0.5. It is also\nimportant to understand that with each passing year, the sample size of songs\nincreases because there are more newer songs on the list than older ones.\n\nBoth of these graphs reflect the correlation plots from the previous section.\nValence and danceability increase in just about every year almost\nsimultaneously. However, I was surprised to see that these popular songs'\nvalence rates hover around the average of the past fifty years. Only the 2015\nand 2017 averages are above the 0.5 threshold of a \"happy\" song. Danceabililty\nwas also much higher than average in 2016 and 2017. This might be attributed\nto the fact that the top five most danceable songs on the list were published\nin 2016 and 2017. \"Hotline Bling\" and \"Shape of You\" have danceability ratings\nabove 0.8 and are quite hard not to dance to.\n\n## Conclusion\n\nBefore I analyze my hypothesis, it should be noted that this study is a time\ncapsule in Spotify's history. The list of the Top 100 Streamed Songs of All\nTime will change significantly in the future. My analysis is a relevant case\nstudy for the early years of Spotify's API, but it would be interesting to see\nif the averages and correlations remained the same as new songs appear on the\nlist.\n\nIn conclusion, Spotify's most popular artists, for the most part, do have\nhappier and more danceable songs than the average track. In terms of\ncorrelation, I was incorrect in thinking that speechiness takes away from\nenergy, but accurate in my prediction that a happier sentiment (valence) is\nmore likely to make a song easier to dance to (danceability).\n\nIt would be compelling for someone more musically adept than myself to\ninvestigate Spotify's musically oriented audio features such as \"loudness\",\n\"tempo\" and \"key\".\n\n### R Code\n\nInstalling Spotify R Package\n\nlibrary(tidyverse) library(dplyr) install.packages(\"spotifyr\")\nget_artist_audio_features(artist_name = \"Drake\") -> Drake\nSys.setenv(SPOTIFY_CLIENT_ID = ) Sys.setenv(SPOTIFY_CLIENT_SECRET = )\naccess_token <\\- get_spotify_access_token() library(spotifyr)\n\nScraping table from Wikipedia\n\nlibrary(\"tidyverse\") library(\"rvest\") wikipedia <\\-\nread_html(\"https://en.wikipedia.org/wiki/List_of_most_streamed_songs_on_Spotify\")\n\ntbls <\\- html_nodes(wikipedia, \"table\")\n\nchart_tbls <\\- wikipedia %>% html_nodes(\"table\") %>% .[1] %>% html_table(fill\n= TRUE)\n\nas.data.frame(chart_tbls) -> Top100\n\nFinding Top Artists\n\nTop %% group_by(Artist.s.) -> TopArtists\n\nTopArtists %>% filter(Artist.s. == \"Ed Sheeran\") -> EdSheeran\n\nTopArtists2 <\\- TopArtists %% group_by(Artist.s.) %% summarise(n_apperance =\nn()) %% filter(n_apperance > 1) %% arrange(desc(n_apperance))\n\nView(TopArtists2) names(TopArtists2) <\\- c(\"Artist\", \"Count\")\n\nggplot(TopArtists2, aes(x = reorder(Artist, -Count), y = Count)) +\ngeom_bar(stat = \"identity\", fill = \"green\", width = 0.6 ) + labs(title = \"Most\nStreamed Artists\", x = \"Artists\", y = \"Number of Appearances on the Top 100\")\n+ theme(plot.title = element_text(size=15,hjust=-.3,face = \"bold\"), axis.title\n= element_text(size=12)) + coord_flip()\n\nGraphing Artists by Year\n\nget_artist_audio_features(artist_name = \"Ed Sheeran\") -> EdSheeran\n\nget_artist_audio_features(\"Justin Bieber\") -> Biebs\n\nmerged3 <\\- rbind(merged3, Weeknd)\n\nView(merged3)\n\nTop %>% ggplot(aes())\n\nTop<\\- separate(Top100, Date.published, into = c(\"month\", \"date\", \"year\"))\n\nView(Top) Top %>% group_by(year) -> Top2\n\nTop2 %>% count() -> Top3\n\nTop3 <\\- Top3[-c(9), ]\n\nTop3 -> TopByYear\n\nget_artist_audio_features(\"Bruno Mars\") -> Bruno\n\nget_artist_audio_features(\"Sia\") -> Sia\n\nSia <\\- Sia[-c(3:23), ]\n\nlibrary(ggplot2) library(ggthemes)\n\nggplot(TopByYear, aes(year, Frequency)) + geom_bar(stat = \"identity\", fill =\n\"green\", width = 0.6) + coord_flip() + ggtitle(\"What Year Has the Most Songs\non Spotify's Top 100 List?\") + theme_economist_white()\n\nMerging and Graphing The Popular Artists' Categories\n\ndrake3 %>% ggplot(aes(valence, danceability)) + geom_point(alpha = 0.7, size =\n3)\n\nmerged3 <\\- merged3 %>% separate(album_release_date, c(\"year\", \"month\",\n\"day\"))\n\nView(merged2)\n\nmerged3 %>% ggplot(aes(valence, danceability)) + geom_point(alpha = 0.7, size\n= 3) + geom_smooth(method = \"lm\") + ggtitle(\"Valence vs. Danceability\")\n\nmerged3 %>% ggplot(aes(energy, speechiness)) + geom_point(alpha = 0.7, size =\n3) + geom_smooth(method = \"lm\") + ggtitle(\"Speechiness vs. Energy\")\n\nmerged3 %>% ggplot(aes(year, valence)) + theme(legend.position = \"none\") +\nstat_summary(fun.y=\"mean\", geom=\"bar\", fill = \"green\") + ggtitle(\"Valence of\nPopular Songs Over Time\")\n\nmerged3 %>% ggplot(aes(year, danceability)) + theme(legend.position = \"none\")\n+ stat_summary(fun.y=\"mean\", geom=\"bar\", fill =\"green\") +\nggtitle(\"Danceability of Popular Songs Over Time\")\n\nmerged3 %>% ggplot(aes(year, energy)) + theme(legend.position = \"none\") +\nstat_summary(fun.y=\"mean\", geom=\"bar\", fill =\"black\") + ggtitle(\"Energy of\nPopular Songs Over Time\")\n\nmerged3 %>% ggplot(aes(year, speechiness)) + theme(legend.position = \"none\") +\nstat_summary(fun.y=\"mean\", geom=\"bar\", fill =\"green\") + ggtitle(\"Speechiness\nof Popular Songs Over Time\")\n\nmerged3 %>% ggplot(aes(year, speechiness)) + theme(legend.position = \"none\") +\nstat_summary(fun.y=\"mean\", geom=\"bar\", fill =\"black\") + ggtitle(\"Speechiness\nof Popular Songs Over Time\")\n\n", "frontpage": false}
