{"aid": "40143669", "title": "Faer-rs: Linear algebra foundation for the Rust programming language", "url": "https://github.com/sarah-ek/faer-rs", "domain": "github.com/sarah-ek", "votes": 18, "user": "nateb2022", "posted_at": "2024-04-24 12:41:09", "comments": 3, "source_title": "GitHub - sarah-ek/faer-rs: Linear algebra foundation for the Rust programming language", "source_text": "GitHub - sarah-ek/faer-rs: Linear algebra foundation for the Rust programming\nlanguage\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nsarah-ek / faer-rs Public\n\n  * Sponsor\n  * Notifications\n  * Fork 43\n  * Star 1.3k\n\nLinear algebra foundation for the Rust programming language\n\nfaer-rs.github.io\n\n### License\n\nMIT license\n\n1.3k stars 43 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# sarah-ek/faer-rs\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n20 Branches\n\n141 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nsarahremove diol.jsonApr 20, 2024172f651 \u00b7 Apr 20, 2024Apr 20, 2024\n\n## History\n\n431 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Monocrate refactor (#107)| Feb 21, 2024  \n  \n### benches\n\n|\n\n### benches\n\n| update benchmarks| Apr 20, 2024  \n  \n### examples\n\n|\n\n### examples\n\n| Monocrate refactor (#107)| Feb 21, 2024  \n  \n### faer-bench\n\n|\n\n### faer-bench\n\n| update benchmarks| Apr 20, 2024  \n  \n### faer-entity\n\n|\n\n### faer-entity\n\n| update benchmarks| Apr 20, 2024  \n  \n### src\n\n|\n\n### src\n\n| update benchmarks| Apr 20, 2024  \n  \n### test_data\n\n|\n\n### test_data\n\n| Monocrate refactor (#107)| Feb 21, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| start working on dev guide| Feb 4, 2024  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| prepare for 0.18 release| Mar 3, 2024  \n  \n### CITATION.cff\n\n|\n\n### CITATION.cff\n\n| add citation| Feb 25, 2024  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| remove relative diol path| Apr 20, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Create LICENSE| Nov 21, 2022  \n  \n### README.md\n\n|\n\n### README.md\n\n| minor fixes| Apr 3, 2024  \n  \n### justfile\n\n|\n\n### justfile\n\n| add faer-sparse to justfile| Oct 22, 2023  \n  \n### katex-header.html\n\n|\n\n### katex-header.html\n\n| document lu module| Nov 23, 2022  \n  \n### paper.bib\n\n|\n\n### paper.bib\n\n| fix up paper| Nov 14, 2023  \n  \n### paper.md\n\n|\n\n### paper.md\n\n| fix up paper| Nov 14, 2023  \n  \n### rustfmt.toml\n\n|\n\n### rustfmt.toml\n\n| fix qr for real inputs| Nov 14, 2022  \n  \n## Repository files navigation\n\n# faer\n\nfaer is a Rust crate that implements low level linear algebra routines and a\nhigh level wrapper for ease of use, in pure Rust. The aim is to provide a\nfully featured library for linear algebra with focus on portability,\ncorrectness, and performance.\n\nSee the official website and the docs.rs documentation for code examples and\nusage instructions.\n\nQuestions about using the library, contributing, and future directions can be\ndiscussed in the Discord server.\n\n# Contributing\n\nIf you'd like to contribute to faer, check out the list of \"good first issue\"\nissues. These are all (or should be) issues that are suitable for getting\nstarted, and they generally include a detailed set of instructions for what to\ndo. Please ask questions on the Discord server or the issue itself if anything\nis unclear!\n\n# Minimum supported Rust version\n\nThe current MSRV is Rust 1.67.0.\n\n# Benchmarks\n\nThe benchmarks were run on an 11th Gen Intel(R) Core(TM) i5-11400 @ 2.60GHz\nwith 12 threads.\n\n  * nalgebra is used with the matrixmultiply backend\n  * ndarray is used with the openblas backend\n  * eigen is compiled with -march=native -O3 -fopenmp\n\nAll computations are done on column major matrices containing f64 values.\n\n## Matrix multiplication\n\nMultiplication of two square matrices of dimension n.\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 40ns 41ns 139ns 29ns 17ns 8 77ns 80ns 63ns 161ns 85ns 16 189ns 193ns 201ns 363ns 219ns 32 1.1\u03bcs 1.1\u03bcs 1.1\u03bcs 1.5\u03bcs 1.2\u03bcs 64 7.9\u03bcs 7.9\u03bcs 7.9\u03bcs 10.5\u03bcs 5.1\u03bcs 96 27.5\u03bcs 11.2\u03bcs 26.2\u03bcs 34.9\u03bcs 10.1\u03bcs 128 65.5\u03bcs 17.1\u03bcs 35.7\u03bcs 78.3\u03bcs 32.9\u03bcs 192 216.6\u03bcs 54.4\u03bcs 57.3\u03bcs 260.7\u03bcs 51.7\u03bcs 256 510.8\u03bcs 117.8\u03bcs 183.2\u03bcs 602.6\u03bcs 142.9\u03bcs 384 1.7ms 339.1\u03bcs 575.8\u03bcs 2ms 327.9\u03bcs 512 4ms 785.6\u03bcs 1.3ms 4.7ms 1ms 640 7.9ms 1.6ms 2.3ms 9.2ms 1.9ms 768 13.8ms 2.9ms 3.6ms 16ms 3.2ms 896 22.2ms 4.6ms 6.5ms 25.7ms 5.9ms 1024 33.9ms 6.6ms 9.7ms 39.1ms 8.3ms\n\n## Triangular solve\n\nSolving AX = B in place where A and B are two square matrices of dimension n,\nand A is a triangular matrix.\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 20ns 19ns 755ns 39ns 65ns 8 118ns 118ns 1.5\u03bcs 308ns 156ns 16 498ns 502ns 3.3\u03bcs 1.5\u03bcs 671ns 32 2.1\u03bcs 2.1\u03bcs 8.6\u03bcs 6.6\u03bcs 2.9\u03bcs 64 9.7\u03bcs 9.8\u03bcs 25.9\u03bcs 34.2\u03bcs 13.8\u03bcs 96 27.7\u03bcs 24.5\u03bcs 55.2\u03bcs 101.4\u03bcs 36.9\u03bcs 128 56.4\u03bcs 39.9\u03bcs 145.2\u03bcs 232\u03bcs 81.7\u03bcs 192 167.8\u03bcs 92\u03bcs 263.6\u03bcs 815.5\u03bcs 213.6\u03bcs 256 367.7\u03bcs 163\u03bcs 660\u03bcs 1.9ms 488.1\u03bcs 384 1.1ms 317.5\u03bcs 1.4ms 7.4ms 1.4ms 512 2.6ms 662.7\u03bcs 3.5ms 17.2ms 3.3ms 640 4.7ms 1.2ms 5.7ms 33.6ms 5.5ms 768 8ms 2.3ms 9.4ms 56.2ms 9.3ms 896 12.3ms 3.6ms 13.6ms 89.3ms 14ms 1024 18.7ms 5.2ms 20.1ms 131.9ms 22.9ms\n\n## Triangular inverse\n\nComputing A^-1 where A is a square triangular matrix with dimension n.\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 162ns 5.2\u03bcs 771ns 38ns 65ns 8 514ns 5.9\u03bcs 1.5\u03bcs 308ns 156ns 16 1.6\u03bcs 7.7\u03bcs 3.4\u03bcs 1.5\u03bcs 672ns 32 4.2\u03bcs 10.5\u03bcs 8.7\u03bcs 6.6\u03bcs 2.9\u03bcs 64 12.5\u03bcs 18.1\u03bcs 25.7\u03bcs 34.2\u03bcs 13.8\u03bcs 96 30.6\u03bcs 39.8\u03bcs 55\u03bcs 101.4\u03bcs 36.9\u03bcs 128 42.7\u03bcs 51.9\u03bcs 144.9\u03bcs 232\u03bcs 81.6\u03bcs 192 110\u03bcs 89.7\u03bcs 262.9\u03bcs 815.7\u03bcs 213.3\u03bcs 256 191.7\u03bcs 138.3\u03bcs 645.5\u03bcs 1.9ms 486.9\u03bcs 384 533.5\u03bcs 274.7\u03bcs 1.4ms 6.7ms 1.4ms 512 1.1ms 449.4\u03bcs 3.5ms 15.6ms 3.3ms 640 2ms 861.3\u03bcs 5.6ms 30.2ms 5.5ms 768 3.2ms 1.2ms 9.3ms 51.8ms 9.3ms 896 4.8ms 1.7ms 13.4ms 81.9ms 14ms 1024 7.2ms 2.4ms 19.9ms 122.8ms 22.7ms\n\n## Cholesky decomposition\n\nFactorizing a square matrix with dimension n as L\u00d7L.T, where L is lower\ntriangular.\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 49ns 49ns 149ns 52ns 43ns 8 128ns 128ns 329ns 99ns 125ns 16 408ns 408ns 950ns 412ns 376ns 32 1.8\u03bcs 1.8\u03bcs 3.3\u03bcs 1.8\u03bcs 2.3\u03bcs 64 7\u03bcs 7\u03bcs 34.6\u03bcs 10.5\u03bcs 9\u03bcs 96 18\u03bcs 18.2\u03bcs 70.5\u03bcs 31.3\u03bcs 21\u03bcs 128 30.1\u03bcs 30.4\u03bcs 202.2\u03bcs 77.4\u03bcs 40.3\u03bcs 192 86.4\u03bcs 92.7\u03bcs 301.3\u03bcs 259.8\u03bcs 105.2\u03bcs 256 161.7\u03bcs 149.4\u03bcs 711.5\u03bcs 607.4\u03bcs 216.6\u03bcs 384 462.9\u03bcs 423.9\u03bcs 1.2ms 2.1ms 596.5\u03bcs 512 1.1ms 619.5\u03bcs 3.8ms 5.4ms 1.3ms 640 1.9ms 1.3ms 3.3ms 10.4ms 2.2ms 768 3.3ms 1.8ms 5.4ms 17.9ms 3.7ms 896 5ms 2.7ms 6.9ms 28.4ms 5.6ms 1024 7.8ms 3.4ms 14.5ms 41.2ms 8.4ms\n\n## LU decomposition with partial pivoting\n\nFactorizing a square matrix with dimension n as P\u00d7L\u00d7U, where P is a\npermutation matrix, L is unit lower triangular and U is upper triangular.\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 103ns 99ns 180ns 77ns 98ns 8 210ns 217ns 405ns 241ns 278ns 16 649ns 625ns 1.4\u03bcs 859ns 880ns 32 2.7\u03bcs 2.6\u03bcs 5.6\u03bcs 4.4\u03bcs 3.9\u03bcs 64 12.4\u03bcs 12.5\u03bcs 17.4\u03bcs 22.9\u03bcs 15.6\u03bcs 96 30.2\u03bcs 31.6\u03bcs 34.4\u03bcs 67.9\u03bcs 36.7\u03bcs 128 61.3\u03bcs 60.7\u03bcs 97.4\u03bcs 159.4\u03bcs 126\u03bcs 192 163.5\u03bcs 187.3\u03bcs 182.4\u03bcs 527.8\u03bcs 425.5\u03bcs 256 352\u03bcs 360.9\u03bcs 491.1\u03bcs 1.3ms 824.9\u03bcs 384 968.8\u03bcs 781.3\u03bcs 909.5\u03bcs 4.5ms 1.9ms 512 2.1ms 1.5ms 1.5ms 11.1ms 4.3ms 640 3.8ms 2.2ms 2.2ms 20.7ms 5.6ms 768 6.2ms 3.2ms 3.4ms 35.8ms 8.6ms 896 9.5ms 4.6ms 4.7ms 56.1ms 11.4ms 1024 14.4ms 6.5ms 6.7ms 88ms 17.1ms\n\n## LU decomposition with full pivoting\n\nFactorizing a square matrix with dimension n as P\u00d7L\u00d7U\u00d7Q.T, where P and Q are\npermutation matrices, L is unit lower triangular and U is upper triangular.\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 132ns 134ns - 111ns 164ns 8 386ns 415ns - 418ns 493ns 16 1.7\u03bcs 1.7\u03bcs - 2.3\u03bcs 2.1\u03bcs 32 5.9\u03bcs 6\u03bcs - 14.7\u03bcs 12.2\u03bcs 64 25.8\u03bcs 25.4\u03bcs - 106.4\u03bcs 72.2\u03bcs 96 67.7\u03bcs 67.9\u03bcs - 347.3\u03bcs 206.3\u03bcs 128 156.4\u03bcs 155.2\u03bcs - 819.1\u03bcs 460.9\u03bcs 192 463.4\u03bcs 460.6\u03bcs - 2.8ms 1.4ms 256 1.1ms 1.1ms - 6.6ms 3.3ms 384 3.8ms 3.8ms - 22.1ms 11ms 512 10.1ms 7.9ms - 53.4ms 27.4ms 640 17.7ms 12ms - 102.5ms 50.7ms 768 31.2ms 17.5ms - 176.9ms 87.3ms 896 47.3ms 25.1ms - 280ms 136.1ms 1024 76.1ms 33.9ms - 431ms 207.9ms\n\n## QR decomposition with no pivoting\n\nFactorizing a square matrix with dimension n as QR, where Q is unitary and R\nis upper triangular.\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 132ns 132ns 758ns 138ns 273ns 8 345ns 346ns 1.7\u03bcs 321ns 777ns 16 1.1\u03bcs 1.1\u03bcs 4.8\u03bcs 1.3\u03bcs 2.2\u03bcs 32 4.4\u03bcs 4.4\u03bcs 15.3\u03bcs 6.9\u03bcs 7.4\u03bcs 64 30.5\u03bcs 30.1\u03bcs 61.7\u03bcs 43.4\u03bcs 45.2\u03bcs 96 65.2\u03bcs 65.2\u03bcs 322.4\u03bcs 141.3\u03bcs 79.1\u03bcs 128 118.4\u03bcs 118.3\u03bcs 842.4\u03bcs 320.9\u03bcs 154.3\u03bcs 192 315.3\u03bcs 316.1\u03bcs 1.6ms 1.1ms 383.7\u03bcs 256 643.8\u03bcs 693.4\u03bcs 2.8ms 2.4ms 794.6\u03bcs 384 1.9ms 1.7ms 7.6ms 8.1ms 2.1ms 512 4.1ms 3ms 16.1ms 19ms 4.5ms 640 7.4ms 4.5ms 22.5ms 36.2ms 8ms 768 12.2ms 6.6ms 34.7ms 62.1ms 13.2ms 896 18.6ms 9.2ms 46.3ms 97.7ms 20.4ms 1024 27.7ms 12.9ms 65.9ms 150ms 30.2ms\n\n## QR decomposition with column pivoting\n\nFactorizing a square matrix with dimension n as QRP, where P is a permutation\nmatrix, Q is unitary and R is upper triangular.\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 167ns 185ns - 172ns 373ns 8 430ns 433ns - 552ns 1\u03bcs 16 1.7\u03bcs 1.7\u03bcs - 2.8\u03bcs 2.9\u03bcs 32 5.9\u03bcs 6\u03bcs - 17.6\u03bcs 9.5\u03bcs 64 33.2\u03bcs 50.6\u03bcs - 126.9\u03bcs 37.9\u03bcs 96 85.6\u03bcs 104.7\u03bcs - 421.8\u03bcs 104.7\u03bcs 128 182.3\u03bcs 209.2\u03bcs - 987.7\u03bcs 218.1\u03bcs 192 548.2\u03bcs 600.4\u03bcs - 3.3ms 628.1\u03bcs 256 1.3ms 1.4ms - 7.6ms 1.6ms 384 4.6ms 3.5ms - 25.4ms 5.6ms 512 11.4ms 6.7ms - 60ms 15.1ms 640 22.2ms 10.5ms - 116.2ms 26.6ms 768 37.7ms 14.8ms - 199.7ms 46.2ms 896 60.7ms 20.1ms - 317.9ms 71.1ms 1024 90.2ms 30.7ms - 488.3ms 114ms\n\n## Matrix inverse\n\nComputing the inverse of a square matrix with dimension n.\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 795ns 7.5\u03bcs 534ns 77ns 381ns 8 2.2\u03bcs 8.9\u03bcs 995ns 825ns 794ns 16 5.3\u03bcs 12\u03bcs 2.9\u03bcs 4\u03bcs 2.7\u03bcs 32 15.2\u03bcs 29.9\u03bcs 10.3\u03bcs 19\u03bcs 10.8\u03bcs 64 49.8\u03bcs 66.2\u03bcs 40.5\u03bcs 101.2\u03bcs 45.9\u03bcs 96 127.1\u03bcs 122.7\u03bcs 182.1\u03bcs 285.3\u03bcs 119.2\u03bcs 128 199.9\u03bcs 172.7\u03bcs 314.9\u03bcs 661.3\u03bcs 341\u03bcs 192 543\u03bcs 419.8\u03bcs 587.1\u03bcs 2.2ms 963.8\u03bcs 256 1ms 668.3\u03bcs 1.1ms 5.6ms 2ms 384 2.9ms 1.4ms 2.4ms 18.7ms 5.1ms 512 6.2ms 2.6ms 4.6ms 44.2ms 11.9ms 640 11.5ms 5.5ms 7.2ms 83ms 19.2ms 768 19.2ms 8.7ms 11.2ms 142.3ms 30.9ms 896 29.5ms 12.9ms 16.7ms 223.1ms 44.1ms 1024 43.5ms 18.2ms 23.9ms 347.1ms 68.8ms\n\n## Square matrix singular value decomposition\n\nComputing the SVD of a square matrix with dimension n.\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 2\u03bcs 1.9\u03bcs 3\u03bcs 1.3\u03bcs 1.8\u03bcs 8 9.7\u03bcs 24.4\u03bcs 8.2\u03bcs 3.9\u03bcs 9.1\u03bcs 16 32\u03bcs 57.8\u03bcs 25.9\u03bcs 16.9\u03bcs 49.8\u03bcs 32 107\u03bcs 132.1\u03bcs 90.3\u03bcs 95.9\u03bcs 222\u03bcs 64 409.1\u03bcs 381.5\u03bcs 562.5\u03bcs 555\u03bcs 987.6\u03bcs 96 903.9\u03bcs 913.1\u03bcs 1.7ms 1.7ms 2.7ms 128 1.6ms 1.5ms 2.9ms 4.6ms 4.3ms 192 4ms 4ms 6.7ms 14.8ms 9.9ms 256 7.8ms 7ms 11.7ms 47.4ms 17.3ms 384 20.9ms 15.1ms 25.8ms 121.1ms 42.9ms 512 45.3ms 28.1ms 52ms 472.1ms 83.9ms 640 80ms 44.5ms 79.1ms 665.7ms 133.8ms 768 130.9ms 78.5ms 123.9ms 1.48s 208.9ms 896 198.4ms 110.9ms 182.8ms 2.11s 295.4ms 1024 297.8ms 152ms 253.8ms 3.95s 433.6ms\n\n## Thin matrix singular value decomposition\n\nComputing the SVD of a rectangular matrix with shape (4096, n).\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 73.4\u03bcs 73.5\u03bcs 311\u03bcs 127.5\u03bcs 76.7\u03bcs 8 170.8\u03bcs 180.7\u03bcs 813.8\u03bcs 364.3\u03bcs 302.3\u03bcs 16 440.4\u03bcs 513\u03bcs 2.1ms 1.4ms 775.5\u03bcs 32 1.2ms 1.2ms 5.3ms 5.2ms 3.1ms 64 3.4ms 3.2ms 15.7ms 19.9ms 8ms 96 6.8ms 5.4ms 30.1ms 44.5ms 17.2ms 128 11.2ms 8.3ms 47.4ms 79.4ms 30.9ms 192 23.6ms 16.1ms 63ms 182.2ms 60.7ms 256 40.7ms 25.5ms 84ms 353.1ms 101.3ms 384 90.7ms 48.3ms 133ms 904.4ms 219.7ms 512 164.7ms 80.2ms 303.4ms 2.02s 400.7ms 640 258.7ms 119.7ms 289ms 3.24s 646.8ms 768 381.7ms 187ms 440.1ms 5.15s 952ms 896 532.6ms 252.7ms 550.2ms 7.23s 1.33s 1024 724.4ms 327ms 849.6ms 10.64s 1.75s\n\n## Hermitian matrix eigenvalue decomposition\n\nComputing the EVD of a Hermitian matrix with shape (n, n).\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 1.3\u03bcs 1.3\u03bcs 1.4\u03bcs 675ns 1\u03bcs 8 3.9\u03bcs 4\u03bcs 6.6\u03bcs 2.3\u03bcs 3.4\u03bcs 16 13.2\u03bcs 13.6\u03bcs 25.9\u03bcs 10.3\u03bcs 12.5\u03bcs 32 50.9\u03bcs 51.1\u03bcs 167.1\u03bcs 50.8\u03bcs 49.7\u03bcs 64 223.9\u03bcs 217.5\u03bcs 1.2ms 293.9\u03bcs 211.2\u03bcs 96 519\u03bcs 518.2\u03bcs 2.6ms 876\u03bcs 518\u03bcs 128 931.7\u03bcs 885.5\u03bcs 5.4ms 1.9ms 1.1ms 192 2.2ms 2.1ms 16ms 5.8ms 3.1ms 256 4.1ms 3.5ms 33.9ms 13.2ms 6.6ms 384 10.5ms 8.8ms 105.5ms 42.7ms 21.2ms 512 21.9ms 16.5ms 175ms 99.3ms 51.4ms 640 37.6ms 26.5ms 266.2ms 187.4ms 94.2ms 768 60.4ms 38.1ms 403.3ms 322.6ms 161.9ms 896 90.4ms 52.2ms 615.3ms 502.5ms 249.9ms 1024 132.1ms 68.4ms 909ms 764.1ms 392ms\n\n## Non Hermitian matrix eigenvalue decomposition\n\nComputing the EVD of a matrix with shape (n, n).\n\n    \n    \n    n faer faer(par) ndarray nalgebra eigen 4 4.8\u03bcs 5.1\u03bcs 3.5\u03bcs - 3.1\u03bcs 8 15.6\u03bcs 16.7\u03bcs 9.6\u03bcs - 10.5\u03bcs 16 54.7\u03bcs 54.4\u03bcs 35.9\u03bcs - 44.4\u03bcs 32 270.7\u03bcs 235.6\u03bcs 172.6\u03bcs - 199.3\u03bcs 64 1.1ms 1.1ms 1ms - 1.1ms 96 2.7ms 2.9ms 5.5ms - 3.1ms 128 4.9ms 5.6ms 11.6ms - 9.2ms 192 14.4ms 14.3ms 22.4ms - 26.9ms 256 24.4ms 26.2ms 49.9ms - 86.6ms 384 56.4ms 62.6ms 107ms - 246.1ms 512 126.8ms 130.1ms 281.7ms - 887.6ms 640 205.8ms 192.6ms 415.6ms - 1.2s 768 323.5ms 285.6ms 547.2ms - 2.84s 896 438.1ms 375.8ms 704.3ms - 3.67s 1024 687.8ms 579.3ms 957.1ms - 7s\n\n## About\n\nLinear algebra foundation for the Rust programming language\n\nfaer-rs.github.io\n\n### Topics\n\nrust matrix linear-algebra\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Citation\n\nActivity\n\n### Stars\n\n1.3k stars\n\n### Watchers\n\n16 watching\n\n### Forks\n\n43 forks\n\nReport repository\n\n## Releases\n\n141 tags\n\n## Sponsor this project\n\nsarah-ek sarah\n\nSponsor\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Contributors 14\n\n## Languages\n\n  * Rust 99.3%\n  * Other 0.7%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
