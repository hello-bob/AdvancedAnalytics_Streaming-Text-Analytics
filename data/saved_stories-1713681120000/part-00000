{"aid": "40102256", "title": "Rust for JavaScript Developers (2019)", "url": "https://www.codegram.com/blog/rust-for-js-developers/", "domain": "codegram.com", "votes": 4, "user": "kugurerdem", "posted_at": "2024-04-21 00:31:51", "comments": 0, "source_title": "\ud83e\udd80 Rust for JS developers", "source_text": "\ud83e\udd80 Rust for JS developers \u00b7 Codegram\n\nSkip to Main Content\n\n# \ud83e\udd80 Rust for JS developers\n\nA nice introduction to Rust from a JavaScript developer perspective.\n\nWritten in Development by David Morcillo \u2014 October 15, 2019\n\nRust WebAssembly JavaScript\n\nThe first time I read about Rust \ud83e\udd80 it didn't pique my interest. Around two\nyears ago, I was working as a web developer, mostly using JavaScript and I\nthought Rust wasn't for me because it looked really difficult at that moment.\n\nAt the start of this year, I decided to start learning Rust on my own. What\nhas changed during this time? I am still a web developer but knowing that I\nwill be able to write a program in Rust, compile to WebAssembly and execute it\nin the browser has been the spark that ignited my motivation.\n\nIn this post, I am gonna present Rust from a JavaScript developer perspective\ndoing some side-to-side comparisons. I hope it will motivate you to give it a\ntry!\n\n## What is Rust?\n\nThe Rust programming language was created by Mozilla and its first stable\nversion was released around 2015. It looks like this:\n\n    \n    \n    fn main() { println!(\"Hello, World!\"); }\n\nIt doesn't look so scary, right? You could say it almost looks like JavaScript\nbut that's just the hello world program and it's a bit more complicated!\nBefore looking at some features of the language let's place Rust in the\nprogramming languages spectrum like this:\n\nThere is a clear distinction between programming languages:\n\n  * Low-level: Languages like C++ that has access to memory management are considered low level and they are very fast. They are also very insecure because it's very easy to mess up with memory and bad things can happen!\n  * High-level: On the other hand, languages like JavaScript don't have that granular access to memory (there is the Garbage Collector that handles everything for us) and are considered safe languages so sometimes they can be slow.\n\nRust can be considered both fast and safe but it doesn't come for free: there\nis a steep learning curve and the compilation time can be a bit high even for\nsmall examples.\n\n## Rust key features\n\nLike any programming language, there is a lot to cover but I decided to focus\non four topics that are essential to learn the language and start working on\nit.\n\n### Types\n\nJavaScript is a dynamically typed language, and we can do some fun things like\nsubtracting the number 1 to the string wat and obtain unexpected results. This\nis possible because the type system is not strict. In Rust, if you try to\nperform a simple addition of two numbers that are not of the same type you get\na compilation error:\n\n    \n    \n    fn main() { let a: i32 = 42; let b: f64 1.0; println!(\"{}\", a + b); // ERROR: a and b are not of the same type. }\n\nYou will get a lot of errors when you start working in Rust and you will\nprobably hate the compiler at first:\n\nIf you feel like this dog and you are constantly fighting the Rust compiler\ndon't worry! We all have been there.\n\n### Immutability\n\nFunctional languages are very well-known for working with immutable\nstructures. As JavaScript developers, we are not forced to work with\nimmutability but popular libraries like Redux and Immutable.js taught us these\ngood practices. Today we have the let and const keywords to declare mutable\nand immutable variables respectively.\n\nIn Rust, we are gonna use just let to declare variables, and they will be\nimmutable by default. If we want to use mutable data we need to add the mut\nkeyword to the declaration like this:\n\n    \n    \n    fn main() { let a = 42; let mut b = 1; a = 43; // ERROR: a is not mutable b = 2; }\n\n### Ownership\n\nIn my opinion, this is the hardest concept to learn Rust because it is really\ndifferent from other languages that I worked on but this is the key that makes\nRust fast and safe to use!\n\nWhen you assign some data to a variable it is said that the variable owns it\nand every piece of data can only have one owner. Let's see this in action:\n\n    \n    \n    fn main() { let x = String::from(\"hello\"); // x owns the \"hello\" string let a = x; // At this point a owns the \"hello\" string and x is no longer valid do_something(x); // ERROR: x cannot be used anymore! }\n\nIn Rust there is no null and undefined values, so we cannot use a variable\nthat doesn't have a value. In the previous example when we assigned a to x we\nare moving the value from x to a so at this point x doesn't have a valid\nvalue. The same happens with functions:\n\n    \n    \n    fn main() { let x = String::from(\"hello\"); do_something(x); do_other_thing(x); // ERROR: x cannot be used anymore! } fn do_something(s: String) { // Do something with s }\n\nWhen we call the method do_something we are moving the value from x to s, the\nargument received by the function. After executing the function we return to\nmain and x doesn't have a valid value anymore.\n\nThe previous behavior is not always desired and that's the reason that in Rust\nwe can borrow things! If you don't want to move a value from a variable to\nanother one use references like this:\n\n    \n    \n    fn main() { let x = String::from(\"hello\"); do_something(&x); do_other_thing(&x); // This is ok now because we are not moving the value } fn do_something(s: &String) { // Do something with s }\n\nWhen we are dealing with ownership and borrowing the Rust compiler wants us to\nplay nice so it will warn us if you we try to do something wrong:\n\nIf you are confused after learning about ownership and borrowing it is ok!\nYour brain has started to deal with memory management and it can hurt\nsometimes. I recommend you watching this video to learn more about this topic.\n\n### Structs\n\nRust is not an object-oriented language but it has some features that can\nemulate some behavior present in that kind of languages. When we work with\nclasses in JavaScript we are dealing with both data and methods in the same\nplace. In Rust, we are gonna separate the data representation from the methods\nthat manipulate it like this:\n\n    \n    \n    struct Dog { name: String, score: i32 } impl Dog { fn say_something(self: &Dog) { println!(\"Hey, my name is {}... I mean WOOF!\", self.name); } } fn main() { let dog = Dog { name: String::from(\"Boira\"), score: 13 }; dog.say_something(); }\n\nThe struct Dog looks pretty similar to a JavaScript object but it's not. The\nstruct is the shape of some data that will have two named fields: name and\nscore. Below the struct you can see an implementation block (impl for short).\nWe can declare methods that will manipulate the data like this and notice that\nif we want to associate the function with that data we need to pass self as\nthe first argument. It kinda looks like Python, doesn't it?\n\nIf we omit the self value we are declaring a method that is not associated\nwith any particular piece of data. You can think of it as a static method in a\nJavaScript class.\n\n## What can I do with Rust?\n\nThe first thing you need to do is install Rust and it cannot be easier. Visit\nthe https://rustup.rs/ web to download the official toolchain installer. It is\nkinda similar to the nvm project that is commonly used with JavaScript.\n\nThen you are gonna need some libraries so don't start from scratch. In the\nsame way as we have Node packages in JavaScript we are gonna deal with crates\nin Rust. Visit crates.io, the official crates registry, to know more about\nRust crates.\n\nSince Rust is very versatile there are a lot of topics where Rust can be used\nand the community has made a good effort to track them in different websites:\n\n  * www.arewewebyet.org: Even if there are no frameworks as mature as Ruby on Rails you could build some stuff! I recommend taking a look at the Rocket framework if you want to do some web development. You can even create GraphQL APIs using Juniper!\n  * www.arewegameyet.com: Having full control of memory management is a necessary feature to create some kind of games so Rust is a wonderful candidate! If you are interested in game development I recommend you checking the Amethyst game engine.\n  * www.arewelearningyet.com: Another topic that is widely popular right now is machine learning. The Rust ecosystem isn't very complete right now and it may not be as good as Python right now to do machine learning but If you are interested in the topic check their website!\n\nFinally, if you are doing web development you are lucky! You can create\nprograms, compile them and use it all together with your existing JavaScript\ncode. The technology that made this possible is WebAssembly and it can be used\nright now in all modern browsers.\n\nIf you want to try it I recommend you to read the official Rust and\nWebAssembly book.\n\n## Conclusion\n\nRust is a really cool language to learn and you could build a lot of things\nwith it! If you are a web developer like me you will find the whole\nWebAssembly topic very interesting and I hope I can write future posts about\nit.\n\nIf you want to start working with Rust I recommend you checking the official\nbook and try to write some existing JavaScript programs with Rust. As a lot of\nthings practice is the key!\n\nFinally, this blog post was inspired by a talk that I presented in the JS\nCoders meetup event and you can check the slides here.\n\nCover photo by Phil Hearing\n\n### View all posts tagged as\n\nDevelopment Rust WebAssembly JavaScript\n\n### Related Posts\n\nFirefox, let's focus, please!\n\nJoin me in a mysterious bug case related to accessibility.\n\nVer\u00f3nica Ojeda, 4 min read\n\nPractical React & Redux \u00b7 Part 4\n\nThis is the final part of the React workshops series created by our team.\nLet's learn how to...\n\nDavid Morcillo, 12 min read\n\nPractical React & Redux \u00b7 Part 3\n\nThis is the third part of the React workshop series created by our team. Let's\nlearn about h...\n\nDavid Morcillo, 15 min read\n\nBlog\n\nCase Studies\n\nConferences\n\nDribbble GitHub YouTube\n\nLinkedIn Twitter\n\nPrivacy Policy Terms and Conditions\n\n\u00a9 2021 Codegram. All Rights Reserved.\n\nMade remotely with from Almer\u00eda, Andalusia.\n\n", "frontpage": true}
