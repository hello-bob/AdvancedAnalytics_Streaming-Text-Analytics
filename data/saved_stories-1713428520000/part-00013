{"aid": "40072053", "title": "Badspreadsheet", "url": "https://github.com/adam-james-v/badspreadsheet", "domain": "github.com/adam-james-v", "votes": 1, "user": "TheFreim", "posted_at": "2024-04-18 01:29:25", "comments": 0, "source_title": "GitHub - adam-james-v/badspreadsheet: A Clojure Spreadsheet for building design tools.", "source_text": "GitHub - adam-james-v/badspreadsheet: A Clojure Spreadsheet for building\ndesign tools.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nadam-james-v / badspreadsheet Public\n\n  * Notifications\n  * Fork 0\n  * Star 47\n\nA Clojure Spreadsheet for building design tools.\n\n### License\n\nMIT license\n\n47 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# adam-james-v/badspreadsheet\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n1 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nadam-james-vAdd instructions for running from sourceFeb 27, 202454e9818 \u00b7 Feb\n27, 2024Feb 27, 2024\n\n## History\n\n9 Commits  \n  \n### docs/explanations\n\n|\n\n### docs/explanations\n\n| Update pressing-enter.md| Jan 16, 2024  \n  \n### resources\n\n|\n\n### resources\n\n| Couple fixes given feedback. svg-clj uses github not a local lib| Jan 16,\n2024  \n  \n### src/badspreadsheet\n\n|\n\n### src/badspreadsheet\n\n| Couple fixes given feedback. svg-clj uses github not a local lib| Jan 16,\n2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial Commit! How exciting \ud83c\udf89| Jan 10, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial Commit! How exciting \ud83c\udf89| Jan 10, 2024  \n  \n### build.clj\n\n|\n\n### build.clj\n\n| Initial Commit! How exciting \ud83c\udf89| Jan 10, 2024  \n  \n### deps.edn\n\n|\n\n### deps.edn\n\n| Couple fixes given feedback. svg-clj uses github not a local lib| Jan 16,\n2024  \n  \n### out.edn\n\n|\n\n### out.edn\n\n| Couple fixes given feedback. svg-clj uses github not a local lib| Jan 16,\n2024  \n  \n### readme.md\n\n|\n\n### readme.md\n\n| Add instructions for running from source| Feb 27, 2024  \n  \n## Repository files navigation\n\n# badspreadsheet\n\nWarning This is a prototype, so please set your expectations accordingly.\n\nA Clojure Spreadsheet for building design tools.\n\nBadspreadsheet is an experimental tool that I've built to help make little CAD\ntools and design explorations on a 2D canvas.\n\nI'm making this prototype open to let others try it out and to explore some\nquestions, figure out how to fix obvious design and usage issues, and to see\nwhat ideas other people might have.\n\n### Features\n\nCheck out these videos, which show things off nicely:\n\n  * Code Cells: Write Clojure code directly in spreadsheet cells and execute them on-the-fly.\n  * Cell Linking: Easily link cells together, creating complex dependencies and calculations.\n  * Rendering: Renders Strings as Markdown, Gives numerical values usable inputs, and Renders Hiccup!\n\n## Getting Started\n\nIf you're interested in just quickly playing around with the prototype, I'd\nrecommend downloading the jar and running it that way. It's also not too hard\nto clone the repository and run the code yourself if you're used to using\nClojure's CLI tool. Finally, if you're a Clojure dev, it could be fun to use\nbadspreadsheet as a library and really poke around.\n\n### Run the Jar\n\nOtherwise, you can\n\n  * download the jar.\n  * cd into that directory and\n  * run the build with java -jar target/badspreadsheet-prototype.jar. This will start the server and print the port it's using.\n\n    * NOTE: if you're getting an error referring to out.edn, you need the out.edn file at the root of this repo. in the same folder you run the jar from!\n  * Head to localhost:THE_PORT_SPECIFIED and get creative!\n\n### Run from Source\n\nIf you want to run from source you can:\n\n  * git clone https://github.com/adam-james-v/badspreadsheet.git\n  * cd badspreadsheet\n  * clojure -M -m badspreadsheet.main which should run the main function\n  * Head to localhost:THE_PORT_SPECIFIED and have fun!\n\n### Build from Source\n\nIf you're comfortable with Clojure, you can do the following:\n\n  * git clone https://github.com/adam-james-v/badspreadsheet.git\n  * cd badspreadsheet\n  * clojure -T:build uber which should build the uberjar target/badspreadsheet-prototype.jar\n  * run SDFx with java -jar target/badspreadsheet-prototype.jar. This command will start the server and print the port it's using.\n  * Head to localhost:THE_PORT_SPECIFIED and have fun!\n\n### As a Library\n\nTo use badspreadsheet as a library, you can add this to your deps.edn:\n\n    \n    \n    {badspreadsheet/badspreadsheet {:git/url \"https://github.com/adam-james-v/badspreadsheet\" :git/sha \"GET LATEST\"}}\n\n## Acknowledgements\n\n(Shall surely add more as I go)\n\n  * Stathis Sideris and the cells namespace in his datacore code: (https://github.com/stathissideris/datacore/blob/master/src/datacore/cells.clj)\n\n## Open Questions and Known Problems\n\n  * 'State smearing' -> I have state held in the cells and also in the spreadsheet namespace.\n  * The canvas is not pannable and thus isn't actually infinite yet\n  * moving and sizing cells is cumbersome and only possible with the keyboard\n  * Cell and Entity dependencies have no protection from cycles\n  * Slow cells can hang the whole app\n  * It's hard to tell which cells are linked. There's no visual for this.\n  * if you 'scoop' multiple cells inside the cursor at once it's hard/hacky to separate them again\n  * errors should be communicated to the user in the UI. Cleanly\n  * the UI should probably never care about the current pending status of any slow calculations (it should stay responsive)\n  * the codemirror editor needs to be better. Eg. Paredit and paren match highlighting.\n  * Linking cells could have some more UI affordances (eg, clicking another cell inserts its ref)\n  * Location cell refs don't work properly yet\n  * What's the right way to store 'entities'? I have a map of entities with integer keys, but I often want to do 'spatial queries' where I get a cell at a location or all cells in a window. What makes sense in terms of data structure here?\n  * Things get kinda weird when you do def or defn in a cell and use that fn in other cells. It sort of works but if you update the definition it doesn't push changes to the cells (the cells don't know that they're actually dependent on other cells).\n  * fast UI changes can 'flood' and maybe cause out-of-order weirdness, which I think relates to:\n  * state computations and UI updates are coupled, it feels like the UI should update consistently at 60+ FPS, no matter what the state. That is, even if a long computation is happening, the UI should still render fine and never care about any state other than the most recent state.\n  * ergonomics of requiring libraries in the Spreadsheet's namespace is not great\n  * In fact, I haven't been careful to set up a proper namespace or execution context for the spreadsheet: I think it's actually executing in clojure.core\n  * the js used to make the frontend stuff work is... messy. I've considered figuring out Squint as a way to write js in a lisp, in the backend, but it's half (quarter) baked at best so far. It might make sense to just use javascript directly and just go ask people about the best practices there. Not everything needs to be a Clojure-like \ud83e\udd14.\n  * the UI affordances around 'flipping' a cell are not visually clear.\n  * the keyboard shortcuts aren't intuitive enough I think. I often flip cards when I mean to move them, for example.\n  * cell visibility isn't great.\n  * cell id 'chips' get in the way when you're editing small cells\n\n## Usage\n\nAfter starting badspreadsheet, you can open your browser to the proper\nlocalhost port. There are a few cells with explanations for usage there. Here\nare the tables as well:\n\n### Keyboard Shortcuts\n\nKeys| Action  \n---|---  \nEnter| Creates a new entity when cursor is over an empty space.  \nCtrl-Arrows| Move the highlighted cell(s).  \nShift-Up/Down Arrows| Cycles the active cell through editor, value, control,\nor off display modes.  \nCtrl-Shift-Arrows| Resize the highlighted cell.  \nCtrl-s| Save the Entities to 'out.edn'  \nCtrl-d| Delete the highlighted entity. Careful, there's no undo yet!  \n  \n### Sheet Functions\n\nFunction| Behaviour  \n---|---  \n(c# id)| Link the cell id to the cell you're currently editing. Gets its value\nand re-renders whenever the referenced cell updates  \n(l# [x y])| Link the cell at the specified absolute location to the cell\nyou're currently editing. Warning: this doesn't work perfectly yet.  \n(t# ms)| Create a cell whose value increases every number of milliseconds ms  \n  \n## Contributing\n\nbadspreadsheet is in its prototype phase, and contributions are welcome! If\nyou're interested in contributing, open an issue!\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for\ndetails.\n\n## About\n\nA Clojure Spreadsheet for building design tools.\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n47 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\n1 tags\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Clojure 65.5%\n  * JavaScript 33.4%\n  * CSS 1.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
