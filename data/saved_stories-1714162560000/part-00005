{"aid": "40169256", "title": "I made a new backplane for my Terramaster F2-221 NAS", "url": "https://codedbearder.com/posts/f3-backplane/", "domain": "codedbearder.com", "votes": 1, "user": "granra", "posted_at": "2024-04-26 13:39:58", "comments": 0, "source_title": "I made a new backplane for my Terramaster F2-221 NAS | codedbearder", "source_text": "I made a new backplane for my Terramaster F2-221 NAS | codedbearder\n\n# codedbeader\n\n# I made a new backplane for my Terramaster F2-221 NAS\n\nPosted on Apr 26, 2024\n\n#nas #hardware #pcb\n\nIn a previous post I wrote about how I setup NixOS on my Terramaster F2-221\ninstead of using the included TOS provided by Terramaster. This in itself was\nquite simple as the NAS contains Intel J3355, a standard X86_64 CPU. However\nthe NAS only has 2 SATA connectors, both of which were being used for the 4TB\nhard drives, so I had to resort to plugging in an external USB SSD for storing\nthe operating system. This quickly became a little annoying to make room for\nthis external SSD behind the NAS and make sure it\u2019s always plugged in when\nsomething is moved around in the shelf where I keep it, so I wanted to see if\nI could come up with a better solution.\n\nEssentially what I wanted was this:\n\n## Researching my options\n\nFirst I need to get out of the way the fact that there is an internal USB\nconnector on the motherboard that contains a USB stick that ships with the\nNAS, that is used for downloading and bootstrapping TOS onto the storage\ndrives. This USB header is only USB 2.0 though so it\u2019s not an option for this\npurpose.\n\nBack when I first got the NAS I did add an extra RAM stick in the single RAM\nslot on the motherboard and I remembered seeing a PCIe (PCI Express) x4\nconnector on the motherboard that the backplane PCB connects into. As I\nrecently got interested in designing PCBs I thought it might be interesting to\nsee if I could come up with something, but when inspecting the existing\nbackplane I noticed that there was no IC (integrated circuit) on there\nconverting PCIe to SATA, instead it only contained some power circuitry and\nthe SATA connectors were wired directly to the PCIe edge connector. This was a\nnon-standard pinout and not PCIe at all, no room for expansion! But hey! This\ngeneration of NASes from Terramaster also include 4 and 5-bay units, how do\nthey do that? Looking at the specs for Intel J3355 I could see that the CPU\nhas 2 SATA ports and 6 lanes of PCIe gen 2 which would mean that the other\nmodels must be utilizing those PCIe lanes somehow to expand the number of SATA\nports.\n\nWhat followed was days of me scouring image search on duckduckgo and google to\ntry to find high resolution pictures of the backplane PCB from either the 4 or\n5-bay model.\n\n## Reverse engineering\n\nI found some great pictures from this review of Terramaster F5-422 and from\nthose pictures I could identify that they\u2019re using 2 ASMedia ASM1061 ICs to\nget the SATA port count from 2 to 5. After some research I found out that\nASM1061 is a 1-lane PCIe gen 2 SATA controller with 2 SATA ports, the first\none is wired to port 3 and 4 on the backplane and the second one is wired to\nport 5 only. This was potentially good news for me as this means that the PCIe\nconnector on the motherboard should include 2 PCIe x1 interfaces and looking\nat the back of the motherboard on my Terramaster F2-221 I could see that the\npins that seemed to carry the PCIe traces on the F5-422 backplane were indeed\nwired up and it makes sense that they didn\u2019t want to have to manufacture\ndifferent motherboards for the different models.\n\nQuite a few differential pairs can be seen in this picture.\n\n### PCI Express\n\nSome of the pictures were still a bit low resolution and I had to zoom in a\nlot and follow blurry traces but I could verify that the traces for the first\n2 SATA ports matched the pins on my backplane PCB. Thankfully I could find a\ndatasheet for ASM1061, and therefor had a pinout for the IC, so I knew which\npins were the PCIe lines but all the differential pairs near the ICs and the\nPCIe connector went to vias and were then routed on internal layers which made\nit impossible for me to know for sure which differential pair was TX, RX and\nREFCLK. I could however identify that one pin on the PCIe connector was\nconnected to PERST# on the ASM1061 ICs, that\u2019s something!\n\nDuring this time I did some very extensive research into PCI Express routing\nand how it works and got a lot of small tidbits from here and there online and\nthere was especially one little information that helped me with identifying\nthe different differential pairs. That is that traditionally the TX\ndifferential pair should have coupling capacitors, meaning that that the\ndifferential pair that connects to the TX pins on the ASM1061 should have\ncoupling capacitors on the backplane, but that is the RX differential pair\nfrom the perspective of the CPU (and therefor the motherboard) and the\ndifferential pair connecting to the RX pins on the ASM1061 IC should then have\ncoupling capacitors on the motherboard side of the PCIe connector. Then\nlooking at the pictures of the backplane PCB for F5-422 and the back of my\nmotherboard I can identify the pins that have these coupling capacitors on the\ntraces. After that only the REFCLK remained and through guessing I was fairly\nconfident that the closest differential pair to the TX and RX of each PCIe x1\ninterface was the REFCLK for that interface.\n\nAnd that left me with this pinout:\n\nB| A  \n---|---  \n1| 12V| ?  \n2| 12V| 12V  \n3| 12V| 12V  \n4| GND| GND  \n5| SATA1 A+| SATA1 B+  \n6| SATA1 A-| SATA1 B-  \n7| GND| NC  \n8| 5V| 5V  \n9| 5V| 5V  \n10| ?| 5V  \n11| ?| ?  \nNotch  \n12| 3.3V| GND  \n13| GND| 3.3V  \n14| SATA2 A+| 3.3V  \n15| SATA2 A-| GND  \n16| GND| SATA2 B+  \n17| PERST#| SATA2 B-  \n18| GND| GND  \n19| PCIe1 TX+| NC  \n20| PCIe1 TX-| GND  \n21| GND| PCIe1 RX+  \n22| GND| PCIe1 RX-  \n23| PCIe1 REFCLK+| GND  \n24| PCIe1 REFCLK-| GND  \n25| GND| PCIe2 RX+ ^1  \n26| GND| PCIe2 RX- ^1  \n27| PCIe2 TX+ ^1| GND  \n28| PCIe2 TX- ^1| GND  \n29| GND| PCIe2 REFCLK+ ^1  \n30| ?| PCIe2 REFCLK- ^1  \n31| ?| GND  \n32| GND| ?  \n  \nAfter having figured out this pinout I roughly verified the pinout of PCIe1 by\nbringing a picture of the F5-422 backplane into Kicad and routing the external\ntraces to the vias that I can see and then attempt to route them on an\ninternal layer, then assume I was incorrect in my pinout and attempt to route\ndifferent combinations. My initial guess was the one that was easiest to route\nbetween the vias so I was fairly (-ish) confident in that I was correct.\n\n> You may also have noticed that some of the pins are marked ?. Most of these\n> pins were not connected on my backplane and/or I could not figure out where\n> they were routed to as those were also mostly routed on internal layers.\n\n### Power circuits\n\nAs stated earlier, there are no ICs on the F2-221\u2019s backplane that handle any\nPCIe signals, but one side of the PCB is full of components. After taking\nclose-up pictures of the PCB so that I could identify the components and see\nwhere the traces go between them I recreated the schematic in Kicad. This\ncircuit consisted of mostly mostfets, diodes, resistors and capacitors. Now, I\nam no electrical engineer but after staring at the schematic, trying to break\nit apart into chunks to make sense of it and doing a lot of research online I\nsomehow figured that these were load switches with a slow starter, one for\neach power rail on each SATA port (meaning 4 load switches on F2-221 and 10 on\nthe F5-422). One of the ground pins (P4) on the SATA connectors was also used\nas the enable pin for these load switches, as it\u2019s pulled to ground by the\nhard drive when connected. I figured this was done in combination with the\nslow start circuit to make hot-plugging the hard drives safe by preventing\nsparking across the connector and the drive due to the high initial inrush\ncurrent.\n\nNot being too eager to solder all these discrete components on my backplane\nPCB, I decided to find a complete integrated load switch IC with a built-in\nslow starter and finally went with the onsemi NCP45521-L.\n\n## Prototype\n\nAt this point I had spent a lot of time figuring out the pinout of the\nconnector, and especially trying to figure out the purpose of the different\nunknown pins on the connector. And I figured it was time to just create a\nprototype PCB by routing what I did know and then breaking most of the other\npins to test points that I can probe and try to figure out the purpose of.\n\n### SSD selection\n\nSince beginning this process I had mostly been concerned with what would be\npossible and not what kind of boot SSD I wanted. Initially I wondered if I\ncould add a SATA port by incorporating the same ASM1061 IC and then taping a\nSATA SSD somewhere inside the case. Then I had the brilliant obvious idea of\ntrying to fit an M.2 connector on there, and as luck would have it there was\njust enough room for the connector between the mounting rails that the\nbackplane screws into, and by just enough I mean there\u2019s less than a\nmillimeter on each side!\n\nAs mentioned earlier, the CPU only has 2 SATA ports built-in and they are both\nbeing used for the 2 hard drives in the NAS. To get more SATA ports we\u2019d need\nto get a controller that can convert some protocol into SATA, e.g. in external\nhard drive enclosures there is a controller that can communicate with the host\nover USB and the hard drive or SSD over SATA, and as I have 1 lane of PCIe I\ncould use the same ASM1061 as Terramaster uses on the F5-422 to get 2 extra\nSATA ports and wire it up to an M or B-key M.2 slot for a SATA M.2 SSD. The\nbiggest problem with this approach is that I can\u2019t just buy an ASM1061 and\nwould instead need to buy a whole PCIe card containing an ASM1061 and extract\nthe IC using a hot air station.\n\nNVMe on the other hand is PCIe and no extra controller is needed, just wire\nthe PCIe lines directly to the M-key M.2 slot and insert an SSD. This makes\nthe PCB routing much simpler and costs less as we don\u2019t need to source any\nextra controller and there is more options for NVMe SSDs than SATA M.2\navailable. NVMe SSDs generally have 4 lanes of PCIe gen 3 or higher so in a\nway we\u2019re \u201cwasting\u201d 3 lanes and capping the 1 lane we do have to gen 2 speeds\nwhich in the end will not be faster that SATA speeds, but even taking that\ninto account it makes no sense to go with anything else as it\u2019s cheaper and\nsimpler for our use case. I ended up grabbing a Patriot P300 128GB for only\n\u20ac14.90 locally, that\u2019s cheaper than I could find a PCIe card with an ASM1061\nIC.\n\nI did however have some concern with if the BIOS would support booting\ndirectly from an NVMe drive, but then decided I would be ok with having an\ninternal USB 2.0 usb stick to store the boot partition in the worst case.\n\n### Designing the prototype PCB\n\nEven though I was creating my own PCB I was constrained with the mounting\nhardware that attaches the backplane to the case. Screw holes had to be\npositioned quite strictly in relation to the PCIe edge connector and the PCB\nhad some restrictions for size and shouldn\u2019t restrict airflow too much. For\nthose reasons, this prototype was also important for verifying that everything\nfits nicely in the case.\n\nI first measured all different parts of the PCB using a ruler and calipers and\nthen took a picture of the PCB as straight on as I possibly could and then\ntried to remove any lens distortion before importing the picture into Kicad\nand start positioning the PCIe connector, screw holes and the outline from the\nmeasurements and checking alignment with the picture. Then I made the\nschematic for the different components and layed them out on the PCB as best I\ncould, but I wasn\u2019t too careful about placement as I knew this was only a\ntemporary prototype and added testpoints for various pins. I discovered the\n3.3V rail on the PCIe connector pretty late in this process and therefor there\nis a buck converter taking 5V and converting it to 3.3V for the NVMe SSD.\n\nI sent my design to JLCPCB, ordered a 4-layer PCB and a couple of weeks later\nI had this!\n\nIt\u2019s a bit of a weird shape because of the buck converter on the top right but\nlook at how perfectly the SSD fits!\n\n### Testing the prototype PCB\n\nThis was my first time soldering DFN packages and they\u2019re tiny! Because I\ndon\u2019t have a microscope or anything to visually inspect my soldering and these\ncomponents were mostly just handling power anyway I just checked for shorts\nbetween power and ground and tried to take close-ups using my phone to see if\nI could spot any shorts. The technique that ended up working well for me to\nsolder on these DFN packages without a stencil is to put what can only be\ndescribed as way too much solder paste on the pads and then pushing the IC in\nthe pool of solder, when the solder melts from the heat of my hot air station\nthe IC will float on top and then I push down on it with tweezers and all\nexcess solder will squeeze out and bead up, hopefully landing somewhere on the\nsolder mask, where I can pick it up later once it\u2019s solid.\n\nAfter a few attempts of successfully soldering all the ICs and the pins of the\nM.2 connector and actually plugging it into the motherboard, I booted it and\nthere it was in the list of boot options, Patriot P300 128GB! It works! And I\ncan boot from it directly!\n\nMy main concern before getting this prototype was that I still hadn\u2019t\nidentified where to get the CLKREQ line for PCIe1 and without it there\nwouldn\u2019t be any reference clock (REFCLK) active. When wiring up M.2 NVMe SSDs,\nthe CLKREQ line is usually pulled high using a resistor and then wired to the\nM.2 connector and the SSD will pull it low to request the reference clock when\nneeded. This is done to save power and is part of PCIe Active State Power\nManagement (ASPM). Luckily for me it seems that this line is permanently\npulled low somewhere on the motherboard and may or may not be one of the pins\nbroken out on the PCIe connector, but it doesn\u2019t really matter as I don\u2019t\nreally need it! Yes, ASPM will not work but this is a boot drive for an always\non server so who cares!\n\nI also plugged in the hard drives and not as surprisingly they worked fine\ntoo!\n\nSo the prototype that I made as a last resort to be able to probe and debug\nactually just worked perfectly already and I don\u2019t care too much what the\nunidentified pins do anymore. If anyone does know or has a F5-422 and a multi-\nmeter to figure it out, please let me know, but eh! \u0304\\\\_(\u30c4)_/ \u0304\n\n## Moving on to V1.0\n\nEven though the prototype worked perfectly fine, that being the end of the\nstory with all the test points and having it sitting slightly crooked in the\ncase (not to mention GREEN!), wasn\u2019t quite as satisfying as making a polished\nand final revision. There isn\u2019t much more to say about this one, I removed the\nbuck converter and wired the M.2 connector directly to the 3.3V rail on the\nPCIe connector, adjusted positioning slightly to (hopefully) fix the slight\ncrookedness of the prototype, removed the test points and slapped on a logo! I\ncalled it F3 Backplane because, you know, F2+1 :D\n\nAfter ordering this new version from JLCPCB again and waiting another few\nweeks I received the final version of PCBs, soldered it up and tested it in\nthe NAS and not so surprisingly this time it worked just as well as the\nprototype. I\u2019ve done a full btrfs scrub of the hard drives to see if any\nerrors arise, which they didn\u2019t and I\u2019ve been running the system from the NVMe\nSSD for a few weeks now without any hiccups.\n\nSo you don\u2019t need to scroll up again here\u2019s a picture of the final version!\n\nhdparm test results for the NVMe SSD:\n\n    \n    \n    /dev/nvme0n1: Timing cached reads: 4554 MB in 2.00 seconds = 2279.68 MB/sec Timing buffered disk reads: 1222 MB in 3.00 seconds = 407.22 MB/sec\n\nThis isn\u2019t very fast for an NVMe SSD but this is expected as it\u2019s only using 1\nlane of PCIe gen 2. This is however totally fine for my use case.\n\n## Conclusion\n\nAll in all getting to this point was a lot of work and I learned a ton and I\u2019m\nvery happy with the results. I have made the Kicad project available on GitHub\nand hopefully it is useful to someone else too.\n\n  1. I have never verified PCIe2 pinout. \u21a9\ufe0e \u21a9\ufe0e \u21a9\ufe0e \u21a9\ufe0e \u21a9\ufe0e \u21a9\ufe0e\n\nDiscuss on Hacker News or Reddit\n\n* * *\n\n\u00a9 Arnar Gauti Ingason\n\n", "frontpage": false}
