{"aid": "40259990", "title": "How big is the Flutter team?", "url": "https://ln.hixie.ch/?start=1714717681", "domain": "hixie.ch", "votes": 2, "user": "cpeterso", "posted_at": "2024-05-04 20:13:07", "comments": 0, "source_title": "Hixie's Natural Log", "source_text": "Hixie's Natural Log\n\n# log_e.hixie.ch\n\n## Hixie's Natural Log\n\n### 2024-05-03 06:28 UTC How big is the Flutter team?\n\nI often get asked how many people contribute to Flutter.\n\nIt's a hard question to answer because \"contribute\" is a very vague concept.\nThere's tens of thousands of packages on pub.dev, all of which are written by\ncontributors to the community. There's over 100,000 of issues filed in our\nissue database, filed by more than 35,000 people over the years (the exact\nnumber is hard to pin down because people sometimes delete their GitHub\naccounts; about 700 issues have been filed by people who have since deleted\ntheir account). Many more people still have used the \"thumbs-up\" reaction to\nindicate that an issue matters to them, with almost 165,000 thumbs up from\nabout 45,000 people. All of these people are valuable contributors to Flutter.\n\nUsually, when pressed, people try to clarify by asking about \"the core team\".\nAgain though it's hard to say exactly what that means, but let's assume they\nmean \"people with commit access\". That is, people we trust enough to have\nadded to the GitHub repo as collaborators. This includes people who work on\nFlutter for companies like Google, Canonical, or Nevercode, and it includes\npeople like me who are self-employed and/or contribute to Flutter on a\nvolunteer basis. Currently that's about 280 people. So is that the answer?\nWell, no, not really. Some people have commit access but aren't active (maybe\nthey got access because of their employer, but were then reassigned to work on\nanother project, and the bureaucracy hasn't caught up with them yet \u2014 we only\naudit the membership occasionally because it's rather tedious to do). Some\npeople have been very active recently but don't have commit access (e.g.\nbecause they were just laid off and a bot automatically removed their access;\nthey might even resume working on Flutter in the future, as a volunteer or\nfunded by another company).\n\nSo what's the answer?\n\nI recently drilled down through our data to see if I could answer this. I will\ncaveat the following numbers by saying that this changes all the time. We\nadded a new team member just today (hi Nate!) who is not counted as a team\nmember in the following numbers because we collected the data a few weeks ago\n(it takes literally days to scrape all the data from GitHub, and then hours to\nexplore the resulting very large and very slow spreadsheet). Also, some of my\ndefinitions are a bit arbitrary, and slightly tweaking the limits would\nprobably change the numbers noticeably.\n\nFirst, I collected a list of everyone who has ever created an issue, commented\non an issue, put an emoji reaction on the first comment of an issue, or\nsubmitted a PR, excluding bots and people who deleted their GitHub account.\n(Actually Piinks did the actual data collection. Thanks!) I limited this to a\nsubset of the GitHub repos of the flutter org that is relatively inclusive but\ndoes not count everything (we have a lot of historical repositories and so\nforth). This finds about 94,357 people. (So there you go. The Flutter team is\nabout a hundred thousand people!)\n\nTo avoid padding the numbers with people who left the project long ago, and to\navoid counting \"drive-by\" contributors who came, did a bunch of work, and then\nleft, I then limited the data set to people who contributed over a period of\nmore than 180 days, and who last contributed sometime in 2024. Because of the\ndefinition of \"contributed\" described above, that means that someone who added\na thumbs-up to an issue in December 2020 and then filed an issue in January\n2024, and did nothing else, is included, but someone who submitted two PRs in\nMarch 2024 is not. Like I said, this is a bit arbitrary. Anyway, that leaves\n3,839 people, of which 182 currently have commit access, 27 once had commit\naccess but don't currently (these are mainly people who either got laid off\nrecently and had their commit access revoked by an automated process, or\npeople who were once team members, left, lost access from inactivity long ago,\nand then later came to comment on issues or file new issues \u2014 it's\nsurprisingly common for people who once worked on Flutter full time to stick\naround even when their employment changes), and about 3,627 people who have\nnever had commit access.\n\nOf those who have never had commit access, 2,407 have filed at least one issue\nor submitted at least one PR (accounting for a total of 12,383 issues and\n2,613 PRs). Of those, 341 have filed 5 to 9 issues (2,242 issues total), and\n296 have filed 10 or more issues in their lifetime (7,021 total issues).\nSimilarly, of the \"never had commit access\" cohort, 73 people have sent 5 to 9\npull requests in their lifetime (458 total PRs) and 47 have sent 10 or more\n(1,321 PRs total). (For context, 4,663 people have ever submitted a pull\nrequest, and 429 have ever submitted more than 10 PRs.)\n\nOf the people who currently have commit access, 98 people have submitted more\nthan one PR every 3 weeks on average since they first got involved (accounting\nfor 49,173 PRs), 75 people have closed at least one issue every 3 weeks\n(accounting for 48,490 total issue closures), of which 10 are not in the first\ngroup (mostly that's our triage team), and 150 people have commented at least\nonce every 3 weeks.\n\nA follow-up question a lot of people ask is \"do they all work for Google?\".\n\nThis is a surprisingly hard question to answer. There are a lot of weird edge\ncases. For example, one person worked on Flutter for a company that Google\nhired to work on Flutter, but then quit that company, asked for their commit\nprivileges to be removed, but continued to be active in the community. Several\npeople who have quit Google (such as myself), or been laid off by Google, have\ncontinued to be active in one sense or another (I think I submit more code to\nFlutter now than I did in my last year at Google).\n\nIt's also hard to answer because a lot more people at Google contribute to\nFlutter than just those on Google's Flutter team, and a lot of people on\nGoogle's Flutter team contribute in ways that don't show up on GitHub (e.g.\nproduct management, marketing, developer relations, internal tooling).\n\nOf the 98 people who have commit access, have been active for more than 180\ndays, have contributed at least once this year, and have submitted more than\none PR every 3 weeks on average for the entire time they've been contributing,\nI estimate (based on what I know of people's employment and so forth) that\nabout 85% are Googlers or somehow get their funding from Google, and about 15%\nare currently independent of Google. (This is by no means the entirety of the\nGoogle team contributing to Flutter; as I mentioned earlier, many folks at\nGoogle working on Flutter don't appear in these statistics.)\n\nI'm not sure what conclusion to draw from this; it's both more people than I\nexpected to see funded by Google, which is great, and fewer people that aren't\nfunded by Google, which is less great. On the other hand, it's still a\nsignificant number of non-Google-funded people.\n\nIs it enough? I think that really depends on what your goals are. I think if\nyour goal is for Flutter to be an order of magnitude better than other UI\nframeworks, then frankly no, it's not enough. There is a ton of work to be\ndone to get there. We know what it would take, but we don't have the people to\ndo it today. On the other hand if your goal is to be a great framework, on par\nwith others, then it's probably adequate. It would certainly be difficult to\ncontinue to be great with fewer people today. Of course, that may change as we\ncomplete big efforts, or as we take on new ones, or as the landscape changes,\nit's all hard to predict.\n\nThat said, I would love to see more direct contributions from non-Google\nsources, if for no other reason but to end this silly \"will Google cancel\nFlutter\" line of questioning that has followed the project since its\ninception. It's a dumb question. Flutter's an open source UI framework. It\nwill never die. It will become old and something else will shine brighter one\nday, just as happens with literally every other UI framework ever. That's just\nhow our industry works. There's no reason to believe that'll happen any time\nsoon though, and certainly no reason for it to happen earlier for Flutter than\nany other modern UI framework.\n\nPingbacks: 1\n\n### 2023-11-22 04:32 UTC The Future is Flutter\n\nDespite my departure from Google, I am not leaving Flutter \u2014 the great thing\nabout open source and open standards is that the product and the employer are\northogonal. I've had three employers in my career, and in all three cases when\nI left my employer I continued my job. With Netscape I was a member of the\nteam before my internship, during my internship, and after my internship. With\nOpera Software, I joined while working on standards, kept working on\nstandards, and left while working on the same standard that I then continued\nto work on at Google. So this is not a new thing for me.\n\nFlutter is amazingly successful. It's already the leading mobile app\ndevelopment framework, and I think we're close to having the table stakes\nrequired to make it the obvious default choice for desktop development as well\n(it's already there for some use cases). It's increasingly used in embedded\nscenarios. And Flutter is extremely well positioned to be the first truly\nusable Wasm framework as the web transitions to the more powerful, lower-level\nWasm-based model over the next few years.\n\nIn the coming month I will prepare our roadmap for 2024 (in consultation with\nthe rest of the team). For me personally, however, my focus will probably be\non fixing fun bugs, and on making progress on blankcanvas, my library for\nmaking it easy to build custom widget sets. I also expect I will be continuing\nto work on package:rfw, the UI-push library, as there has been increasing\ninterest from teams using Flutter and wanting ways to present custom\ninterfaces determined by the server at runtime without requiring the user to\ndownload an updated app.\n\nPingbacks: 1\n\n### 2023-11-22 04:29 UTC Reflecting on 18 years at Google\n\nI joined Google in October 2005, and handed in my resignation 18 years later.\nLast week was my last week at Google.\n\nI feel very lucky to have experienced the early post-IPO Google; unlike most\ncompanies, and contrary to the popular narrative, Googlers, from the junior\nengineer all the way to the C-suite, were genuinely good people who cared very\nmuch about doing the right thing. The oft-mocked \"don't be evil\" truly was the\nguiding principle of the company at the time (largely a reaction to\ncontemporaries like Microsoft whose operating procedures put profits far above\nthe best interests of customers and humanity as a whole).\n\nMany times I saw Google criticised for actions that were sincerely intended to\nbe good for society. Google Books, for example. Much of the criticism Google\nreceived around Chrome and Search, especially around supposed conflicts of\ninterest with Ads, was way off base (it's surprising how often coincidences\nand mistakes can appear malicious). I often saw privacy advocates argue\nagainst Google proposals in ways that were net harmful to users. Some of these\nfights have had lasting effects on the world at large; one of the most\nannoying is the prevalence of pointless cookie warnings we have to wade\nthrough today. I found it quite frustrating how teams would be legitimately\nactively pursuing ideas that would be good for the world, without prioritising\nshort-term Google interests, only to be met with cynicism in the court of\npublic opinion.\n\nCharlie's patio at Google, 2011. Image has been manipulated to remove\nindividuals.\n\nEarly Google was also an excellent place to work. Executives gave frank\nanswers on a weekly basis, or were candid about their inability to do so (e.g.\nfor legal reasons or because some topic was too sensitive to discuss broadly).\nEric Schmidt regularly walked the whole company through the discussions of the\nboard. The successes and failures of various products were presented more or\nless objectively, with successes celebrated and failures examined critically\nwith an eye to learning lessons rather than assigning blame. The company had a\nvision, and deviations from that vision were explained. Having experienced\nDilbert-level management during my internship at Netscape five years earlier,\nthe uniform competence of people at Google was very refreshing.\n\nFor my first nine years at Google I worked on HTML and related standards. My\nmandate was to do the best thing for the web, as whatever was good for the web\nwould be good for Google (I was explicitly told to ignore Google's interests).\nThis was a continuation of the work I started while at Opera Software. Google\nwas an excellent host for this effort. My team was nominally the open source\nteam at Google, but I was entirely autonomous (for which I owe thanks to Chris\nDiBona). Most of my work was done on a laptop from random buildings on\nGoogle's campus; entire years went by where I didn't use my assigned desk.\n\nIn time, exceptions to Google's cultural strengths developed. For example, as\nmuch as I enjoyed Vic Gundotra's enthusiasm (and his initial vision for\nGoogle+, which again was quite well defined and, if not necessarily uniformly\nappreciated, at least unambiguous), I felt less confident in his ability to\ngive clear answers when things were not going as well as hoped. He also\nstarted introducing silos to Google (e.g. locking down certain buildings to\njust the Google+ team), a distinct departure from the complete internal\ntransparency of early Google. Another example is the Android team (originally\nan acquisition), who never really fully acclimated to Google's culture.\nAndroid's work/life balance was unhealthy, the team was not as transparent as\nolder parts of Google, and the team focused on chasing the competition more\nthan solving real problems for users.\n\nMy last nine years were spent on Flutter. Some of my fondest memories of my\ntime at Google are of the early days of this effort. Flutter was one of the\nlast projects to come out of the old Google, part of a stable of ambitious\nexperiments started by Larry Page shortly before the creation of Alphabet. We\nessentially operated like a startup, discovering what we were building more\nthan designing it. The Flutter team was very much built out of the culture of\nyoung Google; for example we prioritised internal transparency, work/life\nbalance, and data-driven decision making (greatly helped by Tao Dong and his\nUXR team). We were radically open from the beginning, which made it easy for\nus to build a healthy open source project around the effort as well. Flutter\nwas also very lucky to have excellent leadership throughout the years, such as\nAdam Barth as founding tech lead, Tim Sneath as PM, and Todd Volkert as\nengineering manager.\n\nWe also didn't follow engineering best practices for the first few years. For\nexample we wrote no tests and had precious little documentation. This\nwhiteboard is what passed for a design doc for the core Widget, RenderObject,\nand dart:ui layers. This allowed us to move fast at first, but we paid for it\nlater.\n\nFlutter grew in a bubble, largely insulated from the changes Google was\nexperiencing at the same time. Google's culture eroded. Decisions went from\nbeing made for the benefit of users, to the benefit of Google, to the benefit\nof whoever was making the decision. Transparency evaporated. Where previously\nI would eagerly attend every company-wide meeting to learn what was happening,\nI found myself now able to predict the answers executives would give word for\nword. Today, I don't know anyone at Google who could explain what Google's\nvision is. Morale is at an all-time low. If you talk to therapists in the bay\narea, they will tell you all their Google clients are unhappy with Google.\n\nThen Google had layoffs. The layoffs were an unforced error driven by a short-\nsighted drive to ensure the stock price would keep growing quarter-to-quarter,\ninstead of following Google's erstwhile strategy of prioritising long-term\nsuccess even if that led to short-term losses (the very essence of \"don't be\nevil\"). The effects of layoffs are insidious. Whereas before people might\nfocus on the user, or at least their company, trusting that doing the right\nthing will eventually be rewarded even if it's not strictly part of their\nassigned duties, after a layoff people can no longer trust that their company\nhas their back, and they dramatically dial back any risk-taking.\nResponsibilities are guarded jealously. Knowledge is hoarded, because making\noneself irreplaceable is the only lever one has to protect oneself from future\nlayoffs. I see all of this at Google now. The lack of trust in management is\nreflected by management no longer showing trust in the employees either, in\nthe form of inane corporate policies. In 2004, Google's founders famously told\nWall Street \"Google is not a conventional company. We do not intend to become\none.\" but that Google is no more.\n\nMuch of these problems with Google today stem from a lack of visionary\nleadership from Sundar Pichai, and his clear lack of interest in maintaining\nthe cultural norms of early Google. A symptom of this is the spreading\ncontingent of inept middle management. Take Jeanine Banks, for example, who\nmanages the department that somewhat arbitrarily contains (among other things)\nFlutter, Dart, Go, and Firebase. Her department nominally has a strategy, but\nI couldn't leak it if I wanted to; I literally could never figure out what any\npart of it meant, even after years of hearing her describe it. Her\nunderstanding of what her teams are doing is minimal at best; she frequently\nmakes requests that are completely incoherent and inapplicable. She treats\nengineers as commodities in a way that is dehumanising, reassigning people\nagainst their will in ways that have no relationship to their skill set. She\nis completely unable to receive constructive feedback (as in, she literally\ndoesn't even acknowledge it). I hear other teams (who have leaders more\npolitically savvy than I) have learned how to \"handle\" her to keep her off\ntheir backs, feeding her just the right information at the right time. Having\nseen Google at its best, I find this new reality depressing.\n\nThere are still great people at Google. I've had the privilege to work with\namazing people on the Flutter team such as JaYoung Lee, Kate Lovett, Kevin\nChisholm, Zoey Fan, Dan Field, and dozens more (sorry folks, I know I should\njust name all of you but there's too many!). In recent years I started\noffering career advice to anyone at Google and through that met many great\nfolks from around the company. It's definitely not too late to heal Google. It\nwould require some shake-up at the top of the company, moving the centre of\npower from the CFO's office back to someone with a clear long-term vision for\nhow to use Google's extensive resources to deliver value to users. I still\nbelieve there's lots of mileage to be had from Google's mission statement (\"to\norganize the world\u2019s information and make it universally accessible and\nuseful\"). Someone who wanted to lead Google into the next twenty years,\nmaximising the good to humanity and disregarding the short-term fluctuations\nin stock price, could channel the skills and passion of Google into truly\ngreat achievements.\n\nI do think the clock is ticking, though. The deterioration of Google's culture\nwill eventually become irreversible, because the kinds of people whom you need\nto act as moral compass are the same kinds of people who don't join an\norganisation without a moral compass.\n\nPingbacks: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\n\n### 2023-09-29 19:03 UTC Meeting philosophy\n\nDecline meetings aggressively. Always try to resolve issues by e-mail or chat\nfirst if possible. Decline any meeting without an explicit agenda (I make\nexceptions for my immediate manager). Decline any meeting where the agenda\ndoesn't seem relevant to your work. Decline any recurring meeting with more\nthan one other person. Keep track of how productive recurring meetings are\nbeing. If they're not productive, cancel them. If they're only occasionally\nproductive, reduce the frequency. End meetings promptly once the agenda is\nresolved. Always leave a meeting when it reaches the end of its scheduled\ntime. Never start a meeting late. If people are missing, start on time anyway.\nThis is especially true for any meeting with large groups of people. Have a\nhard out every day, stop working at that time. Create fake buffer meetings so\nthat you've got guaranteed breaks. Decline meetings that conflict with your\nbreaks unless the person has explicitly reached out first. Aggressively defrag\nyour calendar to make it look like what you want.\n\nPingbacks: 1\n\n### 2023-08-11 19:05 UTC The Spectrum of Openness\n\n\"Open Source\" is a broad spectrum, with various axes. The following is an\nattempt to describe various ways to look at openness to aid project leaders in\ndetermining what they want their project to look like. I originally wrote this\nfor my colleagues at Google, but the concepts apply widely and I figured they\nmight be of use for others.\n\nIn practice, every project is a unique snowflake and there are exceptions to\nevery rule. A project can be proprietary but use and contribute back to some\nopen source library. An open source project can have undocumented proprietary\nprotocols. A team can intend to fall in one category, but by their actions\nfall in another. The descriptions below should be seen merely as a high-level\ndescription of some possible ways projects can be configured, not as a\ncomprehensive guide to the taxonomy of openness. Additionally, the examples I\ngive below refer to the state of those products as of the time of writing. As\nprojects evolve, these may become less accurate.\n\n#### Interoperability (0-6)\n\nOne aspect of openness is how one's product interacts with others.\n\nFor the purposes of this section, APIs (Application Programming Interfaces),\nABIs (Application Binary Interfaces), formats, and protocols are considered\nequivalent. While they serve different roles in practice, the techniques used\nto limit or encourage their reuse are the same.\n\n##### 0\\. Proprietary with obfuscation\n\nThe most closed one can make one's protocols is to not document them publicly\nand design them to be actively hard to understand by reverse engineering.\nPatents and DRM may also be used to further restrict potential\ninteroperability by legal means in some jurisdictions.\n\nExamples: Kindle file format, most streaming music formats.\n\n##### 1\\. Proprietary\n\nMost protocols that are not intended for interoperability with other systems\nare undocumented (at least, not documented in a manner intended for public\nconsumption), but are otherwise not obfuscated, and a sufficiently motivated\nuser could reverse engineer the protocol and use it.\n\nExample: NTFS file system.\n\n##### 2\\. Licensed open standards\n\nOne can have entirely open specifications, but require payment (or other\nagreements) before the standard can be read or used, e.g. by the use of patent\nlicensing.\n\nExample: the H.264 video codec.\n\n##### 3\\. \"The Code Is The Standard\"\n\nSome projects do not document their protocols, but since their source code is\navailable, they are effectively defined by their implementation, bugs and all.\n\nExamples abound but since people rarely intend to be in this state calling out\nany specific project as being in this category tends to be controversial.\n\n##### 4\\. Public\n\nWhen it is desired that users create new products to interact with one's own,\none may publicly document one's protocols. There are varying levels of\ncompleteness to such documentation; for example, whether some aspects are kept\nproprietary, or whether the documentation includes details for error handling\nand future extensions.\n\nExamples: IntelliJ, Swift UI, SMB protocol.\n\n##### 5\\. Open standards\n\nThe ultimate openness one can present is to submit one's protocols to a\nstandards committee (or form a new one; the difference is largely symbolic).\nThis is useful when the intent is to create an entire ecosystem around one's\nproduct and protocols.\n\nExamples: the Internet's core protocols, the web.\n\n##### 6\\. Regulated standards\n\nIn the extreme, interoperability around some standards becomes so important\nthat government agencies get involved and the protocol becomes a matter of\nlaw.\n\nExamples: power grid standards.\n\n#### Source code license (0-7)\n\nIf software is provided in binary form (e.g. client applications) then\nsufficiently motivated users will be able to reverse engineer it, even if the\nsource code is not explicitly shared with the user. For the purposes of this\nsection, we are ignoring this and focusing on the access that users have to\nthe project's original source code.\n\n##### 0\\. Trade secret\n\nSome source code is so secret and so important to its owner that it gets legal\nprotection beyond copyright.\n\nExample: The most sensitive internals of particularly special proprietary\nsoftware products.\n\n##### 1\\. Proprietary\n\nThe default is for source code to be copyrighted. If one does not redistribute\nit, then that source code is entirely closed.\n\nExample: The source code for the UI parts of macOS.\n\n##### 2\\. Commercially licensed\n\nOne can license one's code for use by specific downstream users, without\nmaking it public. Typically this is done for money.\n\nExamples: Qt (in its closed-source form); Microsoft's sale of access to the\nWindows source code.\n\n##### 3\\. Source code that is incidentally visible\n\nOne can publish one's source code without licensing it (or licensing it using\na very restrictive license that essentially does not allow any use), typically\nas an incidental part of distributing one's application. This allows people to\nsee the code, but does not allow them to use it in their own projects unless\nthey negotiate a separate license with the distributor.\n\nExamples: JavaScript code in web sites that don't use a minifier or compiler;\nscript code in game data files.\n\n##### 4\\. Usage-restricted source-sharing\n\nOne can make one's source available under a license that allows some kinds of\nreuse by other parties but prevents others, such as commercial use, use by\nenterprises over a certain size, or use that competes with the original\ndeveloper. This can be done either by prohibiting undesired uses outright, or\nby nominally allowing them but only under onerous terms.\n\nExample: MongoDB.\n\n##### Open source licenses\n\nOne can license one's code for public use, and these licenses can vary in\ntheir terms.\n\nIt's important to notice that there are legally-sound open source licenses,\nand there are nonsense \"licenses\" that are the result of software engineers\nthinking that being a lawyer is easy. Talk to a lawyer before choosing a\nlicense. See the OSI's license page for an overview of the topic.\n\n###### 5\\. Restrictive\n\nThe most strict open source licenses significantly limit what one can do with\nthe source code. For example, they might require that downstream developers\nlicense their modifications and any linked code with the same license, or\nrequire that downstream developers license their software such that their\nusers can obtain their app's source code.\n\nExamples: GPL-licensed software, such as Linux or Emacs.\n\n###### 6\\. Reciprocal\n\nThese licenses apply the restrictive terms to the code in question (typically\na library) but not to code that uses it (such as an application that embeds\nthe library).\n\nExamples: MPL-licensed software, such as Firefox.\n\n###### 7\\. Permissive\n\nThe most liberal licenses require very little of downstream developers other\nthan the replication of the copyright notices in software that uses the\ncovered code (and in some cases not even that).\n\nExamples: Apache-licensed software, such as Android or Rust; BSD-licensed\nsoftware, such as Chromium or Flutter.\n\n#### Copyright management\n\nProjects that accept source code from more than one legal entity may wish to\nnavigate the issues of copyright assignment, liability, relicensing, and so\nforth. The usual tools for this are Contributor License Agreements (CLAs) and\nDeveloper Certificates of Origin (DCOs). Talk to a lawyer about these options.\n\n#### Development processes (0-8)\n\nSeparate from what one does with the protocols and the code, a separate choice\nis how to design and develop the code: where conversations happen, how people\nare added to the project, and so forth. This is sometimes called \"governance\".\n\nThe sections below apply equally to big projects as to one-person projects,\nbut are primarily focused on projects with multiple team members.\n\n##### 0\\. Proprietary development\n\nThe most closed projects have no public-facing development at all. All design,\nimplementation, and testing happens internally.\n\nExample: Google Search.\n\n##### 1\\. Proprietary development of open source software\n\nAs with proprietary software, all the design, implementation, and testing\nhappens internally. However, the source code is open source in some way, and\nis published periodically (e.g. in conjunction with a product release). This\nis often referred to as \"throwing the code over the wall\". No attempt is made\nto encourage public contributions. Patches may in some cases be taken (e.g. by\ne-mail).\n\nExamples: Sqlite, Postfix.\n\n##### 2\\. Proprietary development, limited-access betas\n\nA team can invite a closed set of unaffiliated users to test their software\nbefore launches.\n\nThis is a common model for commercial software.\n\n##### 3\\. Proprietary development, public betas\n\nA team with private development can solicit feedback from a public community\nby providing pre-release software for any user to test.\n\nThis is a common model for commercial software.\n\n##### 4\\. Public presence, private development\n\nA team with public tooling (e.g. bug databases, code repositories, code\nreviews, continuous integration), but that makes no attempt to accept public\ncontributions (code, suggestions, etc). Public bug reports may be accepted but\nthe development team typically does not engage with the bug reporters.\n\nSuch a team's communications channels are all or mostly internal. Commit\naccess is typically automatic for the team, and unavailable for anyone else.\n\nExamples: Many of Google's small open source projects, and many personal\nprojects on GitHub, fall in this category.\n\n##### 5\\. Public clique development\n\nA team with public tooling that nominally accepts public contributions, but\nwhere becoming an active and equal member of the team is in practice\ndiscouraged (new team members are explicitly recruited, and usually all work\nfor the same company). Friction points exist that reduce the likelihood of\ncontributions, for example, public tooling that is different from that\ntypically used by open source projects, official public channels that are not\ntypically frequented by the bulk of the team, lack of documentation or out of\ndate documentation (especially about how to contribute), most communications\nare held in private channels.\n\nThe team may engage with bug reporters on occasion, and may listen to\nsuggestions for project direction, but all decisions ultimately rest with the\ncore team.\n\nMany projects that try to make the jump from \"public presence, private\ndevelopment\" to \"public development, private governance\" end up in this state\nbecause they underestimate the effort required to successfully and\nproductively develop software in public. That said, this is a valid\ndevelopment model in its own right, especially for projects that need a strong\ndriving vision such as a programming language or an open source narrative\nvideo game.\n\nExamples abound but since people rarely intend to be in this state calling out\nany specific project as being in this category tends to be controversial.\n\n##### 6\\. Public development, private governance\n\nA team that works in public, with public design decisions, public meetings,\nand public chats, but whose core leadership is accountable to a single entity\nwhose primary purpose is not this project (e.g. a company). Typically such a\nproject is largely funded by that single entity as well, especially in terms\nof employing the most active contributors and marketing the project.\n\nSuch a team typically hopes that one day contributors with other affiliations\nwill be independently designing, implementing, reviewing, and landing code\nwithout oversight from the project leads beyond ensuring a broad alignment on\nstrategy. As such, it actively tries to differentiate between being a member\nof the development team, and being a member of the primary sponsoring\norganization. Such a team typically has publicly-visible documentation of its\nprocesses, governance, values, contributor access policies, etc.\n\nExample: Flutter.\n\n##### 7\\. Public development with an unelected but independent core team\n\nA project can be entirely open in its development, with a self-appointed core\nteam that does not answer to anyone but themselves. The term \"Benevolent\nDictator for Life\" (BDFL) is sometimes used to describe this model when the\ncore team is a single person (usually the project founder).\n\nIt can have the advantage of a strong vision unaffected by fleeting trends,\nbut can also have the disadvantage of the project not being responsive to\nimportant shifts in the environment.\n\nExamples: Linux.\n\n##### 8\\. Accountable independent public development\n\nUltimately, the most open a project can be is for it to have entirely\nindependent governance accountable to its community, e.g. a foundation with\ndemocratically elected core leaders.\n\nThis has all the advantages and disadvantages of democracy.\n\nExamples: Python, Kubernetes.\n\nPingbacks: 1 2\n\nHome - Index - RSS - Log In\n\nCarbon Neutral Hosting by DreamHost\n\n", "frontpage": false}
