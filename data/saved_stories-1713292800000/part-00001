{"aid": "40050976", "title": "A lightweight ORM library for Rust", "url": "https://github.com/njord-rs/njord", "domain": "github.com/njord-rs", "votes": 1, "user": "mjovanc", "posted_at": "2024-04-16 12:09:55", "comments": 0, "source_title": "GitHub - njord-rs/njord: A lightweight ORM library for Rust \u26f5", "source_text": "GitHub - njord-rs/njord: A lightweight ORM library for Rust \u26f5\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nnjord-rs / njord Public\n\n  * Notifications\n  * Fork 11\n  * Star 210\n\nA lightweight ORM library for Rust \u26f5\n\nnjord.rs\n\n### License\n\nGPL-3.0 license\n\n210 stars 11 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# njord-rs/njord\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n2 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nmjovancRemoving Option<f64>, will not be supported when defining Table\nstructs30fd3a9 \u00b7\n\n## History\n\n421 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Update dependabot.yml  \n  \n### .run\n\n|\n\n### .run\n\n| Adding more run configurations  \n  \n### njord\n\n|\n\n### njord\n\n| Removing Option<f64>, will not be supported when defining Table structs  \n  \n### njord_derive\n\n|\n\n### njord_derive\n\n| Bump proc-macro2 from 1.0.79 to 1.0.80 (#56)  \n  \n### njord_examples/sqlite\n\n|\n\n### njord_examples/sqlite\n\n| Bump reqwest from 0.11.27 to 0.12.3  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initializing sqlite project example  \n  \n### CODE_OF_CONDUCT.md\n\n|\n\n### CODE_OF_CONDUCT.md\n\n| Create CODE_OF_CONDUCT.md  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Create CONTRIBUTING.md  \n  \n### Cargo.lock\n\n|\n\n### Cargo.lock\n\n| Bump quote from 1.0.35 to 1.0.36 (#55)  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| Adding new workspace member  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Updating LICENSE and README  \n  \n### README.md\n\n|\n\n### README.md\n\n| Upgrading Rust 1.74 -> 1.77.1  \n  \n### SECURITY.md\n\n|\n\n### SECURITY.md\n\n| Updating SECURITY.md  \n  \n## Repository files navigation\n\n# Njord\n\nA lightweight and extensible ORM framework for Rust.\n\n## Table of Contents\n\n  * Supported Databases\n  * Getting Started\n\n    * Initializing a new project\n    * Add a schema file\n  * Usage\n\n    * SQlite\n\n      * Establish a connection\n      * Insert data\n      * Select data\n  * Getting Help\n  * Reporting Issues\n  * Contributing\n  * Code of Conduct\n  * Contributors\n  * License\n\n## Supported Databases\n\nDatabase| Support| Status  \n---|---|---  \nSQLite| \u2705| Currently supported.  \nPostgreSQL| \u274c| Not supported, help us implement it?  \nMySQL| \u274c| Not supported, help us implement it?  \nMariaDB| \u274c| Not supported, help us implement it?  \nOracle| \u274c| Not supported, help us implement it?  \nMSSQL| \u274c| Not supported, help us implement it?  \n  \n## Getting Started\n\n### Initializing a new project\n\nThe first thing we need to do is generate our project.\n\n    \n    \n    cargo new --bin njord_demo\n\nNow, let\u2019s add Njord to our dependencies. We\u2019re also going to use a tool\ncalled .env to manage our environment variables for us. We\u2019ll add it to our\ndependencies as well.\n\n    \n    \n    [dependencies] # The core APIs, including the Table trait. # using #[derive(Table)] to make njord work with structs # and enums defined in your crate. njord = { version = \"<version>\", features = [\"sqlite\"] } dotenvy = \"0.15\"\n\n### Add a schema file\n\nNow we are going to define our schema file that we will create under\nsrc/schema.rs. We will store basically our structs that will map against the\ndatabase.\n\n    \n    \n    #[derive(Table)] #[table_name = \"users\"] pub struct User { id: usize, username: String, email: String, address: String, } #[derive(Table)] #[table_name = \"categories\"] pub struct Category { id: usize, name: String, } #[derive(Table)] #[table_name = \"products\"] pub struct Product { id: usize, name: String, description: String, price: f64, stock_quantity: usize, category: Category, // one-to-one relationship discount: Option<f64>, } #[derive(Table)] #[table_name = \"orders\"] pub struct Order { id: usize, user: User, // one-to-one relationship products: Vec<Product>, // one-to-many relationship - populates from based on junction table (gets from macro attribute \"table_name\" and combines them for example, orders_products) total_cost: f64, }\n\nNow that we have that in place, we need to create the SQL for setting this up\nin the database and execute it.\n\n    \n    \n    -- users table CREATE TABLE users ( id INTEGER PRIMARY KEY, username TEXT NOT NULL, email TEXT NOT NULL, address TEXT NOT NULL ); -- products table CREATE TABLE products ( id INTEGER PRIMARY KEY, name TEXT NOT NULL, description TEXT NOT NULL, price REAL NOT NULL, stock_quantity INTEGER NOT NULL, category INTEGER REFERENCES categories(id) ); -- orders table CREATE TABLE orders ( id INTEGER PRIMARY KEY, user_id INTEGER REFERENCES users(id), total_cost REAL NOT NULL ); -- order_products table CREATE TABLE order_products ( order_id INTEGER REFERENCES orders(id), product_id INTEGER REFERENCES products(id), PRIMARY KEY (order_id, product_id) );\n\n## Usage\n\nSo how can we establish a connection and actually select or insert data to our\ndatabase? Let's go through it. Note that these examples might be outdated, so\ndont treat it as a source of truth.\n\n### SQlite\n\n#### Establish a connection\n\nTo establish a connection we first need to call the sqlite::open() function\nand use it with a match statement.\n\n    \n    \n    fn main () { let db_name = \"njord.db\"; let db_path = Path::new(&db_name); match sqlite::open(db_path) { Ok(conn) => { println!(\"Database opened successfully!\"); // additional logic when we are connected... } Err(err) => eprintln!(\"Error opening the database: {}\", err), } }\n\n#### Insert data\n\n    \n    \n    fn main () { let db_name = \"njord.db\"; let db_path = Path::new(&db_name); let user = User { username: String::from(\"john_doe\"), email: String::from(\"john@example.com\"), address: String::from(\"123 Main St\"), }; match sqlite::open(db_path) { Ok(conn) => { println!(\"Database opened successfully!\"); let result = sqlite::insert(conn, &user); assert!(result.is_ok()); } Err(err) => eprintln!(\"Error opening the database: {}\", err), } }\n\n#### Select data\n\n    \n    \n    use njord::table::Table; use njord_derive::Table; mod schema; use schema::User; fn main () { let db_name = \"njord.db\"; let db_path = Path::new(&db_name); // SELECT let columns = vec![\"id\".to_string(), \"username\".to_string(), \"email\".to_string(), \"address\".to_string()]; // WHERE let where_condition = Condition::Eq(\"username\".to_string(), \"john_doe\".to_string()); // GROUP BY let group_by = vec![\"username\".to_string(), \"address\".to_string()]; // ORDER BY let mut order_by = HashMap::new(); order_by.insert(vec![\"id\".to_string()], \"ASC\".to_string()); order_by.insert(vec![\"email\".to_string()], \"DESC\".to_string()); // HAVING let having_condition = Condition::Gt(\"id\".to_string(), \"1\".to_string()); match sqlite::open(db_path) { Ok(conn) => { println!(\"Database opened successfully!\"); // Build the query // We need to pass the struct User with the Default trait in .from() let result: Result<Vec<User>> = sqlite::select(conn, columns) .from(User::default()) .where_clause(where_condition) .order_by(order_by) .group_by(group_by) .having(having_condition) .build(); // Match the result match result { Ok(result) => { assert_eq!(result.len(), 1); } Err(error) => panic!(\"Failed to SELECT: {:?}\", error), }; } Err(err) => eprintln!(\"Error opening the database: {}\", err), } }\n\n## Getting Help\n\nAre you having trouble with Njord? We want to help!\n\n  * Read through the documentation on our docs.\n\n  * If you are upgrading, read the release notes for upgrade instructions and \"new and noteworthy\" features.\n\n  * Ask a question we monitor stackoverflow.com for questions tagged with Njord.\n\n  * Report bugs with Njord at https://github.com/mjovanc/njord/issues.\n\n## Reporting Issues\n\nNjord uses GitHub\u2019s integrated issue tracking system to record bugs and\nfeature requests. If you want to raise an issue, please follow the\nrecommendations below:\n\n  * Before you log a bug, please search the issue tracker to see if someone has already reported the problem.\n\n  * If the issue doesn\u2019t already exist, create a new issue.\n\n  * Please provide as much information as possible with the issue report. We like to know the Njord version, operating system, and Rust version version you\u2019re using.\n\n  * If you need to paste code or include a stack trace, use Markdown. ``` escapes before and after your text.\n\n  * If possible, try to create a test case or project that replicates the problem and attach it to the issue.\n\n## Contributing\n\nBefore contributing, please read the contribution guide for useful information\nhow to get started with Njord as well as what should be included when\nsubmitting a contribution to the project.\n\n## Code of Conduct\n\nAnyone who interacts with Njord in any space, including but not limited to\nthis GitHub repository, must follow our code of conduct.\n\n## Contributors\n\nThe following contributors have either helped to start this project, have\ncontributed code, are actively maintaining it (including documentation), or in\nother ways being awesome contributors to this project. We'd like to take a\nmoment to recognize them.\n\n## License\n\nThe GPLv3 License.\n\n## About\n\nA lightweight ORM library for Rust \u26f5\n\nnjord.rs\n\n### Topics\n\nrust orm sqlite rustlang rust-library orm-library njord njord-orm\n\n### Resources\n\nReadme\n\n### License\n\nGPL-3.0 license\n\n### Code of conduct\n\nCode of conduct\n\n### Security policy\n\nSecurity policy\n\nActivity\n\nCustom properties\n\n### Stars\n\n210 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n11 forks\n\nReport repository\n\n## Releases\n\n2 tags\n\n## Packages 0\n\nNo packages published\n\n## Contributors 5\n\n## Languages\n\n  * Rust 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
