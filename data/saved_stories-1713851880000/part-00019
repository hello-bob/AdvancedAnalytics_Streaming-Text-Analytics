{"aid": "40117075", "title": "The Deuce Editor Architecture (2014)", "url": "https://web.archive.org/web/20210407151341/https://discuss.atom.io/t/the-deuce-editor-architecture/2218", "domain": "archive.org", "votes": 4, "user": "EdwardCoffin", "posted_at": "2024-04-22 18:14:10", "comments": 0, "source_title": "The Deuce editor architecture - features - Atom Discussion", "source_text": "The Deuce editor architecture - features - Atom Discussion\n\nThe Wayback Machine - https://discuss.atom.io/t/the-deuce-editor-\narchitecture/2218\n\n  * Packages\n  * Themes\n  * Documentation\n  * Blog\n  * Discuss\n\nWe will shut down the Atom Discuss forum on May 1st\n\nThe Atom community is moving to GitHub Discussions! GitHub Discussions is a\ncollaborative forum where community members can answer questions, share\nupdates, invite open-ended conversations, and make decisions affecting the\ncommunity\u2019s way of working. Discussions live in the project repository, so\nthey\u2019re accessible where our community is already working together.\n\nWe enabled Discussions on the Atom repository in March and have already seen\nsome great interaction. If you haven\u2019t tried Discussions yet, we recommend\nthat you do!\n\n#\n\nThe Deuce editor architecture\n\nfeatures\n\nYou have selected 0 posts.\n\nselect all\n\ncancel selecting\n\nwaywardmonkeys\n\nMar '14\n\nI come from a strange land where we program in a language called Dylan\n(opendylan.org 33).\n\nIn that land, we have an editor called Deuce, which is a descendent of ZWEI, a\npredecessor to emacs.\n\nIt has some interesting features:\n\n  * Lines are polymorphic. They can contain text, graphics, etc.\n  * There is the concept of \u2018Source containers\u2019 and \u2018source sections\u2019. A buffer is composed of \u2018source sections\u2019 which can come from different containers. In a nutshell this means you can have a single buffer where different parts of that buffer come from different files. For example, Deuce uses this to display a single buffer containing all the callers of a method. Each method definition in the buffer comes from a different source file. Editing that section of the buffer edits the original file.\n  * The capability for graphics is included.\n  * A simple presentation framework is part of the design. Allowing \u2018live\u2019 objects in the editor.\n  * GUI presentation is separated from editor functionality allowing different GUI back ends to be used\n\nThis editor is used in our IDE, which is currently only on Windows, but it\nactually works and the code is fairly straight forward (and MIT licensed).\n\nA discussion of this editor is briefly contained in\nhttps://groups.google.com/forum/#!msg/comp.lang.dylan/3uuUb3Z9pAc/6NbE9gYpeAIJ\n93\n\nThe code itself can be found here: https://github.com/dylan-\nlang/opendylan/tree/master/sources/deuce 152\n\nThe original code was written by Scott McKay (who posted in that discussion\nlinked above) in the late 1990s, so the considerations of time for memory\nusage and performance may apply well today. Scott McKay was also a former\nemployee of Symbolics and worked on the Lisp Machine there, so there\u2019s quite\nan interesting history and heritage to this code.\n\nThis code is, almost entirely, independent of the GUI that displays it, so it\ncould help inform the parts of the Atom editor that handle the text,\nindependent of the DOM that is used to display it. (This would be useful for\nhandling large files for example.)\n\nOverall, the code structure is:\n\n  * windows.dylan defines a window object. A window holds a buffer (among other responsibilities).\n  * buffers.dylan defines a buffer which is linked to a source container. There is also a file browsing-buffers.dylan which defines composite buffers that link to multiple other buffers. This is how search / callers / etc can be handled. Saving a composite buffer actually goes out and saves the buffers that it refers to.\n  * containers.dylan defines the source containers, which usually correspond to a file. A container can be sectionized (divided into sections) using a \u201cmode\u201d (like a language mode). This makes it easy to do things like IntelliJ does with dividers between method definitions, etc.\n  * sections.dylan defines the source sections, which are a sequence of lines originating from a source container. Sections are actually linked into buffers via nodes (nodes.dylan). This lets a single section be present in multiple buffers at once.\n\nThere are a number of other files (obviously) and more to the overall\narchitecture, but I\u2019m hoping that the above might be interesting and\ninformative and this already a long post.\n\nI\u2019d be happy to answer questions about this or talk about it more.\n\n  * #### created\n\nMar '14\n\n  * #### last reply\n\nMar '14\n\n  * 2\n\n#### replies\n\n  * 5.8k\n\n#### views\n\n  * 2\n\n#### users\n\n  * 8\n\n#### likes\n\n  * 3\n\n#### links\n\nwaywardmonkeys\n\nMar '14\n\nI\u2019ve just been in touch with Scott McKay (the original author of Deuce) and\nhe\u2019s also willing to talk with you. I can pass along his email address\nprivately.\n\nthedaniel\n\nMar '14\n\nwaywardmonkeys:\n\n> I\u2019m hoping that the above might be interesting and informative\n\nIt absolutely is - thanks for posting such a detailed overview.\n\n### Suggested Topics\n\nTopic| Replies| Views| Activity  \n---|---|---|---  \nAtom App Icon Vector Grapichsfeatures| 118| Jan 15  \nAtom git file changes doesnt worksfeatures| 159| Oct '20  \nWhy I am leaving Atomfeatures| 1.7k| Jun '20  \nFix size of panesfeatures| 240| May '20  \nSupport-\u2013up-corserp~discuss.rbstelectron| 110| Sep '20  \n  \n### Want to read more? Browse other topics in features or view latest topics.\n\n### [en.share.topic]\n\n", "frontpage": false}
