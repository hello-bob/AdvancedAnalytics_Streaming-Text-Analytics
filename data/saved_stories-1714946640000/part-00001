{"aid": "40264399", "title": "Tips for getting started with open source", "url": "https://www.gouthamve.dev/tips-for-getting-started-with-opensource/", "domain": "gouthamve.dev", "votes": 1, "user": "gouthamve", "posted_at": "2024-05-05 12:36:55", "comments": 0, "source_title": "Tips for getting started with OpenSource", "source_text": "Tips for getting started with OpenSource\n\nGoutham City\n\nSign in Subscribe\n\nMay 1, 2024 5 min read\n\n# Tips for getting started with OpenSource\n\nPhoto by Luke Southern / Unsplash\n\nI recently read this interesting article What contributing to Open-source is,\nand what it isn't. They made some good points on how low-quality drive-by\ncontributions are bad for both OSS maintainers and new contributors. However,\nI felt like the article was missing good tips for serious contributors looking\nto get started with OSS.\n\nI owe a lot of my career and learning to OSS. I think it is a great way to\nbuild up your profile and quality contributions will have a big impact on your\ncareer trajectory. But it is not very easy and like all good things, it takes\ntime.\n\nThere are many different ways to contribute to an OSS project, but here are a\nfew tips aimed at those looking to contribute code, and looking to become\nlong-term maintainers.\n\n## Pick the right project\n\nThe single best decision you can make is to pick the right project for your\ncontributions.\n\n### You can use it regularly\n\nI always suggest picking a project that you are using or willing to use\nregularly. This is because you\u2019ll ideally contribute to the project for many\nmonths and it\u2019s always easier to keep up the motivation and energy if you are\nan end-user of the project yourself.\n\nIf you work on a project that you don\u2019t use, after a while, you don\u2019t know\nwhat to work on, and which issues have more impact than others. You\u2019ll also be\nbuilding features based on user-feedback but if you can\u2019t relate to the\nfeature requests, then it gets harder to build the right features.\n\nHowever, I've seen people get stuck choosing that right project. Sometimes\npicking a project might be a big enough blocker that you never get started. If\nthat is the case for you, just pick any good project and start contributing.\nOnce you're comfortable with contributing, you'll also gain a better\nunderstanding of what is a better project for you. You can then find that\nproject and switch. I started with Reaction Commerce, and later switched to\nPrometheus :)\n\n### Has an active community\n\nPick a project that has an active community and maintainership. This means\nchecking if the discussions are active and if users are getting enough\nsupport. Checking if the PRs are getting regular reviews and if enough PRs are\nbeing merged every month.\n\nYou\u2019ll have a ton of questions as you start contributing and it\u2019s important to\nmake sure that the community is active. Further, if you spend a couple of days\ngetting a PR up, not having any reviews for weeks is a disappointing\ncontributing experience that will push you away from OpenSource.\n\n## Struggle before you reach out\n\nA lot of the guides tell you to reach out and introduce yourself before you\ncontribute, but I don\u2019t think that is helpful advice. Maintainers see A LOT of\nenthusiastic people reach out, only for them to disappear before submitting a\nPR. You\u2019re going to get a much better response after you put some effort in.\n\nEvery project has a contributing guide and I recommend reading it and running\nthe project locally and playing around with the build and running process\nfirst. After that, find an issue to work on. Most projects have issues tagged\nas \u201ceasy\u201d or \u201cgood first issue\u201d for new contributors to get started. There are\neven a couple of websites like https://goodfirstissue.dev/and\nhttps://goodfirstissues.com/that help you find these issues. If the project\ndoesn\u2019t have any such tags, I\u2019d still peruse through the list of issues and\nfind one that \u201clooks easy\u201d. It\u2019s ok if it turns out too complicated later, but\nthe idea is to pick something that looks obvious or easy.\n\nAnd then I\u2019d recommend spending multiple hours trying to solve it. The more\ntime you spend, the better. This would get frustrating, but it is an important\nstep because it\u2019ll help you run the project and understand how the codebase is\nstructured. It\u2019ll help you understand how to run the tests. Whenever I start\ncontributing to a project, I pick a simple issue and then put in a bunch of\nfmt.Println statements in the codebase to understand how the logic and code\nare structured.\n\nAfter struggling to solve the issue for at least 3-6 hours, if you haven\u2019t yet\nsolved it, write a message to the discussion or chat forum with roughly the\nfollowing information:\n\n  * Your name and introduction\n  * A short line about your motivation and interest to contribute to the project\n  * The issue you picked, and the approaches you\u2019ve tried to fix it\n\nWhen a maintainer sees that message, they\u2019ll understand that you spent many\nhours trying to solve the issue and it shows commitment. They would likely\ninstantly drop what they\u2019re doing to help you. You can then work with them to\nopen a PR with the right approach and get it merged.\n\nOnce that issue is done, you can move on to the next easy issue or ask the\nmaintainer to suggest an issue in the same section of the codebase to get you\neven more confident :)\n\n## Stick with it for 6+ months\n\nOnce you\u2019ve gotten going, you will quickly be able to contribute an important\nfeature or two. But if you\u2019d like to have long-term impact on both the\ncommunity and your career, you need to be consistently contributing for at\nleast 6 months.\n\nWhen I say consistently, I don\u2019t mean working on the project for several hours\nevery day but trying to get in 4 to 5 hours over the week, every week. If you\nshow up consistently, respond to issues, answer questions and start\ncontributing to one part of the codebase, you will very likely become a\nmaintainer for the project in 6 months.\n\nBeing a maintainer will add a lot more weight to your profile than simple\ndrive-by contributions. It shows that you can work in a distributed\nenvironment, are self-guided and are extremely helpful to others. It will\nunlock a lot of doors, and you will soon be getting inbound offers for\ncontract work or full-time employment.\n\n## Write, speak and build a public profile\n\nWhile being a maintainer is pretty good, you can maximise your impact by\nwriting and speaking about your work. You should ideally have a blog and start\nspeaking at local meetups. Once you\u2019ve gained some confidence around public\nspeaking, you should try speaking at conferences.\n\nThis will help a LOT of people and will also expand your reach. Most\nconferences also have a \u201cspeaker dinner\u201d where you get to meet other speakers.\nThese dinners have let me meet and have meaningful conversations with other\ndevelopers and leaders I looked up to and helped shape my career trajectory.\n\nFinally, having a good technical blog and conference talks will help you and\nyour profile stand out when applying for jobs. And like above, having a strong\npublic profile will also bring you great targeted, inbound job enquiries. And\nthese enquiries will also likely be around the OSS project you contribute to,\nmaking it possible to get paid for your OpenSource work :)\n\n### Member discussion\n\nGoutham City \u00a9 2024\n\nPowered by Ghost\n\n", "frontpage": false}
