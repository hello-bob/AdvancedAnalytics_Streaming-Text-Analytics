{"aid": "40156534", "title": "Tribler: An attack-resilient micro-economy for media", "url": "https://github.com/Tribler/tribler/wiki", "domain": "github.com/tribler", "votes": 21, "user": "thunderbong", "posted_at": "2024-04-25 12:13:51", "comments": 7, "source_title": "Home", "source_text": "Home \u00b7 Tribler/tribler Wiki \u00b7 GitHub\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nTribler / tribler Public\n\n  * Notifications\n  * Fork 440\n  * Star 4.5k\n\n# Home\n\nJump to bottom\n\nJohan Pouwelse edited this page Apr 17, 2024 \u00b7 147 revisions\n\n# Tribler: an attack-resilient micro-economy for media\n\n  * Anonymous Tor-like downloads and fast search\n  * Earn seeding tokens\n  * Reward content creators\n\nTribler is a Bittorrent-compatible alternative to Youtube. It is designed to\nprotect your privacy, build a web-of-trust, be attack-resilient, and reward\ncontent creators directly. We are building a micro-economy without banks,\nwithout advertisers, and without any government. Together with Harvard\nUniversity, the Tribler team deployed one of the first fully distributed\nledgers in August 2007, see BBC News coverge and a New Scientist article. In\ncoming years we will further expand our micro-economy based on bandwidth\ntokens. We aim to become the key place where audiences find their torrents,\ncreative talents get discovered, and artists get financial rewards from their\nfans. Tribler is the place where 100 percent of the money goes to artists and\nthe people that run the infrastructure.\n\nOur mission: re-inventing media and money.\n\nOver 2 million people have used Tribler over the years. The Tribler project\nwas started in 2005 at Delft University of Technology and over 100+ developers\ncontributed code to it. We are continuously improving it and further expanding\nthe scientific developers team.\n\nTechnical foundations of Tribler are the Bittorrent protocol, an overlay for\nP2P communication across NAT/firewalls, gradual building of trust in public\nkeys with Bittorrent seeding, and our token economy with incentives for Tor-\nlike relaying and hidden seeding. For 12 years we have been building a very\nrobust self-organising Peer-to-Peer system. Today Tribler is robust: \"the only\nway to take Tribler down is to take The Internet down\" (but a single software\nbug could end everything).\n\n## Current items under active development\n\nThis wiki page contains our main technical documentation, highlights:\n\n  * Trustchain: our 10.000 transactions per second ledger\n  * Token economy and decentral market\n\nTopic and open Github issue| Researcher  \n---|---  \nOn-device decentralised AI - phd level| Petru  \nTrustworthy data for generative AI - phd level| Marcel  \n5G overlay network for decentralised On-Device Machine Learning| Orestis\nKanaris  \nTrue decentralised on-device machine learning| Quinten  \nexploring LLM as a database| Xueyuan Chen  \nOffline digital Euro: a first design and implementation| Leon  \npassport-grade digital identity with DDoS protection using IP reputation|\nAdrian  \nWeb3Recommend: Decentralised Web3 social recommendations with trust and\nrelevance balance| Rohan Madhwal  \nMaking Trustchain scale to enterprise level with a large stress testing\nexperiment| Bulat Nasrulin  \nIPv8 resilient overlay: Sybil-resilience through latency-based shadow-banning|\nQuinten Stokkink  \nUniversal wallet for identity, attestations, and money| Rowdy Chotkan  \nGossiping torrent popularity to scale to millions of torrents| Sandip,\nAlexander and Andrei  \n  \nOpen projects for new TUDelft master thesis students: Tor-like streaming,\nself-sovereign identity and authentication on Android, relevance ranking of\nsearch results (+swarm popularity), perfect metadata through distributed\ncrowdsourcing, self-reinforcing trust, and perfect network connectivity using\nNAT/Firewall traversal. Speculative projects with long-term focus: prediction\nmarket for climate change. A market designed against frontrunners and high-\nfrequency trading abusers in general.\n\nProject: Waiting for new developers| Prior Dev  \n---|---  \nDeceptively simple trust model| Alexander Stannat  \nBeyond decentral exchanges: Single universal global market| Joost V.  \nEuroToken - an open alternative to Facebook Libra and JPMorgan coin| Wessel\nBlokzijl  \nArtistCoin - Fairness for artists, audio streaming service without any\nintermediaries| Tim W.  \nReal-time updates to the trust model and visualisation of random walks| Can\nUmut  \nYoutube-like scale: Gigachannels with 1 billion magnet links| Vadim  \nA live token economy and distributed marketplace for bandwidth tokens| Martijn\nde Vos  \nLow-level debugging of Tor-like tunnels and performance in general| Vadim  \nBlockchain: detect freeriders, refuse service; anon compatible| Ewout Bongers  \nself-sovereign identity+trust: overview, biometric validation, boosted\nprivacy, and voting pass| 8 students  \nDistributed Apps: autonomous code execution using IPv8 plugins| Mitchell\nOlsthoorn  \nP2P 4G - Universal connectivity using imperfect hardware| Matt S.  \nFinancial Engineering: decentralised non-profit payment services| Jetse\nBrouwer  \nWalker infrastructure with 48 NAT boxes and automated NAT puncturing| Remko\nNaber  \nAutonomous self-replicating code buy servers with Bitcoins| 4 students  \nPrototype projects \"Blockchain Engineering\" Master course around threshold\nencryption, trustchain, self-sovereign ID, etc| 45 master students  \nBottom-up consensus model with full scalability using checkpointing| Kelong\nCong  \nPageRank-like trust model with Sybil-attack resilience| Pim Otte  \nTowards global consensus on trust within the Tribler micro-economy| Jan-Gerrit\nHarms  \nDecentral market primitives: market order and execution engine fairness| Marc\nJuchli  \nDecentral market: privacy for traders and spam-resilience| Bas van Ijzendoorn  \nSecure hardware storage of keys using PUF hardware| Ade Ade Setyawan Sajim  \nBlockchain: self-reinforcing trust with collection of credit records| Pim\nVeldhuisen  \nFast anonymous streaming with Tor-like onion routing| Quinten Stokkink  \nAttack-resilient social media on mobile devices, using LibTribler| Paul\nBrussee  \nBlockchain walker with attack-resilience and integrated NAT puncturing,\ntrusted peer discovery| Changliang  \nBlockchain: earn credits with seeding on Kodi-like devices| Bohao Zhang  \ncrowdsourcing of rich metadata| Stijn van Schooten  \nDetermine popularity+age of content with spam and attack resilience, swarm\nsize community| Chengxin Ma  \nAdversarial search: blockchain-based spam resilience in Youtube-like systems|\nJelle Licht  \nScalability: donating TeraBytes to crowdsourcing projects| Wouter Smit  \nConnecting banks to decentral markets through PSD2 open APIs| Kypianou  \nCrowdsourcing and investments| Bart Gout  \nre-use our decentral market platform for real-world business case,\ncrowdsourcing real-estate| 4 bsc students  \nEstablish + Real-time display of Blockchain trust| 20 Context project students  \n  \n## Aim: solving trust\n\nSocial media today is obsessed with profit, filled with advertisements,\noverflowing with falsehoods, and infested with fake news. We're trying to fix\nthese hard problems in a unique way: by building trust. Our audacious ambition\nis a clean-slate re-creation of The Internet itself with foundations of trust.\nCraiglist and eBay showed us in 1995 that trustworthy trade was possible\nonline. Uber, Etsy, and AirBnB show that entire industries can be disrupted by\na single platform with a natural monopoly.\n\nFor the past 18 years we have build and deployed platforms to create trust.\nBefore Wikipedia and Youtube existed we studied the mechanisms behind trust\nand user-generated content on a small scale. Several years before Wikipedia\nemerged we deployed a music encyclopedia with unconstrained write access, it\nnever became popular because we focused too much on software, instead\ncommunity growth.\n\nToday we keep a narrow focus and continuously expand Tribler with trustworthy\ndecentralized technology. We launched sub-second keyword search for Bittorrent\nswarms without any server back in 2010 (see our old Google Tech Talk on this\ntopic). One of our operational trust browsing prototypes:\n\nFurther reading:\n\n  * Our work from 2004, 2-year in-depth measurement and analysis of Bittorrent (.pdf 25 pages), largest measurement to date. Covers eight months of the BitTorrent/Suprnova.org file sharing ecosystem. In particular, we show measurement results of the popularity and the availability of BitTorrent, of its download performance, of the content lifetime, and of the structure of the community responsible for verifying uploaded content.\n\n## Tribler features and innovations\n\nTribler supports torrent search without websites, anonymous downloading,\ntorrent streaming, channels of torrents, and sharing content for tokens.\nOverview of Tribler (.html 5 pages). All Tribler features are implemented in a\ncompletely distributed manner, not relying on any centralized component.\nStill, Tribler manages to remain fully backwards compatible with BitTorrent.\nThe 2006 overview of Tribler (.pdf 6 pages) featuring taste groups, friends,\nfriends-of-friends and faster downloads by donating bandwidth to friends\n(protocol spec of friend boosting). Note that the 2006-2009 Tribler protocol\nspecification (.pdf 47 pages) is now mostly outdated, as we switched to our\nnew synchronization protocol called Dispersy (see below).\n\nTrust in social media content is essential for a sustainable ecosystem. We\nintroduced channels of Bittorrent swarms in 2009 with the Tribler 4.x release.\nEach user can vote on channels to increase their visibility and tell everybody\nthe channel owner is not a spammer and not spreading fake items. The\nreputation of both the voters and channel owner are important.\n\nTribler protects your privacy by not storing anything on any server. To\nprotect your privacy even more, we have prototyped search algorithms based on\nhomomorphic cryptography. We presented a new algorithm system for privacy-\nrespecting scalable Gnutella-like search in 2014. Our approach to scalability\nis a similarity function in the encrypted domain (homomorphic), enabling\nsemantic clustering with privacy.\n\nBack in 2006 we introduced long-lived identities to separate trustworthy peers\nfrom freeriders and spammers (PermID). To protect your privacy further we also\ndevised an alternative to onion routing which potentially could have stronger\nsecurity guarantees (correlation attack). See the details in this thesis on\nMulti-core architecture for anonymous Internet streaming which includes a\nperformance analysis of running code.\n\nFurther reading for developers:\n\n  * Running Tribler from sources in Eclipse\n  * Jenkins server for continuous integration, unit tests, installer builders and performance testing. You will find a lot of automatic running scripts there for things like correctness, NAT puncture performance and GUI tests.\n  * Tribler development pointers / starting point for new developers\n  * Python source code doc directory\n  * Tribler can run as a background process with this API\n\n## Our primitive 2007 distributed ledger and Trustchain (2012)\n\nWe deployed one of the worlds first fully distributed ledgers in August of\n2007. For over a decade we meticulously measured, analysed, improved, and\nenhanced this live system. Today it defines the state-of-the-art in blockchain\nresearch, but in the early days it barely functioned at all. A total of five\nPh.D. students of Delft contributed key parts and upgrades.\n\nAt launch we called our initiative \"bandwidth-as-a-currency\". Today we have\nspecific terminology for what we did: a token economy. We are making Internet\nbandwidth a tradable commodity without any middleman or need for any\ncentralised governance. Our efforts span over a decade, making us the veterans\nin the field. Our ledger provides an incentive for Bittorrent seeding and Tor-\nlike relaying. For numerous years the tit-for-tat algorithm provided the only\nincentive for contributions in Bittorrent. No incentive for seeding existed,\nexcept when central servers kept track of your uploads and downloads. We\nmeasured closed invite-only communities for numerous years and mathematically\nshowed their rich-get-richer properties. For details see Fast download but\neternal seeding: the reward and punishment of sharing ratio enforcement and\nour measurement paper understanding bandwidth economics and ratio enforcement\n(.pdf 5 pages). We measured 508,269 peers in 444 swarms within five BitTorrent\ncommunities, ranging from public to highly elite. We observe download\nperformance, connectability, seeder/leecher ratios, seeding duration, and\nstatistics regarding the resource supply.\n\nWe got inspiration for a novel blockchain design based on operating our own\nledger and studying token economies. Our current work is called Trustchain, a\nunique design from 2012 where all participants have their own personal\nblockchain and create their own genesis block. Our older work used a graph-\nbased approach and graph-based reputation algorithms. Trustchain records\ntransactions in a tamper-proof and scalable manner. It does not require mining\nand does not try to solve the double spending problem. Our primitive 2007\nledger pre-dates Bitcoin, additionally our 2012 DAG-based approach pre-dates\nIOTA and the Texas DAG patents.\n\nWe are fans of Bitcoin, but also showed in an early analysis the flaws in this\nconcept. Our approach to digital signatures is the essential difference which\nsets us apart from others. Mono-signatures form the foundation of all other\nprojects we have seen in the past decade. Meaning, in systems such as Bitcoin\na transaction is already valid with a single signature. Our Trustchain design\ndoes not permit transactions with merely a single signature. Trustchain only\nsupports multi-party agreement recording, others are not valid. We believe\nthat we created a more powerful system by removing single-signature\ntransactions. Only time can tell the usefullness of this academically-pure and\nminimal design.\n\nThe foundation of our approach is making repeated successful interactions\nbetween actors explicit and durable. Cryptographically signed records of\nsuccessful encounters serve as proof-of-work certificates. The validity and\nvalue of these certificates is determined by a trust and reputation system.\nRelaying for anonymity and seeding in Tribler constitutes work which is\nrewarded with a signed certificate. Helping others and uploading in Bittorrent\nswarms is rewarded with bandwidth tokens (e.g. signed certificates). Mining in\nour system becomes download parts of a swarm and uploading them to multiple\ninterested parties. In 2013 we got the credit mining part of our system\noperational in early Beta. The screenshot below from November 2013 shows the\nboosting of various swarms. Note the investment yields of \"struck gold\" and\n\"poor\" in the right column.\n\nFurther reading:\n\n  * Trustchain IETF Draft Internet Standards proposal\n  * Scientific 2010 publication on BarterCast ledger (.pdf 8 pages).\n  * Our original BarterCast protocol publication 2009.\n  * The DropEdge enhancement was proposed to BarterCast together with Harvard and Berkeley scientists (.pdf 42 pages) which makes the ledger harder to attack.\n  * Reducing the storage cost of our ledger and reputation system form 2012.\n  * Key Internet deployment evaluation: A Network Science Perspective of a Distributed Reputation Mechanism (.pdf 9 pages), from 2013.\n\n## Our methodology: keep focus and dream big\n\nFor our narrow focus of a Bittorrent client we are exploring the fundamentals\nof identity, trust, and trade. With over 1 billion users of Youtube and\nBittorrent we know there is a mass audience ready for something better.\n\nOur approach has very boring foundations, when compared to newer and more sexy\nwork, like IPFS, FileCoin, or Storj. We first measured Bittorrent in 2002, it\nis a flourishing mature ecosystem and ready for an upgrade. Bootstrapping an\necosystem is hard, we designed and deployed a superior alternative to\nBittorrent. It became an official IETF Internet Standard, but completely\nflopped. This formed our preference for simplicity, elegance and our allergy\nfor bloatware, clean-slate work, and over-engineering. Numerous other projects\ntry to create a generic approach using an ICO for funding and promising the\nearly adopters a dazzling return-on-investment. Tribler is different. rant\nwarning. We are non-profit academics. We do not want to replace the old elite\nwith a new crypto-currency elite. What is changed if we replace backroom\ndeals, lobbyists, middleman, and legal monopolies with the tools of the new\nelite: algorithms, early investor rewards, proof-of-dominating-stake, and\nsmart contracts? Replacing the analog world and breading digital-native\ninequality does not make the world a better place. We are creating a micro-\neconomy based on fairness, trust, equality, and self-governance. By design we\nbanish rent-seeking. Critical infrastructure rarely makes profit. We are\ntrying to build critical infrastructure.\n\n## Tor-inspired onion routing\n\nAs of December 2014 Tribler has a build-in version of a Tor-like anonymity\nsystem. This is completely disconnected from 'The' Tor network. It is still\nongoing work. It gives you probably superior protection than a VPN, but no\nprotection against resourceful spying agencies.\n\nWe have implemented the main parts of the Tor wire protocol within Tribler.\nInstead of the TCP protocol that 'the' Tor network uses, we use UDP. The\nenables us to do NAT puncturing and traversal. We have created our own network\nusing this Tor variant, our code is not compatible with normal Tor. Work\nstarted as a small trial in December 2013 with anonymous Bittorrent\ndownloading. Essential part of our work is that everybody who downloads\nanonymously also becomes a relay. This brings the Bittorrent tit-for-tat idea\nto darknets. With this ongoing work we aim to offer in 2018 with Tribler V7.0\nproxied downloading for any Bittorrent swarm.\n\nLengthy documentation in the form of two master thesis documents is available.\nFirst is a general documentation of the tunnel and relay mechanism, Anonymous\nHD video streaming, .pdf 68 pages. Second is focused on encryption part,\ncalled Anonymous Internet: Anonymizing peer-to-peer traffic using applied\ncryptography, .pdf 85 pages. In addition, there are the specifications for the\nprotocols for anonymous downloading and hidden seeding on this wiki.\n\n## overlay protocol for synchronization\n\nThe current foundation of Tribler is the Dispersy overlay. Dispersy\nfunctionality includes: making connections, sending messages, puncturing NAT\nboxes, and distributed database synchronization. Every 5 seconds Dispersy\nsends out a message to establish a new connection or re-connect to a known\npeer. Note that we are transitioning to a new overlay for the durations of\n2018.\n\nOverlay communication, peer discovery and content discovery (keyword search)\nare essential building blocks of a peer-to-peer system. Tribler preserves the\ncontent and peers it discovered in the past. Every Tribler client runs a full\nSQL database engine. Several times per second each Tribler peer sends and\nreceives updates for this database. Our protocol for distributed database\nsynchronization is called Dispersy. See a simple messaging client written with\njust a few lines of code as a simple tutorial example; outdated broken\ntutorial.\n\nThe detailed wire protocol specification: introduction-request-1\n\nDispersy is a fully decentralized system for synchronization (.pdf), capable\nof running in challenged network environments. Key features of Dispersy are\nstateless synchronization using Bloomfilters, decentralized NAT traversal, and\ndata bundle selection algorithms that allow the system to scale over 100,000\nbundles in the presence of high churn and high-load scenario's.\n\nDispersy uses a simple database schema, with the sync table containing the\ndata bundles to synchronise across peers in the packet field.\n\n## Android port of LibTribler\n\nAndroid porting teams are working on the downloading and Tor-like protocol\npart of Tribler and the overlay, channels and search portions. As of June 2014\nthere is initial running code. The focus is on stability and creating a mature\nbuild environment using Jenkins. See below two actual screenshot of current\nrunning code. Download the alpha .APK here:\nhttps://jenkins.tribler.org/job/Build-Tribler_Android-Python/lastBuild/\n\n## Stealth app for Android\n\nThe following work is ongoing. We have an operational Android app that can\nspread itself via NFC. The app can spread viral via friends, even if it is\nblocked from a central app store.\n\nOriginal student assignment: The aim is to create an Open Source Android\nsmartphone app to help bypass restrictions by non-democratic governments. The\nArab Spring showed the importance of video recording of mass protests.\nHowever, possession of a video recording on your phone of human rights\nviolations and mass uprisings brings grave danger. The idea is to make this\napp \u201ccheck-point-proof\u201d, meaning that a somewhat knowledgeable person will not\ndetect the presence of the app and will not discover any video content. The\napp itself should be hidden, you can make a \u201cstealth\u201d app by somehow removing\nthe app icon from your app list (sadly it simply still shows up in the\nuninstall app list). The app is activated simply by \u201cdialing\u201d a secret\ntelephone number or other method your deem secure. Starting point for your\nwork can be found here: http://stackoverflow.com/questions/5921071/how-to-\ncreate-a-stealth-like-android-app. Your Stealth app need to be able to virally\nspread and be able to bypass an government restrictions on the official app\nstore. Include the feature for NFC and direct-wifi transfer of the .apk with\nan easy on-screen manual and steps. Thus users can pass your app along to\ntheir friends.\n\n## NAT Traversal: 80% success rate\n\nPeer-to-Peer (P2P) networks work on the presumption that all nodes in the\nnetwork are connectable. However, NAT boxes and firewalls prevent connections\nto many nodes on the Internet. We created a method to puncture NATs which does\nnot require a server. Our method is therefore a simple no-server-needed\nalternative to the complex STUN, TURN and ICE approaches. We conducted one of\nthe largest measurements of NAT/Firewall behavior and puncture efficiency in\nthe wild. Our method is a UDP hole-punching technique. We measured the success\nrate using volunteers running Tribler. Number of users in our trials are 907\nand 1531 people. Our results show that UDP hole punching is an effective\nmethod to increase the connectability of peers on the Internet: approximately\n64% of all peers are behind a NAT box or firewall. More than 80% of hole\npunching attempts between these peers succeed.\n\nBrief description of our UDP puncture method in IETF draft\n\nLengthy thesis work on UDP puncturing from 2005\n\n## Roadmap 2030: a proven alternative model for capitalism\n\nAs Tribler scientists and engineer we are actively trying to make a better\nworld. Our micro-economy is our living lab for experimenting with alternative\nmodels for capitalism. We aim to re-invent money by creating the first\nsustainable economy without any moral hazards from bankers, politicians, and\nmegacorporation. Citizens and only the citizens are in control with self-\ngovernance.\n\nOur grand vision in a 1+ hour lecture given at Stanford University, via their\nYoutube channel. We want to do more then be a Youtube alternative. Our grand\nvision is liberating both media and money. See the talk Abstract and slides\n(.pdf 78 pages). Keywords: transform money, \u201cBank-of-Bits\u201d, global financial\nmeltdown isolation. Use cooperation&stability, not volatility&greed. Alter the\nessence of capitalism (rich get richer) by abolishing compound interest rate\nand facilitation of safe zero-cost money transfers & lending. We aim for a\ndirect assault on the essence of capitalism, aiming even further then the\nBitcoin accomplishment (bypassing the central bank).\n\nFurther reading:\n\n  * Our writup on InternetSociety.org on liberating the media and Internet itself.\n  * The challenge is to design a micro-economy where the attacker might even control the underlying infrastructure. Our 2012 annoucement of our new focus on attack-resilience was covered by numerous news organisations. Fox News and Russian Today called us the the new weapon in the battle for Internet liberty.\n\n## Tribler history\n\n  * 2019: Release of Gigachannels and Python3 compatibility\n  * 2018: Release of Tribler 7\n  * 2017: Release of IPv8 digital identity framework, successor of Dispersy\n  * 2017: First live tests with decentral marketplace\n  * 2016: New blockchain deployment testing\n  * 2014: Test network goes live for anonymous Tor-like downloading (not connected in any with with 'the' Tor project)\n  * 2013: Anonymous Tor-like download trial\n  * 2012: Tribler Mobile live streaming from a phone camera\n  * 2011: Libswift accepted as an upcoming IETF Internet Standard\n  * 2010: Release of Dispersy network overlay framework\n  * 2010: Splash framework for data synchronization tested\n  * 2010: Wikipedia.org uses our technology for live trial\n  * 2009: Large HD streaming trial with BBC\n  * 2008: Social network without servers and \"easy\" invites\n  * 2007: Our distributed ledger launched in the wild\n  * 2006: Tribler 1st release\n  * 2005: First Tribler code = social Bittorrent\n  * 2004: Slashdot for first time with largest Bittorrent study\n\n##### Clone this wiki locally\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
