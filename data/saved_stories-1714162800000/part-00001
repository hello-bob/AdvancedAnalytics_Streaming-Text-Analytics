{"aid": "40169778", "title": "Run Containers Easily with Podman and Flox", "url": "https://flox.dev/blog/podman-remote", "domain": "flox.dev", "votes": 1, "user": "tomberek", "posted_at": "2024-04-26 14:19:00", "comments": 0, "source_title": "flox | Run Containers Easily with Podman + Flox", "source_text": "flox | Run Containers Easily with Podman + Flox\n\nThis website stores cookies on your computer. These cookies are used to\nimprove your website experience and provide more personalized services to you,\nboth on this website and through other media. To find out more about the\ncookies we use, see our Privacy Policy.\n\nWe won't track your information when you visit our site. But in order to\ncomply with your preferences, we'll have to use just one tiny cookie so that\nyou're not asked to make this choice again.\n\n2.0k\n\nLinux (deb)x86\n\nLinux (deb)ARM\n\nLinux (rpm)x86\n\nLinux (rpm)ARM\n\nmacOSM1/M2/M3\n\nmacOSIntel\n\nLogin\n\n  * Docs\n\n  * Features\n\n  * Blog\n\nConnect\n\n#### Blog\n\n# Run Containers Easily with Podman + Flox\n\n##### Ross Turk | 25 April 2024\n\nFor years, I used containers every single day.\n\nAlmost always, it was the same pattern: I would spin up container with a tool\nor service I need - a CMS, data orchestration platform, time-series database,\nor old text-based adventure game - then shut it down and try again with at\nleast one volume mounted and at least one port forwarded.\n\nI may not have always needed the isolation that containers provided; in fact,\nI would work around it a lot of the time. But they were still the easiest way\nto get the software I needed.\n\nSince I started using Flox, I don't use containers to consume software\nanymore. But they're still incredibly useful.\n\nWhen we really do need to run something in isolation, there\u2019s no substitute\nfor the almighty Linux container. It is the perfect balance of isolation and\nconvenience for most cases. And, as it turns out, it\u2019s extremely convenient to\nrun containers using Podman and Flox.\n\n## Activating Podman in a Remote Environment\n\nThe easiest way to run containers on a machine that doesn\u2019t already have\nDocker or Podman installed is to activate the flox/podman remote Flox\nenvironment.\n\nThis Flox environment contains:\n\n  * the podman package\n  * podman-compose, a Podman alternative for Docker Compose\n  * a hook that verifies configuration and starts the Podman machine\n\nTo activate it, Install Flox and run the following command:\n\n    \n    \n    ~ % flox activate -r flox/podman\n\nThe best thing about Podman is that it doesn\u2019t require you to run any services\nor daemons. You will, however, need a Podman machine if you\u2019re running on\nmacOS. The profile script for this environment will ask you whether you want\nthis Flox environment to be started automatically when you activate the\nenvironment in the future:\n\n    \n    \n    ~ % flox activate -r flox/podman \u2705 You are now using the environment 'flox/podman' (remote). To stop using this environment, type 'exit' Would you like to create and start the Podman virtual machine? > Always - start now & on future activations Yes - start now only No - do not start\n\nOnce the environment is activated and Podman is ready, you will see the\nfollowing output:\n\n    \n    \n    \ud83c\udf5f Podman is available.\n\nThis means that you can now use the podman command within this activated\nshell. To verify that it works we can run the Podman hello image:\n\n    \n    \n    flox [flox/podman] ~ % podman run -it quay.io/podman/hello !... Hello Podman World ...! .--\"--. / - - \\ / (O) (O) \\ ~~~| -=(,Y,)=- | .---. /` \\ |~~ ~/ o o \\~~~~.----. ~~ | =(X)= |~ / (O (O) \\ ~~~~~~~ ~| =(Y_)=- | ~~~~ ~~~| U |~~ Project: https://github.com/containers/podman Website: https://podman.io Desktop: https://podman-desktop.io Documents: https://docs.podman.io YouTube: https://youtube.com/@Podman X/Twitter: @Podman_io Mastodon: @Podman_io@fosstodon.org\n\nWhen you no longer need to use Podman, exit the Flox environment by typing ^D\n(Ctrl+D) or exit - it\u2019s as easy as leaving the subshell we created when we ran\nflox activate.\n\nAll of this was possible without installing a desktop app, or leaving the\nshell you were already working in. When you no longer need it, and you exit,\nit\u2019s simply not in your $PATH anymore.\n\n### Seeing how it works\n\nFlox remote environments can be viewed with the flox list command. You can\npass it -c to see the entire manifest (instead of just a list of packages)\nalong with -r and a remote environment name.\n\nTo see what\u2019s inside this environment, run flox list -cr flox/podman. You can\nsee the list of packages and the contents of the script that runs when it is\nactivated.\n\nThis is just an example. It is easy to create your own Flox environments just\nlike this one. and push them to FloxHub so you can use them everywhere you go.\n\n## Creating a Flox project with Podman\n\nSometimes you need Podman as a permanent part of your project's stack. Perhaps\nyou require multiple copies of a service that attempt to claim the same ports.\nOr you need to run a set of tests in a way that is guaranteed not to be\ninfluenced by outside software or configuration.\n\nWith Flox, Podman can be included in a project the same way we would include\nany other piece of software.\n\nLet\u2019s say we want to start a project where we use Python to store information\ninside a PostgreSQL database. We can initialize our project using Flox with\nthe flox init command.\n\n    \n    \n    ~ % mkdir dataproject ~ % cd dataproject dataproject % flox init \u2728 Created environment 'dataproject' (aarch64-darwin) Next: $ flox search <package> <- Search for a package $ flox install <package> <- Install a package into an environment $ flox activate <- Enter the environment dataproject %\n\nThen, we can install Python, our PosgreSQL client, and Podman inside our new\nenvironment using flox install, and then activate it using flox activate:\n\n    \n    \n    dataproject % flox install python311 python311Packages.psycopg2 podman \u2705 'python311' installed to environment in current directory \u2705 'psycopg2' installed to environment in current directory \u2705 'podman' installed to environment in current directory dataproject % flox activate \u2705 You are now using the environment in current directory. To stop using this environment, type 'exit' flox [dataproject] dataproject %\n\nInside our activated Flox environment, we can start the Podman machine (if on\na Mac) and then spin up an instance of PostgreSQL for us to write our data\ninto:\n\n    \n    \n    flox [dataproject] ~ % podman machine start # if on macOS! flox [dataproject] ~ % podman run --name datastore -p 5432:5432 -e POSTGRES_PASSWORD=floxfan -d postgres 1655040dd652a3e0544205c905b2fbfa872acf7b0578fde8be1e745f99d73c36 flox [dataproject] ~ %\n\nWith our database started, we can use Python and the psycopg2 PostgreSQL\nclient to connect to it and do our work:\n\n    \n    \n    flox [dataproject] dataproject % python Python 3.11.8 (main, Feb 6 2024, 21:21:21) [Clang 16.0.6 ] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import psycopg2 >>> conn = psycopg2.connect(\"dbname=postgres user=postgres host=localhost password=floxfan\") >>> cur.execute(\"SELECT data FROM test WHERE num = 74\") [victory commences] >>> exit\n\nSo, what has Flox left behind? If we look inside our new project directory, we\ncan see that Flox has created a set of files. They are all tidily tucked into\nthe .flox directory, and they can be used to rebuild this environment in the\nfuture.\n\n    \n    \n    flox [dataproject] dataproject % find . . ./.flox ./.flox/cache ./.flox/env.json ./.flox/env ./.flox/env/manifest.toml ./.flox/env/manifest.lock ./.flox/.gitignore ./.flox/run ./.flox/run/aarch64-darwin.dataproject\n\nThese files can be checked into a Git repository alongside your project code.\nThe .gitignore file is there to make sure that you don\u2019t check in the runtime\nfiles in .flox/run, which are symlinks created on each system where you run\nFlox.\n\nFlox is free to download and use. Next time you (or your project) needs to run\na container, give it a try!\n\n  * Features\n  * About Us\n  * Careers\n\nhiring\n\n  * Blog\n\n  * Privacy Policy\n  * Terms & Conditions\n\n\u00a9 2024 flox. All rights reserved.\n\n", "frontpage": false}
