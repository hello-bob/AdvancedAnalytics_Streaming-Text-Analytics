{"aid": "40109797", "title": "The Pawn embedded scripting language", "url": "https://www.compuphase.com/pawn/pawn.htm", "domain": "compuphase.com", "votes": 1, "user": "carlos-menezes", "posted_at": "2024-04-21 22:30:06", "comments": 0, "source_title": "The Pawn language", "source_text": "The Pawn language\n\n# The Pawn language\n\nSkip to main content (skip navigation menu)\n\nYou are here: Home > Products > Programming systems > The pawn language\n\nNavigation:\n\n  * Home\n  * Projects\n  * Products\n  * Documentation\n  * Shop\n\n  * Overview\n  * End products\n\n    * DM440 audio player\n    * USB Dome Button\n  * Semi-finished products\n\n    * USB modules\n    * MP3 Player (hardware)\n    * Twinkler (LED)\n  * Software\n\n    * Compilers & interpreters\n    * Libraries & components\n    * Applications\n    * Electronic design\n\n# pawn\n\nAn embedded scripting language\n\npawn is a typeless extension language with a C-like syntax. A pawn \u201csource\u201d\nprogram is compiled for an abstract machine (or \u201cvirtual machine\u201d) for optimal\nexecution speed. The pawn compiler outputs P-code (or \u201cbytecode\u201d). Run-time\nefficiency, stability, simplicity and a small, deterministic footprint were\nkey design criteria for both the language and the abstract machine.\n\n## At a glance\n\nCurrent version| 4.1.7152 (2024-03-24) View the history of recent changes.  \n---|---  \nDownloads| Microsoft Windows: a self-extracting setup. Source code: stable\nsource archive or the latest files on the GitHub project.  \nLicense| Apache License 2.0, plus an exception clause to explicitly permit\nstatic linking of the library to commercial applications.  \nInstallation| Microsoft Windows: download the self-extracting setup and run\nit. Linux & other: download a source archive as a ZIP file and read the\nREADME.TXT file after unpacking. (See also the \u201cGetting started\u201d section\nbelow).  \nSupport| pawn is hosted on GitHub. The project has an issue tracker. For\nsupport on a commercial basis, please contact us by e-mail. We can build\nspeed-optimized versions of the abstract machine (also known as \u201cvirtual\nmachine\u201d or VM) or JITs, add special language constructs, port the product to\ndifferent microcontrollers, and write native function libraries for particular\ntasks.  \nDocumentation| All documentation is in \u201cAdobe Acrobat\" format (PDF). The main\ntwo books are the \u201cLanguage Guide\u201d and the \u201cImplementer's Guide\u201d. Several\nextension modules are documented separately.  \nScreen shots| pawn is a compiler and an abstract machine. The compiler is a\nconsole utility (i.e. you run it in a \u201cDOS box\u201d or a terminal), and the\nabstract machine is basically a library. As such, there isn't really something\nlike a representative a screen shot. I have tried a few anyway... (Click on\nthe pictures for a detailed view.)Back to pagePawn IDE (for Windows and\nLinux)Back to pageDocumentation extracted generated by the compilerBack to\npagePawn Blocks Designer (visual programming)Back to pagePawn console debugger  \nProjects| A list of projects and products that use pawn as a scripting\nlanguage is on the page Where is pawn used?.  \n  \nFor any information not in this list, please browse through this page.\nHopefully you will find what you are looking for.\n\n## Introduction\n\nAn introduction to the pawn language and abstract machine from a programmer's\nperspective was published in the October 1999 issue of Dr. Dobb's Journal \u2014but\nat the time, the language was called Small. More verbose than the article, and\nmore appropriate for non-expert programmers, is the manual. The manual\ncontains a brief (tutorial) overview of the language, a language reference,\nprogramming notes on the abstract machine, casual notes about the why and how\nof many language features, and reference material.\n\n  * pawn is a simple, C-like, language.\n  * pawn is a robust language with a compiler that performs a maximum of static checks, and an abstract machine with (static) P-code verification and dynamic checks.\n  * pawn is quick; optimized assembly-language core interpreters are available for x86, ARMv4 (ARM7TDMI), ARMv6-M (ARM Cortex M0/M0+), ARMv7-M (ARM Cortex M3) instruction sets; and for 32-bit x86, there is Marc Peter's \u201cjust-in-time\u201d compiler.\n  * pawn is small. It has been fitted on an Atmel ATmega128 microcontroller, NXP LPC2138 and LPC2106 microcontrollers (ARM7TDMI core with 32 KiB RAM), ARM Cortex M0 microcontrollers with sometimes as little as 8 KiB RAM and 32 KiB Flash ROM, as well as on a Texas Instrument's MSP430F1611 (MSP430 core with 10 KiB RAM and 48 KiB Flash ROM). Using code overlays that are loaded on demand, pawn is able to run large scripts in little memory. Alternatively, scripts my run directly from ROM.\n  * pawn supports states and automatons in the language, including state-local variables \u2014 useful for event-driven or interrupt-driven systems, which usually have inherent \u201cstate\u201d.\n  * For porting purposes, pawn is written in C (C90) as much as possible; Big Endian versus Little Endian is handled.\n  * To suit internationalization and localization, pawn supports Unicode/UCS-4 and UTF-8, as well as codepages. The compiler can convert source code entered in a particular codepage to Unicode; it also supports source code files in UTF-8 format.\n  * Documenting the source code can be done with \u201cdocumentation comments&rdquo pawn compiler extracts those comments, combines them with information it deduces from the source code and writes an XML file that is immediately viewable (and printable) with a web browser.\n  * pawn is free and it is published under the Apache License 2.0, plus an exception clause to explicitly permit static linking of the library to commercial applications.\n  * More features... see the separate \u201cfeature page\u201d\n\nWhy pawn now that there is Java, Lua, REXX, and countless others? Well, when I\nneeded a language toolkit whose executable code can be embedded in resource\nfiles or animation file formats, that had a good interface to native\nfunctions, that added little overhead to the main application and could run on\nplatforms and microcontrollers with (very) little RAM, and that was pretty\nfast, I could not really find an existing toolkit that fitted my needs. That\nwas back in 1997 \u2014there are many more scripting languages, each with their own\nunique features. Yet, pawn is still one of the smallest and quickest of the\nlot.\n\nUnlike many languages, pawn is not intended to write complete full-scale\napplications in. pawn's purpose is to script the functionality provided by an\napplication or by a device. It is in purpose similar to Microsoft's \u201cVisual\nBasic for Applications\u201d, only quicker and smaller (and without the\ninstallation hassle).\n\npawn has been publicly available since 1998, and it has been steadily\nimproving: more error checking, several bugs slashed, new features, and an\nincrease in performance. There are still regular updates and patches: to fix\nbugs, to add features, or simply to enhance the ease-of-use.\n\nA couple of other points are worth mentioning:\n\n  * pawn is provided as is. I offer support and I value feedback, but there is no warranty or implied liability.\n  * The pawn toolkit consists of a compiler and an abstract machine (or \u201cvirtual machine\u201d). In the default setup, the abstract machine is embedded in an application (for easy interfacing with the application's objects and for best performance), while the compiler is a separate executable that the application launches as an external process. When embedding the compiler into an application, please note that the main function of the compiler, pc_compile(), is not re-entrant. In other words, compile only one script at a time.\n\n## Getting started\n\nThe first question is: what do you need? If you are using Microsoft Windows,\ndownload the pawn toolkit as a self-extracting setup file; this gives\neverything that you need to get started:\n\n  * binaries for Win32\n  * the editor and development environment (Quincy IDE)\n  * full source of all tools/libraries\n  * all documentation (Adobe Acrobat format)\n\nLinux users must build the toolkit from the source code. You can get the\nsource code from the GitHub project. The \u201cREADME.TXT\u201d file (in the GitHub\nproject) contains a section for building binaries from the source code, by\nusing the CMake makefile generator. You should also download the two\ndocumentation files \u201cLanguage Guide\u201d and \u201cImplementer's guide\u201d. The\n\u201cImplementers Guide\u201d will inform you about the options and configurations that\nyou have in building the binaries, and the \u201cLanguage guide\u201d will teach you the\npawn language. If you are new to programming, the thin guide \u201cA Gentle\nIntroduction to Programming\u201d aims at helping you with the first steps.\n\nAssuming that you have obtained (somehow) an executable version of the pawn\ncompiler and the pawn run-time, you should put it in a directory. However, the\npawn compiler also needs to locate \u201cinclude files\u201d. On many operating systems,\nthe pawn compiler is able to automatically read these header files from the\ndirectory \u201cinclude\u201d that is below the directory that the compiler is in\nitself. Thus, if the pawn compiler is in directory \u201cC:\\WhatEver\\Pawn\u201d, I\nsuggest that you also create directory \u201cC:\\WhatEver\\Pawn\\include\u201d and copy the\n\u201c*.inc\u201d files there. If your operating system is not compatible with Windows\nor Linux, the pawn compiler may not know how to locate the \u201cinclude\u201d directory\nand you have to specify it yourself with the \u201c-i\u201d command line option (when\nrunning the compiler).\n\nThat behind your back, locate one of the example scripts (e.g. \u201chello.p\u201d) and\ncompile it with:\n\n>\n>     pawncc hello\n\nThis should produce \u201chello.amx\u201d, which you can then run with:\n\n>\n>     pawnrun hello\n\nMany applications that use pawn, run the pawn compiler as a child process;\nthat is, the pawn compiler is often a separate, self-contained program. The\nabstract machine, however, is almost never a separate process: typically you\nwant the abstract machine to be integrated in the application so that scripts\ncan call into the application. In other words, you might be using \u201cpawncc\u201d as\nis, but you won't be using \u201cpawnrun\u201d as is. This is why pawnrun is kept short\nand dumb, \u201cpawnrun\u201d is a program that is mostly developed in the pawn manual\nto show you what you should do at a minimum to embed pawn into a program.\n\n## Support\n\nPlease visit the GitHub project for support of pawn. Note, however, that pawn\nis usually embedded in another product \u2014an application or a device. In that\ncase, you may need to ask support on the site or forum of that product. (See\nalso the page Where is pawn used?).\n\npawn is a free product that is maintained primarily in spare time. We make no\nmoney from the product, neither from the software, nor from the manual, nor\nfrom support. I therefore need to ask you for patience when we are slow in\nresponding to your questions or. Obviously, if you really need support or a\ncustom version of pawn, you can always hire us.\n\n## Downloads\n\nIf you want to find out more, you will need to download at least one or both\nmanuals. The book \u201cThe Language\u201d contains the syntax of the pawn language, and\n\u201cImplementer's Guide\u201d covers the interface functions of the abstract machine\nand various reference materials. If you are new to programming, first read the\n\u201cIntroduction to Programming\u201d booklet (just 12 pages). You need to be able to\nview or print Adobe Acrobat (\u201cPDF\u201d) files for example with Acrobat Reader.\n\nFull install, Microsoft Windows  \n---  \n  \n  * The pawn toolkit for Microsoft Windows in a self-extracting setup, version 4.1.7152 (8.0 MiB; 2024-03-24). This setup puts the tools in the appropriate directories. It includes precompiled binaries, the Quincy IDE, all documentation, all source code, codepage files and the AMX DLLs.\n\n  \nSource code archives  \n  \n  * You can get the latest (non-stable) source code from the GitHub project for pawn. You can either \u201ccheck-out\u201d the source code with git or subversion, or download it as ZIP file.\n  * Download the archived release 4.1.7152 of the pawn toolkit (675 KiB; 2024-03-23)\n  * Download the archived release 3.3.4288 of the pawn toolkit (617 KiB; 2020-04-03)\n  * Download the archived release 2.7.3 of the Small toolkit (418 KiB; 2020-04-03) This archived release is the last version of the software when it was still called Small. You may want to use it if Small is integrated in your product and you need full compatibility.\n  * Download the archived release 1.8.4 of the Small toolkit (189 KiB; 2020-04-03) This archived release is uploaded on request. Versions 2.0 and later use a different file format for the executable P-code, which is incompatible with the previous release.\n\n  \nDocumentation  \nThe documentation for pawn is in PDF format. You can download individual\ndocuments from the GitHub project. Alternatively, all documents are also\ncontained in self-extracting setup for Microsoft Windows.  \nRegression test  \n  \n  * A regression test suite for the pawn compiler and the abstract machine is available (31 KiB; 2020-04-03). The test suite requires a \u201cREXX\u201d interpreter to run. The test script works on Microsoft Windows systems, and it probably works on other systems with only minor modifications (I am using the Regina REXX interpreter, which runs on many platforms). You may want to run your compiler/abstract machine through this if you have modified anything.\n\n  \n  \n## Exception clause to the Apache License version 2.0\n\nAs a special exception to the Apache License 2.0 (and referring to the\ndefinitions in Section 1 of that license), you may link, statically or\ndynamically, the \u201cWork\u201d to other modules to produce an executable file\ncontaining portions of the \u201cWork\u201d, and distribute that executable file in\n\u201cObject\u201d form under the terms of your choice, without any of the additional\nrequirements listed in Section 4 of the Apache License 2.0. This exception\napplies only to redistributions in \u201cObject\u201d form (not \u201cSource\u201d form) and only\nif no modifications have been made to the \u201cWork\u201d.\n\n## Help requested\n\n  1. As I said, my first priority is getting the bugs out. If you come across bad code generation problems or other errors, send me the shortest program that illustrates the bug. I will be grateful for it.\n  2. pawn is reported to run under Microsoft DOS, all versions of Microsoft Windows (including Windows CE), Linux, MacOS, FreeBSD, XBox, PlayStation, FreeRTOS (on an ARM7-architecture), and \u03bcC/OS-II. If you have been able to port pawn to other environments, please send me the changes. Others will be grateful for it.\n  3. The documentation is getting better, I think, but I am not a good critic of my own work. Comments on my writing (especially errors and obscure paragraphs) are appreciated.\n\nTo contact me, send e-mail to thiadmer @ compuphase.com. Note, however, that I\nam regularly abroad and sometimes need 8 days to answer an e-mail.\n\nCopyright \u00a9 2024, Thiadmer Riemersma, CompuPhase Updated: 2024-03-24\n\nThis work is licensed under a Creative Commons License\n\n", "frontpage": false}
