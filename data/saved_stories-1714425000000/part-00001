{"aid": "40199309", "title": "Entrust considered harmful \u2013 Part 3", "url": "https://webpki.substack.com/p/entrust-considered-harmful-part-3", "domain": "webpki.substack.com", "votes": 2, "user": "bo0tzz", "posted_at": "2024-04-29 15:08:43", "comments": 0, "source_title": "Entrust considered harmful - Part 3", "source_text": "Entrust considered harmful - Part 3 - by Amir\n\n# Musings about WebPKI and Public Trust\n\nShare this post\n\n#### Entrust considered harmful - Part 3\n\nwebpki.substack.com\n\n#### Discover more from Musings about WebPKI and Public Trust\n\nA newsletter about the happenings in the world of Public Trust and WebPKI\n\nContinue reading\n\nSign in\n\n# Entrust considered harmful - Part 3\n\n### Two steps forward, no revokes back\n\nAmir\n\nApr 29, 2024\n\nShare this post\n\n#### Entrust considered harmful - Part 3\n\nwebpki.substack.com\n\nShare\n\nThis piece is Part 3 of a series on Entrust\u2019s historically harmful behavior as\na CA. If you haven\u2019t read Parts 1 and 2 yet, you can find the links here:\n\n#### Entrust considered harmful - Part 1\n\nAmir\n\n\u00b7\n\nApr 15\n\nRead full story\n\n#### Entrust considered harmful - Part 2\n\nAmir\n\n\u00b7\n\nApr 22\n\nRead full story\n\nSimilar to Part 1, I\u2019m using a SIRQ (Subjective Incident Response Quality) to\nassign some subjective score to each of these incidents.\n\nThanks for reading Musings about WebPKI and Public Trust! Subscribe for free\nto receive the next chapter of this saga.\n\nIn this part, we take a look at a handful of other incidents Entrust has\nhistorically had. We notice that later on, there is a remarkable improvement\nin their incident response.\n\n###\n\nEntrust: Invalid data in State/Province Field\n\n  * Incident Start: 2020-08-10\n\n  * Incident Reported: 2020-08-12\n\n  * Full Incident Response: 2020-08-12\n\n  * Incident Closed: 2021-06-07\n\nIn this incident, Entrust was informed by a third-party that they\u2019ve issued\ncertificates with invalid State and Province data.\n\nIn their incident report, Entrust claims that they\u2019ve found the impacted\ncertificates, and reached out to the subscribers to set a revocation date of 5\ndays from the incident being reported to them (2020-08-15).\n\nAccording to Entrust: there were 397 misissued certificates, and 395 of them\nbelonged to a single subscriber, the remaining two certificates belonged to\nanother subscriber.\n\nUnfortunately, in the same incident report they say that the subscriber with\n395 impacted certificates has claimed that the revocation deadline wouldn\u2019t be\npossible for them. Entrust agrees to delay the revocation, however Entrust\ndoes not set a deadline on when the revocation will actually happen.\n\nThese types of failures are not uncommon with OV and EV certificates. The\nunfortunate thing is that Entrust has dealt with similar incidents before [1],\n[2], [3], [4], and it\u2019s clear that their remediation efforts did not go far\nenough.\n\nIn the report, Entrust claims that they will:\n\n> We will be doing a wider check of our certificate population to check for\n> other uses of \u201cNA\u201d, \u201cN/A\u201d, \u201cNot Applicable and we will also check\n> state/province and country combinations based on the current ISO\n> state/province country lists that are available. This will also allow us to\n> check for any other potential issues, such as spelling mistakes.\n\nOn 2020-08-13, Entrust claims that:\n\n> We ran a full scan on our certificate population and did not find any other\n> certificates where the state was set to \"NA\", N/A\", or Not Applicable.\n\nOn 2020-08-18, they say that they\u2019ve set a deadline of September 5th, 2020 to\nrevoke the remaining 395 certificates that all belong to the large\norganization.\n\nOn 2020-09-15, they claim that all the impacted certificates were revoked as\nof 2020-09-04.\n\nRyan Sleevi then chimes in, asking if Entrust has only really root caused this\nto human error. He also asks if false-positive testing is done with the\nvalidation staff:\n\n> Did I overlook a more detailed analysis here as to the root cause? I see the\n> third case discussed somewhat at length, but this first case, as best I can\n> tell, is mostly attributed to human error? Have I overlooked anything?\n>\n> Related, can you discuss whether Entrust performs any false-positive testing\n> of secondary reviewers? That is, send approvals to a secondary set of eyes\n> that have known issues, to simulate them making it past the first reviewer,\n> to ensure that they're detected, or to test the effectiveness of existing\n> controls?\n\nTo which Entrust responds that this was both a human failure and system design\nfailure. They also say that Entrust does not do false-positive testing of the\nsecondary reviewers. Entrust them commits to doing false-positive tests\nregularly by January 2021.\n\nOn 2020-09-27, Entrust says that they\u2019ve received another report of issuing\ncertificates with the wrong state data.\n\nRyan then chimes in, saying that the review Entrust promised to do wasn\u2019t\nactually done:\n\n> Dathan: It sounds like this new incident is completely unrelated to those\n> explanations offered in Comment #1. It also suggests that a holistic\n> evaluation of existing certificates wasn't done (per your commitment to do\n> exactly that on Comment #1). Given that commitment was made on 2020-08-12 to\n> systemically evaluate and address this, it seems like it both could and\n> would have been accomplished by now, so I'm concerned that Comment #10\n> highlights third-parties are still finding issues.\n>\n> Specifically, the commitment made in Comment #1 was\n>\n\n>> we will also check state/province and country combinations based on the\ncurrent ISO state/province country lists that are available\n\n>\n> I understand that Comment #2 stated:\n>\n\n>> We ran a full scan on our certificate population and did not find any other\ncertificates where the state was set to \"NA\", N/A\", or Not Applicable.\n\n>\n> But that's not all that you committed to.\n\nTo which Entrust replies that they\u2019ve not done the full test. By 2020-10-27,\nit seems like Entrust has been able to successfully run these scans, and are\nnot having this problem anymore.\n\nEntrust did not stop issuance during this incident response, even though the\nfixes for this had not been implemented. More certificates are found to be\nmisissued after this incident had been open. This is once again, Entrust\ndeciding to keep misissuing certificates while knowing that their system has a\nknown-bug that\u2019s actively misissuing certificates.\n\nEntrust then updates on 2021-05-19, stating that they\u2019ve found two more\nmisissued certificates. Note that this is about 9 months after the initial\nproblem was found. It took Entrust till 2021-05-13 to update their services\nwith the fix for this problem.\n\nSIRQ: 2\n\n###\n\nEntrust: Late Revocation for Invalid State/Province Issue\n\n  * Incident Start: 2020-08-12\n\n  * Incident Reported: 2020-08-12\n\n  * Full Incident Response: 2020-08-12\n\n  * Incident Closed: 2020-10-09\n\nSince Entrust failed to revoke the impacted certificates in the previous\nincident on time, this incident had to be filed. Unfortunately in this\nincident, Entrust puts the interests of their subscriber ahead of the\ninterests of public trust once more. However, compared to previous incidents,\nthey weren\u2019t too untimely with their revocation.\n\nThe action items from this incident do nothing to prevent this incident from\nhappening again. They sound more like a sales pitch, than an action item:\n\n> Educating Customers on Best Practices to Handle Emergency Certificate\n> Replacement Scenarios Entrust deals with many large international\n> organizations that issue certificates to many departments and sub\n> organizations. Certificates are often managed by a smaller group that\n> delivers certificates to many individuals within the organization. One of\n> the major challenges in managing the regular certificate lifecycle within\n> these larger organizations is tracking who ultimately owns the certificate,\n> where the certificate is deployed, and the type of system or application\n> that requires this certificate. While knowing this information does not\n> solve every issue related to this late revocation problem, such as\n> expediting change controls/outages process and having resources to generate\n> new CSRs/keys and deploy new certificates, it can certainly help to cut down\n> the amount of time to organize certificate replacement. Our certificate\n> management system includes built-in tracking and reporting capabilities that\n> can help customers find the right information they need during an emergency\n> situations to help expedite the communication process. We need to make sure\n> that our customers are leveraging this as much a possible in the event that\n> there is a requirement to quickly replace certificates for any reason.\n>\n> Emphasizing the Value in Automation Certificate lifecycle automation is a\n> valuable tool that can be used to speed up the certificate\n> deployment/replacement process and eliminate the possibility of human error.\n> However, there are many challenges to fully automating PKI within large\n> organizations, including cost and environment complexity. As a CA, we have a\n> responsibility in helping our customers achieve higher levels of automation.\n> We do support many third party integrations and certificate lifecycle\n> automation tools though our APIs, along with other automation protocols that\n> our customers can leverage. While we cannot force our customers to use these\n> tools, we can certainly do more when it comes to emphasizing the need for\n> automation, and these events underscore how automation can help\n> organizations to save resources and reduce their risk of running into issues\n> when undergoing high volume certificate replacement.\n\nSIRQ: 1\n\n###\n\nEntrust: Incorrect keyUsage for ECC certificate\n\n  * Incident Start: 2020-09-25\n\n  * Incident Reported: 2020-09-25\n\n  * Full Incident Response: 2020-09-25\n\n  * Incident Closed: 2020-10-31\n\nIn this incident, Entrust issued an ECC certificate with the `keyUsage`\nextension having the \u201cKey Encipherment\u201d usage set. They were able to find this\nproblem with post issuance linting.\n\nUnfortunately, Entrust says \u201cUnder investigation\u201d on whether or not they\u2019ve\nstopped issuances for the time being.\n\nWe also get a glimpse into how this mistake came to be:\n\n> The certificate management system is set to issue certificates in the\n> Enterprise and Retail model. The PKI hierarchy is set with different CAs to\n> issue certificates with RSA or ECC subscriber keys. The certificate profiles\n> for this CAs are set to meet the requirements of the BRs, RFC 5280 and RFC\n> 5480. The error occurred when a Retail OV ECC SSL certificate was issued\n> from a OV RSA SSL CA. ECC keys are not supposed to be supported in the\n> Retail model, but in this case the request was not blocked. Unfortunately,\n> all SSL certificate requests in the Retail model are directed to CA\n> configured to issue subscriber certificates with RSA keys.\n\nIn this report, Entrust does not yet commit to any action items.\n\nRyan asks how this incident overlooked existing incidents of this nature.\nEntrust claims that the linked incidents are not related to this incident:\n\n> (In reply to Ryan Sleevi from comment #1)\n>\n\n>> From the timeline, this seems to overlook issues like Bug 1647468 , or\nfurther back, Bug 1560234, as well as discussion within the IETF for the past\nyear. Could you help factor these in to your timeline?\n\n>\n> I don't think that the issues referenced apply to our issue. We were aware\n> of the requirement; however, I cannot put a specific date on when we\n> understood the requirement. Our policy was correct when we created CAs to\n> issue certificate with ECC keys in April 2016. This policy was also\n> implemented in our post issuance linting software.\n>\n> The current issue is not a misunderstanding of the requirement, but that\n> there is a bug in the enrollment software which sent a certificate request\n> with an ECC key to a CA which was configured to issue subscriber\n> certificates with an RSA key. This issue is currently being investigate and\n> we will post a plan for resolution.\n>\n> We also planned to address that the issue was not detected with zlint. We\n> found\n> https://github.com/zmap/zlint/pull/479/commits/90dbcc6b3f5623441b09754e219bfb4e71ce9ce0\n> and https://github.com/zmap/zlint/issues/454. We support this change.\n> However, if the change is not made available, we will implement in our pre-\n> issuance linting.\n>\n> More details to follow.\n\nAfter a few back and forths, Ryan Sleevi states:\n\n> Thanks Bruce, that's helpful at least to understand the disconnect.\n>\n> I think the approach I was hoping for, for all CAs, is that:\n>\n>   * An incident is reported by another CA\n>\n>   * The (non-affected) CA looks at:\n>\n>     * The resulting misissuance\n>\n>     * The root causes\n>\n>     * The mitigations the CA is proposing/applying\n>\n>   * The (non-affected) CA examines their own system:\n>\n>     * Is such a misissuance possible (independent of root causes)?\n>\n>       * What are the controls to prevent this?\n>\n>       * How are they tested?\n>\n>       * Have they been reviewed to make sure documentation and production\n> are aligned?\n>\n>     * Are there variants of the root cause that can affect the CA?\n>\n>     * Does the non-affected CA have similar mitigations in place?\n>\n>\n\n>\n> Going to these other issues, it seems like had an examination like the above\n> been done, then even though the supposed root causes (lack of awareness) are\n> different, the question would have been: \"Would our pre-issuance systems\n> prevent this?\", which would have determined that no, not yet. The\n> distinction between keyAgreement and keyEncipherment is, to me at least,\n> largely irrelevant; the issue at play here is a disallowed key usage (which\n> does seem identical between these issues)\n>\n> In your original report, you said:\n>\n\n>> ECC keys are not supposed to be supported in the Retail model, but in this\ncase the request was not blocked. Unfortunately, all SSL certificate requests\nin the Retail model are directed to CA configured to issue subscriber\ncertificates with RSA keys.\n\n>\n> So this is why I bring up the other issues. If you had, say, pre-issuance\n> linting, presumably the attempt to use the Retail OV RSA profile with an ECC\n> key would have flagged the pre-issuance lint, which would have discovered\n> that the Retail profiles were sending everything to the RSA profile (at\n> least, as I understand it) and that ECC keys weren't getting blocked.\n>\n> Does that at least help better explain the relation and relevance of these\n> other issues? The keyEncipherment vs keyAgreement seems largely moot, and\n> this is more generally about using those other incidents (of the keyUsage\n> not matching the subscriber key) to make sure that sufficient controls were\n> in place to ensure that keyUsage, well, matched subscriber keys.\n>\n> Do you have a timline for a plan for remediation, even an initial WIP one?\n\nTo which Entrust answers:\n\n> To re-state, SSL certificates using ECC keys are not supported in our Retail\n> mode. However, we did find path where the Retail service does not reject a\n> CSR with an ECC key. Since the Retail service only uses CAs which have\n> certificate profiles based on an RSA key, the CA signed a certificate with\n> an ECC key and the incorrect key usage. This error is being corrected.\n>\n> In addition, the pre-issue linting which uses zlint, did not provide an\n> error and block certificate issuance. However, zlint does provide a Notice\n> that the key usage is incorrect. We will update zlint to the latest version\n> and update our code to provide an error, which will mitigate this error in\n> the future.\n>\n> Our timeline to have this incident remediated is no later than 30 October\n> 2020.\n\nA few worries I have reading this:\n\n  * For over a month, anyone who had read this incident, could cause Entrust to issue an invalid certificate by just passing in an ECC CSR.\n\n    * This \u201cmistake\u201d is on the Key Usage extension, which is an important extension in the x.509 certificate. It effectively defines what the powers of this certificate are.\n\n  * Entrust never clarifies how they\u2019re monitoring bugzilla for other incidents. We\u2019ve seen time and time again that Entrust has difficulties actually applying lessons from other CA\u2019s incidents to their own CA. (See: Entrust: OCSP response signed with SHA-1)\n\n  * For some reason, Entrust doesn\u2019t use their post issuance linter, in the preissuance phase. I\u2019m really not sure why this is such a sticking problem for them. In the previous two parts of this series, we\u2019ve seen this pattern of not holistically applying linters across their issuance stack multiple times.\n\n  * Why is there a difference between their `Retail` and `Enterprise` stacks, to the point where one is capable of ECC and one isn\u2019t? That\u2019s just so much more complexity to manage. A good incident response would\u2019ve explained the history of how they\u2019ve ended up with two different stacks.\n\nSIRQ: 0\n\n###\n\nEntrust: Failure to provide a preliminary report within 24 hours\n\n  * Incident Start: 2020-09-27\n\n  * Incident Reported: 2020-09-27\n\n  * Full Incident Response: 2020-10-01\n\n  * Incident Closed: 2021-01-27\n\nAn external user reports that they\u2019ve sent Entrust a Certificate Problem\nReport and Entrust has not responded to them with a preliminary report within\nthe 24 hour time frame set by the baseline requirements.\n\nEntrust does a good job here detailing the timeline of the incident, and\ncreates action items that will prevent a similar problem in the future:\n\n> There are 3 things that we will implement to improve our incident response\n> process and our requirement to provide a preliminary report:\n>\n> (1) Create a workflow in our CRM tool to enforce the incident response\n> process steps and send out periodic email alerts to the compliance team if\n> the ticket does not proceed to the next step within a certain amount of\n> time. The workflow would allow the agent to transition the issue throughout\n> the various milestones: 1. Certificate problem report received and tagged in\n> our system as a compliance issue (this step already exists) 2. Certificate\n> problem confirmed internally as mis-issuance or key compromise 3. Provide\n> preliminary report to subscriber 4. Provide a preliminary report to the\n> reporter 5. Revoke certificates within the deadline 6. Case closed\n>\n> (2) As part of this workflow, implement a preliminary report template to\n> make sure that the agent always sends out the right information.\n>\n> (3) Training on the CRM updates and template for the agents who will be\n> handling intake of certificate problem reports\n\nHowever, unfortunately Entrust fails to provide a timeline for these. Entrust\nthen updates us on 2020-10-08, a week after the incident report that no\ndeadlines have been set for these yet.\n\nLater Entrust confirms that the implementation has been set to a target date\nof January 2021. Entrust does get this change implemented by then.\n\nSIRQ: 4\n\n###\n\nEntrust: Subscriber provides private key with CSR\n\n  * Incident Start: 2020-10-19\n\n  * Incident Reported: 2020-10-23\n\n  * Full Incident Response: 2020-10-23\n\n  * Incident Closed: 2020-12-11\n\nEntrust discovers that a customer has included their private key, alongside\nthe certificate signing request sent to Entrust. This would mean that the\nprivate key is compromised, and is a misissuance. Unfortunately, while Entrust\nwas investigating this, they misissued another certificate with a similar\nproblem. This means that Entrust, once again, did not turn off issuance when\nthis problem was discovered.\n\nThis incident highlights the importance of public incident reporting. Various\nother CAs comment on the incident, explaining that they were also impacted by\nthis and thanks to this issue were able to address it.\n\nIn fact, Entrust goes above and beyond by:\n\n> This is the SHA1 hash of the hex representation of the key modulus for the\n> certificates with compromised keys. This will help other CAs assess if they\n> issued any certificates with a compromised key as indicated in this bug.\n>\n> For clarification, we posted the Debian Weak Key list style of hash as we\n> assume that the CAs would already be used to ingesting it. This\n> representation is only the last 10 bytes of the hash. I believe that it is\n> discussed here, https://wiki.debian.org/SSLkeys.\n\nThis is genuinely a great incident report. It makes it clear to understand\nwhat the problem was. Entrust shared samples of how this input looks like, and\ndetails to aid CAs in searching for these.\n\nUnfortunately though Entrust did not stop their certificate issuance, while\nthey were working on the fix. If fast remediation isn\u2019t possible, its better\nto stop issuance. Beyond that, the title of the incident seemed like it\u2019s\nblaming the subscriber for a failure on Entrust\u2019s software not properly\nsanitizing the input from their subscribers.\n\nSIRQ: 3\n\n###\n\nEntrust: Incorrect Business Category Value Discovered in an EV SSL Certificate\n\n  * Incident Start: 2021-01-05\n\n  * Incident Reported: 2021-01-06\n\n  * Full Incident Response: 2020-01-08\n\n  * Incident Closed: 2021-07-15\n\nIn this incident, Entrust discovered that they\u2019ve been misissuing a\ncertificate since 2019, with the wrong business category:\n\n> On 5 January 2021 at approximately 17:00 UTC, the Entrust Verification team\n> discovered a single EV SSL certificate with an invalid Business Category\n> value. This was discovered during a regular EV business profile re-\n> validation. It appears that during a contact update change on the business\n> profile in 2019, the business category was inadvertently updated by an agent\n> from its correct value (Government entity) to an incorrect value (Private\n> Organization).\n\nWhats concerning here is that, this issue was missed for effectively two\nyears. Once ins 2019, and once in 2020.\n\nEntrust then continues with how they investigated this problem:\n\n> After conducting multiple interviews with senior agents along with agents\n> who were involved with the original mistake on 18 April 2019, we found that\n> the main reason this mistake was first introduced is due to a lack of\n> highlighting changes with the previous verification data when updating a\n> business profile in our Verification system.\n\nRyan Sleevi responds with:\n\n> Thanks Dathan.\n>\n> I'm actually encouraged to see this report, because I believe it's a sign of\n> Entrust improving on its incident reporting. From it, I believe I was able\n> to get an understanding of what went wrong, and it also appears that your\n> mitigations - looking at the systemic factors such as the human interface -\n> are meaningful to address root causes, as opposed to suggesting it's an\n> operator training issue (with the operators being trained to use the\n> existing interface).\n\nEntrust then commits to a release in July, with the expected UI changes.\nEntrust delivers on this change, and shares screenshots of what the new\napplication is doing to make changes more obvious.\n\nSIRQ: 5\n\n###\n\nEntrust: Incorrect Jurisdiction Country Value in an EV Certificate\n\n  * Incident Start: 2021-03-03\n\n  * Incident Reported: 2021-03-03\n\n  * Full Incident Response: 2020-03-04\n\n  * Incident Closed: 2021-07-15\n\nIn this incident, Entrust discovers that they are issuing certificates for\norganizations in Botswana (Country Code: BW), but using the Jursidiction\nCountry set to South Africa (Country Code: ZA).\n\nSimilar to the previous incident, Entrust claims that their ineffective WebUI\nis ultimately the root cause of this incident. And then some complexity\nregarding country codes:\n\n> Another point to note is that Entrust issues many certificates in ZA and\n> often uses a QGIS known as \u201cCIPC\u201d. The QGIS that was used for this\n> particular profile in BW is known \u201cCIPA\u201d. It was noted during our\n> investigation that the agent mistook \u201cCIPA\u201d for \u201cCIPC\u201d, which also led to\n> the agent entering the incorrect value of ZA. Also, note that the field for\n> the Jurisdiction Country value in our vetting system is currently a country\n> drop-down that is selected by the agent that is independent of the vetting\n> source being used.\n\nUltimately, this and the previous incident were probably discovered as a\nremediation item for: Entrust: Invalid data in State/Province Field\n\nSIRQ: 5\n\nThis marks the end of Part 3 of this series. To summarize:\n\n  * Entrust shows an improvement in their incident response.\n\n  * There weren\u2019t any incidents requiring mass-revocations. The largest revocation was about 370 certificates, and Entrust took a month to get those down.\n\n  * Entrust does not stop their certificate issuance (again), when detecting that their CA is misissuing certificates.\n\nWhere Entrust has historically struggled the most is mass revocations. These\nseries of incidents did not have any large mass revocations. I believe this\nanalysis would\u2019ve gone differently based on what we\u2019ve seen in the past, and\nrecently, if the circumstances of these incidents were different.\n\nThe conclusion I get from this is that Entrust knows how to properly do\nincident response. They\u2019re just choosing not to do so when the incident\nrequires large number of revocations. This is deeply problematic for Entrust.\nIgnorance of the BRs, and rules and requirements is not why they\u2019re struggling\nwith incident response. They are struggling because they are actively choosing\nto put their subscribers over the requirements for CAs.\n\nOut of these seven incidents, Entrust self-discovered 5 of them and the last\ntwo were externally reported.\n\nThanks for reading Musings about WebPKI and Public Trust! Subscribe for free\nto receive the next chapter of this saga.\n\nShare this post\n\n#### Entrust considered harmful - Part 3\n\nwebpki.substack.com\n\nShare\n\nEntrust considered harmful - Part 1\n\nA series on harmful pattern of behavior by Entrust\n\nApr 15 \u2022\n\nAmir\n\n5\n\nShare this post\n\n#### Entrust considered harmful - Part 1\n\nwebpki.substack.com\n\nEntrust mis-issues a certificate, Refuses To Follow CA/B Rules\n\nExtended Validation certificates are a massive hole in web security\n\nMar 15 \u2022\n\nAmir\n\n1\n\nShare this post\n\n#### Entrust mis-issues a certificate, Refuses To Follow CA/B Rules\n\nwebpki.substack.com\n\nEntrust considered harmful - Part 2\n\nWhere Entrust chooses to continue misissuing certificates\n\nApr 22 \u2022\n\nAmir\n\n1\n\nShare this post\n\n#### Entrust considered harmful - Part 2\n\nwebpki.substack.com\n\nReady for more?\n\n\u00a9 2024 Amir\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n", "frontpage": false}
