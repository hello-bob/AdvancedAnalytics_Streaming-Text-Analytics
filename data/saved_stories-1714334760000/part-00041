{"aid": "40188147", "title": "(The) Postman Carries Lots of Secrets", "url": "https://trufflesecurity.com/blog/postman-carries-lots-of-secrets", "domain": "trufflesecurity.com", "votes": 1, "user": "aa_is_op", "posted_at": "2024-04-28 12:34:48", "comments": 0, "source_title": "(The) Postman Carries Lots of Secrets \u25c6 Truffle Security Co.", "source_text": "(The) Postman Carries Lots of Secrets \u25c6 Truffle Security Co.\n\nTHE DIG\n\n(The) Postman Carries Lots of Secrets\n\nJoe Leon\n\nApril 25, 2024\n\ntl;dr Postman, the popular API testing platform, hosts the largest collection\nof public APIs. Unfortunately, it\u2019s become one of the largest public sources\nof leaked secrets. We estimate over 4,000 live credentials are currently\nleaking publicly on Postman for a variety of popular SaaS and cloud providers.\n\nIn this article, we share our research on credential exposure on Postman. Want\nto scan a Postman workspace with TruffleHog right now? Try our new command:\n\n    \n    \n    trufflehog postman --workspace <workspace_id> --token <postman_api_token>\n\n## Q: Where are secrets leaking on Postman?\n\nA: Postman\u2019s Public API Network.\n\nA few years ago, to compete with RapidAPI and others, Postman launched a\npublic network for developers to \u201cshare and showcase\u201d their APIs.\n\nPostman users make their private workspaces and collections public for the\nentire world to use. On the surface, the idea of conveniently sharing API\ndocumentation with others sounds great, especially since so many API\ndevelopers already work out of Postman.\n\nUnfortunately, an unclear UI and ambiguous taxonomy has created an environment\nwhere developers are unintentionally leaking thousands of secrets. This has\ncreated a significant opportunity for attackers to steal credentials.\n\n## Q: What secrets are leaking on Postman?\n\nA: We found live secrets from 183 different SaaS and cloud providers,\nincluding AWS, GCP, OpenAI, GitHub, and Postman. The most common type was a\nsensitive URI.\n\nWe used Postman\u2019s search API to create a list of ~40,000 unique workspaces and\nthen scanned each workspace with TruffleHog\u2019s new Postman secret scanner. We\ndiscovered 1,689 live, unique credentials, representing 183 different types of\nsecrets.\n\nThe most commonly identified secret type was a sensitive URI. Sensitive URIs\ninclude secrets like Slack Webhooks. In this research, the most common\nsensitive URI we found was a URL containing basic auth information. For\nexample, the screenshot below shows a user leaking a shopify credential in\ntheir Shopify store\u2019s link.\n\nThe other most popular key types were: GitHub Personal Access Tokens,\nOpenWeather, OpenAI and (unsurprisingly) Postman API Keys.\n\nWe also found evidence of many, many more secret types that TruffleHog does\nnot detect. For example, TruffleHog does not currently have an Elastic Cloud\ndetector (feel free to contribute one!). We found thousands of requests\nreferencing Elastic Cloud resources. And many of them appeared to contain live\ncredentials, like the screenshot below.\n\nWe also found many instances of QA teams for major multinational companies\nleaking credentials for internally-developed applications that TruffleHog does\nnot detect out-of-the-box.\n\nAs an example, a well-known residential, commercial and industrial technology\ncompany leaked their entire production tech stack for a new multi-million\ndollar product line, including IAM servers, ElasticSearch instances and much\nmore. (Don\u2019t worry! We told them. It\u2019s been removed!)\n\n##### A Note About our Research Process:\n\nOur research goal was to identify as many live credentials in Postman\u2019s Public\nAPI Network as we could. We first built a list of workspaces and then ran each\none through TruffleHog\u2019s postman secret scanner.\n\nTo create a list of workspaces, we built a list of search terms that\nreferenced specific secrets that TruffleHog could detect, ran each term\nthrough Postman\u2019s search API, and then deduplicated the results.\n\nA Big Caveat: Postman limits search results to 200 workspaces, so in many\ncases, we were only able to obtain a small fraction of the public workspaces\nthat might contain a relevant live credential.\n\nFor example, searching the term PayPal shows 1k + results, but we could only\naccess 200 of those.\n\nA Second Caveat, Postman\u2019s search does not look at variable field names or\nauthorization information, which would have produced a highly targeted list.\nInstead, the search function relies on string matching with higher-level\nconcepts, like Workspace names, which might not indicate the secret hiding\ninside.\n\nPoint being: our total findings represented a subset of the all leaked keys.\nNext, we attempted to estimate how many total keys have leaked.\n\n## Q: How many secrets are leaking on Postman?\n\nA: At least 4,000 live secrets are currently leaking on Postman, but thousands\nmore likely exist.\n\nIn our research above, we identified 1,689 live, unique credentials from\n~40,000 different workspaces. Postman advertises over 200,000 workspaces on\ntheir Public API Network. Considering we sampled less than 20% of the total,\nit stands to reason that additional keys exist. But our previous research was\nbiased. The goal was to identify as many keys as possible, so we used search\nterms that corresponded to secrets that TruffleHog could detect.\n\nTo fairly estimate the quantity of leaked secrets across Postman\u2019s Public API\nNetwork, we created a control group of workspaces using generic search terms\nthat had no relation to specific credential types.\n\nWe ended up with ~6,500 control workspaces. We ran three trials. During each\ntrial, we built a random list of 1000 workspaces from the control list (no\nreplacement) and checked each one for secrets using TruffleHog.\n\nThe table below shows the results of each trial.\n\nOn average 1.833% of the control workspaces leaked 1.31 unique secrets.\n\nAssuming there are exactly 200,000 public workspaces, then we can reasonably\nexpect 3,667 workspaces to leak a secret. Since the average workspace leaks\n1.31 unique secrets, we can expect to find 4,804 leaked secrets.\n\nBut what about duplicates across workspaces? Using data from our previous\nresearch (section above), we found that a secret leaked by a workspace had an\n82% chance of being globally unique across the entire dataset.\n\nIf we multiply our original estimate of 4,804 by a uniqueness factor of 82%,\nwe arrive at just about 3,939 secrets.\n\n##### Are there more than 4,000 secrets leaking? 100%.\n\nWe claimed that at least 4,000 live secrets are currently leaking on Postman,\nbut thousands more likely exist. Why are we confident that so many more might\nexist?\n\n  1. We don\u2019t know the exact size of the Public API Network. It just says \u201c200k +\u201d. If that figure is closer to 300,000, then our estimate could be as high as 6,000 secrets.\n\n  2. TruffleHog cannot identify every secret in the world. It only works on 800 secret types. There are thousands of additional SaaS providers on the market and we found evidence of many of them on Postman.\n\n  3. TruffleHog cannot confirm credentials for applications and services that are only reachable on internal networks (unless you run it from within that network). We found evidence of hundreds of thousands of requests referencing internal IP address spaces. For example, searching for the internal \u201c10.10.0.0/16\u201d CIDR range using the search term \u201chttp://10.10\u201d revealed close to 200,000 requests.\n\n##### So, is 4,000 secrets a lot?\n\nLet\u2019s flip the question: is finding a secret on 1.83% of all public workspaces\na lot? Yes. From all of the research we\u2019ve done on various other sources,\ndevelopers seem to be leaking data at a much higher rate on Postman.\n\n## Q: Why are secrets leaking on Postman?\n\nA: Forks, confusing UI, and Insufficient Secret Scanning.\n\n### Forks\n\nThe core purpose of the Public API Network is to \u201cshare and showcase\u201d API\ndocumentation. To facilitate this, Postman created a \u201cfork\u201d feature, which\nfunctions similarly to GitHub\u2019s fork. You can fork a public collection and\nthen use the API documentation on your own.\n\nUnfortunately, many users publicly fork popular collections, such as OpenAI,\nand then plug their live API keys in to test it out. Anyone can then see that\nkey.\n\nWe tracked two popularly forked collections: OpenAI and Pynt (a Python\nsecurity tool).\n\nWe found 16% of all public OpenAI forks contained live credentials and 20% of\nPynt forks did.\n\nUnfortunately, while the fork feature is convenient, without proper user\neducation and safe defaults, Postman users will continue to expose their\ncredentials in public forks.\n\n### Secret Variable Types\n\nPostman provides users with two types of Environment variables: \u201cdefault\u201d and\n\u201csecret\u201d. The term \u201csecret\u201d is extremely misleading.\n\nWhile users see asterisks blocking the public view of their environment\nvariable, a \u201csecret\u201d variable value is simply masked data. Anyone can unmask\nit and view the value.\n\nDuring our research, we found that 32% of all environment variables containing\nlive credentials had the \u201csecret\u201d type marked. Our assumption is that those\nusers believed they were securely storing their variable values, but they were\nnot.\n\n### Current Value vs. Initial Value\n\nIn the screenshot above, you can see two values for the global environment\nvariable API_KEY: \u201cInitial value\u201d and \u201cCurrent value\u201d.\n\nInitial values are synced to Postman\u2019s servers and viewable by anyone with\naccess to the workspace, which in the context of the public API network is\neveryone.\n\nCurrent values are local to the user\u2019s Postman client and not stored remotely,\nnor viewable by the whole world.\n\nUnfortunately, the terms \u201cInitial value\u201d and \u201cCurrent value\u201d are extremely\nconfusing and do not properly convey the security implications of key storage.\n\nAnd that\u2019s not just our opinion, we found hundreds of leaked keys sitting in\n\u201cInitial value\u201d fields. Additionally, there are endless threads on Postman\u2019s\nGitHub support page about fixing the default behavior associated with storing\nenvironment values in these fields.\n\n### Insufficient Secret Scanning\n\nPostman offers a basic secret scanner. And it does detect some key types.\nHowever, the default behavior is to alert users after publishing that they\u2019ve\nleaked a secret.\n\nUndoubtedly, this provides some help to users. However, the default behavior\nshould force users to accept the risk of making a workspace public that\ncontains known-secrets. A small pop-up on the bottom of the screen can be\neasily disregarded.\n\n## THE DIG\n\nThoughts, research findings, reports, and more from the Truffle Security Co.\n\nApr 25, 2024\n\n###### (The) Postman Carries Lots of Secrets\n\nApr 12, 2024\n\n###### Do Secrets Leak on Public GitHub Gists in 2024?\n\nSTAY STRONG\n\nDIG DEEP\n\n#trufflehog-community\n\n#Secret Scanning\n\n\u00a9 2023 Truffle Security Co.\n\nPrivacy policy\n\nTerms and conditions\n\nData processing agreement\n\nAcceptable use policy\n\n", "frontpage": false}
