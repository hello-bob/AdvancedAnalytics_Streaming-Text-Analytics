{"aid": "40096133", "title": "WasmCloud 1.0: Build / Run WebAssembly Apps in Production on Any Cloud, Any Edge", "url": "https://wasmcloud.com/blog/wasmcloud-1.0-webassembly-apps-production-any-cloud-any-edge", "domain": "wasmcloud.com", "votes": 1, "user": "rapnie", "posted_at": "2024-04-20 09:59:13", "comments": 0, "source_title": "wasmCloud 1.0: Build and Run WebAssembly Apps in Production on Any Cloud, Any Edge", "source_text": "wasmCloud 1.0: Build and Run WebAssembly Apps in Production on Any Cloud, Any Edge | wasmCloud\n\nSkip to main content\n\n\ud83c\udf89\ufe0f wasmCloud v1.0 is available! Read the 1.0 documentation and try it out now.\n\n# wasmCloud 1.0: Build and Run WebAssembly Apps in Production on Any Cloud,\nAny Edge\n\nApril 18, 2024 \u00b7 7 min read\n\nBrooks Townsend\n\nWe're thrilled to announce the 1.0 release of wasmCloud, the universal\napplication platform hosted by the Cloud Native Computing Foundation (CNCF)\nthat helps you build and run globally distributed WebAssembly applications on\nany cloud and any edge.\n\nYou can try it right now\u2014download the wasmCloud Shell (wash) and dive in to\nour quickstart.\n\nThe 1.0 release is a grand culmination of effort from the 2024 Q1 roadmap\nwhich focused primarily on standardization of host control interface and RPC\nprotocols, events, and WebAssembly component support.\n\nWhen we set down our goals for wasmCloud 1.0, we identified five top features\nfor the project\u2014key promises that we want wasmCloud to fulfill:\n\n  1. Declarative WebAssembly Orchestration\n  2. Seamless Distributed Networking\n  3. Vendorless Application Components\n  4. Completely OTEL Observable\n  5. Defense-In-Depth Security By Default\n\nNow that we've reached 1.0, let's check in on each of those features.\n\n## Declarative WebAssembly orchestration\n\nOrchestrating WebAssembly components across distributed environments poses two\nbig challenges:\n\n  1. Orchestrators like Kubernetes aren't particularly well-suited to distributed, heterogenous environments.\n  2. Container orchestrators expect everything to act like a container\u2014but components are something fundmentally new.\n\nTo leverage the composability and flexibility of components and distribute\nthem across, say, multi-region clusters and edge nodes, wasmCloud needed an\norchestrator built from the ground up for the WebAssembly ecosystem and for\ndistributed computing.\n\nThat's what we've done with the wasmCloud Application Deployment Manager\n(Wadm). Wadm delivers the declarative application management experience that\ncloud engineers expect and automatic, out-of-the-box load balancing, service\ndiscovery, and failover for distributed applications. All of this uses the\ncommunity standard Open Application Model (OAM): if you know how to use a YAML\nmanifest with Kubernetes, you're 99% of the way to using one with Wadm.\n\nBetter yet, wasmCloud and Kubernetes integrate seamlessly through the open\nsource wasmCloud-operator, which uses a Kubernetes controller and custom\nresource definitions (CRDs) to run wasmCloud hosts on Kubernetes. The operator\nenables you to deploy wasmCloud applications from within your cluster using\nthe Kubernetes tooling you're already using. This way, Kubernetes focuses on\nwhat it's good at\u2014infrastructure management\u2014while wasmCloud handles the\norchestration of distributed components, throwing the WebAssembly toolbox wide\nopen for developers.\n\n  * Check out our wasmCloud with Kubernetes page to learn more about the wasmCloud-operator project and how to get started running wasmCloud with Kubernetes.\n\n  * Learn more about Wadm in the Toolchain section of the wasmCloud docs.\n\n## Seamless distributed networking\n\nwasmCloud hosts can be clustered together with the CNCF project NATS to form a\ndistributed mesh network called a lattice, allowing you to seamlessly\ndistribute applications on any architecture, operating system, virtual or\nphysical machine and communicate like it was running on a single computer.\n\nWhether a component is a serverless function or a microservice, it\ncommunicates over common WebAssembly Interface Type (WIT) definitions.\nComponents speak a common language, so combining (or \"composing\") them is\neasy. With the 1.0 release, wasmCloud implements a new RPC protocol called\nwRPC to take this flexibility a step further, delivering the composability of\nthe Component Model\u2014dynamically and at runtime\u2014across the lattice. This will\nbe especially powerful for use-cases like apps comprised of many different\nservices, or apps requiring explicit control over data location.\n\n  * Read our primer on the four ways components are linked in wasmCloud, including an in-depth breakdown of runtime linking between distributed components over the network.\n\n## Vendorless application components\n\nThe WebAssembly ecosystem is bringing us to a world where we can write code\nonce and run it anywhere. The WebAssembly System Interface (WASI) and the\nComponent Model extend the power of Wasm with standard APIs and a spec for\ncompiling WebAssembly code as portable, interoperable, composable components.\n\nThe 1.0 release of wasmCloud commits to and standardizes around the Component\nModel to make your application code truly vendor-neutral. Components built for\nwasmCloud 1.0 run anywhere that supports WASI 0.2, and any component you've\nbuilt to target WASI 0.2 is ready to run across distributed environments with\nwasmCloud.\n\nSince wasmCloud supports custom interfaces written with the community-standard\ninterface description language (IDL) of WIT, your interfaces are vendorless,\ntoo: wasmCloud gives developers and platform engineers a stable, vendor-\nneutral environment to use the WebAssembly ecosystem to the fullest.\n\n  * For more on WASI 0.2 and our approach to vendor-neutrality, check out our blog, Vendor-neutral apps with wasmCloud 1.0 and WASI 0.2.\n\n  * You might also want to see our blog on why WASI 0.2 is such a big deal.\n\n  * If you're new to components, WASI, and the wider WebAssembly ecosystem, check out our Concepts documention to get up to speed\u2014the Components page is a great place to start.\n\n## Completely OTEL observable\n\nIf you want to use a distributed system like wasmCloud in production, robust\nobservability is essential. The 1.0 release brings the trifecta of traces,\nlogs, and metrics to wasmCloud hosts using the industry-standard OpenTelemetry\n(OTEL) specification.\n\nOur approach to observability aims to be simple, flexible, and compatible with\nyour existing cloud native tooling. With OTEL as a common standard, observing\nhosts is a simple matter of connecting to Grafana, Honeycomb, or another\nbackend.\n\n  * Find out more about observability and wasmCloud in our blog, Complete OpenTelemetry Observability with wasmCloud.\n\n  * See the Observability with OpenTelemetry page in the wasmCloud docs for more information on metrics, logs, and traces, along with an example observability ecosystem that you can launch with just a few commands.\n\n## Defense-in-depth security by default\n\nWebAssembly provides excellent sandboxing by default, and wasmCloud has a\nstrong track record with a successful October 2023 audit from OSTIF and Trail\nof Bits.\n\nUsing components helps us build on this foundation for best-in-class zero-\ntrust security. Components can only use interfaces defined in their WIT, and\nin wasmCloud, they must be explicitly linked with another component or\nprovider to communicate. Even then, communication is mediated by the wasmCloud\nRPC protocol.\n\nFinally, wasmCloud 1.0 is committed to extensibility with a policy service API\nenabling complex policy evaluation using standard cloud native tools like Open\nPolicy Agent.\n\n  * Learn more about how wasmCloud 1.0 extends security and conforms to cloud native policy standards in our blog, Extending Security with wasmCloud 1.0 and Open Policy Agent.\n\n  * For more details on using Open Policy Agent with wasmCloud, including request and response schemas and an example policy service, check out the Policy service documentation.\n\n## Migration and compatibility\n\nFor users, 1.0 represents a stable foundation to build on with confidence\u2014and\nas usual with a major release that means some breaking changes from what came\nbefore.\n\nSmithy-generated actors and providers were deprecated in v0.82, and support is\nofficially removed in v1.0.0. If you need help migrating from Smithy\ninterfaces, just reach out on the wasmCloud Slack or on GitHub. We've also\ndropped the term \"actor\" itself in favor of \"component\"\u2014we're building\nWebAssembly components here, after all, and we want it to be absolutely clear\nthat these are standard WebAssembly components you could pick up and run with\nany other system that runs components.\n\nThe v1.0.0 release of wasmCloud is not compatible over the lattice with\nprevious versions of wasmCloud, wash, or Wadm, owing to the shift to\ncomponents, WIT interfaces, and a new RPC protocol. For these reasons, it\u2019s\nrecommended to update all wasmCloud hosts that you run to v1.0.0 at the same\ntime. Associated tooling like Wadm should update to at least version v0.11.0\nas well in order to match the protocol versions.\n\nFinally, the model for Wadm manifests has changed slightly\u2014see the guide to\nMigrating from v0.82 for complete instructions.\n\n## Next steps\n\nWe couldn't be more excited to see what you build with wasmCloud 1.0. If you\nwant to show off your project, ask questions, or just chat about WebAssembly\nand wasmCloud, join us on the wasmCloud Slack!\n\n  * Declarative WebAssembly orchestration\n  * Seamless distributed networking\n  * Vendorless application components\n  * Completely OTEL observable\n  * Defense-in-depth security by default\n  * Migration and compatibility\n  * Next steps\n\nCommunity\n\n  * GitHub\n  * Contributing\n  * Slack\n  * Calendar & wasmCloud Wednesdays\n  * Community Meeting Notes\n\nSocial\n\n  * Twitter\n  * LinkedIn\n  * YouTube\n\nLegal & Mail\n\n  * Privacy Policy\n  * Terms and Conditions\n  * Contact & Mailing List\n\nCopyright \u00a9 2024 wasmCloud LLC. All rights reserved. The Linux Foundation has\nregistered trademarks and uses trademarks. For a list of trademarks of The\nLinux Foundation, please see our Trademark Usage page:\nhttps://www.linuxfoundation.org/trademark-usage. Built with Docusaurus.\n\n", "frontpage": false}
