{"aid": "40216842", "title": "Sankey Diagrams in Google Charts", "url": "https://developers.google.com/chart/interactive/docs/gallery/sankey", "domain": "developers.google.com", "votes": 3, "user": "andsoitis", "posted_at": "2024-04-30 21:52:03", "comments": 0, "source_title": "Sankey Diagram | Charts | Google for Developers", "source_text": "Sankey Diagram | Charts | Google for Developers\n\ndevelopers.google.com uses cookies from Google to deliver and enhance the\nquality of its services and to analyze traffic. Learn more.\n\n  * Charts\n\n  * English\n  * Deutsch\n  * Espa\u00f1ol\n  * Espa\u00f1ol \u2013 Am\u00e9rica Latina\n  * Fran\u00e7ais\n  * Indonesia\n  * Italiano\n  * Polski\n  * Portugu\u00eas \u2013 Brasil\n  * Ti\u1ebfng Vi\u1ec7t\n  * T\u00fcrk\u00e7e\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * \u05e2\u05d1\u05e8\u05d9\u05ea\n  * \u0627\u0644\u0639\u0631\u0628\u064a\u0651\u0629\n  * \u0641\u0627\u0631\u0633\u06cc\n  * \u0939\u093f\u0902\u0926\u0940\n  * \u09ac\u09be\u0982\u09b2\u09be\n  * \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22\n  * \u4e2d\u6587 \u2013 \u7b80\u4f53\n  * \u4e2d\u6587 \u2013 \u7e41\u9ad4\n  * \u65e5\u672c\u8a9e\n  * \ud55c\uad6d\uc5b4\n\nSign in\n\n  * On this page\n  * Overview\n  * A Simple Example\n  * Multilevel Sankeys\n  * Controlling Colors\n  * Customizing Labels\n  * Adjusting Nodes\n  * Loading\n  * Data Format\n  * Configuration Options\n  * Methods\n  * Events\n  * Data Policy\n\n  * Home\n  * Products\n\n  * Charts\n\n  * Guides\n\nWas this helpful?\n\n# Sankey Diagram\n\nbookmark_borderbookmark Stay organized with collections Save and categorize\ncontent based on your preferences.\n\n  * On this page\n  * Overview\n  * A Simple Example\n  * Multilevel Sankeys\n  * Controlling Colors\n  * Customizing Labels\n  * Adjusting Nodes\n  * Loading\n  * Data Format\n  * Configuration Options\n  * Methods\n  * Events\n  * Data Policy\n\n  1. Overview\n  2. A Simple Example\n  3. Multilevel Sankeys\n  4. Controlling Colors\n  5. Customizing Fonts\n  6. Adjusting Nodes\n  7. Loading\n  8. Data Format\n  9. Configuration Options\n  10. Methods\n  11. Events\n  12. Data Policy\n\n## Overview\n\nA sankey diagram is a visualization used to depict a flow from one set of\nvalues to another. The things being connected are called nodes and the\nconnections are called links. Sankeys are best used when you want to show a\nmany-to-many mapping between two domains (e.g., universities and majors) or\nmultiple paths through a set of stages (for instance, Google Analytics uses\nsankeys to show how traffic flows from pages to other pages on your web site).\n\nFor the curious, they're named after Captain Sankey, who created a diagram of\nsteam engine efficiency that used arrows having widths proportional to heat\nloss.\n\nNote: The sankey chart may be undergoing substantial revisions in future\nGoogle Charts releases.\n\nSankey diagrams are rendered in the browser using SVG or VML, whichever is\nappropriate for the user's browser. Google's sankey layout code is derived\nfrom D3's sankey layout code.\n\nNote: Google sankey charts are unavailable in Microsoft Internet Explorer 8\nand earlier versions.\n\n## A Simple Example\n\nSuppose you had two categories, A and B, that connect to three other\ncategories, X, Y, and Z. Some of those connections are heavier than others.\nFor instance, B has a thin connection to X and a much thicker connection to Y.\n\nTry hovering over one of the links to highlight the connection.\n\nTo create a sankey chart, provide a set of rows, with each containing\ninformation about one connection: from, to, and weight. Then use the\ngoogle.visualization.Sankey() method to initialize the chart and then the\ndraw() method to render it:\n\n    \n    \n    <html> <head> <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script> <script type=\"text/javascript\"> google.charts.load('current', {'packages':['sankey']}); google.charts.setOnLoadCallback(drawChart);\n    \n    function drawChart() { var data = new google.visualization.DataTable(); data.addColumn('string', 'From'); data.addColumn('string', 'To'); data.addColumn('number', 'Weight'); data.addRows([ [ 'A', 'X', 5 ], [ 'A', 'Y', 7 ], [ 'A', 'Z', 6 ], [ 'B', 'X', 2 ], [ 'B', 'Y', 9 ], [ 'B', 'Z', 4 ] ]);\n    \n    // Sets chart options. var options = { width: 600, };\n    \n    // Instantiates and draws our chart, passing in some options. var chart = new google.visualization.Sankey(document.getElementById('sankey_basic')); chart.draw(data, options); } </script> </head> <body> <div id=\"sankey_basic\" style=\"width: 900px; height: 300px;\"></div> </body> </html>\n\nNote: Avoid cycles in your data: if A links to itself, or links to B which\nlinks to C which links to A, your chart will not render.\n\n## Multilevel Sankeys\n\nYou can create a Sankey chart with multiple levels of connections:\n\nSankey charts will add additional levels as needed, laying them out\nautomatically. Here's the complete code for the above chart:\n\n    \n    \n    <html> <body> <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\n    \n    <div id=\"sankey_multiple\" style=\"width: 900px; height: 300px;\"></div>\n    \n    <script type=\"text/javascript\"> google.charts.load(\"current\", {packages:[\"sankey\"]}); google.charts.setOnLoadCallback(drawChart); function drawChart() { var data = new google.visualization.DataTable(); data.addColumn('string', 'From'); data.addColumn('string', 'To'); data.addColumn('number', 'Weight'); data.addRows([ [ 'Brazil', 'Portugal', 5 ], [ 'Brazil', 'France', 1 ], [ 'Brazil', 'Spain', 1 ], [ 'Brazil', 'England', 1 ], [ 'Canada', 'Portugal', 1 ], [ 'Canada', 'France', 5 ], [ 'Canada', 'England', 1 ], [ 'Mexico', 'Portugal', 1 ], [ 'Mexico', 'France', 1 ], [ 'Mexico', 'Spain', 5 ], [ 'Mexico', 'England', 1 ], [ 'USA', 'Portugal', 1 ], [ 'USA', 'France', 1 ], [ 'USA', 'Spain', 1 ], [ 'USA', 'England', 5 ], [ 'Portugal', 'Angola', 2 ], [ 'Portugal', 'Senegal', 1 ], [ 'Portugal', 'Morocco', 1 ], [ 'Portugal', 'South Africa', 3 ], [ 'France', 'Angola', 1 ], [ 'France', 'Senegal', 3 ], [ 'France', 'Mali', 3 ], [ 'France', 'Morocco', 3 ], [ 'France', 'South Africa', 1 ], [ 'Spain', 'Senegal', 1 ], [ 'Spain', 'Morocco', 3 ], [ 'Spain', 'South Africa', 1 ], [ 'England', 'Angola', 1 ], [ 'England', 'Senegal', 1 ], [ 'England', 'Morocco', 2 ], [ 'England', 'South Africa', 7 ], [ 'South Africa', 'China', 5 ], [ 'South Africa', 'India', 1 ], [ 'South Africa', 'Japan', 3 ], [ 'Angola', 'China', 5 ], [ 'Angola', 'India', 1 ], [ 'Angola', 'Japan', 3 ], [ 'Senegal', 'China', 5 ], [ 'Senegal', 'India', 1 ], [ 'Senegal', 'Japan', 3 ], [ 'Mali', 'China', 5 ], [ 'Mali', 'India', 1 ], [ 'Mali', 'Japan', 3 ], [ 'Morocco', 'China', 5 ], [ 'Morocco', 'India', 1 ], [ 'Morocco', 'Japan', 3 ] ]);\n    \n    // Set chart options var options = { width: 600, };\n    \n    // Instantiate and draw our chart, passing in some options. var chart = new google.visualization.Sankey(document.getElementById('sankey_multiple')); chart.draw(data, options); } </script> </body> </html>\n\n## Controlling Colors\n\nSankey charts have the ability to set custom colors for nodes and links. Both\nnodes and links can be given custom color palettes using their colors options\n(sankey.node.colors and sankey.link.colors, respectively). They can also be\ngiven different coloring modes using the colorMode option.\n\nIf the colors aren't customized, they default to the standard Material\npalette.\n\n    \n    \n    var colors = ['#a6cee3', '#b2df8a', '#fb9a99', '#fdbf6f', '#cab2d6', '#ffff99', '#1f78b4', '#33a02c'];\n    \n    var options = { height: 400, sankey: { node: { colors: colors }, link: { colorMode: 'gradient', colors: colors } } };\n\nYou can control the colors of the links, nodes, and labels with configuration\noptions. Here, we select three with the same hue but different brightnesses:\n\nHere's what those options look like:\n\n    \n    \n    var options = { width: 600, sankey: { link: { color: { fill: '#d799ae' } }, node: { colors: [ '#a61d4c' ], label: { color: '#871b47' } }, } };\n\nYou can also control the transparency of the links with the\nsankey.link.color.fillOpacity option:\n\n    \n    \n    var options = { width: 600, sankey: { link: { color: { fill: '#d799ae', fillOpacity: 0.8 } }, node: { colors: [ '#a61d4c' ], label: { color: '#871b47' } }, } };\n\nTo create a border around the links, use the sankey.link.color.stroke and\nsankey.link.color.strokeWidth options:\n\nThe stroke color can be specified either in RGB format or by English name.\n\n    \n    \n    var options = { width: 750, height: 400, sankey: { node: { colors: [ '#a61d4c' ] }, link: { color: { stroke: 'black', strokeWidth: 1 } }, } };\n\n## Customizing Labels\n\nThe text on sankey charts can be customized using sankey.node.label.fontName\nand friends:\n\nHere's the option stanza for the above chart:\n\n    \n    \n    var options = { width: 600, sankey: { node: { label: { fontName: 'Times-Roman', fontSize: 14, color: '#871b47', bold: true, italic: true } } }, };\n\nYou can adjust the position of the labels relative to the nodes with the\nsankey.node.labelPadding option:\n\nIn the chart above, we've added 30 pixels of padding between the labels and\nthe nodes.\n\n    \n    \n    var options = { width: 600, sankey: { node: { labelPadding: 30 } }, };\n\n## Adjusting Nodes\n\nYou can control the width of the nodes with sankey.node.width:\n\nAbove, we set the node width to 2.\n\n    \n    \n    var options = { width: 600, sankey: { node: { width: 2 } }, };\n\nYou can adjust the distance between the nodes with sankey.node.nodePadding:\n\nIn the above chart, we set sankey.node.nodePadding to 80.\n\n    \n    \n    var options = { width: 900, sankey: { node: { nodePadding: 80 } }, };\n\n## Loading\n\nThe google.charts.load package name is \"sankey\":\n\n    \n    \n    google.charts.load(\"current\" {packages: [\"sankey\"]});\n\nThe visualization's class name is google.visualization.Sankey:\n\n    \n    \n    var visualization = new google.visualization.Sankey(container);\n\n## Data Format\n\nRows: Each row in the table represents a connection between two labels. The\nthird column indicates the strength of that connection, and will be reflected\nin the width of the path between the labels.\n\nColumns:\n\nColumn 0| Column 1| Column 2| ...| Column N (optional)  \n---|---|---|---|---  \nPurpose:| Source| Destination| Value| ...| Optional roles  \nData Type:| string| string| number| ...  \nRole:| domain| domain| data| ...  \nOptional column roles:| None| None| None| ...|\n\n  * tooltip\n  * style\n\n  \n  \n## Configuration Options\n\nName  \n---  \nforceIFrame| Draws the chart inside an inline frame. (Note that on IE8, this\noption is ignored; all IE8 charts are drawn in i-frames.)Type: booleanDefault:\nfalse  \nheight| Height of the chart, in pixels.Type: numberDefault: height of the\ncontaining element  \nsankey.iterations| With multilevel sankeys, it's sometimes nonobvious where\nnodes should be placed for optimal readability. The D3 layout engine\nexperiments with different node layouts, stopping when sankey.iterations\nattempts have been made. The larger this number, the more pleasing the layout\nof complex sankeys, but it comes with a cost: the sankeys will take longer to\nrender. Conversely, the shorter this number, the quicker your charts will\nrender.Type: integerDefault: 32  \nsankey.link| Controls attributes of the connections between nodes. Currently\nall attributes pertain to color:\n\n    \n    \n    sankey: { link: { color: { fill: '#efd', // Color of the link. fillOpacity: 0.8, // Transparency of the link. stroke: 'black', // Color of the link border. strokeWidth: 1 // Thickness of the link border (default 0). }, colors: [ '#a6cee3', // Custom color palette for sankey links. '#1f78b4', // Nodes will cycle through this palette '#b2df8a', // giving the links for that node the color. '#33a02c' ] } }\n\nType: objectDefault: null  \nsankey.link.colorMode| Sets a coloring mode for the links between nodes.\nPossible values:\n\n  * 'source' - The color of the source node is used for the links to all target nodes.\n  * 'target' - The color of the target node is used for the link to its source nodes.\n  * 'gradient' - The link between a source and target node is colored as a gradient from the source node color to the target node color.\n  * 'none' - the default option; link colors will be set to the default (or a color as specified by the sankey.link.color.fill and sankey.link.color.fillOpacity options).\n\nThis option overrides sankey.link.color.Type: stringDefault: 'none'  \nsankey.node| Controls attributes of the nodes (the vertical bars between\nlinks):\n\n    \n    \n    sankey: { node: { label: { fontName: 'Times-Roman', fontSize: 12, color: '#000', bold: true, italic: false }, interactivity: true, // Allows you to select nodes. labelPadding: 6, // Horizontal distance between the label and the node. nodePadding: 10, // Vertical distance between nodes. width: 5, // Thickness of the node. colors: [ '#a6cee3', // Custom color palette for sankey nodes. '#1f78b4', // Nodes will cycle through this palette '#b2df8a', // giving each node its own color. '#33a02c' ] } }\n\nType: objectDefault: null  \nsankey.node.colorMode| Sets a coloring mode for the sankey nodes. Possible\nvalues:\n\n  * 'unique' - Each node will receive a unique color.\n\nType: stringDefault: 'unique'  \ntooltip| An object with members to configure various tooltip elements. To\nspecify properties of this object, you can use object literal notation, as\nshown here:\n\n    \n    \n    {textStyle: {color: '#FF0000'}, showColorCode: true}\n\nType: objectDefault: null  \ntooltip.isHtml| If set to true, use HTML-rendered (rather than SVG-rendered)\ntooltips. See Customizing Tooltip Content for more details.Note: customization\nof the HTML tooltip content via the tooltip column data role is not supported\nby the Bubble Chart visualization.Type: booleanDefault: false  \ntooltip.textStyle| An object that specifies the tooltip text style. The object\nhas this format:\n\n    \n    \n    { color: <string>, fontName: <string>, fontSize: <number>, bold: <boolean>, italic: <boolean> }\n\nThe color can be any HTML color string, for example: 'red' or '#00cc00'. Also\nsee fontName and fontSize.Type: objectDefault: {color: 'black', fontName:\n<global-font-name>, fontSize: <global-font-size>}  \nwidth| Width of the chart, in pixels.Type: numberDefault: width of the\ncontaining element  \n  \n## Methods\n\nMethod  \n---  \ndraw(data, options)| Draws the chart. The chart accepts further method calls\nonly after the readyevent is fired. Extended description.Return Type: none  \ngetBoundingBox(id)| Returns an object containing the left, top, width, and\nheight of chart element id. The format for id isn't yet documented (they're\nthe return values of event handlers), but here are some examples:\n\n> var cli = chart.getChartLayoutInterface();\n>\n> Height of the chart area\n>     cli.getBoundingBox('chartarea').height\n> Width of the third bar in the first series of a bar or column chart\n>     cli.getBoundingBox('bar#0#2').width\n> Bounding box of the fifth wedge of a pie chart\n>     cli.getBoundingBox('slice#4')\n> Bounding box of the chart data of a vertical (e.g., column) chart:\n>     cli.getBoundingBox('vAxis#0#gridline')\n> Bounding box of the chart data of a horizontal (e.g., bar) chart:\n>     cli.getBoundingBox('hAxis#0#gridline')\n\nValues are relative to the container of the chart. Call this after the chart\nis drawn.Return Type: object  \ngetSelection()| Returns an array of the selected chart entities. Selectable\nentities are bars, legend entries and categories. For this chart, only one\nentity can be selected at any given moment. Extended description .Return Type:\nArray of selection elements  \nsetSelection()| Selects the specified chart entities. Cancels any previous\nselection. Selectable entities are bars, legend entries and categories. For\nthis chart, only one entity can be selected at a time. Extended description\n.Return Type: none  \nclearChart()| Clears the chart, and releases all of its allocated\nresources.Return Type: none  \n  \n## Events\n\nName  \n---  \nerror| Fired when an error occurs when attempting to render the\nchart.Properties: id, message  \nonmouseover| Fired when the user mouses over a visual entity. Passes back the\nrow and column indices of the corresponding data table element. A bar\ncorrelates to a cell in the data table, a legend entry to a column (row index\nis null), and a category to a row (column index is null).Properties: row,\ncolumn  \nonmouseout| Fired when the user mouses away from a visual entity. Passes back\nthe row and column indices of the corresponding data table element. A bar\ncorrelates to a cell in the data table, a legend entry to a column (row index\nis null), and a category to a row (column index is null).Properties: row,\ncolumn  \nready| The chart is ready for external method calls. If you want to interact\nwith the chart, and call methods after you draw it, you should set up a\nlistener for this event before you call the draw method, and call them only\nafter the event was fired.Properties: none  \nselect| Fired when the user clicks a visual entity. To learn what has been\nselected, call getSelection().Properties: none  \n  \n## Data Policy\n\nAll code and data are processed and rendered in the browser. No data is sent\nto any server.\n\nWas this helpful?\n\nExcept as otherwise noted, the content of this page is licensed under the\nCreative Commons Attribution 4.0 License, and code samples are licensed under\nthe Apache 2.0 License. For details, see the Google Developers Site Policies.\nJava is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-07-18 UTC.\n\n", "frontpage": true}
