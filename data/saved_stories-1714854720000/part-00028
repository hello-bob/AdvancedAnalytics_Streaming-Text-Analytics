{"aid": "40256542", "title": "Linear Clock: Solar. (2021)", "url": "https://jmw.name/projects/linear-clock/", "domain": "jmw.name", "votes": 1, "user": "fanf2", "posted_at": "2024-05-04 10:42:02", "comments": 0, "source_title": "Linear Clock: Solar", "source_text": "Linear Clock: Solar \u00b7 James Wilson\n\n## James Wilson\n\n# Linear Clock: Solar\n\nMarch 2021\n\nLinear Clock: Solar is now available for sale. Please visit my shop if you\nwould like to purchase one for your space.\n\nDuring 2020, the isolation of lockdowns distorted our sense of time, and I\nrevisited a previous horological experiment of mine relating to how we express\ntime, the linear clock. I designed and built a clock that uses satellite\nnavigation and astronomy to show time as a progress bar measuring the\npercentage of the day elapsed since sunrise. A second indicator marks the time\nof sunset in blue.\n\nThe idea for a linear clock was inspired by my experience at Camp Grounded, a\ntech-free summer camp for adults. One of the rules of camp was to \u201cleave time\nbehind\u201d \u2014 for a weekend, we put away watches, phones, and alarms, and measured\ntime only by the sun and stars. An activity might last \u201c5% of the day,\u201d but\nnothing was scheduled by clocks, or counted in hours or minutes.\n\nTo carry this looser experience of time back into the everyday world, in 2018\nI built a desk clock that used a bargraph Nixie tube to display time as a\ncontinuously growing progress bar. Along the way, the project became a\ntutorial in power electronics, custom PCB design, Bluetooth LE, and 3D\nprinting. I didn\u2019t study electrical engineering formally in university, and it\nwas a deeply satisfying experience to feel like a student again, and then\ncomplete this project with a physical object in my hands.\n\nHowever, something about its display didn\u2019t feel right. By definition, a day\nbegins at midnight, but it didn\u2019t match my experience of a day to wake up\nearly and have the clock tell me a quarter to a third of the day had already\npassed. I would have preferred to have something based on sunrise and sunset.\n\nIn the COVID lockdown of 2020, I had the time to revisit the project. Building\non my previous experience, I designed and built a hardware and software device\nthat uses a GNSS receiver to compute time relative to sunrise and sunset.\nSince it derives time and location from the satellite signal, it never needs\nto be set, or ever adjusted for daylight saving time. I also refined the\nphysical design with a walnut and maple enclosure cut on a laser engraver and\nCNC router, and then finished by traditional woodshop techniques.\n\nThe sunset indicator was immediately interesting. Days are longer in the\nsummer and shorter in the winter, but I never quantified it for myself. How\nmight I plan my day differently with a clear indicator of the balance\navailable between daytime and nighttime hours?\n\nA year after testing the first prototype, the clock has changed my perspective\non time and thinking of the day. I\u2019ve become a bit of a morning person now,\nnot wanting to sleep away perfectly good daylight hours. The sunset indicator\nat 60% in the summer beams with possibilities, and at 40% in the dead of\nwinter is a reminder to make the best use of what you have.\n\n## Electronic design\n\nMy original linear clock used a bargraph Nixie tube. The new design\nrequirement for a dual indicator, as well as the cost of adding a high-voltage\nDC-DC converter and sourcing IN-13 tubes (out of production for nearly 40\nyears), led me to abandon Nixie tubes in favor of LEDs. Discrete surface-mount\nLEDs are plentiful and cheap, but come with the challenge that assembling them\non a circuit board, in a perfectly straight row with a tight pitch, would\nrequire the precision of machine placement. As it happened, JLCPCB, a Chinese\nPCB fabricator, began offering surface mount assembly services in 2019. While\ntheir service only has a limited library of parts, it\u2019s perfectly suited to\nplacing hundreds of LEDs on a board. The remaining parts I would assemble by\nhand. Traditional prototype assembly houses would normally charge thousands of\ndollars for a small prototype order, but now I could get partial assembly done\nfor $3 per board, delivered a week after I placed the order. This design would\nnot have been possible just a few years ago for a non-commercial project.\n\nConstant-current shift register drivers are used to light the LEDs, which\nmakes it possible to control an arbitrary number of LEDs with only a single\ndata line. All that is required is to send the shift register a string of\nbits, for example, 10000001 to indicate the first and last LEDs should be lit.\nThe shift register holds its state until new data is received, meaning the\ndisplay does not need to be continually refreshed. After some research, I\nfound the TLC5926 from Texas Instruments provided the right mix of features,\ncontrollability, and reasonable cost. It supports 16 outputs and has options\nfor fixed (set by resistor) and configurable (set by software) current\noutputs, as well as PWM dimming. Each row of LEDs uses 112 indicators since I\nwanted at least 100 points of resolution and I rounded that up to the next\nmultiple of 16. The TLC5926s are connected together in series, so to set the\nstate of both rows, the microcontroller sends a string of 224 bits.\n\nI split off the GNSS module and microcontroller to a separate board, because\nthe GNSS module works best when mounted horizontally to point toward the sky.\nThe module is the SAM-M8Q from u-blox and comes with an integrated patch\nantenna. It was a pleasure to prototype with this device; u-blox provides\nextensive documentation, and the module is easily configurable and uses an\nefficient binary protocol over I^2C. The microcontroller only needs to perform\nthe astronomical calculations and act as a I^2C and SPI bus master, so I chose\na part from the low-cost STM32G0 series. This is a microcontroller family I\u2019m\nalready familiar with, so it was easy to prototype on a Nucleo development\nboard and then move to a custom board.\n\nThe rest of the main logic board is simple: connectors for power and data\nbetween the two boards, a small buck converter to provide regulated voltage, a\nsupercapacitor backup to speed up satellite acquisition after the clock is\nbriefly unplugged, and diagnostic ports and indicators for programming and\ndebugging the microcontroller. The GNSS module sits in a large ground pour\nthat is actually part of the antenna design.\n\n## Software design\n\nI understood intuitively that if you know the date and time, and your position\non Earth, you should be able to determine the relative position of the Sun,\nand when it will cross the horizon. But I\u2019ve never taken an astronomy class,\nso the exact method to do this was something of a mystery. I relied on\nAstronomical Algorithms, 2nd edition, by Jean Meeus (now out-of-print) to\nunderstand this calculation.\n\nAt a high level, the Sun\u2019s orbital elements are computed based on the date and\ntime obtained by the GNSS. In the code, this is seen as several polynomials\ncomputed on the Julian date. These ephemerides are approximate solutions to\nthe n-body problem of the motion of celestial bodies in our solar system. As\nsuch, they will eventually wander off true over time, but should remain\nreasonably accurate for several millennia. The rest of the computations are\ncoordinate transformations, from the ecliptic to the equatorial coordinate\nsystem, and finally to the horizontal coordinate system of an observer on\nEarth at the latitude and longitude obtained from the GNSS. To keep the\ndisplay at a comfortable brightness at night, LED output is smoothly adjusted\nduring twilight periods based on the Sun\u2019s elevation.\n\nFor practical reasons, the effects of altitude and terrain are not taken into\neffect. Meeus describes a simple altitude correction for use in computing\nsunrise and sunset times, but I found the altitude data from the SAM-M8Q was\ninaccurate and subject to a lot of drift. In extreme cases, the drift in the\nreported altitude might make the day progress bar go backwards. Also, since\nthe calculations are done with the horizon at sea level, a person living on a\nmountain slope might have a different opinion on the time of sunrise and\nsunset.\n\nLastly, there are places on Earth where, for some part of the year, the Sun\nnever rises or sets! I have never lived in a place with a polar day or\nmidnight, and I\u2019m not sure if a sun-based clock makes sense in those places\nand times. Nevertheless, the solution I used was to mark the beginning and end\nof the day at the point where the Sun is closest to the horizon. This makes\nthe solution continuous, in the sense that a person observing the clock while\nmoving north into the Arctic circle at certain times of the year would see the\nday progress bar advance normally, while the sunset indicator would move\ntoward either 0 or 100 before vanishing altogether.\n\nThe overall structure of the clock\u2019s firmware is very simple. After\nconfiguring the SAM-M8Q to send regular updates, it waits for an interrupt\nfrom the GNSS module, and then computes the day fraction based on the Sun\u2019s\nposition, and sends a sequence to the shift register drivers to turn the\ndisplay LEDs on or off.\n\n## Enclosure design\n\nI knew I wanted to build an enclosure out of wood. I was influenced by the\nindustrial design of Braun appliances, from an exhibit on the work of Dieter\nRams at San Francisco\u2019s Museum of Modern Art. In my mind, I pictured a\nmidcentury-style design with a contrasting walnut and maple elements.\n\nThe original Nixie tube linear clock used a 3D-printed enclosure I had\nproduced in white plastic by Shapeways. This freed me to consider the design\nwithout thinking about how to manufacture the enclosure, but it was also\nexpensive and time-consuming to have made.\n\nI researched several possibilities to translate the design I had in mind into\na feasible process for manufacturing. I considered bending a laminate board\naround a form in the shape of the outer frame. It turns out bending plywood\nwith a tight radius is difficult and it would still have a seam. I also\nthought about starting with a solid block of wood and milling out the center,\nbut very thick boards of hardwood are hard to source, and most end mills can\ncut 3/4\u201d or 1\u201d deep at most. Longer end mills are rare because they deflect\nmore, leading to tool breakage or chatter on the part surface.\n\nThe method I chose was to cut multiple sections from 3/4\u201d board planed from\n4/4 lumber and glue them together. 4/4 hardwood lumber is easily available\neverywhere, and glue-up construction is a standard technique practiced in\nwoodworking. The front face and plastic window were cut using a CO_2 laser\nengraver, and then milled on a CNC router using a fixture.\n\nIn the initial prototype build, I cut the plastic window the same size as the\ncutout in the face. This made for a challenging assembly procedure because I\nhad to glue the sides of the plastic window and cutout together, without any\nvisible glue squeeze-out. To make the process foolproof, I changed the design\nto mill a shallow pocket around the cutout on the back of the face, and milled\na larger acrylic window in the negative of this shape. Now I could glue these\nhidden surfaces together without having to worry about squeeze-out.\n\nI originally designed the enclosure using Fusion 360, but after Autodesk\nremoved many features from the personal version, I decided to give the\ncommunity edition of Solidworks a try. Re-sketching the design from Fusion to\nSolidworks was a good tutorial, but the CAM side of the process was a\ndifferent story. I liked the integrated CAM features of Fusion 360, but\nSolidworks\u2019 built-in CAM option is best suited for metal milling only. I ended\nup exporting the CAD drawings from Solidworks to create toolpaths in vCarve,\nwhich was not a very integrated workflow, but it had one helpful benefit:\nvCarve could combine all the toolpaths for cutting the frame into one program.\nInstead of running a separate program for each of the three frame parts, and\nadjusting the machine zero in between, I could dimension a board of lumber to\nthe right size, set the router zero once, and run a single program to get all\nfive parts cut.\n\nFinishing is the step where you get to see your hard work pay off. There\u2019s\nsomething satisfying about watching the wood take a deep, rich color as the\nfirst coat of oil goes on. I used a tung oil finish for the frame, and a\nwater-based polyurethane topcoat for the maple face. Once finished, the PCBs\nwere fastened inside, and all the connection hardware installed.\n\n", "frontpage": false}
