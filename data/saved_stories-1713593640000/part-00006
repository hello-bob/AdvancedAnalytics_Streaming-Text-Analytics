{"aid": "40090336", "title": "Orbital Megastructure", "url": "https://www.shadertoy.com/view/WlKXzm", "domain": "shadertoy.com", "votes": 2, "user": "Fraterkes", "posted_at": "2024-04-19 18:25:15", "comments": 0, "source_title": "Shadertoy", "source_text": "Shader - Shadertoy BETA\n\nShadertoy\n\nBrowse New Sign In\n\nNo WebGL available :(\n\n0.00\n\n00.0 fps\n\n734 x 413\n\nViews: 0, Tags:\n\nCreated by in\n\nShader Inputs\n\n    \n    \n    uniform vec3 iResolution; // viewport resolution (in pixels) uniform float iTime; // shader playback time (in seconds) uniform float iTimeDelta; // render time (in seconds) uniform float iFrameRate; // shader frame rate uniform int iFrame; // shader playback frame uniform float iChannelTime[4]; // channel playback time (in seconds) uniform vec3 iChannelResolution[4]; // channel resolution (in pixels) uniform vec4 iMouse; // mouse pixel coords. xy: current (if MLB down), zw: click uniform samplerXX iChannel0..3; // input channel. XX = 2D/Cube uniform vec4 iDate; // (year, month, day, time in seconds) uniform float iSampleRate; // sound sample rate (i.e., 44100)\n\n1\n\n1\n\n0 / 0 chars\n\nFilter Wrap\n\niChannel0\n\nFilter Wrap\n\niChannel1\n\nFilter Wrap\n\niChannel2\n\nFilter Wrap\n\niChannel3\n\nComments (0)\n\nSign in to post a comment.\n\nCommunity Forums\n\n  * Official Events\n  * In Facebook (english)\n  * In Facebook (korean)\n  * In Discord (direct link)\n\nFeedback and Support\n\n  * Facebook\n  * Twitter\n  * Patreon\n  * Roadmap\n\nShadertoy\n\n  * Store\n  * Documentation\n  * Terms & Privacy\n  * About\n\nApps and Plugins\n\n  * Official iPhone App by Reinder\n  * Screensaver by Kosro\n  * Shadertoy plugin by Patu\n\nTutorials\n\n  * Shader coding intro by iq\n  * Shadertoy Unofficial by FabriceNeyret2\n\nWe use cookies to give you the best experience on our website. If you continue\nusing Shadertoy, we'll assume that you are happy to receive all cookies on\nthis website. For more information, please review our Terms & Privacy.\n\nSelect input for iChannel\n\n  * Misc\n  * Textures\n  * Cubemaps\n  * Volumes\n  * Videos\n  * Music\n\n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \n| by  \n---  \n  \nGLSL Help\n\nThis help only covers the parts of GLSL ES that are relevant for Shadertoy.\nFor the complete specification please have a look at GLSL ES specification\n\n## Language:\n\n  * Version: WebGL 2.0\n  * Arithmetic: ( ) + - ! * / %\n  * Logical/Relatonal: ~ < > <= >= == != && ||\n  * Bit Operators: & ^ | << >>\n  * Comments: // /* */\n  * Types: void bool int uint float vec2 vec3 vec4 bvec2 bvec3 bvec4 ivec2 ivec3 ivec4 uvec2 uvec3 uvec4 mat2 mat3 mat4 mat?x? sampler2D, sampler3D, samplerCube\n  * Format: float a = 1.0; int b = 1; uint i = 1U; int i = 0x1;\n  * Function Parameter Qualifiers: [none], in, out, inout\n  * Global Variable Qualifiers: const\n  * Vector Components: .xyzw .rgba .stpq\n  * Flow Control: if else for return break continue switch/case\n  * Output: vec4 fragColor\n  * Input: vec2 fragCoord\n  * Preprocessor: #define #undef #if #ifdef #ifndef #else #elif #endif #error #pragma #line\n\n## Built-in Functions:\n\n  * ftype radians (ftype degrees)\n  * ftype degrees (ftype radians)\n  * ftype sin (ftype angle)\n  * ftype cos (ftype angle)\n  * ftype tan (ftype angle)\n  * ftype asin (ftype x)\n  * ftype acos (ftype x)\n  * ftype atan (ftype y, ftype x)\n  * ftype atan (ftype y_over_x)\n  * ftype sinh (ftype x)\n  * ftype cosh (ftype x)\n  * ftype tanh (ftype x)\n  * ftype asinh (ftype x)\n  * ftype acosh (ftype x)\n  * ftype atanh f(type x)\n\n  * ftype pow (ftype x, ftype y)\n  * ftype exp (ftype x)\n  * ftype log (ftype x)\n  * ftype exp2 (ftype x)\n  * ftype log2 (ftype x)\n  * ftype sqrt (ftype x)\n  * ftype inversesqrt (ftype x)\n\n  * type abs (type x)\n  * type sign (type x)\n  * ftype floor (ftype x)\n  * ftype ceil (ftype x)\n  * ftype trunc (type x)\n  * ftype fract (ftype x)\n  * ftype mod (ftype x, ftype y)\n  * ftype modf (ftype x, out ftype i)\n  * type min (type x, type y)\n  * type max (type x, type y)\n  * type clamp (type x, type minV, type maxV)\n  * ftype mix (ftype x, ftype y, ftype a)\n  * type step (type edge, type x)\n  * ftype smoothstep (ftype a, ftype b, ftype x)\n\n  * float length (vec x)\n  * float distance (vec p0, vec p1)\n  * float dot (vec x, vec y)\n  * vec3 cross (vec3 x, vec3 y)\n  * vec normalize (vec x)\n  * vec faceforward (vec N, vec I, vec Nref)\n  * vec reflect (vec I, vec N)\n  * vec refract (vec I, vec N, float eta)\n  * float determinant(mat? m)\n  * mat?x? outerProduct(vec c, vec r)\n  * mat?x? matrixCompMult (mat?x? x, mat?x? y)\n  * mat? inverse (mat? inverse)\n  * mat?x? transpose (mat?x? inverse)\n\n|\n\n  * vec4 texture( sampler , vec coord [, float bias])\n  * vec4 textureLod( sampler, vec coord, float lod)\n  * vec4 textureLodOffset( sampler sampler, vec coord, float lod, ivec offset)\n  * vec4 textureGrad( sampler , vec coord, vec2 dPdx, vec2 dPdy)\n  * vec4 textureGradOffset sampler , vec coord, vec dPdx, vec dPdy, vec offset)\n  * vec4 textureProj( sampler , vec coord [, float bias])\n  * vec4 textureProjLod( sampler , vec coord, float lod)\n  * vec4 textureProjLodOffset( sampler , vec coord, float lod, vec? offset)\n  * vec4 textureProjGrad( sampler , vec coord, vec2 dPdx, vec2 dPdy)\n  * vec4 texelFetch( sampler , ivec coord, int lod)\n  * vec4 texelFetchOffset( sampler, ivec coord, int lod, ivec offset )\n  * ivec textureSize( sampler , int lod)\n\n  * ftype dFdx (ftype x)\n  * ftype dFdy (ftype x)\n  * ftype fwidth (ftype p)\n\n  * btype isnan (ftype x)\n  * btype isinf (ftype x)\n  * ftype intBitsToFloat (itype v)\n  * ftype uintBitsToFloat (utype v)\n  * itype floatBitsToInt (ftype v)\n  * utype floatBitsToUint (ftype v)\n  * uint packSnorm2x16 (vec2 v)\n  * uint packUnorm2x16 (vec2 v)\n  * vec2 unpackSnorm2x16 (uint p)\n  * vec2 unpackUnorm2x16 (uint p)\n\n  * bvec lessThan (vec x, vec y)\n  * bvec lessThanEqual (vec x, vec y)\n  * bvec greaterThan (vec x, vec y)\n  * bvec greaterThanEqual (vec x, vec y)\n  * bvec equal (type x, type y)\n  * bvec notEqual (type x, type y)\n  * bool any (bvec x)\n  * bool all (bvec x)\n  * bvec not (bvec x)\n\n  \n---|---  \n  \n## How-to\n\n  * Use structs: struct myDataType { float occlusion; vec3 color; }; myDataType myData = myDataType(0.7, vec3(1.0, 2.0, 3.0));\n  * Initialize arrays: float[] x = float[] (0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6);\n  * Do conversions: int a = 3; float b = float(a);\n  * Do component swizzling: vec4 a = vec4(1.0,2.0,3.0,4.0); vec4 b = a.zyyw;\n  * Access matrix components: mat4 m; m[1] = vec4(2.0); m[0][0] = 1.0; m[2][3] = 2.0;\n\n## Be careful!\n\n  * the f suffix for floating pont numbers: 1.0f is illegal in GLSL. You must use 1.0\n  * saturate(): saturate(x) doesn't exist in GLSL. Use clamp(x,0.0,1.0) instead\n  * pow/sqrt: please don't feed sqrt() and pow() with negative numbers. Add an abs() or max(0.0,) to the argument\n  * mod: please don't do mod(x,0.0). This is undefined in some platforms\n  * variables: initialize your variables! Don't assume they'll be set to zero by default\n  * functions: don't call your functions the same name as any of your variables\n\n## Shadertoy Inputs\n\nvec3| iResolution| image/buffer| The viewport resolution (z is pixel aspect\nratio, usually 1.0)  \n---|---|---|---  \nfloat| iTime| image/sound/buffer| Current time in seconds  \nfloat| iTimeDelta| image/buffer| Time it takes to render a frame, in seconds  \nint| iFrame| image/buffer| Current frame  \nfloat| iFrameRate| image/buffer| Number of frames rendered per second  \nfloat| iChannelTime[4]| image/buffer| Time for channel (if video or sound), in\nseconds  \nvec3| iChannelResolution[4]| image/buffer/sound| Input texture resolution for\neach channel  \nvec4| iMouse| image/buffer| xy = current pixel coords (if LMB is down). zw =\nclick pixel  \nsampler2D| iChannel{i}| image/buffer/sound| Sampler for input textures i  \nvec4| iDate| image/buffer/sound| Year, month, day, time in seconds in .xyzw  \nfloat| iSampleRate| image/buffer/sound| The sound sample rate (typically\n44100)  \n  \n## Shadertoy Outputs\n\nImage shaders: fragColor is used as output channel. It is not, for now,\nmandatory but recommended to leave the alpha channel to 1.0.\n\nSound shaders: the mainSound() function returns a vec2 containing the left and\nright (stereo) sound channel wave data.\n\nShare your shader\n\nYes\n\nNo\n\nBBCode Help\n\n## Codes:\n\nYou can format your comments by using standard BBCode. The following tags are\nimplemented in Shadertoy:\n\nBold| [b]this text goes in bold[/b]  \n---|---  \nItalic| [i]this text goes in italic[/i]  \nImages| [img]url_to_image[/img]  \nUrl| [url]http://www.shadertoy.com[/url]  \nUrl| [url=http://www.shadertoy.com]Shadertoy[/url]  \nCode| [code]fixed-width text[/code]  \nVideo| [video]http://www.youtube.com/watch?v=0ifChJ0nJfM[/video]  \n  \n## Emoticons:\n\n:)  \n---  \n:(  \n:D  \n:love:  \n:octopus:  \n:octopusballoon:  \n  \n## Symbols:\n\n:alpha:| \u03b1  \n---|---  \n:beta:| \u03b2  \n:delta:| \u0394  \n:epsilon:| \u03b5  \n:nabla:| \u2207  \n:square:| 2  \n:cube:| 3  \n:limit:| \u2250  \n  \nShare your shader\n\nDirect link:\n\nJust copy and paste this URL below:\n\nEmbed:\n\nAdd to playlist\n\n", "frontpage": false}
