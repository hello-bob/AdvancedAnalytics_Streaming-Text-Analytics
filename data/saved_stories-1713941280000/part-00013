{"aid": "40138769", "title": "FalkorDB: A Knowledge Graph for LLM (KG-RAG)", "url": "https://github.com/FalkorDB/FalkorDB", "domain": "github.com/falkordb", "votes": 1, "user": "aloknnikhil", "posted_at": "2024-04-23 23:52:25", "comments": 0, "source_title": "GitHub - FalkorDB/FalkorDB: A super fast Graph Database uses GraphBLAS under the hood for its sparse adjacency matrix graph representation. Our goal is to provide the best Knowledge Graph for LLM (KG-RAG).", "source_text": "GitHub - FalkorDB/FalkorDB: A super fast Graph Database uses GraphBLAS under\nthe hood for its sparse adjacency matrix graph representation. Our goal is to\nprovide the best Knowledge Graph for LLM (KG-RAG).\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nFalkorDB / FalkorDB Public\n\n  * Notifications\n  * Fork 16\n  * Star 374\n\nA super fast Graph Database uses GraphBLAS under the hood for its sparse\nadjacency matrix graph representation. Our goal is to provide the best\nKnowledge Graph for LLM (KG-RAG).\n\nwww.falkordb.com/\n\n### License\n\nView license\n\n374 stars 16 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# FalkorDB/FalkorDB\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n233 Branches\n\n167 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nswilly22zero dim vector save/load (#654)Apr 21, 20247e5c58f \u00b7 Apr 21, 2024Apr\n21, 2024\n\n## History\n\n1,896 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| fix #645 Add objective to README (#646)| Apr 18, 2024  \n  \n### build\n\n|\n\n### build\n\n| Disable jit (#612)| Apr 4, 2024  \n  \n### demo\n\n|\n\n### demo\n\n| remove runtime tests, remove extra prints (#575)| Feb 22, 2024  \n  \n### deps\n\n|\n\n### deps\n\n| update RediSearch (#640)| Apr 16, 2024  \n  \n### sbin\n\n|\n\n### sbin\n\n| CircleCI: macOS/M1 (#2976)| May 15, 2023  \n  \n### src\n\n|\n\n### src\n\n| zero dim vector save/load (#654)| Apr 21, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| zero dim vector save/load (#654)| Apr 21, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| integrate falkordbrs (#544)| Mar 3, 2024  \n  \n### .gitmodules\n\n|\n\n### .gitmodules\n\n| integrate falkordbrs (#544)| Mar 3, 2024  \n  \n### .spellcheck.yml\n\n|\n\n### .spellcheck.yml\n\n| Spellcheck (#2389)| Jun 19, 2022  \n  \n### CMakeLists.txt\n\n|\n\n### CMakeLists.txt\n\n| integrate falkordbrs (#544)| Mar 3, 2024  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Create CONTRIBUTING.md (#34)| Aug 22, 2023  \n  \n### Cargo.lock\n\n|\n\n### Cargo.lock\n\n| integrate falkordbrs (#544)| Mar 3, 2024  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| integrate falkordbrs (#544)| Mar 3, 2024  \n  \n### LICENSE.txt\n\n|\n\n### LICENSE.txt\n\n| update license to SSPL| Aug 10, 2023  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| integrate falkordbrs (#544)| Mar 3, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| fix #645 Add objective to README (#646)| Apr 18, 2024  \n  \n### SECURITY.md\n\n|\n\n### SECURITY.md\n\n| Create CONTRIBUTING.md (#34)| Aug 22, 2023  \n  \n### ramp.yml\n\n|\n\n### ramp.yml\n\n| require Redis version 6.2.0 or above (#3140)| Jul 17, 2023  \n  \n## Repository files navigation\n\n# FalkorDB\n\nOur objective is to create an outstanding Knowledge Graph specifically for\nLarge Language Models (LLM) that boasts exceptionally low latency, ensuring\nswift delivery of information through our Graph Database, known as KG-RAG.\n\nFalkorDB is the first queryable Property Graph database to use sparse matrices\nto represent the adjacency matrix in graphs and linear algebra to query the\ngraph.\n\nPrimary features:\n\n  * Adopting the Property Graph Model\n\n    * Nodes (vertices) and Relationships (edges) that may have attributes\n    * Nodes can have multiple labels\n    * Relationships have a relationship type\n  * Graphs represented as sparse adjacency matrices\n  * OpenCypher with proprietary extensions as a query language\n\n    * Queries are translated into linear algebra expressions\n\nTo see FalkorDB in action, visit Demos.\n\n## Quickstart\n\n  1. Trying FalkorDB\n  2. Build\n  3. Start\n  4. Use from any client\n  5. Documentation\n\n## Give it a try\n\nTo quickly try out FalkorDB, launch an instance using docker:\n\n    \n    \n    docker run -p 6379:6379 -it --rm falkordb/falkordb:edge\n\nOr, to use the built-in browser-based interface, run:\n\n    \n    \n    docker run -p 6379:6379 -p 3000:3000 -it --rm falkordb/falkordb:edge\n\nThen, open your browser and navigate to http://localhost:3000.\n\nYou can also interact with FalkorDB using any of the supported client\nlibraries\n\nHere we'll use FalkorDB Python client to create a small graph representing a\nsubset of motorcycle riders and teams taking part in the MotoGP league, once\ncreated we'll start querying our data.\n\n    \n    \n    from falkordb import FalkorDB # Connect to FalkorDB db = FalkorDB(host='localhost', port=6379) # Create the 'MotoGP' graph g = db.select_graph('MotoGP') g.query(\"\"\"CREATE (:Rider {name:'Valentino Rossi'})-[:rides]->(:Team {name:'Yamaha'}), (:Rider {name:'Dani Pedrosa'})-[:rides]->(:Team {name:'Honda'}), (:Rider {name:'Andrea Dovizioso'})-[:rides]->(:Team {name:'Ducati'})\"\"\") # Query which riders represents Yamaha? res = g.query(\"\"\"MATCH (r:Rider)-[:rides]->(t:Team) WHERE t.name = 'Yamaha' RETURN r.name\"\"\") for row in res.result_set: print(row[0]) # Prints: \"Valentino Rossi\" # Query how many riders represent team Ducati ? res = g.query(\"\"\"MATCH (r:Rider)-[:rides]->(t:Team {name:'Ducati'}) RETURN count(r)\"\"\") print(row[0]) # Prints: 1\n\n## Building\n\n### Compiling\n\nRequirements:\n\n  * The FalkorDB repository: git clone --recurse-submodules -j8 https://github.com/FalkorDB/FalkorDB.git\n\n  * On Ubuntu Linux, run: apt-get install build-essential cmake m4 automake peg libtool autoconf python3 python3-pip\n\n  * On OS X, verify that homebrew is installed and run: brew install cmake m4 automake peg libtool autoconf.\n\n    * The version of Clang that ships with the OS X toolchain does not support OpenMP, which is a requirement for FalkorDB. One way to resolve this is to run brew install gcc g++ and follow the on-screen instructions to update the symbolic links. Note that this is a system-wide change - setting the environment variables for CC and CXX will work if that is not an option.\n\nTo build, run make in the project's directory.\n\nCongratulations! You can find the compiled binary at\nbin/<arch>/src/falkordb.so.\n\n### Running tests\n\nFirst, install required Python packages by running pip install -r\nrequirements.txt from the tests directory.\n\nIf you've got redis-server in PATH, just invoke make test.\n\nOtherwise, invoke REDIS_SERVER=<redis-server-location> make test.\n\nFor more verbose output, run make test V=1.\n\n### Building in a docker\n\nThe FalkorDB build system runs within docker. For detailed instructions on\nbuilding, please see here.\n\n## Loading FalkorDB into Redis\n\nFalkorDB is hosted by Redis, so you'll first have to load it as a Module to a\nRedis server. Redis 6.2 is required for FalkorDB 2.12.\n\nWe recommend having Redis load FalkorDB during startup by adding the following\nto your redis.conf file:\n\n    \n    \n    loadmodule /path/to/module/src/falkordb.so\n\nIn the line above, replace /path/to/module/src/falkordb.so with the actual\npath to FalkorDB's library. If Redis is running as a service, you must ensure\nthat the redis user (default) has the necessary file/folder permissions to\naccess falkordb.so.\n\nAlternatively, you can have Redis load FalkorDB using the following command\nline argument syntax:\n\n    \n    \n    ~/$ redis-server --loadmodule /path/to/module/src/falkordb.so\n\nLastly, you can also use the MODULE LOAD command. Note, however, that MODULE\nLOAD is a dangerous command and may be blocked/deprecated in the future due to\nsecurity considerations.\n\nOnce you've successfully loaded FalkorDB your Redis log should see lines\nsimilar to:\n\n    \n    \n    ... 30707:M 20 Jun 02:08:12.314 * Module 'graph' loaded from <redacted>/src/falkordb.so ...\n\nIf the server fails to launch with output similar to:\n\n    \n    \n    # Module /usr/lib/redis/modules/falkordb.so failed to load: libgomp.so.1: cannot open shared object file: No such file or directory # Can't load module from /usr/lib/redis/modules/falkordb.so: server aborting\n\nThe system is missing the run-time dependency OpenMP. This can be installed on\nUbuntu with apt-get install libgomp1, on RHEL/CentOS with yum install libgomp,\nand on OSX with brew install libomp.\n\n## Using FalkorDB\n\nYou can call FalkorDB's commands from any Redis client.\n\n### With redis-cli\n\n    \n    \n    $ redis-cli 127.0.0.1:6379> GRAPH.QUERY social \"CREATE (:person {name: 'roi', age: 33, gender: 'male', status: 'married'})\"\n\n### With any other client\n\nYou can interact with FalkorDB using your client's ability to send raw Redis\ncommands.\n\nDepending on your client of choice, the exact method for doing that may vary.\n\n#### Python example\n\nThis code snippet shows how to use FalkorDB with from Python using falkordb-\npy:\n\n    \n    \n    from falkordb import FalkorDB # Connect to FalkorDB db = FalkorDB(host='localhost', port=6379) # Select the social graph g = db.select_graph('social') reply = g.query(\"CREATE (:person {name:'roi', age:33, gender:'male', status:'married'})\")\n\n### Client libraries\n\nSome languages have client libraries that provide support for FalkorDB's\ncommands:\n\nProject| Language| License| Author| Stars| Package| Comment  \n---|---|---|---|---|---|---  \njfalkordb| Java| BSD| FalkorDB| Maven  \nfalkordb-py| Python| MIT| FalkorDB| pypi  \nfalkordb-ts| Node.JS| MIT| FalkorDB| npm  \nnredisstack| .NET| MIT| Redis| nuget  \nredisgraph-rb| Ruby| BSD| Redis| GitHub  \nredgraph| Ruby| MIT| pzac| GitHub  \nredisgraph-go| Go| BSD| Redis| GitHub  \nrueidis| Go| Apache 2.0| Rueian| GitHub  \nioredisgraph| JavaScript| ISC| Jonah| GitHub  \n@hydre/rgraph| JavaScript| MIT| Sceat| GitHub  \nphp-redis-graph| PHP| MIT| KJDev| GitHub  \nredisgraph_php| PHP| MIT| jpbourbon| GitHub  \nredisgraph-ex| Elixir| MIT| crflynn| GitHub  \nredisgraph-rs| Rust| MIT| malte-v| GitHub  \nredis_graph| Rust| BSD| tompro| GitHub  \nrustis| Rust| MIT| Dahomey Technologies| Crate| Documentation  \nNRedisGraph| C#| BSD| tombatron| GitHub  \nRedisGraph.jl| Julia| MIT| xyxel| GitHub  \n  \n## License\n\nLicensed under the Server Side Public License v1 (SSPLv1). See LICENSE.\n\n## About\n\nA super fast Graph Database uses GraphBLAS under the hood for its sparse\nadjacency matrix graph representation. Our goal is to provide the best\nKnowledge Graph for LLM (KG-RAG).\n\nwww.falkordb.com/\n\n### Topics\n\ndatabase devtools knowledge-graph database-as-a-service developer-tools graph-\ndatabase realtime-database cloud-database\n\n### Resources\n\nReadme\n\n### License\n\nView license\n\n### Security policy\n\nSecurity policy\n\nActivity\n\nCustom properties\n\n### Stars\n\n374 stars\n\n### Watchers\n\n13 watching\n\n### Forks\n\n16 forks\n\nReport repository\n\n## Releases 10\n\nv4.0.9 Latest\n\nApr 19, 2024\n\n\\+ 9 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 58\n\n\\+ 44 contributors\n\n## Languages\n\n  * C 56.5%\n  * Gherkin 20.4%\n  * Python 19.9%\n  * C++ 2.3%\n  * Shell 0.6%\n  * Makefile 0.3%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
