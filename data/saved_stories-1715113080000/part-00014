{"aid": "40283953", "title": "Overwhelm Yourself with as Many Tools as Possible (Why Not?)", "url": "https://www.sungho.blog/p/overwhelm-yourself-with-as-many-tools-as-possible", "domain": "sungho.blog", "votes": 3, "user": "sungho_", "posted_at": "2024-05-07 10:10:26", "comments": 0, "source_title": "Overwhelm Yourself with as Many Tools as Possible (Why Not?)", "source_text": "Overwhelm Yourself with as Many Tools as Possible (Why Not?)\n\n# Overwhelm Yourself with as Many Tools as Possible (Why Not?)\n\n# Tool Maximalism\n\nThis post is part of the 'Tool Intelligence' series.\n\n##### It seems that people generally think in the following ways:\n\n\\- Foolish people believe that one should use as many tools as possible from\nthe beginning.\n\n\\- Smart people believe that's wrong, and that one should minimize tool usage\nwhen starting something, and gradually increase tools only as needed.\n\nOf course, what I'll argue is that the smart people are wrong, and in fact,\nit's best to use as many tools as possible from the start.\n\n##### To be more specific, let's explicitly break down what each perspective\nmeans:\n\nWhy foolish people think that way:\n\n\\- It's good to be able to use as many features as possible.\n\nWhy smart people think that way:\n\n1\\. Complexity increases each time you add tools, to the point of becoming\nunmanageable.\n\n2\\. You have to learn how to use each additional tool, so each time the number\nof tools increases, you have to pour time and effort into it.\n\n\\- It becomes cumbersome to use freely, like an \"overly ambitious time\nmanagement system.\"\n\n\\- So if you start out using a lot of tools at once, it takes too long just to\nprepare before you even begin.\n\n##### How I will advocate for my argument in this post:\n\n1\\. Why the smart people are wrong\n\n2\\. What the foolish people missed\n\n## On the problem of using many tools\n\n#### 1\\. The problem of increasing complexity as the number of tools used\nincreases\n\nIn reality, the cases where increasing complexity becomes a problem are when\ntools that redundantly handle the same scope interfere with each other.\n\nFor example:\n\nI want to set up keyboard hotkeys, but there isn't a single tool with the\nfeatures I want to do that. So I end up having to use multiple tools. And what\nhappens then is:\n\n  1. It gets confusing how changing a key to another key in one tool gets applied in another tool.\n\n  2. Keys don't press or release as intended in multiple places handling the same key.\n\n  3. Settings made in one tool conflict with settings in another tool and work strangely.\n\n  4. Changing something in one tool causes a strange phenomenon in interaction with another tool.\n\nBut for tools that don't interfere with each other, it's not an issue.\n\nFor example:\n\nIn a code editor, there are two extensions that show the starting part of the\nbracket where the current caret is located even when scrolling down.\n\n1\\. An extension that displays the starting part of the bracket at the top of\nthe screen.\n\n2\\. An extension that shows the contents of the matching opening bracket after\neach closing bracket.\n\nYou can see that both deal with the same subject of brackets, but their areas\ndon't interfere with each other.\n\n#### 2\\. The problem of having to learn and handle the usage of many tools\n\nFirst, you can use meta-tools that assist in handling tools (it\u2019s also a topic\nthat will be covered later in the Tool Intelligence series)\n\nAnd the second is, of course, blatant memorization. The problem is that such\nthings are usually not treated as \"subjects of learning.\" If you treat the\nusage of tools as \"subjects of learning\" and deliberately memorize them, it\ncan be done. Such things are usually much lighter and smaller in volume than\nwhat is normally seriously treated as subjects of learning, which is why they\nare not treated as subjects of learning. So if you try to master them\ndeliberately, it's easy to do.\n\n## Why Tool Maximalism is Necessary\n\n#### 1\\. You can't know in advance what will be good.\n\nIt's hard to even have a rough map of what tools are available for what you\nwant. New tools are constantly emerging.\n\nAnd until you try it, you don't know what tool will be used for what, or how\nuseful it will be. There is a saying, \"When you have a hammer in your hand,\nevery problem looks like a nail,\" which shows that often, it is only after\nmastering a tool that you see the problems to which that tool can be applied.\n\nWhen the use cases of a powerful tool fit your situation, it is often\nextremely useful. Even if that's not the case, it is common for a tool whose\nsignificance was hard to know at present to become necessary later.\n\nOn the other hand, \"missing out\" on something can cause enormous losses.\n\nThese aspects make VC investment-like approach useful in selecting tools.\n\n  1. Trying out each tool should be treated as an investment.\n\n  2. Invest in multiple and hope that one of them succeeds. In other words, Spray & Pray.\n\n  3. Attempts that don't work out are also part of the investment.\n\n#### 2\\. If a tool is good enough, even if it's not needed now, it's likely to\nbe needed later.\n\nPeople tend to be bad at judging what tools they need, but good at judging how\npowerful a tool is, which makes this way a practical approach.\n\n#### 3\\. On the other hand, doing the same task incrementally increases the\nburden much more.\n\nSteps are burdensome by their very existence. The idea behind the original\nadvice to start with minimized tools is to reduce the burden, but when divided\ninto steps, the division into steps itself makes the burden greater.\n\nFor example:\n\nInstalling 100 code editor extensions at once and intensively testing them for\na day vs. gradually testing them, say, 1 per day for 100 days.\n\nThe latter is much more tiring and burdensome.\n\n## When it's actually not good to use too many tools from the beginning\n\n1\\. Each one is too big and takes too long to prepare to use, so the cost of\nstarting late outweighs the benefits of the tool.\n\n2\\. Overlapping ones that handle the same scope interfere with each other.\n\n## What to do in the end\n\nOpposite to \"starting with minimized tools and gradually increasing,\" you\nshould \"use maximized tools and gradually reduce them.\" That way you don't\nmiss out on anything.\n\nIn other words, the tools you use should not gradually increase, but start at\nthe maximum and gradually decrease.\n\nYou just need to figure out which tools to test simultaneously and which tools\nto apply gradually. Test and learn the tools in parallel as many as possible,\nexcept for those that need to be applied gradually.\n\nsungho.blog\n\nHome\n\nPosts\n\nLinks\n\nAbout\n\nTwitter\n\nBuy Me a Coffee\n\n\u00a9 2024 sungho.blog.\n\nPrivacy Policy\n\nTerms of Use\n\nPowered by beehiiv\n\n", "frontpage": false}
