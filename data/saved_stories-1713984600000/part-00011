{"aid": "40141967", "title": "Sysadmin friendly high speed Ethernet switching", "url": "https://blog.benjojo.co.uk/post/sn2010-linux-hacking-switchdev", "domain": "benjojo.co.uk", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-24 08:32:36", "comments": 0, "source_title": "Sysadmin friendly high speed ethernet switching", "source_text": "Sysadmin friendly high speed ethernet switching\n\n< All posts | Fediverse | RSS | GitHub | Talks\n\n### Apr 18 2024\n\n# Sysadmin friendly high speed ethernet switching\n\nI\u2019ve been on the lookout for a ethernet switch that I don\u2019t hate, the problem\nwith a lot of higher speed (10G and above) ethernet switches is that they are\nquite expensive new and if you buy the used then they rarely have many years\nleft ( or none at all ) of software patches.\n\nA lot of the low end market for ethernet switches also have infamously bad\nsoftware and one of the things that annoys me the most about the networking\nindustry as a whole is that a lot of the cheap equipment has no real way of\ndoing software support yourself.\n\nSo, I was very happy to learn that a friend had a Mellanox SN2010 that they\nwere not using and were willing to sell to me. The SN2010 (Or the HP branded\nSKU that I picked up SN2010M) is a 18xSFP28 (25gbit) and 4xQSFP28 (100gbit)\nswitch that instead of being your typical switch that uses a broadcom chipset\nfor the data plane ( the bit that actually switches the packets ), uses\nMellanox\u2019s (now nvidia) own silicon. The massive benefit of this is that the\ndrivers (mlxsw) for the Mellanox chip are open to people who don\u2019t want to pay\nlarge volumes of money for a SDK, unlike the broadcom counterparts.\n\nSo I took a punt, and bought it.\n\nThe goal that I now have is to run this relatively cheap (and power efficient\nat 60W) switch with as close to stock Debian as possible. That way I do not\nhave to lean on any supplier for software updates, and I can upgrade software\non the switch for as long as I need it. This does mean however that the bugs\nwill be my responsibility (since there is no TAC to fall back on).\n\nA lot of the stuff I am going to present will be similar to Pim\u2019s research for\na similar SN2700 but I will focus on how I\u2019ve deployed my setup, now that I\u2019ve\nbeen running this setup for some time in production without any hitches. Like\nthe SN2700 is a 32x 100G port device, newer, larger and faster versions of\nthese switches are also available.\n\nFirst though, let\u2019s take a peek...\n\n# Under the hood\n\nHere we see two reasonably integrated 12V DC power supplies. They are not hot\nswappable, however in my production experience so far I have not encountered a\nPSU failure where a hot swap unit would have been useful. So that is not a\nproduction concern to me.\n\nIn addition the fan tray can easily be swapped around, meaning you can easily\ntransition this from being a Ports-to-Power airflow to Power-to-Ports airflow.\nI use the switch in Power-to-Ports as it\u2019s easier to access the optical ports\nfrom the back of the rack than the front for my use case.\n\nOne thing of note while we have the lid open, Inside of the switch is a\nmystery QSFP connector with no cage, I\u2019m unsure what it is used for, but I\u2019m\nnot willing to risk sticking an optic in it and find out!\n\n# Debian on a Ethernet Switch\n\nBecause the switch is sold under \u201copen networking\u201d it comes with the ONIE\ninstallation system.\n\nMy previous experience with ONIE suggests that it is not going to be\nincredibly useful for our use case, so we will not be using it, instead opting\nfor a more SN2010 specific method. If you squint, this switch basically looks\nlike a laptop with an absolutely massive network card installed into it:\n\nSo we can just install Debian on it as if it was a laptop. So first, we need\nto get into the firmware/BIOS of the switch.\n\nFirst you will need (really) a USB Keyboard to get into the BIOS, when the\nswitch boots up mash F7, if you are lucky Ctrl+B will work over the serial\nconsole, but do not count on this working.\n\nIf you have done this correctly a BIOS password prompt will show up, the BIOS\npassword is typically \u201cadmin\u201d\n\nOnce you are into the BIOS you can remove the USB keyboard and replace it with\na USB drive with a debian netinstall, then using the serial console navigate\nto the EFI Shell to boot grub from the USB drive.\n\nW\n\nWhen you get to grub you need to teach the installer about the serial console,\nsince it will be critical for you to be able to install from, you can do this\nby adding \u201cconsole=tty0 console=ttyS0,115200\u201d to the end of the boot options.\n\nOnce you have done that, you can proceed with a normal debian install, you\nwill only see one NIC for now, since that is the built in NIC from the Intel\nAtom SOC that is the \u201cmanagement\u201d ethernet port next to the serial console\n\nOnce you have finished installing, you will need to also apply the same\n\u201cconsole=tty0 console=ttyS0,115200\u201d into your boot options on first boot, and\nthen set that up to be a permanent grub configuration.\n\nNow that we have a working debian system, we can observe that we only\ncurrently have a single NIC, but we do have a mystery PCI device.\n\n    \n    \n    # lspci 00:00.0 Host bridge: Intel Corporation Atom processor C2000 SoC Transaction Router (rev 03) 00:01.0 PCI bridge: Intel Corporation Atom processor C2000 PCIe Root Port 1 (rev 03) 00:02.0 PCI bridge: Intel Corporation Atom processor C2000 PCIe Root Port 2 (rev 03) 00:03.0 PCI bridge: Intel Corporation Atom processor C2000 PCIe Root Port 3 (rev 03) 00:0b.0 Co-processor: Intel Corporation Atom processor C2000 QAT (rev 03) 00:0e.0 Host bridge: Intel Corporation Atom processor C2000 RAS (rev 03) 00:0f.0 IOMMU: Intel Corporation Atom processor C2000 RCEC (rev 03) 00:13.0 System peripheral: Intel Corporation Atom processor C2000 SMBus 2.0 (rev 03) 00:14.0 Ethernet controller: Intel Corporation Ethernet Connection I354 (rev 03) 00:16.0 USB controller: Intel Corporation Atom processor C2000 USB Enhanced Host Controller (rev 03) 00:17.0 SATA controller: Intel Corporation Atom processor C2000 AHCI SATA2 Controller (rev 03) 00:18.0 SATA controller: Intel Corporation Atom processor C2000 AHCI SATA3 Controller (rev 03) 00:1f.0 ISA bridge: Intel Corporation Atom processor C2000 PCU (rev 03) 00:1f.3 SMBus: Intel Corporation Atom processor C2000 PCU SMBus (rev 03) 01:00.0 Ethernet controller: Mellanox Technologies MT52100\n\nTo allow the switch to command the switch chip and see the other front panel\nports we will need to use a kernel that has the mlx-core module, this module\nis not compiled with the \u201cstock\u201d debian kernels.\n\nThis is a case of ensuring the following modules in the kernel build config\nare set:\n\nIf you are not able to compile a kernel yourself, and you can try with my pre-\ncompiled kernels (that come with zero support/security updates/guarantee)\nhere: https://benjojo.co.uk/fp/mlx-sw-kernel-debs.tar\n\n# Upgrading the ASIC firmware\n\nThe Linux kernel driver is expecting a specific version of firmware to be\nrunning on the switch chip, so after you reboot with the new kernel you might\nstill not have all of the interfaces. You can look in dmesg for something\nlike:\n\n[ 7.168728] mlxsw_spectrum 0000:01:00.0: The firmware version 13.1910.622 is\nincompatible with the driver (required >= 13.2010.1006)\n\nWe can get these firmware blobs from https://switchdev.mellanox.com/firmware/,\nand extract them to /usr/lib/firmware/mellanox, for example the file path for\nthe above dmesg line should be\n/usr/lib/firmware/mellanox/mlxsw_spectrum-13.2010.1006.mfa2, once you have put\nit there you may also want to run update-initramfs -u -k all and reboot and\nwait (for at least 10 mins) for the driver to automatically upgrade the chip\nfirmware.\n\nIf you are running HPE or Catchpoint SKUs of this switch, the kernel driver\nmay fail to upgrade the firmware with something like:\n\n    \n    \n    mlxfw: Firmware flash failed: Could not lock the firmware FSM, err (-5)\n\nIf you encounter this try compiling and using the user space tool and running\nthe upgrade manually\n\n$ mstfwmanager -d 01:00.0 -i mlxsw_spectrum-13.2000.2308.mfa -f -u\n\nIf successful, the upgrade should look like:\n\n    \n    \n    Device #1: ---------- Device Type: Spectrum Part Number: Q9E63-63001_Ax Description: HPE StoreFabric SN2010M 25GbE 18SFP28 4QSFP28 Half Width Switch PSID: HPE0000000025 PCI Device Name: 01:00.0 Base MAC: 1c34daaaaa00 Versions: Current Available FW 13.1910.0622 13.2010.1006 Status: Update required --------- Found 1 device(s) requiring firmware update... Device #1: Updating FW ... [4 mins delay] Done Restart needed for updates to take effect.\n\nAssuming the upgrade succeeds, reboot the switch and you should see a extra 20\nnetwork interfaces appear in ip link\n\nYou can double check your chip versions by running:\n\n    \n    \n    # devlink dev info pci/0000:01:00.0: driver mlxsw_spectrum versions: fixed: hw.revision A1 fw.psid HPE0000000025 running: fw.version 13.2010.1006 fw 13.2010.1006\n\n# Sensible switch interface names\n\nYou will likely want to apply udev rules to ensure these interfaces are named\nin a way that makes a bit more sense, otherwise you can physically locate each\nport by blinking their port LEDs with ethtool -m swp1\n\nI use the udev rules from Pim\u2019s guide on the SN2700:\n\n    \n    \n    # cat << EOF > /etc/udev/rules.d/10-local.rules SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"mlxsw_spectrum*\", \\ NAME=\"sw$attr{phys_port_name}\" EOF\n\nOnce you reboot your front panel switch interface names should now be swp*\ninterfaces that should match roughly with the numbers on the front.\n\nIf you are ever unsure what you are port you are looking at on the CLI you can\n\u201ceyeball\u201d what port is what by using the port speed indicator from ethtool,\nfor example, a 100G QSFP28 port looks like:\n\n    \n    \n    root@bgptools-switch:~# ethtool swp20 Settings for swp20: Supported ports: [ FIBRE ] Supported link modes: 1000baseKX/Full 10000baseKR/Full 40000baseCR4/Full 40000baseSR4/Full 40000baseLR4/Full 25000baseCR/Full 25000baseSR/Full 50000baseCR2/Full 100000baseSR4/Full 100000baseCR4/Full 100000baseLR4_ER4/Full\n\nThese ports can be configured as you would a normal \u201csoftware\u201d linux router\ninterface, complete with the routing table as well. Except most configuration\nyou are providing to linux is automatically replicated to the ASIC for you. In\nmy case I will use ifupdown to manage my interface configuration, as it is the\neasiest for me to debug if it ever goes wrong.\n\nThis allows you to have 800Gbits+ of capacity managed by a 4 Core Intel Atom\nCPU!\n\n# Building the swooter\n\nNow that we have a working router, we can just set things up like we would a\nnormal Linux \u201csoft\u201d router, except this swooter (a name I use for a switches\nthat function as IP routers as well) can copy the setup we build inside of\nLinux, and put it into a data plane capable of multiples of 100 Gbit/s.\n\nFor the sake of this post, I will go over the setup I\u2019ve been running in\nproduction to show you what this switch has to offer:\n\nI have two uplink ports from my provider, they are VLAN tagged with a\nDIA/Internet with point to point addresses (/31 for IPv4, /127 for IPv6) that\nhave BGP on them. There are a number of other IP services that are delivered\nusing different VLANs on one of the provider ports.\n\nIn my previous setup I would be doing BGP on one of the servers, but the\nswitch can handle both of these BGP sessions. However it\u2019s worth knowing that\nthe switch cannot handle \u201cfull\u201d internet BGP tables, but I requested that my\nprovider send IPv4 and IPv6 default routes on both BGP sessions to solve that\nproblem.\n\nIn my previous setup, all of my servers sat in a private production VLAN with\nOSPF coordinating the IP addressing between them. Since I don\u2019t want to change\ntoo many things at once. I\u2019ve replicated the same thing by chaining most\nservers ethernet ports into a newly made \u201cbr-rack\u201d Linux Bridge\n\nThere is however one server that needs this bridge in a VLAN, however that is\nfine since you can just make a linux VLAN interface and add that to the bridge\nand the driver will automatically figure this out.\n\nUsing ifupdown language, this is what the port configuration looks like in\n/etc/network/interfaces:\n\n    \n    \n    auto swp4 iface swp4 inet manual iface swp4 inet6 manual auto swp4.400 # \"Rack LAN\" auto swp4.700 # Service1 auto swp4.701 # Service2 auto br-rack0 iface br-rack0 inet static bridge_hw swp5 bridge-ports swp4.400 swp5 swp6 swp7 swp8 swp9 swp10 bridge_stp off bridge_waitport 0 bridge_fd 0 address 185.230.223.xxx/28 post-up ip l set dev br-rack0 type bridge mcast_snooping 0 iface br-rack0 inet6 static dad-attempts 0 address 2a0c:2f07:4896:xxx/120\n\nYou will want to ensure you have set bridge mcast_snooping 0 if you plan on\nusing OSPF, as if you have snooping enabled without extra services running on\nthe switch, multicast traffic (including OSPF) can be disrupted.\n\nYou will also want to set bridge_hw to a switch port of your choice. Due to\nhardware limitations the switch chip has to use 1 range of MAC addresses for\nthings that relate/route to it. So the bridge_hw option just \u201csteals\u201d the MAC\naddress of a port and uses that for the bridge.\n\nAt this point you can just configure BGP and OSPF as you normally would, and\ninstall/export the routes into the kernel, However since the hardware can only\nhold around 80,000 routes some care needs to be taken to ensure that you only\n\u201cinstall\u201d your own Internal/OSPF routes and your provider BGP default routes.\n\nFor example, my own bird config looks like:\n\n    \n    \n    protocol kernel { merge paths on; ipv4 { export filter { if net ~ [0.0.0.0/0{0,0},185.230.223.0/24{24,32}] || source = RTS_OSPF || source = RTS_OSPF_EXT2 || source = RTS_OSPF_EXT1 then { accept; } reject; }; }; }\n\nThe merge paths on option allows the switch to ECMP over routes, useful for\nyour default routes\n\n    \n    \n    root@bgptools-switch:~# ip route default proto bird metric 32 rt_offload nexthop via 192.0.2.1 dev swp1.600 weight 1 offload nexthop via 192.0.2.2 dev swp2.601 weight 1 offload 198.51.100.0/28 via 185.230.223.xxx dev br-rack0 proto bird metric 32 offload rt_offload 203.0.113.0/24 via 185.230.223.xxx dev br-rack0 proto bird metric 32 offload rt_offload\n\nIt is worth pointing out that you should also setup a sane and sensible SSH\npolicy and firewalling. You could easily just apply the same solution that you\nuse for your servers. Like Salt/Chef/Puppet/Ansible, after all, this is just\nlike a server with a magic NIC in it!\n\nThere are also some good linux sysctl options you should set to make your\nswooter act more like a hardware router is expected to. As per the mlxsw wiki\nrecommends:\n\n# Hardware assisted firewalling\n\nThanks to the switch chip, almost all traffic going through the switch will\nnot be visible to the Debian side of the system. This does mean that you will\nnot be able to use nf/iptables on forwarded traffic, however the switch driver\ndoes allow some Linux Traffic Control (tc) rules that use the \u201cflower\u201d system\nto be inserted into hardware, For example:\n\n    \n    \n    tc qdisc add dev swp1 clsact # Rate limit UDP from port swp1 going to a IP address to 10mbit/s tc filter add dev swp1 ingress protocol ip pref 10 \\ flower skip_sw dst_ip 192.0.2.1 ip_proto udp \\ action police rate 10mbit burst 16k conform-exceed drop/ok # Drop TCP SYN packets from swp1 going to 192.0.2.2 tc filter add dev swp1 ingress protocol ip pref 20 \\ flower dst_ip 192.0.2.2 ip_proto tcp tcp_flags 0x17/0x02 \\ action drop\n\nYou can monitor the results of these rules using tc -s filter show swp1\ningress\n\n    \n    \n    # tc -s filter show dev swp2 ingress filter protocol ip pref 10 flower chain 0 filter protocol ip pref 10 flower chain 0 handle 0x1 eth_type ipv4 ip_proto udp dst_ip 192.0.2.1 skip_sw in_hw in_hw_count 1 action order 1: police 0x7 rate 10Mbit burst 16Kb mtu 2Kb action drop overhead 0b ref 1 bind 1 installed 3615822 sec used 1 sec Action statistics: Sent 3447123283 bytes 4481404 pkt (dropped 1920284, overlimits 0 requeues 0) Sent software 0 bytes 0 pkt Sent hardware 3447123283 bytes 4481404 pkt backlog 0b 0p requeues 0 used_hw_stats immediate ...\n\nUseful examples of flower rules include:\n\n    \n    \n    # Target UDP to a IP range flower skip_sw dst_ip 192.0.2.0/24 ip_proto udp # Target TCP port 80 to any IP flower skip_sw src_port 80 ip_proto tcp # Target all GRE packets flower skip_sw ip_proto 47\n\nYou must ensure that you do not put skip_sw in your rule if you plan to drop\npackets, else your ACL could be bypassed if a packet was engineered to trigger\na control plane punt.\n\nI do not know any good utility to manage these rules for you, Instead I have a\nshell script that applies them on boot using a systemd service.\n\n# Monitoring the split state\n\nSince there are two sides (the CPU side and the chip side) to this switch, it\nis useful to monitor both of them, The driver keeps the regular kernel\ncounters in sync with how much the chip is doing for you automatically:\n\n    \n    \n    # ip -s -h l show dev swp1 24: swp1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000 link/ether 1c:34:da:xx:xx:xx brd ff:ff:ff:ff:ff:ff RX: bytes packets errors dropped missed mcast 2.01T 4.74G 0 0 0 214M TX: bytes packets errors dropped carrier collsns 1.10T 5.78G 0 0 0 0 altname enp1s0np1\n\nIf you want to just know how much traffic a interfaces has been sent to the\nAtom CPU, you can run this:\n\n    \n    \n    # ip -h stats show dev swp1 group offload subgroup cpu_hit 24: swp1: group offload subgroup cpu_hit RX: bytes packets errors dropped missed mcast 25.3G 264M 0 0 0 0 TX: bytes packets errors dropped carrier collsns 442M 5.14M 0 0 0 0\n\nThis 25GB here is roughly speaking the BGP traffic that the switch has done\nwith the service provider since boot.\n\nHowever if you are looking for counters on why data was sent to the CPU, you\ncan run the following to get the counters:\n\n    \n    \n    # devlink -s trap | grep -v pci/0000:01:00.0 | paste - - - - | grep -v \"bytes 0\" name ttl_value_is_too_small type exception generic true action trap group l3_exceptions stats: rx: bytes 20084104 packets 227812 ... name ipv6_ospf type control generic true action trap group ospf stats: rx: bytes 71177822 packets 591399 name ipv4_bgp type control generic true action trap group bgp stats: rx: bytes 1626384210 packets 3005173 name ipv6_bgp type control generic true action trap group bgp stats: rx: bytes 2128110217 packets 3538356 ...\n\nBecause the network interface counters are automatically synchronised, you can\nuse your normal monitoring tools on your servers, on this switch. My setup is\na blend of collectd and prometheus node_exporter, both of these tools work\nfine:\n\n# Packet Sampling / sflow\n\nNormal packet sampling methods do not work on this switch, because as\nmentioned above the CPU side of the switch is nearly totally oblivious to most\ntraffic passing through the switch. However this becomes a problem when you\nwish to do packet sampling for traffic statistics, or to drive something like\nFastNetMon for DDoS detection.\n\nHowever not all is lost, hsflowd does support the driver\u2019s \u201cpsample\u201d system\nfor gathering data.\n\nMy hsflowd config is as follows:\n\n    \n    \n    sflow { sampling.10G=10000 collector { ip=192.0.2.1 UDPPort=6666 } psample { group=1 egress=on } dent { sw=on switchport=swp.* } }\n\nSince hsflowd has an incompatible software licence with most distros, you will\nhave to build it yourself. However I find that once compiled, hsflowd\nautomatically manages the tc rules required for packet samples.\n\n# Alternatives to Nvidia/Mellanox\n\nI think this is incredibly nice hardware, with even more incredible open\nsource drivers. However I do worry that Nvidia will fall down a similar path\nto the late Nortel at this point due to their meteoric rise in an industry\nthat could easily be a bubble. For that reason it is worth calling out that\nthey are not the only vendor with this kind of open source driver\nfunctionality.\n\nArista has a closed source driver like this where you can supplement parts of\ntheir \u201cEOS\u201d with your own parts, however it is nowhere near as complete as\nthis. But it does allow you to run bird (or other routing software) on their\nproducts if you wish to retain control of the code powering of your routing\nprotocols.\n\nMarvell also apparently has drivers similar to mlxsw, I have yet to personally\nuse such hardware, but Mikrotik is known to use this hardware, but right now\nhas no official (or known) way to \u201cjailbreak\u201d the hardware to run your own\nsoftware stack.\n\nI hope this changes in the future, as Mikrotik\u2019s hardware price point is very\ncompetitive, it\u2019s just the software reliability that always turns me off their\nproducts, so having an option to not use RouterOS while keeping their very\ncompetitive hardware would be a huge deal.\n\n# Closing thoughts\n\nI agree with Pim\u2019s conclusion, this switch and its ecosystem is incredible.\nGood, and acquirable hardware combined with software that you have the power\nto fix yourself is currently unheard of in the industry, and mellanox\ndelivered it!\n\nThis setup has been running without a hitch for bgp.tools for some time now,\nand I hope to keep it running until I outscale it one day, since I would be\nsurprised if I need to remove it for any other reason.\n\nI\u2019d like to thank Pim van Pelt for their earlier post on these devices and\nBasil Filian for helping me figure out a number of quirks of these devices!\n\nIf you want to stay up to date with the blog you can use the RSS feed or you\ncan follow me on Fediverse @benjojo@benjojo.co.uk!\n\nUntil next time!\n\nRelated Posts:\n\nHow 1500 bytes became the MTU of the internet (2020)\n\nTeaching a cheap ethernet switch new tricks (2019)\n\nRandom Post:\n\nImaging mounted disk volumes under duress (2021)\n\n", "frontpage": false}
