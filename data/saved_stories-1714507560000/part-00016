{"aid": "40208789", "title": "Understanding Software Optimization Techniques", "url": "https://www.thinkbigcodesmall.io/p/eng-effectiveness-dev-experience", "domain": "thinkbigcodesmall.io", "votes": 1, "user": "rbanffy", "posted_at": "2024-04-30 09:10:58", "comments": 0, "source_title": "Understanding software optimization techniques", "source_text": "Understanding software optimization techniques\n\nShare this post\n\n#### Understanding software optimization techniques\n\nwww.thinkbigcodesmall.io\n\n#### Discover more from Think Big Code Small\n\nWelcome to Think Big, Code Small - your friendly portal into the compelling\ntechnology universe. Your hosts, Daniel Horton, and Chris Westerhold, are\nseasoned technologists passionate about breaking down tech's complex language\ninto simple terms.\n\nContinue reading\n\nSign in\n\n# Understanding software optimization techniques\n\n### Eng. Effectiveness, Dev. Experience, Dev. Productivity Engineering.... oh\nmy.\n\nChris Westerhold\n\nApr 29, 2024\n\nShare this post\n\n#### Understanding software optimization techniques\n\nwww.thinkbigcodesmall.io\n\nShare\n\nIf you\u2019re an engineering leader, then you are most likely looking to improve\nthe overall output and predictability of your organization. Why wouldn\u2019t you?\nBudgets just seem to be getting tighter and tighter these days without lower\nexpectations on delivery.\n\nSo what do you do? You start with looking around at what some of the \u201celite\u201d\nengineering companies are doing or maybe go to a few conferences. After that,\nits still hard to identify the best ways to optimize. As with a lot of things\nthese days, there isn\u2019t a lot of consensus in the market.\n\nThere are a few concepts that seem to come up a lot, Engineering Effectiveness\nor Excellence, Developer Experience, Developer Productivity Engineering or\njust Developer Productivity.\n\nThey are a tangled mess of concepts and techniques that get used\ninterchangeably in a lot of organizations. Are they all really the same thing?\nDo they have a different focus? Let\u2019s start by digging into what each of these\nactually mean.\n\n#\n\nDeveloper Productivity\n\nWe have to start with this one... as I see this having the most damage. I am\nsure there are a lot of people using this as a bucket term, but I really don\u2019t\nlike it. This term, to me, really seems to put the blame for organizational\nand experience inefficiencies at the feet of the developers.\n\n\u201cThe system that people work in and the interaction with people may account\nfor 90 or 95 percent of performance.\u201d\n\n\\- W. Edwards Deming\n\nThe term Developer Productivity leads me to believe the problem is that\ndeveloper are not typing fast enough. You can see this with the major push for\ntools like Copilot, which in my opinion is just a typing accelerator.\nValuable, yes. Is it the major problem inside of an organization, no.\n\nThere have been numerous studies and surveys that show developers only spend\nabout 25-30% of their time actually typing code. Most of the work has to do\nwith finding information, defining the problem, understanding business logic,\nand solutioning.\n\nIf you think about the problems that come up in these activities, is it really\na typing accelerator that is going to solve them? No its not. This is why so\nmany companies are struggling to get real value from these types tools and not\nreally understanding what the problem is.\n\nEveryone has to work within the system that has been defined for them. If you\ndon\u2019t optimize the development ecosystem, then how are people going to work\nefficiently in it? Are there bad developers that don\u2019t put in a lot of\neffort... sure there are... but there are lazy people everywhere.\n\n> It is almost always a bigger systems level problem that causes\n> \u201cproductivity\u201d issues.\n\nThat said, so where do you being then? This is where you need to figure out\nthe right level of impact? Do you have the ability to impact the organization?\nOr is this a bit of a grass roots effort?\n\n#\n\nEngineering Effectiveness/Excellence (EE)\n\nThis is the broadest, top down effort that can be taken on but comes with the\nbiggest returns. if you ready for a journey with the most impact, then this is\nthe place to start.\n\nThis is like architecting the highways and roads that connect different parts\nof your organization. Get it right and get massive gains but get it wrong and\nyou will have another mess on your hands. This is why having good plan is so\ncritical.\n\nThe impact of organizational decisions can\u2019t be understated.\n\nCheck it a deeper dive article here!\n\nEnough of the nonsense, so what are we really talking about here? Lets look at\na few examples.\n\n  * Agile Planning & Funding\n\n  * Architecture\n\n  * Cloud Strategy\n\n  * Enterprise Testing\n\n  * Governance & Security\n\n  * Knowledge Management\n\nThese are the biggest decisions that need to be made in an engineering\norganization and will involve decision makers up to the CIO/CTO/CEO.\n\n> \u201cThe system that people work in and the interaction with people may account\n> for 90 or 95 percent of performance.\u201d\n>\n> \\- W. Edwards Deming\n\nThis can feel like a daunting set of tasks that is too much to take on. It\ndoesn\u2019t have to be, if you take a more tactical approach to this problem.\nFirst off, you would rarely want to tackle many of these at the same time.\n\nThat said, then how would you know where to start? Very rarely do people in an\norganization not know where the major bottlenecks are... they just need a safe\nway to be able to express that. The details are out of the scope of this\narticle but I do dig a little deeper into ways to start to tack this problem\nhere.\n\nThis top down approach can have a significant impact on overall culture,\nimprove moral, and can be the catalyst for future improvements. Just showing\nthat there is progress being made, even if slow, can have a significant impact\non an organziation.\n\nEngineering Effectiveness doesn\u2019t stop at organizational problem though, using\nquantitative and qualitative analysis will help to identify lower level\nproblems. These problems are key inputs into optimizing the development\nprocess. They are a good indicator of where to start digging into lower level\nareas for optimization.\n\n#\n\nDevelopment Focused Optimization\n\nThis is where things can start to get a little bit confusing. To keep it\nsimpler, I am going to wrap up these concepts into development focused\noptimization. There are many ways to drive optimization across an engineering\norganization, including:\n\n  * Platform Engineering\n\n  * Developer Productivity Engineering\n\n  * Developer Experience\n\nThey do have overlapping and complementary features. But before we get too\nfar, let\u2019s do a quick (and probably wrong) definition for each of these terms.\n\n####\n\nPlatform Engineering (PE)\n\nPE is the focus on building out a cohesive platform that provides essential\ninfrastructure, services, and tooling to the development community in a self-\nservice manner. Their goal is to abstract away complexity, standardize common\nworkflows and reduce the operational burden on development teams.\n\n> Think about PE as optimizing the Ops side of DevOps\n\n####\n\nDeveloper Productivity Engineering (DPE)\n\nDPE is focused around the optimization of the development process itself. This\ncould be streamlining work workflows to reduce overall toil, bottlenecks and\nfriction. Their goal is identify and address these pain points across the SDLC\nand help to automate repetitive tasks, reduce steps, and provide guides to\nhelp improve quality and security.\n\n> Think about DPE as optimizing the Dev side of DevOps. This is similar to how\n> SREs help with overall resiliency.\n\n####\n\nDeveloper Experience (DevEx)\n\nDevEx is all about the overall quality of the developer\u2019s interactions with\nthe technology, processes, and their work environment. Their goal is to create\nintuitive tools and interfaces, reduce cognitive load, and improve overall\ndeveloper satisfaction\n\n> DevEx is is like applying a better user experience/design to to an\n> application UI. They are not changing the functionality, per se, but they\n> are making it easier to get things done. They are providing the right\n> information, at the right time, for the right persona and job to be done.\n\nIt\u2019s easy to get lost in definitions... but in the end its all about\nefficiency not term definition.\n\nI know what you\u2019re thinking... do I really need all three of these? Are they\nseparate teams? Seems like an awful lot to do. Before we get to some of these\nquestions, lets go through a couple of quick examples. I think this will help\nto clear things up a bit.\n\nThe first for any of these techniques is to identify the problem. If you\nstarted with an EE approach then you might have already identified some of the\nareas. If you are starting from the developer perspective, this would be a\ngreat time to do a DevEx survey to help identify areas across the SDLC to\nfocus.\n\nThat said, on the examples.\n\n##\n\nSlow Build Times\n\nThe problem identified is that developers are frustrated with long build\ntimes, increasing work in progress, impeding quick feedback cycles, and is\ncausing teams to deploy less often.\n\nIn this scenario, here is some of the work each area might focus on.\n\nPlatform Engineering\n\n  * Implement a distributed build system to parallelize tasks\n\n  * Introduce more powerful build machines\n\n  * Optimize the build configuration and identify unnecessary dependencies\n\nDeveloper Productivity Engineering\n\n  * Analyze build data to identify the slowest stages\n\n  * Work with developers to identify areas where code can be modularized to reduce build dependencies\n\n  * Work with the PE team to identify and remediate pipeline tooling or library causing the slowdowns.\n\nDeveloper Experience\n\n  * Survey developers to understand the specific frustrations and time wasted due to slow builds.\n\n  * Ensure clear and informative feedback during build process. This could be done though a developer portal with dashboards or other widgets.\n\n  * Identify metrics to help track build times, their improvement over time, and the associated costs to the organization.\n\nThink Big Code Small is a reader-supported publication. To receive new posts\nand support my work, consider becoming a free or paid subscriber.\n\n##\n\nLong Cycle Testing\n\nThe problem identified is that developers spend excessive time on manual\ntesting, taking them away from feature development and introducing a sense of\nrepetitive, unfulfilling work.\n\nPlatform Engineering\n\n  * Integrate robust testing frameworks into the developer platform\n\n  * Set up automated CI/CD pipelines with comprehensive test coverage\n\n  * Provide tools for test data generation and management\n\nDeveloper Productivity Engineering\n\n  * Identify types of tests that are most time-consuming for manual execution\n\n  * Work closely with dev teams to adopt automated testing practices\n\n  * Work with developers to design effective testing strategies, promoting a shift-left mindset for testing.\n\nDeveloper Experience\n\n  * Design intuitive testing UIs and workflows.\n\n  * Provide actionable feedback and insights during automated test runs.\n\n  * Help to identify architectural standards that track testing cycles, ensure standards are being met, and give feedback against the standards. This could be through the building of scorecard mechanisms and also be used by the PE team as part of a gate keeping mechanism.\n\n##\n\nOnboarding Friction\n\nThe problem identified is that new developers face a steep learning curve when\njoining a team. Complex toolchains, fragmented documentation, and unspoken\ntribal knowledge lead to frustration and delayed productivity.\n\nPlatform Engineering\n\n  * Consolidate and streamline development tools into the internal developer platform.\n\n  * Standardize project setup procedures.\n\n  * Provide templates and boilerplate code to kick-start new projects.\n\nDeveloper Productivity Engineering\n\n  * Identify specific bottlenecks experienced by new hires. For example, code complexity, architecture, a really stubborn tech lead.\n\n  * Track success rates of completing initial onboarding tasks.\n\n  * Automate the creation of sandboxed development environments where newcomers can experiment safely.\n\nDeveloper Experience\n\n  * Measure onboarding time and time to 10th commit.\n\n  * Create a well-maintained internal knowledge base with clear documentation and tutorials.\n\n  * Design a structured onboarding process with checkpoints and mentorship opportunities.\n\nNeed help trying to get all of this figured out? We are here to help!\n\nLearn more at thinkbigcodesmall.co\n\n#\n\nWhere do I begin?\n\nIt really depends... spoken like a true consultant... I know and I\u2019m sorry\n:-). But to give the longer answer, it really does depend on the size and\nmaturity level of your organization.\n\nIf you are just getting started on your journey I would start with the\nfollowing questions.\n\n> How much control do I have over the organization? What are the problems that\n> I am trying to solve? How much risk/time and I willing to commit to this\n\nIf I am a CIO/CTO looking to get find major productivity improvements, then\nstart with Engineering Effectiveness and work your down the stack. In\nparallel, I would also start understanding the Developer Experience and work\nyour way up the stack. The top down and bottom up approach will quickly\nidentify areas where Platform and Productivity Engineering can step in and\nhelp.\n\nThis is a sizeable transformation project that takes a lot of time, energy,\nand resources but it will have, by far, the most meaningful impact. I have\nseen upwards of 50% gain in throughput and business impact through these types\nof engagements.\n\nThat said, not everyone has this type of control, time, or appetite for risk.\nThere are much smaller ways to start to optimize software delivery. Instead of\nthe top down approach, mentioned above, go from the bottom up approach.\n\nThis is starting with Developer Experience and working your way up to Platform\nand Productivity Engineering. By mapping out and measuring the impact of the\ndevelopers experience through the SDLC, you can easily come up with areas of\nwaste and friction. Start to improve these systematically over time, your\ndevelopers will thank you.\n\nThe best time to plant a tree was 20 years ago. The second best time is today.\n\nOptimizing software development doesn\u2019t need to be this big complicated thing,\nyou just have to get stared to see the value. So think of these titles as\nmindsets.\n\nThis could be one small team that is focused around making improvements,\nshowing value, and then expanding only when necessary. Or it could be a bigger\ntransformation project. Do what\u2019s right for your situation but don\u2019t ignore\nthe glaring problems that might be staring you in the face.\n\nSo go out there and get started.\n\nSo what do you think? Are you doing any of these? All of them? What did I get\nwrong?\n\nLeave a comment\n\nShare this post\n\n#### Understanding software optimization techniques\n\nwww.thinkbigcodesmall.io\n\nShare\n\nComments\n\n5 Reasons you DevEx journey will fail\n\nAny type of transformation is hard but developer experience touches so many\nparts of an organization that it can be even more challenging. Its one of...\n\nMar 17 \u2022\n\nChris Westerhold\n\n3\n\nShare this post\n\n#### 5 Reasons you DevEx journey will fail\n\nwww.thinkbigcodesmall.io\n\n2\n\nDev Portals - You can actually make your developer experience worse.\n\nImplementing any tool in an enterprise can be a daunting task with developer\nportals being no exception. I have lead many different implementations and...\n\nDec 15, 2023 \u2022\n\nChris Westerhold\n\nShare this post\n\n#### Dev Portals - You can actually make your developer experience worse.\n\nwww.thinkbigcodesmall.io\n\nThe Cobra Effect, When Good Intentions Go Bad\n\nThe Surprising Dangers Behind Good Intentions and Metrics\n\nApr 15 \u2022\n\nDaniel Horton\n\n2\n\nShare this post\n\n#### The Cobra Effect, When Good Intentions Go Bad\n\nwww.thinkbigcodesmall.io\n\nReady for more?\n\n\u00a9 2024 Think Big Code Small\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
