{"aid": "40110072", "title": "Show HN: Metashade \u2013 a Pythonic GPU shading/compute EDSL", "url": "https://github.com/ppenenko/metashade", "domain": "github.com/ppenenko", "votes": 1, "user": "ppenenko", "posted_at": "2024-04-21 23:21:57", "comments": 0, "source_title": "GitHub - ppenenko/metashade: An experimental GPU shading DSL embedded in Python.", "source_text": "GitHub - ppenenko/metashade: An experimental GPU shading DSL embedded in\nPython.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nppenenko / metashade Public\n\n  * Notifications\n  * Fork 1\n  * Star 20\n\nAn experimental GPU shading DSL embedded in Python.\n\n### License\n\nApache-2.0 license\n\n20 stars 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# ppenenko/metashade\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n4 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nppenenkoLink to the slides from README.mdApr 10, 2024b5b5ac4 \u00b7 Apr 10, 2024Apr\n10, 2024\n\n## History\n\n350 Commits  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| Parallelize cross-compilation once again| Dec 2, 2023  \n  \n### examples\n\n|\n\n### examples\n\n| Combined sampler example| Mar 8, 2024  \n  \n### gltfdemo\n\n|\n\n### gltfdemo\n\n| pathlib.Path everywhere for better readability| Mar 26, 2024  \n  \n### metashade\n\n|\n\n### metashade\n\n| Removed an unnecessary LOC| Mar 1, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| pathlib.Path everywhere for better readability| Mar 26, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| VS Code launch.json| Oct 18, 2022  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Oct 14, 2017  \n  \n### README.md\n\n|\n\n### README.md\n\n| Link to the slides from README.md| Apr 10, 2024  \n  \n## Repository files navigation\n\n# Metashade\n\n## What is Metashade?\n\nMetashade is an experimental GPU shading domain-specific language (DSL)\nembedded in Python. When a Metashade script executes, it generates code in a\ntarget shading language. Only HLSL is supported so far but the intent is\ndefinitely to support multiple targets.\n\nTo see Metashade in action, check out the glTF demo.\n\nPlease see the presentation on Google Slides for a detailed discussion of the\nmotivation for Metashade and its design.\n\n## Rationale\n\n  * Programming at a more abstract level than the target language:\n\n    * Metaprogramming - think C++ templates but with greater flexibility. Like any other Python code, Mestashade code is polymorphic at generation time. This approach can replace the traditional ubershader practice, effectively replacing the C preprocessor with Python.\n    * Stricter typing - e.g. a 3D point and an RGB color can be represented with different Metashade types, backed by the same data type in HLSL.\n  * Multi-language/cross-platform support. Cross-compilation (e.g. with SPIRV-Cross) is definitely an alternative but the code generation approach should offer higher flexibility around:\n\n    * more divergent languages, e.g. HLSL vs OSL;\n    * language dialects;\n    * integration required by the specific host application (a shader fragment with an interface defined in metadata, an effect file etc.), which is hard to accomplish with cross-compilation because it typically operates on final, full shaders with a defined entry point.\n  * Easy integration with content pipeline and build system scripts written in Python, and the vast Python ecosystem in general.\n\n## How does it work?\n\nUnlike some other Python DSLs, Metashade doesn't rely on introspection to\ntranslate the Python AST to the target language. It uses more straight-forward\nmechanisms in hopes of making the DSL appear less magical to the user and\nenabling integration with other Python code.\n\n### Creating a generator\n\nBefore Metashade can generate anything, a generator object has to be created\nfor a specific target shading language profile, with an output file (or a\nfile-like stream object) passed as a constructor argument, e.g.\n\n    \n    \n    from metashade.hlsl.sm6 import ps_6_0 with open(\"ps.hlsl\", 'w') as ps_file: sh = ps_6_0.Generator(ps_file)\n\nNote that, by convention, the generator object is always named sh (for\n\"shader\"). This helps Metashade code be polymorphic with regard to different\ntarget profiles. E.g. code with the same logic can be generated for an HLSL\npixel shader and a GLSL compute shader.\n\n### Function definitions\n\nMetashade function definition syntax looks like this:\n\n    \n    \n    with sh.function('add', sh.Float4)(a = sh.Float4, b = sh.Float4): sh.return_(sh.a + sh.b)\n\nHere, the first pair of parentheses defines the function name and the return\ntype, while the second pair contains parameter declarations with their types.\nAll data types here can be determined dynamically at generation time and\nbecome static in the generated code.\n\nThe above Python code generates the following HLSL:\n\n    \n    \n    float4 add(float4 a, float4 b) { return (a + b); }\n\n### Entry points\n\nShader entry points are really just a special case of functions in Metashade,\nfor example:\n\n    \n    \n    with sh.ps_output('PsOut') as PsOut: PsOut.SV_Target('color', sh.RgbaF) with sh.main('mainPS', sh.PsOut)(): sh.psOut = sh.PsOut() sh.psOut.color.rgb = sh.RgbF(1) sh.psOut.color.a = 1 sh.return_(sh.psOut)\n\nWhich generates in HLSL:\n\n    \n    \n    struct PsOut { float4 color : SV_TARGET; }; PsOut mainPS() { PsOut psOut; psOut.color.rgb = 1.0.xxx; psOut.color.a = 1.0; return psOut; }\n\n### Generating C-like scopes and local variables\n\nMetashade uses Python variables to represent variables in target C-like\nshading languages, but there obviously major differences in their behavior,\nnamely:\n\n  * Unlike in Python, lifetimes of variables in C-like languages are tied to the scope they're defined in.\n  * In Python, variables are always assigned by reference and the same variable can point to different objects of different types in its lifetime. Variables in C-like shading languages, in contrast, are typed statically and are assigned by value.\n\nAddressing these differences requires explicit emulation in Python code. with\nscopes are the closest analogy for C-like scopes in Python, however they only\napply to the variables referenced in the with statement and call the special\n__enter__ and __exit__ methods instead of construction and destruction like in\nC++. That's why Metashade uses with statements with special objects such as\nfunction definitions created with sh.function, which modify the state of the\ngenerator. The generator emulates C-like scopes internally, and and the\ngenerated variables are modeled with member variables on the generator, which\nare implemented with the __getattr__()/__setattr__() Python mechanism. With\n__setattr__() for example, we can capture the variable's name without Python\nintrospection. We can also easily check in __setattr__() if the user is trying\nto reinitialize the variable with a different type and we can similarly raise\nan exception in __getattr__() if the user tries to access a variable that's\ngone out of scope.\n\nThe __getattr__()/__setattr__() is also used for other features, such as\naccessing struct members and vector elements.\n\nFurther, Python expressions model expressions in the target language with help\nof operator overloading. Basically, a + b generates the respective operation\nin the target language instead of performing the addition in Python.\n\n## About\n\nAn experimental GPU shading DSL embedded in Python.\n\n### Topics\n\npython shaders dsl computer-graphics metaprogramming edsl shading-language\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\n### Stars\n\n20 stars\n\n### Watchers\n\n4 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases 3\n\nv0.4.2 Latest\n\nMar 10, 2024\n\n\\+ 2 releases\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Python 74.6%\n  * HLSL 25.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
