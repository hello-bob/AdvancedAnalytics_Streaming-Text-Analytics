{"aid": "40285152", "title": "Ziglang-Set: generic and general-purpose Set implementation for Zig", "url": "https://github.com/deckarep/ziglang-set", "domain": "github.com/deckarep", "votes": 1, "user": "ingve", "posted_at": "2024-05-07 13:24:28", "comments": 0, "source_title": "GitHub - deckarep/ziglang-set: A generic and general purpose Set implementation for the Zig language", "source_text": "GitHub - deckarep/ziglang-set: A generic and general purpose Set\nimplementation for the Zig language\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ndeckarep / ziglang-set Public\n\n  * Notifications\n  * Fork 0\n  * Star 2\n\nA generic and general purpose Set implementation for the Zig language\n\n### License\n\nMIT license\n\n2 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# deckarep/ziglang-set\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndeckarepFixes to README.md and clarification on rationaleMay 7, 20248321ec5 \u00b7\nMay 7, 2024May 7, 2024\n\n## History\n\n14 Commits  \n  \n### assets\n\n|\n\n### assets\n\n| first commit - ziglang-set is born as its own dedicated repo| May 6, 2024  \n  \n### src\n\n|\n\n### src\n\n| Working through build.zig, build.zig.zon files and folder organization| May\n6, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Working through build.zig, build.zig.zon files and folder organization| May\n6, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| May 5, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Fixes to README.md and clarification on rationale| May 7, 2024  \n  \n### build.zig\n\n|\n\n### build.zig\n\n| Fixes to README.md and clarification on rationale| May 7, 2024  \n  \n### build.zig.zon\n\n|\n\n### build.zig.zon\n\n| Fixes to README.md and clarification on rationale| May 7, 2024  \n  \n## Repository files navigation\n\n### Ziglang Set\n\nZiglang-Set: a generic and general-purpose Set implementation for Zig. \ud83d\udea7 PRE-\nALPHA \ud83d\udea7\n\nZig currently does not have a built-in, general purpose Set data structure at\nthis point in time. Until it does, try this!\n\nRationale: It may be common knowledge that a dictionary or map or hashset can\nbe used as a set where the value is basically void. While this is true,\nthere's a lot to think about in terms of supporting all the common set\noperations in a performant and correct way and there's no good reason why a\ncommon module for this can't exist. After studying the Zig stdlib, I'm hoping\nthis implementation can fill that gap and provide some value.\n\nThis module offers a Set implementation built in the same vein and spirit of\nthe other data structures within the Zig standard library. This is my attempt\nto model one that can get better over time and grow with community interest\nand support. See a problem, file a bug! Or better yet contribute and let's\nbuild the best implementation together.\n\nI am the original author of the popular Go based set package: golang-set that\nis used by software components built by Docker, 1Password, Ethereum, SendGrid,\nCrowdStrike and HashiCorp. At just shy of 4k stars, I figured I'd take a crack\nat building a comprehensive and generic Zig-based set that goes above and\nbeyond the original Go implementation. After using Zig for over 2.5 years on\npersonal projects, I thought it was time that Zig had a robust Set\nimplementation for itself.\n\nThis implementation gives credit and acknowledgement to the Zig language and\npowerful Std Library HashMap data structure of which this set implementation\nis built on top of. Without that, this probably wouldn't exist. Efforts will\nbe made to keep the Ziglang Set code fast and straightforward but this Set's\nraw speed will largely be bounded by the performance of the Zig HashMap of\nwhich it is built on top of.\n\n#### Features\n\n  * Offers idiomatic, generic-based Zig API - allocators, iterators, capacity hints, clearing, resizing, etc.\n  * Common set operations\n\n    * add, append, appendSlice\n    * remove, removeAll\n    * containsOne, containsAny, containsAll\n    * clone, cloneWithAllocator\n    * equals, isEmpty, cardinality\n    * intersection, intersectionUpdate (in-place variant)\n    * union, unionUpdate (in-place variant)\n    * difference, differenceUpdate (in-place variant)\n    * symmetricDifference, symmetricDifferenceUpdate (in-place variant)\n    * isSubset\n    * isSuperset\n    * isProperSubset\n    * isProperSuperset\n    * pop\n  * Fully documented and robustly tested - in progress\n  * Performance aware to minimize unecessary allocs/iteration internally\n  * \"string\" support - coming soon\n  * Benchmarks - coming soon\n\n#### Why use a set?\n\n  * A set offers a fast way to manipulate data and avoid excessive looping. Look into it as there is already tons of literature on the advantages of having a set in your arsenal of tools.\n\n#### Example\n\n    \n    \n    // import the namespace. const set = @import(\"ziglangSet\"); // Create a set of u32s called A var A = set.Set(u32).init(std.testing.allocator); defer A.deinit(); // Add some data _ = try A.add(5); _ = try A.add(6); _ = try A.add(7); // Add more data; single shot, duplicate data is ignored. _ = try A.appendSlice(&.{ 5, 3, 0, 9 }); // Create another set called B var B = set.Set(u32).init(std.testing.allocator); defer B.deinit(); // Add data to B _ = try B.appendSlice(&.{ 50, 30, 20 }); // Get the union of A | B var un = try A.unionOf(B); defer un.deinit(); // Grab an iterator and dump the contents. var iter = un.iterator(); while (iter.next()) |el| { std.log.debug(\"element: {d}\", .{el.*}); }\n\nOutput of A | B - the union of A and B (order is not guaranteed)\n    \n    \n    > element: 5 > element: 6 > element: 7 > element: 3 > element: 0 > element: 9 > element: 50 > element: 30 > element: 20\n\n#### Installation of Module\n\nTo add this module, update your applications build.zig.zon file by adding the\n.ziglang-set dependency definition.\n\n    \n    \n    .{ .name = \"your-app\", .version = \"0.1.0\", .dependencies = .{ .ziglangSet = .{ .url = \"https://github.com/deckarep/ziglang-set/archive/$COMMIT_YOU_WANT_TO_USE.tar.gz\", }, }, }\n\nWhen running zig build now, Zig will tell you you need a hash for the\ndependency and provide one. Put it in your dependency so it looks like:\n\n    \n    \n    .{ .ziglangSet = .{ .url = \"https://github.com/deckarep/ziglang-set/archive/$COMMIT_YOU_WANT_TO_USE.tar.gz\", .hash = \"$HASH_ZIG_GAVE_YOU\", }, }\n\nWith the dependency in place, you can now put the following in your build.zig\nfile:\n\n    \n    \n    const ziglangSet = b.dependency(\"ziglangSet\", .{}); exe.root_module.addImport(\"ziglangSet\", ziglangSet.module(\"ziglangSet\"));\n\nIn the above change exe to whatever CompileStep you are using. For an\nexecutable it will probably be exe, but main_tests or lib are also common.\n\nWith the build file in order, you can now use the module in your zig source.\nFor example:\n\n    \n    \n    const std = @import(\"std\"); const set = @import(\"ziglangSet\"); pub fn main() void { // 1. This datastructure requires an allocator. // Setup and choose your respective allocator. // See: https://zig.guide/standard-library/allocators // 2. Go to town! var A = set.Set(u32).init(allocator); defer A.deinit(); // Now do something cool with your set! // ... }\n\nCheck the tests for more comprehensive examples on how to use this package.\n\n#### Testing\n\n    \n    \n    zig build test\n\n## About\n\nA generic and general purpose Set implementation for the Zig language\n\n### Topics\n\nset datastructures zig generics standard-library ziglang\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n2 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Zig 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
