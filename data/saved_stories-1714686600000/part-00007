{"aid": "40236477", "title": "CBX \u2013 vanillaJS library for flexible form validation (& more)", "url": "https://github.com/morphles/cbx", "domain": "github.com/morphles", "votes": 1, "user": "morphles", "posted_at": "2024-05-02 14:05:48", "comments": 0, "source_title": "GitHub - morphles/cbx: ConstraintBoXes - vanillaJS flexible, extensible form validation ( & more) library, no code needed.", "source_text": "GitHub - morphles/cbx: ConstraintBoXes - vanillaJS flexible, extensible form\nvalidation ( & more) library, no code needed.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nmorphles / cbx Public\n\n  * Notifications\n  * Fork 0\n  * Star 0\n\nConstraintBoXes - vanillaJS flexible, extensible form validation ( & more)\nlibrary, no code needed.\n\n### License\n\nApache-2.0 license\n\n0 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# morphles/cbx\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nmorphlesUpdate README.mdMay 2, 2024d52bf97 \u00b7 May 2, 2024May 2, 2024\n\n## History\n\n11 Commits  \n  \n### examples\n\n|\n\n### examples\n\n| Minor style fix| Apr 18, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Ignore some npm stuff| Apr 18, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Apr 2, 2024  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| npm package for minification and makefile with minification command| Apr 18,\n2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| May 2, 2024  \n  \n### cbx.js\n\n|\n\n### cbx.js\n\n| Write some more JSDoc, adjust code for getting smaller minified library.|\nMay 2, 2024  \n  \n### cbx.min.js\n\n|\n\n### cbx.min.js\n\n| Write some more JSDoc, adjust code for getting smaller minified library.|\nMay 2, 2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| npm package for minification and makefile with minification command| Apr 18,\n2024  \n  \n## Repository files navigation\n\n# CBX\n\nConstraintBoXes - vanillaJS flexible, extensible form validation (& more)\nlibrary, no code needed (mostly, apart from HTML and custom constraints if\nany).\n\nCBX is a small library (<1.5k gziped), mainly targeting form validation, that\n\"inverts\" how/where validation is defined allowing for more flexibility while\nreducing code. We define constraints not on input fields directly, but on\nseparate message boxes (class=\"cbx\"). This enables flexible placement and\nstyling of messages. CBX also supports constraints spanning multiple fields\nand easy (no code) && of constraints. Message boxes can be errors, that\nprevent form submission or click handlers on configured buttons.\n\nTL;DR\n\n    \n    \n    <div> <input type=\"number\" name=\"minPlayers\" id=\"minPlayers\"> - <input type=\"number\" name=\"maxPlayers\" id=\"maxPlayers\"> </div> <div> <div class=\"cbx \" data-selectors=\"#minPlayers;#maxPlayers\" data-constraint=\"minEmpty\" data-param=\"1\"> <div class=\"cbx cbx--error\" data-selectors=\"#minPlayers;#maxPlayers\" data-constraint=\"minNumber\" data-message=\"Minimum players must be less than maximum!\"></div> </div> <div class=\"cbx cbx--error\" data-selectors=\"#minPlayers;#maxPlayers\" data-constraint=\"maxEmpty\" data-param=\"1\" data-message=\"Please provide at least some information about min or max players!\"></div> </div>\n    \n    \n    <div id=\"catBoxes\"> <label> <input type=\"checkbox\" name=\"category\" value=\"Abstract Strategy\" id=\"cat0\"> Abstract Strategy </label> <br/> <...> <label> <input type=\"checkbox\" name=\"category\" value=\"Negotiation\" id=\"cat6\"> Negotiation </label> <br/> </div> <div> <div class=\"cbx cbx--error\" data-selectors=\"[name=category]\" data-constraint=\"minSet\" data-param=\"1\" data-message=\"Please, select at least one category!\"></div> </div>\n\n## What is wrong with regular HTML validation?\n\nIt has some shortcomings:\n\n  * validation constraints/errors are attached to fields (this is biggest problem that is source of all other problems)\n  * it is hard to style errors or have custom placement/display for them\n  * some fields have extremely limited validation (i.e. checkboxes, radio buttons)\n  * often we want constraints spanning multiple fields, i.e. counting checkboxes, without customValidity that is not possible\n  * can't combine constraints without writing code (i.e. field1 can't be empty, but only if checkbox2 is selected)\n\n## How CBX differs?\n\n  * validation constraints \"are attached\" to \"error\" messages and not fields\n  * this allows to place and style them freely, even having multiple insances of same constraint for say display near field and at the top form if desired\n  * constraint can span multiple fields\n  * this also means that simple things like counting checkboxes or options selected is indeed simple\n  * by nesting messages/constraints we can create more complex rules where error message appers only if multiple constraints are violated\n  * this also means that more complex cases can be covered without addional JS, i.e. say in form product description can be chosen to be text of file upload, and we want some min text length or file selected as appropriate for option chosen\n  * we can make some constraints \"soft\" i.e. not prevent form submission, maybe serving just as warning or...\n  * we can use it for things like say \"text length counters\" or other interactive uses, like say show different form section depending on earlier selections (constraint box contents can be anything)\n  * actually we can use it outside forms (still, constraints must target input/select/textarea)\n  * we can trigger validation and prevent handling on non submit buttons too, again without additional JS, just specifyng on buttons, elements for which constraints need to be validated when clicked\n\n## How to use CBX?\n\nInclude cbx.js or cbx.min.js script and call the cbx() function for simple\ndefault case, most likely after page is fully loaded (as some\nmessages/constraints may be marked as \"initally evaluated\"). CBX is now\nenabled on page and cbx classed \"boxes\" should now function.\n\nSo what are cbx classed \"boxes\"? Well basically any html tag that has\nclass=\"cbx\" though it needs to have correct data-* for it to do anything. Here\nis example with most of supported attributes:\n\n    \n    \n    <div class=\"cbx cbx--error\" data-constraint=\"minSet\" data-param=\"3\" data-selectors=\"#fieldset1 checkbox\" data-message=\"Select at least 3 items! You have selected %value% items.\">\n\n  * data-constraint specifies which constraint is evaluated by this cbx, in this case minSet counts number of set (selected/checked items, be it checkboxes or select options, constraints described later).\n  * data-param is parameter passed to constraint, it's meaning depends on constraint, in this case it is the minimum number of items set needed for constraint to not be violated (and thus box being shown).\n  * data-selectors is ; separated list of CSS selectors targeting elements for which constraint will be applied. Since in CSS you can not get specific order of elements (via say , selector, which of course works here), we use ; when constraint needs elements in specific order, elements found by selectors separated by ; will be passed to constraint in \"specification order\". In this case we are just targeting all checkboxes in element with id fieldset1. Normally change/input (depending on CSS/BEM modifier classes, more on that later) to targeted inputs will cause constraint to be recalculated and box ether hidden or shown if violated (depending on classes, see below).\n  * data-message is message that will be put inside (as innertHTML) the cbx itself if it's constraint fails/is violated. It supports single placeholder %value% which is replaced by violation value returned by constraint being violated. It can be skipped, then inside of cbx is not replaced during violation, and such cbx can just show/hide it's contents based on constraint violation, you can put anything in there, if you put another cbx(es) that effectively functions as && of constraints, as inner ones will only be shown if outer one(s) are also shown/violated.\n  * data-triggers can be another list of selectors, that will be used to trigger validation of constraint instead of data-selectors, it is useful UX-wise to sometimes have narrower triggering set than targeting set, this allows to achieve that.\n\nSome aspects of cbx are also configured by CSS/BEM modifier classes.\n\n  * cbx--error is most important, as it is needed for constraint violation to be considered error, and thus prevent form submission (more on how that is handled later). If it is skipped cbx is only toggling visbility, thus it can be used as sorta \"togglable container\", for other UI elements, descriptions, helps or other cbx(es) to && their constrains. Note if using nested cbx only the inner most one(s) should have cbx--error as visible errors prevent submission, even if empty so outer cbx should not be error otherwise it by itself will prevent submission thus not workign as &&!\n  * cbx--insta can be used to controll when cbx becomes visible if constraint is violated. Normally we do not want to be too disruptive to user and only show violations on change events so that if we say have minimum text lenght constraint, we do not show lenght error just as user starts to type. In some cases however we want such instant display and adding this class allows cbx to become visible immediatly visible when constraint is violated. We can use cbx--insta without cbx--error and with constraint that is always violated to act as realtime counter of say text in input or number of checkboxes checked (see examples link below).\n  * cbx--initial is used to mark certain cbx(es) to be validated immediatly as CBX loads, most likely to be used with cbx--insta based counters as described above. This is the reason why you might want to call cbx() only after everything is fully loaded, since if elements with cbx--initial appear after call to cbx() they will not be validated immediatly.\n  * cbx--visible should likely not be used manually, it is a class that is set by CBX when constraint is violated and it makes the cbx visible, still potentially in some cases maybe one might want to use it instead of cbx--initial (this for example would allow having unique message in box before constraint is ever evaluated and message replaced with data-message).\n\nSeparate validation run happens on attempted form submit, CBX then checks\nconstraints targeting any field within form and if any of cbx--error targeting\nform field(s) become visible form submission is prevented. We also support\nsimillar for \"AJAX\" type of situation, if we have some button (or any element\nreally) with data-click-validates attributed containing selector targeting\nsome fields (use , to target different elements), CBX will assume that\nselectors are for fields that might be targeted by some cbx(es) and will\nvalidate them, and prevent click handling if this results in some cbx--error\nbeing visible. In both cases (form submission and custom validation), we\nscroll view to top most visible cbx--error. Also again for both cases,\nplacement of cbx(es) is fully independent of targeted fields, they can be\noutside the form itself for example.\n\n## Constraints\n\n### Built in constraints for use in data-constraint:\n\n  * minSet, maxSet, eqSet - count \"set items\" (checkboxes, radios, options in select), uses data-param as reference, so data-constraint=\"minSet\" data-param=\"3\" will be violated if number of set items is <3, for maxSet it would be >3, and for eqSet - !=3\n  * minEmpty, maxEmpty, eqEmpty - count empty items compare to data-param as above. Empty items will be anything that is without \"truthy\" value (JS !value)\n  * minTextLength, maxTextLength, eqTextLength - counts text length (summing across all targeted elements) and compares against data-param, if you want to use for rich editors like CKEditro, TinyMCE etc., I suggest using hidden textarea and ensuring editor keeps it updated and fires change/input event on it as apropriate.\n  * minNumber, maxNumber, eqNumber - compare first element targeted by data-selectors (this is where you likely want to use ; to get explicit order of returned elements) to others and data-param; for minNumber it will be violated if first elements value converted to number (JS +) is not smaller then all the rest (again converted to numbers); maxNumber if it's not largest; eqNumber if it is not equal to all.\n  * minValue, maxValue, eqNumber - same as above, but without conversion to number. This means it can be used to compare say date or time fields, as in JS those are sane formats, i.e. ISO date and 24h time, meaning regular string comparision works as valid value comparision. Very usefull if we need elements to select some time range and want to make sure start of range is before end.\n  * regex - takes regular expression in data-param and is violated it at least one targeted inputs value does not match the given expression.\n\n### Custom constraints:\n\nWhen calling cbx() to set it up, first argument can be object whose methods\nwill be custom constraints that can be used in data-constraint, object is\n\"live\" (meaning that we store reference and if new methods are added/changed\nat run time they will work without any recalls of cbx() [in fact it should\nnever be called more than once!]). Constraints have simple signature:\n\n    \n    \n    ( elements, reference ) => [ violated, violation ]\n\n  * elements will be elements matched by data-selectors (again if it is using ; order will be preserved)\n  * reference will be what is in data-param\n\nit should return array with two elements:\n\n  * violated if constraint was violated (if true cbx--visible class will be set on cbx box making it visible)\n  * violtion value that will be used to replace %value% within data-message\n\n## Example use\n\nHere is example page where \"almost anything\" interactive is done using CBX\nonly. You can click show code buttons in fieldsets to see HTML that was used\nto generate it and how CBX was used there.\n\n## Support\n\nIf you like and use the library consider supporting me on\nhttps://buymeacoffee.com/morphles\n\n## About\n\nConstraintBoXes - vanillaJS flexible, extensible form validation ( & more)\nlibrary, no code needed.\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\n### Stars\n\n0 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * JavaScript 97.9%\n  * Makefile 2.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
