{"aid": "40131070", "title": "Real-World Examples of Using Feature Flags for Migration", "url": "https://www.featbit.co/blogs/real-world-examples-of-using-feature-flags-for-migration", "domain": "featbit.co", "votes": 1, "user": "deleteLater", "posted_at": "2024-04-23 12:18:29", "comments": 0, "source_title": "Real-World Examples of Using Feature Flags for Migration", "source_text": "Real-World Examples of Using Feature Flags for Migration\n\n## Innovate Your Software Faster without Risk\n\nFeatBit, a Fast & Scalable Open Source Feature Flags Management Tool built\nwith .NET; Ideal for Self Hosting.\n\nFree Trial\n\nCheck GitHub\n\nTable of Contents\n\nLinear\n\nCanva\n\nConclusion\n\n## Innovate Your Software Faster without Risk\n\nA Fast, Scalable, and Open-source Feature Flags Management Service. For Cloud\n& Self-hosting.\n\nFree TrialCheck GitHub\n\n# Real-World Examples of Using Feature Flags for Migration\n\nLast updated date: April 22, 2024\n\nTeams often use feature flags (also known as feature toggles) as a kill switch\nfor features, for testing in production, and for canary releases to mitigate\nthe risk of deploying new features. However, feature flags can also be used\nfor migrations; the reasoning is the same: to mitigate migration risk and\nreduce migration time and cost.\n\nMuch has been said about using feature flags for migration, including dual\nwrites, dual reads to migrate databases, and using feature flags to transition\nyour infrastructure to the cloud. However, here I will simply show you two\nrecent real-world examples.\n\n## Linear - How we redesigned the Linear UI\n\nTuomas Artman in Linear has post a tweet about how they use feature flags to\nincrementally work on new functionalities. In that post, it told that the new\ndesign was implemented using 430 feature flags. During the entire process they\nwere able to easily switch between new and previous designs.\n\nFollowing the tweet, we found more detail about their the redesign process via\ntheir blog post Linear \u2013 How we redesigned the Linear UI (part II). In\nLinear's UI redesign, feature flags played a key role in testing and\ntransitioning to the new design. After establishing the initial redesign\nconcept, the team used feature flags to control who could access the new\ndesign for internal testing and feedback. This allowed them to iterate quickly\nand receive early feedback from various teams. Once they refined the design\nthrough internal testing, they gradually rolled it out to a limited audience\nin a private beta before releasing it to all users. This approach helped\nminimize disruption and ensure a smooth transition to the new UI.\n\n## Canva - From Zero to 50 Million Uploads per Day: Scaling Media at Canva\n\nI have read a blog post From Zero to 50 Million Uploads per Day: Scaling Media\nat Canva written by Canva (Bytebase transited to me),\n\nCanva's blog article discusses how the company scaled its media infrastructure\nto handle 50 million uploads per day. The article outlines various technical\nchallenges faced during this journey, such as the need for a robust storage\nsystem, handling a high volume of data, and ensuring fast response times.\n\nFeature flags played a crucial role in this process. Canva used them to\ncontrol and test the migration from MySQL to DynamoDB, enabling them to\nisolate changes and switch between systems if needed. This flexibility allowed\nfor safer experimentation, incremental deployment, and quick rollback in case\nof errors. For more insights into Canva's scaling journey and use of feature\nflags, you can read the original blog post.\n\n## Conclusion\n\nHere are two real-world examples that demonstrate the migration challenges\nfaced and the solutions designed. Feature flags were part of these solutions,\neven if they were only a small piece of the puzzle. However, they played a\ncrucial role in mitigating migration risks, reducing migration time, and\nlowering costs. Without feature flags, a safe migration wouldn't have been\npossible.\n\nI highly recommend reading the original blogs to gain more insight into how\nfeature flags were used in migration.\n\nFeatBit\n\nA fast, scalable, and open-source feature flags management service. Friendly\nfor all hosting methods.\n\nHomeDocsBlogsBlogs (\u65e5\u672c\u8a9e)Blogue (Fran\u00e7ais)Support & Pricing\n\n\u00a9 2023 FeatBit\n\nkeywords\n\nTechnical Debt in Agile|Feature Flags in Devops|Feature Toggle in\nDevops|Iteration in Agile|Extreme Programming Xp|Agile Software Development\nMethodology|.NET Feature Flag|c# Feature Flags|Feature Flag c#|Azure Feature\nFlag|Feature Flags Azure\n\n", "frontpage": false}
