{"aid": "40283603", "title": "uv: An fast Python package installer and resolver, written in Rust", "url": "https://github.com/astral-sh/uv", "domain": "github.com/astral-sh", "votes": 1, "user": "tosh", "posted_at": "2024-05-07 08:56:42", "comments": 0, "source_title": "GitHub - astral-sh/uv: An extremely fast Python package installer and resolver, written in Rust.", "source_text": "GitHub - astral-sh/uv: An extremely fast Python package installer and\nresolver, written in Rust.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nastral-sh / uv Public\n\n  * Notifications\n  * Fork 315\n  * Star 11.6k\n\nAn extremely fast Python package installer and resolver, written in Rust.\n\nastral.sh/\n\n### License\n\n11.6k stars 315 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# astral-sh/uv\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n128 Branches\n\n41 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nkonstinPreserve given for tool.uv.sources paths (#3412)May 7, 202424f38d7 \u00b7\nMay 7, 2024May 7, 2024\n\n## History\n\n1,892 Commits  \n  \n### .cargo\n\n|\n\n### .cargo\n\n| Add JSON Schema support (#3046)| Apr 17, 2024  \n  \n### .config\n\n|\n\n### .config\n\n| Only include visited packages in error message derivation (#1144)| Jan 28,\n2024  \n  \n### .github\n\n|\n\n### .github\n\n| Upgrade cargo-dist to v0.14.0 (#3414)| May 6, 2024  \n  \n### assets\n\n|\n\n### assets\n\n| Add top-level benchmark to the README (#2622)| Mar 22, 2024  \n  \n### crates\n\n|\n\n### crates\n\n| Preserve given for tool.uv.sources paths (#3412)| May 7, 2024  \n  \n### docs\n\n|\n\n### docs\n\n| Add basic tool.uv.sources support (#3263)| May 3, 2024  \n  \n### python/uv\n\n|\n\n### python/uv\n\n| Fast lint CI job: Rustfmt, Prettier, Ruff (#2406)| Mar 20, 2024  \n  \n### scripts\n\n|\n\n### scripts\n\n| Add apache airflow test case (#3278)| Apr 26, 2024  \n  \n### .editorconfig\n\n|\n\n### .editorconfig\n\n| change indent to sensible value (#1540)| Feb 16, 2024  \n  \n### .env\n\n|\n\n### .env\n\n| Rename PUFFIN environment variables to UV (#1319)| Feb 15, 2024  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| Add JSON Schema support (#3046)| Apr 17, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Only ignore bin directory at repo root (#2856)| Apr 7, 2024  \n  \n### .pre-commit-config.yaml\n\n|\n\n### .pre-commit-config.yaml\n\n| Update pre-commit dependencies (#3391)| May 6, 2024  \n  \n### .python-versions\n\n|\n\n### .python-versions\n\n| Add bootstrapping and isolation of development Python versions (#1105)| Jan\n26, 2024  \n  \n### BENCHMARKS.md\n\n|\n\n### BENCHMARKS.md\n\n| Minimal markdown nits (#1664)| Feb 18, 2024  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| Bump version to v0.1.39 (#3286)| Apr 27, 2024  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Add JSON Schema support (#3046)| Apr 17, 2024  \n  \n### Cargo.lock\n\n|\n\n### Cargo.lock\n\n| Update Rust crate junction to v1.1.0 (#3393)| May 6, 2024  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| Upgrade cargo-dist to v0.14.0 (#3414)| May 6, 2024  \n  \n### Dockerfile\n\n|\n\n### Dockerfile\n\n| Rename to uv (#1302)| Feb 15, 2024  \n  \n### LICENSE-APACHE\n\n|\n\n### LICENSE-APACHE\n\n| Add README and LICENSE files| Oct 5, 2023  \n  \n### LICENSE-MIT\n\n|\n\n### LICENSE-MIT\n\n| Add README and LICENSE files| Oct 5, 2023  \n  \n### PIP_COMPATIBILITY.md\n\n|\n\n### PIP_COMPATIBILITY.md\n\n| List and uninstall legacy editables (#3415)| May 7, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Add UV_CUSTOM_COMPILE_COMMAND to environment variable docs (#3382)| May 5,\n2024  \n  \n### _typos.toml\n\n|\n\n### _typos.toml\n\n| Fix typos configuration (#1742)| Feb 20, 2024  \n  \n### clippy.toml\n\n|\n\n### clippy.toml\n\n| Make pubgrub an allowed ident (#3399)| May 6, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| Bump version to v0.1.39 (#3286)| Apr 27, 2024  \n  \n### ruff.toml\n\n|\n\n### ruff.toml\n\n| Rename gourgeist to uv-virtualenv (#2118)| Mar 1, 2024  \n  \n### rust-toolchain.toml\n\n|\n\n### rust-toolchain.toml\n\n| Update Rust to v1.78 (#3361)| May 3, 2024  \n  \n### uv.schema.json\n\n|\n\n### uv.schema.json\n\n| Tweak some of the tool.uv.sources error messages for consistency (#...| May\n4, 2024  \n  \n## Repository files navigation\n\n# uv\n\nAn extremely fast Python package installer and resolver, written in Rust.\nDesigned as a drop-in replacement for common pip and pip-tools workflows.\n\nInstalling the Trio dependencies with a warm cache.\n\n## Highlights\n\n  * \u2696\ufe0f Drop-in replacement for common pip, pip-tools, and virtualenv commands.\n  * \u26a1\ufe0f 10-100x faster than pip and pip-tools (pip-compile and pip-sync).\n  * \ud83d\udcbe Disk-space efficient, with a global cache for dependency deduplication.\n  * \ud83d\udc0d Installable via curl, pip, pipx, etc. uv is a static binary that can be installed without Rust or Python.\n  * \ud83e\uddea Tested at-scale against the top 10,000 PyPI packages.\n  * \ud83d\udda5\ufe0f Support for macOS, Linux, and Windows.\n  * \ud83e\uddf0 Advanced features such as dependency version overrides and alternative resolution strategies.\n  * !?\ufe0f Best-in-class error messages with a conflict-tracking resolver.\n  * \ud83e\udd1d Support for a wide range of advanced pip features, including editable installs, Git dependencies, direct URL dependencies, local dependencies, constraints, source distributions, HTML and JSON indexes, and more.\n\nuv is backed by Astral, the creators of Ruff.\n\n## Getting Started\n\nInstall uv with our standalone installers, or from PyPI:\n\n    \n    \n    # On macOS and Linux. curl -LsSf https://astral.sh/uv/install.sh | sh # On Windows. powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\" # With pip. pip install uv # With pipx. pipx install uv # With Homebrew. brew install uv # With Pacman. pacman -S uv\n\nTo create a virtual environment:\n\n    \n    \n    uv venv # Create a virtual environment at .venv.\n\nTo activate the virtual environment:\n\n    \n    \n    # On macOS and Linux. source .venv/bin/activate # On Windows. .venv\\Scripts\\activate\n\nTo install a package into the virtual environment:\n\n    \n    \n    uv pip install flask # Install Flask. uv pip install -r requirements.txt # Install from a requirements.txt file. uv pip install -e . # Install the current project in editable mode. uv pip install \"package @ .\" # Install the current project from disk. uv pip install \"flask[dotenv]\" # Install Flask with \"dotenv\" extra.\n\nTo generate a set of locked dependencies:\n\n    \n    \n    uv pip compile requirements.in -o requirements.txt # Read a requirements.in file. uv pip compile pyproject.toml -o requirements.txt # Read a pyproject.toml file. uv pip compile setup.py -o requirements.txt # Read a setup.py file. echo flask | uv pip compile - -o requirements.txt # Read from stdin. uv pip freeze | uv pip compile - -o requirements.txt # Lock the current environment.\n\nTo sync a set of locked dependencies with the virtual environment:\n\n    \n    \n    uv pip sync requirements.txt # Install from a requirements.txt file.\n\nuv's pip-install and pip-compile commands support many of the same command-\nline arguments as existing tools, including -r requirements.txt, -c\nconstraints.txt, -e . (for editable installs), --index-url, and more.\n\n## Limitations\n\nWhile uv supports a large subset of the pip interface, it does not support the\nentire feature set. In some cases, those differences are intentional; in\nothers, they're a result of uv's early stage of development.\n\nFor details, see our pip compatibility guide.\n\nLike pip-compile, uv generates a platform-specific requirements.txt file\n(unlike, e.g., poetry and pdm, which generate platform-agnostic poetry.lock\nand pdm.lock files). As such, uv's requirements.txt files may not be portable\nacross platforms and Python versions.\n\n## Roadmap\n\nuv is an extremely fast Python package resolver and installer, designed as a\ndrop-in replacement for pip, pip-tools (pip-compile and pip-sync), and\nvirtualenv.\n\nuv represents an intermediary goal in our pursuit of a \"Cargo for Python\": a\ncomprehensive project and package manager that is extremely fast, reliable,\nand easy to use.\n\nThink: a single binary that bootstraps your Python installation and gives you\neverything you need to be productive with Python, bundling not only pip, pip-\ntools, and virtualenv, but also pipx, tox, poetry, pyenv, ruff, and more.\n\nOur goal is to evolve uv into such a tool.\n\nIn the meantime, though, the narrower pip-tools scope allows us to solve the\nlow-level problems involved in building such a tool (like package\ninstallation) while shipping something immediately useful with a minimal\nbarrier to adoption.\n\n## Advanced Usage\n\n### Python discovery\n\nuv itself does not depend on Python, but it does need to locate a Python\nenvironment to (1) install dependencies into the environment and (2) build\nsource distributions.\n\nWhen running pip sync or pip install, uv will search for a virtual environment\nin the following order:\n\n  * An activated virtual environment based on the VIRTUAL_ENV environment variable.\n  * An activated Conda environment based on the CONDA_PREFIX environment variable.\n  * A virtual environment at .venv in the current directory, or in the nearest parent directory.\n\nIf no virtual environment is found, uv will prompt the user to create one in\nthe current directory via uv venv.\n\nWhen running pip compile, uv does not require a virtual environment and will\nsearch for a Python interpreter in the following order:\n\n  * An activated virtual environment based on the VIRTUAL_ENV environment variable.\n  * An activated Conda environment based on the CONDA_PREFIX environment variable.\n  * A virtual environment at .venv in the current directory, or in the nearest parent directory.\n  * The Python interpreter available as python3 on macOS and Linux, or python.exe on Windows.\n\nIf a --python-version is provided to pip compile (e.g., --python-version=3.7),\nuv will search for a Python interpreter matching that version in the following\norder:\n\n  * An activated virtual environment based on the VIRTUAL_ENV environment variable.\n  * An activated Conda environment based on the CONDA_PREFIX environment variable.\n  * A virtual environment at .venv in the current directory, or in the nearest parent directory.\n  * The Python interpreter available as, e.g., python3.7 on macOS and Linux.\n  * The Python interpreter available as python3 on macOS and Linux, or python.exe on Windows.\n  * On Windows, the Python interpreter returned by py --list-paths that matches the requested version.\n\n### Installing into arbitrary Python environments\n\nSince uv has no dependency on Python, it can even install into virtual\nenvironments other than its own. For example, setting\nVIRTUAL_ENV=/path/to/venv will cause uv to install into /path/to/venv, no\nmatter where uv is installed.\n\nuv can also install into arbitrary, even non-virtual environments by providing\na --python argument to uv pip sync or uv pip install. For example, uv pip\ninstall --python=/path/to/python will install into the environment linked to\nthe /path/to/python interpreter.\n\nFor convenience, uv pip install --system will install into the system Python\nenvironment, as an approximate shorthand for, e.g., uv pip install\n--python=$(which python3). Though we generally recommend the use of virtual\nenvironments for dependency management, --system is intended to enable the use\nof uv in continuous integration and containerized environments.\n\nInstalling into system Python across platforms and distributions is\nnotoriously difficult. uv supports the common cases, but will not work in all\ncases. For example, installing into system Python on Debian prior to Python\n3.10 is unsupported due to the distribution's patching of distutils (but not\nsysconfig). While we always recommend the use of virtual environments, uv\nconsiders them to be required in these non-standard environments.\n\n### Git authentication\n\nuv allows packages to be installed from Git and supports the following schemes\nfor authenticating with private repositories.\n\nUsing SSH:\n\n  * git+ssh://git@<hostname>/... (e.g. git+ssh://git@github.com/astral-sh/uv)\n  * git+ssh://git@<host>/... (e.g. git+ssh://git@github.com-key-2/astral-sh/uv)\n\nSee the GitHub SSH documentation for more details on how to configure SSH.\n\nUsing a password or token:\n\n  * git+https://<user>:<token>@<hostname>/... (e.g. git+https://git:github_pat_asdf@github.com/astral-sh/uv)\n  * git+https://<token>@<hostname>/... (e.g. git+https://github_pat_asdf@github.com/astral-sh/uv)\n  * git+https://<user>@<hostname>/... (e.g. git+https://git@github.com/astral-sh/uv)\n\nWhen using a GitHub personal access token, the username is arbitrary. GitHub\ndoes not support logging in with password directly, although other hosts may.\nIf a username is provided without credentials, you will be prompted to enter\nthem.\n\nIf there are no credentials present in the URL and authentication is needed,\nthe Git credential helper will be queried.\n\n### HTTP authentication\n\nuv supports credentials over HTTP when querying package registries.\n\nAuthentication can come from the following sources, in order of precedence:\n\n  * The URL, e.g., https://<user>:<password>@<hostname>/...\n  * A netrc configuration file\n  * A keyring provider (requires opt-in)\n\nIf authentication is found for a single net location (scheme, host, and port),\nit will be cached for the duration of the command and used for other queries\nto that net location. Authentication is not cached across invocations of uv.\n\nNote --keyring-provider subprocess or UV_KEYRING_PROVIDER=subprocess must be\nprovided to enable keyring-based authentication.\n\nAuthentication may be used for hosts specified in the following contexts:\n\n  * index-url\n  * extra-index-url\n  * find-links\n  * package @ https://...\n\nSee the pip compatibility guide for details on differences from pip.\n\n### Dependency caching\n\nuv uses aggressive caching to avoid re-downloading (and re-building\ndependencies) that have already been accessed in prior runs.\n\nThe specifics of uv's caching semantics vary based on the nature of the\ndependency:\n\n  * For registry dependencies (like those downloaded from PyPI), uv respects HTTP caching headers.\n  * For direct URL dependencies, uv respects HTTP caching headers, and also caches based on the URL itself.\n  * For Git dependencies, uv caches based on the fully-resolved Git commit hash. As such, uv pip compile will pin Git dependencies to a specific commit hash when writing the resolved dependency set.\n  * For local dependencies, uv caches based on the last-modified time of the source archive (i.e., the local .whl or .tar.gz file). For directories, uv caches based on the last-modified time of the pyproject.toml, setup.py, or setup.cfg file.\n\nIt's safe to run multiple uv commands concurrently, even against the same\nvirtual environment. uv's cache is designed to be thread-safe and append-only,\nand thus robust to multiple concurrent readers and writers. uv applies a file-\nbased lock to the target virtual environment when installing, to avoid\nconcurrent modifications across processes.\n\nNote that it's not safe to modify the uv cache directly (e.g., uv cache clean)\nwhile other uv commands are running, and never safe to modify the cache\ndirectly (e.g., by removing a file or directory).\n\nIf you're running into caching issues, uv includes a few escape hatches:\n\n  * To force uv to revalidate cached data for all dependencies, run uv pip install --refresh ....\n  * To force uv to revalidate cached data for a specific dependency, run, e.g., uv pip install --refresh-package flask ....\n  * To force uv to ignore existing installed versions, run uv pip install --reinstall ....\n  * To clear the global cache entirely, run uv cache clean.\n\n### Resolution strategy\n\nBy default, uv follows the standard Python dependency resolution strategy of\npreferring the latest compatible version of each package. For example, uv pip\ninstall flask>=2.0.0 will install the latest version of Flask (at time of\nwriting: 3.0.0).\n\nHowever, uv's resolution strategy can be configured to support alternative\nworkflows. With --resolution=lowest, uv will install the lowest compatible\nversions for all dependencies, both direct and transitive. Alternatively,\n--resolution=lowest-direct will opt for the lowest compatible versions for all\ndirect dependencies, while using the latest compatible versions for all\ntransitive dependencies. This distinction can be particularly useful for\nlibrary authors who wish to test against the lowest supported versions of\ndirect dependencies without restricting the versions of transitive\ndependencies.\n\nFor example, given the following requirements.in file:\n\n    \n    \n    flask>=2.0.0\n\nRunning uv pip compile requirements.in would produce the following\nrequirements.txt file:\n\n    \n    \n    # This file was autogenerated by uv via the following command: # uv pip compile requirements.in blinker==1.7.0 # via flask click==8.1.7 # via flask flask==3.0.0 itsdangerous==2.1.2 # via flask jinja2==3.1.2 # via flask markupsafe==2.1.3 # via # jinja2 # werkzeug werkzeug==3.0.1 # via flask\n\nHowever, uv pip compile --resolution=lowest requirements.in would instead\nproduce:\n\n    \n    \n    # This file was autogenerated by uv via the following command: # uv pip compile requirements.in --resolution=lowest click==7.1.2 # via flask flask==2.0.0 itsdangerous==2.0.0 # via flask jinja2==3.0.0 # via flask markupsafe==2.0.0 # via jinja2 werkzeug==2.0.0 # via flask\n\n### Pre-release handling\n\nBy default, uv will accept pre-release versions during dependency resolution\nin two cases:\n\n  1. If the package is a direct dependency, and its version markers include a pre-release specifier (e.g., flask>=2.0.0rc1).\n  2. If all published versions of a package are pre-releases.\n\nIf dependency resolution fails due to a transitive pre-release, uv will prompt\nthe user to re-run with --prerelease=allow, to allow pre-releases for all\ndependencies.\n\nAlternatively, you can add the transitive dependency to your requirements.in\nfile with pre-release specifier (e.g., flask>=2.0.0rc1) to opt in to pre-\nrelease support for that specific dependency.\n\nPre-releases are notoriously difficult to model, and are a frequent source of\nbugs in other packaging tools. uv's pre-release handling is intentionally\nlimited and intentionally requires user opt-in for pre-releases, to ensure\ncorrectness.\n\nFor more, see \"Pre-release compatibility\"\n\n### Dependency overrides\n\nHistorically, pip has supported \"constraints\" (-c constraints.txt), which\nallows users to narrow the set of acceptable versions for a given package.\n\nuv supports constraints, but also takes this concept further by allowing users\nto override the acceptable versions of a package across the dependency tree\nvia overrides (--override overrides.txt).\n\nIn short, overrides allow the user to lie to the resolver by overriding the\ndeclared dependencies of a package. Overrides are a useful last resort for\ncases in which the user knows that a dependency is compatible with a newer\nversion of a package than the package declares, but the package has not yet\nbeen updated to declare that compatibility.\n\nFor example, if a transitive dependency declares pydantic>=1.0,<2.0, but the\nuser knows that the package is compatible with pydantic>=2.0, the user can\noverride the declared dependency with pydantic>=2.0,<3 to allow the resolver\nto continue.\n\nWhile constraints are purely additive, and thus cannot expand the set of\nacceptable versions for a package, overrides can expand the set of acceptable\nversions for a package, providing an escape hatch for erroneous upper version\nbounds.\n\n### Multi-platform resolution\n\nBy default, uv's pip-compile command produces a resolution that's known to be\ncompatible with the current platform and Python version. Unlike Poetry and\nPDM, uv does not yet produce a machine-agnostic lockfile (#2679).\n\nHowever, uv does support resolving for alternate platforms and Python versions\nvia the --python-platform and --python-version command line arguments.\n\nFor example, if you're running uv on macOS, but want to resolve for Linux, you\ncan run uv pip compile --python-platform=linux requirements.in to produce a\nmanylinux2014-compatible resolution.\n\nSimilarly, if you're running uv on Python 3.9, but want to resolve for Python\n3.8, you can run uv pip compile --python-version=3.8 requirements.in to\nproduce a Python 3.8-compatible resolution.\n\nThe --python-platform and --python-version arguments can be combined to\nproduce a resolution for a specific platform and Python version, enabling\nusers to generate multiple lockfiles for different environments from a single\nmachine.\n\nN.B. Python's environment markers expose far more information about the\ncurrent machine than can be expressed by a simple --python-platform argument.\nFor example, the platform_version marker on macOS includes the time at which\nthe kernel was built, which can (in theory) be encoded in package\nrequirements. uv's resolver makes a best-effort attempt to generate a\nresolution that is compatible with any machine running on the target --python-\nplatform, which should be sufficient for most use cases, but may lose fidelity\nfor complex package and platform combinations.\n\n### Time-restricted reproducible resolutions\n\nuv supports an --exclude-newer option to limit resolution to distributions\npublished before a specific date, allowing reproduction of installations\nregardless of new package releases. The date may be specified as a RFC 3339\ntimestamp (e.g., 2006-12-02T02:07:43Z) or UTC date in the same format (e.g.,\n2006-12-02).\n\nNote the package index must support the upload-time field as specified in PEP\n700. If the field is not present for a given distribution, the distribution\nwill be treated as unavailable.\n\nTo ensure reproducibility, messages for unsatisfiable resolutions will not\nmention that distributions were excluded due to the --exclude-newer flag \u2014\nnewer distributions will be treated as if they do not exist.\n\n### Custom CA certificates\n\nBy default, uv loads certificates from the bundled webpki-roots crate. The\nwebpki-roots are a reliable set of trust roots from Mozilla, and including\nthem in uv improves portability and performance (especially on macOS, where\nreading the system trust store incurs a significant delay).\n\nHowever, in some cases, you may want to use the platform's native certificate\nstore, especially if you're relying on a corporate trust root (e.g., for a\nmandatory proxy) that's included in your system's certificate store. To\ninstruct uv to use the system's trust store, run uv with the --native-tls\ncommand-line flag, or set the UV_NATIVE_TLS environment variable to true.\n\nIf a direct path to the certificate is required (e.g., in CI), set the\nSSL_CERT_FILE environment variable to the path of the certificate bundle, to\ninstruct uv to use that file instead of the system's trust store.\n\n## Platform support\n\nuv has Tier 1 support for the following platforms:\n\n  * macOS (Apple Silicon)\n  * macOS (x86_64)\n  * Linux (x86_64)\n  * Windows (x86_64)\n\nuv is continuously built, tested, and developed against its Tier 1 platforms.\nInspired by the Rust project, Tier 1 can be thought of as \"guaranteed to\nwork\".\n\nuv has Tier 2 support (\"guaranteed to build\") for the following platforms:\n\n  * Linux (PPC64)\n  * Linux (PPC64LE)\n  * Linux (aarch64)\n  * Linux (armv7)\n  * Linux (i686)\n  * Linux (s390x)\n\nuv ships pre-built wheels to PyPI for its Tier 1 and Tier 2 platforms.\nHowever, while Tier 2 platforms are continuously built, they are not\ncontinuously tested or developed against, and so stability may vary in\npractice.\n\nBeyond the Tier 1 and Tier 2 platforms, uv is known to build on i686 Windows,\nand known not to build on aarch64 Windows, but does not consider either\nplatform to be supported at this time.\n\nuv supports and is tested against Python 3.8, 3.9, 3.10, 3.11, and 3.12.\n\n## Environment variables\n\nuv accepts the following command-line arguments as environment variables:\n\n  * UV_INDEX_URL: Equivalent to the --index-url command-line argument. If set, uv will use this URL as the base index for searching for packages.\n  * UV_EXTRA_INDEX_URL: Equivalent to the --extra-index-url command-line argument. If set, uv will use this space-separated list of URLs as additional indexes when searching for packages.\n  * UV_CACHE_DIR: Equivalent to the --cache-dir command-line argument. If set, uv will use this directory for caching instead of the default cache directory.\n  * UV_NO_CACHE: Equivalent to the --no-cache command-line argument. If set, uv will not use the cache for any operations.\n  * UV_RESOLUTION: Equivalent to the --resolution command-line argument. For example, if set to lowest-direct, uv will install the lowest compatible versions of all direct dependencies.\n  * UV_PRERELEASE: Equivalent to the --prerelease command-line argument. For example, if set to allow, uv will allow pre-release versions for all dependencies.\n  * UV_SYSTEM_PYTHON: Equivalent to the --system command-line argument. If set to true, uv will use the first Python interpreter found in the system PATH. WARNING: UV_SYSTEM_PYTHON=true is intended for use in continuous integration (CI) or containerized environments and should be used with caution, as modifying the system Python can lead to unexpected behavior.\n  * UV_PYTHON: Equivalent to the --python command-line argument. If set to a path, uv will use this Python interpreter for all operations.\n  * UV_BREAK_SYSTEM_PACKAGES: Equivalent to the --break-system-packages command-line argument. If set to true, uv will allow the installation of packages that conflict with system-installed packages. WARNING: UV_BREAK_SYSTEM_PACKAGES=true is intended for use in continuous integration (CI) or containerized environments and should be used with caution, as modifying the system Python can lead to unexpected behavior.\n  * UV_NATIVE_TLS: Equivalent to the --native-tls command-line argument. If set to true, uv will use the system's trust store instead of the bundled webpki-roots crate.\n  * UV_INDEX_STRATEGY: Equivalent to the --index-strategy command-line argument. For example, if set to unsafe-any-match, uv will consider versions of a given package available across all index URLs, rather than limiting its search to the first index URL that contains the package.\n  * UV_REQUIRE_HASHES: Equivalent to the --require-hashes command-line argument. If set to true, uv will require that all dependencies have a hash specified in the requirements file.\n  * UV_CONSTRAINT: Equivalent to the --constraint command-line argument. If set, uv will use this file as the constraints file. Uses space-separated list of files.\n  * UV_LINK_MODE: Equivalent to the --link-mode command-line argument. If set, uv will use this as a link mode.\n  * UV_NO_BUILD_ISOLATION: Equivalent to the --no-build-isolation command-line argument. If set, uv will skip isolation when building source distributions.\n  * UV_CUSTOM_COMPILE_COMMAND: Used to override uv in the output header of the requirements.txt files generated by uv pip compile. Intended for use-cases in which uv pip compile is called from within a wrapper script, to include the name of the wrapper script in the output file.\n\nIn each case, the corresponding command-line argument takes precedence over an\nenvironment variable.\n\nIn addition, uv respects the following environment variables:\n\n  * SSL_CERT_FILE: If set, uv will use this file as the certificate bundle instead of the system's trust store.\n  * RUST_LOG: If set, uv will use this value as the log level for its --verbose output. Accepts any filter compatible with the tracing_subscriber crate. For example, RUST_LOG=trace will enable trace-level logging. See the tracing documentation for more.\n  * HTTP_PROXY, HTTPS_PROXY, ALL_PROXY: The proxy to use for all HTTP/HTTPS requests.\n  * HTTP_TIMEOUT (or UV_HTTP_TIMEOUT): If set, uv will use this value (in seconds) as the timeout for HTTP reads (default: 30s).\n  * PYC_INVALIDATION_MODE: The validation modes to use when run with --compile. See: PycInvalidationMode.\n  * VIRTUAL_ENV: Used to detect an activated virtual environment.\n  * CONDA_PREFIX: Used to detect an activated Conda environment.\n  * PROMPT: Used to detect the use of the Windows Command Prompt (as opposed to PowerShell).\n  * NU_VERSION: Used to detect the use of NuShell.\n  * FISH_VERSION: Used to detect the use of the Fish shell.\n  * BASH_VERSION: Used to detect the use of the Bash shell.\n  * ZSH_VERSION: Used to detect the use of the Zsh shell.\n  * RAYON_NUM_THREADS: Used to control the number of threads used when unzipping and installing packages. See the rayon documentation for more.\n\n## Versioning\n\nuv uses a custom versioning scheme in which the minor version number is bumped\nfor breaking changes, and the patch version number is bumped for bug fixes,\nenhancements, and other non-breaking changes.\n\nuv does not yet have a stable API; once uv's API is stable (v1.0.0), the\nversioning scheme will adhere to Semantic Versioning.\n\n## Acknowledgements\n\nuv's dependency resolver uses PubGrub under the hood. We're grateful to the\nPubGrub maintainers, especially Jacob Finkelman, for their support.\n\nuv's Git implementation is based on Cargo.\n\nSome of uv's optimizations are inspired by the great work we've seen in pnpm,\nOrogene, and Bun. We've also learned a lot from Nathaniel J. Smith's Posy and\nadapted its trampoline for Windows support.\n\n## License\n\nuv is licensed under either of\n\n  * Apache License, Version 2.0, (LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0)\n  * MIT license (LICENSE-MIT or https://opensource.org/licenses/MIT)\n\nat your option.\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in uv by you, as defined in the Apache-2.0 license,\nshall be dually licensed as above, without any additional terms or conditions.\n\n## About\n\nAn extremely fast Python package installer and resolver, written in Rust.\n\nastral.sh/\n\n### Resources\n\nReadme\n\n### License\n\nActivity\n\nCustom properties\n\n### Stars\n\n11.6k stars\n\n### Watchers\n\n29 watching\n\n### Forks\n\n315 forks\n\nReport repository\n\n## Releases 41\n\n0.1.39 Latest\n\nApr 27, 2024\n\n\\+ 40 releases\n\n## Contributors 87\n\n\\+ 73 contributors\n\n## Languages\n\n  * Rust 90.2%\n  * C++ 5.6%\n  * Python 3.2%\n  * Shell 0.3%\n  * Mustache 0.2%\n  * Batchfile 0.1%\n  * Other 0.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
