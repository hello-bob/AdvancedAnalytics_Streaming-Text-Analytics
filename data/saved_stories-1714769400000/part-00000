{"aid": "40248304", "title": "Komorebi \u2013 A tiling window manager for Windows written in Rust", "url": "https://github.com/LGUG2Z/komorebi", "domain": "github.com/lgug2z", "votes": 1, "user": "bsnnkv", "posted_at": "2024-05-03 14:48:01", "comments": 0, "source_title": "GitHub - LGUG2Z/komorebi: A tiling window manager for Windows \ud83c\udf49", "source_text": "GitHub - LGUG2Z/komorebi: A tiling window manager for Windows \ud83c\udf49\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nLGUG2Z / komorebi Public\n\n  * Notifications\n  * Fork 137\n  * Star 6.8k\n\nA tiling window manager for Windows \ud83c\udf49\n\nlgug2z.github.io/komorebi/\n\n### License\n\nView license\n\n6.8k stars 137 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# LGUG2Z/komorebi\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n36 Branches\n\n26 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nLGUG2Zdocs(readme): add comparison with fancy zonesMay 2, 202422cf7b5 \u00b7 May 2,\n2024May 2, 2024\n\n## History\n\n803 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| chore(deps): bump softprops/action-gh-release from 1 to 2| Mar 11, 2024  \n  \n### derive-ahk\n\n|\n\n### derive-ahk\n\n| fix(ahk): prefer runwait for ahk lib wrappers| Oct 21, 2022  \n  \n### docs\n\n|\n\n### docs\n\n| docs(mkdocs): fix header level typo| May 2, 2024  \n  \n### komorebi-client\n\n|\n\n### komorebi-client\n\n| chore(dev): begin v0.1.26-dev| Apr 30, 2024  \n  \n### komorebi-core\n\n|\n\n### komorebi-core\n\n| chore(dev): begin v0.1.26-dev| Apr 30, 2024  \n  \n### komorebi\n\n|\n\n### komorebi\n\n| chore(dev): begin v0.1.26-dev| Apr 30, 2024  \n  \n### komorebic-no-console\n\n|\n\n### komorebic-no-console\n\n| chore(dev): begin v0.1.26-dev| Apr 30, 2024  \n  \n### komorebic\n\n|\n\n### komorebic\n\n| chore(dev): begin v0.1.26-dev| Apr 30, 2024  \n  \n### wix\n\n|\n\n### wix\n\n| feat(cli): add --no-console to autostart without a console window (#...| Dec\n3, 2023  \n  \n### .czrc\n\n|\n\n### .czrc\n\n| fix(wm): allow any id to override a float rule| Jun 5, 2023  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| refactor(cli): avoid http reqs for sample configs| Mar 25, 2024  \n  \n### .goreleaser.yml\n\n|\n\n### .goreleaser.yml\n\n| chore(release): v0.1.25| Apr 30, 2024  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| docs(license): switch to polyform, add contributing.md| Apr 12, 2024  \n  \n### Cargo.lock\n\n|\n\n### Cargo.lock\n\n| chore(dev): begin v0.1.26-dev| Apr 30, 2024  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| fix(cli): use force-quit if stop signal fails| Apr 20, 2024  \n  \n### LICENSE.md\n\n|\n\n### LICENSE.md\n\n| docs(license): switch to polyform, add contributing.md| Apr 12, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| docs(readme): add comparison with fancy zones| May 2, 2024  \n  \n### justfile\n\n|\n\n### justfile\n\n| feat(docs): update schema.json + mkdocs cli pages| Apr 4, 2024  \n  \n### komorebi.sample.ahk\n\n|\n\n### komorebi.sample.ahk\n\n| chore(release): v0.1.20| Feb 15, 2024  \n  \n### komorebic.lib.ahk\n\n|\n\n### komorebic.lib.ahk\n\n| Update komorebic.lib.ahk| Apr 16, 2024  \n  \n### mkdocs.yml\n\n|\n\n### mkdocs.yml\n\n| docs(mkdocs): various updates to reflect v0.1.25-dev.0| Apr 28, 2024  \n  \n### rust-toolchain.toml\n\n|\n\n### rust-toolchain.toml\n\n| style(rust): specify stable channel| Jul 27, 2022  \n  \n### rustfmt.toml\n\n|\n\n### rustfmt.toml\n\n| chore(rust): migrate to edition 2021| Oct 21, 2021  \n  \n### schema.asc.json\n\n|\n\n### schema.asc.json\n\n| feat(wm): add path variant to application identifiers| Feb 28, 2024  \n  \n### schema.json\n\n|\n\n### schema.json\n\n| docs(mkdocs): various updates to reflect v0.1.25-dev.0| Apr 28, 2024  \n  \n## Repository files navigation\n\n# komorebi\n\nTiling Window Management for Windows.\n\nkomorebi is a tiling window manager that works as an extension to Microsoft's\nDesktop Window Manager in Windows 10 and above.\n\nkomorebi allows you to control application windows, virtual workspaces and\ndisplay monitors with a CLI which can be used with third-party software such\nas whkd and AutoHotKey to set user-defined keyboard shortcuts.\n\nkomorebi aims to make as few modifications as possible to the operating system\nand desktop environment by default. Users are free to make such modifications\nin their own configuration files for komorebi, but these will remain opt-in\nand off-by-default for the foreseeable future.\n\nPlease refer to the documentation for instructions on how to install and\nconfigure komorebi, common workflows, a complete configuration schema\nreference and a complete CLI reference.\n\nThere is a Discord server available for komorebi-related discussion, help,\ntroubleshooting etc. If you have any specific feature requests or bugs to\nreport, please create an issue in this repository.\n\nThere is a YouTube channel where I post komorebi development videos. If you\nwould like to be notified of upcoming videos please subscribe and turn on\nnotifications.\n\nkomorebi is a free and open-source project, and one that encourages you to\nmake charitable donations if you find the software to be useful and have the\nfinancial means.\n\nI encourage you to make a charitable donation to the Palestine Children's\nRelief Fund before you consider sponsoring me on GitHub.\n\nGitHub Sponsors is enabled for this project. Unfortunately I don't have\nanything specific to offer besides my gratitude and shout outs at the end of\nkomorebi live development videos and tutorials.\n\nIf you would like to tip or sponsor the project but are unable to use GitHub\nSponsors, you may also sponsor through Ko-fi.\n\n# Installation\n\nA detailed installation and quickstart guide is available which shows how to\nget started using scoop, winget or building from source.\n\n# Comparison With Fancy Zones\n\nCommunity member Olge has created an excellent video which compares the\ndefault window management features of Windows 11, Fancy Zones and komorebi.\n\nIf you are not familiar with tiling window managers or if you are looking at\nkomorebi and wondering \"how is this different from Fancy Zones? \ud83e\udd14\", this short\nvideo will answer the majority of your questions.\n\n# Demonstrations\n\n@haxibami showing komorebi running on Windows 11 with a terminal emulator, a\nweb browser and a code editor. The original video can be viewed here.\n\n@aik2mlj showing komorebi running on Windows 11 with multiple workspaces,\nterminal emulators, a web browser, and the yasb status bar with the komorebi\nworkspace widget enabled. The original video can be viewed here.\n\n# Contribution Guidelines\n\nIf you would like to contribute to komorebi please take the time to carefully\nread the guidelines below.\n\n## Commit hygiene\n\n  * Flatten all use statements\n  * Run cargo +stable clippy and ensure that all lints and suggestions have been addressed before committing\n  * Run cargo +nightly fmt --all to ensure consistent formatting before committing\n  * Use git cz with the Commitizen CLI to prepare commit messages\n  * Provide at least one short sentence or paragraph in your commit message body to describe your thought process for the changes being committed\n\n## PRs should contain only a single feature or bug fix\n\nIt is very difficult to review pull requests which touch multiple unrelated\nfeatures and parts of the codebase.\n\nPlease do not submit pull requests like this; you will be asked to separate\nthem into smaller PRs that deal only with one feature or bug fix at a time.\n\nIf you are working on multiple features and bug fixes, I suggest that you cut\na branch called local-trunk from master which you keep up to date, and rebase\nthe various independent branches you are working on onto that branch if you\nwant to test them together or create a build with everything integrated.\n\n## Refactors to the codebase must have prior approval\n\nkomorebi is a mature codebase with an internal consistency and structure that\nhas developed organically over close to half a decade.\n\nThere are countless hours of live coding videos demonstrating work on this\nproject and showing new contributors how to do everything from basic tasks\nlike implementing new komorebic commands to distinguishing monitors by\nmanufacturer hardware identifiers and video card ports.\n\nRefactors to the structure of the codebase are not taken lightly and require\nprior discussion and approval.\n\nPlease do not start refactoring the codebase with the expectation of having\nyour changes integrated until you receive an explicit approval or a request to\ndo so.\n\nSimilarly, when implementing features and bug fixes, please stick to the\nstructure of the codebase as much as possible and do not take this as an\nopportunity to do some \"refactoring along the way\".\n\nIt is extremely difficult to review PRs for features and bug fixes if they are\nlost in sweeping changes to the structure of the codebase.\n\n## Breaking changes to user-facing interfaces are unacceptable\n\nThis includes but is not limited to:\n\n  * All komorebic commands\n  * The komorebi.json schema\n  * The komorebi-application-specific-configuration schema\n\nNo user should ever find that their configuration file has stopped working\nafter upgrading to a new version of komorebi.\n\nMore often than not there are ways to reformulate changes that may initially\nseem like they require breaking user-facing interfaces into additive changes.\n\nFor some inspiration please take a look at this commit which added the ability\nfor users to specify colours in komorebi.json in Hex format alongside RGB.\n\nThere is also a process in place for graceful, non-breaking, deprecation of\nconfiguration options that are no longer required.\n\n## License\n\nkomorebi is licensed under the PolyForm Strict 1.0.0 license. On a high level\nthis means that you are free to do whatever you want with komorebi other than\nredistribution, or distribution of new works (ie. hard-forks) based on the\nsoftware.\n\nAnyone is free to make their own fork of komorebi with changes intended either\nfor personal use or for integration back upstream via pull requests.\n\nPlease see CONTRIBUTING.md for more information about how code contributions\nto komorebi are licensed.\n\n# Development\n\nIf you use IntelliJ, you should enable the following settings to ensure that\ncode generated by macros is recognised by the IDE for completions and\nnavigation:\n\n  * Set Expand declarative macros to Use new engine under \"Settings > Langauges & Frameworks > Rust\"\n  * Enable the following experimental features:\n\n    * org.rust.cargo.evaluate.build.scripts\n    * org.rust.macros.proc\n\n# Logs and Debugging\n\nLogs from komorebi will be appended to %LOCALAPPDATA%/komorebi/komorebi.log;\nthis file is never rotated or overwritten, so it will keep growing until it is\ndeleted by the user.\n\nWhenever running the komorebic stop command or sending a Ctrl-C signal to\nkomorebi directly, the komorebi process ensures that all hidden windows are\nrestored before termination.\n\nIf however, you ever end up with windows that are hidden and cannot be\nrestored, a list of window handles known to komorebi are stored and\ncontinuously updated in %LOCALAPPDATA%/komorebi//komorebi.hwnd.json.\n\n## Restoring Windows\n\nRunning komorebic restore-windows will read the list of window handles and\nforcibly restore them, regardless of whether the main komorebi process is\nrunning.\n\n## Panics and Deadlocks\n\nIf komorebi ever stops responding, it is most likely either due to either a\npanic or a deadlock. In the case of a panic, this will be reported in the log.\nIn the case of a deadlock, there will not be any errors in the log, but the\nprocess and the log will appear frozen.\n\nIf you believe you have encountered a deadlock, you can compile komorebi with\n--features deadlock_detection and try reproducing the deadlock again. This\nwill check for deadlocks every 5 seconds in the background, and if a deadlock\nis found, information about it will appear in the log which can be shared when\nopening an issue.\n\n# Window Manager State and Integrations\n\nThe current state of the window manager can be queried using the komorebic\nstate command, which returns a JSON representation of the State struct.\n\nThis may also be polled to build further integrations and widgets on top of.\n\n# Window Manager Event Subscriptions\n\n## Named Pipes\n\nIt is possible to subscribe to notifications of every WindowManagerEvent and\nSocketMessage handled by komorebi using Named Pipes.\n\nFirst, your application must create a named pipe. Once the named pipe has been\ncreated, run the following command:\n\n    \n    \n    komorebic.exe subscribe-pipe <your pipe name>\n\nNote that you do not have to include the full path of the named pipe, just the\nname.\n\nIf the named pipe exists, komorebi will start pushing JSON data of\nsuccessfully handled events and messages:\n\n    \n    \n    {\"event\":{\"type\":\"AddSubscriber\",\"content\":\"yasb\"},\"state\":{}} {\"event\":{\"type\":\"FocusWindow\",\"content\":\"Left\"},\"state\":{}} {\"event\":{\"type\":\"FocusChange\",\"content\":[\"SystemForeground\",{\"hwnd\":131444,\"title\":\"komorebi \u2013 README.md\",\"exe\":\"idea64.exe\",\"class\":\"SunAwtFrame\",\"rect\":{\"left\":13,\"top\":60,\"right\":1520,\"bottom\":1655}}]},\"state\":{}} {\"event\":{\"type\":\"MonitorPoll\",\"content\":[\"ObjectCreate\",{\"hwnd\":5572450,\"title\":\"OLEChannelWnd\",\"exe\":\"explorer.exe\",\"class\":\"OleMainThreadWndClass\",\"rect\":{\"left\":0,\"top\":0,\"right\":0,\"bottom\":0}}]},\"state\":{}} {\"event\":{\"type\":\"FocusWindow\",\"content\":\"Right\"},\"state\":{}} {\"event\":{\"type\":\"FocusChange\",\"content\":[\"SystemForeground\",{\"hwnd\":132968,\"title\":\"Windows PowerShell\",\"exe\":\"WindowsTerminal.exe\",\"class\":\"CASCADIA_HOSTING_WINDOW_CLASS\",\"rect\":{\"left\":1539,\"top\":60,\"right\":1520,\"bottom\":821}}]},\"state\":{}} {\"event\":{\"type\":\"FocusWindow\",\"content\":\"Down\"},\"state\":{}} {\"event\":{\"type\":\"FocusChange\",\"content\":[\"SystemForeground\",{\"hwnd\":329264,\"title\":\"den \u2014 Mozilla Firefox\",\"exe\":\"firefox.exe\",\"class\":\"MozillaWindowClass\",\"rect\":{\"left\":1539,\"top\":894,\"right\":1520,\"bottom\":821}}]},\"state\":{}} {\"event\":{\"type\":\"FocusWindow\",\"content\":\"Up\"},\"state\":{}} {\"event\":{\"type\":\"FocusChange\",\"content\":[\"SystemForeground\",{\"hwnd\":132968,\"title\":\"Windows PowerShell\",\"exe\":\"WindowsTerminal.exe\",\"class\":\"CASCADIA_HOSTING_WINDOW_CLASS\",\"rect\":{\"left\":1539,\"top\":60,\"right\":1520,\"bottom\":821}}]},\"state\":{}}\n\nYou may then filter on the type key to listen to the events that you are\ninterested in. For a full list of possible notification types, refer to the\nenum variants of WindowManagerEvent in komorebi and SocketMessage in komorebi-\ncore.\n\nBelow is an example of how you can subscribe to and filter on events using a\nnamed pipe in nodejs.\n\n    \n    \n    const { exec } = require(\"child_process\"); const net = require(\"net\"); const pipeName = \"\\\\\\\\.\\\\pipe\\\\komorebi-js\"; const server = net.createServer((stream) => { console.log(\"Client connected\"); // Every time there is a workspace-related event, let's log the names of all // workspaces on the currently focused monitor, and then log the name of the // currently focused workspace on that monitor stream.on(\"data\", (data) => { let json = JSON.parse(data.toString()); let event = json.event; if (event.type.includes(\"Workspace\")) { let monitors = json.state.monitors; let current_monitor = monitors.elements[monitors.focused]; let workspaces = monitors.elements[monitors.focused].workspaces; let current_workspace = workspaces.elements[workspaces.focused]; console.log( workspaces.elements .map((workspace) => workspace.name) .filter((name) => name !== null) ); console.log(current_workspace.name); } }); stream.on(\"end\", () => { console.log(\"Client disconnected\"); }); }); server.listen(pipeName, () => { console.log(\"Named pipe server listening\"); }); const command = \"komorebic subscribe-pipe komorebi-js\"; exec(command, (error, stdout, stderr) => { if (error) { console.error(`Error executing command: ${error}`); return; } });\n\n## Unix Domain Sockets\n\nIt is possible to subscribe to notifications of every WindowManagerEvent and\nSocketMessage handled by komorebi using Unix Domain Sockets.\n\nUDS are also the only mode of communication between komorebi and komorebic.\n\nFirst, your application must create a socket in $ENV:LocalAppData\\komorebi.\nOnce the socket has been created, run the following command:\n\n    \n    \n    komorebic.exe subscribe-socket <your socket name>\n\nIf the socket exists, komorebi will start pushing JSON data of successfully\nhandled events and messages as in the example above in the Named Pipes\nsection.\n\n## Rust Client\n\nAs of v0.1.22 it is possible to use the komorebi-client crate to subscribe to\nnotifications of every WindowManagerEvent and SocketMessage handled by\nkomorebi in a Rust codebase.\n\nBelow is a simple example of how to use komorebi-client in a basic Rust\napplication.\n\n    \n    \n    // komorebi-client = { git = \"https://github.com/LGUG2Z/komorebi\", tag = \"v0.1.25\"} use anyhow::Result; use komorebi_client::Notification; use komorebi_client::NotificationEvent; use komorebi_client::UnixListener; use komorebi_client::WindowManagerEvent; use std::io::BufRead; use std::io::BufReader; use std::io::Read; pub fn main() -> anyhow::Result<()> { let socket = komorebi_client::subscribe(NAME)?; for incoming in socket.incoming() { match incoming { Ok(data) => { let reader = BufReader::new(data.try_clone()?); for line in reader.lines().flatten() { let notification: Notification = match serde_json::from_str(&line) { Ok(notification) => notification, Err(error) => { log::debug!(\"discarding malformed komorebi notification: {error}\"); continue; } }; // match and filter on desired notifications } } Err(error) => { log::debug!(\"{error}\"); } } } }\n\nA read-world example can be found in komokana.\n\n## Subscription Event Notification Schema\n\nA JSON Schema of the event notifications emitted to subscribers can be\ngenerated with the komorebic notification-schema command. The output of this\ncommand can be redirected to the clipboard or a file, which can be used with\nservices such as Quicktype to generate type definitions in different\nprogramming languages.\n\n## Communication over TCP\n\nA TCP listener can optionally be exposed on a port of your choosing with the\n--tcp-port=N flag. If this flag is not provided to komorebi or komorebic\nstart, no TCP listener will be created.\n\nOnce created, your client may send any SocketMessage to komorebi in the same\nway that komorebic would.\n\nThis can be used if you would like to create your own alternative to komorebic\nwhich incorporates scripting and various middleware layers, and similarly it\ncan be used if you would like to integrate komorebi with a custom input\nhandler.\n\nIf a client sends an unrecognized message, it will be disconnected and have to\nreconnect before trying to communicate again.\n\n## Socket Message Schema\n\nA JSON Schema of socket messages used to send instructions to komorebi can be\ngenerated with the komorebic socket-schema command. The output of this command\ncan be redirected to the clipboard or a file, which can be used with services\nsuch as Quicktype to generate type definitions in different programming\nlanguages.\n\n# Appreciations\n\n  * First and foremost, thank you to my wife, both for naming this project and for her patience throughout its never-ending development\n\n  * Thank you to @sitiom for being an exemplary open source community leader\n\n  * Thank you to the developers of nog who came before me and whose work taught me more than I can ever hope to repay\n\n  * Thank you to the developers of GlazeWM for pushing the boundaries of tiling window management on Windows with me and having an excellent spirit of collaboration\n\n  * Thank you to @Ciantic for helping me bring the hidden Virtual Desktops cloaking function to komorebi\n\n## About\n\nA tiling window manager for Windows \ud83c\udf49\n\nlgug2z.github.io/komorebi/\n\n### Topics\n\nwindows rust autohotkey tiling-window-manager binary-space-partition\n\n### Resources\n\nReadme\n\n### License\n\nView license\n\nActivity\n\n### Stars\n\n6.8k stars\n\n### Watchers\n\n36 watching\n\n### Forks\n\n137 forks\n\nReport repository\n\n## Releases 26\n\nv0.1.25 Latest\n\nApr 30, 2024\n\n\\+ 25 releases\n\n## Sponsor this project\n\n  * LGUG2Z \u062c\u0627\u062f\n\n  * ko-fi.com/lgug2z\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Contributors 22\n\n\\+ 8 contributors\n\n## Languages\n\n  * Rust 97.7%\n  * AutoHotkey 2.1%\n  * Just 0.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
