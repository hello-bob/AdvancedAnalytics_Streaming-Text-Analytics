{"aid": "40055640", "title": "Lessons learned while developing Age of Empires 1 Definitive Edition (2018)", "url": "http://richg42.blogspot.com/2018/02/some-lessons-learned-while-developing.html", "domain": "richg42.blogspot.com", "votes": 2, "user": "apitman", "posted_at": "2024-04-16 18:39:55", "comments": 0, "source_title": "Lessons learned while developing Age of Empires 1 Definitive Edition", "source_text": "Richard Geldreich's Blog: Lessons learned while developing Age of Empires 1\nDefinitive Edition\n\n# Richard Geldreich's Blog\n\nCo-owner of Binomial LLC, working on GPU texture interchange. Open source\ndeveloper, graphics programmer, former video game developer. Worked previously\nat SpaceX (Starlink), Valve, Ensemble Studios (Microsoft), DICE Canada.\n\n## Wednesday, February 14, 2018\n\n### Lessons learned while developing Age of Empires 1 Definitive Edition\n\nIn late 2016 I began helping Forgotten Empires on Age 1 DE, a UWP app shipping\nin the Windows Store on Feb 20th. I only helped occasionally for the first\ncouple months or so (because I was working on Basis and an aerospace project),\nbut as the title got closer to shipping I spent more and more of my time\nworking on Age problems. We started with the original 20 year old Age 1\ncodebase. Here are some of the things I've learned:\n\n1\\. Get networking and multiplayer working early. DE supports both traditional\npeer to peer (with optional TURN server relaying to handle problematic NAT\nrouters), and a new client-server like mode (\"host command forwarding\") where\nall clients send their commands to the host which are then forwarded to the\nother clients. Age 1 uses a lockstep simulation model, except for most AI code\nwhich is only executed on the host (see here).\n\nDo not underestimate the complexity of lockstep peer to peer RTS multiplayer\ngames. If possible, choose an already debugged/shipped low-level networking\nlibrary so you can focus on higher-level game-specific networking problems.\n\nIf you do use an off the shelf network library, test it thoroughly to help\nbuild a mental model of how it actually works (vs. how you think it works or\nhow it's supposed to work). Develop a test app you can send the library\ndevelopers to reproduce problems. If the library supports reliable in-order\nmessaging then (at the minimum) put sequence numbers in all of your packets\nand assert if the library drops, reorders or duplicates packets in case there\nare bugs in the reliable layer.\n\nFor debugging purposes make sure all timeouts can be increased by a factor of\n10x or whatever. Sometimes, debugging real-time network code is impossible in\nthe debugger (because it inserts long pauses), so be prepared to do a lot of\nprintf()-style debugging on multiple machines.\n\nIf you're taking an old codebase and changing it to use a new networking\nlibrary or API, try to (at first) minimize the amount of changes you make to\nthe original code. No matter how ugly it is, the original code worked, was bug\nfixed and shipped, and don't underestimate the value of this.\n\nIf you develop your own reliable messaging system, develop a network simulator\ntestbed (which simulates packet loss, etc.) to automate the validation of this\nlayer whenever it's modified and always keep it working.\n\nTrust nothing and verify everything at multiple levels. CRC your packets, CRC\nthe uncompressed data if you use packet compression, use session nonces in\nyour connection-oriented layer to validate connections, validate that your\nreliable layer is actually reliable, etc. Make sure the initial connection\nprocess is well defined and completely understood. Everything needs timeouts\nof some sort and when sending unreliable messages any packet can get lost.\nGaffer on Games is a great guide to this domain of problems.\n\nGetting the game to run smoothly with X random machines across a variety of\nnetwork conditions is difficult. Plan on spending a lot of time tuning the\nsystem which controls the game's turntime (command latency and sim tick rate).\nThere are multiple sources of MP hitches (which players hate): Turntime too\nlow (so one or more machines can't keep up with the faster ones), random CPU\nspikes caused by AI/pathing/etc., reliable messaging retransmit delays, random\nclient latency spikes, AI's sending too much command data, etc. Develop strong\ntools to track these problems down when they occur in the field and not in\nyour test lab.\n\nAdd cheat commands to the game to help simulate a wide range of various\nnetworking and framerate conditions.\n\nIf you send unreliable ping/pong packets to measure roundtrip client latency,\nfilter the results because some routers are quite noisy. The statistics that\ngo into computing the sim tick rate and turntimes should be well filtered.\n\nEstablishing the initial connections between two random machines behind NAT's\nis still a challenging problem - test this early.\n\nIdentify your most important packets and consider adding some form of forward\nerror correction to them to help insulate the system from packet loss. In\nlockstep designs like Age, the ALL_DONE packets sent by each client to every\nother client to indicate end of turn are the most important and currently sent\ntwice for redundancy. (Excluding AI's, there are no commands from the player\non most turns!)\n\nInternal testing doesn't mean much. You must have MP betas to discover the\nreal problems. It seems virtually impossible to simulate network conditions as\nthey occur in the wild, or the game running on customer machines. Make sure\nyou get valuable test data back from MP betas to help diagnose problems.\n\nAge DE's reliable messaging system is based on Brownlow's \"A Reliable\nMessaging Protocol\" in GPG 5. This is an elegant and simple NACK-based\nreliable protocol, except the retransmit method described in the article is\nnot powerful enough and is sensitive to network latency (supporting only 1\npacket retransmit request per roundtrip). We had to modify the system to\nsupport retransmit packets containing 64-bit bitmasks indicating which\nspeciific packets needed to be resent.\n\n2\\. Develop strong out of sync (OOS) detection tools early, and learn how to\nuse them. As a lockstep RTS codebase is modified you will introduce many\nmysterious and horrifying OOS problems. Don't let them smolder in the\ncodebase, fix them early and fix new ones ASAP.\n\nFunctions which are not safe to use in the lockstep simulation should be\nmarked as much. We had an accessor function which returned true if the entire\nmap was visible, which got accidentally used in some code to determine if a\nbuilding could be placed at a location. This caused OOS's whenever the user\nresigned (which locally exposes the entire map) and another client built\nwalls. This little OOS took 2 days to track down.\n\nIf you are getting mysterious OOS's, you need to identify the initial cause of\ndivergence and fix that, then repeat the OOS debugging process until no more\ndivergences remain. Don't waste time looking at downstream effects (such as\nout of sync random number generators) - identify and fix that first\ndivergence.\n\nIn Age, the original developers logged virtually everything they could in the\nlockstep sim. Some important events (such as where objects were being created)\nwere left out, so we had to add unique \"origin\" parameters to all object\ncreations so we knew where in the code objects were being created.\n\n3\\. Do not underestimate the complexity and depth of UWP and Xbox Live\ndevelopment. Your team will need at least 1-2 developers who live and breathe\nthese platforms. These individuals are rare so you'll just have to bite the\nbullet and make an investment into these technologies.\n\n4\\. Develop clean and defensive coding practices early on. Use static\nanalysis, use debug heaps, pay attention to warnings, etc. Being sloppy here\nwill increase your OOS rate and cause player and developer pain. Be smart and\nuse every tool at your disposal.\n\n5\\. Do not disable or break \"old\" logging code. Make sure it always compiles.\nThis logging code is invaluable for tracking down mysterious/rare problems and\nOOS's. The original developers put all this logging code in there for a\nreason..\n\n6\\. Add debug primitives if the engine doesn't have any This is a basic\nquality of life thing: You need the ability to efficiently render 2D text,\ndebug primitives in the world, etc. If the engine doesn't support them then\nget them in early.\n\n7\\. Profile early and make major engine architectural decisions based off\nactual performance metrics. If your new renderer design relies on a specific\nway of rendering the game in a non-mainstream manner, then verify that your\ndesign will actually work in a prototype before betting the farm on it. Be\nwilling to pivot to an alternate renderer design with better performance if\nyour initial design is too slow.\n\nGet perf. up early: Lockstep RTS multiplayer games can only tick the\nsimulation at the rate of the slowest machine in the game. So if one machine\nis a dog and can only handle 20Hz, the game will feel choppy for everyone.\nOther major sources of perf problems like pathing or AI spikes will be\nobscured if rendering is running slow.\n\n8\\. Figure out early on how to split up a singled threaded engine to be\nmultithreaded. Constraining an RTS to live on only a single thread is a recipe\nfor performance disaster, especially if you are massively increasing the max\nmap size and pop caps vs. the original title.\n\n9\\. Many RTS systems rely on emergent behavior and are interdependent. If you\nmodify one of these systems, you MUST test the hell out of it before\ncommitting, and then be prepared to deal with the unpredictable downstream\neffects.\n\nFor example, modifying the movement code in subtle ways can break the AI, or\ncause it to behave suboptimally. The movement code in Age1 DE is like\nStarcraft's: an unholy mess. To be successful modifying code like this you\nmust deeply understand the game and the entire system's emergent behavior.\n\nCarelessly hacking the movement or path finding code in an RTS is akin to\nhacking the kernel in an OS: expect chaos.\n\n10\\. Automated regression testing The more you automate and objectify testing\nof movement, AI, etc. the happier your life will be and the easier you will\nsleep at night.\n\n11\\. Playtest constantly and with enough variety It's not enough to just play\nagainst AI's on the same map over and over. Vary it up to exercise different\ncodepaths. You MUST playtest constantly to understand the true state of the\ntitle.\n\n12\\. Assume the original developers knew what they were doing. The old code\nshipped and was successful. If you don't understand it, most likely the\nproblem is you, not the code.\n\nFor example, Age 1's original movement system has some weird code to\naccelerate objects as they moved downhill. This code didn't have a max\nvelocity cap, so on very long hills units could move very quickly. We resisted\nmodifying this code because it turns out it's a subtle but important aspect of\ncombat on hills.\n\n13\\. Don't waste time developing new templated containers and switching the\nengine to use them, but do reformat and clean up the old code. Nobody will\nhave the time to figure out your new fancy custom container classes, they'll\njust use std because we all know how they work.\n\nInstead, spend that time making the old code readable so it can be enhanced\nwithout the developers going crazy trying to understand it: fix its\nformatting, add \"m_\" prefixes, etc.\n\nPosted by\n\nRich Geldreich at\n\n5:33 PM\n\nEmail ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest\n\n#### 4 comments:\n\n  1. BrianFebruary 20, 2018 at 8:31 AM\n\nThank you. This is very insightful. Can't wait to play it again.\n\nReplyDelete\n\nReplies\n\nReply\n\n  2. TyFebruary 22, 2018 at 5:41 PM\n\nWhile you have some interesting points, I can't make any comment except that\nGray text on white is unreadable I had to highlight the text to read it, and\nwhite-text on blue is extremely ugly.\n\nReplyDelete\n\nReplies\n\n    1. Rich GeldreichFebruary 22, 2018 at 6:02 PM\n\nHi Ty - weird, it doesn't appear that way to me. I've never actually\ncustomized my blog's appearance in any way, I'm just using the standard\nsettings. The text is black and the background is white.\n\nDelete\n\nReplies\n\nReply\n\n    2. Rug.drFebruary 28, 2018 at 12:01 PM\n\nHey Rich, great article. Ty is right the text color is actually : #666666 wich\nis a kind of pale grey.\n\nDelete\n\nReplies\n\nReply\n\nReply\n\nAdd comment\n\nLoad more...\n\nNewer Post Older Post Home\n\nSubscribe to: Post Comments (Atom)\n\n## Blog Archive\n\n  * \u25ba 2023 (9)\n\n    * \u25ba December (1)\n    * \u25ba May (2)\n    * \u25ba April (5)\n    * \u25ba March (1)\n\n  * \u25ba 2022 (7)\n\n    * \u25ba January (7)\n\n  * \u25ba 2021 (25)\n\n    * \u25ba November (1)\n    * \u25ba February (23)\n    * \u25ba January (1)\n\n  * \u25ba 2020 (12)\n\n    * \u25ba September (1)\n    * \u25ba August (1)\n    * \u25ba April (5)\n    * \u25ba February (3)\n    * \u25ba January (2)\n\n  * \u25ba 2019 (12)\n\n    * \u25ba October (2)\n    * \u25ba September (1)\n    * \u25ba April (9)\n\n  * \u25bc 2018 (43)\n\n    * \u25ba October (2)\n    * \u25ba July (3)\n    * \u25ba June (6)\n    * \u25ba May (9)\n    * \u25ba April (17)\n    * \u25ba March (2)\n    * \u25bc February (4)\n\n      * On Age DE's pathing/movement\n      * Age DE's latency matrix\n      * Lessons learned while developing Age of Empires 1 ...\n      * 10 abusive company types\n\n  * \u25ba 2017 (24)\n\n    * \u25ba November (5)\n    * \u25ba September (1)\n    * \u25ba August (1)\n    * \u25ba June (2)\n    * \u25ba April (2)\n    * \u25ba March (4)\n    * \u25ba February (2)\n    * \u25ba January (7)\n\n  * \u25ba 2016 (77)\n\n    * \u25ba December (3)\n    * \u25ba November (2)\n    * \u25ba October (19)\n    * \u25ba September (33)\n    * \u25ba August (5)\n    * \u25ba July (3)\n    * \u25ba June (1)\n    * \u25ba May (4)\n    * \u25ba April (3)\n    * \u25ba March (1)\n    * \u25ba January (3)\n\n  * \u25ba 2015 (62)\n\n    * \u25ba December (12)\n    * \u25ba November (9)\n    * \u25ba October (6)\n    * \u25ba June (2)\n    * \u25ba May (6)\n    * \u25ba April (1)\n    * \u25ba March (1)\n    * \u25ba February (5)\n    * \u25ba January (20)\n\n  * \u25ba 2014 (34)\n\n    * \u25ba November (1)\n    * \u25ba October (2)\n    * \u25ba June (6)\n    * \u25ba May (3)\n    * \u25ba April (2)\n    * \u25ba March (11)\n    * \u25ba February (5)\n    * \u25ba January (4)\n\n  * \u25ba 2013 (6)\n\n    * \u25ba November (1)\n    * \u25ba October (4)\n    * \u25ba August (1)\n\n  * \u25ba 2012 (4)\n\n    * \u25ba November (1)\n    * \u25ba August (1)\n    * \u25ba July (2)\n\n## About Me\n\nRich Geldreich\n\n    Seattle, WA, United States\n    Back in the day I worked for several years at Digital Illusions on things like the first shipping deferred shaded game (\"Shrek\" - 2001), software renderers, and game AI. Then, after working for Microsoft at Ensemble Studios for 5 years as engine lead on Halo Wars, I took a year off to create \"crunch\", an advanced DXTc texture compression library. I then worked 5 years at Valve, where I contributed to Portal 2, Dota 2, CS:GO, and the Linux versions of Valve's Source1 games. I was one of the original developers on the Steam Linux team, where I worked with a (somewhat enigmatic) multi-billionare on proving that OpenGL could still hold its own vs. Direct3D. I also started the vogl (Valve's OpenGL debugger) project from scratch, which I worked on for over a year. In my spare time I work on various open source lossless and texture compression projects: crunch, LZHAM, miniz, jpeg-compressor, and picojpeg.\n\nView my complete profile\n\nSimple theme. Powered by Blogger.\n\nDiese Website verwendet Cookies von Google, um Dienste anzubieten und Zugriffe\nzu analysieren. Deine IP-Adresse und dein User-Agent werden zusammen mit\nMesswerten zur Leistung und Sicherheit f\u00fcr Google freigegeben. So k\u00f6nnen\nNutzungsstatistiken generiert, Missbrauchsf\u00e4lle erkannt und behoben und die\nQualit\u00e4t des Dienstes gew\u00e4hrleistet werden.Weitere InformationenOk\n\n", "frontpage": false}
