{"aid": "40080695", "title": "Formal Mechanised Semantics of CHERI C: Capabilities, Undefined Behaviour", "url": "https://dl.acm.org/doi/10.1145/3617232.3624859?ai=&ui=&af=", "domain": "acm.org", "votes": 6, "user": "rbanffy", "posted_at": "2024-04-18 21:04:25", "comments": 0, "source_title": "Formal Mechanised Semantics of CHERI C: Capabilities, Undefined Behaviour, and Provenance | Proceedings of the 29th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 1", "source_text": "Formal Mechanised Semantics of CHERI C: Capabilities, Undefined Behaviour, and Provenance | Proceedings of the 29th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 1\n\n## This website uses cookies\n\nWe occasionally run membership recruitment campaigns on social media channels\nand use cookies to track post-clicks. We also share information about your use\nof our site with our social media, advertising and analytics partners who may\ncombine it with other information that you\u2019ve provided to them or that they\u2019ve\ncollected from your use of their services. Use the check boxes below to choose\nthe types of cookies you consent to have stored on your device.\n\nUse necessary cookies only Allow all cookies Show details\n\nOK\n\nUse necessary cookies only Allow selected cookies Allow all cookies\n\nShow details\n\nCookie declaration [#IABV2SETTINGS#] About\n\nNecessary (7) Preferences (5) Statistics (16) Marketing (24) Unclassified (0)\n\nNecessary cookies help make a website usable by enabling basic functions like\npage navigation and access to secure areas of the website. The website cannot\nfunction properly without these cookies. These cookies do not gather\ninformation about you that could be used for marketing purposes and do not\nremember where you have been on the internet.\n\nName| Provider| Purpose| Expiry| Type  \n---|---|---|---|---  \n__jid| c.disquscdn.com| Used to add comments to the website and remember the\nuser's Disqus login credentials across websites that use said service.|\nSession| HTTP  \ndisqusauth| c.disquscdn.com| Registers whether the user is logged in. This\nallows the website owner to make parts of the website inaccessible, based on\nthe user's log-in status.| Session| HTTP  \n__cf_bm| ACM| This cookie is used to distinguish between humans and bots. This\nis beneficial for the website, in order to make valid reports on the use of\ntheir website.| 1 day| HTTP  \n_cfuvid| ACM| This cookie is a part of the services provided by Cloudflare -\nIncluding load-balancing, deliverance of website content and serving DNS\nconnection for website operators.| Session| HTTP  \nCookieConsent| Cookiebot| Stores the user's cookie consent state for the\ncurrent domain| 1 year| HTTP  \n1.gif| Cookiebot| Used to count the number of sessions to the website,\nnecessary for optimizing CMP product delivery.| Session| Pixel  \nVISITOR_PRIVACY_METADATA| YouTube| Stores the user's cookie consent state for\nthe current domain| 180 days| HTTP  \n  \nPreference cookies enable a website to remember information that changes the\nway the website behaves or looks, like your preferred language or the region\nthat you are in.\n\nName| Provider| Purpose| Expiry| Type  \n---|---|---|---|---  \naet-dismiss| c.disquscdn.com| Necessary for the functionality of the website's\ncomment-system.| Persistent| HTML  \ndrafts.queue| c.disquscdn.com| Necessary for the functionality of the\nwebsite's comment-system.| Persistent| HTML  \nsubmitted_posts_cache| c.disquscdn.com| Necessary for the functionality of the\nwebsite's comment-system.| Persistent| HTML  \nmopDeploy| Mopinion| Pending| Session| HTML  \nMACHINE_LAST_SEEN| ACM| Pending| 300 days| HTTP  \n  \nStatistic cookies help website owners understand how visitors interact with\nwebsites by collecting and reporting information anonymously.\n\nName| Provider| Purpose| Expiry| Type  \n---|---|---|---|---  \n_ga| Google| Registers a unique ID that is used to generate statistical data\non how the visitor uses the website.| 2 years| HTTP  \n_ga_#| Google| Used by Google Analytics to collect data on the number of times\na user has visited the website as well as dates for the first and most recent\nvisit.| 2 years| HTTP  \n_gat| Google| Used by Google Analytics to throttle request rate| 1 day| HTTP  \n_gid| Google| Registers a unique ID that is used to generate statistical data\non how the visitor uses the website.| 1 day| HTTP  \n_hjSession_#| Hotjar| Collects statistics on the visitor's visits to the\nwebsite, such as the number of visits, average time spent on the website and\nwhat pages have been read.| 1 day| HTTP  \n_hjSessionUser_#| Hotjar| Collects statistics on the visitor's visits to the\nwebsite, such as the number of visits, average time spent on the website and\nwhat pages have been read.| 1 year| HTTP  \n_hjTLDTest| Hotjar| Registers statistical data on users' behaviour on the\nwebsite. Used for internal analytics by the website operator.| Session| HTTP  \n_hp2_#| Heap Analytics| Collects data on the user\u2019s navigation and behavior on\nthe website. This is used to compile statistical reports and heatmaps for the\nwebsite owner.| 1 day| HTTP  \n_hp2_hld#.#| Heap Analytics| Collects data on the user\u2019s navigation and\nbehavior on the website. This is used to compile statistical reports and\nheatmaps for the website owner.| 1 day| HTTP  \n_hp2_id.#| Heap Analytics| Collects data on the user\u2019s navigation and behavior\non the website. This is used to compile statistical reports and heatmaps for\nthe website owner.| 1 year| HTTP  \n_hp2_ses_props.#| Heap Analytics| Collects data on the user\u2019s navigation and\nbehavior on the website. This is used to compile statistical reports and\nheatmaps for the website owner.| 1 day| HTTP  \ndisqus_unique| c.disquscdn.com| Collects statistics related to the user's\nvisits to the website, such as number of visits, average time spent on the\nwebsite and loaded pages.| Session| HTTP  \ncollect| Google| Used to send data to Google Analytics about the visitor's\ndevice and behavior. Tracks the visitor across devices and marketing\nchannels.| Session| Pixel  \nhjActiveViewportIds| Hotjar| This cookie contains an ID string on the current\nsession. This contains non-personal information on what subpages the visitor\nenters \u2013 this information is used to optimize the visitor's experience.|\nPersistent| HTML  \nhjViewportId| Hotjar| Saves the user's screen size in order to adjust the size\nof images on the website.| Session| HTML  \ntd| Google| Registers statistical data on users' behaviour on the website.\nUsed for internal analytics by the website operator.| Session| Pixel  \n  \nMarketing cookies are used to track visitors across websites. The intention is\nto display ads that are relevant and engaging for the individual user and\nthereby more valuable for publishers and third party advertisers.\n\nName| Provider| Purpose| Expiry| Type  \n---|---|---|---|---  \nbadges-message| c.disquscdn.com| Collects data on the visitor\u2019s use of the\ncomment system on the website, and what blogs/articles the visitor has read.\nThis can be used for marketing purposes.| Persistent| HTML  \napi/telemetry| Heap Analytics| Collects data on user behaviour and interaction\nin order to optimize the website and make advertisement on the website more\nrelevant.| Session| Pixel  \nh| Heap Analytics| Collects data on user behaviour and interaction in order to\noptimize the website and make advertisement on the website more relevant.|\nSession| Pixel  \n#-#| YouTube| Pending| Session| HTML  \niU5q-!O9@$| YouTube| Registers a unique ID to keep statistics of what videos\nfrom YouTube the user has seen.| Session| HTML  \nLAST_RESULT_ENTRY_KEY| YouTube| Used to track user\u2019s interaction with embedded\ncontent.| Session| HTTP  \nLogsDatabaseV2:V#||LogsRequestsStore| YouTube| Pending| Persistent| IDB  \nnextId| YouTube| Used to track user\u2019s interaction with embedded content.|\nSession| HTTP  \nremote_sid| YouTube| Necessary for the implementation and functionality of\nYouTube video-content on the website.| Session| HTTP  \nrequests| YouTube| Used to track user\u2019s interaction with embedded content.|\nSession| HTTP  \nServiceWorkerLogsDatabase#SWHealthLog| YouTube| Necessary for the\nimplementation and functionality of YouTube video-content on the website.|\nPersistent| IDB  \nTESTCOOKIESENABLED| YouTube| Used to track user\u2019s interaction with embedded\ncontent.| 1 day| HTTP  \nVISITOR_INFO1_LIVE| YouTube| Pending| 180 days| HTTP  \nYSC| YouTube| Pending| Session| HTTP  \nyt.innertube::nextId| YouTube| Registers a unique ID to keep statistics of\nwhat videos from YouTube the user has seen.| Persistent| HTML  \nytidb::LAST_RESULT_ENTRY_KEY| YouTube| Used to track user\u2019s interaction with\nembedded content.| Persistent| HTML  \nYtIdbMeta#databases| YouTube| Used to track user\u2019s interaction with embedded\ncontent.| Persistent| IDB  \nyt-remote-cast-available| YouTube| Stores the user's video player preferences\nusing embedded YouTube video| Session| HTML  \nyt-remote-cast-installed| YouTube| Stores the user's video player preferences\nusing embedded YouTube video| Session| HTML  \nyt-remote-connected-devices| YouTube| Stores the user's video player\npreferences using embedded YouTube video| Persistent| HTML  \nyt-remote-device-id| YouTube| Stores the user's video player preferences using\nembedded YouTube video| Persistent| HTML  \nyt-remote-fast-check-period| YouTube| Stores the user's video player\npreferences using embedded YouTube video| Session| HTML  \nyt-remote-session-app| YouTube| Stores the user's video player preferences\nusing embedded YouTube video| Session| HTML  \nyt-remote-session-name| YouTube| Stores the user's video player preferences\nusing embedded YouTube video| Session| HTML  \n  \nUnclassified cookies are cookies that we are in the process of classifying,\ntogether with the providers of individual cookies.\n\nWe do not use cookies of this type.  \n---  \n  \n[#IABV2_LABEL_PURPOSES#] [#IABV2_LABEL_FEATURES#] [#IABV2_LABEL_PARTNERS#]\n\n[#IABV2_BODY_PURPOSES#]\n\n[#IABV2_BODY_FEATURES#]\n\n[#IABV2_BODY_PARTNERS#]\n\nCookies are small text files that can be used by websites to make a user's\nexperience more efficient. Other than those strictly necessary for the\noperation of the site, we need your permission to store any type of cookies on\nyour device. Learn more about ACM, how you can contact us, and how we process\npersonal data in our Privacy Policy. Also please consult our Cookie Notice.\n\nYou can change or withdraw your consent from the Cookie Declaration on our\nwebsite at any time by visiting the Cookie Declaration page. If contacting us\nregarding your consent, please state your consent ID and date from that page.\n\nYour consent applies to the following domains: dl.acm.org\n\nCookie declaration last updated on 3/31/24 by Cookiebot\n\nskip to main content\n\n  * Advanced Search\n  * Browse\n  * About\n  *     * Sign in\n    * Register\n\nAdvanced Search\n\n10.1145/3617232.3624859acmconferencesArticle/Chapter ViewAbstractPublication\nPagesasplosConference Proceedingsconference-collections\n\nasplos\n\nresearch-article\n\nOpen Access\n\nShare on\n\n# Formal Mechanised Semantics of CHERI C: Capabilities, Undefined Behaviour,\nand Provenance\n\n  * Authors:\n  * Vadim Zaliva\n\nUniversity of Cambridge, Cambridge, United Kingdom\n\nUniversity of Cambridge, Cambridge, United Kingdom\n\nhttps://orcid.org/0000-0002-9145-3288\n\nSearch about this author\n\n,\n\n  * Kayvan Memarian\n\nUniversity of Cambridge, Cambridge, United Kingdom\n\nUniversity of Cambridge, Cambridge, United Kingdom\n\nhttps://orcid.org/0000-0003-3723-636X\n\nSearch about this author\n\n,\n\n  * Ricardo Almeida\n\nUniversity of Edinburgh, Edinburgh, Scotland Uk\n\nUniversity of Edinburgh, Edinburgh, Scotland Uk\n\nhttps://orcid.org/0009-0000-1667-1683\n\nSearch about this author\n\n,\n\n  * Jessica Clarke\n\nUniversity of Cambridge, Cambridge, United Kingdom\n\nUniversity of Cambridge, Cambridge, United Kingdom\n\nhttps://orcid.org/0000-0001-8157-5567\n\nSearch about this author\n\n,\n\n  * Brooks Davis\n\nSRI International, Menlo Park, California, United States of America\n\nSRI International, Menlo Park, California, United States of America\n\nhttps://orcid.org/0009-0006-6256-0419\n\nSearch about this author\n\n,\n\n  * Alexander Richardson\n\nUniversity of Cambridge, Cambridge, United Kingdom\n\nUniversity of Cambridge, Cambridge, United Kingdom\n\nhttps://orcid.org/0000-0002-6372-217X\n\nSearch about this author\n\n,\n\nAuthors Info & Claims\n\nASPLOS '24: Proceedings of the 29th ACM International Conference on\nArchitectural Support for Programming Languages and Operating Systems, Volume\n1April 2024Pages 181\u2013196https://doi.org/10.1145/3617232.3624859\n\nPublished:17 April 2024Publication History\n\n  * 0citation\n  * 0\n  * Downloads\n\nMetrics\n\nTotal Citations0\n\nTotal Downloads0\n\nLast 12 Months0\n\nLast 6 weeks0\n\n  * Get Citation Alerts\n  * Publisher Site\n\n  * eReader\n  * PDF\n\n## ASPLOS '24: Proceedings of the 29th ACM International Conference on\nArchitectural Support for Programming Languages and Operating Systems, Volume\n1\n\nFormal Mechanised Semantics of CHERI C: Capabilities, Undefined Behaviour, and\nProvenance\n\nPages 181\u2013196\n\nPreviousChapterNextChapter\n\n  *     * ABSTRACT\n    * References\n    * Recommendations\n    * Comments\n\n## ABSTRACT\n\nMemory safety issues are a persistent source of security vulnerabilities, with\nconventional architectures and the C codebase chronically prone to exploitable\nerrors. The CHERI research project has shown how one can provide radically\nimproved security for that existing codebase with minimal modification, using\nunforgeable hardware capabilities in place of machine-word pointers in CHERI\ndialects of C, implemented as adaptions of Clang/LLVM and GCC. CHERI was first\nprototyped as extensions of MIPS and RISC-V; it is currently being evaluated\nby Arm and others with the Arm Morello experimental architecture, processor,\nand platform, to explore its potential for mass-market adoption, and by\nMicrosoft in their CHERIoT design for embedded cores.\n\nThere is thus considerable practical experience with CHERI C implementation\nand use, but exactly what CHERI C's semantics is (or should be) remains an\nopen question. In this paper, we present the first attempt to rigorously and\ncomprehensively define CHERI C semantics, discuss key semantics design\nquestions relating to capabilities, provenance, and undefined behaviour, and\nclarify them with semantics in multiple complementary forms: in prose, as an\nexecutable semantics adapting the Cerberus C semantics, and mechanised in Coq.\n\nThis establishes a solid foundation for CHERI C, for those porting code to it,\nfor compiler implementers, and for future semantics and verification.\n\n## References\n\n  1. CHERI x86-64 Sail model. https://github.com/CTSRD-CHERI/sail-cheri-x86. Accessed 2023-04-17.Google Scholar\n  2. Periklis Akritidis, Manuel Costa, Miguel Castro, and Steven Hand. Baggy bounds checking: An efficient and backwards-compatible defense against out-of-bounds errors. In USENIX Security Symposium, volume 10, page 96, 2009.Google Scholar\n  3. Saar Amar, Tony Chen, David Chisnall, Felix Domke, Nathaniel Filardo, Kunyan Liu, Robert Norton-Wright, Yucong Tao, Robert N. M. Watson, and Hongyan Xia. CHERIoT: Rethinking security for low-cost embedded systems. Technical Report MSR-TR-2023-6, Microsoft, February 2023. URL: https://www.microsoft.com/en-us/research/publication/cheriot-rethinking-security-for-low-cost-embedded-systems/.Google Scholar\n  4. Arm. Arm Morello Program. https://developer.arm.com/architectures/cpu-architecture/a-profile/morello, 2022. Accessed 2021-06-29.Google Scholar\n  5. Arm Ltd. Arm^\u00ae architecture reference manual supplement Morello for A-profile architecture. https://developer.arm.com/documentation/ddi0606/latest, June 2021. DDI0606A.j. 1288pp. Accessed 2022-06-15.Google Scholar\n  6. Arm Ltd. Arm Morello program, landing page for Morello open source software. https://www.morello-project.org/, November 2022.Google Scholar\n  7. Alasdair Armstrong, Thomas Bauereiss, Brian Campbell, Alastair Reid, Kathryn E. Gray, Robert M. Norton, Prashanth Mundkur, Mark Wassell, Jon French, Christopher Pulte, Shaked Flur, Ian Stark, Neel Krishnaswami, and Peter Sewell. ISA semantics for ARMv8-A, RISC-V, and CHERI-MIPS. Proc. ACM Program. Lang., 3(POPL):71:1--71:31, 2019. Google ScholarDigital Library\n  8. Thomas Bauereiss, Brian Campbell, Thomas Sewell, Alasdair Armstrong, Lawrence Esswood, Ian Stark, Graeme Barnes, Robert N. M. Watson, and Peter Sewell. Verified security for the Morello capability-enhanced prototype arm architecture. In Ilya Sergey, editor, Programming Languages and Systems - 31st European Symposium on Programming, ESOP 2022, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2022, Munich, Germany, April 2--7, 2022, Proceedings, volume 13240 of Lecture Notes in Computer Science, pages 174--203. Springer, 2022. http://www.cl.cam.ac.uk/~pes20/morello-proofs-esop2022.pdf. Google ScholarDigital Library\n  9. Franz Brau\u00dfe, Fedor Shmarov, Rafael Menezes, Mikhail R. Gadelha, Konstantin Korovin, Giles Reger, and Lucas C. Cordeiro. ESBMC-CHERI: Towards verification of C programs for CHERI platforms with ESBMC. In Proceedings of the 31st ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2022, page 773--776, New York, NY, USA, 2022. Association for Computing Machinery. Google ScholarDigital Library\n  10. Miguel Castro, Manuel Costa, and Tim Harris. Securing software by enforcing data-flow integrity. In Proceedings of the 7th Symposium on Operating Systems Design and Implementation, OSDI '06, page 147--160, USA, 2006. USENIX Association.Google ScholarDigital Library\n  11. Jeremy Condit, Matthew Harren, Zachary Anderson, David Gay, and George C. Necula. Dependent types for low-level programming. In Proceedings of the 16th European Symposium on Programming, ESOP'07, page 520--535, Berlin, Heidelberg, 2007. Springer-Verlag.Google ScholarDigital Library\n  12. Brooks Davis, Robert N. M. Watson, Alexander Richardson, Peter G. Neumann, Simon W. Moore, John Baldwin, David Chisnall, Jessica Clarke, Nathaniel Wesley Filardo, Khilan Gudka, Alexandre Joannou, Ben Laurie, A. Theodore Markettos, J. Edward Maste, Alfredo Mazzinghi, Edward Tomasz Napierala, Robert M. Norton, Michael Roe, Peter Sewell, Stacey Son, and Jonathan Woodruff. CheriABI: Enforcing Valid Pointer Provenance and Minimizing Pointer Privilege in the POSIX C Run-time Environment. In Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS '19, pages 379--393. ACM, 2019. URL: https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/201904-asplos-cheriabi.pdf Google ScholarDigital Library\n  13. Peter J. Denning. Virtual memory. ACM Comput. Surv., 2(3):153--189, sep 1970. Google ScholarDigital Library\n  14. Joe Devietti, Colin Blundell, Milo M. K. Martin, and Steve Zdancewic. Hardbound: Architectural support for spatial safety of the C programming language. In Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS XIII, page 103--114, New York, NY, USA, 2008. Association for Computing Machinery. Google ScholarDigital Library\n  15. Dinakar Dhurjati, Sumant Kowshik, and Vikram Adve. Safecode: Enforcing alias analysis for weakly typed languages. In Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '06, page 144--157, New York, NY, USA, 2006. Association for Computing Machinery. Google ScholarDigital Library\n  16. B. Ding, Y. He, Y. Wu, A. Miller, and J. Criswell. Baggy bounds with accurate checking. In 2012 IEEE 23rd International Symposium on Software Reliability Engineering Workshops (ISSREW), pages 195--200, Los Alamitos, CA, USA, nov 2012. IEEE Computer Society. doi:10.1109/ISSREW.2012.24. Google ScholarDigital Library\n  17. Wesley Nathaniel Filardo, Brett F. Gutstein, Jonathan Woodruff, Sam Ainsworth, Lucian Paul-Trifu, Brooks Davis, Hongyan Xia, Edward Tomasz Napierala, Alexander Richardson, John Baldwin, David Chisnall, Jessica Clarke, Khilan Gudka, Alexandre Joannou, A. Theodore Markettos, Alfredo Mazzinghi, Robert M. Norton, Michael Roe, Peter Sewell, Stacey Son, Timothy M. Jones, Simon W. Moore, Peter G. Neumann, and Robert N. M. Watson. Cornucopia: Temporal Safety for CHERI Heaps. In 2020 IEEE Symposium on Security and Privacy (SP), pages 608--625, 2020. Google ScholarCross Ref\n  18. Jens Gustedt, Peter Sewell, Kayvan Memarian, Victor BF Gomes, and Martin Uecker. A Provenance-aware Memory Object Model for C, 2022. Working draft ISO Technical Specification TS6010.Google Scholar\n  19. Ben Hawkes. 0day in the wild. 2019. Project Zero team blog, Google. https://googleprojectzero.blogspot.com/p/0day.html. Accessed 2023-04-19.Google Scholar\n  20. Raphael Isemann, Cristiano Giuffrida, Herbert Bos, Erik van der Kouwe, and Klaus von Gleissenthall. Don't look UB: Exposing sanitizer-eliding compiler optimizations. Proc. ACM Program. Lang., 7(PLDI), jun 2023. Google ScholarDigital Library\n  21. ISO WG14. Programming languages - C, ISO/IEC 9899:2018 edition, July 2018.Google Scholar\n  22. Richard WM Jones and Paul HJ Kelly. Backwards-compatible bounds checking for arrays and pointers in C programs. In AADEBUG, volume 97, pages 13--26, 1997.Google Scholar\n  23. Chris Lattner and Vikram Adve. LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation. In Proceedings of the 2004 International Symposium on Code Generation and Optimization (CGO'04), Palo Alto, California, Mar 2004.Google ScholarDigital Library\n  24. Xavier Leroy, Andrew W Appel, Sandrine Blazy, and Gordon Stewart. The CompCert memory model, version 2. PhD thesis, Inria, 2012.Google Scholar\n  25. Petar Maksimovic, Sacha-\u00c9lie Ayoun, Jos\u00e9 Fragoso Santos, and Philippa Gardner. Gillian, part II: real-world verification for JavaScript and C. In Alexandra Silva and K. Rustan M. Leino, editors, Proceedings of the 33^rd Computer Aided Verification International Conference, CAV 2021, Virtual Event, July 20--23, 2021, Part II, volume 12760 of Lecture Notes in Computer Science, pages 827--850. Springer, 2021. Google ScholarDigital Library\n  26. Nicholas D. Matsakis and Felix S. Klock. The Rust language. In Proceedings of the 2014 ACM SIGAda Annual Conference on High Integrity Language Technology, HILT '14, page 103--104, New York, NY, USA, 2014. Association for Computing Machinery. Google ScholarDigital Library\n  27. Kayvan Memarian. The Cerberus C semantics. Technical Report UCAM-CL-TR-981, University of Cambridge, Computer Laboratory, May 2023. URL: https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-981.pdf Google Scholar\n  28. Kayvan Memarian, Victor B. F. Gomes, Brooks Davis, Stephen Kell, Alexander Richardson, Robert N. M. Watson, and Peter Sewell. Exploring C Semantics and Pointer Provenance. Proc. ACM Program. Lang., 3(POPL), January 2019. Google ScholarDigital Library\n  29. Matt Miller. Trends, challenge, and shifts in software vulnerability mitigation. https://github.com/Microsoft/MSRC-Security-Research/tree/master/presentations/2019_02_BlueHatIL, February 2019. Microsoft Security Response Center.Google Scholar\n  30. Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve Zdancewic. Softbound: Highly compatible and complete spatial memory safety for c. In Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '09, page 245--258, New York, NY, USA, 2009. Association for Computing Machinery. Google ScholarDigital Library\n  31. George C. Necula, Scott McPeak, and Westley Weimer. CCured: type-safe retrofitting of legacy code. In John Launchbury and John C. Mitchell, editors, Conference Record of POPL 2002: The 29th SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Portland, OR, USA, January 16--18, 2002, pages 128--139. ACM, 2002. Google ScholarDigital Library\n  32. Nicholas Nethercote and Julian Seward. Valgrind: a framework for heavyweight dynamic binary instrumentation. ACM Sigplan notices, 42(6):89--100, 2007.Google ScholarDigital Library\n  33. Tobias Nipkow, Lawrence C. Paulson, and Markus Wenzel. Isabelle/HOL: A proof assistant for higher-order logic. In TPHOLs, pages 1--18. Springer, 2002.Google Scholar\n  34. Seung Hoon Park, Rekha Pai, and Tom Melham. A formal CHERI-C semantics for verification, 2023. Accepted to appear in TACAS 2023. https://arxiv.org/abs/2211.07511. arXiv:2211.07511.Google ScholarDigital Library\n  35. Thomas Reps. Undecidability of context-sensitive data-dependence analysis. ACM Trans. Program. Lang. Syst., 22(1):162--186, jan 2000. Google ScholarDigital Library\n  36. Alexander Richardson. Complete spatial safety for C and C++ using CHERI capabilities. Technical Report UCAM-CL-TR-949, University of Cambridge, Computer Laboratory, June 2020. URL: https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-949.pdf Google Scholar\n  37. Andrew Ruef, Leonidas Lampropoulos, Ian Sweet, David Tarditi, and Michael Hicks. Achieving safety incrementally with Checked C. In Flemming Nielson and David Sands, editors, Principles of Security and Trust - 8th International Conference, POST 2019, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019, Prague, Czech Republic, April 6--11, 2019, Proceedings, volume 11426 of Lecture Notes in Computer Science, pages 76--98. Springer, 2019. Google ScholarCross Ref\n  38. Olatunji Ruwase and Monica S Lam. A practical dynamic buffer over-flow detector. In NDSS, volume 2004, pages 159--169, 2004.Google Scholar\n  39. Konstantin Serebryany and Timur Iskhodzhanov. AddressSanitizer: A fast address sanity checker. In Presented as part of the 2012 USENIX Annual Technical Conference (ATC 12), pages 309--318. USENIX, 2012.Google Scholar\n  40. Julian Seward and Nicholas Nethercote. Using Valgrind to detect undefined value errors with Bit-Precision. In 2005 USENIX Annual Technical Conference (USENIX ATC 05), Anaheim, CA, April 2005. USENIX Association. URL: https://www.usenix.org/conference/2005-usenix-annual-technical-conference/using-valgrind-detect-undefined-value-errors-bit.Google Scholar\n  41. UKRI. Digital security by design. https://www.dsbd.tech/ and https://www.ukri.org/our-work/our-main-funds/industrial-strategy-challenge-fund/artificial-intelligence-and-data-economy/digital-security-by-design-challenge/, 2022. Accessed 2021-06-29.Google Scholar\n  42. Robert N. M. Watson, Ben Laurie, and Alexander Richardson. Assessing the Viability of an Open- Source CHERI Desktop Software Ecosystem. http://www.capabilitieslimited.co.uk/pdfs/20210917-capltd-cheri-desktop-report-version1-FINAL.pdf, September 2021.Google Scholar\n  43. Robert N. M. Watson, Peter G. Neumann, Jonathan Woodruff, Michael Roe, Hesham Almatary, Jonathan Anderson, John Baldwin, Graeme Barnes, David Chisnall, Jessica Clarke, Brooks Davis, Lee Eisen, Nathaniel Wesley Filardo, Richard Grisenthwaite, Alexandre Joannou, Ben Laurie, A. Theodore Markettos, Simon W. Moore, Steven J. Murdoch, Kyndylan Nienhuis, Robert Norton, Alexander Richardson, Peter Rugg, Peter Sewell, Stacey Son, and Hongyan Xia. Capability Hardware Enhanced RISC Instructions: CHERI Instruction-Set Architecture (Version 9 - DRAFT). Accessed 2023-04-12. URL: https://github.com/CTSRD-CHERI/cheri-specification.Google Scholar\n  44. Robert N. M. Watson, Peter G. Neumann, Jonathan Woodruf, Michael Roe, Hesham Almatary, Jonathan Anderson, John Baldwin, Graeme Barnes, David Chisnall, Jessica Clarke, Brooks Davis, Lee Eisen, Nathaniel Wesley Filardo, Richard Grisenthwaite, Alexandre Joannou, Ben Laurie, A. Theodore Markettos, Simon W. Moore, Steven J. Murdoch, Kyndylan Nienhuis, Robert Norton, Alexander Richardson, Peter Rugg, Peter Sewell, Stacey Son, and Hongyan Xia. Capability Hardware Enhanced RISC Instructions: CHERI Instruction-Set Architecture (Version 8). Technical Report UCAM-CL-TR-951, University of Cambridge, Computer Laboratory, October 2020. URL: https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-951.pdf Google ScholarCross Ref\n  45. Robert N. M. Watson, Alexander Richardson, Brooks Davis, John Baldwin, David Chisnall, Jessica Clarke, Nathaniel Filardo, Simon W. Moore, Edward Napierala, Peter Sewell, and Peter G. Neumann. CHERI C/C++ Programming Guide. Technical Report UCAM-CL-TR-947, University of Cambridge, Computer Laboratory, June 2020. URL: https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-947.pdf Google Scholar\n  46. WG14. Defect report 260, September 2004. http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_260.htm.Google Scholar\n  47. Jonathan Woodruff, Alexandre Joannou, Hongyan Xia, Anthony Fox, Robert Norton, Thomas Baureiss, David Chisnall, Brooks Davis, Khilan Gudka, Nathaniel Wesley Filardo, A. Theodore Markettos, Michael Roe, Peter G. Neumann, Robert N. M. Watson, and Simon W. Moore. CHERI Concentrate: Practical Compressed Capabilities. IEEE Transactions on Computers, 68(10):1455--1469, October 2019. URL: https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/2019tc-cheri-concentrate.pdf Google ScholarCross Ref\n  48. Jonathan Woodruff, Robert N. M. Watson, David Chisnall, Simon W. Moore, Jonathan Anderson, Brooks Davis, Ben Laurie, Peter G. Neumann, Robert Norton, and Michael Roe. The CHERI capability model: Revisiting RISC in an age of risk. In Proc. ISCA, 2014.Google ScholarCross Ref\n  49. Vadim Zaliva, Kayvan Memarian, Ricardo Almeida, Jessica Clarke, Brooks Davis, Alex Richardson, David Chisnall, Brian Campbell, Ian Stark, Robert N. M. Watson, and Peter Sewell. CHERI C semantics as an extension of the ISO C17 standard. Technical Report UCAM-CL-TR-988, University of Cambridge, Computer Laboratory, 15 JJ Thomson Avenue, Cambridge CB3 0FD, United Kingdom, phone +44 1223 763500. URL: https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-988.html.Google Scholar\n\n## Cited By\n\nView all\n\n## Recommendations\n\n  * ##### Towards a formal semantics for the AADL behavior annex\n\nDATE '09: Proceedings of the Conference on Design, Automation and Test in\nEurope\n\nAADL is an Architecture Description Language which describes embedded real-\ntime systems. Behavior annex is an extension of the dispatch mechanism of AADL\nexecution model. This paper proposes a formal semantics for the AADL behavior\nannex using Timed ...\n\nRead More\n\n  * ##### A Formal CHERI-C Semantics for Verification\n\nTools and Algorithms for the Construction and Analysis of Systems\n\nAbstract\n\nCHERI-C extends the C programming language by adding hardware capabilities,\nensuring a certain degree of memory safety while remaining efficient.\nCapabilities can also be employed for higher-level security measures, such as\nsoftware ...\n\nRead More\n\n  * ##### Equivalence of formal semantics definition methods\n\nAbstract\n\nThere are numerous methods of formally defining the semantics of computer\nlanguages. Each method has been designed to fulfil a different purpose. For\nexample, some have been designed to make reasoning about languages as easy as\npossible; others ...\n\nRead More\n\n## Comments\n\n### Login options\n\nCheck if you have access through your login credentials or your institution to\nget full access on this article.\n\nSign in\n\n### Full Access\n\nGet this Publication\n\n  * Information\n  * Contributors\n\n  * ### Published in\n\nASPLOS '24: Proceedings of the 29th ACM International Conference on\nArchitectural Support for Programming Languages and Operating Systems, Volume\n1\n\nApril 2024\n\n494 pages\n\nISBN:9798400703720\n\nDOI:10.1145/3617232\n\n    * Chair:\n    * Rajiv Gupta,\n    * Co-chair:\n\nThis work is licensed under a Creative Commons Attribution International 4.0\nLicense.\n\n### Sponsors\n\n### In-Cooperation\n\n### Publisher\n\nAssociation for Computing Machinery\n\nNew York, NY, United States\n\n### Publication History\n\n    * Published: 17 April 2024\n\n### Check for updates\n\n### Qualifiers\n\n    * research-article\n\n### Conference\n\n## Acceptance Rates\n\nOverall Acceptance Rate535of2,713submissions,20%\n\n### Upcoming Conference\n\nASPLOS '24\n\n    * Sponsor:\n    * sigarch\n\n29th ACM International Conference on Architectural Support for Programming\nLanguages and Operating Systems\n\nApril 27 - May 1, 2024\n\nLa Jolla , CA , USA\n\n### Funding Sources\n\n  * ### Other Metrics\n\nView Article Metrics\n\n  * Bibliometrics\n  * Citations0\n\n  * ### Article Metrics\n\n    * 0\n\nTotal Citations\n\nView Citations\n\n    * 0\n\nTotal Downloads\n\n    * Downloads (Last 12 months)0\n    * Downloads (Last 6 weeks)0\n\n### Other Metrics\n\nView Author Metrics\n\n  * ### Cited By\n\nThis publication has not been cited yet\n\n### PDF Format\n\nView or Download as a PDF file.\n\nPDF\n\n### eReader\n\nView online with eReader.\n\neReader\n\n### Digital Edition\n\nView this article in digital edition.\n\nView Digital Edition\n\n  1. CHERI x86-64 Sail model. https://github.com/CTSRD-CHERI/sail-cheri-x86. Accessed 2023-04-17.Google Scholar\n  2. Periklis Akritidis, Manuel Costa, Miguel Castro, and Steven Hand. Baggy bounds checking: An efficient and backwards-compatible defense against out-of-bounds errors. In USENIX Security Symposium, volume 10, page 96, 2009.Google Scholar\n  3. Saar Amar, Tony Chen, David Chisnall, Felix Domke, Nathaniel Filardo, Kunyan Liu, Robert Norton-Wright, Yucong Tao, Robert N. M. Watson, and Hongyan Xia. CHERIoT: Rethinking security for low-cost embedded systems. Technical Report MSR-TR-2023-6, Microsoft, February 2023. URL: https://www.microsoft.com/en-us/research/publication/cheriot-rethinking-security-for-low-cost-embedded-systems/.Google Scholar\n  4. Arm. Arm Morello Program. https://developer.arm.com/architectures/cpu-architecture/a-profile/morello, 2022. Accessed 2021-06-29.Google Scholar\n  5. Arm Ltd. Arm^\u00ae architecture reference manual supplement Morello for A-profile architecture. https://developer.arm.com/documentation/ddi0606/latest, June 2021. DDI0606A.j. 1288pp. Accessed 2022-06-15.Google Scholar\n  6. Arm Ltd. Arm Morello program, landing page for Morello open source software. https://www.morello-project.org/, November 2022.Google Scholar\n  7. Alasdair Armstrong, Thomas Bauereiss, Brian Campbell, Alastair Reid, Kathryn E. Gray, Robert M. Norton, Prashanth Mundkur, Mark Wassell, Jon French, Christopher Pulte, Shaked Flur, Ian Stark, Neel Krishnaswami, and Peter Sewell. ISA semantics for ARMv8-A, RISC-V, and CHERI-MIPS. Proc. ACM Program. Lang., 3(POPL):71:1--71:31, 2019. Google ScholarDigital Library\n  8. Thomas Bauereiss, Brian Campbell, Thomas Sewell, Alasdair Armstrong, Lawrence Esswood, Ian Stark, Graeme Barnes, Robert N. M. Watson, and Peter Sewell. Verified security for the Morello capability-enhanced prototype arm architecture. In Ilya Sergey, editor, Programming Languages and Systems - 31st European Symposium on Programming, ESOP 2022, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2022, Munich, Germany, April 2--7, 2022, Proceedings, volume 13240 of Lecture Notes in Computer Science, pages 174--203. Springer, 2022. http://www.cl.cam.ac.uk/~pes20/morello-proofs-esop2022.pdf. Google ScholarDigital Library\n  9. Franz Brau\u00dfe, Fedor Shmarov, Rafael Menezes, Mikhail R. Gadelha, Konstantin Korovin, Giles Reger, and Lucas C. Cordeiro. ESBMC-CHERI: Towards verification of C programs for CHERI platforms with ESBMC. In Proceedings of the 31st ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2022, page 773--776, New York, NY, USA, 2022. Association for Computing Machinery. Google ScholarDigital Library\n  10. Miguel Castro, Manuel Costa, and Tim Harris. Securing software by enforcing data-flow integrity. In Proceedings of the 7th Symposium on Operating Systems Design and Implementation, OSDI '06, page 147--160, USA, 2006. USENIX Association.Google ScholarDigital Library\n  11. Jeremy Condit, Matthew Harren, Zachary Anderson, David Gay, and George C. Necula. Dependent types for low-level programming. In Proceedings of the 16th European Symposium on Programming, ESOP'07, page 520--535, Berlin, Heidelberg, 2007. Springer-Verlag.Google ScholarDigital Library\n  12. Brooks Davis, Robert N. M. Watson, Alexander Richardson, Peter G. Neumann, Simon W. Moore, John Baldwin, David Chisnall, Jessica Clarke, Nathaniel Wesley Filardo, Khilan Gudka, Alexandre Joannou, Ben Laurie, A. Theodore Markettos, J. Edward Maste, Alfredo Mazzinghi, Edward Tomasz Napierala, Robert M. Norton, Michael Roe, Peter Sewell, Stacey Son, and Jonathan Woodruff. CheriABI: Enforcing Valid Pointer Provenance and Minimizing Pointer Privilege in the POSIX C Run-time Environment. In Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS '19, pages 379--393. ACM, 2019. URL: https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/201904-asplos-cheriabi.pdf Google ScholarDigital Library\n  13. Peter J. Denning. Virtual memory. ACM Comput. Surv., 2(3):153--189, sep 1970. Google ScholarDigital Library\n  14. Joe Devietti, Colin Blundell, Milo M. K. Martin, and Steve Zdancewic. Hardbound: Architectural support for spatial safety of the C programming language. In Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS XIII, page 103--114, New York, NY, USA, 2008. Association for Computing Machinery. Google ScholarDigital Library\n  15. Dinakar Dhurjati, Sumant Kowshik, and Vikram Adve. Safecode: Enforcing alias analysis for weakly typed languages. In Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '06, page 144--157, New York, NY, USA, 2006. Association for Computing Machinery. Google ScholarDigital Library\n  16. B. Ding, Y. He, Y. Wu, A. Miller, and J. Criswell. Baggy bounds with accurate checking. In 2012 IEEE 23rd International Symposium on Software Reliability Engineering Workshops (ISSREW), pages 195--200, Los Alamitos, CA, USA, nov 2012. IEEE Computer Society. doi:10.1109/ISSREW.2012.24. Google ScholarDigital Library\n  17. Wesley Nathaniel Filardo, Brett F. Gutstein, Jonathan Woodruff, Sam Ainsworth, Lucian Paul-Trifu, Brooks Davis, Hongyan Xia, Edward Tomasz Napierala, Alexander Richardson, John Baldwin, David Chisnall, Jessica Clarke, Khilan Gudka, Alexandre Joannou, A. Theodore Markettos, Alfredo Mazzinghi, Robert M. Norton, Michael Roe, Peter Sewell, Stacey Son, Timothy M. Jones, Simon W. Moore, Peter G. Neumann, and Robert N. M. Watson. Cornucopia: Temporal Safety for CHERI Heaps. In 2020 IEEE Symposium on Security and Privacy (SP), pages 608--625, 2020. Google ScholarCross Ref\n  18. Jens Gustedt, Peter Sewell, Kayvan Memarian, Victor BF Gomes, and Martin Uecker. A Provenance-aware Memory Object Model for C, 2022. Working draft ISO Technical Specification TS6010.Google Scholar\n  19. Ben Hawkes. 0day in the wild. 2019. Project Zero team blog, Google. https://googleprojectzero.blogspot.com/p/0day.html. Accessed 2023-04-19.Google Scholar\n  20. Raphael Isemann, Cristiano Giuffrida, Herbert Bos, Erik van der Kouwe, and Klaus von Gleissenthall. Don't look UB: Exposing sanitizer-eliding compiler optimizations. Proc. ACM Program. Lang., 7(PLDI), jun 2023. Google ScholarDigital Library\n  21. ISO WG14. Programming languages - C, ISO/IEC 9899:2018 edition, July 2018.Google Scholar\n  22. Richard WM Jones and Paul HJ Kelly. Backwards-compatible bounds checking for arrays and pointers in C programs. In AADEBUG, volume 97, pages 13--26, 1997.Google Scholar\n  23. Chris Lattner and Vikram Adve. LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation. In Proceedings of the 2004 International Symposium on Code Generation and Optimization (CGO'04), Palo Alto, California, Mar 2004.Google ScholarDigital Library\n  24. Xavier Leroy, Andrew W Appel, Sandrine Blazy, and Gordon Stewart. The CompCert memory model, version 2. PhD thesis, Inria, 2012.Google Scholar\n  25. Petar Maksimovic, Sacha-\u00c9lie Ayoun, Jos\u00e9 Fragoso Santos, and Philippa Gardner. Gillian, part II: real-world verification for JavaScript and C. In Alexandra Silva and K. Rustan M. Leino, editors, Proceedings of the 33^rd Computer Aided Verification International Conference, CAV 2021, Virtual Event, July 20--23, 2021, Part II, volume 12760 of Lecture Notes in Computer Science, pages 827--850. Springer, 2021. Google ScholarDigital Library\n  26. Nicholas D. Matsakis and Felix S. Klock. The Rust language. In Proceedings of the 2014 ACM SIGAda Annual Conference on High Integrity Language Technology, HILT '14, page 103--104, New York, NY, USA, 2014. Association for Computing Machinery. Google ScholarDigital Library\n  27. Kayvan Memarian. The Cerberus C semantics. Technical Report UCAM-CL-TR-981, University of Cambridge, Computer Laboratory, May 2023. URL: https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-981.pdf Google Scholar\n  28. Kayvan Memarian, Victor B. F. Gomes, Brooks Davis, Stephen Kell, Alexander Richardson, Robert N. M. Watson, and Peter Sewell. Exploring C Semantics and Pointer Provenance. Proc. ACM Program. Lang., 3(POPL), January 2019. Google ScholarDigital Library\n  29. Matt Miller. Trends, challenge, and shifts in software vulnerability mitigation. https://github.com/Microsoft/MSRC-Security-Research/tree/master/presentations/2019_02_BlueHatIL, February 2019. Microsoft Security Response Center.Google Scholar\n  30. Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve Zdancewic. Softbound: Highly compatible and complete spatial memory safety for c. In Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '09, page 245--258, New York, NY, USA, 2009. Association for Computing Machinery. Google ScholarDigital Library\n  31. George C. Necula, Scott McPeak, and Westley Weimer. CCured: type-safe retrofitting of legacy code. In John Launchbury and John C. Mitchell, editors, Conference Record of POPL 2002: The 29th SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Portland, OR, USA, January 16--18, 2002, pages 128--139. ACM, 2002. Google ScholarDigital Library\n  32. Nicholas Nethercote and Julian Seward. Valgrind: a framework for heavyweight dynamic binary instrumentation. ACM Sigplan notices, 42(6):89--100, 2007.Google ScholarDigital Library\n  33. Tobias Nipkow, Lawrence C. Paulson, and Markus Wenzel. Isabelle/HOL: A proof assistant for higher-order logic. In TPHOLs, pages 1--18. Springer, 2002.Google Scholar\n  34. Seung Hoon Park, Rekha Pai, and Tom Melham. A formal CHERI-C semantics for verification, 2023. Accepted to appear in TACAS 2023. https://arxiv.org/abs/2211.07511. arXiv:2211.07511.Google ScholarDigital Library\n  35. Thomas Reps. Undecidability of context-sensitive data-dependence analysis. ACM Trans. Program. Lang. Syst., 22(1):162--186, jan 2000. Google ScholarDigital Library\n  36. Alexander Richardson. Complete spatial safety for C and C++ using CHERI capabilities. Technical Report UCAM-CL-TR-949, University of Cambridge, Computer Laboratory, June 2020. URL: https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-949.pdf Google Scholar\n  37. Andrew Ruef, Leonidas Lampropoulos, Ian Sweet, David Tarditi, and Michael Hicks. Achieving safety incrementally with Checked C. In Flemming Nielson and David Sands, editors, Principles of Security and Trust - 8th International Conference, POST 2019, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019, Prague, Czech Republic, April 6--11, 2019, Proceedings, volume 11426 of Lecture Notes in Computer Science, pages 76--98. Springer, 2019. Google ScholarCross Ref\n  38. Olatunji Ruwase and Monica S Lam. A practical dynamic buffer over-flow detector. In NDSS, volume 2004, pages 159--169, 2004.Google Scholar\n  39. Konstantin Serebryany and Timur Iskhodzhanov. AddressSanitizer: A fast address sanity checker. In Presented as part of the 2012 USENIX Annual Technical Conference (ATC 12), pages 309--318. USENIX, 2012.Google Scholar\n  40. Julian Seward and Nicholas Nethercote. Using Valgrind to detect undefined value errors with Bit-Precision. In 2005 USENIX Annual Technical Conference (USENIX ATC 05), Anaheim, CA, April 2005. USENIX Association. URL: https://www.usenix.org/conference/2005-usenix-annual-technical-conference/using-valgrind-detect-undefined-value-errors-bit.Google Scholar\n  41. UKRI. Digital security by design. https://www.dsbd.tech/ and https://www.ukri.org/our-work/our-main-funds/industrial-strategy-challenge-fund/artificial-intelligence-and-data-economy/digital-security-by-design-challenge/, 2022. Accessed 2021-06-29.Google Scholar\n  42. Robert N. M. Watson, Ben Laurie, and Alexander Richardson. Assessing the Viability of an Open- Source CHERI Desktop Software Ecosystem. http://www.capabilitieslimited.co.uk/pdfs/20210917-capltd-cheri-desktop-report-version1-FINAL.pdf, September 2021.Google Scholar\n  43. Robert N. M. Watson, Peter G. Neumann, Jonathan Woodruff, Michael Roe, Hesham Almatary, Jonathan Anderson, John Baldwin, Graeme Barnes, David Chisnall, Jessica Clarke, Brooks Davis, Lee Eisen, Nathaniel Wesley Filardo, Richard Grisenthwaite, Alexandre Joannou, Ben Laurie, A. Theodore Markettos, Simon W. Moore, Steven J. Murdoch, Kyndylan Nienhuis, Robert Norton, Alexander Richardson, Peter Rugg, Peter Sewell, Stacey Son, and Hongyan Xia. Capability Hardware Enhanced RISC Instructions: CHERI Instruction-Set Architecture (Version 9 - DRAFT). Accessed 2023-04-12. URL: https://github.com/CTSRD-CHERI/cheri-specification.Google Scholar\n  44. Robert N. M. Watson, Peter G. Neumann, Jonathan Woodruf, Michael Roe, Hesham Almatary, Jonathan Anderson, John Baldwin, Graeme Barnes, David Chisnall, Jessica Clarke, Brooks Davis, Lee Eisen, Nathaniel Wesley Filardo, Richard Grisenthwaite, Alexandre Joannou, Ben Laurie, A. Theodore Markettos, Simon W. Moore, Steven J. Murdoch, Kyndylan Nienhuis, Robert Norton, Alexander Richardson, Peter Rugg, Peter Sewell, Stacey Son, and Hongyan Xia. Capability Hardware Enhanced RISC Instructions: CHERI Instruction-Set Architecture (Version 8). Technical Report UCAM-CL-TR-951, University of Cambridge, Computer Laboratory, October 2020. URL: https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-951.pdf Google ScholarCross Ref\n  45. Robert N. M. Watson, Alexander Richardson, Brooks Davis, John Baldwin, David Chisnall, Jessica Clarke, Nathaniel Filardo, Simon W. Moore, Edward Napierala, Peter Sewell, and Peter G. Neumann. CHERI C/C++ Programming Guide. Technical Report UCAM-CL-TR-947, University of Cambridge, Computer Laboratory, June 2020. URL: https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-947.pdf Google Scholar\n  46. WG14. Defect report 260, September 2004. http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_260.htm.Google Scholar\n  47. Jonathan Woodruff, Alexandre Joannou, Hongyan Xia, Anthony Fox, Robert Norton, Thomas Baureiss, David Chisnall, Brooks Davis, Khilan Gudka, Nathaniel Wesley Filardo, A. Theodore Markettos, Michael Roe, Peter G. Neumann, Robert N. M. Watson, and Simon W. Moore. CHERI Concentrate: Practical Compressed Capabilities. IEEE Transactions on Computers, 68(10):1455--1469, October 2019. URL: https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/2019tc-cheri-concentrate.pdf Google ScholarCross Ref\n  48. Jonathan Woodruff, Robert N. M. Watson, David Chisnall, Simon W. Moore, Jonathan Anderson, Brooks Davis, Ben Laurie, Peter G. Neumann, Robert Norton, and Michael Roe. The CHERI capability model: Revisiting RISC in an age of risk. In Proc. ISCA, 2014.Google ScholarCross Ref\n  49. Vadim Zaliva, Kayvan Memarian, Ricardo Almeida, Jessica Clarke, Brooks Davis, Alex Richardson, David Chisnall, Brian Campbell, Ian Stark, Robert N. M. Watson, and Peter Sewell. CHERI C semantics as an extension of the ISO C17 standard. Technical Report UCAM-CL-TR-988, University of Cambridge, Computer Laboratory, 15 JJ Thomson Avenue, Cambridge CB3 0FD, United Kingdom, phone +44 1223 763500. URL: https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-988.html.Google Scholar\n\n  * Figures\n  * Other\n\n### Share this Publication link\n\n### Share on Social Media\n\nShare on\n\nClose Figure Viewer\n\nBrowse AllReturn\n\n### Caption\n\nView Table of Contents\n\n## New Citation Alert added!\n\nThis alert has been successfully added and will be sent to:\n\nYou will be notified whenever a record that you have chosen has been cited.\n\nTo manage your alert preferences, click on the button below.\n\nManage my Alerts\n\n## New Citation Alert!\n\nPlease log in to your account\n\n## Export Citations\n\n## Footer\n\n### Categories\n\n  * Journals\n  * Magazines\n  * Books\n  * Proceedings\n  * SIGs\n  * Conferences\n  * Collections\n  * People\n\n### About\n\n  * About ACM Digital Library\n  * ACM Digital Library Board\n  * Subscription Information\n  * Author Guidelines\n  * Using ACM Digital Library\n  * All Holdings within the ACM Digital Library\n  * ACM Computing Classification System\n  * Digital Library Accessibility\n\n### Join\n\n  * Join ACM\n  * Join SIGs\n  * Subscribe to Publications\n  * Institutions and Libraries\n\n### Connect\n\n  * Contact\n  * Facebook\n  * X\n  * Linkedin\n  * Feedback\n  * Bug Report\n\nThe ACM Digital Library is published by the Association for Computing\nMachinery. Copyright \u00a9 2024 ACM, Inc.\n\n  * Terms of Usage\n  * Privacy Policy\n  * Code of Ethics\n\nYour Search Results Download Request\n\nWe are preparing your search results for download ...\n\nWe will inform you here when the file is ready.\n\nDownload now!\n\nYour Search Results Download Request\n\nYour file of search results citations is now ready.\n\nDownload now!\n\nYour Search Results Download Request\n\nYour search export query has expired. Please try again.\n\n", "frontpage": true}
