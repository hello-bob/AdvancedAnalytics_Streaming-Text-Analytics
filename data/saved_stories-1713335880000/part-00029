{"aid": "40055975", "title": "Show HN: Tau \u2013 OSS Cloud Platform where `coding locally == production at scale`", "url": "https://github.com/taubyte/tau", "domain": "github.com/taubyte", "votes": 1, "user": "dsamy", "posted_at": "2024-04-16 19:08:07", "comments": 0, "source_title": "GitHub - taubyte/tau: \ud83d\udd25\ud83d\udd25\ud83d\udd25 Open-source Cloud Computing Platform On Autopilot.", "source_text": "GitHub - taubyte/tau: \ud83d\udd25\ud83d\udd25\ud83d\udd25 Open-source Cloud Computing Platform On Autopilot.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ntaubyte / tau Public\n\n  * Notifications\n  * Fork 17\n  * Star 191\n\n\ud83d\udd25\ud83d\udd25\ud83d\udd25 Open-source Cloud Computing Platform On Autopilot.\n\ntau.how\n\n### License\n\nBSD-3-Clause license\n\n191 stars 17 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# taubyte/tau\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n7 Branches\n\n17 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nsamyfodilupdated READMEff77ffc \u00b7\n\n## History\n\n86 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| upgrade go to 1.21 (#135)  \n  \n### cli\n\n|\n\n### cli\n\n| upgrade go to 1.21 (#135)  \n  \n### clients\n\n|\n\n### clients\n\n| upgrade go to 1.21 (#135)  \n  \n### config\n\n|\n\n### config\n\n| A few issues after e2e testing some edge cases #132 (#133)  \n  \n### images\n\n|\n\n### images\n\n| updated readme (#139)  \n  \n### libdream\n\n|\n\n### libdream\n\n| [libdream] pass universe to fixtures + better node meshing + fixed au...  \n  \n### pkgs\n\n|\n\n### pkgs\n\n| A few issues after e2e testing some edge cases #132 (#133)  \n  \n### protocols\n\n|\n\n### protocols\n\n| [libdream] pass universe to fixtures + better node meshing + fixed au...  \n  \n### utils\n\n|\n\n### utils\n\n| 84 dreamland library is complicated (#85)  \n  \n### vm\n\n|\n\n### vm\n\n| A few issues after e2e testing some edge cases #132 (#133)  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| 46 branches are convoluted (#49)  \n  \n### .goreleaser.yml\n\n|\n\n### .goreleaser.yml\n\n| added go releaser (#48)  \n  \n### CODE_OF_CONDUCT.md\n\n|\n\n### CODE_OF_CONDUCT.md\n\n| Create CODE_OF_CONDUCT.md (#111)  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| first pass  \n  \n### README.md\n\n|\n\n### README.md\n\n| updated README  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| upgrade go to 1.21 - pass 2  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| upgrade go to 1.21 - pass 2  \n  \n### main.go\n\n|\n\n### main.go\n\n| odo is now tau  \n  \n## Repository files navigation\n\n## tau - Cloud Computing Platform On Autopilot\n\nTau is a framework for building low maintenance & highly scalable cloud\ncomputing platforms that software developers will love!\n\n## Background\n\nThe cost and time required to build software, take it from the development\nenvironment to production, and then scale it effectively to meet end-user\ndemand are extremely high.\n\nDeveloper-friendly platforms, like the major cloud computing providers, are\nexpensive, lock users in, and overlook local development and E2E testing.\n\nThis is really a two-sided problem. Do you save on infrastructure cost, or do\nyou lower development time?\n\nIf you invest in your own platform, it's a rocky road that impedes the speed\nof development and generally ends up costing more. We all know the Kubernetes\nfairy tale does not end well!\n\nIf you invest in development speed, you're limited by your provider's features\nand cost.\n\nTo us, solving this problem means:\n\n  * Giving you, or your very small team, the ability to build and maintain a cloud computing platform that will go head-to-head with the ones backed by thousands of engineers. This is what we mean by \"Cloud Computing Platform On Autopilot.\"\n  * Setting software developers free from infrastructure and operational constraints. We refer to this as \"Local Coding Equals Global Production.\"\n\ntau solves for building and maintaining a cloud computing platform, and also\nprovides the foundations for an amazing developer experience.\n\n## Easy to install\n\ntau is a single binary with no external dependencies except standard system\nlibraries. On top of that, it requires minimal configuration. These are the\nmain steps:\n\n  1. Install Tau\n    \n        curl https://get.tau.link/tau | sh\n\n  2. Configure\n    \n        tau config generate -n yourdomain.com -s compute --protos all --ip your_public_ip\n\n  3. Launch\n    \n        tau start -s compute\n\nFor a complete step-by-step guide, refer to Deploy tau.\n\nBuilding tau youself is straightforward if you have Go installed.\n\n## The Autopilot\n\nOne of the reasons tau requires minimal configuration is because it has built-\nin auto-discovery. Just like a self-driving car gathering information through\nsensors, tau will gather information and try to find the best ways to be\nreachable, available, etc.\n\nThat said, some configuration like bootstrap peers is necessary. Unless you're\nrunning a single-node cloud, each node will need to know at least one other\npeer.\n\nA Cloud built with tau is very dynamic; at a low level, nodes communicate\nassets, routes, and services, and they also exchange information about other\npeers. Enriched by protocols (distributed services) like seer and gateway, the\ncloud can load-balance incoming requests to ensure optimal performance and\nreliability.\n\nThis behavior is built into cloud resources as well. For example, a protocol\nwe call hoarder ensures object storages and databases are replicated; all you\nneed to do is enable it on a few nodes.\n\n## Local Coding Equals Global Production\n\nIn your traditional setup, the platform is a complex set of templates,\npipelines, and integrations that ultimately help turn configuration into API\ncalls and code into assets. Because of that complexity, and also the fact that\nmany components need to run inside a very complex environment of their own,\nit's impossible to satisfy the 'local == production' equation.\n\nGranted, there are some solutions that either mock or reroute to dev/prod\nresources, enabling developers to build or debug locally. However, it's still\na 3rd party service you need to integrate and manage.\n\nIn order to satisfy the equation, we decided to build tau so it simplifies,\nports, and/or sandboxes every aspect of the cloud.\n\n### Interface\n\nTraditionally, you interface with infrastructure through API calls. This is\nthe case for every cloud computing provider alongside orchestration solutions\nlike Kubernetes.\n\nA few years back, the concept of GitOps started to make waves, and that was\naround the time we started building, so we decided to cut the unnecessary\ngarbage between the definition of a cloud resource, which should be stored in\nGit, and its instantiation.\n\nAs a result, tau has no API calls to create a serverless function, for\nexample. Instead, it adopts Git as the only way to alter infrastructure.\n\n### Versioning\n\nGit being core to tau means that nodes in the cloud do tune to a specific\nbranch, by default main or master. Among what it enables is an easy way to set\nup development environments, for example.\n\nA specific use case is local development in which case dreamland nodes can\nalso be tuned to the current branch.\n\nIn addition to the nodes being on a branch, the application registry, managed\nby the 'tns' protocol, uses commit ids to version entries, allowing nodes\nserving the assets to detect new versions, or a roll-back for that matter.\n\n### Networking\n\nInternally, tau, using libp2p, builds an overlay peer-to-peer network between\nthe nodes, enabling some pretty cool features like:\n\n  * Automatic node and protocol discovery & routing. If, for example, a node is down, changes its IP address/port, or the protocols it supports, other nodes will update the info automatically.\n  * Transport independent. Nodes can use any combination of TCP/IP, WebSocket, QUIC, and more.\n  * NAT Traversal & Circuit Relay, which allow nodes that are not public to be part of the cloud.\n\nUnless absolutely required, which is extremely rare, no well-designed software\nshould rely on IP addresses and ports. This is why every tau cloud is\nidentified with an FQDN (i.e., enterprise.starships.ws) so no absolute network\nreference is used in an application. Under the hood, the Cloud will\ntransparently take care of DNS resolution and HTTP load balancing, eliminating\nthe need to set these up.\n\n### Storage\n\nIn every other cloud computing implementation, storage means a location and\ngenerally a path. For example, https://tau.how/assets/logo-w.svg has two main\ncomponents tau.how, which translates to an IP address and a location, and\n/assets/logo-w.svg, which is a path relative to the location. This way of\naddressing, called \"location-based addressing,\" is simply not portable. Why?\nyou might ask. Well, for starters, nothing guarantees the data returned is an\nSVG logo in this case. The other issue is the tau.how host we connected to\nmight not have it.\n\nTo solve this issue, tau uses content-addressing, a concept introduced by\ntorrent networks and popularized by IPFS.\n\nSo when you request https://tau.how/assets/logo-w.svg, which is actually\nhosted by a tau Cloud, the host that handles the request will resolve\n(host=tau.how, path=/assets/logo-w.svg) to a content address, or CID, then\nretrieve the content reader and then forward it through an HTTP writer to you.\n\nA few cool facts about this approach:\n\n  * Content is chunked and then stored in a DAG, which means it's deduplicated.\n  * Content can be downloaded from multiple peers in parallel.\n  * Content can be verified as the CID is its hash.\n  * When content is in demand, the cloud automatically dedicates more peers to its distribution.\n\n### Computing\n\nAs of today, tau supports WebAssembly for computing. The reason we started\nwith it is that it's highly portable and sandboxed. We support containers for\nCI/CD but not for computing yet. We're working on a way to implement\ncontainers and virtual machines while abiding by our principles of portability\nand sandboxing.\n\nCode, binary, images, along with any attached assets, are stored and retrieved\nusing the same principles described in Storage, which considerably reduces\nprovisioning time and brings computing close to data (data gravity) and/or\nuser (edge computing).\n\n## E2E Testing\n\nIf you're looking to create E2E tests for projects hosted on tau, you can use\nlibdream, a sub-package within tau. We don't have documentation for it yet,\nbut you can quickly learn from tests like protocols/seer/tests/dns_test.go.\n\n## Running a Local Cloud\n\nWhile you can't practically run tau on your local machine, you can do so using\ndreamland, which is a CLI wrapper around libdream. It creates local cloud\nenvironments mirroring production settings. Unlike tau, it offers an API for\nreal-time configuration and testing.\n\n## Extending Tau\n\ntau can be extended using a plugin system we call orbit. An open-source\nexample is ollama-cloud, which demonstrates how to add LLM capabilities to\nyour cloud.\n\n## Features\n\nThis is a list of current features and what we intend to implement soon. If\nyou'd like to propose more, please open an issue.\n\n  * Serverless Computing\n\n    * WebAssembly\n    * JavaScript\n    * Python\n  * Frontend Hosting\n  * Object Storage\n  * Databases\n\n    * Key/Value\n    * SQL\n  * Pub-Sub Messaging\n  * Global Variables\n  * CI/CD\n\n    * Logs\n    * Status & Logs Streaming\n\n## Documentation\n\nTo learn more, check:\n\n  * Introduction to Taubyte\n  * Be Competitive in a Few Minutes: Deployment Guide\n\nFor comprehensive documentation, visit our documentation.\n\n## Support\n\nQuestions or need assistance? Ping us on Discord!\n\n## About\n\n\ud83d\udd25\ud83d\udd25\ud83d\udd25 Open-source Cloud Computing Platform On Autopilot.\n\ntau.how\n\n### Topics\n\ngo kubernetes rust distributed-systems cloud ai serverless cdn messaging ipfs\nmessage-bus p2p webassembly cloud-computing cloud-native cloudcomputing 5g\nassemblyscript edgecomputing\n\n### Resources\n\nReadme\n\n### License\n\nBSD-3-Clause license\n\n### Code of conduct\n\nCode of conduct\n\nActivity\n\nCustom properties\n\n### Stars\n\n191 stars\n\n### Watchers\n\n6 watching\n\n### Forks\n\n17 forks\n\nReport repository\n\n## Releases 16\n\nv1.1.4 Latest\n\nMar 25, 2024\n\n\\+ 15 releases\n\n## Contributors 3\n\n  * tafseer-khan Tafseer Khan\n  * samyfodil Samy Fodil\n  * arontaubyte\n\n## Languages\n\n  * Go 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
