{"aid": "40279632", "title": "Attackers Can Decloak Routing-Based VPNs", "url": "https://www.leviathansecurity.com/blog/tunnelvision", "domain": "leviathansecurity.com", "votes": 32, "user": "dsr_", "posted_at": "2024-05-06 21:19:55", "comments": 12, "source_title": "a", "source_text": "CVE-2024-3661: TunnelVision - How Attackers Can Decloak Routing-Based VPNs For\na Total VPN Leak \u2014 Leviathan Security Group - Penetration Testing, Security\nAssessment, Risk Advisory\n\n0\n\nSkip to Content\n\nContact Us\n\nContact Us\n\n#\n\nTunnelVision\n\n(CVE-2024-3661):\n\nHow\n\nAttackers\n\nCan\n\nDecloak\n\nRouting-Based\n\nVPNs\n\nFor\n\na\n\nTotal\n\nVPN\n\nLeak\n\nNetwork Security\n\nMay 6\n\nWritten By Cody Martin\n\nRecently, we identified a novel network technique that bypasses VPN\nencapsulation. An attacker can use this technique to force a target user\u2019s\ntraffic off their VPN tunnel using built-in features of DHCP (Dynamic Host\nConfiguration Protocol). The result of this is the user transmits packets that\nare never encrypted by a VPN, and an attacker can snoop their traffic. We are\nusing the term decloaking to refer to this effect. Importantly, the VPN\ncontrol channel is maintained so features such as kill switches are never\ntripped, and users continue to show as connected to a VPN in all the cases\nwe\u2019ve observed.\n\nWe\u2019ve spent extensive time exploring this capability and attempting to notify\nas many affected parties as possible. We also know it is our responsibility as\nsecurity researchers to inform the security and privacy community, as well as\nthe general public, about this threat. We also believe this technique may have\nbeen possible as far back as 2002 and could have already been discovered and\npotentially used in the wild. For that reason, we believe it is critical for\nus to disclose publicly because notifying every VPN provider, operating system\nmaintainer, self-hosted VPN admin, and VPN user is far beyond the capacity of\nour small research team.\n\nWe've seen one mitigation for this technique, as well as identified a fix that\nexists on Linux-based operating systems. However, the mitigation offers a side\nchannel that could be used for targeted denial-of-service censorship, as well\nas to de-anonymize the destination of traffic via traffic analysis. In some\nplaces in the world, the side-channel alone could lead to imprisonment or\ndeath for those who rely on VPNs for safety such as journalists or\nwhistleblowers who are common targets of surveillance or spyware.\n\nIt is not feasible to fix the issue by simply removing support for the DHCP\nfeature because this could break Internet connectivity in some legitimate\ncases. The strongest recommendation we have is for VPN providers to implement\nnetwork namespaces on operating systems that support them, similar to the\nmethod described in WireGuard\u2019s documentation. Network namespaces are a Linux\nfeature that can segment interfaces and routing tables away from the local\nnetwork\u2019s control, and other operating system maintainers should consider\nwhether namespaces are feasible to implement.\n\nTo help make this work accessible to as many people as possible, we are\nstructuring this blog post to walk through the fundamentals of networking, VPN\ntechnology, and DHCP to fully explain the decloaking behavior. Advanced\nreaders are welcome to jump straight to the proof-of-concept section.\n\n## Decloaking Primer: Low-level Networking\n\n### What is a network?\n\nA computer network is a group of computer devices that are connected to each\nother and can send and receive data to and from one another.\n\nA basic example of this is to connect two laptops with an Ethernet cable to\nnetwork them together. However, there\u2019s more than meets the eye when it comes\nto low-level networking that\u2019s hidden from the average user. The laptops are\nusing a system of rules to talk to each other, which we call protocols. Each\nprotocol has its own purpose and operates at what we call a layer.\n\nThese layers are intended to solve different types of problems and are built\nsuch that they do not need to know what\u2019s happening at a higher or lower\nlayer. This is called encapsulation. For example, a user can trust that the\nlayers lower than their browser (HTTP) are determining how to send electricity\nover a cable (Coax), knows who to talk to (Ethernet, IP), and ensure correct\ndata delivery to the recipient server (TCP). This is like how someone writing\na letter needs only to think about what they want to write or what the other\nperson wrote. They do not need to care about how it got there.\n\nWhen we\u2019re referring to layers in this blogpost, we are talking about the\npractical TCP/IP model, which is implemented on almost every device and\nnetwork. We also decided to use the 5-layer variant of the model because it\ndoesn\u2019t combine the lower layers together; this is why there might be a\ndiscrepancy when viewing other TCP/IP model diagrams. When we\u2019re referring to\ndata that\u2019s been packaged by all these layers, we generally refer to it as a\npacket.\n\nLayer| Brief Description| Analogy| Protocols  \n---|---|---|---  \nApplication Layer| Determines the actual data that should be sent to a\nrecipient.| Words on a page of a letter in the mail.| HTTP, DNS, HTTPS, DHCP  \nTransport Layer| Establishes end-to-end communication between a process on a\nhost and a process on a recipient.| A letter delivered to a specific apartment\nnumber.| TCP, UDP  \nNetwork Layer| Sends traffic from a source system to a destination system\nacross the internet.| Delivering a letter to a single building in a city.| IP,\nARP  \nData Link Layer| Controls traffic between systems on the same local network.|\nA post office truck taking mail from place to place or city to city.| Ethernet  \nPhysical| Determines how to encode data over a \u201cphysical medium\u201d such as\ncopper wire or radio waves (Wi-Fi).| Physically writing the letter and placing\nit in an envelope.| Fiber optic, Coax, Satellite, Microwave  \n  \n### What is a network interface?\n\nThe most basic example of a network interface is a physical device such as a\nwireless or network card attached to a computer's motherboard. These devices\nallow the computer to transmit bits of data over a physical medium (e.g., a\ncopper wire, fiber optic cable, or radio frequency). They are a fundamental\npart of networking as they are what allows computers to talk to each other\nover a distance.\n\nThere are two types of network interfaces:\n\n  * Physical Network Interfaces\n\n  * Virtual Network Interfaces\n\nImportantly, both types of interfaces are designed for encapsulation so they\ncan be interacted with by higher layers in the same way.\n\nThis is where Virtual Network Interfaces, a critical component of VPN clients\nand server, come in. Instead of using physical hardware, Virtual Network\nInterfaces create a file descriptor that can be read from or written to via\nsoftware applications. Because file descriptors exist only in the memory of a\nhost, Virtual Network Interfaces are especially useful for virtualized\nenvironments where traffic might never need to be transmitted over a physical\nmedium.\n\nFigure 1: A simplified example of a virtual interface that is not backed by a\nphysical interface. Traffic between virtual machines never leaves the host.\n\nHowever, there are use cases in which a user might want a virtual interface to\nbe able to send traffic over a physical medium. For those cases, the virtual\ninterface can also be backed by a physical network interface. Behind the\nscenes, the virtual interface forwards outbound traffic to a physical network\ninterface.\n\nFigure 2: An example of a virtual interface that is backed by a physical\ninterface.\n\n### What is a VPN?\n\nA Virtual Private Network (VPN) allows users to create a tunnel for network\ntraffic between their host device and a server on a different network. The\nresulting virtual network is not confined by geographic location while\nbehaving identically to a physical network.\n\nTo achieve this, VPN clients create a virtual network interface and use the\nunderlying file descriptor to encrypt/decrypt traffic at a higher layer before\nsending it to a physical network interface.\n\nFigure 3: A simplified VPN setup where the VPN user is accessing a resource on\na different network.\n\nVPN use is designed to be as simple as possible for a user. Often, they do not\nneed to do much besides log in and click a button to connect to their server.\n\nWhat a user does:\n\n  1. Select the settings they want on the VPN Client\n\n  2. Click a button to connect\n\n  3. Log in (optional in some cases, depending on the client)\n\n  4. Read the confirmation from the VPN they are connected\n\n  5. Use remote resources from the VPN\n\nImportantly, VPNs actually increase the host\u2019s attack surface because traffic\nfrom lower networking layers is send over the Internet. VPNs work by\nencapsulating lower layers inside of higher layers to create local area\nnetworks (LAN) over the Internet. LAN traffic is considered to be more\nprivileged than traffic that is intended to be sent over the Internet.\nAttackers with LAN access have many more passive and active attack options\nthan an attacker outside of the LAN. By creating a LAN over the Internet, VPNs\nextend the LAN attack surface to external attackers. Commonly, VPNs mitigate\nthis attack surface by using compensating controls such as packet encryption.\n\nThis is an often-misunderstood fact about VPNs. The reason for encryption is\nnot to increase the security of using the physical LAN, but rather to mitigate\nthe added risk that VPNs introduce when they create a virtualized LAN over the\nInternet. VPNs do not secure you from local network attacks on the physical\nLAN despite common VPN marketing material and widely given advice.\n\n### How do VPNs use virtual network interfaces?\n\nThe VPN client process creates an encrypted version of the packet it\noriginally received from the file descriptor associated with its virtual\nnetwork interface. It places this encrypted payload in the layer for its\nunderlying VPN protocol, then uses that protocol to talk to the VPN server.\n\nLayer in TCP/IP| Packet 1 (Before encrypted by VPN)| Packet 2 (Encrypted by\nVPN)  \n---|---|---  \nData Link Layer| Ethernet: Sender network card: [Physical interface MAC] Dest.\nnetwork card: [Router interface MAC]| Ethernet: Source network card: [physical\ninterface MAC] Destination network card: [Router interface MAC]  \nNetwork Layer| IP: Source IP: 1.234.56.56.78 Destination IP: 2.34.56.78| IP:\nSource IP: 1.234.56.78 Destination IP: 99.87.65.43  \nTransport Layer| TCP: Sender port: 43555 Destination port: 80| UDP: Sender\nport: 54232 Destination port: 1194  \nApplication Layer| HTTP: GET google.com| OpenVPN Protocol: Encrypted payload:\nEthernet: Sender network card: [virtual interface] Dest. network card:\n[server\u2019s interface] IP (packet 1) TCP (packet 1) HTTP (packet 1)  \n  \nThere\u2019s quite a long process for how a VPN sends that packet to the VPN\nServer. We are including a more exhaustive list of steps in the Appendix for\nsecurity researchers or developers who might need even more granular details.\n\nA simplified version of that process:\n\n  1. A VPN client establishes a \u201ccontrol channel\u201d connection to a VPN server. If the VPN features a kill switch, then losing connection to this channel will result in a lockdown\n\n  2. The VPN client creates a virtual network interface\n\n  3. The VPN client optionally runs a startup script to configure the host. It may configure routing rules, the DNS server to use, host-based firewall rules, or other settings\n\n  4. A process on the host attempts to send network traffic to a destination (i.e., Internet browsing)\n\n  5. Routing rules select the VPN\u2019s interface to send the traffic through\n\n  6. The VPN client receives and encrypts that traffic\n\n  7. The VPN client sends the encrypted traffic over a physically backed network interface to the VPN server\n\n  8. The VPN server receives and decrypts that traffic from the VPN client\n\n  9. The VPN server forwards that traffic to the destination. If the destination is outbound, the VPN will send your traffic as though it is its own. This behavior is what VPN providers describe as \u201cIP cloaking\u201d or \u201cIP hiding\u201d\n\n  10. The VPN server receives a reply from the destination, encrypts the response, and sends it to the VPN client\n\n  11. The VPN client decrypts the response, and the originating process finally receives the traffic\n\nIt can be quite hard to understand fully since there are many steps involved.\nFor that reason, we\u2019ve made our own detailed diagram of a mental model we use\nfor how a VPN client sends and receives information (Figure 4).\n\nFigure 4: A dataflow diagram of a VPN on a Linux host.\n\n### How do routing based VPNs configure a host?\n\nOnce a user connects to a VPN server, their VPN client process will configure\nthe host\u2019s settings to route traffic through the tunnel that it established.\nIf all traffic* is routed through the VPN, we refer to it as a \u201cfull-tunnel\nVPN\u201d. If there are user-defined exceptions for traffic, such as local network\ntraffic, we refer to it as a \u201csplit-tunnel VPN\u201d. The VPN client can also\nconfigure other settings on the host, such as the host\u2019s firewall. Later,\nwe\u2019ll discuss a mitigation we observed using the host-based firewall.\n\nCommonly, these configuration changes are made by \u201cup scripts\u201d and \u201cdown\nscripts\u201d when a connection is established or disconnected. The runtime process\nfor a VPN client may also perform configuration changes, but this varies from\nvendor to vendor.\n\n*Note: When we say, \u201call traffic\u201d, we really mean \u201call traffic except the traffic necessary to keep the VPN in a working state.\u201d For example, VPNs create an exception to their own previously configured routing rules. All traffic sent to the VPN servers IP address must be sent over a hardware backed interface instead of its own tunnel. Otherwise, it would break the hosts connection to the VPN server and the VPN client would be unable to send encrypted packets. In addition, there are other configuration exceptions made for DHCP traffic since the VPN must maintain its hosts IP address lease.\n\n### What are routes and routing tables?\n\nRoutes are how we describe where to send traffic based on the destination.\nRouting tables are a collection of routes that are used by the network stack.\nConsider a network stack to just be all the code on an operating system that\ndeals with sending and receiving data from a network.\n\nA common route is sending all traffic (0.0.0.0/0 in Classless Inter-Domain\nRouting [CIDR] notation) to your router (192.168.1.1) over the physical\nnetwork interface (eth0).\n\nAn example of that rule in the table would be:\n\n    \n    \n    0.0.0.0/0 via 192.168.1.1 dev eth0\n\nAnother behavior of routing tables is that by default (in most network stacks)\nthe most specific prefix length for the CIDR range has the highest priority.\nThe prefix length for the range 192.168.1.1/32 is 32 and the prefix length for\nthe range 0.0.0.0/0 is 0. The highest numerical value of a prefix length will\ntake priority for routing selection (unless configured otherwise).\n\nFor example:\n\n    \n    \n    0.0.0.0/0 via 192.168.1.1 dev eth0 10.10.10.1/24 via 192.168.1.1 dev wifi1 10.10.10.2/32 via 192.168.1.2 dev eth0\n\nIn this situation, if we sent traffic to 10.10.10.2, the most specific rule is\nthe /32 rule and it would therefore be the rule the network stack uses despite\nmatching the other two rules above it.\n\nMost full-tunnel VPNs use the least specific rule possible to capture all\ntraffic. Note that the following example includes an exception route for the\nhypothetical VPN server address (12.34.56.78) as well.\n\n    \n    \n    0.0.0.0/0 via 10.13.37.1 dev tun0 12.34.56.78/32 via 192.168.1.1 dev eth0\n\nAlternatively, providers may use two /1 rules to gain priority over the\ndefault route. It's common in even non-adversarial environments for DHCP to\nset a default route to the physical gateway.\n\n    \n    \n    0.0.0.0/0 via 192.168.1.1 dev eth0 0.0.0.0/1 via 10.13.37.1 dev tun0 128.0.0.0/1 via 10.13.37.1 dev tun0 12.34.56.78/32 via 192.168.1.1 dev eth0\n\n### What is DHCP?\n\nDHCP was originally developed as a robust way to dynamically issue IP\naddresses to devices on a local network as opposed to manually addressing each\ndevice. All modern operating systems have their own DHCP client that will\nautomatically request an IP address.\n\nThe main concept to understand is that DHCP provides a time-based lease for IP\naddresses, and it contains many additional features called options that allow\nyou to adjust the configuration of devices remotely and dynamically. Some\nnotable options include setting the default gateway that acts as the primary\nroute to the Internet or DNS (Domain Name System) servers, which resolve\ndomain names like \u201cgoogle.com\u201d to an IP address.\n\nA client who wants an IP address uses a broadcast to send a DHCPDISCOVER\npacket to the entire local subnet. Other hosts will ignore this, except for\nthe server who will respond with a DHCPOFFER unicasted directly to the client\nto offer it a time-bound lease.\n\nAlternatively, if a client knows who the DHCP server is, it has the option to\nunicast the DHCPDISCOVER to a DHCP server instead of broadcasting. Usually,\nthis is used for renewing its lease.\n\nFigure 5: How a DHCP client obtains an IP address and then maintains its\nlease.\n\nSource: https://docs.oracle.com/cd/E23824_01/html/821-1453/dhcp-\noverview-3.html\n\nAs seen in the above diagram, once a DHCP server makes an offer, the client\ncan choose to accept or decline the offer. For example, if it receives\nmultiple offers, it will choose the best one. The selection most often\nimplemented by DHCP clients is \u201cfirst come, first serve.\u201d The servers that\naren\u2019t selected will be sent a DHCPDECLINE message from the client. Notably,\nthe DHCPOFFER will include the options.\n\n### What is DHCP option 121?\n\nIn 1997, the DHCP RFC had option 33, which allowed network administrators to\nspecify a static route to install into a client\u2019s routing table. However, this\nused classful static routes, which fell out of favor over time as public IP\nspace became limited. In 2002, RFC 3442 introduced option 121 classless static\nroutes and obsoleted option 33 (which still should be supported, depending on\nwho you ask). Option 121 also allows administrators to add static routes to a\nclient\u2019s routing table, but with classless ranges instead. There is no limit\nbesides packet size to how many different routes can be installed at once.\n\nAn interesting quirk of DHCP option 121 is that the network interface device\nfor the route it installs cannot be specified by the DHCP server. Below you\ncan see a DHCPOFFER packet that was captured in Wireshark. It specifies the\nCIDR range and the router to use but has no interface device.\n\nFigure 6: A DHCPOFFER packet that includes an option 121 route. The network\ninterface is not specified by design.\n\nInstead, the DHCP client will implicitly choose the network interface that the\nclient is talking to the DHCP server on when installing its routing rules for\nthis option.\n\n## Decloaking Attacks\n\n### Requirements for decloaking VPN traffic\n\n  * The targeted host must accept a DHCP lease from the attacker-controlled server\n\n  * The targeted host\u2019s DHCP client must implement DHCP option 121\n\nWe want to stress that there are ways an attacker who is on the same network\nas a targeted user might be able to become their DHCP server:\n\n  * A rogue DHCP server using a DHCP starvation attack against the true DHCP, then responding to new clients. We have achieved this in lab environments and are working on a follow-up blog post.\n\n  * A rogue DHCP server racing to respond to DHCPDISCOVER broadcasts to abuse DHCP clients\u2019 common behavior where they implement first-offer lease selection.\n\n  * ARP spoofing to intercept traffic between the true DHCP server and client, then waiting for a client to renew their lease.\n\n### Performing the attack\n\nOur technique is to run a DHCP server on the same network as a targeted VPN\nuser and to also set our DHCP configuration to use itself as a gateway. When\nthe traffic hits our gateway, we use traffic forwarding rules on the DHCP\nserver to pass traffic through to a legitimate gateway while we snoop on it.\n\nWe use DHCP option 121 to set a route on the VPN user\u2019s routing table. The\nroute we set is arbitrary and we can also set multiple routes if needed. By\npushing routes that are more specific than a /0 CIDR range that most VPNs use,\nwe can make routing rules that have a higher priority than the routes for the\nvirtual interface the VPN creates. We can set multiple /1 routes to recreate\nthe 0.0.0.0/0 all traffic rule set by most VPNs.\n\nPushing a route also means that the network traffic will be sent over the same\ninterface as the DHCP server instead of the virtual network interface. This is\nintended functionality that isn\u2019t clearly stated in the RFC. Therefore, for\nthe routes we push, it is never encrypted by the VPN\u2019s virtual interface but\ninstead transmitted by the network interface that is talking to the DHCP\nserver. As an attacker, we can select which IP addresses go over the tunnel\nand which addresses go over the network interface talking to our DHCP server.\n\nFigure 7: A malicious DHCP option 121 route that causes traffic to never be\nencrypted by the VPN process.\n\nWe now have traffic being transmitted outside the VPN\u2019s encrypted tunnel. This\ntechnique can also be used against an already established VPN connection once\nthe VPN user\u2019s host needs to renew a lease from our DHCP server. We can\nartificially create that scenario by setting a short lease time in the DHCP\nlease, so the user updates their routing table more frequently. In addition,\nthe VPN control channel is still intact because it already uses the physical\ninterface for its communication. In our testing, the VPN always continued to\nreport as connected, and the kill switch was never engaged to drop our VPN\nconnection.\n\n### Proof of Concept\n\n  * Video proof of concept:\n\n    * https://www.youtube.com/watch?v=ajsLmZia6UU\n\n  * Lab Setup Code:\n\n    * https://github.com/leviathansecurity/TunnelVision\n\n  * DHCP Server image:\n\n    * https://drive.google.com/file/d/1WLJGs3ZUypf6hLh5WL4AJmsKdUOZo5yZ\n\nThe lab scenarios are built to represent:\n\n  * An attacker compromises a DHCP server/access point\n\n  * A rogue administrator owns the infrastructure themselves and maliciously configures it\n\n  * An attacker sets up an evil twin wireless AP in a physical location such as a coffee shop or corporate office\n\n  * One we release our tool, ArcaneTrickster, the lab can also be used to mimic an attacker who has an adjacent host on the network na dis otherwise not in a privileged network position\n\n### Fixes\n\n#### Network Namespaces\n\nUsing network namespaces on Linux can completely fix this behavior. However,\nin our experience, it is less commonly implemented.\n\nWireGuard\u2019s documentation shows how it\u2019s possible to use a namespace for all\napplications with traffic that should be using a VPN before sending it to\nanother namespace that contains a physical interface. However, this appears to\nbe Linux-specific functionality and it\u2019s not clear if there is a solution for\nWindows, MacOS, or other operating systems with the same amount of robustness.\n\n### Mitigations\n\n#### Firewall Rules\n\nWe\u2019ve observed VPN providers denying all inbound and outbound traffic to and\nfrom the physical interface via firewall rules. An exception was necessary for\nthe DHCP and VPN server IPs because they are necessary to remain connected to\nthe LAN and VPN server. Deep packet inspection could also allow only the DHCP\nand VPN protocols instead but would likely incur a performance penalty.\n\n#### Problems with Firewall Rule Mitigations\n\nFirewall mitigations create a selective denial of service for traffic using\nthe DHCP route and introduce a side-channel. An attacker can use this side-\nchannel to determine the destination of traffic. To determine the traffic\u2019s\ndestination, an attacker could perform traffic analysis on the volume of VPN\nencrypted traffic a user sends. The attacker would need a baseline volume of\ntraffic where no malicious are installed. Then the attacker would need to\nmodify the lease configuration to install routes that deny traffic and observe\nthe difference in volume.\n\nWith enough samples, it would be possible to statistically prove whether the\ntargeted user is sending traffic to a specific destination. For the average\ninternet user, most internet traffic is already secured by TLS. Therefore,\ntraffic intercepted by TunnelVision will mostly be unreadable except for the\ndestination and protocols. This means that this side-channel has nearly the\nsame impact and should be considered insufficient.\n\nThe side-channel is flexible in use:\n\n  * The traffic can be checked against a predefined list.\n\n  * The traffic can be selectively denied as a censorship mechanism.\n\n  * The attacker can use IP space denial with binary search to determine all current connections in logarithmic time.\n\n#### Ignore Option 121\n\nAnother possible mitigation is ignoring option 121 while the VPN is on. We\nnoted that because Android does not implement support for DHCP option 121, it\nwas uniquely unaffected. The downside is that option 121 exists for a reason,\nand ignoring these routes can break network connectivity (something that is\nfrequently brought up as a reason to implement it on Android). If this\nmitigation is implemented, it must be mandatory because attackers could simply\ndeny network access until the VPN or user re-enables option 121.\n\n#### Use a Hot Spot or VM\n\nHot spots are temporary Wi-Fi networks controlled by a cellular device. They\ncreate a password-locked LAN with automatic network address translation.\nBecause this network is completely controlled by the cellular device and\nrequires a password, an attacker should not have local network access. A\nvirtual machine would also work similarly as long as the VM\u2019s network adapter\nis not in bridged mode.\n\n#### Do not use untrusted networks if you need absolute confidentiality of\nyour traffic\n\n## Industry Impact\n\n### Is TunnelVision a vulnerability?\n\nThis is debatable. We\u2019re calling it a technique because TunnelVision doesn\u2019t\nrely on violating any security properties of the underlying technologies. From\nour perspective, TunnelVision is how DHCP, routing tables, and VPNs are\nintended to work.\n\nHowever, it contradicts VPN providers\u2019 assurances that are commonly referenced\nin marketing materials; in our opinion, TunnelVision becomes a vulnerability\nwhen a VPN provider makes assurances that their product secures a customer\nfrom an attacker on an untrusted network. There\u2019s a big difference between\nprotecting your data in transit and protecting against all LAN attacks. VPNs\nwere not designed to mitigate LAN attacks on the physical network and to\npromise otherwise is dangerous.\n\nIn our technique, we have not broken the VPN\u2019s cryptographically secured\nprotocol, and the VPN is still fully functional. An attacker is instead\nforcing a target user to not use their VPN tunnel. Regardless of whether we\nclassify this as a technique, VPN users are affected when they rely on\nassurances that a VPN can secure them from attackers on their local network.\n\n### Affected Operating Systems\n\nIn our testing, we observed that any operating system that implements a DHCP\nclient according to its RFC specification and has support for DHCP option 121\nroutes is affected. This includes Windows, Linux, iOS, and MacOS. Notably, it\ndoes not affect Android as they do not have support for DHCP option 121.\n\n### Affected VPN Providers and VPN Protocols\n\nWe found that VPNs that solely rely on routing rules to secure the host\u2019s\ntraffic are vulnerable. Those who are hosting their own VPN servers (e.g.,\nsystem administrators) and are not hardening their VPN client configurations\nwill likely be vulnerable as well. We have observed a mitigation from some VPN\nproviders that drops traffic to non-VPN interfaces via firewall rules. It\u2019s\npossible there are other methods that we did not encounter during testing to\nmitigate or fix this.\n\nAs previously mentioned, we observed the same behavior on each operating\nsystem we tested, save one. Furthermore, the strength of the encryption\nalgorithm a VPN uses makes no difference. TunnelVision\u2019s effect is independent\nof the underlying VPN protocol (e.g., WireGuard, OpenVPN, or IPsec) because it\nreconfigures the operating system network stack the VPN relies on.\n\n## Conclusion\n\n### Call to Action\n\nWe have a limitation as a research team of two\u2013 there are simply too many VPNs\non the market to test each one individually. The first approach we took was to\nnotify companies via bug bounties or security disclosure email, but that\nquickly became unscalable. We\u2019ve also engaged the EFF and CISA to help\ndisclose as broadly as possible prior to publicly releasing this research. We\nthank them tremendously for their help. Our hope is that by publishing our\nwork, we can reach more affected parties, especially because we believe the\ntechnique has been feasible since as early as 2002.\n\nAlthough the public disclosure of this technique affects each party\ndifferently, ultimately there is a shared responsibility.\n\nUsers should be made aware of this technique and for sensitive traffic they\nshould be warned against using untrusted networks. If they must use an\nuntrusted network, they should use a VPN provider that has an effective\nmitigation against this technique. To determine if a provider has an effective\nmitigation or fix, our lab setup is available for testing and VPN providers\nthemselves will be able to speak to the specifics of their existing\nmitigations in their documentation. If a VPN decloak does occur, most user\ndata will not be visible to local network attackers assuming they are\naccessing websites with HTTPS, which has become increasingly common.\n\nIt is common for corporate VPNs to be used in areas such as coffee shops,\nhotels, or airports. Network administrators should inform employees that\nworking from such places carries risks and should be avoided when possible. If\nsuch a policy is not practical, then administrators should advise using VPNs\nthat enable the previously mentioned mitigations or fixes. Some alternatives\nwould be to use a trusted hot spot and then connect to the VPN. Lastly,\nrunning the VPN inside of a VM that obtains a lease from a virtualized DHCP\nserver would prevent the local networks DHCP server from installing routes\naltogether.\n\nCompanies that control their own networks or have site-to-site VPNs should\nreview the switches they use and enable features such as DHCP snooping and ARP\nprotections. These layer 2 protections help prevent rogue DHCP servers but do\nnot eliminate a rogue administrator scenario. In addition, implementing HTTPS\nor other protocols with encryption for internal resources will prevent data\nleakage from VPN users connecting from untrusted networks.\n\nVPN providers can add features to clients to configure firewall rules that\ndrop outbound packets to network interfaces. However, such a setting will mean\nthat a VPN user will be isolated from interacting with local network\nresources. If the VPN client is for Linux and is intended to be a full tunnel,\nusing network namespaces for isolation. As such, VPN providers should publicly\nprovide documentation about any mitigations or fixes they have for\nTunnelVision and warn their end users about TunnelVision\u2019s existence. We also\nrecommend reviewing their marketing material and cease marketing claims that\nVPNs protect customers on untrusted networks until it can be proven.\n\nOperating system maintainers (outside of Linux) should determine whether\nadding or enhancing features related to network namespaces is feasible.\n\n### Upcoming Research\n\nDuring the disclosure process, we encountered multiple cases in which the\nentities we disclosed to did not see this as a serious problem. They assumed\nthat the prerequisite conditions included privileged positions or accounts,\ndespite the only prerequisite being local network access. This assumption was\npartially fueled by our intentionally simplistic lab setup where we were the\nonly DHCP server, and what we perceive as the entity\u2019s lack of familiarity\nwith low-level networking.\n\nWith this feedback, we decided to develop a robust adversarial infrastructure\nlibrary to enable further LAN security research and demonstrate practical\nattacks. For example, we can demonstrate that it\u2019s possible to consistently\nperform TunnelVision while simply being adjacent to the target host on the\nsame LAN. We\u2019re calling it \u201cArcaneTrickster\u201d and plan on releasing it at a\nlater date. However, we feature a demo in our videos, which are available in\nthe proof of concept section.\n\n## Let Us Know\n\nIf you have questions or are interested in learning about how Leviathan\nSecurity Group can help you achieve your security goals, head over to our\ncontact page and submit our short form.\n\nOur team will reach out to you to schedule a time to learn more about your\ninitiatives and priorities.\n\n## Credits\n\nAuthors:\n\n  * Lizzie Moratti\n\n  * Dani Cronce\n\nAcknowledgements:\n\n  * Sofia Aberegg\n\n  * TC Johnson\n\n  * Brian Campbell\n\n  * Martin Bogomolni\n\n  * Brad Haines\n\n  * Frank Heidt\n\nSpecial Thanks to:\n\n  * Electronic Frontier Foundation (EFF)\n\n  * United States Cybersecurity Infrastructure and Security Agency (CISA)\n\n## Appendix\n\n### Prior research related to TunnelVision\n\nWe found research related to DHCP leaking default routes over an incorrect\ninterface as far back as 2015. However, it was implied that DHCP only pushed\ndefault routes and did not account for DHCP option 121.\n\nIn August 2023, a paper was published demonstrating that routing rules can be\nattacked in different ways to leak VPN traffic. The paper details two methods\nof leaking VPN traffic:\n\n  * Abusing non-RFC1918 IP ranges to leak traffic.\n\n  * DNS spoofing the VPN server\u2019s domain name to trick the VPN client into adding a routing rule exception for an IP address.\n\nHowever, neither technique described in the August 2023 paper leveraged DHCP\noption 121 to push routes. Pushing routes through DHCP has a significantly\nhigher impact from the same attacker vantage point (the ability to hand out IP\nleases for a non-RFC1918 range or spoofing DNS replies).\n\n### In-Depth Diagram Explanation\n\nFor posterity and because we haven\u2019t encountered another diagram like ours\n(Figure 4), below are the steps from the diagram in as much detail as we could\nreasonably provide. We feel it could be useful to a future security researcher\nor a developer trying to understand the technology, so we are including it for\ntheir benefit.\n\n  1. An application process sends a payload to a socket it creates.\n\n  2. The socket formats the payload into a packet and sends it to the routing table to determine which interface it should be sent through.\n\n  3. The routing table determines that the packet should be sent through tun0.\n\n  4. The routing table sends the packet to the firewall.\n\n  5. The firewall rules allow the packet to continue to tun0.\n\n  6. The network interface serializes the packet and writes it into a file descriptor at /dev/net/tun in userland.\n\n  7. The VPN client process reads the unencrypted raw bytes of the packet in the file descriptor.\n\n  8. The VPN process creates an encrypted payload and sends it to a socket the VPN made.\n\n  9. The socket formats the payload into a packet that is bound for the VPN\u2019s server and sends it to the routing table to determine which interface it should be sent through.\n\n  10. The routing table determines that the packet must be sent over the wlan0 interface.\n\n  11. The routing table sends the packet to the firewall.\n\n  12. The firewall rules determine that the outbound packet may continue using wlan0.\n\n  13. The network interface transfers the packet to its Wi-Fi driver.\n\n  14. The Wi-Fi driver sends the VPN-bound packet to the physical network interface card (NIC).\n\n  15. The packet is sent across the internet to the VPN server.\n\n  16. The VPN server sends a packet in response back to the physical NIC.\n\n  17. The NIC sends the response packet to the Wi-Fi driver.\n\n  18. The Wi-Fi driver delivers the response packet to wlan0.\n\n  19. The response packet is sent to the firewall.\n\n  20. The firewall rules allow the packet to continue.\n\n  21. The packet is returned to the VPN socket.\n\n  22. The socket receives the packet and sends the packet\u2019s encrypted payload to the VPN client process.\n\n  23. The VPN client process decrypts the payload and writes the unencrypted raw bytes of the response packet to the file descriptor.\n\n  24. The tun0 interface deserializes the bytes from the file descriptor and formats it into a packet.\n\n  25. The tun0 interface sends the packet to the firewall.\n\n  26. The firewall rules allow the packet to continue.\n\n  27. The packet is returned to the socket opened by the user\u2019s application process.\n\n  28. The payload from the packet is returned to the application process.\n\nvpnnetwork securitycvevulnerabilityttptunnelvisionwifi\n\nCody Martin\n\nNext\n\nNext\n\n## Encoding Bitwise Functions as Polynomials\n\ncontact@leviathansecurity.com 866-452-6997\n\nPenetration Testing | Risk And Compliance | Vendor Security | Programs | About Us | Careers | Blog\n\nThis site uses cookies to provide you with a great user experience. By\ncontinuing to use our website, you consent to the use of cookies. To find out\nmore about the cookies we use, please see our Privacy Policy.\n\n", "frontpage": true}
