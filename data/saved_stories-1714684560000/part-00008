{"aid": "40236345", "title": "Introduction to the coordinate system and different coordinate spaces in Unreal", "url": "https://dev.epicgames.com/documentation/en-us/unreal-engine/coordinate-system-and-spaces-in-unreal-engine", "domain": "epicgames.com", "votes": 1, "user": "mariuz", "posted_at": "2024-05-02 13:53:34", "comments": 0, "source_title": "Coordinate System And Spaces In Unreal Engine | Unreal Engine 5.4 Documentation | Epic Developer Community", "source_text": "Coordinate System and Spaces in Unreal Engine | Unreal Engine 5.4 Documentation | Epic Developer Community\n\n  * Unreal Engine 5.4\n  * Unreal Engine 5.3\n  * Unreal Engine 5.2\n  * Unreal Engine 5.1\n  * Unreal Engine 5.0\n\n  1. Developer\n  2. Coordinate System and Spaces\n\n# Coordinate System and Spaces\n\nIntroduction to the coordinate system and different coordinate spaces.\n\n## Coordinate System\n\nUnreal Engine (UE) uses the Cartesian coordinate system to represent positions\nin three-dimensional Euclidean space. In the Unreal Editor the coordinate\nsystem is left-handed and uses a Z-up axis. Points are determined by their\nposition along three coordinate axes: the X-axis, Y-axis, and Z-axis. These\ncoordinate values set the position of actors and the direction they face for\nyour project. There are a variety of different ways that these axes can be\noriented in relation to one another. The orientation and values of the axes\ndepend on the type of coordinate space you are in.\n\nIf you are importing assets from other software such as Maya, Houdini, ZBrush,\nBlender, or 3ds Max, you must be aware of the handedness and orientation of\nthe coordinate system used in Unreal Engine. Other software systems use\ndifferent up-axes and handedness that you might need to take into\nconsideration.\n\nThree-dimensional cartesian coordinate system with the origin and coordinate\naxes.\n\n### Axes\n\nIn the Unreal Editor, and all illustrations in this documentation section, the\nfollowing colors are associated with the coordinate axes:\n\n  * X-axis: Red\n  * Y-axis: Green\n  * Z-axis: Blue\n\nUE's Z-up, left-handed coordinate system is defined as follows:\n\n  * The Z-axis determines how far up and down along a vertical line an actor is located.\n\n    * Positive values are upwards.\n  * The Y-axis determines how far to the left or right an actor is located.\n\n    * Positive values are to the right.\n  * The X-axis determines how far forward or backward an actor is located.\n\n    * Positive values are forward.\n\nThere is a special point in the coordinate system known as the origin. The\norigin is where the coordinate axes intersect and is represented by the point\nwith coordinates (0, 0, 0). To learn more about the origin and how it's used\nto set a point's location, see the gif above and this page's Coordinate Space\nsection.\n\nYou can use the Orthographic Viewports to visualize the direction of the axes\nand set coordinate values. To learn more, see Using Editor Viewports.\n\nPerspective (3D)| Front (X-Axis)| Side (Y-Axis)| Top (Z-Axis)  \n---|---|---|---  \n  \nUE is referred to as a left-handed coordinate system because the cross product\nand the coordinate axes follow the left-hand rule and Z-up because positive\nvalues along the Z-axis are located in the upward direction.\n\nTo illustrate, you could point your left index finger in the direction of the\npositive X-axis. Then point your left middle finger in the direction of the\npositive Y-axis. Now, the positive Z-axis points in the direction of your\nthumb. The following image shows what this looks like:\n\nLeft-hand rule for the cross product of vectors.\n\nThe three coordinate-axes are also sometimes referred to as the:\n\n  * X-axis: abscissa\n  * Y-axis: ordinate\n  * Z-axis: applicate\n\nTo locate the point (2, 1, -3) in UE coordinate space, follow these steps:\n\n  * Measure 2 unit steps along the positive X-axis.\n  * Measure 1 unit step along the positive Y-axis.\n  * Measure 3 unit steps along the negative Z-axis.\n\nThe following video illustrates this process step-by-step:\n\n  * Travel 2 units forward in the positive X direction.\n  * Travel 1 unit right in the positive Y direction.\n  * Travel 3 units down in the negative Z direction.\n\nFor more information about units in UE, see the Units of Measurement\ndocumentation.\n\nSteps to locate the point (2, 1, -3) in Unreal's coordinate system.\n\n### Transform and Control Axes\n\nThe following image is a scene from the Third Person Template included with\nUnreal Engine. The selected object in the center of the scene is located at\nthe origin of world space. In the lower left-hand corner of the Viewports in\nthe Unreal Editor is a gizmo icon depicting the positive direction of the axes\nrelative to the direction you are viewing. You can use this to visualize the\ncoordinate system in Unreal Engine.\n\nUnreal Engine scene with gizmo indicating an object's position in world space.\n\nThe transformation gizmo in the center of the scene is positioned with the\nsame orientation as the gizmo icon in the bottom-left corner of the Viewport.\nThe matching orientation is because you are viewing the selected actor in\nworld space. In addition, the transformation controls in the editor are color-\ncoordinated to match the axes.\n\nMove Tool (W)| Rotate Tool (E)| Scale Tool (R)  \n---|---|---  \n  \nThe image above represents the common transform gizmos in the Level Editor.\nHowever, additional specialized gizmos exist in the various editors and level\nmodes.\n\nTo learn more about using the various controls for adjusting the position of\nactors, including the pivot point, see Transforming Actors.\n\n### More Information\n\nFor more information about coordinate systems, see the following resources:\n\n  * Wolfram MathWorld - Coordinate System\n  * Wikipedia - Coordinate System\n\n## Coordinate Spaces\n\nEach coordinate space has its own coordinate system and origin. The\nintersection of the axes equals the origin point of that particular coordinate\nspace, which is represented by the coordinates (0,0,0) within that coordinate\nspace's coordinate system. The values of the axes increase or decrease based\non the origin and direction of the transformation.\n\n### World Space\n\nWorld space is the coordinate system used for your entire level. Its origin is\nthe center of the scene (the world grid). This coordinate system is fixed -\nyou cannot transform it. Use world space to translate or rotate an object in\nabsolute units relative to the level's origin and scale relative to the entire\nlevel.\n\nThe image below shows what happens when you select the blue cube. The\ncoordinate axis gizmo is now located at the pivot point of the cube. The\ncoordinate axes of the gizmo are still pointing in the same direction as the\ncoordinate axes for world space. You can see this in two different ways.\n\n  * One way is by noticing that the coordinate axes of the gizmo centered on the blue cube point in the same directions as the coordinate axes in the lower left-hand corner.\n  * Another, simpler way is the globe icon near the top-right corner of the Viewport indicates that you are viewing this object with respect to world space.\n\nView the blue cube with respect to world space.\n\n### Local Space\n\nLocal space is the coordinate system relative to the scene component to which\nthe actor is attached. The space is also known as object space. Every actor\nhas a local space coordinate system within a scene relative to the actor's\npivot point. An actor's pivot point is where the three local coordinate axes\nfor the actor intersect and represent the origin of local space. Use local\nspace to translate or rotate an object relative to its parent.\n\nTransform tools align themselves to the world grid.| Transform tools align\nthemselves to the rotation of the selected actor.  \n---|---  \n  \nIf you click on the globe icon in the upper right corner, the gizmo centered\non the blue cube changes, and the globe icon changes to a cube icon with axes.\nThis icon indicates that you are viewing the object with respect to local\nspace. Now, the X- and Y- coordinate axes of the gizmo centered on the blue\ncube do not point in the same directions as those in the lower left-hand\ncorner.\n\nView the blue cube with respect to local space.\n\nTo temporarily change the location of an actor's pivot, choose from the\nfollowing:\n\n  * Middle-click on the sphere in the center point of the translation gizmo and drag to move the pivot.\n  * Hover the cursor over where you want to set the pivot point on an actor and use the shortcut ALT + MMB (Middle Mouse Button).\n\nYou can permanently change the pivot point from the following:\n\n  * Perform one of the actions above and then right-click the actor and select Pivot > Set as Pivot Offset.\n  * The Edit Pivot tool.\n\nTo learn more about adjusting pivot points, see Transforming Actors.\n\n### Screen Space\n\nScreen space is the projection of the three-dimensional world space onto the\ntwo-dimensional screen that constitutes the player's vision. You can pull\nscreen space coordinates from specific cameras in your scene.\n\nPlay in Editor (PIE) session of the Third Person Template\n\nTo help visualize the placement of actors in screen space, pilot the cameras\nor pawns in your scene. To pilot, right-click the object and select Pilot.\n\n### UV Space\n\nUVs are a parameterization (U,V) of a 3D surface mesh into a normalized (0-1)\n2D space. In other words, they represent coordinates in 2D space that\ntranslate to vertices on your 3D model. The space is represented horizontally\nas U and vertically as V, thus the name UV coordinates. Also known as 2D or\ntexture coordinates.\n\nThe 2D Viewport of the UV Editor (pictured below) represents the UV space for\ndisplaying your UV map. It is the primary Viewport for unwrapping and packing\nUVs. The space is also known as 2D or texture space.\n\nAsk questions and help your peers Developer Forums\n\nWrite your own tutorials or read those from others Learning Library\n\nOn this page\n\n  * Coordinate System\n  * Axes\n  * Transform and Control Axes\n  * More Information\n  * Coordinate Spaces\n  * World Space\n  * Local Space\n  * Screen Space\n  * UV Space\n\nBack to top\n\nGames\n\n  * Fortnite\n  * Fall Guys\n  * Rocket League\n  * Unreal Tournament\n  * Infinity Blade\n  * Shadow Complex\n  * Robo Recall\n\nMarketplaces\n\n  * Epic Games Store\n  * Fab\n  * ArtStation\n  * Store Refund Policy\n  * Store EULA\n\nTools\n\n  * Unreal Engine\n  * UEFN\n  * MetaHuman\n  * Twinmotion\n  * Megascans\n  * RealityScan\n  * Rad Game Tools\n\nOnline Services\n\n  * Epic Online Services\n  * Kids Web Services\n  * Services Agreement\n  * Acceptable Use Policy\n  * Trust Statement\n  * Subprocessor List\n\nResources\n\n  * Dev Community\n  * Megagrants\n  * Support-A-Creator\n  * Creator Agreement\n  * Distribute on Epic Games\n  * Unreal Engine Branding Guidelines\n  * Fan Art Policy\n  * Community Rules\n  * EU Digital Services Act Inquiries\n\nCompany\n\n  * Fortnite Creative\n  * About\n  * Newsroom\n  * Careers\n  * Students\n  * UX Research\n\n\u00a9 2004-2024, Epic Games, Inc. All rights reserved. Unreal and its logo are\nEpic\u2019s trademarks or registered trademarks in the US and elsewhere.\n\n  * Terms of service\n  * Privacy policy\n  * Community Guidelines\n\n## Privacy Preference Center\n\n### Your Privacy\n\n### Your Privacy\n\nWhen you visit any website, it may store or retrieve information on your\nbrowser, mostly in the form of cookies. This information might be about you,\nyour preferences or your device and is mostly used to make the site work as\nyou expect it to. The information does not usually directly identify you, but\nit can give you a more personalized web experience. Because we respect your\nright to privacy, you can choose not to allow some types of cookies. Click on\nthe different category headings to find out more and change our default\nsettings. However, blocking some types of cookies may impact your experience\nof the site and the services we are able to offer. More information\n\n  * ### Strictly Necessary Cookies\n\n### Strictly Necessary Cookies\n\nAlways Active\n\nThese cookies are necessary for the website to function and cannot be switched\noff in our systems. They are usually only set in response to actions made by\nyou which amount to a request for services, such as setting your privacy\npreferences, logging in or filling in forms. You can set your browser to block\nor alert you about these cookies, but some parts of the site will not then\nwork. These cookies do not store any personally identifiable information.\n\nCookies Details\n\n  * ### Performance Cookies\n\n### Performance Cookies\n\nThese cookies allow us to count visits and traffic sources so we can measure\nand improve the performance of our site. They help us to know which pages are\nthe most and least popular and see how visitors move around the site. If you\ndo not allow these cookies we will not know when you have visited our site,\nand will not be able to monitor its performance.\n\nCookies Details\n\n  * ### Functional Cookies\n\n### Functional Cookies\n\nThese cookies enable the website to provide enhanced functionality and\npersonalization. They may be set by us or by third party providers whose\nservices we have added to our pages. If you do not allow these cookies then\nsome or all of these services may not function properly.\n\nCookies Details\n\nConsent Leg.Interest\n\nSelect All\n\n  * ### 33Across\n\n#### 33Across\n\nView Third Party Cookies\n\n    * Name\n\ncookie name\n\n  * ### 33Across\n\n3 Purposes\n\nView Privacy Notice\n\n### 33Across\n\n3 Purposes\n\nView Privacy Notice\n\nConsent Purposes\n\nLocation Based Ads\n\nConsent Allowed\n\nLegitimate Interest Purposes\n\nPersonalize\n\nRequire Opt-Out\n\nSpecial Purposes\n\nLocation Based Ads\n\nFeatures\n\nLocation Based Ads\n\nSpecial Features\n\nLocation Based Ads\n\nClear Filters\n\nBy clicking \u201cAccept All Cookies\u201d, you agree to the storing of cookies on your\ndevice to enhance site navigation, analyze site usage, and personalize\ncontent.Privacy Policy\n\n", "frontpage": false}
