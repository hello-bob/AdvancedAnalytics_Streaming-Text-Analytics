{"aid": "40285879", "title": "Dial devices by ED key with iroh-DNS", "url": "https://iroh.computer/blog/iroh-dns", "domain": "iroh.computer", "votes": 1, "user": "b_fiive", "posted_at": "2024-05-07 14:26:39", "comments": 0, "source_title": "Dial by NodeID, no address required!", "source_text": "Dial by NodeID, no address required! - Iroh\n\nJoin Beta\n\nBlog Index\n\n# Dial by NodeID, no address required!\n\nMay 6, 2024 by ramfox, frando\n\n##\n\nThe motivation\n\nWe want iroh to establish connections with as little friction as possible. Our\nfirst big push toward chipping away at this goal was adding holepunching into\niroh. Now, devs no longer need to worry about opening up ports on their\nservers / firewalls or be resigned to only creating peer-to-peer connections\nto computers inside their local NAT.\n\nBut even with holepunching, you need to know where to dial. Dialing a node in\niroh needs either an IP address to talk to, or the URL of a relay to which the\nremote node is connected. To make things easier, we added tickets early-on.\nTickets are easily encodable bytestrings that contain a node id, socket\naddresses and a relay URL. Tickets work well, but they are long - and they\nexpire: People change networks or relays, and then old tickets cannot find you\nanymore. So while tickets work well in some scenarios, they are not\nfrictionless or universally usable.\n\nBut what if you didn\u2019t need to know the relay URL or socket address in order\nto dial a node? Could we enable iroh users to dial peers using the least\namount of information possible, ie can we enable dialing only by Node ID, and\nno other address data?\n\n## The solution\n\nWe had two \u201cguiding lights\u201d while doing research on global node discovery:\n\nFirst, we needed to see a path forward that would allow for a fully\ndistributed topology, even if our first solution had a federated structure. If\nwe (or some contributor) wanted to create or opt into a fully p2p version of\nglobal node discovery in the future, that needed to work in tandem with\nwhatever federated solution we came up with.\n\nSecond, it was very important for us as an organization that we do not invent\nprotocols and specs unnecessarily. Can we instead leverage standards that have\nstood the test of time (and scrutiny) in novel ways to solve our problem? It\nturns out, we can! And we can do it using one of the oldest and most\ndependable technologies we have on the internet: DNS. Using the DNS standard\nalong side Pkarr (public-key addressable resource records), we now have global\nnode discovery in iroh!\n\n## The approach\n\nWe are using two standards: the domain name system (DNS) and Pkarr. DNS is\ntypically used for resolving domain names into their associated IP addresses.\nBut DNS actually relates domain names to resource records, of which IP\naddresses are one type. Pkarr allows us to publish DNS records that resolve\nelliptic curve keys (not domain names) to resource records instead. Our Node\nIDs in iroh are elliptic curve public keys. This means we can publish an\nassociation between iroh Node IDs and some resource records. Importantly,\nthese records are signed, so that you can verify that the record was actually\npublished by the node with the given Node ID.\n\nAs long as iroh has a Node ID and it\u2019s associated relay URL (the address of\nthe relay server that node uses to hole-punch and proxy relay packets), we can\ndial that node. So the Pkarr packet currently only needs to contain the Node\nID and the relay URL of it\u2019s preferred relay server (which we call its \u201chome\nrelay\u201d). When Pkarr publishing is enabled on your iroh node, your node will\ncreate a Pkarr packet with its Node ID and relay URL, sign it, and defaults to\npublishing on an iroh-dns server that is run by number0.\n\nFrom there, others can discover your dialing information by resolving your\nNode ID using regular DNS. It\u2019s worth noting that others must still learn your\nnode ID for this to work,\n\nThe following sections describe the format of the Pkarr publishing records and\nNode discovery via DNS queries in greater detail.\n\n## Node announces via pkarr\n\nNodes announce their address information in Pkarr signed packets. The TXT\nrecords, as described below, are added to the answers section of a DNS server.\nTheir name must be _iroh.<node-id>. The encoded node ID must be the root name,\nno other origin but . (the single dot) is permitted.\n\nThose packets are published to a Pkarr relay server, which is a HTTP service\nhandling PUT requests with the signed packets. iroh\u2019s Pkarr server is iroh-\ndns-server, which serves the received records over DNS. Pkarr packets can also\nbe published onto the bittorrent mainline DHT, as specified by Pkarr (this is\nnot yet supported in iroh natively, see below for our plans).\n\nDNS servers that support this spec will receive these Pkarr signed packets,\ncheck their signature and format validity, and then serve each contained\nrecord, with the DNS server's configured origin domain appended to all record\nnames.\n\n## Node discovery via DNS\n\nWhen connecting to an unknown NodeId, the DNS discovery mechanism in iroh will\nperform a DNS query to discover relays or addresses for the node. The DNS\ndiscovery is configured with a origin domain (which defaults to dns.iroh.link,\na server run by n0). iroh will then perform a DNS query through the configured\nDNS resolver (which defaults to using the host system's nameservers):\n\n_iroh.<z32-node-id>.<origin-domain> TXT\n\n  * _iroh is the record name defined in this spec\n  * <z32-node-id> is the z32 encoding of the 32-byte long NodeId (which is a string of 52 characters)\n  * <origin-domain> is the configured origin domain\n  * TXT is the queried record type\n\nThe returned TXT records must contain a string value of the form key=value, as\ndefined in RFC1464.\n\nThis spec defines the following attributes:\n\n  * relay=<url>: The home relay for this node, e.g. https://euw1-1.derp.iroh.network.\n  * addr=<addr> <addr> .. A space-separated list of socket addresses for this iroh node. Each address is an IPv4 or IPv6 address with a port (e.g. 1.2.3.4:7367 or [::1]:3521\n\n## Future Work: make it fully p2p\n\nThe current approach in iroh is semi-centralized, and\u2014purist beware!!\u2014not\nfully p2p. However, we have a plan that would allow us to support a\ndecentralized version.\n\nWe have an open issue in iroh that explores letting the DNS server resolve\nrecords from bittorrent mainline DHT, which is the original motivation behind\nPkarr.\n\nWe also have an existing example in iroh-examples that publishes the Pkarr\npackets directly to mainline DHT.\n\nLanding these features would result in a fully peer-to-peer node discovery\nsystem. It would be fast, because of caching in DNS servers, but maintain\npeer-to-peer support backed by the mainline DHT.\n\n## Future work: local discovery\n\nDNS (usually) only works if you have internet. What about situations where you\nhave an airgapped or some other local network?\n\nThe solution would be mDNS. This would allow resolving Node IDs in a local\nnetwork. We have an open issue for this on iroh.\n\n## Future work: content discovery\n\nNow that we can discover nodes, can we take it one step further and use a\nsimilar system to discover where you can find a specific document or blob?\n\nWe have an existing prototype in iroh-examples that demonstrates how we might\nsolve content discovery. We can likely leverage the iroh-dns infrastructure\nfor resolving content, as well as node addresses.\n\nYou can expect future blog posts on this topic as we get closer to making\ncontent discovery a reality in iroh.\n\n## Footer\n\nLess net work for networks.\n\nTwitterGitHubYouTube\n\n### Build\n\n  * Documentation\n  * iroh.network\n  * Github\n\n### Learn\n\n  * Blog\n  * Examples\n  * dumbpipe\n  * sendme\n\n### Connect\n\n  * Discord\n  * Discussion\n  * Twitter\n\n\u00a9 2024 n0, inc.\n\n", "frontpage": false}
