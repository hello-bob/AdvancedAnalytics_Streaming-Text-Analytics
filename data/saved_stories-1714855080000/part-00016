{"aid": "40257466", "title": "Syntax, predicates, idioms \u2013 what affects code complexity? (2018)", "url": "https://link.springer.com/article/10.1007/s10664-018-9628-3", "domain": "springer.com", "votes": 1, "user": "mooreds", "posted_at": "2024-05-04 13:21:49", "comments": 0, "source_title": "Syntax, predicates, idioms \u2014 what really affects code complexity? - Empirical Software Engineering", "source_text": "Syntax, predicates, idioms \u2014 what really affects code complexity? | Empirical Software Engineering\n\nLoading [MathJax]/jax/output/HTML-CSS/config.js\n\nSkip to main content\n\nLog in\n\n## Search\n\n## Navigation\n\n  * Find a journal\n  * Publish with us\n  * Track your research\n\n# Syntax, predicates, idioms \u2014 what really affects code complexity?\n\n  * Published: 11 June 2018\n\n  * Volume 24, pages 287\u2013328, (2019)\n  * Cite this article\n\nEmpirical Software Engineering Aims and scope Submit manuscript\n\n  * Shulamyt Ajami^1,\n  * Yonatan Woodbridge^2 &\n  * Dror G. Feitelson ORCID: orcid.org/0000-0002-2733-7709^1\n\n  * 1568 Accesses\n\n  * 28 Citations\n\n  * 4 Altmetric\n\n  * Explore all metrics\n\n## Abstract\n\nProgram comprehension concerns the ability to understand code written by\nothers. But not all code is the same. We use an experimental platform\nfashioned as an online game-like environment to measure how quickly and\naccurately 220 professional programmers can interpret code snippets with\nsimilar functionality but different structures; snippets that take longer to\nunderstand or produce more errors are considered harder. The results indicate,\ninter alia, that for loops are significantly harder than if s, that some but\nnot all negations make a predicate harder, and that loops counting down are\nslightly harder than loops counting up. This demonstrates how the effect of\nsyntactic structures, different ways to express predicates, and the use of\nknown idioms can be measured empirically, and that syntactic structures are\nnot necessarily the most important factor. We also found that the metrics of\ntime to understanding and errors made are not necessarily equivalent. Thus\nloops counting down took slightly longer, but loops with unusual bounds caused\nmany more errors. By amassing many more empirical results like these it may be\npossible to derive better code complexity metrics than we have today, and also\nto better appreciate their limitations.\n\nThis is a preview of subscription content, log in via an institution to check\naccess.\n\n## Access this article\n\nLog in via an institution\n\nPrice includes VAT (Germany)\n\nInstant access to the full article PDF.\n\nRent this article via DeepDyve\n\nInstitutional subscriptions\n\nFig. 1\n\nFig. 2\n\nFig. 3\n\nFig. 4\n\nFig. 5\n\nFig. 6\n\nFig. 7\n\nFig. 8\n\n### Similar content being viewed by others\n\n### Understanding large-scale software systems \u2013 structure and flows\n\nArticle 31 March 2021\n\n### Studying the difference between natural and programming language corpora\n\nArticle 11 January 2019\n\n### Does syntax highlighting help programming novices?\n\nArticle 28 February 2018\n\n## Notes\n\n  1. Subjects who did not answer the academic degree questions were assigned to the group of no degree.\n\n## References\n\n  * Abrah\u00e3o S, Gravino C, Insfran E, Scanniello G, Tortora G (2013) Assessing the effectiveness of sequence diagrams in the comprehension of functional requirements: results from a family of five experiments. IEEE Trans Softw Eng 39 (3):327\u2013342. https://doi.org/10.1109/TSE.2012.27\n\nArticle Google Scholar\n\n  * Adelson B, Soloway E (1985) The role of domain experience in software design. IEEE Trans Softw Eng SE-11(11):1351\u20131360. https://doi.org/10.1109/TSE.1985.231883\n\nArticle Google Scholar\n\n  * Agresti A, Kateri M (2011) Categorical data analysis. Springer, Berlin\n\nMATH Google Scholar\n\n  * Ajami S, Woodbridge Y, Feitelson DG (2017) Syntax, predicates, idioms \u2014 what really affects code complexity? In: 25th international conference of program comprehension, pp 66\u201376. https://doi.org/10.1109/ICPC.2017.39\n\n  * Ali M, Elish MO (2013) A comparative literature survey of design patterns impact on software quality. In: International conference of information science & applications. https://doi.org/10.1109/ICISA.2013.6579460\n\n  * Arunachalam V, Sasso W (1996) Cognitive processes in program comprehension: an empirical analysis in the context of software reengineering. J Syst Softw 34 (3):177\u2013189. https://doi.org/10.1016/0164-1212(95)00074-7\n\nArticle Google Scholar\n\n  * Avidan E, Feitelson DG (2017) Effects of variable names on comprehension: an empirical study. In: 25th international conference in program comprehension, pp 55\u201365. https://doi.org/10.1109/ICPC.2017.27\n\n  * Ball T, Larus JR (2000) Using paths to measure, explain, and enhance program behavior. Computer 33(7):57\u201365. https://doi.org/10.1109/2.869371\n\nArticle Google Scholar\n\n  * Bednarik R, Tukiainen M (2006) An eye-tracking methodology for characterizing porgram comprehension processes. In: 4th symposium eye tracking research & applications, pp 125\u2013132. https://doi.org/10.1145/1117309.1117356\n\n  * Bergersen GR, Gustafsson J-E (2011) Programming skill, knowledge, and working memory among professional software developers from an investment theory perspective. J Individ Differ 32(4):201\u2013209. https://doi.org/10.1027/1614-0001/a000052\n\nArticle Google Scholar\n\n  * Bergersen GR, Sj\u00f8berg DIK, Dyb\u00e5 T (2014) Construction and validation of an instrument for measuring programming skill. IEEE Trans Softw Eng 40(12):1163\u20131184. https://doi.org/10.1109/TSE.2014.2348997\n\nArticle Google Scholar\n\n  * Bishop B, McDaid K (2008) Spreadsheet debugging behaviour of expert and novice end-users. In: 4th international workshop end-user software engineering, pp 56\u201360. https://doi.org/10.1145/1370847.1370860\n\n  * Bishop J, Horspool RN, Xie T, Tillmann N, de Halleux J (2015) Code hunt: experience with coding contests at scale. In 37th international conference and software engineering, vol 2, pp 398\u2013407. https://doi.org/10.1109/ICSE.2015.172\n\n  * Brooks R (1983) Towards a theory of the comprehension of computer programs. Intl J Man-Mach Stud 18(6):543\u2013554. https://doi.org/10.1016/S0020-7373(83)80031-5\n\nArticle Google Scholar\n\n  * Brooks Jr, FP (1987) No silver bullet: essence and accidents of software engineering. Computer 20(4):10\u201319. https://doi.org/10.1109/MC.1987.1663532\n\nArticle MathSciNet Google Scholar\n\n  * Buse RPL, Weimer WR (2008) A metric for software readability. In: International symposium software testing & analysis, pp 121\u2013130. https://doi.org/10.1145/1390630.1390647\n\n  * Butler S, Wermelinger M, Yu Y, Sharp H (2010) Exploring the influence of identifier names on code quality: An empirical study. In: 14th European conference in software maintenance & reengineering. https://doi.org/10.1109/CSMR.2010.27\n\n  * Coe R (2002) It\u2019s the effect size, stupid: what effect size is and why it is important. In: Conference in British educational research association\n\n  * Curtis B (1981) Substantiating programmer variability. Proc IEEE 69(7):846. https://doi.org/10.1109/PROC.1981.12088\n\nArticle Google Scholar\n\n  * Curtis B, Sheppard SB, Milliman P (1979) Third time charm: stronger prediction of programmer performance by software complexity metrics. In: 4th international conference software and engineering\n\n  * Curtis B, Sappidi J, Subramanyam J (2011) An evaluation of the internal quality of business applications: does size matter? In: 33rd international conference software and engineering, pp 711\u2013715. https://doi.org/10.1145/1985793.1985893\n\n  * Denaro G, Pezz\u00e8 M (2002) An empirical evaluation of fault-proneness models. In: 24th international conference software and engineering, pp 241\u2013251. https://doi.org/10.1145/581339.581371\n\n  * Deterding S, Dixon D, Khaled R, Nacke L (2011) From game design elements to gamefulness: Defining \u201cgamification\u201d. In: 15th international academic MindTrek conference: envisioning future media environments, pp 9\u201315. https://doi.org/10.1145/2181037.2181040\n\n  * Dijkstra EW (1968) Go To statement considered harmful. Comm ACM 11(3):147\u2013148. https://doi.org/10.1145/362929.362947\n\nArticle MathSciNet Google Scholar\n\n  * Feigenspan J, Apel S, Liebig J, K\u00e4stner C (2011) Exploring software measures to assess program comprehension. In: International symposium empirical software engineering & measurement, pp 127\u2013136. https://doi.org/10.1109/ESEM.2011.21\n\n  * Feitelson DG (2015) Using students as experimental subjects in software engineering research \u2013 a review and discussion of the evidence. arXiv:http://arXiv.org/abs/1512.08409 [cs.SE]\n\n  * Gamma E, Helm R, Johnson R, Vlissides J (1994) Design patterns: elements of reusable object-oriented software. Addison-Wesley, Boston\n\nMATH Google Scholar\n\n  * Gil Y, Lalouche G (2017) On the correlation between size and metric validity. Empir Softw Eng 22(5):2585\u20132611. https://doi.org/10.1007/s10664-017-9513-5\n\nArticle Google Scholar\n\n  * Gill GK, Kemerer CF (1991) Cyclomatic complexity density and software maintenance productivity. IEEE Trans Softw Eng 17(12):1284\u20131288. https://doi.org/10.1109/32.106988\n\nArticle Google Scholar\n\n  * Gram\u00df D, Frank T, Rehberger S, Vogel-Heuser B (2014) Female characteristics and requirements in software engineering in mechanical engineering. In: International conference in interactive collaborative learning, pp 272\u2013279. https://doi.org/10.1109/ICL.2014.7017783\n\n  * Gruhn V, Laue R (2007) On experiments for measuring cognitive weights for software control structures. In: 6th international conference in cognitive informatics, pp 116\u2013119. https://doi.org/10.1109/COGINF.2007.4341880\n\n  * Hamari J, Shernoff DJ, Rowe E, Coller B, Asbell-Clarke J, Edwards T (2016) Challenging games help students learn: an empirical study on engagement, flow and immersion in game-based learning. Comput Human Behav 54:170\u2013179. https://doi.org/10.1016/j.chb.2015.07.045\n\nArticle Google Scholar\n\n  * Hansen M, Goldstone RL, Lumsdaine A (2013) What makes code hard to understand? arXiv:1304.5257v2[cs.SE]\n\n  * Heathcote A, Brown S, Mewhort DJK (2000) The power law repealed: the case for an exponential law of practice. Psychon Bullet Rev 7 (2):185\u2013207. https://doi.org/10.3758/BF03212979\n\nArticle Google Scholar\n\n  * Henry S, Kafura D (1981) Software structure metrics based on information flow. IEEE Trans Softw Eng SE-7(5):510\u2013518. https://doi.org/10.1109/TSE.1981.231113\n\nArticle Google Scholar\n\n  * Herraiz I, Hassan AE (2011) Beyond lines of code: do we need more complexity metrics?. In: Oram A, Wilson G (eds) Making software: what really works, and why we believe it. O\u2019Reilly Media Inc., pp 125\u2013141\n\n  * Huotari K, Hamari J (2012) Defining gamification: a service marketing perspective. In: 16th international academic MindTrek conference, pp 17\u201322. https://doi.org/10.1145/2393132.2393137\n\n  * Iselin ER (1988) Conditional statements, looping constructs, and program comprehension: an experimental study. Intl J Man-Mach Stud 28(1):45\u201366. https://doi.org/10.1016/S0020-7373(88)80052-X\n\nArticle Google Scholar\n\n  * Jbara A, Feitelson DG (2014) On the effect of code regularity on comprehension. In: 22nd international conference in program comprehension, pp 189\u2013200. https://doi.org/10.1145/2597008.2597140\n\n  * Jbara A, Feitelson DG (2017) How programmers read regular code: a controlled experiment using eye tracking. Empir Softw Eng 22(3):1440\u20131477. https://doi.org/10.1007/s10664-016-9477-x\n\nArticle Google Scholar\n\n  * Kahney H (1983) What do novice programmers know about recursion. In: SIGCHI conference human factors in computer system, pp 235\u2013239. https://doi.org/10.1145/800045.801618\n\n  * Katzmarski B, Koschke R (2012) Program complexity metrics and programmer opinions. In: 20th international conferenc in program comprehension, pp 17\u201326. https://doi.org/10.1109/ICPC.2012.6240486\n\n  * Kirkpatrick K (2016) Coding as sport. Comm ACM 59(5):32\u201333. https://doi.org/10.1145/289867\n\nArticle Google Scholar\n\n  * Klerer M (1984) Experimental study of a two-dimensional language vs Fortran for first-course programmers. Intl J Man-Mach Stud 20(5):445\u2013467. https://doi.org/10.1016/S0020-7373(84)80021-8\n\nArticle Google Scholar\n\n  * Landman D, Serebrenik A, Vinju J (2014) Empirical analysis of the relationship between CC and SLOC in a large corpus of Java methods. In: International conference software maintenance & evolution\n\n  * Letovsky S (1987) Cognitive processes in program comprehension. J Syst Softw 7(4):325\u2013339. https://doi.org/10.1016/0164-1212(87)90032-X\n\nArticle Google Scholar\n\n  * Lumley T, Diehr P, Emerson S, Chen L (2002) The importance of the normality assumption in large public health data sets. Ann Rev of Publ Health 23 (1):151\u2013169\n\nArticle Google Scholar\n\n  * Mair P, Hatzinger R (2007) Extended Rasch modeling: the eRm package for the application of IRT models in R. J Stat Softw 20(9). https://doi.org/10.18637/jss.v020.i09\n\n  * McCabe T (1976) A complexity measure. IEEE Trans Softw Eng SE-2(4):308\u2013320. https://doi.org/10.1109/TSE.1976.233837\n\nArticle MathSciNet MATH Google Scholar\n\n  * Munson JC, Khoshgoftaar TM (1990) Applications of a relative complexity metric for software project management. J Syst Softw 12 (3):283\u2013291. https://doi.org/10.1016/0164-1212(90)90051-M\n\nArticle Google Scholar\n\n  * Myers GJ (1977) An extension to the cyclomatic measure of program complexity. SIGPLAN Not 12(10):61\u201364. https://doi.org/10.1145/954627.954633\n\nArticle Google Scholar\n\n  * Myers RH, Montgomery DC, Vining GG, Robinson TJ (2010) Generalized linear models: with applications in engineering and the sciences. Wiley, Hoboken\n\nBook MATH Google Scholar\n\n  * Mynatt BT (1984) The effect of semantic complexity on the comprehension of program modules. Intl J Man-Mach Stud 21(2):91\u2013103. https://doi.org/10.1016/S0020-7373(84)80060-7\n\nArticle Google Scholar\n\n  * Newell A, Rosenbloom PS (1981) Mechanisms of skill acquisition and the law of practice. In: Anderson JR (ed) Cognitive skills and their acquisition. Lawrence Erlbaum Association, pp 1\u201355\n\n  * Nunez WZ, Marin VJ, Rivero CR (2017) ARCC: Assistant For repetitive code comprehension. In: 11th joint European software engineering conference & symposium foundations of software engineering, pp 999\u20131003. https://doi.org/10.1145/3106237.3122824\n\n  * Ohlsson N, Alberg H (1996) Predicting fault-prone software modules in telephone switches. IEEE Trans Softw Eng 22(12):886\u2013894. https://doi.org/10.1109/32.553637\n\nArticle Google Scholar\n\n  * Parnin C, Siegmund J, Peitek N (2017) On the nature of programmer expertise. In: 28th psychology of programming interest group annals workshop\n\n  * Pink DH (2009) Drive: The surprising truth about what motivates us. Tiverhead Hardcover\n\n  * Piwowarski P (1982) A nesting level complexity measure. SIGPLAN Not 17 (9):44\u201350. https://doi.org/10.1145/947955.947960\n\nArticle Google Scholar\n\n  * Prechelt L (1999) Comparing Java vs. C/C++ efficiency differences to interpersonal differences. Comm ACM 42(10):109\u2013112. https://doi.org/10.1145/317665.317683\n\nArticle Google Scholar\n\n  * Rajlich V, Cowan GS (1997) Towards standard for experiments in program comprehension. In: 5th IEEE international workshop program comprehension, pp 160\u2013161. https://doi.org/10.1109/WPC.1997.601284\n\n  * Rich C (1987) Inspection methods in programming: Clich\u00e9s and plans. A.I. Memo 1005, MIT Artificial Intelligence Laboratory\n\n  * Rilling J, Klemola T (2003) Identifying comprehension bottlenecks using program slicing and cognitive complexity metrics. In: 11th IEEE international workshop program comprehension, pp 115\u2013124\n\n  * Sackman H, Erikson WJ, Grant EE (1968) Exploratory experimental studies comparing online and offline programming performance. Comm ACM 11(1):3\u201311. https://doi.org/10.1145/362851.362858\n\nArticle Google Scholar\n\n  * Schneidewind N, Hinchey M (2009) A complexity reliability model. In: 20th international symposium software reliability engineering, pp 1\u201310. https://doi.org/10.1109/ISSRE.2009.10\n\n  * Shao J, Wang Y (2003) A new measure of software complexity based on cognitive weights. Canadian. J Elect Comput Eng 28(2):69\u201374. https://doi.org/10.1109/CJECE.2003.1532511\n\nArticle Google Scholar\n\n  * Sharafi Z, Soh Z, Gu\u00e9h\u00e9neuc Y-G, Antoniol G (2012) Women and men \u2014 different but equal: on the impact of identifier style on source code reading. In: 20th international conferenc program comprehension, pp 27\u201336. https://doi.org/10.1109/ICPC.2012.6240505\n\n  * Shepperd M (1988) A critique of cyclomatic complexity as a software metric. Softw Eng J 3(2):30\u201336. https://doi.org/10.1049/sej.1988.0003\n\nArticle Google Scholar\n\n  * Shneiderman B, Mayer R (1979) Syntactic/semantic interactions in programmer behavior: a model and experimental results. Intl J Comput Inf Syst 8(3):219\u2013238. https://doi.org/10.1007/BF00977789\n\nArticle MATH Google Scholar\n\n  * Siegmund J, K\u00e4stner C, Liebig J, Apel S, Hanenberg S (2014) Measuring and modeling programming experience. Empir Softw Eng 19(5):1299\u20131334. https://doi.org/10.1007/s10664-013-9286-4\n\nArticle Google Scholar\n\n  * Siegmund J, Schumann J (2015) Confounding parameters on program comprehension: a literature survey. Empir Softw Eng 20(4):1159\u20131192. https://doi.org/10.1007/s10664-014-9318-8\n\nArticle Google Scholar\n\n  * Soloway E, Ehrlich K (1984) Empirical studies of programming knowledge. IEEE Trans Softw Eng SE-10(5):595\u2013609. https://doi.org/10.1109/TSE.1984.5010283\n\nArticle Google Scholar\n\n  * Sonnentag S (1998) Expertise in professional software design: a process study. J App Psychol 83(5):703\u2013715. https://doi.org/10.1037/0021-9010.83.5.703\n\nArticle Google Scholar\n\n  * Sonnentag S, Niessen C, Volmer J (2006) Expertise in software design. In: Ericsson KA, Charness N, Feltovich PJ, Hoffman RR (eds) The Cambridge handbook of expertise and expert performance. Cambridge University Press, pp 373\u2013387\n\n  * Vinju JJ, Godfrey MW (2012) What does control flow really look like? Eyeballing the cyclomatic complexity metric. In: 12th IEEE international working conference source code analysis & manipulation\n\n  * von Mayrhauser A, Vans AM (1995) Program comprehension during software maintenance and evolution. Computer 28(8):44\u201355. https://doi.org/10.1109/2.402076\n\nArticle Google Scholar\n\n  * Welch BL (1938) The significance of the difference between two means when the population variances are unequal. Biometrika 29(3/4):350\u2013362\n\nArticle MATH Google Scholar\n\n  * Weyuker EJ (1988) Evaluating software complexity measures. IEEE Trans Softw Eng 14(9):1357\u20131365. https://doi.org/10.1109/32.6178,\n\nArticle MathSciNet Google Scholar\n\n  * Yoder KJ, Belmonte MK (2010) Combining computer game-based behavioral experiments with high-density EEG and infrared gaze tracking. J Vis Exp 46, art. no. e2320. https://doi.org/10.3791/2320\n\nDownload references\n\n## Acknowledgments\n\nMany thanks to Micha Mandel for his help with the statistical analysis, and to\nthe anonymous reviewers for their comments and suggestions.\n\n## Author information\n\n### Authors and Affiliations\n\n  1. Department of Computer Science, The Hebrew University, 91904, Jerusalem, Israel\n\nShulamyt Ajami & Dror G. Feitelson\n\n  2. Department of Statistics, The Hebrew University, 91905, Jerusalem, Israel\n\nYonatan Woodbridge\n\nAuthors\n\n  1. Shulamyt Ajami\n\nView author publications\n\nYou can also search for this author in PubMed Google Scholar\n\n  2. Yonatan Woodbridge\n\nView author publications\n\nYou can also search for this author in PubMed Google Scholar\n\n  3. Dror G. Feitelson\n\nView author publications\n\nYou can also search for this author in PubMed Google Scholar\n\n### Corresponding author\n\nCorrespondence to Dror G. Feitelson.\n\n## Additional information\n\nCommunicated by: David Lo and Alexander Serebrenik\n\nDror Feitelson holds the Berthold Badler chair in Computer Science. This\nresearch was supported by the ISRAEL SCIENCE FOUNDATION (grant no. 407/13).\nThis paper is an invited extended version of a paper from ICPC 2017.\n\n## Rights and permissions\n\nReprints and permissions\n\n## About this article\n\n### Cite this article\n\nAjami, S., Woodbridge, Y. & Feitelson, D.G. Syntax, predicates, idioms \u2014 what\nreally affects code complexity?. Empir Software Eng 24, 287\u2013328 (2019).\nhttps://doi.org/10.1007/s10664-018-9628-3\n\nDownload citation\n\n  * Published: 11 June 2018\n\n  * Issue Date: 15 February 2019\n\n  * DOI: https://doi.org/10.1007/s10664-018-9628-3\n\n### Share this article\n\nAnyone you share the following link with will be able to read this content:\n\nSorry, a shareable link is not currently available for this article.\n\nProvided by the Springer Nature SharedIt content-sharing initiative\n\n### Keywords\n\n  * Code complexity\n  * Program understanding\n  * Gamification\n\n## Access this article\n\nLog in via an institution\n\nPrice includes VAT (Germany)\n\nInstant access to the full article PDF.\n\nRent this article via DeepDyve\n\nInstitutional subscriptions\n\nAdvertisement\n\n### Discover content\n\n  * Journals A-Z\n  * Books A-Z\n\n### Publish with us\n\n  * Publish your research\n  * Open access publishing\n\n### Products and services\n\n  * Our products\n  * Librarians\n  * Societies\n  * Partners and advertisers\n\n### Our imprints\n\n  * Springer\n  * Nature Portfolio\n  * BMC\n  * Palgrave Macmillan\n  * Apress\n\n128.140.102.183\n\nNot affiliated\n\n\u00a9 2024 Springer Nature\n\n", "frontpage": false}
