{"aid": "40246793", "title": "Lessons learned self-hosting Renovate", "url": "https://www.jvt.me/posts/2024/05/03/renovate-self-hosting-lessons/", "domain": "jvt.me", "votes": 1, "user": "ingve", "posted_at": "2024-05-03 12:15:07", "comments": 0, "source_title": "Lessons learned self-hosting Renovate \u00b7 Jamie Tanna | Software Engineer", "source_text": "Lessons learned self-hosting Renovate \u00b7 Jamie Tanna | Software Engineer\n\nWritten by Jamie Tanna on May 3, 2024 CC-BY-NC-SA-4.0 Apache-2.0 13 mins\n\n# Lessons learned self-hosting Renovate\n\nAs I wrote a few weeks ago I'm a big fan of Renovate. I've been using Renovate\nfor ~5 years as a user and as an operator, using a variety of hosted and self-\nhosted options, leading me to being seen as \"the Renovate person\".\n\nThrough this experience, I've learned a lot about Renovate and some tips to\nmake operating it that little bit better.\n\n## My experiences with self-hosting Renovate\n\nIt may be useful to understand how I've been using Renovate over the years,\nbefore we start getting into what I've learned.\n\nI was first introduced to it while at Capital One, where we used the Mend SAAS\nPlatform for Software Composition Analysis (SCA), largely focussed on license\nand security remediation.\n\nAs part of Mend's platform, it also had an offering of Renovate, which we\nstarted trying out after one of the UK teams started shouting out about how it\nwas improving a number of things for their software maintenance. At the time,\nas an organisation we were largely only updating dependencies when there were\nsecurity issues, although there were pockets of senior engineers who tried to\nkeep some things up-to-date, it was much more difficult when you're doing it\nmanually!\n\nOne of the things that we found super useful with this offering was how fast\nit seemed.\n\nWe were running a self-hosted GitHub Enterprise instance, so my team had\nseveral GitHub organisations for our various applications. The speed was clear\nwhen we would create an <org>/renovate-config repo to start setting up\npresets, and in the time it takes to refresh the page, Renovate had already\npushed an initial commit to the repo with a base configuration and README.\n\nWe continued to see this, for instance Renovate rebasing PRs immediately when\nasked or on other merges to default branches, and definitely helped make it a\ngreat experience, on top of some tips I wrote about having helped my team.\n\nAround the same time, I decided that I wanted Renovate for my Open Source\nprojects on GitLab.com, which I set up through the official Renovate runner\npipeline. This offering didn't give me the immediate PR feedback that I'd\ngotten used to with the setup we had at Capital One, but I was more than happy\nwith it, and wasn't exactly speeding through all the maintenance updates, so\nit wasn't holding me back at all.\n\nNot long after I joined Deliveroo, we were starting to roll out Dependabot for\nour dependency updates. After years of using Renovate, I was finding it a\nlittle painful, especially having to hand-craft dependabot.ymls across each of\nour repos and then keeping them up-to-date.\n\nAfter discussing with members of the team, I put together a proof of concept\nusing Renovate's GitHub Action as a low-effort way to start getting some\nfeedback from the team on the benefits and explore the developer experience\nimprovements. As we started to want to roll it out a little more in our repos,\nand started to feel the pain of not having the PR feedback, especially\ncompared to what we had with Dependabot, I found the (commercial, but free)\nMend Renovate On-Prem (now Mend Renovate Community Edition). I spent some time\ngetting it set up and then we started onboarding the whole organisation onto\nit, improving the ability to keep things up-to-date so much more easily.\n\nThe Community Edition works differently to the purely Open Source offerings by\nbundling in webhook processing, so you can get Renovate performing real-time\nactions, rather than waiting for the next schedule.\n\nOff the back of using and enjoying the commercial offering, in August last\nyear I moved to self-hosting Mend Renovate Community Edition on Fly.io for my\npersonal projects, instead of using the GitLab CI-driven setup.\n\nAt Elastic, we've been using the free Mend Renovate SAAS for a good while\n(prior to me joining) and have been finding it works really well. However,\npart of the reason I'm writing this post is that we're considering self-hosted\nMend Renovate Community Edition and I wanted to share some balanced views on\nit. We're considering moving away for some additional control that we can't\nget with the hosted version, at least right now.\n\nOver the last few years I've been responsible for operating + supporting\nRenovate for organisations with ~2000 repos, of which include several large\nmonorepos that get hundreds of changes merged per week (and maybe more often\nthan that!).\n\n## My recommended journey\n\nLet's say that you've discovered Renovate, and you're looking at how best to\nget started with it for your organisation.\n\nI'd recommend that you take it step-by-step, moving up to the next stage if\nyou feel the need. You're also welcome to skip some stages and move to an end\nstate if you'd prefer to cut out some of the work.\n\nIf you can, start with the free hosted app by Mend, which allows you to focus\non providing the value of Renovate to teams, instead of managing\ninfrastructure and getting teams bought into it.\n\n### Start with GitLab CI/GitHub Actions\n\nAt this early stage, you may not be able to get approval to use the hosted\nversion or to spin up the infrastructure associated with self-hosted Renovate,\nso instead we can start with using the Open Source project to gain buy-in.\n\nDepending on what your source forge is, you may be able to use a pre-built\nsetup like the GitHub Action or GitLab CI pipeline, which makes it\nstraightforward to run Renovate and wire in some platform-specific settings.\n\nStart by setting it up to work on a schedule, for instance once per weekday.\nThis will make it a little clearer that there's not expected to be immediate\nfeedback on PRs, but still allow you to get updates performed fairly often.\nThen, if you're finding this is still not ideal, trying to schedule it so it\nruns at i.e. 0800, 1200 and 1600 should allow for a few opportunities in the\nday for Renovate to update existing PRs, and allow teams to feel like things\nare still progressing.\n\nWhen first rolling this out at Deliveroo, we only had ~30 of ~2000 repos\nonboarded to Renovate, which made Renovate understandably slow as it needed to\nscan each repo to work out if the repo was onboarded, and if so process it.\nFor some of our very large monorepos, this took a long time to clone, and then\nend up throwing that data away.\n\nAfter discussions upstream, I found that the optimizeForDisabled configuration\nwould alleviate this performance impact, and so I'd recommend you switch it on\ntoo, especially until you get to having more repos onboarded than not.\n\nSomething you may also find is that, naturally, some repos are going to take\nlonger to process. It's worth investigating how long the execution takes\nacross your repos, and considering doing an up-front discovery of repositories\nand then passing them to Renovate. This allows you to also pre-select repos\nthat have a Renovate configuration, and can be used to split them into buckets\ni.e. repos that start with [a-e] or splitting the large monorepos from the\nrest of your repos.\n\nIt's also worthwhile having the ability to schedule ad-hoc rebuilds, in the\ncase that a scheduled run has failed, or if you've suddenly got a lot of\nthings you want rescanned and don't want to wait until the next window.\n\n### Soon, you'll want faster feedback\n\nMy experience is that as you have more folks using Renovate on a schedule,\nthey'll start to feel like it's very \"slow\" to get MRs merged or updated,\nbecause there's no immediate feedback and i.e. asking for Renovate to rebase a\nMR requires you waiting until the next scheduled run, which can be a pain.\n\nNow, this isn't always true - I've spoken to a couple of people who have never\nrun the Community Edition, which includes real-time processing using webhooks,\nas their organisations just haven't felt like they need it, which is cool to\nhear.\n\nBut if you are feeling this, you may want to move to the Community Edition, or\nthe Hosted app, especially if you've now got more buy-in from the wider\nengineering organisation around how useful Renovate is.\n\n### Community edition\n\nAs noted in my post about setting up the Community Edition on Fly.io, there's\nactually very little you need to do other than pulling the upstream Docker\nimage and wiring in some environment variables, which is a pretty nice\nexperience!\n\nHowever, it's worth reading the lessons below before you get started, as it'll\nhelp gauge what additional things may be missing from the quick start guide.\n\n### Hosted\n\nAlternatively, if you're happy with an external app being able to read your\nrepositories, and possibly also reading your private packages, then I'd very\nmuch recommend the hosted app, especially as it's free \ud83e\udd11\n\nBut this doesn't work if:\n\n  * You run anything non-GitHub.com\n  * You want to select repos to onboard on a case-by-case basis, as GitHub has a limit of 75 installations of an app - the alternative is to install the app on the whole org\n  * You want to use a custom Fine-Grained Personal Access Token to allow access at a very granular level\n\n## Lessons learned\n\nHopefully that gives you a good basis for my experience, and how I'd recommend\nto get started with self-hosting. But what about some things to watch out for\nwhen you're self hosting?\n\n### You may want a beefier machine\n\nAs noted in the docs, the Community Edition only scales vertically, not\nhorizontally. That means you'll need to throw more CPU and memory at the\nsingle running instance to get it to operate under more load, or with larger\nrepos.\n\nThere is the ability to split into more high-availability mode with the\nEnterprise Edition, but I've not (yet?) been able to give that a go, so can\nonly talk about my experience with the Community Edition.\n\nI know one thing I looked at in the past - which I didn't get round to doing -\nwas to split the webhook-handling server from the schedule-running server.\nThis would at least allow them to operate independently of each other and\npossibly reduce the overhead on all jobs when the schedule is running, but\nunsure if it'd help much.\n\nTherefore, consider the resources you're allocating to Renovate, and keep an\neye on your metrics. For my app on Fly.io, I've got 1024MB and 1 vCPU, which\nkinda works. But I'm also the only user, and am happy when it crashes.\n\n### Be careful about disk space\n\nSpeaking of keeping an eye on your metrics, you really need to watch out for\ndisk usage!\n\nRenovate will generally operate within /tmp/renovate directory (partially\ntuned by the cacheDir configuration, and tries to clean itself up as well as\nit can.\n\nHowever, Renovate can only manage things it knows about, and because it'll\ncall out to go, gradle and npm (to name a few) which store copies of\ndependencies in different places, you may have other locations on disk that\nare slowly filling up to the point that you're then unable to execute any\njobs.\n\nA workaround for this is to make sure that these tools move to specific\nlocations in /tmp, and you attach external storage for the /tmp directory to\nreduce the risk of disk space issues.\n\nFor instance Go will default the GOPATH to ~/go (which in the container\nusually becomes /go). After processing many repositories, the GOPATH will get\nquite large, and then lead to the disk running out of space. One option to\nmanage this better is to set the GOPATH:\n\n    \n    \n    # via https://gitlab.com/tanna.dev/renovate-runner/-/blob/9d2a6734935329a1c43668f28869477aeb0f382d/Dockerfile#L14 ENV GOPATH=/tmp/renovate/go\n\nA slightly hacky solution to keep on top of disk space is to use the\nallowedPostUpgradeCommands and postUpgradeTasks configurations to create a\nscript that runs - after each and every Renovate upgrade, so make sure it's\nfast! - to check whether a directory is getting too large and if so, clean it\nout.\n\nDoing it with postUpgradeTasks means it shouldn't break any ongoing jobs,\nwhich may happen if you're periodically cleaning up the space in the\nbackground i.e. using a systemd timer.\n\nSomething you may also notice is that a lot of disk space is used just from\nwhat's already on the image - but as I found when I asked this, that's\nexpected.\n\n### Understand how teams are using it\n\nIf you're running Renovate for your organisation, you're not just responsible\nfor the infrastructure but also helping teams make the most of it. It can be\nreally important to understand how teams are using Renovate, to see if there's\nanything the platform is doing that could be improved, but also to help\nsupport them in their usage.\n\nThere's great official documentation around how to reduce the noise that teams\nmay be perceiving with Renovate, as well as the \"best practices\" guide.\n\nUnderstanding cases where teams are repeating the same configuration is\nabsolutely something that should lead into organisation-wide shared presets,\nas well as presets for a specific team. A few weeks ago I wrote a tool that\nallows you to scan for all Renovate configurations, and pop them into an\nSQLite database which allows for further filtering. I've already found this\nvery useful, and noticed some teams doing some interesting things that we can\npromote into our shared presets.\n\nIt can also be useful to see if you can visualise how teams interact with\nRenovate as well as feeding the data into your Internal Developer\nPortal/Platform to bring it to where teams are.\n\n### Wire in secrets for private packages\n\nRenovate boasts support for a huge number of ecosystems already, as well as\ncrafting additional support through regexes. But one thing it can't do out-of-\nthe-box is reach into your private artifact repositories.\n\nFortunately, it does have support for authenticating to many artifact\nrepositories so you can i.e. update all your private Docker images, Maven\npackages, etc.\n\nThis is something that can be a huge benefit of going self-hosted, as you're\nable to connect it to things that are either VPN'd off from the outside world,\nor just that you'd be apprehensive of allowing the hosted service connecting\nto.\n\nI've found that it can be useful to take advantage of the fact that when\nbaking in a config.js for Renovate to execute against your repos, you can\neither reference environment variables (avoiding putting secrets in source\ncontrol) or even take advantage of the fact that it's just JavaScript and have\nsome code that reaches out to i.e. Vault or AWS Secrets Manager as part of the\nstartup process, and then expose those credentials to Renovate.\n\n### Avoid exposing the status endpoint?\n\nIn the Mend Renovate On-Prem, the precursor to Mend Renovate Community\nEdition, there was an HTTP endpoint that listed what was currently being\nprocessed, or was up next.\n\nBecause you're likely exposing the Renovate app to the world - so i.e. GitLab\ncan send webhooks to it - you'd also be exposing that endpoint to the world,\nwhich would not be ideal if you didn't want to disclose the names of\nrepositories you had in your organisation, which could be a security/privacy\nrisk.\n\nAs of the Mend Renovate Community Edition, this now requires explicit\nenabling, and authentication, so it's no longer a concern.\n\n## Conclusion\n\nI hope the above doesn't dissuade you from self-hosting Renovate, but helps\nyou have a more informed decision.\n\nI've absolutely loved the ability to be able to self-host it (unlike other\noptions in the dependency update space) and love that it's also available as a\nhosted SAAS app that allows you to get started with it without needing to run\nanything yourself.\n\nAnd finally, some of the additional benefits you get from self-hosting that\nyou don't get with the SAAS app (as far as I'm aware) are:\n\n  * Ensure all teams use internal base options (soon coming to hosted app)\n  * Sync the Renovate data with i.e. Backstage, for instance using secustor/backstage-plugins built by one of the Renovate maintainers\n  * Have all teams onboarded to Renovate by default for i.e. Docker dependencies, but then allow them to onboard for the full configuration (via)\n\nLet me know what you think!\n\nThis post's permalink is https://www.jvt.me/posts/2024/05/03/renovate-self-\nhosting-lessons/ and has the following summary:\n\n.\n\n> What I've learned operating Renovate as a self-hosted app on GitHub Actions,\n> GitLab CI, and the Mend Renovate Community Edition, and some tips for\n> getting started\n\nThe canonical URL for this post is\nhttps://www.jvt.me/posts/2024/05/03/renovate-self-hosting-lessons/ .\n\nWritten by Jamie Tanna on Fri, 03 May 2024 11:56:00+01:00, and last updated on\nFri, 03 May 2024 11:56:00+01:00.\n\nContent for this article is shared under the terms of the Creative Commons\nAttribution Non Commercial Share Alike 4.0 International, and code is shared\nunder the Apache License 2.0.\n\n#blogumentation #renovate.\n\nHas this content helped you? Did it solve that difficult-to-resolve issue\nyou've been chasing for weeks? Or has it taught you something new you'll be\nable to re-use daily?\n\nPlease consider supporting me so I can continue to create content like this!\n\nThis post was filed under articles.\n\n\u2190 Top\n\nWant to get in touch? Drop me an email at hi@jamietanna.co.uk. I try to get\nback to everything, if I don't reply in a couple of weeks, feel free to give\nme a nudge!\n\nYou can also check out a list of all the places /elsewhere you can find me.\n\n\u00a9 2024 Jamie Tanna. Post content and code snippets licensing is detailed on\nrespective pages, otherwise default to Creative Commons Attribution Non\nCommercial Share Alike 4.0 International and Apache License 2.0. Site design\nreleased under the MIT License, based on Hack.css. Proudly hosted on AWS using\nS3 + CloudFront, deployed by GitLab CI, and generated by 6456321126 on Fri, 03\nMay 2024 11:56:00 +0100..\n\n", "frontpage": false}
