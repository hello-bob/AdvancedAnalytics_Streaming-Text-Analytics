{"aid": "40080883", "title": "How Microsoft Scales Git for Monorepos", "url": "https://www.infoworld.com/article/3715261/how-microsoft-scales-git-for-massive-monorepos.html", "domain": "infoworld.com", "votes": 1, "user": "kryster", "posted_at": "2024-04-18 21:25:35", "comments": 0, "source_title": "How Microsoft scales Git for massive monorepos", "source_text": "How Microsoft scales Git for massive monorepos | InfoWorld\n\nClose Ad\n\ninfoworld\n\nUNITED STATES\n\n  * United States\n  * United Kingdom\n\n  * App Dev\n  * Cloud\n  * Gen AI\n  * Machine Learning\n  * Analytics\n  * Newsletters\n  * White Papers/Webcasts\n\n\u00d7\n\nClose\n\nEnterprise Microsoft\n\nBy Simon Bisson, Contributor, InfoWorld\n\n| Apr 18, 2024 2:00 am PDT\n\n# How Microsoft scales Git for massive monorepos\n\n### Microsoft has rolled its Git Virtual File System and Scalar optimizations\ninto a fork of Git designed to support enormous repos and large distributed\nteams.\n\nMemoryCatcher / Siggy Nowak (CC0)\n\nBuilding applications at scale is nothing compared to building an operating\nsystem like Windows, especially when it comes to source code control. How do\nyou manage the repository (or repositories) for such a software behemoth, with\nthousands of developers and testers, and with a complex build pipeline that\u2019s\ncontinuously delivering fresh code?\n\nMicrosoft\u2019s history with internal source control systems is convoluted. You\nmight think it used the now discontinued Visual SourceSafe, but that was most\nappropriate for local file systems and smaller projects. Instead, Microsoft\nused many different tools over the years, initially an internal fork of the\nfamiliar Unix Revision Control System, before standardizing on Perforce Source\nDepot.\n\n## Git hits a wall in Redmond\n\nMeanwhile some parts of the business used Visual Studio\u2019s Team Foundation\nServer, before switching to using Git as the foundation of a common\nengineering platform for the entire company. Team Foundation Server supported\nGit, and the mix of a visual tool and the command line supported lots of\ndifferent use cases across Microsoft.\n\n#### [ Keep up with the latest developments in software development. Subscribe\nto the InfoWorld First Look newsletter ]\n\nThat shift made a lot of sense, as Git was designed to deal with the\ncomplexities of managing an enormous code base with a huge number of globally\ndistributed developers. It\u2019s not surprising that there are a lot of\nsimilarities between how Windows and Linux are built, and Git has features\nthat work well for both.\n\nHowever, there\u2019s one big problem for a massive repository like Windows. For\nall its complexity and its many moving parts, tools like Windows and Office\nare developed in single repositories, massive monorepos that take up vast\namounts of storage space\u2014some 300GB and 3.5 million files for Windows alone.\nThe problem stems from how Git treats repositories: replicating them, and\nevery change, to every single copy. For Windows, the size of the repo would\nquickly overwhelm developer PCs and quickly clog up the developer network.\n\n## Enter GVFS \u2013 the Git Virtual File System\n\nA massive repo might be workable if all your developers worked on a single\nultrafast communications network and high-speed storage network, but it\ncertainly isn\u2019t when you\u2019re a globally distributed team that mixes offices and\nhome workers. Microsoft needed to develop a way to treat a Git repository as a\nvirtual file system, creating local files only when they\u2019re needed, instead of\ncopying the entire repository over an unknown network.\n\nThe resulting tool balances the capabilities of Git with Microsoft\u2019s\ndevelopment needs. It doesn\u2019t change Git at all, though it sacrifices Git\u2019s\noffline capabilities. That was a good decision, back when the vast majority of\nMicrosoft\u2019s developers worked in Redmond.\n\nGit Virtual File System, GVFS, which ships as a Windows file system driver, is\ndesigned to monitor your working directory and your .git folder, pulling down\nonly what\u2019s needed for the work you\u2019re doing and checking out only the files\nyou need. You can still see the contents of the repository, as if it were an\nextension of your PC\u2019s file system, much like the way OneDrive files are\ndownloaded only when you explicitly select them.\n\nAs Microsoft began using GVFS it noticed various edge cases that showed that\nGit was doing unnecessary work on files, so its engineers moved to providing\nfixes for these issues to the Git project. These fixes were designed to\nimprove Git performance for large repositories, allowing Microsoft to shift to\none enormous internal monorepo for source control.\n\n## Scaling up Git with Scalar\n\nThings didn\u2019t stop there. Now we\u2019re on the third public version of Microsoft\u2019s\nwork on scaling Git, this time as part of the company\u2019s own fork of Git\u2014a\nspecial-purpose Git distribution designed to support monorepos.\n\nThe current release builds on work released in 2020 as Scalar. Scalar is an\napplication that accelerates any Git repository, no matter where it\u2019s hosted.\nIt requires Microsoft\u2019s own custom Git implementation, though the long-term\naim is to have much of the necessary server-side code part of the official Git\nrelease. Scalar is an opinionated tool, with a focus on improving Git\nperformance.\n\nScalar is a .NET command line application that runs in the background,\nmanaging registered repositories. You can use it alongside GVFS, or as a\nstand-alone accelerator, taking advantage of recent Git features. Microsoft\nuses Scalar with GVFS internally, placing cache servers between its\nrepositories and developer PCs. GVFS isn\u2019t essential for Scalar, but it\ncertainly helps.\n\nOnce installed and running, Scalar can be used alongside a traditional Git\nclient, cloning repositories using a local cache or a remote cache server and\nmanaging your local repository. The default is to make a sparse checkout,\nwhich allows Scalar to, as Microsoft put it in the announcement blog post,\n\u201cfocus on the files that matter.\u201d\n\nScalar sets up the local clones, then developers can use Git as normal. This\nis handled by offering a tiered approach to file management: a high-level\nindex of all the files in a repository (which can be many millions), a sparse\nworking directory of the files you might need for the task your working on,\nand finally a set of the files you have modified.\n\n## Managing Git in the background\n\nMuch of Scalar\u2019s work happens in the background, so that features like Git\u2019s\ngarbage collection don\u2019t block commits when rewriting and updating files.\nScalar does this by setting key Git configurations to avoid foreground\noperations. You still use Git as you normally do, but what could be both\nprocessor-intensive and network-intensive repository maintenance operations\nare handed off to the background Scalar process, where they can operate at a\nlower priority without affecting the work you\u2019re doing.\n\nWith a set of indexes managing your working directory, Scalar uses GVFS to\nclone repositories using only the root files, downloading additional files as\nneeded. Files are stored inside a scalar directory, with the working directory\nin a src subdirectory. This file structure lets you manage builds and branches\nlocally.\n\nMicrosoft\u2019s work on Scalar has led to it shipping its own Git distribution\nwith the Scalar CLI. You can find releases of Microsoft\u2019s Git for Windows,\nmacOS, and Linux (as a Debian package, with other distributions needing to\ncompile from source). There\u2019s also a portable Windows version. Microsoft is\nnow calling its features \u201cadvanced Git features,\u201d an approach that makes sense\nof the work it\u2019s doing to prove how Git can work at massive scale.\n\nIf you want to try it out, you first need to set up your own Git server, ready\nto host your own repositories. You can use familiar Git tools to get running,\nstoring code and artifacts, before switching to Scalar and GVFS. Although\nScalar will work with other Git implementations, you should look for one that\nsupports the partial clone option, which is the official alternative to GVFS.\n\nThe current version of Microsoft Git includes server-side enhancements to\nensure that massive monorepos behave much like smaller repositories, without\nrequiring additional tooling to construct builds from multiple sources.\n\n## Why Scalar?\n\nYou can think of Scalar as a proving ground for the direction Microsoft would\nlike Git to go. Forking Git allows the company to try these features out\nbefore it offers them back to the wider Git community. It\u2019s a reasonable\napproach that makes the code available to the community to evaluate before\nanyone makes a pull request.\n\nWith so many projects, communities, and companies relying on Git, it\u2019s crucial\nthat changes don\u2019t break things for its millions of users and the billions of\nlines of code hosted in repositories all across the world. Not everyone needs\nthe tools in Scalar and GVFS, but Microsoft certainly does, and other projects\nmay well need similar features down the line.\n\nBig open standards projects like JavaScript and HTML work by demonstrating\nthat the major downstream platforms support the project\u2019s planned new features\nbefore they\u2019re committed to specifications, hiding them behind feature flags\nfor testing. Microsoft\u2019s approach to Git is similar.\n\nIt allows Microsoft to reap the benefits of these new features in its own\nfork, while the rest of us to continue using our own Git installs or cloud-\nbased Git services, without having to worry about Scalar and how it works\nuntil it\u2019s part of the platform. Then the transition is as easy as running an\nupdate on a server.\n\nNext read this:\n\n  * Why companies are leaving the cloud\n  * 5 easy ways to run an LLM locally\n  * Coding with AI: Tips and best practices from developers\n  * Meet Zig: The modern alternative to C\n  * What is generative AI? Artificial intelligence that creates\n  * The best open source software of 2023\n\nRelated:\n\n  * Devops\n  * Version Control Systems\n  * Microsoft\n  * Software Development\n\nAuthor of InfoWorld's Enterprise Microsoft blog, Simon Bisson has worked in\nacademic and telecoms research, been the CTO of a startup, run the technical\nside of UK Online, and done consultancy and technology strategy.\n\nFollow\n\nCopyright \u00a9 2024 IDG Communications, Inc.\n\nInfoWorld\n\nCopyright \u00a9 2024 IDG Communications, Inc.\n\nExplore the Foundry Network descend\n\n  * CIO\n  * Computerworld\n  * CSO Online\n  * InfoWorld\n  * Network World\n\n### InfoWorld wants to show you notifications\n\n#### You can turn off notifications at any time from your browser\n\n##### Powered by subscribers\n\n", "frontpage": false}
