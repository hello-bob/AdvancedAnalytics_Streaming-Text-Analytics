{"aid": "40162486", "title": "Maildir", "url": "https://en.wikipedia.org/wiki/Maildir", "domain": "wikipedia.org", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-25 20:19:39", "comments": 0, "source_title": "Maildir", "source_text": "Maildir - Wikipedia\n\nJump to content\n\nSearch\n\n# Maildir\n\n  * \u010ce\u0161tina\n  * Deutsch\n  * Espa\u00f1ol\n  * Fran\u00e7ais\n  * Nederlands\n  * \u65e5\u672c\u8a9e\n  * Polski\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * Svenska\n  * \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n\nEdit links\n\nFrom Wikipedia, the free encyclopedia\n\nE-mail format\n\nThe Maildir e-mail format is a common way of storing email messages on a file\nsystem, rather than in a database. Each message is assigned a file with a\nunique name, and each mail folder is a file system directory containing these\nfiles. Maildir was designed by Daniel J. Bernstein circa 1995, with a major\ngoal of eliminating the need for program code to handle file locking and\nunlocking through use of the local filesystem.^[1] Maildir design reflects the\nfact that the only operations valid for an email message is that it be\ncreated, deleted or have its status changed in some way.\n\nInternal structure\n\n## Specifications[edit]\n\nA Maildir directory (often named Maildir) usually has three subdirectories\nnamed tmp, new, and cur.^[2]\n\n  * The tmp subdirectory temporarily stores e-mail messages that are in the process of being delivered. This subdirectory may also store other kinds of temporary files.\n  * The new subdirectory stores messages that have been delivered, but have not yet been seen by any mail application.\n  * The cur subdirectory stores messages that have already been seen by mail applications.^[3]\n\n### Maildir++[edit]\n\nSam Varshavchik, the author of the Courier Mail Server and other software,\ndefined the Maildir++ extension^[3]^[4] to the Maildir format to support\nsubfolders and mail quotas. Maildir++ directories contain subdirectories with\nnames that start with a '.' (dot) which are also Maildir++ folders. The\nextension complies with the original Maildir specification, which allows for\nsubdirectories in addition to tmp, new and cur.\n\n## Technical operation[edit]\n\nA mail delivery agent is a program that delivers an email message into a\nMaildir. The mail delivery agent creates a new file with a unique filename in\nthe tmp directory.^[5]^[6]^[3] At the time of its invention guaranteeing\nunique filenames efficiently was difficult. The original qmail^[1] algorithm\nfor unique names was:\n\n  1. read the current Unix time\n  2. read the current process identifier (PID)\n  3. read the current hostname\n  4. concatenate the above three values into a string separated by the period character; this is the new filename\n  5. if stat() reports that the filename exists, then wait two seconds\n  6. go to previous step until the filename does not exist\n  7. create a file with the unique filename and write the message contents to the new file\n\nBy 2000, the qmail author recommended in an updated specification^[5] to\nappend the value of a per-process counter to the PID, whose value should be\nincremented after each delivery. The rate-limiting recommendation to \"wait two\nseconds\" was dropped.\n\nBy 2003, the recommendations had been further amended to require that instead\nof the PID and counter, the middle part of the filename should be created by\n\"concatenating enough of the following strings to guarantee uniqueness\" even\nin the face of multiple simultaneous deliveries to the same maildir from one\nor more processes:^[7]\n\n>   * #n, where n is (in hexadecimal) the output of the operating system's\n> unix_sequencenumber() system call, which returns a number that increases by\n> 1 every time it is called, starting from 0 after reboot.\n>   * Xn, where n is (in hexadecimal) the output of the operating system's\n> unix_bootnumber() system call, which reports the number of times that the\n> system has been booted. Together with #, this guarantees uniqueness;\n> unfortunately, most operating systems don't support unix_sequencenumber()\n> and unix_bootnumber().\n>   * Rn, where n is (in hexadecimal) the output of the operating system's\n> unix_cryptorandomnumber() system call or an equivalent source, such as\n> /dev/urandom. Unfortunately, some operating systems don't include\n> cryptographic random number generators.\n>   * In, where n is (in hexadecimal) the UNIX inode number of this file.\n> Unfortunately, inode numbers aren't always available through NFS.\n>   * Vn, where n is (in hexadecimal) the UNIX device number of this file.\n> Unfortunately, device numbers aren't always available through NFS. (Device\n> numbers are also not helpful with the standard UNIX filesystem: a maildir\n> has to be within a single UNIX device for link() and rename() to work.)\n>   * Mn, where n is (in decimal) the microsecond counter from the same\n> gettimeofday() used for the left part of the unique name.\n>   * Pn, where n is (in decimal) the process ID.\n>   * Qn, where n is (in decimal) the number of deliveries made by this\n> process.\n>\n\nThis 2003 algorithm was criticised^[8] in 2006 as being unnecessarily complex\nby Timo Sirainen, the creator of Dovecot.\n\nAs of November 2023, qmail author Daniel Bernstein had made no further changes\nto the 2003 filename generation recommendations.^[9] On modern POSIX systems,\ntemporary files can be safely created with the mkstemp C library function.\n\nThe delivery process stores the message in the maildir by creating and writing\nto tmp/uniquefilename, and then moving this file to new/uniquefilename. The\nmoving can be done using rename, which is atomic in many systems.^[10]\nAlternatively, it can be done by hard-linking the file to new and then\nunlinking the file from tmp. Any leftover file will eventually be deleted.\nThis sequence guarantees that a maildir-reading program will not see a\npartially written message. There can be multiple programs reading a maildir at\nthe same time. They range from mail user agents (MUAs), which access the\nserver's file system directly, through Internet Message Access Protocol or\nPost Office Protocol servers acting on behalf of remote MUAs, to utilities\nsuch as biff and rsync, which may or may not be aware of the maildir\nstructure. Readers should never look in tmp.\n\nWhen a cognizant maildir-reading process (either a POP or IMAP server, or a\nmail user agent acting locally) finds messages in the new directory, it must\nmove them to cur. It is just a means to notify the user \"you have X new\nmessages\".^[11] This moving needs to be done using the atomic filesystem\nrename(), as the alternative link-then-unlink technique is non-atomic and may\nresult in duplicated messages. An informational suffix is appended to\nfilenames at this stage. It consists of a colon (to separate the unique part\nof the filename from the actual information), a \"2\", a comma and various\nflags. The \"2\" specifies the version of the information that follows the\ncomma. \"2\" is the only currently officially specified version, \"1\" being an\nexperimental version. The specification defines flags that show whether the\nmessage has been read, deleted and so on: the initial (capital) letter of\n\"Passed\", \"Replied\", \"Seen\", \"Trashed\", \"Draft\", and \"Flagged\".^[7]\nApplications often choose to supplement this very limited set of flags, for\nexample notmuch^[12] offers flag synchronization in addition to arbitrary\nuser-defined flags,^[13] while Dovecot uses lowercase letters to match 26 IMAP\nkeywords,^[6] which may include keywords such as $MDNSent or user-defined\nflags.\n\nAlthough Maildir was intended to allow lockless usage, in practice some\nsoftware that uses Maildirs also uses locks, such as Dovecot.^[14]\n\n## File-system compatibility issues[edit]\n\nThe Maildir standard can only be implemented on systems that accept colons in\nfilenames. ^[15]\n\nSystems that don't allow colons in filenames (this includes Microsoft Windows\nand some configurations of Novell Storage Services) can use a non-standard\nalternative separator, such as \";\" or \"-\". It is often trivial to patch free\nand open-source software to use a different separator.^[16]\n\nAs there is currently no agreement on what character this alternative\nseparator should be, there can be interoperability difficulties between\ndifferent Maildir-supporting programs on these systems. However, not all\nMaildir-related software needs to know what the separator character is,\nbecause not all Maildir-related software needs to be able to read or modify\nthe flags of a message (\"read\", \"replied to\" etc.); software that merely\ndelivers to a Maildir or archives old messages from it based only on date,\nshould work no matter what separator is in use. If only the MUA needs to read\nor modify message flags, and only one MUA is used, then non-standard\nalternative separators may be used without interoperability problems.\n\n## Software that supports Maildir directly[edit]\n\n### Mail servers[edit]\n\n  * Dovecot IMAP server\n  * Courier Mail Server SMTP and IMAP server, for which the Maildir++ format was invented\n  * Sendmail The original SMTP server\n  * Exim SMTP server\n  * Postfix SMTP server\n  * qmail SMTP server, for which the Maildir format was invented\n  * MeTA1 SMTP server\n  * OpenSMTPD SMTP server\n  * Stalwart Mail Server, SMTP and IMAP server implemented in Rust\n\n### Delivery agents[edit]\n\n  * procmail\n  * Dovecot delivery agent\n  * maildrop\n  * getmail, a Maildir-aware mail-retrieval and delivery agent alternative to Fetchmail\n  * fdm\n  * muchsync, synchronising notmuch mail mailboxes between any number of replicas\n  * OfflineIMAP\n  * isync, synchronises mailboxes, supporting Maildir and IMAP4\n  * Attomail, a minimal Maildir-aware MDA implemented in Haskell\n\n### Mail readers[edit]\n\n  * aerc^[17] (efficient and extensible email client)\n  * Balsa previously the official GNOME mail reader (prior to Evolution)\n  * Cone a curses-based mail reader\n  * Evolution, official GNOME mail client\n  * GNUMail\n  * Gnus\n  * KMail, KDE mail reader\n  * mailx\n  * Mutt\n  * Notmuch^[18] (fast, global-search and tag-based email system)\n  * Pine/Alpine\n  * Mozilla Thunderbird \u2013 experimental and \u201cdisabled by default because there are still many bugs\u201d ^[19]\n\n## Notes and references[edit]\n\n  1. ^ Jump up to: ^a ^b Bernstein, Daniel J. (1995). \"maildir(5)\". Archived from the original on 1997-10-12. Retrieved 2018-11-23.\n  2. ^ Blum, Richard (2001). Postfix. Sams Publishing. ISBN 978-0-672-32114-6.\n  3. ^ Jump up to: ^a ^b ^c Sam Varshavchik (2009). \"maildir\". Retrieved 24 July 2016.\n  4. ^ Sam Varshavchik (2011). \"Maildir++\". Retrieved 24 July 2016.\n  5. ^ Jump up to: ^a ^b Bernstein., Daniel J. (c. 2000) [First published 2000 or earlier]. \"Using maildir format\". Archived from the original on 2000-09-02. Retrieved 2018-11-23.\n  6. ^ Jump up to: ^a ^b Dovecot Wiki: maildir format\n  7. ^ Jump up to: ^a ^b Bernstein., Daniel J. (2003) [The earliest version of this document was first published in 2000 or earlier]. \"Using maildir format\". Archived from the original on 2003-04-01. Retrieved 2018-11-23.\n  8. ^ Sirainen, Timo (2006-12-05). \"Diff for 'MailboxFormat/Maildir'\". Retrieved 2018-11-23. \"All this trouble is rather pointless. Only the first step is what really guarantees that the mails won't get overwritten, the rest just sounds nice. Even though they might catch a problem once in a while, they give no guaranteed protection and will just as easily pass duplicate filenames through to overwrite existing mails. Step 2 is pointless because there's a race condition between steps 2 and 3. PID/host combination by itself should already guarantee that it never finds such a file. If it does, something's broken and the stat() check won't help since another process might be doing the same thing at the same time, and you end up writing to the same file in tmp/, causing the mail to get corrupted. In step 4 the link() would also fail if identical file was already in the maildir, right? Wrong. The file may already have been moved to cur/ directory, and since it may contain any number of flags by then you can't check with a simple stat() anymore if it exists or not. So really, all that's important in not getting mails overwritten in your maildir is the step 1: Always create filenames that are guaranteed to be unique. Forget about the 2 second waits and such that the Qmail's man page talks about\"\n  9. ^ \"Wayback Machine snapshots of cr.yp.to/proto/maildir.html\". Internet Archive. 2023. Retrieved 2023-11-23.\n  10. ^ \"rename\". The Open Group. 2013. Retrieved 23 July 2016. \"That specification requires that the action of the function be atomic.\"\n  11. ^ Sam Varshavchik (25 July 2016). \"Management of maildir structures\". courier-users (Mailing list). Retrieved 26 July 2016.\n  12. ^ \"Notmuch mail system homepage\". notmuchmail.org. Retrieved 2019-06-22.\n  13. ^ \"notmuch 0.38.3 documentation\". notmuch-config. Retrieved 2024-04-17.\n  14. ^ Sirainen, Timo (2006-12-05). \"Diff for 'MailboxFormat/Maildir'\". Retrieved 2018-11-23.\n  15. ^ \"mailbox \u2014 Manipulate mailboxes in various formats\". Python documentation. Retrieved 2023-06-19.\n  16. ^ mutt maildir support: workaround for filesystems that don't accept colons\n  17. ^ \"aerc - the world's best email client homepage\". aerc-mail.org.\n  18. ^ \"Notmuch mail system homepage\". notmuchmail.org. Retrieved 2019-06-22.\n  19. ^ \"Maildir in Thunderbird\". mozilla.org. Retrieved 2020-12-06.\n\n## See also[edit]\n\n  * mbox\n  * MH Message Handling System\n  * MIX (email)\n\n## External links[edit]\n\n  * manual page for maildir\n  * maildir specifications\n\nRetrieved from\n\"https://en.wikipedia.org/w/index.php?title=Maildir&oldid=1219694792\"\n\nCategory:\n\n  * Email storage formats\n\nHidden categories:\n\n  * Articles with short description\n  * Short description matches Wikidata\n\n  * This page was last edited on 19 April 2024, at 08:24 (UTC).\n  * Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n  * Privacy policy\n  * About Wikipedia\n  * Disclaimers\n  * Contact Wikipedia\n  * Code of Conduct\n  * Developers\n  * Statistics\n  * Cookie statement\n  * Mobile view\n  * Edit preview settings\n\n", "frontpage": false}
