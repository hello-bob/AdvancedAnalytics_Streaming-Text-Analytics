{"aid": "40060035", "title": "Flow PHP: the first and most advanced PHP ETL framework", "url": "https://github.com/flow-php/flow", "domain": "github.com/flow-php", "votes": 1, "user": "Lwrless", "posted_at": "2024-04-17 03:10:56", "comments": 0, "source_title": "GitHub - flow-php/flow: Flow PHP - data processing framework", "source_text": "GitHub - flow-php/flow: Flow PHP - data processing framework\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nflow-php / flow Public\n\n  * Notifications\n  * Fork 21\n  * Star 340\n\nFlow PHP - data processing framework\n\nflow-php.com\n\n### License\n\nMIT license\n\n340 stars 21 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# flow-php/flow\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n4 Branches\n\n24 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\naeon-automationUpdated CHANGELOG.md924385e \u00b7\n\n## History\n\n3,693 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Added changelog page to landing (#1002)  \n  \n### bin\n\n|\n\n### bin\n\n| Feature/codding standards (#1008)  \n  \n### build\n\n|\n\n### build\n\n| Move PHAR runtime into bin (#761)  \n  \n### docs\n\n|\n\n### docs\n\n| Removed null type (#1033)  \n  \n### examples\n\n|\n\n### examples\n\n| Removed null type (#1033)  \n  \n### src\n\n|\n\n### src\n\n| Improve performance of merching rows into given batch size (#1046)  \n  \n### tools\n\n|\n\n### tools\n\n| Bump blackfire/php-sdk from 2.3.9 to 2.4.0 in /tools/blackfire (#1043)  \n  \n### web/landing\n\n|\n\n### web/landing\n\n| How to write a custom data extractor - blog post (#1038)  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Added phpunit.xml to .gitignore (#1026)  \n  \n### .php-cs-fixer.php\n\n|\n\n### .php-cs-fixer.php\n\n| Removed null type (#1033)  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| Updated CHANGELOG.md  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Reorganized documentation (#854)  \n  \n### Dockerfile\n\n|\n\n### Dockerfile\n\n| Split docker building process into smaller steps and copy just releva...  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Expanded Parquet schema converter in order to support deeply nested d...  \n  \n### README.md\n\n|\n\n### README.md\n\n| README - memory consumption description improvements  \n  \n### UPGRADE.md\n\n|\n\n### UPGRADE.md\n\n| Remove deprecated code (#994)  \n  \n### box.json\n\n|\n\n### box.json\n\n| Building pipelines from JSON (#871)  \n  \n### compose.yml.dist\n\n|\n\n### compose.yml.dist\n\n| Rename docker-compose.yml to compose.yml to match specification (#...  \n  \n### composer.json\n\n|\n\n### composer.json\n\n| Support Doctrine DBAL 4 (#974)  \n  \n### composer.lock\n\n|\n\n### composer.lock\n\n| Removed null type (#1033)  \n  \n### infection.json\n\n|\n\n### infection.json\n\n| Partition pruning optimizer (#887)  \n  \n### monorepo-builder.php\n\n|\n\n### monorepo-builder.php\n\n| Fixed monorepo builder config  \n  \n### phpbench.json\n\n|\n\n### phpbench.json\n\n| Improve adapters benchmark stability (#683)  \n  \n### phpstan.neon\n\n|\n\n### phpstan.neon\n\n| Added possibility to set cache batch size (#1034)  \n  \n### phpunit.xml.dist\n\n|\n\n### phpunit.xml.dist\n\n| Added phpunit.xml to .gitignore (#1026)  \n  \n### psalm.xml\n\n|\n\n### psalm.xml\n\n| Added possibility to set cache batch size (#1034)  \n  \n## Repository files navigation\n\nFlow is a PHP-based, strongly typed data processing framework with low memory\nfootprint.\n\n  * \ud83d\udcc8 Project Roadmap\n  * \ud83d\udcdc Documentation\n  * \ud83d\udee0\ufe0f Contributing\n  * \ud83d\udea7 Upgrading\n\nSupported PHP versions:\n\n## We Stand Against Terror\n\nStand With Ukraine| Stand With Us  \n---|---  \n  \n> On Feb. 24, 2022, Russia declared an unprovoked war on Ukraine and launched\n> a full-scale invasion. Russia is currently bombing peaceful Ukrainian\n> cities, including schools and hospitals and attacking civilians who are\n> fleeing conflict zones.\n\n> On Oct. 7, 2023, the national holiday of Simchat Torah, Hamas terrorists\n> initiated an attack on Israel in the early hours, targeting civilians. They\n> unleashed violence that resulted in at least 1,400 casualties and abducted\n> at least 200 individuals, not limited to Israelis.\n\n## Introduction\n\nFlow is a first and the most advanced PHP ETL framework.\n\n\ud83d\udcdc Documentation\n\n#### What is ETL?\n\nETL stands for Extract, Transform, Load \u2013 a process used in database usage and\ndata warehousing. It involves three critical steps:\n\n  1. Extract: The first step is to extract data from various sources. These sources could be databases, CSV files, online services, or other formats. During extraction, the goal is to retrieve all the necessary data efficiently and accurately.\n  2. Transform: Once the data is extracted, it needs to be transformed. This transformation process involves cleaning the data (removing duplicates, fixing errors), converting it into a suitable format or structure for the purposes of querying and analysis, and applying any business rules or calculations that are needed.\n  3. Load: Finally, the transformed data is loaded into a target database, data warehouse, or a data mart where it can be accessed, queried, and used for business analysis or decision-making processes.\n\n#### Main Use Cases\n\nETL frameworks are essential in various scenarios, especially in data-driven\nenvironments. Some of the key use cases include:\n\n  1. Data Integration: ETL is fundamental in integrating data from multiple, often disparate, sources. This is crucial for businesses that gather data from various systems and need a unified view.\n  2. Business Intelligence (BI): For BI processes, ETL is used to collect data from different sources and bring it into a data warehouse, where it can be analyzed to provide business insights.\n  3. Data Warehousing: ETL plays a pivotal role in building and maintaining data warehouses. It helps in structuring large amounts of data into a format that is easy to analyze.\n  4. Data Migration: When organizations change systems or upgrade databases, ETL processes are necessary to migrate data effectively from the old system to the new one.\n  5. Data Cleaning and Transformation: Ensuring data quality is paramount. ETL frameworks are used to clean, standardize, and transform data, thus ensuring high-quality data for analysis.\n  6. Historical Data Storage: ETL is used to extract large volumes of historical data from operational systems and load it into data warehouses for long-term storage, analysis, and reporting.\n  7. Reporting and Analysis: By consolidating data from various sources, ETL frameworks simplify the reporting and analysis process, providing businesses with actionable insights.\n  8. Regulatory Compliance: For compliance with various regulations, organizations use ETL processes to gather, standardize, and store data in a manner that meets regulatory requirements.\n\n## Features of Flow PHP\n\nFlow PHP is a powerful and versatile ETL framework designed to cater to a\nvariety of data processing needs. Below are some of its standout features:\n\n  * Low memory footprint: Optimized for efficiency, Flow PHP ensures minimal memory usage, maintaining low and constant consumption regardless of data size. This makes it ideal for handling large datasets without compromising performance.\n  * Versatile Data Source Interaction: Whether your data resides in databases, spreadsheets, or online platforms, Flow PHP can seamlessly read from and write to any data source.\n  * Rich Collection of Data Transformation Functions: Transform your data with ease using a wide array of built-in functions. From simple mapping to complex manipulations, the framework covers all your data transformation needs.\n  * Direct Access to Remote Filesystems: Flow PHP provides the ability to interact directly with remote filesystems, facilitating efficient data handling and processing without the need for local storage.\n  * Advanced Data Partitioning: Efficiently partition your data for improved manageability and processing. This feature is crucial for handling large datasets or for processing data in distributed systems.\n  * Grouping & Aggregating: Easily group and aggregate data to extract meaningful insights. This feature is particularly useful for summarizing datasets and performing statistical analysis.\n  * Remote File Processing: Process files stored remotely with the same ease as local files, enabling powerful and flexible data integration from various sources.\n  * Join Operations: Perform join operations between different datasets. This is essential for combining data from multiple sources, providing a more comprehensive view.\n  * Efficient Sorting: Sort your data based on specific criteria or conditions, ensuring that your datasets are organized precisely as needed.\n  * ASCII Table Display: Visualize your datasets as neatly formatted ASCII tables, making it easier to read and analyze data directly from the console.\n  * Schema Validation: Ensure data quality and consistency by validating your datasets against predefined schemas.\n  * Window Functions: Utilize window functions for advanced data analysis, allowing you to perform calculations across sets of rows that are related to the current row.\n  * Built-In Caching Mechanism: Improve performance with built-in caching, reducing processing time and enhancing overall efficiency, especially in repetitive data processing tasks.\n\nFlow PHP\u2019s comprehensive set of features makes it an ideal choice for\ndevelopers and organizations looking to harness the power of ETL for efficient\nand effective data processing.\n\n## Usage Example\n\n    \n    \n    <?php declare(strict_types=1); use function Flow\\ETL\\Adapter\\Parquet\\{from_parquet, to_parquet}; use function Flow\\ETL\\DSL\\{data_frame, lit, ref, sum, to_output}; use Flow\\ETL\\Filesystem\\SaveMode; require __DIR__ . '/vendor/autoload.php'; data_frame() ->read(from_parquet(__FLOW_DATA__ . '/orders_flow.parquet')) ->select('created_at', 'total_price', 'discount') ->withEntry('created_at', ref('created_at')->cast('date')->dateFormat('Y/m')) ->withEntry('revenue', ref('total_price')->minus(ref('discount'))) ->select('created_at', 'revenue') ->groupBy('created_at') ->aggregate(sum(ref('revenue'))) ->sortBy(ref('created_at')->desc()) ->withEntry('daily_revenue', ref('revenue_sum')->round(lit(2))->numberFormat(lit(2))) ->drop('revenue_sum') ->write(to_output(truncate: false)) ->withEntry('created_at', ref('created_at')->toDate('Y/m')) ->mode(SaveMode::Overwrite) ->write(to_parquet(__FLOW_OUTPUT__ . '/daily_revenue.parquet')) ->run();\n    \n    \n    $ php daily_revenue.php +------------+---------------+ | created_at | daily_revenue | +------------+---------------+ | 2023/10 | 206,669.74 | | 2023/09 | 227,647.47 | | 2023/08 | 237,027.31 | | 2023/07 | 240,111.05 | | 2023/06 | 225,536.35 | | 2023/05 | 234,624.74 | | 2023/04 | 231,472.05 | | 2023/03 | 231,697.36 | | 2023/02 | 211,048.97 | | 2023/01 | 225,539.81 | +------------+---------------+ 10 rows\n\n## Community Contributions\n\nFlow PHP is not just a tool, but a growing community of developers passionate\nabout data processing and PHP. We strongly believe in the power of\ncollaboration and welcome contributions of all forms. Whether you're fixing a\nbug, proposing a new feature, or improving our documentation, your input is\ninvaluable to the growth of Flow PHP.\n\n### How You Can Contribute\n\n  * Submitting Bug Reports and Feature Requests: Encounter an issue or have an idea for an enhancement? Submit an issue on our GitHub repository. Please provide a clear description and, if possible, steps to reproduce the bug or details of the feature request.\n  * Code Contributions: Interested in directly impacting the development of Flow PHP? Check out our issue tracker for areas where you can contribute. From simple fixes to substantial feature additions, every bit of help is appreciated.\n  * Improving Documentation: Good documentation is key to any project's success. If you notice gaps, inaccuracies, or areas that could use better explanations, we encourage you to submit updates.\n  * Community Support: Help out fellow users by answering questions on our community channels, Stack Overflow, or other forums where Flow PHP users gather.\n  * Spread the Word: Share your experiences using Flow PHP, write blog posts, tutorials, or speak at meetups and conferences. Let others know how Flow PHP has helped in your projects!\n  * Leave a GitHub Star: If you find Flow PHP useful, consider giving it a star on GitHub. Your star is a simple yet powerful way to show support and helps others discover our project.\n\n### Contribution Guidelines\n\nTo ensure a smooth collaboration process, we've put together guidelines for\ncontributing. Please take a moment to read our Contribution Guidelines before\nstarting your work. This will help you understand our process and make\ncontributing a breeze.\n\n### Questions?\n\nIf you have any questions about contributing, please feel free to reach out to\nus. We're more than happy to provide guidance and support.\n\nJoin us in shaping the future of data processing in PHP \u2014 every contribution,\nbig or small, makes a significant difference!\n\n## GitHub Stars\n\n## Sponsors\n\nFlow PHP is sponsored by:\n\n  * Blackfire - the best PHP profiling and monitoring tool!\n\n## About\n\nFlow PHP - data processing framework\n\nflow-php.com\n\n### Topics\n\netl etl-framework etl-pipeline\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\nCustom properties\n\n### Stars\n\n340 stars\n\n### Watchers\n\n6 watching\n\n### Forks\n\n21 forks\n\nReport repository\n\n## Releases 24\n\n0.7.3 Latest\n\nMar 30, 2024\n\n\\+ 23 releases\n\n## Packages 1\n\n  * flow\n\n## Contributors 19\n\n\\+ 5 contributors\n\n## Languages\n\n  * PHP 95.7%\n  * Thrift 1.6%\n  * Python 1.3%\n  * Twig 1.1%\n  * HTML 0.1%\n  * JavaScript 0.1%\n  * Other 0.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
