{"aid": "40291219", "title": "Minimal Dockerized Cron Example", "url": "https://igorstechnoclub.com/show-minimal-dockerized-cron-template/", "domain": "igorstechnoclub.com", "votes": 2, "user": "Igor_Wiwi", "posted_at": "2024-05-07 20:43:05", "comments": 0, "source_title": "Minimal Dockerized Cron Template", "source_text": "Minimal Dockerized Cron Template | Igor's Techno Club\n\n# Igor's Techno Club\n\n# Minimal Dockerized Cron Template\n\n07 May, 2024\n\nWhile Docker is mainly used to containerize stateless applications, there\nmight be cases where you need scheduled tasks inside your container. For\nexample, quite often I use it for small automated tasks, such as site updates,\ndatabase cleanups, and so on. The main reason I prefer this approach is that\nit becomes really easy to move it to another hosting provider whenever you\nfind a cheaper one.\n\n## Implementation notes\n\n### Dockerfile\n\n  1. Base Image and Updates:\n    \n        FROM ruby:3.1 RUN apt-get update RUN apt-get install -y cron\n\nSince for my tasks I use Ruby, I use here Ruby Docker image where I install\nthe Cron daemon in a separate step.\n\n  2. Setting Up the Working Directory and Files:\n    \n        WORKDIR /app COPY run.sh /app/ COPY run-cron /app/run-cron\n\nThis sets /app as the working directory. The files run.sh and run-cron are\ncopied into /app. run.sh contains the script to be executed by Cron, and run-\ncron is the crontab file which schedules when run.sh will be run.\n\n  3. Configuring Cron:\n    \n        RUN cp /app/run-cron /etc/cron.d/run-cron RUN chmod 0644 /etc/cron.d/run-cron RUN crontab /etc/cron.d/run-cron\n\nThe Cron configuration file is moved to /etc/cron.d and set with the correct\npermissions. The crontab command adds the schedule from run-cron into the\nCrontab.\n\n  4. Logging Setup:\n    \n        RUN touch /var/log/cron.log CMD cron && tail -f /var/log/cron.log\n\nAn empty log file is created and the CMD command starts the Cron daemon along\nwith tailing the log file. This enables the logs to be streamed to the Docker\ncontainer logs, which can be very useful for debugging.\n\n### Logs redirections\n\nDebugging failing cron jobs could be a burden, so I redirect the output and\nerrors from the Cron job are sent to the standard output and error streams of\nthe container by doing:\n\n    \n    \n    0 0 * * * /app/run.sh > /proc/1/fd/1 2>/proc/1/fd/2\n\n## Running\n\nAll you left to do is to build an image and run it in detached mode\n\n## The Full Template\n\n### Dockerfile\n\n    \n    \n    FROM ruby:3.1 RUN apt-get update RUN apt-get install -y cron WORKDIR /app COPY run.sh /app/ COPY run-cron /app/run-cron RUN cp /app/run-cron /etc/cron.d/run-cron RUN chmod 0644 /etc/cron.d/run-cron RUN crontab /etc/cron.d/run-cron RUN touch /var/log/cron.log CMD cron && tail -f /var/log/cron.log\n\n### run-cron\n\n    \n    \n    0 0 * * * /app/run.sh > /proc/1/fd/1 2>/proc/1/fd/2\n\n### run.sh\n\n    \n    \n    echo \"Hello cron!\"\n\n#bash #docker #show\n\nPowered by Bear \u0295\u2022\u1d25\u2022\u0294\n\n", "frontpage": false}
