{"aid": "40079590", "title": "Cryptography Tricks Make a Hard Problem a Little Easier", "url": "https://www.quantamagazine.org/cryptography-tricks-make-a-hard-problem-a-little-easier-20240418/", "domain": "quantamagazine.org", "votes": 2, "user": "mgl", "posted_at": "2024-04-18 19:01:24", "comments": 0, "source_title": "Cryptography Tricks Make a Hard Problem a Little Easier | Quanta Magazine", "source_text": "Cryptography Tricks Make a Hard Problem a Little Easier | Quanta Magazine\n\nWe care about your data, and we'd like to use cookies to give you a smooth\nbrowsing experience. Please agree and read more about our privacy policy.\n\nCryptography Tricks Make a Hard Problem a Little Easier\n\nRead Later\n\n###### Share\n\nCopied!\n\n  * Comments\n\n  * Read Later\n\ncomputational complexity\n\n# Cryptography Tricks Make a Hard Problem a Little Easier\n\nBy Ben Brubaker\n\nApril 18, 2024\n\nFor an important problem, it seemed as though laboriously trying every\npossibility was the best possible approach. Now researchers have proved that\nthere\u2019s a better way.\n\nRead Later\n\nAdam Nickel for Quanta Magazine\n\nBy Ben Brubaker\n\nStaff Writer\n\nApril 18, 2024\n\nView PDF/Print Mode\n\nalgorithmscomputational complexitycomputer sciencecryptographyAll topics\n\n## Introduction\n\nWhat\u2019s the best way to solve hard problems? That\u2019s the question at the heart\nof a subfield of computer science called computational complexity theory. It\u2019s\na hard question to answer, but flip it around and it becomes easier. The worst\napproach is almost always trial and error, which involves plugging in possible\nsolutions until one works. But for some problems, it seems there simply are no\nalternatives \u2014 the worst approach is also the best one.\n\nResearchers have long wondered whether that\u2019s ever really the case, said Rahul\nIlango, a graduate student studying complexity theory at the Massachusetts\nInstitute of Technology. \u201cYou could ask, \u2018Are there problems for which guess-\nand-check is just optimal?\u2019\u201d\n\nComplexity theorists have studied many computational problems, and even the\nhard ones often admit some kind of clever procedure, or algorithm, that makes\nfinding a solution a little bit easier than pure trial and error. Among the\nfew exceptions are so-called compression problems, where the goal is to find\nthe shortest description of a data set.\n\nBut last November, two groups of researchers independently discovered another\nalgorithm for compression problems \u2014 one that\u2019s ever so slightly faster than\nchecking all the possible answers. The new approach works by adapting an\nalgorithm invented by cryptographers 25 years ago for attacking a different\nproblem. There\u2019s just one restriction: You need to tailor the algorithm to the\nsize of your data set.\n\n\u201cThey\u2019re really beautiful and important results,\u201d said Eric Allender, a\ntheoretical computer scientist at Rutgers University.\n\n## Defining Hardness\n\nThe new results are the latest to investigate a question first studied in the\nSoviet Union, well before the advent of complexity theory. \u201cBefore I was in\ngrade school, people in Russia were formulating this,\u201d Allender said.\n\nThe specific computational problem that those Soviet researchers studied,\ncalled the minimum circuit size problem, is akin to one that designers of\ncomputer hardware face all the time. If you\u2019re given complete specifications\nof how an electronic circuit should behave, can you find the simplest circuit\nthat will do the job? Nobody knew how to solve this problem without \u201cperebor\u201d\n\u2014 a Russian word roughly equivalent to \u201cexhaustive search.\u201d\n\nThe minimum circuit size problem is an example of a compression problem. You\ncan describe a circuit\u2019s behavior with a long string of bits \u2014 0s and 1s \u2014 and\nthen ask whether there\u2019s a way to reproduce that same behavior using fewer\nbits. Checking all possible circuit layouts would take time that grows\nexponentially with the number of bits in the string.\n\nThis sort of exponential growth is the defining feature of a hard\ncomputational problem. But not all hard problems are equally hard \u2014 some have\nalgorithms that are faster than exhaustive search, though their runtimes still\ngrow exponentially. In modern terms, the perebor question is whether any such\nalgorithms exist for compression problems.\n\nIn 1959, a prominent researcher named Sergey Yablonsky claimed to have proved\nthat exhaustive search really was the only way to solve the minimum circuit\nsize problem. But his proof left some loopholes. Some researchers noticed the\nflaws at the time, but Yablonsky was influential enough to discourage most\nothers from working on the perebor question.\n\nIn the decades that followed, few researchers studied compression problems,\nand the perebor question was known mostly as a footnote in the prehistory of\ncomplexity theory. Widespread attention to the question came only recently,\nafter researchers discovered a curious link between compression problems and\nthe foundations of cryptography.\n\n## One-Way Traffic\n\nModern cryptography uses hard computational problems to safeguard secret\nmessages. But computational hardness is only useful if it\u2019s asymmetric \u2014 if\nit\u2019s hard to decipher coded messages but not hard to encode messages in the\nfirst place.\n\nIn every cryptography scheme, the origin of this asymmetry is a mathematical\nobject called a one-way function, which transforms input bit strings into\noutput strings of the same length. Given an input to a one-way function, it\u2019s\neasy to compute the output, but given an output it\u2019s hard to invert the\nfunction \u2014 that is, to reverse-engineer it and recover the input.\n\n\u201cCryptographers really would like to have very, very efficiently computable\none-way functions that are really, really hard to invert,\u201d Allender said. Many\nmathematical functions seem to have this property, and the difficulty of\ninverting these functions stems from the apparent difficulty of solving\ndifferent computational problems.\n\ncomputational complexity\n\n### Researchers Identify \u2018Master Problem\u2019 Underlying All Cryptography\n\nApril 6, 2022\n\nRead Later\n\nUnfortunately, cryptographers don\u2019t know for sure whether any of these\nfunctions are truly hard to invert \u2014 indeed, it\u2019s possible that true one-way\nfunctions don\u2019t exist. This uncertainty persists because complexity theorists\nhave struggled for 50 years to prove that seemingly hard problems really are\nhard. If they aren\u2019t, and if researchers discover super-fast algorithms for\nthese problems, that would be disastrous for cryptography \u2014 akin to suddenly\nrouting speeding cars in both directions on a one-way street.\n\nEven though a comprehensive understanding of computational hardness remains\nelusive, cryptographers have recently made exciting progress toward a unified\ntheory of one-way functions. One big step was taken in 2020, when the Tel Aviv\nUniversity cryptographer Rafael Pass and his graduate student Yanyi Liu proved\nthat one-way functions are intimately connected to a specific compression\nproblem called the time-bounded Kolmogorov complexity problem.\n\nIf that one problem really is hard to solve for most inputs, then Pass and\nLiu\u2019s result yields a recipe for how to construct a provably hard one-way\nfunction \u2014 one that\u2019s guaranteed to be secure even if other computational\nproblems turn out to be far easier than researchers expected. But if there\u2019s a\nfast algorithm for solving the time-bounded Kolmogorov complexity problem,\nthen cryptography is doomed, and any function can be easily inverted. A one-\nway function based on the hardness of this problem is the most secure function\npossible \u2014 a one-way function to rule them all.\n\n## Building on Data Structures\n\nPass and Liu\u2019s discovery was the latest chapter in a long line of research\nthat uses complexity theory to better understand the foundations of\ncryptography. But it also suggested a way to invert that relationship: The\nequivalence between the time-bounded Kolmogorov complexity problem and\nfunction inversion implies that insights about either problem can reveal more\nabout the other. Cryptographers have been studying function inversion\nalgorithms for decades to better understand the weak points of their\nencryption methods. Researchers began to wonder whether those algorithms could\nhelp answer age-old questions in complexity theory.\n\nLike many computational problems, function inversion can be solved by\nexhaustive search. Given an output string, simply plug every possible input\ninto the function until you find the one that yields the right answer.\n\nShare this article\n\nCopied!\n\nNewsletter\n\nGet Quanta Magazine delivered to your inbox\n\nRecent newsletters\n\nRafael Pass helped develop a faster algorithm for solving a compression\nproblem by adapting an old technique from cryptography.\n\nHugh Gordon\n\n## Introduction\n\nIn 1980, the cryptographer Martin Hellman began to study whether it was\npossible to do any better \u2014 the same question those Soviet mathematicians had\nasked about compression problems decades earlier. Hellman discovered that yes,\nit\u2019s possible \u2014 as long as you\u2019re willing to put in some extra work in\nadvance, using mathematical objects called data structures.\n\nA data structure is essentially a table that stores information about the\nfunction to be inverted, and constructing one requires computing the outputs\nof the function for certain strategically chosen inputs. All those\ncomputations \u201ccould take a very long time,\u201d said Ryan Williams, a complexity\ntheorist at MIT. \u201cBut the idea is that this is done once, once and for all.\u201d\nIf you\u2019re trying to invert the same function given many different outputs \u2014\nsay, to decode many different messages encrypted the same way \u2014 doing this\nwork in advance might be worthwhile.\n\nOf course, storing that extra information requires space, so take this\nstrategy to the extreme, and you could end up with a fast program that can\u2019t\nfit on any computer. Hellman designed a clever data structure that enabled his\nalgorithm to invert most functions slightly faster than exhaustive search\nwithout taking up too much more space. Then in 2000, the cryptographers Amos\nFiat and Moni Naor extended Hellman\u2019s arguments to all functions.\n\nAfter Pass and Liu\u2019s breakthrough in 2020, these old results were suddenly\nnewly relevant. The Fiat-Naor algorithm could invert arbitrary functions\nfaster than exhaustive search. Could it also work for compression problems?\n\n## Out of Uniform\n\nThe first researchers to raise the question were the complexity theorist Rahul\nSanthanam of the University of Oxford and his graduate student Hanlin Ren.\nThey did so in a 2021 paper proving that compression problems and function\ninversion were even more intertwined than researchers had realized.\n\nPass and Liu had proved that if the time-bounded Kolmogorov complexity problem\nis hard, then function inversion must also be hard, and vice versa. But\nproblems can be hard and still admit solutions that are a bit better than\nexhaustive search. Santhanam and Ren showed that there is a close connection\nbetween whether exhaustive search is required for one problem and whether it\u2019s\nrequired for the other.\n\nTheir result had different implications for two broad classes of algorithms\nthat researchers often study, called \u201cuniform\u201d and \u201cnonuniform\u201d algorithms.\nUniform algorithms follow the same procedure for every input \u2014 a uniform\nprogram for sorting lists of numbers, for instance, will work the same way\nwhether there are 20 entries on the list or 20,000. Nonuniform algorithms\ninstead use different procedures for inputs of different length.\n\nThe data structures used by the Fiat-Naor algorithm are always tailored to a\nspecific function. To invert a function that scrambles a 10-bit string, you\nneed a data structure that\u2019s different from the one you\u2019d need to invert a\nfunction that scrambles a 20-bit string, even if the scrambling is done in a\nsimilar way. That makes Fiat-Naor a nonuniform algorithm.\n\nSanthanam and Ren\u2019s result suggested that it might be possible to transform\nthe Fiat-Naor algorithm into an algorithm for solving compression problems.\nBut adapting the algorithm from one problem to the other wasn\u2019t\nstraightforward, and they didn\u2019t pursue the question further.\n\nRyan Williams (left), Rahul Ilango (center) and Shuichi Hirahara discovered\none way to beat exhaustive search for compression problems.\n\nFrom left: Bryce Vickmark; Jennifer Krupa; Takuma Imamura\n\n## Introduction\n\nPass stumbled on the same idea a year later, after hearing Fiat give a talk\nabout the classic algorithm at a workshop celebrating Naor\u2019s contributions to\ncryptography. \u201cThis idea of using function inversion had been in the back of\nmy mind since then,\u201d he said. He later began to work on the problem in earnest\nwith Tel Aviv University researcher Noam Mazor.\n\nMeanwhile, Ilango was inspired to attack the problem after discussions with\nother researchers, including Santhanam, on a visit to the Simons Institute for\nthe Theory of Computing in Berkeley, California. \u201cIt came out of one of these\nvery serendipitous conversations where you\u2019re just throwing things around,\u201d\nSanthanam said. Ilango later joined forces with Williams and Shuichi Hirahara,\na complexity theorist at the National Institute of Informatics in Tokyo.\n\nThe hard part was figuring out how to embed the data structure at the heart of\nthe Fiat-Naor algorithm into a nonuniform algorithm for solving compression\nproblems. There\u2019s a standard procedure for doing that kind of embedding, but\nit would slow the algorithm down, wiping out its advantage over exhaustive\nsearch. The two teams found cleverer ways to incorporate the Fiat-Naor data\nstructure, and obtained algorithms for compression problems that worked on all\ninputs and remained faster than exhaustive search.\n\nThe details of the two algorithms differ slightly. The one by Ilango and his\nco-authors is faster than exhaustive search even if you restrict the search to\nthe simplest possibilities, and it applies to all compression problems \u2014 time-\nbounded Kolmogorov complexity, the minimum circuit size problem, and many\nothers. But the core idea was the same for both algorithms. The techniques\nfrom cryptography had proved their worth in this new domain.\n\n## Inversion Convergence\n\nThe new proof for nonuniform algorithms raises a natural question: What about\nuniform algorithms? Is there a way to solve compression problems faster than\nexhaustive search using them?\n\nThe recent string of results implies that any such algorithm would be\nequivalent to a uniform algorithm for inverting arbitrary functions \u2014\nsomething that cryptographers have unsuccessfully sought for decades. Because\nof that, many researchers find the possibility unlikely.\n\n## Related:\n\n  1. ### Scientists Find Optimal Balance of Data Storage and Time\n\n  2. ### Complexity Theory\u2019s 50-Year Journey to the Limits of Knowledge\n\n  3. ### A New Map Traces the Limits of Computation\n\n\u201cI would be very surprised,\u201d Santhanam said. \u201cIt would require a completely\nnew idea.\u201d\n\nBut Allender said researchers shouldn\u2019t discount the possibility. \u201cA good\nworking hypothesis for me has been that if there\u2019s a nonuniform way to do\nsomething, very likely there\u2019s a uniform way,\u201d he said.\n\nEither way, the work has made complexity theorists newly interested in old\nquestions in cryptography. Yuval Ishai, a cryptographer at the Technion in\nHaifa, Israel, said that\u2019s what makes it most exciting.\n\n\u201cI\u2019m really happy to see this convergence of interest between different\ncommunities,\u201d he said. \u201cI think it\u2019s great for science.\u201d\n\nBy Ben Brubaker\n\nStaff Writer\n\nApril 18, 2024\n\nView PDF/Print Mode\n\nalgorithmscomputational complexitycomputer sciencecryptographyAll topics\n\nShare this article\n\nCopied!\n\nNewsletter\n\nGet Quanta Magazine delivered to your inbox\n\nRecent newsletters\n\nThe Quanta Newsletter\n\nGet highlights of the most important news delivered to your email inbox\n\nRecent newsletters\n\n## Also in Computer Science\n\nartificial intelligence\n\n### How Do Machines \u2018Grok\u2019 Data?\n\nBy Anil Ananthaswamy\n\nApril 12, 2024\n\n9\n\nRead Later\n\nTuring Award\n\n### Avi Wigderson, Complexity Theory Pioneer, Wins Turing Award\n\nBy Stephen Ornes\n\nApril 10, 2024\n\n4\n\nRead Later\n\nQ&A\n\n### The Researcher Who Explores Computation by Conjuring New Worlds\n\nBy Ben Brubaker\n\nMarch 27, 2024\n\n1\n\nRead Later\n\n## Comment on this article\n\nQuanta Magazine moderates comments to facilitate an informed, substantive,\ncivil conversation. Abusive, profane, self-promotional, misleading, incoherent\nor off-topic comments will be rejected. Moderators are staffed during regular\nbusiness hours (New York time) and can only accept comments written in\nEnglish.\n\n## Next article\n\nHopes of Big Bang Discoveries Ride on a Future Spacecraft\n\nAll Rights Reserved \u00a9 2024\n\nAn editorially independent publication supported by the Simons Foundation.\n\nLog in to Quanta\n\n## Use your social network\n\nor\n\nDon't have an account yet? Sign up\n\nSign Up\n\nCreating an account means you accept Quanta Magazine's Terms & Conditions and\nPrivacy Policy\n\nForgot your password?\n\nWe\u2019ll email you instructions to reset your password\n\nChange your password\n\nEnter your new password\n\n", "frontpage": false}
