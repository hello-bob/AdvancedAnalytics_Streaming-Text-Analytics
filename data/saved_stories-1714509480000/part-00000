{"aid": "40211362", "title": "\"Run0\" as a Sudo Replacement", "url": "https://lwn.net/Articles/971745/", "domain": "lwn.net", "votes": 9, "user": "bertman", "posted_at": "2024-04-30 14:35:52", "comments": 3, "source_title": "\"run0\" as a sudo replacement [LWN.net]", "source_text": "\"run0\" as a sudo replacement [LWN.net]\n\nLWN .net News from the source\n\n  * Content\n\n    * Weekly Edition\n    * Archives\n    * Search\n    * Kernel\n    * Security\n    * Events calendar\n    * Unread comments\n    * LWN FAQ\n    * Write for us\n\n| |\n\nSubscribe / Log in / New account\n\n# \"run0\" as a sudo replacement\n\n[Posted April 30, 2024 by corbet]\n\nThis Mastodon stream from Lennart Poettering describes a sudo replacement \u2014\ncalled run0 \u2014 that will be part of the upcoming systemd 256 release. It takes\na rather different approach to the execution of privileged commands, avoiding\nthe use of setuid (which he calls \"SUID\") permissions entirely.\n\n> So, in my ideal world, we'd have an OS entirely without SUID. Let's throw\n> out the concept of SUID on the dump of UNIX' bad ideas. An execution context\n> for privileged code that is half under the control of unprivileged code and\n> that needs careful manual clean-up is just not how security engineering\n> should be done in 2024 anymore.\n\n(Log in to post comments)\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 14:15 UTC (Tue) by mezcalero (subscriber, #45103) [Link]\n\nI don't think I am the only one calling the concept \"suid\", am I? a quick grep\nreveals that the kernel calls it that too, in concepts such as\n/proc/sys/fs/suid_dumpable, or the mount() system call's MS_NOSUID, and so on?\nI mean, the inode flags are called S_ISUID too, not S_ISETUID?\n\nI think calling the flags \"setuid\" (as lwn appears to prefer?) just blurs\nthings, since that's the name of a syscall (setuid()), which does something\nrelated, but is not actually involved in the concept that the inode SUID flag\nis about.\n\nHence, I am a bit confused what that comment here is supposed to achieve? It\njust creates confusion?\n\nLennart\n\n### SUID\n\nPosted Apr 30, 2024 14:21 UTC (Tue) by corbet (editor, #1) [Link]\n\nLennart, the purpose was to be sure that readers knew what the term meant in\nthe quote, nothing more.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:08 UTC (Tue) by jrtc27 (subscriber, #107748) [Link]\n\nIt seems that Unix V4 called it SUID, Unix V6 introduced the odd lowercase\n\"suid\" in comments and Unix V7 is the first place where \"setuid\" appears\nreferring to the file mode rather than the system call. (Source: grep of\nTUHS's unixtree.tar.bz2)\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:16 UTC (Tue) by PengZheng (subscriber, #108006) [Link]\n\n> as lwn appears to prefer\n\nIIRC, \"setuid\" is actually the preferred term of man7.org, from which lots of\nLinux users get their Linux knowledge. That comments serves to resolve their\npossible confusion.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 14:34 UTC (Tue) by DimeCadmium (subscriber, #157243)\n[Link]\n\nAm I the only one who would much rather allow the kernel to continue enforcing\nthis security boundary well rather than allowing the likes of polkit and\nsystemd to enforce it poorly?\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 14:37 UTC (Tue) by vadim (subscriber, #35271) [Link]\n\nYes. I mean, the kernel isn't really enforcing anything here. A binary with\nsetuid just runs as root, and that's that.\n\nAny enforcement, policies and so on are up to the userspace program being run.\nAnd setuid isn't a good mechanism in that it allows the user to attempt to\nsubvert the execution of setuid tools like sudo.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 14:47 UTC (Tue) by DimeCadmium (subscriber, #157243)\n[Link]\n\nThe kernel enforces the elevation, which includes file permissions and other\ncontrols (like LD_PRELOAD for example).\n\nBy comparison this sounds like an invitation to repeat CVE-2021-3560\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 14:57 UTC (Tue) by farnz (subscriber, #17727) [Link]\n\nThe kernel doesn't enforce LD_PRELOAD and other controls - it relies on\nuserspace getting environment variable handling across SUID correct. The\nkernel \"merely\" changes the real UID when running a setUID program; it's then\nup to user space to correctly handle the rest of the process execution\nenvironment (environment variables, groups, umask, effective UID etc).\n\nAnd that's what this aims to address - because this goes back to a daemon\nwhich starts things from a known environment, instead of having to scrub\neverything it knows about to get to a sane state, noting that if it doesn't\nknow about something important, it's got a security hole, it instead starts\nthings in a sane state and copies over just enough environment to be useful.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:10 UTC (Tue) by DimeCadmium (subscriber, #157243)\n[Link]\n\nSUID already starts things from a known environment, though. That's my point.\nIs the environment that systemd starts things in known? Really no, rather it's\ndefined but in order to know you've got to go look in about a bajillion\ndifferent spots.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:17 UTC (Tue) by vadim (subscriber, #35271) [Link]\n\n> SUID already starts things from a known environment, though.\n\nNo, it doesn't. Give it a try.\n\n> Is the environment that systemd starts things in known? Really no, rather\n> it's defined but in order to know you've got to go look in about a bajillion\n> different spots.\n\nA lot more defined in fact in that it's not controlled by the calling user.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:22 UTC (Tue) by mattdm (subscriber, #18) [Link]\n\n> Really no, rather it's defined but in order to know you've got to go look in\n> about a bajillion different spots.\n\nDo you know about `systemctl show` (possibly with `--all`)?\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:33 UTC (Tue) by farnz (subscriber, #17727) [Link]\n\nNo, SUID on its own does not start from a known environment. It starts from\nthe environment set by the caller of exec, except that where a normal process\nhas the same real UID as the caller of exec, a SUID binary has the real UID\ntaken from the file that was executed.\n\nThis is why SUID binaries are so hard to get right - the entire process\nexecution environment is under attacker control, except for the real UID of\nthe process. Everything that runs in the SUID process has to pay attention to\nwhether real UID == effective UID, and if it doesn't, it has to go into a\n\"secure\" mode where it doesn't trust the environment - but this includes\nthings like the ELF interpreter, ld.so. If a new feature is added to ld.so by\nthe glibc team, and they don't realise that it has security implications, then\nthey may not remember to put the \"am I SUID?\" check around it, and the result\nis an exploit. Similar applies if the SUID binary itself is influenced by\nenvironment variables, but doesn't properly check to see if they could have\nbeen set by an attacker.\n\nIn contrast, systemd's environment is entirely under systemd's control; the\nkernel starts process ID 1 in a defined environment, and systemd can ensure\nthat when it starts a process at run0's request, it does so in a clean\nenvironment where there's nothing to surprise a newly started process.\nInstead, run0 has to explicitly copy over the parts of the execution\nenvironment that you want in your escalated process - and we know from long\nexperience that \"explicitly copy over what I want\" is a better security\nboundary than \"copy over everything, then remove the dangerous bits\".\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:04 UTC (Tue) by josh (subscriber, #17465) [Link]\n\n> The kernel enforces the elevation, which includes file permissions and other\n> controls (like LD_PRELOAD for example).\n\nNo, it largely doesn't. The kernel sets AT_SECURE in the auxiliary vector, and\nthen the C library and dynamic linker turns off the use of various environment\nvariables when AT_SECURE is set.\n\n(There are some kernel mechanisms around suid, but that isn't one of them.)\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:09 UTC (Tue) by DimeCadmium (subscriber, #157243)\n[Link]\n\n> The kernel sets AT_SECURE in the auxiliary vector\n\n> but that isn't one of them\n\nOK.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 14:40 UTC (Tue) by kleptog (subscriber, #1183) [Link]\n\nThis is the kernel enforcing the security boundary. SUID is not a security\nboundary, it's a gaping hole that we've managed to to stuff with enough wads\nof paper that not too much leaks through.\n\nHaving a privileged component spawn the process and then passing you the TTY\ndescriptor just seems much safer all round.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:09 UTC (Tue) by MarcB (subscriber, #101804) [Link]\n\nWhich security boundary do you mean? Setuid by definition is a complete\nviolation of all security boundaries the kernel could enforce.\n\nIt is completely up to user-space to stick to some rules administrators have\nset (I'd like to point out, that the man page of \"sudoers\" still contains the\nlegendary \"Quick guide to EBNF\", as immortalized by https://xkcd.com/1343/).\n\nAnd to make it worse, this user-space starts from a hostile environment, from\nwhich it has to disentangle itself first. This is the huge advantage of the\nuid0 solution: Privileges are handed out from a clean, already privileged\ncontext instead of from an unprivileged context that tunnels through security\nboundaries.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:40 UTC (Tue) by NYKevin (subscriber, #129325) [Link]\n\n/etc/sudoers has never been parsed or \"enforced\" by the kernel. sudo(8) is\nentirely implemented in userspace, with the sole exception that the kernel\ndeigns to allow the binary to start as root rather than the invoking user. The\nuserspace process is then responsible for checking whether the invoking user\nshould be allowed to execute the command... *after* root privileges have\nalready been granted by the kernel.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:46 UTC (Tue) by intelfx (subscriber, #130118) [Link]\n\n> Am I the only one who would much rather allow the kernel to continue\n> enforcing this security boundary well rather than allowing the likes of\n> polkit and systemd to enforce it poorly?\n\nYes, you are. Because \"poorly\" and \"well\" in your comment are pretty much\nswitched around compared to reality.\n\n### Publication format\n\nPosted Apr 30, 2024 14:41 UTC (Tue) by zdzichu (subscriber, #17118) [Link]\n\nUgh, series of microposts, split in random places, for something which should\nbe a blog note. No, thanks.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:07 UTC (Tue) by linuxrocks123 (subscriber, #34648)\n[Link]\n\nThis is actually a good idea. Can it run on-systemd init systems and/or on the\nBSDs?\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:08 UTC (Tue) by linuxrocks123 (subscriber, #34648)\n[Link]\n\nThat should be \"on non-systemd init systems\"\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 16:30 UTC (Tue) by mezcalero (subscriber, #45103) [Link]\n\nNo. It fires off a request to the service manager via IPC to start the target\nprogram/shell for you.\n\nThe other init systems on Linux do not support a concept like that to my\nknowledge (i.e. an IPC API for transiently defining and invoking services\nwithout first prepping some file on disk).\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 15:56 UTC (Tue) by carlosrodfern (subscriber, #166486)\n[Link]\n\nsystemd-run is a neat concept, and suid has its issues, but I don't like the\nidea of solely depending on systemd to do privilege escalation, because sudo\nis simple, but systemd is complex, so there is a greater chance of systemd\nhaving an obscure and catastrophic bug than sudo.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 16:05 UTC (Tue) by mb (subscriber, #50428) [Link]\n\n    \n    \n    ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- C 374 16153 23054 113185 PO File 73 29548 47647 76641 Bourne Shell 93 8817 6354 51068 C/C++ Header 93 1861 5000 18994 m4 24 1335 602 14704 yacc 2 262 175 2609 Markdown 10 678 0 2522 lex 1 172 126 1295 Perl 4 311 362 1151 Puppet 3 79 365 560 Python 10 152 209 345 YAML 5 16 38 260 JSON 7 0 0 236 sed 4 16 1 229 Protocol Buffers 2 22 49 136 Expect 7 0 0 108 Dockerfile 7 7 0 59 Text 1 0 0 1 ------------------------------------------------------------------------------- SUM: 720 59429 83982 284103 -------------------------------------------------------------------------------\n\nbecause sudo is simple\n\nThat is not my definition of \"simple\"\n\nhttps://www.sudo.ws/repos/sudo/file/tip\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 16:11 UTC (Tue) by warrax (subscriber, #103205) [Link]\n\nsudo is not simple by any stretch of the imagination.\n\n### \"run0\" as a sudo replacement\n\nPosted Apr 30, 2024 16:13 UTC (Tue) by farnz (subscriber, #17727) [Link]\n\nsudo is not simple, by any stretch of the imagination; it has a plug-in\narchitecture, a complex file format for /etc/sudoers (with associated parser),\nand a whole pile of code whose job is to sanitise the execution environment so\nthat it's \"safe\" for the rest of sudo to run. If any of that code has a bug,\nthen there's a root exploit.\n\nIn contrast, systemd-run runs as you - if the code to parse your request for\nprivilege escalation has a bug, it's not an exploit. The attack surface is the\nstuff that takes the parsed request, and decides what to do with it - which is\nmuch smaller than sudo.\n\nCopyright \u00a9 2024, Eklektix, Inc. Comments and public postings are copyrighted\nby their creators. Linux is a registered trademark of Linus Torvalds\n\n", "frontpage": true}
