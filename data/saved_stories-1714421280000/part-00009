{"aid": "40196989", "title": "Docker Compose: `version` is obsolete", "url": "https://github.com/docker/compose/issues/11628", "domain": "github.com/docker", "votes": 1, "user": "kaypee901", "posted_at": "2024-04-29 11:27:00", "comments": 0, "source_title": "[BUG] `'version' is obsolete` \u00b7 Issue #11628 \u00b7 docker/compose", "source_text": "[BUG] `'version' is obsolete` \u00b7 Issue #11628 \u00b7 docker/compose \u00b7 GitHub\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ndocker / compose Public\n\n  * Notifications\n  * Fork 5.1k\n  * Star 32.4k\n\nJump to bottom\n\n# [BUG] 'version' is obsolete #11628\n\nClosed\n\nfrepke opened this issue Mar 15, 2024 \u00b7 23 comments\n\nClosed\n\n# [BUG] 'version' is obsolete #11628\n\nfrepke opened this issue Mar 15, 2024 \u00b7 23 comments\n\nLabels\n\nkind/bug status/0-triage\n\n## Comments\n\n###\n\nfrepke commented Mar 15, 2024\n\n### Description\n\nAfter updating to version v2.25.0, the command docker compose pull docker-\ncompose.yaml gives the error 'version' is obsolete\n\n### Steps To Reproduce\n\nNo response\n\n### Compose Version\n\n    \n    \n    v2.25.0\n\n### Docker Environment\n\n    \n    \n    Client: Docker Engine - Community Version: 24.0.7 Context: default Debug Mode: false Plugins: buildx: Docker Buildx (Docker Inc.) Version: v0.12.1 Path: /root/.docker/cli-plugins/docker-buildx compose: Docker Compose (Docker Inc.) Version: v2.25.0 Path: /root/.docker/cli-plugins/docker-compose Server: Containers: 27 Running: 27 Paused: 0 Stopped: 0 Images: 24 Server Version: 24.0.7 Storage Driver: overlay2 Backing Filesystem: extfs Supports d_type: true Using metacopy: false Native Overlay Diff: true userxattr: false Logging Driver: json-file Cgroup Driver: systemd Cgroup Version: 2 Plugins: Volume: local Network: bridge host ipvlan macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog Swarm: inactive Runtimes: io.containerd.runc.v2 runc Default Runtime: runc Init Binary: docker-init containerd version: 3dd1e886e55dd695541fdcd67420c2888645a495 runc version: v1.1.10-0-g18a0cb0 init version: de40ad0 Security Options: apparmor seccomp Profile: builtin cgroupns Kernel Version: 6.5.13-1-pve Operating System: Debian GNU/Linux 12 (bookworm) OSType: linux Architecture: x86_64 CPUs: 4 Total Memory: 6.723GiB Name: hpt630 ID: beea869f-20a2-4a3f-a514-6ff0f77b5433 Docker Root Dir: /srv/dev-disk-by-uuid-c1677ca2-07a1-4495-b5c3-ec3f921e2e60/docker Debug Mode: false Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false\n\n### Anything else?\n\nNo response  \n---  \nThe text was updated successfully, but these errors were encountered:  \n  \nfrepke added kind/bug status/0-triage labels Mar 15, 2024\n\nfrepke changed the title version is obsolete 'version' is obsolete Mar 15,\n2024\n\nfrepke changed the title 'version' is obsolete BUG: 'version' is obsolete Mar\n15, 2024\n\nfrepke changed the title BUG: 'version' is obsolete [BUG] 'version' is\nobsolete Mar 15, 2024\n\n###\n\nXeckt commented Mar 15, 2024 \u2022\n\nAs I recall, this isn't a bug, version is only informative since a long time\nago now. You can use loose options and you don't need it, check the\nspec:https://github.com/compose-spec/compose-spec/blob/master/spec.md#version-\nand-name-top-level-elements  \n---  \n  \nAuthor\n\n###\n\nfrepke commented Mar 15, 2024\n\n> As I recall, this isn't a bug, version is only informative since a long time\n> ago now. You can use loose options and you don't need it, check the\n> spec:https://github.com/compose-spec/compose-\n> spec/blob/master/spec.md#version-and-name-top-level-elements\n\nThanks, didn't know that  \n---  \n  \nfrepke closed this as completed Mar 15, 2024\n\nAuthor\n\n###\n\nfrepke commented Mar 15, 2024\n\n@Xeckt gave the answer  \n---  \n  \nBJReplay mentioned this issue Mar 20, 2024\n\nDocker Compose version v2.25.0 reports version is obsolete\njasonacox/Powerwall-Dashboard#453\n\nClosed\n\n###\n\nHenriWahl commented Mar 20, 2024\n\nHow will docker-compose.yml files for versions 2.x and 3.x be distinguished\nwithout the version tag?  \n---  \n  \nsmanders mentioned this issue Mar 20, 2024\n\ndocker compose 'version' is obsolete externpro/externpro#5\n\nClosed\n\n###\n\nbkraul commented Mar 22, 2024\n\n> How will docker-compose.yml files for versions 2.x and 3.x be distinguished\n> without the version tag?\n\nI have the same question. How is this going to work...there are definitely\ndifferences between 2.x and 3.x that are not compatible with one another?  \n---  \n  \n###\n\nluciangabor commented Mar 23, 2024\n\nThe version had (and in one case still has) a very ... limited relevance. It's\npurpose was to ... limit what you were allowed to write in those yaml files.\nThe only case where that's still \"relevant\" is for docker stack.The current\nfile format is more of a \"descendant\" of the 2.x series and the 3.x series is,\nagain, only relevant for docker stack, where 2.x had no ... relevance.I'm glad\nit's gone. It was tiring to see \"3\" as version  \n---  \n  \n###\n\nrseymour commented Mar 25, 2024\n\nCould the docs be updated?  \n---  \n  \nrseymour mentioned this issue Mar 25, 2024\n\nUpdate docs to recommend against specifying the version in docker-compose.yml\n#11659\n\nClosed\n\nschuuust mentioned this issue Mar 25, 2024\n\nDocker Compose Version Tag is Obsolete OpenC3/cosmos#1159\n\nClosed\n\nsih4sing5hong5 mentioned this issue Mar 26, 2024\n\n\u8a2d\u5b9aCD i3thuan5/itaigi#57\n\nMerged\n\noriginalsouth mentioned this issue Mar 26, 2024\n\nRemove Docker Compose: \"version\" minvws/nl-kat-coordination#2718\n\nMerged\n\n8 tasks\n\nbossm0n5t3r added a commit to bossm0n5t3r/realworld-elixir-phoenix that\nreferenced this issue Mar 26, 2024\n\nfix: Edit docker-compose.yml\n\nc549433\n\n    \n    \n    - Delete version - docker/compose#11628\n\nwojiushixiaobai mentioned this issue Mar 29, 2024\n\nfeat: \u66f4\u65b0 docker 26.0.0 jumpserver/installer#401\n\nMerged\n\noddysee added a commit to oddysee/dockge that referenced this issue Mar 31,\n2024\n\ndocker compose version is absolete\n\n5725f24\n\n    \n    \n    After upgrading to compose v2.25.0, the presence of a `version` element now throws an error - this relates to docker/compose#11628\n\noddysee mentioned this issue Mar 31, 2024\n\ndocker compose version is obsolete louislam/dockge#473\n\nMerged\n\n7 tasks\n\n###\n\nGrimalDev commented Mar 31, 2024\n\n> Could the docs be updated?\n\nSorry to do some action on this obviously closed issue, but i have a Naive\nquestion. From a \"best practices of programming\" point of view, isn't it\nalways better to be explicit about versioning for the \"Just in case\" sake?  \n---  \n  \nCrsiX added a commit to CrsiX/plane that referenced this issue Mar 31, 2024\n\nDropped version info from docker-compose files\n\ncb7c22c\n\n    \n    \n    According to the docker issue 11628 (docker/compose#11628) the 'version' field in docker-compose files is outdated. It shows a warning like the following on hosts with a newer Docker version: ``` WARN[0000] /srv/plane/docker-compose.yaml: `version` is obsolete ``` Also, the specs itself state the version was only informative: https://github.com/compose-spec/compose-spec/blob/master/spec.md#version-and-name-top-level-elements > The top-level `version` property is defined by the Compose > Specification for backward compatibility. It is only informative. > Compose doesn't use version to select an exact schema to > validate the Compose file, but prefers the most recent schema > when it's implemented.\n\nCrsiX mentioned this issue Mar 31, 2024\n\nDropped version info from docker-compose files makeplane/plane#4096\n\nMerged\n\ntrjohnson19 mentioned this issue Apr 3, 2024\n\ndocker commands return the error WARN[0000] ...: version is obsolete\ntrjohnson19/docker-stack#52\n\nClosed\n\nsriramveeraghanta pushed a commit to makeplane/plane that referenced this\nissue Apr 4, 2024\n\nDropped version info from docker-compose files (#4096)\n\n71b7300\n\n    \n    \n    According to the docker issue 11628 (docker/compose#11628) the 'version' field in docker-compose files is outdated. It shows a warning like the following on hosts with a newer Docker version: ``` WARN[0000] /srv/plane/docker-compose.yaml: `version` is obsolete ``` Also, the specs itself state the version was only informative: https://github.com/compose-spec/compose-spec/blob/master/spec.md#version-and-name-top-level-elements > The top-level `version` property is defined by the Compose > Specification for backward compatibility. It is only informative. > Compose doesn't use version to select an exact schema to > validate the Compose file, but prefers the most recent schema > when it's implemented.\n\ndefunctl mentioned this issue Apr 4, 2024\n\nRemove version from docker compose yaml files stellarwp/slic#177\n\nMerged\n\nm3adow mentioned this issue Apr 5, 2024\n\nDisable autocomplete for secret values field lauraseidler/kubeseal-ui#269\n\nOpen\n\nerikataot mentioned this issue Apr 16, 2024\n\nFeat: Remove Deprecated Version Entry From Docker Compose bcgov/onroutebc#1331\n\nMerged\n\n14 tasks\n\ndragon-dxw mentioned this issue Apr 17, 2024\n\nRemove obsolete version string from docker compose configs\nnationalarchives/ds-caselaw-editor-ui#1447\n\nMerged\n\n###\n\nglenjamin commented Apr 17, 2024 \u2022\n\nWhat's the reasoning behind annoying everyone with the warning and making a\nfew million projects update their files, as oppoosed to just ignoring the\nfield and saying nothing?  \n---  \n  \n###\n\nbkraul commented Apr 17, 2024\n\n> What's the reasoning behind annoying everyone with the warning and making a\n> few million projects update their files, as oppoosed to just ignoring the\n> field and saying nothing?\n\nI am going to guess ignoring it would not be proper cleanup. This is a\ndeprecation. Deprecations carry warnings before the removal of the feature. It\nis saying at some point this will generate errors, so clean it up.  \n---  \n  \n###\n\nglenjamin commented Apr 17, 2024\n\n> > What's the reasoning behind annoying everyone with the warning and making\n> a few million projects update their files, as oppoosed to just ignoring the\n> field and saying nothing?\n>\n> I am going to guess ignoring it would not be proper cleanup. This is a\n> deprecation. Deprecations carry warnings before the removal of the feature.\n> It is saying at some point this will generate errors, so clean it up.\n\nRight, and I'm saying that this is more work for both the maintainers and\nevery consumer in the world, when compared to simply ignoring the field.Who\nbenefits from this work?  \n---  \n  \n###\n\nbkraul commented Apr 17, 2024\n\nIt's called proper SDLC. If this was not done, we would have a bloated,\nunmaintainable mess. So to your question, everyone benefits from it,\nmaintainers and consumers alike. Cleaner code, accurate documentation and\nexpected functionality. I know I sound like a snob (not trying to be one,\nhonestly), and I understand the frustration with having to make changes, but I\nwould say it is part of it.  \n---  \n  \n###\n\nglenjamin commented Apr 17, 2024\n\n> If this was not done, we would have a bloated, unmaintainable mess.\n\nEvery change has a cost and a benefit.My proposal is that if you:\n\n  * kept the version field in the schema\n  * included a comment in the code to say it used to be used but isn't anymore\n  * removed mention of version from the docs\n\nThen that would not lead to ongoing bloat or maintainence burden.Basically\ninstead of doing that, you've had to implement a warning and a deprecation\nperiod, and many many thousands of people across the world either have to\nupdate their code, or live with the warning.The APIs that people like the most\nare the ones that retain backwards compatibility, as that is more user\nfriendly.I appreciate that making breaking API changes is a common pattern\nthat loads of projects do - but that doesn't necessarily mean they're always\nworth it.There's writing on this subject out there if you go looking, eg\nhttp://blog.ezyang.com/2016/12/thoughts-about-spec-ulation-rich-hickey/  \n---  \n  \nmichaellehmkuhl added a commit to electricpulp/docker-magento that referenced\nthis issue Apr 17, 2024\n\nRemoves obsolete version directive from docker compose files\n\n60ee457\n\n    \n    \n    docker/compose#11628\n\nmichaellehmkuhl mentioned this issue Apr 17, 2024\n\nRemoves obsolete version directive from docker compose files markshust/docker-\nmagento#1125\n\nMerged\n\n###\n\ndaveisfera commented Apr 17, 2024\n\nBut what about when a feature from a newer version is used on older software\nthat doesn't support it?  \n---  \n  \nstudioego mentioned this issue Apr 18, 2024\n\nDocker compose 'version' element has been deprecated and shows up with an\nobsoleted error lablup/backend.ai#2034\n\nClosed\n\nJinksi mentioned this issue Apr 19, 2024\n\n(Client) Warning in console when starting docker containers: docker-\ncompose.yml: 'version' is obsolete Automattic/woocommerce-payments#8672\n\nClosed\n\nchigby added a commit to newamericafoundation/newamerica-cms that referenced\nthis issue Apr 19, 2024\n\nRemove obsolete \"version\" key\n\n4fd09f0\n\n    \n    \n    Avoids the console message about `version` being obsolete when running docker compose commands. Further information: docker/compose#11628\n\n###\n\nhopeseekr commented Apr 21, 2024\n\n> The version had (and in one case still has) a very ... limited relevance.\n> It's purpose was to ... limit what you were allowed to write in those yaml\n> files. The only case where that's still \"relevant\" is for docker stack.The\n> current file format is more of a \"descendant\" of the 2.x series and the 3.x\n> series is, again, only relevant for docker stack, where 2.x had no ...\n> relevance.I'm glad it's gone. It was tiring to see \"3\" as version\n\nI don't understand a single word that you said... Huh??Are you saying that I\ncan't write docker compose v3 \"except for docker\"? Well, what else is\nthere???Does this mean that docker-compose and \"other\" compose have forked so\nahrd that \"other compose\" can't understand docker compose v3 files? That seems\nto be what youre saying.  \n---  \n  \n###\n\nhopeseekr commented Apr 21, 2024\n\n> From a \"best practices of programming\" point of view, isn't it always better\n> to be explicit about versioning for the \"Just in case\" sake?\n\nYes, this change was obviously done with little thought, extremely little\nwarning, absolutely no marketing, and by someone or some people with extremely\nlittle architecting wisdom.It's a categorical bad move. XML still has\nversioning and it's only 1.0 for the last 26 years.  \n---  \n  \n###\n\nhopeseekr commented Apr 21, 2024\n\n> But what about when a feature from a newer version is used on older software\n> that doesn't support it?\n\nThe new guys obviously don't think that far ahead into the future.We can now\nno longer look at the first like of docker-compose.yml and understand\nimplicitly how up-to-date it is.version 3.6 means something. It means\n\"Supports v3 syntax and Docker 18+\".Removing it removes a lot of important\ninformation.  \n---  \n  \ntaylorsilva added a commit to concourse/concourse that referenced this issue\nApr 21, 2024\n\ndocker compose version is obsolete`\n\n932391e\n\n    \n    \n    As per: docker/compose#11628 Therefore we can remove it so we stop getting the warnings from docker Signed-off-by: Taylor Silva <dev@taydev.net>\n\nBerglundDaniel mentioned this issue Apr 24, 2024\n\nFix a docker warning by removing version from docker files\nmakerspace/makeradmin#507\n\nMerged\n\n###\n\nwmorrell commented Apr 24, 2024\n\n> I don't understand a single word that you said... Huh??Are you saying that I\n> can't write docker compose v3 \"except for docker\"? Well, what else is\n> there???Does this mean that docker-compose and \"other\" compose have forked\n> so ahrd that \"other compose\" can't understand docker compose v3 files? That\n> seems to be what youre saying.\n\nPlease see the documentation link from Xeckt in the first reply. The version\ntop-level element has been deprecated and obsolete in docker compose for some\ntime. The subcommand is now by default using the \"default\" running mode, where\nunknown attributes emit a warning, but are ignored. If running in \"strict\"\nmode, unknown attributes are an error; and if running in \"loose\" mode, unknown\nattributes are ignored and there is no warning. I'm not sure if there are\nflags implemented yet to run in \"strict\" or \"loose\" mode.The file spec\naccepted by docker compose is different from the spec accepted by docker\nstack. The spec for version 2.x is for docker compose, and that subcommand is\nnow removing version as a known attribute; because it is not used. The spec\nfor version 3.x is for docker stack, and includes the additional attributes\nfor choosing deployment targets in a Docker Swarm cluster. The two\nspecifications are not compatible, but share some history.If you were trying\nto use the 3.x spec for docker compose, you were using only the parts that\noverlapped with the 2.x spec. So, in practice, version: 3.6 doesn't actually\nmean anything at all, and hasn't for some time. Because docker compose has\nnever implemented the 3.x spec additions.  \n---  \n  \n###\n\nrseymour commented Apr 24, 2024\n\nThose last two paragraphs are a stunning revelation to me. I thought docker-\ncompose.yml specs always worked with the command hyphenated in their name.\nGood to know.  \n---  \n  \n###\n\nbkraul commented Apr 24, 2024\n\n> > I don't understand a single word that you said... Huh?? Are you saying\n> that I can't write docker compose v3 \"except for docker\"? Well, what else is\n> there??? Does this mean that docker-compose and \"other\" compose have forked\n> so ahrd that \"other compose\" can't understand docker compose v3 files? That\n> seems to be what youre saying.\n>\n> Please see the documentation link from Xeckt in the first reply. The version\n> top-level element has been deprecated and obsolete in docker compose for\n> some time. The subcommand is now by default using the \"default\" running\n> mode, where unknown attributes emit a warning, but are ignored. If running\n> in \"strict\" mode, unknown attributes are an error; and if running in \"loose\"\n> mode, unknown attributes are ignored and there is no warning. I'm not sure\n> if there are flags implemented yet to run in \"strict\" or \"loose\" mode.The\n> file spec accepted by docker compose is different from the spec accepted by\n> docker stack. The spec for version 2.x is for docker compose, and that\n> subcommand is now removing version as a known attribute; because it is not\n> used. The spec for version 3.x is for docker stack, and includes the\n> additional attributes for choosing deployment targets in a Docker Swarm\n> cluster. The two specifications are not compatible, but share some\n> history.If you were trying to use the 3.x spec for docker compose, you were\n> using only the parts that overlapped with the 2.x spec. So, in practice,\n> version: 3.6 doesn't actually mean anything at all, and hasn't for some\n> time. Because docker compose has never implemented the 3.x spec additions.\n\nThank you for the explanation. It stopped from writing something that would\nhave probably been a bit inflammatory, lol. A lot of outcry about something\nthat has been a non-issue for quite a while. Took all of 2 seconds to sed my\ndocker-compose files and remove the service spec.  \n---  \n  \n###\n\ndaveisfera commented Apr 24, 2024\n\n> Thank you for the explanation. It stopped from writing something that would\n> have probably been a bit inflammatory, lol. A lot of outcry about something\n> that has been a non-issue for quite a while. Took all of 2 seconds to sed my\n> docker-compose files and remove the service spec.\n\nOn my local laptop, I agree that it's a non-issue because it's relatively easy\nto keep things up to date, but what about on installed infrastructure that is\nsupported for a long time? I guess that some/most of the enterprise distros\nhave moved to podman and other options, so it's less of an issue there, but\ndoes this mean that docker is only intended for developer use and not meant\nfor production use?  \n---  \n  \n###\n\nbkraul commented Apr 24, 2024\n\nNo, actually, we do have docker swarm enterprise infra as well, and sed worked\njust as well. Really it is about the deployment implementation. We have\nsimilar deployment structures across dev/non-prod/prod (with dev being\nobviously docker standalone and non-prod/prod being swarm).It's really not\nmuch of a change. Again, as explained, subcommands that have worked \"with\" the\nversion before should work just fine. This is more about removing the warning\n(and eventual error).The one situation where this could become a bit of a\nheadache (which I handle some of those too) will be Portainer deployments (and\nthe fact that you can define docker-compose in the UI), but, their team is\nalready making changes to adjust.  \n---  \n  \nThis was referenced Apr 24, 2024\n\nFix Python version in documentation creativecommons/cc-legal-tools-app#441\n\nMerged\n\nRemove version: from docker-compose.yml creativecommons/cc-legal-tools-\ndata#190\n\nMerged\n\nrbouma pushed a commit to dockergiant/rolldev that referenced this issue Apr\n25, 2024\n\nRemove version: from docker-compose.yml: docker/compose#11628\n\n0212de8\n\nJaxiiRuff mentioned this issue Apr 26, 2024\n\nDocker Compose 'version' line is now fully deprecated on newer versions.\nubergeek77/Lemmy-Easy-Deploy#90\n\nClosed\n\nLeSuisse added a commit to Enalean/tuleap that referenced this issue Apr 27,\n2024\n\nchore: Drop version key from Docker Compose files\n\ne2a13b1\n\n    \n    \n    See docker/compose#11628 for more information No functional changes. Part of request #37907 Update dev/build environment [W17 2024] Change-Id: I6384f73d15061de92179486e3913bcfebea24092\n\nacheroncrypto added a commit to solana-playground/solana-playground that\nreferenced this issue Apr 27, 2024\n\nRemove version field in docker compose file\n\n90b5c93\n\n    \n    \n    Running `docker compose` command results in `version` is obsolete warning in newer versions. See docker/compose#11628\n\ntimiimit mentioned this issue Apr 27, 2024\n\nRemove obsolete version from docker-compose.yml timiimit/UT4MasterServer#235\n\nMerged\n\nSign up for free to join this conversation on GitHub. Already have an account?\nSign in to comment\n\nLabels\n\nkind/bug status/0-triage\n\n12 participants\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
