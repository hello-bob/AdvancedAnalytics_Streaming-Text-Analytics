{"aid": "40208815", "title": "Optimizing for Accidental Robert Picardo", "url": "https://jacobbrazeal.wordpress.com/2024/04/30/optimizing-for-accidental-robert-picardo/", "domain": "jacobbrazeal.wordpress.com", "votes": 1, "user": "tibbar", "posted_at": "2024-04-30 09:14:05", "comments": 0, "source_title": "Optimizing for Accidental Robert Picardo", "source_text": "Optimizing for Accidental Robert Picardo \u2013 Jacob Brazeal\n\nSkip to content\n\nJacob Brazeal\n\n# Optimizing for Accidental Robert Picardo\n\nJacob Brazeal Uncategorized April 30, 2024April 30, 2024 6 Minutes\n\nIt\u2019s always a good day when you run into Robert Picardo.\n\nI. A Curious Coincidence\n\nOur story begins on a lazy weekend sometime in August, 2023, in that timeless\ncity, San Francisco. I was out for a walk with Sarah on the wharf, in hopes of\ncatching sight of some of our favorite local dogs in the park there.\nMeanwhile, unbeknownst to us and not too far away, a certain Star Trek actor\n(one of Sarah\u2019s favorites!) was planning a weekend in much the same\nneighborhood.\n\n\u201cSeizing command of my weekend,\u201d posts the Doctor.\n\nAs luck would have it, our paths crossed and he graciously took a picture with\nus (the one headlining this story). As you can see, he is even wearing the\nsame hat! It was a truly happy little coincidence and we still like to tell\nthe story.\n\nII. Another Coincidence\n\nOf course, by far the easier way to come across Robert Picardo is to watch a\nmovie wherein he makes an unexpected cameo. Such was our good fortune last\nweek, while watching \u201cConfess, Fletch!\u201d, a light hearted art heist movie that\nbrings in Robert Picardo for a nice scene at the end. Especially now that we\nhave a tiny personal connection with the actor, this really made the movie for\nus.\n\nOf course, one can\u2019t help but ask... can we make our own luck? Let us say that\nwe want movies and TV shows satisfying the following criteria:\n\n  * They are *not* Star Trek movies.\n  * But they star as many actors as possible who have each appeared in a large number of Star Trek shows,\n  * acting as other characters (i.e. not just showing up as themselves for some re-union or parody etc.)\n  * They are reasonably highly rated, fun in their own right.\n\nIn essence, we\u2019d like to be overwhelmed by cameos of Star Trek actors in other\nsettings. Can we do it?\n\nIII. Trapped on a Plane with the IMDB Database\n\nOn Monday I found myself on a long cross-country flight and set about\nanswering this important question. I downloaded the IMDB data sets in the\nairport and settled in. Since I couldn\u2019t really figure out the wifi in the\nairplane and find the internet incredibly distracting anyway, I decided to\nofficially challenge myself to find Robert Picardo WITHOUT wifi. This turned\nout to be surprisingly difficult in its own right, so I\u2019ll regale you with the\nstory here.\n\nMy first plan of attack was to load all the data, which I had in TSV format,\ninto memory and analyze it with Node.js. Unfortunately the files are large \u2013\nso large that Node refused to allocate enough memory to store the first file\n(~5 GiB) as a string. However, it was able to load the file into memory as a\nraw buffer of bytes. \u201cNo problem!\u201d, I said \u2014 \u201cI\u2019ll parse the buffer byte-by-\nbyte, recursive-descent style. That way I only need to make a bunch of small\nstrings, one for each row!\u201d Sadly, here Node ran out of memory while I was\nbuilding data structures out of the buffer.\n\nI looked through the other files and found that one of them was as large as 7\nGiB. Unfortunately, I particularly needed the information in these large\nfiles. I thought grimly of trying write some streaming parser in Python that\nwould join all the files in some clever way, but we all know I\u2019m not really\nsmart enough to do that. Not without wifi.\n\nWe are now an hour into the plane ride. \u201cI should probably just do this in a\ndatabase,\u201d I said to myself. Unfortunately, while I have postgres running on\nmy computer, I really don\u2019t know what the password to any of the users is. The\nlocal server kindly let me try as many passwords as I could think of, but NONE\nof them was the right one. The man pages for psql and postgres did not suggest\nany bypasses, helpfully informing me that my network administrator should be\nable to tell me the password. Wait a minute ... what if I start a brand new\nexecution of postgres on a different port? Then I\u2019M the network administrator,\nand maybe it\u2019ll let me log in from scratch!\n\nIt turns out that a new postgres instance needs a data directory strewn with a\nlot of configs and VERSIONS and so forth. postgres kept telling me that it was\nmissing thus-and-such file, so I would helpfully make it a blank one, until\none of the error messages asked me to please run initdb. That created a lot of\nfiles \u2014 I was really quite grateful \u2013 and shortly I was able to log in to the\ndatabase.\n\nWe are now two hours in. Now I needed to load these giant TSVs into the\ndatabase. Of course the way you do THAT \u2014 everyone knows this \u2014 is to run a\n\\copy command. Anyway, the psql documentation helpfully tells you that the\nsyntax of this command is just like postgres\u2019s COPY command. I feverishly\ncheck my backpack for a reference: only the Nand2Tetris book, which is\nunlikely to explain the syntax for this (or any) SQL command. I try a few\nplausible parameters but get stuck on setting a tab (\\t) as a delimiter, for\nthe program wants delimiters of only a single byte. (The tab, in fact, IS a\nsingle byte, despite its escaped representation, but I\u2019m not sure how to tell\npsql this... unicode, perhaps?)\n\nI am struck by a flash of blazing insight and type \\copy into the search bar\nof my mac. Who knows what this hail mary might yield. Stunningly, it yields a\nmatch, which turns out to be part of the postgres source code I downloaded\nages ago and was unable to build. I am thrown headfirst in the file that tests\nCOPY itself. I am now a rich man in the currency of copy syntax. Sadly, there\nis no evidence that TSVs are supported in any way, but CSVs look very easy\nindeed. Perhaps I should write a program to convert my TSVs to CSVs.\n\nI try writing another Javascript buffer-parsing program to convert the files.\nIt works on the smaller data files but stubbornly crashes on the big ones.\nStumped for a moment, I recall the old unix utility tr. Off to the man pages I\ngo. It is much better at managing memory than my stupid JavaScript programs.\nUnfortunately, it can apparently only translate single-character patterns; it\ntook care of my delimiters for me, but I also wanted to get rid of the \\N null\nsymbol in the TSVs, and that was beyond tr\u2018s powers. However, it seems that\n\\copy CAN handle multiple characters when it comes to matching null symbols,\nunlike delimiters, and so by a mix of tr and incantations stolen from the\npostgresql unit tests, I\u2019m able to import all the data to the database. Three\nhours have elapsed.\n\nIV. Get to the point, Jacob!\n\nWell, after that I wrote a lot of SQL to actually answer the question. Suffice\nit to say that I found myself making a lot of materialized views to checkpoint\nlittle pieces of the analysis, and wound up with the following database\nschema:\n\nThe tables come from the IMDB dataset, and the materialized views are my\nlittle investigations, built up in a fairly boring deterministic way from the\noriginal question (determine the non-Star Trek shows that contain a lot of\nactors who ARE in Star Trek.) I made the executive decision to limit the Star\nTrek canon to 1438 episodes of 6 shows (Strange New Worlds, Deep Space Nine, a\nfew others), due to the ASTONISHINGLY VAST corpus of Star Trek-branded content\non IMDB.\n\nFrom here, I assigned each actor a score, proportional to the number of\nepisodes of canon they acted in, and assigned each non-Star Trek movie a score\n\u2014 the number of actors in the movie who had participated in at least a certain\nnumber of episodes of Star Trek, too. I also filtered the movies for a\nreasonable rating on IMDB to flush out a lot of after shows and other off-\ntopic material. I finished just as the plane landed.\n\nThe results \u2013 the top 50 episodes of non-Star Trek material:\n\nAs you can see, a few of these series are frequent contenders \u2013 Boston Legal\nand Hell on Wheels are particularly interesting, but there are scattered\nepisodes of other shows worth watching, too. For example, if we take that\n\u201cAlienated\u201d episode near the top, here\u2019s its Star Trek representation:\n\n  * Wil Wheaton (165 episodes of my selected canon as Wesley Crusher)\n  * George Takei (100 episodes as Hikaru Sulu)\n  * Majel Barrett (91 episodes as Nurse Christine Chapel and many other characters, including the computer systems)\n  * Walter Koenig (60 episodes as Pavel Chekov)\n  * Grace Lee Whitney (18 episodes as Janice Rand)\n\nPLUS the writers of this episode, J. Larry Carroll and David Carren, both have\nStar Trek credits as well.\n\nTo me, this is pretty stunning and probably the winning episode overall for\nthis post \u2014 a huge representation of famous Star Trek actors, across various\nseries, acting as other characters in another show (not a Star Trek parody or\nanything like that).\n\nFinally, we must of course find the best show of this type that includes\nRobert Picardo. My vote is for the episode \u201cThe Storm\u201d from the show \u201cThe Dead\nZone\u201d, which besides Picardo includes Nicole de Boer (\u201cEzri Dax\u201d from Deep\nSpace Nine), and was created by Michael Piller, who made vast writing\ncontributions to Star Trek. (There\u2019s a few other minor Star Trek alumni in the\ncredits, too.)\n\n... Of course, one could just watch Star Trek too.\n\n### Share this:\n\nLike Loading...\n\n### Related\n\n## Published by Jacob Brazeal\n\nView all posts by Jacob Brazeal\n\nPublished April 30, 2024April 30, 2024\n\n### Leave a comment Cancel reply\n\n  * April 2024\n  * October 2023\n  * July 2023\n  * September 2022\n  * February 2022\n  * January 2022\n  * November 2021\n  * November 2020\n  * August 2019\n  * August 2018\n\nBlog at WordPress.com.\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * Jacob Brazeal\n    * Already have a WordPress.com account? Log in now.\n\n  *     * Jacob Brazeal\n    * Customize\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\nLoading Comments...\n\n%d\n\n", "frontpage": false}
