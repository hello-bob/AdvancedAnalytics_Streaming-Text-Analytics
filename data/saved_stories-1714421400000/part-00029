{"aid": "40197621", "title": "Percival \u2013 a declarative data query and visualization language", "url": "https://percival.ink/", "domain": "percival.ink", "votes": 1, "user": "kaathewise", "posted_at": "2024-04-29 12:49:57", "comments": 0, "source_title": "Percival", "source_text": "Percival\n\n# Welcome to Percival!\n\nPercival is an interactive in-browser notebook for declarative data analysis\nand visualization. It combines the power of compiled Datalog queries with the\nflexibility of modern plotting libraries for the web.\n\nThis notebook is fully interactive! Here are the controls:\n\n  * Edit the contents of any cell in the code editor, and press Shift+Enter to save.\n  * Toggle source code visibility and delete cells in the left gutter.\n  * Create new cells by hovering your mouse in an empty space and clicking the popup.\n\nTo get started, let's dive into the basics of the language.\n\n99\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n\u203a\n\n\u2304\n\n# Welcome to Percival!\n\nPercival is an interactive in-browser notebook for **declarative data\nanalysis** and **visualization**. It combines the power of compiled\n[Datalog](https://en.wikipedia.org/wiki/Datalog) queries with the flexibility\nof [modern plotting libraries](https://observablehq.com/@observablehq/plot)\nfor the web.\n\n![Picture of a\nlandscape](https://upload.wikimedia.org/wikipedia/commons/e/ee/Lake_Geneva_after_storm.jpg)\n\nThis notebook is fully interactive! Here are the controls:\n\n\\- Edit the contents of any cell in the code editor, and press Shift+Enter to\nsave.\n\n\\- Toggle source code visibility and delete cells in the left gutter.\n\n\\- Create new cells by hovering your mouse in an empty space and clicking the\npopup.\n\nTo get started, let's dive into the basics of the language.\n\n## Intro to Datalog\n\nDatalog is a fully-featured database query language, similar to SQL. It\noriginates from logic programming as a subset of Prolog. The basic object in\nDatalog is called a relation, and it is the equivalent of a table in\ntraditional databases.\n\nLet's create a very simple relation that stores edges in a directed graph.\nThis relation has two named fields, x and y.\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n\u203a\n\n## Intro to Datalog\n\nDatalog is a fully-featured database query language, similar to SQL. It\noriginates from logic programming as a subset of Prolog. The basic object in\nDatalog is called a _relation_, and it is the equivalent of a table in\ntraditional databases.\n\nLet's create a very simple relation that stores edges in a directed graph.\nThis relation has two named fields, `x` and `y`.\n\nTable{edge} := [\n\nedge(x: 1, y: 2),\n\nedge(x: 2, y: 3),\n\nedge(x: 2, y: 4),\n\n]\n\n9\n\n1\n\n2\n\n3\n\n4\n\n\u203a\n\n// Edge relation: each line is a database entry.\n\nedge(x: 1, y: 2).\n\nedge(x: 2, y: 3).\n\nedge(x: 2, y: 4).\n\nWith Datalog, you can compute all paths within this graph by writing the query\nin the following code cell. This query consists of two rules, which use the :-\nnotation. When we run this query, its outputs are displayed above the cell.\n\n9\n\n1\n\n\u203a\n\nWith Datalog, you can compute all paths within this graph by writing the query\nin the following code cell. This query consists of two _rules_, which use the\n`:-` notation. When we run this query, its outputs are displayed above the\ncell.\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n\u203a\n\n// Given an edge x -> y, there is a path x -> y.\n\npath(x, y) :- edge(x, y).\n\n// Given an edge x -> z and a path z -> y, there is a path x -> y.\n\npath(x, y) :- edge(x, y: z), path(x: z, y).\n\nOne of Percival's key features is reactivity. Try changing the first code cell\nby adding the following line, which introduces a new entry to the database:\n\n    \n    \n    edge(x: 4, y: 5).\n\nAfter that, press Shift+Enter to save you work. What happens? You should see\nthe results of the path cell change as well, since its dependent relation edge\nwas updated.\n\nExercise: Now it's your turn. See if you can understand what the following\nquery is doing, and try to modify it to also return direct connections to node\n1.\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n\u203a\n\n\u2304\n\nOne of Percival's key features is _reactivity_. Try changing the first code\ncell by adding the following line, which introduces a new entry to the\ndatabase:\n\n```\n\nedge(x: 4, y: 5).\n\n```\n\nAfter that, press Shift+Enter to save you work. What happens? You should see\nthe results of the `path` cell change as well, since its dependent relation\n`edge` was updated.\n\n**Exercise:** Now it's your turn. See if you can understand what the following\nquery is doing, and try to modify it to also return direct connections to node\n1.\n\n9\n\n1\n\n2\n\n3\n\n4\n\n\u203a\n\n\u2304\n\n// Find all \"friends of friends\" of node 1 in the graph.\n\nfriends1(friend_of_friend) :-\n\nedge(x: 1, y: friend),\n\nedge(x: friend, y: friend_of_friend).\n\n## Embedding Code\n\nThese examples show the core of Datalog in its purest form, a programming\nlanguage based on the relational algebra. However, to do real-world data\nanalysis, we need to support other operations, like arithmetic, strings, and\nother standard data types!\n\nPercival handles this situation by allowing you to seamlessly embed JavaScript\nexpressions within queries. These are delimited by backquotes.\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n\u203a\n\n## Embedding Code\n\nThese examples show the core of Datalog in its purest form, a programming\nlanguage based on the relational algebra. However, to do real-world data\nanalysis, we need to support other operations, like arithmetic, strings, and\nother standard data types!\n\nPercival handles this situation by allowing you to seamlessly embed JavaScript\nexpressions within queries. These are delimited by backquotes.\n\nTable{name} := [\n\nname(full_name: \"Alice Carol\", sqrt_age: 4.47213595499958),\n\nname(full_name: \"Foo Bar\", sqrt_age: 6.708203932499369),\n\nname(full_name: \"Baz Lam\", sqrt_age: 3.4641016151377544),\n\n]\n\nTable{person} := [\n\nperson(age: 20, first: \"Alice\", last: \"Carol\"),\n\nperson(age: 45, first: \"Foo\", last: \"Bar\"),\n\nperson(age: 12, first: \"Baz\", last: \"Lam\"),\n\n]\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n\u203a\n\n\u2304\n\nname(full_name: `first + \" \" + last`, sqrt_age) :-\n\nperson(first, last, age),\n\nsqrt_age = `Math.sqrt(age)`.\n\nperson(first: \"Alice\", last: \"Carol\", age: 20).\n\nperson(first: \"Foo\", last: \"Bar\", age: 45).\n\nperson(first: \"Baz\", last: \"Lam\", age: 12).\n\nFor a more complex example, here is how you would find all paths of length at\nmost 10 inside a directed graph.\n\n9\n\n1\n\n\u203a\n\nFor a more complex example, here is how you would find all paths of length _at\nmost 10_ inside a directed graph.\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\u203a\n\n\u2304\n\nwalk(x: v, y: v, len: 0) :- edge(x: v).\n\nwalk(x: v, y: v, len: 0) :- edge(y: v).\n\n// What happens to the output of this rule if we add a cycle to the graph?\n\nwalk(x, y, len) :-\n\nwalk(x, y: z, len: len1),\n\nedge(x: z, y),\n\nlen = `len1 + 1`,\n\n`len <= 10`.\n\nHere's one more fun example of arithmetic in rules: computing Fibonacci\nnumbers! You can try changing the value of max_n to see how quickly the result\nis updated.\n\nDon't worry about slowing down the website, since Percival runs on Web Workers\nisolated from your browser's main render thread.\n\n9\n\n1\n\n2\n\n3\n\n\u203a\n\nHere's one more fun example of arithmetic in rules: computing Fibonacci\nnumbers! You can try changing the value of `max_n` to see how quickly the\nresult is updated.\n\nDon't worry about slowing down the website, since Percival runs on Web Workers\nisolated from your browser's main render thread.\n\nTable{max_n} := [\n\nmax_n(value: 30),\n\n]\n\n9\n\n1\n\n\u203a\n\nmax_n(value: 30).\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n\u203a\n\n\u2304\n\nfib(n: 0, v: 0).\n\nfib(n: 1, v: 1).\n\nfib(n: `n + 1`, v) :-\n\nfib(n, v: v1),\n\nfib(n: `n - 1`, v: v2),\n\nv = `v1 + v2`,\n\nmax_n(value),\n\n`n < value`.\n\n## Aggregates\n\nNot only can you do mathematical operations in queries, but you can also\nperform aggregates. In this version, supported aggregates include sum, min,\nmax, mean, and count.\n\nFor this example, we're going to import a publicly available dataset about\ncars from NPM. Percival allows you to load any public JSON dataset from\nGitHub, NPM, or standard HTTPS web link.\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n\u203a\n\n## Aggregates\n\nNot only can you do mathematical operations in queries, but you can also\nperform _aggregates_. In this version, supported aggregates include `sum`,\n`min`, `max`, `mean`, and `count`.\n\nFor this example, we're going to import a publicly available dataset about\ncars from NPM. Percival allows you to load any public JSON dataset from\nGitHub, NPM, or standard HTTPS web link.\n\n9\n\n1\n\n2\n\n3\n\n\u203a\n\nimport cars from \"npm://vega-datasets@2.1.0/data/cars.json\"\n\ncountry(name: Origin) :- cars(Origin).\n\nFor each year and country of origin in the dataset, we will query for the\naverage fuel economy of cars. This might let us answer questions about how\nfuel economy changes over time between the countries.\n\n9\n\n1\n\n\u203a\n\nFor each year and country of origin in the dataset, we will query for the\naverage fuel economy of cars. This might let us answer questions about how\nfuel economy changes over time between the countries.\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n\u203a\n\n\u2304\n\naverage_mpg(country, year: `new Date(year)`, value) :-\n\ncountry(name: country),\n\ncars(Year: year),\n\nvalue = mean[Miles_per_Gallon] {\n\ncars(Origin: country, Year: year, Miles_per_Gallon)\n\n}.\n\nWith support for aggregates, we can now answer a lot of analytical questions\nabout the data. One key tool for exploring datasets is visualization. Percival\nsupports declarative data visualization through Plot cells, which run\nJavaScript code that generates diagrams using the Observable Plot library.\n\n9\n\n1\n\n\u203a\n\nWith support for aggregates, we can now answer a lot of analytical questions\nabout the data. One key tool for exploring datasets is visualization. Percival\nsupports declarative data visualization through _Plot_ cells, which run\nJavaScript code that generates diagrams using the [Observable\nPlot](https://github.com/observablehq/plot) library.\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n\u203a\n\n\u2304\n\naverage_mpg => Plot.line(average_mpg, {\n\nsort: \"year\",\n\nx: \"year\",\n\ny: \"value\",\n\nstroke: \"country\",\n\n}).plot({ grid: true })\n\nHere's another example of a plot on our dataset. This time, we'll make a\nsimple scatter plot on the entire cars dataset, faceted by the country of\norigin.\n\n9\n\n1\n\n\u203a\n\nHere's another example of a plot on our dataset. This time, we'll make a\nsimple scatter plot on the entire cars dataset, faceted by the country of\norigin.\n\n99\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n\u203a\n\n\u2304\n\n\u2304\n\n\u2304\n\n\u2304\n\n\u2304\n\ncars => Plot.plot({\n\nmarks: [\n\nPlot.dot(cars, {\n\nx: \"Horsepower\",\n\ny: \"Miles_per_Gallon\",\n\nstroke: \"Weight_in_lbs\",\n\nstrokeWidth: 1.5,\n\n}),\n\nPlot.ruleX([40]),\n\nPlot.ruleY([5]),\n\n],\n\nfacet: {\n\ndata: cars,\n\ny: \"Origin\",\n\n},\n\ncolor: {\n\ntype: \"linear\",\n\nrange: [\"steelblue\", \"orange\"],\n\n},\n\nfy: { tickPadding: -8 },\n\ngrid: true,\n\n})\n\n## Real-World Case Study\n\nLet's see how all of these pieces fit together to work on a real-world\ndataset, where you might want to combine data from multiple different sources.\n\n9\n\n1\n\n2\n\n3\n\n\u203a\n\n## Real-World Case Study\n\nLet's see how all of these pieces fit together to work on a real-world\ndataset, where you might want to combine data from multiple different sources.\n\n### Initial Exploration\n\nSuppose that you just got access to a collection of data about airports, and\nyou're eager to start exploring it. The dataset is tabular and contains\ninformation such as name, geographical location, city, state, and country.\n\n9\n\n1\n\n2\n\n3\n\n\u203a\n\n### Initial Exploration\n\nSuppose that you just got access to a collection of data about airports, and\nyou're eager to start exploring it. The dataset is tabular and contains\ninformation such as name, geographical location, city, state, and country.\n\n9\n\n1\n\n\u203a\n\nimport airports from \"npm://vega-datasets@2.1.0/data/airports.csv\"\n\nFrom looking at the rows, it seems like there are airports from multiple\ndifferent countries in this dataset! Let's figure out what the value counts in\nthe country column look like.\n\n9\n\n1\n\n\u203a\n\nFrom looking at the rows, it seems like there are airports from multiple\ndifferent countries in this dataset! Let's figure out what the value counts in\nthe `country` column look like.\n\n9\n\n1\n\n2\n\n3\n\n\u203a\n\n\u2304\n\nairports_per_country(country, count) :-\n\nairports(country),\n\ncount = count[1] { airports(country) }.\n\nIt turns out that all but 4 of the airports are in the United States. To make\nthe rest of our analysis simpler, we're going to filter only those airports\nthat have country equal to \"USA\". We're also going to reduce our columns to\nonly the necessary ones.\n\n9\n\n1\n\n\u203a\n\nIt turns out that **all but 4 of the airports are in the United States**. To\nmake the rest of our analysis simpler, we're going to filter only those\nairports that have country equal to `\"USA\"`. We're also going to reduce our\ncolumns to only the necessary ones.\n\n9\n\n1\n\n2\n\n\u203a\n\n\u2304\n\nus_airports(state, iata, name) :-\n\nairports(state, iata, name, country: \"USA\").\n\nCool, that was really simple! Let's use another aggregate query to see how\nmany airports are in each US state.\n\n9\n\n1\n\n\u203a\n\nCool, that was really simple! Let's use another aggregate query to see how\nmany airports are in each US state.\n\n9\n\n1\n\n2\n\n3\n\n\u203a\n\n\u2304\n\nairports_per_state(state, count) :-\n\nus_airports(state),\n\ncount = count[1] { us_airports(state) }.\n\n99\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n\u203a\n\n\u2304\n\n\u2304\n\n\u2304\n\nairports_per_state => Plot.plot({\n\nmarks: [\n\nPlot.dot(airports_per_state, {\n\nx: \"count\",\n\nfill: \"steelblue\",\n\nfillOpacity: 0.6,\n\n}),\n\n],\n\ngrid: true,\n\n})\n\nIt seems like most states have between 0-100 airports, with a few outliers\nhaving 200-300 airports. This makes sense, given that some states are much\nsmaller than others, and even between states of the same size, population\ndensity can be very different!\n\n9\n\n1\n\n\u203a\n\nIt seems like most states have between 0-100 airports, with a few outliers\nhaving 200-300 airports. This makes sense, given that some states are much\nsmaller than others, and even between states of the same size, population\ndensity can be very different!\n\n### Loading More Data\n\nWe might wonder if states with higher populations have more airports. However,\nwe don't have this information in our current table, so we'll need to find a\nnew dataset for this. Here's one that we found, off-the-shelf, on GitHub.\n\n(I quickly updated some of the column names in these tables to make them\ncompatible with Percival, which is why the latter two tables are imported from\nGists.)\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n\u203a\n\n### Loading More Data\n\nWe might wonder if states with higher populations have more airports. However,\nwe don't have this information in our current table, so we'll need to find a\nnew dataset for this. [Here's one](https://github.com/jakevdp/data-USstates)\nthat we found, off-the-shelf, on GitHub.\n\n_(I quickly updated some of the column names in these tables to make them\ncompatible with Percival, which is why the latter two tables are imported from\nGists.)_\n\n9\n\n1\n\n2\n\n3\n\n\u203a\n\nimport state_abbrevs from \"gh://jakevdp/data-USstates@b9c5dfa/state-\nabbrevs.csv\"\n\nimport state_areas from\n\"https://gist.githubusercontent.com/ekzhang/a68794f064594cf0ab56a317c3b7d121/raw/state-\nareas.csv\"\n\nimport state_population from\n\"https://gist.githubusercontent.com/ekzhang/a68794f064594cf0ab56a317c3b7d121/raw/state-\npopulation.csv\"\n\nSince this dataset consists of multiple tables in a slightly different format,\nwe'll need to construct an inner join between these tables and our airports to\ncombine them together. Luckily, this is very simple to do with a Datalog\nquery!\n\n9\n\n1\n\n\u203a\n\nSince this dataset consists of multiple tables in a slightly different format,\nwe'll need to construct an inner join between these tables and our airports to\ncombine them together. Luckily, this is very simple to do with a Datalog\nquery!\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n\u203a\n\n\u2304\n\nairports_state_info(state, count, population, area) :-\n\nstate_abbrevs(state: name, abbreviation: state),\n\nairports_per_state(count, state),\n\nstate_population(state, population, ages: \"total\", year: 2013),\n\nstate_areas(state: name, area_sq_mi: area).\n\n99\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n\u203a\n\n\u2304\n\n\u2304\n\n\u2304\n\n\u2304\n\nairports_state_info => Plot.plot({\n\nmarks: [\n\nPlot.dot(airports_state_info, {\n\nx: \"population\",\n\ny: \"count\",\n\nr: \"area\",\n\nfill: \"steelblue\",\n\nfillOpacity: 0.8,\n\ntitle: \"state\",\n\n}),\n\nPlot.text(airports_state_info, {\n\nx: \"population\",\n\ny: \"count\",\n\ntextAnchor: \"start\",\n\ndx: 6,\n\ntext: \"state\",\n\nfillColor: \"#222\",\n\nfillOpacity: 0.8,\n\nfontSize: d => Math.sqrt(d.area) / 50,\n\n}),\n\nPlot.ruleY([0]),\n\nPlot.ruleX([0]),\n\n],\n\ngrid: true,\n\n})\n\nAs you can see, there is a clear direct relationship between the size of a\nstate, its population, and the number of airports in that state. The one\nexception to this relationship is Alaska (AK), where although the population\nis very small, it has over 260 airports! We're also able to see that Texas\n(TX) and California (CA) have the second and third-largest number of airports,\nrespectively.\n\n9\n\n1\n\n\u203a\n\nAs you can see, there is a clear direct relationship between the size of a\nstate, its population, and the number of airports in that state. The one\nexception to this relationship is **Alaska (AK)**, where although the\npopulation is very small, it has over 260 airports! We're also able to see\nthat **Texas (TX)** and **California (CA)** have the second and third-largest\nnumber of airports, respectively.\n\n## Closing\n\nPercival is an early-stage research project. If you have any comments or\nfeedback, you can reach me at the public GitHub repository or on Twitter\n@ekzhang1.\n\nIf you like Percival, feel free to try using it on your own problems! To\ncreate a new, blank notebook from scratch, click here.\n\nBy the way, if you press the \"Share\" button at the top of this page, you'll\nget a permanent link to the current notebook. Unlike Jupyter or R exports,\nthese documents are fully interactive, and you only need a browser to continue\nexploring where you left off. \u2728\n\n9\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n\u203a\n\n## Closing\n\nPercival is an early-stage research project. If you have any comments or\nfeedback, you can reach me at the public [GitHub\nrepository](https://github.com/ekzhang/percival) or on Twitter\n[@ekzhang1](https://twitter.com/ekzhang1).\n\nIf you like Percival, feel free to try using it on your own problems! To\ncreate a new, blank notebook from scratch, [click here](/?new).\n\nBy the way, if you press the \"Share\" button at the top of this page, you'll\nget a permanent link to the current notebook. Unlike Jupyter or R exports,\nthese documents are fully interactive, and you only need a browser to continue\nexploring where you left off. \u2728\n\n", "frontpage": false}
