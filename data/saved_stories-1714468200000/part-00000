{"aid": "40206836", "title": "The Two Clock Problem of Rewrites", "url": "https://shermanonsoftware.com/2024/04/29/two-clock-problem-of-rewrites/", "domain": "shermanonsoftware.com", "votes": 1, "user": "jeffrey-sherman", "posted_at": "2024-04-30 03:08:06", "comments": 0, "source_title": "Two Clock Problem Of Rewrites", "source_text": "Two Clock Problem Of Rewrites \u2013 Sherman On Software\n\nMenu\n\n  * Subscribe\n  * Contact\n\n## Sherman On Software.\n\nWhen your SaaS Scaleup can't scale, I can help\n\n# Two Clock Problem Of Rewrites\n\nIn iterative delivery, software designTags #neverrewrite, software\ndevelopmentPublish DateApril 29, 202428 Views jeffpsherman\n\nRewrites often start off with the assertion that the current code is buggy and\ncan\u2019t be fixed. The replacement code will fix all of the problems because the\ntechnology will be better, the devs have improved, or for any other reason.\n\nThe rewrite project will get off to a great start, but before production, it\nwill run into The Two Clock Problem.\n\n# What is the Two Clock Problem\n\nThe Two Clock Problem occurs when you have two clocks that run at different\nspeeds. One clock must be wrong. With only two clocks, you can\u2019t tell which\none is wrong. Even worse, the second clock can also be wrong.\n\n# Rewrites Have Two Clocks\n\nThe first clock is the original system. The second clock is the rewritten\nsystem. They produce different answers. The original system was deemed\nunreliable, so different answers should be a good thing. Except that different\ndoesn\u2019t mean correct, it means different. Both systems could be wrong.\nSometimes, the original system is correct.\n\n# Two Clocks and No Confidence\n\nThe two clock problem kills rewrites because there is no way to gain\nconfidence in the new system. Customers will see that the data has changed,\nbut without an explanation there won\u2019t be trust or confidence.\n\nFinding the explanations requires finding and fixing all the differences.\nFixing bugs, differing definitions, and edge case logic until the two systems\nreturn the same result.\n\nFinally, when your two clocks agree, then you are ready to release the\nrewrite.\n\nExcept by that point you don\u2019t need the rewrite anymore.\n\n### Share this:\n\n  * Twitter\n  * Facebook\n\n### Like this:\n\nLike Loading...\n\n### jeffpsherman\n\n### Post Navigation\n\nPrevious Post:\n\n#### The Never Rewrite Podcast, Episode Fifty-One, How Company Culture Impacts\nCode Delivery\n\n### Related Posts:\n\n#### AI First API Strategy\n\nMarch 18, 2024 jeffpsherman\n\n#### Frosting A Turd And Iterating To A Cupcake\n\nApril 22, 2024 jeffpsherman\n\n#### Two Paths For Paying Down Tech Debt\n\nDecember 21, 2023 jeffpsherman\n\n### Leave a ReplyCancel reply\n\n### Site Sidebar\n\n#### Categories\n\n  * crm\n  * Cross Post\n  * dev teams\n  * iterative delivery\n  * podcast\n  * software design\n  * Uncategorized\n\n#### Recent Posts\n\n  * ##### Two Clock Problem Of Rewrites\n\nApril 29, 2024\n\n  * ##### The Never Rewrite Podcast, Episode Fifty-One, How Company Culture Impacts Code Delivery\n\nApril 26, 2024\n\n  * ##### Four Patterns Of Data Loading\n\nApril 24, 2024\n\n  * ##### Frosting A Turd And Iterating To A Cupcake\n\nApril 22, 2024\n\n  * ##### The Never Rewrite Podcast, Episode Fifty, Fulfilling Friday \u2013 Saving Customers Millions\n\nApril 19, 2024\n\n#### Tags\n\n#batr #best-alternative-to-a-total-rewrite #development #neverrewrite #SaaS\nadvice ai always be releasing automation batr best-alternative-to-a-total-\nrewrite crm iterative delivery never rewrite podcast programming queues SaaS\nsame but better scaling software architecture software development team\ndynamics Tenancy Model testing TheeSeeShip\n\n### Site Footer\n\n## Discover more from Sherman On Software\n\nSubscribe now to keep reading and get access to the full archive.\n\nContinue reading\n\n%d\n\n", "frontpage": false}
