{"aid": "40245637", "title": "How to Use JSON Path", "url": "https://bump.sh/blog/how-to-use-json-path", "domain": "bump.sh", "votes": 41, "user": "fmerian", "posted_at": "2024-05-03 09:06:28", "comments": 11, "source_title": "How to use JSON Path \u00b7 Bump.sh", "source_text": "How to use JSON Path \u00b7 Bump.sh\n\nBlog How to use JSON Path\n\n# How to use JSON Path\n\nA few years ago most API designers, developers, and technical writers would\nhave had very little reason to bump into JSONPath, but its starting to get\nmore and more relevant as more tools and standards start relying on it. So\nwhat is JSONPath, what is it used for, and how can you get up to speed with\nusing it?\n\nJSONPath is a query language that can be used to extract data from JSON\ndocuments, which at first might not sound very exciting, but remember...\nOpenAPI is just a JSON (or YAML) document, so you can use JSONPath to poke\naround in OpenAPI and do various things.\n\nYou can use JSONPath for OpenAPI Overlays, to patch OpenAPI documents with\nextra documentation content, code samples, or whatever else.\n\nYou can use JSONPath in Spectral to write incredibly advanced linting rules\nwhich can power your automated API Style Guides.\n\nYou can even use JSONPath in AWS Step Functions.\n\nJSONPath is popping up all over the the place these days, and if you work with\nOpenAPI it's definitely a handy tool to have on your belt.\n\n## How does JSONPath Work?\n\nJSONPath is one of several query languages which will let you filter, query,\nand traverse through a chunk of JSON, not just to pull bits out, but to\nnavigate complex data structures, with syntax for getting into specific array\nindexes, filtering through an objects properties or array values before\ncontinuing on to its children.\n\nHere's a sample JSONPath from the RFC.\n\n    \n    \n    $.store.book[?@.price < 10].title\n\nAnyone familiar with XPath in XML will be thinking \"hmm, this looks pretty\nfamiliar!\" and you're spot on, JSONPath is inspired by XPath. If you've never\nheard of XPath no worries, we'll start from scratch here.\n\nTo see how this works we'll need some JSON to run it against, so here is an\nexample of some JSON from the RFC.\n\n    \n    \n    { \"store\": { \"book\": [ { \"category\": \"reference\", \"author\": \"Nigel Rees\", \"title\": \"Sayings of the Century\", \"price\": 8.95 }, { \"category\": \"fiction\", \"author\": \"Evelyn Waugh\", \"title\": \"Sword of Honour\", \"price\": 12.99 }, { \"category\": \"fiction\", \"author\": \"Herman Melville\", \"title\": \"Moby Dick\", \"isbn\": \"0-553-21311-3\", \"price\": 8.99 }, { \"category\": \"fiction\", \"author\": \"J. R. R. Tolkien\", \"title\": \"The Lord of the Rings\", \"isbn\": \"0-395-19395-8\", \"price\": 22.99 } ], \"bicycle\": { \"color\": \"red\", \"price\": 399 } } }\n\nNow when you run that through any sort of JSONPath tool, you could expect to\nsee these results.\n\n    \n    \n    [ \"Sayings of the Century\", \"Moby Dick\" ]\n\n### Syntax\n\nThere is a whole lot of syntax to learn, but once you figure out the\nconstituent pieces you can start to compile them into really advanced queries.\n\nSyntax| Element Description  \n---|---  \n$| root node identifier (Section 2.2)  \n@| current node identifier (Section 2.3.5) (valid only within filter\nselectors)  \n[<selectors>]| child segment (Section 2.5.1): selects zero or more children of\na node  \n.name| shorthand for ['name' ]  \n.*| shorthand for [*]  \n..[<selectors>]| descendant segment (Section 2.5.2): selects zero or more\ndescendants of a node  \n..name| shorthand for .. [' name' ]  \n..*| shorthand for ..[*]  \n'name'| name selector (Section 2.3.1): selects a named child of an object  \n*| wildcard selector (Section 2.3.2): selects all children of a node  \n3| index selector (Section 2.3.3): selects an indexed child of an array (from\n0)  \n0:100:5| array slice selector (Section 2.3.4): start:end:step for arrays  \n?<logical-expr>| filter selector (Section 2.3.5): selects particular children\nusing a logical expression  \nlength(@.foo)| function extension (Section 2.4): invokes a function in a\nfilter expression  \n  \nOverview of JSONPath Syntax, from RFC 9535.\n\n### Examples\n\nIf that isn't making too much sense, here are some examples to help you\nvisualize.\n\nJSONPath| Intended Result  \n---|---  \n$.store.book[*].author| the authors of all books in the store  \n$..author| all authors  \n$.store.*| all things in the store, which are some books and a red bicycle  \n$.store..price| the prices of everything in the store  \n$..book[2]| the third book  \n$..book[2].author| the third book's author  \n$..book[2].publisher| empty result: the third book does not have a \"publisher\"\nmember  \n$..book[-1]| the last book in order  \n$..book[0,1]| the first two books  \n$..book[:2]| the first two books  \n$..book[?@.isbn]| all books with an ISBN number  \n$..book[?@.price<10]| all books cheaper than 10  \n$..*| all member values and array elements contained in the input value  \n  \nExample JSONPath Expressions and Their Intended Results When Applied to the\nExample JSON Value, from RFC 9535: 1.5. JSONPath Examples.\n\nBy combining these bits of example syntax together you can do amazing and\npowerful things with JSONPath, so let's look at how to do those amazing things\nin OpenAPI.\n\n### JSONPath & OpenAPI\n\nTake an OpenAPI document, like the Train Travel API.\n\n    \n    \n    git clone github.com/bump-sh-examples/train-travel-api cd train-travel-api\n\nThen install jsonpath-cli just so we can try some things out.\n\n    \n    \n    npm install -g @jsware/jsonpath-cli\n\nOptional, if you're working with YAML, you might want to convert from YAML to\nJSON in the CLI too.\n\n    \n    \n    brew install yq yq eval -o=json openapi.yaml > openapi.json\n\nDon't worry this is just for playing around, all of the tooling that uses\nJSONPath will support YAML without bodges like this. Let's just get on the\nsame page for this guide.\n\n### Querying OpenAPI with JSONPath\n\nOnce you have a JSON file to work with, we can use the jpp command, pass in a\nJSON/YAML document, and provide a JSONPath expression to query the document\nfor specific parts.\n\n    \n    \n    $ jpp --pretty '$.info' openapi.json [ { \"title\": \"Train Travel API\", \"description\": \"API for finding and booking train trips across Europe.\", \"version\": \"1.0.0\", \"contact\": { \"name\": \"Train Support\", \"url\": \"https://example.com/support\", \"email\": \"support@example.com\" }, \"license\": { \"name\": \"Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International\", \"identifier\": \"CC-BY-NC-SA-4.0\" } } ]\n\nIn this example $ refers to the root JSON document, then .info is using dot\nnotation to access the info key in that object.\n\nWe can get a bit more advanced, and pull up a list of paths.\n\n    \n    \n    $ jpp --pretty '$.paths.*~' openapi.json [ \"/stations\", \"/trips\", \"/bookings\", \"/bookings/{bookingId}\", \"/bookings/{bookingId}/payment\" ]\n\nThis uses the .* syntax which is basically grabbing all children of the paths\nobject, then using ~ to grab the keys instead of the values.\n\nWhat sort of query language would JSONPath be if we could not do queries?\nLet's pull up a list of paths which are a get or a post, but ignore all the\nput, patch, delete, etc.\n\n    \n    \n    $ jpp --pretty '$.paths[?(@.put || @.post)]~' openapi.json [ \"/bookings\", \"/bookings/{bookingId}/payment\" ]\n\n## OpenAPI Overlays powered by JSONPath\n\nOne of the main uses for JSONPath will be for working OpenAPI documents, often\nby technical writers or other folks in the API governance space to check or\nimprove OpenAPI documents.\n\nOverlays are a list of actions, which make up a \"target\" which is a JSONPath,\nand an operation of either \"update\" or \"remove\".\n\nLet's look at an update command.\n\n    \n    \n    # overlays.yaml overlay: 1.0.0 info: title: Overlay to customise API for Protect Earth version: 0.0.1 actions: - target: '$.info' description: Update description and contact for our audience. update: description: > A new and much more interesting long form description, which has all sorts of Markdown, or more specifically [CommonMark](https://commonmark.org/) which is _like_ Markdown but **better**, because it's an actual standard instead of a series of sometimes vaguely consistent conventions. Anyway, this is a good place to write all sorts of helpful stuff, link to other getting started content, link to where people can find access tokens, or even paste some code samples for getting your first API request off the ground. contact: name: Support Team url: https://example.com/contact email: support@example.org\n\nThis overlays file is pointing to the JSONPath target $.info, then updating\nthe object with the new bits of OpenAPI for description and contact, as per\nthe OpenAPI specification. This can be handy for improving the quality of all\nsorts of descriptions, not just info, and for popping in support team contact\ninformation if the API developers inevitably forgot to mention that sort of\nthing.\n\nInstead of using those yq or jpp tools we grabbed just to practice, we can use\nthe Bump.sh CLI which has support for Overlays built in, and thankfully it'll\nwork just fine with YAML or JSON.\n\n    \n    \n    npm install -g bump-cli bump overlay openapi.yaml overlays.yaml > openapi.new.yaml\n\nIf we were to run that overlay on the Train Travel API, the resulting\nopenapi.new.yaml would like like this:\n\n    \n    \n    openapi: 3.1.0 info: title: Train Travel API description: > A new and much more interesting long form description, which has all sorts of Markdown, or more specifically [CommonMark](https://commonmark.org/) which is _like_ Markdown but **better**, because its an actual standard instead of a series of sometimes vaguely consistent conventions. Anyway, this is a good place to write all sorts of helpful stuff, link to other getting started content, link to where people can find access tokens, or even paste some code samples for getting your first API request off the ground. version: 1.0.0 contact: name: Support Team url: 'https://example.com/contact' email: support@example.org license: name: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International identifier: CC-BY-NC-SA-4.0 # snipped\n\nWhen combined with more advanced queries you can start to get really specific\nwith bits of the OpenAPI document you'd like to update, enabling all sorts of\nrandom use cases like cleaning up the servers list for publishing an API\nCatalogue, removing Development and Staging servers not accessible or relevant\nto API consumers.\n\n    \n    \n    # openapi.yaml openapi: 3.1.0 servers: - url: http://localhost:3000 description: Development - url: https://api-staging.example.com description: Staging - url: https://api.example.com description: Production\n\nAn overlay can target the servers array with $.servers then query through them\nwith $.servers[?(@.description==\"Development\" || @.description==\"Staging\")],\nwhich is looking through objects in the array, and looking through the\nchildren for description: Development or description: Staging using basically\nJavaScript syntax.\n\nThe Overlay for this would combine that JSONPath target with remove: true\noperation like this:\n\n    \n    \n    # overlays.yaml overlay: 1.0.0 info: title: Overlay to customise API version: 0.0.1 actions: - target: '$.servers[?(@.description==\"Development\" || @.description==\"Staging\")]' description: Remove Development and Staging servers but leave anything else. remove: true\n\nThat would leave this resulting OpenAPI.\n\n    \n    \n    # openapi.yaml openapi: 3.1.0 servers: - url: https://api.example.com description: Production\n\nThen the Developer Experience folks decide to roll out a Mocking or Sandbox\nexperience, where consumers can play around with requests without actually\ntriggering real emails, real data, or spending real money, but how can we show\neveryone where that is? Do we have to go and pester all the API teams to add\nit? Nope, just add another action.\n\n    \n    \n    # overlays.yaml overlay: 1.0.0 info: title: Overlay to customise API version: 0.0.1 actions: - target: '$.servers[?(@.description==\"Development\" || @.description==\"Staging\")]' description: Remove Development and Staging servers but leave anything else. remove: true - target: '$.servers' description: Let everyone know about our amazing new hosted mocking/sandbox server. update: - description: Sandbox url: https://api-sandbox.example.com/\n\n### Leaning more about JSONPath\n\nJSONPath made it to IETF \"proposed standard\" RFC status in 2024 (RFC 9535),\nbut before then it was in a similar position to Markdown in the days before\nCommonMark, in that there are a few different variations of JSONPath as a\nconcept.\n\n  * JSONPath \"The Blog Post\" - Written by Stefan G\u00f6ssner in 2007.\n  * jsonpath.com - An online evaluator which as far as I can tell matches the blog post.\n  * JSONPath-Plus - A popular (but now abandoned) fork which expands on the original specification to add some additional operators.\n  * Nimma - A fork of JSONPath Plus created by the Stoplight team for Spectral to handle more advanced use cases. A list of caveats can be found here.\n\nThen to further compound this confusion, all of the implementations have\ndifferent support for certain features, and have filled in the grey areas\ndifferently due to their own interpretations and community requests. The\namazing JSONPath Comparison project has collated all of the differences into a\nmassive test suite and published the results, which was really helpful in\nshaping the new standard. Hopefully this will help tools converge, and we can\nforget all about this incompatibility.\n\nFor now, try to follow the RFC 9535 syntax, and use tooling which lines up\nwith that syntax. Unfortunately that means not using jsonpath.com, and even\nthe jpp CLI tool we used earlier is JSONPath Plus, which has a few differences\nto the RFC...\n\nThe Bump.sh CLI overlays functionality is JSONPath RFC 9535 compliant, and if\nyou spot any valid RFC JSONPath syntax not working as expected please create\nan issue on GitHub so we can get that sorted out.\n\nWritten by\n\nPhil Sturgeon\n\nPublished on\n\nApr 30, 2024\n\nShare this\n\nLinkedIn Twitter Facebook\n\nWant to try Bump.sh?\n\nAccess 14 day free trial\n\n## Continue Reading\n\nTech\n\n## The Elements of Great API Documentation\n\nWhen you think of API documentation, what comes to mind? More than likely, you\nthink of reference documentation that describes how to use an API, including\nthe operations and request/response details. This kind of reference\ndocumentation leverages the OpenAPI Specification (formerly known as Swagger).\nHowever, there is more to documenting your API than just the reference\ndocumentation. Let\u2019s explore the different types of API documentation and the\nrole each has to play in helping a developer become proficient in consuming\nyour API.\n\nKeep reading\n\nTech\n\n## OpenAPI v4.0 (A.K.A \"Project Moonwalk\")\n\nWhat is coming next for OpenAPI, as v4.0 of the OpenAPI Specification gets\ncloser to being released? What major changes are coming, how easy will it be\nto upgrade, and how do tooling companies feel about it?\n\nKeep reading\n\n## Preview your documentation using a Swagger, OpenAPI or AsyncAPI file.\n\n  * URL preview\n  * Bump CLI\n\nTry it with an OpenAPI or an AsyncAPI example.\n\nnpm install -g bump-cli\n\nbump preview path/to/your/file.json\n\nMore infos about our CLI in our documentation.\n\n### Product\n\n  * API Documentation\n  * Change management\n  * Hubs\n  * API Diff\n\n### Specifications\n\n  * OpenAPI (Swagger)\n  * AsyncAPI\n  * GraphQL\n  * gRPC\n  * SOAP\n\n### Compare\n\n  * APIMatic\n  * RapiDoc\n  * Redoc\n  * Stoplight\n  * Swagger UI\n\n### Information\n\n  * About\n  * Pricing\n  * Students\n  * Careers Hiring\n\n### Resources\n\n  * Customers\n  * Blog\n  * Help center\n  * CLI\n  * Status\n  * Contact\n\n  * \u00a9 2024, Bump.sh.\n  * Privacy policy\n  * Legal mentions\n  * Terms of use\n  * Cookie policy\n  * Data Processing Agreement\n\nWe use essential cookies and optional ones for your experience and marketing.\nRead our Cookie Policy.\n\n", "frontpage": true}
