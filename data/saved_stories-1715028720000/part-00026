{"aid": "40273121", "title": "Conical Slicing: A different angle of 3D printing", "url": "https://www.cnckitchen.com/blog/conical-slicing-a-different-angle-of-3d-printing", "domain": "cnckitchen.com", "votes": 1, "user": "fanf2", "posted_at": "2024-05-06 10:42:03", "comments": 0, "source_title": "Conical Slicing: A different angle of 3D printing", "source_text": "Conical Slicing: A different angle of 3D printing \u2014 CNC Kitchen\n\nYouTube Twitter Instagram\n\n# Conical Slicing: A different angle of 3D printing\n\nCurrent 3D printing slicers are dumb. What I mean by this is that even though\nthey are slicers for 3D printing they simply stack 2-dimensional layers on top\nof each other to form your final part. There are basically no movements within\nthe GCode instructions where all 3 axes move simultaneously. That\u2019s why\ncurrent 3D printing slicers are rather 2.5D slicers. But why are they using\nthis approach? Well, simply because it\u2019s mathematically easy and honestly\nbecause this approach works remarkably well. Yet we are leaving a ton of\npotential on the table because 3D printers are easily capable of complex\n3-dimensional moves, yet we don\u2019t have any software to take advantage of it.\nOver the last few years 3D printer slicers didn\u2019t really change a lot besides\nbeing way easier to use and much quicker. Yet the general slicing approach\nalways stayed the same. Cut a 3D part into a 2-dimensional slice, draw\nperimeters around the circumference and fill the rest with one of many infill\npatterns. The only real evolution we\u2019ve seen this year is the Arachne\nPerimeter generator first seen in CURA that dynamically adjusts the width of\nthe extrusions for more details and fewer gaps. Still, everything is on a two-\ndimensional plane, which causes the typical stairstepping pattern on sloped\nsurfaces and of course, requires supports on overhanging structures.\n\nOver the years we have seen a couple of approaches of non-planar slicing,\noften to improve top surfaces, yet none of them ever really made it into a\nmainstream slicer. Though quite recently we have seen a couple of really\nimpressive ways of 3D printing parts that have previously been deemed\nimpossible by using really clever slicing approaches. One of them is non-\nplanar, conical slicing. A bunch of weeks ago I\u2019ve shown this technique in my\nRotBot video, where I visited the University of Applied Science in Winterthur,\nSwitzerland, where they built a 4-axis Prusa printer that can manufacture\ncomplete overhangs without the need for support structure. Yet the best thing\nis, that we can use the same slicing approach on regular 3-axis printers to\nachieve very similar results. And this isn\u2019t just an idea published in a\npaper, but you can download the Python scripts necessary and try this out on\nyour own parts and prints. I also uploaded a bunch of sample G-Codes on\nPrintables for the not-so-programming-savvy! If you print them or even slice\nyour own, please share the results and spread awareness around this method!\n\nSupportless Pipe (Conical Slicing)\n\nSupportless Overhang Tower (Conical Slicing)\n\nSupportless Christmas Tree (Conical Slicing)\n\nRotBot of the ZHAW Winterthur, Switzerland\n\nSo let\u2019s quickly talk about the idea behind this approach. Common FDM 3D\nprinters are able to print quite steep angles, yet at some point, particularly\nbelow 10 or 15 degrees, the plastic will just be extruded into free air,\ndrooping down and ruining your print quality. This novel slicing approach\ntilts the layers a tiny bit so that even when printing horizontal overhangs,\nonly maybe the outermost perimeter is printed in mid-air, yet still sticks and\nis supported by the perimeter next to it. This way you can print even these\nextreme geometries without the need for supports. The conical slicing\napproach, which stems from the RotBot project, even improves this concept and\ntilts the printing layers around a central axis and therefore forms a cone.\n\nSince we\u2019ll be printing our parts on a regular printer instead of one with a\ntilted printhead there is one essential thing that needs to be taken care of,\nand one of them is nozzle clearance. Conventional 2.5D printing only needs to\nmake sure that the nozzle is the lowest part of the printhead, because we're\nonly printing on a plane and nothing besides warped plastic should stick up.\nWhen we\u2019re printing with non-planar GCode there are sections of the print that\nwill be on a higher level than the current print move. This is why before we\nstart the first non-planar code we need to figure out, what the maximum slope\nangle of our print can be. Unfortunately many current printers only allow tiny\nslope angles because of their cooling systems that reach down almost to the\nprint plate. The only printer I had that worked acceptably out of the box was\nmy Prusa Mini, which has quite a high part cooling shroud and if you print\nsmall parts allows up to around 20\u00b0 slicing angle. Bigger parts will still\ncrash into the bed leveling probe, and I often just pushed it up after the\nleveling process. For other machines like all the Ender-3 derivatives, a\nreally simple solution is just using a longer nozzle, like one of these\nairbrush nozzles to which I put a link down in the description, or simply a\nregular volcano nozzle.\n\nAirbursh Nozzle on Aliexpress (affiliate)\n\nAirbrush Nozzle on AMAZON (affiliate)\n\nArtillery Hornet with Airbrush Nozzle\n\nThat looks a bit wired but works better than one might expect. Just remember\nto move your endstop! Unfortunately, cooling is not the best this way even\nthough it\u2019s quite essential for printing these extreme overhangs. The airbrush\nnozzle is a bit better here because it\u2019s only a little longer than a standard\nnozzle and therefore still closer to the initial cooling location. So if you\nwant to try this out make sure you have enough clearance and optimize cooling\nas much as you can!\n\nBut which slicer can you use to create this tilted GCode? This is the cool\nthing about this method because you can basically use your own, favorite\nslicer for this. The thing is that there is no simple check box for conical\nslicing at the moment and you need to trick your slicer into generating\nconical GCode with a clever trick! We simply use two Python scripts for this,\nand I\u2019ll go over how you can easily do this yourself in a second. The first\ncode is pre-deforming the stl in a reverse cone shape, by simply moving the\npoints of the mesh upwards, depending on their distance to the center axis.\nThen you slice this slightly wired-looking part in CURA, PrusaSlicer,\nSimplify3D or almost any other tool and use a second script to back-transform\nthe movement commands within the GCode file to end up with the conical Gcode\nthat\u2019s ready to print. It\u2019s really simple!\n\nConical G-Code preview\n\nIf you want to try this out yourself all of this is Open Source, and was\ndeveloped by the ZHAW in Switzerland. During making this video and working\nwith their code I created a fork of their project to make it in its current\nstate easier usable, fix some bugs and add some features. Nothing really crazy\nbut in my opinion, it works better.\n\nConical Slicing Scripts\n\nSo here\u2019s the process and I\u2019m using SuperSlicer for this demo because it has\nsome additional features over PrusaSlicer and most importantly has a switch\nthat lets you export GCode with empty layers, which is sometimes really handy\nfor this method! I load my stl file into the slicer with a slightly adjusted\nprinter profile where the bed origin is in the center. I move my part so that\nthe global z-axis represents the axis of the cone that I want to use for\nslicing and save the part in this new location. In the transformation script,\nI set my slicing angle and run it which spits out the pre-deformed stl, that\u2019s\nready to be loaded back into the slicer. Now I make sure that the cone axis of\nthe slt is again at the origin of the coordinate system and then simply slice\nmy part and save the GCode. Then I paste the name of this GCode into the\nsecond script, make sure that the right cone angle is set, and hit run to\nstart the back deformation. And that\u2019s it! Ready to run conical GCode\ngenerated in a minute! I also wrote a comprehensive guide on my website\nthrough which you should go step by step to ensure that you get out nice GCode\nbecause some essential things need to be taken care of! One of the huge pain\npoints of PrusaSlicer and CURA is, that they don\u2019t position parts in their\nlocal STL coordinate system but choose one by themselves. There is a switch in\nPrusaSlicer that should get around this, but it seems to have been broken for\na while, so please guys, fix that because currently, I need to use a ton of\ntrickery to position non-symmetric parts properly.\n\nThe approach is not perfect, still buggy, and requires a bit of manual work\nbut demonstrates how this novel slicing technique could be implemented in a\nregular slicer. Yet, conical slicing won\u2019t fix all of our overhang and support\nproblems at the moment. If you have watched carefully, you will have noticed\nthat most geometries I\u2019ve shown so far only had outward-facing overhangs. Any\ninward-facing overhangs actually would need even more supports as with the\nregular 2.5D slicing approach. The current script also allows slicing parts\nwith an inward cone, yet if your part has both outward and inward-facing\noverhangs you will need to slice the sections separately and stack the GCode\nmanually. If you have both inward and outward-facing overhangs on the same\nheight, you won\u2019t be able to find a solution at all! And this is one of the\nmain limitations of conical slicing in its current state. It works great for\nspecial geometries, but will probably not be as impressive for any arbitrary\ngeometry. What we\u2019ll need in the future are algorithms that automatically\nsection the parts, depending on their geometry, and set individual slicing\nangles and orientations. An implementation I could imagine for the future is\nidentifying geometries by their overhang angle or slope angle and calculating\nan ideal slicing angle for supportless overhangs and smooth top surfaces. In-\nbetween you can interpolate. This field could then be used to pre-deform the\nstl and also used for back-transformation giving us non-planar G-Code even\nwith variable layer height. I\u2019m not the first to come up with such an idea,\nand you can find plenty of papers on approaches and algorithms.\n\nUnfortunately, I don\u2019t have the time and probably the skill to do this myself,\nbut I want to spread awareness of how much potential there still is in slicing\nsoftware for FDM printing. So if you\u2019re a skilled enthusiast with too much\nspare time or a student looking for a thesis maybe consider if a proper non-\nplanar slicing integration is the challenge you were always looking for.\nAnything that we as a community can release and contribute open-source is\nsomething no one else can patent. Yet if you are a software company, also\nthink about if you\u2019d like to be the first to do proper non-planar slicing with\nyour tools. I was happy 6 years ago to pay for Simplify3D because it did the\nbest supports at that time and I\u2019d honestly be happy to pay a reasonable\namount for a next-generation FDM slicer!\n\nYet new slicing methods, especially non-planar will also require adjustments\nin the hardware of our printers. This is why I think, that we won\u2019t see this\nbeing implement in PrusaSlicer and CURA soon, because their machines,\nespecially their printheads are not yet optimized for that method. Something\nyou have already seen plenty of in this video is the clearance around the\nnozzle so that non-planar moves are even possible without crashing into the\nprint. Also, how should the tip of the nozzle itself even look like, because\nthe bigger the flat, the more it will interfere with the extruded plastic. Yet\nthe smaller it is the less ironing action we will have and material will\nsquish out to the sides. And then there is the z-axis. When this axis is\ninvolved in every print movement it will need to move way more than in a\nregular print and probably wear out quicker with the common leadscrew\napproach. And of course, cooling also plays a major role if we want to print\nsupportless and need to cool down the plastic as fast as possible. So there is\nstill a ton of really interesting research and development necessary until we\nsee non-planar slicing in all of our prints, but I think we have finally\nreached a point where proper implementations are really close! I\u2019d love to\nhear your thoughts on the conical method and non-planar slicing in general. Do\nyou think the current 2.5D slicing approach is just good enough or do you also\nsee this huge potential in new algorithms? Please let me know in the comments\nbelow!\n\nStefan HermannNovember 12, 2022\n\nFacebook0 Twitter Tumblr Pinterest0 2 Likes\n\n## CNC Kitchen\n\n### Mit Squarespace erstellt\n\nBy using this website, you agree to our use of cookies. We use cookies to\nprovide you with a great experience and to help our website run effectively.\n\n  * Terms & Conditions\n  * Privacy Policy\n  * Shipping & Payment Info\n  * Return Policy\n  * About Us\n\nAbout Us\n\n", "frontpage": false}
{"aid": "40273124", "title": "Show HN: BugBridge \u2013 Simplify GitHub Issue Reporting", "url": "https://www.bugbridge.app/", "domain": "bugbridge.app", "votes": 1, "user": "jwtly10", "posted_at": "2024-05-06 10:42:19", "comments": 0, "source_title": "BugBridge", "source_text": "BugBridge\n\nBugBridge\n\n# Streamline user issue reporting with BugBridge\n\nLet users submit issues with the data YOU need to debug. Turn long\nincomprensible stack traces into a nice URL.\n\nGet started for FREE!Documentation\n\nTry it out - Here is an example of an issue template we can generate for you!\n\nhttps://api.bugbridge.app/issue/VmusUU\n\n## Empower your users\n\nGive your users the power to submit issues with the information YOU need. No\nmore expecting users to understand your logs!\n\nInnovative\n\n    Comprehensive Github issues with just a click.\n\nEfficient\n\n    You decide whats useful, don't rely on brief user descriptions.\n\nEasy\n\n    With entire stack traces hidden behind a simple, short url.\n\n## Coming soon\n\nThe plan is to slowly release more and more features... Here are some of the\nplanned upcoming changes!\n\n### Custom Templates\n\nCustom issue templates tailored to your projects' needs.\n\n### SDKs for other languages\n\nEasy to use SDKs for other languages like Python, Javascript and Golang etc.\n\nDocs\n\n  * Overview\n  * Endpoints\n  * Models\n\nBuilt by jwtly10.\n\n", "frontpage": false}
