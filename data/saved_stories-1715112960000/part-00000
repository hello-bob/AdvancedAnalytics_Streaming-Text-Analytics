{"aid": "40283548", "title": "Pythoner Native Lisp", "url": "https://github.com/Ziang-Chen/Lisp", "domain": "github.com/ziang-chen", "votes": 1, "user": "zls12344", "posted_at": "2024-05-07 08:43:25", "comments": 0, "source_title": "GitHub - Ziang-Chen/Lisp", "source_text": "GitHub - Ziang-Chen/Lisp\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nZiang-Chen / Lisp Public\n\n  * Notifications\n  * Fork 0\n  * Star 3\n\n3 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# Ziang-Chen/Lisp\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nZiang-Chenadd cppExportorFeb 22, 20244b5dc18 \u00b7 Feb 22, 2024Feb 22, 2024\n\n## History\n\n3 Commits  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| firt commit| Jan 30, 2024  \n  \n### Compiler\n\n|\n\n### Compiler\n\n| firt commit| Jan 30, 2024  \n  \n### Debugger\n\n|\n\n### Debugger\n\n| firt commit| Jan 30, 2024  \n  \n### Grammer\n\n|\n\n### Grammer\n\n| firt commit| Jan 30, 2024  \n  \n### Parser\n\n|\n\n### Parser\n\n| firt commit| Jan 30, 2024  \n  \n### Tools\n\n|\n\n### Tools\n\n| add cppExportor| Feb 22, 2024  \n  \n### __pycache__\n\n|\n\n### __pycache__\n\n| firt commit| Jan 30, 2024  \n  \n### test\n\n|\n\n### test\n\n| add cppExportor| Feb 22, 2024  \n  \n### demo.ipynb\n\n|\n\n### demo.ipynb\n\n| firt commit| Jan 30, 2024  \n  \n### readme.md\n\n|\n\n### readme.md\n\n| Update readme| Jan 30, 2024  \n  \n## Repository files navigation\n\n# AtomicPy\n\nSymbolic Way to Embed Lisp Style Language in Python\n\nAuthor: Ziang Chen\n\n    \n    \n    import Tools.pyEmbed as pebd from Grammer.Tokens import * from Compiler.Symbol import Var, TypeVar, TypeName g= pebd.createEnv(\"parserv3\") #Specify Parser # Yes, After import & initialization # Following lines can run in Python Interpreter g @ ( # Class Definition ClassDef, \"Point\", # Class Name (Var, \"self.x\", 0), # Initial List (Var, \"self.y\", 0), ( FunctionDef, # Construct Method \"init\", ((TypeVar, \"x\", \"int\"), (TypeVar, \"y\", \"int\")), (Assign, (Var, \"self.x\"), (Var, \"x\")), (Assign, (Var, \"self.y\"), (Var, \"y\")), ), (FunctionDef, \"printx\", None, (Print, (Variable, \"self.x\")) ), (FunctionDef, \"setx\", ((Variable, 'x'),), (Assign, (Var, \"self.x\"), (Var, \"x\"))), ) g@ (Assign, 'x', (New, \"Point\", 1,2)) # Create Object g@ (Call, ('x','printx')) # Output: 1 g@(Call, ('x','setx'), 10) g@(Call, ('x','printx')) # Output: 10\n\n## Variable\n\nA variable is a symbol, which aslo treated as a key in Context, used to\nmappying to a value.\n\nInitially, like evry language, gloable/standard Context is defined, after\nenter blocks/ class/ object/ function, new context will entered, and variable\nwill store in the new context.\n\nAtomicPy implete two types of variable, called typed variable and untyped\nvariable. Assign operator also check types explicilty when left value is typed\nvariable, otherwise it will be treated as untyped variable, but type will\nstill stored in compiler for hints/optimization.\n\n    \n    \n    Syntax Access Variable (x,) Declare Variable/ Access when Using Assign VarDef :=([Var|Variable], NameString [, value]) Define Type TypeDef:=(TypeName, [NameString|type] [,value]) Define Typed Variable TypeVarDef:=(TypeVar, NameString, [TypeString|Type], [,value]) Assign Value to Variable (Assign, [NameString|VarDef|TypeVarDef] , [Value|Expression]) Example (x,) (Var, 'x') | (Variable, 'x') (Var, 'x', 1) | (Variable, 'x', 1) (TypeVar, 'x', 'int') (TypeVar, 'x', 'int', 1) (TypeName, 'int') (TypeName, 'int', 1) // Anonymous Typed Variable (Constant) (Assign, (Var, 'x'), 1) (Assign, (TypeVar, 'x', 'int'), 1) (Assign, x=Var('x'), 1) (Assign, x=TypeVar('x', 'int'), 1) (Assign, (Var, 'x'), y) (Assign, (TypeVar, 'x', 'int'), y) (Assign, x, y)\n\nType also can be used in more elgent way, like\n\n    \n    \n    String = (g@(\"ConstantString\")).Type # Define Type of String Float = (g@(1.23456)).Type # Define Type of Float g@(Assign, (TypeVar, 'x', Float), 1.0)\n\nNotic the return value if g@, highly related to syntax tree parser, which\nbasically contains all neccessary inofrmation for AtomicPy.\n\n## Function\n\nFunction is a procedure, can be called with arguments. Function can be defined\nin two ways, using FunctionDef, or using Lambda.\n\n    \n    \n    (FunctionDef, NameString, [ArgList|None], Expression) (Lambda, [ArgList|None], Expression)\n\n## Class\n\nClass is a type, each object initialized from a class by method \"init\"\n\nMethod call be called using following syntax\n\n    \n    \n    g@ (Call, (ObjectName, MethodName), *args) g@(Call, (ObjectName, MethodName))\n\n## About\n\nNo description, website, or topics provided.\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n3 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Python 78.5%\n  * Jupyter Notebook 21.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
