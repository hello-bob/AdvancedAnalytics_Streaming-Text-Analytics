{"aid": "40283497", "title": "Apache Thrift", "url": "https://en.wikipedia.org/wiki/Apache_Thrift", "domain": "wikipedia.org", "votes": 2, "user": "tosh", "posted_at": "2024-05-07 08:31:13", "comments": 0, "source_title": "Apache Thrift", "source_text": "Apache Thrift - Wikipedia\n\nJump to content\n\nSearch\n\nWiki Loves Earth\n\nPhotograph nature for Wikipedia and win!\n\n# Apache Thrift\n\n  * Deutsch\n  * \u0641\u0627\u0631\u0633\u06cc\n  * Fran\u00e7ais\n  * \ud55c\uad6d\uc5b4\n  * Italiano\n  * \u65e5\u672c\u8a9e\n  * Polski\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * \u4e2d\u6587\n\nEdit links\n\nFrom Wikipedia, the free encyclopedia\n\nOpen-source remote procedure call framework\n\nThis article has multiple issues. Please help improve it or discuss these\nissues on the talk page. (Learn how and when to remove these template\nmessages)| This article contains content that is written like an\nadvertisement. Please help improve it by removing promotional content and\ninappropriate external links, and by adding encyclopedic content written from\na neutral point of view. (August 2019) (Learn how and when to remove this\nmessage)  \n---  \nThis article is written like a manual or guide. Please help rewrite this\narticle and remove advice or instruction. (August 2019)  \n---  \n  \n(Learn how and when to remove this message)  \n  \nApache ThriftOriginal author(s)| Facebook, Inc.  \n---|---  \nDeveloper(s)| Apache Software Foundation  \nStable release| 0.19.0 / 2 September 2023; 7 months ago (2023-09-02)^[1]  \nRepository| Thrift Repository  \nWritten in| ActionScript, C, C#, C++, D, Dart, Delphi, Erlang, Go, Haskell,\nHaxe, Java, JavaScript, Node.js, OCaml, Perl, PHP, Python, Rust, Scala,\nSmalltalk  \nType| Remote procedure call framework  \nLicense| Apache 2.0  \nWebsite| thrift.apache.org  \n  \nThrift is an interface definition language and binary communication\nprotocol^[2] used for defining and creating services for programming\nlanguages.^[3] It was developed by Facebook. Since 2020, it is an open source\nproject in the Apache Software Foundation.\n\nIt uses a remote procedure call (RPC) framework and combines a software stack\nwith a code generation engine to build cross-platform services. Ultimately,\nThrift can connect applications written in a variety of languages and\nframeworks, including ActionScript, C, C++,^[4] C#,^[5] Cocoa, Delphi, Erlang,\nGo, Haskell, Java, JavaScript, Objective-C, OCaml, Perl, PHP, Python, Ruby,\nElixir,^[6] Rust, Scala, Smalltalk, and Swift.^[7] The implementation was\ndescribed in a April 2007 technical paper released by Facebook, now hosted on\nApache.^[8]^[9]\n\n## Architecture[edit]\n\nThe Apache Thrift API client/server architecture\n\nThrift includes a complete stack for creating clients and servers.^[10] The\ntop part is generated code from the Thrift definition. From this file, the\nservices generate client and processor codes. In contrast to built-in types,\ncreated data structures are sent as a result of generated code. The protocol\nand transport layer are part of the runtime library. With Thrift, it is\npossible to define a service and change the protocol and transport without\nrecompiling the code. Besides the client part, Thrift includes server\ninfrastructure to tie protocols and transports together, like blocking, non-\nblocking and multi-threaded servers. The underlying I/O part of the stack is\nimplemented differently for different languages.\n\nThrift supports a number of protocols:^[10]\n\n  * TBinaryProtocol \u2013 A straightforward binary format, simple, but not optimized for space efficiency. Faster to process than the text protocol but more challenging to debug.\n  * TCompactProtocol \u2013 More compact binary format; typically more efficient to process as well\n  * TJSONProtocol \u2013 Uses JSON for encoding of data.\n  * TSimpleJSONProtocol \u2013 A write-only protocol that cannot be parsed by Thrift because it drops metadata using JSON. Suitable for parsing by scripting languages.^[11]\n\nThe supported transports are:\n\n  * TSimpleFileTransport \u2013 This transport writes to a file.\n  * TFramedTransport \u2013 This transport is required when using a non-blocking server. It sends data in frames, each preceded by length information.\n  * TMemoryTransport \u2013 Uses memory for I/O. The Java implementation uses a simple ByteArrayOutputStream internally.\n  * TSocket \u2013 Uses blocking socket I/O for transport.\n  * TZlibTransport \u2013 Performs compression using zlib. Used in conjunction with another transport.\n\nThrift also provides a number of servers, which are:\n\n  * TNonblockingServer \u2013 A multi-threaded server using non-blocking I/O (Java implementation uses NIO channels). TFramedTransport must be used with this server.\n  * TSimpleServer \u2013 A single-threaded server using standard blocking I/O. Useful for testing.\n  * TThreadedServer \u2013 A multi-threaded server using a thread per connection model and standard blocking I/O.\n  * TThreadPoolServer \u2013 A multi-threaded server using a thread pool and standard blocking I/O.\n\n## Benefits[edit]\n\nSome stated benefits of Thrift include:^[12]\n\n  * Cross-language serialization with lower overhead than alternatives such as SOAP due to use of binary format.\n  * No XML configuration files.\n  * The language bindings feel natural. For example, Java uses ArrayList<String>. C++ uses std::vector<std::string>.\n  * The application-level wire format and the serialization-level wire format are cleanly separated. They can be modified independently.\n  * The predefined serialization styles include: binary, HTTP-friendly and compact binary.\n  * Doubles as cross-language file serialization.\n  * Soft versioning^[clarify] of the protocol. Thrift does not require a centralized and explicit mechanism like major-version/minor-version. Loosely coupled teams can freely evolve RPC calls.\n  * No build dependencies or non-standard software. No mix of incompatible software licenses.\n\n## Creating a Thrift service[edit]\n\nThrift is written in C++, but can create code for a number of languages. To\ncreate a Thrift service, one has to write Thrift files that describe it,\ngenerate the code in the destination language, write some code to start the\nserver and call it from the client. Here is a code example of such a\ndescription file:\n\n    \n    \n    enum PhoneType { HOME, WORK, MOBILE, OTHER } struct Phone { 1: i32 id, 2: string number, 3: PhoneType type } service PhoneService { Phone findById(1: i32 id), list<Phone> findAll() }\n\nThrift will generate the code out of this descriptive information. For\ninstance, in Java, the PhoneType will be a simple enum inside the Phone class.\n\n## See also[edit]\n\n  * Free and open-source software portal\n\n  * Comparison of data serialization formats\n  * Apache Avro\n  * Abstract Syntax Notation One (ASN.1)\n  * Hessian\n  * Protocol Buffers\n  * External Data Representation (XDR)\n  * Internet Communications Engine (Ice)\n  * gRPC\n  * SDXF\n\n## References[edit]\n\n  1. ^ \"Apache Thrift - Downloads\". Retrieved 6 January 2024.\n  2. ^ \"Installing and using Apache Cassandra With Java Part 4 (Thrift Client)\". Sodeso \u2013 Software Development Solutions. Retrieved 2011-03-30. \"Thrift is a separate Apache project which is a binary communication protocol\"\n  3. ^ Andrew Prunicki. \"Apache Thrift: Introduction\". Object Computing. Archived from the original on 2011-07-23. Retrieved 2011-04-11. \"Through a simple and straightforward Interface Definition Language (IDL), Thrift allows [users] to define and create services which are both consumable by and serviceable by numerous languages. Using code generation, Thrift creates a set of files which can then be used for creating clients and/or servers. In addition to interoperability, Thrift can be very efficient through a unique serialization mechanism that is efficient in both time and space.\"\n  4. ^ Thrift Requirements, see this issue for Windows support\n  5. ^ Fred Potter, Using Thrift with Cappuccino Archived 2011-08-12 at the Wayback Machine, parallel48's posterously luscious blog, 10 June 2010.\n  6. ^ pinterest/elixir-thrift, Pinterest, 2020-02-05, retrieved 2020-02-06\n  7. ^ Andrew Prunicki. \"Apache Thrift: Code Generation\". Object Computing. Archived from the original on 2011-07-23. Retrieved 2011-04-12. \"Thrift supports many programming languages too varying degrees. The complete list is below. Be careful before assuming that just because your language has some support that it supports all of Thrift's features. Python for example, only supports TBinaryProtocol. Cocoa, C++, C#, Erlang, Haskell, Java, OCaml, Perl, PHP, Python, Ruby, and Smalltalk\"\n  8. ^ Mark Slee, Aditya Agarwal, Marc Kwiatkowski, Thrift: Scalable Cross-Language Services Implementation\n  9. ^ \"LibraryFeatures - Thrift Wiki\". Retrieved 2016-04-21.\n  10. ^ Jump up to: ^a ^b Andrew Prunicki. \"Apache Thrift: Introduction\". Object Computing. Archived from the original on 2011-07-23. Retrieved 2011-04-11. \"The top portion of the stack is generated code from your Thrift definition file. Thrift services result in generated client and processor code. These are represented by the brown boxes in the diagram. The data structures that are sent (other than built-in types) also result in generated code. These result in the red boxes. The protocol and transport are part of the Thrift runtime library. Therefore with Thrift, you can define a service, and are free to change the protocol and transport without re-generating your code. Thrift also includes a server infrastructure to tie the protocols and transports together. There are blocking, non-blocking, single and multi-threaded servers available. The \"Underlying I/O\" portion of the stack differs based on the language in question. For Java and Python network I/O, the built-in libraries are leveraged by the Thrift library, while the C++ implementation uses its own custom implementation.\"\n  11. ^ Skelton, Steven (3 August 2013). \"Developer Friendly Thrift Request Logging\". Retrieved 3 July 2014.\n  12. ^ Programmer's Guide to Apache Thrift, Randy Abernathy, Manning Publications, 2019, ISBN 978-1-6172-9616-1\n\n## External links[edit]\n\n  * Official website\n\n  * v\n  * t\n  * e\n\nThe Apache Software Foundation  \n---  \nTop-level projects|\n\n  * Accumulo\n  * ActiveMQ\n  * Airavata\n  * Airflow\n  * Allura\n  * Ambari\n  * Ant\n  * Aries\n  * Arrow\n  * Apache HTTP Server\n  * APR\n  * Avro\n  * Axis\n  * Axis2\n  * Beam\n  * Bloodhound\n  * Brooklyn\n  * Calcite\n  * Camel\n  * CarbonData\n  * Cassandra\n  * Cayenne\n  * CloudStack\n  * Cocoon\n  * Cordova\n  * CouchDB\n  * cTAKES\n  * CXF\n  * Derby\n  * Directory\n  * Drill\n  * Druid\n  * Empire-db\n  * Felix\n  * Flex\n  * Flink\n  * Flume\n  * FreeMarker\n  * Geronimo\n  * Groovy\n  * Guacamole\n  * Gump\n  * Hadoop\n  * HBase\n  * Helix\n  * Hive\n  * Iceberg\n  * Ignite\n  * Impala\n  * Jackrabbit\n  * James\n  * Jena\n  * JMeter\n  * Kafka\n  * Kudu\n  * Kylin\n  * Lucene\n  * Mahout\n  * Maven\n  * MINA\n  * mod_perl\n  * MyFaces\n  * Mynewt\n  * NiFi\n  * NetBeans\n  * Nutch\n  * NuttX\n  * OFBiz\n  * Oozie\n  * OpenEJB\n  * OpenJPA\n  * OpenNLP\n  * O\u0440enOffice\n  * ORC\n  * PDFBox\n  * Parquet\n  * Phoenix\n  * POI\n  * Pig\n  * Pinot\n  * Pivot\n  * Qpid\n  * Roller\n  * RocketMQ\n  * Samza\n  * Shiro\n  * SINGA\n  * Sling\n  * Solr\n  * Spark\n  * Storm\n  * SpamAssassin\n  * Struts 1\n  * Struts 2\n  * Subversion\n  * Superset\n  * SystemDS\n  * Tapestry\n  * Thrift\n  * Tika\n  * TinkerPop\n  * Tomcat\n  * Trafodion\n  * Traffic Server\n  * UIMA\n  * Velocity\n  * Wicket\n  * Xalan\n  * Xerces\n  * XMLBeans\n  * Yetus\n  * ZooKeeper\n\n  \nCommons|\n\n  * BCEL\n  * BSF\n  * Daemon\n  * Jelly\n  * Logging\n\n  \nIncubator|\n\n  * Taverna\n\n  \nOther projects|\n\n  * Batik\n  * FOP\n  * Ivy\n  * Log4j\n\n  \nAttic|\n\n  * Apex\n  * AxKit\n  * Beehive\n  * Bluesky\n  * iBATIS\n  * Click\n  * Continuum\n  * Deltacloud\n  * Etch\n  * Giraph\n  * Hama\n  * Harmony\n  * Jakarta\n  * Marmotta\n  * MXNet\n  * ODE\n  * River\n  * Shale\n  * Slide\n  * Sqoop\n  * Stanbol\n  * Tuscany\n  * Wave\n  * XML\n\n  \nLicenses|\n\n  * Apache License\n\n  \n  \n  * Category\n\n  \n  \n  * v\n  * t\n  * e\n\nData exchange formats  \n---  \nHuman readable|\n\n  * Atom\n  * CSV\n  * EDIFACT\n  * JSON\n    * Web Encryption\n    * Web Token\n    * Web Signature\n  * Property list\n  * RDF\n  * Rebol\n  * TOML\n  * XML\n  * YAML\n\n  \nBinary|\n\n  * AMF\n  * ASN.1\n    * SMI\n  * Avro\n  * Base32\n  * Base64\n  * BSON\n    * UBJSON\n  * Cap'n Proto\n  * CBOR\n  * FlatBuffers\n  * MessagePack\n  * Property list\n  * Protocol Buffers\n  * Thrift\n  * Cyphal DSDL\n  * XDR\n  * uuencode\n  * yEnc\n\n  \nComparison of data-serialization formats  \n  \n  * v\n  * t\n  * e\n\nMeta Platforms  \n---  \nProducts and services| | Facebook| \n\n  * Service\n  * Features\n  * Beacon\n  * Bluetooth Beacon\n  * Credits\n  * Dating\n  * EdgeRank\n  * Feed\n  * Gaming\n  * Graph Search\n  * Instant Articles\n  * Like button\n  * Live\n  * Lookalike audience\n  * Onion address\n  * Platform\n    * Connect\n  * Safety Check\n  * Stories\n  * Watch\n    * list of original programs\n  * Zero\n\n  \n---|---  \nInstagram|\n\n  * Hyperlapse\n  * IGTV\n  * List of most-followed accounts\n  * List of most-liked pictures\n  * Threads\n\n  \nHardware|\n\n  * Portal\n  * Quest\n    * Quest 2\n    * Quest 3\n    * Pro\n    * Touch\n  * Ray-Ban Stories\n\n  \nOther|\n\n  * Express Wi-Fi\n  * Free Basics\n  * Messenger\n    * Kids\n    * Rooms\n  * Mapillary\n  * Meta AI\n  * Meta Horizon OS\n  * Supernatural\n  * WhatsApp\n  * Workplace\n\n  \nFormer|\n\n  * Atlas Solutions\n  * FriendFeed\n  * Giphy\n  * Home\n    * HTC First\n  * M\n  * Oculus Go\n  * Oculus Rift\n    * CV1\n    * S\n  * Onavo\n  * Paper\n  * Slingshot\n  * tbh\n  * Wirehog\n\n  \nPeople| | Founders| \n\n  * Mark Zuckerberg (28% equity)\n  * Dustin Moskovitz (7%)\n  * Eduardo Saverin (5%, formerly)\n  * Chris Hughes (1%, formerly)\n  * Andrew McCollum\n\n  \n---|---  \nBoard| | Current| \n\n  * Mark Zuckerberg\n  * Sheryl Sandberg\n  * Marc Andreessen\n  * John D. Arnold\n  * Drew Houston\n  * Nancy Killefer\n  * Robert M. Kimmitt\n  * Hock Tan\n  * Tony Xu\n\n  \n---|---  \nFormer|\n\n  * Peter Thiel\n\n  \nExecutive officers| | Current| \n\n  * Mark Zuckerberg (Chairman and CEO)\n  * Javier Olivan (COO)\n  * Andrew Bosworth (CTO)\n  * Chris Cox (CPO)\n  * Nick Clegg (President of Global Affairs)\n  * Jennifer Newstead (Chief Legal Officer)\n\n  \n---|---  \nFormer|\n\n  * Sean Parker (4%, formerly)\n  * Owen Van Natta\n  * Gideon Yu\n  * Adam D'Angelo\n  * Chris Kelly\n  * Bret Taylor\n  * Sheryl Sandberg\n  * Mike Schroepfer\n  * David Wehner\n  * David Ebersman\n  * Marne Levine\n  * Alex Stamos\n\n  \nOversight Board| | Members| \n\n  * Catalina Botero Marino, Co-Chair (2020\u2013)\n  * Jamal Greene, Co-Chair (2020\u2013)\n  * Michael W. McConnell, Co-Chair (2020\u2013)\n  * Helle Thorning-Schmidt, Co-Chair (2020\u2013)\n  * Afia Asantewaa Asare-Kyei (2020\u2013)\n  * Evelyn Aswad (2020\u2013)\n  * Endy Bayuni (2020\u2013)\n  * Katherine Chen (2020\u2013)\n  * Nighat Dad (2020\u2013)\n  * Tawakkol Karman (2020\u2013)\n  * Maina Kiai (2020\u2013)\n  * Sudhir Krishnaswamy (2020\u2013)\n  * Ronaldo Lemos (2020\u2013)\n  * Julie Owono (2020\u2013)\n  * Emi Palmor (2020\u2013)\n  * Alan Rusbridger (2020\u2013)\n  * Andr\u00e1s Saj\u00f3 (2020\u2013)\n  * John Samples (2020\u2013)\n  * Nicolas Suzor (2020\u2013)\n  * Suzanne Nossel (2021\u2013)\n  * Khaled Mansour (2022\u2013)\n  * Pamela San Martin (2022\u2013)\n  * Paolo Carozza (2022\u2013)\n  * Kenji Yoshino (2023\u2013)\n\n  \n---|---  \nBoard of Trustees|\n\n  * Stephen Neal, Chair (2021\u2013)\n  * Kristina Arriaga (2020\u2013)\n  * Cherine Chalaby (2020\u2013)\n  * Wanda Felton (2020\u2013)\n  * Kate O'Regan (2020\u2013)\n  * Robert Post (2020\u2013)\n\n  \nFormer members|\n\n  * Pamela S. Karlan (Board Member, 2020\u20132021)\n  * Paul G. Haaga Jr. (Board of Trustees Chair, 2020\u20132021)\n\n  \nNotable employees| | Current| \n\n  * Lars Rasmussen (Graph Search director)\n  * Naomi Gleit (VP of social good)\n  * Nicola Mendelsohn (head of Global Business Group)\n  * Adam Mosseri (head of Instagram)\n  * Thomas Reardon (Reality Labs director)\n\n  \n---|---  \nFormer|\n\n  * Blake Ross (Director of Product)\n  * Ted Ullyot (VP, General Counsel, and Secretary)\n  * Hugo Barra (VP of Reality Labs)\n  * John Carmack (CTO of Reality Labs)\n  * Matt Cohler\n  * Charlie Cheever\n  * Randi Zuckerberg\n  * Yishan Wong\n  * George Hotz\n  * Joe Lockhart\n  * Andrei Alexandrescu (research scientist)\n  * Chamath Palihapitiya (VP of User Growth)\n  * Elliot Schrage (VP of Global Communications, Marketing and Public Policy)\n  * Frances Haugen (Product Manager of Civic Integrity Team)\n\n  \nOpen source|\n\n  * Apache Cassandra\n  * Apache Hive\n  * Apache Thrift\n  * Buck\n  * FQL\n  * Hack\n  * HHVM\n  * HipHop for PHP\n  * Infer\n  * MyRocks\n  * Open Compute Project\n  * Phabricator\n  * React\n  * React Native\n  * RocksDB\n  * Scribe\n  * Telecom Infra Project\n  * Tornado\n\n  \nMass media|\n\n  * The Facebook Effect\n  * The Accidental Billionaires\n  * The Social Network\n\n  \nConcepts|\n\n  * Activity stream\n  * Social graph\n  * Friending and following\n  * Reblogging\n  * Fan-gating\n  * Facebook diplomacy\n  * Facebook like button\n\n  \nBusiness|\n\n  * History of Facebook\n  * Timeline of Instagram\n  * Timeline of WhatsApp\n  * Acquisitions\n  * f8 conference\n  * IPO\n  * Censorship\n  * Criticism\n    * Cambridge Analytica data scandal\n    * 2020 ad boycotts\n    * 2021 company files leak\n    * Privacy\n    * Content management\n  * Litigation\n  * Young v. Facebook, Inc. (2011)\n  * Fraley v. Facebook, Inc. (2016)\n  * Force v. Facebook, Inc. (2019)\n  * Federal Trade Commission v. Meta Platforms, Inc. (ongoing)\n\n  \nLists|\n\n  * Most-followed Facebook pages\n\n  \nRelated|\n\n  * Priscilla Chan (wife of Mark Zuckerberg)\n  * Chan Zuckerberg Initiative\n  * Aquila Internet relay drone\n  * Willow Village\n  * WaveGroup Sound\n  * 2021 Facebook outage\n\n  \n  \nRetrieved from\n\"https://en.wikipedia.org/w/index.php?title=Apache_Thrift&oldid=1215203974\"\n\nCategories:\n\n  * Apache Software Foundation projects\n  * Application layer protocols\n  * Data serialization formats\n  * Inter-process communication\n  * Remote procedure call\n  * Facebook software\n\nHidden categories:\n\n  * Webarchive template wayback links\n  * Articles with short description\n  * Short description is different from Wikidata\n  * Articles with a promotional tone from August 2019\n  * All articles with a promotional tone\n  * Wikipedia articles with style issues from August 2019\n  * All articles with style issues\n  * Articles with multiple maintenance issues\n  * All Wikipedia articles needing clarification\n  * Wikipedia articles needing clarification from August 2013\n  * Official website different in Wikidata and Wikipedia\n\n  * This page was last edited on 23 March 2024, at 19:01 (UTC).\n  * Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n  * Privacy policy\n  * About Wikipedia\n  * Disclaimers\n  * Contact Wikipedia\n  * Code of Conduct\n  * Developers\n  * Statistics\n  * Cookie statement\n  * Mobile view\n  * Edit preview settings\n\n", "frontpage": false}
