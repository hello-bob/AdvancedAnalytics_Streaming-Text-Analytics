{"aid": "40274157", "title": "Encore for TypeScript", "url": "https://encore.dev/blog/encore-for-typescript", "domain": "encore.dev", "votes": 1, "user": "machekb", "posted_at": "2024-05-06 13:03:52", "comments": 0, "source_title": "Encore for TypeScript \u2014 Launch Week Day 1 \u2013 Encore Blog", "source_text": "Encore for TypeScript \u2014 Launch Week Day 1 \u2013 Encore Blog\n\n# Encore for TypeScript\n\n## Encore is now available for TypeScript, powered by a new high-performance\nRust runtime.\n\n05/06/24\n\n6 Min Read\n\nAndr\u00e9 Eriksson\n\n05/06/24\n\n# Encore for TypeScript\n\n## Encore is now available for TypeScript, powered by a new high-performance\nRust runtime.\n\nAndr\u00e9 Eriksson\n\n6 Min Read\n\nIt's Day 1 of Launch Week and we're kicking off with a big one...\n\n## Introducing: Encore for TypeScript\n\nEncore has simplified building event-driven and distributed systems in Go for\nyears. Today we're launching Encore for TypeScript, bringing the same simple\nworkflow to TypeScript developers everywhere.\n\nIt's designed around a new Open Source Backend SDK, which makes it very simple\nto create backend services and APIs, and use cloud infrastructure resources\nlike databases and Pub/Sub.\n\nIt's powered by a high-performance distributed systems runtime in Rust,\nintegrated with the standard Node.js runtime for full compatibility with the\nNode.js ecosystem, offering a major performance upgrade:\n\n  * 7x Request throughput (req/s)\n  * -85% Response latency\n\n## Encore's Open Source Backend SDK\n\nEncore for TypeScript is designed around a new Open Source Backend SDK, which\nmakes it simple to create backend services and APIs, and use cloud\ninfrastructure resources. It removes the need for the typical microservices\nboilerplate and infrastructure configuration.\n\nThe Backend SDK provides a declarative way to use common cloud primitives,\nlike:\n\n  * APIs and Services\n  * SQL Databases\n  * Pub/Sub topics and subscriptions\n  * Caches\n  * Cron jobs\n  * Secrets\n\n### Example: Hello World\n\nEncore lets you easily define type-safe, idiomatic TypeScript API endpoints.\nIt's done in a fully declarative way, enabling Encore to automatically parse\nand validate the incoming request and ensure it matches the schema, with zero\nboilerplate.\n\nTo define an API, use the api function from the encore.dev/api module to wrap\na regular TypeScript async function that receives the request data as input\nand returns response data. This tells Encore that the function is an API\nendpoint. Encore will then automatically generate the necessary boilerplate at\ncompile-time.\n\nHere\u2019s \u201cHello World\u201d in Encore for TypeScript:\n\n    \n    \n    import { api } from \"encore.dev/api\"; export const get = api( { expose: true, method: \"GET\", path: \"/hello/:name\" }, async ({ name }: { name: string }): Promise<Response> => { const msg = `Hello ${name}!`; return { message: msg }; } ); interface Response { message: string; }\n\nTo run it, you simply use encore run and the Open Source CLI will\nautomatically set up your local infrastructure.\n\n### Example: Using PostgreSQL\n\nSetting up a PostgreSQL database is just three lines of code in Encore for\nTypeScript. You define the database schema by creating migration files in a\ndirectory named migrations within an Encore service package. Encore takes care\nof the rest.\n\n    \n    \n    import { SQLDatabase } from \"encore.dev/storage/sqldb\"; // Create the todo database and assign it to the \"db\" variable const db = new SQLDatabase(\"todo\", { migrations: \"./migrations\", }); // Then, query the database using db.query, db.exec, etc.\n\nThis means, with Encore, you don\u2019t need to mess around with database passwords\nor Docker Compose manifests, you just do encore run.\n\n### Example: Event-driven applications using Pub/Sub\n\nPublishers & Subscribers (Pub/Sub) let you build systems that communicate by\nbroadcasting events asynchronously. This is a great way to decouple services\nfor better reliability and responsiveness. Encore's Infrastructure SDK lets\nyou use Pub/Sub in a cloud-agnostic declarative fashion.\n\nLike with databases, we can just define the Pub/Sub topic directly in our\napplication. Encore takes care of setting it all up.\n\nFor example, to create a topic with events about user signups:\n\n    \n    \n    import { Topic } \"encore.dev/pubsub\" export interface SignupEvent { userID: string; } export const signups = new Topic<SignupEvent>(\"signups\", { deliveryGuarantee: \"at-least-once\", });\n\nLike before, encore run will spin up all our services, and all the Pub/Sub\ninfrastructure you have defined. There's no need to use any emulators or other\nworkarounds.\n\n## Unmatched Node performance, powered by Rust\n\nTo enable Encore's functionality in TypeScript, we\u2019ve created a high-\nperformance distributed systems runtime in Rust. It integrates with the\nstandard Node.js runtime for executing JavaScript code, ensuring 100%\ncompatibility with the Node.js ecosystem.\n\nThe Rust runtime does everything from handling incoming requests and making\nAPI calls, to querying databases and using Pub/Sub. It even handles all\napplication observability, like distributed tracing, structured logging, and\nmetrics.\n\nUsing Rust leads to a massive performance increase over standard Node.js,\nincreasing throughput by 7x and reducing response latency by 85%.\n\nWhat\u2019s really cool: Encore has zero NPM dependencies, improving security and\nspeeding up builds and application startup times.\n\n### How it works\n\n  1. Node.js starts up and initializes the Encore Rust runtime, which begins accepting incoming requests, parsing and validating them against the API schema.\n  2. The Encore Runtime then passes on the request to your application code, and waits for the response, before sending it back out over the wire.\n  3. When your application uses infrastructure resources, like querying databases or publishing PubSub messages, it hands that over to the Rust runtime for faster execution.\n\nThis means that the Node.js event loop \u2014 which is single-threaded \u2014 can focus\non executing your business logic. Everything else happens in Encore\u2019s multi-\nthreaded Rust runtime.\n\n## Enhanced type-safety for distributed systems\n\nNormally with TypeScript, the type information is lost at runtime. But Encore\nis different.\n\nEncore uses static code analysis to parse and analyze the TypeScript types you\ndefine, and uses the API schema to automatically validate incoming requests,\nguaranteeing complete type-safety, even at runtime. This means no more\nconfusing exceptions because a required field is missing.\n\n## Fully-featured Local Development\n\nEncore uses it's understanding of your application to orchestrate local\ninfrastructure, so ou only need encore run to start your application locally,\nincluding all the necessary infrastructure.\n\nIt also sets up the Local Development Dashboard that gives you built-in tools\nfor very productive development, including:\n\n  * API Explorer\n  * Service Catalog with automatic API documentation\n  * Architecture Diagrams\n  * Distributed Tracing\n\n## Automated DevOps in your cloud on AWS & GCP\n\nUsing the cloud can be tough. Especially for startups, for two main reasons:\n\n  * It requires a lot of specific expertise, just to set things up.\n  * Even if you do have experience, it takes way too much time away from development.\n\nThat\u2019s why we created Encore\u2019s Cloud Platform. And if you\u2019re a startup dealing\nwith cloud complexity, it might be for you.\n\nIt fully automates DevOps activities like provisioning and configuring cloud\ninfrastructure, and CI/CD. You can even choose how to run your app, for\ninstance, using serverless or Kubernetes.\n\nThis lets you use the full capabilities of AWS or GCP, without the\ndistractions.\n\nIt even helps you deal with security, by automatically implementing best\npractices. So you never need to worry about whether your database is publicly\naccessible, or if you have backups enabled. It can also implement least-\nprivilege security, ensuring your services only have access to the resources\nthey need.\n\n#### How it works\n\nWhen you use Encore\u2019s Backend SDK, Encore is able to parse and understand your\napplication\u2019s architecture and infrastructure requirements.\n\nBehind the scenes, this takes the form of a graph, which Encore\u2019s Cloud\nPlatform uses to understand what infrastructure to provision and how it should\nbe configured.\n\n## Try it yourself\n\nIf you want to try it out, install Encore and check out the example apps. It\u2019s\nfree and open source.\n\nmacOS\n\nWindows\n\nLinux\n\nBrew\n\n$ curl -L https://encore.dev/install.sh | bash\n\nIf you have any questions or just want to hang out with other developers, join\nour community on Discord.\n\nEncore is the Development Platform for startups building event-driven and\ndistributed systems.\n\nMove faster with purpose-built tooling, from local to your cloud on AWS/GCP.\n\n## More Articles\n\nSystems Design\n\n04/04/24 / 6 Min Read\n\nSystems Design\n\n04/04/24 / 6 Min Read\n\nAuthZ for small teams\n\nPractical patterns for implementing authorization\n\nMatt Boyle\n\nSystems Design\n\n01/30/24 / 7 Min Read\n\nSystems Design\n\n01/30/24 / 7 Min Read\n\nThe Thundering Herd Problem\n\nDistributed Systems Horror Stories: Part Two\n\nMatt Boyle\n\nSystems Design\n\n01/10/24 / 7 Min Read\n\nSystems Design\n\n01/10/24 / 7 Min Read\n\nKubernetes Deep Health Checks\n\nDistributed Systems Horror Stories: Part One\n\nMatt Boyle\n\n// Stay in touch?\n\nEncore\n\nHomeHome\n\nPricingPricing\n\nDocsDocs\n\nBuilt with EncoreBuilt with Encore\n\nBlogBlog\n\nChangelogChangelog\n\nCase StudiesCase Studies\n\nPhilosophyPhilosophy\n\nStatusStatus\n\nUse Cases\n\nEvent-Driven ApplicationsEvent-Driven Applications\n\nDistributed SystemsDistributed Systems\n\nCommunity\n\nDiscordDiscord\n\nGitHubGitHub\n\nTwitterTwitter\n\nYouTubeYouTube\n\nTemplatesTemplates\n\nRoadmapRoadmap\n\nResourcesResources\n\n/etc\n\nContactContact\n\nBook a demoBook a demo\n\nJobsJobs\n\nPressPress\n\nTerms of ServiceTerms of Service\n\nPrivacy PolicyPrivacy Policy\n\n\u00a9 2024 EncoreAll rights reserved\n\n\u00a9 2024 Encore All Rights Reserved\n\n", "frontpage": false}
