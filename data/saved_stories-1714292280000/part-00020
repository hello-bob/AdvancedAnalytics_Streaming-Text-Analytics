{"aid": "40185316", "title": "Automation tips for using 'if' statements in Bash script", "url": "https://allthingsopen.org/articles/automation-tips-bash-script", "domain": "allthingsopen.org", "votes": 3, "user": "devonnull", "posted_at": "2024-04-28 01:49:34", "comments": 0, "source_title": "Automation tips for using 'if' statements in Bash scripts - All Things Open", "source_text": "Automation tips for using 'if' statements in Bash scripts - All Things Open :\nAll Things Open\n\n# We Open Source\n\nA community education resource\n\nApril 23, 2024\n\n7 min read\n\n# Automation tips for using \u2018if\u2019 statements in Bash scripts\n\n## Writing a short Bash script can save typing lots of instructions at the\ncommand line.\n\nBy Jim Hall\n\nImage by 652234 from Pixabay\n\nAutomation is the key to everything. If I have a two-step process, I\u2019m going\nto automate it. If it\u2019s a multi-step process, where the next step depends on\nthe successful execution of the one before it, you can bet I\u2019m going to\nautomate it.\n\nIn a recent example, I wanted to view several Simplified Docbook files to see\nwhat the output looks like. Doing this requires installing several\ndependencies, which seems a bit heavy when all I want to do is view the output\nas a PDF. Instead, I created a simple Bash script to process my Simplified\nDocbook file using tools that come installed by default on my system.\n\nThis is a three-step conversion: verify the file with xmllint, convert the\nfile with pandoc, then convert to PDF with LibreOffice. Each step requires\nthat the previous step in the chain runs successfully. This is an excellent\nexample of how to use the if statement in Bash.\n\n## Step 1: Verifying the file with xmllint\n\nSince I\u2019m editing the Docbook file by hand, I want to be sure that my file is\ncorrect. The process for this is validation using a DTD file. I can use the\nxmllint program to verify my Simplified Docbook articles using a copy of the\nDTD that I already saved on my system.\n\nxmllint can take several command line options, but I\u2019m most interested in the\n--dtdvalid option that takes a DTD file to verify against. To verify a single\nSimplified Docbook file, I can use this xmllint command:\n\n    \n    \n    xmllint --dtdvalid $HOME/lib/docbook/sdocbook.dtd article.docbook\n\nIf the file contains any errors, xmllint prints a message for each instance\nand exits with a non-zero status. If the file doesn\u2019t contain any errors,\nxmllint prints a clean version of the XML file. You can optionally suppress\nthat output with --noout.\n\n## Step 2: Converting the file with pandoc\n\nAn easy way to process Simplified Docbook files is with the pandoc program,\nwhich can read from and write to a long list of file types, including Docbook.\nHowever, to generate a PDF, pandoc requires LaTeX, which I don\u2019t have\ninstalled. But if all I want is to view the output of my Simplified Docbook\narticle, I can use pandoc to convert my file into a word processor format like\nLibreOffice ODT:\n\n    \n    \n    pandoc --from=docbook --to=odt article.docbook -o article.odt\n\nIf pandoc successfully generates the output file without issues, it returns\nwith a zero exit status. For any errors, pandoc will return a specific nonzero\ncode that indicates what went wrong.\n\n### Conditional execution\n\nIt\u2019s important to know that the Simplified Docbook file is correct. If the\nfile contains errors, pandoc usually prints an error; but for small\ndiscrepancies, pandoc might silently try to do the best it can. That doesn\u2019t\ngive me a good indication of what my article should look like.\n\nSo it\u2019s important to only convert files that pass the xmllint test. I can do\nthat using a short Bash script that relies on the if statement to perform\nconditional execution. The most basic format looks like this:\n\n    \n    \n    if command ; then commands ; fi\n\nSince the xmllint command exits with a zero status on success, we can use that\nas the test in the if statement. My Bash script looks like this, where \"$1\" is\nthe first file listed when I run the script:\n\n    \n    \n    #!/bin/bash if xmllint --noout --dtdvalid $HOME/lib/docbook/sdocbook.dtd \"$1\" ; then pandoc --from=docbook --to=odt \"$1\" -o out.odt fi\n\nIf successful, this generates a LibreOffice file called out.odt with the\nresults of my Simplified Docbook article.\n\nI prefer to write this in a longer form that first runs the command, then uses\nif with the $? Bash variable, which returns the exit code of the previous\ncommand. When using if this way, use the test command, implemented internally\nin Bash using [ as a shorthand. For example, to run the xmllint command and\ntest if the previous exit code was zero, then run the pandoc command, use\nthis:\n\n    \n    \n    #!/bin/bash xmllint --noout --dtdvalid $HOME/lib/docbook/sdocbook.dtd \"$1\" if [ $? -eq 0 ] ; then pandoc --from=docbook --to=odt \"$1\" -o out.odt fi\n\n## Step 3: Converting to PDF with LibreOffice\n\nIf I want to take another step and convert the LibreOffice file into a PDF\nfile, I can use LibreOffice from the command line using the --convert-to\noption. To convert a single file called out.odt into a PDF file, you can run\nLibreOffice this way:\n\n    \n    \n    libreoffice --convert-to pdf out.odt\n\nLet\u2019s add this command to the Bash script, after doing the initial conversion\nusing pandoc. We can use another if statement and the $? variable to perform a\nsecond test like this:\n\n    \n    \n    #!/bin/bash xmllint --noout --dtdvalid $HOME/lib/docbook/sdocbook.dtd \"$1\" if [ $? -eq 0 ] ; then pandoc --from=docbook --to=odt \"$1\" -o out.odt if [ $? -eq 0 ] ; then libreoffice --convert-to pdf out.odt fi fi\n\nFirst, the script runs xmllint to test the file. If that is successful, the\nscript uses pandoc to convert the file into LibreOffice ODT format. And if\nthat conversion runs without errors, the script runs LibreOffice from the\ncommand line to convert the ODT file into PDF. Notice that the if statements\nare nested inside each other.\n\nIf successful, this generates a new file called out.pdf with the results of my\nSimplified Docbook article.\n\n## Conclusion: Using Bash to automate everything\n\nYou can improve this Bash script with a little extra intelligence. For\nexample, you might need to process more than one Simplified Docbook file.\nInstead of running the script multiple times, you could add a for loop inside\nthe Bash script to process all the files, one after the other. The general\nformat of a Bash loop looks like this:\n\n    \n    \n    for variable in list ; do commands ; done\n\nTo loop through a list of files, we can add a for loop that processes all the\nfiles on the command line. Bash provides a few ways to get all the command\nline arguments to a script; using \"$@\" will preserve any spaces in filenames.\nSo you can iterate over a list of files like this:\n\n    \n    \n    #!/bin/bash for file in \"$@\" ; do echo $file done\n\nAs a final step, let\u2019s integrate the for loop into our script to process\nSimplified Docbook source files into PDF:\n\n    \n    \n    #!/bin/bash for file in \"$@\" ; do tmpfile=${file%.docbook}.odt xmllint --noout --dtdvalid $HOME/lib/docbook/sdocbook.dtd \"$file\" if [ $? -eq 0 ] ; then pandoc --from=docbook --to=odt \"$file\" -o \"$tmpfile\" if [ $? -eq 0 ] ; then libreoffice --headless --convert-to pdf \"$tmpfile\" fi fi done\n\nThis uses an extra feature in Bash that can pull apart a variable using\nparameters. The ${file%.docbook} expansion returns the value of the file\nvariable then removes the last occurrence of .docbook in the name. For\nexample, if file had the value article.docbook, the ${file%.docbook} expansion\nwould give just article. The script uses this to assign a new .odt file\nextension with this line:\n\n    \n    \n    tmpfile=${file%.docbook}.odt\n\nIf I save my script as sdocbook and make it executable with chmod +x sdocbook,\nI can run the script to easily convert a list of Simplified Docbook files into\nPDF format.\n\nWriting a short Bash script can save typing lots of instructions at the\ncommand line. This sample Bash script collects three programs in one script,\nbut only runs the next command if the previous program ran successfully. It\u2019s\na great way to automate and simplify the command line.\n\nThis article is adapted from Using \u2018if\u2019 in a Bash script by Jim Hall, and is\nrepublished with permission from the author.\n\n## About the Author\n\nJim Hall is an open source software advocate and developer, best known for\nusability testing in GNOME and as the founder + project coordinator of\nFreeDOS. At work, Jim is CEO of Hallmentum, an IT executive consulting company\nthat provides hands-on IT Leadership training, workshops, and coaching.\n\nRead Jim's Full Bio\n\nThis work is licensed under a Creative Commons Attribution-Share Alike 4.0\nInternational License.\n\n#### Save the Date for All Things Open 2024\n\nJoin thousands of open source friends October 27-29 in downtown Raleigh for\nATO 2024!\n\nSave the Date 2024\n\n#### Upcoming Events\n\nWe do more than just All Things Open and Open Source 101. See all upcoming\nevents here.\n\nUpcoming Events\n\n#### Open Source Meetups\n\nWe host some of the most active open source meetups in the U.S. Get more info\nand RSVP to an upcoming event.\n\nAll Things Open RTP Meetup Open Source South Carolina Open Source Charlotte\n\n## Keep in Touch\n\nStay up-to-date with news and events\n\n## New to All Things Open?\n\n  * About Us\n  * Mission & Values\n  * Environmental Policy\n  * Contact Us\n\n## Popular Links\n\n  * All Things Open 2024\n  * Meetups\n  * Speak at an Event\n  * Open Source Score\n\nWe're proud to be a Certified B Corporation\n\n\u00a9 All Things Open 2024\n\n", "frontpage": false}
