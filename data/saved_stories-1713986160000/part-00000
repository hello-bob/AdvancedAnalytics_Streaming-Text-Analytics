{"aid": "40143993", "title": "Ky: Tiny and elegant JavaScript HTTP client based on the browser Fetch API", "url": "https://github.com/sindresorhus/ky", "domain": "github.com/sindresorhus", "votes": 1, "user": "nateb2022", "posted_at": "2024-04-24 13:14:13", "comments": 0, "source_title": "GitHub - sindresorhus/ky: \ud83c\udf33 Tiny & elegant JavaScript HTTP client based on the browser Fetch API", "source_text": "GitHub - sindresorhus/ky: \ud83c\udf33 Tiny & elegant JavaScript HTTP client based on the\nbrowser Fetch API\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nsindresorhus / ky Public\n\n  * Notifications\n  * Fork 333\n  * Star 11.5k\n\n\ud83c\udf33 Tiny & elegant JavaScript HTTP client based on the browser Fetch API\n\n### License\n\nMIT license\n\n11.5k stars 333 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# sindresorhus/ky\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n70 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nsindresorhusClarify docs about fetch optionsApr 23, 202444f97b6 \u00b7 Apr 23,\n2024Apr 23, 2024\n\n## History\n\n318 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Fix CI| Jan 7, 2024  \n  \n### media\n\n|\n\n### media\n\n| Meta tweaks| Aug 2, 2022  \n  \n### source\n\n|\n\n### source\n\n| Fix request types for use with Node.js (#578)| Apr 22, 2024  \n  \n### test\n\n|\n\n### test\n\n| Fix the retryCount option retrying an incorrect amount (#547)| Jan 7, 2024  \n  \n### .editorconfig\n\n|\n\n### .editorconfig\n\n| Init| Sep 4, 2018  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| Init| Sep 4, 2018  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Require Node.js 14| Jun 23, 2022  \n  \n### .npmrc\n\n|\n\n### .npmrc\n\n| Init| Sep 4, 2018  \n  \n### license\n\n|\n\n### license\n\n| Meta tweaks| May 16, 2020  \n  \n### package.json\n\n|\n\n### package.json\n\n| 1.2.4| Apr 22, 2024  \n  \n### readme.md\n\n|\n\n### readme.md\n\n| Clarify docs about fetch options| Apr 23, 2024  \n  \n### tsconfig.dist.json\n\n|\n\n### tsconfig.dist.json\n\n| Fix source map generation (#396)| Nov 8, 2021  \n  \n### tsconfig.json\n\n|\n\n### tsconfig.json\n\n| Fix exactOptionalPropertyTypes and compatibility with TypeScript 5.4 (| Mar\n24, 2024  \n  \n## Repository files navigation\n\n^ Sindre's open source work is supported by the community. Special thanks to:\n\nAPI to get search engine results with ease.\n\nAPI to get search engine results with ease.\n\nThe better identity infrastructure for developers\n\n^Logto is an open-source Auth0 alternative designed for every app.\n\n> Ky is a tiny and elegant HTTP client based on the browser Fetch API\n\nKy targets modern browsers, Node.js, and Deno.\n\nIt's just a tiny file with no dependencies.\n\n## Benefits over plain fetch\n\n  * Simpler API\n  * Method shortcuts (ky.post())\n  * Treats non-2xx status codes as errors (after redirects)\n  * Retries failed requests\n  * JSON option\n  * Timeout support\n  * URL prefix option\n  * Instances with custom defaults\n  * Hooks\n\n## Install\n\n    \n    \n    npm install ky\n\n###### Download\n\n  * Normal\n  * Minified\n\n###### CDN\n\n  * jsdelivr\n  * unpkg\n  * esm.sh\n\n## Usage\n\n    \n    \n    import ky from 'ky'; const json = await ky.post('https://example.com', {json: {foo: true}}).json(); console.log(json); //=> `{data: '\ud83e\udd84'}`\n\nWith plain fetch, it would be:\n\n    \n    \n    class HTTPError extends Error {} const response = await fetch('https://example.com', { method: 'POST', body: JSON.stringify({foo: true}), headers: { 'content-type': 'application/json' } }); if (!response.ok) { throw new HTTPError(`Fetch error: ${response.statusText}`); } const json = await response.json(); console.log(json); //=> `{data: '\ud83e\udd84'}`\n\nIf you are using Deno, import Ky from a URL. For example, using a CDN:\n\n    \n    \n    import ky from 'https://esm.sh/ky';\n\n## API\n\n### ky(input, options?)\n\nThe input and options are the same as fetch, with some exceptions:\n\n  * The credentials option is same-origin by default, which is the default in the spec too, but not all browsers have caught up yet.\n  * Adds some more options. See below.\n\nReturns a Response object with Body methods added for convenience. So you can,\nfor example, call ky.get(input).json() directly without having to await the\nResponse first. When called like that, an appropriate Accept header will be\nset depending on the body method used. Unlike the Body methods of\nwindow.Fetch; these will throw an HTTPError if the response status is not in\nthe range of 200...299. Also, .json() will return an empty string if body is\nempty or the response status is 204 instead of throwing a parse error due to\nan empty body.\n\n### ky.get(input, options?)\n\n### ky.post(input, options?)\n\n### ky.put(input, options?)\n\n### ky.patch(input, options?)\n\n### ky.head(input, options?)\n\n### ky.delete(input, options?)\n\nSets options.method to the method name and makes a request.\n\nWhen using a Request instance as input, any URL altering options (such as\nprefixUrl) will be ignored.\n\n#### options\n\nType: object\n\nIn addition to all the fetch options, it supports these options:\n\n##### method\n\nType: string Default: 'get'\n\nHTTP method used to make the request.\n\nInternally, the standard methods (GET, POST, PUT, PATCH, HEAD and DELETE) are\nuppercased in order to avoid server errors due to case sensitivity.\n\n##### json\n\nType: object and any other value accepted by JSON.stringify()\n\nShortcut for sending JSON. Use this instead of the body option. Accepts any\nplain object or value, which will be JSON.stringify()'d and sent in the body\nwith the correct header set.\n\n##### searchParams\n\nType: string | object<string, string | number | boolean> | Array<Array<string | number | boolean>> | URLSearchParams Default: ''\n\nSearch parameters to include in the request URL. Setting this will override\nall existing search parameters in the input URL.\n\nAccepts any value supported by URLSearchParams().\n\n##### prefixUrl\n\nType: string | URL\n\nA prefix to prepend to the input URL when making the request. It can be any\nvalid URL, either relative or absolute. A trailing slash / is optional and\nwill be added automatically, if needed, when it is joined with input. Only\ntakes effect when input is a string. The input argument cannot start with a\nslash / when using this option.\n\nUseful when used with ky.extend() to create niche-specific Ky-instances.\n\n    \n    \n    import ky from 'ky'; // On https://example.com const response = await ky('unicorn', {prefixUrl: '/api'}); //=> 'https://example.com/api/unicorn' const response2 = await ky('unicorn', {prefixUrl: 'https://cats.com'}); //=> 'https://cats.com/unicorn'\n\nNotes:\n\n  * After prefixUrl and input are joined, the result is resolved against the base URL of the page (if any).\n  * Leading slashes in input are disallowed when using this option to enforce consistency and avoid confusion about how the input URL is handled, given that input will not follow the normal URL resolution rules when prefixUrl is being used, which changes the meaning of a leading slash.\n\n##### retry\n\nType: object | number Default:\n\n  * limit: 2\n  * methods: get put head delete options trace\n  * statusCodes: 408 413 429 500 502 503 504\n  * maxRetryAfter: undefined\n  * backoffLimit: undefined\n  * delay: attemptCount => 0.3 * (2 ** (attemptCount - 1)) * 1000\n\nAn object representing limit, methods, statusCodes and maxRetryAfter fields\nfor maximum retry count, allowed methods, allowed status codes and maximum\nRetry-After time.\n\nIf retry is a number, it will be used as limit and other defaults will remain\nin place.\n\nIf maxRetryAfter is set to undefined, it will use options.timeout. If Retry-\nAfter header is greater than maxRetryAfter, it will cancel the request.\n\nThe backoffLimit option is the upper limit of the delay per retry in\nmilliseconds. To clamp the delay, set backoffLimit to 1000, for example. By\ndefault, the delay is calculated with 0.3 * (2 ** (attemptCount - 1)) * 1000.\nThe delay increases exponentially.\n\nThe delay option can be used to change how the delay between retries is\ncalculated. The function receives one parameter, the attempt count, starting\nat 1.\n\nRetries are not triggered following a timeout.\n\n    \n    \n    import ky from 'ky'; const json = await ky('https://example.com', { retry: { limit: 10, methods: ['get'], statusCodes: [413], backoffLimit: 3000 } }).json();\n\n##### timeout\n\nType: number | false Default: 10000\n\nTimeout in milliseconds for getting a response, including any retries. Can not\nbe greater than 2147483647. If set to false, there will be no timeout.\n\n##### hooks\n\nType: object<string, Function[]> Default: {beforeRequest: [], beforeRetry: [],\nafterResponse: []}\n\nHooks allow modifications during the request lifecycle. Hook functions may be\nasync and are run serially.\n\n###### hooks.beforeRequest\n\nType: Function[] Default: []\n\nThis hook enables you to modify the request right before it is sent. Ky will\nmake no further changes to the request after this. The hook function receives\nrequest and options as arguments. You could, for example, modify the\nrequest.headers here.\n\nThe hook can return a Request to replace the outgoing request, or return a\nResponse to completely avoid making an HTTP request. This can be used to mock\na request, check an internal cache, etc. An important consideration when\nreturning a request or response from this hook is that any remaining\nbeforeRequest hooks will be skipped, so you may want to only return them from\nthe last hook.\n\n    \n    \n    import ky from 'ky'; const api = ky.extend({ hooks: { beforeRequest: [ request => { request.headers.set('X-Requested-With', 'ky'); } ] } }); const response = await api.get('https://example.com/api/users');\n\n###### hooks.beforeRetry\n\nType: Function[] Default: []\n\nThis hook enables you to modify the request right before retry. Ky will make\nno further changes to the request after this. The hook function receives an\nobject with the normalized request and options, an error instance, and the\nretry count. You could, for example, modify request.headers here.\n\nIf the request received a response, the error will be of type HTTPError and\nthe Response object will be available at error.response. Be aware that some\ntypes of errors, such as network errors, inherently mean that a response was\nnot received. In that case, the error will not be an instance of HTTPError.\n\nYou can prevent Ky from retrying the request by throwing an error. Ky will not\nhandle it in any way and the error will be propagated to the request\ninitiator. The rest of the beforeRetry hooks will not be called in this case.\nAlternatively, you can return the ky.stop symbol to do the same thing but\nwithout propagating an error (this has some limitations, see ky.stop docs for\ndetails).\n\n    \n    \n    import ky from 'ky'; const response = await ky('https://example.com', { hooks: { beforeRetry: [ async ({request, options, error, retryCount}) => { const token = await ky('https://example.com/refresh-token'); request.headers.set('Authorization', `token ${token}`); } ] } });\n\n###### hooks.beforeError\n\nType: Function[] Default: []\n\nThis hook enables you to modify the HTTPError right before it is thrown. The\nhook function receives a HTTPError as an argument and should return an\ninstance of HTTPError.\n\n    \n    \n    import ky from 'ky'; await ky('https://example.com', { hooks: { beforeError: [ error => { const {response} = error; if (response && response.body) { error.name = 'GitHubError'; error.message = `${response.body.message} (${response.status})`; } return error; } ] } });\n\n###### hooks.afterResponse\n\nType: Function[] Default: []\n\nThis hook enables you to read and optionally modify the response. The hook\nfunction receives normalized request, options, and a clone of the response as\narguments. The return value of the hook function will be used by Ky as the\nresponse object if it's an instance of Response.\n\n    \n    \n    import ky from 'ky'; const response = await ky('https://example.com', { hooks: { afterResponse: [ (_request, _options, response) => { // You could do something with the response, for example, logging. log(response); // Or return a `Response` instance to overwrite the response. return new Response('A different response', {status: 200}); }, // Or retry with a fresh token on a 403 error async (request, options, response) => { if (response.status === 403) { // Get a fresh token const token = await ky('https://example.com/token').text(); // Retry with the token request.headers.set('Authorization', `token ${token}`); return ky(request); } } ] } });\n\n##### throwHttpErrors\n\nType: boolean Default: true\n\nThrow an HTTPError when, after following redirects, the response has a non-2xx\nstatus code. To also throw for redirects instead of following them, set the\nredirect option to 'manual'.\n\nSetting this to false may be useful if you are checking for resource\navailability and are expecting error responses.\n\nNote: If false, error responses are considered successful and the request will\nnot be retried.\n\n##### onDownloadProgress\n\nType: Function\n\nDownload progress event handler.\n\nThe function receives a progress and chunk argument:\n\n  * The progress object contains the following elements: percent, transferredBytes and totalBytes. If it's not possible to retrieve the body size, totalBytes will be 0.\n  * The chunk argument is an instance of Uint8Array. It's empty for the first call.\n\n    \n    \n    import ky from 'ky'; const response = await ky('https://example.com', { onDownloadProgress: (progress, chunk) => { // Example output: // `0% - 0 of 1271 bytes` // `100% - 1271 of 1271 bytes` console.log(`${progress.percent * 100}% - ${progress.transferredBytes} of ${progress.totalBytes} bytes`); } });\n\n##### parseJson\n\nType: Function Default: JSON.parse()\n\nUser-defined JSON-parsing function.\n\nUse-cases:\n\n  1. Parse JSON via the bourne package to protect from prototype pollution.\n  2. Parse JSON with reviver option of JSON.parse().\n\n    \n    \n    import ky from 'ky'; import bourne from '@hapijs/bourne'; const json = await ky('https://example.com', { parseJson: text => bourne(text) }).json();\n\n##### fetch\n\nType: Function Default: fetch\n\nUser-defined fetch function. Has to be fully compatible with the Fetch API\nstandard.\n\nUse-cases:\n\n  1. Use custom fetch implementations like isomorphic-unfetch.\n  2. Use the fetch wrapper function provided by some frameworks that use server-side rendering (SSR).\n\n    \n    \n    import ky from 'ky'; import fetch from 'isomorphic-unfetch'; const json = await ky('https://example.com', {fetch}).json();\n\n### ky.extend(defaultOptions)\n\nCreate a new ky instance with some defaults overridden with your own.\n\nIn contrast to ky.create(), ky.extend() inherits defaults from its parent.\n\nYou can pass headers as a Headers instance or a plain object.\n\nYou can remove a header with .extend() by passing the header with an undefined\nvalue. Passing undefined as a string removes the header only if it comes from\na Headers instance.\n\n    \n    \n    import ky from 'ky'; const url = 'https://sindresorhus.com'; const original = ky.create({ headers: { rainbow: 'rainbow', unicorn: 'unicorn' } }); const extended = original.extend({ headers: { rainbow: undefined } }); const response = await extended(url).json(); console.log('rainbow' in response); //=> false console.log('unicorn' in response); //=> true\n\n### ky.create(defaultOptions)\n\nCreate a new Ky instance with complete new defaults.\n\n    \n    \n    import ky from 'ky'; // On https://my-site.com const api = ky.create({prefixUrl: 'https://example.com/api'}); const response = await api.get('users/123'); //=> 'https://example.com/api/users/123' const response = await api.get('/status', {prefixUrl: ''}); //=> 'https://my-site.com/status'\n\n#### defaultOptions\n\nType: object\n\n### ky.stop\n\nA Symbol that can be returned by a beforeRetry hook to stop the retry. This\nwill also short circuit the remaining beforeRetry hooks.\n\nNote: Returning this symbol makes Ky abort and return with an undefined\nresponse. Be sure to check for a response before accessing any properties on\nit or use optional chaining. It is also incompatible with body methods, such\nas .json() or .text(), because there is no response to parse. In general, we\nrecommend throwing an error instead of returning this symbol, as that will\ncause Ky to abort and then throw, which avoids these limitations.\n\nA valid use-case for ky.stop is to prevent retries when making requests for\nside effects, where the returned data is not important. For example, logging\nclient activity to the server.\n\n    \n    \n    import ky from 'ky'; const options = { hooks: { beforeRetry: [ async ({request, options, error, retryCount}) => { const shouldStopRetry = await ky('https://example.com/api'); if (shouldStopRetry) { return ky.stop; } } ] } }; // Note that response will be `undefined` in case `ky.stop` is returned. const response = await ky.post('https://example.com', options); // Using `.text()` or other body methods is not supported. const text = await ky('https://example.com', options).text();\n\n### HTTPError\n\nExposed for instanceof checks. The error has a response property with the\nResponse object, request property with the Request object, and options\nproperty with normalized options (either passed to ky when creating an\ninstance with ky.create() or directly when performing the request).\n\nIf you need to read the actual response when an HTTPError has occurred, call\nthe respective parser method on the response object. For example:\n\n    \n    \n    try { await ky('https://example.com').json(); } catch (error) { if (error.name === 'HTTPError') { const errorJson = await error.response.json(); } }\n\n### TimeoutError\n\nThe error thrown when the request times out. It has a request property with\nthe Request object.\n\n## Tips\n\n### Sending form data\n\nSending form data in Ky is identical to fetch. Just pass a FormData instance\nto the body option. The Content-Type header will be automatically set to\nmultipart/form-data.\n\n    \n    \n    import ky from 'ky'; // `multipart/form-data` const formData = new FormData(); formData.append('food', 'fries'); formData.append('drink', 'icetea'); const response = await ky.post(url, {body: formData});\n\nIf you want to send the data in application/x-www-form-urlencoded format, you\nwill need to encode the data with URLSearchParams.\n\n    \n    \n    import ky from 'ky'; // `application/x-www-form-urlencoded` const searchParams = new URLSearchParams(); searchParams.set('food', 'fries'); searchParams.set('drink', 'icetea'); const response = await ky.post(url, {body: searchParams});\n\n### Setting a custom Content-Type\n\nKy automatically sets an appropriate Content-Type header for each request\nbased on the data in the request body. However, some APIs require custom, non-\nstandard content types, such as application/x-amz-json-1.1. Using the headers\noption, you can manually override the content type.\n\n    \n    \n    import ky from 'ky'; const json = await ky.post('https://example.com', { headers: { 'content-type': 'application/json' }, json: { foo: true }, }).json(); console.log(json); //=> `{data: '\ud83e\udd84'}`\n\n### Cancellation\n\nFetch (and hence Ky) has built-in support for request cancellation through the\nAbortController API. Read more.\n\nExample:\n\n    \n    \n    import ky from 'ky'; const controller = new AbortController(); const {signal} = controller; setTimeout(() => { controller.abort(); }, 5000); try { console.log(await ky(url, {signal}).text()); } catch (error) { if (error.name === 'AbortError') { console.log('Fetch aborted'); } else { console.error('Fetch error:', error); } }\n\n## FAQ\n\n#### How do I use this in Node.js?\n\nNode.js 18 and later supports fetch natively, so you can just use this package\ndirectly.\n\n#### How do I use this with a web app (React, Vue.js, etc.) that uses server-\nside rendering (SSR)?\n\nSame as above.\n\n#### How do I test a browser library that uses this?\n\nEither use a test runner that can run in the browser, like Mocha, or use AVA\nwith ky-universal. Read more.\n\n#### How do I use this without a bundler like Webpack?\n\nMake sure your code is running as a JavaScript module (ESM), for example by\nusing a <script type=\"module\"> tag in your HTML document. Then Ky can be\nimported directly by that module without a bundler or other tools.\n\n    \n    \n    <script type=\"module\"> import ky from 'https://unpkg.com/ky/distribution/index.js'; const json = await ky('https://jsonplaceholder.typicode.com/todos/1').json(); console.log(json.title); //=> 'delectus aut autem </script>\n\n#### How is it different from got\n\nSee my answer here. Got is maintained by the same people as Ky.\n\n#### How is it different from axios?\n\nSee my answer here.\n\n#### How is it different from r2?\n\nSee my answer in #10.\n\n#### What does ky mean?\n\nIt's just a random short npm package name I managed to get. It does, however,\nhave a meaning in Japanese:\n\n> A form of text-able slang, KY is an abbreviation for \u7a7a\u6c17\u8aad\u3081\u306a\u3044 (kuuki yomenai),\n> which literally translates into \u201ccannot read the air.\u201d It's a phrase applied\n> to someone who misses the implied meaning.\n\n## Browser support\n\nThe latest version of Chrome, Firefox, and Safari.\n\n## Node.js support\n\nNode.js 18 and later.\n\n## Related\n\n  * got - Simplified HTTP requests for Node.js\n  * ky-hooks-change-case - Ky hooks to modify cases on requests and responses of objects\n\n## Maintainers\n\n  * Sindre Sorhus\n  * Szymon Marczak\n  * Seth Holladay\n\n## About\n\n\ud83c\udf33 Tiny & elegant JavaScript HTTP client based on the browser Fetch API\n\n### Topics\n\njavascript fetch json rest js npm-package http-client request tiny whatwg-\nfetch http-request\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Code of conduct\n\nCode of conduct\n\nActivity\n\n### Stars\n\n11.5k stars\n\n### Watchers\n\n54 watching\n\n### Forks\n\n333 forks\n\nReport repository\n\n## Releases 69\n\nv1.2.4 Latest\n\nApr 22, 2024\n\n\\+ 68 releases\n\n## Sponsor this project\n\n  * sindresorhus Sindre Sorhus\n  * szmarczak Szymon Marczak\n  * sholladay Seth Holladay\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Used by 63.5k\n\n\\+ 63,517\n\n## Contributors 96\n\n\\+ 82 contributors\n\n## Languages\n\n  * TypeScript 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
