{"aid": "40090339", "title": "New NPM library \"itty-time\" is much smaller/faster than the popular \"ms\".", "url": "https://www.npmjs.com/package/itty-time", "domain": "npmjs.com", "votes": 1, "user": "kwhitley", "posted_at": "2024-04-19 18:25:27", "comments": 0, "source_title": "itty-time", "source_text": "itty-time - npm\n\nskip to:contentpackage searchsign in\n\n\u2764\n\nnpm\n\nSign UpSign In\n\n#\n\nitty-time\n\n1.0.3 \u2022 Public \u2022 Published 11 hours ago\n\n  * Readme\n  * Code Beta\n  * 0 Dependencies\n  * 0 Dependents\n  * 19 Versions\n\n### v1 Documentation | Discord\n\nUltra-small (~390 bytes) library for TTL date math and converting ms durations\nto and from strings.\n\n## Features\n\n  * Tiny. The entire library is ~390 bytes, and fully tree-shakeable.\n  * Convert string durations to ms/seconds.\n  * Convert ms to human-readable string durations.\n  * Add durations to dates.\n\n## Comparison to other top-rated libraries\n\nlibrary| string to ms| ms to string| date math| size^1  \n---|---|---|---|---  \nitty-time| \u2705| \u2705| \u2705| 386b  \n@lukeed/ms| \u2705| \u2705| \u274c| 435b  \nms| \u2705| \u274c| \u274c| 938b  \npretty-ms| \u274c| \u2705| \u274c| 1.04kB  \nhumanize-duration| \u274c| \u2705| \u274c| 6.74kB  \n  \n^1: minified and gzipped\n\n## Performance\n\nThe only function most folks care about in terms of raw performance is string\nto ms conversion. In this, itty stacks up pretty well, being significantly\nfaster than ms, but falling to the insanely-optimized @lukeed/ms.\n\nMoral of the story, probably don't use ms.\n\nUse Luke's if you want the absolute fastest parsing, or itty if you want some\nof the other functions as well. If you're byte-counting, itty wins again, but\nif you're byte-counting that hard, you're probably better off with raw ms math\nif you can stomach it.\n\n## seconds/ms\n\n#### seconds(duration: string) => number ms(duration: string) => number\n\nTTL math is a maintenance nightmare. It's a pain to write, a pain to read, and\nwhen you update the math later, you'll probably forget to update the comment,\ncausing all sorts of mayhem.\n\n    \n    \n    const TTL = 2 * 7 * 24 * 60 * 60 * 1000 // 2 weeks, right?\n\nHere's a better way.\n\n    \n    \n    import { ms, seconds } from 'itty-time' // to seconds seconds('2 weeks') // 1209600 // to milliseconds ms('2 weeks') // 1209600000\n\n## duration\n\n#### duration(ms: number) => string\n\nOf course, we sometimes need to go the other direction. Want to tell a user\nhow long ago something happened? How much time they have left?\n\nYou could build it yourself, or import the fantastic humanize-duration library\nthat inspired this, but at 6.3kB^1, it's over 20x the size of this 280 byte\nfunction.\n\n^1: of course humanize-duration can also do much, much more.\n\n    \n    \n    import { duration } from 'itty-time' duration(3750000) // \"1 hour, 2 minutes, 30 seconds\" // limit number of segments returned duration(3750000, { parts: 2 }) // \"1 hour, 2 minutes\" // change the delimiter duration(3750000, { join: ' --> ' }) // \"1 hour --> 2 minutes --> 30 seconds\" // or get the raw components duration(3750000, { join: false }) /* [ ['hour', 1], ['minutes', 2], ['seconds', 30] ] /*\n\n## datePlus\n\n#### datePlus(duration: string, from = new Date) => Date\n\nSometimes you need a TTL for some point in the future, but sometimes you need\nthe actual date. You could convert it all yourself... or use this.\n\n    \n    \n    import { datePlus } from 'itty-time' // from right now datePlus('2 months') // or from a different date datePlus('2 months', datePlus('1 week'))\n\n## Readme\n\n### Keywords\n\n  * humanize\n  * duration\n  * ttl\n  * ms\n  * months\n  * time\n  * dates\n  * string\n  * readable\n\n## Package Sidebar\n\n### Install\n\nnpm i itty-time\n\n### Repository\n\ngithub.com/kwhitley/itty-time\n\n### Homepage\n\ngithub.com/kwhitley/itty-time#readme\n\n### Weekly Downloads\n\n91\n\n### Version\n\n1.0.3\n\n### License\n\nMIT\n\n### Unpacked Size\n\n20.2 kB\n\n### Total Files\n\n31\n\n### Last publish\n\n11 hours ago\n\n### Collaborators\n\nTry on RunKit\n\nReport malware\n\n## Footer\n\n### Support\n\n  * Help\n  * Advisories\n  * Status\n  * Contact npm\n\n### Company\n\n  * About\n  * Blog\n  * Press\n\n### Terms & Policies\n\n  * Policies\n  * Terms of Use\n  * Code of Conduct\n  * Privacy\n\n", "frontpage": false}
