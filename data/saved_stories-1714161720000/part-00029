{"aid": "40167215", "title": "Sinkholing the PlugX USB worm botnet", "url": "https://blog.sekoia.io/unplugging-plugx-sinkholing-the-plugx-usb-worm-botnet/", "domain": "sekoia.io", "votes": 2, "user": "skilled", "posted_at": "2024-04-26 08:52:41", "comments": 0, "source_title": "Unplugging PlugX: Sinkholing the PlugX USB worm botnet", "source_text": "Unplugging PlugX: Sinkholing the PlugX USB worm botnet - Sekoia.io Blog\n\n### Log in\n\nWhoops! You have to login to access the Reading Center functionalities!\n\nForgot password?\n\n### Search the site...\n\n  * All categories\n  * Research & Threat Intelligence\n  * Blogpost\n  * Product News & Tutorials\n\nReset\n\nLog in\n\nBlogpost Research & Threat Intelligence\n\n# Unplugging PlugX: Sinkholing the PlugX USB worm botnet\n\nmustang panda\n\nplugx\n\nsinkhole\n\nworm\n\nFelix Aim\u00e9, Charles M. and TDR (Threat Detection & Research) April 25 2024\n\n0\n\nRead it later Remove\n\n20 minutes reading\n\n## Table of contents\n\n  * PlugX, an old cyber weapon in the Chinese arsenal\n  * When things go wrong: adding a wormable component to PlugX.\n  * Sinkholing the PlugX worm\n  * From sinkholing to disinfection\n  * Indicators of compromise\n\n## Key Takeaways\n\n  * In September 2023, we successfully sinkholed a command and control server linked to the PlugX worms. For just $7, we acquired the unique IP address tied to a variant of this worm, which had been previously documented by Sophos.\n  * Almost four years after its initial launch, between ~90,000 to ~100,000 unique public IP addresses are still infected, sending distinctive PlugX requests daily to our sinkhole. We observed in 6 months of sinkholing more than 2,5M unique IPs connecting to it.\n  * While studying the cryptography of PlugX\u2019s communications, we discovered that it was possible to send disinfection commands to the compromised workstations. Two approaches can be implemented: one that disinfects only the workstation, and a more intrusive one that disinfects both the workstation and the USB drive.\n  * Despite the fact that this worm cannot be completely stopped, we are offering the affected countries the possibility of disinfection, with a concept of sovereign disinfection process.\n\nIn March 2023, Sophos published an article entitled \u201cA border-hopping PlugX\nUSB worm takes its act on the road\u201d putting the light on a PlugX variant with\nworming capabilities. This vari- ant, created in 2020, aimed to propagate via\ncompromised flash drives, bypass air gaps, infect non internet facing networks\nand steal documents from them. According to the Sophos blogpost, all of these\nPlugX samples communicate with only one IP address, 45.142.166[.]112 hosted by\nGreenCloud.\n\nIn September 2023, we managed to take ownership of this IP address to sinkhole\nthat botnet. We initially thought that we will have a few thousand victims\nconnected to it, as what we can have on our regular sinkholes. However, by\nsetting up a simple web server we saw a continuous flow of HTTP requests\nvarying through the time of the day.\n\nFacing that, we decided to record the received requests in a database in order\nto map the infections. In total, between 90 to 100k unique IP addresses are\nsending PlugX distinctive requests every day to our sinkhole server since\nSeptember 2023. If the botnet can be considered as \u201cdead,\u201d as the operators\ndon\u2019t control it anymore, anyone with interception capabilities or taking\nownership of this server can send arbitrary commands to the infected host to\nre-purpose it for malicious activities.\n\nTherefore, we looked at the concept of sovereign disinfection, by proposing to\nLaw Enforcement Agencies and national Computer Emergency Response Teams, to\nremove the implant from the infected host, remotely.\n\nThis blog post details our process of sinkholing an IP address, the techniques\nused to gather telemetry from the infected workstations, and the inner\nworkings of the communications cryptography of PlugX, enabling remote\ndisinfection of workstations.\n\n## PlugX, an old cyber weapon in the Chinese arsenal\n\nThe first known version of PlugX was first seen during a Chinese campaign\ntargeting government related users and a specific organisation in Japan, which\nstarted in 2008 according to Trend Micro.\n\nIt was mainly deployed against victims located in Asia until 2012, and then\nexpanded progressively its pool of targets to occidental entities. Most of the\ntime, PlugX is loaded by using a DLL Side-Loading scheme where a legitimate\nexecutable loads a malicious \u2013 or patched DLL \u2013 which then will map and\nexecute in memory the core component of PlugX, which resides in an encrypted\nbinary blob on the file system [T1574.002].\n\nThe management interface of PlugX allows the operator to manage several\ninfected hosts with functionalities commonly seen in such backdoors as remote\ncommand execution, file upload/download, file system exploration, grab data in\nthe context of the execution etc.\n\nThis backdoor, initially developed by Zhao Jibin (aka. WHG), evolved\nthroughout the time in different variants. The PlugX builder was shared\nbetween several intrusion sets, most of them attributed to front companies\nlinked to the Chinese Ministry of State Security.\n\n## When things go wrong: adding a wormable component to PlugX.\n\nIn July 2020, according to several researchers, the operators behind the\nMustang Panda intrusion set had the (bad) idea to implement a wormable\ncomponent to PlugX, possibly to target multiple countries in one campaign or\nexpand its capabilities by reaching non-connected networks in order to steal\nfiles from the non-connected \u2013 but infected \u2013 workstations.\n\nThis wormable component infects connected USB flash drives by adding to them a\nWindows shortcut file taking the name of the infected flash drive, and a DLL\nside loading triad (legitimate executable, malicious DLL and binary blob)\ninside the drive RECYCLER.BIN hidden folder. The legitimate content of the USB\ndevices is moved to a new directory whose name is the non-breaking space\ncharacter (hexadecimal ascii code: 0xA0).\n\nAs for the Raspberry Robin USB worm, when a user opens the USB device, only a\nshortcut with the name of the USB device is presented to him, pushing him to\nclick on it. By clicking on the shortcut, the PlugX infection chain is\nexecuted. PlugX starts by closing the current window and reopening a new one\nin the directory (as previously mentioned named 0xA0) containing the\nlegitimate files.\n\nThen, it copies itself to the host inside %userprofile%/AvastSvcpCP/, and\nenables its persistence by creating a new key under\nHKCU[...]\\CurrentVersion\\Run registry Key. Finally, it re-executes itself from\nthe host before terminating. Once executed from the host, the worm component\nof this PlugX variant checks every 30 seconds for the connection of a new\nflash drive to automatically infect it.\n\nWhat could go wrong? The worm, which aims to target specific networks, becomes\nuncontrollable and replicates itself on many networks through flash drives,\npushing the operators to abandon their unique C2? Indeed, the inner workings\nand the management interface of PlugX was not designed for managing thousands\nof infected hosts.\n\nThe remaining question is whether the Command and Control (C2) server was\nsubjected to a Distributed Denial of Service (DDoS) attack due to an influx of\nvictims, or was the campaign successful to such an extent that the threat\nactors found it feasible to abandon their C2. We don\u2019t know.\n\nOne thing is sure, a very short timeframe \u2013 a mere month \u2013 was observed\nbetween the compilation date for the Dynamic Link Library (DLL) wsc.dll, and\nthe unique noted appearance by a trusted source of the IP address\n45.142.166[.]112 acting as a C2 associated to PlugX.\n\n## Sinkholing the PlugX worm\n\nSinkholing some parts of malicious infrastructures by registering expired\ndomain names or non-registered domains (in the case of domain generation\nalgorithms or backup infrastructures) is quite common in the Threat\nIntelligence landscape. For example, we have done it quite recently one of the\ninfection vectors of the Raspberry Robin botnet. However, taking ownership of\na specific IP address is less common and can sometimes be more challenging.\n\nAfter having checked that this IP was not used anymore via nmap, we simply\nkindly asked the hosting company to take ownership of the command and control\nserver used in this campaign 45.142.166[.]112. Thanks to its responsive and\ncomprehensive customer support, we got a shell on a box with this specific IP\naddress for $7 in a few minutes, allowing us to start our initial\ninvestigation.\n\nIt is worth to know that other variants of this worm exists, and three other\nC2s are known by the industry. One of them in particular (103.56.53[.]46)\nshows that it has an InetSim listening on it leading us to think that it was\nsinkholed silently by other security researchers or... threat actors ?\n\n### When your SSH lags, it\u2019s a good sign of something bad happening.\n\nUpon establishing a connection to the server, we noted a significant delay,\nwhich suggested that multiple attempts were being made to access it. By\nsetting up an ephemeral web server for a few seconds, we were bombarded by\nthousands of HTTP requests from infected workstations at ~2MB seconds,\nconcluding that even if its C2 was being inactive since 2020, the worm\ncontinued to propagate on a global scale.\n\nThe PlugX worm use three different TCP ports (110, 443, 80) to communicate\nwith in raw TCP or HTTP protocol. Its HTTP requests are quite common for PlugX\nimplants, with their four discriminant headers (*-se, *-st, *-si, *-sn), as\nshown below. The attentive reader will note the typo in the hardcoded User-\nAgent value.\n\nPOST /[a-f0-9]{8} HTTP/1.1 Accept: */* jsp-se: 0 jsp-st: 0 jsp-si: 61456 jsp-\nsn: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0;Win64;x64)AppleWebKit/537.36\nHost: 45.142.166.112:443 Content-Length: 0 Connection: Keep-Alive Cache-\nControl: no-cache\n\nTo handle this amount of connection attempts and to map the source of the\ninfected hosts, we created a simple infrastructure. Its architecture consisted\nof an Nginx server, forwarding the connection attempts to a tiny script, which\nchecks that the received HTTP connections were issued by a PlugX instance by\nlooking at the URI and the headers.\n\nIf the request matches a PlugX one, the client IP address is forwarded to a\nsecond \u2013 and more robust \u2013 server, attempting to geolocate the infected\nworkstation, adding it to a database with several metrics such as the\nassociated autonomous system, the first seen and last seen time frame, the\nnumber of hits and the associated country.\n\nOne point to bear in mind when establishing a sinkhole is the inability to\nreduce the bandwidth used by the beaconing of the compromised workstations. In\nthis specific situation, the consumption fluctuated between 2MB and 0.8MB per\nsecond, depending on the time of day. Therefore, we had to optimise our\nsinkhole at different levels and not respond to all beconing requests to keep\nour small server.\n\nFacing to that, we tested two approaches. Our first approach was to forward\nthe request to the backend only if the outcome of random.randint(0,30) was 15.\nGiven that PlugX continually sends beconing, we considered this an effective\nstrategy. However, we missed 25% of the compromised workstations because PlugX\noften beacons for a short period of time before being quarantined by a\nsecurity solution.\n\nMore recently, a transport-level approach was employed. This incorporated the\nuse of iptables\u2019 hashlimit module which facilitated treatment of only one\nrequest per minute originating from a unique IP source and port, subsequently\ndiscarding the rest of the packets \u2013 and our answers \u2013 by DROPing them.\n\n### What\u2019s the final goal of this worm? Is the answer in the infected\ncountries?\n\nThe created database enabled us to track the daily progress of worm infections\nand map them into an interactive world map as shown below, which can be\naccessed through a web portal. As of this writing, the worm has been observed\nin over 170 countries globally.\n\nBefore diving into the sinkhole data, it\u2019s important to acknowledge a few key\npoints. Primarily, it\u2019s a drawback that the PlugX C2 communications lack\nunique victim identifiers, unlike many other implants. Consequently, the\nanalysis of the data we\u2019ve gathered relies solely on victim IP addresses, and\nwe must remember that this approach has several limitations, such as:\n\n  * Many compromised workstations can exit from the same IP address: this can be the case for networks with multiple infected workstations. Moreover, some wireless and mobile phone telecommunication subscribers can share the same public IP address.\n  * Dynamic IP addressing is still present: many internet subscribers still have dynamic IP addressing. Therefore, one infected workstation can be related to multiple public IP addresses through time.\n  * The source country can be non relevant: we saw many connections from VPN servers, but also from autonomous systems related to satellite telecommunication. Therefore, some countries with internet satellite teleports and big hosting providers (eg. the US) can have some bias in their data.\n\nTherefore, simply presenting a specific number of infections is totally\nirrelevant in the case of this botnet as it will growth every day. However, it\ncan still be interesting to do a ranking of countries by IPs seen reaching our\nC2 server \u2013 as it can represent the countries where the worm is the most\nactive. Therefore, the following chart shows a snapshot of the most infected\ncountries on 3rd of April, 2024. It reflects a total of 100,952 unique IP\naddresses.\n\nBased on that data, it\u2019s notable that around 15 countries account for over 80%\nof the total infections. It\u2019s also intriguing to note that the leading\ninfected countries don\u2019t share many similarities, a pattern observed with\nprevious USB worms such as RETADUP which has the highest infection rates in\nSpanish spelling countries. This suggests the possibility that this worm might\nhave originated from multiple patient zeros in different countries.\n\nThe geographical distribution of the most infected countries, as presented on\nthe previous map, may indicate a possible motivation behind this worm.\nHowever, this must be taken with a grain of salt, because after four years of\nactivities, it had time to spread everywhere.\n\nMany nations, excluding India, are participants in China\u2019s Belt and Road\nInitiative and have, for most of them, coastlines where Chinese infrastructure\ninvestments are significant. Analysing the geographical distribution of the\ninfections from a security perspective reveals that numerous affected\ncountries are located in regions of strategic importance for the security of\nthe Belt and Road Initiative \u2013 like the straits of Malacca, Hormuz, Beb-el-\nMandeb or Plak.\n\nConsequently, it is plausible, though not definitively certain as China\ninvests everywhere, that this worm was developed to collect intelligence in\nvarious countries about the strategic and security concerns associated with\nthe Belt and Road Initiative, mostly on its maritime and economic aspects.\n\nThe likelihood that the targeting is connected to countries participating in\nthe Belt and Road Initiative, or poses a security threat to it, is notably\nintriguing that the PlugX worm is linked to Mustang Panda, especially as this\nintrusion set is well-known for targeting many countries in the BRI.\n\n## From sinkholing to disinfection\n\n### Achieving a zombie worm: the questions.\n\nDespite the command and control (C2) server being inactive for a few years,\nthe worm has spread globally since its creation. Consequently, any individual\nwho either controls the IP address or gains access at any point in the network\npathway between an infected workstation and the C2 server (even when it\u2019s\ndown) might attempt to manipulate the worm behaviour, to execute a payload,\nfor example.\n\nFor instance, they could endeavour to execute their own payload on the\ninfected workstation. This situation prompted us to consider possible\ndisinfection methods by using our access to this server. In order to explore\nthese disinfection possibilities effectively, we must delve into three key\nquestions:\n\n  * The first question is, does PlugX have a self-deletion mechanism in order to prevent us from executing an arbitrary disinfection payload on the infected workstations? This consideration is crucial for averting unintended consequences during the disinfection process.\n  * The second question focuses on the security of PlugX\u2019s communication protocols. We aim to understand its implementation and determine whether it\u2019s feasible and straightforward to deliver a disinfection payload to it.\n  * And the last question was related to the PlugX variant itself. We need to ascertain if PlugX initiates a connection with its command and control (C2) server before infecting the workstation when launched from a USB flash drive. If yes, we need to know if the disinfection takes place for the files on the USB device and the workstation.\n\nThis understanding is vital to prevent side effects and estimate the impact of\na disinfection campaign. For example, if PlugX is removed from the USB\ndevices, it will have a much bigger impact than if PlugX is only deleted from\nthe workstation itself.\n\n### Reverse is the answer\n\nMany articles document PlugX\u2019s features, whether they pertain to communication\nprotocols or functionalities. However, not every variant implements all known\ncommands. In this case, the number of commands is relatively low.\nConsequently, the first question is easy to answer: this variant does indeed\nhave a self-deletion command (identified as 0x1005).\n\nThis command is quite straightforward as it requires no arguments. When PlugX\nreceives the self-deletion command 0x1005 in an encrypted payload, it performs\nthe following actions:\n\n  * Retrieves the current directory path and attempts to delete files and subdirectories.\n  * Retrieves the service name and deletes the corresponding registry key.\n  * Creates a batch file, %TEMP%/del_AsvastSvcpCP.bat, to delete the remaining files.\n  * Runs this script before terminating.\n\nIt is important to note that the deletion takes place from the current\nexecution directory. However, this PlugX variant only contacts the C2 when\nexecuted from the host. This addresses the second question: it is possible to\nremove PlugX from the hosts but not from the infected USB devices.\n\nThe last question is more complex to address. As previously mentioned PlugX\ncan communicate via different protocols: TCP and HTTP. TCP communication is\nthe simplest to understand. Each message is divided into two parts:\n\n  * An encrypted 16-byte header\n  * A payload, compressed and then encrypted. This payload contains the arguments of the command (none in the case of the deletion command).\n\nThe header contains:\n\n  * The command identifier;\n  * The size of the encrypted payload;\n  * the size of the decrypted and decompressed payload.\n\nThe RC4 algorithm is used to encrypt both the header and payload with the same\nkey. This key is the concatenation of a hard-coded string in the code\n(sV!e@T#L$PH%) and the first four bytes of the header sent by the C2. It is\nthen straightforward to send a deletion command, especially since there is\nnothing preventing the reuse of the same four bytes (to have the same key for\nall of the victims).\n\nFrom a practical standpoint, we prefer using the HTTP protocol over raw TCP.\nHTTP communications are based on the same principles as TCP communications\neven though they require to understand how the state machine of the server is\nimplemented via the HTTP headers.\n\nHowever, it is quite straightforward to send the deletion command as it can be\nsent as a response to the first POST request (corresponding to the session\nopening) and takes just a few bytes. As we can use the same key suffix for all\nof the victims, we can send the same encrypted deletion payload to all of the\nvictims in order to remove the implant from them.\n\n#### Removing or not removing PlugX form the flash drives...\n\n... that\u2019s the question. Indeed, PlugX hides the files stored on the flash\ndrive, and it is only during the execution of PlugX that these files are\nrevealed to the user. If a security solution removes one of the files\nassociated with PlugX on the flash drive, the end user will consequently lose\neasy access to their own files.\n\nThe only disadvantage of this is that the flash drive remains infected. That\u2019s\nwhy we thought of implementing our own payload to send to the workstation\nusing PlugX functionalities. Here, this payload needs to delete PlugX (as the\nauto delete command) but also checks if an infected flash drive is plugged in.\nIn this case, it deletes PlugX from it and restores the original flash drive\ndirectory structure.\n\nThis is possible because PlugX allows the upload and execution of a payload\nusing the following commands:\n\n  * 0x1002: used to create a thread listening to a sequence of more complex command.\n  * 0x300e: used to expand a environment variable. It is used to expand the %TEMP% variable.\n  * 0x3007, 0x10003008, 0x10003009: upload our payload on the %TEMP% directory (CreateFile, WriteFile, CloseFile).\n  * 0x300c: Create a process from our uploaded payload.\n\nThis strategy requires more commands to send than the previous one but it\nworks. Anyway, there are some limitations. We don\u2019t want to add a persistence\nmechanism to our payload so the infected flash drive needs to be plugged in\nwhen our payload is executed. Furthermore, this process is very intrusive as\nit modify the directory tree of the USB key. This is why it\u2019s implementation\nrequires a lot of caution and a code review by peers is necessary before any\ndeployment.\n\n### Legal implications of wild disinfection.\n\nGiven the potential legal challenges that could arise from conducting a\nwidespread disinfection campaign, which involves sending an arbitrary command\nto workstations we do not own, we have resolved to defer the decision on\nwhether to disinfect workstations in their respective countries to the\ndiscretion of national Computer Emergency Response Teams (CERTs), Law\nEnforcement Agencies (LEAs), and cybersecurity authorities.\n\nThe principle behind this concept of sovereign disinfection is pretty simple\nand straightforward. National CERTs and/or relevant LEAs ask to receive data\nfrom our sinkhole related to their specific countries. This allows them to\nassess whether it\u2019s necessary to initiate a disinfection process. Since some\nworkstations located in one country can connect to the internet through\nanother country (such as via VPNs or satellite internet providers), these\nauthorities provide in return a list of autonomous systems that are OK to be\ndisinfected.\n\nOnce in possession of the disinfection list, we can provide them an access to\nstart the disinfection for a period of three months. During this time, any\nPlugX request from an Autonomous System marked for disinfection will be\nresponded to with a removal command or a removal payload.\n\n### Limits of wild disinfection as a conclusion\n\nAs stated before, there are limitations to the two discussed methods of remote\ndisinfection. Firstly, the worm has the capability to exist on air-gapped\nnetworks, which makes these infections beyond our reach. Secondly, and perhaps\nmore noteworthy, the PlugX worm can reside on infected USB devices for an\nextended period without being connected to a workstation.\n\nAn additional important aspect to consider is the legal limitations. Worms\nhave to be treated at a global scale but can\u2019t if we want to follow the law.\nBecause simply desinfecting a country implies that it could be prone to\nreinfection. Evidently, it is a matter of time before these infections\nreoccur.\n\nTherefore, it is impossible to complete remove this worm, by issuing a unique\ncommand to all the infected workstations. Consequently, we also strongly\nrecommend that security editors create effective detection rules against this\nthreat on the workstation side to prevent the reuse of this botnet in the\nfuture.\n\n#### USB devices remain a major infection vector\n\nMoving beyond the stereotypical scenario of a red-team using a dropped USB\ndevice in a parking lot to compromise a network, USB devices are still\nactively employed to infect both isolated and connected networks by both\ncybercrime and state-sponsored threat actors.\n\nTherefore, we encourage you to deploy strong policies against that such as\npreventing any file execution from a removable device or completely disable\nremovable storage in your organisation by applying the right Windows Group\npolicies.\n\n## Indicators of compromise\n\n### Files Hashes\n\n    \n    \n    432a07eb49473fa8c71d50ccaf2bc980b692d458ec4aaedd52d739cb377f3428 e8f55d0f327fd1d5f26428b890ef7fe878e135d494acda24ef01c695a2e9136d 3a53bd36b24bc40bdce289d26f1b6965c0a5e71f26b05d19c7aa73d9e3cfa6ff 2304891f176a92c62f43d9fd30cae943f1521394dce792c6de0e097d10103d45 8b8adc6c14ed3bbeacd9f39c4d1380835eaf090090f6f826341a018d6b2ad450 6bb959c33fdfc0086ac48586a73273a0a1331f1c4f0053ef021eebe7f377a292 b9f3cf9d63d2e3ce1821f2e3eb5acd6e374ea801f9c212eebfa734bd649bec7a\n\n### Infrastructure\n\n    \n    \n    45.251.240[.]55 45.142.166[.]112 (Sinkholed by Sekoia) 103.56.53[.]46 43.254.217[.]165\n\n### Yara rules\n\n    \n    \n    rule apt_MustangPanda_PlugXWorm_lnk { meta: id = \"bea0b6e6-0999-431d-8ea2-324aa7497657\" version = \"1.0\" malware = \"PlugXWorm\" intrusion_set = \"MustangPanda\" description = \"Detects PlugXWorm Malicious LNK\" source = \"Sekoia.io\" classification = \"TLP:WHITE\" strings: $ = \"RECYCLER.BIN\\\\1\\\\CEFHelper.exe\" wide condition: uint32be(0) == 0x4c000000 and filesize < 2KB and all of them } import \"pe\" rule apt_MustangPanda_MaliciousDLL_random_exports { meta: id = \"d14ae417-bc6f-40b1-a027-084522fce516\" version = \"1.0\" intrusion_set = \"MustangPanda\" description = \"Detects malicious DLL used by MustangPanda\" source = \"Sekoia.io\" classification = \"TLP:WHITE\" strings: $trait = { 66 89 55 FC } condition: pe.is_dll() and filesize < 100KB and for any e in pe.export_details: ( $trait in (e.offset..e.offset+50) and e.name matches /^[a-z]{10,}$/ ) and not pe.is_signed }\n\nFeel free to read other Sekoia TDR (Threat Detection & Research) analysis here\n:\n\n  * Following NoName057(16) DDoSia Project\u2019s Targets\n  * Adversary infrastructures tracked in 2023\n  * Raccoon Stealer v2 - Part 2: In-depth analysis\n  * Stealc: a copycat of Vidar and Raccoon infostealers gaining in popularity - Part 1\n\nShare\n\nShare this post:\n\n### What's next\n\n## Securing cloud perimeters\n\nThe global shift towards cloud computing is undeniable. According to Statista,\nthe worldwide public cloud computing market continues to...\n\nMykhailo Shveika and SEKOIA.IO\n\n## AWS Detection Engineering\n\nA broad introduction to AWS logs sources and relevant events for detection\nengineering\n\nGuillaume C., Erwan Chevalier and TDR (Threat Detection & Research)\n\n## From EDR to XDR: Detailed Walkthrough\n\nIn 2024, the lines between EDR and XDR are becoming blurred. More and more\nvendors offer platforms that combine...\n\nMykhailo Shveika and SEKOIA.IO\n\n#### Comments are closed.\n\n### Trending topics\n\n## Detection\n\n## Infrastructure\n\n## Malware\n\n  * APT\n  * Cyber Threat Intelligence\n  * Cybercrime\n  * Detection\n  * Infostealer\n  * Malware\n  * Ransomware\n  * XDR\n  * Discover Sekoia SOC platform\n  * Stay tuned\n\n", "frontpage": false}
