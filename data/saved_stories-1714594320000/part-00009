{"aid": "40222303", "title": "Running Windows 95 on a disposable vape", "url": "https://ripitapart.com/2024/04/20/dispo-adventures-episode-1-reverse-engineering-and-running-windows-95-on-a-disposable-vape-with-a-colour-lcd-screen/", "domain": "ripitapart.com", "votes": 3, "user": "turrini", "posted_at": "2024-05-01 12:38:31", "comments": 2, "source_title": "Dispo Adventures, Episode 1: Reverse-engineering and \u201crunning Windows 95\u201d on a disposable vape with a colour LCD screen", "source_text": "Dispo Adventures, Episode 1: Reverse-engineering and \u201crunning Windows 95\u201d on a disposable vape with a colour LCD screen | Rip It Apart \u2013 Jason's electronics blog-thingy\n\nSkip to primary content\n\n# Rip It Apart \u2013 Jason's electronics blog-thingy\n\n## A site dedicated to my hacks, mods, makes and occasional ramblings.\n\n# Dispo Adventures, Episode 1: Reverse-engineering and \u201crunning Windows 95\u201d on\na disposable vape with a colour LCD screen\n\nPosted on April 20, 2024 by ginbot86\n\nAs seen on Hackaday!\n\nTL;DR: Disposable vapes can have LCD screens...?! At least they\u2019re moddable\nnow \u2013 check out my GitHub for docs, tools, and links to similar projects if\nyou want to try this on a Kraze HD7K or Raz TN9000 (maybe some others too).\n\nDisposable vaping devices have become distressingly common in recent years,\nand an increasing ecological burden given how many (perfectly reusable!)\nlithium-ion batteries are discarded into landfills and roadsides alike. Even\nworse, some of them include flashy colour LCD screens! I\u2019ve been collecting\nand harvesting disposable vapes from my friends for a few years now, but only\nrecently have I had a chance to take some of these LCD-equipped models apart;\nwhile doing so, I figured I could pioneer some reverse-engineering efforts\nwhile adding custom theme/skin support along the way. (For the record, I don\u2019t\nvape or smoke but plenty of my friends do. I\u2019m just in it for the batteries\nand electronics.)\n\nA modified Kraze HD7K disposable vape, with my custom Windows 95 theme\napplied.\n\nThe vape in question is found in my area of Canada as the Kraze HD7K, but it\nseems to go by other names like the Raz TN9000. Internally, they are the same\nminus some firmware and logo differences.\n\n# Disclaimer & Safety Information\n\nHarvesting disposable vapes is not without its own risks, and I will not\naccept any responsibility if something goes wrong if you try it yourself. This\nshould only be attempted if you are familiar with handling lithium-ion\nbatteries and the safety implications that they pose.\n\nAdvertisement\n\nPrivacy Settings\n\nNicotine can enter your bloodstream simply by getting vape juice on your skin\n(so wear gloves!), and can be messy if it gets on your clothes and workspace.\nThe enclosed lithium-ion battery can also cause burns or property damage if\nshort-circuited, and are usually not equipped with protection circuits; the\nfact that these cells can push several amps in such a small package is the\nprecise reason they\u2019re (wastefully) used in this application. Rechargeable\ndisposable vapes pose a slightly higher risk if the cell is near or at full\ncharge when disassembled, whereas pure disposables are almost always fully\ndischarged. Discharged cells inherently hold less energy and this reduces the\nfire risk should a catastrophic failure occur during disassembly, but they\nstill need to be treated with respect. Overdischarged cells below 2 volts may\nnot necessarily recover, but if you decide to attempt a recovery, you must\nbring them back up to 3 volts at a very low current (on the order of tens of\nmilliamps), after which it is possible to charge them normally.\n\nVapes harvested from the roadside should only be picked up when it is safe to\ndo so, and should be inspected for damage as soon as possible. These \u201cstreet\nlithium\u201d vapes could be water-damaged and also physically damaged from getting\nrun over by vehicles. Any cells with a punctured or torn pouch/casing are\nunsalvageable and must be recycled. My own experimental data finds that the\nmajority of run-over cells survive, but I would not recommend using them\nwithout being absolutely sure that there is no further internal damage (after\ncharging the cell with supervision, it should have at least 90% of its rated\ncapacity and no appreciable self-discharge after a few weeks of rest.\nOtherwise, put it in the recycle bin where it belongs). Even then, only use\nthem in applications where their failure will not cause collateral damage,\nlike in an outdoor solar-powered lamp that is kept away from anything\nflammable. If you\u2019re not comfortable with these conditions, just recycle the\nvape at an appropriate facility in accordance with local regulations (some\nvape shops will have recycling bins, and hardware stores often will accept\nrechargeable batteries for recycling too).\n\n# Teardown\n\nWithout any screw holes, I needed to find another way to (non-destructively)\nopen the vape. I noticed a seam in the bottom end cap, and found that sliding\na slotted screwdriver into that seam and some gentle prying action was able to\ndislodge the internal clips. Once that cap was free, a sliding airflow\n\u201cswitch\u201d fell out as well. Removing the core of the vape was pretty\nstraightforward, but it did require some pliers to pull it out due to its\nfriction-fit construction.\n\n    Removed end cap. The airflow restriction switch falls out easily.\n\n    The core of the Kraze vape slides out with pliers.\n\nWith the core exposed, I could see that the vape uses a 13450-size lithium-ion\npouch cell (13mm diameter, 45mm length) and a generously-sized vape juice\nreservoir, with a sponge to absorb the juice and prevent it from leaking. I\nalso noticed a small 9-pin right angle header that connected a black \u201clogic\nboard\u201d that held a microcontroller and LCD screen, and a green \u201cpower board\u201d\nthat had the inhalation sensor, heating coil connector, USB-C connector and\nsolder pads for the battery.\n\n    Exposed core with 13450-size battery and large juice reservoir.\n\n    The Kraze\u2019s internals while power is applied through USB-C.\n\n# Reverse-Engineering\n\nThe three main components of the vape\u2019s logic board are the microcontroller,\nan SPI NOR Flash chip, and the LCD screen.\n\n    Nations Tech N32G031K8Q7-1 microcontroller and Giantech GT25Q80A-UZLI SPI Flash.\n\n    LCD ribbon cable, part number FXD096QQ08B-F.\n\nThe microcontroller is a Nations Tech N32G031K8Q7-1, containing a 48MHz Arm\nCortex-M0 CPU, 64k of internal Flash and 8k of SRAM; the SPI Flash is a 1MB\nGiantech GT25Q80A-UZLI; and the LCD is of an unknown maker but has a part\nnumber of FXD096QQ08B-F, with a resolution of 80\u00d7160 pixels.\n\nAdvertisement\n\nPrivacy Settings\n\nGiven that the LCD is what makes this vape particularly special, I decided to\nlook into what controller and pinout it uses. I had a hunch that it would use\na common interface and controller (to keep costs low), and searched for a\n0.96\u2032\u2032 LCD with 13-pin FPC (flexible printed circuit) connector. This led me\nto the Smart Prototyping #102106, which used a 13-pin connector and seemed to\nhave a compatible pinout. The aforementioned LCD uses a common ST7735S\ncontroller, and is controlled through a 4-wire SPI interface (clock, data,\ncommand/data select, chip select). (Additionally, I looked on Alibaba for a\nsimilar LCD, and found one source that sells them for about $1.25 each in\nlarge quantities; this suggests that the displays themselves add significant\ncost to the vape, but are still cheap enough to be utilized in a throwaway\ndevice.)\n\nI searched other websites for LCDs with the same dimensions and connector, and\nthey all used this pinout:\n\nPin| Name| Function  \n---|---|---  \n1| TP0/NC| Unused (may be used for some touch sensor?)  \n2| TP1/NC| Unused (may be used for some touch sensor?)  \n3| SDIN| SPI data to LCD  \n4| SCLK| SPI clock  \n5| RS| Logic low = command, high = data  \n6| /RST| Reset (active-low)  \n7| /CS| Chip select (active-low)  \n8| GND| Power supply/signal ground  \n9| NC| Not connected  \n10| VDD| Power supply (3.3V)  \n11| LEDK| LED backlight cathode  \n12| LEDA| LED backlight anode  \n13| GND| Power supply/signal ground  \n  \nTo ensure that the pinout I was looking at really matched up with what was in\nthe vape, I connected the data, clock and other control lines to my DSLogic\nPlus logic analyzer and sniffed the traffic as the vape initializes the\ndisplay. A glance at the logic analyzer data confirmed the pinout.\n\n    Wires connected to LCD for traffic sniffing.\n\n    Screenshot of DSView reading the LCD SPI data.\n\nTo further confirm that I had an ST7735S-based display, I resoldered the LCD\nonto a TSSOP-to-DIP breakout board (which was annoying, as the pin pitch was\nslightly different and alignment needed much precision), and used the Adafruit\nGraphics Library and ST7735S driver on a Teensy 3.0 microcontroller, and it\nworked! Well, mostly. While black-and-white text worked perfectly, the red and\nblue channels seem to be swapped around when using the\ntft.initR(INITR_MINI160x80) routine, and it seems that I wasn\u2019t the only one\nwith this issue.\n\n    The classic \u201clorem ipsum\u201d sample text on the LCD from the Kraze HD7K vape.\n\n    Notice how the red and blue text seem to be swapped.\n\nI decided I was finished with the idea of reusing the display alone, and began\nlooking into how the vape itself works, and how it displays images. The first\nstep was to look into the memory contents of the 1MB SPI Flash, as that is a\npretty large amount of memory for such a simple device. I desoldered the chip\nand mounted it on a SSOP-to-DIP adapter, and dumped its contents to a file\nusing my MiniPro TL866CS universal programmer.\n\n    Data streamed from the SPI Flash to the LCD.\n\n    LCD data stored in the SPI Flash.\n\n    A closeup of the top-left of the main screen. Notice the blue pixels coinciding with the raw data.\n\nMy suspicions were confirmed when I analyzed the image data being sent to the\nLCD matching what was in the beginning of the SPI Flash. The data also looked\nlike it was in a raw \u201cRGB565\u201d format, which is a method of packing a 16-bit\npixel into two bytes of data; the term \u201c565\u201d refers to 5, 6, and 5 bit values\nbelonging to the red, blue and green channels respectively. Since the image on\nthe screen used blue in the top-left of the image, this supported my findings\nsince the data similarly had only set bits belonging to the blue channel, and\nalso further describes the data as being \u201cbig-endian\u201d assuming that the red\nbits are read out before the green and blue.\n\nAdvertisement\n\nPrivacy Settings\n\nThe data seemed to be transferred in 4096-byte blocks, which I speculated to\nbe performed using DMA (direct memory access); the data transfers seemed too\nfast and regular to be done in software alone. This later proved to be true\nwhen I had a chance to analyze the RAM of a working vape.\n\n# (Flash) Map-Making\n\nWith the 1MB SPI Flash chip dumped, it was time to take that apart too... but\ndigitally! Armed with a spreadsheet, a hex editor, ImageMagick and an online\nRGB565 renderer by Rinky-Dink Electronics, it was time to begin the (grueling)\nprocess of unpacking the entire SPI Flash\u2019s contents.\n\nMy first step was to try extracting the first image frame, which I calculated\nto be 25,600 bytes in size (80 x 160 x 2 bytes per pixel). The next step was\nto use ImageMagick to convert the raw RGB565 data into a PNG for viewing on a\ncomputer:\n\n    \n    \n    magick convert -size 80x160 rgb565:<file>.bin <file>.png\n\nThe result looked like an image, but the colours were all incorrect! I then\ntried the Rinky-Dink online RGB565 renderer, which didn\u2019t have this issue.\nMost of my attempts were performed with ImageMagick since it was easy for me\nto carve and test different image sizes. (Later on, I decided to pipe in an\nRGB test image and it seems that ImageMagick interprets what should be RGB\ndata as BRG...)\n\n    Image from the Rinky-Dink RGB565 renderer.\n\n    ImageMagick\u2019s conversion output. Colours are incorrect.\n\n    Reference image with RGB/YCM/BW colour bars.\n\n    ImageMagick\u2019s rendering of RGB data as BRG.\n\nAttempting to convert the rest of the images felt like I was staring into The\nMatrix, trying to make sense of scrambled image data that looked like an\nautostereogram (the ones where you need to cross your eyes to form an image).\nSince the data on the Flash was raw and undocumented, I had no idea where each\nimage began and ended, and what their resolutions were. It took a lot, and I\nmean a LOT, of trial and error to figure out the mappings.\n\nThere\u2019s the background, but what\u2019s after it?\n\nOkay, it\u2019s 72 pixels wide. Wrong offset though...\n\nAlignment\u2019s fixed!\n\nAh, it\u2019s a whole sequence of images!\n\nOne by one, I catalogued each image and added it to my spreadsheet,\ndocumenting its address, length, resolution, what category it belonged to, and\nif it was in a sequence of images (an animation, essentially).\n\nAdvertisement\n\nPrivacy Settings\n\nLooking inside a random snippet of the Flash... seems like it\u2019s a sequence of\nimages but it\u2019s not 32 pixels wide.\n\nIs it 33\u00d733? No...\n\n34? Still no...\n\n30? No, but it\u2019s tilted the other way so we must be close.\n\nAh-ha! It\u2019s 31 pixels wide.\n\nThat\u2019s more like it! Looks like I just need to include a bit more at the\nbottom, since each image was 64 pixels tall.\n\nAnd done!\n\nThis continued up until I was over 95% through the entire 1MB address space,\nand I even found unused animations (or at least unused for the version\ncustomized for my area). There was a bit of blank space, which I ignored for a\nwhile... but as it turned out, there was some other hidden data stored further\ndown (it was the counter that the vape used to determine how many \u201cbars\u201d of\njuice to display). I won\u2019t show the whole table since it\u2019s over 100 rows long,\nbut here\u2019s an excerpt (you can find the whole table on my GitHub if you\u2019re\ninterested):\n\n### Index (#)\n\n|\n\n### Offset (Hex)\n\n|\n\n### Length (Hex)\n\n|\n\n### Frame H (px)\n\n|\n\n### Frame V (px)\n\n|\n\n### Category\n\n|\n\n### Seq (#)  \n  \n---|---|---|---|---|---|---  \n0| 0| 6400| 80| 160| Background| 0  \n1| 6400| 2880| 72| 72| Battery Icon| 0  \n2| 8C80| 2880| 72| 72| Battery Icon| 1  \n...| ...| ...| ...| ...| ...| ...  \n19| 33D00| 6400| 80| 160| Vaping Animation| 0  \n20| 3A100| 6400| 80| 160| Vaping Animation| 1  \n...| ...| ...| ...| ...| ...| ...  \n72| D53E2| 6400| 80| 160| Plugin Background 3| 0  \n73| DB7E2| E9A| 21| 89| Charger Logo Wipe| 0  \n74| DC67C| E9A| 21| 89| Charger Logo Wipe| 1  \n...| ...| ...| ...| ...| ...| ...  \n104| F8000| 4| N/A| N/A| Total Vape Time x0.01s (LSB->MSB)| N/A  \n105| F8004| 1| N/A| N/A| Vape In Use Flag (0xBB)| N/A  \n  \n## Toolcrafting\n\nWith the whole SPI Flash mapped out, I was able to, with much help from\nChatGPT, make a couple custom tools: a Flash image splitter and repacker. I\nalso used the Rinky-Dink UTFT library\u2018s conversion tools to enable replacement\nof the image data (i.e. custom theme support). Imagine that \u2013 custom\ntheme/skin support on a vape, now a reality! With no help from the\nmanufacturer!\n\n    Flash dump splitter in action.\n\n    Repacker tool in action.\n\n## Rationale\n\nYou might be asking: why anyone would do this? Honestly... I\u2019m not sure; I\njust was fascinated by a colourful disposable vape and just had to thoroughly\ntake it apart and learn everything I could about how it worked. Maybe this\ncould give a reason for people to attempt to refill (and therefore reuse)\ntheir disposable vapes, and a reused vape is a vape that doesn\u2019t end up in the\nlandfill or roadside \u2013 and frankly, that\u2019s good enough reason for me.\n\nAdvertisement\n\nPrivacy Settings\n\nWith the tooling set up, it was time for me to prove that these vapes can be\nrethemed, and I thought of a great retro aesthetic that is completely\ndifferent from the original theme, yet easy for me to make with simple image\nediting tools: Windows 95.\n\n# It runs Windows 95?!\n\nOkay, not really... but I wanted a cohesive but entirely different theme to\napply to the user interface, and I\u2019m not nearly artistic enough to go about\nmaking a Doom theme (I tried, but couldn\u2019t think of much that would work\nwithin the limitations of the original firmware). Using little more than a\ncopy of Windows NT 4.0 (essentially the enterprise/professional version of\nWindows 95), some virtual machines, screenshot and recorder tools, and\nMicrosoft Paint, I was able to create a UI that faithfully recreates the\nnostalgic Windows 95 user interface in a tiny 80\u00d7160 space.\n\nTip: if you need to frequently reprogram a device that uses an external\n(serial) memory chip, consider adding or making a socket for it. Additionally,\nvapes that use a 2-pin microphone element for inhalation sensing can be\nactivated by shorting the pins to ground with a pushbutton, or even\ncapacitively with your finger. If the vape requires a load to be present, a\nsmall halogen bulb will do the trick.\n\n## Main Screen\n\nThe main screen features the classic teal background, with two \u201cwindows\u201d to\nrepresent the battery charge and vape juice levels. In keeping with Windows UI\nmechanics, the juice level is rendered as if it were an inactive window.\n\n    4x magnified simulation of the Windows 95 theme I created.\n\n    A disassembled Kraze vape with socketed SPI Flash for easy testing.\n\n    Kraze HD7K turned into a development board with socketed Flash, test load and reset button.\n\n### Battery Level\n\nThe battery icon, while looking trivial to implement, required a lot of manual\nwork to create the icons. From Windows 95 through XP, the default Windows UI\u2019s\nbattery icons were very limited in granularity: full, half, near empty, and\nempty. I had to employ \u201ctweening\u201d techniques by copying rows of pixels and\naligning them to the desired levels, then manually painting in pixels where\nrequired. I also used a slightly more-detailed icon set from Windows XP which\nadded a bit more of a highlight on the left side of the icon, rather than a\nflat blue colour. While it does somewhat detract from the \u201cpurity\u201d of the icon\nset, the improved appearance was worth the tradeoff.\n\n    4x magnified simulation of the Windows 95 themed battery icon.\n\n    Icon set pulled from Windows 95/NT 4.0\u2019s systray.exe.\n\n    Icon set pulled from Windows XP\u2019s batmeter.dll.\n\n### Vape Juice Level\n\nThe juice level representation was a lot more challenging to conceive. I\nthought of using the Recycle Bin icon, but figured that making icons between\nempty and full wouldn\u2019t produce a very unambiguous representation. I also\nthought about the magenta/blue pie chart used to represent disk usage, but\nthat option was ruled out for similar ambiguity issues (I know that magenta is\nfree space, and blue is used space, but this might not be intuitive enough\nwithout some sort of legend).\n\n    4x magnified simulation of the Windows 95 themed juice icon.\n\nI finally figured that I had just enough room to make the world\u2019s tiniest\nExplorer window, with just enough space for six 16\u00d716 small icons. I picked a\nselection of icons that one would see in the C:\\ root directory: folder, batch\nfile, system file, application, .ini settings file, and unknown file (the one\nwith a small Windows logo on it). As the vape juice is depleted, an icon is\nremoved from the window. Once the juice is deemed by the microcontroller to be\ncompletely depleted, the blinking folder icon almost becomes homage to a\nsimilar phenomenon on Mac computers if it cannot find an operating system to\nboot.\n\n## Charging Animation\n\nThis one was another challenge, mainly due to the limited animation size of\nthirty 21\u00d789 frames in an off-centre position atop a static background; not\nonly that, the firmware dwells on the last animation for about a second, so\nany animation loop will need to stop cleanly at the last frame. The lack of\nanimatable screen space meant that a file copy dialog was a non-starter, and\nthe Windows 95 boot screen was also infeasible. I eventually settled on a\nsmall \u201cCharging...\u201d dialog box, with the animated hourglass cursor in the\nmiddle. One concession that I had to make was doubling each cursor animation\nframe, as well as losing one corner and edge of the hourglass during the\ninitial animation sequence, as the hourglass is 22 pixels wide for the first\nfew frames. Thankfully, this happens quickly enough that it isn\u2019t particularly\nnoticeable. I had pondered overlaying this dialog box atop the main UI\u2019s\n\u201cwindows\u201d but found the result to be too crowded in appearance, so a single\ndialog on the teal background was chosen instead.\n\n    4x magnified simulation of the charging animation. In reality this will not loop but instead goes to the main screen.\n\n    The inverted colour area denotes what can be animated.\n\n## Vaping Animation\n\nThis one was arguably the most fun yet the most frustrating to actually\nimplement. I knew I wanted to use a screensaver for the vaping animation, but\nwhich one? I needed a screensaver that was both iconic, but also looped\ncleanly. Flying Windows was a contender, but proved to scale down poorly and,\ndue to its random nature, looped poorly as well. 3D Flower Box was skipped for\nthe same reason (and wouldn\u2019t have looked good looping once per second\nanyway). 3D Maze, 3D Text, and the simple graphic screensavers like Marquee,\nMystify and Beziers were out too... so what\u2019s left? Only one screensaver was\nleft in the pipeline... a 3D pipeline \u2013 heh, get it? (sorry. I\u2019ll see myself\nout for that joke.)\n\n    A slightly slowed down simulation of the Windows 95 theme vaping animation I created.\n\n    A screenshot of the 3D Pipes screensaver running in a VM, with a 1:2 aspect ratio.\n\n3D Pipes is one of the most famous Windows 95-era screensavers, and despite\nits randomly-generated nature, had relatively clean transitions which make\nlooping animations easier. It also scaled well both in terms of resolution and\nin time, but was an absolute pain to record. I eventually settled by running\nthe Windows 95 version in a Windows XP virtual machine, with a custom screen\nsize as close to a 1:2 aspect ratio as possible. After taking a screen\nrecording, I had to then choose the sequence that looked the best, extract 16\nframes from the video, scale those down to 80\u00d7160, and only then did I get my\nlooped screensaver animation, but the result was well worth the effort. The\nparticular run that I captured even had a flame-like shape to it!\n\n# Other Discoveries\n\nWith my main goal of extracting and replacing images on the vape accomplished,\nI decided to look further into its inner workings and learned a few things\nalong the way.\n\n## A Secret Port\n\nDuring my initial teardown, I noticed that the microcontroller\u2019s SWD (Serial\nWire Debug) programming lines were brought out to the USB-C port, but in an\nunusual way. The CC1/CC2 lines were not only used as regular 5.1k pulldowns to\nenable USB-C chargers to recognize the vape, but also as a programming\nconnector. I had to build a custom cable to interface with it, but was able to\nuse my Segger J-Link to communicate with the microcontroller in situ. As a\nbonus, the firmware is fully readable, without any encryption or readout\nprevention enabled!\n\n    Custom-built debugging cable to debug vapes with SWD on the CC1/CC2 lines.\n\n    Segger J-Link Commander is able to access the onboard microcontroller.\n\n## It\u2019s Not About The Puffs\n\nFor a device marketed with a capacity of several thousands \u201cpuffs\u201d, one would\nthink that this would be tracked as a means to provide a vape juice gauge to\nthe user. However, this turned out to not be the case, in more than one way.\n\nThe vape usage/time counter at exactly 10 seconds of usage. 0x3E8 = 1000, or\n10.00 seconds.\n\nUnlike many other disposable vape implementations, the juice meter\u2019s data was\nstored in a non-volatile memory location, since neither a reset nor power\ncycle would reset the meter back to full. I was initially unsure where the\nmicrocontroller was holding this variable, and scanning the internal Flash\nmemory and the extra few \u201coption bytes\u201d available above the usual firmware\nregion showed no changes. It wasn\u2019t until I decided to run a difference on the\nexternal SPI Flash between \u201cpuffs\u201d, where I noticed bytes changing near\nlocation 0xF8000, in a sea of empty/0xFF bytes. Erasing the bytes from\nlocations 0xF8000-0xF8004 resulted in the vape juice meter resetting back to\nfull! Since vape inhalation sensors typically include a 10 second timeout, I\ndecided to trigger a 10-second \u201cpuff\u201d and noticed the memory location had\nupdated to 0x3E8, which corresponds to 1000 in decimal. It was then easy to\ndetermine that the microcontroller was counting vape time with 0.01-second\ngranularity.\n\n## A Beeline to the Buffer\n\nSince I had access to the microcontroller\u2019s memories in near-real time, I\ndecided to experimentally determine where the data from the SPI Flash was\ngetting copied into RAM. Since I already knew the microcontroller was using\nDMA to stream image data from the SPI Flash, I figured that I could fill its\nentire contents with human-readable text (in my case, I chose consecutive\ncopies of the \u201cBee Movie\u201d script) and observe the RAM\u2019s contents changing in\nSegger J-Mem. This technique worked immediately, and it was obvious where the\nDMA buffer was held in RAM!\n\n    Copies of the Bee Movie script in SPI flash showing up in a RAM buffer.\n\n## Blinking Power, Hidden Version (Screen)\n\nOut of boredom and wanting to repeatedly test the charging animation during\ndevelopment, I was rapidly connecting and disconnecting power to the charging\nport. After several consecutive fast insertions and removals, I saw a black\nscreen with red text pop up. It read \u201cGV-K23 0904V1\u201d and trying to capture it\nwas difficult until I had the idea to use J-Link Commander to halt the CPU as\nsoon as I triggered it. Given that the version screen had text, yet I saw no\ntext strings in the firmware dump, I figured it had to be a bitmap image, and\nit was! It was stored near the very end of the firmware. While identifying\nwhere it was inside the dump was simple, trying to reconstruct it from the\ndump was not. The extra padding of 0x00 bytes (basically black when\ninterpreted as RGB565) that didn\u2019t align with 60 pixel/120-byte rows, it took\na lot of experimentation with image sizes and offsets until I got a legible\npicture. Even now I\u2019m still not entirely sure if I\u2019ve captured the entire\nbitmap.\n\n    Kraze vape showing its hidden version screen.\n\n    4x magnified visualization of the firmware flash dump, showing a scrambled version of the embedded version bitmap.\n\n    4x magnified reconstruction of the embedded version bitmap.\n\n# Further Efforts\n\nIn the time between me starting this reverse-engineering/modding project and\nmy publication of this blog post, I released my documentation and rudimentary\ntools on my GitHub profile in the hopes of drumming up more support from the\ncommunity. Within days, another GitHub user by the name of \u201cxbenkozx\u201d was able\nto apply and extend my research into the external Flash memory mapping and\ndebugging facilities. He created his own Flash dumping and modding tools, and\neven built custom reflashing firmware that only needed access to a SWD\ndebugging/programming dongle and a custom cable \u2013 no surface-mount soldering\nrequired (i.e. programming that is beyond my current skillset ). He also made\nmore detailed analyses of various board revisions, and some important\nincompatibilities that could have resulted in damage due to overheating of the\nvape\u2019s heating coil. Check it out!\n\nAdvertisement\n\nPrivacy Settings\n\nHopefully this reverse-engineering and reuse campaign can branch even further.\nPerhaps development environments (maybe an Arduino board profile?) or\nalternative firmwares can be developed to allow these boards to be reused in\nother applications, given that these vapes already provide easy access to a\nbright LCD screen, a decently powerful Arm microcontroller, Li-ion battery\ncharging, and a megabyte of SPI Flash storage plus some extra LED indicators.\nSome board versions even have Rx/Tx pads for a UART serial port, which could\nmake communication between different devices a possibility.\n\nIn terms of just theme creation, I made an editable template on my GitHub\nrepository, with example bar graphs and animation frames denoting positioning\nand frame count. Maybe someone out there with more\ngraphics/artistic/programming talent than me could figure out a way to \u201crun\nDoom\u201d on these vapes!\n\n# Conclusion\n\nDisposable vapes are almost everywhere, and their wastefulness goes beyond\njust some rechargeable batteries and circuit boards \u2013 some have bright LCD\nscreens... and yet somehow these are considered throwaway devices!\n\nIf you have some of these LCD-equipped disposable vapes like the Kraze HD7K or\nRAZ TN9000, perhaps try playing around with them a bit. I\u2019ve spearheaded a\ncommunity campaign on GitHub to reverse-engineer these vapes, which allows\nthem to be reused or repurposed more easily. If you want to take the path of\nreuse, I and some others have made customization and reflashing tools\navailable. There is also potential in reusing just the microcontroller board\nsince the vape features a pretty powerful microcontroller and a lot of storage\nspace for images.\n\n    A Kraze HD7K disposable vape, modified with my custom Windows 95 theme. It is displaying a 3D Pipes screensaver animation.\n\n### Share this:\n\n  * Twitter\n  * Facebook\n  * Email\n  * Print\n  * Reddit\n  * Telegram\n  * More\n\n  * LinkedIn\n  * Tumblr\n  * Pinterest\n  * Pocket\n  * WhatsApp\n\nLike Loading...\n\n#### A Temporary Hold: Creating Li-Ion battery holders with prototype boards\nand pin headers\n\nAs seen on Hackaday! Lithium-ion batteries are great. They have high energy\ndensity, are lightweight, and in the case of many portable devices, they can\nbe easily swapped in and out. One problem with prismatic (the types you often\nfind on cell phones that have a set of flat contacts...\n\nJune 17, 2014\n\nIn \"As Seen on Hackaday\"\n\n#### PPS For All: Directly charging lithium-ion batteries with a USB-C PD\ntester\n\nUSB-C with PPS [Programmable Power Supply] technology is here, it's cool, and\nnow it's usable on more than just the newest smartphones - it works on almost\nany Li-ion battery with the right USB-C tester.\n\nDecember 31, 2022\n\nIn \"As Seen on Hackaday\"\n\n#### Quick Hack: Converting a computer fan from thermostatic to PWM control\n\nAs seen on Hackaday! About a week ago I needed to replace the CPU fan in my\nhome server as it was running slower than it used to. The Cooler Master Vortex\nPlus that I chose for my home server uses a standard 92mm fan, and uses the\n4-pin connector...\n\nOctober 15, 2019\n\nIn \"As Seen on Hackaday\"\n\nThis entry was posted in As Seen on Hackaday, Batteries, Disposable Vape\nHacks, Hacks, Mods, Teardowns, Uncategorized and tagged battery, controller,\ncustomize, debug, disposable vape, firmware, Flash memory, github, hack, kraze\nhd7k, lcd, li-ion, mod, open source, raz tn9000, reflash, reset counter,\nreuse, reverse engineering, skin, st7735, st7735s, swd, theme, usb-c, vapes by\nginbot86. Bookmark the permalink.\n\n## 1 thought on \u201cDispo Adventures, Episode 1: Reverse-engineering and \u201crunning\nWindows 95\u201d on a disposable vape with a colour LCD screen\u201d\n\n  1. RBMK on April 26, 2024 at 7:35 am said:\n\nThank you for the read. It would make a really nice base for a flashlight\nbuild. Just add a buck power components and a powerful LED after the switch\ntransistor and button instead of vaping sensor.\n\nLikeLike\n\nReply \u2193\n\n### Leave a comment Cancel reply\n\nThis site uses Akismet to reduce spam. Learn how your comment data is\nprocessed.\n\n### Blog Stats\n\n  * 999,992 hits\n\nJoin 94 other subscribers\n\nWebsite Powered by WordPress.com.\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * Rip It Apart - Jason's electronics blog-thingy\n    * Already have a WordPress.com account? Log in now.\n\n  * Privacy\n  *     * Rip It Apart - Jason's electronics blog-thingy\n    * Customize\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\nLoading Comments...\n\n%d\n\n", "frontpage": false}
