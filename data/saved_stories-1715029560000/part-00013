{"aid": "40275223", "title": "Bitcoin Block Time Variance: Theory vs. Reality (2021)", "url": "https://blog.lopp.net/bitcoin-block-time-variance/", "domain": "lopp.net", "votes": 3, "user": "ur-whale", "posted_at": "2024-05-06 14:38:58", "comments": 0, "source_title": "Bitcoin Block Time Variance: Theory vs Reality", "source_text": "Bitcoin Block Time Variance: Theory vs Reality\n\nCypherpunk Cogitations\n\nFeb 20, 2021 7 min read bitcoin\n\n# Bitcoin Block Time Variance: Theory vs Reality\n\nHow well does the historical distribution of timestamps on bitcoin blocks\nmatch the expected distribution?\n\nThis week I got pinged for a question that comes up from time to time:\n\n> How often does it happen that the chain doesn't mine a block for ~2 hours\n> btw? Happened last night between 670637 and 638, something I accidentally\n> noticed\n>\n> \u2014 //Bitcoin Jack \ud83d\udc10 (@BTC_JackSparrow) February 15, 2021\n\n> Looks like the two blocks were 106 minutes apart, which is very rare.\n>\n> If my math is right, exp(-106/10) = 0.0025% of blocks will be 106+ minutes\n> apart assuming a constant hashrate.\n>\n> \u2014 Jameson Lopp (@lopp) February 15, 2021\n\nThis got me to thinking... how well has the expected block time distribution\nheld up over the past 12 years?\n\nI've previously discussed some aspects of Bitcoin's timestamping mechanics.\nSuffice to say that Bitcoin's security and game theory around timestamps is\nquite elegant.\n\nBitcoin Timestamp Security\n\nA deep dive into the game theory behind keeping timestamps of bitcoin blocks\nreasonably accurate.\n\nCypherpunk CogitationsJameson Lopp\n\nThankfully it's pretty easy to iterate through all of the bitcoin block\nheaders for their timestamps if you have a node handy. I wrote this script to\ndo so and on my laptop it only takes about 5 minutes to complete.\n\nNote: for the purposes of my metrics I'm excluding the first 100 blocks in the\nblockchain, as some funky things happened during the first few days of\nBitcoin's existence when only a few folks were mining.\n\nIt turns out that 190 blocks have occurred more than 106 minutes after the\nprevious block, which is 0.0028% of the 670,000 blocks minted thus far. That's\nquite close to the expected value of 0.0025%! This was easy enough to\ncalculate, but it only answered my question for one specific point in the\nblock time delta distribution.\n\n### We've Got to Go Deeper\n\nIt's time to don our thinking caps! Felix Weiss answered the question of how\nto determine what percentage of blocks should be found before or after a\ncertain amount of time has passed since the previous block.\n\nProbablity Distribution of mining\n\nWhat is the probability distribution of solving a block, given the same\ndifficulty. So if I try to mine multiple times using the same difficulty, is\nit normal distribution with mean of 10 minutes...\n\nBitcoin Stack Exchangejaybny\n\nThe answer can be determined by calculating the cumulative distribution\nfunction (CDF) of the exponential distribution.\n\nBut what if we want to check how well the entire history of block time deltas\nhas played out with regard to the expected distribution? In this case we want\nthe probability density function (pdf) of an exponential distribution which\ncan be modeled by f(x;\u03bb) = \u03bbe^-(\u03bbx). In our case, x = the time since the last\nblock and \u03bb as the rate parameter is 1/600 (the targeted block time.) It\nshould look like this on a linear scale:\n\nWhen I plotted the expected distribution for all blocks at time of writing, it\nlooks pretty similar.\n\nSo I collected the data from the metrics script I wrote and imported it into\nthis spreadsheet:\n\nblock timestamp distribution\n\nblocks 100 - 85k\n1,57,141.31286392,66,141.07753883,61,140.84260554,69,140.60806355,81,140.37391216,96,140.14015067,103,139.90677838,96,139.67379479,114,139.441199110,102,139.208990811,94,138.977169212,110,138.745733713,110,138.514683614,102,138.284018215,109,138.053736916,128,137....\n\nGoogle Docs\n\nIt quickly became apparent that it makes more sense to use log scale x axis on\nthe following charts, otherwise you miss some interesting phenomena in the\nnoise of the small deltas.\n\n### Mining Eras\n\nThe thing about the expected block time distribution is that it assumes a\nconstant hashrate. As we know from history, Bitcoin's hashrate has been far\nfrom constant.\n\nSo I decided to take 3 different slices of block ranges.\n\n  * One from the CPU era where the hashrate was fairly flat\n  * One from the GPU era where it was quickly accelerating\n  * One from recent ASIC history where it's (relatively) slowly accelerating\n\n### CPU Era\n\nFor the CPU mining era it's apparent that for the delta times less than the\nexpected 10 minute target, there are far fewer blocks than expected. Why?\nWe'll get to that later.\n\n### GPU Era\n\nNotice how during the GPU era the opposite occurred for block times less than\nthe 10 minute target - Bitcoin tended to overproduce on \"faster than expected\"\nblocks. This is most likely because the hashrate was accelerating.\n\n### ASIC Era\n\nI purposely chose a section of recent history here so that it wouldn't be\naffected by the massive hashrate acceleration in the early ASIC era. We can\nsee that Bitcoin miners are still overproducing on \"faster than expected\"\nblocks, but not nearly to the same extent as the GPU era.\n\n### All Mining Eras\n\nWhat happens when we plot the results from all 670,000 blocks on one chart? We\ncan see that the actual timestamp deltas fit the expected curve quite well.\nExcept... for the shorter time periods on the left of the chart.\n\nWe can see that blocks created 29 seconds or less after the parent block tend\nto be far lower than expected. Is there a reasonable explanation for the\nmismatch?\n\n### Hunting Down the Deviation\n\nThe total number of expected blocks that should have been minted with this\nrange of timestamp deltas was 30,497\n\nOn the other hand, the ACTUAL number of minted blocks with this range of\ntimestamp deltas was 22,441\n\nSo where are these 8,056 blocks?\n\n> Did you know that the timestamp in a bitcoin block header can be BEFORE the\n> timestamp in the previous block? This is allowed as long as it isn't before\n> the median timestamp of the past 11 blocks.\n>\n> ~2% of all bitcoin blocks have a timestamp that is before that of the parent\n> block.\n>\n> \u2014 Jameson Lopp (@lopp) February 16, 2021\n\nIt turns out that there are 14,296 blocks hiding in negative deltas and 3,549\nof them are in the -29 to 0 second range. This leaves another ~6,000 blocks\nthat I'll focus on in a moment.\n\nBy plotting the distribution of negative timestamp deltas we can see it is\nbasically a mirror image of the positive timestamp distribution.\n\nBut while the fact that the Bitcoin protocol allows negative timestamp deltas\nbetween blocks is a cause, it's not the root cause! We have to consider how\nthe actual process of mining works:\n\n  * A mining pool creates a template for the next block to be mined\n  * Miners requests work from the pool and start hashing on that template\n  * Miners return completed work to the pool to prove they tried to solve it\n\nThus the question becomes: how often do the block templates and their\ntimestamps get updated?\n\n> Dynamic in our implementation. Depends on \u2206(reward+fee+merged reward) and\n> (time since last template). Avg 10 to 15 sec on our configuration.\n>\n> \u2014 Chun #hodl (@satofishi) February 18, 2021\n\nI'm sure the sophisticated answer is more complex than this, as individual\nminer machines may also grind (iterate upon) the timestamp itself, but that\nwould probably involve looking at specific hardware / firmware implementations\nfor ASICs.\n\nRecall that there was another excess ~6,000 blocks with negative timestamp\ndeltas - can they be explained? My theory is that yes, they can be explained\nby clock drift / poorly configured mining software. If you know your mining\nhistory then you know that early miners didn't use pools - they \"solo mined\"\non their own. These setups were not run by industrial level enterprises, but\nhobbyists who probably did not go to the effort of ensuring that their machine\nwas regularly synced to some authoritative source. And even the early pools\nwere generally run by hobbyists rather than full-time professionals. I\nbelieved that if my theory was correct, we would see that over time as mining\nhas become more industrialized and as mining pool software has improved, we\nshould see clock drift decreasing. So I ran another script and plotted the\ndistribution of negative timestamp deltas over time.\n\nIndeed, we can see that not only is the frequency of negative timestamps\ndiminishing, so is the severity of the clock drift. In particular we have seen\nvery few negative delta timestamps since late 2017.\n\n## In Conclusion\n\nMany of Bitcoin's \"guarantees\" are based upon math. By analyzing the actual\ndistribution of block times we can see that the math behind the targeted block\ntime of 10 minutes has held up quite well over the past 12 years and the few\nedge case aberrations can be easily explained. The industrialization of mining\nand continued improvements to mining software have resulted in the realized\nblock time distribution edging closer and closer to the expected block time\ndistribution.\n\nVires in numeris!\n\n### Published by:\n\nShare Tweet\n\n### You might also like...\n\nMay\n\n04\n\n## Griefing Bitcoin's Testnet\n\nA deep dive into manipulation of block generation on testnet and a call to\nreset the network to fix several issues.\n\nMay 4, 2024\n\n11 min read\n\nApr\n\n20\n\n## The Untold Story of ditto-b\n\nThe story of an anonymous developer who fixed a critical flaw in Bitcoin's\ncode.\n\nApr 20, 2024\n\n5 min read\n\nFeb\n\n04\n\n## When do Bitcoin Node Operators Upgrade?\n\nAn analysis of historical Bitcoin Core node versions to examine the updating\nbehavior of node operators over the years.\n\nFeb 4, 2024\n\n6 min read\n\nJan\n\n06\n\n## Bitcoin 2023 Annual Review\n\nComprehensive coverage of metrics across a number of different verticals in\nthe Bitcoin ecosystem to gauge performance in 2023.\n\nJan 6, 2024\n\n20 min read\n\nDec\n\n24\n\n## 2023 Bitcoin Node Performance Tests\n\nTesting full validation sync performance of 7 Bitcoin node implementations.\n\nDec 24, 2023\n\n8 min read\n\nCypherpunk Cogitations \u00a9 2024\n\n", "frontpage": false}
