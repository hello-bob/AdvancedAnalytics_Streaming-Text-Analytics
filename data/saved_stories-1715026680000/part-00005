{"aid": "40274631", "title": "Apple Privacy Manifests \u2013 privacy theatre?", "url": "https://www.jessesquires.com/blog/2024/04/29/sdk-privacy-manifests/", "domain": "jessesquires.com", "votes": 2, "user": "chairhairair", "posted_at": "2024-05-06 13:47:32", "comments": 0, "source_title": "The curious case of Apple's third-party SDK list for privacy manifests", "source_text": "The curious case of Apple's third-party SDK list for privacy manifests \u00b7 Jesse\nSquires\n\nturing complete with a stack of 0xdeadbeef\n\n# The curious case of Apple's third-party SDK list for privacy manifests\n\n##### 29 April 2024\n\nUpdated: 30 April 2024\n\nsoftware-dev app-store, apple, ios, privacy, xcode\n\nAt last year\u2019s WWDC, Apple introduced privacy manifests. They recently sent\nout a reminder that the deadline for complying with these new requirements is\nMay 1. Privacy manifests expand on the previously introduced privacy\n\u201cnutrition labels\u201d that are self-reported by developers and displayed on the\nApp Store. Developers must start including a privacy manifest in their apps by\nthe aforementioned deadline, but what\u2019s more interesting is that Apple is, for\nthe first time, imposing these new privacy rules on third-party SDKs as well.\nEven more interesting is the list of SDKs that Apple has published, which,\nupon inspection is quite bizarre.\n\nHistorically, Apple has rarely, if ever, explicitly acknowledged any third-\nparty SDK or library. It took years for them to even acknowledge community\ntools like CocoaPods in Xcode\u2019s release notes (usually when they made a change\nthat broke it). Thus, it is interesting to see which SDKs they have deemed\nimportant or concerning enough to explicitly mandate a privacy manifest. And,\nin typical Apple fashion, I\u2019m pretty sure SDKs authors were not notified about\nthis in advance. We all learned which SDKs need privacy manifests at the same\ntime \u2014 when the list was published.\n\nThe first few entries in the list make sense:\n\n  * Abseil, a low-level C++ library.\n  * AppAuth, an SDK for communicating with OAuth 2.0 and OpenID Connect providers.\n  * AFNetworking and it\u2019s successor Alamofire, networking libraries that wrap Apple\u2019s APIs, which almost every iOS developer has encountered.\n  * BoringSSL, a fork of OpenSSL maintained by Google.\n\nI can see how these libraries could be concerning with regard to user privacy,\nthey are all dealing with networking, authentication, and security (except for\nAbseil) \u2014 these are common vectors for privacy-related issues. Abseil is the\nexception, but I could see an argument for why a low-level C++ library might\nbe a concern. There are also a lot of SDKs from Google and Facebook on the\nlist \u2014 neither of those companies have a particularly good reputation when it\ncomes to user privacy. It makes sense for those to be included.\n\nBut then... you see that the list contains UI libraries that haven\u2019t seen\nsignificant updates or any activity for multiple years, like SVProgressHUD.\nWhy does a library that provides a single UI component need a privacy\nmanifest? Is it as concerning and as potentially privacy invasive as the\nFacebook SDK? Some of the UI-only SDKs on the list haven\u2019t seen significant\nupdates (or any updates at all) within the last 4-5 years. Furthermore, even\nAFNetworking hasn\u2019t had an update in 4 years because it was deprecated long\nago after being supplanted by Alamofire. The AFNetworking repo on GitHub has\nbeen archived and read-only for over a year! Who\u2019s going to bother adding a\nprivacy manifest to that?\n\nAnd then... there are some entries that are simply obscure and absurd:\nconnectivity_plus, image_picker_ios, video_player_avfoundation, file_picker.\nWhat the hell are those?! They don\u2019t even sound like SDK or library names. I\nhave never heard of any of these, and I\u2019ve been involved in the iOS open\nsource community for a decade.\n\nAnd then... you know what\u2019s even more bizarre about this list? There are no\nlinks! There are no links to the SDK project homepages or GitHub repos. It is\na plain text list of names, and in some cases, seemingly random names like\n\u201cfile_picker\u201d. Ok LOL. SDK and library names are not necessarily unique. How\nare you supposed to know exactly which SDKs they are referencing with so\nlittle information? Searching for \u201cfile_picker\u201d or \u201cimage_picker_ios\u201d or any\nof the other obscure names on both CocoaPods and the Swift Package Index\nreturns no results!\n\nFinally, wouldn\u2019t you expect some sort of reason or justification for each of\nthese SDKs being on the list? We don\u2019t need a 10-page essay but a brief\nexplanation of a few sentences explaining why each of these SDKs is on the\nlist would be helpful in understanding the logic and reasoning behind it.\n\nNothing about this list makes any sense.\n\n##### Update 30 April 2024\n\nAs many readers have pointed out, there are also a number of popular SDKs that\nreally should be on this list if Apple is concerned about privacy. For\nexample, the TikTok SDK, GoogleAds, and the Unity Ads SDK are all missing from\nthe list, just to name a few. How strange!\n\nAnd apparently, all of the obscure SDK names like \u201cfile_picker\u201d are actually\nFlutter packages. Again, what an odd list!\n\n#### * * *\n\nFor a company that has positioned itself as a staunch privacy advocate, this\nlist of SDKs is slapdash at best. The lack of attention to detail, like simply\nincluding links to SDK homepages, makes the list appear like it was assembled\nhastily and carelessly. It makes you wonder, how was this list compiled? What\nwas the criteria for including or excluding an SDK from this list?\n\nI was venting about the list on Mastodon, and the general consensus is that it\nwas most likely just a script dump from a static analysis of app binaries on\nthe app store, with the sole criterion being \u201cwhat are the most popular\nlibraries\u201d used across all apps, with some minimum threshold for inclusion. It\nis quite clear from the list that no one at Apple really put much thought into\nit. \ud83e\udd21\n\nIf we operate under the hypothesis that this list is merely the output of a\nscript that someone at Apple wrote to check off the line item \u201cdetermine which\nthird-party SDKs should be required to included privacy manifests\u201d, then it\nall starts to make more sense. This list is ultimately the result of a\npopularity contest, not a thoughtful analysis of SDKs that have meaningful\nimplications for user privacy. They couldn\u2019t even bother to link to the\nprojects or provide brief explanations. There\u2019s literally an entry titled\n\u201cfile_picker\u201d with no other explanation. Did anyone at Apple even look into\nany of these libraries? Did anyone at Apple even read through this list after\nsome script vomited it out?\n\nWhen Apple imposes new privacy regulations in such a slipshod manner, how are\nwe, as developers and as users, supposed to take this seriously? This feels\nlike more bureaucratic security and privacy theater. Let\u2019s all take off our\nshoes and throw away sealed bottles of water we purchased at the airport\nbefore we proceed through the TSA security checkpoint \u2014 meanwhile doors and\nwheels are falling off the damn plane.\n\nHire me for freelance iOS work.\n\nBuy my apps.\n\nSponsor my blog and open source projects.\n\nQuestions? Feedback? Corrections?\n\nOpen an issue, submit a pull request, or edit this post.\n\n\u00a9 2014-2024 Jesse Squires. This site is open source.\n\n", "frontpage": false}
