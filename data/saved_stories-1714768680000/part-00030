{"aid": "40246791", "title": "The End of IDEs", "url": "https://aifordevs.substack.com/p/the-end-of-ides", "domain": "aifordevs.substack.com", "votes": 1, "user": "danleshem", "posted_at": "2024-05-03 12:15:05", "comments": 0, "source_title": "The End of IDEs", "source_text": "The End of IDEs - by Dan Leshem - AI for Engineers\n\n# AI for Engineers\n\nShare this post\n\n#### The End of IDEs\n\naifordevs.substack.com\n\n#### Discover more from AI for Engineers\n\nA practical guide for using Generative AI in software development\n\nContinue reading\n\nSign in\n\n# The End of IDEs\n\n### AI-Native Development Environment is about to take over traditional IDEs\n\nDan Leshem\n\nMay 03, 2024\n\n1\n\nShare this post\n\n#### The End of IDEs\n\naifordevs.substack.com\n\nShare\n\nTen months ago, I talked about AI x Software Development (\u201cNatural Language\nCoding\u201d) and what it means for software development workflows and tools like\nthe IDE.\n\nGitHub's announcement of Copilot Workspace this week marks the start of the\nsunsetting of IDEs as the main interface for building software.\n\nIDEs have been long, trusty companions for software developers. However, with\nthe rise of AI-assisted dev workflows, the traditional IDEs days as we know\nthem (= fancy code editors), are about to make ways for new tools and\ninterfaces.\n\n##\n\nNew Workflows, New Tools\n\nThere\u2019s a new paradigm in software development. Call it \u201cNatural Language\nCoding\u201d or \u201cAI-assisted dev workflows\u201d. It follows a specs-driven approach,\nwhere the role of human developers is to steer the wheel and guide the AI on\nhow to write code, rather than actually writing the code themselves. Here is\nhow it goes:\n\n  1. Issue description: Product/Engineer \u201copen a ticket\u201d and describe the scope of work: business requirements and high-level specs.\n\n  2. AI writes specifications: AI analyzes the issue, generates technical specs, and breaks it down into an actionable, step-by-step work plan - followed by a human review and refinement.\n\n  3. AI generates code: AI executes the steps defined in the work plan\n\n  4. Inner Feedback Loop: AI autonomously iterates using internal tools (tests, builds, linters, self-reflection).\n\n  5. Human Feedback Loop: The AI hands off the task to the operator for code review and revision.\n\n  6. Hand-off to CI Process (\u201cLast Mile\u201d): Once the operator approves, the AI creates a pull request, and the rest of the workflow continues: Other developers review code, the CI/CD process kicks in and may run tests or create preview environments. If CI/CD process fails, it may bring back the AI to re-work and edit the Pull Request.\n\n  7. Deployment \ud83d\udea2\n\nWe need new tools and interfaces to facilitate the new collaboration model\nbetween AI and human developers. Could we implement them in current IDEs?\nProbably yes. Should we do it? Probably not, as natural-language coding\nworkflows have almost nothing in common with traditional coding workflows.\n\nI'm glad to see the industry adopting the new paradigm and shifting to AI-\ncentric software development workflows that are not dependent on the IDE.\n\n##\n\nCloud Dev Environments \ud83e\udd1d AI-Dev Environments\n\nCloud development environments (CDEs) like Gitpod and Github Codespaces set\nthe stage for AI-native development environments. These environments\nfacilitate AI's \"inner loop\"\u2014automated iterations of code generation, testing,\nand refining.\n\nAlso, AI-driven development involves a lot of waiting, and these platforms\nallow AI to run asynchronously, away from the operator\u2019s computer, freeing\nthem to do whatever.\n\nEven though the essay I\u2019m paraphrasing (Hey @swyx, The End of Localhost)\nanticipates otherwise, Web IDEs and cloud dev environments have been slowly\nadopted by the mainstream. For me, AI-Native dev environments look like the\nnext evolution of Cloud Dev Environments, with the huge benefits of coding\nfrom the mobile.\n\nThe other day, I took the bus to the office and solved 3 issues with my iPhone\non the go. By the time I got to the office, I only had to review the code and\nmake a few tweaks, and it was done. What\u2019s that, if not the ultimate developer\nexperience?\n\n##\n\nREADME Driven Development\n\nIn this new era, code is no longer the \u201cmain dish\u201d in software development. On\nthe other hand, technical specifications are now becoming first-class\ncitizens.\n\nIt reminds me of the concept of README Driven Development, introduced by\nGitHub's founder Tom Preston-Werner 14 years ago. When thinking of natural\nlanguage coding, it seems relevant than ever. RDD advocates for crafting a\nclear and concise README before coding, serving as a blueprint for AI to\ngenerate accurate and aligned code. In a way, what we\u2019re seeing now is RDD\nbecoming a reality.\n\nThe promise of this new workflow is bigger though. Well-crafted specs provide\nvaluable documentation of the thought process behind a project, preserving the\nrationale and decisions for future reference.\n\nMixed with some more LLM magic, this could be the key to understanding\nsoftware projects and retaining knowledge in the organization.\n\n##\n\nAI is Not Good Enough.\n\nSkepticism regarding AI's ability to develop software is understandable.\nConcerns about code quality, security, and maintainability are valid, as AI-\ngenerated code may be prone to errors or inconsistencies. Is it worth it? Will\nyou end up spending more time reviewing code and fixing AI bugs?\n\nThe ones who will benefit the most are those who can find the right balance\nbetween AI-assisted automation and human oversight and can identify the\nappropriate use cases.\n\n  * There is a learning curve. Coding in natural language is a skill most of us need to learn and improve (how many of you truly master technical writing?)\n\n  * Prefer low-value tasks over high-value tasks. AI (usually) lacks the domain knowledge and contextual understanding that human developers bring to the table, so it works better for routine tasks: write a new endpoint, a unit test, add error handling or do a limited refactor.\n\n  * \u201cGood enough boilerplate\u201d: If you\u2019re looking for 100% working code exactly as you imagine it, come back in a few years. Expect 80% and be prepared to read and modify someone else\u2019s code though, and you\u2019d be surprised how powerful these tools are.\n\n##\n\nFinal Thoughts\n\n  * It\u2019s going to be a long adoption process. Developers will not shift away from their beloved companions tomorrow morning, and IDEs will be here for a long time (I\u2019m here to remind you some people still enjoy using VIM!).\n\n  * While interfaces, tools, and practices might change, the essence of the software engineering job remains the same: Analyze a problem, and propose a beautiful, simple solution.\n\n  * When we started Fine, we made a critical product decision: We decided to build Fine outside of the IDE. Though many people urged us to build it as an IDE plug-in, it was clear to us that AI would play a much more significant role in software development than just code completion.\n\n  * Even though GitHub Copilot Workspace is a competing product with Fine, I felt somewhat proud to see them following similar design patterns and UX decisions we made months ago \ud83d\ude42\n\nI am excited about this future. I\u2019ve been writing code for the last 15 years,\nand I\u2019ve never enjoyed it as much as I did for the last year. Extraordinary\ntimes for everyone excited about Natural Language Coding!\n\nHey, it\u2019s Dan \ud83d\udc4b I\u2019m writing a practical guide about Natural Language Coding\nand AI in software engineering. Do you have any ideas? Let\u2019s chat.\n\nThanks for reading AI for Engineers! Subscribe for free to receive new posts\nand support my work.\n\n2 Likes\n\n1\n\nShare this post\n\n#### The End of IDEs\n\naifordevs.substack.com\n\nShare\n\nDark Mode #01: The Ins and Outs of Developer Experience\n\nUnderstanding and Improving Developer Experience: Insights and Best Practices\nfrom Leading Tech Companies\n\nDec 17, 2022 \u2022\n\nDan Leshem\n\n5\n\nShare this post\n\n#### Dark Mode #01: The Ins and Outs of Developer Experience\n\naifordevs.substack.com\n\nThe Future of Software Development: Technical Specifications Take Center Stage\n\nHow the Evolution of AI Coding Assistants is Reshaping the Software\nDevelopment Life-Cycle and Elevating the Importance of Technical Design\n\nApr 19, 2023 \u2022\n\nDan Leshem\n\n4\n\nShare this post\n\n#### The Future of Software Development: Technical Specifications Take Center\nStage\n\naifordevs.substack.com\n\nHow Far Until AI Agents Take Over?\n\nCan AI Agents like AutoGPT and BabyAGI completely take over software\ndevelopment?\n\nMay 5, 2023 \u2022\n\nDan Leshem\n\n4\n\nShare this post\n\n#### How Far Until AI Agents Take Over?\n\naifordevs.substack.com\n\nReady for more?\n\n\u00a9 2024 dan@leshem.co\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n", "frontpage": false}
