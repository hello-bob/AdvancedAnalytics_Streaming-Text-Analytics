{"aid": "40064155", "title": "Running Metabase in Production on Fly.io", "url": "https://kimchiii.space/writing/metabase-on-fly/", "domain": "kimchiii.space", "votes": 1, "user": "yeskunall", "posted_at": "2024-04-17 13:16:27", "comments": 0, "source_title": "Running Metabase in production on Fly.io", "source_text": "Kunall Banerjee \u2014 I create\n\n17th April, 2024 (1m ago) 7 min read\n\n# Running Metabase in production on Fly.io\n\n1287 words by Kunall Banerjee\n\nI managed to deploy, and run Metabase (backed by Fly Postgres) on Fly.io in a\nproduction setting using ClickHouse as the data warehouse. There are tutorials\nonline, but they only deploy Metabase in its default configuration (with H2 as\nthe internal database), don\u2019t provide (cost/price) estimates, nor metrics, nor\ndo they specify how to add external dependencies or plugins into Metabase. All\n3 things I needed answered for my use-case. Here\u2019s what I have found (so far).\n\nNOTE\n\nThis solution is currently being tested by 2 people for internal reporting at\na company, and later will be used by ~20 people. They didn\u2019t want to spend too\nmuch on running this setup, so some decisions here are backed by cost-\neffective measures. If you can suggest further cost savings, I\u2019d be extremely\ngrateful!\n\nAlso, I should add:\n\nNOTE\n\nThis post may serve as a guide, but that\u2019s not what it is intended for. This\nis reference material that I plan on updating over time. If you continue\nreading, my assumption is that you already know about ClickHouse, Fly and\nMetabase, and you are just curious how I\u2019ve set things up\n\nI\u2019m going to skip over setting up and deploying ClickHouse, and move directly\nto setting up the Postgres instance required to run Metabase in production.\nBut for brevity, I\u2019ll mention that the ClickHouse instance is also running on\nFly with the recommendations made for self-managed ClickHouse instances.\n\n  1. Preparing the Postgres instance required to move Metabase to production\n\n    \n    \n    fly pg create --name <metabase-db-name> --initial-cluster-size 1 --region <closest-to-you> --vm-size 1024 --volume-size 1\n\nWhen setting up the Postgres app, I followed the application database server\nsize recommended by Metabase. I opted to keep the initial cluster size to 1\nand also chose to keep the volume size to 1G. Both can be horizontally scaled\n(up) at will. I deployed this first with no issues, but right now it\u2019s not\nattached to a Fly app, so there\u2019s not much to it. I end step 2 by attaching\nthe Postgres app to the Metabase app.\n\n  2. Preparing the custom Dockerfile to deploy Metabase on Fly\n\nIdeally, I wouldn\u2019t even need to do that, and just pass the Metabase image\ndirectly in fly.toml. But because I went with ClickHouse, I had to accomodate\nfor that change somehow. Fortunately, you can deploy apps via Dockerfile on\nFly, so there\u2019s that.\n\nNOTE\n\nClickHouse is not an officially supported driver. However, it is listed as a\npartner driver, which means there\u2019s an offical driver for it\n\nBeing able to deploy Metabase as a JAR was one of its selling points for me,\nalong with the fact that you can add external dependencies or plugins simply\nby dropping them in a dedicated \u201cplugins\u201d directory. These plugins are\ngenerally self-contained as JAR files, too.\n\nBut here\u2019s where I hit a major roadblock.\n\n> Note that Metabase will use this directory to extract plugins bundled with\n> the default Metabase distribution (such as drivers for various databases\n> such as SQLite), thus it must be readable and writable by Docker.\n\nFly supports Dockerfile, but ultimately your apps are deployed stand-alone to\na VM directly. There is no Docker if you fly ssh console into your Metabase\ninstance. On top of that, Fly Volumes aren\u2019t available during builds.\n\nKeeping all of that in mind, this is what I ended up with:\n\n    \n    \n    # Use the official OpenJDK 11 image as the base image FROM adoptopenjdk/openjdk11:alpine ENV MB_VERSION=v0.49.3 \\ MB_APP_PORT=3000 \\ MB_JETTY_HOST=0.0.0.0 \\ METABASE_CLICKHOUSE_DRIVER_VERSION=1.4.0 RUN apk add --no-cache bash wget ca-certificates RUN mkdir -p /metabase-data /plugins RUN wget -O metabase.jar \"http://downloads.metabase.com/${MB_VERSION}/metabase.jar\" RUN wget -O plugins/ch.jar \"https://github.com/ClickHouse/metabase-clickhouse-driver/releases/download/${METABASE_CLICKHOUSE_DRIVER_VERSION}/clickhouse.metabase-driver.jar\" EXPOSE $MB_APP_PORT CMD [\"java\", \"-jar\", \"metabase.jar\"]\n\nTIP\n\nYou can just use the metabase image from Docker Hub if you don\u2019t want (or\nneed) to add external dependencies or plugins\n\nI could have also exposed the database URL when I deployed the Postgres app in\nstep 1. After all, the Postgres app is not exposed to the public Internet, and\nall 3 apps are deployed on a private network within the same org, so it\nwouldn\u2019t matter.\n\nNext, I attached the Postgres app created in step 1 to the Metabase app:\n\n    \n    \n    fly pg attach --app-name <your-metabase-app> --variable-name MB_DB_CONNECTION_URI --postgres-app <postgres-app-name>\n\nWARNING\n\nIf you don\u2019t pass MB_DB_CONNECTION_URI as the variable name, then you will\nhave to take an extra step to create the secret manually and assign it the\ndatabase connection URI string to it\n\n  3. Create a volume for the Metabase app\n\nI created the volume that Metabase would mount to once deployed to the VM.\n\n    \n    \n    fly volumes create metabase_data --region <closest-to-you> --size 1\n\nWARNING\n\nIf you skip this step before deploying the configuration in step 4, then Fly\nwill assign 3G (the max free space available per organization) to the volume\nautomatically\n\n  4. Create the fly.toml config file\n\nNow, referencing the Dockerfile created in step 2, we end up with this\nfly.toml configuration for the Metabase app.\n\n    \n    \n    app = \"<your-metabase-app>\" kill_signal = \"SIGTERM\" kill_timeout = 5 [build] dockerfile = \"Dockerfile\" [mounts] destination = \"/metabase-data\" source = \"metabase_data\" [http_service] auto_start_machines = true auto_stop_machines = true force_https = true internal_port = 3000 min_machines_running = 0 [http_service.concurrency] hard_limit = 150 soft_limit = 100 type = \"requests\" [[http_service.checks]] grace_period = \"120s\" interval = \"30s\" method = \"GET\" path = \"/api/health\" timeout = \"5s\"\n\n  5. First deployment of Metabase\n\nThis will take longer the first time you do it as Metabase will need to\ninitialise and run migrations on its database.\n\n    \n    \n    fly deploy --vm-memory 1024\n\nWARNING\n\nI set the VM Memory to 1024MB after I saw OOM exceptions in the remote builder\nlogs\n\nTime to tail the logs of the Metabase app to ensure everything works as\nexpected:\n\n    \n    \n    2024-04-17T12:02:18Z app[<REDACTED>] yul [info]2024-04-17 12:02:18,585 DEBUG plugins.lazy-loaded-driver :: Registering lazy loading driver :clickhouse... 2024-04-17T12:02:18Z app[<REDACTED>] yul [info]2024-04-17 12:02:18,591 INFO driver.impl :: Registered driver :clickhouse (parents: [:sql-jdbc]) \ud83d\ude9a\n    \n    \n    2024-04-17T12:02:21Z app[<REDACTED>] yul [info]2024-04-17 12:02:21,682 INFO driver.impl :: Initializing driver :clickhouse... 2024-04-17T12:02:21Z app[<REDACTED>] yul [info]2024-04-17 12:02:21,683 INFO plugins.classloader :: Added URL file:/plugins/ch.jar to classpath 2024-04-17T12:02:21Z app[<REDACTED>] yul [info]2024-04-17 12:02:21,685 DEBUG plugins.init-steps :: Loading plugin namespace metabase.driver.clickhouse... 2024-04-17T12:02:21Z app[<REDACTED>] yul [info]2024-04-17 12:02:21,778 INFO driver.impl :: Registered driver :clickhouse (parents: [:sql-jdbc]) \ud83d\ude9a 2024-04-17T12:02:21Z app[<REDACTED>] yul [info]2024-04-17 12:02:21,819 DEBUG plugins.jdbc-proxy :: Registering JDBC proxy driver for com.clickhouse.jdbc.ClickHouseDriver... 2024-04-17T12:02:21Z app[<REDACTED>] yul [info]2024-04-17 12:02:21,821 INFO metabase.util :: Load lazy loading driver :clickhouse took 136.2 ms\n\nIf you see Metabase successfully ran its migrations, then things are most\nlikely working. Although, if you really care to check, you\u2019ll also see logs\nshowing that the ClickHouse driver has been moved into /plugins.\n\n## Post-production deployment\n\nI just had to go to Metabase admin settings to initialize ClickHouse as the\ndatabase type. Because ClickHouse is deployed to Fly, the host name is set to\n<clickhouse-app-name>.internal, and the rest are set to default values. This\nmay change at a later date.\n\nNOTE\n\nI\u2019ll be writing about the cost to run this setup, as well as other metrics\nover time. It\u2019s too soon to tell anything.\n\nAs always, reliability is of concern when deploying to Fly.io. A year later\nafter the post made by Kurt (CEO of Fly.io), and I can\u2019t say things have\nimproved much. The only improvement I\u2019ve noticed is that the remote builder no\nlonger errors out or times out that often.\n\nAs I was writing this post, Fly had another outage. They have had 16 incidents\nthis month alone, and there\u2019s still ~15 days left in the month of April.\n\nMore coming soon...\n\nNOTE\n\nYou can contact me if you wish to discuss how to improve this setup, or if you\nwant to have this exact set up (ClickHouse + Metabase) for your organization\n\n  * Bluesky\n  * Cosmos\n  * GitHub\n  * Layers\n  * Literal*\n  * Posts.cv\n  * Read.cv\n  * Refrakt\n  * Rep.ly\n  * X\n\n\u00a9 2024 Kunall Banerjee\n\n", "frontpage": false}
