{"aid": "40291233", "title": "Exploring 50 user interfaces for AI code suggestions", "url": "https://austinhenley.com/blog/intellicode.html", "domain": "austinhenley.com", "votes": 2, "user": "azhenley", "posted_at": "2024-05-07 20:44:08", "comments": 0, "source_title": "Exploring 50 user interfaces for AI code suggestions", "source_text": "Exploring 50 user interfaces for AI code suggestions - Austin Z. Henley\n\n## Austin Z. Henley\n\nI work on AI + developer tools.\n\nazh321@gmail.com @austinzhenley github/AZHenley\n\nHome | Publications | Blog\n\n# Exploring 50 user interfaces for AI code suggestions\n\n5/7/2024\n\nThis post is a summary of our ICSE-SEIP'23 paper, \"Towards More Effective AI-\nAssisted Programming: A Systematic Design Exploration to Improve Visual Studio\nIntelliCode's User Experience\". See the paper for more details. Thanks to\nPriyan Vaithilingam for leading this project!\n\nAI code suggestions in code editors, such as Copilot and Visual Studio\nIntelliCode, are fairly common place now.\n\nWhat is the optimal way to present these code suggestions to users? Showing\nthe suggestion as inline gray text is common. But are there better ways? What\nif it is a multi-line change that modifies existing code?\n\nThese are the questions we wanted to answer.\n\n### Methodology\n\nWe iteratively explored 50 or so designs for inline code change interfaces in\nVisual Studio. We filtered our designs down to 19 which we then tested in a\nseries of 7 lab studies involving 61 developers.\n\nThe lab studies involved small coding tasks like adding a new property or\nrefactoring. The developers were not informed of the AI code suggestion tool.\nWe used Visual Studio's lightbulb as a baseline interface, where an icon by\nthe line of code pops up and can be clicked to view suggestions.\n\nFinally, we conducted a large-scale deployment of the two most promising\ndesigns in Visual Studio 2022. One design was released in a public release and\nthe other in an opt-in preview release.\n\n### Designs\n\nWe explored interfaces for three types of interfaces: additive changes,\nsingle-line changes, and multi-line changes.\n\nAdditive change suggestions can involve inserting new code at one or multiple\nplaces. We re-used gray text for this:\n\nSingle-line change suggestions can involve adding or deleting tokens on a\nsingle line. We tried numerous ways to present this, such as gray text,\nstrike-through, side-by-side diffs, and in-place diffs. Four designs are shown\nbelow:\n\nMulti-line change suggestions can involve adding or deleting tokens on\nmultiple lines. We tried different variations of the single-line designs for\nthis. Four designs are shown below:\n\n### Results\n\nThere were a a lot of results from these studies so I'll summarize some\nhighlights:\n\n  * The baseline (clickable lightbulb) was almost never clicked or noticed.\n  * Developers liked small gray-text suggestions (similar to Copilot) though one developer questioned how much time it actually saved.\n  * Developers said they won't accept suggestions that are not fully visible onscreen.\n  * Developers were not willing to click to expand a large suggestion.\n  * Developers preferred diff views over gray text or strike-through for both single-line and multi-line suggestions.\n  * Developers wanted to see the original code and the suggestion simultaneously.\n  * Developers found that too many large suggestions distracting.\n  * Developers did not like the designs that interweaved suggestions with their original code.\n  * Developers did not like the designs that used a popup window.\n\nFor the field deployment, we released two designs. (1) An inline additive\ninterface that uses gray text which led to a 3.5x increase in usage. (2) An\ninline single-line interface that uses a diff view which led to a 176%\nincrease in accepted suggestions from 29% more users.\n\n### Design principles for inline code suggestions\n\nThrough all our interviews and user studies, we inductively came up with five\ndesign principles for inline code suggestions:\n\n  * Glanceable suggestions. Suggestions should be proactively visible to the user to make it easy to discover and take action.\n  * Juxtaposition. The suggestion should explicitly indicate and juxtapose the existing code affected by the suggestion and the proposed code to improve user comprehension and support quick action.\n  * Simplicity through familiarity. Reusing existing familiar interface elements to indicate proposed changes reduces visual clutter, improves comprehension, and reduces cognitive load.\n  * Sufficient visibility for validation. The users should be able to see the whole suggestion when taking the action to prevent premature-commitment.\n  * Snoozability of suggestions. The user should be able to snooze inline suggestions to prevent interruptions.\n\nFor more, see our paper: Towards More Effective AI-Assisted Programming: A\nSystematic Design Exploration to Improve Visual Studio IntelliCode's User\nExperience. Special thanks to my co-authors: Priyan Vaithilingam, Elena\nGlassman, Peter Groenwegen, Sumit Gulwani, Rohan Malpani, David Pugh, Arjun\nRadhakrishna, Gustavo Soares, Joey Wang, and Aaron Yim.\n\n", "frontpage": false}
