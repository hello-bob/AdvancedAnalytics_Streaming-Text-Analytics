{"aid": "40065237", "title": "A way to \"misuse\" MySQL in fun way \u2013 Displaying images in MySQL", "url": "https://benjdd.com/posts/displaying-images-in-mysql/", "domain": "benjdd.com", "votes": 1, "user": "luckyou", "posted_at": "2024-04-17 14:34:18", "comments": 0, "source_title": "Displaying images in MySQL | Benjamin Dicken", "source_text": "Displaying images in MySQL | Benjamin Dicken\n\nSkip to content\n\nBenjamin Dicken\n\n# Displaying images in MySQL\n\nPublished:Apr 14, 2024\n\nWho needs tools like Photoshop, GIMP, and preview when you can just browse and\nview your photos in MySQL? I mean, who wouldn\u2019t want to just use MySQL for\neverything, right? Right? Anyone?\n\nIt certainly is not easy, and it requires using MySQL in ways that I have not\nseen anyone else really do, but this is indeed possible. Here, I\u2019ll show you\nhow. But, that\u2019s what makes it so interesting, so Let\u2019s begin! Since I don\u2019t\nwant to keep you in suspense all the way until the end, let me show you right\nfrom the beginning here what the end goal is.\n\nGetting to this point is quite a process, so let\u2019s walk through the steps.\n\n## Loading an image into MySQL#\n\nIf you\u2019ve been around SQL databases, you probably know that you should never\nstore media like images or video in the database itself. Rather, the image\nshould be stored separately, and the database contains paths or URLs to where\nthe images are located. However, let\u2019s say that you really needed to put that\njpeg into mysql. In that case, a reasonable person would probably use a BLOB\ntype, as it is designed for large chunks of binary data. However, for my\nneeds, this does not suffice.\n\nInstead, I\u2019m going to create a dedicated database to store my images called\nimage_library.\n\n    \n    \n    CREATE DATABASE image_library; USE image_library;\n\nWithin this database, a new table can be created for each image I want to\nstore. For example, if I want to store the image beach.jpeg, I\u2019d create the\ntable beach_jpeg in this database. Every pixel from the image will be stored\nin it\u2019s own row, containing x and y coordinates as well as the r, g, and b\ndata for that pixel.\n\n    \n    \n    CREATE TABLE IF NOT EXISTS beach_jpeg ( x INT, y INT, r SMALLINT, g SMALLINT, b SMALLINT, PRIMARY KEY(x, y) );\n\nThat means, if I want to store a 24 megapixel image, the table will have ~24\nmillion rows to store that ONE image. I don\u2019t recommend such a strategy for\nany real, practical use-case. However, this will not be the first time we use\nMySQL in an unintended way in this blog post.\n\nIt would be quite annoying to have to load images in manually in this way. So,\nI have a python script that will help load arbitrary images into the DB:\n\n    \n    \n    import sys from PIL import Image def main(): image_name = sys.argv[-1] im = Image.open(image_name) pix = im.load() image_name = image_name.replace('.', '_') print('CREATE DATABASE IF NOT EXISTS image_library;') print('USE image_library;') print('CREATE TABLE IF NOT EXISTS ' + image_name + '''( x INT, y INT, r SMALLINT, g smallint, b smallint, PRIMARY KEY(x, y) );''') width = im.size[0] height = im.size[1] for x in range(width): for y in range(height): p = im.getpixel((x, y)) print('INSERT INTO ' + image_name + ' (x,y,r,g,b) VALUES', end='') print('(', x, ',', y, ',', p[0], ',', p[1], ',', p[2], ');') main()\n\nThis allows one to load an image into MySQL like so:\n\n    \n    \n    $ python3 imageloader.py | mysql -u YOUR_USER -pYOUR_PASSWORD\n\nHere\u2019s a little sample of what data from one of these tables looks like:\nSelecting info from this table can be done like so:\n\n    \n    \n    mysql> SELECT * FROM beach_jpeg LIMIT 5; +---+---+------+------+------+ | x | y | r | g | b | +---+---+------+------+------+ | 0 | 0 | 46 | 77 | 95 | | 0 | 1 | 46 | 77 | 95 | | 0 | 2 | 46 | 77 | 95 | | 0 | 3 | 46 | 77 | 95 | | 0 | 4 | 46 | 77 | 95 | +---+---+------+------+------+ 5 rows in set (0.00 sec)\n\n## Colors in the MySQL shell#\n\nUltimately, I want to display images from within the MySQL shell, not just\nstore them. No popping up additional GUI windows or using graphics libraries.\nThis all needs to work with vanilla MySQL shell functionality.\n\nSince the MySQL shell operates in, well, a shell, I\u2019m limited to using text to\nrepresent my images. If you\u2019ve been around a terminal long enough, you\u2019ve\nprobably seen colored text in some tools. For example, you often see various\ntext colors and background when running commands like npm install.\n\nColors in the terminal are accomplished with ANSI escape codes. ANSI escape\ncodes can be used to produce a bunch of neat functionality in the terminal -\nchimes, cursor movement, erasing text, colored text, and more! To get images\ndisplaying, I specifically want to leverage ANSI escape codes for color.\n\nEarly on, there was a very small set of just 8 colors that text and / or the\ntext background could be set to. To get one of these colors displayed, the\ncharacter sequence would need to have the ESC code (or \\e as you may see it\nrepresented in strings), then followed by the character code for the\nforeground color, then a ;, then a character code for the background color,\nthen an m, and then your text! The numbers 30-37 are used to specify different\nforeground colors, and 40-47 the background color. You can try out the\npossible foreground / background combos using this limited set of colors with\nthis script:\n\n    \n    \n    for fg in 30 31 32 33 34 35 36 37 ; do for bg in 40 41 42 43 44 45 46 47 ; do printf \"\\e[${fg};${bg}mTEST\\e[0m\" done printf \"\\n\" done\n\nWhich produces:\n\nThough this is a good start, I want to be able to represent a much richer\nspectrum of colors to accurately visualize images. Thankfully, ANSI did not\nstop at this basic color set. Eventually, as 256 color lookups tables became\nmore common, ANSI added support for a wider gamut. Both the foreground and\nbackground could be set to any one of 256 colors. I\u2019ll show an example, just\nupdating the background colors.\n\n    \n    \n    for bg in $(seq 1 255); do printf \"\\e[48;5;${bg}mTEST\\e[0m\" mod=$(($bg%15)) if (( mod == 0 )) ; then printf \"\\n\" fi done\n\nBut, even better, you can also specify precise 24 bit RGB color values for\nyour text and background as well!\n\n    \n    \n    for r in $(seq 1 10 255); do for g in $(seq 1 10 255); do for b in $(seq 1 10 255); do printf \"\\e[48;2;${r};${g};${b}m#\\e[0m\" done printf \"\\n\" done done\n\nVery nice. This will do for viewing images.\n\n## ANSI escapes in MySQL#\n\nIf you\u2019re using the MySQL command line tool from within a shell that supports\nANSI escape sequences for coloring text (such as zsh in my case), then we\nshould be able to also see such colors in the output! Also, if you\u2019ve used\ntools like mycli, you know that this supports colors in the prompts, queries,\nand output.\n\nIf this is the case, one might think a way to get colors in the output of a\nMySQL command would be to use escape sequences, as shown in the last section.\nBuild the desired escape-sequenced string, put it in a CHAR or VARCHAR, then\ndump to the output. This seems like a reasonable first idea, but there is a\nproblem. According to the MySQL docs, only a subset of escape sequences are\nsupported.\n\nUnfortunately, no mention of ESC: Thankfully, there\u2019s a workaround for this.\nIt\u2019s a bit convoluted, but it works!\n\n  * (A) Build our strings using the hexadecimal representation of each underlying character. You can use an ASCII table to determine the mappings (either use $man ascii or just Google for one).\n  * (B) Use the MySQL unhex procedure to convert this to something that can be stored as a `VARBINARY.\n  * (C) When we want do display it, cast the VARBINARY to a CHAR, and it will interpret the escape sequence!\n\nThe big string 1B5B34383B323B3130303B3230303B3130306D201B5B306D is the\nhexadecimal representation of \"\\e[48;2;100;200;100m \\e[0m\". I use UNHEX to\nmake it binary, then CAST to convert to a CHAR, then REPEAT to display 50 of\nthese green chars.\n\n## Displaying a picture, finally!#\n\nThe next step is to write some SQL that can take one of the tables from the\nimage_library database, examine all of the RGB values, and spit out a visual\nrepresentation. I want this to be easy to do right from within the mysql\ncommand line. Due to this, I\u2019m going to implement the necessary functionality\nas a MySQL stored procedure. Once implemented and loaded in, it will be as\neasy as invoking it with a CALL with a few arguments, and then an image will\nappear!\n\nTo do this, I\u2019m going to implement two procedures. One will be display_image,\nwhich will be the one responsible for getting the image \u201cprinted\u201d out. This\nwill have three parameters: The name of the table (image selection), and the\nwidth and height (in characters, not pixels) that the caller wants to view the\nimage at. Before I show you the code, please note: I\u2019m not particularly good\nat writing actual code with SQL. This could probably be re-written way cleaner\nand shorter. If anyone wants to take up that challenge, by all means.\n\n    \n    \n    DELIMITER // CREATE PROCEDURE display_image( IN image_name VARCHAR(50), IN w INT, IN h INT) BEGIN DECLARE v1 INT DEFAULT 0; DECLARE v2 INT DEFAULT 0; DECLARE v3 INT DEFAULT 0; DECLARE v4 INT DEFAULT 0; DECLARE xv INT DEFAULT 0; DECLARE yv INT DEFAULT 0; DECLARE wdh INT DEFAULT 0; DECLARE hdh INT DEFAULT 0; DECLARE ravg INT DEFAULT 0; DECLARE gavg INT DEFAULT 0; DECLARE bavg INT DEFAULT 0; SET @query = CONCAT('SELECT MAX(x) FROM ', image_name, ' INTO @pw;'); PREPARE stmt FROM @query; EXECUTE stmt; DEALLOCATE PREPARE stmt; SET @query = CONCAT('SELECT MAX(y) FROM ', image_name, ' INTO @ph;'); PREPARE stmt FROM @query; EXECUTE stmt; DEALLOCATE PREPARE stmt; SET wdh = @pw / w; SET hdh = @ph / h; DROP TABLE IF EXISTS image_view; CREATE TEMPORARY TABLE image_view (image VARBINARY(50000)); SET v1 = 0; WHILE v1 < @ph DO SET @full_row = ''; SET v2 = 0; WHILE v2 < @pw DO SET ravg = 0; SET gavg = 0; SET bavg = 0; SET v3 = 0; WHILE v3 < wdh DO SET xv = v2 + v3; SET v4 = 0; WHILE v4 < hdh DO SET yv = v1 + v4; SET @query = CONCAT( 'SELECT r, g, b FROM ', image_name, ' WHERE x = ', xv, ' AND y = ', yv, ' INTO @rout, @gout, @bout'); PREPARE stmt FROM @query; EXECUTE stmt; DEALLOCATE PREPARE stmt; SET ravg = ravg + @rout; SET gavg = gavg + @gout; SET bavg = bavg + @bout; SET v4 = v4 + 1; END WHILE; SET v3 = v3 + 1; END WHILE; SET ravg = ravg / (wdh*hdh); SET gavg = gavg / (wdh*hdh); SET bavg = bavg / (wdh*hdh); SET @ret_value = ''; CALL getcolorstring(ravg, gavg, bavg, @ret_value); SET @full_row = CONCAT(@full_row, @ret_value); SET v2 = v2 + wdh; END WHILE; INSERT INTO image_view (image) VALUES (UNHEX(@full_row)); SET v1 = v1 + hdh; END WHILE; SELECT cast(image AS char) FROM image_view; DROP TABLE IF EXISTS image_view; END; // DELIMITER ;\n\nThe high-level principle used here is a form of image binning. I actually have\nanother blog post where I talk an algorithm I came up with for image binning.\nI\u2019ll give a quick summary of what this function does here::\n\n  * Divide the full image into \u201cchunks\u201d based on the desired width and height to display. This is loosely handled by the two outer while loops.\n  * For each chunk:\n\n    * Do more looping to compute the average R, G, and B values of all pixels in the chunk\n    * Get the corresponding VARBINARY sequence for this average RGB value (the helper function handles this part)\n    * Print out a character with this average\n\nIf you take a careful look, you\u2019ll notice there\u2019s a helper procedure called\nget_color_string. This takes in the computed average RGB and produces the\ncorresponding hexadecimal string for displaying that character. The code for\nthat is here:\n\n    \n    \n    DELIMITER // CREATE PROCEDURE get_color_string( IN r INT, IN g INT, IN b INT, OUT color_string VARCHAR(1000)) BEGIN DECLARE s_start VARCHAR(1000) DEFAULT '1B5B34383B323B'; DECLARE s_end VARCHAR(1000) DEFAULT '6D201B5B306D'; SET @rd1 = CONCAT('3', CAST(FLOOR((r%10)/1) AS CHAR)); SET @rd2 = CONCAT('3', CAST(FLOOR((r%100)/10) AS CHAR)); SET @rd3 = CONCAT('3', CAST(FLOOR((r%1000)/100) AS CHAR)); SET @gd1 = CONCAT('3', CAST(FLOOR((g%10)/1) AS CHAR)); SET @gd2 = CONCAT('3', CAST(FLOOR((g%100)/10) AS CHAR)); SET @gd3 = CONCAT('3', CAST(FLOOR((g%1000)/100) AS CHAR)); SET @bd1 = CONCAT('3', CAST(FLOOR((b%10)/1) AS CHAR)); SET @bd2 = CONCAT('3', CAST(FLOOR((b%100)/10) AS CHAR)); SET @bd3 = CONCAT('3', CAST(FLOOR((b%1000)/100) AS CHAR)); SET @result = CONCAT(s_start, @rd3, @rd2, @rd1, '3B'); SET @result = CONCAT(@result, @gd3, @gd2, @gd1, '3B'); SET @result = CONCAT(@result, @bd3, @bd2, @bd1, s_end); SET color_string = @result; END; // DELIMITER ;\n\nIs it ugly? Yes. Does it work? Also yes. If you have this code in a file, you\ncan load it into a MySQL session with\n\n    \n    \n    mysql> \\. displayimage.sql\n\nAnd, assuming you have images loaded in and ready to go, start displaying\nthem! If I have this image loaded into my database:\n\nThen I can display it in mysql with this function:\n\nTo get a higher-resolution view, just make the font size smaller and render\nthe image with a bigger width and height!\n\nVoil\u00e0, a picture in MySQL. Now, go uninstall preview, ok?\n\n  * mysql\n  * ansicolor\n  * color\n  * images\n\nShare this post on:\n\nShare this post via WhatsApp Share this post on Facebook Tweet this post Share\nthis post via Telegram Share this post on Pinterest Share this post via email\n\nBenjamin Dicken on Github Benjamin Dicken on LinkedIn Send an email to\nBenjamin Dicken Benjamin Dicken on Twitter Benjamin Dicken on YouTube\n\nCopyright \u00a9 2024 | All rights reserved\n\n", "frontpage": false}
