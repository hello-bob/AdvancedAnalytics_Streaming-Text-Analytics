{"aid": "40112512", "title": "TextCMS open source rich text delivery system", "url": "https://github.com/djordjev/text-cms", "domain": "github.com/djordjev", "votes": 1, "user": "djvukovic", "posted_at": "2024-04-22 08:47:44", "comments": 0, "source_title": "GitHub - djordjev/text-cms: Very simple CMS for delivering templated text", "source_text": "GitHub - djordjev/text-cms: Very simple CMS for delivering templated text\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ndjordjev / text-cms Public\n\n  * Notifications\n  * Fork 0\n  * Star 1\n\nVery simple CMS for delivering templated text\n\n### License\n\nMIT license\n\n1 star 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# djordjev/text-cms\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndjordjevGraphql (#39)Apr 21, 2024dd98c5f \u00b7 Apr 21, 2024Apr 21, 2024\n\n## History\n\n95 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Server (#22)| Mar 13, 2024  \n  \n### cpanel\n\n|\n\n### cpanel\n\n| Graphql (#39)| Apr 21, 2024  \n  \n### proto\n\n|\n\n### proto\n\n| Grpc (#36)| Apr 7, 2024  \n  \n### server\n\n|\n\n### server\n\n| Add tests (#37)| Apr 8, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Server tests (#23)| Mar 15, 2024  \n  \n### CODE_OF_CONDUCT.md\n\n|\n\n### CODE_OF_CONDUCT.md\n\n| Create CODE_OF_CONDUCT.md| Mar 30, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Oct 15, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Grpc (#36)| Apr 7, 2024  \n  \n### docker-compose.yml\n\n|\n\n### docker-compose.yml\n\n| Middleware (#24)| Mar 16, 2024  \n  \n## Repository files navigation\n\n# text-cms\n\n## Overview\n\nTextCMS is a personal project aimed at providing a customizable text content\nmanagement system (CMS) consisting of three main components:\n\n  1. Database (Redis)\n  2. Server (Go)\n  3. Control panel (Remix + SQLite)\n\nWith TextCMS, users can create text files within the system. Every file\nconsists of one or more variations. Every variation has a condition attached\nto it. When a user requests a file, they send data in the body of a POST\nrequest. The server then compares the sent data against conditions for each\nvariation and selects the most appropriate one to send back to the user. It\ncan be useful in cases where different clients need to consume the same text\nbut they have different styling/markdown systems (for example HTML/CSS vs\nmobile apps)\n\n## API\n\nServer supports following APIs:\n\n  1. Restfull -> Having environment variable PROTOCOL=rest\n  2. Graphql -> Having environment variable PROTOCOL=graphql\n  3. gRPC -> Having environment variable PROTOCOL=grpc\n\n## Development\n\nIn order to run the system locally all you need to have docker installed. Then\nin home directory run\n\n    \n    \n    docker compose up\n\nThat will build and run following containers:\n\n  1. Redis on port 6379\n  2. Server on port 3004\n  3. Control panel web application on port 3000. This container will have also local SQLite database but it's private to this service and not exposed\n\nWhen running the compose for the first time it will build containers and seed\ndata in databases. So you can just access control panel on\nhttp://localhost:3000. You can create account and after login you can create\nnew files and edit it's variations. Once file is created all it's variations\ntogether with conditions are stored in Redis database and should be accessed\nthrough api exposed by Go server. Files endpoint is prefixed with /file\nsegment. So for example if you create file on location /Folder1/NewFile.txt to\nget it's content you can fire POST request (curl, wget, postman) to localtion\nhttp//localhost:3004/file/Folder1/NewFile.txt. The body of request can be any\nJSON. If you have different variations server will return the first one\nmatching conditions.\n\nDatabase seed contains example file called Home.txt in root directory\n(http://localhost:3004/file/Home.txt). You can test different variations by\nsending those POST reqests:\n\n    \n    \n    { \"logged_in\": false }\n\nor\n\n    \n    \n    { \"logged_in\": true, \"username\": \"Test username\" }\n\n## Response format\n\nServer returns JSON array with text from the first variation matched. Array\nconsists of one or many objects having propery type. First level objects\nshould be condidered as text block and each one should be rendered below\nprevious one. Possible values of type propery are paragraph and heading.\nBeside it, it will have another property children which is an array of nodes.\n\n### Heading\n\nDifferent sizes of heading element. Beside type and children properties it\nwill have:\n\n  1. level property which is a number indicating size of heading (h1...h6)\n  2. align propery (optional) which can be left, center or right. If not present text should be left aligned.\n  3. children array having a list of nodes that should be rendered within current heading\n\n### Paragraph\n\n  1. Optional align property with the same meaning as in heading element.\n  2. children array with the same meaning as in heading element.\n\n### Nodes\n\nNode is a JSON object having text propery in simplest form. It's returned as\nelement of children property of heading or paragraph. Each node should be\nrendered one after another (inline) as child of parent element. Beside text\nproperty each node can optinally have one of following properties:\n\n  1. bold - optional boolean. Indicates if text should be bolded\n  2. underline - optional boolean. Indicates if text should be underlined\n  3. italic - optional boolean. Indicates if text should be italic\n  4. strikethrough - optional boolean. Indicates if text should be striked through\n  5. color - optional string. Hex value of text color.\n\n### Interactive nodes\n\nSome nodes might be clickable (links and buttons). Such nodes will have\nproperty click which is an object. If present it will have following\nproperties:\n\n  1. type - required, one of following: link, primary or secondary. Indicates styling of interactive element. Consuming application can\n  2. decide exact styling for each of those types\n  3. href - optional string. If the type is link it should contain URL where it should link. In case of buttons it can be omitted.\n  4. action - optional string. TextCMS just passes this value without any semantic meaning. It can be used to identify what button click\n  5. on button should do.\n\n## About\n\nVery simple CMS for delivering templated text\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Code of conduct\n\nCode of conduct\n\nActivity\n\n### Stars\n\n1 star\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * TypeScript 75.4%\n  * Go 22.4%\n  * JavaScript 1.8%\n  * Other 0.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
