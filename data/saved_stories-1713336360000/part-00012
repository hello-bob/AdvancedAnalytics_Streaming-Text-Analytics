{"aid": "40057454", "title": "Big Integer in Zig", "url": "https://nivethan.dev/devlog/big-integer-in-zig.html", "domain": "nivethan.dev", "votes": 2, "user": "liamswayne", "posted_at": "2024-04-16 21:30:26", "comments": 0, "source_title": "Big Integer in Zig", "source_text": "Big Integer in Zig\n\n\u2630\n\nnivethan.dev:~/\n\nTuesday | 16 APR 2024\n\n### for posterity\n\n### site\n\nabout\n\ncolonphon\n\npromise\n\nnow\n\n### quick access\n\ndevlog\n\nideas\n\njanuary\n\n### elsewhere\n\nshort stories\n\nessays\n\nblogroll\n\nweird places\n\nlink log\n\nrecommendations\n\n### my links\n\nprojects\n\ntutorials\n\ncheatsheets\n\nUV BASIC Manual\n\n### personal\n\nsocials\n\nbackgrounds\n\n### latest\n\nRunning VLC in the Browser\n\nRedirecting Output in NSH\n\nEVA Screen Save and Restore\n\nBurning in Subtitles with ffmpeg\n\nUpdating Tailscale\n\n### random\n\nCORS Preflight\n\nWkhtmltopdf and Vue\n\nGlobal in Node\n\nWhat is nvm\n\nThe Importance of Databases\n\n### tags\n\nAI (8)\n\nBASIC (6)\n\nEVA (4)\n\nNSH (1)\n\nUniVerse (1)\n\nadvent-of-code (14)\n\nalgorithms (5)\n\namphibia (2)\n\nanimated (5)\n\nanime (18)\n\napple (2)\n\narcheology (1)\n\nbasic (40)\n\nbeginners (1)\n\nblog (24)\n\nbloggg (1)\n\nbook-club (2)\n\nbooks (3)\n\ncheatsheet (21)\n\ncheatsheets (1)\n\ncomics (2)\n\nconcert (1)\n\ncorrelatives (1)\n\ndata-structures (1)\n\ndatabase (7)\n\neditor (3)\n\nemulators (1)\n\neva (2)\n\nfitness (1)\n\ngames (1)\n\ngemini (1)\n\nhacking (1)\n\nhashmaps (1)\n\nhistorical (1)\n\nhorror (3)\n\nhtml (4)\n\nhttp (2)\n\nideas (1)\n\ninstallation (3)\n\nishura (2)\n\nitaly (1)\n\njs (2)\n\nlanguages (3)\n\nlinux (14)\n\nlogs (1)\n\nmac (4)\n\nmanga (2)\n\nmanifestos (1)\n\nmarkdown (1)\n\nmike-flanagan (3)\n\nmonthlies (1)\n\nmovies (7)\n\nmultithreading (1)\n\nmultivalue (16)\n\nmusic (1)\n\nnginx (3)\n\nnightmares (3)\n\nnix (5)\n\nnixos (2)\n\nnsh (5)\n\nopenqm (1)\n\nos (2)\n\nparsing (1)\n\npick (19)\n\npoweruser (1)\n\nprinters (3)\n\nprogramming (2)\n\npromised (1)\n\nqemu (2)\n\nreacher (4)\n\nrecommendations (1)\n\nregex (3)\n\nresolutions (3)\n\nretrofuture (1)\n\nscarletdme (11)\n\nscifi (2)\n\nscrapbook (1)\n\nsearch (1)\n\nseraphim (2)\n\nsnippets (2)\n\nssh (1)\n\nssl (1)\n\nsveltekit (1)\n\nsysadmin (45)\n\ntamil (2)\n\ntech (1)\n\ntemplate-language (17)\n\nterminals (2)\n\ntest-file (1)\n\nthoughts (1)\n\ntrips (3)\n\ntui (2)\n\ntv (9)\n\nuniverse (21)\n\nweb (1)\n\nwebserver (2)\n\nwindows (6)\n\nwintegrate (3)\n\nworkouts (1)\n\nzig (11)\n\n[ previous ]\n\n[ next ]\n\n# Big Integer in Zig\n\nTitle:\n\nDate: 2023-10-25\n\nTags: zig\n\n#### Table of Contents\n\n  1. Learning to Add\n  2. Adding it All In\n  3. Pennies\n\nPreviously on Dragon Ball Z, ahem, I mean in my quest to start working on\nScarletDME with Zig I wanted to port my BigInt/BigNum/BigWhatever logic to use\nthe zig standard library.\n\nI previously got op_sadd working where I had scarletdme calling my zig\nfunction. This however was very much a test and wasn't even close to working.\n\nWhile trying to get this one function working I actually learned quite a bit\nabout zig and how hard it is to try and use a language that has no docs and\nmore importantly isn't friendly to someone who doesn't already have a rough\nidea of what they want to do. I'm curious how a beginner would use/learn zig\nbecause I don't see any real onramp. Ziglings and Ziglearn are fine resources\nbut I want tutorials and stackoverflow answers. I also want examples that\naren't just searching github. The struggle is real but I am also enjoying it.\n\n## Learning to Add\n\nThis is going to be some disparate thoughts but the core is that I found an\nexample of the zig-bn library which was made part of the zig standard library,\nhowever the example I was reading was out of date and so I had some trouble\nreading the source code and trying to get everything to mesh. I wanted to\nfirst write a test zig program that would just use big ints and add them up. I\nwasn't too worried yet about actually trying to incorporate it into\nscarletdme.\n\nThe example in question that I was working off of:\n\n\u21d2 zig-bn Github\n\nThis is quite out of date.\n\nThe current code as of 25 OCT 2023:\n\n    \n    \n    const std = @import(\"std\"); const Managed = std.math.big.int.Managed; pub fn main() !void { var gpa = std.heap.GeneralPurposeAllocator(.{}){}; var allocator = gpa.allocator(); var a = try Managed.init(allocator); var b = try Managed.init(allocator); try a.set(1990273423429836742364234234234); try b.set(1990273423429836742364234234234); try a.add(&a, &b); std.debug.print(\"{any}\\n\", .{a}); try a.mul(&a, &b); std.debug.print(\"{any}\\n\", .{a}); }\n\nYou can run this program without building it:\n\n    \n    \n    zig run main.zig\n\nThis should print:\n\n    \n    \n    3980546846859673484728468468468 7922376600022244436595253578743342006465362857288056755133512\n\nNow this program and the one on the github isn't drastically different but the\nsmall differences are a pain because of my own lack of knowledge. It doesn't\nhelp that I haven't really learned zig and I'm muddling through right now.\n\n## Adding it All In\n\nOnce I had a working add function, I started to work on getting ScarletDME to\nuse my addition. This was the most painful part as even though zig and C are\nsupposed to work together quite well, I still had issues at the boundary\npoints.\n\nThe biggest issue was how strings work in the two languages. In C, a string is\na a null terminated array. Zig has slices where it is a pointer and a length.\nIt also does have null terminated strings but I couldn't figure out why some\nthings worked and some things didn't. I'm going to post the code here without\nthe error handling as it ends up being way longer with that. I'll put the trys\nin but really it is all catch blocks that properly pass the error back up to\nScarletDME.\n\n    \n    \n    const std = @import(\"std\"); const Managed = std.math.big.int.Managed; const qm = @cImport({ @cInclude(\"qm.h\"); }); export fn op_sadd() void { var ok: bool = undefined; var s1: [1025]u8 = std.mem.zeroes([1025:0]u8); var s2: [1025]u8 = std.mem.zeroes([1025:0]u8); const arg2 = qm.e_stack - 1; ok = qm.k_get_c_string(arg2, &s2, 1024) > 0; qm.k_dismiss(); if (!ok) { qm.process.status = 2; return; } const arg1 = qm.e_stack - 1; ok = qm.k_get_c_string(arg1, &s1, 1024) > 0; qm.k_dismiss(); if (!ok) { qm.process.status = 2; return; } var gpa = std.heap.GeneralPurposeAllocator(.{}){}; var allocator = gpa.allocator(); var a = Managed.init(allocator) catch | err | {} defer a.deinit(); var b = Managed.init(allocator) catch | err | {} defer b.deinit(); a.setString(10,std.mem.sliceTo(&s1,0)) catch | err | {} b.setString(10,std.mem.sliceTo(&s2,0)) catch | err | {} a.add(&a, &b) catch | err | { const ans = a.toString(allocator,10,.lower) catch | err | {} const c_str = allocator.alloc(u8,ans.len+1) catch | err | {} defer allocator.free(c_str); @memset(c_str,0); @memcpy(c_str[0..ans.len],ans[0..]); const ret: [*c]const u8 = &c_str[0]; qm.process.status = 0; qm.k_put_c_string(ret, qm.e_stack); qm.e_stack = qm.e_stack + 1; return; }\n\n## Pennies\n\nThe first thing is the definations of s1. This sets what I think is a string\nbuffer that I make 1025 characters and I zero it out. I wish there was an\nescape character for 0 but I'm guessing this is difficult on purpose.\n\nThe next thing is that k_dismiss function. In the ScarletDME side, that\nfunction is really a define that does a stack pop using the ++ or --. This\ntype of movement isn't allowed in zig and so I had to rewrite the k_dismiss\nfunction so that it did it in such a way that zig would compile it properly.\nZig would compile the -- but it left it as an error.\n\nThe k_get_c_string worked out of the box which was nice but then when I went\nto use it in the big int functions of setString, it blew up on me with an\ninvalid character error. This didn't make much sense to me but I'm sure it's\nby design. Zig considers the entire 1025 character array as the string and so\nthe bigint function doesn't seem to know what to do with it. I had to call\nsliceTo to force the character array to be truncated so that the setString\nfunction accepted it.\n\nA weird thing is the .lower in the toString function. I get why it's there as\nchanging the number to a string requires the casing to be known. This is\nbecause the big int functions work on different bases. Just strange. I'm\ncuriouse what .lower really means and what the . is really doing in general.\nThe @ I can understand as referencing a builtin but the . seems to be doing\nsomething similar as well.\n\nThe last thing that was a pain to deal with was trying to pass the answer\nproperly back to ScarletDME. I needed to pass back a string with a null\ncharacter and so I had create one out of the zig string. This doesn't look\nright as it involves calling the allocator, setting the bytes and then copying\nthe zig string to the chunk of memory I just set up. I could make this a\nfunction but then I also need to handle the freeing of that memory.\n\nThis feels very much like something that should be built into the language and\nI'm pretty sure I'm doing someting wrong.\n\nThat pretty much was all the issues I ran into, this was largely just groping\naround the dark and involved looking at the zig source code and the\ndocumentation which wasn't that great. I did realize while reading that all\nthe string handling is in std.mem which I guess makes sense but was\nunexpected.\n\nA future goal is to write up a list of the all zig functions from std.mem, fs\nand os areas that might be useful. This will be helpful in doing things with\nzig even if I don't learn zig properly.\n\nOn a tangent, this hasn't filled me with confidence that using zig is worth\nit. I'm not sure anymore why exactly I want to use zig. I think learning a new\nlanguage is fun but this is quite troublesome. I think I'll truck ahead with\nporting things to zig and we'll see how implementing something from scratch\ngoes. Hopefully if I get better then it will start feeling better.\n\nI forgot to mention that the error handling is a shitshow right now. It looks\nlike garbage and I'm taking that to mean that I'm doing it wrong. I do like\nthe try and catch blocks a lot so I hope that there is a way to use it without\nthe error code infecting everything like it has above.\n\nthe wasted years, the wasted youth\n\n", "frontpage": false}
