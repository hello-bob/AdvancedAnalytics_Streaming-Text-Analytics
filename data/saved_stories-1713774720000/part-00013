{"aid": "40110632", "title": "Show HN: Fast Calendar Algorithms", "url": "https://github.com/cassioneri/eaf", "domain": "github.com/cassioneri", "votes": 1, "user": "cassioneri", "posted_at": "2024-04-22 01:02:26", "comments": 0, "source_title": "GitHub - cassioneri/eaf: Supplementary material to \"Euclidean Affine Functions and their Application to Calendar Algorithms\"", "source_text": "GitHub - cassioneri/eaf: Supplementary material to \"Euclidean Affine Functions\nand their Application to Calendar Algorithms\"\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ncassioneri / eaf Public\n\n  * Notifications\n  * Fork 1\n  * Star 28\n\nSupplementary material to \"Euclidean Affine Functions and their Application to\nCalendar Algorithms\"\n\n28 stars 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# cassioneri/eaf\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ncassioneriMerge pull request #3 from jsacchini/muen-implDec 21, 20239316a19 \u00b7\nDec 21, 2023Dec 21, 2023\n\n## History\n\n31 Commits  \n  \n### LICENSES\n\n|\n\n### LICENSES\n\n| Initial commit.| Sep 30, 2022  \n  \n### algorithms\n\n|\n\n### algorithms\n\n| Reorganise projects.| May 29, 2023  \n  \n### benchmarks\n\n|\n\n### benchmarks\n\n| Reorganise projects.| May 29, 2023  \n  \n### eaf\n\n|\n\n### eaf\n\n| Replace CMakeSettings with CMakePresets. Fix clang build.| Jun 4, 2023  \n  \n### paper\n\n|\n\n### paper\n\n| Add code for figures 12 and 13.| May 29, 2023  \n  \n### tests\n\n|\n\n### tests\n\n| Replace CMakeSettings with CMakePresets. Fix clang build.| Jun 4, 2023  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial commit.| Sep 30, 2022  \n  \n### CMakeLists.txt\n\n|\n\n### CMakeLists.txt\n\n| Address issue #1, upgrade benchmark (1.7.1) and boost (1_82_0).| Aug 22,\n2023  \n  \n### CMakePresets.json\n\n|\n\n### CMakePresets.json\n\n| Improve presets. Update README.md.| Jun 4, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Dec 21, 2023  \n  \n### c++now.png\n\n|\n\n### c++now.png\n\n| Add C++2023 talk.| Aug 22, 2023  \n  \n## Repository files navigation\n\n# EAF\n\nThis repository contains the supplementary material to:\n\nNeri C, Schneider L. \"Euclidean affine functions and their application to\ncalendar algorithms\". Softw Pract Exper. 2022;1-34. doi: 10.1002/spe.3172.\n\nIn particular, it contains instructions on how to build the code and the\narticle's errata.\n\nThis work has been presented at C++ Now 2023 and C++ on Sea 2023.\n\n## Table of Contents\n\nBuilding with CMake\n\n  * Command line\n  * Visual Studio IDE\n\nExecutables Dependencies Assembly snippets shown in the paper Other\nimplementations Errata\n\n# Building with CMake\n\nA list of CMakePresets is available. For instance, on Linux the preset\ngcc.debug.make builds in debug mode using gcc and make. On Windows\nmsvc.debug.ninja builds in debug mode using msvc and ninja. In general, preset\nnames have the form compiler.mode.builder where\n\n  * compiler is one of clang (Linux), clang-cl (Windows), gcc (Linux) or msvc (Windows);\n  * mode is one of debug, release or release-symbols;\n  * builder is one of make (Linux) or ninja.\n\nTip: cmake --list-presets shows the complete list available presets.\n\nTo build everything, on the top level directory, run:\n\n    \n    \n    $ cmake --preset <preset-name> $ cmake --build build/<preset-name>\n\n## Visual Studio IDE\n\nMake sure you have the cmake tools installed and, optionally, clang tools if\nyou wish to build with clang-cl. Simply open the top level folder and select\none of the available presets.\n\n# Executables\n\nThey are created in the build/<preset-name>/bin directory and the instructions\nbelow assumes this is the current working directory.\n\nName| Description  \n---|---  \nalgorithm_NN_32| Paper's algorithm number NN for 32-bits  \nalgorithm_NN_64| Paper's algorithm number NN for 64-bits  \nalgorithm_tests| Tests all third party algorithms.  \neaf_tests| Exhaustive tests for all 32-bits algorithms in the paper  \nexample_NN| Paper's example number NN  \nfast_eaf| Calculates fast EAF coefficients  \nfigure_NN| Algorithm of figure NN  \ninfo| Display range limits of all algorithms in the paper  \nto_date| Benchmark of to_date functions  \nto_rata_die| Benchmark of to_rata_date functions  \n  \nAlgorithms that calculate date from rata die (algorithm_NN_{32|64} for NN \u2208\n{01, 03, 05} and figure_12) take rata die at command line. For instance:\n\n    \n    \n    $ ./algorithm_03_32 738734 rata die = 738734 date = 2022 10 1\n\nAlgorithms that calculate rata die from date (algorithm_NN_{32|64} for NN \u2208\n{02, 04, 06} and figure_13) take year month day at command line. For instance:\n\n    \n    \n    $ ./algorithm_04_32 2022 10 1 rata die = 738734 date = 2022 10 1\n\nExamples, tests, benchmarks and info do not take compulsory arguments at\ncommand line. For instance:\n\n    \n    \n    $ ./example_10 Testing: (5 * N_Y + 461) / 153 == (2141 * N_Y + 197913) /2^16, for all N_Y in [0, 734[. Using signed integers... Pass. Using unsigned integers... Pass.\n\nfast_eaf takes rounding a b d k at command line. For instance (see Example\n10):\n\n    \n    \n    $ ./fast_eaf down 5 461 153 16 a' = 2141 b' = 197913 d' = 65536 k = 16 upper bound = 734\n\nTests (algorithm_tests and eaf_tests) uses Google Test and allows this\nlibrary's usual options (e.g., --help). The implementations of our own\nalgorithms are exhaustively tested on their whole range of validity (spanning\nmillions of years). Implementations of competitor algorithms are tested on a\nrange spanning 800 years centered at 1 January 1970.\n\nto_date and to_rata_die use Google Benchmark and allow this library's usual\noptions (e.g., --help).\n\n# Dependencies\n\nThe following third part libraries are automatically downloaded at the time of\nthe first build:\n\n  1. Google Benchmark;\n  2. Google Test;\n  3. Boost Multiprecision.\n\n# Assembly snippets shown in the paper\n\nHere is a list of Compiler Explorer links for each assembly snippet shown in\nthe paper:\n\n  * Figure 5: https://godbolt.org/z/zT4xdzTox\n  * Figure 6: https://godbolt.org/z/zY87WGz3v\n  * Figure 7:\n\n    * Assembly generation: https://godbolt.org/z/YdfMjGvMd\n    * Left timeline: https://godbolt.org/z/j9PWvP4qG\n    * Right timeline: https://godbolt.org/z/3EvPodxo8\n  * Figure 8:\n\n    * Assembly generation: https://godbolt.org/z/KvqqYd71Y\n    * Left timeline: https://godbolt.org/z/WKEn75qfY\n    * Right timeline: https://godbolt.org/z/sfMcc6z9j\n  * Figure 9:\n\n    * Assembly generation: https://godbolt.org/z/94TYPd1Tn\n    * Left timeline: https://godbolt.org/z/WYbz1xY8a\n    * Right timeline: https://godbolt.org/z/e8Kjbsfd7\n  * Figure 10: https://godbolt.org/z/coM5esxP4\n\n# Other implementations\n\nLanguage| Author| Link  \n---|---|---  \nC# (part of .NET7)| Sergei Pavlov| PR72712 and PR73277  \nRust| Nuutti Kotivuori| https://github.com/nakedible/datealgo-rs  \nSPARK/Ada| Jorge Luis Sacchini| 04e48784 and e24cb651  \n  \n# Errata\n\nPage numbers below refer to the PDF file.\n\n  * Page 2, footnote. \"2937 and 2821 BC.1\" should read \"2937 and 2821 BC. (See Richards.1)\"\n  * Page 3, line 43. \"does not involve strength reduction.\" should read \"since it involves more than strength reduction.\"\n  * Page 11, caption of Figure 4. \"On the right, the Gregorian calendar\" should read \"On the right, the proleptic Gregorian calendar\".\n  * Page 14, line 16. \"b' = 2928\" should read \"b' = -2928\".\n  * Page 18, line 5. \"x86_64, the mov instruction\" should read \"the x86_64's mov instruction\".\n  * Page 22, line 29. \"n = q\u2219q + r\" should read \"n = d\u2219q + r\".\n  * Page 23, caption of Figure 12. \"at least\" should read \"at least, Nu\u2208[-12687428, 11248737]. (The range of validity is much larger though.)\"\n  * Page 25, line 15. \" f(g(q)) \u2265 f(g(q) - 1)\" should read \" f(g(q) - 1) \u2265 f(g(q))\".\n  * Page 26, line 20. \"q + 1f(f*(q + 1)) \u2264 f(n)\" should read \"q + 1 = f(f*(q + 1)) \u2264 f(n)\".\n  * Page 28, line 23. \"sometimes it is Theorem 3\" should read \"sometimes it is Theorem 2\".\n  * Page 28, line 25. \"Q(N)\" should read \"Q(n)\".\n  * Page 29, line 11. \"obtained in in Cavagnino and Werbrouck\" should read \"obtained in Cavagnino and Werbrouck\".\n  * Page 29, line 20. \"2k - 2k/%d + d\" should read \"2k - 2k%d + d\".\n\n## About\n\nSupplementary material to \"Euclidean Affine Functions and their Application to\nCalendar Algorithms\"\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n28 stars\n\n### Watchers\n\n8 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * C++ 95.1%\n  * CMake 4.9%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
