{"aid": "40281345", "title": "Unleash the era of digital conversion with 2pdf.io", "url": "https://2pdf.io/Home", "domain": "2pdf.io", "votes": 1, "user": "movigos", "posted_at": "2024-05-07 01:33:42", "comments": 0, "source_title": "2PDF - API Documentation", "source_text": "2PDF - API Documentation\n\nGet API KEY\n\n## Overview\n\nThe primary goal of this project is to make the service extremely fast in\nprocessing and the most cost-effective among existing alternatives. We\ncontinue to work on improving and enriching the service, and we have many\nideas on how to expand the service to make it even more convenient and higher\nquality\n\nPDF creation transforms from a cumbersome process into an easy and enjoyable\ntask for application developers with 2PDF. Converting HTML and URLs into PDFs\nor images happens instantly, ensuring quality and speed without compromise.\n\nThis means that the cost of 1 second of computation (based on the average\nduration of the process), with a file size of 100Kb (based on the average\nresponse size), will be only $0.00118686. Therefore, for $1, you can convert\n~843 corresponding files\n\n### Speed and Quality\n\nOur 2PDF service can convert HTML to PDF in less than 2 seconds! For example,\nthe website google.com is converted in approximately 0.5-0.6 seconds. Thanks\nto the use of advanced rendering engines, we guarantee that your documents\nwill be converted quickly and meet high standards of quality.\n\n### Flexibility in Settings\n\n2PDF offers extensive options for customizing output documents. You can manage\nvarious parameters such as page orientation, dimensions, margins, and much\nmore to achieve the perfect result.\n\n### Security and Confidentiality\n\nAll files processed through 2PDF are not stored on our servers. They are\nprocessed in the cloud and immediately sent to the client, ensuring a high\nlevel of data confidentiality and security.\n\n### Responsible Pricing Policy\n\nAll charges we incur directly support the cloud server capacities needed for\nour clients' operations. For an operation that lasts about 1 second, the cost\nis $0.00018686 per second and $0.01 per megabyte of traffic.\n\n### Technology and Development\n\nOur service is built on a serverless cloud architecture, enhancing flexibility\nand scalability while minimizing overhead. We utilize modern programming\nlanguages such as Rust, C#, JavaScript, and C++ to ensure high performance and\noptimization. This diverse technology stack allows us to efficiently handle a\nwide range of document conversion tasks.\n\n### Who Would Benefit Most from 2PDF?\n\n2PDF is particularly valuable for developers, IT professionals, and businesses\nthat require efficient document handling and conversion capabilities. Legal\nprofessionals, educational institutions, marketing teams, and e-commerce\nplatforms will find 2PDF essential for converting various document types like\nlegal documents, course materials, promotional materials, and online catalogs\ninto PDFs.\n\n### Types of Documents and Use Cases\n\n  * Legal and Administrative: Contracts, case files, applications, and forms can be converted seamlessly, maintaining the integrity and layout of original documents.\n  * Education: Convert educational materials such as lecture notes, assignments, and presentations into PDF format for easy distribution and printing.\n  * Marketing and Sales: Create promotional PDFs from HTML campaign pages, convert sales presentations and market analyses.\n  * E-commerce: Generate PDF invoices, receipts, or product catalogs directly from HTML pages.\n\nExperience the advantages of 2PDF today and enhance the efficiency of your\nwork with PDFs and images. Speed, affordability, security, and quality\u2014all\navailable in one convenient solution. If you have any questions or need\nassistance, our team is always ready to help. Make creating PDFs and images\neasy with 2PDF!\n\n## Quick Start\n\nHere are provided basic examples of POST requests for converting the website\nhttps://google.com into a PDF document, demonstrated across various\nprogramming languages\n\n    \n    \n    curl -X POST \"https://api.2pdf.io/v1/url/pdf\" \\ -H \"Authorization: Bearer 84dOMKwlVqtW3Q1k\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"source\": \"https://github.com\", \"grayscale\": \"\", \"page_size\": \"A4\", \"image_quality\": 50 }'\n    \n    \n    import requests response = requests.post('https://api.2pdf.io/v1/url/pdf', headers={'Authorization': 'Bearer 84dOMKwlVqtW3Q1k'}, json={\"source\": \"https://github.com\", \"grayscale\": \"\", \"page_size\": \"A4\", \"image_quality\": 50}) print(response.content)\n    \n    \n    fetch('https://api.2pdf.io/v1/url/pdf', { method: 'POST', headers: { 'Authorization': 'Bearer 84dOMKwlVqtW3Q1k', 'Content-Type': 'application/json' }, body: JSON.stringify({ source: \"https://github.com\", grayscale: \"\", page_size: \"A4\", image_quality: 50 }) }) .then(response => { if (!response.ok) { throw new Error('Network response was not ok'); } return response.json(); }) .then(json => { console.log(json); }) .catch(error => { console.error('There has been a problem with your fetch operation:', error); });\n    \n    \n    $apiKey = '84dOMKwlVqtW3Q1k'; $url = 'https://api.2pdf.io/v1/url/pdf'; $data = array( 'source' => 'https://github.com', 'grayscale' => '', 'page_size' => 'A4', 'image_quality' => 50 ); $ch = curl_init($url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'Authorization: Bearer ' . $apiKey, 'Content-Type: application/json' )); curl_setopt($ch, CURLOPT_POST, true); curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data)); $response = curl_exec($ch); if (curl_errno($ch)) { echo 'Error: ' . curl_error($ch); } else { echo $response; curl_close($ch); }\n    \n    \n    var apiKey = \"84dOMKwlVqtW3Q1k\"; var url = \"https://api.2pdf.io/v1/url/pdf\"; using (var client = new HttpClient()) { client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", apiKey); var data = new { source = \"https://github.com\", grayscale = \"\", page_size = \"A4\", image_quality = 50 }; var content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(data), Encoding.UTF8, \"application/json\"); var response = await client.PostAsync(url, content); if (response.IsSuccessStatusCode) { var responseContent = await response.Content.ReadAsStringAsync(); Console.WriteLine(responseContent); } else { Console.WriteLine($\"Error: {response.StatusCode}\"); } }\n    \n    \n    var apiKey = \"84dOMKwlVqtW3Q1k\"; var url = \"https://api.2pdf.io/v1/url/pdf\"; HttpClient client = HttpClient.newHttpClient(); HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(url)) .header(\"Authorization\", \"Bearer \" + apiKey) .header(\"Content-Type\", \"application/json\") .POST(BodyPublishers.ofString(\"{\" + \"\\\"source\\\": \\\"https://github.com\\\",\" + \"\\\"grayscale\\\": \\\"\\\",\" + \"\\\"page_size\\\": \\\"A4\\\",\" + \"\\\"image_quality\\\": 50\" + \"}\")) .build(); client.sendAsync(request, BodyHandlers.ofString()) .thenApply(HttpResponse::body) .thenAccept(System.out::println) .join();\n    \n    \n    fetch('https://api.2pdf.io/v1/url/pdf', { method: 'POST', headers: { 'Authorization': 'Bearer 84dOMKwlVqtW3Q1k', 'Content-Type': 'application/json' }, body: JSON.stringify({ source: \"https://github.com\", grayscale: \"\", page_size: \"A4\", image_quality: 50 }) }) .then(response => { if (!response.ok) { throw new Error('Network response was not ok'); } return response.json(); }) .then(json => { console.log(json); }) .catch(error => { console.error('There has been a problem with your fetch operation:', error); });\n\n## Authentication\n\nThe 2PDF API requires API keys for request authentication. You can acquire\nyour API key on the API Key page\n\nYour API key functions similarly to a password - please ensure its security\n\nAPI authentication is executed through the Bearer Token method within the\nAuthorization header. Every API request must be conducted over HTTPS\n\nAuthorization: Bearer\n\nTo get API KEY you should log in and order a new API KEY by pressing \"Get\nproduction licence\" button in left side Profile area or here\n\nGet API KEY\n\n## Pricing\n\nImmediately after registration, you will receive a Trial API Key which can be\nused for 30 documents to facilitate testing and trials\n\nFree\n\n  * Sign in required\n\n  * 30 docs limit\n\n  * No credit card needed\n\nGet Api Key\n\nPay-As-You-Go\n\n  * No limit on documents\n\n  * $0.00018686 / second of computation *\n\n  * $0.01 / megabyte traffic\n\n  * PDF documents\n\n  * Image files\n\nRefill balance\n\n## Support\n\nIf you have any questions or would like to discuss potential collaboration,\nplease do not hesitate to reach out to us. We are open to various proposals\nand always ready to assist. Our team will respond to your inquiries promptly.\n\nSend us an email at: support@2pdf.io\n\n## PDF from URL\n\nThis POST interface enables the creation of a PDF document from a web address\n\nPOST https://api.2pdf.io /v1/url/pdf\n\nRequest headers:\n\nAuthorization: Bearer 84dOMKwlVqtW3Q1k Content-Type: application/json\n\nRequest body:\n\n    \n    \n    { \"source\": \"https://google.com\", \"grayscale\": \"\", \"page_size\": \"A4\", \"image_quality\": 50 }\n\nParameter| Type| Default| Description  \n---|---|---|---  \nsource| string| required| A valid web address. Can be with or without\nhttps://, www.  \ndpi| int32| 96| Determines image quality and size in a PDF  \nimage_quality| int32| 94| Jpeg compressing images use this quality  \npage_size| string| A4| Set paper size to: A4, Letter, etc...  \nmargin_bottom| string| 10| Set the page bottom margin (mm)  \nmargin_left| string| 10| Set the page left margin (mm)  \nmargin_right| string| 10| Set the page right margin (mm)  \nmargin_top| string| 10| Set the page top margin (mm)  \norientation| string| Portrait| Set orientation to Landscape or Portrait  \ntitle| string| The title of the generated pdf file  \nno_background| Do not print background  \nno_images| Do not load or print images  \ngrayscale| PDF will be generated in grayscale  \n  \nResponse:\n\nContent-Type: application/pdf\n\nErrors:\n\nCode| Status| Description  \n---|---|---  \n200| OK| Request successful  \n400| Bad request| Request was invalid  \n401| Unauthorized| You are unauthorized or API_KEY is not valid  \n404| Not found| Resource was not found  \n422| Unprocessable Entity| Cannot perform the operation with the current\nrequest parameters  \n500| Internal server error| Server error, try again later or contact support  \n  \n## PDF from URL\n\nThis GET interface enables the creation of a PDF document from a web address\n\nGET https://api.2pdf.io /v1/url/pdf/?api_key= 84dOMKwlVqtW3Q1k &source= {URL}\n\nQuery string:\n\nParameter| Default| Description  \n---|---|---  \napi_key| required| Your API key functions similarly to a password - please\nensure its security  \nsource| required| A valid web address. Can be with or without https://, www.  \ndpi| 96| Determines image quality and size in a PDF  \nimage_quality| 94| Jpeg compressing images use this quality  \npage_size| A4| Set paper size to: A4, Letter, etc...  \nmargin_bottom| 10| Set the page bottom margin (mm)  \nmargin_left| 10| Set the page left margin (mm)  \nmargin_right| 10| Set the page right margin (mm)  \nmargin_top| 10| Set the page top margin (mm)  \norientation| Portrait| Set orientation to Landscape or Portrait  \ntitle| The title of the generated pdf file  \nno_background| Do not print background  \nno_images| Do not load or print images  \ngrayscale| PDF will be generated in grayscale  \n  \nResponse::\n\nContent-Type: application/pdf\n\n## PDF from HTML\n\nThis POST interface enables the creation of a PDF document from a HTML content\n(or text)\n\nPOST https://api.2pdf.io /v1/html/pdf\n\nRequest headers::\n\nAuthorization: Bearer 84dOMKwlVqtW3Q1k Content-Type: application/json\n\nRequest body::\n\n    \n    \n    { \"source\": \"<p>This is 2PDF test document!</p>\", \"grayscale\": \"\", \"page_size\": \"A4\", \"image_quality\": 50 }\n\nParameter| Type| Default| Description  \n---|---|---|---  \nsource| string| required| HTML content or text  \ndpi| int32| 96| Determines image quality and size in a PDF  \nimage_quality| int32| 94| Jpeg compressing images use this quality  \npage_size| string| A4| Set paper size to: A4, Letter, etc...  \nmargin_bottom| string| 10| Set the page bottom margin (mm)  \nmargin_left| string| 10| Set the page left margin (mm)  \nmargin_right| string| 10| Set the page right margin (mm)  \nmargin_top| string| 10| Set the page top margin (mm)  \norientation| string| Portrait| Set orientation to Landscape or Portrait  \ntitle| string| The title of the generated pdf file  \nno_background| Do not print background  \nno_images| Do not load or print images  \ngrayscale| PDF will be generated in grayscale  \n  \nResponse::\n\nContent-Type: application/pdf\n\nErrors:\n\nCode| Status| Description  \n---|---|---  \n200| OK| Request successful  \n400| Bad request| Request was invalid  \n401| Unauthorized| You are unauthorized or API_KEY is not valid  \n404| Not found| Resource was not found  \n422| Unprocessable Entity| Cannot perform the operation with the current\nrequest parameters  \n500| Internal server error| Server error, try again later or contact support  \n  \n## Image from URL\n\nThis POST interface enables the creation of a Image from a web address\n\nPOST https://api.2pdf.io /v1/url/image\n\nRequest headers::\n\nAuthorization: Bearer 84dOMKwlVqtW3Q1k Content-Type: application/json\n\nRequest body::\n\n    \n    \n    { \"source\": \"https://google.com\", \"grayscale\": \"\", \"page_size\": \"A4\", \"image_quality\": 50 }\n\nParameter| Type| Default| Description  \n---|---|---|---  \nsource| string| required| A valid web address. Can be with or without\nhttps://, www.  \ncrop_h| int32| Set height for cropping  \ncrop_w| int32| Set width for cropping  \ncrop_x| int32| Set x coordinate for cropping  \ncrop_y| int32| Set y coordinate for cropping  \nformat| string| PNG| Output file format  \nwidth| int32| 1024| Set screen width  \nheight| int32| 0| Set screen height (default is calculated from page content)  \nquality| int32| 89| Output image quality (between 0 and 100)  \n  \nResponse::\n\nContent-Type: application/png\n\nErrors:\n\nCode| Status| Description  \n---|---|---  \n200| OK| Request successful  \n400| Bad request| Request was invalid  \n401| Unauthorized| You are unauthorized or API_KEY is not valid  \n404| Not found| Resource was not found  \n422| Unprocessable Entity| Cannot perform the operation with the current\nrequest parameters  \n500| Internal server error| Server error, try again later or contact support  \n  \n## Image from URL\n\nThis GET endpoint enables the creation of a Image from a web address\n\nGET https://api.2pdf.io /v1/url/image/?api_key= 84dOMKwlVqtW3Q1k &source=\n{URL}\n\nQuery string:\n\nParameter| Default| Description  \n---|---|---  \napi_key| required| Your API key functions similarly to a password - please\nensure its security  \nsource| required| A valid web address. Can be with or without https://, www.  \ncrop_h| Set height for cropping  \ncrop_w| Set width for cropping  \ncrop_x| Set x coordinate for cropping  \ncrop_y| Set y coordinate for cropping  \nformat| PNG| Output file format  \nwidth| 1024| Set screen width  \nheight| 0| Set screen height (default is calculated from page content)  \nquality| 89| Output image quality (between 0 and 100)  \n  \nResponse::\n\nContent-Type: application/png\n\n## Image from HTML\n\nThis POST interface enables the creation of a Image from a HTML content (or\ntext)\n\nPOST https://api.2pdf.io /v1/html/image\n\nRequest headers::\n\nAuthorization: Bearer 84dOMKwlVqtW3Q1k Content-Type: application/json\n\nRequest body::\n\n    \n    \n    { \"source\": \"<p>This is 2PDF test document!</p>\", \"grayscale\": \"\", \"page_size\": \"A4\", \"image_quality\": 50 }\n\nParameter| Type| Default| Description  \n---|---|---|---  \nsource| string| required| A valid web address. Can be with or without\nhttps://, www.  \ncrop_h| int32| Set height for cropping  \ncrop_w| int32| Set width for cropping  \ncrop_x| int32| Set x coordinate for cropping  \ncrop_y| int32| Set y coordinate for cropping  \nformat| string| PNG| Output file format  \nwidth| int32| 1024| Set screen width  \nheight| int32| 0| Set screen height (default is calculated from page content)  \nquality| int32| 89| Output image quality (between 0 and 100)  \n  \nResponse::\n\nContent-Type: application/png\n\nErrors:\n\nCode| Status| Description  \n---|---|---  \n200| OK| Request successful  \n400| Bad request| Request was invalid  \n401| Unauthorized| You are unauthorized or API_KEY is not valid  \n404| Not found| Resource was not found  \n422| Unprocessable Entity| Cannot perform the operation with the current\nrequest parameters  \n500| Internal server error| Server error, try again later or contact support  \n  \nGet API KEY\n\n", "frontpage": false}
