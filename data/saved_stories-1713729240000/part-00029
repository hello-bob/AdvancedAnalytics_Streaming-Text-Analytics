{"aid": "40105041", "title": "Xgo trace: a powerful visualization tool in go", "url": "https://blog.xhd2015.xyz/posts/xgo-trace_a-powerful-visualization-tool-in-go/", "domain": "xhd2015.xyz", "votes": 1, "user": "xhd2015", "posted_at": "2024-04-21 12:06:58", "comments": 0, "source_title": "xgo trace: a powerful visualization tool in go", "source_text": "xgo trace: a powerful visualization tool in go | Blogs of xhd2015\n\nPosts\n\n# xgo trace: a powerful visualization tool in go\n\nApril 21, 2024\n\n# Overview\n\nXgo has a set of tools to help go developers write unit test faster and\neasier.\n\nThese tools include:\n\n  * Trace\n  * Mock\n  * Trap\n\nThis blog introduces the Trace tool.\n\nIn case you don\u2019t know, the xgo project is at https://github.com/xhd2015/xgo.\n\n# About the trace\n\nThe trace in xgo can be used to visualize execution of a go program.\n\nIn some cases, this can replace the debugger, reducing the effort to find a\nbug.\n\n# The problem\n\nWhen starting with a new strange project, we cannot quickly get a picture of\nwhat the whole program do under the hood.\n\nIt\u2019s hard to break down the details by just running some tests and observing\nthe results.\n\nFortunately, this will never be the case in xgo, which brings a trace utility\nto address this issue.\n\nTo demonstrate how trace helps us understand code quickly, I\u2019ll start with a\nrandom project asked by a reddit user the other day, which can be found at\nhttps://www.reddit.com/r/golang/s/RpEtEApIUj.\n\n# Clone the repo and run some tests\n\nThe project chosen is pocketbase.\n\nTo get started, let\u2019s follow these steps:\n\n  1. Clone it\n\n    \n    \n    git clone https://github.com/pocketbase/pocketbase.git cd pocketbase\n\n  2. Run a top level test of apis/backup_test.go\n\n    \n    \n    go test -v -run TestBackupsList ./apis\n\nOutput:\n\n    \n    \n    === RUN TestBackupsList === PAUSE TestBackupsList === CONT TestBackupsList === RUN TestBackupsList/unauthorized === RUN TestBackupsList/authorized_as_auth_record === RUN TestBackupsList/authorized_as_admin_(empty_list) === RUN TestBackupsList/authorized_as_admin --- PASS: TestBackupsList (0.83s) --- PASS: TestBackupsList/unauthorized (0.23s) --- PASS: TestBackupsList/authorized_as_auth_record (0.29s) --- PASS: TestBackupsList/authorized_as_admin_(empty_list) (0.08s) --- PASS: TestBackupsList/authorized_as_admin (0.23s) PASS ok github.com/pocketbase/pocketbase/apis 2.483s\n\nFine, all goes well, let\u2019s visualize the stack trace of the above tests.\n\n# First attempt to use trace\n\nXgo trace comes with zero dependency, this is dedicated as you do not have to\nmodify anything in your project.\n\nHowever a minimal installation of xgo is required:\n\n    \n    \n    go install github.com/xhd2015/xgo/cmd/xgo@latest\n\nThen, just replace go test with xgo test, and add a --strace flag(abbrev. for\nstack trace):\n\n    \n    \n    xgo test -v -run TestBackupsList --strace ./apis\n\nOutput:\n\n    \n    \n    xgo is taking a while to setup, please wait... === RUN TestBackupsList === PAUSE TestBackupsList === CONT TestBackupsList === RUN TestBackupsList/unauthorized === RUN TestBackupsList/authorized_as_auth_record === RUN TestBackupsList/authorized_as_admin_(empty_list) === RUN TestBackupsList/authorized_as_admin --- PASS: TestBackupsList (1.17s) --- PASS: TestBackupsList/unauthorized (0.35s) --- PASS: TestBackupsList/authorized_as_auth_record (0.35s) --- PASS: TestBackupsList/authorized_as_admin_(empty_list) (0.13s) --- PASS: TestBackupsList/authorized_as_admin (0.33s) PASS ok github.com/pocketbase/pocketbase/apis 3.196s\n\nThe generated stack trace is one json file per test:\n\n    \n    \n    $ ls ./apis/TestBackupsList authorized_as_admin.json authorized_as_auth_record.json authorized_as_admin_(empty_list).json unauthorized.json\n\nVisualize the test named TestBackupsList/unauthorized:\n\n    \n    \n    $ xgo tool trace apis/TestBackupsList/unauthorized.json Server listen at http://localhost:7070\n\nAnd the browser automatically opens up, showing:\n\nBingo! We get the stack trace... visualized!\n\n# Try to understand the code with the stack trace\n\nAs shown above in the stack trace screenshot:\n\n  * in the left side is the call tree, each item represents a function entry, including:\n\n    * a colored rectangle before each item\n\n      * navy indicates the function returned normally\n      * red indicates the function returned an error\n    * a greyed time to indicate the duration of this call\n  * in the right side is the selected function\u2019s package path, request and response\n\n    * a VSCode icon next to function name\n    * when clicked, will open vscode and locate to the position where the function is defined\n\nAnd for this specific case, we can see there is a tree of red rectangles,\nmeaning something is wrong there.\n\nSince function usually bubbles error bottom up, we can directly locate the\nroot cause of this error:\n\nThis function literally says:\n\n    \n    \n    error:The request requires valid admin authorization token to be set.\n\nOK, so let\u2019s click the VSCode icon to find out why. Here is the code\napis/middlewares.go#L116:\n\n    \n    \n    // RequireAdminAuth middleware requires a request to have // a valid admin Authorization header. func RequireAdminAuth() echo.MiddlewareFunc { return func(next echo.HandlerFunc) echo.HandlerFunc { return func(c echo.Context) error { <--- located to this line admin, _ := c.Get(ContextAdminKey).(*models.Admin) if admin == nil { return NewUnauthorizedError(\"The request requires valid admin authorization token to be set.\", nil) } return next(c) } } }\n\nThat is so obvious, the line admin, _ :=\nc.Get(ContextAdminKey).(*models.Admin) just returned nil, so the error pops\nup.\n\nSo there must be somewhere a *models.Admin is injected to the context, and by\nlooking at the stack trace, we find this func:\n\nLet\u2019s look into its code by clicking the VSCode icon, which leads us to\napis/middlewares.go#L219:\n\n    \n    \n    func LoadAuthContext(app core.App) echo.MiddlewareFunc { return func(next echo.HandlerFunc) echo.HandlerFunc { return func(c echo.Context) error { <--- located to this line token := c.Request().Header.Get(\"Authorization\") if token == \"\" { return next(c) } // the schema is not required and it is only for // compatibility with the defaults of some HTTP clients token = strings.TrimPrefix(token, \"Bearer \") ... switch tokenType { case tokens.TypeAdmin: ... if err == nil && admin != nil { c.Set(ContextAdminKey, admin) } ... } } }\n\nObviously, it is this func\u2019s responsibility to parse authorization header and\ninject a *models.Admin into the context.\n\nSo now we know this basically tests the scenario where the incoming user is\nnot an appropriate admin but requires doing admin-only operation. Thus it\nshould fail.\n\n# Compared with traditional stack trace\n\nThe usual stack trace generated by the runtime is a snapshot of the program\nwhen trace is generated, thus it\u2019s missing full footprints of the program.\n\nBesides, the stack trace generated by by runtime does not resolve values\ndeeply. Only hex encoded values are shown.\n\nWhile xgo generate nearly full lifetime of a function execution trace, and\neach step contains a detailed request and response record. That makes them\nmuch different.\n\n# Summary\n\nSo through this simple example we have examined how the xgo stack trace can\nhelp when we are facing new project, the above example stack trace can be\nfound at https://blog.xhd2015.xyz/trace-pocketbase.html.\n\nBut the benefit is not only understanding new things quickly. It could also\neliminate the need to use a debugger like delve.\n\nUsing devle to debug the program is sometimes tedious if the code contains\nmany level of indirections. But xgo reveals all compile-time indirections to\ntheir implementations, which means you can get a real footprint of your\nprogram, and possibly finding the bottleneck of your program by looking at the\ncost of each step.\n\nThat\u2019s all, thanks for reading! You can leave a comment at\nhttps://github.com/xhd2015/xgo if you\u2019d like to discuss. And if you find this\nproject useful, please leave a star so more people can see it!\n\n\u00a9 Blogs of xhd2015 2024\n\n", "frontpage": false}
