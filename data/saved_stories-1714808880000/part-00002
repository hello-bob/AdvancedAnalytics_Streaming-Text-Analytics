{"aid": "40253743", "title": "The Goodyear Massively Parallel Processor", "url": "https://en.wikipedia.org/wiki/Goodyear_MPP", "domain": "wikipedia.org", "votes": 2, "user": "cokernel_hacker", "posted_at": "2024-05-04 00:19:00", "comments": 0, "source_title": "Goodyear MPP", "source_text": "Goodyear MPP - Wikipedia\n\nJump to content\n\nSearch\n\nWiki Loves Earth\n\nPhotograph nature for Wikipedia and win!\n\n# Goodyear MPP\n\n  * Italiano\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n\nEdit links\n\nFrom Wikipedia, the free encyclopedia\n\nGoodyear Massively Parallel Processor (MPP)The MPP  \n---  \nManufacturer| Goodyear Aerospace  \nIntroduced| 1983  \nDiscontinued| 1991  \nType| Supercomputer  \nProcessor| 16,384 processing elements (PEs)  \nMemory| 32 MB Staging Memory  \n  \nThe Goodyear Massively Parallel Processor (MPP) was a massively parallel\nprocessing supercomputer built by Goodyear Aerospace for the NASA Goddard\nSpace Flight Center. It was designed to deliver enormous computational power\nat lower cost than other existing supercomputer architectures, by using\nthousands of simple processing elements, rather than one or a few highly\ncomplex CPUs. Development of the MPP began circa 1979; it was delivered in May\n1983, and was in general use from 1985 until 1991.\n\nIt was based on Goodyear's earlier STARAN array processor, a 4x256 1-bit\nprocessing element (PE) computer. The MPP was a 128x128 2-dimensional array of\n1-bit wide PEs. In actuality 132x128 PEs were configured with a 4x128\nconfiguration added for fault tolerance to substitute for up to 4 rows (or\ncolumns) of processors in the presence of problems. The PEs operated in a\nsingle instruction, multiple data (SIMD) fashion\u2014each PE performed the same\noperation simultaneously, on different data elements, under the control of a\nmicroprogrammed control unit.\n\nAfter the MPP was retired in 1991, it was donated to the Smithsonian\nInstitution, and is now in the collection of the National Air and Space\nMuseum's Steven F. Udvar-Hazy Center. It was succeeded at Goddard by the\nMasPar MP-1 and Cray T3D massively parallel computers.\n\n## Applications[edit]\n\nThe MPP was initially developed for high-speed analysis of satellite images.\nIn early tests, it was able to extract and separate different land-use areas\non Landsat imagery in 18 seconds, as compared with 7 hours on a DEC\nVAX-11/780.^[1]\n\nOnce the system was put into production use, NASA's Office of Space Science\nand Applications solicited proposals from scientists across the country to\ntest and implement a wide range of computational algorithms on the MPP. 40\nprojects were accepted, to form the \"MPP Working Group\"; results of most of\nthem were presented at the First Symposium on the Frontiers of Massively\nParallel Computation, in 1986.\n\nSome examples of applications that were made of the MPP are:\n\nTopographic map generated by stereo analysis\n\n  * Signal processing of synthetic aperture radar data\n  * Generating topographic maps via stereo analysis of satellite images\n  * Mathematical modeling of ocean circulation\n  * Ray traced computer graphics\n  * Neural networks\n  * Solving large systems of linear equations\n  * Simulation of cosmic ray charged particle transport\n  * High resolution Mandelbrot sets\n\n## System architecture[edit]\n\nThe overall MPP hardware consisted of the Array Unit, Array Control Unit,\nStaging Memory, and Host Processor.\n\nMPP system diagram\n\nThe Array Unit was the heart of the MPP, being the 128x128 array of 16,384\nprocessing elements. Each PE was connected to its four nearest neighbors -\nnorth, south, east, and west. The array could be configured as a plane, a\ncylinder, a daisy-chain or as a torus. The PEs were implemented on a custom\nsilicon-on-sapphire LSI chip which contained eight of the PEs as a 2x4\nsubarray. Each of the PEs had arithmetic and logic units, 35 shift registers,\nand 1024 bits of random-access memory implemented with off-the-shelf memory\nchips. The processors worked in a bit-slice manner and could operate on\nvariable lengths of data. The operating frequency of the array was 10 MHz.\nData-bus states of all 16,384 PEs were combined in a tree of inclusive-or\nlogic elements whose single output was used in the Array Control Unit for\noperations such as finding the maximum or minimum value of an array in\nparallel. A register in each PE controlled masking of operations \u2014 masked\noperations were only performed on those PEs where this register bit was set.\n\nThe Array Control Unit (ACU) broadcast commands and memory addresses to all\nPEs in the Array Unit, and received status bits from the Array Unit. It\nperformed bookkeeping operations such as loop control and subroutine calling.\nApplication program code was stored in the ACU's memory; the ACU executed\nscalar parts of the program, and then queued up parallel instructions for the\narray. It also controlled the shifting of data among PEs, and between the\nArray Unit and the Staging Memory.\n\nThe Staging Memory was a 32 MB block of memory for buffering Array Unit data.\nIt was useful because the PEs themselves had only a total of 2 MB of memory\n(1024 bits per PE), and because it provided higher communication bit rate than\nthe Host Processor connection (80 megabytes/second versus 5 megabytes/second).\nThe Staging Memory also provided data-manipulation features such as \"corner\nturning\" (rearranging byte- or word-oriented data from the array) and multi-\ndimensional array access. Data was moved between the Staging Memory and the\narray via 128 parallel lines.\n\nThe Host Processor was a front-end computer that loaded programs and data into\nthe MPP, and provided software development tools and networked access to the\nMPP. The original Host Processor was a PDP-11, which was soon replaced by a\nVAX-11/780 connected to the MPP by a DR-780 channel. The VAX ran the VMS\noperating system, and was programmed in MPP Pascal.\n\n## Speed of operations[edit]\n\nThe raw computing speed for basic arithmetic operations on the MPP was as\nfollows:\n\nOperation| Millions of operations per second  \n---|---  \nAddition of arrays  \n8-bit integers (9-bit sum)| 6553  \n12-bit integers (13-bit sum)| 4428  \n32-bit floating point numbers| 430  \nMultiplication of arrays  \n8-bit integers (16-bit product)| 1861  \n12-bit integers (24-bit product)| 910  \n32-bit floating point numbers| 216  \nMultiplication of array by scalar  \n8-bit integers (16-bit product)| 2340  \n12-bit integers (24-bit product)| 1260  \n32-bit floating point numbers| 373  \n  \n## See also[edit]\n\n  * ICL DAP\n  * Thinking Machines Connection Machine\n  * MasPar\n  * Beowulf cluster\n  * Parsytec\n  * SUPRENUM\n\n## References[edit]\n\n  * Fischer, James R.; Goodyear Aerospace Corporation (1987). \"Appendix B. Technical Summary\". Frontiers of massively parallel scientific computation. National Aeronautics and Space Administration, Scientific and Technical Information Office. pp. 289\u2013294. Retrieved 11 June 2012.\n  * Batcher, K. E. (1 September 1980). \"Design of a Massively Parallel Processor\". IEEE Transactions on Computers. C-29 (9): 836\u2013840. doi:10.1109/TC.1980.1675684. S2CID 13351618.\n  * Batcher, Ken (1998). \"Retrospective: Architecture of a massively parallel processor\". 25 years of the international symposia on Computer architecture (Selected papers). Proceeding ISCA '98 25 Years of the International Symposia on Computer Architecture. pp. 15\u201316. doi:10.1145/285930.285937. ISBN 978-1581130584. S2CID 1875609.\n  * J. L. Potter, ed. (1986). Massively parallel processor. [S.l.]: Mit Press. ISBN 9780262661799.\n  * Neil Boyd Coletti, \"Image processing on MPP-like arrays\", Ph.D. thesis, Department of Computer Science, University of Illinois at Urbana-Champaign, 1983.\n  * Efstratios J. Gallopoulos; Scott D. McEwan (1983). Numerical Experiments with the Massively Parallel Processor. Department of Computer Science, University of Illinois at Urbana-Champaign. Retrieved 11 June 2012.\n  * Gallopoulos, E.J. (July 1985). \"The Massively Parallel Processor for problems in fluid dynamics\". Computer Physics Communications. 37 (1\u20133): 311\u2013315. Bibcode:1985CoPhC..37..311G. doi:10.1016/0010-4655(85)90167-5.\n  * E. Gallopoulos, D. Kopetzky, S.McEwan, D.L. Slotnick and A. Spry, \"MPP program development and simulation\". In \"The Massively Parallel Processor\", J.L. Potter ed., pp. 276\u2013290, MIT Press, 1985\n  * Tom Henkel. \"MPP processes satellite data; Supercomputer claims world's fastest I/O rate\", Computerworld, 13 Feb 1984, p. 99.\n  * Eric J. Lerner. \"Many processors make light work\", Aerospace America, February 1986, p. 50.\n\n  1. ^ \"Massively Parallel Processor Yields High Speed\". Aviation Week & Space Technology. 1984-05-28. p. 157.\n\n  * Todd Kushner, Angela Wu, Azriel Rosenfeld, \"Image Processing on MPP\", Pattern Recognition - PR, vol. 15, no. 3, pp. 121\u2013130, 1982\n\n  * v\n  * t\n  * e\n\nGoodyear Tire & Rubber Company  \n---  \nDivisions|\n\n  * Dunlop Tyres\n  * Goodyear Aerospace\n  * Kelly-Springfield Tire Company\n  * Goodyear Dunlop Sava Tires\n\n  \nSponsorships|\n\n  * 1988 Goodyear NASCAR 500\n  * Akron Goodyear Wingfoots\n  * Goodyear Television Playhouse\n  * Goodyear Theatre\n  * Goodyear Polymer Center\n  * Goodyear Silents\n  * Paul Whiteman's Goodyear Revue\n  * PeopleMover\n  * Wingfoot Express\n  * Spirit of America\n  * Cotton Bowl Classic\n\n  \nPeople|\n\n  * Charles Goodyear\n  * Fred Gampper\n  * Stanley Gault\n  * Lilly Ledbetter\n  * Frank Seiberling\n  * Ward Van Orman\n\n  \nOther|\n\n  * Black Sunday\n  * Charles Goodyear Medal\n  * Goodyear, Arizona\n  * Goodyear Blimp\n  * Goodyear chimney\n  * Goodyear Dunlop v. Brown\n  * Goodyear MPP\n  * Goodyear Polyglas tire\n  * Ledbetter v. Goodyear Tire & Rubber Co.\n  * Lilly Ledbetter Fair Pay Act of 2009\n  * STARAN\n  * Tire war\n  * Wingfoot Lake Airship Hangar\n\n  \n  \nRetrieved from\n\"https://en.wikipedia.org/w/index.php?title=Goodyear_MPP&oldid=1213595684\"\n\nCategories:\n\n  * Supercomputers\n  * Massively parallel computers\n  * One-of-a-kind computers\n  * Goodyear Tire and Rubber Company\n  * Computers using bit-slice designs\n\n  * This page was last edited on 14 March 2024, at 00:16 (UTC).\n  * Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n  * Privacy policy\n  * About Wikipedia\n  * Disclaimers\n  * Contact Wikipedia\n  * Code of Conduct\n  * Developers\n  * Statistics\n  * Cookie statement\n  * Mobile view\n  * Edit preview settings\n\n", "frontpage": false}
