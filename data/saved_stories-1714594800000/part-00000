{"aid": "40223581", "title": "Deno 1.43 released with much faster LSP", "url": "https://deno.com/blog/v1.43", "domain": "deno.com", "votes": 4, "user": "rough-sea", "posted_at": "2024-05-01 14:17:40", "comments": 0, "source_title": "Deno 1.43: Improved Language Server performance", "source_text": "Deno 1.43: Improved Language Server performance\n\nSkip to main content\n\n# Deno 1.43: Improved Language Server performance\n\nMay 1, 2024\n\n  * Andy Jiang\n  * Bartek Iwa\u0144czuk\n  * Marvin Hagemeister\n  * Asher Gomez\n\n  * Product Update\n\nProgramming should be simple. That\u2019s why we made Deno a zero-config,\nbatteries-included JavaScript runtime with native TypeScript support, enabling\nimmediate productivity.\n\nIn version 1.43, we have enhanced the performance of Deno in IDEs by reducing\nauto-completion times from 6-8 seconds to under one second in large codebases\nand significantly decreasing memory usage. We have also achieved more complete\nnpm compatibility by reworking our node:vm and node:worker_threads\nimplementations, widely used in JavaScript CLI tools like test runners.\n\nTo upgrade to Deno 1.43, run the following in your terminal:\n\n    \n    \n    deno upgrade\n\nIf Deno is not yet installed, learn how to install it here.\n\nWhat\u2019s New in Deno 1.43\n\n  * Speeding up Deno\u2019s Language Server\n  * Node.js and npm compatibility\n  * Using npm commands in deno.json tasks\n  * Faster ES and CommonJS module loading\n  * JSX precompile improvements\n  * jsxImportSourceTypes\n  * Introducing deno serve subcommand\n  * Deno.serve() updates\n\n    * Response completion\n    * Simpler access to the server address\n  * URL.parse() Web API\n  * The Standard Library is moving closer toward stabilization\n  * Android builds for rusty_v8\n  * V8 12.4\n  * Try out Deno 2 features with DENO_FUTURE=1\n  * Acknowledgments\n\n## Speeding up Deno\u2019s Language Server\n\nA few Deno users reached out to tell us that our Language Server struggled\nwith bigger projects that had a large number of files. The Language Server\n(commonly referred to as Deno LSP) provides autocompletion, among other\nthings, in your editor. When they shared what the editor experience was like\nin those projects, we realized that we could improve the responsiveness and\nmemory consumption substantially.\n\nThis cycle, we spent most of our time reworking many aspects of the LSP,\nmaking it faster and more efficient. In larger projects, where auto-completion\npreviously took about 6-8 seconds, we have reduced it to under one second.\nSimilarly, memory consumption has improved significantly, allowing projects\nthat previously caused out-of-memory errors in our LSP to operate without\nissue.\n\nBefore:\n\nAfter:\n\n## Node.js and npm compatibility\n\nThis release includes many key improvements around the node:worker_threads and\nnode:vm modules. Both modules are used frequently in test runners, like Jest\nand Vitest, as well as tools like Docusaurus. In fact, we\u2019re now running\nDocusarus to power some of our documentation sites with Deno.\n\n  * Implement process.kill in Rust to avoid run permission prompt. This makes ora, a popular CLI spinner library, work in Deno.\n  * Add missing http.maxHeaderSize value to make undici work.\n  * fs.cpSync: Always ensure the parent directory exists for SolidStart.\n  * Support env option in node:worker_threads. This enables calling sveltekit build to complete successfully.\n  * Correctly send ALPN on node TLS connections which confused upstream servers\n  * Fix AsyncResource borrow panic which broke ng serve and vitest.\n  * Fix Promise rejection in node:vm contexts which is used in docusaurus build.\n  * Implement MessagePort.unref() used for @angular/cli serve.\n  * Fix out of order writes of fs.createWriteStream which occured in koa-body.\n  * Ensure hostname in node:http is a valid IPv4 address which fixes docusaurus serve.\n  * Add module to builtinsModule for docusaurus build.\n  * Fix node:worker_thread worker exiting prematurely.\n  * Polyfill node:domain module to fix configuration discovery in web-ext.\n  * Fix transferred MessagePort not having an .on handler which is needed for piscina used in Angular.\n  * Fix parseArgs from node:util not supporting the default option.\n  * Add missing fs.readv, fs.readvSync functions.\n\nOther frameworks, like SolidStart, are inching closer to full support as well.\nWe\u2019ve got the basics down, but some work remains to be done to fully support\ntheir https server and auth-js:\n\nSolidStart and other framework compatibility improvements are being done\nbehind the new DENO_FUTURE=1 environment variable, which you can read about\nbelow.\n\nAnother area we tackled was improvements to AsyncResource which is necessary\nto make vitest work as it depends on the tinypool package, which in turn makes\nheavy use of Node\u2019s AsyncResource under the hood.\n\nAnd of course, we\u2019re working on supporting Next.js too. We got the\ninitialization wizard fully working thanks to some improvements around our\nhandling of the layout in the node_modules directory.\n\n    \n    \n    ~/my-app $ DENO_FUTURE=1 deno task dev Task dev next dev \u25b2 Next.js 14.1.3 - Local: http://localhost:3000 \u2713 Ready in 2.2s \u25cb Compiling / ... \u2713 Compiled / in 5.5s (511 modules) \u2713 Compiled in 381ms (241 modules)\n\nRunning Next.js currently requires enabling some unstable flags in Deno, and\nwe\u2019re well underway in the process of stabilizing them.\n\n## Using npm commands in deno.json tasks\n\nExecutable npm commands like vite, typically managed through package.json\nscripts, can now be directly referenced in tasks defined in deno.json as well.\n\n    \n    \n    // deno.json { \"tasks\": { \"start\": \"vite\" } }\n\n## Faster ES and CommonJS module loading\n\nThis release adds support for V8 code caching (also known as bytecode\ncaching), which can significantly improve the time your application spends on\nparsing and compiling JavaScript modules. The compiled bytecode is\nautomatically cached on local disk when a module is loaded for the first time,\nand then reused on subsequent loads.\n\nIn our testing, we\u2019ve observed startup time improvements between 5% and 240%\ndepending on the application.\n\n## JSX precompile improvements\n\nSince version v1.38 Deno comes out of the box with a precompile JSX transform\nthat is optimized for server side rendering performance. In certain scenarios\na framework might want to prevent an element to be precompiled to allow\npassing additional properties to it. Our transform learned a new trick to make\nthis possible with the jsxPrecompileSkipElements compiler option.\n\n    \n    \n    // deno.json { \"compilerOptions\": { \"jsx\": \"precompile\", \"jsxImportSource\": \"preact\", // Don't precompile <a>, <body>, and <img> elements \"jsxPrecompileSkipElements\": [\"a\", \"body\", \"img\"] } }\n\nYou can pass an array of elements to that option to exempt them from being\nprecompiled.\n\n    \n    \n    // Example: Input const a = <a href=\"#\">click me</a>; // ...precompiled output const $$_tpl_1 = ['<a href=\"#\">click me</a>']; const a = jsxTemplate($$_tpl_1); // ...non-precompiled output const a = jsx(\"a\", { href: \"#\", children: \"click me\", });\n\n## jsxImportSourceTypes\n\nA new jsxImportSourceTypes pragma and compiler option allows specifying the\ntypes for the automatic JSX transform. This is useful to use with libraries\nthat don\u2019t provide their types.\n\n    \n    \n    /** @jsxImportSource npm:react@^18.3 */ /** @jsxImportSourceTypes npm:@types/react@^18.3 */ export function Hello() { return <div>Hello!</div>; }\n\nAlternatively, this can instead be specified in a deno.json file:\n\n    \n    \n    { \"compilerOptions\": { \"jsx\": \"react-jsx\", \"jsxImportSource\": \"npm:react@^18.3\", \"jsxImportSourceTypes\": \"npm:@types/react@^18.3\" } }\n\n## Introducing deno serve subcommand\n\nIn this release we\u2019ve added deno serve subcommand, that allows you to write\nservers in a declarative way:\n\n    \n    \n    export default { fetch(request) { return new Response(\"Hello world\"); }, };\n    \n    \n    $ deno serve server.ts deno serve: Listening on http://localhost:8000/ $ curl http://localhost:8000/ Hello world\n\nNotice that you don\u2019t have to pass any permission flags - deno serve applies\nappropriate --allow-net permission automatically that allows it to listen for\nincoming HTTP connections. Still, you can pass extra permission flags as\nneeded.\n\nAdditionally, you can use --host and --port flag to configure which interface\nthe server binds to:\n\n    \n    \n    $ deno serve --host 0.0.0.0 --port 3000 server.ts deno serve: Listening on http://0.0.0.0:3000/ $ curl http://0.0.0.0:3000/ Hello world\n\nOur plan is to introduce automatic load-balancing in the future, that will run\nthe server on multiple CPU cores allowing for better utilization of your\nsystem resources.\n\n## Deno.serve() updates\n\n### Response completion\n\nYou can now get information if the response was sent successfuly or there was\na failure using the Deno.ServeHandlerInfo.completed promise:\n\n    \n    \n    Deno.serve((req, info) => { info.completed.then(() => { console.log(\"Response sent successfuly!\"); }).catch(() => { console.error(\"Failed sending the response.\"); }); return new Response(\"Hello world\"); });\n\nAdditionally, the AbortSignal attached to the Request argument will always be\naborted when a transaction finishes - whether by client closing the connection\nor server sending the response.\n\n    \n    \n    Deno.serve((req, info) => { req.signal.addEventListener(\"abort\", () => { console.log(\"Response finished\"); }); return new Response(\"Hello world\"); });\n\n### Simpler access to the server address\n\nWe added a minor quality of life improvement that makes it easier to get the\nserver address from Deno.serve. Previously, you had to write something like\nthis:\n\n    \n    \n    let listenPort: number | null = null; Deno.serve( { onListen: ({ port }) => (listenPort = port), }, () => new Response(\"hello world\"), );\n\nBy adding a new addr property directly on the server instance this becomes\nmuch simpler:\n\n    \n    \n    const server = Deno.serve(() => new Response(\"hello world\")); const port = server.addr.port;\n\n## URL.parse() Web API\n\nThe new Web API URL.parse() provides a simpler control flow when you need to\nparse URLs.\n\nBefore this addition, the way to parse was to construct a new URL instance.\nThe crux is that new URL(input, base) throws an error if the url you\u2019re\nparsing is not valid; while URL.parse(input, base) will just return null for\ninvalid urls.\n\nSo if you\u2019re parsing a URL and need to provide a fallback in case parsing\nfails, you can replace this code:\n\n    \n    \n    let url; try { url = new URL(userProvidedValue, \"http://deno.land\"); } catch { url = new URL(\"http://deno.land\"); }\n\nWith this code:\n\n    \n    \n    const url = URL.parse(userProvidedValue, \"http://deno.land\") ?? new URL(\"https://deno.land\");\n\nThank you to Kenta Moriuchi for implementing this API.\n\n## The Standard Library is moving closer to stabilization\n\nThe Deno Standard Library (deno_std) offers a set of high quality packages\nthat are audited by the core team and guaranteed to work with Deno.\n\nWe\u2019ll have a full blog post on this in the coming days, but starting in Deno\n1.43, the Standard Library will be published exclusively to JSR under the @std\nscope. Existing versions of the Standard Library will continue to live at\nhttps://deno.land/std. This move, alongside Deno\u2019s new workspaces\nfunctionality, is part of the changes coming in Deno 2. For more details,\ncheck out the Standard Library\u2019s roadmap for stabilization.\n\n## Android builds for rusty_v8\n\nWhilst we don\u2019t provide Android builds ourselves, we received a great patch\nthat makes it easier to build rusty_v8 for Android.\n\nThanks to @Taknok for contributing this.\n\n## V8 12.4\n\nDeno 1.43 ships with V8 12.4, which adds support for a new TypedArray kind:\nFloat16Array.\n\nThis API proves useful in several GPU related applications.\n\n## Try out Deno 2 features with DENO_FUTURE=1\n\nIn anticipation of the upcoming Deno 2 release, we\u2019ve put breaking changes for\nDeno 2 behind the DENO_FUTURE=1 environment variable. Enabling it allows you\nto test compatibility of your project with Deno 2.\n\nThis includes the following:\n\n  * Override BYONM with nodeModulesDir setting\n  * Remove deprecated Deno.* APIs in Web Workers\n  * Enable BYONM by default when package.json is present\n  * Remove Deno.ConnectTlsOptions.certFile\n  * Remove Deno.ConnectTlsOptions.certChain\n  * Remove Deno.ConnectTlsOptions.privateKey\n  * Remove Deno.ListenTlsOptions.keyFile\n  * Remove Deno.ListenTlsOptions.certFile\n  * Remove Deno.customInspect\n  * Remove Deno.Conn.prototype.rid\n  * Remove Deno.TlsConn.prototype.rid\n  * Remove Deno.Listener.prototype.rid\n  * Remove Deno.TlsListener.prototype.rid\n  * Remove Deno.UnixConn.prototype.rid\n  * Remove Deno.FsWatcher.prototype.rid\n  * Make Deno.FsFile constructor illegal\n\n## Acknowledgments\n\nWe couldn\u2019t build Deno without the help of our community! Whether by answering\nquestions in our community Discord server or reporting bugs, we are incredibly\ngrateful for your support. In particular, we\u2019d like to thank the following\npeople for their contributions to Deno 1.43: Alex Yang, Carlos Precioso,\nJOTSR, Javier Viola, Kenta Moriuchi, MAKS11060, nokazn, welfuture, youngwendy,\n\u6797\u70b3\u6743, chirsz-ever.\n\nWould you like to join the ranks of Deno contributors? Check out our\ncontribution docs here, and we\u2019ll see you on the list next time.\n\nBelieve it or not, the changes listed above still don\u2019t tell you everything\nthat got better in 1.43. You can view the full list of pull requests merged in\nDeno 1.43 on GitHub here.\n\nThank you for catching up with our 1.43 release, and we hope you love building\nwith Deno!\n\n> \ud83c\udf4b Fresh 2.0 is right around the corner.\n>\n> Our next major Fresh release will be simpler with a more composable, routing\n> API. Read more here.\n\n## Learn\n\n  * Node's Security Problem\n  * Node's Complexity Problem\n  * Edge is the Future\n\n## Why Deno?\n\n  * TypeScript Support\n  * Web Standard APIs\n  * All-in-one Tooling\n  * Secure-by-default\n\n## Use Cases\n\n  * Scripts and CLIs\n  * API Servers\n  * Sites and Apps\n  * Modules\n  * Serverless Functions\n\n## Products\n\n  * Deno Runtime\n  * Deno Deploy\n  * Deno KV\n  * Deploy Subhosting\n  * Fresh\n  * SaaSKit\n\n## Sources\n\n  * Runtime Manual\n  * Runtime API\n  * Deploy Docs\n  * Standard Library\n  * Third-Party Modules\n  * Examples\n\n## Company\n\n  * Careers\n  * Blog\n  * Pricing\n  * News\n  * Merch\n  * Privacy Policy\n\nGitHubDiscordTwitter or X or whateverYouTubeMastodon\n\nCopyright \u00a9 2024 Deno Land Inc. All rights reserved.\n\nAll systems operational\n\n", "frontpage": false}
