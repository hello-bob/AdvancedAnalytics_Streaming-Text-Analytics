{"aid": "40101373", "title": "Scheduled Scripts on macOS: cron or launchd?", "url": "https://akatz.org/scripts-on-macos-cron-or-launchd/", "domain": "akatz.org", "votes": 2, "user": "ackatz", "posted_at": "2024-04-20 21:58:04", "comments": 0, "source_title": "Scheduled Scripts on macOS: cron or launchd?", "source_text": "Scheduled Scripts on macOS: cron or launchd?\n\nSkip to Navigation Skip to Posts Skip to Content\n\nSubscribe\n\nScheduled Scripts on macOS: cron or launchd?\n\n# Scheduled Scripts on macOS: cron or launchd?\n\nAndrew Katz April 20, 2024 5 min read\n\nAn Apple faced with too many choices\n\nOn macOS, you can run a background job on a timed schedule in several\ndifferent ways, although some of them are deprecated:\n\n  * launchd\n  * cron\n  * at jobs (deprecated)\n  * periodic jobs (deprecated)\n\nIf you are new to working on Macs and need to run a scheduled task, your first\ninstinct might be to reach for cron, although this is not necessarily the\nright tool for the job.\n\nAccording to Apple's archived documentation on scheduling timed jobs:\n\n> The preferred way to add a timed job is to use launchd [...] Although it is\n> still supported, cron is not a recommended solution. It has been deprecated\n> in favor of launchd. [1]\n\nIn this post, I will outline some examples of where launchd indeed outshines\ncron.\n\n## Scenario\n\nTo start, let's say you have a Python script called convert_txt_to_md.py that\npoints at a path and recursively goes through all the directories and changes\nall the text files to markdown:\n\n    \n    \n    import os directory = '/Users/andrew.katz/notes/superwhisper/recordings' for root, dirs, files in os.walk(directory): for file in files: if file.endswith(\".txt\"): txt_path = os.path.join(root, file) md_path = txt_path[:-4] + '.md' os.rename(txt_path, md_path)\n\nFor context, I use superwhisper for dictation which outputs a transcript of my\nvoice recording as text files to my Obsidian vault (/notes). Since Obsidian\ncan't search text files, I convert them to markdown using this script which\nallows Obsidian to natively search for them.\n\nTo create a scheduled job using launchd, you need to create a Launch Agent.\nLaunch Agents run once the user has logged in with standard user permissions,\nand they may interact with the user session. Third-party launch agents live in\n/Library/LaunchAgents or ~/Library/LaunchAgents.\n\nCreating your Launch Agent involves creating a property list (plist) file that\nyou will add to ~Library/LaunchAgents. A plist is an XML, JSON, or binary file\nthat contains key/value pairs that store configuration information, settings,\nserialized objects, and more.\n\nPlists are usually named with com.companyName.itemName, so we are going to go\nwith com.ackatz.converttxttomd as the name/label.\n\nUsing nano ~/Library/LaunchAgents/com.ackatz.converttxttomd.plist, I create\nthe plist using the following information:\n\n    \n    \n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>Label</key> <string>com.ackatz.converttxttomd</string> <key>ProgramArguments</key> <array> <string>/usr/bin/python3</string> <string>/Users/andrew.katz/convert_txt_to_md.py</string> </array> <key>StartInterval</key> <integer>3600</integer> <!-- Runs every hour --> <key>RunAtLoad</key> <true/> </dict> </plist>\n\nI find plists a lot easier to read than cron expressions/crontab syntax\n\nTo describe some of the keys above:\n\nkey| behavior  \n---|---  \nLabel| name/label of your Launch Agent  \nProgram Arguments| path to the executable script or binary + args  \nStart Interval| run job every n seconds  \nRunAtLoad| run job one time at load (in addition to other schedules)  \n  \nFinally, to tell launchd that it needs to start using our Launch Agent, we run\nthe following command:\n\n    \n    \n    launchctl load ~/Library/LaunchAgents/com.ackatz.converttxttomd.plist\n\nTo check that it has been added:\n\n    \n    \n    \u276f launchctl list | grep ackatz - 0 com.ackatz.converttxttomd 831 0 application.ackatz.seclook\n\nseclook is a security lookup app that I wrote.. check it out!:\nhttps://seclook.app\n\n\\- for the PID tells us that our Launch Agent does not have a continuously\nrunning process associated with it, which makes sense.\n\n0 means that it ran successfully the last time it was invoked, which is good.\n\n## launchd Advantages over cron\n\nBesides the fact that launchd offers significantly more options to constrain\nand schedule your job [2], one interesting edge that launchd has over cron is\nrelated to how job scheduling is handled depending on power state:\n\nsleep| powered off  \n---|---  \nlaunchd| run @computer wakeup| run @next designated time  \ncron| run @next designated time| run @next designated time  \n  \n\ud83d\udca1\n\nIf your machine is always powered off at the designated time, your script is\nnot going to run.\n\nIf you were reaching for cron in the first place, it is likely that the\nscheduling key you will use in your Launch Agent plist is going to either be\nStartCalendarInterval or StartInterval.\n\nscheduling key| behavior  \n---|---  \nStartInterval| run job every n seconds  \nStartCalendarInterval| run job at a specific time/date  \n  \nLet's say that you decided to use StartInterval with an interval of 30\nseconds. If your machine is in a sleep state and missed 100 invocations, it\nwill coalesce all of those missed jobs together until it wakes up, invoking it\njust once.\n\nWhen using StartCalendarInterval, if you missed the scheduled start time due\nto the machine being asleep, it will just run the job as soon as it wakes up.\n\nIt's worth mentioning that launchd has so many more scheduling options than\njust the two above. Consider the convert_txt_to_md.py example from above.\nThere is a scheduling option called WatchPaths that you can point at a\npath/directory/file and your job will run any time that changes are detected\non the path.\n\n    \n    \n    <key>WatchPaths</key> <array> <string>/path/to/directory_or_file</string> </array>\n\nInstead of waiting potentially an hour for the txt to be changed to md,\nWatchPaths runs the job as needed. In my testing, it usually occurred either\ninstantly or within a few seconds. This would have made a lot more sense to\nuse in this scenario, so I've switched to it \ud83d\ude04\n\nThis is what it looks like in a Launch Agent plist:\n\n    \n    \n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>Label</key> <string>com.ackatz.converttxttomd</string> <key>ProgramArguments</key> <array> <string>/usr/bin/python3</string> <string>/Users/andrew.katz/convert_txt_to_md.py</string> </array> <key>WatchPaths</key> <array> <string>/Users/andrew.katz/notes/superwhisper/recordings</string> </array> <key>RunAtLoad</key> <true/> </dict> </plist>\n\n## Summary\n\n  * The preferred way to run a scheduled job on macOS is using launchd, where you create a Launch Agent to run your job.\n  * You can still run jobs with cron on macOS, but your options are way more limited (i.e., can't run things based on triggers and less survivability of your job based on power states/missed jobs)\n  * If you want to learn more about launchd and the other things you can do with it, check out this amazing site: https://launchd.info/\n\n## Sources & Further Reading\n\n  1. Scheduling Timed Jobs Explains how to write background processes that perform work on behalf of applications or serve content over the network. https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/ScheduledJobs.html\n  2. A launchd Tutorial A launchd primer covering configuration, administration and troubleshooting. Complete with examples. https://launchd.info/\n\n## Discussion\n\n\u00a9 2024 Andrew Katz\n\nBlog\n\n### Scheduled Scripts on macOS: cron or launchd?\n\nApr 20, 2024 5 min read\n\nseceng\n\n### SecEng Newsletter #2\n\nApr 18, 2024 9 min read\n\nsecurity\n\n### Python Security Engineering Example\n\nApr 17, 2024 4 min read\n\nseceng\n\n### SecEng Newsletter #1\n\nApr 13, 2024 6 min read\n\nsecurity\n\n### SecOps Alert Enrichment: Part 1 - Recent Related Alerts\n\nApr 13, 2024 3 min read\n\nmac\n\n### Fixing macOS zsh Terminal History Settings\n\nOct 12, 2022 1 min read\n\ndev\n\n### Running Syncthing on Fly.io with Tailscale\n\nSep 12, 2022 8 min read\n\n", "frontpage": false}
