{"aid": "40245802", "title": "Show HN: A Python Swiss-knife to manage Wayland compositors (Hyprland, Sway)", "url": "https://github.com/juienpro/easyland", "domain": "github.com/juienpro", "votes": 1, "user": "julienmaker", "posted_at": "2024-05-03 09:38:21", "comments": 0, "source_title": "GitHub - juienpro/easyland: A python swiss-knife to manage Wayland compositors like Hyprland and Sway", "source_text": "GitHub - juienpro/easyland: A python swiss-knife to manage Wayland compositors\nlike Hyprland and Sway\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\njuienpro / easyland Public\n\n  * Notifications\n  * Fork 0\n  * Star 1\n\nA python swiss-knife to manage Wayland compositors like Hyprland and Sway\n\n### License\n\nMIT license\n\n1 star 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# juienpro/easyland\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\njuienproUpdated listeners and readmeMay 3, 20243f079f2 \u00b7 May 3, 2024May 3,\n2024\n\n## History\n\n4 Commits  \n  \n### config_examples\n\n|\n\n### config_examples\n\n| Updated listeners and readme| May 3, 2024  \n  \n### src/easyland\n\n|\n\n### src/easyland\n\n| Updated listeners and readme| May 3, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| WIP| May 1, 2024  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| Updated listeners and readme| May 3, 2024  \n  \n### LICENSE.txt\n\n|\n\n### LICENSE.txt\n\n| WIP| May 1, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Updated listeners and readme| May 3, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| Updated Hyprland example| May 2, 2024  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| WIP| May 1, 2024  \n  \n## Repository files navigation\n\n# Easyland\n\nEasyland is a Python framework to manage your wayland compositor (Hyprland,\nSway) configuration by reacting to events. With Easyland, you can dismiss many\nside tools like Kanshi, hypridle, swayidle, etc. and script your environment\naccording to your preferences.\n\n## Available listeners\n\n  * Hyprland IPC event list\n  * Sway IPC\n  * Systemd signals\n  * Native Wayland Idle system (ext_idle_notify_v1)\n\nThe tool allows to listen for these events and to execute commands in\nresponse.\n\n## Why this tool?\n\nGood question.\n\nInitially, I was a bit stressed by the number of tools needed with Hyprland\n(Kanshi & hypridle notably), and also by the number of bugs despite the\nawesome efforts of the developers.\n\nI wanted to have a deeper control on my system, and to be able to script it as\nI wanted.\n\nTo give an example, my laptop screen brightness was always at 100% when I\nundock it, and Kanshi does not allow to add shell commands. This is only one\nsmall example of the numerous limitations I met during my setup of Hyprland.\n\nBy scripting my Desktop in Python, I have more control to implement what I\nwant.\n\n## Installation\n\n  1. Install Easyland in a python environment\n\n    \n    \n    pip3 -i easyland\n\n  2. Copy an example of configuration files from here\n\n  3. Modify it according to your needs\n\n  4. Launch easyland -c <path_to_your_config_file\n\nThis program needs the following external tools:\n\n  * The socat binary (Arch)\n  * The gdbus binary (Arch)\n\nDepending if you use Hyprland or Sway, you will need hyprctl or swaymsg.\n\nIf it's not done automatically, before using PyWayland, you will need to\nexecute pywayland.scanner to generate all protocols:\n\n    \n    \n    python -m pywayland.scanner\n\nor\n\n    \n    \n    pywayland-scanner\n\n## How to use\n\nThe easyland package provides the easyland CLI command, which loads your\ncustom Python file configuration with the -c parameter:\n\n    \n    \n    easyland -c ~/home/.config/hyprland/myconfig.py\n\nWhere myconfig.py contains such a content, explained in details below:\n\n    \n    \n    from easyland import logger, command ############################################################################### # Set active listeners ############################################################################### listeners = { \"hyprland\": { \"socket_path\": \"/tmp/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock\" }, 'systemd_logind': {}, 'idle': {} } ############################################################################### # Method executed at start ############################################################################### def init(): set_monitors() ############################################################################### # Idle configuration # Format: [timeout in seconds, [commands to run], [commands to run on resume]] ############################################################################### def idle_config(): return [ [150, ['brightnessctl -s set 0'], ['brightnessctl -r']], [600, ['pidof hyprlock || hyprlock']], [720, ['hyprctl dispatch dpms off'], ['hyprctl dispatch dpms on']] ] ############################################################################### # Handler of Hyprland IPC events # List of events: https://wiki.hyprland.org/IPC/ ############################################################################### def on_hyprland_event(event, argument): if event in [ \"monitoradded\", \"monitorremoved\" ]: logger.info('Handling hyprland event: ' + event) set_monitors() ############################################################################### # Handlers of Systemd logind events ############################################################################### def on_PrepareForSleep(payload): if 'true' in payload: logger.info(\"Locking the screen before suspend\") command.exec(\"pidof hyprlock || hyprlock\", True) # To use this handler, you need to launch your locker (hyprlock or swaylock) like this: hyprlock && loginctl unlock-session # def on_Unlock(): # logger.info(\"Unlocking the screen\") # To use this handler, you need to launch your locker like this: loginctl lock-session # def on_lock(): # logger.info(\"Locking the screen\") ############################################################################### # Various methods ############################################################################### def set_monitors(): logger.info('Setting monitors') if command.hyprland_get_monitor(description=\"HP 22es\") is not None: command.exec('hyprctl keyword monitor \"eDP-1,preferred,auto,2\"') # command.exec('hyprctl keyword monitor \"eDP-1,disable\"') else: command.exec('hyprctl keyword monitor \"eDP-1,preferred,auto,2\"') command.exec(\"brightnessctl -s set 0\")\n\n### Example of configuration\n\nYou can find an example in the config_examples folder. We'll explain step-by-\nstep the configuration called Hyprland.py.\n\n#### Importing helpers\n\n    \n    \n    from easyland import logger, command\n\nEasyland has helper tools to log everything (console and file) and execute\ncommands. Just import the two.\n\n#### Configure listeners\n\n    \n    \n    listeners = { \"hyprland\": { \"socket_path\": \"/tmp/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock\" }, 'systemd_logind': {}, 'idle': {} }\n\nThe listeners to launch at the startup. There are currently three listeners:\n\n  * hyprland to listen Hyprland IPC events\n  * systemd_logind to monitor for Systemd Logind events\n  * idle which allows you to react when your computer has no activity\n\nEach one can take take on or more parameters. See reference below.\n\n#### Configure Idling\n\n    \n    \n    def idle_config(): return [ [150, ['brightnessctl -s set 0'], ['brightnessctl -r']], [600, ['pidof hyprlock || hyprlock']], [720, ['hyprctl dispatch dpms off'], ['hyprctl dispatch dpms on']] ]\n\nThis method configure the Idle part. It should return the list of your idle\nactions. Each action has three parameters:\n\n  * The timeout in seconds\n  * The list of commands to execute when the timeout occurs\n  * The optional list of commands when the timeout is resumed (eg. once there is user activity after the timeout)\n\nHere, at 720 seconds, the screens are turned off. Then, if some activities are\ndetected, they are turned on.\n\n#### Configure monitors\n\n    \n    \n    def on_hyprland_event(event, argument): if event in [ \"monitoradded\", \"monitorremoved\" ]: logger.info('Handling hyprland event: ' + event) set_monitors()\n\nThe method on_hyprland_event allows you to handle Hyprland IPC events. All\nevents are avalable here.\n\nIn this case, when we connect or disconnect a monitor, we call a method to set\nour monitors according to our preferences. This method is as follows.\n\n    \n    \n    def set_monitors(self): logger.info('Setting monitors') if command.hyprland_get_monitor(description=\"HP 22es\") is not None: command.exec('hyprctl keyword monitor \"eDP-1,disable\"') else: command.exec('hyprctl keyword monitor \"eDP-1,preferred,auto,2\"') command.exec(\"brightnessctl -s set 0\")\n\nWe use the hyprland_get_monitor command helper to get the configuration of a\nparticular monitor. hyprland_get_monitor accepts the name of the monitor, its\ndescription, the maker or the model. If the screen is not found, this method\nreturns None.\n\nSo, when we detect a \"HP 22es\" monitor, we disable the screen of the laptop.\nOtherwise, we turn on the monitor of the laptop, and we put the brightness at\nthe lowest level (in my configuration, when I undock my laptop, the brightness\nis at 100%)\n\nFor Sway, you have the sway_get_monitor helper method.\n\n#### Configure suspend\n\n    \n    \n    def on_PrepareForSleep(payload): if 'true' in payload: logger.info(\"Locking the screen before suspend\") command.exec(\"pidof hyprlock || hyprlock\", True)\n\nThe methods on_Whatever(payload) are automatically called when the signal\nWhatever is sent by Systemd Logind. Here, we are listening for the signal\n\"PrepareForSleep\" which is called just before you computer is suspending.\n\nThe second parameter of the command.exec helper allows you to execute a\ncommand in the background. It's necessary here, otherwhise Easyland will wait\nindefinitely until the screen is unlocked.\n\n#### Other tricks\n\nYou may be interested to listen for Lock and Unlock events emitted from\nSystemd when you call loginctl lock-session and loginctl unlock-session.\nHowever, keep in mind that hyprlock and swaylock do not send any signal for\nthese events, so you need to hack that.\n\n    \n    \n    # To use this handler, you need to launch your locker (hyprlock or swaylock) like this: hyprlock && loginctl unlock-session def on_Unlock(): logger.info(\"Unlocking the screen\")\n\nTo receive the Systemd Unlock signal, you should launch your screen locker\nwith the following command: hyprlock && loginctl unlock-session, so Systemd\nwill send the Unlock signal when the screen is unlocked.\n\nFor locking, keep in mind that hyprlock and swaylock do not listen for the\nSystemd Lock event, so you need to it manually.\n\n    \n    \n    # To use this handler, you need to launch your locker like this: loginctl lock-session def on_Lock(): logger.info(\"Locking the screen\") command.exec('pidof hyprlock || hyprlock', True) # Do other actions if needed\n\n#### Alternative to on_WhateverSignal method\n\nAlternatively to write several methods to listen for Systemd events, you can\nalso define method on_systemd_event and add a condition to achieve what you\nwant:\n\n    \n    \n    def on_systemd_event(sender, signal, payload) if signal == 'Lock': ... if signal == 'PrepareForSleep': ...\n\n## References\n\n### Listeners parameters\n\n#### Hyprland listener parameters\n\n  * socket_path: The path of the Hyprland IPC socket\n\n#### Sway listener parameters\n\n  * event_types: The type of events to be listened for\n\n#### Idle listener parameters\n\nNone.\n\n#### systemd_logind parameters\n\nNone.\n\n### Listeners handler methods\n\nSender| Handler method to add to your class| Arguments  \n---|---|---  \nHyprland| on_hyprland_event| event, argument  \nSway| on_sway_event_[type]| payload  \nSystemd Logind| on_systemd_event| sender, signal, payload  \nSystemd Logind| on_[signal]| payload  \n  \n#### Hyprland events\n\nThey are well documented here.\n\n#### Sway event types\n\nFor Sway, the current event types are those defined in the IPC manual\n\n#### Systemd Logind events\n\nThese events are called \"signals\" in the Systemd terminology.\n\nThey are not well documented but you can try to read that (good luck).\n\nSome examples that can be useful:\n\nMember| Description  \n---|---  \nPrepareForShutdown| Sent before a shutdown  \nPrepareForSleep| Sent before suspend  \nLock| Sent when a lock is requested, eg loginctrl lock-session  \nUnlock| Sent when an unlock is requested  \nSessionNew| When a session is created  \n  \nKeep in mind that these signals are independent from Wayland/Hyprland/Sway. My\nrecommendation would be to always configure your compositor to use loginctl to\nsend the signals, and add a listener in Easyland to achieve what you want.\n\n#### Available helpers\n\nMethod| Usage| Arguments  \n---|---|---  \ncommand.exec| Execute a command, eventually in the background| cmd (string),\nbackground (bool, default False), decode_json (bool, default False)  \ncommand.hyprland_get_all_monitors| Get all monitors and their configuration\nthrough Hyprland IPC| None  \ncommand.hyprland_get_monitor| Get the config of one monitor, None if not\nfound| name, description, make, model  \ncommand.sway_get_all_monitors| Get all monitors and their configuration\nthrough Hyprland IPC| None  \ncommand.sway_get_monitor| Get the config of one monitor, None if not found|\nname, make, model  \nlogger| Log messages to easyland.log and to STDOUT| use logger.info,\nlogger.error, for the severity etc.  \nidle_config| Set the idle configuration| None  \n  \n## Contributions\n\n  * Integrating other DBUS services should be easy with Easyland (type dbusctl to list all avalable DBUS on your system). Do not hesitate to let me know what you need.\n  * Better tests for Sway. I use Hyprland so feel free to submit bugs if you are using Sway and see an issue.\n\nIf you see some bugs or propose patches, feel free to contribute.\n\n## Thanks\n\nThanks to the developer(s) of Hyprland for their fantastic compositor. I tried\nso many ones in the past, and this has been Hyprland that convinced me to do\nthe switch from KDE :-)\n\n## About\n\nA python swiss-knife to manage Wayland compositors like Hyprland and Sway\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n1 star\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Python 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
