{"aid": "40114800", "title": "Why I love programming on FreeDOS with GW-BASIC", "url": "https://opensource.com/article/21/6/freedos-gw-basic", "domain": "opensource.com", "votes": 1, "user": "AlexeyBrin", "posted_at": "2024-04-22 14:36:58", "comments": 0, "source_title": "Why I love programming on FreeDOS with GW-BASIC", "source_text": "Why I love programming on FreeDOS with GW-BASIC | Opensource.com\n\nSkip to main content\n\n# Why I love programming on FreeDOS with GW-BASIC\n\nBASIC was my entry into computer programming. I haven't written BASIC code in\nyears, but I'll always have a fondness for BASIC and GW-BASIC.\n\nBy\n\nJim Hall (Correspondent)\n\nJune 21, 2021 | 0 Comments | %t min read\n\nImage by:\n\nOpensource.com\n\nWhen I was growing up, it seemed every \"personal computer\" from the TRS-80 to\nthe Commodore to the Apple let you write your own programs in the Beginners'\nAll-purpose Symbolic Instruction Code (BASIC) programming language. Our family\nhad a clone of the Apple II called the Franklin ACE 1000, which\u2014as a\nclone\u2014also ran AppleSoft BASIC. I took to AppleSoft BASIC right away and read\nbooks and magazines to teach myself about BASIC programming.\n\nLater, our family upgraded to an IBM PC running DOS. Just like every personal\ncomputer before it, the IBM PC also ran its own version of DOS, called BASICA.\nLater versions of DOS replaced BASIC with an updated interpreter called GW-\nBASIC.\n\nBASIC was my entry into computer programming. As I grew up, I learned other\nprogramming languages. I haven't written BASIC code in years, but I'll always\nhave a fondness for BASIC and GW-BASIC.\n\n## Microsoft open-sources GW-BASIC\n\nSkip to content\n\nProgramming and development\n\n  * Red Hat Developers Blog\n  * Programming cheat sheets\n  * Try for free: Red Hat Learning Subscription\n  * eBook: An introduction to programming with Bash\n  * Bash Shell Scripting Cheat Sheet\n  * eBook: Modernizing Enterprise Java\n\nIn May 2020, Microsoft surprised everyone (including me) by releasing the\nsource code to GW-BASIC. Rich Turner (Microsoft) wrote in the announcement on\nthe Microsoft Developer Blog:\n\n\"Since re-open-sourcing MS-DOS 1.25 & 2.0 on GitHub last year, we\u2019ve received\nnumerous requests to also open-source Microsoft BASIC. Well, here we are! As\nclearly stated in the repo's readme, these sources are the 8088 assembly\nlanguage sources from 10th Feb 1983 and are being open-sourced for historical\nreference and educational purposes. This means we will not be accepting PRs\n(Pull Requests) that modify the source in any way.\"\n\nYou can find the GW-BASIC source code release at the GW-BASIC GitHub. And yes,\nMicrosoft used the MIT License, which makes this open source software.\n\nUnfortunately, the GW-BASIC code was entirely in Assembly, which wouldn't\nbuild with modern tools. But open source developers got to work on that and\nadjusted the code to assemble with updated DOS assemblers. One project is TK\nChia's GitHub project to update GW-BASIC to assemble with JWASM or other\nassemblers. You can find several source and binary releases on TK Chia's\nproject. The notes from the latest version (October 2020) mention that this is\n\"a 'pre-release' binary of GW-BASIC as rebuilt in 2020\" and that \"support for\nserial port I/O is missing. Light pen input, joystick input, and printer\n(parallel port) output need more testing.\" But if you don't need those extra\nfeatures in GW-BASIC, you should be able to use this latest release to get\nback into BASIC programming with an open-sourced GW-BASIC.\n\nFreeDOS 1.3 RC4 doesn't include GW-BASIC, but installing it is pretty easy.\nJust download the gwbas-20201025.zip archive file from TK Chia's October 2020\nGW-BASIC release, and extract it (unzip it) on your FreeDOS system. The binary\narchive uses a default path of \\DEVEL\\GWBASIC.\n\n## Getting started with GW-BASIC\n\nTo start GW-BASIC, run the GWBASIC.EXE program from the DOS command line. Note\nthat DOS is case insensitive so you don't actually need to type that in all\nuppercase letters. Also, DOS will run any EXE or COM or BAT programs\nautomatically, so you don't need to provide the extension, either. Go into the\n\\DEVEL\\GWBASIC and type GWBASIC to run BASIC.\n\nImage by:\n\nThe GW-BASIC interpreter\n\n(Jim Hall, CC-BY SA 4.0)\n\nGW-BASIC is an interpreted programming language. The GW-BASIC environment is a\n\"shell\" that parses each line in your BASIC program as it runs the code. This\nis a little slower than compiled languages like C but makes for an easier\ncoding-debugging cycle. You can test your code as you go, just by entering it\ninto the interpreter.\n\nEach line in a GW-BASIC program needs to start with a line number. GW-BASIC\nuses the line numbers to make sure it executes your program statements in the\ncorrect order. With these line numbers, you can later \"insert\" new program\nstatements between two other statements by giving it a line number that's\nsomewhere in between the other line numbers. For this reason, most BASIC\nprogrammers wrote line numbers that went up by tens so that line numbers would\ngo like 10, 20, 30, and so on.\n\nNew to GW-BASIC? You can learn about the programming language by reading an\nonline GW-BASIC reference. Microsoft didn't release a programming guide with\nthe GW-BASIC source code, but you can search for one. Here's one reference\nthat seems to be a copy of the original Microsoft GW-BASIC User's Guide.\n\nLet's start with a simple program to print out a list of random numbers. The\nFOR statement creates a loop over a range of numbers, and RND(1) prints a\nrandom value between 0 and 1.\n\nImage by:\n\nEntering our first program\n\n(Jim Hall, CC-BY SA 4.0)\n\nDo you see those highlighted words at the bottom of the screen? Those are\nkeyboard shortcuts that you can access using the \"F\" keys (or function keys)\non your keyboard. For example, F1 will insert the word LIST into the GW-BASIC\ninterpreter. The \"left arrow\" indicates that the shortcut will hit Enter for\nyou, so F2 will enter the RUN command and immediately execute it. Let's run\nthe program a few times to see what happens.\n\nImage by:\n\nThe two lists of random numbers are the same\n\n(Jim Hall, CC-BY SA 4.0)\n\nInterestingly, the list of random numbers is the same every time we run the\nBASIC program. That's because the GW-BASIC random number generator resets\nevery time you execute a BASIC program.\n\nTo generate new random numbers every time, we need to \"seed\" the random number\ngenerator with a value. One way to do this is by prompting the user to enter\ntheir own seed, then use that value with the RANDOMIZE instruction. We can\ninsert those two statements at the top of the program using line numbers 1 and\n2. GW-BASIC will automatically add those statements before line 10.\n\nImage by:\n\nUpdating the program\n\n(Jim Hall, CC-BY SA 4.0)\n\nWith the random number generator using a new seed, we get a different list of\nrandom numbers every time we run our program.\n\nImage by:\n\nNow the lists of random numbers are different\n\n(Jim Hall, CC-BY SA 4.0)\n\n## \"Guess the number\" game in GW-BASIC\n\nWhenever I start learning a new programming language, I focus on defining\nvariables, writing a statement, and evaluating expressions. Once I have a\ngeneral understanding of those concepts, I can usually figure out the rest on\nmy own. Most programming languages have some similarities, so once you know\none programming language, learning the next one is a matter of figuring out\nthe unique details and recognizing the differences.\n\nTo help me practice a new programming language, I like to write a few test\nprograms. One sample program I often write is a simple \"guess the number\"\ngame, where the computer picks a number between one and 100 and asks me to\nguess it. The program loops until I guess correctly.\n\nLet's write a version of this \"guess the number\" game in GW-BASIC. To start,\nenter the NEW instruction to tell GW-BASIC to forget the previous program and\nstart a new one.\n\nMy \"guess the number\" program first prompts the user to enter a random number\nseed, then generates a random number between 1 and 100. The RND(1) function\nactually generates a random value between 0 and 1 (actually 0.9999...) so I\nfirst multiply RND(1) by 100 to get a value between 0 and 99.9999..., then I\nturn that into an integer (remove everything after the decimal point). Adding\n1 gives a number that's between 1 and 100.\n\nThe program then enters a simple loop where it prompts the user for a guess.\nIf the guess is too low or too high, the program lets the user know to adjust\ntheir guess. The loop continues as long as the user's guess is not the same as\nthe random number picked earlier.\n\nImage by:\n\nEntering a \"guess the number\" program\n\n(Jim Hall, CC-BY SA 4.0)\n\nWe can run the program by tapping the F2 key. Using a random seed of 1234\ngenerates a completely new random number. It took me six guesses to figure out\nthe secret number was 49.\n\nImage by:\n\nGuessing the secret number\n\n(Jim Hall, CC-BY SA 4.0)\n\nAnd that's your first introduction to GW-BASIC programming! Thanks to\nMicrosoft for releasing this great piece of history as open source software,\nand thanks also to the many open source developers who assembled GW-BASIC so\nwe can run it.\n\nOne more thing before I go\u2014It's not obvious how to exit GW-BASIC. The\ninterpreter had a special instruction for that\u2014to quit, enter SYSTEM and GW-\nBASIC will exit back to DOS.\n\nImage by:\n\nEnter SYSTEM to quit GW-BASIC\n\n(Jim Hall, CC-BY SA 4.0)\n\nWhat to read next\n\n## Get started with FreeDOS\n\nIt looks like retro computing, but it's a modern OS you can use to get stuff\ndone.\n\nJim Hall\n\n(Correspondent)\n\nJune 1, 2021\n\n## How to navigate FreeDOS with CD and DIR\n\nArmed with just two commands DIR and CD, you can navigate your FreeDOS system\nfrom the command line.\n\nJim Hall\n\n(Correspondent)\n\nJune 2, 2021\n\n## FreeDOS commands for Linux fans\n\nIf you're already familiar with the Linux command line, try these commands to\nhelp ease into FreeDOS.\n\nJim Hall\n\n(Correspondent)\n\nJune 3, 2021\n\n## Set and use environment variables in FreeDOS\n\nEnvironment variables are helpful in almost every command-line environment,\nincluding FreeDOS.\n\nJim Hall\n\n(Correspondent)\n\nJune 4, 2021\n\n## Automate tasks with BAT files on FreeDOS\n\nHere's a helpful guide to batch files under FreeDOS.\n\nJim Hall\n\n(Correspondent)\n\nJune 7, 2021\n\n## How FreeDOS boots\n\nAn overview of how your computer boots up and starts a simple operating system\nlike FreeDOS.\n\nJim Hall\n\n(Correspondent)\n\nJune 8, 2021\n\n## Configure FreeDOS in plain text\n\nLearn how to configure FreeDOS with FDCONFIG.SYS.\n\nJim Hall\n\n(Correspondent)\n\nJune 9, 2021\n\n## Install and remove software packages on FreeDOS\n\nGet familiar with FDIMPLES, the FreeDOS package manager.\n\nJim Hall\n\n(Correspondent)\n\nJune 10, 2021\n\n## How to use the FreeDOS text editor\n\nFreeDOS provides a user-friendly text editor called FreeDOS Edit.\n\nJim Hall\n\n(Correspondent)\n\nJune 11, 2021\n\n## Install FreeDOS without the installer\n\nHere's how to set up your FreeDOS system manually without using the installer.\n\nJim Hall\n\n(Correspondent)\n\nJune 14, 2021\n\n## Listen to music on FreeDOS\n\nMplayer is an open source media player that's usually found on Linux, Windows,\nMac, and DOS.\n\nJim Hall\n\n(Correspondent)\n\nJune 15, 2021\n\n## How to use FreeDOS as an embedded system\n\nMany embedded systems today run on Linux. But once upon a time, embedded\nsystems either ran on a custom, proprietary platform or ran on DOS.\n\nJim Hall\n\n(Correspondent)\n\nJune 16, 2021\n\n## Why FreeDOS has 16 colors\n\nWhy does text only come in this limited palette, and why does FreeDOS use\nthose colors and shades, instead of some other colors? The answer, like many\nthings in technology, is...\n\nJim Hall\n\n(Correspondent)\n\nJune 17, 2021\n\n## Use this nostalgic text editor on FreeDOS\n\nEdlin is a joy to use when I want to edit text the \"old school\" way.\n\nJim Hall\n\n(Correspondent)\n\nJune 18, 2021\n\nTags\n\nFreeDOS\n\nProgramming\n\nJim Hall\n\nJim Hall is an open source software advocate and developer, best known for\nusability testing in GNOME and as the founder + project coordinator of\nFreeDOS.\n\nMore about me\n\n## Comments are closed.\n\nThese comments are closed.\n\n## Related Content\n\nDoing 64-bit math on a 16-bit system\n\nABCs of FreeDOS: 26 commands I use all the time\n\nTry FreeDOS in 2022\n\nThis work is licensed under a Creative Commons Attribution-Share Alike 4.0\nInternational License.\n\n## About This Site\n\nThe opinions expressed on this website are those of each author, not of the\nauthor's employer or of Red Hat.\n\nOpensource.com aspires to publish all content under a Creative Commons license\nbut may not be able to do so in all cases. You are responsible for ensuring\nthat you have the necessary permission to reuse any work on this site. Red Hat\nand the Red Hat logo are trademarks of Red Hat, Inc., registered in the United\nStates and other countries.\n\nA note on advertising: Opensource.com does not sell advertising on the site or\nin any of its newsletters.\n\nCopyright \u00a92024 Red Hat, Inc.\n\n", "frontpage": false}
