{"aid": "40138246", "title": "Introducing the Local-Recipes-Index: A New Repository Type in Conan", "url": "https://blog.conan.io/2024/04/23/Introducing-local-recipes-index-remote.html", "domain": "conan.io", "votes": 1, "user": "ibobev", "posted_at": "2024-04-23 22:48:12", "comments": 0, "source_title": "Introducing the Local-Recipes-Index: A New Repository Type in Conan", "source_text": "Introducing the Local-Recipes-Index: A New Repository Type in Conan\n\n< Back to the blog\n\n# Introducing the Local-Recipes-Index: A New Repository Type in Conan\n\nApr 23, 2024\n\n13 minutes read\n\nShare on:\n\nConanCenter, the central open-source repository for C and C++ libraries, is a\nsuccess story, containing a vast collection of C and C++ open-source packages.\nIt processes hundreds of thousands of download requests daily, building its\npackages from a central GitHub repository, which is organized in a specific\nfolder layout and received nearly 6,000 pull requests from contributors in\n2023 alone.\n\nHowever, ConanCenter does not fit all use cases. For instance, it cannot\ninclude closed-source libraries or tools that might still be beneficial to the\ncommunity. Additionally, some organizations, particularly large enterprises,\nprefer not to use binaries downloaded from the internet. Instead, they build\ntheir own binaries in-house using the conan-center-index recipes. These\norganizations often need to customize these recipes to meet unique\nrequirements that are not applicable to the broader community, making such\ncontributions unsuitable for the upstream repository. The Conan documentation\nacknowledges this practice, recommending working from a fork of conan-center-\nindex for such needs.\n\nFor all those reasons in version 2.2.0, Conan introduced a new repository type\ncalled local-recipes-index, designed to offer more flexibility by allowing a\nConan remote to point to a local copy of Conan recipes with a specific layout.\n\nThe local-recipes-index allows users to maintain a local folder with the same\nstructure as the conan-center-index GitHub repository, using it as a source\nfor package recipes. This new type of repository is recipes-only,\nnecessitating the construction of package binaries from source on each machine\nwhere the package is used. For sharing binaries across teams, we continue to\nrecommend using a Conan remote server like Artifactory for production\npurposes.\n\nIn this post, we will explore how this feature facilitates the following:\n\n  * This feature enables contributors to share package recipes with the community for libraries that might not be suitable for ConanCenter due to various reasons, such as licensing constraints or binary distribution policies. An example of this could be CUDA or other proprietary libraries, which are distributed as precompiled closed-source binaries.\n\n  * It simplifies the adoption of best practices outlined in the Conan documentation for organizations requiring custom-built binaries or modified ConanCenter recipes to meet unique requirements. This approach grants users complete control over their third-party dependencies, ensuring they are both robust and fully customizable.\n\nNext, we\u2019ll delve into practical examples to demonstrate these two use cases\nof the local-recipes-index repository.\n\n## Using a local-recipes-index repository with your own recipes\n\nIn this section, we will illustrate how to use the local-recipes-index feature\nfor scenarios where certain libraries or tools, due to licensing restrictions\nor proprietary nature, are not suitable for ConanCenter.\n\nFor demonstration purposes, let\u2019s create a local-recipes-index repository for\na hypothetical hello closed-source library using the local_recipes_index\ntemplate for the conan new command:\n\n    \n    \n    $ mkdir repo && cd repo $ conan new local_recipes_index -d name=hello -d version=0.1 \\ -d url=https://github.com/conan-io/libhello/archive/refs/tags/0.0.1.zip \\ -d sha256=1dfb66cfd1e2fb7640c88cc4798fe25853a51b628ed9372ffc0ca285fe5be16b $ cd ..\n\nThe conan new local_recipes_index command creates a template that assumes\nCMake as the build system alongside other heavy assumptions. In practice, it\nwill require customizing it, but for this demo, it works as-is. It will create\na folder layout equal to the conan-center-index GitHub repository:\n\n    \n    \n    . \u2514\u2500\u2500 repo \u2514\u2500\u2500 recipes \u2514\u2500\u2500 hello \u251c\u2500\u2500 all \u2502 \u251c\u2500\u2500 conandata.yml \u2502 \u251c\u2500\u2500 conanfile.py \u2502 \u2514\u2500\u2500 test_package \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 conanfile.py \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 example.cpp \u2514\u2500\u2500 config.yml\n\nAfter setting up the repository, we add it as a local remote to Conan:\n\n    \n    \n    $ conan remote add mylocalrepo ./repo --allowed-packages=\"hello/*\"\n\nPlease pay special attention to the --allowed-packages argument. This argument\nensures that all packages other than hello are discarded by Conan. This can be\nused to minimize the surface area for a potential supply chain attack.\n\nNow you can list and install packages from this new repository:\n\n    \n    \n    $ conan list \"*\" -r=mylocalrepo $ conan install --requires=hello/0.1 -r=mylocalrepo --build=missing\n\nAt this point, you could push this repository to your GitHub account and share\nit with the community. Please be aware that, as we commented earlier, this\nfeature is specifically tailored for scenarios where certain libraries are not\nsuitable for ConanCenter. Remember, a \u201clocal-recipes-index\u201d repository has\nlimitations: it is not fully reproducible as it models only versions and not\nrevisions, and it does not provide binaries. Therefore, outside of these\ncases, it is advised to use a remote package server such as Artifactory.\n\nNow, users simply need to clone the GitHub repository and add the cloned\nfolder as a local repository themselves.\n\n## Building Binaries from a private conan-center-index fork\n\nAs outlined in the Conan DevOps Guide, there are many cases where\norganizations need to operate independently of ConanCenter by building their\nown binaries. Being decoupled from the public upstream ConanCenter server and\nbuilding your own binaries from a fork of conan-center-index as suggested in\nthe linked documentation page can have many advantages, including absolute\ncontrol and possibility to customize recipes, giving us the ability for the\nrepository to act as a snapshot of versions, be completely robust against\npossible continuous changes and new releases in upstream ConanCenter, etc.\n\nThe local-recipes-index repository allows you to easily build binaries from a\nfork of conan-center-index, and then hosting them on a Conan remote repository\nlike Artifactory. The main difference with the process explained in the Conan\nDevOps guide is the ability to immediately test multiple local changes without\nthe need to export each time a recipe is modified.\n\nNote that in this case, mixing binaries from ConanCenter with locally built\nbinaries is not recommended for several reasons:\n\n  * Binary compatibility: There may be small differences in setup between the ConanCenter CI and the user\u2019s CI. Maintaining a consistent setup for all binaries can mitigate some issues.\n\n  * Full control over builds: Building all binaries yourself ensures you have complete control over the compilation environment and dependency versions.\n\nInstead, it\u2019s recommended to build all your direct and transitive dependencies\nfrom the fork. To begin, remove the upstream ConanCenter as it will not be\nused, everything will come from our own fork:\n\n    \n    \n    $ conan remote remove conancenter\n\nThen we will clone our fork (in this case, we are cloning directly the\nupstream for demo purposes, but you would be cloning your fork instead):\n\n    \n    \n    $ git clone https://github.com/conan-io/conan-center-index\n\nAdd this as our mycenter remote:\n\n    \n    \n    # Add the mycenter remote pointing to the local folder $ conan remote add mycenter ./conan-center-index\n\nAnd that\u2019s all! Now you\u2019re set to list and use packages from your conan-\ncenter-index local folder:\n\n    \n    \n    $ conan list \"zlib/*\" -r=mycenter mycenter zlib zlib/1.2.11 zlib/1.2.12 zlib/1.2.13 zlib/1.3 zlib/1.3.1\n\nWe can also install packages from this repo, for example we can do:\n\n    \n    \n    $ conan install --requires=zlib/1.3 ... ======== Computing dependency graph ======== zlib/1.3: Not found in local cache, looking in remotes... zlib/1.3: Checking remote: mycenter zlib/1.3: Downloaded recipe revision 5c0f3a1a222eebb6bff34980bcd3e024 Graph root cli Requirements zlib/1.3#5c0f3a1a222eebb6bff34980bcd3e024 - Downloaded (mycenter) ======== Computing necessary packages ======== Requirements zlib/1.3#5c0f3a1a222eebb6bff34980bcd3e024:72c852c5f0ae27ca0b1741e5fd7c8b8be91a590a - Missing ERROR: Missing binary: zlib/1.3:72c852c5f0ae27ca0b1741e5fd7c8b8be91a590a\n\nAs we can see, Conan managed to get the recipe for zlib/1.3 from mycenter, but\nthen it failed because there is no binary. This is expected, the repository\nonly contains the recipes, but not the binaries. We can build the binary from\nsource with --build=missing argument:\n\n    \n    \n    $ conan install --requires=zlib/1.3 --build=missing ... zlib/1.3: package(): Packaged 2 '.h' files: zconf.h, zlib.h zlib/1.3: package(): Packaged 1 file: LICENSE zlib/1.3: package(): Packaged 1 '.a' file: libz.a zlib/1.3: Created package revision 0466b3475bcac5c2ce37bb5deda835c3 zlib/1.3: Package '72c852c5f0ae27ca0b1741e5fd7c8b8be91a590a' created zlib/1.3: Full package reference: zlib/1.3#5c0f3a1a222eebb6bff34980bcd3e024:72c852c5f0ae27ca0b1741e5fd7c8b8be91a590a#0466b3475bcac5c2ce37bb5deda835c3 zlib/1.3: Package folder /home/conan/.conan2/p/b/zlib1ed9fe13537a2/p WARN: deprecated: Usage of deprecated Conan 1.X features that will be removed in Conan 2.X: WARN: deprecated: 'cpp_info.names' used in: zlib/1.3 ======== Finalizing install (deploy, generators) ======== cli: Generating aggregated env files cli: Generated aggregated env files: ['conanbuild.sh', 'conanrun.sh'] Install finished successfully\n\nWe can see now the binary package in our local cache:\n\n    \n    \n    $ conan list zlib:* Local Cache zlib zlib/1.3 revisions 5c0f3a1a222eebb6bff34980bcd3e024 (2024-04-10 11:50:34 UTC) packages 72c852c5f0ae27ca0b1741e5fd7c8b8be91a590a info settings arch: x86_64 build_type: Release compiler: gcc compiler.version: 9 os: Linux options fPIC: True shared: False\n\nFinally, upload the binary package to our Artifactory repository to make it\navailable for our organization, users and CI jobs:\n\n    \n    \n    $ conan remote add myartifactoryrepo <artifactory_url> $ conan upload zlib* -r=myartifactoryrepo -c\n\nThis way, consumers of the packages will not only enjoy the pre-compiled\nbinaries and avoid having to always re-build from source all dependencies, but\nthat will also provide stronger guarantees that the dependencies build and\nwork correctly, that all dependencies and transitive dependencies play well\ntogether, etc. Decoupling the binary creation process from the binary\nconsumption process is the way to achieve faster and more reliable usage of\ndependencies.\n\nRemember, in a production setting, the conan upload command should be executed\nby CI, not developers, following the Conan guidelines. This approach ensures\nthat package consumers enjoy pre-compiled binaries and consistency across\ndependencies.\n\n### Modifying the local-recipes-index repository files\n\nOne of the advantages of this approach is that all the changes that we do in\nevery single recipe are automatically available for the Conan client. For\nexample, changes to the recipes/zlib/config.yml file are immediately\nrecognized by the Conan client. If you edit that file and remove all versions\nbut the latest and then we list the recipes:\n\n    \n    \n    $ conan list \"zlib/*\" -r=mycenter mycenter zlib zlib/1.3.1\n\nWhen some of the recipes change, then note that the current Conan home already\ncontains a cached copy of the package, so it will not update it unless we\nexplicitly use the --update, as any other Conan remote.\n\nSo if we do a change in the zlib recipe in recipes/zlib/all/conanfile.py and\nrepeat:\n\n    \n    \n    $ conan install --requires=zlib/1.3.1 -r=mycenter --update --build=missing\n\nWe will immediately have the new package binary locally built from source from\nthe new modified recipe in our Conan home.\n\n### Using local-recipes-index Repositories in Production\n\nSeveral important points should be considered when using this new feature:\n\n  * It is designed for third-party packages, where recipes in one repository are creating packages with sources located elsewhere. To package your own code, the standard practice of adding conanfile.py recipes along with the source code and using the standard conan create flow is recommended.\n\n  * The local-recipes-index repositories point to local folders in the filesystem. While users may choose to sync that folder with a git repository or other version control mechanisms, Conan is agnostic to this, as it is only aware of the folder in the filesystem that points to the (current) state of the repository. Users may choose to run git commands directly to switch branches/commit/tags and Conan will automatically recognise the changes\n\n  * This approach operates at the source level and does not generate package binaries. For deployment for development and production environments, the use of a remote package server such as Artifactory is crucial. It\u2019s important to note that this feature is not a replacement for Conan\u2019s remote package servers, which play a vital role in hosting packages for regular use.\n\n  * Also, note that a server remote can retain a history of changes storing multiple recipe revisions. In contrast, a local-recipes-index remote can only represent a single snapshot at any given time.\n\nFurthermore, this feature does not support placing server URLs directly in\nrecipes; remote repositories must be explicitly added with conan remote add.\nDecoupling abstract package requirements, such as \u201czlib/1.3.1\u201d, from their\nspecific origins is crucial to resolving dependencies correctly and leveraging\nConan\u2019s graph capabilities, including version conflict detection and\nresolution, version-ranges resolution, opting into pre-releases,\nplatform_requires, replace_requires, etc. This separation also facilitates the\nimplementation of modern DevOps practices, such as package immutability, full\nrelocatability and package promotions.\n\n## Conclusions\n\nThe local-recipes-index repository type introduces a new tool that enables\nworkflows previously not possible with Conan 1.X:\n\n  * It allows the easy creation of packages from forks of the conan-center-index GitHub repository. Many enterprises require this due to policies necessitating private customizations in recipes that are unsuitable for merging into the upstream repository.\n\n  * It provides a solution for packaging closed-source libraries and tools within the C/C++ ecosystem that cannot be included in ConanCenter, enabling their recipes to be shared and conveniently used within the Conan community.\n\nArchives\n\n  * March 2024\n  * February 2024\n  * December 2023\n  * November 2023\n  * October 2023\n  * August 2023\n  * July 2023\n  * June 2023\n  * May 2023\n  * February 2023\n  * December 2022\n  * November 2022\n\nSubscribe for release updates\n\n  * Download\n  * ConanCenter\n  * GitHub\n  * Docs\n  * Blog\n  * FAQ\n  * Privacy Policy\n  * Terms\n  * Cookies Settings\n\n", "frontpage": false}
