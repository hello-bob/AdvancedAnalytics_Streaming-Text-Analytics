{"aid": "40101453", "title": "I wrote my own editor", "url": "https://bold-edit.com/wrote-my-own.html", "domain": "bold-edit.com", "votes": 3, "user": "levodelellis", "posted_at": "2024-04-20 22:11:34", "comments": 0, "source_title": "I Wrote My Own Editor", "source_text": "I Wrote My Own Editor\n\nHome / Download\n\nI used to like vscode. I've been using it since it could run and debug C#.\nLast year, I noticed I frequently hit bugs where I couldn't type until I\nswitched out and back into the editor with alt-tab. That's not so bad but it\ngot annoying when I couldn't build or debug until I restarted the program\n\nOne day, possibly the thing that bothered me the most was when I was writing a\nGDB pretty printer. I'd tweak the script; then to see the results I would\npress F5 to run the already built binary and wait over a second EVERY SINGLE\nTIME (about 1480ms). It was driving me nuts. I ended up leaving a terminal\nopen and would save, alt tab, press up, enter. All that would still be almost\na second faster than if I were to restart the debugger in vscode. I then\nrealized it won't matter how fast my compiler is (I've implemented one for my\nown language) it will always feel slow if I use vscode (the compiler builds a\ndebuggable binary in 15 milliseconds).\n\nFinally, what broke the camel's back was when I was debugging 3 different\ncomplex functions. Each had about 15-20 variables I was interested in. I had\nthe watch panel take up the entire right side and there wasn't enough room. I\nhad to manually remove and add variables every time I rotated to a third\nfunction. I wouldn't always put the vars back in the same order. It was\nobnoxious. Whichever function I was looking at I wanted to see the same set of\nvariables on the top right in the same order every time. Between the bugs, it\nbeing slow to launch, and now debugging becoming a problem I decided then and\nthere to write a text editor.\n\nI thought, how hard could it be? The answer is always harder than you expect\nbut I knew that and I wanted to find out\n\nThe first thing I did was implement GDB support. Here's a video of the watch\nvariables at the top right changing based on the function its in\n\nIf you look closely you'll see there's no flickering. All variables and their\nvalues show up at the same time. You can see variables are shown significantly\nquicker. From the video you can't see when I press a button to launch the\ndebugger. From launch to breakpoint (which includes the build step) it took\n<200ms. Two of my biggest annoyances I solved. Next, I wanted to make sure\nediting and rendering is fast no matter how large the file is. Some tools\ngenerate hundreds of MBs of JSON. Here's a video of me opening two files (both\n1gb) scrolling around, typing, and pressing undo/redo.\n\nI was pretty happy that I could run 60fps without dropping frames with a debug\nbuild (vscode drops frames). However for a 4K monitor, I need an optimized\nbuild. Even with typing and undo/redo I consistently stayed over 144fps so\npeople with fast monitors can have a smooth experience.\n\nI like being able to partially type a filename and jump to it, or find/jump to\na type. I like to rename variables. LSP's (language server protocol) support\nthese so I implemented it. It's not a complete implementation, one thing easy\nto see is there is no semantic tokens support which would improve\nhighlighting. The video shows signature help but doesn't show jump to, rename,\nhover, etc. Friends didn't like debugging in their current IDE so they asked\nif I could implement DAP support. So I implemented that as well. The video\nshows an example using python.\n\nA few weeks before I began writing, I met the people who work on the undo\ndebugger. Their goal is to let people replay executions, so you can figure out\nand debug complicated problems that no one knows how to reproduce. But that's\nnot why I liked it. I did this.\n\nIn that video, I ran the 'last' command on the global variable g1. The\ndebugger brought me to the last time it was modified. It's magic. I use it\nconstantly, even when I know where it's modified. It saves me from writing a\nconditional on a breakpoint and I don't have to guess if I don't know which\nspot the variable was last modified. It's not a free debugger but I wanted to\nimplement the feature for myself and it was very easy since it had the same\nprotocol as gdb and the implementation was just a few lines on top of my\nalready existing gdb implementation.\n\nThis editor is still early in development and plenty of features are missing.\nThere's no global search, there is a find but no replace and people who like\nvim motions will need to wait. If you try it for 5 minutes feel free to let me\nknow all the things that you noticed were missing. There's a tutorial file in\nthe download to give you something to do in the first few minutes of using\nthis.\n\n", "frontpage": false}
