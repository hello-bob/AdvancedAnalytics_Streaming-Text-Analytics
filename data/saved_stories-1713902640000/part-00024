{"aid": "40130068", "title": "HCL: Toolkit for Structured Configuration Languages", "url": "https://github.com/hashicorp/hcl", "domain": "github.com/hashicorp", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-23 09:20:52", "comments": 0, "source_title": "GitHub - hashicorp/hcl: HCL is the HashiCorp configuration language.", "source_text": "GitHub - hashicorp/hcl: HCL is the HashiCorp configuration language.\n\n## Navigation Menu\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nhashicorp / hcl Public\n\n  * Notifications\n  * Fork 577\n  * Star 5.1k\n\nHCL is the HashiCorp configuration language.\n\n### License\n\nMPL-2.0 license\n\n5.1k stars 577 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# hashicorp/hcl\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n41 Branches\n\n42 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nliamcervanteUpdate CHANGELOG.mdApr 22, 20241c5ae8f \u00b7 Apr 22, 2024Apr 22, 2024\n\n## History\n\n1,451 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Use make targets in CI| Feb 26, 2024  \n  \n### cmd\n\n|\n\n### cmd\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### ext\n\n|\n\n### ext\n\n| add missing copywrite headers| Feb 16, 2024  \n  \n### fuzz\n\n|\n\n### fuzz\n\n| add oss-fuzz build script| Sep 21, 2022  \n  \n### gohcl\n\n|\n\n### gohcl\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### guide\n\n|\n\n### guide\n\n| Fix wrong var name in HCL guide| Mar 10, 2021  \n  \n### hcldec\n\n|\n\n### hcldec\n\n| Standardize on only two value dumping/diffing libraries| Mar 14, 2024  \n  \n### hcled\n\n|\n\n### hcled\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### hclparse\n\n|\n\n### hclparse\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### hclsimple\n\n|\n\n### hclsimple\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### hclsyntax\n\n|\n\n### hclsyntax\n\n| Add additional function for parsing traversals with [*] keys (#673)| Apr 22,\n2024  \n  \n### hcltest\n\n|\n\n### hcltest\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### hclwrite\n\n|\n\n### hclwrite\n\n| Standardize on only two value dumping/diffing libraries| Mar 14, 2024  \n  \n### integrationtest\n\n|\n\n### integrationtest\n\n| add scoped function integration tests| Nov 2, 2023  \n  \n### json\n\n|\n\n### json\n\n| go generate ./...| Feb 16, 2024  \n  \n### scripts\n\n|\n\n### scripts\n\n| Add make targets for common checks + fixes| Feb 16, 2024  \n  \n### specsuite\n\n|\n\n### specsuite\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### .copywrite.hcl\n\n|\n\n### .copywrite.hcl\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| Update CHANGELOG.md| Apr 22, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| [COMPLIANCE] Update MPL-2.0 LICENSE| Nov 9, 2022  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Add make targets for common checks + fixes| Feb 16, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| hcl: Fix the simple example in the README| Aug 21, 2020  \n  \n### diagnostic.go\n\n|\n\n### diagnostic.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### diagnostic_text.go\n\n|\n\n### diagnostic_text.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### diagnostic_text_test.go\n\n|\n\n### diagnostic_text_test.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### diagnostic_typeparams.go\n\n|\n\n### diagnostic_typeparams.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### didyoumean.go\n\n|\n\n### didyoumean.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### doc.go\n\n|\n\n### doc.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### eval_context.go\n\n|\n\n### eval_context.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### expr_call.go\n\n|\n\n### expr_call.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### expr_list.go\n\n|\n\n### expr_list.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### expr_map.go\n\n|\n\n### expr_map.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### expr_unwrap.go\n\n|\n\n### expr_unwrap.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| Standardize on only two value dumping/diffing libraries| Mar 14, 2024  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| Standardize on only two value dumping/diffing libraries| Mar 14, 2024  \n  \n### merged.go\n\n|\n\n### merged.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### merged_test.go\n\n|\n\n### merged_test.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### ops.go\n\n|\n\n### ops.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### ops_test.go\n\n|\n\n### ops_test.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### pos.go\n\n|\n\n### pos.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### pos_scanner.go\n\n|\n\n### pos_scanner.go\n\n| Use Unicode 15 tables for unicode normalization and segmentation| Aug 30,\n2023  \n  \n### pos_scanner_test.go\n\n|\n\n### pos_scanner_test.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### pos_test.go\n\n|\n\n### pos_test.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### schema.go\n\n|\n\n### schema.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### spec.md\n\n|\n\n### spec.md\n\n| Unfold the \"hcl\" directory up into the root| Sep 9, 2019  \n  \n### static_expr.go\n\n|\n\n### static_expr.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### structure.go\n\n|\n\n### structure.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### structure_at_pos.go\n\n|\n\n### structure_at_pos.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### tools.go\n\n|\n\n### tools.go\n\n| deps: Track stringer@v0.6.0 as 'tools' dependency| Feb 16, 2024  \n  \n### traversal.go\n\n|\n\n### traversal.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n### traversal_for_expr.go\n\n|\n\n### traversal_for_expr.go\n\n| Typo fix: Consecutive occurrences of 'the'| Mar 2, 2023  \n  \n### traversal_for_expr_test.go\n\n|\n\n### traversal_for_expr_test.go\n\n| [COMPLIANCE] Add Copyright and License Headers (#586)| Feb 28, 2023  \n  \n## Repository files navigation\n\n# HCL\n\nHCL is a toolkit for creating structured configuration languages that are both\nhuman- and machine-friendly, for use with command-line tools. Although\nintended to be generally useful, it is primarily targeted towards devops\ntools, servers, etc.\n\n> NOTE: This is major version 2 of HCL, whose Go API is incompatible with\n> major version 1. Both versions are available for selection in Go Modules\n> projects. HCL 2 cannot be imported from Go projects that are not using Go\n> Modules. For more information, see our version selection guide.\n\nHCL has both a native syntax, intended to be pleasant to read and write for\nhumans, and a JSON-based variant that is easier for machines to generate and\nparse.\n\nThe HCL native syntax is inspired by libucl, nginx configuration, and others.\n\nIt includes an expression syntax that allows basic inline computation and,\nwith support from the calling application, use of variables and functions for\nmore dynamic configuration languages.\n\nHCL provides a set of constructs that can be used by a calling application to\nconstruct a configuration language. The application defines which attribute\nnames and nested block types are expected, and HCL parses the configuration\nfile, verifies that it conforms to the expected structure, and returns high-\nlevel objects that the application can use for further processing.\n\n    \n    \n    package main import ( \"log\" \"github.com/hashicorp/hcl/v2/hclsimple\" ) type Config struct { IOMode string `hcl:\"io_mode\"` Service ServiceConfig `hcl:\"service,block\"` } type ServiceConfig struct { Protocol string `hcl:\"protocol,label\"` Type string `hcl:\"type,label\"` ListenAddr string `hcl:\"listen_addr\"` Processes []ProcessConfig `hcl:\"process,block\"` } type ProcessConfig struct { Type string `hcl:\"type,label\"` Command []string `hcl:\"command\"` } func main() { var config Config err := hclsimple.DecodeFile(\"config.hcl\", nil, &config) if err != nil { log.Fatalf(\"Failed to load configuration: %s\", err) } log.Printf(\"Configuration is %#v\", config) }\n\nA lower-level API is available for applications that need more control over\nthe parsing, decoding, and evaluation of configuration. For more information,\nsee the package documentation.\n\n## Why?\n\nNewcomers to HCL often ask: why not JSON, YAML, etc?\n\nWhereas JSON and YAML are formats for serializing data structures, HCL is a\nsyntax and API specifically designed for building structured configuration\nformats.\n\nHCL attempts to strike a compromise between generic serialization formats such\nas JSON and configuration formats built around full programming languages such\nas Ruby. HCL syntax is designed to be easily read and written by humans, and\nallows declarative logic to permit its use in more complex applications.\n\nHCL is intended as a base syntax for configuration formats built around key-\nvalue pairs and hierarchical blocks whose structure is well-defined by the\ncalling application, and this definition of the configuration structure allows\nfor better error messages and more convenient definition within the calling\napplication.\n\nIt can't be denied that JSON is very convenient as a lingua franca for\ninteroperability between different pieces of software. Because of this, HCL\ndefines a common configuration model that can be parsed from either its native\nsyntax or from a well-defined equivalent JSON structure. This allows\nconfiguration to be provided as a mixture of human-authored configuration\nfiles in the native syntax and machine-generated files in JSON.\n\n## Information Model and Syntax\n\nHCL is built around two primary concepts: attributes and blocks. In native\nsyntax, a configuration file for a hypothetical application might look\nsomething like this:\n\n    \n    \n    io_mode = \"async\" service \"http\" \"web_proxy\" { listen_addr = \"127.0.0.1:8080\" process \"main\" { command = [\"/usr/local/bin/awesome-app\", \"server\"] } process \"mgmt\" { command = [\"/usr/local/bin/awesome-app\", \"mgmt\"] } }\n\nThe JSON equivalent of this configuration is the following:\n\n    \n    \n    { \"io_mode\": \"async\", \"service\": { \"http\": { \"web_proxy\": { \"listen_addr\": \"127.0.0.1:8080\", \"process\": { \"main\": { \"command\": [\"/usr/local/bin/awesome-app\", \"server\"] }, \"mgmt\": { \"command\": [\"/usr/local/bin/awesome-app\", \"mgmt\"] }, } } } } }\n\nRegardless of which syntax is used, the API within the calling application is\nthe same. It can either work directly with the low-level attributes and\nblocks, for more advanced use-cases, or it can use one of the decoder packages\nto declaratively extract into either Go structs or dynamic value structures.\n\nAttribute values can be expressions as well as just literal values:\n\n    \n    \n    # Arithmetic with literals and application-provided variables sum = 1 + addend # String interpolation and templates message = \"Hello, ${name}!\" # Application-provided functions shouty_message = upper(message)\n\nAlthough JSON syntax doesn't permit direct use of expressions, the\ninterpolation syntax allows use of arbitrary expressions within JSON strings:\n\n    \n    \n    { \"sum\": \"${1 + addend}\", \"message\": \"Hello, ${name}!\", \"shouty_message\": \"${upper(message)}\" }\n\nFor more information, see the detailed specifications:\n\n  * Syntax-agnostic Information Model\n  * HCL Native Syntax\n  * JSON Representation\n\n## Changes in 2.0\n\nVersion 2.0 of HCL combines the features of HCL 1.0 with those of the\ninterpolation language HIL to produce a single configuration language that\nsupports arbitrary expressions.\n\nThis new version has a completely new parser and Go API, with no direct\nmigration path. Although the syntax is similar, the implementation takes some\nvery different approaches to improve on some \"rough edges\" that existed with\nthe original implementation and to allow for more robust error handling.\n\nIt's possible to import both HCL 1 and HCL 2 into the same program using Go's\nsemantic import versioning mechanism:\n\n    \n    \n    import ( hcl1 \"github.com/hashicorp/hcl\" hcl2 \"github.com/hashicorp/hcl/v2\" )\n\n## Acknowledgements\n\nHCL was heavily inspired by libucl, by Vsevolod Stakhov.\n\nHCL and HIL originate in HashiCorp Terraform, with the original parsers for\neach written by Mitchell Hashimoto.\n\nThe original HCL parser was ported to pure Go (from yacc) by Fatih Arslan. The\nstructure-related portions of the new native syntax parser build on that work.\n\nThe original HIL parser was ported to pure Go (from yacc) by Martin Atkins.\nThe expression-related portions of the new native syntax parser build on that\nwork.\n\nHCL 2, which merged the original HCL and HIL languages into this single new\nlanguage, builds on design and prototyping work by Martin Atkins in zcl.\n\n## About\n\nHCL is the HashiCorp configuration language.\n\n### Topics\n\njson hcl hashicorp configuration-language\n\n### Resources\n\nReadme\n\n### License\n\nMPL-2.0 license\n\n### Code of conduct\n\nCode of conduct\n\n### Security policy\n\nSecurity policy\n\nActivity\n\nCustom properties\n\n### Stars\n\n5.1k stars\n\n### Watchers\n\n370 watching\n\n### Forks\n\n577 forks\n\nReport repository\n\n## Releases 34\n\nv2.20.1 Latest\n\nMar 26, 2024\n\n\\+ 33 releases\n\n## Packages 0\n\nNo packages published\n\n## Used by 146k\n\n\\+ 145,702\n\n## Contributors 86\n\n\\+ 72 contributors\n\n## Languages\n\n  * Go 89.0%\n  * Ragel 9.3%\n  * Ruby 0.5%\n  * Perl 0.4%\n  * Python 0.3%\n  * HCL 0.2%\n  * Other 0.3%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
