{"aid": "40157991", "title": "Adding Bluetooth to Vintage Headphones \u2013 Part 2 (2018)", "url": "https://pickandplace.wordpress.com/2018/06/24/adding-bluetooth-to-vintage-headphones-part-2/", "domain": "pickandplace.wordpress.com", "votes": 1, "user": "_Microft", "posted_at": "2024-04-25 14:25:35", "comments": 0, "source_title": "Adding Bluetooth to Vintage Headphones \u2013 Part 2", "source_text": "Adding Bluetooth to Vintage Headphones \u2013 Part 2 | Pick and Place\n\nSkip to primary content\n\n# Pick and Place\n\n## Electronics, printed circuit boards, mods and more.\n\n# Adding Bluetooth to Vintage Headphones \u2013 Part 2\n\nPosted on June 24, 2018 by Jean\n\nAdvertisement\n\nPrivacy Settings\n\nFirst part of the article.\n\nI received the parts and the PCBs:\n\nFirst thing I noticed is that the hole for the screw that will press the\nbutton is missing. The cutout in the soldermask is there but not the hole.\nDamn you cheap chinese PCB manufacturers!\n\nAll right, now I remember: I did the PCB cutout in the soldermask and decided\nto draw it on the mechanical layer later*.\n\nAdvertisement\n\nPrivacy Settings\n\nWell, it\u2019s nothing a Dremel and a needle file can\u2019t fix. And I need to\ncountersink the holes for the screw heads anyway.\n\nYet another detail: I measured the diameter of the hole of the option for a\nbigger axis screw (M3) to be 4mm. I might have decided to postpone the before-\norder-review of my PCB for laterTM too...\n\nAnyway, I\u2019m curious to see if everything fits as nicely as in my 3D model.\nLet\u2019s start with the potentiometer.\n\nThe PCB holding the potentiometer and the screw for the pushbutton (hole on\nthe left):\n\nThe other side, which will be attached to the headphone ear cup and holds the\naxis screw:\n\nNot bad**. (The nut on the axis screw which sets the spacing of the two PCBs\nis missing on the photo.)\n\nThe whole fist surprisingly well on the side of the ear cup:\n\nYou can see the pushbutton and its actuator screw.\n\nOn the other side, the potentiometer sticks out enough to be pushed or turned:\n\nNow the main PCB with the BM62 Bluetooth module and the PIC microcontroller,\nand the small PCB for the USB socket and the RGB LED:\n\nThey fit nicely too:\n\nAfter this, I could build the bracket for the USB and LED PCB. I made it of\n2mm thick acrylic sheets which I glued together. The light pipe for the RGB\nLED is the same material:\n\nThe glue is two components epoxy. Note the BM62 Bluetooth antenna sticking out\nfrom under the main PCB.\n\nAdvertisement\n\nPrivacy Settings\n\nThe result on the other side is quite ok:\n\nI filed and sanded the piece of acrylic so it\u2019s flush with the ear cup plastic\nand gives a diffused light.\n\nOne thing I didn\u2019t think through enough is the mounting of all the mechanical\nparts together. Because the PCB holding the potentiometer blocks the access to\nthe screws attaching the first PCB to the side of the ear cup, it has to be\nassembled last. But then the axis screw touches the USB PCB making it\nimpossible to put a nut on it. And you can\u2019t pre-assemble it because you need\naccess the screws holding the other half to the ear cup. Neither can the two\nPCBs have an angle, because the screw pushing the button has a hole limiting\nthe PCBs angle against each other. Vicious circle. I ended up filing a corner\nof the PCB holding the USB connector to have space to put the locking nut for\nthe axis screw and inserting the actuator screw last..\n\nApparently, having your ways with a professional 3D software doesn\u2019t make you\ninstantly a mechanical engineer.\n\nAt the end it was tight, but everything could fit without too much cursing.\nThe LiPo battery sits flat against the main board.\n\nNow let\u2019s take care of the guts!\n\n# The BM62 Bluetooth module\n\nMicrochip advertizes it as \u201ca fully-certified Bluetooth module for designers\nwho want to add Bluetooth wireless audio and voice applications to their\nproducts.\u201d and \u201cEasy to configure with User Interface (UI) tool, a Windows\u00ae\nconfiguration utility or directly by MCU\u201d\n\nA serial interface can be used to command the module (enter pairing mode, wake\nup, volume etc). For the configuration, there is an onboard EEPROM, also\naccessible through the serial interface. Microchip provides tools to help with\nthe development (for free and without login/registration -a nice touch):\n\n  * A program to edit the configuration.\n  * An utility to download the configurations to the module\u2019s EEPROM.\n  * A program to configure the BM62 DSP.\n  * A tool to connect to the BM62 via the serial interface and to change and query all the settings and the module status (the Command Set Tool).\n  * Some documentation (for the serial protocol).\n\nThe first step would be to use the Command Set Tool to play with the module\nand to get familiar with the different modes.\n\nIn reality, I spent some hours trying to connect the tool to the BM62 without\nsuccess. After cursing the entire earth and the human lineage, I saw on a\nforum post that the serial interface of the BM62 has to be enabled in the\nEEPROM configuration first.\n\nAdvertisement\n\nPrivacy Settings\n\nThis is how looks the user configuration file to generate:\n\nIt\u2019s only a part of the EEPROM binary and has to be wrapped with the help of\nanother Microchip tool, \u201cMPET\u201d.\n\nI am not sure there is a comprehensive documentation for every bitfield.\nLuckily, Microchip\u2019s program \u201cUITool\u201d can generate the text file.\nUnfortunately, it looks like it was coded by someone with no idea of software\ndesign, or anything about Windows 7 and above.\n\nA polite welcome message greats you at launch:\n\nThen, things get a bit messier. Luckily, there is a help function with a nice\nyellow notepady background:\n\nAdvertisement\n\nPrivacy Settings\n\nOk, never mind.\n\nNote also that the help windows sizes are kind of random but fixed, so\ndepending of your screen resolution and DPI setting, it can happen that the\nscroll bar isn\u2019t long enough:\n\nThe best is, once you generated the text file with your configuration, you\nstill have to go through the MPET thing (a dozen or so clicks, three files to\nopen), put the BM62 in ROM boot mode by holding a pin low while powering it up\n(too bad if you already soldered a battery \u2013 you\u2019ll have to disconnect it),\nupload the configuration with the third tool and, finally, test your new\nmodifications. Don\u2019t expect to try small changes, unless you have plenty of\ntime.\n\nAnyway, I managed to enable the serial interface of the module. From there, I\ncould connect with the Command Set Tool:\n\nIt looks like it was done by the same unpaid intern, but it gets the job done.\nA nice touch is the log section: it shows and translates the received and sent\ndata. You can even copy the messages into the Windows clipboard. Woohoo!\n\nThe tool gave me a good start with the BM62 and helped me to test and tweak\nthe configuration. It was convenient to debug my hardware and my code,\nespecially in case of doubt.\n\n# The PIC code\n\nThe PIC18LF4550 will manage the BM62 module, the pushbutton and the\npotentiometer.\n\nThe program has to:\n\n  * Wake up and power off the BM62 module\n  * Put the module into Bluetooth pairing mode\n  * Read the potentiometer value and send it to the BM62\n  * Put the PIC in sleep mode as often as possible to save the power\n\nFor this we have:\n\n  * The pushbutton\n  * The potentiometer\n  * The red LED of the RGB LED\n  * The serial interface\n\nThe pushbutton will trigger an interrupt (INT0 -pin RB0). The ADC acquisition\nwill be triggered by the Timer1 and Capture Compare module 2. I tried to use\nthe High/Low-Voltage Detect module to see if the USB cable was plugged and the\nbattery charging (to for example, configure the PIC to act as a USB-serial\nconverter, for debug purposes) but because the PIC gets its power from the\nBM62 \u201cSYS_PWR\u201d pin, the voltage was too dependent of the current the PIC was\npulling from it, making the detection unreliable.\n\nAdvertisement\n\nPrivacy Settings\n\nSpeaking of the SYS_PWR pin, it\u2019s the output of the BM62 internal power source\nswitch (battery or USB) but it\u2019s a pity the datasheet doesn\u2019t give the current\ncapabilities of this pin.\n\n(There are three other pins with voltages from the BM62, VDDA, BK_OUT and\nVDD_IO, but here, the datasheet says you\u2019re not supposed to use them).\n\n## Low power design\n\nThe BM62 power consumption is around 15mA when streaming music, so the current\ntaken by the PIC at that time isn\u2019t really a problem and because it runs on\nthe internal oscillator, it will be around 2mA max. anyway. The concern is\nwhen the headset is in sleep mode, with the BM62 powered off (10uA power off\nquiescent current). The PIC18LF4550 has a sleep mode current between 1uA and\n2uA, quite good.\n\nBut the problem is everything else. Here, I messed things up by connecting the\npotentiometer between the power rail and the ground. With a value of 270 Ohms,\nthe current would have been 11mA all the time, enough to drain the 800mAh LiPo\nbattery I chose in two days. Bad design. Luckily I had spare pads for the PIC\nI/Os and I connected the Vcc of the potentiometer to the PIC (through a 1KOhm\nresistor) and I am only switching it on when I need to convert the value. I am\nalso putting all the other IOs in high impedance (inputs) to minimize the\nsleep current.\n\nI measured the total battery current in sleep mode (both the PIC and the BM62)\naround 100uA. It gives more than 200 days in standby.\n\n## Driving the BM62\n\nBecause I hate to spend more time on the embedded code than on the electronics\nfor one-off projects like that, I tried to keep the things as simple as\npossible. First, I was using the BM62 module\u2019s configurable control pins, but\nit ended up to be half unreliable, half annoying because of the time needed to\nchange and upload the BM62 EEPROM configuration. I went for the serial\ncommunication instead.\n\nHere, Microchip provides an Excel file which lists all the commands and\nparameters. Someone had the good idea to make a sheet (tab) per command, so\nyou end up with a file with more than 100 tabs. And the links to go back to\nthe command list don\u2019t seem to work with LibreOffice. Luckily, there is a doc\nfile with the same content and linearly organized. It also gives the timings\nfor the data and the error handling. Each serial command is composed of:\n\n  * Start byte (0xAA)\n  * Length (2 bytes)\n  * Operation code\n  * Parameters\n  * Checksum\n\nWith an optional 0x00 byte at the beginning of each transmission, in case the\nUSART controller of your system can interrupt on this break character (like\nthe PIC18F4550).\n\nThe checksum is described as:\n\n> Check sum rule: Summation of every byte after START WORD(LENGTH, COM.ID, COM\n> PARAM, CHK SUM) is 0xXX00\n\nWell, it\u2019s not. Here again I found the answer on a forum. Yes, you have to sum\nthe bytes from the length to the last byte before the checksum, but then\ninvert the value and add 1 to it. Here is a working code:\n\n    \n    \n    uint8_t calculateChecksum(uint8_t* startByte, uint8_t* endByte) { uint8_t checksum = 0; while(startByte <= endByte) { checksum += *startByte; startByte++; } checksum = ~checksum + 1; return checksum; }\n\nAnd here, for reference, the function I wrote to pause or play the music when\nyou push the potentiometer button while the BM62 is streaming:\n\n    \n    \n    void TogglePause(LEM_state_t *s) { char buf[7]; buf[0] = 0xAA; buf[1] = 0x00; buf[2] = 0x03; buf[3] = 0x04;//music control buf[4] = 0x04;//reserved ?? buf[5] = 0x07;//play pause toggle buf[6] = calculateChecksum(&buf[1], &buf[5]); bm62Puts(buf, 7); }\n\nAn other little detail missing from the documentation is about the two LEDs\ncontrolled by the BM62. Of course, you want a blue LED to flash when\nstreaming, because you know, Bluetooth. The other LED can be green.\nUnfortunately, I could find nowhere in the datasheet or the tools which one of\nthe two pins called LED1 and LED2 is for which color. Of course Murphy got me\nand I had to bodge the PCB to invert the two. For reference: the LED2 output\nis forthe blue one.\n\nAdvertisement\n\nPrivacy Settings\n\nThe source code can be found on my Github. Because I only included the files\ndirectly related to the BM62, you won\u2019t be able to compile them directly (I\nomitted all the USB-serial converter files from Microchip). The code is\nquickly written and doesn\u2019t reflect my magnificent embedded C skills...\n\n# Wrap-up\n\nI made a short clip to show the headset working:\n\nI\u2019m very pleased with the results. I can use the headset a whole week, using\nit a few hours everyday on a single charge thanks to the 800 mAh LiPo battery\ncombined with the low power consumption of the PIC and the BM62 module. The\nheadset doesn\u2019t seem heavier than before and the sound quality is the same.\nFTW!\n\nHave a gif before you go :\n\n*never\n\n**good enough\n\n### Share this:\n\n  * Facebook\n  * Twitter\n  * Reddit\n\nLike Loading...\n\n### Related\n\nAdding Bluetooth to Vintage Headphones \u2013 Part 1June 1, 2018In \"Modding\"\n\nTesting iTead Studio PCB service.September 10, 2011In \"iTead Studio\"\n\nAltium DRC settings for iTeadStudio PCB serviceSeptember 18, 2011In \"iTead\nStudio\"\n\nThis entry was posted in Audio, Modding, Vintage and tagged Bluetooth, bm62,\nPIC18F4550, pic18lf4550, Sennheiser, Vintage, Vintage headset bluetooth mod by\nJean. Bookmark the permalink.\n\n## 2 thoughts on \u201cAdding Bluetooth to Vintage Headphones \u2013 Part 2\u201d\n\n  1. Pingback: Adding Bluetooth to Vintage Headphones \u2013 Part 1 | Pick and Place\n\n  2. Pingback: Vintage Headphones Bluetooth Conversion Goes The Extra Mile | Hackaday\n\n### Leave a comment Cancel reply\n\nCreate a free website or blog at WordPress.com.\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * Pick and Place\n    * Already have a WordPress.com account? Log in now.\n\n  * Privacy\n  *     * Pick and Place\n    * Customize\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\nLoading Comments...\n\n%d\n\n", "frontpage": false}
