{"aid": "40091427", "title": "I hate Rust (programming language)", "url": "https://dorinlazar.ro/240228-i-hate-rust-programming-language/", "domain": "dorinlazar.ro", "votes": 12, "user": "edgred", "posted_at": "2024-04-19 20:10:31", "comments": 2, "source_title": "I hate Rust (programming language)", "source_text": "I hate Rust (programming language) - dorinlazar.ro\n\ndorinlazar.ro\n\nProdus cu m\u00e2ndrie la Bra\u0219ov\n\n# I hate Rust (programming language)\n\n2024-02-28, 02:51\n\nDorin\n\nTehnic\n\nNow, hear me out, it\u2019s the middle of the night here and I\u2019m feeling a bit\nrusty with my English, but we\u2019ll try to be creative with this one. There are\nmany ways in which we can say that we have a poisonous community, and I\u2019ll\nenumerate a few in this article. Also, obviously, this is a very subjective\narticle. It\u2019s not about technical merits, although it will mention those as\nwell, it\u2019s more about the social engineering around Rust (programming\nlanguage). But I hate it, and I don\u2019t even have to touch Rust code yet (but\nprobably will in the future). So join me in this wonderful trip of discovery\nto see in how many ways we can say the same thing, which is that the Rust\ncommunity sucks.\n\n## My personal experience with Rust\n\nI tried learning Rust three different times. The first time it was way before\n2020, when the first drops of enthusiasm around the language started to whet\npeople\u2019s appetites. Probably 2015, probably prompted by the release of 1.0,\nand I can tell that it looked interesting. I tried to learn it then, but I\ncan\u2019t remember what the problem was - I probably didn\u2019t even go through a full\nwrite-compile-execute cycle for a \u201eHello World\u201d program, most likely because I\nwas burned out and in denial about it. I read a bit about the language,\nthough, took note, said \u201eyeah, that sounds interesting\u201d about its \u201econst by\ndefault\u201d strategy, and moved on.\n\nMy second time was somewhere right before 2020, in pre-pandemic aka \u201ethe good\nold\u201d times. Back then I was already in full burnout mode and I opened a Rust\nbook because learning new things made me feel like I was reconnecting with my\nlove for computer science in general. For some reason, learning new things was\na good burnout coping mechanism, but everyone\u2019s burnout is different. So I\nstarted reading on Rust and the first chapter proved to be a moral lesson\nabout inclusion, and I was like... friend. I\u2019m not here for a diversity\nlecture, I\u2019m here to learn about the language. But there it went, the book\ntalked about being Rustaceans (I really hated the term), in love with\ndiversity, and it felt more like a brainwashing DEI lecture than a serious\nconversation about a technical topic. This time, though, I tried a bit more of\nthe language, I actually wrote some programs, used some libraries to do\nsomething relatively small, and it felt deeply unsatisfying - mostly because\nthe libraries weren\u2019t there yet. I also disliked cargo, as well as the way\nthat the book suggested I should set-up Rust, which I see is the current way\nit\u2019s recommended to be installed as well - by downloading and running a script\noff the internet. As a 80s and 90s kid, this felt irresponsible. It still is,\nbut we\u2019ll talk about this later.\n\nMy third time is my \u201eI give up on this shit\u201d time. Late 2020, early 2021, deep\npandemic times, in my sabbatical stay-at-home time, trying to cope with the\nfallout of my burnout. I skipped the chapter on diversity (I somehow took the\nsame book to read) and started writing more code. The code did not compile. I\nwas shocked. It\u2019s quite an amazing feat, that, to have a recommended learning\nmaterial that can make your very first program not compile. I will not dig\nthrough my archives but I discussed this at length back then, because it was\nreally funny. The problem was, of course, the fact that I didn\u2019t copy-paste\nright the setup sequence, and instead of choosing a certain numbered version\nof the random library (if I remember correctly) I let cargo download the\nlatest version which had a completely different API. I think that the program\nwas a \u201eguess the number\u201d program, and writing it and getting a compile error\nwas absolutely batshit insane. I had a very \u201eget to your fucking senses\u201d\nmoment and dropped Rust forever (until I\u2019ll have to pick it up again because\nthat\u2019s just my luck).\n\nNow, listen up, I\u2019m very good at avoiding technologies. I managed to avoid the\nwave of Microsoft bullshit UI technologies for a very long time; I almost\nmanaged to avoid MFC as well, although I had to implement MFC sync objects in\nLinux in 2001, until (just my luck) I had to pick up MFC when nobody used it\nanymore and implement stuff on Windows CE just when everyone was waking up to\nthe fact that Microsoft\u2019s monopolistic attitude is not good for business and\nswitched to Linux. It was a frustrating time, to see all this flurry around\nLinux (of which I was a relatively early adopter) precisely when I had to use\nMicrosoft technologies, but... heh, that\u2019s my luck. Also, for a long time I\nmanaged to avoid Java (although I had to learn some Java for a C# interview\nthat turned out to be my next job, and C# proved to be a pleasant surprise,\nsaid the Stockholm-syndrome sufferer, me). I managed for a long time to avoid\nJavascript as well (and I think that I\u2019m still thankful that I can ignore\ninnovations such as leftpad). So ignoring a technological artefact as an\nexperience is not new to me, and I thought I will be able to ignore Rust\nhopefully for the rest of my life. That proved to be impossible.\n\n## Let me tell you about our Lord and Savior Rust\n\nI think I started noticing the Rust proselitizing in 2022, when it started\nbeing everywhere, even in places you didn\u2019t want it to be. Every C++\nconference had a talk on Rust, the Rust community was infecting every corner\nof the internet that pertained to C or C++ (and, coincidentally, C#, because\nsometimes search engines ignore that # character). Everyone started talking\nabout the merits of The One True Language, which were basically little more\nthan enabling some sanitizers in the command line for the C++ compiler, and\nthe borrow-checker which felt like compile-time garbage collection made hard.\nAnd, to be frank, once everyone started talking about Rust it felt like a\ncacophonous chorus that tried to sing about the future of the computing while\nnot contributing with much to it. \u201eWe can rewrite everything in Rust!\u201d \u201eWe can\nrewrite the Web in Rust!\u201d \u201eRewrite it in Rust\u201d. Well, fuck off, why don\u2019t you\nrewrite it? Ah, because you\u2019re too busy writing on social media platforms\nabout how great Rust is instead of writing the code, heh?\n\nAnd I\u2019m not saying that there aren\u2019t a lot of busybodies who actually do the\nthing, not talk about the thing. What I\u2019m saying is that the people who don\u2019t\nare very noisy about adopting Rust and not doing it at the same time. \u201eIf only\nwe could rewrite this in Rust!\u201d \u201eYou old people are gatekeeping with your C\ncode and memory unsafe languages!\u201d \u201eYou\u2019re horrible people for writing in\nmemory unsafe languages!\u201d \u201eIt\u2019s a cardinal sin to write code in C and C++ in\nthe year of our Lord 10 (or 2022)\u201d. There was not a space for discussion with\nthe Rustaceans - despite the inclusion discourse on the book on Rust, the\ncommunity around the language felt awkwardly aggressive and exclusivistic.\nEspecially as their discourse was really light on arguments, beside the const\nby default and the borrow checker.\n\n## So many issues caused by memory unsafe languages\n\nPerhaps the most hypocritical thing about Rust is the claim that the world\u2019s\nails are caused by the fact that in C++ (the primary target of Rust-infested\nbrains) you can still write very bad code. There are numbers behind these\nclaims, and indeed, there is a lot of bad code out there. I do agree that the\nsoftware world requires a rewrite - I have argued about dropping POSIX\naltogether since POSIX propagates the single worst idea in the history of\ncomputing. I also argued that there\u2019s not enough research done in the\nOperating Systems field and definitely not enough effort put into replacing\nLinux, itself becoming the stone tied to everyone\u2019s necks right now. Hell,\npeople keep complaining that systemd exists, although it\u2019s definitely a step\nin the right direction. But people are creatures of habit - and we create\navenues to make ourselves feel righteous while continuing to do the bad\nthings. And rust is one such way to feel righteous while continuing old\nbehaviors.\n\nI call rust similar to recycling plastic. We know that recycling plastic is\nnot practical, it would be a lot better to not use plastic anymore, but not\nusing plastic is very hard for the modern world. So we invent this small\nloophole in which we feel fine about the fact that every aspect of our lives\nis polluting the world - we RECYCLE and we feel good about it. This is the\nsame with rust rewrites. We \u201erewrite everything in Rust\u201d and we\u2019ll feel good\nabout not changing anything fundamental in the way we do things.\n\nBy now you\u2019re asking yourself \u201ewhat is this kid talking about?\u201d and you\u2019re\nright to do so. Well, friends, allow me to educate you. Most of the issues\nthat people list as \u201ememory unsafe languages\u201d issues are caused by the\nsyndrome of bad fundamental choices, and the origin of most bad fundamental\nchoices is the one issue that is perpetuated by the fundamental API that is\nused by all, including Rust. POSIX, as well as Win32, the fundamental\noperating system interfaces, perpetuate the single most costly mistake in the\nhistory of computing, which is the zero-terminated string. No matter what you\ndo, no matter how you do it and how you pack your data, in the end you will\nrequire communicating to your operating system, and you do that by passing a\nzero-terminated string, in one form or another. Until this mistake is\ncompletely eliminated from the operating system interfaces as well as the\nfundamental libraries.\n\nRust doesn\u2019t change this; it merely hides it. But one could argue that C++\nalso can hide this - sure, Rust does a better job at hiding this detail, but\nC++ is no different. This is why I prefer rewrite it in Pascal to rewrite it\nin rust. Pascal strings were fundamental types and always had the size of the\nstring in them. There\u2019s no need for this zero-terminated bullshit if you\u2019re\nwriting everything from the grounds up in Pascal. Unfortunately Pascal lost\nthe race to becoming the dominant platform in the 80s, it\u2019s a shame, but it is\nwhat it is.\n\nAnd here\u2019s the kicker, the one thing that you were here for and you paid good\nmoney to your internet provider to display on your computer screen.\n\n## Rust is not a memory-safe language\n\nBut the borrow checker! But the const by default! NO! You\u2019re lying to me, Mr.\nLazar, you\u2019re the Bond villain in the story. How dare you?!\n\nNow, listen up, as long as you can do stupid stuff in your language, your\nlanguage is not memory safe; and as long as it\u2019s common practice to do stupid\nstuff in your language, your language is not stupid-proof. As a primer on this\none, I\u2019ll use the current version of the String class documentation on the\nofficial site dedicated to Rust documentation. One of the first examples looks\nlike this:\n\n    \n    \n    // some bytes, in a vector let sparkle_heart = vec![240, 159, 146, 150]; // We know these bytes are valid, so we'll use `unwrap()`. let sparkle_heart = String::from_utf8(sparkle_heart).unwrap(); assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n\nI absolutely love the \u201ewe know these bytes are valid\u201d, and this looks pretty\nbad. It\u2019s probably safe to do so, but if we go further down the line we see\nstuff like:\n\n    \n    \n    let s = unsafe { String::from_raw_parts(ptr, len, capacity) };\n\nNow, I\u2019m not saying that this is not nice. It\u2019s nice to mark your unsafe code,\nalmost as nice as telling what exceptions your function will throw (and yes,\nthis is a jab Java). But you get away with doing stupid shit when writing\nunsafe in your code, and this basically says \u201ewe know that we can\u2019t do it. We\ncan\u2019t write safe code\u201d. You have to be very na\u00efve to think that a feature like\nunsafe will not be abused. Don\u2019t get me wrong, I get it. You and your friends\nwill definitely not use unsafe statements needlessly. You\u2019ll only use it in an\neasy to prove manner, you\u2019re writing good code, you\u2019re writing safe code. But\nsomewhere, down there, there is some unsafe statement that makes you write\ncode that you call safe. That\u2019s the plastic that keeps being produced while\nyou\u2019re recycling. This is the main point of hypocrisy for this language. Your\nlanguage, friend, is not safe. It\u2019s anything but.\n\nI will not even talk about the \u201eBlazingly \ud83d\udd25 fast \ud83d\ude80 memory vulnerabilities,\nwritten in 100% safe Rust. \ud83e\udd80\u201d (in all honesty, I don\u2019t really care enough\nabout Rust to actually check this in detail, but I\u2019m sure that going through\nthis project will be an interesting experience for all Rustaceans). I want to\ntalk only about the unsafe feature thingy, and the false sense of security\nthat the unsafe statement generates. As long as the truth is hidden to you,\nyou can feel safe about it. And allow me to tell you that this is no different\nfrom writing code in C++ - you can write very safe code in C++, and defensive\nprogramming was a thing since the mid 90s and maybe before that. But your\ndefensiveness can go until the libraries you use, and those libraries can mock\nyour defensiveness to hell and back. You cannot tell if your library is really\nsafe, or just a big bomb waiting to explode. You\u2019re as safe as your system is,\nand let me tell you, but in your Rust executable there might be a ton of\nunsafety you have no clue about. But you feel safe because you didn\u2019t write\nthat unsafe label yourself. Someone else did, and someone else has to know\nbetter. Right? Right? Please tell me that it\u2019s true!\n\n## Cargo culting\n\nPerhaps the biggest thing that got everyone in the C++ community wet to the\nbone is cargo. OMG, it\u2019s so nice to have cargo compile everything and download\neverything and...\n\nFriends, fuck cargo. There\u2019s really nothing good about cargo other than the\nenormous speed at which the car you\u2019re driving can hit a wall. I mean, I get\nit. cargo is an enormous productivity tool. It\u2019s so amazing, it allows you to\ndownload code off the internet and be so damn productive, and have...\n\nFriend. Don\u2019t download code off the internet. Don\u2019t copy/paste code off the\ninternet, and don\u2019t trust people from the internet. Why do you trust your\nfellow programmer from 5000 miles away? How is he different from you and how\nis he more competent than you? Why do you trust humanity so much (and how can\nyou trust LLMs trained on data generated by humans)? Humans suck at writing\ncode, and you should not trust stuff automatically.\n\nAnd you can say that, you know, you can configure cargo to not bring stuff at\nrandom. To freeze dependencies. To freeze versions. But if you freeze versions\nyou don\u2019t get security updates. But if you don\u2019t freeze versions you might get\nnew dependencies. But, but, but.\n\nThis is not a new problem, it is an old problem that just got aggravated with\ndelivering a shotgun for every foot in the industry. Also, as explained above\nwith the unsafe thing, just because a tool can be configured to be used the\nright way it doesn\u2019t mean that it will. Maybe Rajit in Pune will know how to\nconfigure and use cargo safely, but Jack in Mountain View gives no fucks about\nthat and decides to ignore Rajit\u2019s instructions. Just because safety rails\nexist doesn\u2019t mean they get used, and just because you advertise certain\nabuses as a bad thing will not stop people from doing bad things. And cargo\nforces you to trust people that opened a github account almost automatically.\n\nI\u2019m not saying not having something like cargo is better. However, most of\nthis world was built on software that was QAed by people that did\ndistributions, that offered some guarantees. If you go and buy stuff from\nRedHat you might get some support from them and you can expect that if a\ncertain library is bad they will fix it in a few hours, days, or weeks,\ndepending on the gravity of the issue. What guarantees does cargo offer?\nEither that you\u2019ll not get your issues fixed unless you follow all the CVEs\npertaining to all the dependencies that you fetch, if you choose to freeze\nyour dependencies, or that you\u2019ll have random people on github offering the\nsame guarantees that a distributor used to offer. Is that feasible? Some\npeople say it is. I see some real efforts made in this direction. Is it safe\nnow? No. Will it be safe soon? No, most likely never. But it will always feel\nsafe-ish. Enough for you not to care about this too much.\n\nNow let\u2019s get back to bad-mouthing the community, because that\u2019s how you don\u2019t\nmake friends around here.\n\n## Being delulu is not the solulu\n\nSo by now we learned that Rust is not a safer language, nor does it encourage\nsafety practices, what is left? Elitism, smugness, and that unmistakable\nfeeling of righteousness that comes with the territory. Most of the issues\ncome from the numbers they keep showing \u201elook, so many issues caused by unsafe\nlanguages\u201d. Friend, your language doesn\u2019t cause issues because 0.001% of the\nworld uses code written in your language.\n\nAll communities have been infiltrated by Rust enthusiasts. I can\u2019t see a good\ndiscussion on the C++ forums without Rust being mentioned as somehow treating\nall ailments of the language. I can\u2019t read on updates to the C standard\nwithout some idiot clamoring that Rust does it better, and we should all\nconvert to his religion. And I wish I could somehow ignore all the things that\nthese idiots keep repeating.\n\nI also hate the unofficial lobbying arm of this community, that published a\nlot of information with effervescence and offer the impression that the reason\nwhy we have faulty tech is memory safety, defined as \u201ewhatever Rust does\u201d. And\nwhen things like \u201edon\u2019t use C and C++, use Rust\u201d are touted from the White\nHouse press correspondent this is dangerous, especially since the whole world\nis built on 30% C code, 30% C++ and the rest anything but Rust.\n\nThe Rust people insist that they are the solution, but the truth is out there,\nand the truth says that Rust is just a fad. A very noisy fad, a definitely\ninteresting fad, maybe one that will catch on, just like C did when other\nbetter languages, like FORTRAN and LISP, existed. But for the time being, we\ncould use a little less volume until you learn how to play the orchestra,\nbecause all we hear is a cacophony of voices, and it\u2019s tiresome.\n\nRust definitely has some technical merits, but I can say that it\u2019s not used\nenough to tell if it\u2019s a life-changing programming choice. It\u2019s too early to\ntell. For the time being, it\u2019s hard to collaborate with Rust people, for them\nit\u2019s Rust or nothing else (but neovim and lua). You can\u2019t use a Rust library\nif you\u2019re writing code in Go, C++ or C (or maybe you can, but why would you?).\nI don\u2019t know of any fundamental library written in Rust that is not a somewhat\nimproved version of some other library that already exists in C++ or C or\npython. All I hear is just noise from delusional people touting the end of the\nworld because I can write bad code in C++.\n\nSo, basically, Rust needs to shut the fuck up and stop lying about its\ncapabilities. Rust is not a memory safe language, and does not embody safety\npractices. There\u2019s a lot of work to be done, a lot of the world to be fixed,\nand I could do away with the noise they make to mask the lack of work. And\nthat takes me to the final point. The people who are actually doing good work\nin Rust, and probably are too busy to start harassing other fundamental\ntechnological stacks because they\u2019re not Rust. Those people, if they exist,\nare doing the work quietly, and I\u2019m thankful for their effort. Just like I am\nfor the billions of potentially unsafe C and C++ lines of code that allow me\nto post this article on the internet today.\n\nDistribuie: | Mastodon | Facebook |\n\nComentarii: e-mail | mastodon | facebook | bluesky |\n\n#### Status\n\nML1 -- draft -- 31365\n\n#### Post\u0103ri recente\n\n  * Horia (2024)\n  * Open source is failing as expected. Not programming advice\n  * Ce podcasturi rom\u00e2ne\u0219ti au mai ap\u0103rut?\n  * #lecturi Februarie-Martie\n  * Avem strategie de securitate informatic\u0103?\n\n#### Categorii\n\n  * Backlog\n  * Blog\n  * Carte\n  * C\u0103r\u021bi\n  * Film\n  * Jocuri\n  * Muzic\u0103\n  * NDA\n  * Personal\n  * Povestire\n  * Recenzii\n  * Social\n  * Tehnic\n\n\u00a9 2024 Dorin Laz\u0103r. Comentariile au fost dezactivate pe termen nelimitat.\nPentru comentarii folosi\u021bi o platform\u0103 alternativ\u0103.\n\nSocials: Mastodon, Bluesky\n\n", "frontpage": true}
