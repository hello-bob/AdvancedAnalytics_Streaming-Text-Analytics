{"aid": "40080316", "title": "Reverse engineering an illegal IPTV application on the Google Play Store", "url": "https://github.com/benhamad/blog/blob/main/2024-04-12-dramalive.md", "domain": "github.com/benhamad", "votes": 2, "user": "chakerb", "posted_at": "2024-04-18 20:22:04", "comments": 0, "source_title": "blog/2024-04-12-dramalive.md at main \u00b7 benhamad/blog", "source_text": "blog/2024-04-12-dramalive.md at main \u00b7 benhamad/blog \u00b7 GitHub\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nbenhamad / blog Public\n\n  * Notifications\n  * Fork 0\n  * Star 0\n\n/\n\n# 2024-04-12-dramalive.md\n\n## Latest commit\n\nbenhamad\n\nChange the title\n\nApr 18, 2024\n\n96972eb \u00b7 Apr 18, 2024Apr 18, 2024\n\n## History\n\nHistory\n\n370 lines (303 loc) \u00b7 15.7 KB\n\n/\n\n# 2024-04-12-dramalive.md\n\n## File metadata and controls\n\n370 lines (303 loc) \u00b7 15.7 KB\n\nRaw\n\n# Reverse engineering an illegal IPTV application on the Google Play Store\n\nI recently came across an illegal IPTV streaming Android application popular\nin my home country with the name Drama Live. This application offer pirated\nIPTV channels. Most of these channels are FTA channels, but some are paid\n(Bein sports, OSN, etc). A lot of these applications are available on the\ninternet, but this one caught my attention because it's available in the\nGoogle Play Store with more than 10M downloads. So I went ahead and installed\nthe application to figure out how it works and where the content is coming\nfrom.\n\nIn the Play Store the application is advertised as a free IPTV player, and\nthat it doesn't have any content. And users will have to provide their own.\nWell, we will see later on how that is not true. We will go through how to set\nthe application up and how it works in the next section. The same application\nis available in the Apple App Store as well. But due to the restrictions on\niOS, it won't be easy to figure out how it works compared to Android.\n\n## Setting up the application\n\nAs I already said, the application can be downloaded from the Google play\nstore. After installing it, you will be greeted with a prompt for m3u8 link.\nThis is where you will need to provide the link to the IPTV service. The idea\nis that you will need to subscribe to a service on your own and get the m3u8\nlink to be able to watch the content. Hence why the application is advertised\nas a free IPTV player.\n\nThat said, a particular link is heavily shared in the internet to be used with\nthis application, it's available to anyone searching for the name of the\ndramalive online. And with TikTok and other social media platforms, it got\nshared more and more.\n\nThis link is for a service called \"fgcode\". This service seems to be offering\nsome sort of playlist editor, where you provide your own m3u8 playlist and can\nedit it and combine other playlists. The result will be a shortened link in\nthe form of fgcode.org/PLAYLIST_ID. That link will have the m3u8 playlist you\nprovided.\n\nThis is where things get interesting. The heavily shared link\nfgcode.org/232425 is for an empty playlist empty m3u8 link.\n\n    \n    \n    [chaker@chaker-yoga drama_live]$ curl fgcode.org/232425 -L -w \"\\n\" #EXTM3U [chaker@chaker-yoga drama_live]$\n\nBut it's treated differently by the application. When you provide this link,\nthe application loads a huge list of channels from an API hardcoded in the\nwithin it. On the other hand when you provide a genuine M3U8 playlist, it will\nonly load the channels from that playlist.\n\nNote on fgcode.org: This service seems to be some kind of url shortener for\nm3u8 links. But one flaw is that it doesn't rate limit requests and the id of\nthe playlist can be brute forced. But it's not out main focus here.\n\n## Intercepting the traffic\n\nTo figure out how the application works, I started by intercepting the traffic\nbetween it and its API. I used HTTP Toolkit to intercept the traffic. I will\nskip how to set up HTTP Toolkit, but you can find the instructions on their\nwebsite.\n\nAll requests issued by this application were plain HTTP, which made it easy to\nintercept them, without the need to install a custom CA certificate. Listening\nto the traffic, I noticed that the payload of the requests issued by the\napplication were encrypted though. It was clear that it's base64 encoded\nstring, but I needed to figure out what kind of encryption it's.\n\nOne of the requests's payload:\n\n    \n    \n    d/HSGvbVOH5fxLSGrEPAc5RM1RDVeNVFIIjnNoaP04ajqhOpKdLZw2QT+eFnlE9U2lL53TMtgDG9 D1k6b0EevkH+q02Sdpan2pn98LYvbWt4aXcE9t7XGD/jEuXwL/u36mt60OrLPKqx7HptibGM04e8 8xQJ0FsK/yUeIuuKFND2uNYia7DI7FTb5FlHaCwJP1FRLuhvjGeMTl7F8kk6/iEUbkAxc3SpHrVf bW1x4YpmF+fnKrn2GLhxpuUbo2nnIqYbnScPd/rW3za//0wy4lVsRaI77U6HRnDjxQ6VBr7CinuR RSBXb5KbMrkWUl5ORMpD7O+hBr3SXCEYqp5MzVeh/Y7gw3AtvoYPEozBbjhZ1BPsXNXXZ3GeSXsG Odc+s7jVkkYWC+xP9cX2xnpHlmN04OTFs391Wd6bBe3yCeoTcCwpbj7NPtIsB3MGjSFBJl8MriYP 4+rcTqf2nWue8dquIc67utXjtBCBae28liGcL9ONun3Dd2YjTejWlP8oe2IiCxGD1khgDN+M34gd TgK9lrNN1J1LnTANnPPctEKEiAbipFbL+RRjdAqIglsi5B+f9EkuXg5v9jnFSRhA8af4dq1kvbOo 6gKTKNDY3c3TXZSBaIL4/fkzReTydtPo/7rTwc98Lckl0bI5lp25k7mou2Fj1xHYY3qEbXLxJjEN rZP7SgbhTNvhPmFs0Dls :ZmVkY2JhOTg3NjU0MzIxMA==\n\nSo we need to reverse engineer the application to figure out how the requests\nare encrypted and decrypted. We will go back to listening to the traffic later\non.\n\n## Reverse engineering the application\n\nI tried using apktool to decompile the APK first. But it only gave me SMALI\nfiles, and though that may be enough to figure out what was happing, jdx was\nmore suited in this case. I used jadx to decompile the APK. And although the\ndecompilation wasn't without errors, I had enough decompiled code to work\nwith.\n\n    \n    \n    [nix-shell:~/Downloads/apk/drama_live]$ jadx drama_live.apk INFO - loading ... INFO - processing ... ERROR - finished with errors, count: 137\n\nFinding the name of the main package of the application:\n\n    \n    \n    [chaker@chaker-yoga drama_live]$ fd drama sources/com/sneig/livedrama/\n\nIt's com.sneig.livedrama. I will be mostly searching in this package. Though\nthe decryption and encryption functions may be in another package. We will see\nhow the code path goes.\n\nOur main goal is to figure out how the requests are issues and there we can\nsee how they're encrypted. One of the requests that I saw when intercepting\nthe traffic was for a getSettings endpoint\n\n    \n    \n    [chaker@chaker-yoga livedrama]$ ag getSettings -l a/f/c.java a/c/a.java a/b.java j/b/e.java j/b/n.java g/x0.java fragments/PlayerFragment.java\n\nChecking the matched files, only j/b/n was issuing an HTTP request. The other\nwere references to a Java function called getSettings.\n\n    \n    \n    [chaker@chaker-yoga livedrama]$ ag getSettings j/b/n.java 134: String str = com.sneig.livedrama.h.n.j(this.b).g().q() + \"getSettings\";\n\nThis is the particular function where the endpoint is being requested. Due to\ndecomplication we don't have the original variable names, but we can still\nfollow the code.\n\n    \n    \n    public void d() { h0.a.a.a(\"Lana_test: Networking: %s: run \", this.a); String str = com.sneig.livedrama.h.n.j(this.b).g().q() + \"getSettings\"; JSONObject a2 = com.sneig.livedrama.j.a.a(this.b); b bVar = new b(a2.length() == 0 ? 0 : 1, str, null, new a(), com.sneig.livedrama.h.r.a(a2.toString())); bVar.M(new z.b.b.e(0, 1000, 1.0f)); bVar.O(this.a); com.sneig.livedrama.h.j.c(this.b).a(bVar, this.a); }\n\nThe following line seems to be building the URL for the request. We can see\nthe URLs is dynamically built.\n\n    \n    \n    String str = com.sneig.livedrama.h.n.j(this.b).g().q() + \"getSettings\";\n\nAnd a2 seems to be the payload of the request.\n\n    \n    \n    JSONObject a2 = com.sneig.livedrama.j.a.a(this.b);\n\nThis is important since we can follow where a2 is used.\n\n    \n    \n    b bVar = new b(a2.length() == 0 ? 0 : 1, str, null, new a(), com.sneig.livedrama.h.r.a(a2.toString()));\n\nSo h.r.a seems maybe the function that encrypts the payload. Note how a2 is\nconverted to a string before being passed to h.r.a.\n\n    \n    \n    com.sneig.livedrama.h.r.a(a2.toString())\n\nLooking up the h.r.a function:\n\n    \n    \n    package com.sneig.livedrama.h; import android.util.Base64; import javax.crypto.Cipher; import javax.crypto.spec.IvParameterSpec; import javax.crypto.spec.SecretKeySpec; /* compiled from: Zippi.java */ /* loaded from: classes5.dex */ public class r { private static String a = \"0123456789abcdef\"; public static String a(String str) { try { if (a.length() < 16) { for (int i = 0; i < 16 - a.length(); i++) { a += \"0\"; } } else if (a.length() > 16) { a = a.substring(0, 16); } IvParameterSpec ivParameterSpec = new IvParameterSpec(\"fedcba9876543210\".getBytes(\"ISO-8859-1\")); SecretKeySpec secretKeySpec = new SecretKeySpec(a.getBytes(\"ISO-8859-1\"), \"AES\"); Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\"); cipher.init(1, secretKeySpec, ivParameterSpec); return Base64.encodeToString(cipher.doFinal(str.getBytes()), 0) + \":\" + Base64.encodeToString(\"fedcba9876543210\".getBytes(\"ISO-8859-1\"), 0); } catch (Exception e) { e.printStackTrace(); return null; } } public static String b(String str) { try { if (a.length() < 16) { for (int i = 0; i < 16 - a.length(); i++) { a += \"0\"; } } else if (a.length() > 16) { a = a.substring(0, 16); } String[] split = str.split(\":\"); IvParameterSpec ivParameterSpec = new IvParameterSpec(Base64.decode(split[1], 0)); SecretKeySpec secretKeySpec = new SecretKeySpec(a.getBytes(\"ISO-8859-1\"), \"AES\"); Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\"); cipher.init(2, secretKeySpec, ivParameterSpec); return new String(cipher.doFinal(Base64.decode(split[0], 0))); } catch (Exception e) { e.printStackTrace(); return null; } } }\n\nAnd we found it! This seems to be a simple AES encryption with a hardcoded key\nand initialization vector. The key is 0123456789abcdef and the IV is\nfedcba9876543210. One interesting thing is that the IV is also base64 encoded\nand appended to the encrypted string. In the format of\nbase64(encrypted_string):base64(IV).\n\nNow that we know how the requests are encrypted, we can decrypt them. With the\nhelp of ChatGPT I rewrote this to a python script with streamlit to create a\nweb app to decrypt the requests.\n\nThis image is an example of the web app in action.\n\n## Back to intercepting the traffic\n\nNow that we have a decryption function, we can see how the requests are\nissued. I'm going to ignore all the requests that list the channels and focus\non one particular endpoint\nhttp://live.backendcoreapi.com/api/live/livedrama/v13.0.0/getLiveAllStreamsById.\nThis endpoints get an id of a channel (e.g. live_tv_beinsport1) and return\nlinks to the live stream.\n\nThe requests payload is\n\n    \n    \n    { \"type\": \"tv\", \"id_live\": \"live_tv_beinsport1\", \"name\": \"Bein S. 1\", \"url\": \"http://.LS.V2LOAD_BALANCERlive_tv_beinsport1/s\", \"agent\": \"redirect\", \"backup\": \"{\\\"url\\\":\\\"https://qt2.dwasat.com/upload/images/logo1.m3u8\\\",\\\"agent\\\":\\\"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Mobile Safari/537.36\\\",\\\"acceptSSL\\\":\\\"1\\\",\\\"headers\\\":{\\\"User-Agent\\\":\\\"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Mobile Safari/537.36\\\",\\\"referer\\\":\\\"https://www.yariga.live/\\\",\\\"Origin\\\":\\\"https://www.yariga.live/\\\"}} -- advanced -;- {\\\"url\\\":\\\"https://webhdrus.onlinehdhls.ru/lb/premium91/index.m3u8\\\",\\\"agent\\\":\\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15\\\",\\\"acceptSSL\\\":\\\"1\\\",\\\"headers\\\":{\\\"User-Agent\\\":\\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15\\\",\\\"referer\\\":\\\"https://lewblivehdplay.ru/\\\",\\\"Origin\\\":\\\"https://lewblivehdplay.ru/\\\"}} -- advanced -;- {\\\"url\\\":\\\"https:\\\\/\\\\/www.aflam4you.pro\\\\/aflam85.json?vid=68&aflam_s=1\\\",\\\"agent\\\":\\\"Mozilla\\\",\\\"headers\\\":{\\\"Content-Type\\\":\\\"application\\\\/x-www-form-urlencoded\\\",\\\"Referer\\\":\\\"https:\\\\/\\\\/www.aflam4you.pro\\\\/\\\",\\\"User-Agent\\\":\\\"Mozilla\\\\/5.0 (Linux; Android 6.0; Nexus 5 Build\\\\/MRA58N) AppleWebKit\\\\/537.36 (KHTML, like Gecko) Chrome\\\\/121.0.0.0 Mobile Safari\\\\/537.36\\\"},\\\"data\\\":\\\" \\\"} -- double_redirect -;- \", \"img_url\": \"http://3.66.87.188/img/channels/live_tv_beinsport1.png\" }\n\nIn this case, the main url is http://.LS.V2LOAD_BALANCERlive_tv_beinsport1/s.\nThis is not an actual URL, but the application requests the actual URL from\nthe server using this link through the getLiveByRedirect endpoint. The payload\nfor that endoint is:\n\n    \n    \n    { \"user_id\": \"......\", \"device_id\": \".....\", \"device_api\": \"30\", \"version_name\": \"174\", \"language\": \"en\", \"timezone\": \"....\", \"device_type\": \"phone\", \"KEY_ACTIVATED_TYPE\": \"232425\", \"store\": \"playStore\", \"isStoreVersion\": true, \"isPremium\": false, \"isCoupon_active\": false, \"hideAds\": false, \"appCount\": \"{\\\"adsFailed\\\":150,\\\"adsLoaded\\\":97,\\\"adsShowed\\\":13,\\\"runCount\\\":31}\", \"mainServer\": \"http://main.backendcoreapi.com/api/live/livedrama/v13.0.0/\", \"id\": \"live_tv_beinsport1\", \"url\": \"http://.LS.V2LOAD_BALANCERlive_tv_beinsport1/s\", \"agent\": \"redirect\" }\n\nI changed the values for user_id, device_id and timezone for privacy reasons.\n\nThe response is a bit interesting:\n\n    \n    \n    { \"result\": 0, \"message\": { \"en\": \"operation succeeded\", \"ar\": \"\u062a\u0645\u062a \u0627\u0644\u0639\u0645\u0644\u064a\u0629 \u0628\u0646\u062c\u0627\u062d\" }, \"data\": { \"url\": \"{\\\"url\\\":\\\"https://hls.muchasgraciasaficion2.one/hls/b27057ebdcc0edb51f694ac9fe4aaa19/index.m3u8\\\",\\\"agent\\\":\\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36\\\",\\\"headers\\\":{\\\"referer\\\":\\\"https://www.koor-alive.live/p2p?live=live&channel=b27057ebdcc0edb51f694ac9fe4aaa19\\\",\\\"User-Agent\\\":\\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36\\\"}}\", \"agent\": \"advanced\" } }\n\nThe url field is a JSON string. It does contain a link to a m3u8 file. But\nwhat's more interesting are those HTTP headers. Trying to request directly the\nURL causes some sort of protection to kick in\n\n    \n    \n    [chaker@chaker-yoga livedrama]$ curl https://hls.muchasgraciasaficion2.one/hls/b27057ebdcc0edb51f694ac9fe4aaa19/index.m3u8 ...... <h2 data-translate=\"blocked_why_headline\">Why have I been blocked?</h2> <p data-translate=\"blocked_why_detail\">This website is using a security service to protect itself from online attacks. The action you just performed triggered the security solution. There are several actions that could trigger this block including submitting a certain word or phrase, a SQL command or malformed data.</p> </div> ....\n\nBut if we use the headers provided in the response, we can access the m3u8\nfile.\n\n    \n    \n    [chaker@chaker-yoga livedrama]$ curl -X GET \"https://hls.muchasgraciasaficion2.one/hls/b27057ebdcc0edb51f694ac9fe4aaa19/index.m3u8\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36\" -H \"referer: https://www.koor-alive.live/p2p?live=live&channel=b27057ebdcc0edb51f694ac9fe4aaa19\" #EXTM3U #EXT-X-VERSION:3 #EXT-X-MEDIA-SEQUENCE:1151 #EXT-X-TARGETDURATION:7 #EXTINF:6.667, 1713470481100.ts #EXTINF:6.666, 1713470487300.ts #EXTINF:6.667, 1713470494100.ts\n\nThis is seems to be some sort of stream hotlinking protection. The application\nthough uses those headers with its own custom media player to play the stream.\nSo the API is returning both the URLs and the headers necessary to bypass the\nprotection.\n\n## Conclusion\n\nThough Dramalive is advertised as only a player, we saw how a single empty\nlink can be used to activate a huge list of channels. Those channels are\nprovided by a hardcoded API within the apk. The API provides all the necessary\nheaders to hotlink illegal streams.\n\nI checked the media player part and how the headers are used. And I think this\nis probably a full time job for a team of people to maintain this app and API.\nBut seeing how much ads are shown and its popularity, it's probably worth it\nfor the developers.\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
