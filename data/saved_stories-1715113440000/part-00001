{"aid": "40284531", "title": "Type Systems in Programming Languages", "url": "https://webdeveloper.beehiiv.com/p/type-systems-programming-languages", "domain": "webdeveloper.beehiiv.com", "votes": 1, "user": "thunderbong", "posted_at": "2024-05-07 12:07:28", "comments": 0, "source_title": "Type Systems in Programming Languages", "source_text": "Type Systems in Programming Languages\n\n  * Web Developer\n  * Posts\n  * Type Systems in Programming Languages\n\n# Type Systems in Programming Languages\n\n## This may be the most programming knowledge you can\u2019t miss\n\nZachary Lee May 05, 2024\n\nThis article will introduce those parts that cannot be ignored in various\nprogramming languages \u2014 the type system.\n\n# What is the Type-System?\n\nWhen learning a programming language, the first few sections of the\nintroductory course usually introduce the various data types of the language,\nand they are inseparable from the subsequent programming development. This is\nenough to show the importance of types to a programming language.\n\nTypes in programming languages are broadly classified and can be divided into\nbuilt-in types represented by int and float, and abstract types represented by\nclass and function. The most striking feature that distinguishes these types\nis that we can only use its specific operations on a specific type.\n\nBut what is the Type-System?\n\nIt\u2019s really a system focused on managing types, it\u2019s a logical system\nconsisting of a set of rules that assign properties called types to various\nstructures of a computer program, such as variables, expressions, functions,\nor modules.\n\n# What can a Type-System do?\n\n  1. Define the program type to ensure the security of the program.\n\n  2. It can improve the readability of the code and improve the abstraction level of the code, rather than the low-level inefficient implementation.\n\n  3. It is beneficial to compiler optimization. After specifying a type, the compiler can align it with the corresponding byte, thereby generating efficient machine instructions.\n\netc.\n\nAs can be seen from the above points, the type of a variable can determine a\nspecific meaning and purpose, which is extremely beneficial to our\nprogramming.\n\n# What is the nature of types in a program?\n\nThe type system can be said to be a tool, why do I say this?\n\nBecause the program ultimately runs machine code. In the world of machine\ncode, there are no types, those instructions just deal with immediate data or\nmemory.\n\nSo the type is essentially an abstraction of memory, and different types\ncorrespond to different memory layouts and memory allocation strategies.\n\nFor more information on memory management check out my previous article:\n\nMemory Management Every Programmer Should Know\n\nWhat data is put on the stack and what data is put on the heap?\n\nwebdeveloper.beehiiv.com/p/memory-management-every-programmer-know\n\n# Static vs. dynamic typing\n\nWe often hear this question, but the difference between the two is when the\ntype checking happens.\n\nThe static type system determines the types of all variables at compile-time\nand throws exceptions in case of incorrect usage.\n\nThe dynamic type system determines the variable type at runtime, throws an\nexception if there is an error, and may crash the program without proper\nhandling.\n\nThe early type error reporting of the static type system ensures the security\nof large-scale application development, while the disadvantage of the dynamic\ntype system is that there is no type checking at compile-time, and the program\nis not safe enough. Only a large number of unit tests can be used to ensure\nthe robustness of the code. But programs that use the dynamic type system are\neasy to write and don\u2019t take a lot of time to make sure the type is correct.\n\n# Strong vs. weak typing\n\nThere is no authoritative definition of the difference between strong typing\nand weak typing. Most of the early discussions on strong typing and weak\ntyping can be summarized as the difference between static typing and dynamic\ntyping.\n\nBut the prevailing saying is that strong types tend to not tolerate implicit\ntype conversions, while weak types tend to tolerate implicit type conversions.\nIn this way, a strongly typed language is usually type-safe, that is, it can\nonly access the memory it is authorized to access in the permitted ways.\n\n# Common programming languages\n\nI summarize a classification diagram of common programming language types,\nnote that the four areas of the split are partitions, for example, PHP and JS\nare both dynamically weakly typed.\n\nIf you find it helpful, please consider subscribing to me. I'll share more\narticles about web development. Thanks for reading.\n\nWeb Developer\n\nSubscribe for the latest updates, tools, and essential articles on web\ndevelopment.\n\nHome\n\nPosts\n\n\u00a9 2024 Web Developer.\n\nPrivacy Policy\n\nTerms of Use\n\nPowered by beehiiv\n\n", "frontpage": false}
