{"aid": "40236227", "title": "Carrot Disclosure", "url": "https://dustri.org/b/carrot-disclosure.html", "domain": "dustri.org", "votes": 2, "user": "surprisetalk", "posted_at": "2024-05-02 13:45:43", "comments": 0, "source_title": "Carrot disclosure", "source_text": "Carrot disclosure\n\n# Artificial truth\n\n### archives | latest | homepage\n\nIf someone claims it rains and someone else claims it doesn't, the job of a\njournalist isn't to report both: it's to look out of the window\n\n##\n\nCarrot disclosure\n\nFri 08 March 2024 \u2014 download\n\nOnce you have found a vulnerability, you can either sit on it, or disclose it.\nThere are usually two ways to disclose, with minor variations:\n\n  1. Coordinated Disclosure, where one gives time to the vendor to issue a fix before disclosing\n  2. Full Disclosure, where one discloses immediately without notifying anyone before.\n\nI would like to coin a 3^rd one: Carrot Disclosure, dangling a metaphorical\ncarrot in front of the vendor to incentivise change. The main idea is to only\npublish the (redacted) output of the exploit for a critical vulnerability, to\nshowcase that the software is exploitable. Now the vendor has two choices:\neither perform a holistic audit of its software, fixing as many issues as\npossible in the hope of fixing the showcased vulnerability; or losing users\nwho might not be happy running a known-vulnerable software. Users of this\ndisclosure model are of course called Bugs Bunnies.\n\nWe all looked at catastrophic web applications, finding a ton of bugs, and\ndeciding not to bother with reporting them, because they were too many of\nthem, because we knew that there will be more of them lurking, because the\nvendor is a complete tool and it would take more time trying to properly\ndisclose things than it took finding the vulnerabilities, ... This is an\nexcellent use case for Carrot Disclosure! Of course, for unauditably-large\ncodebases, it doesn't work: you've got a Linux LPE, who cares.\n\nInterestingly, it shifts the work balance a bit: it's usually harder to write\nan exploit than it's to fix here. But here, the vendor has to audit and fix\nits entire codebase, for the ~low cost of one (1) exploit, that you don't even\nhave to publish if you don't want to.\n\nIf you want to be extra-nice, you can:\n\n  * Publish the SHA256 of the exploit, to prove that you weren't making things up, once it's fixed or if you get sued for whatever frivolous reasons like libel.\n  * Maintain the exploits against new versions, proving that the exploit is still working.\n  * Publish the exploit once it has been fixed, otherwise you risk to have vendors call your bluff next time, or at least notify that the issue has been fixed. Since you don't have hardcoded offsets because we're in 2024, you can even put this in a continuous integration.\n\nLet's have an example, as a treat. A couple of shitty vulnerabilities for\nRaspAP that took me 5 minutes to find and at least 5 more to write an exploit\nfor each of them:\n\n    \n    \n    $ ./read-raspap.py 10.3.141.1 /etc/passwd | head -n 5 [+] Target is running RaspAP [+] Dumping /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin $ ./authed-mitm-raspap.py 10.3.141.1 [+] default login/password in use [+] backdooring system... [+] system backdoored, enjoy your permanent MITM! $ ./leak-wifi-password-raspap.py 10.3.141.1 [+] Got the wifi password: \"secretwifipassword\" $ ./leak-wireguard-key-raspap.py 10.3.141.1 [+] Got the key! Saved as ./wg-10.3.141.1.key $ ./brick-raspap.py 10.3.141.1 [+] Target is running RaspAP [+] Bricking the system... [+] System bricked! $\n\nIt looks like there is a low-hanging unauthenticated arbitrary code execution\nchainable with a privilege escalation to root as well, but since writing an\nexploit would take more than 5 minutes, I can't be bothered, and odds are that\nit'll be fixed along with the persistent denial-of-service anyway. Let me know\nwhen you think those are fixed.\n\nedit: couple of days later, it seems to be a success:\n\n  * A pull-request from defendtheworld adding more escaping, and making all the ajax requests authenticated.\n  * Another pull-request from one of the authors of RaspAP, adding a bit more hardening on top of it.\n\nBut there are still more things to fix.\n\n2011-2024 - Julien (jvoisin) Voisin - CC BY-SA - atom/rss/twitter/mastodon - \u2665\n\n", "frontpage": false}
