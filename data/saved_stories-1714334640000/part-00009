{"aid": "40187452", "title": "Show HN: Scrawl-canvas \u2013 a new text layout engine", "url": "https://scrawl-v8.rikweb.org.uk/demo/canvas-206.html", "domain": "rikweb.org.uk", "votes": 1, "user": "rikroots", "posted_at": "2024-04-28 10:18:18", "comments": 0, "source_title": "Demo Canvas 206", "source_text": "Demo Canvas 206\n\n\u2190 Previous Next \u2192\n\n# Scrawl-canvas v8 - Canvas test 206\n\n## EnhancedLabel entity - basic multiline text\n\nSelect font\n\nLayout template\n\nText unit flow\n\nJustify line\n\nLine spacing\n\nLine adjustment\n\nBreak text on spaces\n\nBreak word on hyphens\n\nAlignment\n\nTruncate string\n\nHyphen string\n\nLocal alignment\n\nShow guidelines\n\nGuideline style\n\nGuideline dash\n\nText handle X\n\nText handle Y\n\nLetter spacing\n\nWord spacing\n\nCANVAS\n\nHTML\n\nLorem ipsum dolor sit amet, consectetur \ud83d\ude00 adipiscing \u00e9lit, sed do eius-mod\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\nquis nostrud exercit-ation ullamco laboris nisi ut aliquip ex ea \"commodo\"\nconsequat. Duis (aute irure d\u00f6lor) in reprehenderit \ud83e\udd16\u00een voluptate velit \u00a92024\nesse <cillum> dolore eu fug\ud83c\udfbbiat nulla pariatur. Excepteur sint occaecat\n\u00a1cupidatat! non proident, sunt in culpa qui offici\u00fea deserunt mollit anim id\nest laborum.\n\nScale\n\nRoll\n\nWidth (Radius)\n\nHeight\n\nScreen refresh: 32ms; fps: 31 Loaded fonts: Noto Arabic Sans normal normal\nNoto Arabic Naskh normal normal Noto Urdu Nastaliq normal normal Noto Chinese\nSimple Sans normal normal Noto Chinese Simple Serif normal normal Noto\nDevangari Sans normal normal Noto Devangari Serif normal normal Noto Hebrew\nSans normal normal Noto Hebrew Serif normal normal Noto Japanese Sans normal\nnormal Noto Japanese Serif normal normal Noto Korean Sans normal normal Noto\nKorean Serif normal normal Noto Mongolian Sans normal normal Noto Tai Le Sans\nnormal normal Noto Tai Tham Sans normal normal Noto Thai Sans normal normal\nNoto Thai Serif normal normal Noto Tirhuta Sans normal normal Roboto Serif\nnormal normal Roboto Serif bold normal Roboto Serif normal italic Roboto Serif\nbold italic Roboto Mono normal normal Roboto Mono bold normal Roboto Mono\nnormal italic Roboto Mono bold italic Garamond normal normal Garamond bold\nnormal Garamond normal italic Garamond bold italic Bungee normal normal Carter\nOne normal normal Mountains Of Christmas normal normal\n\n#### Test purpose\n\nThere are so, so many things to check here! The following list is not\nexhaustive:\n\n  * The initial display should show a serif font, with line-centered text reading from left to right down the yellow box. Emojis should display (in full color) as expected. Lines will break on spaces; words will not break on soft hyphens. Font size will match the HTML displayed text and the line breaks (should) fall after the same words in both representations.\n  * The small red dot will follow the mouse cursor over the text, jumping to each text unit's rotation/reflection point. The initial display centers the text units horizontally, with vertical alignment set to 'alphabetic'.\n  * The demo has been set up to adjust the entity's direction and breakTextOnSpaces attributes to match a font's requirements when that font loads. Check that all fonts do load, and their display matches the HTML display:\n    * Check that Arabic and Hebrew fonts correctly read right-to-left.\n    * Check that Thai fonts break lines as expected.\n    * Check that for Chinese/Japanese fonts, the punctuation does not separate from the previous character across lines.\n  * Update the breakTextOnSpaces value. For western fonts this will lead to as many letters as possible appearing on each line, with words broken in unexpected places. For Arabic and Devangari fonts, this setting will break the displayed text (though the effect is useful for displaying Arabic fonts vertically).\n  * For western fonts, check that words will break across lines on hard and soft hyphens when the breakWordOnHyphens attribute is set to true. Soft hyphens should only appear at the end of a line. Check that the hyphen character can be changed programmatically.\n  * Some fonts will overflow the containing template entity's shape. Check that in these situations the truncate string appears as expected (this will not happen for right-to-left fonts, by design); check also that the truncate character can be changed programmatically.\n  * Check that letterSpacing and wordSpacing attributes operate as expected. The text should flow as these attributes are adjusted.\n  * Check that the text adapts as the template entity's dimensions are adjusted. Again, the text should flow (and match the HTML line breaks as closely as possible).\n  * Check that text flow should see minimal changes as the template entity's scale is adjusted. The font's size should grow/shrink to match the scaling factor.\n  * Check that when the template entity's rotation (roll attribute) updates, the text moves with the template.\n  * Updating the textHandleX attribute should see minimal text movement, but the red dot will now settle on each text unit's left or right edge.\n  * Updating the textHandleY attribute will cause the text to move upwards/downwards to match the attribute's value. Again, the red dot's positioning will match the attribute's value.\n  * Check that adjusting the lineAdjustment attribute will move the text up/down, but the effect does not leave a significant gap at the top of the template entity's yellow background.\n  * Check that adjusting the lineSpacing attribute alters the spacing between lines as expected. Setting this attribute to 0 should lead to the display of a single line, not to an error.\n  * Check the justifyLine attribute:\n    * The \"start\" and \"end\" values should move each line of text to the start/end of the line respectively. For Arabic/Hebrew fonts this will be the right hand side of the template entity's shape; for other fonts, the left hand side.\n    * The \"center\" value will center the text (as shown on initial display)\n    * The \"space-between\" attribute will show a fully-justified-line effect. Any single orphan words at the end of the text should move to the left/right edge (dependant on the font); double orphan words will have a large gap between them.\n    * The \"space-around\" attribute will display a near-full-justified effect; the last line of text will be centered.\n  * Update the alignment attribute. The text should rotate within the template entity's shape, reflowing to fit within the shape as it rotates.\n  * Update the textUnitFlow attribute:\n    * The \"row\" value should display horizontal text (as initially displayed) with lines running downwards\n    * The \"row-reverse\" value will reverse the text lines, with the first line displaying at the bottom and other lines running upwards\n    * The \"column\" value should display text as horizontal columns. Each text unit will appear along the column, but rotated 90 degrees around its rotation/reflection point. If the text is not broken on spaces then each letter will appear on its own along the column (change the alignment attribute to show vertical text - for example for Chinese/Japanese fonts)\n    * The \"column-reverse\" value reverses the order of the columns.\n  * Update the localAlignment attribute to adjust each text unit's rotation. Have fun playing with the various rotation attributes to see how they interact.\n  * Also play with the guideline attribute settings - this will help you see where each text unit is supposed to be in relationship to its line.\n  * Finally ... update the layoutTemplate attribute. Text should flow within each template's shape.\n\nKnown issue: When changing the font, or the layout template, the positioning\nof the red ball breaks down; however that can be fixed by making a small\nadjustment to another attribute.\n\nKnown issue: letter spacing does not work in Safari browsers.\n\nTouch test: not required.\n\nAnnotated code\n\nA special note about fonts\n\nBecause fonts load asynchronously, and SC EnhancedLabel entitys currently have\na (near-unsolvable) bug where they will measure a font before the font\nfamily's various iterations (if specified in CSS @font-family definitions)\nhave downloaded - they only wait for their default font to download, not any\nadditional fonts included (via CSS) in their text string - it makes sense for\nus to trigger font downloads as soon as possible. And the simplest way to do\nthat is to include text using those fonts in a \"hidden\" (actually an aria-\nhidden=\"true\" style=\"height: 0; overflow: hidden\") element in the web page,\nahead of the <script> tag that triggers the SC canvas build.\n\nThere are, of course, more professional ways for a front-end engineer to\nmanage efficient and timely font downloads ... but this is just a demo and,\nwell, needs must!\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nTest Test Test Test\n\nAnother special note about Chinese and Japanese scripts\n\nAs much as we would like to treat every Chinese and Japanese character as its\nown thing, both writing systems insist that certain punctuation marks cannot\nbe separated from their preceding character over a line break. Browsers know\nabout this, and make sure it happens in normal HTML. SC, however, makes no\neffort to guess when this should happen.\n\nFor this demo, we have manually added word joiner characters - HTML entity\n&#x2060; - immediately before these punctuation marks. A more robust code\nsolution to pre-process canvas text would be required to handle this sort of\nthing in production environments. Building such a solution into the SC code is\nnot in scope for the project.\n\nAn even more special note about Thai scripts\n\nBreaking Thai \"words\" across lines is a difficult issue - see the W3C Thai\nLayout Requirements spec for the latest position.\n\nThe Thai script is a complex abugida. Spaces are used, but the tendency is to\nonly insert them at natural breath pauses, which means a Thai \"word\" (as in: a\nset of characters not separated by spaces) can get exceptionally long.\n\nTo break such words across lines, one recommendation is to insert zero-space\nspaces - HTML entity &#x200B; - in places where this can be done. Browser\nengines seem to do this internally, but getting that data from the text string\ndoesn't seem possible. For the two Thai fonts above, this has been done\nmanually by copying the raw string into a <p style='width: 10px; font: 16px\n\"Noto Thai Looped Sans\"'> element and then counting the characters. Not\nrecommended for production!\n\n\u0e43\u0e19\u0e41\u0e1c\u0e19\u0e40\u0e14\u0e34\u0e21\u0e23\u0e16\u0e44\u0e1f\u0e1f\u0e49\u0e32\u0e41\u0e2d\u0e23\u0e4c\u0e1e\u0e2d\u0e23\u0e4c\u0e15 \u0e40\u0e23\u0e25 \u0e25\u0e34\u0e07\u0e01\u0e4c\n\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e21\u0e31\u0e01\u0e01\u0e30\u0e2a\u0e31\u0e19\u0e08\u0e30\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e40\u0e1e\u0e0a\u0e23\u0e1a\u0e38\u0e23\u0e35\u0e02\u0e2d\u0e07\u0e23\u0e16\u0e44\u0e1f\u0e1f\u0e49\u0e32\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23\u0e17\u0e35\u0e48\u0e0a\u0e31\u0e49\u0e19 \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e2d\u0e32\u0e04\u0e32\u0e23\n\u0e41\u0e15\u0e48\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e2a\u0e4d\u0e32\u0e23\u0e27\u0e08\u0e40\u0e2a\u0e49\u0e19\u0e17\u0e32\u0e07\u0e41\u0e25\u0e49\u0e27 \u0e1e\u0e1a\u0e27\u0e48\u0e32\u0e40\u0e2a\u0e49\u0e19\u0e17\u0e32\u0e07\u0e14\u0e31\u0e07\u0e01\u0e25\u0e48\u0e32\u0e27 \u0e21\u0e35\u0e17\u0e48\u0e2d\u0e2a\u0e48\u0e07\u0e19\u0e49\u0e4d\u0e32\u0e21\u0e31\u0e19\u0e02\u0e2d\u0e07\u0e1b\u0e15\u0e17.\n\u0e15\u0e32\u0e21\u0e41\u0e19\u0e27\u0e17\u0e32\u0e07\u0e23\u0e16\u0e44\u0e1f\u0e2a\u0e32\u0e22\u0e15\u0e30\u0e27\u0e31\u0e19\u0e2d\u0e2d\u0e01 \u0e17\u0e48\u0e2d\u0e19\u0e49\u0e4d\u0e32\u0e1b\u0e23\u0e30\u0e1b\u0e32\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e1b\u0e32\u0e19\u0e04\u0e23\u0e2b\u0e25\u0e27\u0e07\n\u0e41\u0e25\u0e30\u0e17\u0e48\u0e2d\u0e19\u0e49\u0e4d\u0e32\u0e17\u0e34\u0e49\u0e07\u0e25\u0e07\u0e04\u0e25\u0e2d\u0e07\u0e41\u0e2a\u0e19\u0e41\u0e2a\u0e1a\u0e02\u0e2d\u0e07\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23\n\u0e17\u0e35\u0e48\u0e01\u0e32\u0e23\u0e23\u0e16\u0e44\u0e1f\u0e1f\u0e49\u0e32\u0e02\u0e19\u0e2a\u0e48\u0e07\u0e21\u0e27\u0e25\u0e0a\u0e19\u0e41\u0e2b\u0e48\u0e07\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u0e23\u0e37\u0e49\u0e2d\u0e22\u0e49\u0e32\u0e22\u0e08\u0e32\u0e01\u0e08\u0e38\u0e14\u0e40\u0e14\u0e34\u0e21\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e40\u0e1e\u0e0a\u0e23\u0e1a\u0e38\u0e23\u0e35\n\u0e02\u0e27\u0e32\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e08\u0e36\u0e07\u0e17\u0e4d\u0e32\u0e43\u0e2b\u0e49\u0e01\u0e32\u0e23\u0e02\u0e38\u0e14\u0e40\u0e08\u0e32\u0e30\u0e17\u0e32\u0e07\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e40\u0e02\u0e49\u0e32\u0e15\u0e31\u0e27\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e23\u0e16\u0e44\u0e1f\u0e1f\u0e49\u0e32\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e4d\u0e32\u0e44\u0e14\u0e49\n\n", "frontpage": false}
