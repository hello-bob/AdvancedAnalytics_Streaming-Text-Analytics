{"aid": "40049258", "title": "Only <Span>S", "url": "https://onlyspans.net/", "domain": "onlyspans.net", "votes": 3, "user": "lifthrasiir", "posted_at": "2024-04-16 07:29:03", "comments": 0, "source_title": "OnlySpans.net", "source_text": "OnlySpans.net\n\nOnly <SPAN>s Each element on this page is a SPAN element. No elements are\ndynamically added to the page. Styles Each SPAN specifies styling properties\nthrough the `style` attribute. This is bold This is italicized These effects\nare impossible \u25b6 Code (click to show) ```html This is <span style=\"font-\nweight: 700\">bold</span> This is <span style=\"font-style:\nitalic\">italicized</span> <span style=\"text-decoration: line-through\">These\neffects are impossible</span> ``` Line Breaks Newline characters are normally\ntreated like spaces. They do not force a line break. `BR` elements force line\nbreaks. Normally, newline characters do not actually break lines. They are\ntreated like space characters. \u25b6 Code (click to show) ```html <span\nstyle=\"white-space: normal;\">Normally, newline characters do not actually\nbreak lines. They are treated like space characters.</span> ``` When SPAN\nelements have the styling property white-space: pre-wrap, newline characters\nin the HTML code are treated as line breaks. With pre-wrap, newline characters\nactually break lines and are not treated like space characters \u25b6 Code (click\nto show) ```html <span style=\"white-space: pre-wrap;\">With pre-wrap, newline\ncharacters actually break lines and are not treated like space\ncharacters</span> ``` CSS Tables CSS Level 3 supports special values for the\n`display` styling property: Value Behavior table Acts like TABLE table-row\nActs like TR table-cell Acts like TD \u25b6 Code (click to show) ```html <span\nstyle=\"display: table\"> <span style=\"display: table-row\"> <span\nstyle=\"display: table-cell\">Value</span> <span style=\"display: table-\ncell\">Behavior</span> </span> <span style=\"display: table-row\"> <span\nstyle=\"display: table-cell\">table</span> <span style=\"display: table-\ncell\">Acts like TABLE</span> </span> </span> ``` Using these special style\nproperties, SPAN elements can create simple table layouts. Unfortunately there\nis no equivalent of `colspan` and `rowspan` (\"merge cells\" in Excel parlance)\nImages Images can be added to pages using the `background-image` inline style.\nTo ensure spans are displayed, the `width`, `height` and `display` attributes\nare set: \u25b6 Code (click to show) ```html <span style=\" width: 128px; height:\n128px; background-image: url('https://sheetjs.com/sketch128.png'); display:\ninline-block; \"></span> ``` Dynamic Elements Inline event handlers allow for\nsome scripting without introducing explicit SCRIPT tags. The following example\nuses the `onclick` inline event handler to increment a counter: The blue span\nhas been clicked 0 times \u25b6 Code (click to show) ```html <span\nonclick=\"(function() { event.target.innerText = (+event.target.innerText) + 1;\n})()\">0</span> ``` Effectuating `onload` SPAN elements do not receive a `load`\nevent. Instead, this page uses a `contenteditable` SPAN with an `autofocus`\nattribute. This ensures the `onfocus` inline handler is called. If multiple\nelements have the `autofocus` attribute, only the first element will receive\nfocus. To simplify the page, the `contenteditable autofocus` SPAN will send a\nsynthetic double click (`dblclick`) event to each SPAN element on the page\nbefore hiding itself: The relevant SPAN is at the top of the page (line 6 in\nthe source). If it were placed here, the browser would scroll to this SPAN. \u25b6\nCode (click to show) ```html <span contenteditable autofocus\nonfocus=\"(function(){\n[...document.getElementsByTagName('SPAN')].forEach(function(n) { var evt =\ndocument.createEvent('MouseEvents'); evt.initEvent('dblclick', true, true);\nn.dispatchEvent(evt); }); event.target.style.visibility = 'hidden';\n})()\"></span> ``` Within the `ondblclick` inline handler, the SPAN DOM element\ncan be referenced with the `target` property of the `event` global. The\nfollowing example shows the current time. The `ondblclick` event handler uses\n`setInterval` to set up a loop that updates the time. Clearing the\n`ondblclick` property ensures that a real double click will not invoke the\noriginal handler. The time is now Tue Apr 16 2024 08:00:10 GMT+0000\n(Coordinated Universal Time) \u25b6 Code (click to show) ```html <span style=\"font-\nfamily: monospace\" ondblclick=\"(function() { var last = new Date().toString(),\ntgt = event.target; tgt.innerText = last; setInterval(function() { var cur =\nnew Date().toString(); if(last != cur) tgt.innerText = last = cur; }, 100);\ntgt.ondblclick = null; })()\"></span> ``` Emulating CSS Classes Within the\n`onfocus` handler of the `autofocus` SPAN, every SPAN element on the page is\nvisited. The `classList` property is a list of class names. Code can manually\napply styling properties. The code blocks that are displayed with the \"Show\nCode\" buttons use the `codeblock` class. \u25b6 Code (click to show) ```html <span\ncontenteditable autofocus onfocus=\"(function(){\n[...document.getElementsByTagName('SPAN')].forEach(function(n) { /* configure\n'codeblock' spans */ if(n.classList.contains('codeblock')) { var S = n.style;\nS['font-family'] = 'monospace'; S['display'] = 'none'; } })()\"></span> ```\nFetching Data The `ondblclick` handler can fetch data. The following example\nfetches a text file: The current version of SheetJS Community Edition is\n0.20.2 \u25b6 Code (click to show) ```html <span ondblclick=\"(async function() {\nconst versions = await (await\nfetch('https://cdn.sheetjs.com/xlsx.lst')).text(); event.target.innerText =\nversions.trim().split('\\n').reverse()[0]; })()\"></span> ``` Editable Elements\nThe `contenteditable` attribute allows users to edit the content of SPAN\nelements. An `input` event is dispatched when the content has changed. The\nfollowing example includes one `contenteditable` SPAN and one non-editable\nSPAN. The `oninput` event handler of the first SPAN changes the `innerText`\nproperty of the second SPAN. Click the text span below and start typing: Click\nhere and start typing! The following span will update when the previous span\nis edited: Edit the previous span External Scripts External scripts can be\nfetched and evaluated using `eval`. The following example fetches the SheetJS\nSSF Library and displays the version number. The current version of the\nSheetJS SSF number formatting library is 0.11.3 \u25b6 Code (click to show) ```html\n<span ondblclick=\"(async function() { const url =\n'https://cdn.sheetjs.com/ssf-0.11.3/ssf.js'; const code = await (await\nfetch(url)).text(); eval(ssf_text); event.target.innerText = SSF.version;\n})()\"></span> ``` This example uses the SheetJS SSF Library to format values.\nThe SPAN elements with green borders are editable. When either SPAN is\nchanged, the \"Number Value\" SPAN content is interpreted as a JS `Number` and\nformatted using the Format Code. The \"Formatted Text\" is automatically\ncalculated from the \"Format Code\" and \"Number Value\". Try setting the \"Format\nCode\" to #,##0.00 and the value to 314159.265 Format Code $0.00 Number Value\n3.5 Formatted Text $3.50 SheetJS LLC has been \"making sheet happen\" with\ncreative use of HTML, CSS and JS since 2012. If pushing the limits of the web\ntickles your fancy, consider joining us!\n\n", "frontpage": false}
