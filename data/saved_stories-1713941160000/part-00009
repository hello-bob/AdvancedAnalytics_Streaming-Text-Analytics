{"aid": "40138483", "title": "Notifications in Gnome 46 and Beyond", "url": "https://blogs.gnome.org/shell-dev/2024/04/23/notifications-46-and-beyond/", "domain": "gnome.org", "votes": 1, "user": "malobre", "posted_at": "2024-04-23 23:15:58", "comments": 0, "source_title": "Notifications in 46 and beyond", "source_text": "Notifications in 46 and beyond \u2013 GNOME Shell & Mutter\n\nSkip to content\n\nGNOME Shell & Mutter\n\nDevelopment blog for GNOME Shell and Mutter\n\nPosted on April 23, 2024 by jsparber\n\n# Notifications in 46 and beyond\n\nOne of the things we\u2019re tackling as part of the STF infrastructure initiative\nis improving notifications. Other platforms have advanced significantly in\nthis area over the past decade, while we still have more or less the same\nnotifications we had since the early GNOME 3 days, both in terms of API and\nfeature set. There\u2019s plenty to do here\n\nThe notification drawer on GNOME 45\n\n## Modern needs\n\nAs part of the effort to port GNOME Shell to mobile Jonas looked into the\ndelta between what we currently support and what we\u2019d need for a more modern\nnotification experience. Some of these limitations are specific to GNOME\u2019s\nimplementation, while others are relevant to all desktops.\n\n#### Tie notifications to apps\n\nAs of GNOME 45 there\u2019s no clear identification on notification bubbles which\napp they were sent by. Sometimes it\u2019s hard to tell where a notification is\ncoming from, which can be annoying when managing notifications in Settings.\nThis also has potential security implications, since the lack of\nidentification makes it trivial to impersonate other apps.\n\nWe want all notifications to be clearly identified as coming from a specific\napp.\n\n#### Global notification sounds\n\nGNOME Shell can\u2019t play notification sounds in all cases, depending on the API\nthe app is using (see below). Apps not primarily targeting GNOME Shell\ndirectly tend to play sounds themselves because they can\u2019t rely on the system\nalways doing it (it\u2019s an optional feature of the XDG Notification API which\ndifferent desktops handle differently). This works, but it\u2019s messy for app\ndevelopers because it\u2019s hard to test and they have to implement a fallback\nsound played by the app. From a user perspective it\u2019s annoying that you can\u2019t\nalways tell where sounds are coming from because they\u2019re not necessarily tied\nto a notification bubble. There\u2019s also no central place to manage the\nnotification behavior and it doesn\u2019t respect Do Not Disturb.\n\n#### Notification grouping\n\nCurrently all notifications are just added to a single chronological list,\nwhich gets messy very quickly. In order to limit the length of the list we\nonly keep the latest 3 notifications for every app, so notifications can\ndisappear before you have a chance to act on them.\n\nOther platforms solve this by grouping notifications by app, or even by\nmessage thread, but we don\u2019t have anything like this at the moment.\n\nNotifications grouped by app on the iOS lock screen\n\n#### Expand media support\n\nCurrently each notification bubble can only contain one (small) image. It\u2019s\nmostly used for user avatars (for messages, emails, and the like), but\nsometimes also for actual content (e.g. a thumbnail for the image someone\nsent).\n\nIdeally what we want is to be able to show larger images in addition to\navatars, as the actual content of the notification.\n\nAs of GNOME 45 we only have a single slot for images on notifications, and\nit\u2019s too small for actual content.Other platforms have multiple slots (app\nicon, user avatar, and content image), and media can be expanded to much\nlarger sizes.\n\nThere\u2019s also currently no way to include descriptive text for images in\nnotifications, so they are inaccessible to screen readers. This isn\u2019t as big a\ndeal with the current icons since they\u2019re small and mostly used for ornamental\npurposes, but will be important when we add larger images in the body.\n\n#### Updating notification content\n\nIt\u2019s not possible for apps to update the content inside notifications they\nsent earlier. This is needed to show progress bars in notifications, or\nupdating the text if a chat message was modified.\n\n## How do we get there?\n\nUnfortunately, it turns out that improving notifications is not just a matter\nof standardizing a few new features and implementing them in GNOME Shell. The\nway notifications work today has grown organically over the years and the\nstatus quo is messy. There are three different APIs used by apps today: XDG\nNotification, Gio.Notification, and XDG Portal.\n\n#### XDG Notification\n\nThis is the Freedesktop specification for a DBus interface for apps to send\nnotifications to the system. It\u2019s the oldest notification API still in use.\nOther desktops mostly use this API, e.g. KDE\u2019s KNotification implements this\nspec.\n\nSomewhat confusingly, this standard has never actually been finalized and is\nstill marked as a draft today, despite not having seen significant changes in\nthe past decade.\n\n#### Gio.Notification\n\nThis is an API in GLib/Gio to send notifications, so it\u2019s only used by GTK\napps. It abstracts over different OS notification APIs, primarily the XDG one\nmentioned above, a private GNOME Shell API, the portal API, and Cocoa (macOS).\n\nThe primary one being used is the private DBus interface with GNOME Shell.\nThis API was introduced in the early GNOME 3 days because the XDG standard API\nwas deemed too complicated and was missing some features (in particular\nnotifications were not tied to a specific app).\n\nWhen using Gio.Notification apps can\u2019t know which backend is used, and how a\nnotification will be displayed or behave. For example, notifications can only\npersist after the app is closed if the private GNOME Shell API is used. These\ndifferences are specific to GNOME Shell, since the private API is only\nimplemented there.\n\n#### XDG Portal\n\nXDG portals are secure, standardized system APIs for the Linux desktop. They\nwere introduced as part of the push for app sandboxing around Flatpak, but can\n(and should) be used by non-sandboxed apps as well.\n\nThe XDG notification portal is based on the private GNOME Shell API, with some\nadditional features from the XDG API mixed in.\n\nXDG portals consist of a frontend and a backend. In the case of the\nnotification portal, apps talk to the frontend using the portal API, while the\nbackend talks to the system notification API. Backends are specific to the\ndesktop environment, e.g. GNOME or KDE. On GNOME, the backend uses the private\nGNOME Shell API when possible.\n\nHow different notification APIs are used today\n\n## The plan\n\nFrom the GNOME Shell side we have the XDG API (used by non-GNOME apps), and\nthe private API (used via Gio.Notification by GNOME apps). From the app side\nwe additionally have the XDG portal API. Neither of these can easily supersede\nthe others, because they all have different feature sets and are widely used.\nThis makes improving our notifications tricky, because it\u2019s not obvious which\nof the APIs we should extend.\n\nAfter several discussions over the past few months we now have consensus that\nit makes the most sense to invest in the XDG portal API. Portals are the\nfuture of system APIs on the free desktop, and enable app sandboxing. Neither\nof the other APIs can fill this role.\n\nOur plan for notification APIs going forward: Focus on the portal API\n\nThis requires work in a number of different modules, including the XDG portal\nspec, the XDG portal backend for GNOME, GNOME Shell, and client libraries such\nas Gio.Notification (in GLib), libportal, libnotify, and ashpd.\n\nIn the XDG portal spec, we are adding support for a number of missing\nfeatures:\n\n  * Tying notifications to apps\n  * Grouping by message thread\n  * Larger images in the notification body\n  * Special notifications for e.g. calls and alarms\n  * Clearing up some instances of undefined behavior (e.g. markup in the body, playing sounds, whether to show notifications on the lock screen, etc.)\n\nThis is the draft XDG desktop portal proposal for the spec changes.\n\nOn the GNOME Shell side, these are the primary things we\u2019re doing (some\nalready done in 46):\n\n  * Cleanups and refactoring to make the code easier to work on\n  * Improve keyboard navigation and screen reader accessibility\n  * Header with app name and icon\n  * Show full notification body and buttons in the drawer\n  * Larger notification icons (e.g. user avatars on chat notifications)\n  * Group notifications from the same app as a stack\n  * Allow message threads to be grouped in a single notification bubbles\n  * Larger images in the notification body\n\nMockups of what we\u2019d ideally want, including grouping by app, threading, etc.\n\nThere are also animated mockups for some of this, courtesy of Jakub Steiner.\n\nVideo Player\n\n00:00\n\n00:00\n\n00:10\n\nUse Up/Down Arrow keys to increase or decrease volume.\n\nThe long-term goal is for apps to switch to the portal API and deprecate both\nof the others as application-facing APIs. Internally we will still need\nsomething to communicate between the portal backend and GNOME Shell, but this\nisn\u2019t public API so we\u2019re much more flexible here. We might expand either the\nXDG API or the private GNOME Shell protocol for this purpose, but it has not\nbeen decided yet how we\u2019ll do this.\n\n## What we did in GNOME 46\n\nWhen we started the STF project late last year we thought we could just pull\nthe trigger on a draft proposal Jonas for an API with the new capabilities\nneeded for mobile. However, as we started discussing things in more detail we\nrealized that this was the the wrong place to start. GNOME Shell already\ndidn\u2019t implement a number of features that are in the XDG notification spec,\nso standardizing new features was not the main blocker.\n\nThe code around notifications in GNOME Shell has grown historically and has\nseen multiple major UI redesigns since GNOME 3.0. Additional complexity comes\nfrom the fact that we try to avoid breaking extensions, which means it\u2019s\ndifficult to e.g. change function names or signatures. Over time this has\nresulted in technical debt, such as weird anachronistic structures and names.\nIt was also not using many of the more recent GJS features which didn\u2019t exist\nyet when this code was written originally.\n\nAnyone remember that notifications used to be on the bottom? This is what they\nlooked like in GNOME 3.6 (2012).\n\nAs a first step we restructured and cleaned up legacy code, ported it to the\nmost recent GJS features, updated the coding style, and so on. This\nunfortunately means extensions need to be updated, but it puts us on much\nfirmer ground for the future.\n\nWith this out of the way we added the first batch of features from our list\nabove, namely adding notification headers, expanding notifications in the\ndrawer, larger icons, and some style fixes to icons. We also fixed a very\nannoying issue with \u201cApp is ready\u201d notifications not working as expected when\nclicking a notification (!3198 and !3199).\n\nWe also worked on a few other things that didn\u2019t make it in time for 46, most\nnotably grouping notifications by app (which there\u2019s a draft MR for), and\nadditionally grouping them by thread (prototype only).\n\nThroughout the cycle we also continued to discuss the portal spec, as\nmentioned above. There are MRs against against XDG desktop portal and the\nlibportal client library implementing the spec changes. There\u2019s also a draft\nimplementation for the GTK portal backend.\n\n## Future work\n\nWith all the groundwork laid in GNOME 46 and the spec draft mostly ready we\u2019re\nin a good position to continue iterating on notifications in 47 and beyond. In\nGNOME 47 we want to add some of the first newly spec\u2019d features, in particular\nnotification sounds, markup support in the body, and display hints (e.g.\nshowing on the lock screen or not).\n\nWe also want to continue work on the UI to unlock even more improvements in\nthe future. In particular, grouping by app will allow us to drop the \u201conly\nkeep 3 notifications per app\u201d behavior and will generally make notifications\neasier to manage, e.g. allowing to dismiss all notifications from a given app.\nWe\u2019re also planning to work on improving keyboard navigation and ensuring all\ncontent is accessible to screen readers.\n\nDue to the complex nature of the UI for grouping by app and the many moving\nparts with moving forward on the spec it\u2019s unclear if we\u2019ll be able to do more\nthan this in the scope of STF and within the 47 cycle. This means that\nadditional features that require the new spec and/or lots of UI work, such as\ngrouping by thread and custom UI for call or alarm notifications will probably\nbe 48+ material.\n\n## Conclusion\n\nAs we hope this post has illustrated, notifications are way more complex than\nthey might appear. Improving them requires untangling decades of legacy stuff\nacross many different components, coordinating with other projects, and\nengaging with standards bodies. That complexity has made this hard to work on\nfor volunteers, and there has not been any recent corporate interest in the\narea, which is why it has been stagnant for some time.\n\nThe Sovereign Tech Fund investment has allowed us to take the time to properly\nwork through the problem, clean up technical debt, and make a plan for the\nfuture. We hope to leverage this momentum over the coming releases, for a\nbest-in-class notification experience on the free desktop. Stay tuned\n\nCategoriesUncategorizedTagsNotifications\n\nProudly powered by WordPress\n\n", "frontpage": false}
