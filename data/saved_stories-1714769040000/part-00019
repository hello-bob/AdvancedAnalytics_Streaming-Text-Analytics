{"aid": "40247647", "title": "Hangfire \u2013 Background Processing in .NET and .NET Core Applications", "url": "https://www.hangfire.io/", "domain": "hangfire.io", "votes": 2, "user": "bilekas", "posted_at": "2024-05-03 13:49:27", "comments": 0, "source_title": "Hangfire \u2013 Background jobs and workers for .NET and .NET Core", "source_text": "Hangfire \u2013 Background jobs and workers for .NET and .NET Core\n\nFor the purpose of providing services through our website we need to gather\nand process the necessary cookies. Additional cookies may be gathered by our\nservice providers. By pressing \u201cI Agree\u201d you hereby confirm that you have\nreviewed our Cookie Policy. Learn more\n\n# Hangfire\n\nAn easy way to perform background processing in .NET and .NET Core\napplications. No Windows Service or separate process required.\n\nBacked by persistent storage. Open and free for commercial use.\n\nPrevious Next\n\n### Fire-and-Forget Jobs\n\nFire-and-forget jobs are executed only once and almost immediately after\ncreation.\n\n    \n    \n    var jobId = BackgroundJob.Enqueue( () => Console.WriteLine(\"Fire-and-forget!\"));\n\n### Delayed Jobs\n\nDelayed jobs are executed only once too, but not immediately, after a certain\ntime interval.\n\n    \n    \n    var jobId = BackgroundJob.Schedule( () => Console.WriteLine(\"Delayed!\"), TimeSpan.FromDays(7));\n\n### Recurring Jobs\n\nRecurring jobs fire many times on the specified CRON schedule.\n\n    \n    \n    RecurringJob.AddOrUpdate( \"myrecurringjob\", () => Console.WriteLine(\"Recurring!\"), Cron.Daily);\n\n### Continuations\n\nContinuations are executed when its parent job has been finished.\n\n    \n    \n    BackgroundJob.ContinueJobWith( jobId, () => Console.WriteLine(\"Continuation!\"));\n\n### Batches Pro\n\nBatch is a group of background jobs that is created atomically and considered\nas a single entity.\n\n    \n    \n    var batchId = BatchJob.StartNew(x => { x.Enqueue(() => Console.WriteLine(\"Job 1\")); x.Enqueue(() => Console.WriteLine(\"Job 2\")); });\n\n### Batch Continuations Pro\n\nBatch continuation is fired when all background jobs in a parent batch\nfinished.\n\n    \n    \n    BatchJob.ContinueBatchWith(batchId, x => { x.Enqueue(() => Console.WriteLine(\"Last Job\")); });\n\n### Recent News\n\n  * ##### Hangfire 1.8.12\n\nFixed recurring job behavior when they were scheduled to the past in corner\ncases and added experimental parallel execution for recurring and delayed job\nschedulers.\n\nApril 8, 2024\n\n  * ##### Hangfire.Throttling 1.4.1\n\nSource Link support, signed NuGet package with its assemblies and more secure\nCI pipeline for the project.\n\nMarch 15, 2024\n\n  * ##### Hangfire.Pro.Redis 3.0.7\n\nBetter Redis Cluster connectivity, source link support, signed NuGet packages\nand their assemblies and more secure CI pipeline.\n\nMarch 15, 2024\n\n  * ##### Hangfire.Pro 3.0.3\n\nHidden action buttons in a read-only dashboard, signed NuGet packages and all\nthe assemblies with a company-owned code-signing certificate.\n\nFebruary 15, 2024\n\n  * ##### Hangfire 1.8.10\n\nFixed regression in Hangfire.AspNetCore 1.8.9, bumped dependencies and signed\nNuGet packages and DLL assemblies with a company code signing certificate.\n\nFebruary 12, 2024\n\nSee our blog\n\n### Courses\n\nPrevious Next\n\n### Simple\n\nEasy to set up, easy to use. No Windows Service, no Windows Scheduler, no\nseparate applications required.\n\nBackground jobs are regular static or instance .NET methods with regular\narguments \u2013 no base class or interface implementation required.\n\n### Persistent\n\nBackground jobs are created in a persistent storage \u2013 SQL Server and Redis\nsupported officially, and a lot of other community-driven storages.\n\nYou can safely restart your application and use Hangfire with ASP.NET without\nworrying about application pool recycles.\n\n### Transparent\n\nBuilt-in web interface allow you to see the whole picture of your background\nprocessing, as well as observe the state of each background job.\n\nOut of the box support for popular logging frameworks allows you to catch\nerrors early with zero configuration.\n\n### Reliable\n\nOnce a background job was created without any exception, Hangfire takes the\nresponsibility to process it with the at least once semantics.\n\nYou are free to throw unhandled exceptions or terminate your application \u2013\nbackground jobs will be re-tried automatically.\n\n### Distributed\n\nBackground method calls and their arguments are serialized and may overcome\nthe process boundaries.\n\nYou can use Hangfire on different machines to get more processing power with\nno configuration \u2013 synchronization is performed automatically.\n\n### Extensible\n\nJob filters allow you to add custom features to the background processing in a\nway similar to ASP.NET MVC action filters.\n\nJob storage access is fully abstracted and you can implement the support for\nyour favorite storage. Dashboard supports modifications too.\n\n### Efficient\n\nAlthough the default installation uses SQL Server and polling technique to\nfetch jobs, you can leverage MSMQ or Redis extensions to reduce the processing\nlatency to minimum.\n\n### Self-maintainable\n\nYou don't need to perform manual storage clean-up \u2013 Hangfire keeps it as clean\nas possible and removes old records automatically.\n\n### Open Source\n\nHangfire is open source software and is completely free for commercial use. It\nis licensed under LGPLv3 license.\n\nFork the project and make contributions on GitHub!\n\nOverview or Documentation\n\n#### Products\n\n  * Hangfire Core\n  * Hangfire Pro\n  * Hangfire Ace\n  * Plans & Pricing\n\n#### Documentation\n\n  * Getting Started\n  * User's Guide\n  * Tutorials\n  * Security Announcements\n\n#### Community\n\n  * Community Forum\n  * Projects on GitHub\n  * Stack Overflow\n\n#### Contact\n\n  * Blog\n  * Newsletter\n  * Support\n  * Status Page\n\nTM and \u00a9 2013\u20132024 Hangfire O\u00dc \u2219 Ahtri 12, Tallinn, Harju County 15551,\nEstonia \u2219 Privacy Policy \u2219 Cookie Policy \u2219 Terms & Conditions\n\n", "frontpage": false}
