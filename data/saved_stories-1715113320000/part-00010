{"aid": "40284261", "title": "The Bike Shed: 425: Modeling Associations in Rails", "url": "https://bikeshed.thoughtbot.com/425", "domain": "thoughtbot.com", "votes": 1, "user": "unripe_syntax", "posted_at": "2024-05-07 11:17:39", "comments": 0, "source_title": "425: Modeling Associations in Rails", "source_text": "The Bike Shed: 425: Modeling Associations in Rails\n\n  * Episodes\n  * Contact\n  * Search\n  * Produced by thoughtbot\n  * Sponsorship\n  * Subscribe\n\n# 425: Modeling Associations in Rails\n\n###### Episode 425 \u00b7 May 7th, 2024 \u00b7 29 mins 39 secs\n\nAudio Player\n\n00:00\n\n00:00:00 | 00:00:00\n\nUse Up/Down Arrow keys to increase or decrease volume.\n\n### About this Episode\n\nStephanie shares an intriguing discovery about the origins of design patterns\nin software, tracing them back to architect Christopher Alexander's ideas in\narchitecture. Jo\u00ebl is an official member of the Boston bike share system, and\nhe loves it. He even got a notification on the app this week:\n\"Congratulations. You have now visited 10% of all docking stations in the\nBoston metro area.\" #AchievementUnlocked, Jo\u00ebl!\n\nJo\u00ebl and Stephanie transition into a broader discussion on data modeling\nwithin software systems, particularly how entities like companies, employees,\nand devices interconnect within a database. They debate the semantics of\ndatabase relationships and the practical implications of various database\ndesign decisions, providing insights into the complexities of backend\ndevelopment.\n\n  * Christopher Alexander and Design Patterns\n  * Rails guide to choosing between belongs_to and has_one\n  * Making impossible states impossible\n\nTranscript:\n\nWe're excited to announce a new workshop series for helping you get that\nstartup idea you have out of your head and into the world. It's called Vision\nto Value. Over a series of 90-minute working sessions, you'll work with a\nthoughtbot product strategist and a handful of other founders to start testing\nyour idea in the market and make a plan for building an MVP.\n\nJoin for all seven of the weekly sessions, or pick and choose the ones that\naddress your biggest challenge right now. Learn more and sign up at\ntbot.io/visionvalue.\n\nJO\u00cbL: Hello and welcome to another episode of The Bike Shed, a weekly podcast\nfrom your friends at thoughtbot about developing great software. I'm Jo\u00ebl\nQuenneville.\n\nSTEPHANIE: And I'm Stephanie Minn. And together, we're here to share a bit of\nwhat we've learned along the way.\n\nJO\u00cbL: So, Stephanie, what's new in your world?\n\nSTEPHANIE: So, I learned a very interesting tidbit. I don't know if it's\nhistorical; I don't know if I would label it that. But, I recently learned\nabout where the idea of design patterns in software came from. Are you\nfamiliar with that at all?\n\nJO\u00cbL: I read an article about that a while back, and I forget exactly, but\nthere is, like, a design patterns movement, I think, that predates the\nsoftware world.\n\nSTEPHANIE: Yeah, exactly. So, as far as I understand it, there is an architect\nnamed Christopher Alexander, and he's kind of the one who proposed this idea\nof a pattern language. And he developed these ideas from the lens of\narchitecture and building spaces. And he wrote a book called A Pattern\nLanguage that compiles, like, all these time-tested solutions to how to create\nspaces that meet people's needs, essentially. And I just thought that was\nreally neat that software design adopted that philosophy, kind of taking a lot\nof these interdisciplinary ideas and bringing them into something technical.\n\nBut also, what I was really compelled by was that the point of these patterns\nis to make these spaces comfortable and enjoyable for humans. And I have that\nsame feeling evoked when I'm in a codebase that's really well designed, and I\nam just, like, totally comfortable in it, and I can kind of understand what's\ngoing on and know how to navigate it. That's a very visceral feeling, I think.\n\nJO\u00cbL: I love the kind of human-centric approach that you're using and the\nlanguage that you're using, right? A place that is comfortable for humans. We\nwant that for our homes. It's kind of nice in our codebases, too.\n\nSTEPHANIE: Yeah. I have really enjoyed this framing because instead of just\nsaying like, \"Oh, it's quote, unquote, \"best practice\" to follow these design\npatterns,\" it kind of gives me more of a reason. It's more of a compelling\nreason to me to say like, \"Following these design patterns makes the codebase,\nlike, easier to navigate, or easier to change, or easier to work with.\" And\nthat I can get kind of on board with rather than just saying, \"This way is,\nlike, the better way, or the superior way, or the way to do things.\"\n\nJO\u00cbL: At the end of the day, design patterns are a means to an end. They're\nnot an end in of itself. And I think that's where it's very easy to get into\ntrouble is where you're just sort of, I don't know, trying to rack up\nengineering points, I guess, for using a lot of design patterns, and they're\nnot necessarily in service to some broader goal.\n\nSTEPHANIE: Yeah, yeah, exactly. I like the way you put that. When you said\nthat, for some reason, I was thinking about catching Pok\u00e9mon or something like\nfilling your Pok\u00e9dex [laughs] with all the different design patterns. And it's\nnot just, you know, like you said, to check off those boxes, but for something\nthat is maybe a little more meaningful than that.\n\nJO\u00cbL: You're just trying to, like, hit the completionist achievement on the\ndesign patterns.\n\nSTEPHANIE: Yeah, if someone ever reaches that, you know, gets that achievement\ntrophy, let me know [laughs].\n\nJO\u00cbL: Can I get a badge on GitHub for having PRs that use every single Gang of\nFour pattern?\n\nSTEPHANIE: Anyway, Jo\u00ebl, what's new in your world?\n\nJO\u00cbL: So, on the topic of completing things and getting badges for them, I am\na part of the Boston bike share...project makes it sound like it's a, I don't\nknow, an exclusive club. It's Boston's bike share system. I have a\nsubscription with them, and I love it. It's so practical. You can go\neverywhere. You don't have to worry about, like, a bike getting stolen or\nsomething because, like, you drop it off at a docking station, and then it's\nnot your responsibility anymore. Yeah, it's very convenient. I love it.\n\nI got a notification on the app this week that said, \"Congratulations. You\nhave now visited 10% of all docking stations in the Boston metro area.\"\n\nSTEPHANIE: Whoa, that's actually a pretty cool accomplishment.\n\nJO\u00cbL: I didn't even know they tracked that, and it's kind of cool. And the\nachievement shows me, like, here are all the different stations you've\nvisited.\n\nSTEPHANIE: You know what I think would be really fun? Is kind of the\nequivalent of a Spotify Wrapped, but for your biking in a year kind of around\nthe city.\n\nJO\u00cbL: [laughs]\n\nSTEPHANIE: That would be really neat, I think, just to be like, oh yeah, like,\nI took this bike trip here. Like, I docked at this station to go meet up with\na friend in this neighborhood. Yeah, I think that would be really fun\n[laughs].\n\nJO\u00cbL: You definitely see some patterns come up, right? You're like, oh yeah,\nwell, you know, this is my commute into work every day. Or this is that one\nfriend where, you know, every Tuesday night, we go and do this thing.\n\nSTEPHANIE: Yeah, it's almost like a travelogue by bike.\n\nJO\u00cbL: Yeah. I'll bet there's a lot of really interesting information that\ncould surface from that. It might be a little bit disturbing to find out that\na company has that data on you because you can, like, pick up so much.\n\nSTEPHANIE: That's --\n\nJO\u00cbL: But it's also kind of fun to look at it. And you mentioned Spotify\nWrapped, right?\n\nSTEPHANIE: Right.\n\nJO\u00cbL: I love Spotify Wrapped. I have so much fun looking at it every year.\n\nSTEPHANIE: Yeah. It's always kind of funny, you know, when products kind of\ntrack that kind of stuff because it's like, oh, like, it feels like you're\nreally seen [laughs] in terms of what insights it's able to come up with. But\nyeah, I do think it's cool that you have this little badge. I would be curious\nto know if there's anyone who's, you know, managed to hit a hundred percent of\nall the docking stations. They must be a Boston bike messenger or something\n[laughs].\n\nJO\u00cbL: Now that I know that they track it, maybe I should go for completion.\n\nSTEPHANIE: That would be a very cool flex, in my opinion.\n\nJO\u00cbL: [laughs] And, you know, of course, they're always expanding the network,\nwhich is a good thing. I'll bet it's the kind of thing where you get, like,\n99%, and then it's just really hard to, like, keep up.\n\nSTEPHANIE: Yeah, nice.\n\nJO\u00cbL: But I guess it's very appropriate, right? For a podcast titled The Bike\nShed to be enthusiastic about a bike share program.\n\nSTEPHANIE: That's true.\n\nSo, for today's topic, I wanted to pick your brain a little bit on a data\nmodeling question that I posed to some other developers at thoughtbot,\nspecifically when it comes to associations and associations through other\nassociations [laughs]. So, I'm just going to kind of try to share in words\nwhat this data model looks like and kind of see what you think about it.\n\nSo, if you had a company that has many employees and then the employee can\nalso have many devices and you wanted to be able to associate that device with\nthe company, so some kind of method like device dot company, how do you think\nyou would go about making that association happen so that convenience method\nis available to you in the code?\n\nJO\u00cbL: As a convenience for not doing device dot employee dot company.\n\nSTEPHANIE: Yeah, exactly.\n\nJO\u00cbL: I think a classic is, at least the other way, is that it has many\nthrough. I forget if you can do a belongs to through or not. You could also\nwrite, effectively, a delegation method on the device to effectively do dot\nemployee dot company.\n\nSTEPHANIE: Yeah. So, I had that same inkling as you as well, where at first I\ntried to do a belongs to through, but it turns out that belongs to does not\nsupport the through option. And then, I kind of went down the next path of\nthinking about if I could do a has one, a device has one company through\nemployee, right? But the more I thought about it, the kind of stranger it felt\nto me in terms of the semantics of saying that a device has a company as\nopposed to a company having a device. It made more sense in plain English to\nthink about it in terms of a device belonging to a company.\n\nJO\u00cbL: That's interesting, right? Because those are ways of describing\nrelationships in sort of ActiveRecord's language. And in sort of a richer\nsituation, you might have all sorts of different adjectives to describe\nrelationships. Instead of just belongs to has many, you have things like an\nemployee owns a device, an employee works for a company, you know because an\nemployee doesn't literally belong to a company in the literal sense. That's\nkind of messed up. So, I think what ActiveRecord's language is trying to use\nis less trying to, like, hit maybe, like, the English domain language of how\nthese things relate to, and it's more about where the foreign keys are in the\ndatabase.\n\nSTEPHANIE: Yeah. I like that point where even though, you know, these are the\nthings that are available to us, that doesn't actually necessarily, you know,\ncapture what we want it to mean. And I had gone to see what Rails'\nrecommendation was, not necessarily for the situation I shared. But they have\na section for choosing between which model should have the belongs to, as\nopposed to, like, it has one association on it. And it says, like you\nmentioned, you know, the distinction is where you place the foreign key, but\nyou should kind of think about the actual meaning of the data. And, you know,\nwe've talked a lot about, I think, domain modeling [chuckles] on the show.\n\nBut their kind of documentation says that...the has something relationship\nsays that one of something is yours, that it can, like, point back to you. And\nin the example I shared, it still felt to me like, you know, really, the\ndevice wanted to point to the company that it is owned by. And if we think\nabout it in real-world terms, too, if that device, like, is company property,\nfor example, then that's a way that that does make sense.\n\nBut the couple of paths forward that I saw in front of me were to rework that\nassociation, maybe add a new column onto the device, and go down that path of\ncodifying it at the database level. Or kind of maybe something as, like, an\nin-between step is delegating the method to the employee. And that's what I\nended up doing because I wasn't quite ready to do that data migration.\n\nJO\u00cbL: Adding more columns is interesting because then you can run into sort of\ndata consistency issues. Let's say on the device you have a company ID to see\nwho the device belongs to. Now, there are sort of two different independent\npaths. You can ask, \"Which company does this device belong to?\" You can either\ncheck the company ID and then look it up in the company table. Or you can join\non the employee and join the employee back under company. And those might give\nyou different answers and that can be a problem with data consistency if those\ntwo need to stay in sync.\n\nSTEPHANIE: Yeah, that is a good point.\n\nJO\u00cbL: There could be scenarios where those two are allowed to diverge, right?\nYou can imagine a scenario where maybe a company owns the device, but an\nemployee of a potentially different company is using the device. And so, now\nit's okay to have sort of two different chains because the path through the\nemployee is about what company is using our devices versus which company\nactually owns them. And those are, like, two different kinds of relationships.\nBut if you're trying to get the same thing through two different paths of\njoining, then that can set you up for some data inconsistency issues.\n\nSTEPHANIE: Wow. I really liked what you said there because I don't think\nenough thought goes into the emergent relationships between models after\nthey've been introduced to a codebase. At least in my experience, I've seen a\nlot of thought go up front into how we might want to model an ActiveRecord,\nbut then less thought into seeing what patterns kind of show up over time as\nwe introduce more functionality to these models, and kind of understand how\nthey should exist in our codebase. Is that something that you find yourself\nkind of noticing? Like, how do you kind of pick up on the cue that maybe\nthere's some more thought that needs to happen when it comes to existing\ndatabase tables?\n\nJO\u00cbL: I think it's something that definitely is a bit of a red flag, for me,\nis when there are multiple paths to connect to sort of establish a\nrelationship. So, if I were to draw out some sort of, like, diagram of the\nmodels, boxes, and arrows or something like that, and then I could sort of\noverlay different paths through that diagram to connect two models and realize\nthat those things need to be in sync, I think that's when I started thinking,\nooh, that's a potential danger.\n\nSTEPHANIE: Yeah, that's a really great point because, you know, the example I\nshared was actually a kind of contrived one based on what I was seeing in a\nclient codebase, not, you know, I'm not actually working with devices,\ncompanies, and employees [laughs]. But it was encoded as, essentially, a\ndevice having one company. And I ended up drawing it out because I just\ncouldn't wrap my head around that idea.\n\nAnd I had, essentially, an arrow from device pointing to company when I could\nalso see that you could go take the path of going through employee [laughs].\nAnd I was just curious if that was intentional or was it just kind of a\nconvenient way to have that direct method available? I don't currently have\nenough context to determine but would be something I want to pay attention to.\nLike you said, it does feel like, if not a red flag, at least an orange one.\n\nJO\u00cbL: And there's a whole kind of science to some of this called database\nnormalization, where they're sort of, like, they all have rather arcane names.\nThey're the first normal form, the second normal form, the third normal form,\nyou know, it goes on. If you look at the definition, they're all also a little\nbit arcane, like every element in a relation must depend solely upon the\nprimary key. And you're just like, well, what does that mean? And how do I\nknow if my table is compliant with that? So, I think it's worth, if you're\nGoogling for some of these, find an article that sort of explains these a\nlittle bit more in layman's terms, if you will.\n\nBut the general idea is that there are sort of stricter and stricter levels of\nthe amount of sort of duplicate sources of truth you can have. In a sense,\nit's almost like DRY but for databases, and for your database schema in\nparticular. Because when you have multiple sources of truth, like who does\nthis device belong to, and now you get two different answers, or three\ndifferent answers, now you've got a data corruption issue. Unlike bugs in code\nwhere it's, you know, it can be a problem because the site is down, or users\nhave incorrect behavior, but then you can fix it later, and then go to\nproduction, and disruption to your clients is the worst that happened, this\nsort of problem in data is sometimes unrecoverable. Like, it's just, hey, --\n\nSTEPHANIE: Whoa, that sounds scary.\n\nJO\u00cbL: Yeah, no, data problems scare me in a way that code problems don't.\n\nSTEPHANIE: Whoa. Could you...I think I interrupted you. But where were you\ngoing to go about once you have corrupted data? Like, it's unrecoverable. What\nhappens then?\n\nJO\u00cbL: Because, like, if I look at the database, do I know who the real owner\nof this...if I want to fix it, let's say I fix my schema, but now I've got all\nthis data where I've got devices that have two different owners, and I don't\nknow which one is the real one. And maybe the answer is, I just sort of pick\none and say, \"Oh, the one that was through this association is sort of the\ncanonical one, and we can just sort of ignore the other one.\" Do I have\nconfidence in that decision? Well, maybe depending on some of the other\ncontext maybe, I'm lucky that I can have that.\n\nThe doomsday scenario is that it's a little bit of one, a little bit of the\nother because there were different code paths that would write to one way or\nanother. And there's no real way of knowing. If there's not too many devices,\nmaybe I do an audit. Maybe I have to, like, follow up with all of my customers\nand say, \"Hey, can you tell me which ones are really your devices?\" That's not\ngoing to scale. Like, real worst case scenario, you almost have to do, like, a\nbit of a bankruptcy, where you say, \"Hey, all the data prior to this date\nthere's a bit of a question mark on it. We're not a hundred percent sure about\nit.\" And that does not feel great. So, now you're talking about mitigation\nstrategies.\n\nSTEPHANIE: Oof. Wow. Yeah, you did make it sound [laughs] very scary. I think\nI've kind of been on the periphery of a situation like this before, where it's\nnot just that we couldn't trust the code. It's that we couldn't trust the data\nin the database either to tell us how things work, you know, for our users and\nshould work from a product perspective. And I was on a previous client project\nwhere they had to, yeah, like, hire a bunch of people to go through that data\nand kind of make those determinations, like you said, to kind of figure out it\nout for, you know, all of these customers to determine the source of truth\nthere. And it did not sound like an easy feat at all, right? That's so much\ntime and investment that you have to put into that once you get to that point.\n\nJO\u00cbL: And there's a little bit of, like, different problems at different\nlayers. You know, at the database layer, generally, you want all of that data\nto be really in a sort of single source of truth. Sometimes that makes it\nannoying to query because you've got to do all these joins. And so, there are\nvarious denormalization strategies that you can use to make that. Or sometimes\nit's a risk you're going to take. You're going to say, \"Look, this table is\nnot going to be totally normalized. There's going to be some amount of\nduplication, and we're comfortable with the risk if that comes up.\"\n\nSometimes you also build layers of abstractions on top, so you might have your\ndata sort of at rest in database tables fully normalized and separated out,\nbut it's really clunky to query. So, you build out a database view on top of\nthat that returns data in sort of denormalized fashion. But that's okay\nbecause you can always get your correct answer by querying the underlying\ntables.\n\nSTEPHANIE: Wow. Okay. I have a lot of thoughts about this because I feel like\ndatabase normalization, and I guess denormalization now, are skills that I am\ncertainly not an expert at. And so, when it comes to, like, your average\ndeveloper, how much do you think that people need to be thinking about this?\nOr what strategies do you have for, you know, a typical Rails dev in terms of\nhow deep they should go [laughs]?\n\nJO\u00cbL: So, the classic advice is you probably want to go to, like, third to\nfourth normal form, usually three. There's also like 3.5 for some reason.\nThat's also, I think, sometimes called BNF. Anyway, sort of levels of how much\nyou normalize. Some of these things are, like, really, really basic things\nthat Rails just builds into its defaults with that convention over\nconfiguration, so things like every table should have a primary key. And that\nprimary key should be something that's fixed and unique.\n\nSo, don't use something like combination of first name, last name as your\nprimary key because there could be multiple people with the same name. Also,\npeople change their names, and that's not great. But it's great that people\ncan change their names. It's not great to rely on that as a primary key.\n\nThere are things like look for repeating columns. If you've got columns in\nyour schema with a number prefix at the end, that's probably a sign that you\nwant to extract a table. So, I don't know, you have a movie, and you want to\nlist the actors for a movie. If your movie table has actor 1, actor 2, actor\n3, actor 4, actor 5, you know, like, all the way up to actor 20, and you're\njust like, \"Yeah, no, we fill, like, actor 1 through N, and if there's any\nspace left over, we just put nulls in those columns,\" that's a pretty big sign\nthat, hey, why don't you instead have a, like, actor's table, and then make a,\nlike, has many association?\n\nSo, a lot of the, like, really basic normalization things, I think, are either\nbuilt into Rails or built into sort of best practices around Rails. I think\nsomething that's really useful for developers to get as a sense beyond\nlearning the actual different normal forms is think about it like DRY for your\nschema. Be wary of sort of multiple sources of truth for your data, and that\nwill get you most of the way there.\n\nWhen you're designing sort of models and tables, oftentimes, we think of DRY\nmore in terms of code. Do you ever think about that a little bit in terms of\nyour tables as well?\n\nSTEPHANIE: Yeah, I would say so. I think a lot of the time rather than\nreferences to another table just starting to grow on a certain model, I would\nusually lean towards introducing a join table there, both because it kind of\nencapsulates this idea that there is a connection, and it makes the space for\nthat idea to grow if it needs to in the future.\n\nI don't know if I have really been disciplined in thinking about like, oh, you\nknow, there should really...every time I kind of am designing my database\ntables, thinking about, like, there should only be one source of truth. But I\nthink that's a really good rule of thumb to follow. And in fact, I can\nactually think of an example right now where we are a little bit tempted to\nbreak that rule. And you're making me reconsider [laughter] if there's another\nway of doing so.\n\nOne thing that I have been kind of appreciative of lately is on my current\nclient project; there's just, like, a lot of data. It's a very data-intensive\nand sensitive application. And so, when we introduce migrations, those PRs get\ntagged for review by someone over from the DevOps side, just to kind of\nprovide some guidance around, you know, making sure that we're setting up our\nmodels to scale well. One of the things that he's been asking me on my couple\nof code changes I introduced was, like, when I introduced an index, like, it\nhappened to be, like, a composite index with a couple of different columns,\nand the particular order of those columns mattered.\n\nAnd he kind of prompted me to, like, share what my use cases for this index\nwere, just to make sure that, like, some thought went into it, right? Like,\nit's not so much that the way that I had done it was wrong, but just that I\nhad, like, thought about it. And I like that as a way of kind of thinking\nabout things at the abstraction that I need to to do my dev work day to day\nand then kind of mapping that to, like you were saying, those best practices\naround keeping things kind of performant at the database level.\n\nJO\u00cbL: I think there's a bit of a parallel world that people could really\nbenefit from dipping a toe in, and that's sort of the typed programming world,\nthis idea of making impossible states impossible or making illegal states\nunrepresentable. That in the sort of now it's not schemas of database tables\nor schemas of types that you're creating but trying to prevent data coming\ninto a state where someone could plausibly construct an instance of your\nobject or your type that would be nonsensical in the context of your app, kind\nof trying to lock that down.\n\nAnd I think a lot of the ways that people in those communities think\nabout...in a sense, it's kind of like database normalization for developers.\nSo, if you're not wanting to, like, dip your toe in more of the sort of\ndatabase-centric world and, like, read an article from a DBA, it might be\nworthwhile to look at some of those worlds as well. And I think a great\nstarting point for that is a talk by Richard Feldman called Making Impossible\nStates Impossible. It's for the Elm language. And there are equivalents, I\nthink, in many others as well.\n\nSTEPHANIE: That's really cool that you are making that connection. I know\nwe've kind of briefly talked about workshops in the past on the show. But if\nthere were a workshop for, you know, that kind of database normalization for\ndevelopers, I would be the first to sign up [laughs].\n\nJO\u00cbL: Hint, hint, RailsConf idea. There's something from your original\nquestion that I think is interesting to circle back to, and that's the fact\nthat it was awkward to work through in Ruby to do the work that you wanted to\ndo because the tables were laid out in a certain way. And sometimes, there's\ncertain ways that you need the tables to be in order to be sort of safe to\nrepresent data, but they're not the optimal way that we would like to interact\nwith them at the Ruby level.\n\nAnd I think it's okay for not everything in Ruby to be 100% reflective of the\nstructure of the tables underneath. ActiveRecord gives us a great pattern, but\neverything is kind of one-to-one. And it's okay to layer on some things on\ntop, add some extra methods to build some, like, connections in Ruby that rely\non this normalized data underneath but that make life easier for you, or they\nbetter just represent or describe the relationships that you have.\n\nSTEPHANIE: 100%. I was really compelled by your idea of introducing helpers\nthat use more descriptive adjectives for what that relationship is like. We've\ntalked about how Rails abstracted things from the database level, you know,\nfor our convenience, but that should not stop us from, like, leaning on that\nfurther, right? And kind of introducing our own abstractions for those\nconnections that we see in our domain. So, I feel really inspired. I might\neven kind of reconsider the way I handled the original example and see what I\ncan make of it.\n\nJO\u00cbL: And I think your original solution of doing the delegation is a great\nexample of this as well. You want the idea that a device belongs to a company\nor has an association called company, and you just don't want to go through\nthat long chain, or at least you don't want that to be visible as an\nimplementation detail. So, in this case, you delegate it through a chain of\nmethods in Ruby.\n\nIt could also be that you have a much longer chain of tables, and maybe they\ndon't all have associations in Rails and all that. And I think it would be\ntotally fine as well to define a method on an object where, I don't know, a\ndevice, I don't know, has many...let's call it technicians, which is everybody\nwho's ever touched this device or, you know, is on a log somewhere for having\ndone maintenance. And maybe that list of technicians is not a thing you can\njust get through regular Rails associations. Maybe there's a whole, like,\ncustom query underlying that, and that's okay.\n\nSTEPHANIE: Yeah, as you were saying that, I was thinking about that's actually\nkind of, like, active models are the great spot to put those methods and that\nlogic. And I think you've made a really good case for that.\n\nJO\u00cbL: On that note, shall we wrap up?\n\nSTEPHANIE: Let's wrap up. Show notes for this episode can be found at\nbikeshed.fm.\n\nJO\u00cbL: This show has been produced and edited by Mandy Moore.\n\nSTEPHANIE: If you enjoyed listening, one really easy way to support the show\nis to leave us a quick rating or even a review in iTunes. It really helps\nother folks find the show.\n\nJO\u00cbL: If you have any feedback for this or any of our other episodes, you can\nreach us @_bikeshed, or you can reach me @joelquen on Twitter.\n\nSTEPHANIE: Or reach both of us at hosts@bikeshed.fm via email.\n\nJO\u00cbL: Thanks so much for listening to The Bike Shed, and we'll see you next\nweek.\n\nALL: Byeeeeeeee!!!!!!!!!!\n\nAD:\n\nDid you know thoughtbot has a referral program? If you introduce us to someone\nlooking for a design or development partner, we will compensate you if they\ndecide to work with us.\n\nMore info on our website at: tbot.io/referral. Or you can email us at:\nreferrals@thoughtbot.com with any questions.\n\nSupport The Bike Shed\n\n### Episode Hosts\n\n  * Jo\u00ebl Quenneville\n  * Stephanie Minn\n\n### Episode Details\n\nMay 7th, 2024\n\n29 mins 39 secs\n\nTranscript\n\nLink with Timestamp\n\nDownload MP3 (28.8 MB)\n\n##### The Bike Shed\n\n  * Episodes\n  * Contact\n  * Search\n  * Produced by thoughtbot\n  * Sponsorship\n  * Subscribe\n\nShare This Episode\n\n##### Social Network Quick Links\n\n", "frontpage": false}
