{"aid": "40143595", "title": "The Sound of Sorting \u2013 \"Audibilization\" and Visualization of Sorting Algorithms", "url": "https://panthema.net/2013/sound-of-sorting/", "domain": "panthema.net", "votes": 1, "user": "gelstudios", "posted_at": "2024-04-24 12:33:01", "comments": 0, "source_title": "The Sound of Sorting - \"Audibilization\" and Visualization of Sorting Algorithms", "source_text": "The Sound of Sorting - \"Audibilization\" and Visualization of Sorting\nAlgorithms - panthema.net\n\n  * Weblog\n\n    * 2020\n    * 2019\n    * 2018\n    * 2017\n    * 2016\n    * 2015\n    * 2014\n    * 2013\n    * 2012\n    * 2011\n    * 2010\n    * 2009\n    * 2008\n    * 2007\n    * 2006\n    * 2005\n    * RSS Feed\n    * XML Atom\n  * Tags\n  * Projects\n\n    * COBS\n    * CryptoTE\n    * digup\n    * disk-filltest\n    * eSAIS-LCP\n    * Flex Bison C++ Example\n    * malloc_count\n    * On Bispanning Graphs\n    * Parallel Memory Bandwidth\n    * Parallel String Sorting\n    * SqlPlotTools\n    * The Sound of Sorting\n    * STX B+ Tree\n    * STX Constant BTreeDB\n    * STX ExecPipe\n    * STX Expression Parser\n    * STXXL 1.4\n    * Thrill - Big Data Framework\n    * VNCrec RGB 0.4\n  * Publications\n  * Search\n  * Subscribe\n  * About\n\npanthema / 2013 / sound-of-sorting\n\nSee video below for sound, this is a gif.\n\n# The Sound of Sorting - \"Audibilization\" and Visualization of Sorting\nAlgorithms\n\nTalkBox  \n---  \nmacino:You could do gravity sorting.  \nPiotr:MSD radix sort is wrong for some sizes with input n-2 equal. Binary\ninsertion sort over-inserts the equal elements, making n-2 equal quadratic.\nPlease correct this 1-off error.  \nkhankao:There is a sort of this algorithm is very slow: stupid-sort It was\nalso made a video.  \nTimo:I don't see much point in the input types, you can check out the code and\ntry these yourself. One can add many different types of inputs.There is no\nrelease schedule. Releases are quite a hassle to make, but once enough\nadditional algorithms are added in the git repo, I'll make new binaries.  \nmgutt:Could you add ascending/descending cubic and quintic input types?When do\nyou plan to push to a new downloadable executable? Just wondering.  \nTimo:@Dan: thanks for the bug report. It's fixed in git now, the number of\nradix rounds needed was too low for n=4^k.  \nDan:Radix sort LSD gives incorrect results every time with array size 12 and\nshuffled cubic or quintic as source on linux version.  \nTimo:Yes, well, I don't have Windows 8.1.  \nmgutt:I found something about high-resolution timers for Windows 8.1 and\nlater. Would be great to have the < 1 ms resolution.  \nTimo:@mgutt: that sounds like a very good idea. I'll replace the \"Random\"\nbutton with Shuffle/Reset in the next version. @Page: Execution time analysis\nof sorting algorithms is really difficult. It depends on many parameters like\nhardware, input and implementation. It is really outside the scope of SoS,\nwhich is primarily an educational tool.  \nPage:Have you done any kind of comparison statistics of total computing time\nvs array accesses/comparisons? Those would be pretty cool.  \nmgutt:It would be nice if the \"Reset\" button simply reverted the array to its\npresorted state, not mix the elements. That way, it is possible to see\ndifferent sorting algorithms being performed on the exact same array. To mix\nthe array, you could add a \"Shuffle\" button.  \nmgutt:Please add Timsort, Stooge sort, and slow sort to the demo program. This\nprogram is so amazing to me.  \nTimo:TimSort is already implemented on git. Wouldn't KraaySort violate a\npatent? I can't find any implementation.  \nmr.k.s.a:hi https://github.com/gfx/cpp-TimSort  \nkone:implement kraaysort link1 link2 link3 link4  \nSampo Syreeni:The sound in that andrut video has clearly been done by\nmodulating the cutoff point of an analog-like filter, over a toothy waveform.\nMaybe a fixed high saw waveform or something like that. I might be wrong, but\nthe filter might also be the rarest one in analog synthesis: the band reject\none.  \nAlessandro:That would be amazing if I were able to manually specify the input:\nI would definitely use this to try making a song!!! :D  \nTimo:Upon your requests: added TimSort, Slow Sort and Stooge Sort (see\ngithub). Videos about them are also on Youtube now. Cheers, Timo  \nquchen:Slowsort is missing! It's a highly entertaining variant of mergesort,\ndescribed in this paper: http://www.cse.ohio-\nstate.edu/~yusu/courses/780/pessimal.pdf  \nahmet:yes yes timsort pls  \nShintaro:Hi! Here some links to an other project we did in 2010.\nhttp://sourceforge.net/p/algorhythmics/code/288/tree/algorhythmicSorting/\nhttps://vimeo.com/42353230  \nKeith:Would love to see Timsort too: http://en.wikipedia.org/wiki/Timsort  \nName: Text  \n  \nPosted on 2013-05-22, last updated 2014-05-15 by Timo Bingmann at Permlink.\n\nSorting algorithms are an essential chapter in undergraduate computer science\neducation. Due to their easy to explain nature and fairly straight-forward\nanalysis, this set of algorithms offers a convenient introduction to the\nmethods and techniques of theoretical computer science and algorithm analysis.\n\nThis web page presents my own demo program for sortings algorithms, called\n\"The Sound of Sorting\", which both visualizes the algorithms internals and\ntheir operations, and generates sound effects from the values being compared.\nSee below for YouTube videos created with the demo.\n\nThe demo is implemented using the cross-platform toolkits wxWidgets and SDL,\ncan be executed on Windows, Linux and Mac, and runs in real time.\n\nAll of the sorting algorithms are implemented in the SortAlgo.cpp.\n\nSince November 2013, there is also the SoS-CheatSheet.pdf , which contains\npseudo-code of a small selection of the algorithms.\n\nOn 2013-10-24, the viral YouTube video infected the front page of my current\nemployer: the Department of Informatics at the Karlsruhe Institute of\nTechnology (KIT), which is of course whom I originally made the demo program\nfor. See the blog post about this occasion for another more technical\ndescription of the sorting demo program. [Added 2013-10-25]\n\nSee the README file below for information about using the program.\n\n## Prior Sorting Demos\n\nThere are many resources on the Internet about sorting algorithms, among them\nare Wikipedia, animated sorting algorithms by David R. Martin and various Java\napplets by many college or university staff.\n\nHowever, one of the most intriguing demos of integer sorting algorithms is the\nvisualization and \"audibilization\" by andrut, available in a YouTube video.\nHowever, there is not a whole lot of technical information available about how\nsound is generated from the sorting algorithms' operations. According to the\nYouTube comment, there have been two previous approaches to generating sound\nfrom sorting: first and second. Both are constrained by using MIDI notes and\nslow instruments. Andrut's is the first good sound generator, and it was the\nmain guideline for the sound effects in the Sound of Sorting.\n\nAs was pointed out to me, Andrut's video is again not the first sound\ngenerator for sorting algorithms. The old QBasic produced by Microsoft in 1991\nalso contained a sorting demo program with audibilization: SORTDEMO.BAS, which\ncan be viewed on YouTube. So one sees again, no idea is really new, there is\nnothing new under the sun. [Added 2013-10-25]\n\nHowever, for use in undergraduate teaching the YouTube demo has a lot of\ndrawbacks. Most importantly, it cannot be slowed down! It also contains little\nadditional information about how the algorithms operate. Furthermore, the set\nof algorithms is very small and some are not as good as they could be. Thus I\ndecided to create my own for the algorithms course we were teaching in\nKarlsruhe in 2013.\n\n## Downloads\n\nsound-of-sorting 0.6.5 (current) published 2014-05-15  \n---  \nSource code archive:| sound-of-sorting-0.6.5.tar.bz2 (141 KiB)| Browse online  \nWin32 binary:| sound-of-sorting-0.6.5-win32.zip (1.58 MiB)  \nLinux binary:| sound-of-sorting-0.6.5-linux32-64.zip (1.61 MiB) dynamically\nlinked with Debian Etch 32-/64-bit  \n  \nThe demo program is published under the GNU General Public License v3 (GPL),\nwhich can also be found in the file COPYING. A few of the sorting algorithms'\nimplementations were written by other authors and may have different licenses.\n\nA git repository containing all sources and revisions is fetchable by running\ngit clone https://github.com/bingmann/sound-of-sorting.git\n\n## YouTube Videos\n\nMost of the algorithms in the demo are shown in high speed in the following\nYouTube video:\n\nThe following YouTube playlist contains almost all sorting algorithms\nimplemented in the demo program. They are grouped and ordered according to\ntheir exchanging techniques.\n\nThe YouTube videos are published under the Creative Common Attribution license\n.\n\n## README - Usage\n\nThe Sound of Sorting demo program is very intuitive to use. It contains many\nsorting algorithms, which are selectable via the list box on the right. For\nthe quick sort variants the pivot rule can be selected separately.\n\nWhen pressing \"Run\", the algorithm is started on selected input. \"Step\" will\nstop a running algorithm, or start a new one, and halt it after performing one\noperation. With \"Reset\" a running algorithm is stopped, and a new random input\nis created. When \"Sound\" is activated, the program will generate sound effects\non the default audio output. The \"Speed\" slider changes the algorithms\nexecution speed by adding a delay for each array access.\n\nDue to the 1ms resolution of timers on Windows, the speed scale is smaller.\nThe Linux version has a higher time resoltion < 1ms!\n\nThe algorithm's visualization contains mostly white bars representing the\nvalue of the array position corresponding to the x-axis. When the algorithm\ngets or sets an array item, the white bar runs red for one algorithmic step. A\nswap operation is represented by two bars turning red and their values being\nexchanged. Some algorithms specially colorize bars which represent indexes,\npointers or other information about the internal mechanisms of the algorithm.\n\nBoth value comparisons and array accesses are counted and shown in real time.\nThe comparison counter includes ternary comparisons as just one operation. Due\nto algorithms often using extra memory or local variables, the array access\ncounter highly depends on the actual algorithm implementation.\n\nThe generated sound effects depend on the values being compared. Only\ncomparisons yield sound output (except for in radix/bucket sort)! The length\nof each comparison's sound effect can be modified using the \"Sound Sustain\"\nslider. The frequency of the sound is calculated from the compared values. The\nsound wave itself is triangular and modulated with an ADSR envelope. This\nyields the \"8-bit game tune\" feeling. An item value is scaled (with double\nprecision) to the frequency range 120 Hz - 1,212 Hz, which is large but not\ntoo high to be annoying.\n\n## README - Source Code Overview and Implementation Notes\n\nThe demo program uses the wxWidgets toolkit for cross-platform dialogs and\npainting. For sound output, the audio component of the cross-platform SDL\nlibrary is used.\n\nAll sources resides in src/. The main window's GUI functions are grouped in\nWMain.h/cpp. The sorting visualization, including the instrumented array class\nand painting methods are in WSortView.h/cpp.\n\nSortAlgo.h/cpp contains all sorting algorithms. These were mainly modified to\noperate on a WSortView object, which exposes most of the usual array operators\nsuch as operator[], and many special functions to create nicer visualizations.\nMost notable among these, are a special swap() function and mark() to colorize\nbars. There is also watch() to do live tracking of indexes stored as local\nvariables (use this with care)!\n\nComparison counting and sound effects are signaled by the operators of\nArrayItem, which is the item class of the instrumented array WSortView. As\nsuch, all comparisons of the sorting algorithms will be intercepted by this\nclass.\n\nOn each comparison, the values are used to generate sound. All sound\ngenerating methods are in SortSound.cpp. The main class here is an Oscillator,\nwhich generates an enveloped triangular waveform of a specific frequency.\nOscillators are mixed together for the output sound. The output volume is\nscaled automatically depending on the number of oscillators active.\n\nFor (somewhat) rapid development with wxWidgets, the wxGlade dialog generator\ntool is use. The public version of the Sound of Sorting contains no recording\nfacilities. If you want to contribute a sorting algorithm, please notify me.\n\n## ChangeLog\n\n2014-05-15 - v0.6.5\n\n  * New sorting algorithms: Binary-Search Insertion Sort, Block Merge Sort (WikiSort), Cycle Sort, Dual-Pivot Quick Sort.\n  * Displaying current number of inversions and runs in array.\n  * Microseconds delay on Win32 using QueryPerformanceCounter().\n\n2013-11-26 - v0.6.3\n\n  * New sorting algorithms: TimSort, StoogeSort and Slowsort\n  * Renaming array from a to A for easier reading and matching to SoS-Cheatsheet.\n  * Fixed compilation with older compilers and on Mac OS X.\n  * Added random algorithm button.\n\n## Older Downloads\n\nsound-of-sorting 0.6.3 published 2013-11-26  \n---  \nSource code archive:| sound-of-sorting-0.6.3.tar.bz2 (132 KiB)| Browse online  \nWin32 binary:| sound-of-sorting-0.6.3-win32.zip (911 KiB)  \nLinux binary:| sound-of-sorting-0.6.3-linux32-64.zip (1.58 MiB) dynamically\nlinked with Debian Etch 32-/64-bit  \nsound-of-sorting 0.6 published 2013-05-22  \n---  \nSource code archive:| sound-of-sorting-0.6.tar.bz2 (128 KiB)| Browse online  \nWin32 binary:| sound-of-sorting-0.6-win32.zip (908 KiB)  \nLinux binary:| sound-of-sorting-0.6-linux32-64.zip (1.56 MiB) dynamically\nlinked with Debian Etch 32-/64-bit  \n  \nCopyright 2005-2022 Timo Bingmann. All rights reserved.\n\n", "frontpage": false}
