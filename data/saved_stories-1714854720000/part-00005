{"aid": "40256096", "title": "PHP Doesn't Suck Anymore", "url": "https://developerjoy.co/blog/php-doesnt-suck-anymore", "domain": "developerjoy.co", "votes": 57, "user": "falcon_", "posted_at": "2024-05-04 09:11:33", "comments": 82, "source_title": "DeveloperJoy", "source_text": "PHP Doesn't Suck Anymore - DeveloperJoy\n\n# DeveloperJoy\n\n# PHP Doesn't Suck Anymore\n\nMay 3, 2024\n\nI'm tired of reading the same message all time: \"PHP sucks.\"\n\nBut most of these critics haven't looked at PHP since 2012, and a lot has\nchanged since then.\n\nLet's take a look at the language changes that have happened since PHP 5.4 was\nreleased.\n\nTable of contents:\n\n  * Traits (PHP 5.4)\n\n  * Short Array Syntax\n\n  * Array Destructuring\n\n  * First-Class Variadic Functions\n\n  * Generators\n\n  * Anonymous Classes\n\n  * Trailing Commas (PHP 7)\n\n  * Arrow Functions\n\n  * Null Coalescing Operator (PHP 7)\n\n  * Null Coalescing Assignment Operator (PHP 7.4)\n\n  * Null Chaining Operator (PHP 8)\n\n  * Named Arguments (PHP 8)\n\n  * Attributes (Annotations)\n\n  * Improved Error Handling\n\n  * Match Statement (PHP 8)\n\n  * Weak Maps (PHP 7.4)\n\n  * Enums (PHP 8.1)\n\n  * Type Safety\n\n  * Constructor Property Promotion (PHP 8.0)\n\n  * ReadOnly Properties (PHP 8.1)\n\n  * Performance\n\n### Traits (PHP 5.4)\n\nPHP 5.4 introduced traits, which allow for composition over inheritance. You\ncan have traits and include them in every class.\n\n### Short Array Syntax\n\nGone are the days of writing array() like a caveman. You can now use square\nbrackets for short array syntax.\n\n### Array Destructuring\n\nAssigning an array to a temporary variable is a thing of the past. You can now\nuse array destructuring to directly assign variables from an array.\n\n### First-Class Variadic Functions\n\nYou can pass as many arguments to a function as you want using the ... syntax.\n\n### Generators\n\nNeed to do something memory-intensive in a memory-efficient way? Generators\nare the way to go.\n\n### Anonymous Classes\n\nNeed a new class but can't be bothered to make a new file? Anonymous classes\nare the solution. They can implement an interface just like any other class.\n\n### Trailing Commas (PHP 7)\n\nNo more worrying about adding a trailing comma to a function call or method\ncall.\n\n### Arrow Functions\n\nPHP has arrow functions too! They're not exactly like JavaScript's, but\nthey're a great addition to the language.\n\n### Null Coalescing Operator (PHP 7)\n\nNo more checking for null before assigning a value. The null coalescing\noperator has got you covered.\n\n### Null Coalescing Assignment Operator (PHP 7.4)\n\nAnd if you need to shorthand that null coalescing operator, there's an\nassignment operator for that too.\n\n### Null Chaining Operator (PHP 8)\n\nNo more checking for null before calling a method. The null chaining operator\nis here to save the day.\n\n### Named Arguments (PHP 8)\n\nSick of using null to skip over optional arguments? Named arguments are the\nsolution.\n\n### Attributes (Annotations)\n\nPHP has attributes now, which can be used to add annotations to classes,\nmethods, arguments, or properties.\n\n### Improved Error Handling\n\nNo more needing a variable for an exception just to return false. PHP has\nimproved error handling now.\n\n### Match Statement (PHP 8)\n\nNo more switch statements that are a mile long. The match statement is a more\ncompact and readable way to write switch statements.\n\n### Weak Maps (PHP 7.4)\n\nWeak maps are here, and they're way better for memory than arrays. Plus, you\ncan use objects as keys.\n\n### Enums (PHP 8.1)\n\nEnums are finally here! You can create enum classes with values and methods,\nand even use them as type hints.\n\n### Type Safety\n\nPHP now has typed arguments, return types, union types, intersection types,\nand more. You can even use type hints for enums!\n\n### Constructor Property Promotion (PHP 8.0)\n\nGone are the days of verbose constructors. Constructor property promotion is\nhere to reduce boilerplate code.\n\n### ReadOnly Properties (PHP 8.1)\n\nNeed to mark a property as read-only? There's a keyword for that.\n\n### Performance\n\nPHP has experienced a 400% performance increase between 5.6 and 7, and another\n20% between 7 and 8. It's fast enough for most use cases, and if you need a\nspecialized use case, use a specialized language.\n\nIn conclusion, PHP is not dead, nor is it sucking anymore. The language has\nundergone significant changes since 2012, and it's high time to revise our\nopinions about it.\n\nWith the introduction of traits, short array syntax, array destructuring, and\na host of other features, PHP has become a more efficient, readable, and\nmaintainable language.\n\nAdd to that the improvements in error handling, the introduction of\nattributes, and the long-awaited arrival of enums, and it's clear that PHP has\nevolved into a robust and reliable choice for web development.\n\nSo, the next time someone tells you that PHP sucks, you can confidently tell\nthem that they're just stuck in the past.\n\n\u2190 Go back to the blog\n\n## Work with me\n\nDo you own a company or need help with your Laravel project? I can help you\nwith that. Check the plans and let me know if you have any questions.\n\nGet 1 month free with yearly plan during checkout.\n\n### Technical Advisor\n\n$ 3 ,995\n\n/m\n\nStart now\n\nWhat's included:\n\n  * Lead your team to a better code architecture, testing mentality, clean code, and more.\n  * Lead knowledge-sharing sessions depending on current company status and requirements.\n  * Help with product and technical decisions.\n  * Pause or cancel anytime.\n\n### Integrated Senior Developer\n\n$ 5 ,995\n\n/m\n\nNot available\n\nWhat's included:\n\n  * Includes all Technical Advisor services.\n  * Engages as a team member in daily tasks.\n  * Participates actively in day-to-day development.\n  * Direct communication: Slack, and meetings included.\n  * Pause or cancel anytime.\n\n#### Want to talk first?\n\nOk, just book a call now.\n\n## FAQ\n\nGood question! For starters, the annual cost of a full-time senior-level\ndeveloper now exceeds $100,000, plus benefits (and good luck finding one\navailable).\n\nAside from that, you may not always have enough work to keep them busy at all\ntimes, so you're stuck paying for time you aren't able to utilize.\n\nWith the monthly plan, you can pause and resume your subscription as often as\nyou need to ensure you're only paying your developer when you have work\navailable for them.\n\nNo, once subscribed you're able to request as many things as you'd like, and\nthey will be delivered one by one.\n\nDelivery will always be fast without compromising quality. Very complex\nrequests will be divided into smaller products for continuous delivery.\n\nAlways, before starting to work, we can make a planning so that you know,\nbefore starting, when each change will be delivered.\n\nYou'll work directly with me, the founder and only person behind DeveloperJoy.\n\nWe understand you may not have enough work to fill up entire month. Perhaps\nyou only have one or two requests at the moment. That's where pausing your\nsubscription comes in handy.\n\nBilling cycles are based on 31 day period. Let's say you sign up and use the\nservice for 21 days, and then decide to pause your subscription. This means\nthat the billing cycle will be paused and you'll have 10 days of service\nremaining to be used anytime in the future\n\nI had experience making products with PHP, Go, and JavaScript/TypeScript.\n\nAlso I feel really comfortable working with WordPress, Laravel, Symfony,\nVue.js, React, Svelte, and more.\n\nMail me and we will see how best to collaborate.\n\nYou can make this request by email, sharing a task board with me or, depending\non your plan, by call or Slack.\n\nThat's fine. You can pause your subscription when finished and return when you\nhave additional requests needs. There's no need to let the remainder of your\nsubscription go to waste.\n\nDue to the high quality nature of the work, there will be no refunds issued.\n\n\u00a9 2024 DeveloperJoy\n\n  * Pricing\n  * Blog\n  * Contact\n  * Login\n\n", "frontpage": true}
