{"aid": "40198620", "title": "Finding Your Home in Game Graphics Programming", "url": "https://alextardif.com/LearningGraphics.html", "domain": "alextardif.com", "votes": 1, "user": "ibobev", "posted_at": "2024-04-29 14:15:30", "comments": 0, "source_title": "Alex Tardif: Graphics Engineer", "source_text": "Alex Tardif: Graphics Engineer\n\n#\n\nAlex Tardif\n\nGraphics & Game Programmer\n\n## Finding Your Home in Game Graphics Programming\n\n### Overview\n\n\"Graphics has become too difficult.\"\n\nI have increasingly heard this or some variation of it in recent years, that\ngraphics programming has become so complicated and difficult to learn that\nit's discouraging people from pursuing it as a hobby and/or profession, or\ncausing them to give up after they've started. I have a deep love for this\narea of programming, so this kind of commentary always hits me in the gut.\nGraphics programming in games is an incredibly rewarding specialization, is\nconstantly evolving and innovating, and has (for the most part) one of the\nbetter communities in programming which thrives on sharing as much as\npossible. So what's going on?\n\nWell, it's complicated, but they're not wrong.\n\nWhen I started making this post a couple months ago, it looked very different\nthan it does now, and it was working towards an argument for a higher level\n(DX11-but-better) API wrapper for D3D12, basically. The more I wrote, the more\nI understood the issue was more complex than that, and then posted this poll\non twitter, confirming that there really wasn't (as one person put it) a one-\nsize-fits-all solution for learning graphics anymore. Some might look at that\nand say \"well, there never was one before either\" and they'd be right, but the\ngaps have widened in recent years. Let's talk about that.\n\n### The \"Full Stack\" Graphics Programmer is Gone\n\nThis is where a lot of people get deflated without realizing the landscape has\nchanged significantly in the last few years. We can argue about when it\nhappened exactly, but I think an accurate rough estimate of when the full\nstack graphics programmer died was around 2013. For context, this was also the\nyear I started working in the field, and a lot of it went over my head at the\ntime.\n\nIn 2013, the industry had begun an evolution with significant implications on\nthe complexity of game graphics programming. On one end, we had the advent of\nphysically based rendering in games, as seen in the SIGGRAPH 2013 Course:\nPhysically Based Shading in Theory and Practice, and on the other, we had the\nrelease of AMD's Mantle API.\n\nWhat this meant was that game graphics was about to expand significantly, and\nfor good reason. PBR catapulted real-time rendering out of the Blinn-Phong era\nand sought to redefine authoring pipelines, while Mantle offered a lower level\nAPI that finally delivered tools for reducing CPU overhead of graphics API\nfeatures (like draw calls and creating pipelines) which was widely seen as a\nmajor limiting factor at the time. Prior to this it was common to see graphics\nprogrammers working on all levels of the \"stack,\" but today this is\nincreasingly rare. I think the first time I saw this visualized was in Angelo\nPesce's \"The Technical Interview [LEAKED]\"\n\nWhile the divides between different sub-specializations of game graphics will\nvary from one project to the next, they undeniably exist. Keep this in mind\nwhen you feel overwhelmed by all that graphics development has to offer, and\nallow yourself the time to become focused on the specialization(s) that\ninterest and matter to you the most. My personal graph hovers around the\nengine/API part of the spectrum, with mild (but enough) understanding of other\nareas, and if you looked at the folks I have hired onto our team at ZOS, you'd\nrightly see that I sought out those with different expertise to cover the\nspectrum. It takes a well-rounded team!\n\nIf you're bought into this idea, then you may be wondering where to start. If\nmy poll thread was any indication, there is not a \"correct\" place to start,\ncertainly not that everyone would agree with. With that said, here are my\nrecommendations (at time of writing, 2021).\n\n### Where Should I Get Started?\n\n\"I am not sure what I want, or I want an introduction to most aspects of\ngraphics programming\" https://learnopengl.com/ is (as far as I am aware) the\nsingle best resource for learning the bulk of the major parts of graphics\nprogramming. Start from the beginning and work your way through, the process\nmay help illuminate where your interests are.\n\n\"I want to learn rendering\" Learn ray tracing! Start from\nhttps://raytracing.github.io/ and then move onto https://pbrt.org/, both\nmarvelous resources and also freely available online. In my opinion the future\nin which games adopt raytracing en masse is rapidly approaching.\n\n\"I want to learn how to write shaders\" You can't go wrong with Shadertoy.\nThere are lots of tutorials and samples from the community, for all levels of\nexperience, and examples of likely any shading topic you can think of. You\nwon't have to think about or set up any graphics APIs or anything like that.\nThis is the closest thing you will find to a graphics playground.\n\n\"I want to understand the lower-level graphics pipeline and architecture\" If\nyou want to dive in the deep end: I recommend you begin with learning D3D12 or\nVulkan. If you don't care about mobile, I believe D3D12 requires less mental\noverhead and time to learn, with the trade-off being that the resources\navailable today for learning are not necessarily as good. For D3D12, start\nfrom the D3D12 sample github, specifically the \"hello world\" samples:\nhttps://github.com/microsoft/DirectX-Graphics-\nSamples/tree/master/Samples/Desktop/D3D12HelloWorld\n\nAnd consult the programming guide and reference documentation as you replicate\nthe samples yourself: https://docs.microsoft.com/en-\nus/windows/win32/direct3d12/directx-12-programming-guide\nhttps://microsoft.github.io/DirectX-Specs/\n\nJoin the discord, it can really make a difference with your learning\nexperience: https://discord.com/invite/directx Also worth checking out some\nnice resources that Jendrik Illner put together:\nhttps://www.jendrikillner.com/post/d3d12-learning-plan/\n\nFor Vulkan, start from the Vulkan samples tutorial (thank you Aeva):\nhttps://vulkan.lunarg.com/doc/view/1.2.154.1/windows/tutorial/html/index.html\nAnd potentially also the Vulkan tutorial: https://vulkan-tutorial.com/ Once\nyou have completed it, make your way to Sasha Willems's Vulkan examples\ngithub: https://github.com/SaschaWillems/Vulkan And of course, always have the\nVulkan spec handy.\nhttps://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html\nJoin the community discord: https://discord.com/invite/tFdvbEj\n\nA solid goal is making a higher-level wrapper for the API you've chosen.\nYou'll learn a ton about APIs and abstractions by doing so. Something to keep\nin mind as you're beginning is that a lot of resources that are helpful for\ngetting started are in different places on github (DirectXTex, Vulkan Memory\nAllocator, D3D12 Memory Allocator, DirectX Shader Compiler, etc).\n\nI am writing a D3D12 starter-pack tutorial using more modern concepts and hope\nto publish it in the near future. It feels like there is a need for this.\n\nIf you want a gentler introduction: I recommend you learn D3D11 or OpenGL\nusing the many available resources and tutorials for either (for example the\none I linked earlier). If you don't have a preference, I recommend D3D11 as\nnavigating samples and tutorials of OpenGL can have different versions of it\nall over the place which may cause you unnecessary confusion. What you learn\ndoing this will still be relevant if or when you eventually get into the lower\nlevel APIs.\n\nOverall, this area is what spawned my twitter poll, and is where many can\nunderstandably become discouraged. I wish D3D11 had kept up with newer\nfeatures that only D3D12 now receives, though there are good reasons why it\ndoesn't. If it had, or if we had an official high level D3D12 wrapper, I would\nhave recommended that here. I get the feeling something reflected in my poll\nis that there is a desire for such a thing, and that in general people would\nprefer if authorities in the space (eg Microsoft) provided it rather than\nhaving to pull various 3rd party options from github.\n\nDon't get bullied into the D3D12/Vulkan side of things if you're overwhelmed\nto the point of wanting to give up on graphics development while learning\nthose. There's nothing wrong with learning the earlier APIs to grasp higher\nlevel concepts first before going to lower level APIs to understand what they\nwere doing under the hood for you.\n\n### Book Resources\n\nIf you want a couple resources that will always be relevant and focus on\nfoundations, I recommend checking out Foundations of Game Engine Development\nand Real-Time Rendering.\n\n## Contact\n\n  * alexdtardif@gmail.com\n  * LinkedIn\n\n", "frontpage": false}
