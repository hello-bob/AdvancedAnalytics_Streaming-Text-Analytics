{"aid": "40285162", "title": "C++23 now has a println method as opposed to cout", "url": "https://en.wikipedia.org/wiki/C%2B%2B23", "domain": "wikipedia.org", "votes": 2, "user": "ethanholt1", "posted_at": "2024-05-07 13:25:28", "comments": 0, "source_title": "C++23", "source_text": "C++23 - Wikipedia\n\nJump to content\n\nSearch\n\nWiki Loves Earth\n\nPhotograph nature for Wikipedia and win!\n\n# C++23\n\n  * Catal\u00e0\n  * Espa\u00f1ol\n  * \u0641\u0627\u0631\u0633\u06cc\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * Suomi\n  * \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n  * \u4e2d\u6587\n\nEdit links\n\nFrom Wikipedia, the free encyclopedia\n\nComputer programming language\n\nThis article has multiple issues. Please help improve it or discuss these\nissues on the talk page. (Learn how and when to remove these template\nmessages)| This article is in list format but may read better as prose. You\ncan help by converting this article, if appropriate. Editing help is\navailable. (December 2023)  \n---  \nThis article relies excessively on references to primary sources. Please\nimprove this article by adding secondary or tertiary sources. Find sources:\n\"C++23\" \u2013 news \u00b7 newspapers \u00b7 books \u00b7 scholar \u00b7 JSTOR (December 2023) (Learn\nhow and when to remove this message)  \n---  \nThis article may require cleanup to meet Wikipedia's quality standards. The\nspecific problem is: Article reads like a changelog. Please help improve this\narticle if you can. (February 2023) (Learn how and when to remove this\nmessage)  \n---  \nThis article needs to be updated. Please help update this article to reflect\nrecent events or newly available information. (March 2024)  \n---  \n  \n(Learn how and when to remove this message)  \n  \nC++ language revisions  \n---  \n  \n  * C++98\n  * C++03\n  * C++11\n  * C++14\n  * C++17\n  * C++20\n  * C++23\n  * C++26\n\n  \n  \n  * v\n  * t\n  * e\n\n  \n  \nC++23 is the informal name for the version of the International Organization\nfor Standardization (ISO) and International Electrotechnical Commission (IEC)\n14882 standard for the C++ programming language that follows C++20. The final\ndraft of this version is N4950.^[1]^[2]\n\nIn February 2020, at the final meeting for C++20 in Prague, an overall plan\nfor C++23 was adopted:^[3]^[4] planned features for C++23 were library support\nfor coroutines, a modular standard library, executors, and networking.\n\nThe first WG21 meeting focused on C++23 was intended to take place in Varna in\nearly June 2020, but was cancelled due to the COVID-19 pandemic,^[5]^[6] as\nwas the November 2020 meeting in New York^[7]^[6] and the February 2021\nmeeting in Kona, Hawaii.^[7] All meetings until November 2022 were virtual\nwhile the November 2022 meeting until the final meeting on February 2023 was\nhybrid.^[7] The standard was technically finalized by WG21 at the hybrid\nmeeting in Issaquah in February 2023.^[8]\n\n## Modern \"Hello, world\" Example[edit]\n\nAfter many library changes applied to the working draft, the new \"Hello,\nworld\" program will be:\n\n    \n    \n    import std; int main() { std::println(\"Hello, world!\"); }\n\n## Features[edit]\n\nChanges that have been accepted into C++23 include:\n\n### Language[edit]\n\n  * explicit this object parameter^[9]\n  * if consteval^[10]\n  * multidimensional subscript operator^[11]\n  * static call and subscript operators and static lambdas^[12]^[13]\n  * simplifying implicit move^[14]\n  * auto(x) and auto{x}^[15]\n  * new preprocessor directives:\n\n    * #elifdef and #elifndef^[16]\n    * #warning^[17]\n  * extending the lifetime of some temporaries in range-based for loop^[18]\n  * new standard attribute [[assume(expression)]]^[19]\n  * class template argument deduction from inherited constructors^[20]\n  * labels at the end of the compound statement^[21]\n  * alias declarations in init-statements^[22]\n  * literal suffixes for std::size_t and the corresponding signed type^[23]\n  * extended floating-point types with literals (conditionally supported)^[24]\n  * optional () from nullary lambda expressions^[25]\n  * attributes on lambda expressions^[26]\n  * constexpr changes:\n\n    * non-literal variables, labels, and gotos in constexpr functions^[27]\n    * allowing static and thread_local variables that are usable in constant expressions in constexpr functions^[28]\n    * constexpr function does not need its return type and parameter types to be literal type\n    * it is now possible to write a constexpr function for which no invocation satisfies the requirements of a core constant expression^[29]\n  * narrowing contextual conversions to bool in static_assert and if constexpr^[30]\n  * trimming whitespaces before line splicing^[31]\n  * make declaration order layout mandated^[32]\n  * delimited escape sequences^[33]\n  * named universal character escapes^[34]\n  * text encoding changes:\n\n    * support for UTF-8 as a portable source file encoding^[35]\n    * consistent character literal encoding^[36]\n    * character sets and encodings^[37]\n\n### Library[edit]\n\n#### Standard Library Module Support[edit]\n\n  * standard library modules std and std.compat^[38]\n\n#### Coroutine Library Support[edit]\n\n  * synchronous coroutine std::generator for ranges^[39]\n\n#### General Utilities Support[edit]\n\n  * result type std::expected^[40]\n  * monadic operations for std::optional^[41] and std::expected^[42]\n  * utility function std::to_underlying to get the underlying value of enum^[43]\n  * move-only callable wrapper std::move_only_function^[44]\n  * std::forward_like^[45]\n  * std::invoke_r^[46]\n  * std::bind_back^[47]\n  * std::byteswap^[48]\n  * std::unreachable: a function to mark unreachable code^[49]\n  * made std::tuple compatible with other tuple-like objects^[50]\n  * std::basic_common_reference specialization for std::reference_wrapper yielding reference types^[51]\n  * adding default arguments for std::pair's forwarding constructor^[52]\n\n#### Compile-time Support[edit]\n\n  * constexpr support for:\n\n    * std::type_info::operator==^[53]\n    * std::bitset^[54]\n    * std::unique_ptr^[55]\n    * for some <cmath> functions^[56]\n    * for integral overloads of std::to_chars and std::from_chars^[57]\n  * metaprogramming utilities:\n\n    * type traits std::is_scoped_enum,^[58] std::is_implicit_lifetime,^[59] std::reference_constructs_from_temporary, and std::reference_converts_from_temporary.^[60]\n  * adding move-only types support for comparison concepts^[61]\n\n#### Iterators, Ranges, and Algorithm Support[edit]\n\n  * new range conversion function std::ranges::to^[62]\n  * new constrained ranges algorithm:\n\n    * std::ranges::starts_with\n    * std::ranges::ends_with^[63]\n    * std::ranges::contains\n    * std::ranges::contains_subrange^[64]\n    * std::ranges::find_last and other variants^[65]\n    * rangified versions of iota, shift_left, and shift_right^[66]\n    * range fold algorithms^[67]\n  * new std::ranges::range_adaptor_closure, a helper for defining user-defined range adaptor closures^[47]\n  * new range adaptors:\n\n    * std::views::zip and other variants\n    * std::views::adjacent and other variants^[68]\n    * std::views::join_with^[69]\n    * std::views::slide\n    * std::views::chunk^[70]\n    * std::views::chunk_by^[71]\n    * std::views::as_rvalue^[72]\n    * std::views::as_const^[73]\n    * std::views::repeat^[74]\n    * std::views::stride^[75]\n    * std::views::cartesian_product^[76]\n    * std::views::enumerate^[77]\n  * rectifying constant iterators, sentinels, and ranges, that is, std::ranges::cbegin and other similar utilities returning constant iterators should be fully guaranteed even for shallow-const views (such as std::span)^[73]\n  * ranges iterators as inputs to non-ranges algorithms^[78]\n  * relaxing range adaptors to allow for move only types^[79]\n  * making multi-param constructors of some views explicit^[80]\n\n#### Memory Management Support[edit]\n\n  * std::out_ptr and std::inout_ptr for C interoperability^[81]\n  * std::allocate_at_least and std::allocator::allocate_at_least^[82]\n  * explicit lifetime management function std::start_lifetime_as for implicit-lifetime types^[83]\n  * disallowing user specialization of std::allocator_traits^[84]\n\n#### String and Text Processing Support[edit]\n\n  * new member functions and changes in string types:\n\n    * std::basic_string_view::contains and std::basic_string::contains^[85]\n    * disabling construction from nullptr for std::basic_string and std::basic_string_view^[86]\n    * explicit range constructor for std::basic_string_view^[87]\n    * std::basic_string::resize_and_overwrite^[88]\n    * rvalue reference overload of std::basic_string::substr for efficient slicing^[89]\n  * formatting ranges, tuples, escaped presentation of characters and strings, std::thread::id, and stacktraces.^[90]^[91]^[92]\n\n#### Diagnostic Support[edit]\n\n  * stacktrace library^[93]\n\n#### I/O Support[edit]\n\n  * formatted output functions std::print and std::println from new header <print>^[94]\n  * spanstream library (std::span-based string stream) from new header <spanstream>^[95]\n  * a support for exclusive mode in std::fstreams^[96]\n  * std::basic_ostream::operator<<(const volatile void*)^[97]\n\n#### Containers Support[edit]\n\n  * multidimensional-span std::mdspan^[98]^[99]^[100]^[101]\n  * constructability and assignability of containers from other compatible ranges^[62]\n  * flat set and flat map container adapters^[102]^[103]\n  * non-deduction context for allocators in container deduction guides^[104]\n  * heterogeneous erasure overloads for associative containers^[105]\n  * allowing iterator pair construction in stack and queue^[106]\n  * requiring std::span and std::basic_string_view to be trivially copyable^[107]\n\n#### C-Compatibility Support[edit]\n\n  * new header <stdatomic.h>^[108]\n\n### Language defect reports[edit]\n\n  * C++ identifier syntax using Unicode Standard Annex 31^[109]\n  * allowing duplicate attributes^[110]\n  * changing scope of lambda trailing return type^[111]\n  * making overloaded comparison operators less breaking change^[112]\n  * undeprecating volatile compound assignments^[113]^[114]\n  * fixing the compatibility and portability of char8_t^[115]\n  * relaxing requirements on wchar_t to match existing practices^[116]\n  * allowing some pointers and references of this or unknown origin in constant expressions^[117]\n  * introduction of immediate-escalating functions promoted to immediate functions^[118]\n  * allowing static_assert(false) in uninstantiated template contexts\n\n### Library defect reports[edit]\n\n  * changes in ranges library:\n\n    * conditionally borrowed ranges^[119]\n    * repairing input range adaptors and std::counted_iterator^[120]\n    * relaxing the constraint on std::ranges::join_view^[121]\n    * renamed std::ranges::split_view to std::ranges::lazy_split_view and new split_view^[122]\n    * removed std::default_initializable constraint from concept std::ranges::view^[123]\n    * view with ownership and new std::ranges::owning_view^[124]\n    * fixed std::ranges::istream_view^[125]\n  * changes in text formatting library:\n\n    * std::basic_format_string^[126]\n    * compile-time format string checks\n    * reducing binary code size of std::format_to^[127]\n    * fixing locale handling in chrono formatters^[128]\n    * improving width estimation^[129] and fill character allowances of std::format^[130]\n    * use of forwarding references in format arguments to allow non-const-formattable types^[131]\n  * fully constexpr std::variant and std::optional^[132]\n  * supporting types derived from std::variant in std::visit^[133]\n\n### Removed features and deprecation[edit]\n\nRemoved features:\n\n  * Garbage Collection Support and Reachability-Based Leak Detection. It was added to the standard since C++11 but no compilers support this feature until C++23.^[134]\n  * Mixed wide string literal concatenation.^[135]\n  * Non-encodable wide character literals and multicharacter wide character literals.^[136]\n\nDeprecated features:\n\n  * std::aligned_storage and std::aligned_union^[137]\n  * std::numeric_limits::has_denorm^[138]\n\nReverted deprecated features:\n\n  * Use of comma operator in subscript expressions was no longer deprecated but the semantics has been changed to support overloadable n-adic operator[].\n  * C headers (The corresponding <*.h> headers for compatibility with C)\n\n## Published as Technical Specifications[edit]\n\n  * Concurrency TS v2^[139]\n\n## Compiler support[edit]\n\n  * Clang progressively added partial C++23 support from 2021 in version 13 through to version 18 in 2024, available through the option -std=c++23 . ^[140]\n  * GCC added partial, experimental C++23 support in 2021 in version 11 through the option -std=c++2b or -std=c++23 It also has an option to enable GNU extensions in addition to the experimental C++23 support, -std=gnu++2b. ^[141]\n\n## History[edit]\n\nIn the absence of face-to-face WG21 meetings, the following changes were\napplied after several virtual WG21 meetings, where they were approved by straw\npolls.\n\nThe following were added after the virtual WG21 meeting of 9 November 2020,\nwhere they were approved by straw polls:^[142]\n\n  * Literal suffixes for std::size_t and the corresponding signed type\n  * A member function contains for std::basic_string and std::basic_string_view, to check whether or not the string contains a given substring or character\n  * A stacktrace library (<stacktrace>), based on Boost.Stacktrace\n  * A type trait std::is_scoped_enum\n  * The header <stdatomic.h>, for interoperability with C atomics\n\nAfter the virtual WG21 meeting of 22 February 2021, following features are\nadded where they were approved by straw polls:^[143]\n\n  * Removing unnecessary empty parameter list () from lambda expressions.\n  * Repairing input range adaptors and counted_iterator.\n  * Relax the requirements for time_point::clock.^[144]\n  * std::visit for classes that are derived from std::variant.\n  * Locks lock lockables.^[145]\n  * Conditionally borrowed ranges.\n  * std::to_underlying.\n\nAfter the summer 2021 ISO C++ standards plenary virtual meeting of June 2021,\nnew features and defect reports were approved by straw polls:^[146]\n\n  * Consteval if (if consteval).\n  * Narrowing contextual conversions to bool.\n  * Allowing duplicate attributes.\n  * std::span-based string-stream (<spanstream>).\n  * std::out_ptr() and std::inout_ptr().\n  * constexpr for std::optional, std::variant, and std::type_info::operator==.\n  * Iterators pair constructors for std::stack (stack) and std::queue (queue).\n  * Few changes of the ranges library:\n\n    * Generalized starts_with and ends_with for arbitrary ranges.\n    * Renamed split_view to lazy_split_view and new split_view.\n    * Relaxing the constraint on join_view.\n    * Removing default_initializable constraint from concept view.\n    * Range constructor for std::basic_string_view.\n  * Prohibiting std::basic_string and std::basic_string_view construction from nullptr.\n  * std::invoke_r.\n  * Improvements on std::format.\n  * Adding default arguments for std::pair's forwarding constructor.\n\nAfter the autumn 2021 ISO C++ standards plenary virtual meeting of October\n2021, new features and defect reports were approved by straw polls:^[147]\n\n  * Non-literal variables, labels, and gotos in constexpr functions, but still ill-formed to evaluate them at compile-time.\n  * Explicit this object parameter.\n  * Changes on character sets and encodings.\n  * New preprocessors: #elifdef and #elifndef. Both directives were added to C23 (C language update) and GCC 12.^[148]\n  * Allowing alias declarations in init-statement.\n  * Overloading multidimensional subscript operator (e.g. arr[1, 2]).\n  * Decay copy in language: auto(x) or auto{x}.\n  * Changes in text formatting library:\n\n    * Fixing locale handling in chrono formatters.\n    * Use of forwarding references in format arguments to allow std::generator-like types.\n  * Addition of type alias std::pmr::stacktrace which is equivalent to std::basic_stacktrace<std::pmr::polymorphic_allocator>.^[149]\n  * Changes in ranges library:\n\n    * Refined definition of a view.\n    * Replacing function template std::ranges::istream_view with alias templates std::ranges::istream_view, std::ranges::wistream_view, and customization point object std::views::istream.\n    * zip range adaptor family:\n\n      * zip_view\n      * zip_transform_view\n      * adjacent_view (and std::views::pairwise being equivalent to std::views::adjacent<2>)\n      * adjacent_transform_view (and std::views::pairwise_transform being equivalent to std::views::adjacent_transform<2>)\n  * std::move_only_function.\n  * Monadic operations for std::optional.\n  * Member function template std::basic_string::resize_and_overwrite.\n  * Printing volatile pointers (volatile T*).\n  * std::byteswap.\n  * Heterogeneous erasure overloads for associative containers.\n  * Every specialization of std::span and std::basic_string_view is trivially copyable.\n  * Adding conditional noexcept specifications to std::exchange.^[150]\n  * Revamped specification and use of integer-class types.^[151]\n  * Clarify C headers. \"The headers are not useful in code that is only required to be valid C++. Therefore, the C headers should be provided by the C++ standard library as a fully-supported, not deprecated part, but they should also be discouraged for use in code that is not polyglot interoperability code. [..] This proposal makes the C headers no longer deprecated, so there is no formal threat of future removal. The effective discouragement to use the C headers in pure C++ code is now spelled out explicitly as normative discouragement.\"^[152]\n\nAfter the virtual WG21 meeting of 7 February 2022, the following features are\nadded where they were approved by straw polls:^[153]\n\n  * Allowed attributes on the function call operator of a lambda\n  * std::expected\n  * constexpr for cmath and cstdlib\n  * Function to mark unreachable code\n  * ranges::to\n  * A type trait to detect reference binding to temporary\n  * Making std::unique_ptr constexpr\n  * Pipe support for user-defined range adaptors\n  * ranges::iota, ranges::shift_left and ranges::shift_right\n  * views::join_with\n  * Windowing range adaptors: views::chunk and views::slide\n  * views::chunk_by\n\nAfter the virtual WG21 meeting of 25 July 2022, the following features and\ndefect reports are added where they were approved by straw polls:^[154]\n\n  * Made rewriting equality in expressions less of a breaking change.\n  * Reverted the deprecation of bitwise assignment to volatile variables.\n  * Added the #warning preprocessor directive.\n  * Removed non-encodable wide character literals and multicharacter wide character literals.\n  * Allowed labels to appear at the end of compound statements.\n  * Added escape sequences delimited with curly braces for octal and hexadecimal numbers and universal character names.\n  * Allowed constexpr functions to never be constant expressions.\n  * Simplified some implicit move rules from C++20 and allowed implicit move when returning an rvalue reference.\n  * Add a way to specify unicode characters by name. For example, U'\\N{LATIN CAPITAL LETTER A WITH MACRON}' // Equivalent to U'\\u0100'\n  * Allowed operator() and lambdas to be static.\n  * Allowed the this pointer and references of unknown origin to appear in constant expressions.\n  * Allowed implementations to define extended floating-point types in addition to the three standard floating-point types. Added the type aliases std::float16_t, std::float32_t, std::float64_t, std::float128_t, std::bfloat16_t for these extended types accessible through the header <stdfloat>, their corresponding literal suffixes f16 f32 f64 f128 bf16or F16 F32 F64 F128 BF16 and added overloads to various standard library functions that take floats as arguments.\n  * Added the [[assume(expression)]] attribute which allows the compiler to assume the provided expression is true to allow optimizations.\n  * Made support for UTF-8 source files mandatory, providing a portable encoding for source files.\n  * Allowed arrays of char and unsigned char to be initialized with UTF-8 string literals.\n  * Removed the requirement that wchar_t can encode all characters of the extended character set, in effect allowing UTF-16 to be used for wide string literals.\n  * Added std::mdspan, a multidimensional array view analogous to std::span.\n  * flat_map and flat_set were added to the standard library.\n  * Added the std::print and std::println functions for printing formatted text to stdout.\n  * Provide the named modules std and std.compat for importing the standard library.\n  * Added support for exclusive mode fstreams, analogous to the \"x\" flag in fopen.\n  * Allowed std::format to handle ranges, tuples, and other containers.\n  * Added std::forward_like.\n  * Made std::string::substr use move semantics.\n  * Added std::generator which implements a coroutine generator that models std::ranges::input_range\n  * views::cartesian_product, views::repeat, views::stride, views::as_const, views::as_rvalue.\n  * Added new algorithms: ranges::find_last, ranges::contains, and ranges fold algorithms.\n  * Made std::tuple compatible with other tuple-like objects.\n  * Explicit lifetime management for implicit-lifetime types.\n  * Made std::bitset and integral overloads of std::to_chars and std::from_chars constexpr-compatible.\n  * Adding move-only types support for comparison concepts.\n  * Ranges iterators as inputs to non-ranges algorithms.\n  * Relaxing range adaptors to allow for move-only types.\n\nAfter the hybrid WG21 meeting of 7 November 2022, the following features and\ndefect reports are added where they were approved by straw polls:^[155]\n\n  * Allowed operator[] to be static.\n  * Allowed static and thread_local variables to appear in constexpr functions if they are usable in constant expressions.\n  * consteval propagates upwards, that is, certain existing constexpr functions become consteval functions when those functions can already only be invoked during compile time.\n  * Extended the lifetime of temporaries that appear in the for-range-initializer of a range-based for loop to cover the entire loop.\n  * Reverted the deprecation of (all, not just bitwise) compound assignment to volatile variables.\n  * Monadic functions for std::expected.\n  * Synchronize the output of std::print with the underlying stream if the native Unicode API is used.^[156]\n\nAfter the final hybrid WG21 meeting of 6-11 February 2023, the following\nfeatures and defect reports are added where they were approved by straw\npolls:^[157]\n\n  * Referencing the Unicode Standard.^[158]\n  * Stashing stashing iterators for proper flattening.^[159]\n  * views::enumerate\n  * making multi-param constructors of views explicit\n  * relaxing ranges just a smidge\n  * escaping improvements in std::format\n  * improving std::format's width estimation\n  * std::format fill character allowances\n  * formatting thread::id and stacktrace\n  * A type trait std::is_implicit_lifetime\n  * std::common_reference_t of std::reference_wrapper should be a reference type\n  * disallowing user specialization of std::allocator_traits\n  * std::pmr::generator\n  * deprecating std::numeric_limits::has_denorm\n  * std::barrier's phase completion guarantees\n\n## References[edit]\n\n  1. ^ \"Working Draft, Standard for Programming Language C++\" (PDF). Open Standards. ISO/IEC. 2023-05-10. Archived (PDF) from the original on Feb 16, 2024.\n  2. ^ \"N4951 Editors' Report: Programming Languages - C++\". Open Standards. 2023-05-10. Archived from the original on 2023-06-05.\n  3. ^ Dus\u00edkov\u00e1, Hana (2019-11-06). \"N4817: 2020 Prague Meeting Invitation and Information\" (PDF). Open Standards. Archived (PDF) from the original on 2019-12-29. Retrieved 2020-02-13.\n  4. ^ Voutilainen, Ville (2019-11-25). \"To boldly suggest an overall plan for C++23\". Open Standards. Archived from the original on 2019-12-24. Retrieved 2020-02-13.\n  5. ^ Lelbach, Bryce Adelstein; Winters, Titus; Fracassi, Fabio; Baker, Billy; Liber, Nevin; Bastien, JF; Stone, David; Ballo, Botond; Keane, Erich; Honermann, Tom (2020-04-20). \"P2145R0: Evolving C++ Remotely\". Open Standards. Archived from the original on Feb 12, 2024.\n  6. ^ Jump up to: ^a ^b Sutter, Herb (29 July 2020). \"Business Plan and Convener's Report: ISO/IEC JTC1/SC22/WG21 (C++)\" (PDF).\n  7. ^ Jump up to: ^a ^b ^c \"Upcoming Meetings, Past Meetings : Standard C++\". isocpp.org.\n  8. ^ \"C++23 \"Pandemic Edition\" is complete (Trip report: Winter ISO C++ standards meeting, Issaquah, WA, USA)\". herbsutter.com. 13 February 2023.\n  9. ^ Ga\u0161per A\u017eman; Sy Brand; Ben Deane; Barry Revzin (2021-07-12). \"Deducing this\".\n  10. ^ Barry Revzin; Richard Smith; Andrew Sutton; Daveed Vandevoorde (2021-03-22). \"if consteval\".\n  11. ^ Mark Hoemmen; Daisy Hollman; Corentin Jabot; Isabella Muerte; Christian Trott (2021-09-14). \"Multidimensional subscript operator\" (PDF).\n  12. ^ \"static operator()\". 2022-04-08.\n  13. ^ \"static operator[]\" (PDF). 2022-11-11.\n  14. ^ \"Simpler implicit move\". 2022-03-23.\n  15. ^ Zhihao Yuan (2021-07-12). \"auto(x): decay-copy in the language\".\n  16. ^ Melanie Blower (2021-04-30). \"Add support for preprocessing directives elifdef and elifndef\" (PDF).\n  17. ^ Aaron Ballman (2022-01-13). \"Support for #warning\" (PDF).\n  18. ^ \"Wording for P2644R1 Fix for Range-based for Loop\". 2022-11-11.\n  19. ^ \"Portable assumptions\" (PDF). 2022-04-22.\n  20. ^ Timur Doumler (2022-05-20). \"Wording for class template argument deduction from inherited constructors\" (PDF).\n  21. ^ \"Labels at the end of compound statements (C compatibility)\" (PDF). 2022-01-13.\n  22. ^ Jens Maurer (2021-04-13). \"Extend init-statement to allow alias-declaration\".\n  23. ^ JeanHeyd Meneide; Rein Halbersma (2019-11-24). \"Literal Suffix for (signed) size_t\".\n  24. ^ \"Extended floating-point types and standard names\". 2022-04-22.\n  25. ^ Alex Christensen; JF Bastien (2020-12-11). \"P1102R2: Down with ()!\".\n  26. ^ \"Attributes on Lambda-Expressions\" (PDF).\n  27. ^ Ville Voutilainen (2021-07-12). \"Non-literal variables (and labels and gotos) in constexpr functions\".\n  28. ^ \"Permitting static constexpr variables in constexpr functions\". 2022-11-07.\n  29. ^ \"Relaxing some constexpr restrictions\". 2022-01-27.\n  30. ^ Andrzej Krzemie\u0144ski (2021-04-12). \"Narrowing contextual conversions to bool\".\n  31. ^ Corentin Jabot (2021-04-13). \"Trimming whitespaces before line splicing\" (PDF).\n  32. ^ Pal Balog (2021-04-02). \"Make declaration order layout mandated\" (PDF).\n  33. ^ \"Delimited escape sequences\" (PDF). 2022-02-25.\n  34. ^ \"Named universal character escapes\". 2022-03-25.\n  35. ^ \"Support for UTF-8 as a portable source file encoding\" (PDF). 2022-07-01.\n  36. ^ Corentin Jabot (2021-09-14). \"Consistent character literal encoding\" (PDF).\n  37. ^ Jens Maurer (2021-09-21). \"Character sets and encodings\".\n  38. ^ \"Standard Library Modules std and std.compat\" (PDF).\n  39. ^ \"(std::generator: Synchronous Coroutine Generator for Ranges)\" (PDF).\n  40. ^ Vicente Botet; JF Bastien; Jonathan Wakely (2022-01-07). \"std::expected\".\n  41. ^ Sy Brand (2021-04-27). \"Monadic operations for std::optional\".\n  42. ^ Jeff Garland (2022-09-28). \"P2505R5 Monadic Functions for std::expected\".\n  43. ^ JeanHeyd Meneide (2021-01-22). \"std::to_underlying for enumerations\".\n  44. ^ Matt Calabrese; Ryan McDougall (2021-07-09). \"move_only_function\".\n  45. ^ Ga\u0161per A\u017eman (2022-05-13). \"std::forward_like\" (PDF).\n  46. ^ Zhihao Yuan (2020-04-29). \"invoke_r\".\n  47. ^ Jump up to: ^a ^b Barry Revzin (2021-12-17). \"Pipe support for user-defined range adaptors\".\n  48. ^ Isabella Muerte; Corentin Jabot (2021-09-17). \"Byteswapping for fun&&nuf\".\n  49. ^ Melissa Mears; Jens Maurer (2021-10-15). \"Function to mark unreachable code\" (PDF).\n  50. ^ Corentin Jabot (2022-07-15). \"Compatibility between tuple, pair and tuple-like objects\" (PDF).\n  51. ^ Hui Xie; S. Levent Yilmaz; Tim Song (2023-02-07). \"common_reference_t of reference_wrapper Should Be a Reference Type\".\n  52. ^ \"Wording for P2644R1 Fix for Range-based for Loop\". 2022-11-11.\n  53. ^ Peter Dimov (2021-05-01). \"Making std::type_info::operator== constexpr\".\n  54. ^ Daniil Goncharov (2022-06-25). \"A more constexpr bitset\" (PDF).\n  55. ^ Andreas Fertig (2021-11-06). \"Making std::unique_ptr constexpr\" (PDF).\n  56. ^ Edward J. Rosten; Oliver J. Rosten (2021-11-12). \"constexpr for <cmath> and <cstdlib>\" (PDF).\n  57. ^ Daniil Goncharov; Alexander Karaev (2021-09-18). \"Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header\" (PDF).\n  58. ^ Juan Alday (2020-10-12). \"A proposal for a type trait to detect scoped enumerations\" (PDF).\n  59. ^ Timur Doumler; Vittorio Romeo (2022-11-11). \"A trait for implicit lifetime types\" (PDF).\n  60. ^ Tim Song (2021-10-13). \"A type trait to detect reference binding to temporary\".\n  61. ^ Justin Bassett (2022-07-02). \"Move-only types for equality_comparable_with, totally_ordered_with, and three_way_comparable_with\" (PDF).\n  62. ^ Jump up to: ^a ^b Corentin Jabot; Eric Niebler; Casey Carter (2022-01-21). \"Conversions from ranges to containers\" (PDF).\n  63. ^ Christopher Di Bella (2021-02-19). \"starts_with and ends_with\".\n  64. ^ Christopher Di Bella (2021-04-16). \"std::ranges::contains\".\n  65. ^ Zach Laine (2022-06-17). \"find_last\" (PDF).\n  66. ^ Tim Song (2021-12-05). \"ranges::iota, ranges::shift_left, and ranges::shift_right\".\n  67. ^ Barry Revzin (2022-04-22). \"ranges::fold\".\n  68. ^ Tim Song (2021-06-11). \"zip\".\n  69. ^ Barry Revzin (2022-01-28). \"views::join_with\".\n  70. ^ Tim Song (2021-12-05). \"Windowing range adaptors: views::chunk and views::slide\".\n  71. ^ Tim Song (2021-11-19). \"views::chunk_by\".\n  72. ^ Barry Revzin (2022-02-14). \"views::as_rvalue\".\n  73. ^ Jump up to: ^a ^b Barry Revzin (2022-06-17). \"cbegin should always return a constant iterator\".\n  74. ^ Micha\u0142 Dominiak (2022-07-13). \"views::repeat\".\n  75. ^ Christopher Di Bella; Tim Song (2022-07-08). \"stride_view\".\n  76. ^ Sy Brand; Micha\u0142 Dominiak (2022-07-13). \"views::cartesian_product\".\n  77. ^ Corentin Jabot (2022-12-07). \"views::enumerate\" (PDF).\n  78. ^ David Olsen (2022-04-22). \"Ranges iterators as inputs to non-Ranges algorithms\".\n  79. ^ Micha\u0142 Dominiak (2022-07-13). \"Relaxing range adaptors to allow for move only types\".\n  80. ^ Ville Voutilainen (2022-11-12). \"Making multi-param constructors of views explicit\".\n  81. ^ JeanHeyd Meneide; Todor Buyukliev; Isabella Muerte (2021-04-15). \"out_ptr - a scalable output pointer abstraction\".\n  82. ^ Jonathan Wakely; Chris Kennelly (2021-01-22). \"Providing size feedback in the Allocator interface\".\n  83. ^ Timur Doumler; Richard Smith (2022-07-15). \"Explicit lifetime management\" (PDF).\n  84. ^ Pablo Halpern (2023-02-08). \"Disallow User Specialization of allocator_traits\".\n  85. ^ Wim Leflere; Paul Fee (2020-06-13). \"string contains function\".\n  86. ^ Yuriy Chernyshov (2020-09-06). \"A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr\".\n  87. ^ Corentin Jabot (2021-03-17). \"Range constructor forstd::string_view 2: Constrain Harder\" (PDF).\n  88. ^ Chris Kennelly; Mark Zeren (2021-09-14). \"basic_string::resize_and_overwrite\".\n  89. ^ \"std::string::substr() &&\".\n  90. ^ \"Formatting Ranges\". 16 May 2022.\n  91. ^ Barry Revzin (2022-07-15). \"Improve default container formatting\".\n  92. ^ Corentin Jabot; Victor Zverovich (2023-02-09). \"Formatting thread::id and stacktrace\" (PDF).\n  93. ^ Alexey Gorgurov; Antony Polukhin (2020-09-16). \"A Proposal to add stacktrace library\".\n  94. ^ \"Formatted output\".\n  95. ^ Peter Sommerlad (2021-02-26). \"A strstream replacement using span<charT> as buffer\" (PDF).\n  96. ^ \"Support exclusive mode for fstreams\".\n  97. ^ Bryce Adelstein Lelbach (2021-09-25). \"Printing volatile Pointers\".\n  98. ^ \"MDSPAN\". 13 July 2022.\n  99. ^ \"index_type & size_type in mdspan\" (PDF).\n  100. ^ \"mdspan: rename pointer and contiguous\". 15 June 2022.\n  101. ^ \"Add the missing empty to mdspan\".\n  102. ^ \"A Standard flat_map\" (PDF).\n  103. ^ \"A Standard flat_set\" (PDF).\n  104. ^ Arthur O'Dwyer; Mike Spertus (2021-03-14). \"Stop overconstraining allocators in container deduction guides\".\n  105. ^ Konstantin Boyarinov; Sergey Vinogradov; Ruslan Arutyunyan (2020-12-15). \"Heterogeneous erasure overloads for associative containers\".\n  106. ^ Corentin Jabot (2021-03-05). \"Iterators pair constructors for stack and queue\" (PDF).\n  107. ^ Nevin Liber (2021-03-19). \"Require span & basic_string_view to be TriviallyCopyable\" (PDF).\n  108. ^ Hans-J. Boehm (2020-10-23). \"P0943R6: Support C atomics in C++\".\n  109. ^ Steve Downey; Zach Laine; Tom Honermann; Peter Bindels; Jens Maurer (2021-04-12). \"C++ Identifier Syntax using Unicode Standard Annex 31\".\n  110. ^ Erich Keane (2020-07-02). \"Allow Duplicate Attributes\" (PDF).\n  111. ^ Barry Revzin (2021-09-14). \"Change scope of lambda trailing-return-type\".\n  112. ^ \"The Equality Operator You Are Looking For\". 2022-01-13.\n  113. ^ \"De-deprecating volatile compound operations\" (PDF).\n  114. ^ \"Core Language Working Group NB comment resolutions for the November, 2022 meeting : 2654. Un-deprecation of compound volatile assignments\".\n  115. ^ \"char8_t Compatibility and Portability Fix\". 2022-06-17.\n  116. ^ \"Relax requirements on wchar_t to match existing practices\" (PDF). 2022-07-15.\n  117. ^ \"Using unknown pointers and references in constant expressions\". 8 April 2022.\n  118. ^ \"consteval needs to propagate up\". 2022-11-11.\n  119. ^ Barry Revzin (2020-02-19). \"Conditionally borrowed ranges\".\n  120. ^ Tim Song (2021-01-12). \"Repairing input range adaptors and counted_iterator\".\n  121. ^ Tim Song (2021-05-06). \"join_view should join all views of ranges\".\n  122. ^ Barry Revzin (2021-03-05). \"Superior String Splitting\".\n  123. ^ Barry Revzin (2021-05-14). \"Views should not be required to be default constructible\".\n  124. ^ Barry Revzin; Tim Song (2021-08-15). \"What is a view?\".\n  125. ^ Nicolai Josuttis (2021-09-24). \"Fix istream_view\" (PDF).\n  126. ^ Barry Revzin (2022-01-18). \"Expose std::basic-format-string<charT, Args...>\".\n  127. ^ Victor Zverovich (2021-02-05). \"std::format improvements\".\n  128. ^ Victor Zverovich; Corentin Jabot (2021-09-11). \"Fixing locale handling in chrono formatters\".\n  129. ^ Corentin Jabot (2022-12-02). \"format's width estimation is too approximate and not forward compatible\" (PDF).\n  130. ^ Tom Honermann (2023-02-08). \"std::format() fill character allowances\".\n  131. ^ Victor Zverovich (2021-09-24). \"Add support for std::generator-like types to std::format\".\n  132. ^ Barry Revzin (2021-02-11). \"Missing constexpr in std::optional and std::variant\".\n  133. ^ Barry Revzin (2020-10-30). \"Inheriting from std::variant\".\n  134. ^ JF Bastien; Alisdair Meredith (2021-04-16). \"Removing Garbage Collection Support\".\n  135. ^ Jens Maurer (2021-04-12). \"Mixed string literal concatenation\".\n  136. ^ \"Remove non-encodable wide character literals and multicharacter wide character literals\" (PDF).\n  137. ^ CJ Johnson (2021-11-22). \"Deprecate std::aligned_storage and std::aligned_union\" (PDF).\n  138. ^ Matthias Kretz (2022-11-08). \"Deprecate numeric_limits::has_denorm\" (PDF).\n  139. ^ \"Programming Languages \u2014 Technical specification for C++ extensions for concurrency 2\" (PDF).\n  140. ^ \"C++ Support in Clang\".\n  141. ^ \"C++ Standards Support in GCC - GNU Project\".\n  142. ^ Ranns, Nina (2020-11-19). \"WG21 2020-11 Virtual Meeting: Minutes of Meeting\" (PDF).\n  143. ^ Ranns, Nina (2021-02-22). \"WG21 2021-02 Virtual Meeting: Minutes of Meeting\" (PDF).\n  144. ^ Alexey Dmitriev; Howard Hinnant (2020-10-22). \"Relax Requirements for time_point::clock\".\n  145. ^ Tim Song (2020-11-13). \"Locks lock lockables\".\n  146. ^ Ranns, Nina (2021-06-07). \"WG21 2021-06 Virtual Meeting Minutes of Meeting\" (PDF).\n  147. ^ Ranns, Nina (2021-10-04). \"WG21 2021-10 Virtual Meeting Minutes of Meeting\" (PDF).\n  148. ^ \"GCC 12 Adds Support For New #elifdef #elifndef Directives\". phoronix. May 12, 2021. Archived from the original on December 27, 2022.\n  149. ^ Steve Downey (2021-06-14). \"Add a pmr alias for std::stacktrace\".\n  150. ^ Giuseppe D'Angelo (2021-06-28). \"Add a conditional noexcept specification to std::exchange\".\n  151. ^ Tim Song (2021-08-06). \"Cleaning up integer-class types\".\n  152. ^ Thomas K\u00f6ppe (2021-06-11). \"Clarifying the status of the \"C headers\"\".\n  153. ^ Ranns, Nina (2022-02-07). \"WG21 2022-02 Virtual Meeting: Minutes of Meeting\" (PDF).\n  154. ^ Ranns, Nina (2022-08-09). \"WG21 2022-07 Virtual Meeting: Minutes of Meeting\" (PDF).\n  155. ^ Ranns, Nina (2022-12-05). \"WG21 2022-11 Hybrid Meeting: Minutes of Meeting\" (PDF).\n  156. ^ Victor Zverovich (2022-11-08). \"Should the output of std::print to a terminal be synchronized with the underlying stream?\".\n  157. ^ Ranns, Nina (2023-03-06). \"WG21 2023-02 Hybrid Meeting: Minutes of Meeting\" (PDF).\n  158. ^ Corentin Jabot (2023-02-09). \"Referencing The Unicode Standard\" (PDF).\n  159. ^ Tim Song (2023-01-31). \"Stashing stashing iterators for proper flattening\".\n\n  * v\n  * t\n  * e\n\nC++  \n---  \n  \n  * C++\n  * Outline\n  * C++98\n  * C++03\n  * C++11\n  * C++14\n  * C++17\n  * C++20\n  * C++23\n  * C++26\n  * Libraries\n\n  \nFeatures|\n\n  * Classes\n  * Concepts\n  * Exception handling (Exception safety)\n  * Function overloading\n  * new and delete\n  * Operator overloading\n  * Operators\n  * References\n  * Templates\n  * Template metaprogramming\n  * Virtual functions\n\n  \nStandard Library|\n\n  * I/O Streams\n  * Smart pointers\n  * STL\n  * Strings\n\n  \nIdeas|\n\n  * As-if rule\n  * Curiously recurring template pattern\n  * Most vexing parse\n  * One Definition Rule\n  * Resource acquisition is initialization\n  * Rule of three\n  * Special member functions\n  * Substitution failure is not an error\n\n  \nCompilers|\n\n  * Comparison of C++ compilers\n  * Borland C++\n  * Borland Turbo C++\n  * C++Builder\n  * Clang\n  * GCC\n  * Intel C++ Compiler\n  * Oracle Solaris Studio\n  * Visual C++\n  * Watcom C/C++\n\n  \nIDEs|\n\n  * Comparison of C IDEs\n  * Anjuta\n  * CLion\n  * Code::Blocks\n  * CodeLite\n  * Dev-C++\n  * Eclipse\n  * Geany\n  * Microsoft Visual Studio\n  * NetBeans\n  * KDevelop\n  * Qt Creator\n\n  \nSuperset languages|\n\n  * Objective-C++\n  * C++/CLI\n  * C++/CX\n  * C++/WinRT\n  * Ch\n  * SYCL\n\n  \nDialects|\n\n  * Embedded C++\n\n  \nRelative to other languages|\n\n  * Compatibility of C and C++\n  * Comparison of Java and C++\n  * Comparison of ALGOL 68 and C++\n  * Comparison of programming languages\n\n  \nDesigner|\n\n  * Bjarne Stroustrup\n\n  \n  \n  * Category\n\n  \n  \nRetrieved from\n\"https://en.wikipedia.org/w/index.php?title=C%2B%2B23&oldid=1221547574\"\n\nCategories:\n\n  * C++\n  * C++ programming language family\n  * Algol programming language family\n  * High-level programming languages\n  * Statically typed programming languages\n\nHidden categories:\n\n  * Articles with short description\n  * Short description is different from Wikidata\n  * Articles needing cleanup from December 2023\n  * All pages needing cleanup\n  * Articles with sections that need to be turned into prose from December 2023\n  * Articles lacking reliable references from December 2023\n  * All articles lacking reliable references\n  * Articles needing cleanup from February 2023\n  * Cleanup tagged articles with a reason field from February 2023\n  * Wikipedia pages needing cleanup from February 2023\n  * Wikipedia articles in need of updating from March 2024\n  * All Wikipedia articles in need of updating\n  * Articles with multiple maintenance issues\n  * Articles with example C++ code\n\n  * This page was last edited on 30 April 2024, at 15:26 (UTC).\n  * Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n  * Privacy policy\n  * About Wikipedia\n  * Disclaimers\n  * Contact Wikipedia\n  * Code of Conduct\n  * Developers\n  * Statistics\n  * Cookie statement\n  * Mobile view\n  * Edit preview settings\n\n", "frontpage": false}
