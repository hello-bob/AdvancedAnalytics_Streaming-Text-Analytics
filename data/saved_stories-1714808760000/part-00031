{"aid": "40253677", "title": "Using Diagrams to Improve Technical Communication", "url": "https://www.jurnalanas.com/blog/diagram", "domain": "jurnalanas.com", "votes": 1, "user": "jurnalanas", "posted_at": "2024-05-04 00:06:46", "comments": 0, "source_title": "Using Diagrams to Improve Technical Communication", "source_text": "Using Diagrams to Improve Technical Communication - Jurnal Anas\n\n# Using Diagrams to Improve Technical Communication\n\nMay 4, 2024\n\nsystem-design\n\n> \u201cYou know what architecture really is? It is an art of drawing lines. With\n> an interesting rule that once you have drawn a line all the dependencies\n> that cross that line point in the same direction.\u201d \u2013Robert C. Martin\n\nPicture this: you're the most experienced software engineer in a small\nstartup, and you've just been tasked with designing a complex system that will\nbe the backbone of your company's operations.\n\nYou're excited to dive in and start coding, but then it hits you\u2014how will you\nensure that your team understands the intricacies of the design? How will you\ncommunicate the system's architecture to stakeholders who may not have a\ntechnical background?\n\nDiagrams are powerful tools that can convey complex information concisely.\nThey allow you to document systems, share knowledge, and deepen your own\nunderstanding of your designs.\n\nMany engineers often skip upfront design and jump straight into coding,\nespecially with the adoption of agile and lean startup methodologies. While\nthere may be limited time for extensive upfront planning, some level of design\nis still essential.\n\nFor example, imagine you want to design a circuit breaker component.\n\nA circuit breaker is a design pattern that can be used to increase the\nrobustness of your system and protect it from failures of other components (or\nthird-party systems). It enables your code to verify external component\navailability before executing actions.\n\nTo build a circuit breaker, you need to approach the problem with a clear\nunderstanding of the system's requirements. You can begin with a draft of the\nmain interface below:\n\n    \n    \n    interface CircuitBreakerInterface { isAvailable(serviceName: string): boolean; reportFailure(serviceName: string): void; reportSuccess(serviceName: string): void; }\n\nTo take it a step further, you can draft some code to test the interface and\nensure it's functional.\n\nThis could be a unit test or just a draft of code that doesn\u2019t have to\ncompile. At this stage, just make sure that the interface you create is clear\nand easy to use:\n\n    \n    \n    let userProfile = null if (circuitBreaker.isAvailable('UserProfileService')) { try { userProfile = await userProfileService.loadProfile() circuitBreaker.reportSuccess('UserProfileService') } catch (error) { if (error instanceof UserProfileServiceException) { circuitBreaker.reportFailure('UserProfileService') } else { // Service is available, but another error occurred log.error('Error occurred while loading user profile:', error) } } } if (userProfile === null) { // Handle the error gracefully showMaintenanceMessage() }\n\nOnce you have a solid understanding of the main use cases, you can leverage\nsequence diagrams to illustrate the interaction between clients and the\ncircuit breaker:\n\nThe diagrams provide different perspectives of the design, which helps you\nbetter visualize it. This, in turn, reduces the risk of creating an\nunrealistic design and investing significant time and effort into it before\nhaving a chance to validate it.\n\n\ud83d\udcdd Tip: If you find it challenging to draw diagrams initially, start by\ndocumenting your existing work. It's easier to create diagrams for\napplications and features you've already built and fully understand.\n\nIf you are a frontend engineer, diagramming skills can also be very helpful\nwhen designing client-side applications that prioritize performance and user\nexperience.\n\nBy visualizing your thought process in diagrams, you can effectively explain\nconcepts like component architecture or front-end architecture in general.\n\nThree types of diagrams are particularly useful for documenting and\nunderstanding large-scale systems: Use Case, Class, and Module diagrams\n(similar to Class Diagrams, but focus on the higher level of abstraction).\n\nAs your company scales up and your teams grow larger, these diagrams become\nincreasingly beneficial.\n\nWhile there are established rules and notations for creating diagrams, I think\nthe most important thing is to focus on making your diagrams understandable.\n\nThink of your diagrams as a conversation starter, not the end product. Use\nthem as a tool to facilitate discussions, gather feedback, and continuously\nrefine your designs.\n\nThe more you practice creating diagrams, the better you'll become at\ndistilling complex systems into visual representations that everyone can\nunderstand.\n\nTweet this article\n\nDiscuss on Twitter\n\nAboutProjectsTags\n\n\u00a9 2024 Jurnal Anas. All rights reserved.\n\n", "frontpage": false}
