{"aid": "40234398", "title": "Hacking on PostgreSQL Is Hard", "url": "http://rhaas.blogspot.com/2024/05/hacking-on-postgresql-is-really-hard.html", "domain": "rhaas.blogspot.com", "votes": 1, "user": "gmac", "posted_at": "2024-05-02 09:52:40", "comments": 0, "source_title": "Hacking on PostgreSQL is Really Hard", "source_text": "Robert Haas: Hacking on PostgreSQL is Really Hard\n\n# Robert Haas\n\nVP, Chief Database Scientist @ EnterpriseDB, PostgreSQL Major Contributor and\nCommitter\n\n## Wednesday, May 01, 2024\n\n### Hacking on PostgreSQL is Really Hard\n\nHacking on PostgreSQL is really hard. I think a lot of people would agree with\nthis statement, not all for the same reasons. Some might point to the\ncharacter of discourse on the mailing list, others to the shortage of patch\nreviewers, and others still to the difficulty of getting the attention of a\ncommitter, or of feeling like a hostage to some committer's whimsy. All of\nthese are problems, but today I want to focus on the purely technical aspect\nof the problem: the extreme difficulty of writing reasonably correct patches.\n\nThere are tons of examples that I could use to demonstrate this, but it would\nbe unfair to embarrass anyone else, so I'll take an example drawn from my own\nvery recent experience: incremental backup. I consider this a moderately\ncomplex feature. It was an ambitious project, but there are certainly much\nmore ambitious things that somebody might want to do, and that some people\nhave done. This project has actually been brewing for several years; an\nearlier incarnation of the project morphed into the effort to create\npg_verifybackup. In 2023, I worked back around to the main event again. I\nspent several months having on incremental backup in the first half of the\nyear, and then several more months on it in the last quarter, ending with a\ncommit of the feature on December 20, 2023.\n\nOn December 21, there were four commits, two by me and two by Tom Lane, fixing\ndefects in that commit. By January 15, there were sixteen more followup\ncommits, of which only two were planned. Two of those were by Tom Lane, one by\nMichael Paquier, and the rest by me. Pretty much all of these were, at least\nas I see it, fixing real issues. It wasn't like the mailing list was torturing\nme to fix stupid things that didn't matter; they were finding a whole bunch of\ndumb oversights in my work. After the first few weeks, the pace did slow down\nquite a bit, but the worst was yet to come.\n\nOn March 4, I committed a fix for incremental backup in the face of current\nCREATE DATABASE whatever STRATEGY file_copy operations. This was formally a\ndata-corrupting bug, although it is unlikely that many people would have hit\nit in practice. On April 5, I committed a fix for a data-corrupting bug that\nwould have hit practically anyone who used incremental backup on relations 1GB\nor larger in size. On April 19, I committed a fix for an issue that would have\nmade it impossible to restore incremental backups of PostgreSQL instances that\nmade use of user-defined tablespaces. On April 25, I committed code and\ndocumentation improvements in response to observations that, if the checksum\nstatus of the cluster was changed, you could checksum failures after\nrestoring. These failures wouldn't be real - in reality your data was fine -\nbut it would look frightening.\n\nThis is not an exhaustive enumeration of everything I've done to try to\nstabilize incremental backup. For example, along the way, I broke the\nbuildfarm several times trying to add more tests, since obviously I didn't\nhave sufficiently good tests. If you go through the commit log, you can see my\nfrantic efforts to stabilize the buildfarm before the howling mob of angry\nhackers descended on me. But the oversights mentioned in the previous\nparagraph, particularly the middle two, were serious oversights. They didn't\nindicate any design-level insufficiency, so the fixes were very simple, but\nthe reasonable reader might wonder how such mistakes survived testing. It's\nnot as if I didn't test -- or at least, I didn't think I hadn't tested. I put\nsignificant time and energy into both manual testing and the writing of\nautomated test cases. Jakub Wartak also put an enormous amount of time and\nenergy into testing, for which I remain profoundly grateful, and he somehow\ndidn't find those problems, either. How is that even possible?\n\nOne possible theory is that I'm not really very good at this whole hacking on\nPostgreSQL thing, and certainly there are people who are better at it than I\nam, but I don't think that can be the whole explanation. If it were, you would\nexpect the troubles that I had here to be unusual, and they very much aren't.\nIn fact, some people have had much worse experiences than I have had with this\nfeature, resulting in patches on which someone has spent a lot of time having\nto be thrown out entirely, or in committed patches representing large amounts\nof work being reverted, or in serious bugs making it all the way through to\nrelease, necessitating after-the-fact stabilization. I remember a case where a\nserious data-corrupting bug that I introduced wasn't found for something like\ntwo years, and that kind of thing isn't uncommon. As far as I can tell,\neveryone who works on PostgreSQL struggles to write code well enough to live\nup to the project standards every time they sit down to write a patch, and\neven the very best hackers still fail at it from time to time, in small ways\nor sometimes in large ones.\n\nI believe that this is part of what's behind many of the problems that I\nmentioned in the opening paragraph. For example, suppose you're lucky enough\nto be a committer. Every time you commit one of your own patches, you're at\nserious risk of having to drop everything and put a ton of work into fixing\neverything you did wrong, either as soon as you do the commit, or when the\nproblems are found later, or both. Every time you commit one of somebody\nelse's patches, you're at risk of having to do the same thing, which means\nyou're probably going to be reluctant to commit anything unless you're pretty\nsure it's pretty good. That means that committing other people's patches is\nnot primarily about the time it takes to type git commit and git push, but\nabout all of the review you do beforehand, and the potential unfunded\nliability of having to be responsible for it afterward. I haven't talked to\nother committers about the extent to which this weighs on their decision-\nmaking process, but I'd be astonished if it didn't. There's one particular\npatch I remember committing - I won't mention which one - where I spent weeks\nand weeks of time reviewing the patch before committing it, and after\ncommitting it, I lost most of the next six to nine months fixing things I\nhadn't caught during review. That is the sort of experience that you can't\nafford to repeat very often; there just aren't enough months in the year, or\nyears in your working life. I think it was totally worth the pain, in that\nparticular case, but it's definitely not worth that amount of pain for a\nrandom patch in which I'm not particularly personally invested.\n\nAnd that obviously has the effect of limiting the number of people who can get\nthings committed to PostgreSQL. To become a committer, you have to convince\npeople that you're one of the people who can be trusted to give the final\nsign-off to other people's patches. That requires both technical and\ndiplomatic skill, but the technical skill alone takes thousands of hours to\ndevelop. And then, if you want to keep being able to commit significant\npatches, whether your own or someone else's, you have to continue spending at\nleast hundreds and probably over a thousand hours on it, every year, in order\nto maintain the necessary skill level. Not everyone is able or willing to do\nthat, which means that the pool of active committers doesn't grow a whole lot:\npeople are added, but people also move on. And that in turn means that the\nnumber of promising new contributors who can get enough committer attention to\nbecome committers themselves is also quite limited. Existing committers tend\nto focus their attention on the most promising patches from the most promising\ndevelopers; other people, to some greater or lesser extent, get frozen out.\nEven committers can get frozen out, to a degree: if you commit something that\nturns out to have major problems, you're going to get a fair amount of\nblowback from other committers who want to spend their time either on their\nown patches or on the patches of non-committers, not cleaning up after you,\nand that blowback is likely to make you more reluctant to commit major patches\nin the future. That's as it should be, but it still has the effect of further\nrestricting the rate at which stuff gets done.\n\nAnd of course, all of this also affects the tone of the community discourse.\nNon-committers get frustrated if they can't get the attention of committers.\nReviews get frustrated at people who submit low-quality patches, especially if\nrepeated rounds of review don't result in much improvement. Committers get\nfrustrated at the amount of time they spend cleaning up after other people's\nmistakes, or worse still, their own. I genuinely believe that almost everyone\nhas the intention to be kind and well-mannered and to help others out whenever\npossible, but the sheer difficulty of the task in which we are engaged puts\npressure on everyone. In my case, and I'm probably not alone in this, that\npressure extends well beyond working hours. I can't count the the number of\ntimes that I've been rude to someone in my family because I turned the\nbuildfarm red and had to spend the afternoon, or the evening, fixing it, or\noften enough, just reverting my ill-considered changes. I'm not sure how other\npeople experience it, but for me, the worst part of it is the realization that\nI've been dumb. Had I only done X or tested Y, I could have avoided messing it\nup, and I didn't do that, or at least not correctly, and now here we are.\n\nSince PostgreSQL is the only open source project in which I've ever been\ninvolved, I don't really know to what degree other projects have encountered\nthese problems, or how they've solved them. I would like to see the developer\nbase grow, and the amount that we get done in a release scale, in a way that\nit currently doesn't. But I have also seen that just committing more stuff\nwith less caution tends to backfire really hard. After 15 years as a\nPostgreSQL developer, most if it full time, and after 30 years of programming\nexperience, I still can't commit a test case change without a serious risk of\nhaving to spend the next several hours, or days, cleaning up the damage.\nEither programming is intrinsically difficult, and that's just to be expected,\nor we're doing things that make it harder for ourselves. I suspect it's at\nleast partially the latter, but I don't know.\n\nYour thoughts welcome.\n\nPosted by\n\nRobert Haas at\n\n2:05 PM\n\nLabels: postgresql\n\n#### 3 comments:\n\n  1. Greg SmithMay 01, 2024 5:37 PM\n\nIn theory things could be easier, one day, if PG was written in a higher level\nlanguage, say Rust. I think for a database that just moves the problems to a\ndifferent level. At this point the PG code is riding too close to the metal to\nuse anything but C.\n\nThe thing I like to remind people is that this project has been around for\ndecades, during which over a hundred people (or whatever COUNT(*) FROM\ncontributors is) have picked through the code trying to find low hanging fruit\nto contribute. Everything left to do is astonishingly hard; if it weren't it\nwould have been done already.\n\nIn my realm, I have a couple of PG TODO items I work on in the background,\nthings like what should the max usage count be on buffers. They've been on\nthat list since at least 2007. It's really hard to implement some of these\nfeatures, both research and implementation. Incremental backup certainly\nqualifies as something on the nastiest end of difficulty, where mistakes turn\ninto corruption.\n\nReplyDelete\n\nReplies\n\nReply\n\n  2. Craig LewisMay 01, 2024 6:24 PM\n\nIt happens to the best of us. I've got a similar amount of experience, across\na wide variety of languages, and I still commit stupid stuff some times.\n\nThere's also the old adage that programmers only test the happy path. You\nreally do want a sadistic SOB that wants to hurt you in charge of testing.\n\nReplyDelete\n\nReplies\n\nReply\n\n  3. Laurenz AlbeMay 02, 2024 4:14 AM\n\nI agree with everything you are saying here. It is tough to contribute and\ncommit for PostgreSQL, and many worthy people have given up after sinking\nmonths of work into patches, when everybody agrees that the feature would be\ndesirable (index skip scan, for one).\n\nOn the other hand, it is exactly this grueling process that keeps the software\nquality high and keeps PostgreSQL from succumbing to creeping featuritis. I\njust wish there were a way to have all that without exhausting contributors\nand committers.\n\nI think you are doing a good job, both technically and in your interaction.\n\nReplyDelete\n\nReplies\n\nReply\n\nAdd comment\n\nLoad more...\n\nOlder Post Home\n\nSubscribe to: Post Comments (Atom)\n\n## About Me\n\nRobert Haas\n\nView my complete profile\n\n## Blog Archive\n\n  * \u25bc 2024 (4)\n\n    * \u25bc May (1)\n\n      * Hacking on PostgreSQL is Really Hard\n    * \u25ba January (3)\n\n  * \u25ba 2023 (7)\n\n    * \u25ba December (1)\n    * \u25ba June (1)\n    * \u25ba May (1)\n    * \u25ba April (3)\n    * \u25ba January (1)\n\n  * \u25ba 2022 (5)\n\n    * \u25ba November (1)\n    * \u25ba May (1)\n    * \u25ba February (1)\n    * \u25ba January (2)\n\n  * \u25ba 2021 (3)\n\n    * \u25ba December (1)\n    * \u25ba November (1)\n    * \u25ba June (1)\n\n  * \u25ba 2020 (5)\n\n    * \u25ba December (1)\n    * \u25ba May (2)\n    * \u25ba February (1)\n    * \u25ba January (1)\n\n  * \u25ba 2019 (7)\n\n    * \u25ba October (1)\n    * \u25ba September (1)\n    * \u25ba June (1)\n    * \u25ba February (1)\n    * \u25ba January (3)\n\n  * \u25ba 2018 (5)\n\n    * \u25ba June (2)\n    * \u25ba May (1)\n    * \u25ba January (2)\n\n  * \u25ba 2017 (6)\n\n    * \u25ba December (1)\n    * \u25ba September (1)\n    * \u25ba August (1)\n    * \u25ba April (2)\n    * \u25ba March (1)\n\n  * \u25ba 2016 (6)\n\n    * \u25ba August (1)\n    * \u25ba May (1)\n    * \u25ba April (1)\n    * \u25ba March (2)\n    * \u25ba January (1)\n\n  * \u25ba 2015 (4)\n\n    * \u25ba November (1)\n    * \u25ba October (1)\n    * \u25ba March (2)\n\n  * \u25ba 2014 (11)\n\n    * \u25ba December (1)\n    * \u25ba August (1)\n    * \u25ba June (1)\n    * \u25ba May (1)\n    * \u25ba April (2)\n    * \u25ba March (5)\n\n  * \u25ba 2013 (5)\n\n    * \u25ba October (2)\n    * \u25ba July (1)\n    * \u25ba May (1)\n    * \u25ba April (1)\n\n  * \u25ba 2012 (14)\n\n    * \u25ba June (2)\n    * \u25ba May (1)\n    * \u25ba April (2)\n    * \u25ba March (7)\n    * \u25ba February (1)\n    * \u25ba January (1)\n\n  * \u25ba 2011 (41)\n\n    * \u25ba December (1)\n    * \u25ba November (3)\n    * \u25ba October (5)\n    * \u25ba September (2)\n    * \u25ba August (2)\n    * \u25ba July (2)\n    * \u25ba June (2)\n    * \u25ba May (5)\n    * \u25ba April (3)\n    * \u25ba March (7)\n    * \u25ba February (4)\n    * \u25ba January (5)\n\n  * \u25ba 2010 (46)\n\n    * \u25ba December (6)\n    * \u25ba November (7)\n    * \u25ba October (5)\n    * \u25ba September (6)\n    * \u25ba August (4)\n    * \u25ba July (5)\n    * \u25ba June (4)\n    * \u25ba May (4)\n    * \u25ba April (5)\n\nSimple theme. Powered by Blogger.\n\nDiese Website verwendet Cookies von Google, um Dienste anzubieten und Zugriffe\nzu analysieren. Deine IP-Adresse und dein User-Agent werden zusammen mit\nMesswerten zur Leistung und Sicherheit f\u00fcr Google freigegeben. So k\u00f6nnen\nNutzungsstatistiken generiert, Missbrauchsf\u00e4lle erkannt und behoben und die\nQualit\u00e4t des Dienstes gew\u00e4hrleistet werden.Weitere InformationenOk\n\n", "frontpage": false}
