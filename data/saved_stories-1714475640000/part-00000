{"aid": "40207452", "title": "Kvql: A SQL-like language on general KV databases", "url": "https://github.com/c4pt0r/kvql", "domain": "github.com/c4pt0r", "votes": 2, "user": "c4pt0r", "posted_at": "2024-04-30 05:12:07", "comments": 0, "source_title": "GitHub - c4pt0r/kvql: A SQL-like query language on general Key-Value DB", "source_text": "GitHub - c4pt0r/kvql: A SQL-like query language on general Key-Value DB\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nc4pt0r / kvql Public\n\n  * Notifications\n  * Fork 0\n  * Star 5\n\nA SQL-like query language on general Key-Value DB\n\n### License\n\nApache-2.0 license\n\n5 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# c4pt0r/kvql\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n3 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nc4pt0rMerge pull request #2 from c4pt0r/delete-stmtApr 30, 202422d1fe9 \u00b7 Apr\n30, 2024Apr 30, 2024\n\n## History\n\n13 Commits  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial commit| Apr 28, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Apr 28, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Merge branch 'master' into delete-stmt| Apr 30, 2024  \n  \n### aggr_func.go\n\n|\n\n### aggr_func.go\n\n| first commit| Apr 28, 2024  \n  \n### aggregate_plan.go\n\n|\n\n### aggregate_plan.go\n\n| first commit| Apr 28, 2024  \n  \n### checker.go\n\n|\n\n### checker.go\n\n| add put/remove| Apr 28, 2024  \n  \n### delete_plan.go\n\n|\n\n### delete_plan.go\n\n| Update readme and fix bug| Apr 30, 2024  \n  \n### errors.go\n\n|\n\n### errors.go\n\n| first commit| Apr 28, 2024  \n  \n### expression.go\n\n|\n\n### expression.go\n\n| Add and, or keyword| Apr 28, 2024  \n  \n### expression_exec.go\n\n|\n\n### expression_exec.go\n\n| Add and, or keyword| Apr 28, 2024  \n  \n### expression_exec_test.go\n\n|\n\n### expression_exec_test.go\n\n| Add batch put and batch delete method for KV interface| Apr 28, 2024  \n  \n### expression_exec_vec.go\n\n|\n\n### expression_exec_vec.go\n\n| Add and, or keyword| Apr 28, 2024  \n  \n### expression_optimizer.go\n\n|\n\n### expression_optimizer.go\n\n| first commit| Apr 28, 2024  \n  \n### expression_test.go\n\n|\n\n### expression_test.go\n\n| Add batch put and batch delete method for KV interface| Apr 28, 2024  \n  \n### filter_optimizer.go\n\n|\n\n### filter_optimizer.go\n\n| Add and, or keyword| Apr 28, 2024  \n  \n### filter_optimizer_test.go\n\n|\n\n### filter_optimizer_test.go\n\n| Add and, or keyword| Apr 28, 2024  \n  \n### func.go\n\n|\n\n### func.go\n\n| add put/remove| Apr 28, 2024  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| first commit| Apr 28, 2024  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| first commit| Apr 28, 2024  \n  \n### kv.go\n\n|\n\n### kv.go\n\n| Add batch put and batch delete method for KV interface| Apr 28, 2024  \n  \n### lexer.go\n\n|\n\n### lexer.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### lexer_test.go\n\n|\n\n### lexer_test.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### limit_plan.go\n\n|\n\n### limit_plan.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### optimizer.go\n\n|\n\n### optimizer.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### order_plan.go\n\n|\n\n### order_plan.go\n\n| first commit| Apr 28, 2024  \n  \n### parser.go\n\n|\n\n### parser.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### parser_fuzz_test.go\n\n|\n\n### parser_fuzz_test.go\n\n| first commit| Apr 28, 2024  \n  \n### parser_test.go\n\n|\n\n### parser_test.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### plan.go\n\n|\n\n### plan.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### projection_plan.go\n\n|\n\n### projection_plan.go\n\n| first commit| Apr 28, 2024  \n  \n### put_plan.go\n\n|\n\n### put_plan.go\n\n| Add batch put and batch delete method for KV interface| Apr 28, 2024  \n  \n### remove_plan.go\n\n|\n\n### remove_plan.go\n\n| Add batch put and batch delete method for KV interface| Apr 28, 2024  \n  \n### scalar_func.go\n\n|\n\n### scalar_func.go\n\n| add put/remove| Apr 28, 2024  \n  \n### scalar_func_vec.go\n\n|\n\n### scalar_func_vec.go\n\n| add put/remove| Apr 28, 2024  \n  \n### scan_plan.go\n\n|\n\n### scan_plan.go\n\n| first commit| Apr 28, 2024  \n  \n### spec.md\n\n|\n\n### spec.md\n\n| add put/remove| Apr 28, 2024  \n  \n### statement.go\n\n|\n\n### statement.go\n\n| Add delete statement support| Apr 30, 2024  \n  \n### utils.go\n\n|\n\n### utils.go\n\n| add put/remove| Apr 28, 2024  \n  \n## Repository files navigation\n\n# kvql\n\nA SQL-like query language on general Key-Value DB\n\n## Syntax\n\nBasic Types:\n\n    \n    \n    Number: number such as integer or float String: string around by ', \", \\`, Boolean: true or false\n\nSelect Statement:\n\n    \n    \n    SelectStmt ::= \"SELECT\" Fields \"WHERE\" WhereConditions (\"ORDER\" \"BY\" OrderByFields)? (\"GROUP\" \"BY\" GroupByFields)? (\"LIMIT\" LimitParameter)? Fields ::= Field (, Field)* | \"*\" Field ::= Expression (\"AS\" FieldName)? FieldName ::= String OrderByFields ::= OrderByField (, OrderByField)* OrderByField ::= FieldName (\"ASC\" | \"DESC\")* GroupByFields ::= FieldName (, FieldName)* LimitParameter ::= Number \",\" Number | Number WhereConditions ::= \"!\"? Expression Expression ::= \"(\"? BinaryExpression | UnaryExpression \")\"? UnaryExpression ::= KeyValueField | String | Number | Boolean | FunctionCall BinaryExpression ::= Expression Operator Expression | Expression \"BETWEEN\" Expression \"AND\" Expression | Expression \"IN\" \"(\" Expression (, Expression)* \")\" | Expression \"IN\" FunctionCall Operator ::= MathOperator | CompareOperator | AndOrOperator AndOrOperator ::= \"&\" | \"|\" | \"AND\" | \"OR\" MathOperator ::= \"+\" | \"-\" | \"*\" | \"/\" CompareOperator ::= \"=\" | \"!=\" | \"^=\" | \"~=\" | \">\" | \">=\" | \"<\" | \"<=\" KeyValueField ::= \"KEY\" | \"VALUE\" FunctionCall ::= FunctionName \"(\" FunctionArgs \")\" | FunctionName \"(\" FunctionArgs \")\" FieldAccessExpression* FunctionName ::= String FunctionArgs ::= FunctionArg (\",\" FunctionArg)* FunctionArg ::= Expression FieldAccessExpression ::= \"[\" String \"]\" | \"[\" Number \"]\"\n\nPut Statement:\n\n    \n    \n    PutStmt ::= \"PUT\" KVPair (, KVPair)* KVPair ::= \"(\" Expression, Expression \")\"\n\nRemove Statement:\n\n    \n    \n    RemoveStmt ::= \"REMOVE\" Expression (, Expression)*\n\nDelete Statement:\n\n    \n    \n    DeleteStmt ::= \"DELETE\" \"WHERE\" WhereConditions (\"LIMIT\" LimitParameter)?\n\nFeatures:\n\n  1. Scan ranger optimize: EmptyResult, PrefixScan, RangeScan, MultiGet\n  2. Plan support Volcano model and Batch model\n  3. Expression constant folding\n  4. Support scalar function and aggregate function\n  5. Support hash aggregate plan\n  6. Support JSON and field access expression\n\n## Examples:\n\n    \n    \n    # Simple query, get all the key-value pairs with key prefix 'k' select * where key ^= 'k' # Projection and complex condition select key, int(value) + 1 where key in ('k1', 'k2', 'k3') & is_int(value) # Aggregation query select count(1), sum(int(value)) as sum, substr(key, 0, 2) as kprefix where key between 'k' and 'l' group by kprefix order by sum desc # JSON access select key, json(value)['x']['y'] where key ^= 'k' & int(json(value)['test']) >= 1 select key, json(value)['list'][1] where key ^= 'k' # Filter by field name defined in select statement select key, int(value) as f1 where f1 > 10 select key, split(value) as f1 where 'a' in f1 select key, value, l2_distance(list(1,2,3,4), json(value)) as l2_dis where key ^= 'embedding_json' & l2_dis > 0.6 order by l2_dis desc limit 5 # Put data put ('k1', 'v1'), ('k2', upper('v' + key)) # Remove data remove 'k1', 'k2' # Delete data by filter and limit delete rows delete where key ^= 'prefix' and value ~= '^val_' limit 10\n\n## How to use this library\n\nFirst implements interfaces defined in kv.go:\n\n    \n    \n    type Txn interface { Get(key []byte) (value []byte, err error) Put(key []byte, value []byte) error BatchPut(kvs []KVPair) error Delete(key []byte) error BatchDelete(keys [][]byte) error Cursor() (cursor Cursor, err error) } type Cursor interface { Seek(prefix []byte) error Next() (key []byte, value []byte, err error) }\n\nThen execute query:\n\n    \n    \n    var ( query string = \"select * where key ^= 'k'\" txn kvql.Txn = buildClientTxn() ) optimizer := kvql.NewOptimizer(query) plan, err := opt.BuildPlan(txn) if err != nil { fatal(err) } execCtx := kvql.NewExecuteCtx() for { rows, err := plan.Batch(execCtx) if err != nil { fatal(err) } if len(rows) == 0 { break } execCtx.Clear() for _, cols := range rows { // Process columns... } }\n\n## About\n\nA SQL-like query language on general Key-Value DB\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\n### Stars\n\n5 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * c4pt0r dongxu\n  * blacktear23 Rain Li\n\n## Languages\n\n  * Go 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
