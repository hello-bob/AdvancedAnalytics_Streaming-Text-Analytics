{"aid": "40235682", "title": "Show HN: Hatch v1.10.0 \u2013 UV support, new test command and built-in script runner", "url": "https://hatch.pypa.io/1.10/blog/2024/05/02/hatch-v1100/", "domain": "pypa.io", "votes": 1, "user": "ofek", "posted_at": "2024-05-02 13:01:03", "comments": 0, "source_title": "Hatch v1.10.0 - Hatch", "source_text": "Hatch v1.10.0 - Hatch\n\nSkip to content\n\n# Hatch v1.10.0\u00b6\n\nHatch v1.10.0 brings a test command, support for UV, and a Python script\nrunner.\n\n## Test command\u00b6\n\nThe new test command allows you to easily run tests for your project on\nmultiple versions of Python. The default behavior follows best practices,\nusing pytest with select plugins for test execution and coverage.py for code\ncoverage measurement.\n\nThe command is designed to be both simple to use while also satisfying the\nneeds of most projects. For example, the following shows Hatch running tests\nfor Jinja in all environments in the default matrix:\n\nHere is us testing Rich, with a bit of configuration:\n\nSee the tutorial for a detailed walk-through and the config reference for\noptions.\n\n## UV\u00b6\n\nThe package installer UV, brought to you by the same folks behind Ruff, is now\nsupported. In any environment, you can set the installer option to uv to use\nUV in place of virtualenv & pip for virtual environment creation and\ndependency management, respectively. This often results in a significant\nperformance benefit.\n\nFor example, if you wanted to enable this functionality for the default\nenvironment, you could set the following:\n\n    \n    \n    [tool.hatch.envs.default] installer = \"uv\"\n    \n    \n    [envs.default] installer = \"uv\"\n\nSemi-internal environments like those used for testing and static analysis\nhave this enabled by default.\n\nSee the how-to guide for more information about switching the installer.\n\n## Python script runner\u00b6\n\nThe run command now supports executing Python scripts with inline metadata as\nstandardized by PEP 723.\n\nAs an example, consider the following script:\n\n    \n    \n    # /// script # requires-python = \">=3.11\" # dependencies = [ # \"httpx\", # \"rich\", # ] # /// import httpx from rich.pretty import pprint resp = httpx.get(\"https://peps.python.org/api/peps.json\") data = resp.json() pprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n\nIf you run the script for the first time as follows:\n\n    \n    \n    hatch run script.py\n\nHatch will create a dedicated environment for that script using a version of\nPython greater than or equal to 3.11 with dependencies httpx and rich.\n\nSee the how-to guide for more information.\n\n## Static analysis\u00b6\n\nThe environment used for static analysis is now completely configurable such\nthat you can fully alter the underlying behavior of the fmt command (see the\nhow-to).\n\nAdditionally, Ruff has been updated to version 1.4.0 and the rules selected by\ndefault have been updated accordingly. Check out their blog post about how the\nnew hand-written parser has made it twice as fast!\n\n## Community highlights\u00b6\n\n### Visual Studio Code\u00b6\n\nVisual Studio Code announced support for Hatch environments in their latest\nrelease. This means that you can now easily discover and select Hatch\nenvironments for your projects directly from the editor.\n\nSee the how-to guide for detailed instructions.\n\n### CMake build plugin\u00b6\n\nA new release of the extension module builder scikit-build-core has introduced\na build plugin for Hatchling. This means that you can use Hatchling as your\nbuild backend while also shipping extension modules built with CMake.\n\nTo get started, add the dependency to your build requirements:\n\n    \n    \n    [build-system] requires = [\"hatchling>=1.24.2\", \"scikit-build-core~=0.9.3\"] build-backend = \"hatchling.build\"\n\nThen explicitly enable the experimental option (acknowledging that the plugin\nwill move to a dedicated package in the future):\n\n    \n    \n    [tool.hatch.build.targets.wheel.hooks.scikit-build] experimental = true\n    \n    \n    [build.targets.wheel.hooks.scikit-build] experimental = true\n\nAt this point, you can create your CMakeLists.txt file as usual and start\nbuilding your extension modules with CMake! Check out the dedicated example\nproject for a complete demonstration.\n\n## Meta\u00b6\n\n### Docs\u00b6\n\nThe efforts toward documentation improvements have increased substantially and\nthe priorities have shifted. From now on expect to see far more tutorials and\nhow-to guides rather than just reference material.\n\n### Future\u00b6\n\nUpcoming features include:\n\n  * workspaces functionality similar to Cargo\n  * commands to manage dependencies\n  * Windows release artifacts signed by the PSF (just like macOS)\n  * performance improvements for both the CLI and the Hatchling build system\n\n### Support\u00b6\n\nIf you or your organization finds value in what Hatch provides, consider a\nsponsorship to assist with maintenance and more rapid development!\n\nGitHub\n\nCopyright \u00a9 Ofek Lev 2017-present\n\nLogo by DALL\u00b7E and Boris Crowther\n\nMade with Material for MkDocs\n\n", "frontpage": false}
