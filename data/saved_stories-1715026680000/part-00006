{"aid": "40274640", "title": "Naming Things", "url": "https://the418.substack.com/p/naming-things", "domain": "the418.substack.com", "votes": 1, "user": "shayneo", "posted_at": "2024-05-06 13:48:47", "comments": 0, "source_title": "Naming Things", "source_text": "Naming Things - by Shayne O\u2019Sullivan - The 418\n\n# The 418\n\nShare this post\n\n#### Naming Things\n\nthe418.substack.com\n\n#### Discover more from The 418\n\nI'm a teapot. Thoughts on software engineering, startups, and making things. \ud83e\uded6\n\nContinue reading\n\nSign in\n\n# Naming Things\n\n### Observations, opinions, and suggestions for better naming in code.\n\nShayne O\u2019Sullivan\n\nMay 06, 2024\n\n1\n\nShare this post\n\n#### Naming Things\n\nthe418.substack.com\n\nShare\n\nFew professions rival programming when it comes to the frequency at which we\nare tasked with naming things. We name things so often that it is common for\nthe prevailing sentiment within a team to devolve into something like \u201cnaming\nthings is hard, so just pick something and move on\u201d. I reject this.\n\nNaming things is hard because it is important. Our packages / classes /\nfunctions / methods / variables / etc become the API of our shared tool belt.\nGood names keep our work shop orderly, and help us catalog which resources we\nhave at our disposal.\n\nThanks for reading The 418! Subscribe for free to receive new posts and\nsupport my work.\n\nMy favorite engineers to work with are the ones that strike a mythical balance\nof context, conventions, style, and humor in their naming of things. They\nunderstand that authoring code gives them the very special power of\ncontrolling what flows from their colleagues fingertips (sort of like the kids\nbook my son enjoys, where the characters figure out that they can get the\n\u201creader\u201d to say whatever they want).\n\nFrom \u201cWe Are in a Book!\u201d by Mo Williams\n\nThis is an intimate power. The \u201clanguage\u201d of our codebase changes how we\nreason about the code we write. The same way that the language we use in\nsociety shapes our collective thinking about issues.\n\nThat said, here is a list of attributes that I think are common to well named\nthings.\n\n  * They are \u201cSEO\u201d friendly\n\n  * They lean into convention\n\n  * They prefer terseness without sacrificing meaning\n\n  * They are considerate of collisions\n\n  * They are guessable\n\n  * They make you smile from time to time\n\nI\u2019ll expound on these below.\n\n##\n\n\u201cSEO\u201d Friendly\n\nBig code bases, with lots of contributors get searched. Most engineers,\nespecially in established projects, will default to using what\u2019s there\nalready. Common tasks like authentication, authorization, error handling,\nlogging, etc should have very obvious and highly searchable names. For\nexample, \u201cauth.DecodeJWT(...)\u201d would be a solid name for a function in the\n\u201cauth\u201d package that handles the decoding of JWTs. Whereas\n\u201chelpers.Validate(jwt)\u201d misses the mark.\n\n##\n\nLeaning Into Convention\n\nGood convention is really powerful and might be the highest leverage tactic\nfor naming things. I\u2019ve worked in a big mono-repo that adopted a fun\nconvention of adding an \u201c-y\u201d suffix to core utility libraries. Think \u201cstringy\u201d\nfor string helper functions, \u201ctimey\u201d for date/time stuff, or \u201crandy\u201d for...\nyou guessed it, randomness utils.\n\nThis had a few benefits:\n\n  * It made naming new packages a non-thought\n\n  * It increased readability, as util funcs were name-spaced with the obvious convention\n\n  * Utility code discovery was easy, just look for the appropriate \u201c-y\u201d lib\n\n  * Gaps in utilities were obvious (no \u201c-y\u201d for the category you wanted? time to add one!)\n\n##\n\nTerse, but Meaningful\n\nLong names are well intentioned, but often un-helpful. For example, if you are\nmaking a SaaS app for veterinary clinics, you probably don\u2019t want a bunch of\nfunctions like:\n\n  * \u201cCreateNewVeterinarian\u201d\n\n  * \u201cDeleteVeterinarian\u201d\n\n  * \u201cUpdateVeterinarianContactDetails\u201d\n\nThese convey plenty of meaning, but there is a lot of extra over-head when it\ncomes to typing and line length that we can 86. The better way would be:\n\n  * \u201cCreateVet\u201d\n\n  * \u201cDeleteVet\u201d\n\n  * \u201cUpdateVetContact\u201d\n\nThat\u2019s easier on the eyes, the fingers, and the line wrap :)\n\n##\n\nConsiderate of Collisions\n\nNames should lend themselves to being considerate of their caller\u2019s context.\nFor example, maybe you have a database library that exposes a \u201creset\u201d\nfunction. If the reset function is always chained to the package name, or a\nmethod on some other class/structure, than I\u2019ve got no beef. But, if it\u2019s a\nstand alone function call, like in this pseudo javascript code...\n\n####\n\nInconsiderate Version \ud83d\ude3f\n\n    \n    \n    import { reset } from '../lib/db' const cool = () => { reset() }\n\nThis is inconsiderate. The \u201creset\u201d call on it\u2019s own gives no hint that it\u2019s\nrelated to the db, and once our \u201ccool\u201d function does some more work, this code\nwill be harder to read and eventually might even run into a collision scenario\nwhere there is some more locally scoped \u201creset\u201d logic that we want to run.\nYikes!\n\n####\n\nConsiderate Version \ud83d\ude0e\n\n    \n    \n    import { resetStore } from '../lib/db' const cool = () => { resetStore() }\n\nThis is a considerate function name. No matter how verbose the \u201ccool\u201d function\ngets, we know that \u201cresetStore\u201d is resetting a data store, not something else.\n\n##\n\nGuessable\n\nThe best names are guessable. Convention helps a lot here, but also, so does\nlogical code division and function implementation.\n\nLet\u2019s consider a \u201cUser\u201d class with a handful of methods that send various\nemails to the user. You want your code to look something like:\n\n    \n    \n    // this is cool \u2705 user.SendPasswordResetEmail() user.SendVerificationEmail() user.SendNewDeviceEmail()\n\nvs\n\n    \n    \n    // not so much \u274c user.SendPasswordResetEmail() user.Verify() user.NotifyForNewDevice()\n\nThe problem here is not the method names themselves, but the fact that they\nare wildly inconsistent.\n\n##\n\nSmile!\n\nRemember, our code gets compiled and interpreted by computers, but it gets\nread by other programmers. With that in mind, you should inject some sunshine\ninto your naming when appropriate.\n\nI once wrote a method for presenting a \u201cToast\u201d in a web UI called \u201cxplode\u201d.\nCalling\n\n    \n    \n    const toast = new Toast() toast.xplode()\n\nWould render the toast in it\u2019s \u201csomething went very wrong and we have no\nbetter options\u201d state.\n\nThis name doesn\u2019t exactly follow the guard rails I\u2019ve laid out... it\u2019s not\nvery SEO friendly, doesn\u2019t follow any hard conventions, and yet... it somehow\nfits the bill, and stuck in the minds of the team. It had some soul, and\ndescribed what it did poignantly.\n\nThanks for reading The 418! Subscribe for free to receive new posts and\nsupport my work.\n\n1 Like\n\n\u00b7\n\n2 Restacks\n\n1\n\nShare this post\n\n#### Naming Things\n\nthe418.substack.com\n\nShare\n\nComments\n\nLovable work emails\n\nThe email you give your employee is an omnipresent signal.\n\nMay 1 \u2022\n\nShayne O\u2019Sullivan\n\n1\n\nShare this post\n\n#### Lovable work emails\n\nthe418.substack.com\n\nReady for more?\n\n\u00a9 2024 Shayne O\u2019Sullivan\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
