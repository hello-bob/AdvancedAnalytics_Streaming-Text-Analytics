{"aid": "40221071", "title": "Detect JavaScript Support in CSS", "url": "https://ryanmulligan.dev/blog/detect-js-support-in-css/", "domain": "ryanmulligan.dev", "votes": 2, "user": "skilled", "posted_at": "2024-05-01 09:15:56", "comments": 0, "source_title": "Detect JavaScript Support in CSS", "source_text": "Detect JavaScript Support in CSS\n\n# Detect JavaScript Support in CSS\n\nPosted on April 20, 2024\n\nTakes about 6 minutes to read\n\nI had been aware of the scripting CSS media feature but I was still under the\nimpression that cross-browser support was lacking. What a pleasant surprise to\ndiscover that it has been available in all modern browsers as of December 2023\naccording to caniuse.com. With this feature, we can provide alternative CSS\nrules depending on whether or not JavaScript is available in the user's\nbrowser. It can also help reduce flashes of unstyled content or undesirable\nlayout shifts.\n\nBefore we dive in: As exciting as this feature is, I've learned that there are\na couple unfortunate gotchas. I've amended the article with an issues section\nbelow.\n\n## Usage\n\nWe can progressively enhance our styles:\n\n    \n    \n    @media (scripting: enabled) { .my-element { /* enhanced styles if JS is available */ } }\n\nOr we can gracefully fall back to some alternate styles:\n\n    \n    \n    @media (scripting: none) { .my-element { /* fallback styles when JS is not supported */ } }\n\nThere's also an initial-only value, which is for scripting that is enabled\nduring page load but not after. The Media Queries Level 5 W3C Working Draft\nincludes a couple cases where it can be useful.\n\n> Examples are printed pages, or pre-rendering network proxies that render a\n> page on a server and send a nearly-static version of the page to the user.\n\nI don't personally imagine using initial-only much, if ever. Although, I'd be\ninterested to find more specific examples of it in practice.\n\n## The time before the query\n\nBefore this feature, one approach for detecting JavaScript support was by\nsetting a custom selector on the opening html tag\u2014a common one seen in the\nwild is the no-js class name. If JavaScript is supported and enabled, it\nremoves that selector just prior to rendering page content. When JavaScript is\ndisabled, we can supply alternative styles that adapt to the experience.\n\n    \n    \n    <html class=\"no-js\"> <!-- page content --> </html>\n    \n    \n    .no-js .my-element { /* styles when JS is disabled */ }\n\n## Is this real life?\n\nImagine a new web campaign is on the cusp of going live and it's time to\nconnect with all the key stakeholders. Everything looks great, most of the\nteam satisfied with the result, but then suddenly some hip marketer in the\nmeeting emphatically requests a complex intro animation on the hero component\nwhen the page loads. They gesture wildly as they ask for the main headline to\nfade in, shrink away as if it were being pulled back on a sling shot, and\nthen... at this point they make an explosion noise with their mouth. \"Make it\npop!\" they decree a mere 24 hours before launch.\n\nWoof. Better get started.\n\nTo handle the complexity of this work, we might reach for an animation library\nsuch as GSAP. But what does the user see when JavaScript is not available, not\nto mention if a user's prefers reduced motion setting is enabled? We'll need\nto consider an alternate version of the hero without all that swooping and\nscaling.\n\nThis media query unlocks the ability to provide CSS rules that are a better\nfit to the user's experience. In the CodePen demo below, if we disable\nJavaScript, we'll find that the animation is skipped and the static headline\nis displayed.\n\n## Watch that flash\n\nTo really make the intro animation feel smooth on page load, the demo relies\non the scripting media query to hide the headline with CSS. By doing so, we\nwon't catch a flash of unstyled text before the GSAP animation is loaded.\nAlso, we only want to hide the headline if JavaScript is available, otherwise\nit would be hidden for users when it's disabled.\n\nIn the following video, watch what happens when the headline is not hidden on\npage load. The text flashing is even more glaring when throttling on a slower\nnetwork.\n\nIn the video, the headline is no longer hidden on page load to share that\npesky flash of unstyled text. When emulating slower network speeds, the issue\nbecomes even more egregious.\n\n## Combining queries\n\nIn the CSS tab of the demo, notice that the media queries are combined to\ncheck both scripting and reduced-motion conditions.\n\n    \n    \n    @media (scripting: enabled) and (prefers-reduced-motion: no-preference) { /* JS available and motion OK */ } @media (scripting: none), (prefers-reduced-motion) { /* JS disabled or reduced motion enabled */ }\n\nEach condition can surely have exclusive styles if the desired outcome calls\nfor it, but it's nice that we can combine them where there's overlap in\nrulesets.\n\n## Issues\n\nUpdated on April 21st, 2024 - After publishing this post, some feedback\nsurfaced explaining where this media feature unexpectedly fails.\n\n  1. It does not behave as anticipated when a browser extension such as NoScript or uBlock Origin is used to disable page scripts. scripting: enabled still matches even though the extension has JavaScript turned off.\n  2. If a script gets blocked or fails to load, a fallback would need to be handled via JavaScript. In the demo above, the fallback would need to tap into the demo's scripting: none media query ruleset so that the static version of the hero is displayed.\n\nTremendous thanks to Sara, \u0160ime, and Vadim for sharing!\n\n## Helpful resources\n\n  * CSS Media Query for Scripting Support\n  * New on the web: How to detect disabled JavaScript in CSS\n  * Day 106: the scripting media feature\n\nBack to all blog posts\n\n\u00a9 Ryan Mulligan from day one to this magic moment in 2024\n\nAssembled with a boundless affinity for the web\n\n  * Home\n  * Blog\n  * RSS\n  * Blogroll\n  * Report an issue\n\n", "frontpage": false}
