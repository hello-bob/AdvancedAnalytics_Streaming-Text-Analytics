{"aid": "40168445", "title": "Sonic: Talos's low-latency Go asynchronous networking library for trading", "url": "https://www.talos.com/insights/talos-goes-sonic", "domain": "talos.com", "votes": 3, "user": "sergiu128", "posted_at": "2024-04-26 12:16:17", "comments": 0, "source_title": "Talos built Sonic to reduce the time it takes to read and write data from the network with minimal latency", "source_text": "Talos built Sonic to reduce the time it takes to read and write data from the\nnetwork with minimal latency\n\nAnalysis\n\nResearch\n\nRequest a demo\n\nOur Solutions\n\nAbout Talos\n\nWorking at Talos\n\nProvider Network\n\nInsights\n\nEvents\n\nContact\n\nRequest a demo\n\nBy clicking 'accept all cookies', you agree to the storing of optional cookies\non your device to enhance site navigation, analyze site usage, and assist in\nour marketing efforts. If you wish to adjust your cookie settings, please\nclick 'customize cookies'. View our Privacy Policy for more information\n\nDeny all cookiesAccept all cookiesCustomize cookies\n\nBack to Insights\n\nAnalysis\n\n# Talos Goes Sonic\n\nBy:\n\nSergiu Marin, Ethan Feldman and Ryan McCloskey\n\nApril 26, 2024\n\nEmail icon\n\nTwitter icon\n\nLinkedin icon\n\nWe purpose-built Sonic to reduce the time it takes to read and write data from\nthe network with minimal latency. Compared to Go\u2019s standard net package, Sonic\nachieves 5x to 50x lower latency on average to process incoming data from the\nnetwork. Furthermore, Sonic gives us the control to ensure double-digit\nmicrosecond latency for our gateways. Today, we\u2019re announcing that we\u2019re open-\nsourcing the project.\n\nBack to Insights\n\nAnalysis\n\n## Talos Goes Sonic\n\nBy:\n\nSergiu Marin, Ethan Feldman and Ryan McCloskey\n\nApril 26, 2024\n\nEmail icon\n\nTwitter icon\n\nLinkedin icon\n\n## Introduction\n\nWe purpose-built Sonic to reduce the time it takes to read and write data from\nthe network with minimal latency. Compared to Go\u2019s standard net package, Sonic\nachieves 5x to 50x lower latency on average to process incoming data from the\nnetwork. Furthermore, Sonic gives us the control to ensure double-digit\nmicrosecond latency for our gateways. Today, we\u2019re announcing that we\u2019re open-\nsourcing the project.\n\nAt Talos, we're building the best trading platform to help institutions trade\ncrypto and digital assets. A benchmark for our platform's performance is\nminimizing slippage \u2014 the difference between the expected and actual execution\nprice.\n\nOne way to reduce slippage is to reduce tick-to-trade latency, which is the\ntime between receiving an order book update (\u201ctick\u201d) and sending a\ncorresponding trading decision to the exchange (\u201ctrade\u201d). While many factors\ncontribute to tick-to-trade latency \u2013 geographic location, OS tuning, and\napplication logic \u2013 an efficient networking library is key.\n\n#### What is Sonic?\n\nSonic is a Go library for asynchronous network and I/O programming that allows\ndevelopers to handle multiple file descriptors (such as sockets)\nasynchronously, in the same goroutine. It is fully event-driven and based on\nthe Proactor model \u2013 a client specifies that it wants to read/write\nasynchronously and provides a callback to Sonic which is invoked when the\nread/write operation completes.\n\n#### Why we created Sonic\n\nThe idea for Sonic arose from the need to ensure an upper bound to the time\nrequired to read+decode/write+encode data from trading venues. The first\nversion of Talos's exchange connectivity was written with Go\u2019s standard net\npackage. While the Go concurrency model is perfect for the general use case,\nin the realm of trading, we want to have full control over our runtime. Sonic\nis superior to the Go net package on the following dimensions:\n\n  * Goroutines and concurrent data handling: In standard Go, concurrently reading/writing data must be done using goroutines. While they are lightweight in general, they do not provide optimal latency in tail cases, as each concurrent operation may run in parallel with another operation. There is no control over the underlying thread model. Furthermore, using goroutines means using synchronization primitives that limit us in terms of optimizations. With Sonic, we can have several connections read into the same buffer without using any synchronization primitives, like a mutex.\n  * Thread control and performance: While we can control the number of parallel threads through GOMAXPROCS, we needed something more granular. We use goroutines for non-latency-sensitive parts of the code that are mostly compute-bound, but we need Sonic for the latency-sensitive, mostly IO-bound parts. With Sonic, we can pin the gateway thread to an isolated core and have it busy-wait for data to minimize context switches, which is not easily achievable with Go\u2019s standard net package.\n  * Full support for UDP Multicast: Some gateways deliver data through multiple UDP Multicast feeds and TCP connections in a custom binary format. Sonic fully supports UDP Multicast with source IP filtering, and several variants of ring buffers to efficiently handle multiple UDP multicast feeds in a single thread.\n\n#### How Sonic improves latency\n\nWe ran an experiment to simulate receiving data from an exchange to assess\nSonic's latency improvements compared to Go's standard networking libraries.\n\nA Rust TCP server sends messages over several connections at a set rate: 10Hz,\n100Hz, and 1000Hz. The rate applies to each connection in part. Each message\nis 1024 bytes. Just before sending a message, the Rust server takes a\ntimestamp and places it in the message. The send is immediate and does not\nblock. The server is asynchronous, single-threaded, and runs on an isolated\ncore without kernel interrupts\n\nWe have two TCP clients connecting to the server: one using Sonic and the\nother using Go's standard networking libraries. Each client establishes\nseveral connections with the server and starts reading 1024-byte messages.\nAfter each read on a connection, we take a new timestamp and subtract from it\nthe timestamp from the read message. We then plot the resulting difference in\nmicroseconds. (See Figure 1.). Both clients and the server run on the same\nhost, on a tickless kernel. The Sonic client runs on an isolated core, while\nthe Go/net client runs on 3 cores. None of the cores handle any kernel\ninterrupts.\n\n^Figure 1: Message Latency of Sonic vs. Go/net at Different Messaging Rates ^\nThe maximum time taken for a Sonic and goroutine-based standard Go/net client\nto read a message over a different number of connections. A server writes a\n1024-byte TCP message with time t1 at a set rate (10Hz, 100Hz, and 1000Hz).\nEach connection from the two clients reads the message from the socket and\nthen takes the timestamp t2. We plot the maximum (t2 - t1) for each set of\nconnections in microseconds.\n\nThe results show that using Sonic allows us to maintain consistent maximum\nlatencies when receiving messages from an exchange. In contrast, the standard\nGo/net client shows variable latencies that peaked at over 2.5ms as the number\nof connections increased. Meanwhile, the Sonic client consistently delivered\nlatencies below 100 microseconds regardless of the number of connections.\n\nSonic addresses key challenges in high-performance network communication,\nmaking it a superior solution for Talos and exchange gateway applications.\n\n#### Find out more\n\nTo find out more about Sonic, visit: https://github.com/talostrading/sonic. We\nare currently looking for users and contributors as we work towards sonic\nv1.0.0!\n\nVisit GitHub\n\n## Latest insights and research\n\nApril 26, 2024\n\nAnalysis\n\nTalos Goes Sonic\n\nWe purpose-built Sonic to reduce the time it takes to read and write data from\nthe network with minimal latency. Compared to Go\u2019s standard net package, Sonic\nachieves 5x to 50x lower latency on average to process incoming data from the\nnetwork. Furthermore, Sonic gives us the control to ensure double-digit\nmicrosecond latency for our gateways. Today, we\u2019re announcing that we\u2019re open-\nsourcing the project.\n\nWritten by:\n\nSergiu Marin, Ethan Feldman and Ryan McCloskey\n\n7 minute read\n\nApril 25, 2024\n\nCommentary\n\nWestern ETFs Wane, Eastern Kindle Flame, BTC's Scarcity Enters a New Lane\n\nWeek in Review\n\nWritten by:\n\nNeelabh Dixit, Commercial Product Manager - Derivatives\n\n7 minute read\n\nApril 23, 2024\n\nNews\n\nTalos Accelerates Expansion of its Portfolio Management System with\nAcquisition of Cloudwall\n\nAcquisition Bolsters Talos\u2019s Capabilities with Sophisticated Risk Management\nTechnology Critical for Institutional Adoption of Digital Assets\n\nWritten by:\n\n3 minute read\n\nView all our latest insights\n\n## Request a demo\n\nRequest a demo\n\nFind out how Talos can simplify the way you interact with the digital asset\nmarkets.\n\nTrading\n\nAnalytics\n\nPortfolio ENGINEERING\n\nTreasury & Settlement\n\nWHITE LABEL\n\nLending Marketplace\n\nlink to homepage\n\nKeep up-to-date with Talos news\n\nSolutions\n\nTrading\n\nAnalytics\n\nPortfolio Engineering\n\nTreasury & Settlement\n\nWhite Label\n\nLending Marketplace\n\nCompany\n\nWhy Talos\n\nTalos Story\n\nMeet the Team\n\nWorking at Talos\n\nOpen Roles\n\nLife at Talos\n\nContact us\n\nResources\n\nInsights\n\nEvents\n\nProvider Network\n\nLegal\n\nTerms\n\nPrivacy\n\nData Processing Addendums\n\nFAQs\n\nEmployee Privacy Notice\n\n\u00a9 2023 Talos Global, Inc.\n\nlink to linkedin\n\nlink to Twitter\n\nlink to YouTube\n\nTalos Global, Inc. and its affiliates (\u201cTalos\u201d) offer software as a service\nproducts that provide connectivity tools for institutional customers. Talos\ndoes not provide clients with any pre-negotiated arrangements with liquidity\nproviders or other parties. Clients are required to independently negotiate\narrangements with liquidity providers and other parties bilaterally. Talos is\nnot party to any of these arrangements.\n\nIn respect of recipients resident in the UK, this communication is aimed\nsolely at high-net worth companies, associations and trusts (as defined in\nArticle 49 of the Financial Services and Markets Act 2000 (Financial\nPromotion) Order 2005). These are any of the following: (i) a body corporate\nwhich has (or a body corporate which is in the same corporate group as a body\ncorporate which has) either net assets or called-up share capital of at least\n\u00a35m (or, if the body corporate has more than 20 members, \u00a3500,000); (ii) a\npartnership or unincorporated association with net assets of at least \u00a35\nmillion and (iii) a trustee of a trust which has had gross assets (i.e. total\nassets held before deduction of any liabilities) of at least \u00a310 million at\nany time within the year preceding the date of this communication The services\ndescribed within this communication are only available to said persons. Any\nother persons resident in the UK must not rely or act upon this communication.\n\nAll Talos product images and simulations presented are for informational and\ndemonstrative purposes only. Not all features may be available to all Talos\ncustomers.\n\n", "frontpage": false}
