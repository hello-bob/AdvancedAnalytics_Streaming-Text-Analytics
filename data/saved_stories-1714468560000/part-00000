{"aid": "40206867", "title": "CDC: Technical Highly Pathogenic Avian Influenza A(H5N1) Viruses", "url": "https://www.cdc.gov/flu/avianflu/spotlights/2023-2024/h5n1-technical-report_april-2024.htm", "domain": "cdc.gov", "votes": 1, "user": "donsupreme", "posted_at": "2024-04-30 03:14:22", "comments": 0, "source_title": "Technical Report: Highly Pathogenic Avian Influenza A(H5N1) Viruses | Avian Influenza (Flu)", "source_text": "Technical Report: Highly Pathogenic Avian Influenza A(H5N1) Viruses | Avian Influenza (Flu)\n\nSkip directly to site content Skip directly to search\n\nEspa\u00f1ol | Other Languages\n\nInfluenza (Flu)\n\nCenters for Disease Control and Prevention. CDC twenty four seven. Saving\nLives, Protecting People\n\nInfluenza (Flu)\n\nInfluenza (Flu) Home\n\n# Technical Report: Highly Pathogenic Avian Influenza A(H5N1) Viruses\n\nTechnical Report: Highly Pathogenic Avian Influenza A(H5N1) Viruses | Avian Influenza (Flu)\n\nEspa\u00f1ol | Other Languages\n\nPrint\n\nUpdated April 26, 2024\n\nRelated Pages\n\nThis report provides an update to the December 29, 2023, report to include\nseven new human cases (5 in Cambodia, 1 in the United States and 1 in Vietnam)\nand recent activity in wild birds, poultry and other animals, including the\nmulti-state veterinary outbreak in U.S. dairy cattle, and updated information\non monitoring for H5N1 virus infections in the United States. Even given these\nupdates, CDC believes the overall risk to human health associated with the\nongoing outbreaks of highly pathogenic avian influenza A(H5N1) viruses has not\nchanged and remains low to the U.S. general public at this time.\n\n## Executive summary\n\nA small number of sporadic human cases of highly pathogenic avian influenza\n(HPAI) A(H5N1) have been identified worldwide since 2022, amidst a panzootic\nof these viruses in wild birds and poultry. Nearly all human cases reported\nglobally since 2022 were associated with poultry exposures, and no cases of\nhuman-to-human transmission of HPAI A(H5N1) virus have been identified. One\nhuman case of HPAI A(H5N1) virus infection in a farm worker reported in April\n2024 in the United States and was attributed to exposure to presumptively\ninfected dairy cattle. One previous human case was reported in the United\nStates in 2022. In a few cases, the source of exposure to HPAI A(H5N1) virus\nhas been unknown. To date, HPAI A(H5N1) viruses currently circulating most\ncommonly in birds and poultry, with spillover to mammals and humans do not\nhave the ability to easily bind to receptors that predominate in the human\nupper respiratory tract. This is a major reason why the current risk to the\npublic from HPAI A(H5N1) viruses remains low. However, because of the\npotential for influenza viruses to rapidly evolve and the wide global\nprevalence of HPAI A(H5N1) viruses in wild birds and poultry outbreaks and\nfollowing the identification and spread among dairy cattle in the United\nStates, additional sporadic human infections are anticipated. Continued\ncomprehensive surveillance of these viruses in wild birds, poultry, mammals,\nand people worldwide, and frequent reassessments are critical to determine the\npublic health risk, along with ongoing preparedness efforts.\n\nKey Points\n\n  * CDC is actively working on the domestic situation with clade 2.3.4.4b HPAI A(H5N1) viruses in wild birds, with outbreaks in poultry and backyard flocks, and infections of other animals, including dairy cattle. These activities include conducting surveillance among people with relevant exposures and preparing for the possibility that contemporary HPAI A(H5N1) viruses gain the ability for increased transmissibility to and among people.\n  * CDC, along with state and local public health partners, continues to monitor people in the United States who have been exposed to infected birds, poultry, or other animals for 10 days after exposure. To date, more than 8,800 people in 52 jurisdictions have been monitored since 2022, and only two human cases have been identified.\n  * H5 candidate vaccine viruses (CVV) produced by CDC are expected to provide good protection against current clade 2.3.4.4b HPAI A(H5N1) viruses detected in birds and mammals, including dairy cattle. These H5 CVVs are available and have been shared with vaccine manufacturers.\n  * Because influenza viruses are constantly changing, CDC performs ongoing analyses of HPAI A(H5N1) viruses to identify genetic changes that might allow for spread more easily to and between people, more serious illness in people, reduce susceptibility to antivirals, affect the sensitivity of diagnostic assays, or reduce neutralization of the virus by vaccine induced antibodies. To date, few genetic changes of public health concern have been identified in HPAI A(H5N1) viruses circulating in wild birds and poultry worldwide and detected in dairy cattle in the United States.\n  * Currently, HPAI A(H5N1) viruses circulating in birds and U.S. dairy cattle are believed to pose a low risk to the general public in the United States; however, people who have job-related or recreational exposures to infected birds or infected mammals are at higher risk of infection and should take appropriate precautions outlined in CDC guidance.\n  * Comprehensive surveillance and readiness efforts are ongoing, and CDC continually takes preparedness measures to be ready in case the risk to people from HPAI A(H5N1) virus or from other novel influenza A viruses changes.\n\nOn This Page\n\n  * HPAI A(H5N1) viruses in wild birds and poultry\n  * HPAI A(H5N1) virus infections among mammals\n  * Human cases of A(H5N1)\n  * Table 1. Global reported A(H5N1) human cases, January 2022 through April 25, 2024\n  * Figure 1. Epidemic Curve of Human Cases of A(H5N1) by Illness Onset Date, 1997-2024 by Country (N=909)\n  * Monitoring of persons exposed to HPAI A(H5N1) viruses in the United States\n\n  * U.S. influenza surveillance for human infections with novel influenza A viruses, including HPAI A(H5N1) virus\n  * CDC and U.S. Government Preparedness Activities\n  * Limitations of the Report\n  * Conclusions\n  * References\n  * Resources\n\n## HPAI A(H5N1) viruses in wild birds and poultry\n\nSince 2005, HPAI A(H5N1) viruses have undergone extensive genetic\ndiversification including the formation of hundreds of genotypes following\nreassortment with other avian influenza A viruses. Clade 2.3.4.4b HPAI A(H5N1)\nviruses emerged in 2020 and were introduced into North America in late 2021\n[1,2] and spread to Central and South America, resulting in wild bird\ninfections (in terrestrial, seabird, shorebird, and migratory species) and\npoultry outbreaks in many countries [3-8]. In Fall 2023, the first detections\nof HPAI A(H5N1) viruses in birds in the Antarctica region were reported [9].\nGlobally, this 2.3.4.4b clade of HPAI A(H5N1) viruses has become widespread\ncausing record numbers of bird outbreaks in wild, backyard, village, and farm\nbirds.\n\nIn the United States, USDA APHIS monitors for avian influenza viruses in wild,\ncommercial, and backyard birds. From January 2022 through April 25, 2024,\nAPHIS reported HPAI A(H5)/A(H5N1) virus detections in more than 9,200 wild\nbirds in 50 states or territories and more than 1,100 commercial and backyard\nflocks affecting more than 90 million birds in 48 states.\n\nTop of Page\n\n## HPAI A(H5N1) virus infections among mammals\n\nSporadic HPAI A(H5N1) virus infections of mammals have been reported since\n2003-2004 during HPAI A(H5N1) virus outbreaks in poultry or wild birds\n[10-12]. HPAI A(H5) viruses are known to occasionally infect mammals that eat\n(presumably infected) birds or poultry and mammals that are exposed to\nenvironments with a high concentration of virus.\n\nGlobally, sporadic HPAI A(H5N1) virus infections and outbreaks in a wide range\nof mammal species were reported by countries in different regions of the world\nto the World Organisation for Animal Health since January 2022. HPAI A(H5N1)\nvirus infections of mammals have included a polar bear in the United States,\nfarmed mink in Spain and farmed foxes and other mammals in Finland, harbor and\ngray seals in the United States, sea lions in Peru, Argentina, and Chile,\nelephant seals in Argentina, baby goats in the United States, and domesticated\npets such as cats in Poland, France, South Korea, and the United States, and\ndogs in Italy. In March and April 2024, the United States reported HPAI\nA(H5N1) virus infections of dairy cattle at farms in multiple states. Spread\nfrom dairy farm-to-dairy farm was reported [292KB, 6 pages], and routes of\ntransmission are under investigation. In the United States, from May 2022\nthrough April 25, 2024, USDA APHIS reported HPAI A(H5N1) virus detections in\nwild mammals comprising a wide range of different species in 28 states.\n\nTop of Page\n\n## Human cases of A(H5N1)\n\nWhile HPAI A(H5N1) viruses are currently circulating widely in wild birds and\npoultry in many geographic regions, relatively few human cases of HPAI A(H5N1)\nhave been reported in recent years [Figure 1]. From January 2022 through April\n25, 2024, 26 sporadic human cases of A(H5N1) were reported from eight\ncountries, including 14 cases of severe or critical illness, and seven deaths,\nfour cases of mild illness, and eight asymptomatic cases [Table 1].\n\nOne human case of HPAI A(H5N1) was reported in the United States in April\n2022. The individual reported fatigue without other symptoms and a low level\nof A(H5N1) viral RNA was detected in a single upper respiratory tract\nspecimen. It is possible that detection of A(H5N1) viral RNA resulted from\ndeposition of non-infectious viral material in the upper respiratory tract of\nthe individual and did not represent true infection, similar to the\nenvironmental contamination that was attributed to two asymptomatic cases in\npoultry workers reported in Spain [13]. Transient environmental deposition may\nalso explain the detection of A(H5N1) viral RNA in cases of A(H5N1) reported\nin asymptomatic poultry workers in the U.K. that were investigated as part of\na surveillance study [14-16].\n\nOne human case of A(H5N1) was reported in the United States in April 2024 in\nan adult dairy farm worker. The individual worked at a farm with sick cows\npresumed to be infected with HPAI A(H5N1) virus in an area in which cows at\nother dairy farms were confirmed with HPAI A(H5N1) virus infection. The worker\nonly experienced conjunctivitis without any other signs or symptoms of\nillness. HPAI A(H5N1) virus was detected in conjunctival and nasopharyngeal\nswab specimens, and sequence data confirmed clade 2.3.4.4b, genotype B3.13,\nand close genetic relatedness to viruses detected in other dairy cattle farms\nin Texas. Oseltamivir was provided for treatment of the individual and for\npost-exposure prophylaxis of household contacts. Conjunctivitis resolved\nwithout other symptoms and household contacts remained well.\n\nNearly all human cases of HPAI A(H5N1) reported since January 2022 had recent\nexposure to sick or dead poultry, and no cases of human-to-human HPAI A(H5N1)\nvirus transmission were identified. Fourteen cases (7 children, 7 adults) had\nsevere or critical illness, and seven (3 children, 4 adults) died. Thirteen\ncases were associated with clade 2.3.4.4b HPAI A(H5N1) virus in 7 countries,\nand eleven cases were associated or assumed to be associated with clade\n2.3.2.1c HPAI A(H5N1) viruses in Cambodia and Vietnam. None of the HPAI\nA(H5N1) virus genetic sequences contained any known markers of reduced\nsusceptibility to currently recommended FDA-approved influenza antiviral\nmedications.\n\nGenetic data have revealed that when some mammals, including humans, are\ninfected with HPAI A(H5N1) virus, the virus may undergo intra-host evolution\nresulting in genetic changes that allow more efficient replication in the\nlower respiratory tract or extrapulmonary tissues [17-19]. Some HPAI A(H5N1)\nviruses that have infected humans in 2023 and 2024 have also shown the same or\nsimilar genetic changes as those identified in wild and captive mammals. For\nexample, sequencing of viruses from specimens collected from human cases\nidentified in Cambodia during October and November 2023, in Vietnam in 2024\nand in the dairy farm worker in Texas revealed the presence of the polymerase\nbasic protein 2 (PB2) 627K marker, which is often associated with mammalian\nadaptation during infection [20]. The HPAI A(H5N1) virus sequenced from the\nhuman case in Chile identified in March 2023 had different genetic changes\n(PB2 591K and 701N) that are also associated with mammalian adaptation [21].\n\nAlthough these genetic changes may impact mammalian disease outcome, they have\nnot been associated with enhanced transmissibility of the virus to humans.\nHPAI A(H5N1) viruses do not currently have the ability to easily infect and\nbind to \u03b12,6-linked sialic acid receptors that are predominant in the human\nupper respiratory tract [2], which would be needed to increase the risk of\ntransmission to people [22,23].\n\nTop of Page\n\n## Table 1. Global reported A(H5N1) human cases, January 2022 through April\n25, 2024\n\nTable 1. Global reported A(H5N1) human cases, January 2022 through April 25,\n2024Country of Case| Month of illness onset or case detection| Disease\nSeverity and Outcome| Virus Clade by sequencing or associated poultry\noutbreaks  \n---|---|---|---  \nCambodia| February 2023| Critical illness, died| Clade 2.3.2.1c  \nFebruary 2023| Mild illness| Clade 2.3.2.1c  \nOctober 2023| Critical illness, died| Clade 2.3.2.1c  \nOctober 2023| Critical illness, died| Clade 2.3.2.1c  \nNovember 2023| Critical illness, died| Clade 2.3.2.1c  \nNovember 2023| Mild illness| Clade 2.3.2.1c  \nJanuary 2024| Severe illness, survived| Clade 2.3.2.1c  \nJanuary 2024| Severe illness, survived| Clade 2.3.2.1c  \nJanuary 2024| Critical illness, died| Clade 2.3.2.1c  \nFebruary 2024| Severe illness, survived| Not reported  \nFebruary 2024| Asymptomatic| Clade 2.3.2.1c  \nChile| March 2023| Critical illness, survived| Clade 2.3.4.4b  \nChina| September 2022| Critical illness, died| Clade 2.3.4.4b  \nJanuary 2023| Severe illness, outcome not reported| Clade 2.3.4.4b  \nEcuador| December 2022| Critical illness, survived| Clade 2.3.4.4b  \nSpain| September 2022| Asymptomatic| Clade 2.3.4.4b  \nOctober 2022| Asymptomatic| Clade 2.3.4.4b  \nUnited Kingdom| January 2022| Asymptomatic| Clade 2.3.4.4b  \nMay 2023| Asymptomatic| Clade 2.3.4.4b  \nMay 2023| Asymptomatic| Clade 2.3.4.4b  \nJuly 2023| Asymptomatic| Clade 2.3.4.4b  \nJuly 2023| Asymptomatic| Clade 2.3.4.4b  \nUnited States| April 2022| Mild illness (fatigue)| Clade 2.3.4.4b  \nMarch 2024| Mild illness (conjunctivitis)| Clade 2.3.4.4b  \nVietnam| October 2022| Critical illness, survived| Not reported  \nMarch 2024| Critical illness, died| Clade 2.3.2.1c  \n  \nSince 1997, a total of 909 sporadic human A(H5N1) cases have been reported\nfrom 23 countries, caused by different HPAI A(H5N1) virus clades [24,25], with\na cumulative case fatality proportion of greater than 50%. Human A(H5N1) cases\npeaked in 2006 (115 cases, 9 countries) and 2015 (145 cases, 4 countries)\nprimarily due to a large epidemic in Egypt with 136 cases [Figure 1].\n\nNearly all reported human A(H5N1) cases had poultry exposures, such as to sick\nor dead poultry or visiting live poultry markets. Rare, limited, and non-\nsustained instances of human-to-human HPAI A(H5N1) virus transmission likely\noccurred in a small number of family members following prolonged, close\nunprotected exposure with a symptomatic case-patient during 2004-2007 in\nmultiple countries [26-29].\n\nTop of Page\n\n## Figure 1. Epidemic Curve of Human Cases of A(H5N1) by Illness Onset Date,\n1997-2024 by Country (N=909)\n\n## Monitoring of persons exposed to HPAI A(H5N1) viruses in the United States\n\nAlthough few human cases have occurred recently, given widespread infection\namong poultry and wild birds, people who have job-related or recreational\nexposures to infected birds or sick or dead mammals are at higher risk of\ninfection.\n\nCDC, in collaboration with state, territorial, and local public health\npartners, has monitored people exposed to infected birds and poultry, cattle,\nor other animals beginning with their first exposure and for 10 days after\ntheir last exposure, from February 2022 through April 25, 2024:\n\n  * Total monitored: more than 8,800 people in 52 jurisdictions.\n  * Total illnesses reported among monitored persons: nearly 200 people.\n  * Number positive for influenza A(H5N1) virus: 2 people.\n\nOf the nearly 200 people showing symptoms who were tested for novel influenza\nA and seasonal influenza viruses along with other respiratory viruses, HPAI\nA(H5N1) virus genetic material was detected in a respiratory specimen from one\nperson in Colorado who experienced fatigue without any other illness signs or\nsymptoms while participating in poultry culling activities, and in one person\nin Texas who experienced conjunctivitis without any other illness signs or\nsymptoms while working with sick dairy cattle presumed to be infected with\nHPAI A(H5N1) virus. [See above section on \u201cHuman cases of A(H5N1).\u201d]\n\nTop of Page\n\n## U.S. influenza surveillance for human infections with novel influenza A\nviruses, including HPAI A(H5N1) virus\n\nHuman infection with a novel influenza A virus, including HPAI A(H5N1) virus, is a nationally notifiable condition (case definition: Novel Influenza A Virus Infections 2014 Case Definition | CDC)\n\nInfluenza testing is widely available in clinical laboratories and health care\nfacilities. Assays in these settings would detect A(H5N1) virus infections as\ninfluenza A positive, and a subset of assays would be able to also determine\nthat they are not influenza A virus subtypes H1 or H3 that commonly circulate\namong humans. Specimens from persons possibly exposed to HPAI A(H5N1) virus or\nthat test positive for influenza A virus but negative for A(H1) and A(H3)\nsubtypes should be forwarded to the appropriate state or local public health\nlaboratory for further testing. CDC should be notified immediately in the\nevent that any clinical specimens from suspected cases test positive for a\nnovel influenza A virus or if the testing results of clinical specimens from\nsuspected cases are inconclusive. Human infection with a novel influenza A\nvirus is a nationally notifiable condition, and currently confirmatory testing\nis being done only at CDC. Very few specimens have been submitted to CDC for\nH5 testing since January 2022.\n\n  * Seasonal influenza virus detection assays that can also detect novel influenza A viruses are used in 128 public health laboratories in all 50 U.S states.\n  * Specific diagnostic assays to detect A(H5) viruses are available at 99 public health laboratories in all 50 states.\n\nPer long-standing protocols, upon detection of a virus that tests positive for\ninfluenza A but is negative for human H1 or H3 genes, the public health\nlaboratory will rapidly contact CDC and ship the specimen to CDC. Samples that\nare influenza A positive but negative for human H1 or H3 genes may also be\ntested for H5 by state public health laboratories and are rapidly sent to CDC\nfor a diagnostic result. An investigation of the case will be initiated, and a\ncase report form will be submitted to CDC through the novel influenza A\nreporting module.\n\nTop of Page\n\n## CDC and U.S. Government Preparedness Activities\n\nActivity\n\nActivity\n\nActivity\n\nSummary\n\nSummary\n\nSummary\n\nGlobal surveillance and rapid response to human infections\n\nActivity\n\nGlobal surveillance and rapid response to human infections\n\nCDC\u2019s Influenza Division supports surveillance in live bird markets, backyard\nfarms, and wild birds and/or their environments in Bangladesh, Cambodia,\nChina, Guatemala, Kenya, Lao PDR, Peru, Thailand, and Vietnam. Surveillance\ndata highlight the high prevalence and wide range of avian influenza A viruses\nin birds and help to describe the changing epidemiology of avian influenza A\nviruses.\n\nIn 2022, the Influenza Division tracked more than 50 human infections with\navian influenza A viruses reported to the WHO from seven countries in four WHO\nregions. Most recently, CDC Influenza Division field staff assisted in the\nrapid response investigations of four human A(H5N1) cases in Cambodia during\nOctober and November 2023.\n\nCDC systems that monitor national, state, and local level influenza data are\nbeing used during the current HPAI A(H5N1) virus situation.\n\n  * Influenza virus and illness activity are monitored year-round through a collaborative effort between CDC and many partners, including state, local, and territorial health departments; public health and clinical laboratories; clinics; and emergency departments.\n  * Human cases of novel influenza A virus infection, which are human infections with non-human influenza A viruses that are different from currently spreading seasonal human influenza A viruses, are nationally notifiable. Every identified case is investigated and reported to CDC.\n  * CDC is actively looking at multiple influenza indicators during the current situation to monitor for HPAI A(H5N1) viruses, including looking for spread of the virus to, or among people, in jurisdictions where the virus has been identified in people or animals.\n\nSummary\n\nCDC\u2019s Influenza Division supports surveillance in live bird markets, backyard\nfarms, and wild birds and/or their environments in Bangladesh, Cambodia,\nChina, Guatemala, Kenya, Lao PDR, Peru, Thailand, and Vietnam. Surveillance\ndata highlight the high prevalence and wide range of avian influenza A viruses\nin birds and help to describe the changing epidemiology of avian influenza A\nviruses.\n\nIn 2022, the Influenza Division tracked more than 50 human infections with\navian influenza A viruses reported to the WHO from seven countries in four WHO\nregions. Most recently, CDC Influenza Division field staff assisted in the\nrapid response investigations of four human A(H5N1) cases in Cambodia during\nOctober and November 2023.\n\nCDC systems that monitor national, state, and local level influenza data are\nbeing used during the current HPAI A(H5N1) virus situation.\n\n  * Influenza virus and illness activity are monitored year-round through a collaborative effort between CDC and many partners, including state, local, and territorial health departments; public health and clinical laboratories; clinics; and emergency departments.\n  * Human cases of novel influenza A virus infection, which are human infections with non-human influenza A viruses that are different from currently spreading seasonal human influenza A viruses, are nationally notifiable. Every identified case is investigated and reported to CDC.\n  * CDC is actively looking at multiple influenza indicators during the current situation to monitor for HPAI A(H5N1) viruses, including looking for spread of the virus to, or among people, in jurisdictions where the virus has been identified in people or animals.\n\nVirological assessments\n\nActivity\n\nVirological assessments\n\nBecause influenza viruses have a high error rate during replication and\nrapidly evolve, CDC continually conducts genetic analyses of viruses to\nidentify changes that may impact virus phenotypes such as antigenicity,\nantiviral susceptibility, transmissibility, and/or pathogenesis. Genetic\nanalysis also is performed to assess changes that may impact diagnostic test\nperformance.\n\nSummary\n\nBecause influenza viruses have a high error rate during replication and\nrapidly evolve, CDC continually conducts genetic analyses of viruses to\nidentify changes that may impact virus phenotypes such as antigenicity,\nantiviral susceptibility, transmissibility, and/or pathogenesis. Genetic\nanalysis also is performed to assess changes that may impact diagnostic test\nperformance.\n\nDiagnostics\n\nActivity\n\nDiagnostics\n\nVarious CDC influenza virus diagnostic real time RT-PCR tests detect typical\nhuman (seasonal) viruses or novel influenza A viruses (e.g., H5, H7) that may\ninfect people through zoonotic transmission. These diagnostic tests are used\nin all 50 U.S states and globally. Additionally, there are CDC diagnostic\ntests that specifically detect A(H5) viruses, which are available in public\nhealth laboratories in all 50 U.S. states and international laboratories.\n\nMost commercial assays used for human influenza virus testing are likely to\ndetect HPAI A(H5N1) viruses because they target conserved proteins.\n\nSummary\n\nVarious CDC influenza virus diagnostic real time RT-PCR tests detect typical\nhuman (seasonal) viruses or novel influenza A viruses (e.g., H5, H7) that may\ninfect people through zoonotic transmission. These diagnostic tests are used\nin all 50 U.S states and globally. Additionally, there are CDC diagnostic\ntests that specifically detect A(H5) viruses, which are available in public\nhealth laboratories in all 50 U.S. states and international laboratories.\n\nMost commercial assays used for human influenza virus testing are likely to\ndetect HPAI A(H5N1) viruses because they target conserved proteins.\n\nCandidate vaccine virus development\n\nActivity\n\nCandidate vaccine virus development\n\nThe development of influenza candidate vaccine viruses (CVVs), coordinated by\nWHO, remains an essential component of the overall global strategy for\ninfluenza pandemic preparedness. A library of H5 candidate vaccine viruses\n(CVV) has been produced with additional recommendations for development during\nbi-annual vaccine consultation meetings (See Summary of status of development\nand availability of A(H5N1) candidate vaccine viruses and potency testing\nreagents [315 KB, 6 pages] and Zoonotic influenza: candidate vaccine viruses\nand potency testing reagents). The CDC Influenza Risk Assessment Tool is also\nused to help prioritize HPAI A(H5) viruses for development of CVVs.\n\nA/Astrakhan/3212/2020-like and A/American wigeon/South\nCarolina/22-000345-001/2021-like CVVs closely related HPAI A(H5N1) (clade\n2.3.4.4b) viruses circulating in North America have been developed and are\navailable for vaccine manufacturers. The two CVVs produced by the U.S. CDC\n(i.e., IDCDC-RG71A and IDCDC-RG78A) and one CVV produced by U.S. FDA (CBER-\nRG8A) encode hemagglutinin (HA) proteins that are nearly identical or\nidentical to the HA of most recent clade 2.3.4.4b H5N1 viruses detected in\nbirds and mammals, including dairy cattle, and could be used to produce a\nvaccine for people if needed. One additional clade 2.3.4.4b H5N1 CVV has been\nrecommended for development as part of pandemic preparedness. In addition to\nCVVs targeting clade 2.3.4.4b viruses, CVVs have been developed for clade\n2.3.2.1c viruses, such as those that have infected humans in Cambodia during\n2023. Antigenic testing demonstrates that two existing clade 2.3.2.1 CVVs,\nNIBRG-301 (A/duck/Vietnam/NCVD-1584/2012-like) and IDCDC-RG75A\n(A/chicken/Ghana/20/2015-like), will offer protection against the viruses\nidentified in Cambodia in 2023.\n\nSummary\n\nThe development of influenza candidate vaccine viruses (CVVs), coordinated by\nWHO, remains an essential component of the overall global strategy for\ninfluenza pandemic preparedness. A library of H5 candidate vaccine viruses\n(CVV) has been produced with additional recommendations for development during\nbi-annual vaccine consultation meetings (See Summary of status of development\nand availability of A(H5N1) candidate vaccine viruses and potency testing\nreagents [315 KB, 6 pages] and Zoonotic influenza: candidate vaccine viruses\nand potency testing reagents). The CDC Influenza Risk Assessment Tool is also\nused to help prioritize HPAI A(H5) viruses for development of CVVs.\n\nA/Astrakhan/3212/2020-like and A/American wigeon/South\nCarolina/22-000345-001/2021-like CVVs closely related HPAI A(H5N1) (clade\n2.3.4.4b) viruses circulating in North America have been developed and are\navailable for vaccine manufacturers. The two CVVs produced by the U.S. CDC\n(i.e., IDCDC-RG71A and IDCDC-RG78A) and one CVV produced by U.S. FDA (CBER-\nRG8A) encode hemagglutinin (HA) proteins that are nearly identical or\nidentical to the HA of most recent clade 2.3.4.4b H5N1 viruses detected in\nbirds and mammals, including dairy cattle, and could be used to produce a\nvaccine for people if needed. One additional clade 2.3.4.4b H5N1 CVV has been\nrecommended for development as part of pandemic preparedness. In addition to\nCVVs targeting clade 2.3.4.4b viruses, CVVs have been developed for clade\n2.3.2.1c viruses, such as those that have infected humans in Cambodia during\n2023. Antigenic testing demonstrates that two existing clade 2.3.2.1 CVVs,\nNIBRG-301 (A/duck/Vietnam/NCVD-1584/2012-like) and IDCDC-RG75A\n(A/chicken/Ghana/20/2015-like), will offer protection against the viruses\nidentified in Cambodia in 2023.\n\nVaccines\n\nActivity\n\nVaccines\n\nInfluenza A viruses of pandemic potential change over time and multiple new\nstrains circulate in animals every year without leading to sustained human-to-\nhuman transmission. The U.S. government has a preparedness program that\nenables a rapid response to influenza viruses as they evolve. As part of this\nprogram, the Biomedical Advanced Research and Development Authority (BARDA)\nworks with private industry partners to make and test small quantities of\nupdated vaccines that match new influenza A viruses with pandemic potential as\nthey emerge in case any of them result in sustained human-to-human\ntransmission, while at the same time, supporting manufacturing capacity to\nallow for large-scale vaccine production when needed.\n\nSummary\n\nInfluenza A viruses of pandemic potential change over time and multiple new\nstrains circulate in animals every year without leading to sustained human-to-\nhuman transmission. The U.S. government has a preparedness program that\nenables a rapid response to influenza viruses as they evolve. As part of this\nprogram, the Biomedical Advanced Research and Development Authority (BARDA)\nworks with private industry partners to make and test small quantities of\nupdated vaccines that match new influenza A viruses with pandemic potential as\nthey emerge in case any of them result in sustained human-to-human\ntransmission, while at the same time, supporting manufacturing capacity to\nallow for large-scale vaccine production when needed.\n\nTop of Page\n\n## Limitations of the Report\n\nThis report is subject to the following limitations. First, the number of\nreported human infections with HPAI A(H5N1) viruses is small. Conclusions\nregarding virus characterization analyses, transmissibility from animals to\npeople, transmissibility among people, and clinical spectrum of illness in\npeople should be interpreted in light of this small number. Second, detailed\nexposure information was not available for all exposed persons or for those\nbeing monitored for illness after exposure to HPAI A(H5N1) virus-infected wild\nbirds, poultry, backyard flocks, and other animals, including dairy cattle in\nthe United States. As of the date of this report, understanding of HPAI\nA(H5N1) virus infections of cattle is very limited. Thus, we are not able to\nassess the impact of exposure variables such as duration of exposure, nature\nof exposure (e.g., direct vs. indirect contact), and use of personal\nprotective equipment on infection risk among persons with confirmed HPAI\nA(H5N1) virus infection or those being monitored after exposures to any\nanimals confirmed or suspected with HPAI A(H5N1) virus infection.\n\n## Conclusions\n\n  * To date, CDC analyses of clade 2.3.4.4b HPAI A(H5N1) viruses detected in wild birds, poultry, and sporadically in mammals, including in dairy cattle, since late 2021 indicate that these viruses all have a high degree of genetic identity with each other and no significant mammalian adaptive substitutions, insertions, or deletions have been identified, particularly in the HA gene, which is important for zoonotic and subsequent human-to-human transmission.\n  * Considering the high prevalence of HPAI A(H5N1) viruses detected in wild birds and poultry worldwide, spillover into mammals (including carnivores that may feed on infected animals) and additional sporadic zoonotic infections are anticipated among people with exposures to infected sick or dead poultry, wild birds, or other infected animals.\n  * HA clade 2.3.4.4b A(H5N1) viruses currently circulating in wild birds and poultry worldwide lack the ability to preferentially bind to the types of sialic acid receptors that are predominant in the upper respiratory tract of humans and therefore do not currently have the ability to easily infect or transmit among people.\n  * Despite extensive worldwide spread of influenza A(H5N1) viruses in wild birds and poultry in recent years, only a small number of sporadic human infections with 2.3.4.4b or clade 2.3.2.1c H5N1 viruses have been reported since 2022; nearly all cases had recent exposure to poultry and no cases of human-to-human influenza A(H5N1) virus transmission have been identified.\n\nWhile CDC\u2019s assessment is that the overall threat of HA clade 2.3.4.4b A(H5N1)\nviruses to public health is currently low, the widespread geographic\nprevalence of infected birds and poultry raises the potential for exposures\nand infections of humans and other mammals that could result in viral\nevolution or reassortment events which might change the current risk\nassessment. Vigilance and ongoing surveillance of HPAI A(H5N1) viruses\ncirculating in wild birds, poultry, and in sporadic infections of mammals and\npeople worldwide is critical to monitor the public health risk and to detect\ngenetic changes (particularly in the HA gene) that would change CDC\u2019s risk\nassessment.\n\nTop of Page\n\n## References\n\n  1. Bevins SN, Shriner SA, Cumbee JC Jr, Dilione KE, Douglass KE, Ellis JW et al. Intercontinental Movement of Highly Pathogenic Avian Influenza A(H5N1) Clade 2.3.4.4 Virus to the United States, 2021. Emerg Infect Dis. 2022 May;28(5):1006-1011.\n  2. Kandeil A, Patton C, Jones JC, Jeevan T, Harrington WN, Trifkovic S et al. Rapid evolution of A(H5N1) influenza viruses after intercontinental spread to North America. Nat Commun. 2023 May 29;14(1):3082.\n  3. World Health Organization. Antigenic and genetic characteristics of zoonotic influenza A viruses and development of candidate vaccine viruses for pandemic preparedness. February 2023. https://cdn.who.int/media/docs/default-source/influenza/who-influenza-recommendations/vcm-northern-hemisphere-recommendation-2023-2024/20230224_zoonotic_recommendations.pdf?sfvrsn=38c739fa_4 [1.17 MB, 12 pages]\n  4. European Food Safety Authority, European Centre for Disease Prevention and Control, European Union Reference Laboratory for Avian Influenza. Avian influenza overview March \u2013 April 2023. EFSA J 2023 Jun 7;21(6):e08039.\n  5. Ariyama N, Pardo-Roa C, Mu\u00f1oz G, Aguayo C, \u00c1vila C, Mathieu C, Almonacid LI, Medina RA, Brito B, Johow M, Neira V. Highly Pathogenic Avian Influenza A(H5N1) Clade 2.3.4.4b Virus in Wild Birds, Chile. Emerg Infect Dis. 2023 Sep;29(9):1842-1845. Doi: 10.3201/eid2909.230067. Epub 2023 Jul 24. PMID: 37487166; PMCID: PMC10461661\n  6. Leguia M, Garcia-Glaessner A, Mu\u00f1oz-Saavedra B, Juarez D, Barrera P, Calvo-Mac C, Jara J, Silva W, Ploog K, Amaro L, Colchao-Claux P, Johnson CK, Uhart MM, Nelson MI, Lescano J. Highly pathogenic avian influenza A (H5N1) in marine mammals and seabirds in Peru. Nat Commun. 2023 Sep 7;14(1):5489. Doi: 10.1038/s41467-023-41182-0. PMID: 37679333; PMCID: PMC10484921.\n  7. Pan American Health Organization. Epidemiological Update Outbreaks of avian influenza caused by influenza A(H5N1) in the Region of the Americas. 9 August 2023. https://www.paho.org/en/documents/epidemiological-update-outbreaks-avian-influenza-caused-influenza-ah5n1-region-americas-0\n  8. Global Avian Influenza Viruses with Zoonotic Potential situation update, 28 March 2024. https://www.fao.org/animal-health/situation-updates/global-aiv-with-zoonotic-potential/en\n  9. World Organisation for Animal Health. Wildlife under threat as avian influenza reaches Antarctica. 13 March 2024. https://www.woah.org/en/wildlife-under-threat-as-avian-influenza-reaches-antarctica/\n  10. Keawcharoen J, Oraveerakul K, Kuiken T, Fouchier RAM, Amonsin A, Payungporn S et al. Avian influenza H5N1 in tigers and leopards. Emerg Infect Dis. 2004 Dec;10(12):2189-91.\n  11. Songserm T, Amonsin A, Jam-on R, Sae-Heng N, Pariyothorn N, Payungporn S et al. Fatal avian influenza A H5N1 in a dog. Emerg Infect Dis. 2006 Nov;12(11):1744-7.\n  12. Songserm T, Amonsin A, Jam-on R, Sae-Heng N, Meemak N, Pariyothorn N et al. Avian influenza H5N1 in naturally infected domestic cat. Emerg Infect Dis. 2006 Apr;12(4):681-3.\n  13. Aznar E, Casas I, Gonz\u00e1lez Praetorius A, Ruano Ramos MJ, Pozo F, Sierra Moros MJ et al.Influenza A(H5N1) detection in two asymptomatic poultry farm workers in Spain, September to October 2022: suspected environmental contamination. Euro Surveill. 2023 Feb;28(8):2300107. Doi: 10.2807/1560-7917.ES.2023.28.8.2300107. https://pubmed.ncbi.nlm.nih.gov/36820643/\n  14. World Health Organization. Avian Influenza A(H5N1) \u2013 United Kingdom of Great Britain and Northern Ireland. 30 May 2023. Accessed at: https://www.who.int/emergencies/disease-outbreak-news/item/2023-DON468\n  15. Capelastegui F, Smith J, Kumbang J, Humphreys C, Padfield S, Turner J et al. Pilot of asymptomatic swabbing of humans following exposures to confirmed avian influenza A(H5) in avian species in England, 2021/2022. Influenza Other Respir Viruses. 2023 Aug 23;17(8):e13187. Doi: 10.1111/irv.13187 https://pubmed.ncbi.nlm.nih.gov/37638093/\n  16. UK Health Security Agency. Investigation into the risk to human health of avian influenza (influenza A H5N1) in England: technical briefing 5. Updated 14 July 2023. Accessed at: Investigation into the risk to human health of avian influenza (influenza A H5N1) in England: technical briefing 5 \u2013 GOV.UK (www.gov.uk)\n  17. Gabriel G, Czudai-Matwich V, Klenk HD. Adaptive mutations in the H5N1 polymerase complex. Virus Res. 2013 Dec 5;178(1):53-62. Doi: 10.1016/j.virusres.2013.05.010.\n  18. Bogs J, Kalthoff D, Veits J, Pavlova S, Schwemmle M, M\u00e4nz B et al. Reversion of PB2-627E to -627K during replication of an H5N1 Clade 2.2 virus in mammalian hosts depends on the origin of the nucleoprotein. J Virol. 2011 Oct;85(20):10691-8. Doi: 10.1128/JVI.00786-11.\n  19. Ag\u00fcero M, Monne I, S\u00e1nchez A, Zecchin B, Fusaro A, Ruano MJ et al. Highly pathogenic avian influenza A(H5N1) virus infection in farmed minks, Spain, October 2022. Euro Surveill. 2023 Jan;28(3):2300001. Doi: 10.2807/1560-7917.ES.2023.28.3.2300001.\n  20. Technical Update: Summary Analysis of Genetic Sequences of Highly Pathogenic Avian Influenza A(H5N1) Viruses in Texas. April 2, 2024. Accessed at: https://www.cdc.gov/flu/avianflu/spotlights/2023-2024/h5n1-analysis-texas.htm\n  21. Human Infection with highly pathogenic avian influenza A(H5N1) virus in Chile. Accessed at: https://www.cdc.gov/flu/avianflu/spotlights/2022-2023/chile-first-case-h5n1-addendum.htm\n  22. Van Riel D, den Bakker MA, Leijten LM, Chutinimitkul S, Munster VJ, de Wit E et al. Seasonal and pandemic human influenza viruses attach better to human upper respiratory tract epithelium than avian influenza viruses. Am J Pathol. 2010 Apr;176(4):1614-8. Doi: 10.2353/ajpath.2010.090949.\n  23. Shinya K, Ebina M, Yamada S, Ono M, Kasai N, Kawaoka Y. Avian flu: influenza virus receptors in the human airway. Nature. 2006 Mar 23;440(7083):435-6. Doi: 10.1038/440435a.\n  24. Lai S, Qin Y, Cowling BJ, Ren X, Wardrop NA, Gilbert M et al. Global epidemiology of avian influenza A H5N1 virus infection in humans, 1997-2015: a systematic review of individual case data. Lancet Infect Dis. 2016 Jul;16(7):e108-e118. Doi: 10.1016/S1473-3099(16)00153-5.https://pubmed.ncbi.nlm.nih.gov/27211899/\n  25. World Health Organization. Cumulative number of confirmed human cases for avian influenza A(H5N1) reported to WHO, 2003-2024, 28 March 2024. Accessed at: https://www.who.int/publications/m/item/cumulative-number-of-confirmed-human-cases-for-avian-influenza-a(h5n1)-reported-to-who\u20132003-2024-28-march-2024\n  26. Ungchusak K, Auewarakul P, Dowell SF, Kitphati R, Auwanit W, Puthavathana P et al. Probable person-to-person transmission of avian influenza A (H5N1). N Engl J Med. 2005 Jan 27;352(4):333-40. Doi: 10.1056/NEJMoa044021.https://pubmed.ncbi.nlm.nih.gov/15668219/\n  27. Wang H, Feng Z, Shu Y, Yu H, Zhou L, Zu R et al. Probable limited person-to-person transmission of highly pathogenic avian influenza A (H5N1) virus in China. Lancet. 2008 Apr 26;371(9622):1427-34. Doi: 10.1016/S0140-6736(08)60493-6.https://pubmed.ncbi.nlm.nih.gov/18400288/\n  28. WHO Disease Outbreak News. 2006 \u2013 Indonesia. 31 May 2006. Accessed at: https://www.who.int/emergencies/disease-outbreak-news/item/2006_05_31-en\n  29. World Health Organization. Human cases of avian influenza A (H5N1) in North-West Frontier Province, Pakistan, October-November 2007. Wkly Epidemiol Rec. 2008 Oct 3;83(40):359-64.\n\n## Resources\n\n  * How CDC is monitoring influenza data among people to better understand the current avian influenza A (H5N1) situation | Avian Influenza (Flu)\n  * Highly Pathogenic Avian Influenza A(H5N1) Virus in Animals: Interim Recommendations for Prevention, Monitoring, and Public Health Investigations | Avian Influenza (Flu) (cdc.gov)\n  * Case Definitions for Investigations of Human Infection with Avian Influenza A Viruses in the United States\n  * Recommendations for Worker Protection and Use of Personal Protective Equipment (PPE) to Reduce Exposure to Novel Influenza A Viruses Associated with Severe Disease in Humans | Avian Influenza (Flu) (cdc.gov)\n  * Interim Guidance on Influenza Antiviral Chemoprophylaxis of Persons Exposed to Birds with Avian Influenza A Viruses Associated with Severe Human Disease or with the Potential to Cause Severe Human Disease\n  * Interim Guidance on Follow-up of Close Contacts of Persons Infected with Novel Influenza A Viruses and Use of Antiviral Medications for Chemoprophylaxis\n  * Brief Summary for Clinicians: Evaluating and Managing Patients Exposed to Birds Infected with Avian Influenza A Viruses of Public Health Concern\n  * Interim Guidance on Testing and Specimen Collection for Patients with Suspected Infection with Novel Influenza A Viruses with the Potential to Cause Severe Disease in Humans\n  * Interim Guidance for Infection Control Within Healthcare Settings When Caring for Confirmed Cases, Probable Cases, and Cases Under Investigation for Infection with Novel Influenza A Viruses Associated with Severe Disease | Avian Influenza (Flu) (cdc.gov)\n  * Interim Guidance on the Use of Antiviral Medications for Treatment of Human Infections with Novel Influenza A Viruses Associated with Severe Human Disease\n\nPrevious H5N1 Technical Reports\n\n  * Technical Report: Highly Pathogenic Avian Influenza A(H5N1) Viruses (cdc.gov) \u2013 December 29, 2023\n  * Technical Report: Highly Pathogenic Avian Influenza A(H5N1) Viruses (cdc.gov) \u2013 October 27, 2023\n  * Technical Report: Highly Pathogenic Avian Influenza A(H5N1) Viruses (cdc.gov) \u2013 October 5, 2023\n  * Technical Report: Highly Pathogenic Avian Influenza A(H5N1) Viruses (cdc.gov) \u2013 July 7, 2023\n  * Addendum: Human Infection with highly pathogenic avian influenza A(H5N1) virus in Chile (cdc.gov) \u2013 April 17, 2023\n  * Technical Report: Highly Pathogenic Avian Influenza A(H5N1) Viruses (cdc.gov) \u2013 March 17, 2023\n\nAdditional Information\n\nBird Flu Current Situation Summary | Avian Influenza (Flu) (cdc.gov)\n\nNovel Influenza A Virus Infections (cdc.gov) An interactive dashboard of all\nnovel influenza A virus infections in humans reported in the United States\nsince 2010\n\n  * Reported Human Infections with Avian Influenza A Viruses\n  * Past Examples of Probable Limited, Non-Sustained, Person-to-Person Spread of Avian Influenza A Viruses\n  * Highlights in the History of Avian Influenza (Bird Flu) Timeline \u2013 2020-2024\n  * Information for People Exposed to Birds Infected with Avian Influenza Viruses\n  * Prevention and Antiviral Treatment of Bird Flu Viruses in People\n  * Recommendations for Worker Protection and Use of Personal Protective Equipment (PPE) to Reduce Exposure to Novel Influenza A Viruses Associated with Severe Disease in Humans\n  * CDC Health Advisory, April 29, 2022 \u2013 Highly Pathogenic Avian Influenza A(H5N1) Virus: Recommendations for Human Health Investigations and Response [986 KB, 6 pages]\n  * Public Health Monitoring Plan for USDA/APHIS Responders to Detections of Avian Influenza Virus in Poultry [353 KB, 18 pages]\n\nReferences to non-CDC sites are provided as a service and do not constitute or\nimply endorsement of these organizations or their programs by CDC or the U.S.\nDepartment of Health and Human Services. CDC is not responsible for the\ncontent of pages found at these sites. URL addresses listed were current as of\nthe date of publication.\n\nLast Reviewed: April 26, 2024\n\nSource: Centers for Disease Control and Prevention, National Center for\nImmunization and Respiratory Diseases (NCIRD)\n\nGet Email Updates\n\nTo receive email updates about this page, enter your email address:\n\nInfluenza Types\n\n  * Seasonal\n  * Avian\n  * Swine/Variant\n  * Pandemic\n  * Influenza in Animals\n\n  * About CDC\n  * Contact Us\n  * 800-232-4636\n\nFacebook Twitter Instagram LinkedIn Youtube Pinterest Snapchat\n\n  * Contact Us\n\nCall 800-232-4636\n\nEmail Us\n\n  *     * About CDC\n    * Jobs\n    * Funding\n\n  *     * Accessibility\n    * External Links\n    * Privacy\n    * Policies\n    * No Fear Act\n    * FOIA\n    * OIG\n    * Nondiscrimination\n    * Vulnerability Disclosure Policy\n\n  *     * Facebook\n    * Twitter\n    * Instagram\n    * LinkedIn\n\n    * Youtube\n    * Pinterest\n    * Snapchat\n    * Email\n\n  *     * Espa\u00f1ol\n    * \u7e41\u9ad4\u4e2d\u6587\n    * Ti\u1ebfng Vi\u1ec7t\n    * \ud55c\uad6d\uc5b4\n    * Tagalog\n    * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n    * \u0627\u0644\u0639\u0631\u0628\u064a\u0629\n    * Krey\u00f2l Ayisyen\n    * Fran\u00e7ais\n    * Polski\n    * Portugu\u00eas\n    * Italiano\n    * Deutsch\n    * \u65e5\u672c\u8a9e\n    * \u0641\u0627\u0631\u0633\u06cc\n    * English\n\n  * U.S. Department of Health & Human Services\n  * Accessibility\n  * External Links\n  * Privacy\n  * Policies\n  * No Fear Act\n  * FOIA\n  * Nondiscrimination\n  * OIG\n  * Vulnerability Disclosure Policy\n  * USA.gov\n\n#### Exit Notification / Disclaimer Policy\n\nLinks with this icon indicate that you are leaving the CDC website.\n\n  * The Centers for Disease Control and Prevention (CDC) cannot attest to the accuracy of a non-federal website.\n  * Linking to a non-federal website does not constitute an endorsement by CDC or any of its employees of the sponsors or the information and products presented on the website.\n  * You will be subject to the destination website's privacy policy when you follow the link.\n  * CDC is not responsible for Section 508 compliance (accessibility) on other federal or private website.\n\nFor more information on CDC's web notification policies, see Website\nDisclaimers.\n\n", "frontpage": false}
{"aid": "40206873", "title": "Doclite: PHP NoSQL database and document store using SQLite", "url": "https://github.com/dwgebler/doclite", "domain": "github.com/dwgebler", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-30 03:15:42", "comments": 0, "source_title": "GitHub - dwgebler/doclite: PHP NoSQL database and document store", "source_text": "GitHub - dwgebler/doclite: PHP NoSQL database and document store\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ndwgebler / doclite Public\n\n  * Notifications\n  * Fork 5\n  * Star 75\n\nPHP NoSQL database and document store\n\nwww.doclite.co.uk/\n\n### License\n\nMIT license\n\n75 stars 5 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# dwgebler/doclite\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n3 Branches\n\n14 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndwgeblerbump dependenciesApr 22, 20248a8fc3a \u00b7 Apr 22, 2024Apr 22, 2024\n\n## History\n\n37 Commits  \n  \n### src\n\n|\n\n### src\n\n| bump dependencies| Apr 22, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| update tests| Aug 28, 2023  \n  \n### .travis.yml\n\n|\n\n### .travis.yml\n\n| adding files| Sep 20, 2021  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| check sqlite version before checking for JSON1 extension| Aug 28, 2023  \n  \n### FUNDING.yml\n\n|\n\n### FUNDING.yml\n\n| Create FUNDING.yml| Oct 18, 2021  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| adding files| Sep 20, 2021  \n  \n### README.md\n\n|\n\n### README.md\n\n| update readme| Oct 29, 2022  \n  \n### composer.json\n\n|\n\n### composer.json\n\n| bump dependencies| Apr 22, 2024  \n  \n### phpunit.xml.dist\n\n|\n\n### phpunit.xml.dist\n\n| adding files| Sep 20, 2021  \n  \n## Repository files navigation\n\n# DocLite\n\nA powerful PHP NoSQL document store built on top of SQLite.\n\n## Table of contents\n\n  * About DocLite\n\n    * Why DocLite?\n  * Getting Started\n  * The Database\n\n    * Creating a memory database\n    * Creating a file database\n    * Error Handling & Logging\n    * Import and export data\n\n      * Importing Data\n      * Exporting data\n    * Advanced options\n\n      * Get DocLite version\n      * Optimize database\n      * Set synchronization mode\n      * Set rollback journal mode\n  * Collections\n\n    * About Collections\n    * Obtain a collection\n    * Create a document\n    * Save a document\n    * Retrieve a document\n    * Map a document to a custom class\n    * Delete a document\n    * Query a collection\n\n      * Find single document by values\n      * Find all matching documents by values\n      * Find all documents in collection\n      * Advanced queries\n      * Query operators\n    * Join collections\n    * Caching results\n    * Index a collection\n    * Unique indexes\n    * Delete a collection\n    * Collection transactions\n    * Full text search\n  * Documents\n\n    * About Documents\n    * Getting and setting document data\n    * Mapping document fields to objects\n    * Document Unique Id\n    * Saving a document\n    * Deleting a document\n    * Document validation\n  * Other info\n\n    * Symfony integration\n    * Licensing\n    * Bugs, issues\n    * Contact the author\n\n## About DocLite\n\nDocLite is a powerful NoSQL document store for PHP built on top of SQLite. It\nuses the PHP PDO SQLite library to access a SQLite database and automatically\nmanage documents organized in to named collections, which are stored as JSON.\n\nDocLite takes advantage of the SQLite JSON1 extension (this is usually bundled\nin to the libsqlite included with your PHP distribution, so you probably\nalready have it) to store, parse, index and query JSON documents - giving you\nthe power and flexibility of a fully transactional and ACID compliant NoSQL\nsolution, yet contained within the local file system. No need for more complex\nsystems like Mongo, CouchDB or Elasticsearch when your requirements are slim.\nNo need for any external dependencies, just PHP with PDO SQLite enabled.\n\nDocLite provides a simple, intuitive, flexible and powerful PHP library that\nyou can learn, install and start using in minutes.\n\n### Why DocLite?\n\nDocLite lends itself well to a variety of use cases, including but not limited\nto:\n\n  * Agile development and rapid prototyping while your requirements are evolving.\n\n  * Powerful, self-contained NoSQL database for small to medium websites or applications, such as blogs, business website, CMS, CRM or forums.\n\n  * A fast and reliable cache for data retrieved from remote databases, APIs or servers. Process your data in to documents, save in DocLite and easily query and filter your data as needed.\n\n  * Robust, performant, ACID compliant replacement for weaker, slower, flat-file data stores utilizing JSON, XML or YAML.\n\n  * Application database for web apps installed and run on a local environment.\n\n  * Database for microservices and middleware.\n\n  * Fast in-memory database for data processing or machine learning algorithms.\n\nBroadly speaking, DocLite is suitable for the same uses cases as the\nunderlying SQLite engine it is built on, but where you desire a NoSQL\nsolution.\n\n## Getting Started\n\n## The Database\n\nDocLite is built on top of SQLite 3 and supports two types of database; file\nand memory. The corresponding classes are FileDatabase and MemoryDatabase.\n\n### Creating a memory database\n\nMemoryDatabase is stored in volatile memory and is therefore ephemeral for the\nlifetime of your application scripts. Its constructor takes optional\nparameters:\n\n  * a boolean flag indicating whether to enable full text search features (defaults to false) - this feature requires SQLite to have been compiled with the FTS5 extension.\n  * an integer representing the maximum connection timeout in seconds (defaults to 1) which is how long the connection should wait if the underlying SQLite database is locked.\n  * A PSR-3 compatible logger instance (defaults to null).\n\n    \n    \n    ```php use Gebler\\Doclite\\MemoryDatabase; $db = new MemoryDatabase(); // With full text search enabled and a 2-second connection timeout $logger = new \\Monolog\\Logger('my-logger'); $db = new MemoryDatabase(true, 2, $logger);\n\n### Creating a file database\n\nFileDatabase constructor takes one mandatory and then some optional\nparameters; only the file or directory path to a new or existing database is\nrequired.\n\nOptional parameters are:\n\n  * a boolean flag indicating whether the database should be opened in read-only mode, which defaults to false.\n  * a boolean flag indicating whether to enable full text search features (defaults to false) - this feature requires SQLite to have been compiled with the FTS5 extension.\n  * an integer representing the maximum connection timeout in seconds (defaults to 1) which is how long the connection should wait if the underlying SQLite database is locked.\n  * A PSR-3 Logger instance to use for logging database events.\n\nThe path supplied to FileDatabase can be a relative or absolute path which is\nany of:\n\n  * An existing directory with read and write access.\n  * A non-existent file in a directory with read-write access.\n  * An existing database in a directory with read-write or read-only access (read-only mode).\n  * A non-existing directory path which your script has permission to create.\n\nIf no file name is specified, a default file name data.db will be used for the\nunderlying database.\n\n    \n    \n    use Gebler\\Doclite\\FileDatabase; // Open a new database $db = new FileDatabase('./data/mydb.db'); // Open an existing database in read-only mode $db = new FileDatabase('./data/mydb.db', true); // Open a new database called data.db in existing directory /home/data $db = new FileDatabase('/home/data'); // All options - path, read-only mode, full text search, connection timeout and logger $logger = new \\Monolog\\Logger('mylogger'); $db = new FileDatabase('./data/mydb.db', false, true, 1, $logger); // Or, in PHP 8, named parameters: $db = new FileDatabase(path: './data/mydb.db', readOnly: true, ftsEnabled: true);\n\nIf you open a database in read-only mode, you will be able to retrieve\ndocuments from a collection, but you will not be able to save them or create\nnew documents or collections. Attempting to do so will trigger an error.\n\nIt is good practice wrapping FileDatabase creation in a try-catch block.\nInitializing a FileDatabase may throw either an IOException (for errors\nrelating to the file system) or a DatabaseException (for errors establishing\nthe DB connection).\n\n    \n    \n    use Gebler\\Doclite\\Exception\\IOException; use Gebler\\Doclite\\Exception\\DatabaseException; use Gebler\\Doclite\\FileDatabase; try { $db = new FileDatabase('/path/to/db'); } catch (IOException $e) { var_dump($e->getMessage()); } catch (DatabaseException $e) { var_dump($e->getMessage()); }\n\n### Error Handling & Logging\n\nTo enable logging queries and parameters in the full and final SQL sent to the\ndatabase, pass a PSR-3 logger instance in to you FileDatabase or\nMemoryDatabase either via the constructor or the\n$database->setLogger(LoggerInterface $logger) method at any time.\n\nThen call $database->enableQueryLogging() to enable logging of all queries.\nThese will be logged at the debug level.\n\nOr call $database->enableSlowQueryLogging() to enable logging of queries that\ntake longer than 500ms. These will be logged with a warning level.\n\nAs long as a LoggerInterface instance is set on a database, any exceptions\nwill also be logged at the error level.\n\nYou can disable logging by calling $database->disableQueryLogging() or\n$database->disableSlowQueryLogging().\n\nDocLite primarily throws a DatabaseException when any error occurs. This is\ntrue across the Database, Collection and Document types. A Database exception\nwill include a message, an error code (see below), any underlying system\nexception if there was one (so normal Exception behaviour up to this point),\nplus any SQL query which was being executed (DocLite hides these from you\nduring normal operation, of course, as it is a NoSQL solution, but they are\nuseful for filing bug reports!), and an array of any relevant parameters -\nthese may be things like a document ID, the document data, etc.\n\n    \n    \n    use Gebler\\Doclite\\Exception\\DatabaseException; ... try { $user->setUsername(\"dwgebler\"); $user->save(); } catch (DatabaseException $e) { var_dump($e->getMessage(), $e->getCode(), $e->getQuery(), $e->getParams()); }\n\nA DatabaseException can occur on any Database, Collection or Document method\nwhich interacts with the underlying database.\n\nError codes are represented by public constants in the DatabaseException\nclass. The full list of error codes are as follows:\n\nConstant| Meaning  \n---|---  \nERR_COLLECTION_IN_TRANSACTION| Attempted to begin, rollback or commit on a\ncollection while a transaction on a different collection was already in\nprogress.  \nERR_CONNECTION| Unable to connect to database  \nERR_NO_SQLITE| PDO SQLite extension is not installed  \nERR_NO_JSON1| SQLite does not have the JSON1 extension installed  \nERR_NO_FTS5| FTS5 extension not installed  \nERR_INVALID_COLLECTION| Invalid collection name  \nERR_MISSING_ID_FIELD| Custom class for mapping a document does not have an ID\nfield  \nERR_INVALID_FIND_CRITERIA| Attempted to find a document by non-scalar value  \nERR_INVALID_ID_FIELD| Specified unique ID field for custom class does not\nexist, nor does default  \nERR_ID_CONFLICT| Multiple documents in the same collection have the same ID  \nERR_CLASS_NOT_FOUND| Custom class name being used for a document does not\nexist  \nERR_INVALID_UUID| Attempted to get the timestamp from an invalid UUID  \nERR_QUERY| Error executing SQL query  \nERR_READ_ONLY_MODE| Attempted a write operation on a read only database  \nERR_INVALID_JSON_SCHEMA| Attempted to import an invalid JSON schema  \nERR_INVALID_DATA| Data does not match loaded JSON schema  \nERR_MAPPING_DATA| Unable to map document to class  \nERR_IMPORT_DATA| Error importing data  \nERR_IN_TRANSACTION| Attempting locking operation while in a transaction  \nERR_INVALID_TABLE| Attempting to access invalid table  \nERR_UNIQUE_CONSTRAINT| Attempting to insert a document with a unique field\nthat already exists  \n  \n### Import and export data\n\nDocLite can import data from and export data to JSON, YAML, XML and CSV files.\nFor this purpose, the Database object provides two methods, import() and\nexport().\n\n> \u26a0\ufe0f Import or export operations on very large collections may exhaust memory.\n> This feature will (probably) be improved and made more efficient for working\n> with large data sets in future.\n>\n> It is recommended to use JSON for exports you intend to reload in to a\n> DocLite database. Support for other formats is experimental.\n\n#### Importing Data\n\nThe data you want to import can be organized either in to files, where each\nfile represents a collection of multiple documents, or a directory where each\nsub-directory represents a collection and contains a number of files each\nrepresenting a single document.\n\nimport(string $path, string $format, int $mode)\n\nformat can be any of json, yaml, xml, or csv. This should also match the\nextension of the filename(s) containing your data.\n\nWhen using the csv format, the first line of a CSV file is assumed to be a\nheader line containing field names.\n\nmode can be either of the constants Database::MODE_IMPORT_COLLECTIONS or\nDatabase::MODE_IMPORT_DOCUMENTS.\n\nCollection names are inferred from the subdirectory or file names. For\nexample, /path/to/collections/users.json will import to the users collection,\nas will a sub-directory /path/to/collections/users/ when importing a\ncollection from multiple files.\n\n    \n    \n    // Create a new, empty database $db = new FileDatabase('/path/to/data.db'); // Import the contents of a directory where each file is a collection $db->import('/path/to/collections', 'json', Database::IMPORT_COLLECTIONS); // Import the contents of a directory where each sub directory is a collection // of files representing single documents. $db->import('/path/to/collections', 'json', Database::IMPORT_DOCUMENTS);\n\nWhen you import documents in to a collection, any documents which have a\nunique ID matching an existing document in the database will overwrite that\ndocument. Otherwise, new documents will be created for any documents with an\nunmatched or missing ID.\n\n> \ud83d\udca1 Each Collection import will be wrapped in a single transaction, so imports\n> are atomic per collection. You can also speed up bulk imports by setting the\n> advanced options (see below) to alter the database's synchronization and\n> rollback journal modes to something a little more permissive, if you\n> understand the implications of doing so.\n\n#### Exporting data\n\nYou can export the entire contents of one or more collections. Much like\nimporting data, you can choose whether DocLite should export this as one file\nper collection containing multiple documents, or one directory per collection\nwith one file per document.\n\nexport(string $path, string $format, int $mode, array $collections = [])\n\nformat can be any of json, yaml, xml, or csv.\n\nmode can be either of the constants Database::MODE_EXPORT_COLLECTIONS or\nDatabase::MODE_EXPORT_DOCUMENTS.\n\ncollections can be a mix of strings of collection names and/or Collection\nobjects. If this is empty, all collections in the database will be exported.\n\n    \n    \n    // Export the entire database to one file per collection in the specified // output directory. $db->export('/path/to/export', 'json', Database::EXPORT_COLLECTIONS); // Export the entire database to a directory structure with one file per document. $db->export('/path/to/export', 'json', Database::EXPORT_DOCUMENTS); // Export only the \"User\" and \"Person\" collections. // Assume Collection $persons = $db->get(\"Person\"); $db->export( '/path/to/export', 'json', Database::EXPORT_COLLECTIONS, ['User', $persons] );\n\n> \u26a0\ufe0f The XML standard imposes some restrictions on entity names. When\n> exporting to this format, DocLite will replace any invalid characters in\n> document fields with underscores. This means you may not be able to recreate\n> your document store exactly as it was should you subsequently import these\n> files in to a DocLite database.\n\n### Advanced options\n\nDocLite Database objects have a few methods for more advanced options.\n\n#### Get DocLite version\n\n    \n    \n    // Return the version of DocLite as a SemVer string, e.g. 1.0.0 $db->getVersion();\n\n#### Optimize database\n\nCall $db->optimize() to attempt database optimization. This function does not\nreturn anything, though can throw a DatabaseException if something goes wrong.\nPeriodic optimization can reduce database file size and improve performance.\n\n#### Set synchronization mode\n\nThe underlying SQLite sync mode can be set to one of the following constants\nin the Database class. See SQLite documentation for details of the\nimplications of changing this value; disabling sync can lead to data loss in\nthe event of a crash or power loss.\n\nConstant| Meaning  \n---|---  \nMODE_SYNC_OFF| Disable sync  \nMODE_SYNC_NORMAL| Normal sync Default setting  \nMODE_SYNC_FULL| Full sync  \nMODE_SYNC_EXTRA| Extra sync  \n  \nCall $db->setSyncMode(Database::MODE_CONSTANT) to set the mode. For example to\nset Full Sync mode, call $db->setSyncMode(Database::MODE_SYNC_FULL).\n\nThis function returns true on success or false on failure.\n\nCall $db->getSyncMode() to get the current mode which can be compared to one\nof the constants. The return type is int.\n\n#### Set rollback journal mode\n\nThe underlying SQLite management of the rollback journal can be set to one of\nthe following constants. See SQLite documentation for the implications of\nchanging this value; disabling the rollback journal can lead to unintended\ndata state.\n\n> \u26a0\ufe0f Warning: If you disable the rollback journal, transactions, atomic\n> commits and rollbacks will no longer work. The behaviour of transaction\n> methods on a collection in this mode is undefined and may lead to\n> unpredictable results or data corruption. You should therefore not use the\n> transaction methods in MODE_JOURNAL_NONE.\n\nConstant| Meaning  \n---|---  \nMODE_JOURNAL_NONE| Disable the rollback journal  \nMODE_JOURNAL_MEMORY| In-memory rollback journal only  \nMODE_JOURNAL_WAL| Use the write ahead log Default setting  \nMODE_JOURNAL_DELETE| Delete rollback journal at end of each transaction  \nMODE_JOURNAL_TRUNCATE| Truncate rollback journal at end of each transaction  \nMODE_JOURNAL_PERSIST| Prevent the rollback journal being deleted  \n  \nCall $db->setJournalMode(Database::MODE_CONSTANT) to set the mode. For example\nto set WAL mode, call $db->setJournalMode(Database::MODE_JOURNAL_WAL).\n\nThis function returns true on success or false on failure.\n\nCall $db->getJournalMode() to get the current mode which can be compared to\none of the constants. The return type is string.\n\n## Collections\n\n### About Collections\n\nCollections are at the heart of DocLite. A Collection represents a named group\nof documents (for example, \"Users\") and is analogous to a table in a\nstructured database.\n\n> \ud83d\udca1 Note: Collections are represented in the underlying SQLite database as\n> tables. They must therefore obey a few rules:\n>\n>   * Collection names cannot start with sqlite_\n>   * Collection names cannot start with a number.\n>   * Collection names may contain only alphanumeric characters and\n> underscores.\n>   * Collection names cannot be longer than 64 characters.\n>\n\nA Collection object is the means by which you create, find, update and delete\ndocuments.\n\nEvery document in a collection must have a unique ID. You can either supply\nthis yourself, or one will be created for you when you first instantiate a\ndocument. Auto generated IDs take the form of a v1 UUID which includes a\ntimestamp of when the document was first created.\n\n### Obtain a collection\n\nCollections are obtained from a FileDatabase or MemoryDatabase by calling the\ncollection method. If the collection does not exist, it will be automatically\ncreated.\n\n    \n    \n    $userCollection = $db->collection(\"Users\");\n\n### Create a document\n\nOnce you have a collection, create a new document by calling the collection's\nget method.\n\n    \n    \n    $newUser = $userCollection->get();\n\n### Save a document\n\nBy default, documents are returned as a DocLite Document object, which\nprovides a save() method. You can also save a document of any type by calling\nsave() on the collection with the document object as a parameter.\n\n    \n    \n    // works for DocLite Document objects $newUser->save(); // works for both DocLite documents and documents mapped to custom types $userCollection->save($newUser);\n\n### Retrieve a document\n\nget can also be used to retrieve a document by its ID.\n\n    \n    \n    $existingUser = $userCollection->get($id);\n\n### Map a document to a custom class\n\nBy default, retrieving a document will return a DocLite Document object, which\nprovides magic methods and properties for you to access and manipulate the\ndocument data. It is however also possible to create or retrieve a document as\nan object of any custom class, provided that class has either public\nproperties or getter/setter methods for the document fields you wish to\nhydrate.\n\n    \n    \n    // Get a user as an object of type CustomUser. $user = $userCollection->get($id, CustomUser::class);\n\nBy default, DocLite will look for a property called id to populate with the\ndocument's unique id. If you want to use a different property on a custom\nclass to store this id, for example because your class does not have an id\nproperty, or you are using it for something else, you can specify a custom ID\nproperty name as a third parameter to get.\n\n    \n    \n    $user = $userCollection->get($id, CustomUser::class, 'databaseId');\n\nAlternatively, you can add a public property or getter/setter to your class\ncalled docliteId and DocLite will automatically attempt to populate this\ninstead in the absence of an id property.\n\nWhile the Document class provides a built-in save() method as a convenience to\nupdate a Document in storage, documents represented as your own custom classes\nmust be saved through the collection object.\n\n    \n    \n    $userCollection->save($user);\n\nIf you are using a custom property on your class to hold the document's unique\nID, you should supply the ID as an additional parameter.\n\n    \n    \n    $userCollection->save($user, $user->getDatabaseId());\n\nFinally, when saving a document represented as a custom class, you can specify\nan optional third parameter to list any properties on the object you do not\nwant to be stored in the document. It is only necessary to do this either for\nproperties you wish to be excluded which are public / have getter/setter\nmethods, or public get methods which do not represent properties.\n\n    \n    \n    $userCollection->save($user, $user->getDatabaseId(), ['nonDatabaseField']);\n\n### Delete a document\n\nMuch like save(), there is both a convenience delete() method on DocLite\nDocument objects and a deleteDocument(object $document) method on the\ncollection itself.\n\n    \n    \n    // Works for DocLite Document objects. $user->delete(); // works for both DocLite documents and documents mapped to custom types $userCollection->deleteDocument($user);\n\n### Query a collection\n\nThe Collection object provides a range of methods to find documents by\narbitrary criteria.\n\n#### Find single document by values\n\nFind a single document where all keys match the specified values by calling\nfindOneBy.\n\n    \n    \n    $user = $userCollection->findOneBy([ 'role' => 'admin', 'name' => 'Mr Administrator', ]);\n\nfindOneBy takes optional custom class name and custom class ID field\nparameters in the same manner as get.\n\n    \n    \n    $user = $userCollection->findOneBy(['username' => 'admin'], CustomUser::class, 'databaseId');\n\nIf a document which matches the criteria cannot be found, null is returned.\n\n#### Find all matching documents by values\n\nThe function findAllBy works the same way as findOneBy but will return a\ngenerator which you can iterate over, or convert to array via PHP's\niterator_to_array function.\n\n    \n    \n    foreach($userCollection->findAllBy(['active' => true]) as $user) { ... }\n\n#### Find all documents in collection\n\nTo retrieve all documents in a collection, use findAll(). Like the previous\ntwo functions, findAll can take an optional custom classname and ID property\nas parameters.\n\n    \n    \n    foreach($userCollection->findAll() as $user) { ... }\n\n#### Advanced queries\n\nDocLite includes a powerful query building mechanism to retrieve or delete all\ndocuments in a collection matching arbitrary criteria.\n\nTo build a query, use any combination of the where(), and(), or(), limit(),\noffset() and orderBy() functions on the collection object, followed by a call\nto fetch(), delete() or count().\n\nYou can also run nested queries to group clauses together via union() (for\ngrouping clauses by OR) and intersect() (for grouping clauses by AND).\n\nYou can query a document to any depth by separating nested fields with a . dot\ncharacter, you can also add square brackets [] to the end of a field which is\na list to query all the values inside that list for any match.\n\nThe advanced queries APIs are better understood by example.\n\nFor the following code snippets, imagine each document of your user collection\nlooks like the following data example, expressed here as YAML:\n\nHere are some example queries you could run against a collection of these\ndocuments.\n\n> \ud83d\udca1 Like findAllBy(), the fetch() method returns a generator, not an array. If\n> you would like all results at once, replace fetch() with fetchArray().\n\n> \ud83d\udca1 The fetch() method on advanced queries can take a custom class name and\n> custom ID field as optional parameters, just like the findOneBy, findAllBy\n> and findAll() methods.\n\n> \ud83d\udca1 Speed up complex queries by enabling DocLite's caching feature.\n\n#### Query operators\n\nAdvanced queries support the following operators:\n\nOperator| Meaning  \n---|---  \n=| Equals, exact match  \n!=| Not equals  \n<| Less than  \n>| Greater than  \n<=| Less than or equal  \n>=| Greater than or equal  \nBETWEEN| Between two values, inclusive. Equivalent to >= AND <=  \nNOT BETWEEN| Not between two values, inclusive. Equivalent to < OR >  \nSTARTS| Text starts with  \nNOT STARTS| Text does not start with  \nENDS| Text ends with  \nNOT ENDS| Text does not end with  \nCONTAINS| Text contains  \nNOT CONTAINS| Text does not contain  \nMATCHES| Text regular expression match  \nNOT MATCHES| Text negative regular expression match  \nEMPTY| Has no value, null  \nNOT EMPTY| Has any value, not null  \n  \n### Join Collections\n\nIt is possible to join a collection to one or more other collections when\nrunning a query, to include matching results from these collections in the\ndocuments returned. This works much like a foreign key in a relational\ndatabase.\n\nFor example, if you have a users collection and a comments collection, where\nsome documents in comments contain a field user_id. You can query users and\njoin on comments, such that any documents matching in comments for the same\nuser ID will be included in the users document, under a field called comments.\n\n    \n    \n    /** * Imagine a user document like: * {\"__id\":\"1\", \"name\":\"John Smith\"} * * and a corresponding comments document like: * {\"__id\":\"5\", \"user_id\": \"1\", \"comment\":\"Hello world!\"} * * You can query the users collection with a join to retrieve an aggregated document like this: * {\"__id\":\"1\",\"name\":\"John Smith\",\"comments\":[{\"__id\":\"5\",\"comment\":\"Hello world!\"}]} */ $users = $db->collection('Users'); $comments = $db->collection(\"Comments\"); $users->where('__id', '=', '1')->join($comments, 'user_id', '__id')->fetchArray();\n\nThe Collection::join method takes the collection to join as the first\nparameter, the name of the document field in that collection to use as a\nforeign key as the second parameter, and the corresponding field in documents\nin the joining collection (e.g. Users) to match against.\n\nThe above example therefore is looking for documents in Comments where the\nfield user_id matches the field __id in Users.\n\nAs join is part of the standard query building interface on a Collection, you\ncan combine with other query operators such as where, and etc. or other joins.\n\n### Caching results\n\nDocLite can cache the results of queries to speed up retrieval of complex\nresult sets. For very simple queries, however, this may provide no benefit or\neven incur a small performance penalty, so you should only turn it on if you\nneed to.\n\nTo turn on caching for a collection, call the collection object's\nenableCache() method.\n\nLikewise, you can disable caching by calling disableCache().\n\nCache results are valid for the cache lifetime, which defaults to 60 seconds.\nYou can change the cache validity period by calling\nsetCacheLifetime($seconds). A cache lifetime of zero means cached results will\nnever expire.\n\nYou can manually flush the cache by calling clearCache().\n\n    \n    \n    $userCollection->enableCache(); // Set the cache validity period to 1 hour. $userCollection->setCacheLifetime(3600); $userCollection->disableCache(); $userCollection->clearCache();\n\nFinally, the Database object can be set to automatically prune expired entries\nwhenever the cache is queried. This behaviour is disabled by default; to\nenable auto-pruning, call enableCacheAutoPrune() on the database object.\n\n    \n    \n    $db->enableCacheAutoPrune();\n\n> \ud83d\udca1 For complex queries, the cache is very fast. If you are running a large\n> number of complex queries on a large data set and these queries are likely\n> to be repeated without the data changing in storage for the lifetime of the\n> cache, it is a good idea to make use of DocLite's caching.\n\n### Index a collection\n\nIt is possible to build indexes on any document fields inside a collection to\nspeed up queries against that field.\n\nWhen you create a collection, an index is automatically added for the internal\nID field. To add a custom index, call the addIndex method with the name of a\ndocument field.\n\n    \n    \n    $userCollection->addIndex('email');\n\nTo add a single index on multiple fields (as per a multi-column index), simply\ncall addIndex with the additional field names as separate parameters.\n\n    \n    \n    $userCollection->addIndex('first_name', 'last_name');\n\n### Unique Indexes\n\nYou can also add a unique index which acts as a constraint on the field,\nensuring that no two documents in the collection can have the same value for\nthat field or field combination.\n\n    \n    \n    $userCollection->addUniqueIndex('email');\n\nIf you attempt to add a document to a collection with a unique index and a\nvalue that already exists in the collection, a DatabaseException will be\nthrown with the code DatabaseException::ERR_UNIQUE_CONSTRAINT.\n\n> \ud83d\udca1 Note: indexes are an advanced feature which work the same way they do in\n> any other SQLite database, the only difference being they are created on\n> document fields rather than a table column. Poorly chosen indexes may\n> provide no benefit or even slow down queries.\n\n### Delete a collection\n\nTo delete all documents in a collection entirely, call the deleteAll() method.\n\n    \n    \n    $userCollection->deleteAll();\n\n### Collection transactions\n\nIt is possible to wrap a sequence of database operations inside a transaction.\nTo do this, use the Collection's beginTransaction(), commit() and rollback()\nmethods.\n\n    \n    \n    $collection = $db->collection(\"Users\"); $collection->beginTransaction(); // ...do some stuff, insert a bunch of records or whatever... // commit the results and end the transaction $collection->commit(); // or rollback the changes and end the transaction $collection->rollback();\n\n### Full text search\n\nDocLite is able to build powerful full text indexes against collections to\nallow you to search and produce a list of documents, ordered by relevance,\nwhere specified fields match some text or phrase.\n\nFull text search capability requires your PHP's libsqlite to be built with the\nFTS5 extension. Just like the JSON1 extension, this is usually bundled in to\nthe standard distribution so you probably already have it.\n\nTo search a collection, ensure you have initialized your Database with the\nfull text parameter set to true to enable this feature, then simply call the\nsearch() method on any collection, with the search phrase followed by an array\nof the names of any document fields you wish to search against.\n\n    \n    \n    $path = '/path/to/db'; $readOnly = false; $ftsEnabled = true; $timeout = 1; $db = new FileDatabase($path, $readOnly, $ftsEnabled, $timeout); $blogPosts = $db->collection(\"posts\"); $results = $blogPosts->search('apache', ['title', 'summary', 'content']);\n\nResults are automatically ordered by relevance.\n\n> \ud83d\udca1 DocLite will intelligently manage your full text indexes to keep your\n> database optimized. When you call search(), if there is no index for the set\n> of fields you are searching on, it will be created automatically on the\n> first search. If you later call search() on a superset of fields for an\n> existing index, the original index will be destroyed and a new, larger index\n> encompassing all searched fields created. This is so DocLite can use the\n> smallest possible index for all the fields you wish to search against.\n>\n> On small collections, this process is so fast you may not see an impact. If,\n> however, you have a very large collection, the recommendation is to create\n> your full text indexes by calling search() once from a separate script, so\n> that when your application first runs and calls search(), the relevant\n> indexes already exist.\n\nBecause search() is part of the standard query fetching interface on a\ncollection (same as fetch() and count()), it can be preceded by normal query\nfilters using where(), and() etc. Similar to fetch(), the search() method\nreturns a generator. You can convert the results to an array by using PHP's\niterator_to_array() function.\n\n## Documents\n\n### About Documents\n\nDocuments are a variadic structured store of data in the form of key-value\npairs, stored in the database as JSON; that is, each document inside a\ncollection can have its own freeform structure. It does not matter whether\nthis matches the structure of any other documents in the same collection, that\nis up to how your application decides to use DocLite.\n\nA document will by default be represented by the DocLite Document class,\nhowever it is also possible to create or retrieve documents from a collection\nand map them on to your own classes. See the Collection documentation for more\ndetails on this.\n\n### Getting and setting document data\n\nThe Document class provides magic get and set methods and property accessors\nfor arbitrary document keys. That is, once you have a Document from a\nCollection, you can set or read any properties you like by either method:\n\n    \n    \n    $users = $db->collection(\"Users\"); // Create a new Document with an auto generated UUID. $user = $db->get(); // Create a new property called username via a magic setter. $user->setUsername('dwgebler'); // Create a new property called password via a magic property. $user->password = password_hash(\"admin\", \\PASSWORD_DEFAULT); // Read the username property via a magic property. echo $user->username; // Read the password property via a magic getter. echo $user->getPassword(); // Properties can contain scalar values, arrays, or even other Documents and // custom objects. $user->setRoles(['user', 'admin']);\n\nThere is one small semantic difference between the magic method and property\naccess techniques; when using magic methods, the property names are converted\nfrom camelCase to snake_case, whereas direct property access is literal e.g.\n\n    \n    \n    // setter uses camel case $user->setFirstName('Dave'); // but the corresponding property created will be lower cased and snake_cased echo $user->first_name; // if you want a key in a document to be case sensitive, set it as a property only $user->FirstName = 'Dave'; // you should now use the property access to retrieve its value later on echo $user->FirstName; // This will not work and will raise a ValueError on getFooBar(), // because the method call will look for a property called foo_bar $user->FooBar = 'baz'; $user->getFooBar();\n\nThe Document class also provides two further methods, getValue and setValue,\nto query a document by nested keys using a path in dot . notation. These\nmethods can also be used to get or set fields with names which can't be\nexpressed through magic set methods or properties.\n\ngetValue() raises a ValueError if the specified path cannot be found.\n\nsetValue() will automatically create any parent properties on a nested path.\n\n    \n    \n    // This is the same as: // $address = $user->getAddress(); // $postcode = $address['postcode']; $user->getValue('address.postcode'); // Assume \"roles\" is a list, this will return an array $user->getValue('roles'); // Retrieve the first role $user->getValue('roles.0'); // Assume api_access is a dictionary of keys mapped to lists. // This will return the list of data under the /v1/users/ key // as an array. $access = $user->getValue('api_access./v1/users/'); if (!in_array('POST', $access)) { ... } // If address does not exist, it will be created with postcode as a key. $user->setValue('address.postcode', 'TE1 3ST'); // Or set a value with special characters in the name: $user->setValue('api_access./v1/users/', ['GET', 'POST']);\n\n> \ud83d\udca1 The values of document fields are arbitrary. Scalar values, arrays and\n> even objects of custom classes can all be stored in a document.\n\n### Mapping document fields to objects\n\nIf you've retrieved a document as a default Document object, it is still\npossible to map document fields which represent custom objects to custom\nclasses. To do this, use the Document's map() method and pass it a field name\n(which can use the nested dot . notation as described above), along with\neither a class name or existing object instance if you wish to populate an\nexisting object.\n\nConsider you have the following custom class in your application:\n\nAnd a User document with the following structure:\n\nWhen you initially retrieve the Document, the person key will contain an\narray. But you can map this to your Person class as follows:\n\n    \n    \n    $user = $collection->get(\"b83e319a-7887-11eb-8deb-b9e03d2e720d\"); $user->map('person', Person::class); // $user->getPerson() now returns a Person object. // Or you can map to an existing Person object. $person = new Person(); $user->map('person', $person);\n\n### Document Unique Id\n\nEvery document in the same collection must have a unique ID.\n\nBy default, when you create a new document, an ID is generated for you as a v1\nUUID.\n\nYou can get or set a Document ID with the getId() and setId(string $id)\nmethods.\n\n> \ud83d\udca1 Note: Changing a Document ID essentially treats it as a different\n> document, i.e. providing a new unique ID will result in a new document being\n> inserted in to your database when you save it. Likewise changing a\n> document's ID to the ID of another document in the collection will cause\n> that document to be overwritten.\n\nIf the ID was auto generated, you can obtain a DateTimeImmutable representing\nthe document's time of creation by calling its getTime() method:\n\n    \n    \n    $users = $db->collection(\"Users\"); // Create a new Document with an auto generated UUID. $user = $users->get(); // $date is a \\DateTimeImmutable $date = $user->getTime(); echo $date->format('d m Y H:i');\n\nIf you don't want to use an auto-generated ID for a new document, simply pass\nin your own ID to the collection's get() method. As long as the ID does not\nmatch any document in the collection's database storage, a new document will\nbe created. Document IDs are strings.\n\n    \n    \n    $users = $db->collection(\"Users\"); // Create a new Document with a custom ID. // If this ID already exists in the Users collection, that document will be returned. $user = $users->get(\"user_3815\");\n\n### Saving a document\n\nDocuments represented as a DocLite Document object provide a convenience\nmethod to save the document to its collection. To save a Document in storage,\ncall save().\n\n    \n    \n    $users = $db->collection(\"Users\"); $user = $users->get(); $user->setUsername(\"admin\"); $user->save();\n\nIf a document has been mapped on to a custom class, you will need to save it\nthrough its collection instead.\n\n    \n    \n    $users = $db->collection(\"Users\"); // Create a new document with an automatically generated UUID and // retrieved as an object of type CustomUser. $user = $users->get(null, CustomUser::class); $user->setUsername(\"admin\"); $users->save($user);\n\n### Deleting a document\n\nDocuments represented as a DocLite Document object provide a convenience\nmethod to delete the document from its collection. To delete a Document in\nstorage, call delete().\n\n    \n    \n    $users = $db->collection(\"Users\"); $user = $users->get(\"12345\"); $user->delete();\n\nIf a document has been mapped on to a custom class, you will need to delete it\nthrough its collection instead.\n\n    \n    \n    $users = $db->collection(\"Users\"); // Create a new document with an automatically generated UUID and // retrieved as an object of type CustomUser. $user = $users->get(\"12345\", CustomUser::class); $users->deleteDocument($user);\n\n### Document validation\n\nIt is possible to add JSON Schema validation to a Document via the\naddJsonSchema() method. This takes a single string parameter of a valid JSON\nschema. If the schema cannot be validated, a DatabaseException will be thrown.\n\n    \n    \n    $user->addJsonSchema(file_get_contents('schema.json'));\n\nOnce you have loaded a schema, every time you set a document property or try\nto save the document, the document data will be validated against your schema.\nIf the data fails to validate, a DatabaseException will be thrown.\n\nYou can also manually validate at any time by calling validateJsonSchema().\n\n    \n    \n    $user->addJsonSchema(file_get_contents('schema.json')); try { $user->validateJsonSchema(); // This will automatically call validateJsonSchema() anyway. $user->save(); // As will this. $user->setUsername(\"foobar\"); } catch (DatabaseException $e) { $params = $e->getParams(); $error = $params['error']; echo \"Document failed to validate against JSON Schema because:\\n\".$error; }\n\nFinally, you can unload a JSON Schema and remove the validaton by calling\nremoveJsonSchema().\n\n    \n    \n    $user->removeJsonSchema();\n\n## Other info\n\n### Symfony integration\n\nAlthough there is not a specific integration with the Symfony framework, it's\ntrivial to inject DocLite as a service in to any Symfony application. Simply\ninstall DocLite via Composer as an app dependency, then modify your\nservices.yaml as per the following example.\n\n    \n    \n    app.filedatabase: class: Gebler\\Doclite\\FileDatabase arguments: $path: \"../var/data/app.db\" $readOnly: false app.memorydatabase: class: Gebler\\Doclite\\MemoryDatabase Gebler\\Doclite\\DatabaseInterface: '@app.filedatabase' Gebler\\Doclite\\DatabaseInterface $memoryDb: '@app.memorydatabase'\n\nYou can now typehint a DatabaseInterface like any other service, using the\nalias $memoryDb as the parameter name if you'd like a MemoryDatabase.\n\n### Licensing\n\nDocLite is available under the MIT license as open source software.\n\nIf you use DocLite and find it useful, I am very grateful for any support\ntowards its future development.\n\n### Bugs, issues\n\nPlease raise an issue on the project GitHub if you encounter any problems. I\nam always interested in improving the software.\n\n### Contact the author\n\nYou can email me on info@doclite.co.uk\n\n## About\n\nPHP NoSQL database and document store\n\nwww.doclite.co.uk/\n\n### Topics\n\nphp database php7 nosql sqlite sqlite3 php8\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n75 stars\n\n### Watchers\n\n6 watching\n\n### Forks\n\n5 forks\n\nReport repository\n\n## Releases 14\n\n1.1.9 Release Latest\n\nApr 22, 2024\n\n\\+ 13 releases\n\n## Sponsor this project\n\n  * patreon.com/dwgebler\n\n## Packages 0\n\nNo packages published\n\n## Contributors 3\n\n  * dwgebler\n  * Awilum Sergey Romanenko\n  * iGusev Ilya Gusev\n\n## Languages\n\n  * PHP 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
