{"aid": "40199112", "title": "DiligentGraphics: Open-source cross-platform rendering middleware", "url": "https://github.com/DiligentGraphics/DiligentEngine", "domain": "github.com/diligentgraphics", "votes": 1, "user": "klaussilveira", "posted_at": "2024-04-29 14:54:14", "comments": 0, "source_title": "GitHub - DiligentGraphics/DiligentEngine: A modern cross-platform low-level graphics library and rendering framework", "source_text": "GitHub - DiligentGraphics/DiligentEngine: A modern cross-platform low-level\ngraphics library and rendering framework\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nDiligentGraphics / DiligentEngine Public\n\n  * Notifications\n  * Fork 313\n  * Star 3.3k\n\nA modern cross-platform low-level graphics library and rendering framework\n\ndiligentgraphics.com/diligent-engine/\n\n### License\n\nApache-2.0 license\n\n3.3k stars 313 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# DiligentGraphics/DiligentEngine\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n9 Branches\n\n54 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nTheMostDiligentUpdated FX (Coordinate Grid improvements)Apr 27, 2024a12e19d \u00b7\nApr 27, 2024Apr 27, 2024\n\n## History\n\n1,695 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| GitHub actions: use macos-14 for Emscripten build| Apr 23, 2024  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| Updated Core, Tools and Samples (CMake improvements on Linux)| Feb 5, 2024  \n  \n### DiligentCore @ ed54c11\n\n|\n\n### DiligentCore @ ed54c11\n\n| Updated Core (updated third-party CMake)| Apr 25, 2024  \n  \n### DiligentFX @ d674564\n\n|\n\n### DiligentFX @ d674564\n\n| Updated FX (Coordinate Grid improvements)| Apr 27, 2024  \n  \n### DiligentSamples @ 1ba099f\n\n|\n\n### DiligentSamples @ 1ba099f\n\n| Updated FX and Samples (added depth of field post effect)| Apr 25, 2024  \n  \n### DiligentTools @ 2200634\n\n|\n\n### DiligentTools @ 2200634\n\n| Updated tools (updated Emscripten app link flags)| Apr 23, 2024  \n  \n### Media\n\n|\n\n### Media\n\n| Updated tools and readme| Dec 1, 2022  \n  \n### Tests\n\n|\n\n### Tests\n\n| Updated test_samples.bat| Aug 19, 2022  \n  \n### .clang-format\n\n|\n\n### .clang-format\n\n| Updated modules (clang-formatted source); enabled formatting validation| Nov\n25, 2019  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Fixed issue with GetObject macro leaking from Windows headers| Jan 3, 2022  \n  \n### .gitmodules\n\n|\n\n### .gitmodules\n\n| Added DiligentFX module| Feb 10, 2019  \n  \n### CMakeLists.txt\n\n|\n\n### CMakeLists.txt\n\n| Updated core & samples; updated readme| Jun 3, 2021  \n  \n### License.txt\n\n|\n\n### License.txt\n\n| Initial commit| Oct 21, 2015  \n  \n### README.md\n\n|\n\n### README.md\n\n| Updated FX and Samples (Added Tutorial 27 - Post-Processing)| Feb 3, 2024  \n  \n### ReleaseHistory.md\n\n|\n\n### ReleaseHistory.md\n\n| Updated release history| Aug 8, 2023  \n  \n### Troubleshooting.md\n\n|\n\n### Troubleshooting.md\n\n| Updated readme (close #153); updated core| Mar 26, 2022  \n  \n### appveyor.yml\n\n|\n\n### appveyor.yml\n\n| Updated submodules + fixed appveyor build| Dec 7, 2023  \n  \n## Repository files navigation\n\n# Diligent Engine\n\nA Modern Cross-Platform Low-Level 3D Graphics Library and Rendering Framework\n\nDiligent Engine is a lightweight cross-platform graphics API abstraction\nlibrary and rendering framework. It is designed to take full advantage of\nDirect3D12, Vulkan and Metal, while supporting older platforms via Direct3D11,\nOpenGL and OpenGLES. Diligent Engine exposes common front-end API and uses\nHLSL as universal shading language on all platforms and rendering back-ends.\nPlatform-specific shader representations (GLSL, MSL, DX bytecode or SPIRV) can\nbe used with corresponding back-ends. The engine is intended to be used as\ngraphics subsystem in a game engine or any other 3D application. It is\ndistributed under Apache 2.0 license and is free to use.\n\n## Supported Platforms and Low-Level Graphics APIs\n\nPlatform| D3D11| D3D12| OpenGL/GLES| Vulkan| Metal| Build Status  \n---|---|---|---|---|---|---  \nWindows| \u2714\ufe0f| \u2714\ufe0f| \u2714\ufe0f| \u2714\ufe0f| -  \nUniversal Windows| \u2714\ufe0f| \u2714\ufe0f| -| -| -  \nLinux| -| -| \u2714\ufe0f| \u2714\ufe0f| -  \nAndroid| -| -| \u2714\ufe0f| \u2714\ufe0f| -  \nMacOS| -| -| \u2714\ufe0f| \u2714\ufe0f ^1| \u2714\ufe0f ^2  \niOS| -| -| \u2714\ufe0f| \u2714\ufe0f ^1| \u2714\ufe0f ^2  \ntvOS| -| -| -| \u2714\ufe0f ^1| \u2714\ufe0f ^2  \nEmscripten| -| -| \u2714\ufe0f| -| -  \n  \n^1 Vulkan API is not natively supported on MacOS, iOS and tvOS platforms and\nrequires a Vulkan portability implementation such as MoltenVK or gfx-\nportability.\n\n^2 Available under commercial license - please contact us for details.\n\n## Features\n\n  * Cross-platform\n\n    * Exact same client code for all supported platforms and rendering backends\n\n      * No #if defined(_WIN32) ... #elif defined(LINUX) ... #elif defined(ANDROID) ...\n      * No #if defined(D3D11) ... #elif defined(D3D12) ... #elif defined(OPENGL) ...\n    * Exact same HLSL shaders (VS, PS, GS, HS, DS, CS) run on all platforms and all back-ends\n  * High performance\n  * Modular design\n\n    * Components are clearly separated logically and physically and can be used as needed\n    * Only take what you need for your project\n  * Clear and concise API\n\n    * C/C++/C#\n    * Object-based\n    * Stateless\n  * Key graphics features:\n\n    * Automatic shader resource binding designed to leverage next-generation graphics APIs\n    * Multithreaded command buffer generation\n    * Multithreaded resource creation\n    * Automatic or explicit control over resource state transitions\n    * Descriptor and memory management\n    * Shader resource reflection\n    * Async compute and multiple command queues\n    * Ray-tracing, mesh shaders, tile shaders, bindless resources, variable rate shading, sparse resources, wave operations, and other state-of-the-art capabilities\n  * JSON-based render state description language and state packaging tool\n  * Extensive validation and error reporting\n  * Modern c++ features to make the code fast and reliable\n  * Consistent high quality is ensured by continuous integration\n\n    * Automated builds and unit testing\n    * Source code formatting validation\n    * Static analysis\n\nMinimum supported low-level API versions:\n\n  * OpenGL 4.1\n  * OpenGLES 3.0\n  * WebGL 2.0\n  * Direct3D11.1\n  * Direct3D12 with SDK version 10.0.17763.0\n  * Vulkan 1.0\n  * Metal 1.0\n\n## High-level Rendering components\n\n  * Screen-Space Reflections\n  * Atmospheric light scattering post-effect\n  * Tone mapping utilities\n  * PBR renderer\n  * Hydrogent, an implementation of the Hydra rendering API in Diligent Engine.\n  * Shadows\n  * Integration with Dear Imgui and Nuklear\n\n# Table of Contents\n\n  * Cloning the Repository\n\n    * Repository Structure\n  * Build and Run Instructions\n\n    * Win32\n    * Universal Windows Platform\n    * Linux\n    * Android\n    * MacOS\n    * iOS\n    * Emscripten\n    * Integrating Diligent Engine with Existing Build System\n    * Build Options\n    * Customizing Build\n  * Getting started with the API\n  * Render State Notation\n  * Tutorials\n  * Samples\n  * High-Level Rendering Components\n  * Products Using Diligent Engine\n  * License\n  * Contributing\n  * References\n  * Release History\n\n# Cloning the Repository\n\nThis is the master repository that contains four submodules. To get the\nrepository and all submodules, use the following command:\n\n    \n    \n    git clone --recursive https://github.com/DiligentGraphics/DiligentEngine.git\n\nWhen updating existing repository, don't forget to update all submodules:\n\n    \n    \n    git pull git submodule update --recursive\n\nIt is also a good idea to re-run CMake and perform clean rebuild after getting\nthe latest version.\n\n## Repository Structure\n\nMaster repository includes the following submodules:\n\n  * Core submodule implements Direct3D11, Direct3D12, OpenGL/GLES, and Vulkan back-ends. The module is self-contained and can be built by its own.\n  * Tools submodule contains texture loading library, asset loading library, dear imgui implementation, native application implementation, Diligent render state notation parser and offline render state packaging tool.\n  * DiligentFX is a high-level rendering framework that implements various rendering components. The module depends on Core and Tools modules.\n  * Samples submodule contains tutorials and sample applications intended to demonstrate the usage of the Diligent Engine API. The module depends on Core, Tools and DiligentFX modules.\n\n# Build and Run Instructions\n\nDiligent Engine uses CMake as a cross-platform build tool. To start using\ncmake, download the latest release (3.20 or later is required). Another build\nprerequisite is Python interpreter (3.0 or later is required). If after\nfollowing the instructions below you have build/run issues, please take a look\nat troubleshooting.\n\n## Win32\n\nBuild prerequisites:\n\n  * Windows SDK 10.0.17763.0 or later (10.0.19041.0 is required for mesh shaders)\n  * C++ build tools\n  * Visual C++ ATL Support\n\n.NET support requires .NET SDK 6.0 or later.\n\nUse either CMake GUI or command line tool to generate build files. For\nexample, to generate Visual Studio 2022 64-bit solution and project files in\nbuild/Win64 folder, navigate to the engine's root folder and run the following\ncommand:\n\n    \n    \n    cmake -S . -B ./build/Win64 -G \"Visual Studio 17 2022\" -A x64\n\nYou can generate Win32 solution that targets Win8.1 SDK using the following\ncommand:\n\n    \n    \n    cmake -D CMAKE_SYSTEM_VERSION=8.1 -S . -B ./build/Win64_8.1 -G \"Visual Studio 17 2022\" -A x64\n\nIf you use MinGW, you can generate the make files using the command below\n(note however that the functionality will be limited and that MinGW is not a\nrecommended way to build the engine):\n\n    \n    \n    cmake -S . -B ./build/MinGW -D CMAKE_BUILD_TYPE=Release -G \"MinGW Makefiles\"\n\n\u26a0\ufe0f In current implementation, full path to cmake build folder must not contain\nwhite spaces.\n\nTo enable Vulkan validation layers, you will need to download the Vulkan SDK\nand add environment variable VK_LAYER_PATH that contains the path to the Bin\ndirectory in VulkanSDK installation folder.\n\nOpen DiligentEngine.sln file in build/Win64 folder, select configuration and\nbuild the engine. Set the desired project as startup project (by default, GLTF\nViewer will be selected) and run it.\n\nBy default, sample and tutorial applications will show rendering backend\nselection dialog box. Use the following command line options to force D3D11,\nD3D12, OpenGL, or Vulkan mode: --mode d3d11, --mode d3d12, --mode gl, or\n--mode vk. If you want to run an application outside of Visual Studio\nenvironment, the application's assets folder must be set as working directory.\n(For Visual Studio, this is automatically configured by CMake). Alternatively,\nyou can navigate to the build target or install folder and run the executable\nfrom there.\n\n## Universal Windows Platform\n\nTo generate build files for Universal Windows platform, you need to define the\nfollowing two cmake variables:\n\n  * CMAKE_SYSTEM_NAME=WindowsStore\n  * CMAKE_SYSTEM_VERSION=< Windows Version >\n\nFor example, to generate Visual Studio 2019 64-bit solution and project files\nin build/UWP64 folder, run the following command from the engine's root\nfolder:\n\n    \n    \n    cmake -D CMAKE_SYSTEM_NAME=WindowsStore -D CMAKE_SYSTEM_VERSION=10.0 -S . -B ./build/UWP64 -G \"Visual Studio 17 2022\" -A x64\n\nSet the desired project as startup project (by default, GLTF Viewer will be\nselected) and run it.\n\nBy default, applications will run in D3D12 mode. You can select D3D11 or D3D12\nusing the following command line options: --mode d3d11, --mode d3d12.\n\nNote: it is possible to generate solution that targets Windows 8.1 by defining\nCMAKE_SYSTEM_VERSION=8.1 cmake variable, but it will fail to build as it will\nuse Visual Studio 2013 (v120) toolset that lacks proper c++14 support.\n\n## Linux\n\nYour Linux environment needs to be set up for c++ development. If it already\nis, make sure your c++ tools are up to date as Diligent Engine uses modern c++\nfeatures (clang 10 or later is recommended).\n\n\u26a0\ufe0f gcc 9 and above seemingly produces invalid binary code with O2 and O3\noptimization levels. To avoid crashes, optimization level is downgraded to O1\nin release configurations. It is recommended to use clang or gcc 7 or 8.\n\nYou may need to install the following packages:\n\n  1. gcc, clang, make and other essential c/c++ tools:\n\n    \n    \n    sudo apt-get update sudo apt-get upgrade sudo apt-get install build-essential\n\n  2. cmake\n\n    \n    \n    sudo apt-get install cmake\n\n  3. Other required packages:\n\n    \n    \n    sudo apt-get install libx11-dev sudo apt-get install mesa-common-dev sudo apt-get install mesa-utils sudo apt-get install libgl-dev sudo apt-get install python3-distutils sudo apt-get install libgl1-mesa-dev sudo apt-get install libxrandr-dev sudo apt-get install libxinerama-dev sudo apt-get install libxcursor-dev sudo apt-get install libxi-dev\n\nTo configure Vulkan you will also need to:\n\n  * Install latest Vulkan drivers and libraries for your GPU\n  * Install Vulkan SDK\n\n    * To make sure that you system is properly configured you can try to build and run samples from the SDK\n\nTo generate make files for debug configuration, run the following CMake\ncommand from the engine's root folder:\n\n    \n    \n    cmake -S . -B ./build -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=\"Debug\"\n\nTo build the engine, run the following command:\n\n    \n    \n    cmake --build ./build\n\nThe engine's root folder contains Visual Studio Code settings files that\nconfigure the IDE to build the engine. You can run applications directly from\nthe IDE. To run an application from the command line, the app's assets folder\nmust be current directory.\n\n## Android\n\nPlease make sure that your machine is set up for Android development. Download\nAndroid Studio, install and configure the NDK and CMake and other required\ntools. NDK r24 or later is required. If you are not using CMake version\nbundled with Android Studio, make sure your build files are properly\nconfigured. To verify that your environment is properly set up, try building\nthe teapots sample as well as Vulkan Android tutorials.\n\nOpen DiligentSamples/Android folder with Android Studio to build and run\ntutorials and samples on Android.\n\nBy default, applications will run in OpenGLES mode. To run them in Vulkan\nmode, add the following launch flags: --es mode vk (in Android Studio, go to\nRun->Edit Configurations menu)\n\n## MacOS\n\nPrerequisites:\n\n  * Xcode 14 or later\n  * Vulkan SDK 1.3.250.1 or later to enable Vulkan\n\nAfter you clone the repo, run the following command from the engine's root\nfolder to generate Xcode project:\n\n    \n    \n    cmake -S . -B ./build/MacOS -G \"Xcode\"\n\nThe project will be located in build/MacOS folder.\n\nNote that if CMake fails to find the compiler, you may need to run the\nfollowing command:\n\n    \n    \n    sudo xcode-select --reset\n\n### Configuring Vulkan Build Environment\n\nBy default there is no Vulkan implementation on MacOS. Diligent Engine loads\nVulkan dynamically and can use a Vulkan Portability implementation such as\nMoltenVK or gfx-portability. Install VulkanSDK and make sure that your system\nis properly configured as described here. In particular, you may need to\ndefine the following environment variables (assuming that Vulkan SDK is\ninstalled at /Users/MyName/VulkanSDK/1.3.250.1 and you want to use MoltenVK):\n\n    \n    \n    export VULKAN_SDK=/Users/MyName/VulkanSDK/1.3.250.1/macOS export PATH=$VULKAN_SDK/bin:$PATH export DYLD_LIBRARY_PATH=$VULKAN_SDK/lib:$DYLD_LIBRARY_PATH export VK_ICD_FILENAMES=$VULKAN_SDK/share/vulkan/icd.d/MoltenVK_icd.json export VK_LAYER_PATH=$VULKAN_SDK/share/vulkan/explicit_layer.d\n\nNote that environment variables set in the shell are not seen by the\napplications launched from Launchpad or other desktop GUI. Thus to make sure\nthat an application finds Vulkan libraries, it needs to be started from the\ncommand line. Due to the same reason, the xcode project file should also be\nopened from the shell using open command. With Xcode versions 7 and later,\nthis behavior may need to be enabled first using the following command:\n\n    \n    \n    defaults write com.apple.dt.Xcode UseSanitizedBuildSystemEnvironment -bool NO\n\nPlease refer to this page for more details.\n\n\u26a0\ufe0f DYLD_LIBRARY_PATH and LD_LIBRARY_PATH environment variables are ignored on\nMacOS unless System Integrity Protection is disabled (which generally is not\nrecommended). In order for executables to find the Vulkan library, it must be\nin rpath. If VULKAN_SDK environment variable is set and points to correct\nlocation, Diligent Engine will configure the rpath for all applications\nautomatically.\n\nLast tested Vulkan SDK version: 1.3.250.1.\n\n## iOS\n\nPrerequisites:\n\n  * Xcode 14 or later\n  * Vulkan SDK 1.3.250.1 or later to enable Vulkan\n\nRun the command below from the engine's root folder to generate Xcode project\nconfigured for iOS build:\n\n    \n    \n    cmake -S . -B ./build/iOS -DCMAKE_SYSTEM_NAME=iOS -G \"Xcode\"\n\nIf needed, you can provide iOS deployment target (11.0 or later is required)\nas well as other parameters, e.g.:\n\n    \n    \n    cmake -S . -B ./build/iOS -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 -G \"Xcode\"\n\n\u26a0\ufe0f To build for iPhone simulator, set the PLATFORM_IOS_SIMULATOR CMake flag.\nYou may also use the CMAKE_OSX_ARCHITECTURES variable to specify target\narchitecture, for example:\n\n    \n    \n    cmake -S . -B ./build/iOSSim -DCMAKE_SYSTEM_NAME=iOS -DPLATFORM_IOS_SIMULATOR=ON -DCMAKE_OSX_ARCHITECTURES=arm64 -G \"Xcode\"\n\nOpen Xcode project file in build/IOS folder and build the engine. To run the\napplications on an iOS device, you will need to set appropriate development\nteam in the project settings.\n\n### Configuring Vulkan Build Environment\n\nTo enable Vulkan on iOS, download and install the VulkanSDK. There is no\nVulkan loader on iOS, and Diligent Engine links directly with MoltenVK\nXCFramework (see MoltenVk install guide) that implements Vulkan on Metal. To\nenable Vulkan in Diligent Engine on iOS, specify the path to Vulkan SDK when\nrunning CMake, for example (assuming that Vulkan SDK is installed at\n/Users/MyName/VulkanSDK/1.3.250.1):\n\n    \n    \n    cmake -DCMAKE_SYSTEM_NAME=iOS -DVULKAN_SDK=/Users/MyName/VulkanSDK/1.3.250.1 -S . -B ./build/iOS -G \"Xcode\"\n\nBy default, the engine links with MoltenVK XCFramework located in Vulkan SDK.\nIf this is not desired or an application wants to use a specific library, it\ncan provide the full path to the library via MOLTENVK_LIBRARY CMake variable.\n\nRefer to MoltenVK user guide for more information about MoltenVK installation\nand usage.\n\nLast tested Vulkan SDK version: 1.3.250.1.\n\n## Emscripten\n\nBuild prerequisites:\n\n  * Emscripten SDK 2.0.30\n  * Ninja 1.10.2\n\nTo activate PATH and other environment variables in the current terminal\n\n    \n    \n    source ${PATH_TO_EMSDK}/emsdk/emsdk_env.sh\n\n\u26a0\ufe0f On Windows, run ${PATH_TO_EMSDK}/emsdk/emsdk_env.bat instead of source\n${PATH_TO_EMSDK}/emsdk/emsdk_env.sh\n\nTo generate project, run the following CMake command from the engine's root\nfolder:\n\n    \n    \n    emcmake cmake -S . -B ./build/Emscripten -G \"Ninja\"\n\nTo build the engine, run the following command:\n\n    \n    \n    cmake --build ./build/Emscripten\n\nTo test emscripten applications, run a basic web server\n\n    \n    \n    cd ./build/Emscripten python -m http.server\n\nOpen a browser, and navigate to http://localhost:8000\n\nFor example, the demo will be available at\n\n    \n    \n    http://localhost:8000/DiligentSamples/Tutorials/Tutorial01_HelloTriangle/Tutorial01_HelloTriangle.html\n\n## Integrating Diligent Engine with Existing Build System\n\nDiligent has modular structure, so for your project you can only use those\nsubmodules that implement the required functionality. The diagram below shows\nthe dependencies between modules.\n\n    \n    \n    Core | +------>Tools----------. | | | | V | +------->FX---------. | | | | | V V '----------------->Samples\n\nDon't forget to recursively initialize submodules if you are adding Diligent\nrepos as submodules to your project.\n\n### Your Project Uses Cmake\n\nIf your project uses CMake, adding Diligent Engine requires just few lines of\ncode. Suppose that the directory structure looks like this:\n\n    \n    \n    | +-DiligentCore +-HelloDiligent.cpp\n\nThen the following steps need to be done:\n\n  * Call add_subdirectory(DiligentCore)\n  * Add DiligentCore to the list of include directories\n  * Add dependencies on the targets implementing required rendering backends\n\nBelow is an example of a CMake file:\n\n    \n    \n    cmake_minimum_required (VERSION 3.6) project(HelloDiligent CXX) add_subdirectory(DiligentCore) add_executable(HelloDiligent WIN32 HelloDiligent.cpp) target_compile_options(HelloDiligent PRIVATE -DUNICODE -DENGINE_DLL) target_link_libraries(HelloDiligent PRIVATE Diligent-GraphicsEngineD3D11-shared Diligent-GraphicsEngineOpenGL-shared Diligent-GraphicsEngineD3D12-shared Diligent-GraphicsEngineVk-shared ) copy_required_dlls(HelloDiligent)\n\ncopy_required_dlls() is a convenience function that copies shared libraries\nnext to the executable so that the system can find and load them. Please also\ntake a look at getting started tutorials for Windows and Linux.\n\n#### Using FetchContent\n\nYou can use FetchContent to download Diligent Engine modules. The only caveat\nis that you need to specify the source directory for each module to be the\nsame as the module name, so that header files can be found. Below is an\nexample of a CMake file that uses FetchContent:\n\n    \n    \n    cmake_minimum_required (VERSION 3.6) project(HelloDiligent CXX) include(FetchContent) FetchContent_Declare( DiligentCore GIT_REPOSITORY https://github.com/DiligentGraphics/DiligentCore.git SOURCE_DIR _deps/DiligentCore ) FetchContent_Declare( DiligentTools GIT_REPOSITORY https://github.com/DiligentGraphics/DiligentTools.git SOURCE_DIR _deps/DiligentTools ) FetchContent_Declare( DiligentFX GIT_REPOSITORY https://github.com/DiligentGraphics/DiligentFX.git SOURCE_DIR _deps/DiligentFX ) FetchContent_MakeAvailable(DiligentCore DiligentTools DiligentFX) add_executable(HelloDiligent WIN32 HelloDiligent.cpp) target_include_directories(HelloDiligent PRIVATE ${diligentcore_SOURCE_DIR} ${diligenttools_SOURCE_DIR} ${diligentfx_SOURCE_DIR} ) target_compile_definitions(HelloDiligent PRIVATE UNICODE) target_link_libraries(HelloDiligent PRIVATE Diligent-BuildSettings Diligent-GraphicsEngineD3D11-shared Diligent-GraphicsEngineD3D12-shared Diligent-GraphicsEngineOpenGL-shared Diligent-GraphicsEngineVk-shared DiligentFX ) copy_required_dlls(HelloDiligent)\n\n### Your Project Does Not Use Cmake\n\nIf your project doesn't use CMake, it is recommended to build libraries with\nCMake and add them to your build system. You can download the latest build\nartifacts from GitHub.\n\nGlobal CMake installation directory is controlled by CMAKE_INTALL_PREFIX\nvariable. Note that it defaults to /usr/local on UNIX and c:/Program\nFiles/${PROJECT_NAME} on Windows, which may not be what you want. Use -D\nCMAKE_INSTALL_PREFIX=install to use local install folder instead:\n\n    \n    \n    cmake -S . -B ./build/Win64 -D CMAKE_INSTALL_PREFIX=install -G \"Visual Studio 17 2022\" -A x64\n\nTo install libraries and header files, run the following CMake command from\nthe build folder:\n\n    \n    \n    cmake --build . --target install\n\nDiligentCore installation directory will contain everything required to\nintegrate the engine:\n\n  * include subdirectory will contain all required header files. Add this directory to your include search directories.\n  * lib subdirectory will contain static libraries.\n  * bin subdirectory will contain dynamic libraries.\n\nAn easier way is to link with dynamic libraries. When linking statically, you\nwill need to list DiligentCore as well as all third-party libraries used by\nthe engine. Besides that, you will also need to specify platform-specific\nsystem libraries. For example, for Windows platform, the list of libraries\nyour project will need to link against may look like this:\n\n    \n    \n    DiligentCore.lib glslang.lib HLSL.lib OGLCompiler.lib OSDependent.lib spirv-cross-core.lib SPIRV.lib SPIRV-Tools-opt.lib SPIRV-Tools.lib glew-static.lib GenericCodeGen.lib MachineIndependent.lib dxgi.lib d3d11.lib d3d12.lib d3dcompiler.lib opengl32.lib\n\nDiligent Engine headers require one of the following platform macros to be\ndefined as 1: PLATFORM_WIN32, PLATFORM_UNIVERSAL_WINDOWS, PLATFORM_ANDROID,\nPLATFORM_LINUX, PLATFORM_MACOS, PLATFORM_IOS.\n\nYou can control which components of the engine you want to install using the\nfollowing CMake options: DILIGENT_INSTALL_CORE, DILIGENT_INSTALL_FX,\nDILIGENT_INSTALL_SAMPLES, and DILIGENT_INSTALL_TOOLS.\n\nAnother way to integrate the engine is to generate build files (such as Visual\nStudio projects) and add them to your build system. Build customization\ndescribed below can help tweak the settings for your specific needs.\n\n## Build Options\n\nAvailable CMake options are summarized in the table below:\n\nOption| Default value| Description  \n---|---|---  \nDILIGENT_NO_DIRECT3D11| No| Do not build Direct3D11 backend  \nDILIGENT_NO_DIRECT3D12| No| Do not build Direct3D12 backend  \nDILIGENT_NO_OPENGL| No| Do not build OpenGL backend  \nDILIGENT_NO_VULKAN| No| Do not build Vulkan backend  \nDILIGENT_NO_METAL| No| Do not build Metal backend  \nDILIGENT_NO_ARCHIVER| No| Do not build Archiver  \nDILIGENT_NO_RENDER_STATE_PACKAGER| No| Do not build Render State Packager tool  \nDILIGENT_ENABLE_DRACO| No| Enable Draco compression support in GLTF loader  \nDILIGENT_BUILD_TOOLS| Yes| Build Tools module  \nDILIGENT_BUILD_FX| Yes| Build FX module  \nDILIGENT_BUILD_SAMPLES| Yes| Build Samples module  \nDILIGENT_BUILD_SAMPLE_BASE_ONLY| No| Build only SampleBase project and no\nother samples/tutorials  \nDILIGENT_BUILD_TESTS| No| Build Unit Tests  \nDILIGENT_NO_GLSLANG| No| Do not build GLSLang and SPRIV-Tools  \nDILIGENT_NO_HLSL| No| Disable HLSL support in non-Direct3D backends  \nDILIGENT_NO_FORMAT_VALIDATION| No| Disable source code formatting validation  \nDILIGENT_LOAD_PIX_EVENT_RUNTIME| No| Enable PIX event support  \nDILIGENT_NVAPI_PATH| Path to NVAPI SDK  \nDILIGENT_INSTALL_CORE| Yes| Install core module  \nDILIGENT_INSTALL_TOOLS| Yes| Install tools module  \nDILIGENT_INSTALL_FX| Yes| Install FX module  \nDILIGENT_INSTALL_SAMPLES| Yes| Install Samples module  \nDILIGENT_INSTALL_PDB| No| Install program debug database  \nDILIGENT_DEAR_IMGUI_PATH| Optional path to a user-provided dear imgui project  \nDILIGENT_ARGS_DIR| Optional path to a user-provided args project  \nDILIGENT_NUKLEAR_DIR| Optional path to a user-provided nuklear project  \nDILIGENT_MSVC_COMPILE_OPTIONS| /WX| Additional MSVC compile options for all\nconfigurations  \nDILIGENT_MSVC_DEBUG_COMPILE_OPTIONS| Additional MSVC compile options for debug\nconfiguration  \nDILIGENT_MSVC_RELEASE_COMPILE_OPTIONS| /arch:AVX2| Additional MSVC compile\noptions for release configurations  \nDILIGENT_CLANG_COMPILE_OPTIONS| -Werror| Additional Clang compile options for\nall configurations  \nDILIGENT_CLANG_DEBUG_COMPILE_OPTIONS| Additional Clang compile options for\ndebug configuration  \nDILIGENT_CLANG_RELEASE_COMPILE_OPTIONS| -mavx2| Additional Clang compile\noptions for release configurations  \n  \nBy default, all back-ends available on current platform are built. To disable\nspecific back-ends, use the following options: DILIGENT_NO_DIRECT3D11,\nDILIGENT_NO_DIRECT3D12, DILIGENT_NO_OPENGL, DILIGENT_NO_VULKAN,\nDILIGENT_NO_METAL. The options can be set through cmake UI or from the command\nline as in the example below:\n\n    \n    \n    cmake -D DILIGENT_NO_DIRECT3D11=TRUE -S . -B ./build/Win64 -G \"Visual Studio 17 2022\" -A x64\n\nAdditionally, individual engine components can be enabled or disabled using\nthe following options: DILIGENT_BUILD_TOOLS, DILIGENT_BUILD_FX,\nDILIGENT_BUILD_SAMPLES. If you only want to build SampleBase project, you can\nuse DILIGENT_BUILD_SAMPLE_BASE_ONLY option.\n\nBy default Vulkan back-end is linked with glslang that enables compiling HLSL\nand GLSL shaders to SPIRV at run time. If run-time compilation is not\nrequired, glslang can be disabled with DILIGENT_NO_GLSLANG cmake option.\nAdditionally, HLSL support in non-Direct3D backends can be disabled with\nDILIGENT_NO_HLSL option. Enabling the options significantly reduces the size\nof Vulkan and OpenGL back-end binaries, which may be especially important for\nmobile applications.\n\nDiligent Engine uses clang-format to ensure consistent formatting throughout\nthe code base. The validation can be disabled using\nDILIGENT_NO_FORMAT_VALIDATION CMake option. Note that any pull request will\nfail if formatting issues are found.\n\nDiligent Engine uses extensive validation that is always enabled in Debug\nbuild. Some of the checks may be enabled in release configurations by setting\nDILIGENT_DEVELOPMENT CMake option.\n\nTo enable PIX events support, set DILIGENT_LOAD_PIX_EVENT_RUNTIME CMake flag.\n\nTo enable some advanced features on NVidia GPUs (such as native multi draw\nindirect support in Direct3D11), download NVAPI and set the\nDILIGENT_NVAPI_PATH CMake variable.\n\nDiligent Engine uses multiple third-party libraries. If an application's CMake\nfile defines any of those libraries, Diligent will use existing targets. The\napplication will need to make sure that build settings are compatible with\nDiligent.\n\n## Customizing Build\n\nDiligent Engine allows clients to customize build settings by providing\nconfiguration script file that defines the following optional cmake functions:\n\n  * custom_configure_build() - defines global build properties such as build configurations, c/c++ compile flags, link flags etc.\n  * custom_pre_configure_target() - defines custom settings for every target in the build and is called before the engine's build system starts configuring the target.\n  * custom_post_configure_target() - called after the engine's build system has configured the target to let the client override properties set by the engine.\n\nThe path to the configuration script should be provided through\nBUILD_CONFIGURATION_FILE variable when running cmake and must be relative to\nthe cmake root folder, for example:\n\n    \n    \n    cmake -D BUILD_CONFIGURATION_FILE=BuildConfig.cmake -S . -B ./build/Win64 -G \"Visual Studio 17 2022\" -A x64\n\n### Customizing global build settings with custom_configure_build() function\n\nIf defined, custom_configure_build() function is called before any build\ntarget is added. By default, cmake defines the following four configurations:\nDebug, Release, RelWithDebInfo, MinSizeRel. If you want, you can define your\nown build configurations by setting CMAKE_CONFIGURATION_TYPES variable. For\ninstance, if you want to have only two configuration: Debug and ReleaseMT, add\nthe following line to the custom_configure_build() function:\n\n    \n    \n    set(CMAKE_CONFIGURATION_TYPES Debug ReleaseMT CACHE STRING \"Configuration types: Debug, ReleaseMT\" FORCE)\n\nThe build system needs to know the list of debug and release (optimized)\nconfigurations, so the following two variables must also be set when\nCMAKE_CONFIGURATION_TYPES variable is defined:\n\n    \n    \n    set(DEBUG_CONFIGURATIONS DEBUG CACHE INTERNAL \"\" FORCE) set(RELEASE_CONFIGURATIONS RELEASEMT CACHE INTERNAL \"\" FORCE)\n\nNote that due to cmake specifics, configuration names listed in\nDEBUG_CONFIGURATIONS and RELEASE_CONFIGURATIONS must be capitalized.\n\nIf you define any configuration other than four standard cmake ones, you also\nneed to set the following variables, for every new configuration:\n\n  * CMAKE_C_FLAGS_<Config> \\- c compile flags\n  * CMAKE_CXX_FLAGS_<Config> \\- c++ compile flags\n  * CMAKE_EXE_LINKER_FLAGS_<Config> \\- executable link flags\n  * CMAKE_SHARED_LINKER_FLAGS_<Config> \\- shared library link flags\n\nFor instance:\n\n    \n    \n    set(CMAKE_C_FLAGS_RELEASEMT \"/MT\" CACHE INTERNAL \"\" FORCE) set(CMAKE_CXX_FLAGS_RELEASEMT \"/MT\" CACHE INTERNAL \"\" FORCE) set(CMAKE_EXE_LINKER_FLAGS_RELEASEMT \"/OPT:REF\" CACHE INTERNAL \"\" FORCE) set(CMAKE_SHARED_LINKER_FLAGS_RELEASEMT \"/OPT:REF\" CACHE INTERNAL \"\" FORCE)\n\nBelow is an example of custom_configure_build() function:\n\n    \n    \n    function(custom_configure_build) if(CMAKE_CONFIGURATION_TYPES) # Debug configurations set(DEBUG_CONFIGURATIONS DEBUG CACHE INTERNAL \"\" FORCE) # Release (optimized) configurations set(RELEASE_CONFIGURATIONS RELEASEMT CACHE INTERNAL \"\" FORCE) # CMAKE_CONFIGURATION_TYPES variable defines build configurations generated by cmake set(CMAKE_CONFIGURATION_TYPES Debug ReleaseMT CACHE STRING \"Configuration types: Debug, ReleaseMT\" FORCE) set(CMAKE_CXX_FLAGS_RELEASEMT \"/MT\" CACHE INTERNAL \"\" FORCE) set(CMAKE_C_FLAGS_RELEASEMT \"/MT\" CACHE INTERNAL \"\" FORCE) set(CMAKE_EXE_LINKER_FLAGS_RELEASEMT \"/OPT:REF\" CACHE INTERNAL \"\" FORCE) set(CMAKE_SHARED_LINKER_FLAGS_RELEASEMT \"/OPT:REF\" CACHE INTERNAL \"\" FORCE) endif() endfunction()\n\n### Customizing individual target build settings with\ncustom_pre_configure_target() and custom_post_configure_target() functions\n\nIf defined, custom_pre_configure_target() is called for every target created\nby the build system and allows configuring target-specific properties.\n\nBy default, the build system sets some target properties. If\ncustom_pre_configure_target() sets all required properties, it can tell the\nbuild system that no further processing is required by setting\nTARGET_CONFIGURATION_COMPLETE parent scope variable to TRUE:\n\n    \n    \n    set(TARGET_CONFIGURATION_COMPLETE TRUE PARENT_SCOPE)\n\nThe following is an example of custom_pre_configure_target() function:\n\n    \n    \n    function(custom_pre_configure_target TARGET) set_target_properties(${TARGET} PROPERTIES STATIC_LIBRARY_FLAGS_RELEASEMT /LTCG ) set(TARGET_CONFIGURATION_COMPLETE TRUE PARENT_SCOPE) endfunction()\n\nIf the client only needs to override some settings, it may define\ncustom_post_configure_target() function that is called after the engine has\ncompleted configuring the target, for example:\n\n    \n    \n    function(custom_post_configure_target TARGET) set_target_properties(${TARGET} PROPERTIES CXX_STANDARD 17 ) endfunction()\n\n# Getting started with the API\n\nPlease refer to this page. Also, tutorials and samples listed below is a good\nplace to start.\n\n# Render State Notation\n\nDiligent Render State Notation is a JSON-based language that describes\nshaders, pipeline states, resource signatures and other objects in a\nconvenient form, e.g.:\n\n    \n    \n    { \"Shaders\": [ { \"Desc\": { \"Name\": \"My Vertex shader\", \"ShaderType\": \"VERTEX\" }, \"SourceLanguage\": \"HLSL\", \"FilePath\": \"cube.vsh\" }, { \"Desc\": { \"Name\": \"My Pixel shader\", \"ShaderType\": \"PIXEL\" }, \"SourceLanguage\": \"HLSL\", \"FilePath\": \"cube.psh\", } ], \"Pipeleines\": [ { \"GraphicsPipeline\": { \"DepthStencilDesc\": { \"DepthEnable\": true }, \"RTVFormats\": { \"0\": \"RGBA8_UNORM_SRGB\" }, \"RasterizerDesc\": { \"CullMode\": \"FRONT\" }, \"BlendDesc\": { \"RenderTargets\": { \"0\": { \"BlendEnable\": true } } } }, \"PSODesc\": { \"Name\": \"My Pipeline State\", \"PipelineType\": \"GRAPHICS\" }, \"pVS\": \"My Vertex shader\", \"pPS\": \"My Pixel shader\" } ] }\n\nJSON files can be parsed dynamically at run time. Alternatively, an\napplication can use the packager tool to preprocess pipeline descriptions\n(compile shaders for target platforms, define internal resource layouts, etc.)\ninto a binary archive optimized for run-time loading performance.\n\n# Tutorials\n\nTutorial| Screenshot| Description  \n---|---|---  \n01 - Hello Triangle| This tutorial shows how to render simple triangle using\nDiligent Engine API.  \n02 - Cube| This tutorial demonstrates how to render an actual 3D object, a\ncube. It shows how to load shaders from files, create and use vertex, index\nand uniform buffers.  \n03 - Texturing| This tutorial demonstrates how to apply a texture to a 3D\nobject. It shows how to load a texture from file, create shader resource\nbinding object and how to sample a texture in the shader.  \n03 - Texturing-C| This tutorial is identical to Tutorial03, but is implemented\nusing C API.  \n03 - Texturing-DotNet| This tutorial demonstrates how to use the Diligent\nEngine API in .NET applications.  \n04 - Instancing| This tutorial demonstrates how to use instancing to render\nmultiple copies of one object using unique transformation matrix for every\ncopy.  \n05 - Texture Array| This tutorial demonstrates how to combine instancing with\ntexture arrays to use unique texture for every instance.  \n06 - Multithreading| This tutorial shows how to generate command lists in\nparallel from multiple threads.  \n07 - Geometry Shader| This tutorial shows how to use geometry shader to render\nsmooth wireframe.  \n08 - Tessellation| This tutorial shows how to use hardware tessellation to\nimplement simple adaptive terrain rendering algorithm.  \n09 - Quads| This tutorial shows how to render multiple 2D quads, frequently\nswitching textures and blend modes.  \n10 - Data Streaming| This tutorial shows dynamic buffer mapping strategy using\nMAP_FLAG_DISCARD and MAP_FLAG_DO_NOT_SYNCHRONIZE flags to efficiently stream\nvarying amounts of data to GPU.  \n11 - Resource Updates| This tutorial demonstrates different ways to update\nbuffers and textures in Diligent Engine and explains important internal\ndetails and performance implications related to each method.  \n12 - Render Target| This tutorial demonstrates how to render a 3d cube into an\noffscreen render target and do a simple post-processing effect.  \n13 - Shadow Map| This tutorial demonstrates how to render basic shadows using\na shadow map.  \n14 - Compute Shader| This tutorial shows how to implement a simple particle\nsimulation system using compute shaders.  \n15 - Multiple Windows| This tutorial demonstrates how to use Diligent Engine\nto render to multiple windows.  \n16 - Bindless Resources| This tutorial shows how to implement bindless\nresources, a technique that leverages dynamic shader resource indexing feature\nenabled by the next-gen APIs to significantly improve rendering performance.  \n17 - MSAA| This tutorial demonstrates how to use multisample anti-aliasing\n(MSAA) to make geometrical edges look smoother and more temporarily stable.  \n18 - Queries| This tutorial demonstrates how to use queries to retrieve\nvarious information about the GPU operation, such as the number of primitives\nrendered, command processing duration, etc.  \n19 - Render Passes| This tutorial demonstrates how to use the render passes\nAPI to implement simple deferred shading.  \n20 - Mesh Shader| This tutorial demonstrates how to use amplification and mesh\nshaders, the new programmable stages, to implement view frustum culling and\nobject LOD calculation on the GPU.  \n21 - Ray Tracing| This tutorial demonstrates the basics of using ray tracing\nAPI in Diligent Engine.  \n22 - Hybrid Rendering| This tutorial demonstrates how to implement a simple\nhybrid renderer that combines rasterization with ray tracing.  \n23 - Command Queues| This tutorial demonstrates how to use multiple command\nqueues to perform rendering in parallel with copy and compute operations.  \n24 - Variable Rate Shading| This tutorial demonstrates how to use variable\nrate shading to reduce the pixel shading load.  \n25 - Render State Packager| This tutorial shows how to create and archive\npipeline states with the render state packager off-line tool on the example of\na simple path tracer.  \n26 - Render State Cache| This tutorial expands the path tracing technique\nimplemented in previous tutorial and demonstrates how to use the render state\ncache to save pipeline states created at run time and load them when the\napplication starts.  \n27 - Post-Processing| This tutorial demonstrates how to use post-processing\neffects from the DiligentFX module.  \n  \n# Samples\n\nSample| Screenshot| Description  \n---|---|---  \nAtmosphere Sample| This sample demonstrates how to integrate Epipolar Light\nScattering post-processing effect into an application to render physically-\nbased atmosphere.  \nGLFW Demo| This maze mini-game demonstrates how to use GLFW to create window\nand handle keyboard and mouse input.  \nGLTF Viewer| This sample demonstrates how to use the Asset Loader and PBR\nRenderer to load and render GLTF models.  \nUSD Viewer| This sample demonstrates how to render USD files using Hydrogent,\nan implementation of the Hydra rendering API in Diligent Engine.  \nShadows| This sample demonstrates how to use the Shadowing component to render\nhigh-quality shadows.  \nDear ImGui Demo| This sample demonstrates the integration of the engine with\ndear imgui UI library.  \nNuklear Demo| This sample demonstrates the integration of the engine with\nnuklear UI library.  \nHello AR| This sample demonstrates how to use Diligent Engine in a basic\nAndroid AR application.  \nAsteroids| This sampple is a performance benchmark that renders 50,000 unique\ntextured asteroids and allows comparing performance of different rendering\nmodes.  \nUnity Integration Demo| This project demonstrates integration of Diligent\nEngine with Unity.  \n  \n# High-Level Rendering Components\n\nHigh-level rendering functionality is implemented by DiligentFX module. The\nfollowing components are now available:\n\n  * Screen-Space Reflections\n\n  * Epipolar light scattering post-effect\n\n  * Tone mapping shader utilities\n\n  * GLTF2.0 Loader and Physically-based renderer with image-based lighting.\n\n  * Hydrogent, an implementation of the Hydra rendering API in Diligent Engine.\n\n  * Shadows\n\n# Products using Diligent Engine\n\nWe would appreciate it if you could send us a link in case your product uses\nDiligent Engine.\n\n  * Large-scale terrain visualization system for pilot training simulators by Elbit Systems\n\n  * LumenRT: A Visualization and Reality Modeling Software by Bentley Systems\n\n  * Godus: An award-winning sandbox game by 22cans\n\n  * Vrmac Graphics: A cross-platform graphics library for .NET\n\n## Disclaimer\n\nDiligent Engine is an open project that may be freely used by everyone. We\nstarted it to empower the community and help people achieve their goals. Sadly\nenough, not everyone's goals are worthy. Please don't associate us with\nsuspicious projects you may find on the Web that appear to be using Diligent\nEngine. We neither can possibly track all such uses nor can we really do\nanything about them because our permissive license does not give us a lot of\nleverage.\n\n# License\n\nSee Apache 2.0 license.\n\nEach module has some third-party dependencies, each of which may have\nindependent licensing:\n\n  * Core module\n  * Tools module\n  * Samples module\n\n# Contributing\n\nTo contribute your code, submit a Pull Request to this repository. Diligent\nEngine is licensed under the Apache 2.0 license that guarantees that content\nin the DiligentEngine repository is free of Intellectual Property\nencumbrances. In submitting any content to this repository, you license that\ncontent under the same terms, and you agree that the content is free of any\nIntellectual Property claims and you have the right to license it under those\nterms.\n\nDiligent Engine uses clang-format to ensure consistent source code style\nthroughout the code base. The format is validated by CI for each commit and\npull request, and the build will fail if any code formatting issue is found.\nPlease refer to this page for instructions on how to set up clang-format and\nautomatic code formatting.\n\n# References\n\nCoding Guidelines\n\nPerformance Best Practices\n\nCode Formatting\n\n# Release History\n\nSee Release History\n\ndiligentgraphics.com\n\n## About\n\nA modern cross-platform low-level graphics library and rendering framework\n\ndiligentgraphics.com/diligent-engine/\n\n### Topics\n\ngamedev opengl graphics-engine rendering vulkan directx graphics-programming\nrenderer d3d12 d3d11 raytracing opengl-es ibl pbr graphics-library ray-tracing\n3d-engine directx11 directx12 vulkan-game-engine\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\nCustom properties\n\n### Stars\n\n3.3k stars\n\n### Watchers\n\n116 watching\n\n### Forks\n\n313 forks\n\nReport repository\n\n## Releases 21\n\nDiligent Engine - v2.5.4 Latest\n\nAug 8, 2023\n\n\\+ 20 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 12\n\n## Languages\n\n  * Batchfile 78.6%\n  * CMake 21.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
