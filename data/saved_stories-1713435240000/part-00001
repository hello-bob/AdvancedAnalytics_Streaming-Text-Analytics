{"aid": "40072876", "title": "Agents.json: a open standard for agents to interact with your website", "url": "https://github.com/lando22/agents.json", "domain": "github.com/lando22", "votes": 1, "user": "panqueca", "posted_at": "2024-04-18 04:12:34", "comments": 0, "source_title": "GitHub - lando22/agents.json", "source_text": "GitHub - lando22/agents.json\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nlando22 / agents.json Public\n\n  * Notifications\n  * Fork 0\n  * Star 4\n\n### License\n\nMIT license\n\n4 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# lando22/agents.json\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nlando22Update README.mdApr 17, 2024f7b5e14 \u00b7 Apr 17, 2024Apr 17, 2024\n\n## History\n\n11 Commits  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Apr 17, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 17, 2024  \n  \n### cover.png\n\n|\n\n### cover.png\n\n| Changed cover name| Apr 17, 2024  \n  \n## Repository files navigation\n\n# agents.json - A web framework for the future of autonomous agents\n\n## Overview\n\nagents.json is a structured configuration file designed to facilitate the\nfuture framework for autonomous AI agents in navigating and interacting with\nspecific web interfaces. It acts as a guide, providing detailed instructions\nfor agents on interacting with different elements of a web page, enabling them\nto perform tasks autonomously.\n\n## Purpose\n\nLooking ahead, AI models are slowly showing agentic behavior, and more work is\nbeing put into making semi-autonomous systems/fully autonomous systems.\nHowever, the current state of websites and web platforms are built for humans\nto interact with and not AI agents. Lots of research has been put into UI\nunderstanding with multi-modal models, but such methods can be brittle and\nexpensive.\n\nThe purpose of agents.json is to provide a clear and standardized description\nof UI interactions on a website that autonomous agents can follow. This file\nis crucial for enabling AI-driven models to understand and execute web-based\ntasks effectively, such as searching, navigating, or processing transactions\non behalf of a user. You can think of agents.json as similar to how robots.txt\ninstructs search engines to crawl your site; agents.json instructs autonomous\nagents how to use your site!\n\n## How It Works\n\nThe agents.json file outlines the interactions available on various website\npages, specifying how to interact with important UI elements. This\nstandardization helps in automating tasks that typically require human\ninteraction.\n\n## File Structure\n\nThe structure of agents.json is defined in JSON format, making it easy to read\nboth by machines and humans. Here is an example of how the agents.json might\nbe structured for a hypothetical bookstore website:\n\n    \n    \n    { \"apiVersion\": \"1.0\", \"baseUrl\": \"https://www.fake-bookstore.com\", \"pages\": { \"/search\": { \"uiInteractions\": { \"searchInput\": { \"selector\": \"#search-box\", \"description\": \"Input box for search queries\", \"agent_instructions\": \"Enter the author's name or book title here to search for books.\" }, \"searchButton\": { \"selector\": \"#search-button\", \"description\": \"Button to submit the search query\", \"agent_instructions\": \"Click this button to search for the books by the entered query.\" } } }, \"/results\": { \"uiInteractions\": { \"selectBook\": { \"selector\": \".book-item:first-child\", \"description\": \"Selects the first book in the search results\", \"agent_instructions\": \"Select the first book from the list that matches the search criteria.\" } } }, \"/book-detail\": { \"uiInteractions\": { \"addToCart\": { \"selector\": \"#add-to-cart\", \"description\": \"Adds the selected book to the shopping cart\", \"agent_instructions\": \"Use this button to add the book to the shopping cart.\" } } }, \"/cart\": { \"uiInteractions\": { \"checkout\": { \"selector\": \"#checkout-button\", \"description\": \"Proceeds to checkout\", \"agent_instructions\": \"Proceed to checkout after reviewing the cart.\" } } } } }\n\n## Key Components\n\n  * apiVersion: Specifies the version of the agents.json schema used.\n  * baseUrl: The base URL of the site where the interactions are defined.\n  * pages: A dictionary of page paths with detailed interaction specifications for each page.\n  * uiInteractions: Specifies the actionable elements within each page, including selectors, descriptions, and instructions tailored for AI agents. These should be things that an agent could interact with.\n\n## Usage Scenario\n\nImagine a general-purpose autonomous AI agent designed to assist users with\nvarious tasks. Say a user would like to purchase a book using their AI agent\nfrom the site fake-bookstore.com By accessing \"fake bookstores\" agents.json\nfile, the agent can autonomously navigate the bookstore website, search for\nbooks based on user preferences, add books to the cart, and handle the\ncheckout process. This allows the user to let it's AI agent to carry out the\ntask and the bookstore business to easily prepare its website for the future\nof AI agents by adding just one file to its site.\n\nf\n\n## Demo with a sample agent\n\nBuilding an AI agent is ultimately up to the creator and this is not a one-\nsize-fits-all as agents.json can be used in lots of ways with different\nmodels, web automation frameworks, etc.\n\nFor this demo, we will be using:\n\n  1. GPT.3.5-Turbo-0125 on the OpenAI API for our model. This will be used to read our agents.json file and generate a step-by-step action plan based on a user command.\n  2. Selenium to operate our sample website\n  3. Our sample agents.json file for our website to make it accessible to agents.\n\n## Step 1: Load the sample website\n\nYou can load the sample website with Replit Link here. Please note, that this\nis not the prettiest website or very complex, it is just meant to give users\nan idea of how a site with agents.json could work.\n\n## Step 2: Create our AI agent to interact with the demo site\n\nNext, we will use the OpenAI API to define our agent to make a plan based on\nthe users request. Our user request will ask our agent to search for a book,\nselect it and add it to a cart.\n\nHere is the OpenAI API code in Python to create a step-by-step plan:\n\n    \n    \n    import requests from openai import OpenAI client = OpenAI() # define our system prompt. Please note: this is a sample agent, developers can use different models or a different system prompt system_prompt = \"\"\"You are an autonomous AI agent tasked with interpreting user requests and using a provided `agents.json` file to plan and execute web interactions on an electric bike shop website. Based on the user's query and the defined interactions in `agents.json`, generate a JSON object detailing the steps that should be taken on the website to complete the task. User Query: \"Order the best-rated electric bike.\" agents.json content: { \"apiVersion\": \"1.0\", \"baseUrl\": \"https://www.electricbikeshop.com\", \"pages\": { \"/products\": { \"uiInteractions\": { \"sortOptions\": { \"selector\": \"#sort-by\", \"description\": \"Dropdown to sort products, e.g., by rating\", \"agent_instructions\": \"Sort the products by rating to find the best-rated bikes.\" }, \"selectProduct\": { \"selector\": \".product-item:first-child\", \"description\": \"Selects the highest rated product\", \"agent_instructions\": \"Click on the first product after sorting by highest rating.\" } } }, \"/product-detail\": { \"uiInteractions\": { \"addToCart\": { \"selector\": \"#add-to-cart\", \"description\": \"Adds the selected bike to the shopping cart\", \"agent_instructions\": \"Use this button to add the chosen electric bike to the cart.\" } } }, \"/cart\": { \"uiInteractions\": { \"checkout\": { \"selector\": \"#checkout-button\", \"description\": \"Proceeds to checkout\", \"agent_instructions\": \"Proceed to checkout after reviewing the cart.\" } } } } } Expected JSON output format: { \"task\": \"Order the best-rated electric bike\", \"steps\": [ { \"action\": \"navigate\", \"url\": \"https://www.electricbikeshop.com/products\", \"description\": \"Navigate to the products page to view all bikes.\" }, { \"action\": \"select\", \"selector\": \"#sort-by\", \"value\": \"Highest Rating\", \"description\": \"Sort the bike listings by highest rating to find the best-rated bikes.\" }, { \"action\": \"click\", \"selector\": \".product-item:first-child\", \"description\": \"Select the first bike in the list, which is the highest-rated based on the sort.\" }, { \"action\": \"click\", \"selector\": \"#add-to-cart\", \"description\": \"Add the selected highest-rated bike to the shopping cart.\" }, { \"action\": \"navigate\", \"url\": \"https://www.electricbikeshop.com/cart\", \"description\": \"Go to the cart page to review items before checkout.\" }, { \"action\": \"click\", \"selector\": \"#checkout-button\", \"description\": \"Click on the checkout button to proceed with the purchase.\" } ] } Generate a JSON plan detailing the sequence of actions that an automation script should execute to fulfill the user's request based on the agents.json file. The plan should include detailed steps such as navigating to URLs, clicking on specific selectors, entering text, and any necessary waits or checks. Ensure the output is structured and clear for automation.\"\"\" # download the agent.json file from our sample website # TODO: replace with your url from replit or other source with agents.json file agents_file = requests.get(\"https://www.<url>/agent.json\") # download agents.json with open(\"agents.json\", \"w\") as f: f.write(agents_file.json()) # use OpenAI agent to create a plan to carry out the user request and read the site agents.json, which includes instructions for how to navigate the site response = client.chat.completions.create( model=\"gpt-3.5-turbo-0125\", messages=[ { \"role\": \"system\", \"content\": system_prompt }, { \"role\": \"user\", \"content\": \"User query: Find and purchase the latest thriller novel by Author X from the Book World website.\\n\\nagents.json content:\\n\\n\" + json.dumps((open(\"agents.json\", \"r\")).read(), indent=4) # sample query with our sites agents.json } ], temperature=0.35, max_tokens=1024, top_p=1, frequency_penalty=0, presence_penalty=0, response_format={\"type\": \"json_object\" } ) # get the plan and write the actions json file, which contains a step-by-step plan from our AI agent with open(\"actions.json\", \"w\") as actions_file: actions_file.write(response.choices[0].message.content)\n\nWhich will output something along the lines of:\n\n    \n    \n    { \"baseUrl\": \"https://<your url>\", \"actions\": [ { \"description\": \"Navigate to the search page\", \"action\": \"navigate\", \"url\": \"https://<your url>.replit.dev\" }, { \"description\": \"Enter 'Shakespeare' into the search box\", \"action\": \"enter_text\", \"selector\": \"#search-box\", \"text\": \"Author X Thriller Novel\" }, { \"description\": \"Click the search button\", \"action\": \"click\", \"selector\": \"#search-button\" }, { \"description\": \"Click on the first book item from the search results\", \"action\": \"click\", \"selector\": \".book-item:first-child a\" }, { \"description\": \"Add the book to the cart\", \"action\": \"click\", \"selector\": \"#add-to-cart\" }, { \"description\": \"Go to the cart page\", \"action\": \"navigate\", \"url\": \"https://your-url/cart\" }, { \"description\": \"Proceed to checkout\", \"action\": \"click\", \"selector\": \"#checkout-button\" } ] }\n\n## Step 3: Carry out site interaction with Selenium\n\nTo carry out the task fully autonomously, you can use the following script:\n\n    \n    \n    from selenium import webdriver from selenium.webdriver.chrome.service import Service from selenium.webdriver.common.by import By from selenium.webdriver.common.keys import Keys import json import time # Load the JSON file with action definitions with open('actions.json', 'r') as file: agents = json.load(file) # Set up Chrome options options = webdriver.ChromeOptions() # Specify the path to ChromeDriver using Service s = Service('/path/to/chromedriver') # Replace '/path/to/chromedriver' with the actual path if not in PATH driver = webdriver.Chrome(service=s, options=options) # Function to perform actions def perform_action(action): if action['action'] == 'navigate': driver.get(action['url']) elif action['action'] == 'click': driver.find_element(By.CSS_SELECTOR, action['selector']).click() elif action['action'] == 'enter_text': element = driver.find_element(By.CSS_SELECTOR, action['selector']) element.clear() element.send_keys(action['text']) # Execute each action from the JSON try: for action in agents['actions']: # slow down the interactions on purpose so you can view the actions time.sleep(3) perform_action(action) finally: # Output the result or finalize the test print(driver.page_source) # You can modify this to suit what output you need, such as checking for specific elements. driver.quit()\n\nIf the plan generated by our agent was correct, this should get us to the\ncheckout page. If the model is not outputting good steps, here is a verified\nset of steps for our sample site:\n\n    \n    \n    { \"baseUrl\": \"https://<url>\", \"actions\": [ { \"description\": \"Navigate to the search page\", \"action\": \"navigate\", \"url\": \"https://<url>\" }, { \"description\": \"Enter 'Shakespeare' into the search box\", \"action\": \"enter_text\", \"selector\": \"#search-box\", \"text\": \"Author X Thriller Novel\" }, { \"description\": \"Click the search button\", \"action\": \"click\", \"selector\": \"#search-button\" }, { \"description\": \"Click on the first book item from the search results\", \"action\": \"click\", \"selector\": \".book-item:first-child a\" }, { \"description\": \"Add the book to the cart\", \"action\": \"click\", \"selector\": \"#add-to-cart\" }, { \"description\": \"Go to the cart page\", \"action\": \"navigate\", \"url\": \"<url>/cart\" }, { \"description\": \"Proceed to checkout\", \"action\": \"click\", \"selector\": \"#checkout-button\" } ] }\n\nPlease remember: The actual agent we built may be faulty at times or not\nrobust, and our sample site is incredibly basic. Remember that building the\nactual agent is not the purpose of agents.json nor is the website, the purpose\nwas the show that an agents.json file could serve as a viable way to get\nmodels to interact with web UIs.\n\n## Future Scope\n\nWhile agents.json is initially designed for web interactions, its framework\ncould be extended to other platforms and applications, such as mobile apps or\neven desktop software, wherever standardized interaction instructions can\nenhance automation. This framework could be extended to backend databases and\nAPIs.\n\n## Why use UI elements? Why not just use backend APIs?\n\nOverall, plugging directly into backend APIs would be ideal and likely easier.\nEventually, this would be a second addition to this framework. However, most\nwebsites today do not offer public-facing APIs, and even more website creators\ndo not have the resources to build a fully managed API for agents.\n\nagents.json works with websites in their current form today with minimal\nedits. This makes the framework easier to adopt and to understand.\n\n## Conclusion\n\nagents.json represents an innovative approach to enabling sophisticated\ninteractions by AI agents across web platforms. It bridges human-like\nunderstanding and machine execution, offering a scalable solution for\nautomating complex web navigation and operations.\n\n## About\n\nNo description, website, or topics provided.\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n4 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
