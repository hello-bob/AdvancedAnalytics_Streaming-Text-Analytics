{"aid": "40245998", "title": "Show HN: I built a clone of lazydocker for the web", "url": "https://github.com/will-moss/isaiah", "domain": "github.com/will-moss", "votes": 1, "user": "willmoss", "posted_at": "2024-05-03 10:10:53", "comments": 0, "source_title": "GitHub - will-moss/isaiah: Self-hostable clone of lazydocker for the web. Manage your Docker fleet with ease", "source_text": "GitHub - will-moss/isaiah: Self-hostable clone of lazydocker for the web.\nManage your Docker fleet with ease\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nwill-moss / isaiah Public\n\n  * Notifications\n  * Fork 1\n  * Star 75\n\nSelf-hostable clone of lazydocker for the web. Manage your Docker fleet with\nease\n\n### License\n\nMIT license\n\n75 stars 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# will-moss/isaiah\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n16 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nwill-mosschore(misc): removed debugging lineMay 3, 20245013388 \u00b7 May 3,\n2024May 3, 2024\n\n## History\n\n106 Commits  \n  \n### app\n\n|\n\n### app\n\n| chore(misc): removed debugging line| May 3, 2024  \n  \n### assets\n\n|\n\n### assets\n\n| docs(documentation): added screenshots of the mobile interface| Jan 4, 2024  \n  \n### examples\n\n|\n\n### examples\n\n| feat(project): added support for multi-host deployment| Feb 3, 2024  \n  \n### scripts\n\n|\n\n### scripts\n\n| chore(misc): removed an empty line| Jan 20, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| chore(git): added exception for sample.custom.css in the context of c...|\nJan 4, 2024  \n  \n### .goreleaser.yaml\n\n|\n\n### .goreleaser.yaml\n\n| First commit| Jan 4, 2024  \n  \n### .releaserc\n\n|\n\n### .releaserc\n\n| First commit| Jan 4, 2024  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| chore(release): 1.12.0 [skip ci]| May 3, 2024  \n  \n### Dockerfile\n\n|\n\n### Dockerfile\n\n| First commit| Jan 4, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| First commit| Jan 4, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| docs(readme): updated readme with the new option available for log li...|\nMay 3, 2024  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| First commit| Jan 4, 2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| First commit| Jan 4, 2024  \n  \n### yarn.lock\n\n|\n\n### yarn.lock\n\n| First commit| Jan 4, 2024  \n  \n## Repository files navigation\n\n# Isaiah\n\nSelf-hostable clone of lazydocker for the web. Manage your Docker fleet with\nease\n\nTable of Contents - Install - Configure\n\n## Table of Contents\n\n  * Introduction\n  * Features\n  * Deployment and Examples\n\n    * Deploy with Docker\n    * Deploy with Docker Compose\n    * Deploy as a standalone application\n\n      * Using an existing binary\n      * Building the binary manually\n  * Multi-node deployment\n\n    * General information\n    * Setup\n  * Multi-host deployment\n\n    * General information\n    * Setup\n  * Configuration\n  * Theming\n  * Troubleshoot\n  * Security\n  * Disclaimer\n  * Contribute\n  * Credits\n\n## Introduction\n\nIsaiah is a self-hostable service that enables you to manage all your Docker\nresources on a remote server. It is an attempt at recreating the lazydocker\ncommand-line application from scratch, while making it available as a web\napplication without compromising on the features.\n\n## Features\n\nIsaiah has all these features implemented :\n\n  * For containers :\n\n    * Bulk stop, Bulk remove, Prune\n    * Remove, Pause, Unpause, Restart, Rename, Open in browser\n    * Open a shell inside the container (from your browser)\n    * Inspect (live logs, stats, env, full configuration, top)\n  * For images :\n\n    * Prune\n    * Remove\n    * Run (create and start a container using the image)\n    * Open on Docker Hub\n    * Pull a new image (from Docker Hub)\n    * Bulk pull all latest images (from Docker Hub)\n    * Inspect (full configuration, layers)\n  * For volumes :\n\n    * Prune\n    * Remove\n    * Browse volume files (from your browser, via shell)\n    * Inspect (full configuration)\n  * For networks :\n\n    * Prune\n    * Remove\n    * Inspect (full configuration)\n  * Built-in automatic Docker host discovery\n  * Built-in authentication by master password (supplied raw or sha256-hashed)\n  * Built-in terminal emulator (with support for opening a shell on the server)\n  * Responsive for Desktop, Tablet, and Mobile\n  * Support for multiple layouts\n  * Support for custom CSS theming (with variables for colors already defined)\n  * Support for keyboard navigation\n  * Support for mouse navigation\n  * Support for search through Docker resources and container logs\n  * Support for ascending and descending sort by any supported field\n  * Support for customizable user settings (line-wrap, timestamps, prompt, etc.)\n  * Support for custom Docker Host / Context.\n  * Support for extensive configuration with .env\n  * Support for HTTP and HTTPS\n  * Support for standalone / proxy / multi-node / multi-host deployment\n\nOn top of these, one may appreciate the following characteristics :\n\n  * Written in Go (for the server) and Vanilla JS (for the client)\n  * Holds in a ~4 MB single file executable\n  * Holds in a ~4 MB Docker image\n  * Works exclusively over Websocket, with very little bandwidth usage\n  * Uses the official Docker SDK for 100% of the Docker features\n\nFor more information, read about Configuration and Deployment.\n\n## Deployment and Examples\n\n### Deploy with Docker\n\nYou can run Isaiah with Docker on the command line very quickly.\n\nYou can use the following commands :\n\n    \n    \n    # Create a .env file touch .env # Edit .env file ... # Option 1 : Run Isaiah attached to the terminal (useful for debugging) docker run \\ --env-file .env \\ -v /var/run/docker.sock:/var/run/docker.sock:ro \\ -p <YOUR-PORT-MAPPING> \\ mosswill/isaiah # Option 2 : Run Isaiah as a daemon docker run \\ -d \\ --env-file .env \\ -v /var/run/docker.sock:/var/run/docker.sock:ro \\ -p <YOUR-PORT-MAPPING> \\ mosswill/isaiah # Option 3 : Quick run with default settings docker run -v /var/run/docker.sock:/var/run/docker.sock:ro -p 3000:3000 mosswill/isaiah\n\n### Deploy with Docker Compose\n\nTo help you get started quickly, multiple example docker-compose files are\nlocated in the \"examples/\" directory.\n\nHere's a description of every example :\n\n  * docker-compose.simple.yml: Run Isaiah as a front-facing service on port 80., with environment variables supplied in the docker-compose file directly.\n\n  * docker-compose.volume.yml: Run Isaiah as a front-facing service on port 80, with environment variables supplied as a .env file mounted as a volume.\n\n  * docker-compose.ssl.yml: Run Isaiah as a front-facing service on port 443, listening for HTTPS requests, with certificate and private key provided as mounted volumes.\n\n  * docker-compose.proxy.yml: A full setup with Isaiah running on port 80, behind a proxy listening on port 443.\n\n  * docker-compose.traefik.yml: A sample setup with Isaiah running on port 80, behind a Traefik proxy listening on port 443.\n\n  * docker-compose.agent.yml: A sample setup with Isaiah operating as an Agent in a multi-node deployment.\n\n  * docker-compose.host.yml: A sample setup with Isaiah expecting to communicate with other hosts in a multi-host deployment.\n\nWhen your docker-compose file is on point, you can use the following commands\n:\n\n    \n    \n    # Option 1 : Run Isaiah in the current terminal (useful for debugging) docker-compose up # Option 2 : Run Isaiah in a detached terminal (most common) docker-compose up -d # Show the logs written by Isaiah (useful for debugging) docker logs <NAME-OF-YOUR-CONTAINER>\n\n> Warning : Always make sure that your Docker Unix socket is mounted, else\n> Isaiah won't be able to communicate with the Docker API.\n\n### Deploy as a standalone application\n\nYou can deploy Isaiah as a standalone application, either by downloading an\nexisting binary that fits your architecture, or by building the binary\nyourself on your machine.\n\n#### Using an existing binary\n\nAn install script was created to help you install Isaiah in one line, from\nyour terminal :\n\n> As always, check the content of every file you pipe in bash\n    \n    \n    curl https://raw.githubusercontent.com/will-moss/isaiah/master/scripts/remote-install.sh | bash\n\nThis script will try to automatically download a binary that matches your\noperating system and architecture, and put it in your /usr/[local/]bin/\ndirectory to ease running it. Later on, you can run :\n\n    \n    \n    # Create a new .env file touch .env # Edit .env file ... # Run Isaiah isaiah\n\nIn case you feel uncomfortable running the install script, you can head to the\nReleases, find the binary that meets your system, and install it yourself.\n\n#### Building the binary manually\n\nIn this case, make sure that your system meets the following requirements :\n\n  * You have Go 1.21 installed\n  * You have Node 20+ installed along with npm and npx\n\nWhen all the prerequisites are met, you can run the following commands in your\nterminal :\n\n> As always, check the content of everything you run inside your terminal\n    \n    \n    # Retrieve the code git clone https://github.com/will-moss/isaiah cd isaiah # Run the local install script ./scripts/local-install.sh # Move anywhere else, and create a dedicated directory cd ~ mkdir isaiah-config cd isaiah-config # Create a new .env file touch .env # Edit .env file ... # Option 1 : Run Isaiah in the current terminal isaiah # Option 2 : Run Isaiah as a background process isaiah & # Option 3 : Run Isaiah using screen screen -S isaiah isaiah <CTRL+A> <D> # Optional : Remove the cloned repository # cd <back to the cloned repository> # rm -rf ./isaiah\n\nThe local install script will try to perform a production build on your\nmachine, and move isaiah to your /usr/[local/]bin/ directory to ease running\nit. In more details, the following actions are performed :\n\n  * Local install of Babel, LightningCSS, Less, and Terser\n  * Prefixing, Transpilation, and Minification of CSS and JS assets\n  * Building of the Go source code into a single-file executable (with CSS and JS embed)\n  * Cleaning of the artifacts generated during the previous steps\n  * Removal of the previous isaiah executable, if any in /usr/[local/]bin/\n  * Moving the new isaiah executable in /usr/[local/]bin with 755 permissions.\n\nIf you encounter any issue during this process, please feel free to tweak the\ninstall script or reach out by opening an issue.\n\n## Multi-node deployment\n\nUsing Isaiah, you can manage multiple nodes with their own distinct Docker\nresources from a single dashboard.\n\nBefore delving into that part, please get familiar with the general\ninformation below.\n\n### General information\n\nYou may find these information useful during your setup and reading :\n\n  * Isaiah distinguishes two types of nodes : Master and Agent.\n  * The word node refers to any machine (virtual or not) holding Docker resources.\n  * The Master node has three responsabilities :\n\n    * Serving the web interface.\n    * Managing the Docker resources inside the environment on which it is already installed.\n    * Acting as a central proxy between the client (you) and the remote Agent nodes.\n  * The Master node has the following characteristics :\n\n    * There should be only one Master node in a multi-node deployment.\n    * The Master node should be the only part of your deployment that is publicly exposed on the network.\n  * The Agent nodes have the following characteristics :\n\n    * They are headless instances of Isaiah, and they can't exist without a Master node.\n    * As with the Master node, they have their own authentication if you don't disable it explicitly.\n    * On startup, they perform registration with their Master node using as a Websocket client\n    * For as long as the Master node is alive, a Websocket connection remains established between them.\n    * The Agent node should never be publicly exposed on the network.\n    * The Agent node never communicates with the client (you). Everything remains between the nodes.\n    * There is no limit to how many Agent nodes can connect to a Master node.\n\nIn other words, one Master acts as a Proxy between the Client and the Agents.\nFor example, when a Client wants to stop a Docker container inside an Agent,\nthe Client first requests it from Master. Then, Master forwards it to the\ndesignated Agent. When the Agent has finished, they reply to Master, and\nMaster forwards that response to the initial Client.\n\nSchematically, it looks like this :\n\n  * Client ------------> Master : Stop container C-123 on Agent AG-777\n  * Master ------------> Agent : Stop container C-123\n  * Agent ------------> Master : Container C-123 was stopped\n  * Master ------------> Client : Container C-123 was stopped on Agent AG-777\n\nNow that we understand how everything works, let's see how to set up a multi-\nnode deployment.\n\n### Setup\n\nFirst, please ensure the following :\n\n  * Your Master node is running, exposed on the network, and available in your web browser\n  * Your Agent node has Isaiah installed and configured with the following settings :\n\n    * SERVER_ROLE equal to Agent\n    * MASTER_HOST configured to reach the Master node\n    * MASTER_SECRET equal to the AUTHENTICATION_SECRET setting on the Master node, or empty when authentication is disabled\n    * AGENT_NAME equal to a unique string of your choice\n\nThen, launch Isaiah on each Agent node, and you should see logs indicating\nwhether connection with Master was established. Eventually, you will see\nMaster or The name of your agent in the lower right corner of your screen as\nagents register.\n\nIf encounter any issue, please read the Troubleshoot section.\n\n> You may want to note that you don't need to expose ports on the machine /\n> Docker container running Isaiah when it is configured as an Agent.\n\n## Multi-host deployment\n\nUsing Isaiah, you can manage multiple hosts with their own distinct Docker\nresources from a single dashboard.\n\nBefore delving into that part, please get familiar with the general\ninformation below.\n\n### General information\n\nThe big difference between multi-node and multi-host deployments is that you\nwon't need to install Isaiah on every single node if you are using multi-host.\nIn this setup, Isaiah is installed only on one server, and communicates with\nother Docker hosts directly over TCP / Unix sockets. It makes it easier to\nmanage multiple remote Docker environments without having to setup Isaiah on\nall of them.\n\nPlease note that, in a multi-host setup, there must be a direct access between\nthe main host (where Isaiah is running) and the other ones. Usually, they\nshould be on the same network, or visible through a secured gateway / VPN /\nfilesystem mount.\n\nLet's see how to set up a multi-host deployment.\n\n### Setup\n\nIn order to help you get started, a sample file was created.\n\nFirst, please ensure the following :\n\n  * Your Master host is running, exposed on the network, and available in your web browser\n  * Your Master host has the setting MULTI_HOST_ENABLED set to true.\n  * Your Master host has access to the other Docker hosts over TCP / Unix socket.\n\nSecond, please create a docker_hosts file next to Isaiah's executable, using\nthe sample file cited above:\n\n  * Every line should contain two strings separated by a single space.\n  * The first string is the name of your host, and the second string is the path to reach it.\n  * The path to your host should look like this : [PROTOCOL]://[URI]\n  * Example 1 : Local unix:///var/run/docker.sock\n  * Example 2 : Remote tcp://my-domain.tld:4382\n\n> If you're using Docker, you can mount the file at the root of the\n> filesystem, as in : docker ... -v my_docker_hosts:/docker_hosts ...\n\nFinally, launch Isaiah on the Master host, and you should see logs indicating\nwhether connection with remote hosts was established. Eventually, you will see\nMaster with The name of your host in the lower right corner of your screen.\n\n## Configuration\n\nTo run Isaiah, you will need to set the following environment variables in a\n.env file located next to your executable :\n\n> Note : Regular environment variables provided on the commandline work too\n\nParameter| Type| Description| Default  \n---|---|---|---  \nSSL_ENABLED| boolean| Whether HTTPS should be used in place of HTTP. When\nconfigured, Isaiah will look for certificate.pem and key.pem next to the\nexecutable for configuring SSL. Note that if Isaiah is behind a proxy that\nalready handles SSL, this should be set to false.| False  \nSERVER_PORT| integer| The port Isaiah listens on.| 3000  \nSERVER_MAX_READ_SIZE| integer| The maximum size (in bytes) per message that\nIsaiah will accept over Websocket. Note that, in a multi-node deployment, you\nmay need to incrase the value of that setting. (Shouldn't be modified, unless\nyour server randomly restarts the Websocket session for no obvious reason)|\n100000  \nAUTHENTICATION_ENABLED| boolean| Whether a password is required to access\nIsaiah. (Recommended)| True  \nAUTHENTICATION_SECRET| string| The master password used to secure your Isaiah\ninstance against malicious actors.| one-very-long-and-mysterious-secret  \nAUTHENTICATION_HASH| string| The master password's hash (sha256 format) used\nto secure your Isaiah instance against malicious actors. Use this setting\ninstead of AUTHENTICATION_SECRET if you feel uncomfortable providing a\ncleartext password.| Empty  \nDISPLAY_CONFIRMATIONS| boolean| Whether the web interface should display a\nconfirmation message after every succesful operation.| True  \nCOLUMNS_CONTAINERS| string| Comma-separated list of fields to display in the\nContainers panel. (Case-sensitive) (Available: ID, State, ExitCode, Name,\nImage, Created)| State,ExitCode,Name,Image  \nCOLUMNS_IMAGES| string| Comma-separated list of fields to display in the\nImages panel. (Case-sensitive) (Available: ID, Name, Version, Size)|\nName,Version,Size  \nCOLUMNS_VOLUMES| string| Comma-separated list of fields to display in the\nVolumes panel. (Case-sensitive) (Available: Name, Driver, MountPoint)|\nDriver,Name  \nCOLUMNS_NETWORKS| string| Comma-separated list of fields to display in the\nNetworks panel. (Case-sensitive) (Available: ID, Name, Driver)| Driver,Name  \nSORTBY_CONTAINERS| string| Field used to sort the rows in the Containers\npanel. (Case-sensitive) (Available: ID, State, ExitCode, Name, Image,\nCreated)| Empty  \nSORTBY_IMAGES| string| Field used to sort the rows in the Images panel. (Case-\nsensitive) (Available: ID, Name, Version, Size)| Empty  \nSORTBY_VOLUMES| string| Field used to sort the rows in the Volumes panel.\n(Case-sensitive) (Available: Name, Driver, MountPoint)| Empty  \nSORTBY_NETWORKS| string| Field used to sort the rows in the Networks panel.\n(Case-sensitive) (Available: Id, Name, Driver)| Empty  \nCONTAINER_HEALTH_STYLE| string| Style used to display the containers' health\nstate. (Available: long, short, icon)| long  \nCONTAINER_LOGS_TAIL| integer| Number of lines to retrieve when requesting the\nlast container logs| 50  \nCONTAINER_LOGS_SINCE| string| The amount of time from now to use for\nretrieving the last container logs| 60m  \nTTY_SERVER_COMMAND| string| The command used to spawn a new shell inside the\nserver where Isaiah is running| /bin/sh -i  \nTTY_CONTAINER_COMMAND| string| The command used to spawn a new shell inside the containers that Isaiah manages| /bin/sh -c eval $(grep ^$(id -un): /etc/passwd | cut -d : -f 7-) -i  \nCUSTOM_DOCKER_HOST| string| The host to use in place of the one defined by the\nDOCKER_HOST default variable| Empty  \nCUSTOM_DOCKER_CONTEXT| string| The Docker context to use in place of the\ncurrent Docker context set on the system| Empty  \nSKIP_VERIFICATIONS| boolean| Whether Isaiah should skip startup verification\nchecks before running the HTTP(S) server. (Not recommended)| False  \nSERVER_ROLE| string| For multi-node deployments only. The role of the current\ninstance of Isaiah. Can be either Master or Agent and is case-sensitive.|\nMaster  \nMASTER_HOST| string| For multi-node deployments only. The host used to reach\nthe Master node, specifying the IP address or the hostname, and the port if\napplicable (e.g. my-server.tld:3000).| Empty  \nMASTER_SECRET| string| For multi-node deployments only. The secret password\nused to authenticate on the Master node. Note that it should equal the\nAUTHENTICATION_SECRET setting on the Master node.| Empty  \nAGENT_NAME| string| For multi-node deployments only. The name associated with\nthe Agent node as it is displayed on the web interface. It should be unique\nfor each Agent.| Empty  \nMULTI_HOST_ENABLED| boolean| Whether Isaiah should be run in multi-host mode.\nWhen enabled, make sure to have your docker_hosts file next to the\nexecutable.| False  \n  \n> Note : Boolean values are case-insensitive, and can be represented via \"ON\"\n> / \"OFF\" / \"TRUE\" / \"FALSE\" / 0 / 1.\n\n> Note : To sort rows in reverse using the SORTBY_ parameters, prepend your\n> field with the minus symbol, as in -Name\n\n> Note : Use either AUTHENTICATION_SECRET or AUTHENTICATION_HASH but not both\n> at the same time.\n\n> Note : You can generate a sha256 hash using an online tool, or using the following commands : On OSX : echo -n your-secret | shasum -a 256 On Linux : echo -n your-secret | sha256sum\n\nAdditionally, once Isaiah is fully set up and running, you can open the\nParameters Manager by pressing the X key. Using this interface, you can toggle\nthe following options based on your preferences :\n\nParameter| Description  \n---|---  \nenableMenuPrompt| Whether an extra prompt should warn you before trying to\nstop / pause / restart a Docker container.  \nenableLogLinesWrap| Whether log lines streamed from Docker containers should\nbe wrapped (as opposed to extend beyond your screen).  \nenableTimestampDisplay| Whether log lines' timestamps coming from Docker\ncontainers should be displayed.  \nenableOverviewOnLaunch| Whether an overview panel should show first before\nanything when launching Isaiah in your browser.  \nenableLogLinesStrippedBackground| Whether alternated log lines should have a\nbrighter background to enhance readability.  \n  \n> Note : You must have Isaiah open in your browser and be authenticated to\n> access these options. Once set up, these options will be saved to your\n> localStorage.\n\n## Theming\n\nYou can customize Isaiah's web interface using your own custom CSS. At\nruntime, Isaiah will look for a file named custom.css right next to the\nexecutable. If this file exists, it will be loaded in your browser and it will\noverride any existing CSS rule.\n\nIn order to help you get started, a sample file was created. It shows how to\nmodify the CSS variables responsible for the colors of the interface. (All the\nvalues are the ones used by default) You can copy that file, update it, and\nrename it to custom.css.\n\nIf you're using Docker, you should mount a custom.css file at the root of your\ncontainer's filesystem. Example : docker ... -v my-custom.css:/custom.css ...\n\nFinally, you will find below a table that describes what each CSS color\nvariable means :\n\nVariable| Description  \n---|---  \ncolor-terminal-background| Background of the interface  \ncolor-terminal-base| Texts of the interface  \ncolor-terminal-accent| Elements that are interactive or must catch the\nattention  \ncolor-terminal-accent-selected| Panel's title when the panel is in focus  \ncolor-terminal-hover| Panel's rows that are in focus / hover  \ncolor-terminal-border| Panels' borders color  \ncolor-terminal-danger| The color used to convey danger / failure  \ncolor-terminal-warning| Connection indicator when connection is lost  \ncolor-terminal-accent-alternative| Connection indicator when connection is\nestablished  \ncolor-terminal-log-row-alternative| The color used as background for each odd\nrow in the logs tab  \ncolor-terminal-json-key| The color used to distinguish keys from values in the\ninspector when displaying a long configuration  \ncolor-terminal-json-value| The color used to distinguish values from keys in\nthe inspector when displaying a long configuration  \ncolor-terminal-cell-failure| Container health state when exited  \ncolor-terminal-cell-success| Container health state when running  \ncolor-terminal-cell-paused| Container health state when paused  \n  \nOn a side note, creating custom layouts using only CSS isn't implemented yet\nas it requires interaction with Javascript. That said, implementing this\nfeature should be quick and simple since the way layouts are managed currently\nis already modular.\n\nUltimately, please note that Isaiah already comes with three themes : dawn,\nmoon, and the default one. The first two themes are based on Ros\u00e9 Pine, and\nnew themes may be implemented later.\n\n## Troubleshoot\n\nShould you encounter any issue running Isaiah, please refer to the following\ncommon problems with their solutions.\n\n#### Isaiah is unreachable over HTTP / HTTPS\n\nPlease make sure that the following requirements are met :\n\n  * If Isaiah runs as a standalone application without proxy :\n\n    * Make sure your server / firewall accepts incoming connections on Isaiah's port.\n    * Make sure your DNS configuration is correct. (Usually, such record should suffice : A isaiah XXX.XXX.XXX.XXX for https://isaiah.your-server-tld)\n    * Make sure your .env file is well configured according to the Configuration section.\n  * If Isaiah runs on Docker :\n\n    * Perform the previous (standalone) verifications first.\n    * Make sure you mounted your server's Docker Unix socket onto the container that runs Isaiah (/var/run/docker.sock)\n    * Make sure your Docker container is accessible remotely\n  * If Isaiah runs behind a proxy :\n\n    * Perform the previous (standalone) verifications first.\n    * Make sure that SERVER_PORT (Isaiah's port) are well set in .env.\n    * Check your proxy forwarding rules.\n\nIn any case, the crucial part is Configuration and making sure your Docker /\nProxy setup is correct as well.\n\n#### The emulated shell behaves unconsistently or displays unexpected\ncharacters\n\nPlease note that the emulated shell works by performing the following steps :\n\n  * Open a headless terminal on the remote server / inside the remote Docker container.\n  * Capture standard output, standard error, and bind standard input to the web interface.\n  * Display standard output and standard error on the web interface as they are streamed over Websocket from the terminal.\n\nAccording to this implementation, the remote terminal never receives key\npresses. It only receives commands.\n\nAlso, the following techniques are used to try to enhance the user experience\non the web interface :\n\n  * Enable clearing the shell (HTML) screen via \"Ctrl+L\" (while the real terminal remains untouched)\n  * Enable quitting the (HTML) shell via \"Ctrl+D\" (by sending an \"exit\" command to the real terminal)\n  * Handle \"command mirror\" by appending \"# ISAIAH\" to every command sent by the user (to distinguish it from command output)\n  * Handle both \"\\r\" and \"\\n\" newline characters\n  * Use a time-based approach to detect when a command is finished if it doesn't output anything that shows clear ending\n  * Remove all escape sequences meant for coloring the terminal output\n  * Handle up and down arrow keys to cycle through commands history locally\n\nTherefore it appears that, unless we use a VNC-like solution, the emulation\ncan neither be enhanced nor use keyboard-based features (such as tab\ncompletion).\n\nUnless a contributor points the project in the right direction, and as far as\nmy skills go, I personally believe that the current implementation has reached\nits maximum potential.\n\nI leave here a few ideas that I believe could be implemented, but may require\nmore knowledge, time, testing :\n\n  * Convert escape sequences to CSS colors\n  * Wrap every command in a \"block\" (begin - command - end) to easily distinguish user-sent commands from output\n  * Sending to the real terminal the key presses captured from the web (a.k.a sending key presses to a running process)\n\nUltimately, please also note that in a multi-node / multi-host setup, the\nextra network latency and unexpected buffering from remote terminals may cause\nadditional display artifacts.\n\n#### An error happens when spawning a new shell on the server / inside a\nDocker container\n\nThe default commands used to spawn a shell, although being more or less\nstandard, may not fit your environment. In this case, please edit the\nTTY_SERVER_COMMAND and TTY_CONTAINER_COMMAND settings to define a command that\nworks better in your setup.\n\n#### The connection with the remote server randomly stops or restarts\n\nThis is a known incident that happens when the Websocket server receives a\ndata message that exceeds its maximum read size. You should be able to fix\nthat by updating the SERVER_MAX_READ_SIZE setting to a higher value (default\nis 1024 bytes). This operation shouldn't cause any problem or impact\nperformances.\n\n#### I can neither click nor use the keyboard, nothing happens\n\nIn such a case, please check the icon in the lower right corner. If you see an\norange warning symbol, it means that the connection with the server was lost.\nWhen the connection is lost, all inputs are disabled, until the connection is\nreestablished (a new attempt is performed every second).\n\n#### The interface is stuck loading indefinitely\n\nThis incident arises when a crash occurs while inside a shell or performing a\nDocker command. The quickest \"fix\" for that is to refresh your browser tab\n(Ctrl+R/Cmd+R).\n\nThe real \"fix\" (if any) could be to implement a \"timeout\" (client-side or\nserver-side) after which, the \"loading\" state is automatically discarded\n\nIf you encounter this incident consistently, please reach out by opening an\nissue so we look deeper into that part\n\n#### The web interface seems to randomly crash and restart\n\nIf you haven't already, please read about the SERVER_MAX_READ_SIZE setting in\nthe Configuration section.\n\nThat incident occurs when the Websocket messages sent from the client to the\nserver are too big. The server's reaction to overly large messages sent over\nWebsocket is to close the connection with the client. When that happens,\nIsaiah (as a client in your browser) automatically reopens a connection with\nthe server, hence explaining the \"crash-restart\" cycle.\n\n#### A feature that works on desktop is missing from the mobile user interface\n\nPlease note that you can horizontally scroll the mobile controls located in\nthe bottom part of your screen to reveal all of them. If, for any reason, you\nstill encounter a case when a feature is missing on your mobile device, please\nopen an issue indicating the browser you're using, your screen's viewport\nsize, and the model of your phone.\n\n#### In a multi-node deployment, the agent's registration with master is stuck\nloading indefinitely\n\nThis issue arises when the authentication settings between Master and Agent\nnodes are incompatible. To fix it, please make sure that :\n\n  * When authentication is enabled on Master, the Agent has a MASTER_SECRET setting defined.\n  * When authentication is disabled on Master, the Agent has no MASTER_SECRET setting defined.\n\nAlso don't forget to restart your nodes when changing settings.\n\n#### Something else\n\nPlease feel free to open an issue, explaining what happens, and describing\nyour environment.\n\n## Security\n\nDue to the very nature of Isaiah, I can't emphasize enough how important it is\nto harden your server :\n\n  * Always enable the authentication (with AUTHENTICATION_ENABLED and AUTHENTICATION_SECRET settings) unless you have your own authentication mechanism built into a proxy.\n  * Always use a long and secure password to prevent any malicious actor from taking over your Isaiah instance.\n  * You may also consider putting Isaiah on a private network accessible only through a VPN.\n\nKeep in mind that any breach or misconfiguration on your end could allow a\nmalicious actor to fully take over your server.\n\n## Disclaimer\n\nI believe that, although we're both in the open-source sphere and have all the\nbest intentions, it is important to state the following :\n\n  * Isaiah isn't a competitor or any attempt at replacing the lazydocker project. Funnily enough, I'm myself more comfortable running lazydocker through SSH rather than in a browser.\n  * I've browsed almost all the open issues on lazydocker, and tried to implement and improve what I could (hence the TTY_CONTAINER_COMMAND variable, as an example, or even the Image pulling feature).\n  * Isaiah was built from absolute zero (for both the server and the client), and was ultimately completed using knowledge from lazydocker that I'm personally missing (e.g. the container states and icons).\n  * Before creating Isaiah, I tried to \"serve lazydocker over websocket\" (trying to send keypresses to the lazydocker process, and retrieving the output via Websocket), but didn't succeed, hence the full rewrite.\n  * I also tried to start Isaiah from the lazydocker codebase and implement a web interface on top of it, but it seemed impractical or simply beyond my skills, hence the full rewrite.\n\nUltimately, thanks to the people behind lazydocker both for the amazing\nproject (that I'm using daily) and for paving the way for Isaiah.\n\nPS : Please also note that Isaiah isn't exactly 100% feature-equivalent with\nlazydocker (e.g. charts are missing) PS2 : What spurred me to build Isaiah in\nthe first place is a bunch of comments on the Reddit self-hosted community,\nstating that Portainer and other available solutions were too heavy or hard to\nuse. A Redditor said that having lazydocker over the web would be amazing, so\nI thought I'd do just that.\n\n## Contribute\n\nThis is one of my first ever open-source projects, and I'm not a Docker /\nGithub / Docker Hub / Git guru yet.\n\nIf you can help in any way, please do! I'm looking forward to learning from\nyou.\n\nFrom the top of my head, I'm sure there's already improvement to be made on :\n\n  * Terminology (using the proper words to describe technical stuff)\n  * Coding practices (e.g. writing better comments, avoiding monkey patches)\n  * Shell emulation (e.g. improving on what's done already)\n  * Release process (e.g. making explicit commits, pushing Docker images properly to Docker Hub)\n  * Github settings (e.g. using discussions, wiki, etc.)\n  * And more!\n\n## Credits\n\nHey hey ! It's always a good idea to say thank you and mention the people and\nprojects that help us move forward.\n\nBig thanks to the individuals / teams behind these projects :\n\n  * laydocker : Isaiah wouldn't exist if Lazydocker hadn't been created prior, and to say that it is an absolutely incredible and very advanced project is an understatement.\n  * Heroicons : For the great icons.\n  * Melody : For the awesome Websocket implementation in Go.\n  * GoReleaser : For the amazing release tool.\n  * The countless others!\n\nAnd don't forget to mention Isaiah if it makes your life easier!\n\n## About\n\nSelf-hostable clone of lazydocker for the web. Manage your Docker fleet with\nease\n\n### Topics\n\ndocker self-hosted\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n75 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases 16\n\n1.12.0 Latest\n\nMay 3, 2024\n\n\\+ 15 releases\n\n## Contributors 2\n\n  * will-moss Will Moss\n  * semantic-release-bot Semantic Release Bot\n\n## Languages\n\n  * JavaScript 45.1%\n  * Go 41.1%\n  * Less 7.9%\n  * HTML 4.5%\n  * Shell 1.2%\n  * CSS 0.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
