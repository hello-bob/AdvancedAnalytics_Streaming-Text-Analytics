{"aid": "40179042", "title": "Cheat sheet for moving from jQuery to vanilla JavaScript", "url": "https://tobiasahlin.com/blog/move-from-jquery-to-vanilla-javascript/", "domain": "tobiasahlin.com", "votes": 2, "user": "tie-in", "posted_at": "2024-04-27 11:06:33", "comments": 0, "source_title": "Cheat sheet for moving from jQuery to vanilla JavaScript", "source_text": "Cheat sheet for moving from jQuery to vanilla JavaScript | Tobias Ahlin\n\nTobias Ahlin\n\n  * Overview\n  * Blog\n  * Tutorials\n\nMoving Letters TypeSource SpinKit\n\n# Blog\n\n# Cheat sheet for moving from jQuery to vanilla JavaScript\n\njQuery is still a useful and pragmatic library, but chances are increasingly\nthat you\u2019re not dependent on using it in your projects to accomplish basic\ntasks like selecting elements, styling them, animating them, and fetching\ndata\u2014things that jQuery was great at. With broad browser support of ES6 (over\n96% at the time of writing), now is probably a good time to move away from\njQuery.\n\nI recently removed jQuery from this blog and found myself googling for some of\nthe patterns over and over again. To spare you the time, I\u2019ve compiled this\npractical reference guide with some of the most common jQuery patterns and\ntheir equivalents in JavaScript. We\u2019ll cover how to move over to vanilla\nJavaScript from these concepts and functions:\n\nSelecting elements Events .css() Document ready Classes .ajax() Creating\nelements HTML & text\n\n## Selecting elements#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-\nvanilla-javascript/#selecting-elements\n\nSelecting one or several DOM elements to do something with is one of the most\nbasic elements of jQuery. The equivalent to $() or jQuery() in JavaScript is\nquerySelector() or querySelectorAll(), which, just like with jQuery, you can\ncall with a CSS selector.\n\n    \n    \n    // jQuery, select all instances of .box $(\".box\"); // Instead, select the first instance of .box document.querySelector(\".box\"); // ...or select all instances of .box document.querySelectorAll(\".box\");\n\n### Running a function on all elements in a\nselection#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-vanilla-\njavascript/#running-a-function-on-all-elements-in-a-selection\n\nquerySelectorAll() returns a NodeList containing all of the elements matching\nthe query. Whereas you can run a function with jQuery on the entire selection\nof elements simply by calling the method on the jQuery object, however, you\u2019ll\nhave to iterate over the NodeList of elements using NodeList.forEach() in\nvanilla JavaScript:\n\n    \n    \n    // with jQuery // Hide all instances of .box $(\".box\").hide(); // Without jQuery // Iterate over the nodelist of elements to hide all instances of .box document.querySelectorAll(\".box\").forEach(box => { box.style.display = \"none\" })\n\n### Finding one element within another#Copyhttps://tobiasahlin.com/blog/move-\nfrom-jquery-to-vanilla-javascript/#finding-one-element-within-another\n\nA common jQuery pattern is to select an element within another element using\n.find(). You can achieve the same effect, scoping the selection to an\nelement\u2019s children, by calling querySelector or querySelectorAll on an\nelement:\n\n    \n    \n    // With jQuery // Select the first instance of .box within .container var container = $(\".container\"); // Later... container.find(\".box\"); // Without jQuery // Select the first instance of .box within .container var container = document.querySelector(\".container\"); // Later... container.querySelector(\".box\");\n\n### Traversing the tree with parent(), next(), and\nprev()#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-vanilla-\njavascript/#traversing-the-tree-with-parent-next-and-prev\n\nIf you wish to traverse the DOM to select a subling or a parent element\nrelative to another element, you can access them through nextElementSibling,\npreviousElementSibling and parentElement on that element:\n\n    \n    \n    // with jQuery // Return the next, previous, and parent element of .box $(\".box\").next(); $(\".box\").prev(); $(\".box\").parent(); // Without jQuery // Return the next, previous, and parent element of .box var box = document.querySelector(\".box\"); box.nextElementSibling; box.previousElementSibling; box.parentElement;\n\n## Working with events#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-\nvanilla-javascript/#working-with-events\n\nThere\u2019s a myriad of ways to listen to events in jQuery, but whether you\u2019re\nusing .on(), .bind(), .live or .click(), you\u2019ll make do with the JavaScript\nequivalent .addEventListener:\n\n    \n    \n    // With jQuery $(\".button\").click(function(e) { /* handle click event */ }); $(\".button\").mouseenter(function(e) { /* handle click event */ }); $(document).keyup(function(e) { /* handle key up event */ }); // Without jQuery document.querySelector(\".button\").addEventListener(\"click\", (e) => { /* ... */ }); document.querySelector(\".button\").addEventListener(\"mouseenter\", (e) => { /* ... */ }); document.addEventListener(\"keyup\", (e) => { /* ... */ });\n\n### Event listening for dynamically added\nelements#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-vanilla-\njavascript/#event-listening-for-dynamically-added-elements\n\njQuery\u2019s .on() method enables you to work with \u201clive\u201d event handlers, where\nyou listen to events on objects that get dynamically added to the DOM. To\naccomplish something similar without jQuery you can attach the event handler\non an element as you add it to the DOM:\n\n    \n    \n    // With jQuery // Handle click events .search-result elements, // even when they're added to the DOM programmatically $(\".search-container\").on(\"click\", \".search-result\", handleClick); // Without jQuery // Create and add an element to the DOM var searchElement = document.createElement(\"div\"); document.querySelector(\".search-container\").appendChild(searchElement); // Add an event listener to the element searchElement.addEventListener(\"click\", handleClick);\n\n### Triggering and creating events#Copyhttps://tobiasahlin.com/blog/move-from-\njquery-to-vanilla-javascript/#triggering-and-creating-events\n\nThe equivalent to manually triggering events with trigger() can be achieved by\ncalling dispatchEvent(). The dispatchEvent() method can be invoked on any\nelement, and takes an Event as the first argument:\n\n    \n    \n    // With jQuery // Trigger myEvent on document and .box $(document).trigger(\"myEvent\"); $(\".box\").trigger(\"myEvent\"); // Without jQuery // Create and dispatch myEvent document.dispatchEvent(new Event(\"myEvent\")); document.querySelector(\".box\").dispatchEvent(new Event(\"myEvent\"));\n\n## Styling elements#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-\nvanilla-javascript/#styling-elements\n\nIf you\u2019re calling .css() on an element to change its inline CSS with jQuery,\nyou\u2019d use .style in JavaScript and assign values to its different properties\nto achieve the same effect:\n\n    \n    \n    // With jQuery // Select .box and change text color to #000 $(\".box\").css(\"color\", \"#000\"); // Without jQuery // Select the first .box and change its text color to #000 document.querySelector(\".box\").style.color = \"#000\";\n\nWith jQuery, you can pass an object with key-value pairs to style many\nproperties at once. In JavaScript you can set the values one at a time, or set\nthe entire style string:\n\n    \n    \n    // With jQuery // Pass multiple styles $(\".box\").css({ \"color\": \"#000\", \"background-color\": \"red\" }); // Without jQuery // Set color to #000 and background to red var box = document.querySelector(\".box\"); box.style.color = \"#000\"; box.style.backgroundColor = \"red\"; // Set all styles at once (and override any existing styles) box.style.cssText = \"color: #000; background-color: red\";\n\n### hide() and show()#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-\nvanilla-javascript/#hide-and-show\n\nThe .hide() and .show() convenience methods are equivalent to accessing the\n.style property and setting display to none and block:\n\n    \n    \n    // With jQuery // Hide and show and element $(\".box\").hide(); $(\".box\").show(); // Without jQuery // Hide and show an element by changing \"display\" to block and none document.querySelector(\".box\").style.display = \"none\"; document.querySelector(\".box\").style.display = \"block\";\n\n## Document ready#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-\nvanilla-javascript/#document-ready\n\nIf you need to wait for the DOM to fully load before e.g. attaching events to\nobjects in the DOM, you\u2019d typically use $(document).ready() or the common\nshort-hand $() in jQuery. We can easily construct a similar function to\nreplace it with by listening to DOMContentLoaded:\n\n    \n    \n    // With jQuery $(document).ready(function() { /* Do things after DOM has fully loaded */ }); // Without jQuery // Define a convenience method and use it var ready = (callback) => { if (document.readyState != \"loading\") callback(); else document.addEventListener(\"DOMContentLoaded\", callback); } ready(() => { /* Do things after DOM has fully loaded */ });\n\n## Working with classes#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-\nvanilla-javascript/#working-with-classes\n\nYou can easily access and work with classes through the classList property to\ntoggle, replace, add, and remove classes:\n\n    \n    \n    // With jQuery // Add, remove, and the toggle the \"focus\" class $(\".box\").addClass(\"focus\"); $(\".box\").removeClass(\"focus\"); $(\".box\").toggleClass(\"focus\"); // Without jQuery // Add, remove, and the toggle the \"focus\" class var box = document.querySelector(\".box\"); box.classList.add(\"focus\"); box.classList.remove(\"focus\"); box.classList.toggle(\"focus\");\n\nIf you want to remove or add multiple classes you can just pass multiple\narguments to .add() and .remove():\n\n    \n    \n    // Add \"focus\" and \"highlighted\" classes, and then remove them var box = document.querySelector(\".box\"); box.classList.add(\"focus\", \"highlighted\"); box.classList.remove(\"focus\", \"highlighted\");\n\nIf you\u2019re toggling two classes that are mutually exclusive, you can access the\nclassList property and call .replace() to replace one class with another:\n\n    \n    \n    // Remove the \"focus\" class and add \"blurred\" document.querySelector(\".box\").classList.replace(\"focus\", \"blurred\");\n\n### Checking if an element has a class#Copyhttps://tobiasahlin.com/blog/move-\nfrom-jquery-to-vanilla-javascript/#checking-if-an-element-has-a-class\n\nIf you only want to run a function depending on if an element has a certain\nclass, you can replace jQuery\u2019s .hasClass() with .classList.contains():\n\n    \n    \n    // With jQuery // Check if .box has a class of \"focus\", and do something if ($(\".box\").hasClass(\"focus\")) { // Do something... } // Without jQuery // Check if .box has a class of \"focus\", and do something if (document.querySelector(\".box\").classList.contains(\"focus\")) { // Do something... }\n\n## Network requests with .get() or\n.ajax()#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-vanilla-\njavascript/#network-requests-with-get-or-ajax\n\nfetch() lets you create network requests in a similar fashion to jQuery\u2019s\najax() and get() methods. fetch() takes a URL as an argument, and returns a\nPromise that you can use to handle the response:\n\n    \n    \n    // With jQuery $.ajax({ url: \"data.json\" }).done(function(data) { // ... }).fail(function() { // Handle error }); // Without jQuery fetch(\"data.json\") .then(data => { // Handle data }).catch(error => { // Handle error });\n\n## Creating elements#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-\nvanilla-javascript/#creating-elements\n\nIf you want to dynamically create an element in JavaScript to add to the DOM\nyou can call createElement() on document and pass it a tag name to indicate\nwhat element you want to create:\n\n    \n    \n    // Create a div & span $(\"<div/>\"); $(\"<span/>\"); // Create a div and a span document.createElement(\"div\"); document.createElement(\"span\");\n\nIf you want to add some content to those elements, you can simply set the\ntextContent property, or create a text node with createTextNode and append it\nto the element:\n\n    \n    \n    var element = document.createElement(\"div\"); element.textContent = \"Text\" // or create a textNode and append it var text = document.createTextNode(\"Text\"); element.appendChild(text);\n\n## Updating the DOM#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-\nvanilla-javascript/#updating-the-dom\n\nIf you\u2019re looking to change the text of an element or to add new elements to\nthe DOM chances are that you\u2019ve come across innerHTML(), but using it may\nexpose you to cross-site scripting (XSS) attacks. Although you can work around\nit and sanitize the HTML, there are some safer alternatives.\n\nIf you\u2019re only looking to read or update the text of an element, you can use\nthe textContent property of an object to return the current text, or update\nit:\n\n    \n    \n    // With jQuery // Update the text of a .button $(\".button\").text(\"New text\"); // Read the text of a .button $(\".button\").text(); // Returns \"New text\" // Without jQuery // Update the text of a .button document.querySelector(\".button\").textContent = \"New text\"; // Read the text of a .button document.querySelector(\".button\").textContent; // Returns \"New text\"\n\nIf you\u2019re constructing a new element, you can then add that element to another\nelement by using the method on the parent appendChild():\n\n    \n    \n    // Create div element and append it to .container $(\".container\").append($(\"<div/>\")); // Create a div and append it to .container var element = document.createElement(\"div\"); document.querySelector(\".container\").appendChild(element);\n\nPut together, here\u2019s how to create a div, update its text and class, and add\nit to the DOM:\n\n    \n    \n    // Create a div var element = document.createElement(\"div\"); // Update its class element.classList.add(\"box\"); // Set its text element.textContent = \"Text inside box\"; // Append the element to .container document.querySelector(\".container\").appendChild(element);\n\n## In summary#Copyhttps://tobiasahlin.com/blog/move-from-jquery-to-vanilla-\njavascript/#in-summary\n\nThis is by no means a comprehensive guide to any of the native JavaScript\nmethods utilized here, but I hope it\u2019s been helpful a guide if you\u2019re looking\nto move away from jQuery. In summary, here are the methods that we\u2019ve covered:\n\n  * Selecting elements with querySelector and querySelectorAll\n  * Listening for events with addEventListener\n  * Updating CSS and styles through style property\n  * Working with classes through the classList property\n  * AJAX requests with fetch\n  * Triggering events with dispatchEvent\n  * Creating elements with createElement\n  * Updating text through the textContent property\n  * Adding elements to the DOM with appendChild\n\n## Published in:\n\njavascript / tutorial\n\n21/07/2019\n\n## Subscribe.\n\n### Get new posts delivered to your inbox\n\nThey're not frequent, promise \u270c\ufe0f you can also subscribe to the RSS feed.\n\n## Say hi.\n\nhello@ tobiasahlin.com\n\nI love to design and make things. I used to make things at Spotify and\nMinecraft, and am currently a design engineer at GitHub. Say hi!\n\nTobias Ahlin Bjerrome Stockholm, Sweden\n\n", "frontpage": false}
