{"aid": "40220963", "title": "Show HN: Domain Driven Design Template in Golang", "url": "https://github.com/sklinkert/go-ddd", "domain": "github.com/sklinkert", "votes": 1, "user": "sklinkert", "posted_at": "2024-05-01 08:50:40", "comments": 0, "source_title": "GitHub - sklinkert/go-ddd: Go Domain Driven Design Template / Reference", "source_text": "GitHub - sklinkert/go-ddd: Go Domain Driven Design Template / Reference\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nsklinkert / go-ddd Public\n\n  * Notifications\n  * Fork 11\n  * Star 76\n\nGo Domain Driven Design Template / Reference\n\n### License\n\nMIT license\n\n76 stars 11 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# sklinkert/go-ddd\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nsklinkertseller controller: add dto and mapper to not expose domain entities\nt...May 1, 2024e2206fe \u00b7 May 1, 2024May 1, 2024\n\n## History\n\n80 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Create dependabot.yml| Jan 16, 2024  \n  \n### cmd/marketplace\n\n|\n\n### cmd/marketplace\n\n| product creation via command| Aug 13, 2023  \n  \n### internal\n\n|\n\n### internal\n\n| seller controller: add dto and mapper to not expose domain entities t...|\nMay 1, 2024  \n  \n### vendor\n\n|\n\n### vendor\n\n| Bump gorm.io/gorm from 1.25.9 to 1.25.10| Apr 29, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| .gitignore: exclude idea/| Aug 13, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Aug 11, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| README.md: soft delete| Apr 27, 2024  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| Bump gorm.io/gorm from 1.25.9 to 1.25.10| Apr 29, 2024  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| Bump gorm.io/gorm from 1.25.9 to 1.25.10| Apr 29, 2024  \n  \n## Repository files navigation\n\n# Go-DDD: Domain Driven Design Template in Golang\n\nWelcome to go-ddd, a reference implementation/template repository\ndemonstrating the Domain Driven Design (DDD) approach in Golang. This project\naims to help developers and architects understand the DDD structure,\nespecially in the context of Go, and how it can lead to cleaner, more\nmaintainable, and scalable codebases.\n\n## Overview\n\nDomain-Driven Design is a methodology and design pattern used to build complex\nenterprise software by connecting the implementation to an evolving model. go-\nddd showcases this by setting up a simple marketplace where Sellers can sell\nProducts.\n\n### Why DDD?\n\n  * Ubiquitous Language: Promotes a common language between developers and stakeholders.\n  * Isolation of Domain Logic: The domain logic is separate from the infrastructure and application layers, promoting SOLID principles.\n  * Scalability: Allows for easier microservices architecture transitions.\n\n## Repository Structure\n\n  * domain: The heart of the software, representing business logic and rules.\n\n    * entities: Fundamental objects within our system, like Product and Seller. Contains basic validation logic.\n  * application: Contains use-case specific operations that interact with the domain layer.\n  * infrastructure: Supports the higher layers with technical capabilities like database access.\n\n    * db: Database access and models.\n    * repositories: Concrete implementations of our storage needs.\n  * interface: The external layer which interacts with the outside world, like API endpoints.\n\n    * api/rest: Handlers or controllers for managing HTTP requests and responses.\n\n## Further principles\n\n  * Domain\n\n    * Must not depend on other layers.\n    * Provides infrastructure with interfaces, but must not access infrastructure.\n    * Implements business logic and rules.\n    * Executes validations on entities. Validated entities are passed to the infrastructure layer.\n    * Domain layer sets defaults of entities (e.g. uuid for ID or creation timestamp). Don't set defaults in the infrastructure layer or even database!\n    * Do not leak domain objects to the outside world.\n  * Application\n\n    * The glue code between the domain and infrastructure layer.\n  * Infrastructure\n\n    * Repositories are responsible for translating a domain entity to a database model and retrieving it. No business logic is executed here.\n    * Implements interfaces defined by the domain layer.\n    * Implements persistence logic like accessing a postgres or mysql database.\n    * When writing to storage, read written data before returning it. This ensures that the data is written correctly.\n\n## Best Practices\n\n  * Don't return validated entities from read methods in the repository. Instead, return the domain entity type directly.\n\n    * Validations might change in the future, and you don't want to change all the data in your database.\n    * Otherwise, you won't be able to read data from the database that was written with a different validation logic.\n  * Don't put default values (e.g current timestamp or ID) in the database. Set them in the domain layer (factory!) for several reasons:\n\n    * It's quite dangerous to have two sources of truth.\n    * It's easier to test the domain layer.\n    * Databases can get replaced, and you don't want to have to change all your default values.\n  * Always read the entity after write in the infrastructure layer.\n\n    * This ensures that the data is written correctly, and we are never operating on stale data.\n  * find vs get:\n\n    * find methods can return null or an empty list.\n    * get methods must return a value. If the value is not found, throw an error.\n  * Deletion: Always use soft deletion. Create a deleted_at column in your database and set it to the current timestamp when deleting an entity. This way, you can always restore the entity if needed.\n\n## Getting Started\n\n  1. Clone this repository:\n\n    \n    \n    git clone https://github.com/sklinkert/go-ddd.git cd go-ddd go mod download go run ./...\n\n### Contributions\n\nContributions, issues, and feature requests are welcome! Feel free to check\nthe issues page.\n\n### License\n\nDistributed under the MIT License. See LICENSE for more information.\n\n### Acknowledgments\n\nEric Evans, for introducing Domain-Driven Design.\n\n## About\n\nGo Domain Driven Design Template / Reference\n\n### Topics\n\ngo golang template web reference ddd architecture domain-driven-design domain\nddd-architecture gorm-orm\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n76 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n11 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * sklinkert Simon Klinkert\n  * dependabot[bot]\n\n## Languages\n\n  * Go 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
