{"aid": "40104677", "title": "Api2Pdf: PDF Generation, Powered by Serverless", "url": "https://www.api2pdf.com/", "domain": "api2pdf.com", "votes": 2, "user": "njrc9", "posted_at": "2024-04-21 11:02:11", "comments": 0, "source_title": "Api2Pdf: HTML to PDF API, Word to PDF, Merge PDFs on AWS Lambda", "source_text": "Api2Pdf: HTML to PDF API, Word to PDF, Merge PDFs on AWS Lambda\n\n# PDF Generation, Powered by Serverless\n\nWe make the experience of generating PDFs for application developers not\ncompletely miserable. Get started in minutes using our ridiculously powerful\nREST API.\n\nTry It Out Get Started\n\n    \n    \n    #python example import requests import json api_key = 'your-api-key' endpoint = 'https://v2.api2pdf.com/chrome/pdf/html' html_to_convert = '<p>Hello World</p>' api_response = requests.post(endpoint, json={'html': html_to_convert}, headers={'Authorization': api_key}) print(json.loads(api_response.content)['FileUrl'])\n\n# Features\n\nPDF Generation\n\nConvert HTML and URLs to PDF format with Headless Chrome or wkhtmltopdf\n\nLearn more\n\nDocument Conversion\n\nConvert images and Microsoft Office documents (Word, Powerpoint) to PDF format\nwith LibreOffice\n\nLearn more\n\nMerge PDFs Together\n\nCombine multiple PDF files into a single PDF\n\nLearn more\n\nBarcodes\n\nGenerare barcodes and QR codes with Zebra Xing\n\nLearn more\n\n# Try It Out\n\n  * HTML\n  * URL\n  * Office Document\n\nConvert HTML to PDF with Headless Chrome\n\nConvert a URL to PDF with Headless Chrome\n\nConvert an Office Document to PDF with LibreOffice\n\nPlease Check Recaptcha\n\n# Generate PDFs at Massive Scale on Serverless Architecture\n\nMission Statement\n\nApi2Pdf\u2019s mission statement: Make the experience of generating PDFs for\napplication developers not completely miserable.\n\nGenerating PDFs should be fast, cheap, and have no limitations. Popular\nlibraries and APIs like iTextSharp, PDFCrowd, and DocRaptor are unreasonably\nexpensive. You shouldn\u2019t have to break the bank to convert HTML to PDF on\nGoogle Cloud Run.\n\nTransparency\n\nOur other promise to our customers is transparency. Most API services out\nthere do not publicize what PDF rendering engines they use under the hood. We\nare the opposite - we are proud to share with you that we offer the tools you\nalready use: wkhtmltopdf, Headless Chrome, and LibreOffice. The problem that\nmost application developers run into is that since so many websites are moving\nto cloud hosting environments, running these PDF engines have an added layer\nof complexity. It is not trivial, for example, to run wkhtmltopdf on Heroku.\nOn top of that, it is not cost effective either. Wkhtmltopdf on Google Cloud\nRun in a docker container is the perfect use-case for HTML to PDF conversion\nand URL to PDF conversion. However, configuring wkhtmltopdf and Headless\nChrome on Google Cloud Run can take up valuable time and resources from your\ndevelopment team. That is why we did the heavy lifting for you.\n\nApi2Pdf also provides the much beloved LibreOffice on Google Cloud Run in a\ndocker container. LibreOffice is fantastic because it allows you to convert\ndozens of file types to PDF including Word to PDF, PowerPoint to PDF, Excel to\nPDF, and Publisher to PDF. Besides Microsoft Office documents, it is capable\nof converting images too, such as JPEG, PNG, GIF, and BMP. But in actuality,\nit can convert any file that can be opened in LibreOffice to PDF. For example,\nTXT to PDF and EML to PDF is possible. Any file that can be reasonably printed\nis a candidate for the LibreOffice endpoint.\n\nMerging PDFs is another challenge - and one that most of the PDF generation\nAPI services do not provide solutions for. Api2Pdf helps you merge pdfs on\nGoogle Cloud Run by passing the endpoint a list of URLs to existing PDFs.\nApi2Pdf will consume those PDFs and combine them all together in the order you\nspecified. Merging PDFs together is quite CPU intensive, and so offloading\nthis to a serverless architecture can reduce the load on your web application.\n\nAnd last, but not least, the barcode generation API is a nice-to-have. PDFs\nand barcodes go well together. Printing invoices and receipts to PDF with\nwkhtmltopdf or Headless Chrome and including a barcode is a very common task\nthat our customers perform.\n\nHTML to PDF Use Cases\n\nHere are just some of the common use cases for converting HTML to PDF with\nwkhtmltopdf or Headless Chrome.\n\n  * Print invoice or receipt to PDF\n  * Print a packing slip or shipping label to PDF\n  * Generate a PDF of an eBook or shopping catalogue\n  * Create executive and financial reports in PDF format\n  * Data visualization in PDF format with HighCharts or AnyChart\n  * Convert a website to print friendly format\n  * Print applications and nominations to PDF\n  * Convert emails to PDF for law firms and legal documentation\n  * Convert resumes and job applications to PDF\n\nIf you have another HTML to PDF use case, we would love to hear about it.\n\nSupported Programming Languages\n\nApi2Pdf is a REST API. This means that you can use the API with any\nprogramming language. Our documentation for the service lives on our\nSwaggerHub account here. However, we do offer client libraries to generate\nPDFs in Python, PHP, and C#. More are coming soon.\n\nWe hope you enjoy our product. If you have any questions, do not hesitate to\nreach out. Thank you.\n\n  * Documentation\n  * Pricing\n  * Enterprise\n  * FAQ\n  * Portal\n  * Contact Us\n  * Blog\n  * Twitter / News / Status\n  * Alternatives\n  * Terms of Service\n  * Privacy Policy\n  * Multilingual Guides\n\nAPI2PDF 4401 Fairfax Drive STE 200 Arlington VA 22204\n\n\u00a9 2020 \u2014 api2pdf TM\n\n", "frontpage": false}
