{"aid": "40187708", "title": "Show HN: A simple Golang CP/M emulator that can run Zork", "url": "https://github.com/skx/cpmulator", "domain": "github.com/skx", "votes": 1, "user": "stevekemp", "posted_at": "2024-04-28 11:14:11", "comments": 0, "source_title": "GitHub - skx/cpmulator: Golang CP/M emulator for playing zork, lighthouse-of-doom, etc", "source_text": "GitHub - skx/cpmulator: Golang CP/M emulator for playing zork, lighthouse-of-\ndoom, etc\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nskx / cpmulator Public\n\n  * Notifications\n  * Fork 0\n  * Star 3\n\nGolang CP/M emulator for playing zork, lighthouse-of-doom, etc\n\n### License\n\nMIT license\n\n3 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# skx/cpmulator\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n6 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nskxAdded $SIMPLE_CHAR to disable the output rewritingApr 28, 2024ea3983d \u00b7 Apr\n28, 2024Apr 28, 2024\n\n## History\n\n90 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Untaint github runners directories| Apr 15, 2024  \n  \n### ccp\n\n|\n\n### ccp\n\n| Whitespace fix; nothing functional| Apr 21, 2024  \n  \n### cpm\n\n|\n\n### cpm\n\n| Added $SIMPLE_CHAR to disable the output rewriting| Apr 28, 2024  \n  \n### dist\n\n|\n\n### dist\n\n| Add CCP - and more! (#35)| Apr 20, 2024  \n  \n### fcb\n\n|\n\n### fcb\n\n| Allowing the Aztec C-compiler to work - SysCallWriteRand was broken (#48|\nApr 24, 2024  \n  \n### io\n\n|\n\n### io\n\n| Starting to get MBASIC.com to work (#51)| Apr 28, 2024  \n  \n### memory\n\n|\n\n### memory\n\n| Add CCP - and more! (#35)| Apr 20, 2024  \n  \n### samples\n\n|\n\n### samples\n\n| Allowing the Aztec C-compiler to work - SysCallWriteRand was broken (#48|\nApr 24, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Added trivial workflows| Apr 14, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Added license; MIT| Apr 9, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Added $SIMPLE_CHAR to disable the output rewriting| Apr 28, 2024  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| Mention my CCP additions| Apr 21, 2024  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| Mention my CCP additions| Apr 21, 2024  \n  \n### main.go\n\n|\n\n### main.go\n\n| Ensure we have a persistent current-drive (#42)| Apr 21, 2024  \n  \n## Repository files navigation\n\n# cpmulator - A CP/M emulator written in golang\n\nThis repository contains a CP/M emulator, with integrated CCP, which is\nprimarily designed to launch simple CP/M binaries:\n\n  * The project was created to run a text-based adventure game I wrote a few years ago, to amuse my child.\n\n    * This was written in Z80 assembly language and initially targeted at CP/M, although it was later ported to the ZX Spectrum.\n  * Over time it has become more functional:\n\n    * It can now run ZORK 1, 2, & 3, as well as The Hitchhiker's guide to the galaxy and other similar games.\n\nI've implemented enough of the BIOS functions to run simple binaries,\nincluding Microsoft BASIC, but I've not implemented any notion of disk-based\naccess. (i.e. Opening, reading/writing, and closing files is absolutely fine,\nbut any API call that refers to tracks, sectors, or disks will fail.)\n\nA companion repository contains a collection of vintage CP/M software you can\nuse with this, or any other, emulator:\n\n  * https://github.com/skx/cpm-dist\n\n# Installation\n\nThis emulator is written using golang, so if you have a working golang\ntoolchain you can install in the standard way:\n\n    \n    \n    go install github.com/skx/cpmulator@latest\n\nIf you were to clone this repository to your local system you could then build\nand install by running:\n\n    \n    \n    go install .\n\nIf neither of these options are suitable you may download the latest binary\nfrom our release page.\n\n# Usage\n\nIf you launch cpmulator with no arguments then the integrated CCP (\"console\ncommand processor\") will be launched, dropping you into a familiar shell:\n\n    \n    \n    $ cpmulator A>dir A: LICENSE . | README .MD | CPMULATO. | GO .MOD A: GO .SUM | MAIN .GO | RET .COM A>TYPE LICENSE The MIT License (MIT) .. A>\n\nYou can terminate the CCP by pressing Ctrl-C, or typing EXIT. The following\nbuilt-in commands are available:\n\nYou can also launch a binary directly by specifying it's path upon the\ncommand-line, followed by any optional arguments that the binary accepts or\nrequires:\n\n    \n    \n    $ cpmulator /path/to/binary [optional-args]\n\n## Sample Binaries\n\nI've placed some games within the dist/ directory, to make it easier for you\nto get started:\n\n    \n    \n    $ cd dist/ $ cpmulator ZORK1.COM ZORK I: The Great Underground Empire Copyright (c) 1981, 1982, 1983 Infocom, Inc. All rights reserved. ZORK is a registered trademark of Infocom, Inc. Revision 88 / Serial number 840726 West of House You are standing in an open field west of a white house, with a boarded front door. There is a small mailbox here. >\n\nA companion repository contains a larger collection of vintage CP/M software\nyou can use with this emulator:\n\n  * https://github.com/skx/cpm-dist\n\n## Drives vs. Directories\n\nBy default when you launch cpmulator with no arguments you'll be presented\nwith the CCP interface, with A: as the current drive. In this mode A:, B:, C:,\nand all other drives, will refer to the current-working directory where you\nlaunched the emulator from (i.e. they have the same view of files). This is\nperhaps the most practical way to get started, but it means that files are\nunique across drives:\n\n  * i.e. \"A:FOO\" is the same as \"B:FOO\", and if you delete \"C:FOO\" you'll find it has vanished from all drives.\n\n    * In short \"FOO\" will exist on drives A: all the way through to P:.\n\nIf you prefer you may configure drives to be distinct, each drive referring to\na distinct sub-directory upon the host system (i.e. the machine you're running\non):\n\n    \n    \n    $ mkdir A/ ; touch A/LS.COM ; touch A/FOO.COM $ mkdir B/ ; touch B/DU.COM ; touch B/BAR.COM $ mkdir G/ ; touch G/ME.COM ; touch G/BAZ.COM\n\nNow if you launch the emulator you'll see only the files which should be\nvisible on the appropriate drive:\n\n    \n    \n    $ cpmulator -directories A>DIR A: A: FOO .COM | LS .COM A>DIR B: B: BAR .COM | DU .COM A>DIR G: G: BAZ .COM | ME .COM A>DIR E: No file\n\nA companion repository contains a larger collection of vintage CP/M software\nyou can use with this emulator:\n\n  * https://github.com/skx/cpm-dist\n\nThis is arranged into subdirectories, on the assumption you'll run with the\n-directories flag, and the drives are thus used as a means of organization.\nFor example you might want to look at games, on the G: drive, or the BASIC\ninterpreters on the B: drive:\n\n    \n    \n    frodo ~/Repos/github.com/skx/cpm-dist $ cpmulator -directories A>dir No file A>g: G>dir *.com G: HITCH .COM | LEATHER .COM | LIHOUSE .COM | PLANET .COM G: ZORK1 .COM | ZORK2 .COM | ZORK3 .COM G>dir b:*.com B: MBASIC .COM | OBASIC .COM | TBASIC .COM\n\nNote that it isn't currently possibly to point different drives to arbitrary\npaths on your computer, but that might be considered if you have a use-case\nfor it.\n\n## Debugging Failures & Tweaking Behaviour\n\nWhen an unimplemented BIOS call is attempted the program it will abort with a\nfatal error, for example:\n\n    \n    \n    $ ./cpmulator FOO.COM {\"time\":\"2024-04-14T15:39:34.560609302+03:00\", \"level\":\"ERROR\", \"msg\":\"Unimplemented syscall\", \"syscall\":255, \"syscallHex\":\"0xFF\"} Error running FOO.COM: UNIMPLEMENTED\n\nThere is integrated support for logging the functions that were executed\nsuccessfully, along with other internal details. To see the log set the\nenvironmental variable DEBUG to a non-empty value, which will trigger output\nto STDERR where you can save it.\n\nThe console-I/O is blocking by default, but that can be changed by setting the\nenvironmental variable NON_BLOCK to any non-empty value. This will increase\nCPU load (as it essentially causes the process to run in a busy-loop testing\nfor pending console input).\n\nHere is the complete list of environmental variables which influence\nbehaviour:\n\nVariable| Purpose  \n---|---  \nDEBUG| Send a log of CP/M syscalls to STDERR  \nNON_BLOCK| Avoid blocking for console input, instead poll in a busy-loop  \nSIMPLE_CHAR| Avoid the attempted VT52 output conversion.  \n  \n## Sample Programs\n\nYou'll see some Z80 assembly programs beneath samples which are used to check\nmy understanding. If you have the pasmo compiler enabled you can build them\nall by running \"make\", in case you don't I've also committed the generated\nbinaries.\n\n# Credits\n\n  * Much of the functionality of this repository comes from the excellent Z80 emulator library it is using, written by @koron-go.\n  * The CCP comes from my fork of the original cpm-fat\n\n    * However this is largely unchanged from the original CCP from Digital Research, although I did add the CLS, EXIT, HALT & QUIT built-in commands.\n\nWhen I was uncertain of how to implement a specific system call the following\ntwo emulators were also useful:\n\n  * https://github.com/ivanizag/iz-cpm\n\n    * Portable CP/M emulation to run CP/M 2.2 binaries for Z80.\n\n      * Has a handy \"download\" script to fetch some CP/M binaries, including BASIC, Turbo Pascal, and WordStar.\n    * Written in Rust.\n  * https://github.com/jhallen/cpm\n\n    * Run CP/M commands in Linux/Cygwin with this Z80 / BDOS / ADM-3A emulator.\n    * Written in C.\n\n## References\n\n  * Digital Research - CP/M Operating System Manual\n\n    * Particularly the syscall reference in Section 5: CP/M 2 System Interface.\n  * Sample code\n\n    * https://github.com/Laci1953/RC2014-CPM/tree/main\n\n## Bugs?\n\nLet me know by filing an issue. If your program is \"real\" then it is highly\nlikely it will try to invoke an unimplemented BIOS function.\n\nOutstanding issues I'm aware of:\n\n  * Inconsistent handling of Drives in FCB entries.\n\n    * There seems to be no suffering here, but ..\n  * I don't implement some of the basic BIOS calls that might be useful\n\n    * Get free RAM, etc, etc.\n    * These will be added over time as their absence causes program-failures.\n\nSteve\n\n## About\n\nGolang CP/M emulator for playing zork, lighthouse-of-doom, etc\n\n### Topics\n\ngolang emulation z80 zork cpm golang-application\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n3 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 5\n\nv0.5.0 Latest\n\nApr 28, 2024\n\n\\+ 4 releases\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Go 68.5%\n  * Assembly 31.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
