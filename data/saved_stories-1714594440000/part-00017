{"aid": "40222740", "title": "Show HN: Basedpyright: An Excellent Alternative to Pylance", "url": "https://github.com/DetachHead/basedpyright", "domain": "github.com/detachhead", "votes": 1, "user": "anbardoi", "posted_at": "2024-05-01 13:15:38", "comments": 0, "source_title": "GitHub - DetachHead/basedpyright: pyright fork with various type checking improvements, improved vscode support and pylance features built into the language server", "source_text": "GitHub - DetachHead/basedpyright: pyright fork with various type checking\nimprovements, improved vscode support and pylance features built into the\nlanguage server\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nDetachHead / basedpyright Public\n\n  * Notifications\n  * Fork 9\n  * Star 416\n\npyright fork with various type checking improvements, improved vscode support\nand pylance features built into the language server\n\ndetachhead.github.io/basedpyright/\n\n### License\n\nView license\n\n416 stars 9 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# DetachHead/basedpyright\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n14 Branches\n\n27 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nDetachHead1.11.0May 1, 2024d2706fa \u00b7 May 1, 2024May 1, 2024\n\n## History\n\n7,741 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| remove setup-python actions because pdm can now manage python versions| Apr\n9, 2024  \n  \n### .idea\n\n|\n\n### .idea\n\n| does this even do anythign| Feb 12, 2024  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| remove python.languageServer from settings since the basedpyright e...| Apr\n18, 2024  \n  \n### basedpyright\n\n|\n\n### basedpyright\n\n| Allow running as a Python module| Apr 26, 2024  \n  \n### build\n\n|\n\n### build\n\n| Use hex char codes and show code points for surrogate pairs (#7541)| Mar 21,\n2024  \n  \n### docs\n\n|\n\n### docs\n\n| fix incorrect default value documentation from upstream| Apr 30, 2024  \n  \n### packages\n\n|\n\n### packages\n\n| 1.11.0| May 1, 2024  \n  \n### .eslintignore\n\n|\n\n### .eslintignore\n\n| fix eslint/prettier running on python venv stuff| Mar 26, 2024  \n  \n### .eslintrc.json\n\n|\n\n### .eslintrc.json\n\n| Added new eslint rule to enforce that protected class variables and m...|\nApr 26, 2023  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| language bar still broken?| Apr 1, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| asdf| Jan 15, 2024  \n  \n### .pre-commit-hooks.yaml\n\n|\n\n### .pre-commit-hooks.yaml\n\n| fix formatting in .pre-commit-hooks.yaml| Apr 1, 2024  \n  \n### .prettierignore\n\n|\n\n### .prettierignore\n\n| fix eslint/prettier running on python venv stuff| Mar 26, 2024  \n  \n### .prettierrc\n\n|\n\n### .prettierrc\n\n| Upgrade to Prettier 2.0, reformat (#610)| Apr 8, 2020  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Update CONTRIBUTING.md| Apr 4, 2024  \n  \n### LICENSE.txt\n\n|\n\n### LICENSE.txt\n\n| Updated LICENSE and CONTRIBUTING files.| Mar 18, 2019  \n  \n### README.md\n\n|\n\n### README.md\n\n| Adjust readme for pyright: ignore[errors]| Apr 30, 2024  \n  \n### SECURITY.md\n\n|\n\n### SECURITY.md\n\n| Microsoft mandatory file (#3477)| May 18, 2022  \n  \n### get_version.py\n\n|\n\n### get_version.py\n\n| refactor the versioning so that the upstream version is preserved and...|\nMar 28, 2024  \n  \n### lerna.json\n\n|\n\n### lerna.json\n\n| Published 1.1.361| May 1, 2024  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| Merge tag 'refs/tags/1.1.360' into merge-1.1.360| Apr 24, 2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| Merge tag 'refs/tags/1.1.360' into merge-1.1.360| Apr 24, 2024  \n  \n### pdm.lock\n\n|\n\n### pdm.lock\n\n| hopefully fully support local development and ci when node is not ins...|\nApr 3, 2024  \n  \n### pdm_build.py\n\n|\n\n### pdm_build.py\n\n| run npm ci in pdm_build.py even if node_modules already exists ...| Apr 3,\n2024  \n  \n### pw\n\n|\n\n### pw\n\n| bump pyprojectx| Mar 13, 2024  \n  \n### pw.bat\n\n|\n\n### pw.bat\n\n| create basedpyright pypi package that bundles pyright and the langaug...|\nJan 15, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| bump pdm| Apr 9, 2024  \n  \n### tsconfig.json\n\n|\n\n### tsconfig.json\n\n| Change all file paths to use a new URI class. (#6519)| Dec 7, 2023  \n  \n## Repository files navigation\n\n# basedpyright\n\nBasedpyright is a fork of pyright with various type checking improvements,\nimproved vscode support and pylance features built into the language server.\n\n\ud83d\udcda Documentation | \ud83d\udedd Playground\n\n## why?\n\nthe main motivation behind this fork was the fact that pyright has several\nserious issues that the maintainers didn't want to address, and many bugs that\nthey consider to be intentional behavior. here is a list of some of its major\nproblems that basedpyright resolves:\n\n### ability to pin the version used by vscode\n\nin pyright, if the vscode extension gets updated, you may see errors in your\nproject that don't appear in the CI, or vice-versa. see this issue.\n\nbasedpyright fixes this problem by adding an importStrategy option to the\nextension, which defaults to looking in your project for the basedpyright pypi\npackage.\n\n### published as a pypi package - no nodejs required\n\npyright is only published as an npm package, which requires you to install\nnodejs. the version on pypi is just an unofficial wrapper that installs node\nand the npm package the first time you invoke the cli, which is quite flaky.\n\npython developers should not be expected to have to install nodejs in order to\ntypecheck their python code. it should just be a regular pypi package like\nmypy, ruff, and pretty much all other python tooling. this is why basedpyright\nis officially published on pypi, which comes bundled with the npm package.\n\n### new diagnostic rules\n\n#### reportUnreachable - report errors on code that would otherwise be\ncompletely unchecked\n\npyright often incorrectly marks code as unreachable. in most cases,\nunreachable code is a mistake and therefore should be an error, but pyright\ndoes not have an option to report unreachable code. in fact, unreachable code\nis not even type-checked at all:\n\n    \n    \n    if sys.platform == \"win32\": 1 + \"\" # no error\n\nby default, pyright will treat the body in the code above as unreachable if\npyright itself was run on an operating system other than windows. this is bad\nof course, because chances are if you write such a check, you intend for your\ncode to be executed on multiple platforms.\n\nto make things worse, unreachable code is not even type-checked, so the\nobviously invalid 1 + \"\" above will go completely unnoticed by the type\nchecker.\n\nbasedpyright solves this issue with a reportUnreachable option, which will\nreport an error on such unchecked code. in this example, you can update your\npyright config to specify more platforms using the pythonPlatform option if\nyou intend for the code to be reachable.\n\n#### reportAny - fully ban the Any type\n\npyright has a few options to ban \"Unknown\" types such as\nreportUnknownVariableType, reportUnknownParameterType, etc. but \"Unknown\" is\nnot a real type, rather a distinction pyright uses used to represent Anys that\ncome from untyped code or unfollowed imports. if you want to ban all kinds of\nAny, pyright has no way to do that:\n\n    \n    \n    def foo(bar, baz: Any) -> Any: print(bar) # error: unknown type print(baz) # no error\n\nbasedpyright introduces the reportAny option, which will report an error on\nusages of anything typed as Any.\n\n#### reportIgnoreCommentWithoutRule - enforce that all ignore comments specify\nan error code\n\nit's good practice to specify an error code in your pyright: ignore comments:\n\n    \n    \n    # pyright: ignore[reportUnreachable]\n\nthis way, if the error changes or a new error appears on the same line in the\nfuture, you'll get a new error because the comment doesn't account for the\nother error. unfortunately there are many rules in pyright that do not have\nerror codes, so you can't always do this.\n\nbasedpyright resolves this by reporting those errors under the\nreportGeneralTypeIssues diagnostic rule. this isn't a perfect solution, but\nthere were over 100 errors that didn't have diagnostic rules. i intend to\nsplit them into their own rules in the future, but this will do for now.\n\nWarning\n\ntype: ignore comments are unsafe and will soon be disabled by default (see\n#330 and #55). we recommend using pyright: ignore comments instead.\n\n#### reportPrivateLocalImportUsage - prevent implicit re-exports in local code\n\npyright's reportPrivateImportUsage rule only checks for private imports of\nthird party modules inside py.typed packages. but there's no reason your own\ncode shouldn't be subject to the same restrictions. to explicitly re-export\nsomething, give it a redundant alias as described in the \"Stub Files\" section\nof PEP484 (although it only mentions stub files, other type checkers like mypy\nhave also extended this behavior to source files as well):\n\n    \n    \n    # foo.py from .some_module import a # private import from .some_module import b as b # explicit re-export\n    \n    \n    # bar.py # reportPrivateLocalImportUsage error, because `a` is not explicitly re-exported by the `foo` module: from foo import a # no error, because `b` is explicitly re-exported: from foo import b\n\n#### reportImplicitRelativeImport - reporting errors on invalid \"relative\"\nimports\n\npyright allows invalid imports such as this:\n\n    \n    \n    # ./module_name/foo.py:\n    \n    \n    # ./module_name/bar.py: import foo # wrong! should be `import module_name.foo` or `from module_name import foo`\n\nthis may look correct at first glance, and will work when running bar.py\ndirectly as a script, but when it's imported as a module, it will crash:\n\n    \n    \n    # ./main.py: import module_name.bar # ModuleNotFoundError: No module named 'foo'\n\nthe new reportImplicitRelativeImport rule bans imports like this. if you want\nto do a relative import, the correct way to do it is by importing it from .\n(the current package):\n\n    \n    \n    # ./module_name/bar.py: from . import foo\n\n#### reportInvalidCast - prevent non-overlapping casts\n\nmost of the time when casting, you want to either cast to a narrower or wider\ntype:\n\n    \n    \n    foo: int | None cast(int, foo) # narrower type cast(object, foo) # wider type\n\nbut pyright doesn't prevent casts to a type that doesn't overlap with the\noriginal:\n\n    \n    \n    foo: int cast(str, foo)\n\nin this example, it's impossible to be foo to be a str if it's also an int,\nbecause the int and str types do not overlap. the reportInvalidCast rule will\nreport invalid casts like these.\n\n##### note about casting with TypedDicts\n\na common use case of cast is to convert a regular dict into a TypedDict:\n\n    \n    \n    foo: dict[str, int | str] bar = cast(dict[{\"foo\": int, \"bar\": str}], foo)\n\nunfortunately, this will cause a reportInvalidCast error when this rule is\nenabled, because although at runtime TypedDict is a dict, type checkers treat\nit as an unrelated subtype of Mapping that doesn't have a clear method, which\nwould break its type-safety if it were to be called on a TypedDict.\n\nthis means that although casting between them is a common use case, TypedDicts\nand dicts technically do not overlap.\n\n### re-implementing pylance-exclusive features\n\nbasedpyright re-implements some of the features that microsoft made exclusive\nto pylance, which is microsoft's closed-source vscode extension built on top\nof the pyright language server with some additional exclusive functionality\n(see the pylance FAQ for more information).\n\nthe following features have been re-implemented in basedpyright's language\nserver, meaning they are no longer exclusive to vscode. you can use any editor\nthat supports the language server protocol. for more information on installing\npyright in your editor of choice, see the installation instructions.\n\n#### import suggestion code actions\n\npyright only supports import suggestions as autocomplete suggestions, but not\nas quick fixes (see this issue).\n\nbasedpyright re-implements pylance's import suggestion code actions:\n\n#### semantic highlighting\n\nbefore| after  \n---|---  \n  \nbasedpyright re-implements pylance's semantic highlighting along with some\nadditional improvements:\n\n  * variables marked as Final have the correct \"read-only\" colour\n  * supports the new type keyword in python 3.12\n  * Final variables are coloured as read-only\n\ninitial implementation of the semantic highlighting provider was adapted from\nthe pyright-inlay-hints project.\n\n#### inlay hints\n\nbasedpyright contains several improvements and bug fixes to the original\nimplementation adapted from pyright-inlay-hints.\n\n### errors on invalid configuration\n\nin pyright, if you have any invalid config, it may or may not print a warning\nto the console, then it will continue type-checking and the exit code will be\n0 as long as there were no type errors:\n\n    \n    \n    [tool.pyright] mode = \"strict\" # wrong! the setting you're looking for is called `typeCheckingMode`\n\nin this example, it's very easy for errors to go undetected because you\nthought you were on strict mode, but in reality pyright just ignored the\nsetting and silently continued type-checking on \"basic\" mode.\n\nto solve this problem, basedpyright will exit with code 3 on any invalid\nconfig.\n\n### fixes for the reportRedeclaration and reportDuplicateImport rules\n\npyright does not report redeclarations if the redeclaration has the same type:\n\n    \n    \n    foo: int = 1 foo: int = 2 # no error\n\nnor does it care if you have a duplicated import in multiple different import\nstatements, or in aliases:\n\n    \n    \n    from foo import bar from bar import bar # no error from baz import foo as baz, bar as baz # no error\n\nbasedpyright solves both of these problems by always reporting an error on a\nredeclaration or an import with the same name as an existing import.\n\n### better defaults\n\nwe believe that type checkers and linters should be as strict as possible by\ndefault, making the user aware of all the available rules so they can more\neasily make informed decisions about which rules they don't want enabled in\ntheir project. that's why the following defaults have been changed in\nbasedpyright\n\n#### typeCheckingMode\n\nused to be basic, but now defaults to all. in the future we intend to add\nbaseline to allow for easy adoption of more strict rules in existing\ncodebases.\n\n#### pythonPlatform\n\nused to assume that the operating system pyright is being run on is the only\noperating system your code will run on, which is rarely the case. in\nbasedpyright, pythonPlatform defaults to All, which assumes your code can run\non any operating system.\n\n### improved integration with CI platforms\n\nregular pyright has third party integrations for github actions and gitlab,\nbut they are difficult to install/set up. these integrations are built into\nbasedpyright, which makes them much easier to use.\n\n### github actions\n\nbasedpyright automatically detects when it's running in a github action, and\nmodifies its output to use github workflow commands. this means errors will be\ndisplayed on the affected lines of code in your pull requests automatically:\n\nthis is an improvement to regular pyright, which requires you to use a third\nparty action that requires boilerplate to get working. basedpyright just does\nit automatically without you having to do anything special:\n\n    \n    \n    # .github/workflows/your_workflow.yaml jobs: check: steps: - run: ... # checkout repo, install dependencies, etc - run: basedpyright # no additional arguments required. it automatically detects if it's running in a github action\n\n### gitlab code quality reports\n\nthe --gitlabcodequality argument will output a gitlab code quality report\nwhich shows up on merge requests:\n\nto enable this in your gitlab CI, just specify a file path to output the\nreport to, and in the artifacts.reports.codequality section of your .gitlab-\nci.yml file:\n\n    \n    \n    basedpyright: script: basedpyright --gitlabcodequality report.json artifacts: reports: codequality: report.json\n\n## basedmypy feature parity\n\nbasedmypy is a fork of mypy with a similar goal in mind: to fix some of the\nserious problems in mypy that do not seem to be a priority for the\nmaintainers. it also adds many new features which may not be standardized but\ngreatly improve the developer experience when working with python's far-from-\nperfect type system.\n\nwe aim to port most of basedmypy's features to basedpyright, however as\nmentioned above our priority is to first fix the critical problems with\npyright.\n\nnote that any non-standard features we add will be optional, as we intend to\nsupport library developmers who can't control what type checker their library\nis used with.\n\n# pypi package\n\nbasedpyright differs from pyright by publishing the command line tool as a\npypi package instead of an npm package. this makes it far more convenient for\npython developers to use, since there's no need to install any additional\ntools.\n\nfor more information, see the installation instructions.\n\n# vscode extension\n\n## install\n\ninstall the extension from the vscode extension marketplace or the open VSX\nregistry\n\n## usage\n\nthe basedpyright vscode extension will automatically look for the pypi package\nin your python environment.\n\nif you're adding basedpyright as a development dependency in your project, we\nrecommend addibg it to the recommended extensions list in your workspace to\nprompt others working on your repo to install it:\n\n    \n    \n    // .vscode/extensions.json { \"recommendations\": [\"detachhead.basedpyright\"] }\n\nin .vscode/settings.json, remove any settings starting with python.analysis,\nas they are not used by basedpyright. you should instead set these settings\nusing the tool.basedpyright (or tool.pyright) section in pyroject.toml (see\nbelow)\n\nyou should also disable the built in language server support from the python\nextension, as it conflicts with basedpyright's language server. the\nbasedpyright extension will detect this problem and suggest fixing it\nautomatically.\n\n## using basedpyright with pylance (not recommended)\n\nunless you depend on any pylance-exclusive features that haven't yet been re-\nimplemented in basedpyright, it's recommended to disable/uninstall the pylance\nextension.\n\nif you do want to continue using pylance, all of the options and commands in\nbasedpyright have been renamed to avoid any conflicts with the pylance\nextension, and the restriction that prevents both extensions from being\nenabled at the same time has been removed. for an optimal experience you\nshould change the following settings in your .vscode/settings.json file:\n\n  * disable pylance's type-checking by setting \"python.analysis.typeCheckingMode\" to \"off\". this will prevent pylance from displaying duplicated errors from its bundled pyright version alongside the errors already displayed by the basedpyright extension.\n  * disable basedpyright's LSP features by setting \"basedpyright.disableLanguageServices\" to true. this will prevent duplicated hover text and other potential issues with pylance's LSP. keep in mind that this may result in some inconsistent behavior since pylance uses its own version of the pyright LSP.\n\n    \n    \n    { \"python.analysis.typeCheckingMode\": \"off\", \"basedpyright.disableLanguageServices\": true }\n\n(the basedpyright extension will detect this problem and suggest fixing it\nautomatically)\n\n# playground\n\nyou can try basedpyright in your browser using the basedpyright playground\n\n# pre-commit hook\n\nintegration with pre-commit is also supported.\n\n    \n    \n    # .pre-commit-config.yaml repos: - repo: https://github.com/DetachHead/basedpyright rev: v1.8.0 hooks: - id: basedpyright\n\nto ensure that basedpyright is able to find all of the dependencies in your\nvirtual env, add the following to your pyproject.toml:\n\n    \n    \n    [tool.basedpyright] # ... venvPath = \".\"\n\n# recommended setup\n\nit's recommended to use both the basedpyright cli and vscode extension in your\nproject. the vscode extension is for local development and the cli is for your\nCI.\n\nbelow are the changes i recommend making to your project when adopting\nbasedpyright\n\n## pyproject.toml\n\nwe recommend using pdm with pyprojectx (click the \"inside project\" tab) to\nmanage your dependencies.\n\n    \n    \n    [tool.pyprojectx] main = [\"pdm==2.12.4\"] # installs pdm to your project instead of globally [tool.pdm.dev-dependencies] # or the poetry equivalent dev = [ \"basedpyright\", # you can pin the version here if you want, or just rely on the lockfile ] [tool.basedpyright] # many settings are not enabled even in strict mode, which is why basedpyright includes an \"all\" option # you can then decide which rules you want to disable typeCheckingMode = \"all\"\n\npinning your dependencies is important because it allows your CI builds to be\nreproducible (ie. two runs on the same commit will always produce the same\nresult). basedpyright ensures that the version of pyright used by vscode\nalways matches this pinned version.\n\n## About\n\npyright fork with various type checking improvements, improved vscode support\nand pylance features built into the language server\n\ndetachhead.github.io/basedpyright/\n\n### Topics\n\npython typing based pyright pylance\n\n### Resources\n\nReadme\n\n### License\n\nView license\n\n### Security policy\n\nSecurity policy\n\nActivity\n\n### Stars\n\n416 stars\n\n### Watchers\n\n4 watching\n\n### Forks\n\n9 forks\n\nReport repository\n\n## Releases 26\n\nv1.11.0 (pyright 1.1.361) Latest\n\nMay 1, 2024\n\n\\+ 25 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 115\n\n\\+ 101 contributors\n\n## Languages\n\n  * TypeScript 84.5%\n  * Python 15.3%\n  * Other 0.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
