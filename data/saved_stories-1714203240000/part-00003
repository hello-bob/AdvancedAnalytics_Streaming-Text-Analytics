{"aid": "40174868", "title": "Step-by-step How I built a WordPress AI plugin using Amazon Bedrock", "url": "https://community.aws/content/2ZVHNYvEAhuH6myMEXQdTw5y4m0/i-built-a-wordpress-ai-plugin-to-make-authors-more-productive-here-s-how", "domain": "community.aws", "votes": 1, "user": "rioastamal", "posted_at": "2024-04-26 22:11:33", "comments": 0, "source_title": "I built a WordPress AI plugin to make authors more productive. Here's how", "source_text": "Community | I built a WordPress AI plugin to make authors more productive. Here's how\n\n## Select your cookie preferences\n\nWe use essential cookies and similar tools that are necessary to provide our\nsite and services. We use performance cookies to collect anonymous statistics\nso we can understand how customers use our site and make improvements.\nEssential cookies cannot be deactivated, but you can click \u201cCustomize cookies\u201d\nto decline performance cookies.\n\nIf you agree, AWS and approved third parties will also use cookies to provide\nuseful site features, remember your preferences, and display relevant content,\nincluding relevant advertising. To continue without accepting these cookies,\nclick \u201cContinue without accepting.\u201d To make more detailed choices or learn\nmore, click \u201cCustomize cookies.\u201d\n\n## Customize cookie preferences\n\nWe use cookies and similar tools (collectively, \"cookies\") for the following\npurposes.\n\n### Essential\n\nEssential cookies are necessary to provide our site and services and cannot be\ndeactivated. They are usually set in response to your actions on the site,\nsuch as setting your privacy preferences, signing in, or filling in forms.\n\n### Performance\n\nPerformance cookies provide anonymous statistics about how customers navigate\nour site so we can improve site experience and performance. Approved third\nparties may perform analytics on our behalf, but they cannot use the data for\ntheir own purposes.\n\nAllowed\n\n### Functional\n\nFunctional cookies help us provide useful site features, remember your\npreferences, and display relevant content. Approved third parties may set\nthese cookies to provide certain site features. If you do not allow these\ncookies, then some or all of these services may not function properly.\n\nAllowed\n\n### Advertising\n\nAdvertising cookies may be set through our site by us or our advertising\npartners and help us deliver relevant marketing content. If you do not allow\nthese cookies, you will experience less relevant advertising.\n\nAllowed\n\nBlocking some types of cookies may impact your experience of our sites. You\nmay review and change your choices at any time by clicking Cookie preferences\nin the footer of this site. We and selected third-parties use cookies or\nsimilar technologies as specified in the AWS Cookie Notice.\n\n## Unable to save cookie preferences\n\nWe will only store essential cookies at this time, because we were unable to\nsave your cookie preferences.\n\nIf you want to change your cookie preferences, try again later using the link\nin the AWS console footer, or contact support if the problem persists.\n\nHomeTags\n\nFeatured Spaces\n\nCost Optimization\n\nDevOps\n\nGenerative AI\n\nKubernetes\n\nLivestreams\n\nResilience\n\nTraining and Certification\n\nCommunity Programs\n\nAWS Heroes\n\nAWS Community Builders\n\nAWS User Groups\n\nStudent Communities\n\n# I built a WordPress AI plugin to make authors more productive. Here's how\n\n## Learn how to build WordPress plugin from scratch and integrate it with\nAmazon Bedrock to build an AI content generator plugin.\n\ngenerative-aiamazon-bedrockwordpress\n\nRio Astamal\n\nAmazon Employee\n\nPublished Apr 24, 2024\n\n|\n\nLast Modified Apr 25, 2024\n\nComments (2)2\n\nPrerequisites\n\nCreate IAM user\n\nActivate Amazon Bedrock foundation models\n\nPrepare WordPress environment\n\nCreate main plugin file\n\nInstall AWS SDK for PHP v3\n\nCreate AWS Credentials page\n\nCreate models selection page\n\nCreate REST API endpoint\n\nCreate content generator sidebar\n\nTesting the plugin\n\nFuture improvements\n\nCost to run the plugin\n\nClean up\n\nSummary\n\nWordPress powers over 40% of the entire web, making it the leading content\nmanagement system (CMS). With that massive reach, I figured a plugin for\nWordPress would have access to a massive pool of potential users. So I decided\nto build an AI content generator for WordPress with Amazon Bedrock \u2014 a plugin\nthat almost anyone creating content on WordPress could use. Here's how.\n\nAmazon Bedrock is a fully managed service that offers a choice of high-\nperforming foundation models (FMs) along with a broad set of capabilities that\nyou need to build generative AI applications, simplifying development with\nsecurity, privacy, and responsible AI. With single API access you can choose\ndifferent models from companies like AI21 Labs, Anthropic, Cohere, Meta,\nMistral AI, Stability AI, and Amazon.\n\nThis AI plugin will allow WordPress authors to seamlessly integrate AI-powered\ncontent generation directly into the editor, streamlining their content\ncreation workflow. Authors will be able to select and configure inference\nparameters of various AI models. Authors just need to hit a button and the\nplugin will automatically update the content editor and the excerpt with\ncontents generated by AI. With quick content generation, the plugin should\nhelp authors be more productive.\n\nIn this post I will show you to build this AI plugin. You will learn how to\nbuild a plugin for WordPress and how to use AWS SDK for PHP to call Amazon\nBedrock API. After completing this post you should have a fully working\nWordPress AI plugin to generate contents. No prior WordPress plugin\ndevelopment experience needed.\n\nTo give you an overview, here is what the end result would look like.\n\n##\n\nPrerequisites\n\nBefore you dive into building the WordPress AI content generator plugin, there\nare a few prerequisites you'll need to have in place:\n\n  1. AWS Account: You'll need an active Amazon Web Services (AWS) account to access Amazon Bedrock and its associated resources.\n\n  2. Docker: The guide will utilize Docker containers to run WordPress and MySQL, so you'll need to have Docker installed on your development machine. You can skip this if you already have a working WordPress environment.\n\nSince WordPress 5.0, Gutenberg is the default editor. To extends Gutenberg\u2019s\nfunctionality you need to know React. Yes I hear you! But \u2014 no need to worry,\nI've got you covered! I promise there will be no build steps and JSX involved\nhere, just plain vanilla Javascript you already know and love!\n\nNote: If you\u2019re using Windows, you can follow the guide on this post using\nWindows Subsystem for Linux (WSL).\n\n###\n\nCreate IAM user\n\nThe plugin will use credentials associated with this IAM user to call Amazon\nBedrock API. As part of best practices, you should follow the principle of\n\"least-privilege\" by only granting permissions that you need. But, for the\npurpose of this post I will use an AWS managed policy called\n\u201cAmazonBedrockFullAccess\u201d.\n\n  * Log in to your AWS Management Console and navigate to the IAM service page.\n\n  * Click on Users in the left-hand menu, then click Create user.\n\n  * Enter wp-ai-user as User name and click Next\n\n  * For the Permissions options, choose Attach policies directly\n\n  * Enter \u201cbedrock\u201d in the Search box\n\n  * Choose AmazonBedrockFullAccess and click Next\n\n  * On the Review and create step click Create user\n\nNext step is to give the newly created user access keys so it can call AWS\nservices.\n\n  * On the Users list click wp-ai-user.\n\n  * Click Security credentials tab, then click Create access key button\n\n  * For the use case, choose Local code and make sure to tick the confirmation and click Next\n\n  * Click Create access key\n\nYour access keys should be created. Once you have downloaded, keep them in\nsafe place. You will need this Access key and Secret access key in the next\nsection of this post.\n\nThis is long-term credentials with IAM user, I recommend to rotate the access\nkey frequently to increase the security.\n\n###\n\nActivate Amazon Bedrock foundation models\n\nTo give the plugin the ability to display a list of models that the author can\nchoose to generate content, you need to activate the foundation models from\nthe Amazon Bedrock service. Amazon Bedrock is a region specific service, so\nmake sure you\u2019re in correct region. In this example I\u2019m using US East (N.\nVirginia) or us-east-1.\n\n  * Log in to your AWS Management Console and change the region to US East (N. Virginia)\n\n  * Navigate to Amazon Bedrock service page\n\n  * Click Model access in the left-hand menu\n\n  * Click Manage model access button in the top right corner\n\n  * Activate the base models that you want. In my case I activated all the base models so the WordPress administrator will have a broad of choices of models when generating content.\n\n  * Click Save changes to apply\n\n###\n\nPrepare WordPress environment\n\nYou can skip this section if you already have a working WordPress environment.\n\nStart by creating a root directory for this project. Let\u2019s call it wp-ai-\nplugin-tutorial .\n\n1 2\n\nmkdir wp-ai-plugin-tutorial cd wp-ai-plugin-tutorial\n\nNext create a root directory for our AI plugin. Let\u2019s call it my-ai-content-\ngenerator and put it under ./wordpress/wp-content/plugins . This directory\nwill be mounted to the WordPress container.\n\n1\n\nmkdir -p wordpress/wp-content/plugins/my-ai-content-generator\n\nRun WordPress and MySQL containers using Docker compose command. Create a\ndocker-compose.yml file.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n\nversion: '3.9'\n\nservices: wordpress: image: wordpress:6-apache ports: - 8080:80 volumes: -\n./wordpress/wp-content/plugins/my-ai-content-generator:/var/www/html/wp-\ncontent/plugins/my-ai-content-generator environment: WORDPRESS_DB_HOST: mysql\nWORDPRESS_DB_NAME: wp_demo WORDPRESS_DB_USER: wp_user WORDPRESS_DB_PASSWORD:\nwp-demo-ai restart: always\n\nmysql: image: mysql:8 volumes: - ./mysql:/var/lib/mysql environment:\nMYSQL_DATABASE: wp_demo MYSQL_USER: wp_user MYSQL_PASSWORD: wp-demo-ai\nMYSQL_ROOT_PASSWORD: root-demo-ai restart: always\n\nNow run the containers.\n\n1\n\ndocker compose up -d\n\nOpen your browser and go to http://localhost:8080/ where you should see the\nWordPress installation page. Follow the instructions to complete the\ninstallation.\n\nWordPress installation\n\n##\n\nCreate main plugin file\n\nThis is the fun part - let\u2019s start to code! At very minimum a WordPress plugin\nis just PHP file with a special header (comments) and some hooks to attach\nyour functions to.\n\nMake sure you\u2019re in wp-content/plugins/my-ai-content-generator/ directory.\n\n1\n\ncd wordpress/wp-content/plugins/my-ai-content-generator\n\nCreate a new PHP file. I named it the same as the directory, my-ai-content-\ngenerator.php . Run the following command to create the file.\n\n1\n\ntouch my-ai-content-generator.php\n\nUse following code for my-ai-content-generator.php.\n\n1 2 3 4 5\n\n<?php /** * Plugin Name: My AI Content Generator * Description: An AI content\ngenerator plugin powered by Amazon Bedrock. */\n\nGo to the WordPress Admin dashboard and click the Plugins page from the menu\nin the left side. You should see the plugin appears in the list. Now click\nActivate to enable the plugin.\n\nActivate plugin\n\nRight now the plugin does nothing. I will gradually add functionalities to the\nplugin in the next sections.\n\n##\n\nInstall AWS SDK for PHP v3\n\nTo call the Amazon Bedrock API, I will use the AWS SDK for PHP v3. Install the\nSDK using composer. Run this command inside my-ai-content-generator/\ndirectory.\n\n1 2 3 4\n\ndocker run --rm --interactive --tty \\ -v $(pwd):/app \\ -u $(id -u):$(id -g) \\\ncomposer require aws/aws-sdk-php\n\nOnce finished you should see following new files and directory.\n\n1\n\nls -1\n\nOutput:\n\n1 2 3 4\n\ncomposer.json composer.lock my-ai-content-generator.php vendor\n\n##\n\nCreate AWS Credentials page\n\nTo allow the plugin to call the Amazon Bedrock API, it needs to be\nauthenticated. This page allows the administrator to enter their AWS Access\nkey id and Secret access key. The keys are then saved to the database.\n\nAs part of best practices, you should encrypt the AWS credentials. You could\nuse openssl_encrypt function or similar. However, for the purpose of this\npost, I will save it as plain text to the database.\n\nLet's continue by modifying the file my-ai-content-generator.php as shown\nbelow.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\n56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\n82 83 84 85 86 87 88 89 90 91 92 93 94 95 96\n\n<?php /** * Plugin Name: My AI Content Generator * Description: An AI content\ngenerator plugin powered by Amazon Bedrock */\n\n// Exit if accessed directly if ( ! defined( 'ABSPATH' ) ) { exit; }\n\n// Hooks into admin_menu to add our AI content generator settings page: // AWS\ncredentials page and foundation models selection page add_action('admin_menu',\n'my_ai_settings_menu');\n\n/** * Function to render AWS credentials page. * * @return void */ function\nmy_ai_credentials_page() { // Check user permissions if ( ! current_user_can(\n'manage_options' ) ) { return; }\n\nmy_ai_save_credentials();\n\n// Get the current values of the access key id from the database // Option\nname is 'my_ai_credentials' and has two keys 'access_key_id' and\n'secret_access_key' // (We never display the secret access key to the user)\n$credentials = get_option( 'my_ai_credentials', ['access_key_id' => ''] );\n$access_key_id = $credentials['access_key_id'];\n\n// If query string updated=true exists then display a success message\n$success_message = false; if ( isset( $_GET['updated'] ) && $_GET['updated']\n=== 'true' ) { $success_message = true; }\n\nrequire __DIR__ . '/views/aws-credentials-page.php'; }\n\n/** * Function to save AWS credentials to the database. * * @return void */\nfunction my_ai_save_credentials() { // Get the submitted values from the form\n$option_page = $_POST['option_page'] ?? ''; $access_key_id =\n$_POST['access_key_id'] ?? ''; $secret_access_key =\n$_POST['secret_access_key'] ?? '';\n\n// Only proceed if option_page is my-ai-credentials-page if ( $option_page !==\n'my-ai-credentials-page' ) { return; }\n\n// Save the credentials to the database update_option('my_ai_credentials', [\n'access_key_id' => $access_key_id, 'secret_access_key' => $secret_access_key,\n]); }\n\n/** * Function to add our AI content generator settings page to the admin\nmenu. * * @return void */ function my_ai_settings_menu() { // Foundation model\nselection page add_menu_page( 'Foundation models', // page title 'My AI\nContent Generator', // menu title 'manage_options', // capability 'my-ai-\nmodels-page', // menu slug // callback function to render the page content\nfunction() { return ''; // Temporary output, will be updated later },\n'dashicons-admin-generic', );\n\n// AWS credentials page add_submenu_page( 'my-ai-models-page', // parent menu\nslug 'AWS credentials', // page title 'AWS credentials', // menu title\n'manage_options', // capability 'my-ai-credentials-page', // menu slug //\ncallback function to render the page content 'my_ai_credentials_page', ); }\n\nCreate a new directory views/ to store HTML pages.\n\n1\n\nmkdir views\n\nCreate new PHP file views/aws-credentials-page.php for displaying AWS\nCredentials page.\n\n1\n\ntouch views/aws-credentials-page.php\n\nNow use the following code for the Credentials page.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n30 31 32 33 34 35 36\n\n<?php // Exit if accessed directly if ( ! defined( 'ABSPATH' ) ) { exit; }\n\n// If this is a POST request, no need to display the page and redirect using\njavascript if ($_SERVER['REQUEST_METHOD'] === 'POST') { echo\n'<script>window.location = \"' . admin_url('admin.php?page=my-ai-credentials-\npage&updated=true') . '\";</script>'; return; }\n\n?><div class=\"wrap\"> <h1>AWS Credentials</h1>\n\n<?php if ($success_message): ?> <div class=\"updated notice notice-success is-\ndismissible\"><p>AWS credentials saved successfully!</p></div> <?php endif; ?>\n\n<p>Enter your AWS credentials to use <strong>My AI Content Generator</strong>.\nMake sure to follow IAM best practices such as applying <a\nhref=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-\npractices.html#grant-least-privilege\" target=\"_blank\">principle of least-\nprivilege</a>.</p>\n\n<form method=\"post\"><?php settings_fields('my-ai-credentials-page'); ?><table\nclass=\"form-table\"> <tr valign=\"top\"> <th scope=\"row\">Access Key ID</th>\n<td><input required type=\"text\" size=\"30\" name=\"access_key_id\" value=\"<?php\necho esc_attr($access_key_id); ?>\" /></td> </tr> <tr valign=\"top\"> <th\nscope=\"row\">Secret Access Key</th> <td><input required type=\"password\"\nsize=\"30\" name=\"secret_access_key\" value=\"\" /></td> </tr> </table><?php\nsubmit_button(); ?></form> </div>\n\nBy the end of the this step your my-ai-content-generator/ directory should\nlook like this.\n\n1\n\nls -1 *\n\nOutput:\n\n1 2 3 4 5 6 7 8 9 10\n\ncomposer.json composer.lock my-ai-content-generator.php\n\nvendor: autoload.php ...\n\nviews: aws-credentials-page.php\n\nReload your WordPress Admin dashboard. You should see new menu option on the\nleft side. Click the AWS Credentials link and it will brings you to the AWS\nCredentials setup page. Enter the Access key and Secret key of wp-ai-user that\nyou created in previous steps.\n\nAWS Credentials page\n\n##\n\nCreate models selection page\n\nMake sure you have completed the \u201cActivate Amazon Bedrock foundation models\u201d\nstep before proceeding. It\u2019s time to use the AWS SDK for PHP v3 to call the\nAmazon Bedrock API. Here\u2019s how to do it.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n\n<?php // Initialize Amazon Bedrock using AWS SDK for PHP require __DIR__ .\n'/vendor/autoload.php';\n\nuse Aws\\Bedrock\\BedrockClient; use Aws\\BedrockRuntime\\BedrockRuntimeClient;\n\n$bedrock = new BedrockClient([ 'region' => 'us-east-1', 'version' => 'latest',\n'credentials' => [ 'key' => YOUR_ACCESS_KEY_ID 'secret' =>\nYOUR_SECRET_ACCESS_KEY ] ]);\n\n$bedrock_runtime = new BedrockRuntimeClient([ 'region' => 'us-east-1',\n'version' => 'latest', 'credentials' => [ 'key' => YOUR_ACCESS_KEY_ID 'secret'\n=> YOUR_SECRET_ACCESS_KEY ] ]);\n\nYou may be wondering why there are two similar classes to call Bedrock\u2019s API.\nThe first one BedrockClient is used to manage the foundation models e.g list\navailable foundation models. The other, BedrockRuntimeClient is used to run\ninference API to the model.\n\nTo get all the foundation models, you need to call the listFoundationModels()\nmethod.\n\n1\n\n$bedrock->listFoundationModels();\n\nNow let\u2019s modify file my-ai-content-generator.php to provide authors the\nability to select models which are going to be displayed when creating a post.\nReplace all the contents of my-ai-content-generator.php with the one below.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\n56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\n82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105\n106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124\n125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143\n144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162\n163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181\n182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200\n201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219\n220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237\n\n<?php /** * Plugin Name: My AI Content Generator * Description: An AI content\ngenerator plugin powered by Amazon Bedrock */\n\n// Exit if accessed directly if ( ! defined( 'ABSPATH' ) ) { exit; }\n\n// Load the AWS SDK for PHP from Composer autoload require __DIR__ .\n'/vendor/autoload.php'; use Aws\\Bedrock\\BedrockClient; use\nAws\\BedrockRuntime\\BedrockRuntimeClient;\n\n// Get current AWS credentials from the database $my_ai_credentials =\nget_option('my_ai_credentials', ['access_key_id' => '', 'secret_access_key' =>\n'']);\n\n// Initialize BedrockClient and BedrockRuntimeClient, default to us-east-1\n$bedrock = new BedrockClient([ 'credentials' => [ 'key' =>\n$my_ai_credentials['access_key_id'], 'secret' =>\n$my_ai_credentials['secret_access_key'], ], 'region' => 'us-east-1', ]);\n\n$bedrock_runtime = new BedrockRuntimeClient([ 'credentials' => [ 'key' =>\n$my_ai_credentials['access_key_id'], 'secret' =>\n$my_ai_credentials['secret_access_key'], ], 'region' => 'us-east-1', ]);\n\n/** * Function to return instance of BedrockClient. * * @return BedrockClient\n*/ function my_ai_bedrock_client() { global $bedrock; return $bedrock; }\n\n/** * Function to return instance of BedrockRuntimeClient. * * @return\nBedrockRuntimeClient */ function my_ai_bedrock_runtime_client() { global\n$bedrock_runtime; return $bedrock_runtime; }\n\n// Hooks into admin_menu to add our AI content generator settings page: // AWS\ncredentials page and foundation models selection page add_action('admin_menu',\n'my_ai_settings_menu');\n\n/** * Function to render AWS credentials page. * * @return void */ function\nmy_ai_credentials_page() { // Check user permissions if ( ! current_user_can(\n'manage_options' ) ) { return; }\n\nmy_ai_save_credentials();\n\n// Get the current values of the access key id from the database // Option\nname is 'my_ai_credentials' and has two keys 'access_key_id' and\n'secret_access_key' // (We never display the secret access key to the user)\n$credentials = get_option( 'my_ai_credentials', ['access_key_id' => ''] );\n$access_key_id = $credentials['access_key_id'];\n\n// If query string updated=true exists then display a success message\n$success_message = false; if ( isset( $_GET['updated'] ) && $_GET['updated']\n=== 'true' ) { $success_message = true; }\n\nrequire __DIR__ . '/views/aws-credentials-page.php'; }\n\n/** * Function to save AWS credentials to the database. * * @return void */\nfunction my_ai_save_credentials() { // Get the submitted values from the form\n$option_page = $_POST['option_page'] ?? ''; $access_key_id =\n$_POST['access_key_id'] ?? ''; $secret_access_key =\n$_POST['secret_access_key'] ?? '';\n\n// Only proceed if option_page is my-ai-credentials-page if ( $option_page !==\n'my-ai-credentials-page' ) { return; }\n\n// Save the credentials to the database update_option('my_ai_credentials', [\n'access_key_id' => $access_key_id, 'secret_access_key' => $secret_access_key,\n]); }\n\n/** * Function to get list of foundation models from the Bedrock and caches\nthe result to database. * * The database option_name should be\n'my_ai_foundation_models'. It has two keys: * 1. 'foundation_models' - an\narray of foundation models * 2. 'last_updated' - the timestamp of the last\nupdate * * When function is called it check the cache expiration (1 day). If\nit expires then * call the Bedrock API and update the cache. * * Response is\nassociative arrays with 2 keys: * - 'error' - default to null * - 'items' -\nThe list of foundation models * * @param BedrockClient $client * @return array\n- list of foundation models */ function my_ai_get_foundation_models($client) {\n$foundation_models = get_option('my_ai_foundation_models',\n['foundation_models' => [], 'last_updated' => 0]);\n\n// Check if the cache is expired (1 day) $now = time(); $cache_expiration =\n86400; // 1 day if ( $now - $foundation_models['last_updated'] >\n$cache_expiration ) { try { // Call the Bedrock API to get the list of\nfoundation models $response = $client->listFoundationModels(); } catch\n(Exception $e) { // If there is an error then return an empty array return\n['error' => $e->getMessage(), 'items' => []]; }\n\n// Update the cache update_option('my_ai_foundation_models', [\n'foundation_models' => $response['modelSummaries'], 'last_updated' => $now,\n]);\n\n// Return the list of foundation models return $response['modelSummaries']; }\n\n// Return the cached list of foundation models return\n$foundation_models['foundation_models']; }\n\n/** * Function to render foundation model selection page. * * @return void */\nfunction my_ai_models_page() { // Check user permissions if ( !\ncurrent_user_can( 'manage_options' ) ) { return; }\n\nmy_ai_save_selected_foundation_models();\n\n$bedrock = my_ai_bedrock_client();\n\n// Get current values of the foundation models from the database\n$foundation_models = my_ai_get_foundation_models($bedrock);\n\n// Get current selected foundation models from the database\n$selected_foundation_models = get_option('my_ai_selected_foundation_models',\n[]);\n\n// If query string updated=true exists then display a success message\n$success_message = false; if ( isset( $_GET['updated'] ) && $_GET['updated']\n=== 'true' ) { $success_message = true; }\n\n// Link to AWS credentials page $aws_credentials_link =\nadmin_url('admin.php?page=my-ai-credentials-page');\n\nrequire __DIR__ . '/views/foundation-models-page.php'; }\n\n/** * Function to save selected foundation models to the database. * * @return\nvoid */ function my_ai_save_selected_foundation_models() { // Get the\nsubmitted values from the form $option_page = $_POST['option_page'] ?? '';\n$selected_foundation_models = $_POST['foundation_models'] ?? [];\n\n// Only proceed if option_page is my-ai-models-page if ( $option_page !== 'my-\nai-models-page' ) { return; }\n\n// Save the selected foundation models to the database\nupdate_option('my_ai_selected_foundation_models',\n$selected_foundation_models); }\n\n/** * Function to add our AI content generator settings page to the admin\nmenu. * * @return void */ function my_ai_settings_menu() { // Foundation model\nselection page add_menu_page( 'Foundation models', // page title 'My AI\nContent Generator', // menu title 'manage_options', // capability 'my-ai-\nmodels-page', // menu slug // callback function to render the page content\n'my_ai_models_page', 'dashicons-admin-generic', // menu icon );\n\n// AWS credentials page add_submenu_page( 'my-ai-models-page', // parent menu\nslug 'Setup AWS Credentials', // page title 'AWS Credentials', // menu title\n'manage_options', // capability 'my-ai-credentials-page', // menu slug //\ncallback function to render the page content 'my_ai_credentials_page', ); }\n\nIf you pay attention closely on my_ai_get_foundation_models() function, it\ncaches the result for 1 day. This is to improves the performance of the page,\nso it does not need to call listFoundationModels() API each time the page is\nloaded.\n\nNext is to create a view file for displaying selection of foundation models. I\nwill name this file views/foundation-models-page.php .\n\n1\n\ntouch views/foundation-models-page.php\n\nUse following code for the newly created file.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\n56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\n82 83 84 85\n\n<?php // Exit if accessed directly if ( ! defined( 'ABSPATH' ) ) { exit; }\n\n// If this is a POST request, no need to display the page and redirect using\njavascript if ($_SERVER['REQUEST_METHOD'] === 'POST') { echo\n'<script>window.location = \"' . admin_url('admin.php?page=my-ai-models-\npage&updated=true') . '\";</script>'; return; }\n\n?><div class=\"wrap\">\n\n<h1>My AI Content Generator</h1> <?php if ($success_message) : ?> <div\nclass=\"updated notice notice-success is-dismissible\"><p>Selected models saved\nsuccessfully!</p></div> <?php endif; ?>\n\n<p>My AI Content Generator helps you write content quickly and efficiently\nusing AI.</p>\n\n<h2>Select Foundation Models</h2> <p>Please select the foundation models you\nwant to use to generate your content. Each foundation model is trained on a\nspecific dataset and can be used to generate content of different types and\nsizes. Currently the default region is set to <strong>us-east-1</strong>.</p>\n\n<?php if (isset($foundation_models['error'])) : ?> <p>No foundation models\nfound. </p> <p>Make sure your href=\"<?php echo esc_url($aws_credentials_link);\n?>\">AWS credentials</a> is correct and having proper permissions.</p>\n<p><strong>Message</strong>:<br><i><?php echo\nesc_html($foundation_models['error']); ?></i></p> <?php return; endif; ?>\n<form method=\"post\"><?php settings_fields('my-ai-models-page'); $counter = 0;\n\n?><table class=\"widefat striped\"> <thead> <tr> <td id=\"cb\" class=\"manage-\ncolumn column-cb check-column\"><input id=\"cb-select-all-1\" type=\"checkbox\">\n<label for=\"cb-select-all-1\"><span class=\"screen-reader-text\">Select\nAll</span></label></td> <th>No</th> <th>Name</th> <th>Id</th>\n<th>Provider</th> <th>Input</th> <th>Output</th> </tr> </thead> <tbody> <?php\nforeach ($foundation_models as $foundation_model) : ?> <?php // Only show\nmodel which outputModalities is TEXT $is_outputmodality_text =\nin_array('TEXT', $foundation_model['outputModalities']); if (!\n$is_outputmodality_text) { continue; }\n\n// Only show supported model, which the model id is not end with suffix any\nnumber + 'k' $is_supported_model = ! preg_match('/\\d+k$/',\n$foundation_model['modelId']); if (! $is_supported_model) { continue; }\n\n// Exclude model ids which not support on-demand throughput\n$excluded_model_ids = ['meta.llama2-13b-v1', 'meta.llama2-70b-v1']; if\n(in_array($foundation_model['modelId'], $excluded_model_ids)) { continue; }\n\n// Define checked variable when current foundation_model is selected $checked\n= in_array($foundation_model['modelId'], $selected_foundation_models) ?\n'checked' : ''; ?><tr class=\"iedit\"> <td class=\"check-column\" style=\"padding:\n8px 10px\"><input <?php echo $checked; ?> type=\"checkbox\"\nname=\"foundation_models[]\" value=\"<?php echo\nesc_attr($foundation_model['modelId']); ?>\"></td> <td><?php echo ++$counter;\n?></td> <td><?php echo esc_html($foundation_model['modelName']); ?></td>\n<td><?php echo esc_html($foundation_model['modelId']); ?></td> <td><?php echo\nesc_html($foundation_model['providerName']); ?></td> <td><?php echo\nesc_html(implode(', ', $foundation_model['inputModalities'])); ?></td>\n<td><?php echo esc_html(implode(', ', $foundation_model['outputModalities']));\n?></td> </tr> <?php endforeach; ?> </tbody> </table><?php\n\nsubmit_button(); ?> </form> </div>\n\nAt this stage you should have working AWS Credentials and Foundation Models\nSelection pages. Now my-ai-content-generator/ directory should like this:\n\n1\n\nls -l *\n\nOutput:\n\n1 2 3 4 5 6 7 8 9 10 11\n\ncomposer.json composer.lock my-ai-content-generator.php <\\- modified\n\nvendor: autoload.php ...\n\nviews: aws-credentials-page.php foundation-models-page.php <\\- new file\n\nReload your WordPress Admin dashboard and click My AI Content Generator from\nthe left side of the menu. You should see the Foundation Models Selection\npage. Models that have been selected on this page by the administrator will be\ndisplayed as a list in the sidebar of the WordPress block editor. Here is the\nscreenshot of the Foundation Models Selection page.\n\nSelect foundation models page\n\n##\n\nCreate REST API endpoint\n\nThis REST API endpoint will be called by the content generator from the\nsidebar. This is where you will run inference to the Amazon Bedrock service\nfor the selected model. Behind the scenes it calls the InvokeModel API.\n\nTo run the inference using AWS SDK for PHP you need to call invokeModel()\nmethod from BedrockRuntimeClient object.\n\n1\n\n$bedrock_runtime->invokeModel($params);\n\nHere is an example how to run inference for the Mistral 7B Instruct model from\nMistral AI.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\n<?php $body = [ 'prompt' => 'write a joke about mathematics', 'max_tokens' =>\n1024, 'temperature' => 1, 'top_p' => 0.8, 'top_k' => 200, 'stop' => [] ];\n\n$model_params = [ 'modelId' => 'mistral.mistral-7b-instruct-v0:2',\n'contentType' => 'application/json', 'body' => json_encode($body) ];\n\nThe challenge is that each model has a different set of parameters and\nresponse. Take the model from Mistral AI as an example: the prompt needs to be\nwrapped inside <s>[INST]Your prompt[/INST] . So, creating a function to\nabstract the invoke and response retrieval would be a good move. Following are\nsome functions to abstract those tasks:\n\n1 2\n\nmy_ai_build_bedrock_body($model_id, $params);\nmy_ai_parse_bedrock_response($model_id, $response);\n\nTo make it easy for client side Javascript to parse the response, I add\n\u201capplication prompt\u201d to instruct the model to wrap the response inside\nspecified tags. The application prompt:\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n\nYou are an intelligent AI assistant for writing a blog post. You are an expert\nto generate very long, detailed and SEO optimized article.\n\nYou must take into consideration rules below when generating article: - The\nfirst line of your response should be the title of the blog post followed by a\nblank line. - Title MUST be put within <my_ai_title></my_ai_title> tags. - The\narticle content MUST be put within <my_ai_content></my_ai_contents> tags. -\nThe summary of the content MUST be put within <my_ai_summary></my_ai_summary>\ntags. - Take a look at the additional instruction inside <query></query> tags\nto generate the content of the article. - Article format MUST be in HTML -\nMake sure to wrap each paragraph with tag <p></p>. - Make sure to wrap each\nheading with tag <h2></h2> or <h3></h3>. Depending on the heading level. -\nImportant: Skip the preamble from your response. NEVER generate text before\nthe article.\n\nHere is an example of the format: <example> <my_ai_title>This is example\ntitle</my_ai_title>\n\n<my_ai_content> ...[cut]... </my_ai_content>\n\n<my_ai_summary> This is example of the summary of the article.\n</my_ai_summary> </example>\n\nTo register new WordPress REST API endpoints you need to hook into\nrest_api_init and call the register_rest_route() function. Here\u2019s an example:\n\n1\n\nadd_action( 'rest_api_init', 'my_ai_register_rest_apis' );\n\nI will use /my-ai-content-generator/v1/contents as my REST endpoint to\ngenerate the AI content. The full endpoint with the hostname should look like\nthis:\n\n1\n\nhttp://localhost:8080/?rest_route=/my-ai-content-generator/v1/contents\n\nIf you activate pretty URLs in your WordPress configuration then you can also\naccess the endpoint via:\n\n1\n\nhttp://localhost:8080/wp-json/my-ai-content-generator/v1/contents\n\nThis REST API can only be accessed by user who has edit_posts permissions. Now\nlet\u2019s create the REST API endpoint. Create a new file my-ai-rest-api.php under\nmy-ai-content-generator/ directory.\n\n1\n\ntouch my-ai-rest-api.php\n\nCopy and paste the following code to your text editor.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\n56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\n82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105\n106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124\n125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143\n144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162\n163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181\n182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200\n201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219\n220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238\n239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257\n258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276\n277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295\n296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314\n315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333\n334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350\n\n<?php // Exit if accessed directly if ( ! defined( 'ABSPATH' ) ) { exit; }\n\n// Hooks into 'rest_api_init' to add new REST API endpoints add_action(\n'rest_api_init', 'my_ai_register_rest_apis' );\n\n/** * Function to register new REST API endpoints * * @return void */ function\nmy_ai_register_rest_apis() { // Create REST API route to geneterate AI content\nregister_rest_route('my-ai-content-generator/v1', '/contents', [ 'methods' =>\n'POST', 'callback' => function($request) { $bedrock_runtime =\nmy_ai_bedrock_runtime_client(); $content =\nmy_ai_generate_content($bedrock_runtime, $_POST);\n\nreturn $content; }, 'permission_callback' => function() { if (!\ncurrent_user_can('edit_posts')) { return new WP_Error('rest_forbidden',\nesc_html__('You do not have permission to edit posts.'), [ 'status' =>\nrest_authorization_required_code(), ]); }\n\nreturn true; }, ]); }\n\n/** * Function to build parameter body which sent to Amazon Bedrock * * @param\nstring $model_id * @param array $params * @return array */ function\nmy_ai_build_bedrock_body($model_id, $params) { $param_body = []; switch (true)\n{ // Amazon Titan parameters case strpos($model_id, 'amazon.titan') === 0:\n$param_body = [ 'inputText' => $params['prompt'], 'textGenerationConfig' => [\n'maxTokenCount' => $params['max_tokens'] ? $params['max_tokens'] : 4096,\n'temperature' => $params['temperature'] ? $params['temperature'] : 0.8, 'topP'\n=> $params['top_p'] ? $params['top_p'] : 0.9, 'stopSequences' => [] ] ];\nbreak;\n\n// AI21 labs Jurassic parameters case strpos($model_id, 'ai21.j2') === 0:\n$param_body = [ 'prompt' => $params['prompt'], 'maxTokens' =>\n$params['max_tokens'] ? $params['max_tokens'] : 4096, 'temperature' =>\n$params['temperature'] ? $params['temperature'] : 0.8, 'topP' =>\n$params['top_p'] ? $params['top_p'] : 0.9, 'stopSequences' => [],\n'countPenalty' => [ 'scale' => 0 ], 'presencePenalty' => [ 'scale' => 0 ],\n'frequencyPenalty' => [ 'scale' => 0 ], ]; break;\n\n// Anthropic Claude parameters case strpos($model_id, 'anthropic.claude') ===\n0: $param_body = [ 'anthropic_version' => 'bedrock-2023-05-31', 'max_tokens'\n=> $params['max_tokens'] ? $params['max_tokens'] : 4096, 'temperature' =>\n$params['temperature'] ? $params['temperature'] : 0.8, 'top_k' =>\n$params['top_k'] ? $params['top_k'] : 200, 'top_p' => $params['top_p'] ?\n$params['top_p'] : 0.9, 'stop_sequences' => [\"\\\\\\n\\\\\\nHuman:\"], 'messages' =>\n[ [ 'role' => 'user', 'content' => [ [ 'type' => 'text', 'text' =>\n$params['prompt'], ] ] ] ] ]; break;\n\n// Cohere Command parameters case strpos($model_id, 'cohere.command') === 0:\n$param_body = [ 'prompt' => $params['prompt'], 'max_tokens' =>\n$params['max_tokens'] ? $params['max_tokens'] : 4000, 'temperature' =>\n$params['temperature'] ? $params['temperature'] : 0.8, 'p' => $params['top_k']\n? $params['top_k'] : 0.9, 'k' => $params['top_k'] ? $params['top_k'] : 200,\n'stop_sequences' => [], 'return_likelihoods' => 'NONE', 'stream' => false ];\nbreak;\n\n// Meta Llama2 parameters case strpos($model_id, 'meta.llama') === 0:\n$param_body = [ 'prompt' => $params['prompt'], 'max_gen_len' =>\n$params['max_tokens'] ? $params['max_tokens'] : 2048, 'temperature' =>\n$params['temperature'] ? $params['temperature'] : 0.8, 'top_p' =>\n$params['top_p'] ? $params['top_p'] : 0.9 ]; break;\n\n// Mistral/Mixtral parameters case strpos($model_id, 'mistral') === 0:\n$param_body = [ 'prompt' => $params['prompt'], 'max_tokens' =>\n$params['max_tokens'] ? $params['max_tokens'] : 4096, 'temperature' =>\n$params['temperature'] ? $params['temperature'] : 0.8, 'top_p' =>\n$params['top_p'] ? $params['top_p'] : 0.9, 'top_k' => $params['top_k'] ?\n$params['top_k'] : 200, 'stop' => [] ]; break; }\n\nreturn $param_body; }\n\n/** * Function to parse the response of Amazon Bedrock InvokeModel() * *\n@param string $model_id - Amazon Bedrock model id * @param array $response -\nAmazon Bedrock InvokeModel() response * @return array - ['text' => '', 'error'\n=> ''] */ function my_ai_parse_bedrock_response($model_id, $response) {\n$parsed_response = []; switch (true) { // Amazon Titan response case\nstrpos($model_id, 'amazon.titan') === 0: $parsed_response = [ 'error' => null,\n'text' => $response['results'][0]['outputText'] ]; break;\n\n// AI21 labs Jurassic response case strpos($model_id, 'ai21.j2') === 0:\n$parsed_response = [ 'error' => null, 'text' =>\n$response['completions'][0]['data']['text'] ]; break;\n\n// Anthropic Claude response case strpos($model_id, 'anthropic.claude') === 0:\n$parsed_response = [ 'error' => null, 'text' =>\n$response['content'][0]['text'] ?? '' ]; break;\n\n// Cohere Command response case strpos($model_id, 'cohere.command') === 0:\n$parsed_response = [ 'error' => null, 'text' =>\n$response['generations'][0]['text'] ?? '' ]; break;\n\n// Meta Llama2 response case strpos($model_id, 'meta.llama') === 0:\n$parsed_response = [ 'error' => null, 'text' => $response['generation'] ?? ''\n]; break;\n\n// Mistral/Mixtral response case strpos($model_id, 'mistral') === 0:\n$parsed_response = [ 'error' => null, 'text' =>\n$response['outputs'][0]['text'] ?? '' ]; break; }\n\nreturn $parsed_response; }\n\n/** * Function to run inference on Amazon Bedrock * * @param\nBedrockRuntimeClient $client * @param string $model_id * @param array $params\n* @return array */ function my_ai_invoke_bedrock($client, $model_id, $params)\n{ try { $body = my_ai_build_bedrock_body($model_id, $params);\n\n$invoke_params = [ 'modelId' => $model_id, 'contentType' =>\n'application/json', 'body' => json_encode($body), ];\n\n$response = $client->invokeModel($invoke_params); $response_body =\njson_decode($response['body'], true);\n\n// Parse the response based on model id return\nmy_ai_parse_bedrock_response($model_id, $response_body); } catch (Exception\n$e) { return [ 'error' => $e->getMessage(), ]; } }\n\n/** * Function to combine our system prompt with user prompt. Some of the\nmodels * has different prompt format. * * @param string $model_id * @param\nstirng $user_prompt * @return string */ function my_ai_build_prompt($model_id,\n$user_prompt) { $system_prompt = <<<SYSTEM_PROMPT You are an intelligent AI\nassistant for writing a blog post. You are an expert to generate very long,\ndetailed and SEO optimized article.\n\nYou must take into consideration rules below when generating article: - The\nfirst line of your response should be the title of the blog post followed by a\nblank line. - Title MUST be put within <my_ai_title></my_ai_title> tags. - The\narticle content MUST be put within <my_ai_content></my_ai_contents> tags. -\nThe summary of the content MUST be put within <my_ai_summary></my_ai_summary>\ntags. - Take a look at the additional instruction inside <query></query> tags\nto generate the content of the article. - Article format MUST be in HTML -\nMake sure to wrap each paragraph with tag <p></p>. - Make sure to wrap each\nheading with tag <h2></h2> or <h3></h3>. Depending on the heading level. -\nImportant: Skip the preamble from your response. NEVER generate text before\nthe article.\n\nHere is an example of the format: <example> <my_ai_title>This is example\ntitle</my_ai_title>\n\n<my_ai_content> <p>This is example of opening paragraph 1.</p> <p>This is\nexample of opening paragraph 2.</p>\n\n<h2>Sub heading 1</h2> <p>This is example paragraph 1</p> <p>This is example\nparagraph 2</p> <p>This is example paragraph 3</p>\n\n<h2>Sub heading 2</h2> <p>This is example paragraph 1</p> <p>This is example\nparagraph 2</p> <p>This is example paragraph 3</p> <p>This is example\nparagraph 4</p> <p>This is example paragraph 5</p>\n\n<h2>Sub heading 3</h2> <p>This is example paragraph 1</p> <p>This is example\nparagraph 2</p> <p>This is example paragraph 3</p> <p>This is example\nparagraph 4</p>\n\n<h2>Sub heading 4</h2> <p>This is example paragraph 1</p> <p>This is example\nparagraph 2</p> <p>This is example paragraph 3</p>\n\n<h2>Sub heading for conclusion</h2> <p>This is example conclusion paragraph\n1</p> <p>This is example conclusion paragraph 2</p> </my_ai_content>\n\n<my_ai_summary> This is example of the summary of the article.\n</my_ai_summary> </example>\n\n<query>%s</query>\n\nSYSTEM_PROMPT;\n\n// Add prefix or suffix to the prompt based on the value of model id $prefix =\n''; $suffix = ''; switch (true) { case strpos($model_id,\n'anthropic.claude-v2') === 0: $prefix = \"\\n\\nHuman:\"; $suffix =\n\"\\n\\nAssistant:\"; break;\n\ncase strpos($model_id, 'meta.llama') === 0: $prefix = \"[INST]\"; $suffix =\n\"[/INST]\"; break;\n\ncase strpos($model_id, 'mistral') === 0: $prefix = \"<s>[INST]\"; $suffix =\n\"[/INST]\"; break; }\n\n$final_prompt = $prefix . $system_prompt . $suffix; return\nsprintf($final_prompt, $user_prompt); }\n\n/** * Function to generate AI content in JSON format. * * @param\nBedrockRuntimeClient $client * @param array $params * @return string */\nfunction my_ai_generate_content($client, $params) { $model_id =\n$params['model_id'];\n\n// Build the prompt based on the model id $prompt =\nmy_ai_build_prompt($model_id, $params['prompt']); $params['prompt'] = $prompt;\n\n// Make sure to convert numerical parameters from string to integer/float\n$params['max_tokens'] = intval($params['max_tokens']); $params['temperature']\n= floatval($params['temperature']); $params['top_p'] =\nfloatval($params['top_p']); $params['top_k'] = intval($params['top_k']);\n\n// Invoke the model $response = my_ai_invoke_bedrock($client, $model_id,\n$params);\n\nreturn json_encode($response, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK); }\n\nModify the main plugin file my-ai-content-generator.php to include my-ai-rest-\napi.php. Put following code at the end of my-ai-content-generator.php.\n\n1\n\nrequire __DIR__ . '/my-ai-rest-api.php';\n\nNow my-ai-content-generator/ should like the following:\n\n1\n\nls -1 *\n\nOutput:\n\n1 2 3 4 5 6 7 8 9 10 11 12\n\ncomposer.json composer.lock my-ai-content-generator.php <\\- modified my-ai-\nrest-api.php <\\- new file\n\nvendor: autoload.php ...\n\nviews: aws-credentials-page.php foundation-models-page.php\n\n##\n\nCreate content generator sidebar\n\nThe content generator sidebar allows authors to generate content using the AI\nmodel of their choice. Authors are able to tune the inference parameters such\nas temperature, Top P, Top K, and maximum tokens for the output. This sidebar\nwill be displayed when authors edit a post or a page.\n\nTo hook into Gutenberg (the default editor for WordPress) you need to create a\nReact element. As I promised earlier no need to worry. I will not using\nneither any build steps like webpack nor JSX. WordPress exposes React in the\nglobal context window.React so you can access this object anywhere in your\nJavascript code.\n\nWordPress itself creates a Javascript object in window.wp which holds many\nclient side functionalities. In this case I am interested in window.wp.plugins\nand the method registerPlugin() . It allows registering the content generator\nsidebar. Here is an example:\n\n1 2 3 4 5 6 7 8 9 10\n\nwindow.wp.plugins.registerPlugin('my-ai-content-generator', { render: () => {\n// Create a new PluginSidebar element var sidebarElement =\nReact.createElement(window.wp.editPost.PluginSidebar, { name: 'my-ai-sidebar-\nelement', title: 'My AI Content Generator', icon: 'vault', }, childElement); }\n});\n\nThe sidebar that holds model selection and its parameters will appear at the\nright side of the block editor when editing a post or a page. To hook into the\nsidebar block editor, a custom React element PluginSidebar is used.\n\nTo call the AI content generator REST endpoint /my-ai-content-\ngenerator/v1/contents, I will use the fetch() API. Fetch API should be\navailable in most modern browsers both on mobile and desktop. I am using\nstandard form data content type application/x-www-form-urlencoded for the POST\nbody.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\nvar response = await fetch(myAiApiUrl.toString(), { method: 'POST', headers: {\n'Content-Type': 'application/x-www-form-urlencoded' }, body: new\nURLSearchParams({ foundation_model: foundationModel, prompt: params.prompt,\ntemperature: params.temperature, top_p: params.top_p, top_k: params.top_k ||\nnull, max_tokens: params.max_tokens }), credentials: 'include' });\n\nOne of the most important thing to do when calling a WordPress REST endpoint\nis to include the nonce in the request via query string, body or HTTP header.\nYou can get the nonce by accessing global object wpApiSettings provided by\nWordPress before making the request:\n\n1\n\nwpApiSettings.nonce\n\nAfter receiving the content from the API you need to dispatch it to the\neditor. To update Gutenberg contents I will use two Block Editor data modules:\ncore/block-editor for updating the contents and core/editor for updating title\nand the excerpt.\n\n1 2 3 4 5 6 7 8\n\n// Update the title in the editor\nwindow.wp.data.dispatch('core/editor').editPost({ title: title });\n\n// Reset the Gutenberg content and pass our content as the replacement\nwindow.wp.data.dispatch('core/block-editor').resetBlocks(\nwindow.wp.blocks.parse( content ));\n\n// Update the excerpt in the sidebar\nwindow.wp.data.dispatch('core/editor').editPost({ excerpt: summary });\n\nCreate a new Javascript file my-ai-sidebar.js in my-ai-content-generator/js/\ndirectory.\n\n1 2\n\nmkdir js touch js/my-ai-sidebar.js\n\nUse the following code for my-ai-sidebar.js.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\n56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\n82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105\n106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124\n125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143\n144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162\n163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181\n182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200\n201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219\n220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238\n239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257\n258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276\n277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295\n296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314\n315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333\n334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352\n353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371\n372 373 374 375\n\nfunction my_ai_sidebar_init() { var wpBaseUrl =\nwindow.location.href.split('/wp-admin/')[0]; // myAiSelectedFoundationModels\nJavascript variable are injected via WordPress hooks\n'enqueue_block_editor_assets' var foundationModels =\nmyAiSelectedFoundationModels;\n\nvar generate_my_ai_content = async (foundationModel, params) => { var\nqueryStringRestRoute = new URLSearchParams({ rest_route: '/my-ai-content-\ngenerator/v1/contents', _wpnonce: wpApiSettings.nonce }); var myAiApiUrl =\nwpBaseUrl + '/?' + queryStringRestRoute;\n\n// Call AI content generator REST endpoint var response = await\nfetch(myAiApiUrl.toString(), { method: 'POST', headers: { 'Content-Type':\n'application/x-www-form-urlencoded' }, body: new URLSearchParams({ model_id:\nfoundationModel, prompt: params.prompt, temperature: params.temperature,\ntop_p: params.top_p, top_k: params.top_k || null, max_tokens:\nparams.max_tokens }), credentials: 'include' });\n\nvar data = await response.json();\n\n// If the data is still in string, we need to convert it to JSON if (typeof\ndata === 'string') { try { var json = JSON.parse(data); return json; } catch\n(e) {} }\n\nreturn data; };\n\n// Object to store foundation model family configuration such as: //\ntemperature, top_p, top_k and max_tokens. // Each model family has default\nvalue and maximum value of the configuration. // As an example: 'amazon.titan'\nfamily var foundationModelConfig = { 'amazon.titan': { temperature: { min: 0,\nmax: 1, default: 0.9 }, top_p: { min: 0, max: 1, default: 1 }, top_k: null,\nmax_tokens: { min: 0, max: 4096, default: 2048 } },\n\n'ai21.j2': { temperature: { min: 0, max: 1, default: 0.7 }, top_p: { min: 0,\nmax: 1, default: 1 }, top_k: null, max_tokens: { min: 0, max: 8191, default:\n2048 } },\n\n'anthropic.claude': { temperature: { min: 0, max: 1, default: 1 }, top_p: {\nmin: 0, max: 1, default: 0.99 }, top_k: { min: 0, max: 500, default: 200 },\nmax_tokens: { min: 0, max: 4096, default: 2048 } },\n\n'cohere.command': { temperature: { min: 0, max: 1, default: 0.75 }, top_p: {\nmin: 0, max: 1, default: 0 }, top_k: { min: 0, max: 500, default: 200 },\nmax_tokens: { min: 0, max: 4000, default: 2048 } },\n\n'meta.llama': { temperature: { min: 0, max: 1, default: 0.5 }, top_p: { min:\n0, max: 1, default: 0.9 }, top_k: null, max_tokens: { min: 0, max: 2048,\ndefault: 2048 } },\n\n'mistral': { temperature: { min: 0, max: 1, default: 0.5 }, top_p: { min: 0,\nmax: 1, default: 0.9 }, top_k: { min: 0, max: 200, default: 200 }, max_tokens:\n{ min: 0, max: 8192, default: 2048 } } };\n\n/** * Get the current short model id name from the selected model * @param\n{string} foundationModel * @returns {string} */ var getModelFamily =\n(foundationModel) => { // Get the current short model id name from the\nselected model var modelId = ''; for (var modelFamily of\nObject.keys(foundationModelConfig)) { if (foundationModel.indexOf(modelFamily)\n> -1) { modelId = modelFamily; break; } }\n\nreturn modelId; }\n\n// Initial short model name used by the foundationModelConfig var modelFamily\n= getModelFamily(foundationModels[0]);\n\n// Register the plugin elements into the Gutenberg sidebar\nwindow.wp.plugins.registerPlugin(\"my-ai-sidebar\", { render: () => { var\n[currentModelState, setCurrentModelState] =\nReact.useState(foundationModels[0]); var [promptState, setPromptState] =\nReact.useState(''); var [temperatureState, setTemperatureState] =\nReact.useState(foundationModelConfig[modelFamily].temperature); var\n[topPState, setTopPState] =\nReact.useState(foundationModelConfig[modelFamily].top_p); var [topKState,\nsetTopKState] = React.useState(foundationModelConfig[modelFamily].top_k); var\n[maxTokensState, setMaxTokensState] =\nReact.useState(foundationModelConfig[modelFamily].max_tokens); var\n[buttonEnabledState, setButtonEnabledState] = React.useState(false); var\n[generatingState, setGeneratingState] = React.useState(false);\n\n// Create array of options element based on foundation models list var\noptionsElement = foundationModels.map(modelId => { return\nReact.createElement('option', { value: modelId }, modelId); }); var\nselectElement = React.createElement('select', { id: 'my_ai_model_id', style: {\nmarginBottom: '10px', display: 'block', width: '95%' }, value:\ncurrentModelState, onChange: (e) => { // Get the selected foundation model var\nfoundationModel = e.target.value; console.log('FM -> ', foundationModel);\n\nvar modelId = getModelFamily(foundationModel);\nsetTemperatureState(foundationModelConfig[modelId].temperature);\nsetTopPState(foundationModelConfig[modelId].top_p);\nsetTopKState(foundationModelConfig[modelId].top_k);\nsetMaxTokensState(foundationModelConfig[modelId].max_tokens);\nsetCurrentModelState(foundationModel); } }, optionsElement); var\nlabelSelectModelElement = React.createElement('label', { display: 'block' },\n'Select foundation model:'); var labelPromptElement =\nReact.createElement('label', { display: 'block' }, 'Input prompt:'); var\ninputPromptElement = React.createElement('textarea', { id: 'my_ai_prompt',\nstyle: { marginBottom: '10px', display: 'block', width: '95%', height: '150px'\n}, placeholder: 'Write an article about the benefits of meditation', value:\npromptState, onChange: (e) => { // Enable the generate button if the prompt is\nnot empty if (e.target.value.trim().length === 0) {\nsetButtonEnabledState(false); return; }\n\nsetPromptState(e.target.value); setButtonEnabledState(true); } });\n\nvar buttonElement = React.createElement('button', { id: 'my_ai_btn_generate',\ndisplay: 'block', className: 'components-button is-primary', disabled:\n!buttonEnabledState, onClick: async (e) => { var foundationModelId =\ndocument.getElementById('my_ai_model_id').value; var prompt =\ndocument.getElementById('my_ai_prompt').value;\n\nsetGeneratingState(true)\n\n// When the button clicked the label should change to \"Generating...\", once\nfinished // it should back to \"Generate\" e.target.innerText = 'Generating...';\ne.target.disabled = true;\n\n// Call generate_my_ai_content to fetch the generated content via API //\nConstruct the foundation model parameters to send to the API var modelParams =\n{ prompt: prompt, temperature: temperatureState.default, top_p:\ntopPState.default, top_k: topKState ? topKState.default : null, max_tokens:\nmaxTokensState.default }\n\nvar response = await generate_my_ai_content(foundationModelId, modelParams);\nconsole.log(response);\n\n// The response contains two properties 'error' and 'text' if (response.error)\n{ setGeneratingState(false); alert(response.error); e.target.innerText =\n'Generate'; e.target.disabled = false;\ndocument.getElementById('my_ai_prompt').focus();\n\nreturn; }\n\n// If there is no <my_ai_title>, </my_ai_title>, <my_ai_content>, and\n<my_ai_content> tag // in the response, then dispatch everything to the block\neditor. // Otherwise, extract the title and content from the response.text var\nvalidFormat = response.text.indexOf('<my_ai_title>') !== -1 &&\nresponse.text.indexOf('</my_ai_title>') !== -1 &&\nresponse.text.indexOf('<my_ai_content>') !== -1 &&\nresponse.text.indexOf('</my_ai_content>') !== -1;\n\nif (! validFormat) { window.wp.data.dispatch('core/editor').editPost({ title:\n'[Unknown]' }); window.wp.data.dispatch('core/block-editor').resetBlocks(\nwindow.wp.blocks.parse( response.text ));\n\ne.target.innerText = 'Generate'; e.target.disabled = false;\ndocument.getElementById('my_ai_prompt').focus();\n\nsetGeneratingState(false);\n\nreturn; }\n\n// Extract the title from the response.text using substring. // The title\ninside the <my_ai_title>THE_TITLE</my_ai_title> var title =\nresponse.text.substring(response.text.indexOf('<my_ai_title>') +\n'<my_ai_title>'.length, response.text.indexOf('</my_ai_title>')); title =\ntitle.trim();\n\n// Extract the content from the response.text using substring. // The content\ninside the <my_ai_content>THE_CONTENT</my_ai_content> var content =\nresponse.text.substring(response.text.indexOf('<my_ai_content>') +\n'<my_ai_content>'.length, response.text.indexOf('</my_ai_content>')); content\n= content.trim();\n\n// Dispatch the title into Gutenberg using\nwp.data.dispatch('core/editor').editPost()\nwindow.wp.data.dispatch('core/editor').editPost({ title: title });\n\n// Reset the Gutenberg content and pass our content as the replacement\nwindow.wp.data.dispatch('core/block-editor').resetBlocks(\nwindow.wp.blocks.parse( content ));\n\n// If the response.text has the summary then dispatch the core/editor excerpt\nif (response.text.indexOf('<my_ai_summary>') !== -1) { var summary =\nresponse.text.substring(response.text.indexOf('<my_ai_summary>') +\n'<my_ai_summary>'.length, response.text.indexOf('</my_ai_summary>')); summary\n= summary.trim();\n\nwindow.wp.data.dispatch('core/editor').editPost({ excerpt: summary }); }\n\ne.target.innerText = 'Generate'; e.target.disabled = false;\ndocument.getElementById('my_ai_prompt').focus();\n\nsetGeneratingState(false); } }, 'Generate');\n\nvar spanTemperatureElement = React.createElement('span', { id:\n'my_ai_temp_span', style: { fontWeight: 'bold' }, },\ntemperatureState.default); var labelTemperatureElement =\nReact.createElement('label', { display: 'block' }, 'Temperature: ',\nspanTemperatureElement); var inputTemperatureElement =\nReact.createElement('input', { id: 'my_ai_temp', type: 'range', min:\ntemperatureState.min, max: temperatureState.max, step: '0.1', value:\ntemperatureState.default, style: { marginBottom: '10px', display: 'block',\nwidth: '95%' }, onChange: (e) => { setTemperatureState({ min:\ntemperatureState.min, max: temperatureState.max, default: e.target.value }); }\n});\n\nvar spanTopPElement = React.createElement('span', { id: 'my_ai_top_p_span',\nstyle: { fontWeight: 'bold' }, }, topPState.default); var labelTopPElement =\nReact.createElement('label', { display: 'block' }, 'Top P: ',\nspanTopPElement); var inputTopPElement = React.createElement('input', { id:\n'my_ai_top_p', type: 'range', min: topPState.min, max: topPState.max, step:\n'0.1', value: topPState.default, style: { marginBottom: '10px', display:\n'block', width: '95%' }, onChange: (e) => { setTopPState({ min: topPState.min,\nmax: topPState.max, default: e.target.value }); } });\n\nvar spanTopKElement = React.createElement('span', { id: 'my_ai_top_k_span',\nstyle: { fontWeight: 'bold', color: topKState ? 'inherit' : 'red' }, },\ntopKState ? topKState.default : 0); var labelTopKElement =\nReact.createElement('label', { style: { 'display': topKState ? 'inline' :\n'none' } }, 'Top K: ', spanTopKElement); var inputTopKElement =\nReact.createElement('input', { id: 'my_ai_top_k', type: 'range', min:\ntopKState ? topKState.min : null, max: topKState ? topKState.max : null, step:\n1, value: topKState ? topKState.default : 0, style: { marginBottom: '10px',\ndisplay: topKState ? 'block' : 'none' , width: '95%' }, onChange: (e) => { if\n(topKState) { setTopKState({ min: topKState.min, max: topKState.max, default:\ne.target.value }); } } });\n\nvar spanMaxTokensElement = React.createElement('span', { id:\n'my_ai_max_tokens_span', style: { fontWeight: 'bold' }, },\nmaxTokensState.default); var labelMaxTokensElement =\nReact.createElement('label', { display: 'block' }, 'Max Tokens: ',\nspanMaxTokensElement); var inputMaxTokensElement =\nReact.createElement('input', { id: 'my_ai_max_tokens', type: 'range', min:\nmaxTokensState.min, max: maxTokensState.max, step: 1, value:\nmaxTokensState.default, style: { marginBottom: '10px', display: 'block',\nwidth: '95%' }, onChange: (e) => { setMaxTokensState({ min:\nmaxTokensState.min, max: maxTokensState.max, default: e.target.value }); } });\n\n// Array of model config elements (temperature, top p, top k, and max tokens)\nvar modelConfigElements = [ labelTemperatureElement, inputTemperatureElement,\nlabelTopPElement, inputTopPElement, labelTopKElement, inputTopKElement,\nlabelMaxTokensElement, inputMaxTokensElement ];\n\nvar modelConfigElement = React.createElement('div', { id:\n'my_ai_model_config', display: 'block', style: { marginBottom: '10px' } },\n...modelConfigElements)\n\nvar myAiElement = React.createElement('div', { style: { paddingLeft: '16px',\npaddingRight: '16px', marginTop: '20px' }, id: 'my_ai_elements_container' },\nlabelSelectModelElement, selectElement, labelPromptElement,\ninputPromptElement, modelConfigElement, buttonElement ); // myAiElement\n\nvar pluginInfo = React.createElement(window.wp.editPost.PluginSidebar, { name:\n'my-ai-sidebar-element', title: 'My AI Content Generator', icon: 'welcome-\nwrite-blog' }, myAiElement);\n\nreturn pluginInfo; } }); }\n\nmy_ai_sidebar_init();\n\nNow I need to load this script when an author edits a post or a page. To do so\nI need to hook into WordPress enqueue_block_editor_assets. Modify my-ai-\ncontent-generator.php and add following code at the end of the file.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\n\nadd_action('enqueue_block_editor_assets', function() { // Script dependencies\n$dependencies = ['react', 'wp-blocks', 'wp-editor'];\n\n// URL to js/my-ai-sidebar.js $script_url = plugin_dir_url(__FILE__) . 'js/my-\nai-sidebar.js';\n\n// Enqueue script and use version 1.0.0 as a cache buster\nwp_enqueue_script('my-ai-sidebar', $script_url, $dependencies, '1.0.0', true);\n\n// Get current selected foundation models from the database\n$selected_foundation_models = get_option('my_ai_selected_foundation_models',\n[]);\n\n// Add inline script so wp-ai-sidebar.js can set the selected foundation\nmodels $javascript_line = sprintf('var myAiSelectedFoundationModels = %s;',\njson_encode($selected_foundation_models)); wp_add_inline_script('my-ai-\nsidebar', $javascript_line, 'before'); });\n\nAt this stage your my-ai-content-generator directory should look like\nfollowing:\n\n1\n\nls -1 *\n\nOutput:\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\ncomposer.json composer.lock my-ai-content-generator.php <\\- modified my-ai-\nrest-api.php\n\njs: my-ai-sidebar.js <\\- new file\n\nvendor: autoload.php ...\n\nviews: aws-credentials-page.php foundation-models-page.php\n\n##\n\nTesting the plugin\n\nLet\u2019s see our plugin in action. Create a new blog post by clicking Post then\nAdd New Post. It will open the WordPress default editor, Gutenberg. Take a\nlook at the top right corner on your screen you should see a small pencil\nicon. See following image.\n\nSidebar icon\n\nClick the icon and it will display My AI Content Generator sidebar. To start\ngenerating an article from AI, here are the steps:\n\n  1. Select the model, e.g anthropic.claude-3-haiku-[version]\n\n  2. Enter your input prompt, e.g \u201cWrite an extensive, optimized SEO article with a minimum of 2,000 words about starting a career as a web developer. Provide a long overview of the benefits of being a web developer (include stats if possible) and the challenges of being a web developer. Provide pro-tips on how to become a web developer and which programming language to choose as a beginner.\u201d\n\n  3. Set the temperature to 0.8, Top P to 0.9, Top K to 200 and Max tokens to 2048\n\n  4. Click Generate\n\nWait for couple of moments and the editor will be automatically filled by the\nAI generated content. Nice! The plugin works as expected. You may try playing\naround with the parameters or try another model like mistral.mistral-\nlarge-[version] and click Generate button. You should have a different result\neach time.\n\nMy AI Content Generator plugin in action\n\n##\n\nFuture improvements\n\nThere are a few things could be improved from the plugin:\n\nStream the response. Currently the content from the API is returned as single\nresponse. To make it more interactive and add an \u201cinstantaneous\u201d feel, you\ncould stream the response. On Amazon Bedrock you can use\nInvokeModelWithResponseStream API.\n\nGenerate image. It would be great if the plugin was able to provide the author\nwith an automatically generated featured image. The featured image could be\nbased on the article summary or different input prompt for the image. You\ncould use SDXL 1.0 model from Stability AI or Titan Image Generator model from\nAmazon.\n\nAWS Credentials. The value of secret key that stored in the database should be\nencrypted. In this post I save it as a plain text. This may raise a concern if\nyour database is compromised.\n\n##\n\nCost to run the plugin\n\nWith Amazon Bedrock, you will be charged for model inference and\ncustomization. There are two pricing plans for inference: On-Demand and\nProvisioned Throughput. In this post I use On-Demand. For inference you will\nbe charged input tokens and output tokens. The price is vary between models\nand region.\n\nAs an example, Claude 3 Haiku model in US East (N. Virginia) region cost\n$0.00025 per 1,000 input tokens and $0.00125 per 1,000 output tokens. In this\ncase the prompt that plugin sent are considered input tokens. The generated\ncontent that you received from the model are output tokens.\n\nKeep in mind that, at the time of this writing, only Amazon Titan family\nmodels can be paid with AWS credits. Standard AWS credits cannot be used for\n3rd party model providers currently.\n\nYou can read more on Amazon Bedrock pricing documentation.\n\n##\n\nClean up\n\nYou may clean up resources created in this post using AWS Management Console\nor via AWS CLI for the following resources:\n\n  * IAM user wp-ai-user\n\n  * Deactivate Amazon Bedrock foundation models you don't need\n\n##\n\nSummary\n\nIn this post, you learn how to build WordPress plugin from scratch to generate\ncontent from AI. The content generation are powered by Amazon Bedrock. To\nintegrate with Amazon Bedrock I use AWS SDK for PHP v3. This post demonstrate\nthat you can use PHP to build a generative AI application.\n\nIf you have any feedbacks or questions, drop your comment below.\n\nAny opinions in this post are those of the individual author and may not\nreflect the opinions of AWS.\n\nComments (2)2\n\n## 2 Comments\n\nLog in to comment\n\nPrerequisites\n\nCreate IAM user\n\nActivate Amazon Bedrock foundation models\n\nPrepare WordPress environment\n\nCreate main plugin file\n\nInstall AWS SDK for PHP v3\n\nCreate AWS Credentials page\n\nCreate models selection page\n\nCreate REST API endpoint\n\nCreate content generator sidebar\n\nTesting the plugin\n\nFuture improvements\n\nCost to run the plugin\n\nClean up\n\nSummary\n\n", "frontpage": false}
