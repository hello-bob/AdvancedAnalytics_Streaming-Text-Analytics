{"aid": "40209011", "title": "Exploring Sudoers File", "url": "https://hcrypt.net/2024/04/30/Exploring-Sudoers/", "domain": "hcrypt.net", "votes": 1, "user": "udev4096", "posted_at": "2024-04-30 09:42:56", "comments": 0, "source_title": "Exploring sudoers", "source_text": "Exploring sudoers \u00b7 Hcrypt\n\n### Hcrypt\n\n# Exploring sudoers\n\nLinux server security is a vast topic. The first common steps are usually:\n\n  * Disable SSH password and setup SSH key auth\n  * Update the system regularly\n  * Configure firewall\n  * Disable root login\n  * Change SSH port (security through obscurity for sure)\n\nI may have missed a few. After that, the admin might go for:\n\n  * Configuring users and file permissions\n  * Using AppArmor and SELinux for locked down ACL\n  * Hardening linux kernel (kicksecure comes to mind)\n  * Stripping out any bloatware or unecessary services\n  * Encrypting the disk with dm-crypt\n  * Proper logging and monitoring\n\nAnd much more. The list could go on and on. Today, I will be touching upon a\nsmall subset of it which is sudoers file.\n\n## Some background\n\nWhat is a sudoers file? It\u2019s main purpose is to restrict users from executing\narbitrary commands. You can allow or disallow certain commands, file access,\netc with it.\n\nThink of it as a sudo policy which mandates who can run commands with sudo\ni.e. root permissions.\n\nYou can do a bunch of things with sudo. Such as monitor user activity. If a\nuser is not allowed to run certain commands, it will be shown in the logs.\n\nFor example, user tau is trying to do something funny but we caught him in the\nlogs!\n\n    \n    \n    tail /var/logs/auth.log | grep tau\n\n## Simple example\n\nAlright, let\u2019s start with a basic example. First, create a few users. You will\nneed root priveleges for creating users.\n\n    \n    \n    useradd john useradd brock useradd tau\n\nNext, create a password for each of them\n\n    \n    \n    passwd john passwd brock passwd tau\n\nConsider this scenario:\n\n  * John is a sysadmin. He is allowed to execute all commands on all machines on the network and he can also execute it as another user.\n\n  * Brock is a developer. He hates administration (just like every developer) and wants to run his go and python applications.\n\n  * Tau is an intern. His current tasks involve monitoring the storage space and services using systemd. Nothing more.\n\nA typical sudoers entry goes something like this:\n\nNote: To edit a sudoers file, use sudo visudo instead of directly editing the\nfile at /etc/sudoers. From the Arch Linux wiki:\n\n> It should always be edited with the visudo(8) command. visudo locks the\n> sudoers file, saves edits to a temporary file, and checks it for syntax\n> errors before copying it to /etc/sudoers.\n\nFor John we can enter:\n\n    \n    \n    john ALL=(ALL) ALL\n\nFor brock and tau, we have multiple services. Because of that, we have to\nsetup aliases, just like a normal alias that you use in bash shell.\n\nThere are three types of aliases:\n\n  * Host\n  * User\n  * Command\n\nWe will go with Command for now. Let\u2019s create it for brock:\n\n    \n    \n    Cmnd_Alias DEVELOPER = /usr/bin/python3, /usr/bin/go brock ALL=(ALL) DEVELOPER\n\nSame for tau:\n\n    \n    \n    Cmnd_Alias STORAGE = /usr/sbin/fdisk, /usr/bin/du, /usr/bin/systemctl start, /usr/bin/systemctl stop, /usr/bin/systemctl reload, /usr/bin/systemctl restart, /usr/bin/systemctl status, /usr/bin/systemctl enable, /usr/bin/systemctl disable tau ALL=(ALL) STORAGE\n\nWe are set here. Let\u2019s test it.\n\nSwitching to user john and running update command:\n\n    \n    \n    su john sudo apt update -y\n\nYou can perform anything from editing hosts file to checking open ports with\nlsof.\n\nLet\u2019s switch to brock and run the update command again.\n\n    \n    \n    su brock sudo apt update -y\n\nPermission denied. As expected. Can we run the commands that we are allowed\nto?\n\nWe can\u2019t create a python file here because of lack of permissions. However,\nfor now, we can switch to /tmp directory which has rwx permissions for all\nusers.\n\n    \n    \n    cd /tmp echo \"print(\\\"hello\\\")\" > hello.py\n    \n    \n    python3 hello.py hello\n\nSimilarly, try executing go commands. It should work as intended.\n\nOur last user is tau. Perform the same operations as we did on brock.\n\n    \n    \n    su tau\n\nLet\u2019s run the systemctl command which we are allowed to:\n\n    \n    \n    sudo systemctl status sshd\n\nWhat? I thought tau was allowed to do that.\n\nYes. But you see, sudo is very strict when we give subcommands of a command.\n\nIn the previous rules, we just provided a single command and therefore you can\nexecute all of it\u2019s subcommands.\n\nBut when you provide a command along with it\u2019s subcommand, that\u2019s all you can\nexecute. It doesn\u2019t let you execute subcommands of a subcommand.\n\nsystemctl status or systemctl start is quite useless without specifying the\nactual service. To allow that, we can use * wildcard. Let\u2019s edit the policy\nfor STORAGE:\n\n    \n    \n    Cmnd_Alias STORAGE = /usr/sbin/fdisk, /usr/bin/du, /usr/bin/systemctl start *, /usr/bin/systemctl stop *, /usr/bin/systemctl reload *, /usr/bin/systemctl restart *, /usr/bin/systemctl status *, /usr/bin/systemctl enable *, /usr/bin/systemctl disable *\n\nSave it and then try running the status for a service:\n\n    \n    \n    sudo systemctl status sshd\n\nSweet! We haven\u2019t covered the other two aliases but they basically work the\nsame way. For host, use Host_Alias and for user, User_Alias.\n\nLet\u2019s say you want to add another admin or a developer. Instead of creating a\nnew rule, just create an alias and then use that alias in the username field:\n\n    \n    \n    User_Alias ADMINS = john, jack Host_Alias HOST = prod, test ADMINS HOST=(ALL) ALL\n\nThere\u2019s still a lot more to a sudoers file. I will try to cover it in another\npart of the blog post.\n\nKeep experimenting!\n\n", "frontpage": false}
