{"aid": "40207142", "title": "Only9Fans", "url": "https://only9fans.com", "domain": "only9fans.com", "votes": 16, "user": "metadat", "posted_at": "2024-04-30 04:05:51", "comments": 0, "source_title": "Hitting every branch on the way down", "source_text": "Hitting every branch on the way down\n\n# Writing\n\nSoftware, technology, sysadmin war stories, and more.\n\nMonday, April 29, 2024\n\n## Hitting every branch on the way down\n\nI keep seeing people saying that the answer to my complaints about autoconf is\nto rub *more* autoconf on the problem. I don't like this. In the general vein\nof \"this should not be that hard\", I decided to revisit something from two\nyears ago and tried to use my build tool to generate my stuff on a fresh BSD-\nflavored install. (The exact flavor is unimportant here, and mentioning it by\nname would only trigger the weenies in the crowd, so I won't.)\n\nI wanted to prove to myself that yes, my stuff can Just Build on other (i.e.,\nnot Linux or Mac) systems without resorting to the kinds of stuff that I wish\nwe had collectively left behind in the 90s.\n\nThe OS itself was fine. The install process on a throwaway VM image was quick\nand painless. I knew how to get my usual tools installed - bash, nano, that\nkind of thing. Unlike last time, I opted to not do X and just focused on\ngetting my stuff to build.\n\nBut then I made a mistake: I told it to install \"protobuf\" since I use that\nlibrary in my build tool. That actually installed \"protobuf-24.4,1\" which is\nsome insane version number I'd never seen before. All of my other systems are\nall running 3.x.x type versions.\n\nNow, realize, I didn't know this was a mistake yet, and kept on going. I did\nmanage to bootstrap my build tool into a usable binary, and then started a\n\"build the world\" process, at which point it blew up. It was complaining about\nnot being able to find a library called \"google/protobuf/arena\" inside my\npersonal source tree.\n\nThis made no sense, so I started digging, and found out that the \"protoc\"\ncompiler in that version of the software spits out code like this:\n\n    \n    \n    #include \"google/protobuf/thing1.h\" #include \"google/protobuf/thing2.h\" #include \"google/protobuf/thing3.h\"\n\n... you get the idea. It's a third-party library that's installed at the\nsystem level, and yet it's using \"\" like it's all chummy and hanging out with\nyour code in your local repo. Yeah, no. That's wrong. They should be <>\nincludes, like this:\n\n    \n    \n    #include <google/protobuf/thing1.h> #include <google/protobuf/thing2.h> #include <google/protobuf/thing3.h>\n\nWhat's weird is... it *is* that way on all of my other machines - my Mac with\nMacports and my Debian/Raspbian boxes all generate those #includes with <>\nlike they're supposed to, and everything Just Works.\n\nI won't lie. This really made me angry at first. I was like, okay, they did\nyet another stupid thing upstream, and now everyone else is going to have to\nwork around it. It got me thinking thoughts like \"just how hard would it be to\nNOT use protobuf, anyway\". I figured that this abomination would eventually\nfilter down to Macports and Debian's apt repo and whatnot, and then I'd have\nto deal with it, or toss it.\n\nAfter a few minutes of cooling off, it occurred to me that I could do\nsomething super-duper obnoxious: wrap protoc, and run a nasty little sed\ncommand afterward to flip the \"\" to <>. So I did that, and things proceeded.\nAwful.\n\nOf course, then I ran into some other fun problems with my code, like\nIPPROTO_* definitions not being available. I have a wrapper for getaddrinfo()\nand it uses IPPROTO_TCP in the .ai_protocol field. I had all of the #includes\nthat the man pages say to have for using that function, but that's not enough\non this particular system.\n\nI assume that there's some transitive #include on Macs and on glibc-flavored\nLinuxes that drags this in for me, but on this one BSD it doesn't work that\nway. The fix was simple enough, and mighty stupid:\n\n    \n    \n    #include <netinet/in.h>\n\nAnd no, that's not listed in their getaddrinfo(3) manual page, even though\nIPPROTO_UDP and _TCP are both explicitly mentioned in it. Dig around online\nand you'll find this tripping up other people. That's the extent of my self-\ninflicted damage that had to be fixed to make it build: lack of a few\n#includes.\n\nStuff like this is why I tend to wall off calls into the C library with a\nbunch of compatibility gunk and then use my own interfaces above that.\n\nAt some point during this, I decided to go back into the protobuf git repo to\nsee just when they decided to dump the angle brackets in favor of the double-\nquotes, and that's when I hit another wall of stupid. Apparently it's possible\nto change a git repo in such a way that \"git log -p\" will never show it. Did\nyou know that? Before yesterday, I definitely didn't.\n\nHere's how I discovered this: obviously, there was code that would do the <>\nstuff at some point. The last version of it I could find looked like this:\n\n    \n    \n    std::string left = \"\\\"\"; std::string right = \"\\\"\"; if (use_system_include) { left = \"<\"; right = \">\"; } return left + name + right;\n\nIt seems simple enough, if a little goofy: return \"input\" unless\nuse_system_include gets set a few lines up, in which case it should return\n<input>. No big deal, right?\n\nBut... that code exists nowhere in the repo as it stands now. Silly naive me,\nI thought I could just \"git log -p\" and do a / search in less for\n\"use_system_include\" to find the commit which dropped it. I wanted to learn\nwhy they did this, because maybe they had a good reason, or basically, if I\ncomplained about it, what I would be up against.\n\nI found nothing.\n\nThis started a terrible sequence where I started checking out different\ncommits from the tree to see what it looked like at various points in the\npast. I got it down to a commit that contained the above code, and then one\ncommit past that dropped it.\n\nThis must be it, right? I should be able to \"git log -p\" and see it, right?\nNope.\n\n    \n    \n    commit d85c9944c55fb38f4eae149979a0f680ea125ecb (HEAD) Merge: 7764c864b 0264866ce Author: <removed because it's not their fault> Date: Mon Sep 19 14:10:44 2022 -0700 Sync from Piper @475378801 PROTOBUF_SYNC_PIPER\n\nThe next line in the git log output is the next commit. There's no \"body\" to\nthis commit. It's just a \"Merge:\" and two other commits.\n\n7764c864b and 0264866ce, right? I should be able to sync to those with git\ncheckout and see which one dropped it, yeah? Well, I'll spare you the effort\nand just say that BOTH OF THEM have the old code in it.\n\nSo... this commit somehow drops the code even though it's merging two\n\"ancestral commits\" that both contain it, and there's no diff shown.\n\nConfusing, right?\n\nI don't know how I finally figured this out, but after a whole lot of cursing\nand thrashing, I found \"git show <commit>\" will FINALLY give me the results I\nwant, ish. It contains the change which dumped the <> code and put in the new\nstuff.\n\n    \n    \n    -- std::string left = \"\\\"\"; -- std::string right = \"\\\"\"; -- if (use_system_include) { -- left = \"<\"; -- right = \">\"; -- } -- return left + name + right; ++ return absl::StrCat(\"\\\"\", basename, \"\\\"\");\n\nThere's no explanation or other context. Presumably that all got squashed out\nwhen it was exported from whatever they use internally.\n\n\"Why\" is gone. I just have \"when\", and that's not very interesting: it was\nmerged in September 2022, ho hum. That just means that whenever Linux\ndistributions and Macports catch up with at least that point, I'm going to\nhave to deal with this for real.\n\nOh, there's one more bit of batshittery which needs to be mentioned here. My\nstuff uses pkg-config to find out how to compile and link against these\nlibraries, right? Well, when it was using this oh-so-new protobuf version, the\ncommands it was running were so long, it was scrolling off my standard 80x25\nterminal.\n\n    \n    \n    $ pkg-config --cflags protobuf | wc -c 4326\n\nYep! 4 KB of cflags. Here's just the top part of it:\n\n    \n    \n    # pkg-config --cflags protobuf -I/usr/local/include -DPROTOBUF_USE_DLLS -Wno-float-conversion -DNOMINMAX -Wno-float-conversion -DNOMINMAX -Wno-float-conversion -DNOMINMAX -Wno-float-conversion -DNOMINMAX -Wno-float-conversion -DNOMINMAX -Wno-float-conversion -DNOMINMAX -Wno-float-conversion -DNOMINMAX -Wno-float-conversion -DNOMINMAX -Wno-float-conversion\n\n... and it just goes on like this. It actually worked, though!\n\nFinally, remember when I said that I made a problem by installing their\n\"protobuf\" package without realizing it? Yeah, it turns out they actually also\nhave \"protobuf3\" which is a nice sane version just like the ones on my other\nmachines, #include <...> and all. So, I removed the bad one, installed this\nother one, and dropped my sed hack.\n\nWhat a night.\n\nMore writing | Contact / send feedback\n\n", "frontpage": true}
