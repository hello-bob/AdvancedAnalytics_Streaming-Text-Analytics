{"aid": "40208530", "title": "Systemd wants to expand to include a sudo replacement", "url": "https://mastodon.social/@pid_eins/112353324518585654", "domain": "mastodon.social", "votes": 1, "user": "jamesy0ung", "posted_at": "2024-04-30 08:29:38", "comments": 0, "source_title": "Lennart Poettering (@pid_eins@mastodon.social)", "source_text": "Lennart Poettering: \"5\ufe0f\u20e3 Here's the 5th installment...\" - Mastodon\n\nCreate accountLogin\n\nLennart Poettering @pid_eins@mastodon.social\n\nHere's the 5th installment of my series of posts highlighting key new features\nof the upcoming v256 release of systemd.\n\nI am pretty sure all of you are well aware of the venerable \"sudo\" tool that\nis a key component of most Linux distributions since a long time. At the\nsurface it's a tool that allows an unprivileged user to acquire privileges\ntemporarily, from within their existing login sessions, for just one command,\nor maybe for a subshell.\n\n\"sudo\" is very very useful, as it...\n\nApr 29, 2024, 07:27 AM\u00b7\u00b7Web\n\n90boosts\u00b785favorites\n\n1d *\n\nLennart Poettering @pid_eins\n\n... allows users to operate at minimum privilege: do most of their work\nwithout privileges but temporarily acquire them where needed, all without\nleaving the shell workflow, integratable with shell scripts, pipelines and so\non.\n\nsudo has serious problems though. It's a relatively large SUID binary, i.e.\nprivileged code that unprivileged users can invoke from their own context. It\nhas a complicating configuration language, loadable plugins (ldap!), hostname\nmatches and so on and so on.\n\n1d *\n\nLennart Poettering @pid_eins\n\nThis has led various people to revisit the problem and come up with\nalternatives: most prominently there's probably OpenBSD's sudo replacement\ncalled \"doas\". While it greatly simplifies the tool and removes much of the\nattack surface, it doesn't change one key thing: it's still a SUID binary.\n\nI personally think that the biggest problem with sudo is the fact it's a SUID\nbinary though \u2013 the big attack surface, the plugins, network access and so on\nthat come after it it just make the key problem...\n\n1d *\n\nLennart Poettering @pid_eins\n\n... worse, but are not in themselves the main issue with sudo.\n\nSUID processes are weird concepts: they are invoked by unprivileged code and\ninherit the execution context intended for and controlled by unprivileged\ncode. By execution context I mean the myriad of properties that a process has\non Linux these days, from environment variables, process scheduling\nproperties, cgroup assignments, security contexts, file descriptors passed,\nand so on and so on. A few of these settings the kernel is nice...\n\n1d\n\nLennart Poettering @pid_eins\n\n... enough to clean up automatically when a SUID binary is invoked, but much\nof it has to be cleaned up by the invoked suid binary. This has to be done\nvery very carefully, and history has shown that SUID binaries are generally\npretty shit at that.\n\nSo, in my ideal world, we'd have an OS entirely without SUID. Let's throw out\nthe concept of SUID on the dump of UNIX' bad ideas. An execution context for\nprivileged code that is half under the control of unprivileged code and that\nneeds careful, ...\n\n1d\n\nLennart Poettering @pid_eins\n\n... manual clean-up is just not how security engineering should be done in\n2024 anymore.\n\nWith systemd v256 we are going one step towards this. There's a new tool in\nsystemd, called \"run0\". Or actually, it's not a new tool, it's actually the\nlong existing tool \"systemd-run\", but when invoked under the \"run0\" name (via\na symlink) it behaves a lot like a sudo clone. But with one key difference:\nit's *not* in fact SUID. Instead it just asks the service manager to invoke a\ncommand or shell under...\n\n1d\n\nLennart Poettering @pid_eins\n\n... the target user's UID. It allocates a new PTY for that, and then shovels\ndata back and forth from the originating TTY and this PTY.\n\nOr in other words: the target command is invoked in an isolated exec context,\nfreshly forked off PID 1, without inheriting any context from the client\n(well, admittedly, we *do* propagate $TERM, but that's an explicit exception,\ni.e. allowlist rather than denylist).\n\nOne could say, \"run0\" is closer to behaviour of \"ssh\" than to \"sudo\", in many\nways. Except that...\n\n1d *\n\nLennart Poettering @pid_eins\n\nit doesn't bother with encryption or cryptographic authentication, key\nmanagement and stuff, but instead relies on the kernel's local identification\nmechanisms.\n\nrun0 doesn't implement a configuration language of its own btw (i.e. no\nequivalent of /etc/sudoers). Instead, it just uses polkit for that, i.e. how\nwe these days usually let unpriv local clients be authorized by priv servers.\n\nBy isolating the contexts and the resources of client and target we remove\nsome other classes of attacks...\n\n1d *\n\nLennart Poettering @pid_eins\n\n... entirely, for example this stuff:\n\nhttps://ruderich.org/simon/notes/su-sudo-from-root-tty-hijacking\n\nBut enough about all that security blabla. The tool is also a lot more fun to\nuse than sudo. For example, by default it will tint your terminal background\nin a reddish tone while you are operating with elevated privileges. That is\nsupposed to act as a friendly reminder that you haven't given up the\nprivileges yet, and marks the output of all commands that ran with privileges\nappropriately. (If you don't like this, ...\n\nruderich.orgsu/sudo from root to another user allows TTY hijacking and\narbitrary code execution\n\n1d\n\nLennart Poettering @pid_eins\n\n... you can easily turn it off via the --background= switch). It also inserts\na red dot (unicode ftw) in the window title while you operate with privileges,\nand drops it afterwards.\n\nAnd since it's just systemd-run called under a different name it supports the\n--property= switch that systemd-run supports, i.e. it allows you to set\narbitrary service settings for the invoked privileged command/session if you\nlike.\n\nAnyway, that's all for now. Enjoy \"run0\"!\n\n1d\n\nStephan Herbers @stephan@mastodon.sherbers.de\n\n@pid_eins When you say \"while you are operating with elevated privileges\", do\nyou mean you can use run0 to create a root shell to work in, or do you just\nmean while the current programm I started as run0 ist running?\n\n1d\n\nLennart Poettering @pid_eins\n\n@stephan not sure I grok what you are saying. run0 can invoke a shell as root\nfor you, but can also invoke any other command you like as root. The shell is\nafter all just a program too. A program that is typically used to invoke\nfurther programs, but still just a program.\n\nRegardless what you precisely invoke: run0 will tint the bg of its output (and\nyour input) in a reddish tone. Once the program terminates this tinting ends,\nand you get your usual black (or white or whatever) background back.\n\n1d\n\nStephan Herbers @stephan@mastodon.sherbers.de\n\n@pid_eins Yes that explains it. I kinda forget that running a shell is also\njust running a programm. Looking forward to run0.\n\n1d\n\nSandor Sz\u00fccs @sszuecs@hachyderm.io\n\n@pid_eins wow the auto coloring and title changes would be really annoying.\nThe config to disable it seems to be not user friendly, too:\n--background=switch Whatever background means in this case and why it\u2019s\ncorrect to set to switch seems like arbitrary to me. The tool itself seems to\nbe indeed great!\n\n23h\n\nA Manzer @amanzer@techhub.social\n\n@sszuecs @pid_eins I think it's the switch that is called `--background=`. I\ndon't think the thread described the different settings you can give to\n--background.\n\n22h *\n\nLennart Poettering @pid_eins\n\n@amanzer @sszuecs oh. i didn't grok @sszuecs's comment, I was sure there was\nsome misunderstanding but I couldn't figure out how! But your explanation\nexplains the misunderstanding perfectly! So yes, the switch is called \"--\nbackground=\" and you can override the background color with that, or you can\nassign an empty string to disable the tinting altogether.\n\n22h\n\nA Manzer @amanzer@techhub.social\n\n@pid_eins @sszuecs Next up, adding \"--background=magenta\" to my run0.rc.\n\n21h\n\nLennart Poettering @pid_eins\n\n@amanzer @sszuecs note quite. we expect ANSI color specifications, hence you\nprobably want --background=35\n\n20h\n\nSandor Sz\u00fccs @sszuecs@hachyderm.io\n\n@pid_eins @amanzer haha, ok so basically\u2014background=<color> Ok\n\n1d\n\nTheStroyer @TheStroyer\n\n@pid_eins I think it's a good take one sudo. I think there were some\nvulnerabilities found in sudo recently, so it's good to look at other ways to\ndo it.\n\nI wonder what the adoption of this tool is gonna be. Just very pragmatically,\nthe name run0 is harder to type than sudo. So you would have to make a shell\nalias. Would it be possible for a distro to completely replace sudo with this\nand create an alias by default? Maybe it would need to get a compatibility\nmode for it to replace sudo\n\n1d\n\nLennart Poettering @pid_eins\n\n@TheStroyer the command line of run0 is intentionally kept close to sudo's.\nBut that's were the compatibility really ends, i.e. /etc/sudoers and so on\nwe're never going to add compat for.\n\nFrom my perspective run0 should be fine already for a distro to replace sudo\nwith. But let's see how this plays out, I am pretty sure there might be a\nfeature or two we still need to add before the first distros decide it's ready\nto switch over.\n\nAnd I am pretty sure there are plenty of distributions...\n\n1d\n\nLennart Poettering @pid_eins\n\n@TheStroyer ... which think that things like pluggable client-side modules,\nLDAP and so on are actually a good thing, even though I would vehemently\ndisagree with that.\n\n1d\n\nDave Anderson @danderson@hachyderm.io\n\n@pid_eins Same disagreement here. But also iirc policykit is extensible right?\nSo if someone is brave enough they could probably extend pk with whatever\nthings they want, and then it can apply to all privilege escalation not just\nrun0!\n\nMaybe I shouldn't give people ideas...\n\n1d\n\nLennart Poettering @pid_eins\n\n@danderson PK is scriptable with JS, so people kinda can do any kind of shit\nwith it, of course. But I think it's much less problematic than what sudo is\ndoing, because PK runs that stuff in a well defined execution context forked\noff PK's service which runs unprivileged \u2013 and not on the client side, in an\nicky, undefined, half-inherited mess of an execution context under user\ncontrol \u2013 like sudo does it.\n\n1d\n\nDave Anderson @danderson@hachyderm.io\n\n@pid_eins 100% yes. N:M dlopen() in unpredictable contexts should really go\naway as a plugin mechanism, it's so easy to create massive problems.\n\nI saw some distros try to fix PAM this way too, they (ab)use the nscd caching\nprotocol in glibc to move all lookups into a system daemon, and hide the .so's\nfrom the rest of the system. Same idea, move all the scary plugin stuff to a\ncentral location where you can manage it more safely.\n\n1d\n\nDave Anderson @danderson@hachyderm.io\n\n@pid_eins Looks like there was a short discussion on the glibc ML in 2022\nabout formalizing this interface and explicitly support the privilege\nseparation use case, but I'm not sure if anything more happened since...\n\n1d\n\nLennart Poettering @pid_eins\n\n@danderson from my perspective as a systemd person I wouldn't ask for that\nfrom glibc. We have nss-systemd these days which is an IPC frontend to the\ngeneric varlink IPC API described here:\n\nhttps://systemd.io/USER_GROUP_API\n\nAnyone can plug in their stuff there. It's generic, extensible and IPC based.\nUnless you are a systemd hater I see no reason why we'd need to shove that\ninto glibc.\n\nsystemd.ioUser/Group Record Lookup API via Varlink\n\n1d *\n\nDave Anderson @danderson@hachyderm.io\n\n@pid_eins Ooh, TIL! I didn't know about this entire subsystem of systemd. My\nworry was going to be what to do with the cursed legacy modules that some\npeople have, but I see with userdbd there's bidirectional compatibility\nbetween varlink and nss clients. Very nice, and yes I agree this is a better\nway to set up the system.\n\nI look forward to the posts for next release, I'm even learning stuff about\nolder releases!\n\n21h\n\nSimo @simo5@fosstodon.org\n\n@danderson @pid_eins if later systemd is not enough sssd has provided this\nservice with proper caching for almost 15 years.\n\nIt was built specifically for 3 reasons: consistent caching, remove unwanted\nlibraries from binaries, allow centally controlled private credentials.\n\nBecause it predates systemd it has its own protcol but also a fast, mmaped\nshared cache that avoid process context switching when not needed.\n\n(full disclosure I am the original author).\n\n1d\n\nTheStroyer @TheStroyer\n\n@pid_eins So the intention for it to be a replacement for sudo right? I.e.\nsudo does not need to be present on a system.\n\n1d\n\nLennart Poettering @pid_eins\n\n@TheStroyer yes, definitely.\n\n16h\n\nJosh Triplett @josh@joshtriplett.org\n\n> the command line of run0 is intentionally kept close to sudo's.\n\nCould we get a -E/--preserve-env switch? (It'd also be nice if users can do\nper-user configuration to set that, or to set a variety of specific\nenvironment variable passthroughs.) There are a variety of environment\nvariables that are useful to pass through, and I'd rather not specify them all\nevery time or do configuration-via-shell-alias.\n\n15h\n\nLennart Poettering @pid_eins\n\n@josh @TheStroyer but there are also plenty which never should be copied over.\nHence adding a blanket copy switch for all env vars sounds highly problematic\nto me.\n\n12h\n\nJosh Triplett @josh@joshtriplett.org\n\nAs far as I can tell from a detailed look at `env`, the only environment\nvariables that *shouldn't* be copied over are those that should be overwritten\nby root-specific things; it seems like it should suffice to allow copying\neverything over but always give it lower priority than things explicitly set\nfor root (e.g. USER=root should override).\n\n1d\n\nsystemd-jasminctl @jasmin@queer.group\n\n@pid_eins ooooh, that's nice! thanks!\n\n/cc @ytvwld you might be interested in run0 as well ^^\n\n23h\n\nverbumfeit @verbumfeit@fosstodon.org\n\n@pid_eins How would one check, within a bash script, if it was executed with\nrun0? Verifying the same for/with sudo always felt confusing to me, with\ncountless different ways to do it, each one less readable than the previous..\n\n23h\n\nLennart Poettering @pid_eins\n\n@verbumfeit sudo sets a bunch of env vars, and we set the same (i.e.\nSUDO_UID/SUDO_GID/SUDO_USER), for compat.\n\n23h\n\nJann Horn @jann@infosec.exchange\n\n@pid_eins yesss this is great, thank you. it would be really nice if\nNO_NEW_PRIVS was more widely used, and I think daemon-based sudo is a big step\ntowards that...\n\n22h\n\nScott Leggett @smlx@fosstodon.org\n\n@pid_eins It sounds like a great improvement on sudo, but I have a question:\nhow do you pronounce \"run0\"?\n\n21h\n\nLennart Poettering @pid_eins\n\n@smlx maybe runzero?\n\n19h\n\nbluca @bluca@fosstodon.org\n\n@pid_eins @smlx surely \"run-oh\", pronounced with a heavy Italian accent and\nrelated hand gesture\n\n15h\n\nNekko @NekkoDroid@mastodon.gamedev.place\n\n@bluca @pid_eins @smlx\n\n13h\n\nMat\u011bj Cepl @mcepl@floss.social\n\n@NekkoDroid @bluca @pid_eins @smlx You know this logo (and the clip of\n\u201cForever Young\u201d by Alphaville) are quite problematic in many nations, right?\n\n12h\n\nNekko @NekkoDroid@mastodon.gamedev.place\n\n@mcepl @bluca @pid_eins @smlx\n\nNo I indeed don't know because I don't keep up with car companies and what\nthey do.\n\n11h\n\nLioh @Lioh@social.anoxinon.de\n\n@pid_eins @smlx like Bruno in German without the B.\n\n4h\n\nFluchtkapsel @fluchtkapsel@nerdculture.de\n\n@Lioh Danke, jetzt habe ich wieder einen Ohrwurm.\n\nWe don't talk about run0! (https://youtu.be/bvWRMAU6V-c?si=UUIfTlbiiuIYm4vD)\n@pid_eins @smlx\n\n1h\n\npa\u0161tika @pastika@kompost.cz\n\n@pid_eins What about emojis? Everyone loves emojis!\n\n1d *\n\nMr. Hmpf @phako@chaos.social\n\n@pid_eins While I welcome the decision to rely on polkit, I find the indirect\ndependency on a javascript engine a bit... iffy.\n\n1d\n\nLennart Poettering @pid_eins\n\n@phako well, i am not a fan of that facet of pk either, but I think that's a\ndifferent problem to tackle. For now, it's *the* local authorization framework\non Linux, and all alternatives are worse.\n\n1d\n\nbluca @bluca@fosstodon.org\n\n@pid_eins @phako the JavaScript engine does not process untrusted inputs, only\ntrusted configuration, so it's really not a security problem anyway. People\nlike to talk down js but it's extremely popular and well know and stable and\nthere are tiny engines like duktape, unlike other alternatives with similar\nproperties like lua\n\n1d\n\nLennart Poettering @pid_eins\n\n@bluca @phako still I think that the right solution here would be to define\nsome minimal IPC rather than choose a programming language for users.\n\nI figure the reason why JS was picked here has more to do with the fact that\nback when PK was designed there was only D-Bus and D-Bus is simply not a great\nchoice if you want to quickly implement an IPC interface. D-Bus is OK to use\nfrom a simple client, but it's really hard to use for a simpler server, after\nall.\n\n1d\n\nbluca @bluca@fosstodon.org\n\n@pid_eins @phako not really, JS was chosen because you need to be able to\nexpress complex configuration rules, and it's better to use a known tool than\ninventing a new one. It's not about IPC, the transport doesn't matter, you\nneed a configuration-like DSL because it's unfeasible to ask every admin/user\nto write and deploy a new program every time some rule needs to be adjusted.\n\n1d\n\nLennart Poettering @pid_eins\n\n@bluca @phako I don't see why dropping in a JS-based varlink mini-service\nwould be any harder than dropping in a PK JS fragment. you get a function call\nwith a JS(ON) object, you answer it with a JS(ON) object. done.\n\nBut by doing this via a Varlink IPC call you gain security (i.e. that stuff\nruns out of process), and make it generic (i.e. people can chose other\nlanguages than JS)\n\n23h\n\nbluca @bluca@fosstodon.org\n\n@pid_eins @phako because writing a new config file and writing a new running\nprogram are not the same thing, and while for us developers there's not much\ndifference, for non-developers the difference is huge. JS was already a though\nsell because, while the dialect used is minimal and restricted, it's still\npotentially a full-blown language. Dealing with writing and deploying and\nmaintaining fully independent executables would be way too much. You need\ndependency tracking, pipelines, etc etc.\n\n23h\n\nLennart Poettering @pid_eins\n\n@bluca @phako i don't follow why running JS embedded would make anything\n\"easier\" than running it as a process of its own?\n\n23h\n\nbluca @bluca@fosstodon.org\n\n@pid_eins @phako it's not about running, it's about writing, deploying,\nmaintaining\n\n21h\n\nSimo @simo5@fosstodon.org\n\n@bluca @pid_eins @phako writing js is as hard as any other program, and it is\nturing complete which makes \"configuration\" uncheckable (unless you solved the\nhalting problem) and this is definitely not good security.\n\nA decent basic configuration set + extension via IPC for those extremely rare\ncases where you would need it (and that you can block) would be much better\nfrom a security pov.\n\n21h\n\nSimo @simo5@fosstodon.org\n\n@bluca @pid_eins @phako Most people can't think adversarially when writing\ncode, which means using js to configure access to a high privileges is very\nrisky. And can't be easily checked for correctness.\n\nIf you do anything more complex than just assigning variables you risk opening\nhuge holes by not paying attention at how things are evaluated.\n\n20h\n\nbluca @bluca@fosstodon.org\n\n@simo5 @pid_eins @phako there can be no \"decent basic configuration set\",\nthat's the point - otherwise it would be there. It's been working like this\nfor a decade, and it's been just fine as it's simple enough do to the variety\nof basic things that everybody need. The problems aren't there, they are\nelsewhere, and requiring users and admins to become software developers and\nsupply chain managers is not a realistic or good or desirable solution\n\n20h\n\nSimo @simo5@fosstodon.org\n\n@bluca @pid_eins @phako there are countless programs that have a simple .ini\nfile for configuration where all you do is set variables. Hyperbole does not\nhelp. Pretty sure 99% of what pk is used for can ne done with a plain config\nfilr, whether tha is implemented as .ini or a more structured .json or\nsimilar. The cases where you need a program to compute behavior at runtime is\nvanishingly small.\n\n1d\n\nMr. Hmpf @phako@chaos.social\n\n@bluca @pid_eins Does duktype have the same language level as mozjs now?\n\nExploreLive feeds\n\nLogin to follow profiles or hashtags, favorite, share and reply to posts. You\ncan also interact from your account on a different server.\n\nCreate accountLogin\n\nAbout\n\nDrag & drop to upload\n\n", "frontpage": false}
