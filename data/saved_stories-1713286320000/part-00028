{"aid": "40049540", "title": "modernc.org/sqlite now supports Linux/loong64", "url": "https://pkg.go.dev/modernc.org/sqlite", "domain": "go.dev", "votes": 1, "user": "0xjnml", "posted_at": "2024-04-16 08:13:54", "comments": 0, "source_title": "sqlite package - modernc.org/sqlite - Go Packages", "source_text": "sqlite package - modernc.org/sqlite - Go Packages\n\n# sqlite\n\npackage module\n\nVersion: v1.29.7\n\nOpens a new window with list of versions in this module.\n\nLatest Latest Go to latest Published: Apr 15, 2024 License: BSD-3-Clause\n\nOpens a new window with license information.\n\nImports: 21\n\nOpens a new window with list of imports.\n\nImported by: 1,047\n\nOpens a new window with list of known importers.\n\n## Details\n\n  * Learn more about best practices\n\n## Repository\n\ngitlab.com/cznic/sqlite\n\n## Links\n\n  * Open Source Insights\n\n## README \u00b6\n\n### sqlite\n\nPackage sqlite is a cgo-free port of SQLite. Although you could see mattn's\ndriver (github.com/mattn/go-sqlite3) in go.mod file, we import it for tests\nonly.\n\nSQLite is an in-process implementation of a self-contained, serverless, zero-\nconfiguration, transactional SQL database engine.\n\n#### Thanks\n\nThis project is sponsored by Schleibinger Ger\u00e4te Teubert u. Greim GmbH by\nallowing one of the maintainers to work on it also in office hours.\n\n#### Installation\n\n    \n    \n    $ go get modernc.org/sqlite\n\n#### Documentation\n\npkg.go.dev/modernc.org/sqlite\n\n#### Builders\n\nmodern-c.appspot.com/-/builder/?importpath=modernc.org%2fsqlite\n\n#### Speedtest1\n\nNumbers for the pure Go version were produced by\n\n    \n    \n    ~/src/modernc.org/sqlite/speedtest1$ go build && ./speedtest1\n\nNumbers for the pure C version were produced by\n\n    \n    \n    ~/src/modernc.org/sqlite/testdata/sqlite-src-3410200/test$ gcc speedtest1.c ../../sqlite-amalgamation-3410200/sqlite3.c -lpthread -ldl && ./a.out\n\nThe results are from Go version 1.20.4 and GCC version 10.2.1 on a Linux/amd64\nmachine, CPU: AMD Ryzen 9 3900X 12-Core Processor \u00d7 24, 128GB RAM. Shown are\nthe best of 3 runs.\n\n    \n    \n    Go C -- Speedtest1 for SQLite 3.41.2 2023-03-22 11:56:21 0d1fc92f94cb6b76bffe3ec34d69 -- Speedtest1 for SQLite 3.41.2 2023-03-22 11:56:21 0d1fc92f94cb6b76bffe3ec34d69 100 - 50000 INSERTs into table with no index...................... 0.071s 100 - 50000 INSERTs into table with no index...................... 0.077s 110 - 50000 ordered INSERTS with one index/PK..................... 0.114s 110 - 50000 ordered INSERTS with one index/PK..................... 0.082s 120 - 50000 unordered INSERTS with one index/PK................... 0.137s 120 - 50000 unordered INSERTS with one index/PK................... 0.099s 130 - 25 SELECTS, numeric BETWEEN, unindexed...................... 0.083s 130 - 25 SELECTS, numeric BETWEEN, unindexed...................... 0.091s 140 - 10 SELECTS, LIKE, unindexed................................. 0.210s 140 - 10 SELECTS, LIKE, unindexed................................. 0.120s 142 - 10 SELECTS w/ORDER BY, unindexed............................ 0.276s 142 - 10 SELECTS w/ORDER BY, unindexed............................ 0.182s 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed.................. 0.183s 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed.................. 0.099s 150 - CREATE INDEX five times..................................... 0.172s 150 - CREATE INDEX five times..................................... 0.127s 160 - 10000 SELECTS, numeric BETWEEN, indexed..................... 0.080s 160 - 10000 SELECTS, numeric BETWEEN, indexed..................... 0.078s 161 - 10000 SELECTS, numeric BETWEEN, PK.......................... 0.080s 161 - 10000 SELECTS, numeric BETWEEN, PK.......................... 0.078s 170 - 10000 SELECTS, text BETWEEN, indexed........................ 0.187s 170 - 10000 SELECTS, text BETWEEN, indexed........................ 0.169s 180 - 50000 INSERTS with three indexes............................ 0.196s 180 - 50000 INSERTS with three indexes............................ 0.154s 190 - DELETE and REFILL one table................................. 0.200s 190 - DELETE and REFILL one table................................. 0.155s 200 - VACUUM...................................................... 0.180s 200 - VACUUM...................................................... 0.142s 210 - ALTER TABLE ADD COLUMN, and query........................... 0.004s 210 - ALTER TABLE ADD COLUMN, and query........................... 0.005s 230 - 10000 UPDATES, numeric BETWEEN, indexed..................... 0.093s 230 - 10000 UPDATES, numeric BETWEEN, indexed..................... 0.080s 240 - 50000 UPDATES of individual rows............................ 0.153s 240 - 50000 UPDATES of individual rows............................ 0.137s 250 - One big UPDATE of the whole 50000-row table................. 0.024s 250 - One big UPDATE of the whole 50000-row table................. 0.019s 260 - Query added column after filling............................ 0.004s 260 - Query added column after filling............................ 0.005s 270 - 10000 DELETEs, numeric BETWEEN, indexed..................... 0.278s 270 - 10000 DELETEs, numeric BETWEEN, indexed..................... 0.263s 280 - 50000 DELETEs of individual rows............................ 0.188s 280 - 50000 DELETEs of individual rows............................ 0.180s 290 - Refill two 50000-row tables using REPLACE................... 0.411s 290 - Refill two 50000-row tables using REPLACE................... 0.359s 300 - Refill a 50000-row table using (b&1)==(a&1)................. 0.175s 300 - Refill a 50000-row table using (b&1)==(a&1)................. 0.151s 310 - 10000 four-ways joins....................................... 0.427s 310 - 10000 four-ways joins....................................... 0.365s 320 - subquery in result set...................................... 0.440s 320 - subquery in result set...................................... 0.521s 400 - 70000 REPLACE ops on an IPK................................. 0.125s 400 - 70000 REPLACE ops on an IPK................................. 0.106s 410 - 70000 SELECTS on an IPK..................................... 0.081s 410 - 70000 SELECTS on an IPK..................................... 0.078s 500 - 70000 REPLACE on TEXT PK.................................... 0.174s 500 - 70000 REPLACE on TEXT PK.................................... 0.116s 510 - 70000 SELECTS on a TEXT PK.................................. 0.153s 510 - 70000 SELECTS on a TEXT PK.................................. 0.117s 520 - 70000 SELECT DISTINCT....................................... 0.083s 520 - 70000 SELECT DISTINCT....................................... 0.067s 980 - PRAGMA integrity_check...................................... 0.436s 980 - PRAGMA integrity_check...................................... 0.377s 990 - ANALYZE..................................................... 0.107s 990 - ANALYZE..................................................... 0.038s TOTAL....................................................... 5.525s TOTAL....................................................... 4.637s\n\nThis particular test executes 16.1% faster in the C version.\n\n#### Troubleshooting\n\n  * Q: How can I write to a database concurrently without getting the database is locked error (or SQLITE_BUSY)?\n\n    * A: You can't. The C sqlite implementation does not allow concurrent writes, and this libary does not modify that behaviour. You can, however, use DB.SetMaxOpenConns(1) so that only 1 connection is ever used by the DB, allowing concurrent access to DB without making the writes concurrent. More information on issues #65 and #106.\n\n## Documentation \u00b6\n\n### Overview \u00b6\n\n  * Thanks\n  * Supported platforms and architectures\n  * Builders\n  * Fragile modernc.org/libc dependency\n  * Changelog\n  * Connecting to a database\n  * Debug and development versions\n  * Hacking\n  * Sqlite documentation\n\nPackage sqlite is a sql/database driver using a CGo-free port of the C SQLite3\nlibrary.\n\nSQLite is an in-process implementation of a self-contained, serverless, zero-\nconfiguration, transactional SQL database engine.\n\n#### Thanks \u00b6\n\nThis project is sponsored by Schleibinger Ger\u00e4te Teubert u. Greim GmbH by\nallowing one of the maintainers to work on it also in office hours.\n\n#### Supported platforms and architectures \u00b6\n\nThese combinations of GOOS and GOARCH are currently supported\n\n    \n    \n    OS Arch SQLite version ------------------------------ darwin amd64 3.45.2 darwin arm64 3.45.2 freebsd amd64 3.45.2 freebsd arm64 3.45.2 linux 386 3.45.2 linux amd64 3.45.2 linux arm 3.45.2 linux arm64 3.45.2 linux loong64 3.45.2 linux ppc64le 3.45.2 linux riscv64 3.45.2 linux s390x 3.45.2 windows amd64 3.45.2 windows arm64 3.45.2\n\n#### Builders \u00b6\n\nBuilder results available at:\n\nhttps://modern-c.appspot.com/-/builder/?importpath=modernc.org%2fsqlite\n\n#### Fragile modernc.org/libc dependency \u00b6\n\nWhen you import this package you should use in your go.mod file the exact same\nversion of modernc.org/libc as seen in the go.mod file of this repository.\n\nSee the discussion at https://gitlab.com/cznic/sqlite/-/issues/177 for more\ndetails.\n\n#### Changelog \u00b6\n\n2024-02-13: v1.29.0\n\nUpgrade to SQLite 3.45.1, release notes at\nhttps://sqlite.org/releaselog/3_45_1.html.\n\n2023-12-14 v1.28.0:\n\n    \n    \n    (*Driver).RegisterConnectionHook: added ConnectionHookFn: added ExecQuerierContext: added RegisterConnectionHook: added\n\n2023-08-03 v1.25.0: enable SQLITE_ENABLE_DBSTAT_VTAB.\n\n2023-07-11 v1.24.0:\n\nAdd (*conn).{Serialize,Deserialize,NewBackup,NewRestore} methods, add Backup\ntype.\n\n2023-06-01 v1.23.0:\n\nAllow registering aggregate functions.\n\n2023-04-22 v1.22.0:\n\nSupport linux/s390x.\n\n2023-02-23 v1.21.0:\n\nUpgrade to SQLite 3.41.0, release notes at\nhttps://sqlite.org/releaselog/3_41_0.html.\n\n2022-11-28 v1.20.0\n\nSupport linux/ppc64le.\n\n2022-09-16 v1.19.0:\n\nSupport frebsd/arm64.\n\n2022-07-26 v1.18.0:\n\nAdds support for Go fs.FS based SQLite virtual filesystems, see function New\nin modernc.org/sqlite/vfs and/or TestVFS in all_test.go\n\n2022-04-24 v1.17.0:\n\nSupport windows/arm64.\n\n2022-04-04 v1.16.0:\n\nSupport scalar application defined functions written in Go.\n\n    \n    \n    https://www.sqlite.org/appfunc.html\n\n2022-03-13 v1.15.0:\n\nSupport linux/riscv64.\n\n2021-11-13 v1.14.0:\n\nSupport windows/amd64. This target had previously only experimental status\nbecause of a now resolved memory leak.\n\n2021-09-07 v1.13.0:\n\nSupport freebsd/amd64.\n\n2021-06-23 v1.11.0:\n\nUpgrade to use sqlite 3.36.0, release notes at\nhttps://www.sqlite.org/releaselog/3_36_0.html.\n\n2021-05-06 v1.10.6:\n\nFixes a memory corruption issue (https://gitlab.com/cznic/sqlite/-/issues/53).\nVersions since v1.8.6 were affected and should be updated to v1.10.6.\n\n2021-03-14 v1.10.0:\n\nUpdate to use sqlite 3.35.0, release notes at\nhttps://www.sqlite.org/releaselog/3_35_0.html.\n\n2021-03-11 v1.9.0:\n\nSupport darwin/arm64.\n\n2021-01-08 v1.8.0:\n\nSupport darwin/amd64.\n\n2020-09-13 v1.7.0:\n\nSupport linux/arm and linux/arm64.\n\n2020-09-08 v1.6.0:\n\nSupport linux/386.\n\n2020-09-03 v1.5.0:\n\nThis project is now completely CGo-free, including the Tcl tests.\n\n2020-08-26 v1.4.0:\n\nFirst stable release for linux/amd64. The database/sql driver and its tests\nare CGo free. Tests of the translated sqlite3.c library still require CGo.\n\n    \n    \n    $ make full ... SQLite 2020-08-14 13:23:32 fca8dc8b578f215a969cd899336378966156154710873e68b3d9ac5881b0ff3f 0 errors out of 928271 tests on 3900x Linux 64-bit little-endian WARNING: Multi-threaded tests skipped: Linked against a non-threadsafe Tcl build All memory allocations freed - no leaks Maximum memory usage: 9156360 bytes Current memory usage: 0 bytes Number of malloc() : -1 calls --- PASS: TestTclTest (1785.04s) PASS ok modernc.org/sqlite 1785.041s $\n\n2020-07-26 v1.4.0-beta1:\n\nThe project has reached beta status while supporting linux/amd64 only at the\nmoment. The 'extraquick' Tcl testsuite reports\n\n    \n    \n    630 errors out of 200177 tests on Linux 64-bit little-endian\n\nand some memory leaks\n\n    \n    \n    Unfreed memory: 698816 bytes in 322 allocations\n\n2019-12-28 v1.2.0-alpha.3: Third alpha fixes issue #19.\n\nIt also bumps the minor version as the repository was wrongly already tagged\nwith v1.1.0 before. Even though the tag was deleted there are proxies that\ncached that tag. Thanks /u/garaktailor for detecting the problem and\nsuggesting this solution.\n\n2019-12-26 v1.1.0-alpha.2: Second alpha release adds support for accessing a\ndatabase concurrently by multiple goroutines and/or processes. v1.1.0 is now\nconsidered feature-complete. Next planed release should be a beta with a\nproper test suite.\n\n2019-12-18 v1.1.0-alpha.1: First alpha release using the new cc/v3, gocc, qbe\ntoolchain. Some primitive tests pass on linux_{amd64,386}. Not yet safe for\nconcurrent access by multiple goroutines. Next alpha release is planed to\narrive before the end of this year.\n\n2017-06-10 Windows/Intel no more uses the VM (thanks Steffen Butzer).\n\n2017-06-05 Linux/Intel no more uses the VM (cznic/virtual).\n\n#### Connecting to a database \u00b6\n\nTo access a Sqlite database do something like\n\n    \n    \n    import ( \"database/sql\" _ \"modernc.org/sqlite\" ) ... db, err := sql.Open(\"sqlite\", dsnURI) ...\n\n#### Debug and development versions \u00b6\n\nA comma separated list of options can be passed to `go generate` via the\nenvironment variable GO_GENERATE. Some useful options include for example:\n\n    \n    \n    -DSQLITE_DEBUG -DSQLITE_MEM_DEBUG -ccgo-verify-structs\n\nTo create a debug/development version, issue for example:\n\n    \n    \n    $ GO_GENERATE=-DSQLITE_DEBUG,-DSQLITE_MEM_DEBUG go generate\n\nNote: To run `go generate` you need to have modernc.org/ccgo/v3 installed.\n\n#### Hacking \u00b6\n\nThis is an example of how to use the debug logs in modernc.org/libc when\nhunting a bug.\n\n    \n    \n    0:jnml@e5-1650:~/src/modernc.org/sqlite$ git status On branch master Your branch is up to date with 'origin/master'. nothing to commit, working tree clean 0:jnml@e5-1650:~/src/modernc.org/sqlite$ git log -1 commit df33b8d15107f3cc777799c0fe105f74ef499e62 (HEAD -> master, tag: v1.21.1, origin/master, origin/HEAD, wips, ok) Author: Jan Mercl <0xjnml@gmail.com> Date: Mon Mar 27 16:18:28 2023 +0200 upgrade to SQLite 3.41.2 0:jnml@e5-1650:~/src/modernc.org/sqlite$ rm -f /tmp/libc.log ; go test -v -tags=libc.dmesg -run TestScalar ; ls -l /tmp/libc.log test binary compiled for linux/amd64 === RUN TestScalar --- PASS: TestScalar (0.09s) PASS ok modernc.org/sqlite 0.128s -rw-r--r-- 1 jnml jnml 76 Apr 6 11:22 /tmp/libc.log 0:jnml@e5-1650:~/src/modernc.org/sqlite$ cat /tmp/libc.log [10723 sqlite.test] 2023-04-06 11:22:48.288066057 +0200 CEST m=+0.000707150 0:jnml@e5-1650:~/src/modernc.org/sqlite$\n\nThe /tmp/libc.log file is created as requested. No useful messages there\nbecause none are enabled in libc. Let's try to enable Xwrite as an example.\n\n    \n    \n    0:jnml@e5-1650:~/src/modernc.org/libc$ git status On branch master Your branch is up to date with 'origin/master'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: libc_linux.go no changes added to commit (use \"git add\" and/or \"git commit -a\") 0:jnml@e5-1650:~/src/modernc.org/libc$ git log -1 commit 1e22c18cf2de8aa86d5b19b165f354f99c70479c (HEAD -> master, tag: v1.22.3, origin/master, origin/HEAD) Author: Jan Mercl <0xjnml@gmail.com> Date: Wed Feb 22 20:27:45 2023 +0100 support sqlite 3.41 on linux targets 0:jnml@e5-1650:~/src/modernc.org/libc$ git diff diff --git a/libc_linux.go b/libc_linux.go index 1c2f482..ac1f08d 100644 --- a/libc_linux.go +++ b/libc_linux.go @@ -332,19 +332,19 @@ func Xwrite(t *TLS, fd int32, buf uintptr, count types.Size_t) types.Ssize_t { var n uintptr switch n, _, err = unix.Syscall(unix.SYS_WRITE, uintptr(fd), buf, uintptr(count)); err { case 0: - // if dmesgs { - // // dmesg(\"%v: %d %#x: %#x\\n%s\", origin(1), fd, count, n, hex.Dump(GoBytes(buf, int(n)))) - // dmesg(\"%v: %d %#x: %#x\", origin(1), fd, count, n) - // } + if dmesgs { + // dmesg(\"%v: %d %#x: %#x\\n%s\", origin(1), fd, count, n, hex.Dump(GoBytes(buf, int(n)))) + dmesg(\"%v: %d %#x: %#x\", origin(1), fd, count, n) + } return types.Ssize_t(n) case errno.EAGAIN: // nop } } - // if dmesgs { - // dmesg(\"%v: fd %v, count %#x: %v\", origin(1), fd, count, err) - // } + if dmesgs { + dmesg(\"%v: fd %v, count %#x: %v\", origin(1), fd, count, err) + } t.setErrno(err) return -1 } 0:jnml@e5-1650:~/src/modernc.org/libc$\n\nWe need to tell the Go build system to use our local, patched/debug libc:\n\n    \n    \n    0:jnml@e5-1650:~/src/modernc.org/sqlite$ go work use $(go env GOPATH)/src/modernc.org/libc 0:jnml@e5-1650:~/src/modernc.org/sqlite$ go work use .\n\nAnd run the test again:\n\n    \n    \n    0:jnml@e5-1650:~/src/modernc.org/sqlite$ rm -f /tmp/libc.log ; go test -v -tags=libc.dmesg -run TestScalar ; ls -l /tmp/libc.log test binary compiled for linux/amd64 === RUN TestScalar --- PASS: TestScalar (0.26s) PASS ok modernc.org/sqlite 0.285s -rw-r--r-- 1 jnml jnml 918 Apr 6 11:29 /tmp/libc.log 0:jnml@e5-1650:~/src/modernc.org/sqlite$ cat /tmp/libc.log [11910 sqlite.test] 2023-04-06 11:29:13.143589542 +0200 CEST m=+0.000689270 [11910 sqlite.test] libc_linux.go:337:Xwrite: 8 0x200: 0x200 [11910 sqlite.test] libc_linux.go:337:Xwrite: 8 0xc: 0xc [11910 sqlite.test] libc_linux.go:337:Xwrite: 7 0x1000: 0x1000 [11910 sqlite.test] libc_linux.go:337:Xwrite: 7 0x1000: 0x1000 [11910 sqlite.test] libc_linux.go:337:Xwrite: 8 0x200: 0x200 [11910 sqlite.test] libc_linux.go:337:Xwrite: 8 0x4: 0x4 [11910 sqlite.test] libc_linux.go:337:Xwrite: 8 0x1000: 0x1000 [11910 sqlite.test] libc_linux.go:337:Xwrite: 8 0x4: 0x4 [11910 sqlite.test] libc_linux.go:337:Xwrite: 8 0x4: 0x4 [11910 sqlite.test] libc_linux.go:337:Xwrite: 8 0x1000: 0x1000 [11910 sqlite.test] libc_linux.go:337:Xwrite: 8 0x4: 0x4 [11910 sqlite.test] libc_linux.go:337:Xwrite: 8 0xc: 0xc [11910 sqlite.test] libc_linux.go:337:Xwrite: 7 0x1000: 0x1000 [11910 sqlite.test] libc_linux.go:337:Xwrite: 7 0x1000: 0x1000 0:jnml@e5-1650:~/src/modernc.org/sqlite$\n\n#### Sqlite documentation \u00b6\n\nSee https://sqlite.org/docs.html\n\n### Index \u00b6\n\n  * Variables\n  * func Limit(c *sql.Conn, id int, newVal int) (r int, err error)\n  * func MustRegisterCollationUtf8(zName string, impl func(left, right string) int)\n  * func MustRegisterDeterministicScalarFunction(zFuncName string, nArg int32, ...)\n  * func MustRegisterFunction(zFuncName string, impl *FunctionImpl)\n  * func MustRegisterScalarFunction(zFuncName string, nArg int32, ...)\n  * func RegisterCollationUtf8(zName string, impl func(left, right string) int) error\n  * func RegisterConnectionHook(fn ConnectionHookFn)\n  * func RegisterDeterministicScalarFunction(zFuncName string, nArg int32, ...) (err error)\n  * func RegisterFunction(zFuncName string, impl *FunctionImpl) error\n  * func RegisterScalarFunction(zFuncName string, nArg int32, ...) (err error)\n  * type AggregateFunction\n  * type Backup\n  *     * func (b *Backup) Commit() (driver.Conn, error)\n    * func (b *Backup) Finish() error\n    * func (b *Backup) Step(n int32) (bool, error)\n  * type ConnectionHookFn\n  * type Driver\n  *     * func (d *Driver) Open(name string) (conn driver.Conn, err error)\n    * func (d *Driver) RegisterConnectionHook(fn ConnectionHookFn)\n  * type Error\n  *     * func (e *Error) Code() int\n    * func (e *Error) Error() string\n  * type ExecQuerierContext\n  * type FunctionContext\n  * type FunctionImpl\n\n### Constants \u00b6\n\nThis section is empty.\n\n### Variables \u00b6\n\nView Source\n\n    \n    \n    var ( // ErrorCodeString maps Error.Code() to its string representation. ErrorCodeString = map[int]string{ sqlite3.SQLITE_ABORT: \"Callback routine requested an abort (SQLITE_ABORT)\", sqlite3.SQLITE_AUTH: \"Authorization denied (SQLITE_AUTH)\", sqlite3.SQLITE_BUSY: \"The database file is locked (SQLITE_BUSY)\", sqlite3.SQLITE_CANTOPEN: \"Unable to open the database file (SQLITE_CANTOPEN)\", sqlite3.SQLITE_CONSTRAINT: \"Abort due to constraint violation (SQLITE_CONSTRAINT)\", sqlite3.SQLITE_CORRUPT: \"The database disk image is malformed (SQLITE_CORRUPT)\", sqlite3.SQLITE_DONE: \"sqlite3_step() has finished executing (SQLITE_DONE)\", sqlite3.SQLITE_EMPTY: \"Internal use only (SQLITE_EMPTY)\", sqlite3.SQLITE_ERROR: \"Generic error (SQLITE_ERROR)\", sqlite3.SQLITE_FORMAT: \"Not used (SQLITE_FORMAT)\", sqlite3.SQLITE_FULL: \"Insertion failed because database is full (SQLITE_FULL)\", sqlite3.SQLITE_INTERNAL: \"Internal logic error in SQLite (SQLITE_INTERNAL)\", sqlite3.SQLITE_INTERRUPT: \"Operation terminated by sqlite3_interrupt()(SQLITE_INTERRUPT)\", sqlite3.SQLITE_IOERR | (1 << 8): \"(SQLITE_IOERR_READ)\", sqlite3.SQLITE_IOERR | (10 << 8): \"(SQLITE_IOERR_DELETE)\", sqlite3.SQLITE_IOERR | (11 << 8): \"(SQLITE_IOERR_BLOCKED)\", sqlite3.SQLITE_IOERR | (12 << 8): \"(SQLITE_IOERR_NOMEM)\", sqlite3.SQLITE_IOERR | (13 << 8): \"(SQLITE_IOERR_ACCESS)\", sqlite3.SQLITE_IOERR | (14 << 8): \"(SQLITE_IOERR_CHECKRESERVEDLOCK)\", sqlite3.SQLITE_IOERR | (15 << 8): \"(SQLITE_IOERR_LOCK)\", sqlite3.SQLITE_IOERR | (16 << 8): \"(SQLITE_IOERR_CLOSE)\", sqlite3.SQLITE_IOERR | (17 << 8): \"(SQLITE_IOERR_DIR_CLOSE)\", sqlite3.SQLITE_IOERR | (2 << 8): \"(SQLITE_IOERR_SHORT_READ)\", sqlite3.SQLITE_IOERR | (3 << 8): \"(SQLITE_IOERR_WRITE)\", sqlite3.SQLITE_IOERR | (4 << 8): \"(SQLITE_IOERR_FSYNC)\", sqlite3.SQLITE_IOERR | (5 << 8): \"(SQLITE_IOERR_DIR_FSYNC)\", sqlite3.SQLITE_IOERR | (6 << 8): \"(SQLITE_IOERR_TRUNCATE)\", sqlite3.SQLITE_IOERR | (7 << 8): \"(SQLITE_IOERR_FSTAT)\", sqlite3.SQLITE_IOERR | (8 << 8): \"(SQLITE_IOERR_UNLOCK)\", sqlite3.SQLITE_IOERR | (9 << 8): \"(SQLITE_IOERR_RDLOCK)\", sqlite3.SQLITE_IOERR: \"Some kind of disk I/O error occurred (SQLITE_IOERR)\", sqlite3.SQLITE_LOCKED | (1 << 8): \"(SQLITE_LOCKED_SHAREDCACHE)\", sqlite3.SQLITE_LOCKED: \"A table in the database is locked (SQLITE_LOCKED)\", sqlite3.SQLITE_MISMATCH: \"Data type mismatch (SQLITE_MISMATCH)\", sqlite3.SQLITE_MISUSE: \"Library used incorrectly (SQLITE_MISUSE)\", sqlite3.SQLITE_NOLFS: \"Uses OS features not supported on host (SQLITE_NOLFS)\", sqlite3.SQLITE_NOMEM: \"A malloc() failed (SQLITE_NOMEM)\", sqlite3.SQLITE_NOTADB: \"File opened that is not a database file (SQLITE_NOTADB)\", sqlite3.SQLITE_NOTFOUND: \"Unknown opcode in sqlite3_file_control() (SQLITE_NOTFOUND)\", sqlite3.SQLITE_NOTICE: \"Notifications from sqlite3_log() (SQLITE_NOTICE)\", sqlite3.SQLITE_PERM: \"Access permission denied (SQLITE_PERM)\", sqlite3.SQLITE_PROTOCOL: \"Database lock protocol error (SQLITE_PROTOCOL)\", sqlite3.SQLITE_RANGE: \"2nd parameter to sqlite3_bind out of range (SQLITE_RANGE)\", sqlite3.SQLITE_READONLY: \"Attempt to write a readonly database (SQLITE_READONLY)\", sqlite3.SQLITE_ROW: \"sqlite3_step() has another row ready (SQLITE_ROW)\", sqlite3.SQLITE_SCHEMA: \"The database schema changed (SQLITE_SCHEMA)\", sqlite3.SQLITE_TOOBIG: \"String or BLOB exceeds size limit (SQLITE_TOOBIG)\", sqlite3.SQLITE_WARNING: \"Warnings from sqlite3_log() (SQLITE_WARNING)\", } )\n\n### Functions \u00b6\n\n#### func Limit \u00b6 added in v1.23.1\n\n    \n    \n    func Limit(c *sql.Conn, id int, newVal int) (r int, err error)\n\nLimit calls sqlite3_limit, see the docs at\nhttps://www.sqlite.org/c3ref/limit.html for details.\n\nTo get a sql.Conn from a *sql.DB, use (*sql.DB).Conn(). Limits are bound to\nthe particular instance of 'c', so getting a new connection only to pass it to\nLimit is possibly not useful above querying what are the various configured\ndefault values.\n\n#### func MustRegisterCollationUtf8 \u00b6 added in v1.26.0\n\n    \n    \n    func MustRegisterCollationUtf8( zName string, impl func(left, right string) int, )\n\nMustRegisterCollationUtf8 is like RegisterCollationUtf8 but panics on error.\n\n#### func MustRegisterDeterministicScalarFunction \u00b6 added in v1.16.0\n\n    \n    \n    func MustRegisterDeterministicScalarFunction( zFuncName string, nArg int32, xFunc func(ctx *FunctionContext, args []driver.Value) (driver.Value, error), )\n\nMustRegisterDeterministicScalarFunction is like\nRegisterDeterministicScalarFunction but panics on error.\n\n#### func MustRegisterFunction \u00b6 added in v1.23.0\n\n    \n    \n    func MustRegisterFunction( zFuncName string, impl *FunctionImpl, )\n\nMustRegisterFunction is like RegisterFunction but panics on error.\n\n#### func MustRegisterScalarFunction \u00b6 added in v1.16.0\n\n    \n    \n    func MustRegisterScalarFunction( zFuncName string, nArg int32, xFunc func(ctx *FunctionContext, args []driver.Value) (driver.Value, error), )\n\nMustRegisterScalarFunction is like RegisterScalarFunction but panics on error.\n\n#### func RegisterCollationUtf8 \u00b6 added in v1.26.0\n\n    \n    \n    func RegisterCollationUtf8( zName string, impl func(left, right string) int, ) error\n\nRegisterCollationUtf8 makes a Go function available as a collation named\nzName. impl receives two UTF-8 strings: left and right. The result needs to\nbe:\n\n\\- 0 if left == right - 1 if left < right - +1 if left > right\n\nimpl must always return the same result given the same inputs. Additionally,\nit must have the following properties for all strings A, B and C: - if A==B,\nthen B==A - if A==B and B==C, then A==C - if A<B, then B>A - if A<B and B<C,\nthen A<C.\n\nThe new collation will be available to all new connections opened after\nexecuting RegisterCollationUtf8.\n\n#### func RegisterConnectionHook \u00b6 added in v1.28.0\n\n    \n    \n    func RegisterConnectionHook(fn ConnectionHookFn)\n\nRegisterConnectionHook registers a function to be called after each connection\nis opened. This is called after all the connection has been set up.\n\n#### func RegisterDeterministicScalarFunction \u00b6 added in v1.16.0\n\n    \n    \n    func RegisterDeterministicScalarFunction( zFuncName string, nArg int32, xFunc func(ctx *FunctionContext, args []driver.Value) (driver.Value, error), ) (err error)\n\nRegisterDeterministicScalarFunction registers a deterministic scalar function\nnamed zFuncName with nArg arguments. Passing -1 for nArg indicates the\nfunction is variadic. A deterministic function means that the function always\ngives the same output when the input parameters are the same.\n\nThe new function will be available to all new connections opened after\nexecuting RegisterDeterministicScalarFunction.\n\n#### func RegisterFunction \u00b6 added in v1.23.0\n\n    \n    \n    func RegisterFunction( zFuncName string, impl *FunctionImpl, ) error\n\nRegisterFunction registers a function named zFuncName with nArg arguments.\nPassing -1 for nArg indicates the function is variadic. The FunctionImpl\ndetermines whether the function is deterministic or not, and whether it is a\nscalar function (when Scalar is defined) or an aggregate function (when Scalar\nis not defined and MakeAggregate is defined).\n\nThe new function will be available to all new connections opened after\nexecuting RegisterFunction.\n\n#### func RegisterScalarFunction \u00b6 added in v1.16.0\n\n    \n    \n    func RegisterScalarFunction( zFuncName string, nArg int32, xFunc func(ctx *FunctionContext, args []driver.Value) (driver.Value, error), ) (err error)\n\nRegisterScalarFunction registers a scalar function named zFuncName with nArg\narguments. Passing -1 for nArg indicates the function is variadic.\n\nThe new function will be available to all new connections opened after\nexecuting RegisterScalarFunction.\n\n### Types \u00b6\n\n#### type AggregateFunction \u00b6 added in v1.23.0\n\n    \n    \n    type AggregateFunction interface { // Step is called for each row of an aggregate function's SQL // invocation. The argument Values are not valid past the return of the // function. Step(ctx *FunctionContext, rowArgs []driver.Value) error // WindowInverse is called to remove the oldest presently aggregated // result of Step from the current window. The arguments are those // passed to Step for the row being removed. The argument Values are not // valid past the return of the function. WindowInverse(ctx *FunctionContext, rowArgs []driver.Value) error // WindowValue is called to get the current value of an aggregate // function. This is used to return the final value of the function, // whether it is used as a window function or not. WindowValue(ctx *FunctionContext) (driver.Value, error) // Final is called after all of the aggregate function's input rows have // been stepped through. No other methods will be called on the // AggregateFunction after calling Final. WindowValue returns the value // from the function. Final(ctx *FunctionContext) }\n\nAn AggregateFunction is an invocation of an aggregate or window function. See\nthe documentation for aggregate function callbacks and application-defined\nwindow functions for an overview.\n\n#### type Backup \u00b6 added in v1.24.0\n\n    \n    \n    type Backup struct { // contains filtered or unexported fields }\n\nBackup object is used to manage progress and cleanup an online backup. It is\nreturned by NewBackup or NewRestore.\n\n#### func (*Backup) Commit \u00b6 added in v1.29.6\n\n    \n    \n    func (b *Backup) Commit() (driver.Conn, error)\n\nCommit releases all resources associated with the Backup object but does not\nclose the destination database connection.\n\nThe destination database connection is returned to the caller or an error if\nraised. It is the responsibility of the caller to handle the connection\nclosure.\n\n#### func (*Backup) Finish \u00b6 added in v1.24.0\n\n    \n    \n    func (b *Backup) Finish() error\n\nFinish releases all resources associated with the Backup object. The Backup\nobject is invalid and may not be used following a call to Finish.\n\n#### func (*Backup) Step \u00b6 added in v1.24.0\n\n    \n    \n    func (b *Backup) Step(n int32) (bool, error)\n\nStep will copy up to n pages between the source and destination databases\nspecified by the backup object. If n is negative, all remaining source pages\nare copied. If it successfully copies n pages and there are still more pages\nto be copied, then the function returns true with no error. If it successfully\nfinishes copying all pages from source to destination, then it returns false\nwith no error. If an error occurs while running, then an error is returned.\n\n#### type ConnectionHookFn \u00b6 added in v1.28.0\n\n    \n    \n    type ConnectionHookFn func( conn ExecQuerierContext, dsn string, ) error\n\nConnectionHookFn function type for a connection hook on the Driver. Connection\nhooks are called after the connection has been set up.\n\n#### type Driver \u00b6\n\n    \n    \n    type Driver struct { // contains filtered or unexported fields }\n\nDriver implements database/sql/driver.Driver.\n\n#### func (*Driver) Open \u00b6\n\n    \n    \n    func (d *Driver) Open(name string) (conn driver.Conn, err error)\n\nOpen returns a new connection to the database. The name is a string in a\ndriver-specific format.\n\nOpen may return a cached connection (one previously closed), but doing so is\nunnecessary; the sql package maintains a pool of idle connections for\nefficient re-use.\n\nThe returned connection is only used by one goroutine at a time.\n\nThe name may be a filename, e.g., \"/tmp/mydata.sqlite\", or a URI, in which\ncase it may include a '?' followed by one or more query parameters. For\nexample,\n\"file:///tmp/mydata.sqlite?_pragma=foreign_keys(1)&_time_format=sqlite\". The\nsupported query parameters are:\n\n_pragma: Each value will be run as a \"PRAGMA ...\" statement (with the PRAGMA\nkeyword added for you). May be specified more than once, '&'-separated. For\nmore information on supported PRAGMAs see: https://www.sqlite.org/pragma.html\n\n_time_format: The name of a format to use when writing time values to the\ndatabase. Currently the only supported value is \"sqlite\", which corresponds to\nformat 7 from https://www.sqlite.org/lang_datefunc.html#time_values, including\nthe timezone specifier. If this parameter is not specified, then the default\nString() format will be used.\n\n_txlock: The locking behavior to use when beginning a transaction. May be\n\"deferred\" (the default), \"immediate\", or \"exclusive\" (case insensitive). See:\nhttps://www.sqlite.org/lang_transaction.html#deferred_immediate_and_exclusive_transactions\n\n#### func (*Driver) RegisterConnectionHook \u00b6 added in v1.28.0\n\n    \n    \n    func (d *Driver) RegisterConnectionHook(fn ConnectionHookFn)\n\nRegisterConnectionHook registers a function to be called after each connection\nis opened. This is called after all the connection has been set up.\n\n#### type Error \u00b6 added in v1.3.0\n\n    \n    \n    type Error struct { // contains filtered or unexported fields }\n\nError represents sqlite library error code.\n\n#### func (*Error) Code \u00b6 added in v1.3.0\n\n    \n    \n    func (e *Error) Code() int\n\nCode returns the sqlite result code for this error.\n\n#### func (*Error) Error \u00b6 added in v1.3.0\n\n    \n    \n    func (e *Error) Error() string\n\nError implements error.\n\n#### type ExecQuerierContext \u00b6 added in v1.28.0\n\n    \n    \n    type ExecQuerierContext interface { driver.ExecerContext driver.QueryerContext }\n\n#### type FunctionContext \u00b6 added in v1.16.0\n\n    \n    \n    type FunctionContext struct { // contains filtered or unexported fields }\n\nFunctionContext represents the context user defined functions execute in.\nFields and/or methods of this type may get addedd in the future.\n\n#### type FunctionImpl \u00b6 added in v1.23.0\n\n    \n    \n    type FunctionImpl struct { // NArgs is the required number of arguments that the function accepts. // If NArgs is negative, then the function is variadic. NArgs int32 // If Deterministic is true, the function must always give the same // output when the input parameters are the same. This enables functions // to be used in additional contexts like the WHERE clause of partial // indexes and enables additional optimizations. // // See https://sqlite.org/c3ref/c_deterministic.html#sqlitedeterministic // for more details. Deterministic bool // Scalar is called when a scalar function is invoked in SQL. The // argument Values are not valid past the return of the function. Scalar func(ctx *FunctionContext, args []driver.Value) (driver.Value, error) // MakeAggregate is called at the beginning of each evaluation of an // aggregate function. MakeAggregate func(ctx FunctionContext) (AggregateFunction, error) }\n\nFunctionImpl describes an application-defined SQL function. If Scalar is set,\nit is treated as a scalar function; otherwise, it is treated as an aggregate\nfunction using MakeAggregate.\n\n## Source Files \u00b6\n\nView all Source files\n\n  * bind_blob_musl.go\n  * doc.go\n  * mutex.go\n  * nodmesg.go\n  * rulimit.go\n  * sqlite.go\n  * sqlite_go18.go\n\n## Directories \u00b6\n\nPath| Synopsis  \n---|---  \nbenchmark  \nexamples  \nexample1  \nlib  \ntpch  \ndriver  \ndriver/drivers  \nvfs  \n  \nClick to show internal directories.\n\nClick to hide internal directories.\n\nWhy Go Use Cases Case Studies\n\nGet Started Playground Tour Stack Overflow Help\n\nPackages Standard Library Sub-repositories About Go Packages\n\nAbout Download Blog Issue Tracker Release Notes Brand Guidelines Code of\nConduct\n\nConnect Twitter GitHub Slack r/golang Meetup Golang Weekly\n\n  * Copyright\n  * Terms of Service\n  * Privacy Policy\n  * Report an Issue\n\ngo.dev uses cookies from Google to deliver and enhance the quality of its\nservices and to analyze traffic. Learn more.\n\n", "frontpage": false}
