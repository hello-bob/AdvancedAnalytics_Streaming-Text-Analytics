{"aid": "40210300", "title": "How I would redesign Copilot Workspace", "url": "https://austinhenley.com/blog/copilotworkspace.html", "domain": "austinhenley.com", "votes": 1, "user": "ibobev", "posted_at": "2024-04-30 12:28:30", "comments": 0, "source_title": "How I would redesign Copilot Workspace", "source_text": "How I would redesign Copilot Workspace - Austin Z. Henley\n\n## Austin Z. Henley\n\nI work on AI + developer tools.\n\nazh321@gmail.com @austinzhenley github/AZHenley\n\nHome | Publications | Blog\n\n# How I would redesign Copilot Workspace\n\n4/29/2024\n\nToday GitHub announced their new project: Copilot Workspace.\n\nIt is a task-oriented tool that lets you describe what you want to do within\nin a repository, and it will generate an editable plan of action, identify\nwhich files are relevant, and propose code changes to implement your requested\nchanges.\n\nI've been using it for a few days and want to share my thoughts.\n\nDisclaimer: This project is very, very early stages and still evolving\nrapidly. My feedback will likely be outdated soon. I've worked previously with\nthe GitHub Next team and I'm huge fans of them\u2014they are brilliant.\n\nTL;DR: Copilot Workspace is a great concept. But the UX and framing is\nentirely wrong and sets the wrong expectation for users. The current prototype\nis very slow (5+ minutes for one-line code changes) and the generated code is\noften buggy or has nothing to do with the specification. The generated plan is\nusually good. ChatGPT does a much better job in my head-to-head comparisons\n(assuming I already know exactly what code is relevant). I'm still optimistic\nof where it can go from here.\n\nI don't want to spend much time talking about the performance or accuracy of\nthe tool. It is powered by LLMs and it has all of the same consequences. That\npart will get better.\n\nMore importantly, what is the goal of Copilot Workspace?\n\n### Is the goal for it to implement features and fix bugs?\n\nThat is what Copilot Workspace's user interface conveys to me. It turns my\nworkflow into (1) tell it what I want and (2) do a code review of the result.\n\nHowever, it doesn't come anywhere close to achieving this. It is very slow,\nthe generated code was not good or was missing, it doesn't provide context,\nand there isn't a fast feedback loop to iterate. Worst of all, it skips all of\nthe steps where I really dig into the code and build a mental model of how it\nworks. There is value in that process beyond the resulting code.\n\nAnd it is ok that Copilot Workspace falls short at independently completing\ntasks, because I don't think this should be the goal.\n\n### Is it for helping me explore?\n\nSometimes I really need a pair programmer next to me. Not something to answer\nquestions or write code, but to point out something on my screen and say \"hey,\ngo look into that!\" or \"don't forget about that other thing\". I can see\nCopilot Workspace being valuable for discovering details that I don't know\nabout (and don't know to ask) for a given task. Remember, people can be bad\nwith words so there needs to be more proactive AI assistants.\n\nHowever, using the tool feels like having tunnel vision and it sets the wrong\nexpectations. It frames the process as a code review. If it is for exploring\nthe space, it does so without providing any exploration features. I can't ask\nit follow up questions, I can't see multiple design options, and I can't use\nCopilot to quickly iterate on the code.\n\n### Is it for giving me a starting point?\n\nA lot of times, it can be hard to get started on a task. How great would it be\nfor the AI to tell you here are the relevant files, here are some pitfalls to\nwatch out for, and here are the subtasks you need to go do?\n\nIf this is the goal, it is again not achieving it. Currently Copilot Workspace\nfeels like a very \"heavy\" one-and-done code generator that is difficult to\niterate with. Instead, it could start as a conversation that builds up a task\nplan and list of relevant files incrementally. You should go back and forth\nbetween the code and the conversation. As you make changes or discover new\ninformation, it automatically updates the task plan.\n\nIf I had a personal programmer that sat next to me, how would I work with\nthem? Would I give them a sticky note with the task and wait for them to come\nback with the code for me to verify?\n\nOr would we ask each other clarifying questions, point out significant\ndetails, discuss design tradeoffs, and show incremental progress as we work?\n\nI think that an iterative human-in-the-loop flow is not just the ideal UX for\ndeveloper tools, but also necessary because of how inconsistent LLMs are. The\nlast 4 out of 5 sessions I had with Copilot Workspace, it completely ignored\nthe task specification, including trivial ones like to add a comment! I'd only\nuse code from 2 out of 12 sessions, and those were very simple tasks. The\nplans it generates continue to overpromise and get my hopes up. It can't\nhandle completing multi-step tasks in one pass and I will struggle anyway with\nreviewing complex changes in one pass.\n\nThis is fundamentally a human problem, even after you solve all the problems\nof LLMs.\n\nSo, how would I redesign Copilot Workspace?\n\n  * Iteration. The entire process should be iterative. Expressing the task, articulating the plan, selecting which proposed code changes to use, and verifying the result.\n  * Expectations. It needs to be reframed away from a code review with the red/green diff. Copilot already does this well in VS Code: gray text suggestions that I can quickly accept or reject. It is providing suggestions. In rapid succession. Don't overpromise. You'll lose trust otherwise.\n  * Exploration. I don't mean exploring the codebase, I mean exploring the solution space. Why can't I see alternatives for each changed code block (again, like Copilot)? Why can't I pick and choose portions of the code to regenerate?\n  * Explanation. ChatGPT has spoiled me with its ability to answer \"why\" and \"what if\" questions about code. Why doesn't Copilot Workspace walk me through the implications of whichever implementation I go with? Why can't I ask it follow ups like \"How does this handle X?\" or \"Why did you do it like this?\".\n  * Integration. Most of my tools are in VS Code and the information I need to make decisions is probably more easily accessible from in there. I'd put Copilot Workspace inside VS Code. Plus then I can use Copilot to quickly fix all the buggy generated code.\n  * Validation. One of the most difficult problems is validating code (whether it is written by a human or AI!) yet this tool does nothing to help. Why doesn't it tell me which blocks of code satisfy which items from the specification/plan? Why doesn't it suggest ways to test whether it was successful? Show me evidence!\n\nIs Copilot Workspace an autonomous developer that can accomplish tasks on my\nbehalf? No.\n\nBut it can be a promising leap forward in augmenting people during cognitively\ndemanding tasks.\n\n", "frontpage": false}
