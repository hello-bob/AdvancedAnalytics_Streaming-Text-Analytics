{"aid": "40137513", "title": "An Introduction and Guide to the CSS Object Model (CSSOM)", "url": "https://css-tricks.com/an-introduction-and-guide-to-the-css-object-model-cssom/", "domain": "css-tricks.com", "votes": 1, "user": "moritzwarhier", "posted_at": "2024-04-23 21:26:50", "comments": 0, "source_title": "An Introduction and Guide to the CSS Object Model (CSSOM)", "source_text": "An Introduction and Guide to the CSS Object Model (CSSOM) | CSS-Tricks - CSS-Tricks\n\nSkip to main content\n\nCSS-Tricks\n\nSearch\n\nCSSOM\n\n# An Introduction and Guide to the CSS Object Model (CSSOM)\n\nLouis Lazaris on Dec 10, 2018\n\nIf you\u2019ve been writing JavaScript for some time now, it\u2019s almost certain\nyou\u2019ve written some scripts dealing with the Document Object Model (DOM). DOM\nscripting takes advantage of the fact that a web page opens up a set of APIs\n(or interfaces) so you can manipulate and otherwise deal with elements on a\npage.\n\nBut there\u2019s another object model you might want to become more familiar with:\nThe CSS Object Model (CSSOM). Likely you\u2019ve already used it but didn\u2019t\nnecessarily realize it.\n\nIn this guide, I\u2019m going to go through many of the most important features of\nthe CSSOM, starting with stuff that\u2019s more commonly known, then moving on to\nsome more obscure, but practical, features.\n\n### What is the CSSOM?\n\nAccording to MDN:\n\n> The CSS Object Model is a set of APIs allowing the manipulation of CSS from\n> JavaScript. It is much like the DOM, but for the CSS rather than the HTML.\n> It allows users to read and modify CSS style dynamically.\n\nMDN\u2019s info is based on the official W3C CSSOM specification. That W3C document\nis a somewhat decent way to get familiar with what\u2019s possible with the CSSOM,\nbut it\u2019s a complete disaster for anyone looking for some practical coding\nexamples that put the CSSOM APIs into action.\n\nMDN is much better, but still largely lacking in certain areas. So for this\npost, I\u2019ve tried to do my best to create useful code examples and demos of\nthese interfaces in use, so you can see the possibilities and mess around with\nthe live code.\n\nAs mentioned, the post starts with stuff that\u2019s already familiar to most\nfront-end developers. These common features are usually lumped in with DOM\nscripting, but they are technically part of the larger group of interfaces\navailable via the CSSOM (though they do cross over into the DOM as well).\n\n### Inline Styles via element.style\n\nThe most basic way you can manipulate or access CSS properties and values\nusing JavaScript is via the style object, or property, which is available on\nall HTML elements. Here\u2019s an example:\n\n    \n    \n    document.body.style.background = 'lightblue';\n\nMost of you have probably seen or used that syntax before. I can add to or\nchange the CSS for any object on the page using that same format:\nelement.style.propertyName.\n\nIn that example, I\u2019m changing the value of the background property to\nlightblue. Of course, background is shorthand. What if I want to change the\nbackground-color property? For any hyphenated property, just convert the\nproperty name to camel case:\n\n    \n    \n    document.body.style.backgroundColor = 'lightblue';\n\nIn most cases, a single-word property would be accessed in this way by the\nsingle equivalent word in lowercase, while hyphenated properties are\nrepresented in camel case. The one exception to this is when using the float\nproperty. Because float is a reserved word in JavaScript, you need to use\ncssFloat (or styleFloat if you\u2019re supporting IE8 and earlier). This is similar\nto the HTML for attribute being referenced as htmlFor when using something\nlike getAttribute().\n\nHere\u2019s a demo that uses the style property to allow the user to change the\nbackground color of the current page:\n\nSo that\u2019s an easy way to define a CSS property and value using JavaScript. But\nthere\u2019s one huge caveat to using the style property in this way: This will\nonly apply to inline styles on the element.\n\nThis becomes clear when you use the style property to read CSS:\n\n    \n    \n    document.body.style.backgroundColor = 'lightblue'; console.log(document.body.style.backgroundColor); // \"lightblue\"\n\nIn the example above, I\u2019m defining an inline style on the <body> element, then\nI\u2019m logging that same style to the console. That\u2019s fine. But if I try to read\nanother property on that element, it will return nothing \u2014 unless I\u2019ve\npreviously defined an inline style for that element in my CSS or elsewhere in\nmy JavaScript. For example:\n\n    \n    \n    console.log(document.body.style.color); // Returns nothing if inline style doesn't exist\n\nThis would return nothing even if there was an external stylesheet that\ndefined the color property on the <body> element, as in the following CodePen:\n\nUsing element.style is the simplest and most common way to add styles to\nelements via JavaScript. But as you can see, this clearly has some significant\nlimitations, so let\u2019s look at some more useful techniques for reading and\nmanipulating styles with JavaScript.\n\n### Getting Computed Styles\n\nYou can read the computed CSS value for any CSS property on an element by\nusing the window.getComputedStyle() method:\n\n    \n    \n    window.getComputedStyle(document.body).background; // \"rgba(0, 0, 0, 0) none repeat scroll 0% 0% / auto padding-box border-box\"\n\nWell, that\u2019s an interesting result. In a way, window.getComputedStyle() is the\nstyle property\u2019s overly-benevolent twin. While the style property gives you\nfar too little information about the actual styles on an element,\nwindow.getComputedStyle() can sometimes give you too much.\n\nIn the example above, the background property of the <body> element was\ndefined using a single value. But the getComputedStyle() method returns all\nvalues contained in background shorthand. The ones not explicitly defined in\nthe CSS will return the initial (or default) values for those properties.\n\nThis means, for any shorthand property, window.getComputedStyle() will return\nall the initial values, even if none of them is defined in the CSS:\n\nSimilarly, for properties like width and height, it will reveal the computed\ndimensions of the element, regardless of whether those values were\nspecifically defined anywhere in the CSS, as the following interactive demo\nshows:\n\nTry resizing the parent element in the above demo to see the results. This is\nsomewhat comparable to reading the value of window.innerWidth, except this is\nthe computed CSS for the specified property on the specified element and not\njust a general window or viewport measurement.\n\nThere are a few different ways to access properties using\nwindow.getComputedStyle(). I\u2019ve already demonstrated one way, which uses dot-\nnotation to add the camel-cased property name to the end of the method. You\ncan see three different ways to do it in the following code:\n\n    \n    \n    // dot notation, same as above window.getComputedStyle(el).backgroundColor; // square bracket notation window.getComputedStyle(el)['background-color']; // using getPropertyValue() window.getComputedStyle(el).getPropertyValue('background-color');\n\nThe first line uses the same format as in the previous demo. The second line\nis using square bracket notation, a common JavaScript alternative to dot\nnotation. This format is not recommended and code linters will warn about it.\nThe third example uses the getPropertyValue() method.\n\nThe first example requires the use of camel casing (although in this case both\nfloat and cssFloat would work) while the next two access the property via the\nsame syntax as that used in CSS (with hyphens, often called \u201ckebab case\u201d).\n\nHere\u2019s the same demo as the previous, but this time using getPropertyValue()\nto access the widths of the two elements:\n\n### Getting Computed Styles of Pseudo-Elements\n\nOne little-known tidbit about window.getComputedStyle() is the fact that it\nallows you to retrieve style information on pseudo-elements. You\u2019ll often see\na window.getComputedStyle() declaration like this:\n\n    \n    \n    window.getComputedStyle(document.body, null).width;\n\nNotice the second argument, null, passed into the method. Firefox prior to\nversion 4 required a second argument, which is why you might see it used in\nlegacy code or by those accustomed to including it. But it\u2019s not required in\nany browser currently in use.\n\nThat second optional parameter is what allows me to specify that I\u2019m accessing\nthe computed CSS of a pseudo-element. Consider the following CSS:\n\n    \n    \n    .box::before { content: 'Example'; display: block; width: 50px; }\n\nHere I\u2019m adding a ::before pseudo-element inside the .box element. With the\nfollowing JavaScript, I can access the computed styles for that pseudo-\nelement:\n\n    \n    \n    let box = document.querySelector('.box'); window.getComputedStyle(box, '::before').width; // \"50px\"\n\nYou can also do this for other pseudo-elements like ::first-line, as in the\nfollowing code and demo:\n\n    \n    \n    let p = document.querySelector('.box p'); window.getComputedStyle(p, '::first-line').color;\n\nAnd here\u2019s another example using the ::placeholder pseudo-element, which\napples to <input> elements:\n\n    \n    \n    let input = document.querySelector('input'); window.getComputedStyle(input, '::placeholder').color\n\nThe above works in the latest Firefox, but not in Chrome or Edge (I\u2019ve filed a\nbug report for Chrome).\n\nIt should also be noted that browsers have different results when trying to\naccess styles for a non-existent (but valid) pseudo-element compared to a\npseudo-element that the browser doesn\u2019t support at all (like a made up\n::banana pseudo-element). You can try this out in various browsers using the\nfollowing demo:\n\nAs a side point to this section, there is a Firefox-only method called\ngetDefaultComputedStyle() that is not part of the spec and likely never will\nbe.\n\n### The CSSStyleDeclaration API\n\nEarlier when I showed you how to access properties via the style object or\nusing getComputedStyle(), in both cases those techniques were exposing the\nCSSStyleDeclaration interface.\n\nIn other words, both of the following lines will return a CSSStyleDeclaration\nobject on the document\u2019s body element:\n\n    \n    \n    document.body.style; window.getComputedStyle(document.body);\n\nIn the following screenshot you can see what the console produces for each of\nthese lines:\n\nIn the case of getComputedStyle(), the values are read-only. In the case of\nelement.style, getting and setting the values is possible but, as mentioned\nearlier, these will only affect the document\u2019s inline styles.\n\n### setProperty(), getPropertyValue(), and item()\n\nOnce you\u2019ve exposed a CSSStyleDeclaration object in one of the above ways, you\nhave access to a number of useful methods to read or manipulate the values.\nAgain, the values are read-only in the case of getComputedStyle(), but when\nused via the style property, some methods are available for both getting and\nsetting.\n\nConsider the following code and demo:\n\n    \n    \n    let box = document.querySelector('.box'); box.style.setProperty('color', 'orange'); box.style.setProperty('font-family', 'Georgia, serif'); op.innerHTML = box.style.getPropertyValue('color'); op2.innerHTML = `${box.style.item(0)}, ${box.style.item(1)}`;\n\nIn this example, I\u2019m using three different methods of the style object:\n\n  * The setProperty() method. This takes two arguments, each a string: The property (in regular CSS notation) and the value you wish to assign to the property.\n  * The getPropertyValue() method. This takes a single argument: The property whose value you want to obtain. This method was used in a previous example using getComputedStyle(), which, as mentioned, likewise exposes a CSSStyleDeclaration object.\n  * The item() method. This takes a single argument, which is a positive integer representing the index of the property you want to access. The return value is the property name at that index.\n\nKeep in mind that in my simple example above, there are only two styles added\nto the element\u2019s inline CSS. This means that if I were to access item(2), the\nreturn value would be an empty string. I\u2019d get the same result if I used\ngetPropertyValue() to access a property that isn\u2019t set in that element\u2019s\ninline styles.\n\n### Using removeProperty()\n\nIn addition to the three methods mentioned above, there are two others exposed\non a CSSStyleDeclaration object. In the following code and demo, I\u2019m using the\nremoveProperty() method:\n\n    \n    \n    box.style.setProperty('font-size', '1.5em'); box.style.item(0) // \"font-size\" document.body.style.removeProperty('font-size'); document.body.style.item(0); // \"\"\n\nIn this case, after I set font-size using setProperty(), I log the property\nname to ensure it\u2019s there. The demo then includes a button that, when clicked,\nwill remove the property using removeProperty().\n\nIn the case of setProperty() and removeProperty(), the property name that you\npass in is hyphenated (the same format as in your stylesheet), rather than\ncamel-cased. This might seem confusing at first, but the value passed in is a\nstring in this example, so it makes sense.\n\n### Getting and Setting a Property\u2019s Priority\n\nFinally, here\u2019s an interesting feature that I discovered while researching\nthis article: The getPropertyPriority() method, demonstrated with the code and\nCodePen below:\n\n    \n    \n    box.style.setProperty('font-family', 'Georgia, serif', 'important'); box.style.setProperty('font-size', '1.5em'); box.style.getPropertyPriority('font-family'); // important op2.innerHTML = box.style.getPropertyPriority('font-size'); // \"\"\n\nIn the first line of that code, you can see I\u2019m using the setProperty()\nmethod, as I did before. However, notice I\u2019ve included a third argument. The\nthird argument is an optional string that defines whether you want the\nproperty to have the !important keyword attached to it.\n\nAfter I set the property with !important, I use the getPropertyPriority()\nmethod to check that property\u2019s priority. If you want the property to not have\nimportance, you can omit the third argument, use the keyword undefined, or\ninclude the third argument as an empty string.\n\nAnd I should emphasize here that these methods would work in conjunction with\nany inline styles already placed directly in the HTML on an element\u2019s style\nattribute.\n\nSo if I had the following HTML:\n\n    \n    \n    <div class=\"box\" style=\"border: solid 1px red !important;\">\n\nI could use any of the methods discussed in this section to read or otherwise\nmanipulate that style. And it should be noted here that since I used a\nshorthand property for this inline style and set it to !important, all of the\nlonghand properties that make up that shorthand will return a priority of\nimportant when using getPropertyPriority(). See the code and demo below:\n\n    \n    \n    // These all return \"important\" box.style.getPropertyPriority('border')); box.style.getPropertyPriority('border-top-width')); box.style.getPropertyPriority('border-bottom-width')); box.style.getPropertyPriority('border-color')); box.style.getPropertyPriority('border-style'));\n\nIn the demo, even though I explicitly set only the border property in the\nstyle attribute, all the associated longhand properties that make up border\nwill also return a value of important.\n\n### The CSSStyleSheet Interface\n\nSo far, much of what I\u2019ve considered deals with inline styles (which often\naren\u2019t that useful) and computed styles (which are useful, but are often too\nspecific).\n\nA much more useful API that allows you to retrieve a stylesheet that has\nreadable and writable values, and not just for inline styles, is the\nCSSStyleSheet API. The simplest way to access information from a document\u2019s\nstylesheets is using the styleSheets property of the current document. This\nexposes the CSSStyleSheet interface.\n\nFor example, the line below uses the length property to see how many\nstylesheets the current document has:\n\n    \n    \n    document.styleSheets.length; // 1\n\nI can reference any of the document\u2019s stylesheets using zero-based indexing:\n\n    \n    \n    document.styleSheets[0];\n\nIf I log that stylesheet to my console, I can view the methods and properties\navailable:\n\nThe one that will prove useful is the cssRules property. This property\nprovides a list of all CSS rules (including declaration blocks, at-rules,\nmedia rules, etc.) contained in that stylesheet. In the following sections,\nI\u2019ll detail how to utilize this API to manipulate and read styles from an\nexternal stylesheet.\n\n### Working with a Stylesheet Object\n\nFor the purpose of simplicity, let\u2019s work with a sample stylesheet that has\nonly a handful of rules in it. This will allow me to demonstrate how to use\nthe CSSOM to access the different parts of a stylesheet in a similar way to\naccessing elements via DOM scripting.\n\nHere is the stylesheet I\u2019ll be working with:\n\n    \n    \n    * { box-sizing: border-box; } body { font-family: Helvetica, Arial, sans-serif; font-size: 2em; line-height: 1.4; } main { width: 1024px; margin: 0 auto !important; } .component { float: right; border-left: solid 1px #444; margin-left: 20px; } @media (max-width: 800px) { body { line-height: 1.2; } .component { float: none; margin: 0; } } a:hover { color: lightgreen; } @keyframes exampleAnimation { from { color: blue; } 20% { color: orange; } to { color: green; } } code { color: firebrick; }\n\nThere\u2019s a number of different things I can attempt with this example\nstylesheet and I\u2019ll demonstrate a few of those here. First, I\u2019m going to loop\nthrough all the style rules in the stylesheet and log the selector text for\neach one:\n\n    \n    \n    let myRules = document.styleSheets[0].cssRules, p = document.querySelector('p'); for (i of myRules) { if (i.type === 1) { p.innerHTML += `<code>${i.selectorText}</code><br>`; } }\n\nA couple of things to take note of in the above code and demo. First, I cache\na reference to the cssRules object for my stylesheet. Then I loop over all the\nrules in that object, checking to see what type each one is.\n\nIn this case, I want rules that are type 1, which represents the STYLE_RULE\nconstant. Other constants include IMPORT_RULE (3), MEDIA_RULE (4),\nKEYFRAMES_RULE (7), etc. You can view a full table of these constants in this\nMDN article.\n\nWhen I confirm that a rule is a style rule, I print the selectorText property\nfor each of those style rules. This will produce the following lines for the\nspecified stylesheet:\n\n    \n    \n    * body main .component a:hover code\n\nThe selectorText property is a string representation of the selector used on\nthat rule. This is a writable property, so if I want I can change the selector\nfor a specific rule inside my original for loop with the following code:\n\n    \n    \n    if (i.selectorText === 'a:hover') { i.selectorText = 'a:hover, a:active'; }\n\nIn this example, I\u2019m looking for a selector that defines :hover styles on my\nlinks and expanding the selector to apply the same styles to elements in the\n:active state. Alternatively, I could use some kind of string method or even a\nregular expression to look for all instances of :hover, and then do something\nfrom there. But this should be enough to demonstrate how it works.\n\n### Accessing @media Rules with the CSSOM\n\nYou\u2019ll notice my stylesheet also includes a media query rule and a keyframes\nat-rule block. Both of those were skipped when I searched for style rules\n(type 1). Let\u2019s now find all @media rules:\n\n    \n    \n    let myRules = document.styleSheets[0].cssRules, p = document.querySelector('.output'); for (i of myRules) { if (i.type === 4) { for (j of i.cssRules) { p.innerHTML += `<code>${j.selectorText}</code><br>`; } } }\n\nBased on the given stylesheet, the above will produce:\n\n    \n    \n    body .component\n\nAs you can see, after I loop through all the rules to see if any @media rules\nexist (type 4), I then loop through the cssRules object for each media rule\n(in this case, there\u2019s only one) and log the selector text for each rule\ninside that media rule.\n\nSo the interface that\u2019s exposed on a @media rule is similar to the interface\nexposed on a stylesheet. The @media rule, however, also includes a\nconditionText property, as shown in the following snippet and demo:\n\n    \n    \n    let myRules = document.styleSheets[0].cssRules, p = document.querySelector('.output'); for (i of myRules) { if (i.type === 4) { p.innerHTML += `<code>${i.conditionText}</code><br>`; // (max-width: 800px) } }\n\nThis code loops through all media query rules and logs the text that\ndetermines when that rule is applicable (i.e. the condition). There\u2019s also a\nmediaText property that returns the same value. According to the spec, you can\nget or set either of these.\n\n### Accessing @keyframes Rules with the CSSOM\n\nNow that I\u2019ve demonstrated how to read information from a @media rule, let\u2019s\nconsider how to access a @keyframes rule. Here\u2019s some code to get started:\n\n    \n    \n    let myRules = document.styleSheets[0].cssRules, p = document.querySelector('.output'); for (i of myRules) { if (i.type === 7) { for (j of i.cssRules) { p.innerHTML += `<code>${j.keyText}</code><br>`; } } }\n\nIn this example, I\u2019m looking for rules that have a type of 7 (i.e. @keyframes\nrules). When one is found, I loop through all of that rule\u2019s cssRules and log\nthe keyText property for each. The log in this case will be:\n\n    \n    \n    \"0%\" \"20%\" \"100%\"\n\nYou\u2019ll notice my original CSS uses from and to as the first and last\nkeyframes, but the keyText property computes these to 0% and 100%. The value\nof keyText can also be set. In my example stylesheet, I could hard code it\nlike this:\n\n    \n    \n    // Read the current value (0%) document.styleSheets[0].cssRules[6].cssRules[0].keyText; // Change the value to 10% document.styleSheets[0].cssRules[6].cssRules[0].keyText = '10%' // Read the new value (10%) document.styleSheets[0].cssRules[6].cssRules[0].keyText;\n\nUsing this, we can dynamically alter an animation\u2019s keyframes in the flow of a\nweb app or possibly in response to a user action.\n\nAnother property available when accessing a @keyframes rule is name:\n\n    \n    \n    let myRules = document.styleSheets[0].cssRules, p = document.querySelector('.output'); for (i of myRules) { if (i.type === 7) { p.innerHTML += `<code>${i.name}</code><br>`; } }\n\nRecall that in the CSS, the @keyframes rule looks like this:\n\n    \n    \n    @keyframes exampleAnimation { from { color: blue; } 20% { color: orange; } to { color: green; } }\n\nThus, the name property allows me to read the custom name chosen for that\n@keyframes rule. This is the same name that would be used in the animation-\nname property when enabling the animation on a specific element.\n\nOne final thing I\u2019ll mention here is the ability to grab specific styles that\nare inside a single keyframe. Here\u2019s some example code with a demo:\n\n    \n    \n    let myRules = document.styleSheets[0].cssRules, p = document.querySelector('.output'); for (i of myRules) { if (i.type === 7) { for (j of i.cssRules) { p.innerHTML += `<code>${j.style.color}</code><br>`; } } }\n\nIn this example, after I find the @keyframes rule, I loop through each of the\nrules in the keyframe (e.g. the \u201cfrom\u201d rule, the \u201c20%\u201d rule, etc). Then,\nwithin each of those rules, I access an individual style property. In this\ncase, since I know color is the only property defined for each, I\u2019m merely\nlogging out the color values.\n\nThe main takeaway in this instance is the use of the style property, or\nobject. Earlier I showed how this property can be used to access inline\nstyles. But in this case, I\u2019m using it to access the individual properties\ninside of a single keyframe.\n\nYou can probably see how this opens up some possibilities. This allows you to\nmodify an individual keyframe\u2019s properties on the fly, which could happen as a\nresult of some user action or something else taking place in an app or\npossibly a web-based game.\n\n### Adding and Removing CSS Declarations\n\nThe CSSStyleSheet interface has access to two methods that allow you to add or\nremove an entire rule from a stylesheet. The methods are: insertRule() and\ndeleteRule(). Let\u2019s see both of them in action manipulating our example\nstylesheet:\n\n    \n    \n    let myStylesheet = document.styleSheets[0]; console.log(myStylesheet.cssRules.length); // 8 document.styleSheets[0].insertRule('article { line-height: 1.5; font-size: 1.5em; }', myStylesheet.cssRules.length); console.log(document.styleSheets[0].cssRules.length); // 9\n\nIn this case, I\u2019m logging the length of the cssRules property (showing that\nthe stylesheet originally has 8 rules in it), then I add the following CSS as\nan individual rule using the insertRule() method:\n\n    \n    \n    article { line-height: 1.5; font-size: 1.5em; }\n\nI log the length of the cssRules property again to confirm that the rule was\nadded.\n\nThe insertRule() method takes a string as the first parameter (which is\nmandatory), comprising the full style rule that you want to insert (including\nselector, curly braces, etc). If you\u2019re inserting an at-rule, then the full\nat-rule, including the individual rules nested inside the at-rule can be\nincluded in this string.\n\nThe second argument is optional. This is an integer that represents the\nposition, or index, where you want the rule inserted. If this isn\u2019t included,\nit defaults to 0 (meaning the rule will be inserted at the beginning of the\nrules collection). If the index happens to be larger than the length of the\nrules object, it will throw an error.\n\nThe deleteRule() method is much simpler to use:\n\n    \n    \n    let myStylesheet = document.styleSheets[0]; console.log(myStylesheet.cssRules.length); // 8 myStylesheet.deleteRule(3); console.log(myStylesheet.cssRules.length); // 7\n\nIn this case, the method accepts a single argument that represents the index\nof the rule I want to remove.\n\nWith either method, because of zero-based indexing, the selected index passed\nin as an argument has to be less than the length of the cssRules object,\notherwise it will throw an error.\n\n### Revisiting the CSSStyleDeclaration API\n\nEarlier I explained how to access individual properties and values declared as\ninline styles. This was done via element.style, exposing the\nCSSStyleDeclaration interface.\n\nThe CSSStyleDeclaration API, however, can also be exposed on an individual\nstyle rule as a subset of the CSSStyleSheet API. I already alluded to this\nwhen I showed you how to access properties inside a @keyframes rule. To\nunderstand how this works, compare the following two code snippets:\n\n    \n    \n    <div style=\"color: lightblue; width: 100px; font-size: 1.3em !important;\"></div>\n    \n    \n    .box { color: lightblue; width: 100px; font-size: 1.3em !important; }\n\nThe first example is a set of inline styles that can be accessed as follows:\n\n    \n    \n    document.querySelector('div').style\n\nThis exposes the CSSStyleDeclaration API, which is what allows me to do stuff\nlike element.style.color, element.style.width, etc.\n\nBut I can expose the exact same API on an individual style rule in an external\nstylesheet. This means I\u2019m combining my use of the style property with the\nCSSStyleSheet interface.\n\nSo the CSS in the second example above, which uses the exact same styles as\nthe inline version, can be accessed like this:\n\n    \n    \n    document.styleSheets[0].cssRules[0].style\n\nThis opens up a single CSSStyleDeclaration object on the one style rule in the\nstylesheet. If there were multiple style rules, each could be accessed using\ncssRules[1], cssRules[2], cssRules[3], and so on.\n\nSo within an external stylesheet, inside of a single style rule that is of\ntype 1, I have access to all the methods and properties mentioned earlier.\nThis includes setProperty(), getPropertyValue(), item(), removeProperty(), and\ngetPropertyPriority(). In addition to this, those same features are available\non an individual style rule inside of a @keyframes or @media rule.\n\nHere\u2019s a code snippet and demo that demonstrates how these methods would be\nused on an individual style rule in our sample stylesheet:\n\n    \n    \n    // Grab the style rules for the body and main elements let myBodyRule = document.styleSheets[0].cssRules[1].style, myMainRule = document.styleSheets[0].cssRules[2].style; // Set the bg color on the body myBodyRule.setProperty('background-color', 'peachpuff'); // Get the font size of the body myBodyRule.getPropertyValue('font-size'); // Get the 5th item in the body's style rule myBodyRule.item(5); // Log the current length of the body style rule (8) myBodyRule.length; // Remove the line height myBodyRule.removeProperty('line-height'); // log the length again (7) myBodyRule.length; // Check priority of font-family (empty string) myBodyRule.getPropertyPriority('font-family'); // Check priority of margin in the \"main\" style rule (!important) myMainRule.getPropertyPriority('margin');\n\n### The CSS Typed Object Model... The Future?\n\nAfter everything I\u2019ve considered in this article, it would seem odd that I\u2019d\nhave to break the news that it\u2019s possible that one day the CSSOM as we know it\nwill be mostly obsolete.\n\nThat\u2019s because of something called the CSS Typed OM which is part of the\nHoudini Project. Although some people have noted that the new Typed OM is more\nverbose compared to the current CSSOM, the benefits, as outlined in this\narticle by Eric Bidelman, include:\n\n  * Fewer bugs\n  * Arithmetic operations and unit conversion\n  * Better performance\n  * Error handling\n  * CSS property names are always strings\n\nFor full details on those features and a glimpse into the syntax, be sure to\ncheck out the full article.\n\nAs of this writing, CSS Typed OM is supported only in Chrome. You can see the\nprogress of browser support in this document.\n\n### Final Words\n\nManipulating stylesheets via JavaScript certainly isn\u2019t something you\u2019re going\nto do in every project. And some of the complex interactions made possible\nwith the methods and properties I\u2019ve introduced here have some very specific\nuse cases.\n\nIf you\u2019ve built some kind of tool that uses any of these APIs I\u2019d love to hear\nabout it. My research has only scratched the surface of what\u2019s possible, but\nI\u2019d love to see how any of this can be used in real-world examples.\n\nI\u2019ve put all the demos from this article into a CodePen collection, so you can\nfeel free to mess around with those as you like.\n\nPsst! Create a DigitalOcean account and get $200 in free credit for cloud-\nbased hosting and services.\n\n## Comments\n\n  1. hashimwarren\n\nPermalink to comment# December 10, 2018\n\nShucks, I somehows missed this iny CSS studies. Thanks for this.\n\n  2. Chris Zahller\n\nPermalink to comment# December 11, 2018\n\nExcellent tutorial. I expect I\u2019ll be using what I learned here on my custom\nWordPress plugin!\n\n  3. Sebastian\n\nPermalink to comment# December 14, 2018\n\nHi Louis, very nice overview! As a small addendum, those rule type constants\nare also exposed from the CSSRule interface...\n\n    \n        if (rule.type === CSSRule.STYLE_RULE) { // ... }\n\n... so you don\u2019t have to look up their values all the time. :-)\n\n     * Louis Lazaris\n\nPermalink to comment# December 17, 2018\n\nInteresting, thanks. But I guess you would still have to remember the exact\nsyntax for each rule type? So using the number values might be quicker if you\ncan remember those easier.\n\n  4. Srinivas Nagorkar\n\nPermalink to comment# December 17, 2018\n\nWell explained, thanks for sharing. I guess if we have to achieve multiple\ntheming and to be controlled from UI would be better approach to push and\ndelete the stylesheets on the fly as explained by you.\n\n  5. Shalanah\n\nPermalink to comment# December 18, 2018\n\nThis is amazing.\n\n  6. Francky\n\nPermalink to comment# December 24, 2018\n\nHi Louis and travellers over here, Interesting stuff! Especially the\npossibility of a switch between an inline style set bij javascript towards a\n\u2018normal\u2019 css-rule. That could be practical if you wish to replace a\njavascripted inline style (with a new js scripted inline style later on) \u2013\nwithout FOUC (unstyled flash between the old and the new inlne styles).\n\nThen a remark: shorthand properties in getComputedStyle are not accepted by\nall browsers, I discovered in my Firefox and IE-11. So for production they\nhave to be avoided. See this testpage: * getComputedStyle-test.htm\n\nThe same for the CodePens\u2019s Changing the Selector Text and Setting @keyframes\nRules: the Set is OK, but the Get has no result in at least Firefox. \u2013 The\nother CodePen\u2019s are working fine in FF, Chrome, Opera and IE-11 on desktop. \u2013\nEdge I couln\u2019t test.\n\n     * Louis Lazaris\n\nPermalink to comment# December 27, 2018\n\nHey Francky,\n\nThanks so much for doing the research on these. You\u2019re right about\ngetComputedStyle(). I\u2019m surprised I didn\u2019t notice that because I did check\nmany of the demos in Firefox. That would probably be worth looking into to see\nif anyone has submitted a bug report for that for Firefox.\n\nThe second one you mentioned seems to work fine for me in Firefox though. I\u2019m\nnot sure if maybe you misunderstood the demo, but you have to go into the\n\u201cCSS\u201d panel in CodePen and make a change to any of the selectors, and when you\nclick the button, the page will display the updated selector text. I\u2019ve\naltered the description on that Pen to make sure it\u2019s a little more clear\nwhat\u2019s supposed to happen. That one seems to work as expected for me in\nFirefox.\n\nAs for the last one, with the keyText property... That\u2019s an odd one. You\u2019re\nright, the CodePen demo doesn\u2019t work in Firefox. But when I drop the same\nHTML/CSS/JavaScript into a local HTML page, it seems to work fine in Firefox.\nSo I\u2019m not sure what to think there. I don\u2019t think it\u2019s a problem with the way\nFirefox handles it, I think it has something to do with how CodePen is\nhandling updates to the CSS, but it only seems to happen in Firefox.\n\nAnyways, thanks for letting me know about those, I\u2019ll see about making a few\nupdates to reflect those problems.\n\n  7. Francky\n\nPermalink to comment# January 4, 2019\n\nHi Louis, With respect to my second remark, about the CodePen demo Changing\nthe Selector Text, I\u2019ve made a rather zigzag journey in the caves of the\njavascript coding \u2013 and I got it! (in the end)\n\nFirst I tried it again in Firefox, and got a different result (I guess I had\nchanged by accident one of the selectors of the @media rules). Now my\nexperience is a phenomenon I didn\u2019t see before:\n\nFirefox, Chrome and Opera are changing the initial selectorText (above the\nbutton) as well: immidiately, without waiting for the button click (IE-11\ncan\u2019t be tested in CodePen).\n\nIt seems CodePen is applying the javascript again after a change in the HTMl\nor CSS panel.\n\nSo I\u2019ve made a stand-alone test, just by straight forward copy/paste. And got\na new phenomenon: the initial selectorText list was OK, but the updated\nselectorText list was wrong. Then I started to experiment with changing the\nscript: test 1 to 5. In test 5 it seems I succeded to get a version which is\nworking cross-browser (and in IE-11). The steps are beginning over here:\n\nhttp://clba.nl/experiments/selectorText/\n\nThen my third remark, about the CodePen demo Setting @keyframes Rules, got a\nsimple solution. I duplicated the line let myRules =\ndocument.styleSheets[0].cssRules; and pasted it as first line in the JS button\nfunction of the CodePen. Click on the button, and working in FF. I guess the\ncode can be adapted for IE-11 in the same way as for the selectorText.\n\n  8. Francky\n\nPermalink to comment# January 5, 2019\n\nHi Louis, Next experiment: indeed, with some adapting IE-11 agrees with the\nkeyText property:\n\nhttp://clba.nl/experiments/keyText/\n\nAnd yes \u2013 I suppose Firefox is sometimes not working in Codepen because FF can\nbe rather unforgivable (more than other browsers) in applying javascripts, and\nCodePen has some special manipulations; anyway there is no difference\noffline/online in a stand-alone version (said he gratefully).\n\n  9. Shumuko\n\nPermalink to comment# January 7, 2019\n\nThanks for posting this. This is great! But how do I figure out all the\nproperty names available from all the different types of the CSS rules? I\ntried to look up something like \u2018keyText\u2019 on MDN but seems can\u2019t find it.\n\n     * Francky\n\nPermalink to comment# January 7, 2019\n\nThis reference?\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model\n\n(The red items aren\u2019t documented yet)\n\n     * Louis Lazaris\n\nPermalink to comment# January 7, 2019\n\nYeah, unfortunately, MDN doesn\u2019t list all the different methods and\nproperties, just the main ones. Many of them (like keyText) are very simple to\nuse though, so they probably don\u2019t need much explanation.\n\n     * Shumuko\n\nPermalink to comment# January 8, 2019\n\nThanks # Francky! That\u2019s exactly what I was looking for.\n\n  10. Din\n\nPermalink to comment# January 9, 2019\n\nExcellent tutorial. Looks like float is no longer a reserved keyword in\njavascript. Apparently, i was able to change an elements float style using the\nstyle.float syntax.\n\n     * Francky\n\nPermalink to comment# January 9, 2019\n\nYes, \u2018float\u2019 was a reserved (forbidden) keyword in older javascript versions,\nbut not anymore. Nowadays \u2018style.float\u2019 and \u2018style.cssFloat\u2019 do the same, in\norder to get or set a value. I think the \u2018style.cssFloat\u2019 is maintained for\nbackwards compatibility, so websites don\u2019t have to change their scripts.\n\nTestpage: http://clba.nl/experiments/javascript-float.htm\n\n  11. Ilya Gromov\n\nPermalink to comment# February 8, 2019\n\nIs there any way to save the changes you made through CSSStyleSheet\nmodification? If I wanted to export it as a new css file for example?! Thanks\n\n     * Louis Lazaris\n\nPermalink to comment# February 26, 2019\n\nThere\u2019s no CSSOM method for doing this, but I suppose you could save the data\nas a JSON object (or just as text) and put it into LocalStorage or some other\ndata storage source and then deal with it from there. There are lots of ways\nto save data, it just depends on how much you want to save and what you want\nto do with it.\n\nThis comment thread is closed. If you have important information to share,\nplease contact us.\n\n#### Optimizing CSS for faster page loads\n\nA straightforward post with some perf data from Tomas Pustelnik. It's a good\nreminder that CSS is a crucial part of thinking web performance, and for a\nhuge reason: Any time [the browser] encounters any external resource (CSS, JS,\nimages, etc.) it will assign it a download priority and initiate...\n\nSeptember 17, 2020\n\n#### Working With the new CSS Typed Object Model\n\nEric Bidelman introduces the CSS Typed Object Model. It looks like it's going\nto make dealing with getting and setting style values through JavaScript\neasier and less error-prone. Less stringy, more number-y when appropriate.\nLike if we wanted to know the padding of an element, classically we'd do: var\nel...\n\nApril 12, 2018\n\n#### CSS and Network Performance\n\nJavaScript and images tend to get the bulk of the blame for slow websites, but\nHarry explains very clearly why CSS is equally to blame and harder to deal\nwith: A browser can\u2019t render a page until it has built the Render Tree; the\nRender Tree is the combined result...\n\nNovember 13, 2018\n\nCSS-Tricks is powered by DigitalOcean.\n\n#### Keep up to date on web dev\n\nwith our hand-crafted newsletter\n\n##### DigitalOcean\n\n  * DigitalOcean\n  * DigitalOcean Community\n  * About DigitalOcean\n  * Legal\n  * Free Credit Offer\n\n##### CSS-Tricks\n\n  * Email\n  * Guest Writing\n  * Book\n  * Advertising\n\n##### Follow\n\n  * Mastodon\n  * Twitter\n  * Instagram\n  * YouTube\n  * CodePen\n  * iTunes\n  * RSS\n\nBack to Top\n\n", "frontpage": false}
