{"aid": "40156868", "title": "Intel APX \u2013 The Chip Letter", "url": "https://thechipletter.substack.com/p/intel-apx", "domain": "thechipletter.substack.com", "votes": 1, "user": "rbanffy", "posted_at": "2024-04-25 12:50:23", "comments": 0, "source_title": "Intel APX", "source_text": "Intel APX - by Babbage - The Chip Letter\n\n# The Chip Letter\n\nShare this post\n\n#### Intel APX\n\nthechipletter.substack.com\n\n#### Discover more from The Chip Letter\n\nByte sized stories about the history of computing.\n\nOver 12,000 subscribers\n\nContinue reading\n\nSign in\n\n# Intel APX\n\n### Intel evolves x86. Again.\n\nBabbage\n\nJul 25, 2023\n\n13\n\nShare this post\n\n#### Intel APX\n\nthechipletter.substack.com\n\n2\n\nShare\n\nIntel Raptor Lake Processor Die - By Fritzchens Fritz - from Flickr CC0\n\nIntel has just announced APX, \u201cthe next major step in the evolution of Intel\u00ae\narchitecture\u201d:\n\n> Intel\u00aeAdvanced Performance Extensions (Intel\u00ae APX) expands the Intel\u00ae 64\n> instruction set architecture with access to more registers and adds various\n> new features that improve general-purpose performance. The extensions are\n> designed to provide efficient performance gains across a variety of\n> workloads without significantly increasing silicon area or power consumption\n> of the core.\n\nThe most significant changes are:\n\n  * Doubles the number of general purpose registers from 16 to 32;\n\n  * New three operand instructions (e.g. adding ability to subtract register1 from register2, and place the result in register3);\n\n  * New instructions to PUSH / POP two general purpose registers at once;\n\n  * New conditional load, store and compare instructions;\n\n  * Adds the option to suppress status flag writes for common instructions;\n\n  * New 64-bit absolute jump instruction.\n\nThe announcement describes some of the gains from increasing the number of\nregisters:\n\n> Intel\u00ae APX doubles the number of general-purpose registers (GPRs) from 16 to\n> 32. This allows the compiler to keep more values in registers; as a result,\n> APX-compiled code contains 10% fewer loads and more than 20% fewer stores\n> than the same code compiled for an Intel\u00ae 64 baseline. Register accesses are\n> not only faster, but they also consume significantly less dynamic power than\n> complex load and store operations.\n\nThe announcement includes links to very detailed architecture documentation (a\n300+ page pdf) for those who want more detail.\n\nShare\n\nOn a brief historical note, APX was the marketing term - an abbreviation for\n\u2018Advanced Performance arCHitecture\u2019 (CH corresponding the Greek letter Chi \u03a7\nor in lower case \u03c7) - that was used for the iAPX 432 and, briefly for x86\nprocessors, for example the 80286 was known for a while as the iAPX 286.\n\nAlongside APX, Intel also announced a new vector ISA, AVX10:\n\n> Intel\u00ae Advanced Vector Extensions 10 (Intel\u00ae AVX10) represents the first\n> major new vector ISA since the introduction of Intel\u00ae Advanced Vector\n> Extensions 512 (Intel\u00ae AVX-512) in 2013. This ISA will establish a common,\n> converged vector instruction set across all Intel architectures,\n> incorporating the modern vectorization aspects of Intel AVX-512.\n\nAVX10 support across \u2018performance\u2019 and \u2018efficiency\u2019 cores is outlined:\n\n> A \u201cconverged\u201d version of Intel AVX10 with maximum vector lengths of 256 bits\n> and 32-bit opmask registers will be supported across all Intel processors,\n> while 512-bit vector registers and 64-bit opmasks will continue to be\n> supported on some P-core processors.\n\nThis should all be taken together with the proposed (actually a discussion\npaper, but the direction of travel is clear) removal of a number of legacy\nfeatures and a possible move to a 64-bit only version of the architecture.\n\nThis seems to answer one question: what happens to the x86 architecture? The\nanswer, it appears now, that it will be evolved and not replaced. That\u2019s not\nsurprising. x86 is just too big and important to sunset. It\u2019ll be around for a\nlong time.\n\nIt also raises lots of questions, most of which we will only know the answers\nto over the coming years:\n\n  * When will we see the first hardware that includes APX?\n\n  * Why did Intel announce APX without the corresponding hardware?\n\n  * How will AMD respond to APX? AMD will be able to copy APX and AVX10 instructions, but when will it do so?\n\n  * Is it enough to help x86 continue to (sorry Intel Architecture) compete?\n\n  * Why didn't Intel / AMD do this a decade ago?\n\nIt\u2019s remarkable that x86 can continue, over almost 50 years, to evolve out of\nthe original 16-bit architecture of the 8086 and still remain competitive.\n\nI couldn\u2019t help but smile, though, at the final paragraph in the announcement.\nTalk about making a virtue out of a necessity.\n\n> Intel\u00ae APX demonstrates the advantage of the variable-length instruction\n> encodings of x86 \u2013 new features enhancing the entire instruction set can be\n> defined with only incremental changes to the instruction-decode hardware.\n> This flexibility has allowed Intel\u00ae architecture to adapt and flourish over\n> four decades of rapid advances in computing \u2013 and it enables the innovations\n> that will keep it thriving into the future.\n\nPlease do share your thoughts on APX in the comments.\n\nThe Chip Letter is a reader-supported publication. To receive new posts and\nsupport my work, consider becoming a free or paid subscriber.\n\n13 Likes\n\n\u00b7\n\n2 Restacks\n\n13\n\nShare this post\n\n#### Intel APX\n\nthechipletter.substack.com\n\n2\n\nShare\n\n2 Comments\n\nNatalia MurilloContextOct 2, 2023Liked by BabbageWould love a section or\nfollow up to this piece with your specific thoughts!Expand full commentLike\n(1)ReplyShare  \n---  \n  \n1 reply by Babbage\n\n1 more comment...\n\nDemystifying GPU Compute Architectures\n\nGetting 'low level' with Nvidia and AMD GPUs\n\nFeb 4 \u2022\n\nBabbage\n\n71\n\nShare this post\n\n#### Demystifying GPU Compute Architectures\n\nthechipletter.substack.com\n\n9\n\nGoogle's First Tensor Processing Unit : Architecture\n\nLooking in more detail at Google's first Tensor Processing Unit\n\nMar 24 \u2022\n\nBabbage\n\n39\n\nShare this post\n\n#### Google's First Tensor Processing Unit : Architecture\n\nthechipletter.substack.com\n\n5\n\nMoore on Moore\n\nWe look at the past, present and uncertain future of Moore's Law, with some\nhelp from Gordon Moore himself\n\nJan 21 \u2022\n\nBabbage\n\n38\n\nShare this post\n\n#### Moore on Moore\n\nthechipletter.substack.com\n\nReady for more?\n\n\u00a9 2024 The Chip Letter\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
