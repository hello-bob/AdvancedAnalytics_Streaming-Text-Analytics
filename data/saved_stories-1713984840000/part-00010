{"aid": "40142789", "title": "How to Use Google's ReCaptcha V3 with NextJS 13 and the New App Router", "url": "https://peterkellner.net/2023/09/18/How-to-Use-Googles-ReCaptcha-V3-with-NextJS-13-and-the-New-App-Router/", "domain": "peterkellner.net", "votes": 2, "user": "srbhr", "posted_at": "2024-04-24 10:47:57", "comments": 0, "source_title": "How to Use Google's ReCaptcha V3 with NextJS 13 and the New App Router | Peter Kellner's Blog", "source_text": "How to Use Google's ReCaptcha V3 with NextJS 13 and the New App Router | Peter Kellner's Blog\n\nSkip to content\n\nPeter Kellner's Blog\n\n# How to Use Google's ReCaptcha V3 with NextJS 13 and the New App Router\n\nUpdated:Apr 16, 2024 | at 11:18 PM\n\n# How to Use Google\u2019s ReCaptcha V3 with NextJS 13 and the New App Router\n\n## Introduction#\n\nCAPTCHA, which stands for \u201cCompletely Automated Public Turing test to tell\nComputers and Humans Apart,\u201d is a way to differentiate between human users and\nbots. This functionality is especially crucial for form submissions to prevent\nspam and abuse. Invisible CAPTCHA doesn\u2019t interrupt the user flow and performs\nthese checks seamlessly in the background.\n\n## Google ReCaptcha V3#\n\nGoogle ReCaptcha V3 is an excellent example of an invisible CAPTCHA. After you\ninclude some JavaScript from Google on your page, that script will add a token\nto your form submission. Then, on the server-side, you\u2019ll verify this token\nusing a secret key that only the server knows. If the CAPTCHA verification\npasses, you\u2019re clear to proceed with operations like registering a user.\n\n### How It Works#\n\n  1. Include Google\u2019s ReCaptcha JavaScript on your webpage.\n  2. On form submit, a token is added automatically by the ReCaptcha script.\n  3. Send this token along with your form data to the server.\n  4. Server-side: verify this token using Google\u2019s secret key.\n  5. If it passes, proceed with further processing.\n\n## NextJS 13\u2019s App Router#\n\nNextJS 13 introduces a new folder structure, notably different from the older\npages directory approach. The new structure looks something like this:\n\n    \n    \n    - app/ - api/ - contactFormSubmit/ - route.ts - public/ - page.tsx - google-captcha-wrapper.tsx\n\nHere, /app/api/contactFormSubmit/route.ts is where your server-side logic\nresides. Specifically, this is the server-side handler that listens to HTTP\nPOST requests from the form on your website. This form submission will include\na token generated by Google ReCaptcha V3.\n\nThis co-location feature allows your server-side logic to reside closer to\nyour client-side logic. Essentially, you can have server-side and client-side\nlogic co-located, making your project easier to navigate and manage.\n\n## Setting Up Google ReCaptcha V3 and Environment Variables#\n\nBefore we deep-dive into the code, it\u2019s crucial to register your app on\nGoogle\u2019s Developer Portal and get the keys for ReCaptcha V3.\n\n  1. Google Developer Portal: Head over to the Google ReCaptcha Website and click on the \u2018Admin Console\u2019 button. Sign in with your Google account if you haven\u2019t already.\n\n  2. Create a New Site: Once in the console, hit the \u2019+\u2019 button to create a new site. Choose \u201cReCaptcha V3\u201d, give your domain, and note down the keys you\u2019ll receive. There are two keys: one is the site key and the other is the secret key.\n\nNow, let\u2019s bring those keys into our Next.js application environment.\n\nCreating .env file\n\nIn the root directory of your NextJS project, create a new file named .env.\nThis is where we\u2019ll place our keys securely. Your .env file will look\nsomething like this:\n\n    \n    \n    NEXT_PUBLIC_RECAPTCHA_SITE_KEY=6LeFZTIoAAAAA... RECAPTCHA_SECRET_KEY=6LeFZTIoAAAA...\n\nIn our codebase, you\u2019ll notice that these keys are read through\nprocess.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY and\nprocess.env.RECAPTCHA_SECRET_KEY.\n\nNote: Prefixing an environment variable with NEXT_PUBLIC_ exposes it to the\nclient-side code. So, NEXT_PUBLIC_RECAPTCHA_SITE_KEY is accessible in your\nclient-side components. It\u2019s a naming convention Next.js uses to inject\nruntime environment variables.\n\nThat\u2019s it! You\u2019ve set up the Google Developer Portal and safely stored the\nenvironment variables for use in your Next.js application. Now, let\u2019s plug\nthese keys into our code.\n\n## Implementation Example#\n\nTo use the code snippets below, you\u2019ll need to install the npm package react-\ngoogle-recaptcha-v3.\n\nAlso, if you want to try this example yourself, all the code can be found at\nthis URL: https://github.com/pkellner/nextjs-google-recaptcha-v3-app-router-\ndemo\n\n### Client-side Code#\n\nIn /app/page.tsx, use the use client directive to run this file in the\nbrowser. Omitting this directive would treat the component as a server\ncomponent, which is beyond the scope of this article.\n\nHere\u2019s the code that runs in your browser:\n\n    \n    \n    // Code for /app/page.tsx (see below for full code listing)\n\nAnd it\u2019s wrapped with this provider:\n\n    \n    \n    // Code for GoogleCaptchaWrapper (see below for full code listing)\n\nNote that GoogleReCaptchaProvider must wrap any component that uses the hook\nuseGoogleReCaptcha. The HomeInside component is required for better code\norganization.\n\n### Server-side Code#\n\nHere is the handler code that runs when the user submits the form:\n\n    \n    \n    // Code for /app/api/contactFormSubmit/route.ts (see below for full code listing)\n\nThe server-side handler listens for a POST request at\nhttp://localhost:3000/api/contactFormSubmit when you\u2019re running the app\nlocally.\n\n## Wrapping Up#\n\nYou\u2019ve made it to the end, and what a journey it\u2019s been! We\u2019ve delved into the\nintricacies of Google ReCaptcha V3, explored Invisible CAPTCHA, and even got\nour hands dirty with NextJS 13\u2019s new App Router. The code snippets should\nguide you in crafting a smoother and more secure user experience, which is\nalways a win-win.\n\nIf you\u2019ve enjoyed this read as much as I\u2019ve enjoyed writing it, that\u2019s a\nsuccess in my book. Until next time, code on! \ud83d\ude80\n\n## Full Code Listings#\n\n### /app/page.tsx#\n\n    \n    \n    \"use client\"; import React, { useState } from \"react\"; import { useGoogleReCaptcha } from \"react-google-recaptcha-v3\"; import axios from \"axios\"; import GoogleCaptchaWrapper from \"@/app/google-captcha-wrapper\"; interface PostData { gRecaptchaToken: string; firstName: string; lastName: string; email: string; hearFromSponsors: boolean; } export default function Home() { return ( <GoogleCaptchaWrapper> <HomeInside /> </GoogleCaptchaWrapper> ); } function HomeInside() { const [firstName, setFirstName] = useState(''); const [lastName, setLastName] = useState(''); const [email, setEmail] = useState(''); const [hearFromSponsors, setHearFromSponsors] = useState(false); const [notification, setNotification] = useState(''); const { executeRecaptcha } = useGoogleReCaptcha(); const handleSubmitForm = function (e: any) { e.preventDefault(); if (!executeRecaptcha) { console.log(\"Execute recaptcha not available yet\"); setNotification( \"Execute recaptcha not available yet likely meaning key not recaptcha key not set\" ); return; } executeRecaptcha(\"enquiryFormSubmit\").then((gReCaptchaToken) => { submitEnquiryForm(gReCaptchaToken); }); }; const submitEnquiryForm = (gReCaptchaToken : string) => { async function goAsync() { const response = await axios({ method: \"post\", url: \"/api/contactFormSubmit\", data: { firstName: firstName, lastName: lastName, email: email, hearFromSponsors: hearFromSponsors, gRecaptchaToken: gReCaptchaToken, }, headers: { Accept: \"application/json, text/plain, */*\", \"Content-Type\": \"application/json\", }, }); if (response?.data?.success === true) { setNotification(`Success with score: ${response?.data?.score}`); } else { setNotification(`Failure with score: ${response?.data?.score}`); } } goAsync().then(() => {}); // suppress typescript error }; return ( <div className=\"container\"> <main className=\"mt-5\"> {/* Add a top margin for better spacing */} <h2>Interested in Silicon Valley Code Camp</h2> <form onSubmit={handleSubmitForm}> <div className=\"mb-3\"> <input type=\"text\" name=\"firstName\" value={firstName} onChange={(e) => setFirstName(e?.target?.value)} className=\"form-control\" placeholder=\"First Name\" /> </div> <div className=\"mb-3\"> <input type=\"text\" name=\"lastName\" value={lastName} onChange={(e) => setLastName(e?.target?.value)} className=\"form-control\" placeholder=\"Last Name\" /> </div> <div className=\"mb-3\"> <input type=\"text\" name=\"email\" value={email} onChange={(e) => setEmail(e?.target?.value)} className=\"form-control\" placeholder=\"Email Address\" /> </div> <div className=\"mb-3 form-check\"> <input type=\"checkbox\" name=\"hearFromSponsors\" checked={hearFromSponsors} onChange={(e) => setHearFromSponsors(e?.target?.checked)} className=\"form-check-input\" /> <label className=\"form-check-label\">Hear from our sponsors</label> </div> <button type=\"submit\" className=\"btn btn-light\">Submit</button> {notification && <p className=\"mt-3 text-info\">{notification}</p>} </form> </main> </div> ); }\n\n### /app/google-captcha-wrapper.tsx#\n\n    \n    \n    \"use client\"; import { GoogleReCaptchaProvider } from \"react-google-recaptcha-v3\"; import React from \"react\"; export default function GoogleCaptchaWrapper({ children, }: { children: React.ReactNode; }) { const recaptchaKey: string | undefined = process?.env?.NEXT_PUBLIC_RECAPTCHA_SITE_KEY; return ( <GoogleReCaptchaProvider reCaptchaKey={recaptchaKey ?? \"NOT DEFINED\"} scriptProps={{ async: false, defer: false, appendTo: \"head\", nonce: undefined, }} > {children} </GoogleReCaptchaProvider> ); }\n\n### /app/api/contactFormSubmit/route.ts#\n\n    \n    \n    import { NextResponse } from \"next/server\"; import axios from \"axios\"; export async function POST(request: Request, response: Response) { const secretKey = process?.env?.RECAPTCHA_SECRET_KEY; const postData = await request.json(); const { gRecaptchaToken, firstName, lastName, email, hearFromSponsors } = postData; console.log( \"gRecaptchaToken,firstName,lastName,email,hearFromSponsors:\", gRecaptchaToken?.slice(0, 10) + \"...\", firstName, lastName, email, hearFromSponsors ); let res: any; const formData = `secret=${secretKey}&response=${gRecaptchaToken}`; try { res = await axios.post( \"https://www.google.com/recaptcha/api/siteverify\", formData, { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\", }, } ); } catch (e) { console.log(\"recaptcha error:\", e); } if (res && res.data?.success && res.data?.score > 0.5) { // Save data to the database from here console.log(\"Saving data to the database:\", firstName, lastName, email, hearFromSponsors); console.log(\"res.data?.score:\", res.data?.score); return NextResponse.json({ success: true, firstName, lastName, score: res.data?.score, }); } else { console.log(\"fail: res.data?.score:\", res.data?.score); return NextResponse.json({ success: false, name, score: res.data?.score }); } }\n\n  * others\n\nShare this post on:\n\nShare this post via WhatsApp Share this post on Facebook Tweet this post Share\nthis post via Telegram Share this post on Pinterest Share this post via email\n\nPeter Kellner's Blog on Github Peter Kellner's Blog on LinkedIn Send an email\nto Peter Kellner's Blog Peter Kellner's Blog on Twitter Peter Kellner's Blog\non YouTube Peter Kellner's Blog on Mastodon\n\nCopyright \u00a9 2024 | All rights reserved.\n\n", "frontpage": false}
