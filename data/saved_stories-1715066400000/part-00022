{"aid": "40280996", "title": "Bikeshed: A preprocessor that turns source text into actuals specs", "url": "https://speced.github.io/bikeshed/", "domain": "speced.github.io", "votes": 1, "user": "jcbhmr", "posted_at": "2024-05-07 00:22:59", "comments": 0, "source_title": "Bikeshed Documentation", "source_text": "Bikeshed Documentation\n\n\u2191 Jump to Table of Contents\u2192 Pop Out Sidebar\n\n# Bikeshed Documentation\n\n## Living Standard, 8 March 2024\n\nThis version:\n\n    https://speced.github.io/bikeshed/\nIssue Tracking:\n\n    GitHub\n    Inline In Spec\nEditor:\n\n    Tab Atkins-Bittner\n\nTo the extent possible under law, the editors have waived all copyright and\nrelated or neighboring rights to this work. In addition, as of 8 March 2024,\nthe editors have made this specification available under the Open Web\nFoundation Agreement Version 1.0, which is available at\nhttp://www.openwebfoundation.org/legal/the-owf-1-0-agreements/owfa-1-0. Parts\nof this work may be from another specification document. If so, those parts\nare instead covered by the license of that specification document.\n\n## Abstract\n\nBikeshed is a spec-generating tool that takes in lightly-decorated Markdown\nand spits out a full spec, with cross-spec autolinking, automatic generation\nof indexes/ToC/etc, and many other features.\n\n## 1\\. Installing\n\n### 1.1. Using Bikeshed Without A Local Install\n\n#### 1.1.1. Via the Web\n\nIf you use Bikeshed infrequently, and are okay with requiring a network\nroundtrip every time you invoke Bikeshed, you probably want to use the\nBikeshed API instead. In return, the API version is always up-to-date, so you\ndon\u2019t have to remember to update things yourself. See \u00a7 2 Invoking Bikeshed\nWithout Installing for options.\n\nNote: The remote API has several limitations; most notably, it can\u2019t take\nmultiple files. If you are using custom boilerplates, or include files, you\u2019ll\nhave to run Bikeshed yourself.\n\n#### 1.1.2. Via pipx\n\nIf you use Bikeshed infrequently, but have the prereqs for a local install (a\nrecent Python 3, and pipx; see below), you can run an always-up-to-date\nBikeshed locally as:\n\n    \n    \n    pipx run bikeshed update && pipx run bikeshed # on subsequent invocations, just call: pipx run bikeshed\n\nThis does not have the limitations of the web version; you can use all the\nfeatures of Bikeshed, including custom boilerplates and include files, or\nalternate run modes like bikeshed watch.\n\nNote: This actually creates a temporary local install, which automatically\ndisappears after a few days. It does not add the bikeshed command to your\nPATH. However, it generally won\u2019t require manual upgrading; so long as it\u2019s\nbeen long enough for pipx to delete the cached version, it\u2019ll always grab the\nnewest version of Bikeshed.\n\n### 1.2. Prereqs\n\nBikeshed is a Python program, and getting Python working well in modern\nsystems has a few (pretty easy) steps. (These might already all work for you!)\n\n#### 1.2.1. python3\n\nBikeshed requires Python 3.9 or later. (It\u2019s currently tested up to 3.11.)\n\nTo tell what version you have, run:\n\n    \n    \n    python3 --version\n\nIf it reports 3.9 or later, you\u2019re fine.\n\nIf it\u2019s earlier, you\u2019ll need to update your local Python version. There are\nseveral ways to do so, but I recommend pyenv as a safe and easy method.\n\nhttps://github.com/pyenv/pyenv#installation gives instructions for installing\npyenv on various environments. It also links to the auto-installer, which can\nmake things even easier. Windows users have slightly different instructions,\nbut it links to a windows fork as well.\n\nIf you know your way around pyenv already, feel free to do what you\u2019re used to\nhere. Otherwise, it\u2019s usually easiest to set up 3.10 as your \"default\" Python:\n\n    \n    \n    pyenv versions\n\nwill list what versions exist, and then\n\n    \n    \n    pyenv global 3.10.4\n\nwill set 3.10.4 as your \"global\" version, used by default. (Substitute in\nwhatever the name of the version you saw in versions was.)\n\n#### 1.2.2. pipx\n\nInstalling packages globally is usually a bad (and sometimes insecure!) idea.\nThey should instead be isolated into \"virtual environments\". This used to be a\nlittle tricky to set up, but now pipx makes it very simple.\n\nTo install pipx, your system software distribution might already have it; for\nexample, distributions using apt can run\n\n    \n    \n    sudo apt-get install pipx\n\nIf this is not the case for you, see pipx\u2019s install instructions and do\nwhatever it says.\n\n### 1.3. Installing Bikeshed Itself\n\n#### 1.3.1. Installing For Normal Use\n\nAssuming the prereqs (above) are satisfied, installation is trivial:\n\n    \n    \n    pipx install bikeshed\n\nWhen this is completed, Bikeshed should be installed, and the bikeshed command\nshould work in your shell.\n\nNote: If this is your first time running pipx, you might get a message\ncomplaining about your PATH variable, and Bikeshed\u2019s attempt to update its\ndata files will fail. If so, follow pipx\u2019s instructions, then run bikeshed\nupdate again.\n\nAfter this, invoking Bikeshed is just:\n\n    \n    \n    cd ~/my-spec-folder bikeshed\n\nRemember to update Bikeshed regularly by running:\n\n    \n    \n    pipx upgrade bikeshed\n\nSee \u00a7 1.4 Updating Bikeshed for more details.\n\nYou can also manually refresh Bikeshed\u2019s datafiles by running:\n\n    \n    \n    bikeshed update\n\nBut this will run automatically whenever you use Bikeshed if your data files\nare more than a few days old, so it usually shouldn\u2019t be necessary.\n\nNote: If you\u2019re on a Mac, bikeshed update might fail with some errors about\ncertificates. This is a known issue with the version of Python 3.7 shipped\nwith XCode, which might be the default on your system. To fix this, install\nPython 3.7 with Brew instead.\n\n#### 1.3.2. Installing Bikeshed for Development\n\nIf you\u2019re installing Bikeshed so you can work on it, or want to ensure you\nhave the bleeding-edge tip-of-tree version, the instructions are just a tiny\nbit more complex.\n\nFirst, clone the Bikeshed repository:\n\n    \n    \n    git clone https://github.com/speced/bikeshed.git\n\nThen navigate to that folder (by default, it\u2019ll be a folder called \"bikeshed\"\nin the current folder you\u2019re in) and run:\n\n    \n    \n    pip3 install -e .\n\nThis will spam your console with a bunch of install progress. When it\nsuccessfully completes, the bikeshed module should be globally available for\nimport in Python, and a bikeshed command should now work in your shell.\n\n##### 1.3.2.1. Installing With Pipenv\n\nYou probably don\u2019t want to install all of Bikeshed\u2019s dependencies globally, so\nI recommend using pipenv to install it into a virtual environment (similar to\nwhat pipx does for non-dev installs).\n\nFollow the same instructions as above, but instead of running pip3 install,\nrun:\n\n    \n    \n    pipenv install --dev -e . pipenv run bikeshed update\n\nThis will not install a bikeshed command by default; instead, you run Bikeshed\nwith pipenv run bikeshed. If you\u2019d like bikeshed to work by itself, either\nstart a pipenv shell with pipenv shell, or add an alias to your machine like:\n\n    \n    \n    bikeshed=pipenv run bikeshed\n\n### 1.4. Updating Bikeshed\n\nTo update bikeshed to its latest version at any time, just run:\n\n    \n    \n    pipx upgrade bikeshed && bikeshed update\n\nThis\u2019ll pull the latest version of Bikeshed, and ensure that you\u2019re looking at\nthe latest version of the data files, rather than whatever stale version is\ncurrently sitting in the repo.\n\nNote: If you did an \"editable\" install up above, to update it you just run the\ninstall command again and invoke bikeshed update afterwards.\n\n### 1.5. Building a Bikeshed docker image\n\nNote: I don\u2019t actually understand Docker or know how to use it, so this guide\nis based on one community member\u2019s efforts. If something is wrong or outdated,\nuh, figure out how to fix it and tell me so I can fix the docs.\n\n  * If needed, download and install docker community engine\n\n  * Build the Bikeshed image from the project\u2019s directory:\n    \n        docker build --tag=bikeshed:latest .\n\nThe above command will cache Bikeshed\u2019s datafiles in the Docker layer cache,\nin order to speed up rebuilds. If you want to be sure you get the latest\ndatafiles, run bikeshed update in the container or add the --no-cache flag\nwhen building the image:\n\n    \n        docker build --tag=bikeshed:latest --no-cache .\n\n  * Optionally, deploy the Bikeshed image to a docker registry\n\nFor example, on a unix system (for Windows, consider the Windows Subsystem for\nLinux):\n\n    \n        TAG=$(docker image inspect --format='{{.Id}}' bikeshed:latest) DATE=$(date '+%Y.%m.%d')\n\nLogin to a docker registry.\n\n    \n        docker login\n\nTag the image to be pushed as organization/artifact:version\n\n    \n        docker tag $TAG <organization>/bikeshed:$DATE\n\nPush the tagged image to the docker registry\n\n    \n        docker push <organization>/bikeshed:$DATE\n\n#### 1.5.1. Invoking Bikeshed using a docker image\n\nNote: As stated up in \u00a7 1.5 Building a Bikeshed docker image, I don\u2019t know how\nDocker works and this guide is based on a community member\u2019s experience, so\nuse at your own risk.\n\nTypically, this requires login to the docker registry and pulling a Bikeshed\nimage.\n\nFor some <organization> and some <date>:\n\n    \n    \n    docker login docker pull <organization>/bikeshed:<date>\n\nRegardless of host environment\u2019s operating system, running Bikeshed from a\ndocker image requires two things:\n\n  * mapping a host directory to a path in the docker image (e.g. /data)\n\n  * specifying the location of Bikeshed\u2019s input and output relative to the path in the docker image (i.e., /data)\n\nExample for a Unix host:\n\n    \n    \n    docker run --rm -v $(pwd):/data <organization>/bikeshed:<date> bikeshed spec /data/<some *.bs file> [/data/<some output file>]\n\nExample for a Windows host:\n\n    \n    \n    docker run --rm --volume C:\\mystuff\\project1\\:/data <organization>/bikeshed:<date> spec /data/Index.bs /data/out/Index.html\n\nNote that the \u00a7 3.1 Global Options apply to running Bikeshed from a docker\nimage. Since the Bikeshed docker image is read-only, it does not make sense to\nexecute the Bikeshed update command from a docker image.\n\n## 2\\. Invoking Bikeshed Without Installing\n\nWhile a locally-installed Bikeshed does provide additional functionality, if\nall you need to do is process a spec, there is an API server you can talk to,\nmaintained by Peter Linss.\n\n### 2.1. Using Curl\n\nThese instructions assume use of the curl command, but you can use any\nequivalent \"talk HTTP at a server\" command you might have access to.\n\n    \n    \n    curl https://api.csswg.org/bikeshed/ -F file=@index.bs -F force=1 > index.html\n\nSimplest possible usage:\n\n  * passing the source as -F file=@index.bs\n\n  * forcing output even if there are errors with -F force=1\n\n  * piping the output to the desired filename with > index.html.\n\nAdditional possible arguments:\n\n  * -F output=err to just receive errors, if any\n\n  * -F md-Foo=bar to pass a Foo: bar metadata to the spec (same as passing --md-Foo=bar locally)\n\n  * -F die-on=[nothing, fatal, link-error, warning, everything], (same as the --die-on local flag)\n\nIf your source file is online, such as in a git repository, you can pass the\nurl directly instead:\n\n    \n    \n    curl http://api.csswg.org/bikeshed/ -F url=http://dev.w3.org/csswg/css-syntax/Overview.bs -F force=1 > Overview.html\n\nIf you are using additional files beyond your plain source file\u2014local\nboilerplate files, sub-document includes, custom definition files, etc\u2014this is\nthe only way to make those still work via the curl API; Bikeshed will look for\nthe additional files relative to the source document\u2019s url.\n\n(Any additional files that get included implicitly, such as local\nboilerplates, must be listed in the Local Boilerplate or External Infotrees\nmetadatas to get picked up. Files explicitly listed in the source file, such\nas in a <pre class=include>, will be picked up automatically.)\n\nThe separate bikeshed issues-list command (for generating issues lists for a\nW3C Disposition of Comments) can also be invoked via curl:\n\n    \n    \n    curl http://api.csswg.org/bikeshed/ -F file=@Issues.txt -F input=issues > Issues.html\n\n### 2.2. Using the Web Form\n\nAlternately, you can just visit https://api.csswg.org/bikeshed/ directly, and\nupload a file, point to a URL, or directly paste in your spec source.\n\nIt defaults to outputting both the HTML and the errors, but you can switch it\nto one or the other only if you want.\n\n### 2.3. Using CI Tools\n\n#### 2.3.1. Travis CI\n\nTo use bikeshed on Travis CI's github integration, you\u2019ll need the following\n.travis.yml commands:\n\n    \n    \n    language: python python: - \"3.8\" install: - pip install bikeshed - bikeshed update script: # Invoke bikeshed here, at your own leisure. E.g.: - bikeshed spec\n\nRaymond Toy has written a very thoro guide on the full setup you need to auto-\nbuild and -publish the generated files to GitHub via Travis, so you only need\nto check in the source files themselves.\n\n#### 2.3.2. GitHub Actions\n\nThe W3C maintains a spec-prod GitHub Action that allows automatically\nprocessing commits or PRs as either Bikeshed or ReSpec.\n\nTo use, add a file to .github/workflows/ folder in your GitHub project,\ncontaining:\n\n    \n    \n    name: CI on: workflow_dispatch: {} pull_request: {} push: branches: [main] jobs: main: name: Build, Validate and Deploy runs-on: ubuntu-20.04 permissions: contents: write steps: - uses: actions/checkout@v3 - uses: w3c/spec-prod@v2 with: TOOLCHAIN: bikeshed # Modify as appropriate GH_PAGES_BRANCH: gh-pages # if your doc isn't in the root folder, # or Bikeshed otherwise can't find it: SOURCE: src/spec.bs # output filename defaults to your input # with .html extension instead, # but if you want to customize it: DESTINATION: src/index.html\n\nThe linked document has a number of usage examples to achieve various\noutcomes\u2014simple validation, auto-publishing on w3.org/TR, building multiple\nspecs from a single repository, and some others. It also explains the entire\nprocess from start to finish, if you need more help setting things up.\n\n## 3\\. Invoking Bikeshed Locally\n\nLocally-installed Bikeshed is invoked via the command-line. There\u2019s a bunch of\noptions, but you\u2019ll only use a few in day-to-day use.\n\nIf you\u2019ve installed Bikeshed via one of the standard local installs above, you\ncan typically just type bikeshed in the folder where your .bs file lives and\nit\u2019ll do its thing, automatically invoking the spec subcommand.\n\nHowever, Bikeshed has a number of different subcommands, and both global and\nsubcommand-specific flags that can be invoked.\n\n### 3.1. Global Options\n\nThere are a few options that apply to many different options, so they\u2019re\nspecified before the individual commands:\n\n-h or --help\n    \n\nShows the help message for the current command. Can be run without any\ncommand, like bikeshed -h to show the list of valid commands and the global\nflags, or after a command, like bikeshed spec -h to show the help text for\nthat command in particular.\n\n\\--die-on = [ nothing | fatal | link-error | warning | everything ]\n    \n\nBikeshed categorizes errors into several categories, depending on their\nseverity: clear mistakes are \"fatal\", errors in resolving autolinks are \"link-\nerror\", and things that look a little questionable but are totally okay to\ngenerate a document with are \"warning\".\n\nThe --die-on flag controls which sorts of errors cause Bikeshed to fail to\nproduce output and exit with a non-0 status (indicating the command failed).\n\nPossible values are \"nothing\", \"fatal\", \"link-error\", \"warning\", and\n\"everything\", with each level including all previous levels. Defaults to\n\"fatal\".\n\nIt can sometimes be useful to set this to \"nothing\" if you just need to push\nthru and generate a spec that happens to throw some unimportant errors you\ndon\u2019t have time to fix. The -f flag is a shorthand for this.\n\nAlternately, it can be useful to set it to a level stricter than \"fatal\" if\nyou want to ensure that, for example, a CI build fails when link errors creep\ninto your document, or if you just generally want to ensure that your document\nbuilds \"cleanly\", without any warnings at all. \"everything\" is equivalent to\n\"warning\", but is guaranteed to always die on all error messages, even if more\nlevels are added in the future.\n\nNote that this can also be controlled from within your document (or your\ngroup\u2019s metadata) via the Die On metadata.\n\n\\--die-when = [ early | late ]\n    \n\nWhen Bikeshed encounters a disallowed error (per the --die-on value), it can\neither die immediately (early) so you can see the error and fix it without the\nrest of the document potentially being incorrect and throwing nonsensical\nerrors; or it can wait until the end of processing (late) to die, so you can\nsee all the errors without having to continually rerun the command.\n\nEither way, Bikeshed will exit with a non-zero status, and refuse to actually\nproduce an output document.\n\nIf unspecified, this defaults to late.\n\n(If using late and processing a document with many output messages, it might\nbe useful to temporarily run it with -q or -qq, so you can focus on the more\nimportant messages first.)\n\nNote that this can also be controlled from within your document (or your\ngroup\u2019s metadata) via the Die When metadata.\n\n-f or --force\n    \n\nA shorthand for --die-on=nothing.\n\n-q or --quiet\n    \n\nThe -q flag suppresses one level of error messages. It can be passed multiple\ntimes to suppress additional levels, in the order \"warnings\", then \"link\nerrors\", then \"fatal errors\".\n\n-s or --silent\n    \n\nThe -s flag suppresses all console output from Bikeshed, regardless of source.\n(It\u2019s more powerful than -q, as it\u2019ll also suppresses things like the\nsuccess/failure message.)\n\n-d or --dry-run\n    \n\nThe -d flag prevents Bikeshed from actually writing anything to disk. It does\neverything else, just skips that final \"save\" operation.\n\n\\--print= [ plain | console | markup ]\n    \n\nSpecifies how Bikeshed should output its messages. Default is \"console\", which\noutputs colored text using console color codes. \"plain\" outputs the same text\nas \"console\", but without any color codes (which look like gibberish if you\u2019re\nnot outputting to a console). \"markup\" outputs the text in a light markup\nstructure (suitable for parsing as HTML), for easier parsing of the output by\ntools.\n\n\\--no-update\n\n    \n\nBy default, Bikeshed checks how old its data files are every time it runs, and\nautomatically triggers an update (as if you ran bikeshed update) if they\u2019re\nmore than a few days old.\n\nIf this is causing problems (for example, if something has gone wrong with the\nupdate service, or you are offline and don\u2019t want to wait for the network to\ntimeout), you can prevent it from doing the check with --no-update.\n\n\\--allow-nonlocal-files\n\n\\--allow-execute\n\n    \n\nBikeshed has the ability to include arbitrary files into your spec, and in a\nfew cases the ability to execute shell commands or Python on your behalf (to\nallow for some extensions).\n\nBy default, these are restricted: you can only include files from the spec\u2019s\nown folder or subfolders, and arbitrary code execution is disallowed.\n\nIf you trust the specs you are processing, and need these abilities, however,\nthe restrictions can be relaxed by passing these flags.\n\n### 3.2. bikeshed spec\n\nThe spec command is the most common one you\u2019ll use. It turns a Bikeshed source\nfile into an output HTML file. The rest of this document mostly describes how\nto format a source file for use with this command.\n\nMost of the time you can just run bikeshed spec and things will \"just work\" as\nlong as your source file has the .bs extension.\n\nRelevant flags:\n\n\\--gh-token=TOKEN\n\n    \n\nIf you\u2019re using Inline GitHub Issues heavily, you might run into the GitHub\nrate limit. You can generate an OAuth token at\nhttps://github.com/settings/tokens and then pass it to Bikeshed via this flag\nto raise your limit considerably.\n\n-l or --line-numbers\n    \n\nIf you\u2019re having trouble locating the source of an error in your code, run\nBikeshed with this flag and almost all errors will report the source line\nnumber they appear at (or somewhere very close - it\u2019s per-element).\n\nThis code is unfortunately forced to be fairly hacky, and has the potential to\nlightly corrupt your file (inserting extra debugging info into plain text that\njust happens to look like markup), so it automatically triggers a dry-run, as\nif you\u2019d specified --dry-run. When you\u2019re done debugging, just run again\nwithout this flag to actually get some output.\n\nAfter any flags, you can optionally specify the input file path and output\nfile path. Both of these can usually be omitted; if you omit the output file,\nit\u2019ll just output to a file with the same name as the input file, but with the\nextension changed to .html; if you omit the input file, it\u2019ll search thru the\ncurrent directory and assume you want the first file with a Bikeshed extension\n(.bs).\n\nIf you want to feed Bikeshed from stdin or have it output to stdout, just use\n- as the appropriate filename.\n\n### 3.3. bikeshed watch\n\nThe watch command is identical to the spec command, except it sets up a\nwatcher and auto-rebuilds the spec every time it changes. With this turned on,\nyou can edit with a simple save->refresh cycle, rather than having to do\nsave->build->refresh.\n\nIt accepts all the same arguments as spec. (Tho using stdin/stdout might get a\nlittle weird.)\n\nUse Ctrl-C to stop the watcher (or whatever key combo kills the currently\nrunning process in your console).\n\n### 3.4. bikeshed template\n\nThe template command outputs a minimal \"skeleton\" document to stdout. It\u2019s\nuseful to get started with Bikeshed, without having to remember what all the\nrequired metadata is.\n\nOn a Linux-like command line, it should be used like:\n\n    \n    \n    bikeshed template > index.bs\n\n### 3.5. bikeshed echidna\n\nThe echidna command hooks into the W3C\u2019s Echidna auto-publishing system,\nletting you publish W3C specs from the command-line, rather than having to go\nthru a staff contact.\n\nNote: Currently, only Working Drafts (not including FPWD) and Candidate\nRecommendation Drafts can be published via Echidna.\n\nIt\u2019s invoked similarly to bikeshed spec, with three required flags:\n\n\\--u USERNAME\n\n    \n\nYour W3C username\n\n\\--p PASSWORD\n\n    \n\nYour W3C password\n\n\\--decision DECISION_URL\n\n    \n\nA link to a publicly-visible message approving the publication of this draft.\n\nThere are some optional flags:\n\n\\--editorial\n\n    \n\nMarks the publication as an editorial update.\n\n\\--cc EMAILS\n\n    \n\nA comma-separated list of email addresses which the W3C will ping when the\npublication request is completed.\n\n\\--additional-directories [DIRECTORY ...]\n\n    \n\nBy default, Bikeshed will look for directories named images, diagrams, and\nexamples, and include them and their contents in the publication. This flag\nwill override that list, letting you specify any number of files and/or\nfolders that should be included with the publication.\n\n\\--self-contained\n\n    \n\nConversely, this flag signals that the document doesn\u2019t use anything external,\nso it shouldn\u2019t include anything even if one of the default directories does\nexist.\n\n\\--just-tar\n\n    \n\nThe Echidna service works by accepting an uncompressed TAR file of all the\nfiles that will be published. Passing this flag just constructs that TAR file\nand prints it to stdout, without actually contacting Echidna.\n\nAfter the flags, you can optionally specify the input file path, just like for\nbikeshed spec; if omitted, it selects a file automatically in the same way.\n\nBikeshed then builds the spec normally, performs a little bit of fixup for\ncommon issues that PubRules complains about, and submits the spec to Echidna.\nIt will print out a URL for you to check on the progress of your publication;\nit should complete in a few seconds.\n\nMost likely you\u2019ll have some PubRules errors when you check your progress; fix\nthose (ask in irc.w3.org#pub for help if needed) then just run bikeshed\nechidna again.\n\nNote: If auto-publishing via Travis CI, this Travis blog post about encrypted\nenvironment variables will be helpful for safely using your W3C password.\n\n#### 3.5.1. Testing Publication Locally\n\nPublishing via Echidna automatically does some \"fixup\" on your document, to\nfix some common errors that would make the doc fail the W3C\u2019s PubRules check.\n\nThese fixes are controlled by the Prepare For TR metadata, so if you want to\nsee precisely what your spec will look like when it\u2019s published, add that to\nyour metadata block manually.\n\nIf you want to go further, and see the actual TAR file that will be sent to\nthe Echidna service, you can pass --just-tar to the command (and omit the\nauthentication flags that are normally required). This will cause Bikeshed to\ncreate a file named test.tar in your current directory.\n\n#### 3.5.2. Echidna Hooks\n\nBikeshed\u2019s default publication behavior is usually sufficient, but if you need\nto customize it in some way, there are a few hooks you can use (assuming you\ncan write Python). In an include file named bs-extensions.include, provide an\nimplementation of the following methods (check the default version of this\nfile for the default implementations, for the methods you don\u2019t want to\nchange):\n\nBSPrepTR(doc)\n\n    \n\nThis method is called after processing is done, when the document is ready to\nbe packed up and sent to Echidna. Here, you can perform whatever final post-\nprocessing is required.\n\nFor example, the CSSWG EDs link to a stylesheet in the parent directory of the\nserver they\u2019re stored on. In their BSPrepTR(), they search for the link to\nthat stylesheet, and update it to point to the current directory instead.\n\nBSPublishAdditionalFiles(files)\n\n    \n\nThis method allows you to specify what files should be included in the\npublishing bundle. It must return an array of additional files/folders; each\nentry must either be a string, referring to a file/folder in the spec\u2019s\ndirectory or subdirectories, or a tuple of 2 strings, the first of which\npoints to a file outside the spec\u2019s directory, and the second of which\nprovides the path the file should have within the spec\u2019s directory.\n\nThe files value provides the default values, which you probably want to just\nextend, rather than fully replace. It defaults to [\"images\", \"diagrams\",\n\"examples\"], indicating that those folders, if present, will be included.\n\nFor example, as stated in the example for BSPrepTR(), the CSSWG needs to\ninclude its stylesheet in with its specs. To do so, it just needs to add the\nentry [\"../default.css\", \"default.css\"] to the files array, indicating that\nBikeshed should grab the default.css file from the parent directory, and put\nit in the spec\u2019s directory (in the bundle) with the same name.\n\n### 3.6. bikeshed update\n\nThe update command updates Bikeshed\u2019s datafiles, which it uses for autolinking\nand similar things. By default it\u2019ll update all of its datafiles, but if you\nwant to update only particular ones, you can pass any or all of the following\nflags:\n\n  * \\--anchors to update Bikeshed\u2019s \"anchor data\" - a list of all the definitions and headers it knows about.\n\n  * \\--biblio to update Bikeshed\u2019s bibliography database.\n\n  * \\--caniuse to update Bikeshed\u2019s CanIUse.com information.\n\n  * \\--link-defaults to update Bikeshed\u2019s manually-maintained list of special linking rules.\n\n  * \\--test-suites to update Bikeshed\u2019s database of test-suite information from the Shepherd system.\n\n  * \\--languages to update Bikeshed\u2019s database of language codes/names (used for the Translations metadata)\n\n  * \\--wpt to update Bikeshed\u2019s database of WPT tests; see \u00a7 11 Testing Integration With WPT.\n\nBy default, Bikeshed\u2019s update system relies on the Bikeshed-Data project,\nwhich preprocesses the various data sources directly into Bikeshed\u2019s data\nformats, and prepares a manifest of changed files, letting Bikeshed quickly\ndownload only what it needs. However, this can be up to 10 minutes out of date\n(or longer, if the update process has fallen over); if you need absolutely up-\nto-date information right now, pass the --skip-manifest flag to force Bikeshed\nto do its full manual update process. (You can combine it with any of the\nflags above to only get the exact files you need.)\n\n### 3.7. bikeshed refs\n\nThe refs command lets you search Bikeshed\u2019s anchor database, letting you see\nwhat sort of things it\u2019s looking at when doing autolinking. This can be very\nuseful for debugging, or just for a quick check of where something is defined.\n\nIt\u2019s flags are similar to the attributes used on autolinks:\n\n  * \\--text=FOO to specify the linktext you want to filter for\n\n  * \\--type=FOO to specify the link type\n\n  * \\--for=FOO to specify the for value\n\n  * \\--spec=FOO to specify the spec\n\n  * \\--status=foo to specify the status\n\n  * \\--exact to turn off the variations that Bikeshed applies to some link texts (such as looking for \"book\" when you search for \"books\"), and just search for the exact text you specified\n\nAny or all of these flags can be specified, and Bikeshed will display all the\nrefs it can find matching the criteria.\n\n### 3.8. bikeshed source\n\nThe source command applies various transformations to the source document\nitself, rather than producing a separate output document. Its options are\ndescribed in \u00a7 14 Source-File Processing: bikeshed source.\n\n### 3.9. bikeshed issues-list\n\nThe issues-list command processes a plain-text document in an \"issues-list\"\nformat pioneered by the CSSWG into an equivalent HTML version.\n\nRelevant flags:\n\n  * -t outputs a template issues-list file to stdout, making it easier to start a new document without having to reference an old one to remember the format. Use it like bikeshed issues-list -t > issues-19700101.txt.\n\nAfter the command you can pass the input and output filenames. As usual, one\nor both can be omitted: if you omit the output, it\u2019ll write to a file with the\nsame name as the input, but a .html extension; it you omit the input, it will\nlook in the current folder for any files starting with \"issues\" and ending in\n\".txt\", and then extract the digits from those filenames and select the one\nwith the largest number. If you name your file as suggested above, with an ISO\ndate, it\u2019ll correctly always choose the latest issues list.\n\nDefine the issues-list format. The -t output is already more than enough to\nactually work with, but it would still be good to describe it more fully.\n\n## 4\\. Metadata\n\nCrucial to the processor\u2019s ability to automatically generate most of a spec\u2019s\nboilerplate is a small metadata section, typically located at the top of a\nfile.\n\nA metadata block is just a <pre class='metadata'> element, with contents like:\n\n    \n    \n    Status: UD TR: http://www.w3.org/TR/css-variables/ ED: http://dev.w3.org/csswg/css-variables/ Shortname: css-variables Level: 1 Editor: Tab Atkins Jr., Google, http://xanthir.com/contact Editor: Daniel Glazman, Disruptive Innovations, daniel.glazman@disruptive-innovations.com Abstract: This module introduces cascading variables as a new primitive value type that is accepted by all CSS properties, and custom properties for defining them.\n\nThe syntax of a metadata block is very simple - it\u2019s a line-based format, with\neach line consisting of a key and a value, separated by a colon. Or if you\u2019re\nadding multiple lines with the same key, you can just start the subsequent\nlines with whitespace to have it reuse the last-seen key.\n\nSeveral keys are required information, and will cause the processor to flag an\nerror if you omit them:\n\n  * Title is the spec\u2019s full title, used to generate both the title and h1 of the document. This can alternately be specified by adding an h1 element as the first line of the spec.\n\nNote: The optional H1 metadata lets you specify the text you want for the\ndocument\u2019s h1, if for some reason you want the title and h1 to have different\ntext. For example, some browsers interpret markup as literal text in title, so\nyou may want to provide \"plain text\" in the Title metadata and marked-up text\nin H1.\n\n  * Status is the spec\u2019s status. There are a few general abbreviations that can be used any group (or specs without a Group at all), and several that are restricted to particular groups.\n\n  * ED (or its synonym URL) must contain a link that points to the most current draft (typically the \"editor\u2019s draft\", or otherwise the version that\u2019s most live and updated).\n\n  * Shortname must contain the spec\u2019s shortname, like \"css-lists\" or \"css-backgrounds\".\n\n  * Level (or Revision, an alias) must contain the spec\u2019s level as an integer or none if the spec does not use levels.\n\n  * Editor must contain an editor\u2019s information. This has a special format of comma-separated clauses the first is required and must contain the editor\u2019s name; all the rest are optional.\n\n    * If editing a W3C document, your W3C ID (the number at the end of the url when you navigate to https://www.w3.org/users/myprofile) can be added as a w3cid #### clause.\n\n    * Your affiliation (company you work for, etc), optionally followed by a link to their homepage, like Example Company http://example.com. If your affiliation contains a comma, HTML-escape it (&#44;).\n\n    * Your email address.\n\n    * Your homepage.\n\nAll of the optional clauses can occur in any order, except that affiliation\nmust occur before email or homepage.\n\nMultiple Editor lines can be used to supply multiple editors.\n\n  * Abstract must contain an abstract for the spec, a 1-2 sentence description of what the spec is about. Multiple Abstract lines can be used, representing multiple lines of content, as if you\u2019d written those multiple lines directly into the document.\n\nThere are several additional optional keys:\n\n  * Die On and Die When give the same control that the --die-on and --die-when command-line options do. They take the same values\u2014a single keyword\u2014as the corresponding command-line arguments.\n\n  * H1 contains the text/markup that goes into the document\u2019s h1 element. If omitted, this defaults to the value of the Title metadata, which is usually what you want.\n\n  * TR must contain a link that points to the latest version on /TR.\n\n  * Canonical URL defines the canonical URL (as used by search engines) for the document; it can be set to \"TR\" (the default value if TR is defined), \"ED\", or a specific URL.\n\n  * Favicon defines the favicon URL for the document; it only supports one single URL.\n\n  * Logo defines the logo url for the document; it only supports one single url. This URL can be used via the [LOGO] text macro (\u00a7 12.3 Text Macros), and is by default used by the logo boilerplate section (\u00a7 12.5 Boilerplate Sections).\n\n  * Former Editor must contain a former editor\u2019s information, in the same format as Editor.\n\n  * Warning must contain either \"Obsolete\", \"Not Ready\", \"New Version XXX\", \"Replaced by XXX\", \"Commit deadb33f http://example.com/url/to/deadb33f replaced by XXX\", \"Branch XXX http://example.com/url/to/XXX replaced by YYY\", or \"Custom\", which triggers the appropriate warning message in the boilerplate.\n\nIf set to \"Custom\", the metadata keys Custom Warning Title and Custom Warning\nText control what the warning contains.\n\n  * Previous Version can contain either a URL to a previously-published version (such as versions published on w3.org/TR), or the value from biblio or from biblio my-spec-1.\n\nLinks get displayed literally in the spec\u2019s metadata section. \"from biblio\"\nentries instead auto-generate a link to the latest dated version of the given\nversioned shortname that appears in the biblio database. (If omitted, the\nspec\u2019s own versioned shortname is implicitly used.)\n\n  * At Risk must contain an at-risk feature. You can specify this key more than once for multiple entries.\n\n  * Group must contain the name of the group the spec is being generated for. This is used by the boilerplate generation to select the correct file. If omitted, it defaults to a generic set of boilerplate.\n\n  * Dark Mode must contain a boolish for whether or not Bikeshed includes darkmode-relevant colors/etc for all of its built-in styles.\n\nIt defaults to \"on\", but if you provide custom styles that are not darkmode-\naware, you should set this \"off\" so Bikeshed features don\u2019t render for\ndarkmode and become unreadable against your lightmode styles.\n\n  * Status Text allows adding an additional customized sentence that can be used in the document status section.\n\n  * Ignored Terms accepts a comma-separated list of terms and makes Bikeshed not emit warnings or errors when attempting to autolink those terms. Use this to quiet spurious preprocessor warnings caused by you inventing terms (for example, the Variables spec invents custom properties like 'var-foo'), or as a temporary patch when the spec you want to link to doesn\u2019t set up its definitions correctly.\n\n  * Date must contain a date in YYYY-MM-DD format, which is used instead of today\u2019s date for all the date-related stuff in the spec. Alternately it can contain the string now, which explicitly indicates a date of precisely when the output is generated.\n\n  * Deadline is also a YYYY-MM-DD date, which is used for things like the LCWD and CR Snapshot Status section, to indicate deadlines.\n\n  * Expires is also a YYYY-MM-DD date, or can be the string now to indicate today\u2019s date, or can be an \"ISO Duration\" like P1Y to indicate \"+1 year\" from the Date metadata (or the spec\u2019s generation date if that\u2019s not specified), and indicates when the document should be considered \"expired\"\u2014before the expiration date an (initially closed) warning about the upcoming expiration is automatically included in the document; afterwards the warning defaults to being open and annoying.\n\nIt can also take a boolish false value or never to indicate it never expires;\nthis is just the default value, so these values are only useful for turning\noff a default expiration established by your default metadata.\n\n  * Test Suite must contain a link to the test suite (like https://test.csswg.org/suites/css-flexbox-1_dev/nightly-unstable/).\n\nNote: This merely displays a \"Test Suite\" item in the spec\u2019s header-list, as\nlinked text. To display WPT results, see \u00a7 11 Testing Integration With WPT.\n\n  * Implementation Report must contain a link to an implementation report, either a hand-written document or just a link to the spec\u2019s folder on wpt.fyi. This is required for W3C Candidate Recommendation Snapshot.\n\n  * Mailing List must contain an email address to be used for mailing lists.\n\n  * Mailing List Archives must contain a link to the list archives.\n\n  * Issue Tracking indicates what and where you track issues, and will result in an \"Issue Tracking\" entry in your spec header. It must contain a comma-separated list of locations, each of which consists of the name of the location followed by the url.\n\nBikeshed will automatically add additional entries to this in some situations:\nif you use any inline issues, you\u2019ll automatically get an \"In Spec\"\nannotation; if you develop from within a git repo with a GH remote, or have\nthe Repository metadata set, you\u2019ll automatically get a \"GitHub\" annotation.\n\nYou can turn off the spec-header entry entirely with Boilerplate: feedback-\nheader off, or just turn off the GitHub entry specifically with Boilerplate:\nrepository-issue-tracking off.\n\n  * Issue Tracker Template specifies a url template used to point remote issues at your issue tracker of choice. It takes a url, with {0} in the place where you want the remote identifier to go.\n\n  * Translation indicates a translation of the document. At minimum it consists of a language code (BCP47 format) and a url. Optionally, it can contain comma-separated name [name-in-spec-language] and native-name [name-in-translation-language], but if Bikeshed knows about that language, these will be filled in for you. (If Bikeshed doesn\u2019t know about a given language, let me know what its name is in English and itself!)\n\n  * Indent tells Bikeshed how many spaces you prefer to use to indent your source code, so it can properly parse your Markdown and data-blocks. It takes a single integer, and defaults to 4 if unspecified. (Of course, using tabs avoids this entirely, as one tab is always one indent.)\n\n  * No Editor lets you omit the Editor metadata without an error. It takes a boolish value. This shouldn\u2019t generally be used; even if your organization doesn\u2019t privilege editors in any way, putting the organization itself in the Editor field meets the intent while still producing useful information for readers of the spec.\n\n  * No Abstract lets you omit the Abstract metadata without an error. It takes a boolish value. This should only be used for very small and trivial documents, where the abstract would just be repeating the title of the more-or-less.\n\n  * Editor Term is a pair of comma-separated terms giving the singular and plural terms to refer to editors with, if you want something other than the default \"Editor(s)\".\n\n  * Default Ref Status takes the values \"current\" or \"snapshot\", and selects which URL you want to default to for bibliography and autolinks entries that have both \"current\" and \"snapshot\" URLs. (You can also specify this per-biblio entry or per-autolink.)\n\n  * Default Biblio Display takes the values \"index\" (default), \"inline\", or \"direct\" and selects whether biblio autolinks default to displaying as their shortname and linking to the bibliography index (\"index\"), displaying as their title and linking straight to the referenced document (\"inline\"), or displaying as their shortname and linking to the referenced document (\"direct\"). (You can also specify this per-biblio entry.)\n\n  * Markup Shorthands lets you specify which categories of markup shorthands you want to use; for example, you can turn off CSS shorthands and reclaim use of single quotes in your spec. You can still link to things with explicit markup even if the shorthand is turned off. Its value is a comma-separated list of markup categories and boolish values, like css no, biblio yes. The currently-recognized categories are:\n\n    * algorithm, covering the special var shorthand (the |foo| shorthand)\n\n    * biblio, covering the dfn autolinks for biblio links and section links (the [[foo]] shorthands)\n\n    * css, covering the dfn autolinks for CSS types\n\n    * dfn, covering the dfn autolinks for \"dfn\" and \"abstract-op\" type definitions\n\n    * http, convering the dfn autolinks for \"http-header\" type definitions\n\n    * idl, covering the dfn autolinks for WebIDL types (the {{foo}} shorthand)\n\n    * markdown, covering the various inline Markdown syntaxes (block-level Markdown is always supported)\n\n    * markup, covering the dfn autolinks for HTML/etc elements and attributes (the <{foo}> shorthand)\n\nEverything but markdown defaults to \"on\".\n\n  * Text Macro lets you specify custom text macros, like [TITLE] or [DATE], letting you fill in different text when building a spec in multiple ways. (This is mostly useful as a command-line option.) Each Text Macro line consists of a macro name, which must be uppercase and alphanumeric, followed by the text it will get replaced with.\n\n  * Work Status indicates the status of the document, in a way unrelated to the publication status of Status. It must be one of (completed, stable, testing, refining, revising, exploring, rewriting, abandoned), with those terms defined in Fantasai\u2019s blog. This just sets the [WORKSTATUS] text macro to the corresponding word, used in some of the boilerplates to pipe the metadata to scraping tools.\n\n  * Repository indicates the repository the spec is being tracked in. You can specify a url followed by a \"short name\" for it, and it populates the [REPOSITORY] and [REPOSITORYURL] text macros accordingly. If you are using GitHub, you can just specify username/repo, and Bikeshed will infer the rest for you. If you\u2019re developing from within a GitHub repo, you don\u2019t need to specify this at all, as Bikeshed will figure it out automatically! (That said, if you\u2019re working in a fork, you should still specify the main repo\u2019s information here, or else the spec will point to your fork instead.)\n\nIf using GitHub, this metadata causes Bikeshed to automatically add a \"GitHub\"\nannotation to the Issue Tracking entry in your spec header. You can turn this\noff with Boilerplate: repository-issue-tracking off.\n\n  * Inline Github Issues tells Bikeshed whether to fetch the text of GitHub issues and inline them into the document, or not. It takes a boolish value, or the values \"full\" or \"title\". If it\u2019s true or \"full\", any remote issues of the form user/repo#issuenumber will have their contents replaced by the contents of the corresponding issue from GitHub; if it\u2019s \"title\", they\u2019ll have their contents replaced by just the title of the remote issue (so a large, well-written initial issue post doesn\u2019t derail a spec). If your Repository is set up to a GitHub repo, remote issues with just an issue number will also be expanded to the corresponding issue from your repository.\n\n  * Opaque Elements and Block Elements are a comma-separated list of custom element names, to help control Bikeshed\u2019s parsing and serialization. By default, custom elements are treated as inline; marking an element as \"opaque\" makes it like pre, so shorthands and Markdown aren\u2019t processed in it, and it\u2019s serialized precisely as entered; marking an element as \"block\" makes it interrupt paragraphs when it starts a line, and causes the pretty-printer to serialize it in a block-like way.\n\n  * Note Class, Issue Class, Assertion Class, and Advisement Class specify the class name given to paragraphs using the note/issue/advisement markup shorthand. They default to \"note\", \"issue\", and \"advisement\".\n\n  * Informative Classes is a comma-separated list of classes that should be considered \"informative\" or \"non-normative\"\u2014elements with these classes must not contain definitions or requirements, and Bikeshed will verify this for you (either automatically, or via the Complain About: accidental-2119 metadata). \"note\", \"example\", \"informative\", and \"non-normative\" all trigger this behavior by default.\n\n  * Translate IDs maps Bikeshed-generated IDs to manually-specified IDs, for cases where you need to manually specify an ID but it\u2019s generated by Bikeshed in a hard-to-override way (like IDL blocks). It takes a comma separated list of Bikeshed IDs and new IDs.\n\n  * Default Highlight specifies the default highlighting language. Every pre, xmp, and code will automatically be highlighted according to the specified language, unless they or an ancestor specifies a different highlight=foo or nohighlight attribute overriding it.\n\n  * Line Numbers is a boolish specifying whether, by default, code blocks (pre and xmp) should get line numbers. Defaults to off.\n\n  * Toggle Diffs is a boolish that specifies whether Bikeshed should include a 'Hide deleted text' button to toggle hiding del elements in your spec header. Defaults to off.\n\n  * Boilerplate toggles the generation of individual boilerplate sections. Its value is a comma-separated list of section name and boolish value, e.g. Boilerplate: issues-index no to disable the list of issues.\n\n  * Local Boilerplate tells Bikeshed which boilerplate include files to look for relative to the specification (as opposed to inside the Bikeshed source). Its value is a comma-separated list of include file basename and boolish value, e.g. Local Boilerplate: footer yes to look for footer.include and footer-[STATUS].include next to the specification. This also works for default includes that aren\u2019t quite boilerplate like defaults.include, computed-metadata.include, and bs-extensions.include.\n\n  * External Infotrees lists which of anchors.bsdata and link-defaults.infotree should be found in files adjacent to the specification instead of in <pre> blocks inside it.\n\n  * Complain About indicates what nits you\u2019d like Bikeshed to complain about, that are normally too noisy to be turned on by default. Its value is a boolish list like Markup Shorthands. Accepted values are:\n\naccidental-2119\n\n    \n\nComplains about usage of RFC 2119 terms (may, must, should, etc) in non-\nnormative sections. If you need to use one of those terms (such as in an\nexample about using them), you can put a class=allow-2119 on the text\u2019s\nimmediate parent element.\n\nbroken-links\n\n    \n\nChecks all the external links in the document, and verifies that they result\nin a 200 response code. Might take a while if your document links out a lot!\n\nmissing-example-ids\n\n    \n\nComplains about examples without a manually-specified ID. (Examples auto-\ngenerate an ID based on their contents otherwise, which might not be stable\nover time.)\n\nmixed-indents\n\n    \n\nChecks that all of your line-starting whitespace is either tabs or spaces, not\nboth. (Complains both about a line using spaces when your document otherwise\nuses spaces, and a line using a mix of tabs and spaces at once.)\n\nThis intentionally skips lines in \"raw\" elements like pre, because mixing tabs\nand spaces is completely reasonable there: using tabs to match the indent of\nthe opening tag, then spaces to align the preformatted text.\n\nThis value is turned on by default. You can turn it off with Complain About:\nmixed-indents no\n\n  * Infer CSS Dfns is a boolish that specifies whether Bikeshed should try to \"infer\" what type a dfn is by looking at the text, using CSS-biased heuristics. (In other words, this\u2019ll only auto-detect certain CSS types.) Defaults to off.\n\n  * Assume Explicit For is a boolish that specifies whether an omitted for attribute on an autolink should imply for=\"/\" (that is, selecting a definition without a for value), or just not express a for requirement at all (that is, selecting a definition without caring about what its for value is). Truthy values set the former, falsey set the latter. Defaults to off.\n\nNote: Turning this on is a better match for some people\u2019s mental models, but\nit requires you to specify more for values on your autolinks even when it\u2019s\nnot necessary to disambiguate things, so it\u2019s off by default.\n\n  * Max ToC Depth specifies the maximum depth you want the ToC to generate to. It can be the value \"none\", meaning generate the ToC normally, or an integer between 1 and 5. It defaults to \"none\".\n\n  * Several keys related to the MDN project:\n\n    * Include MDN Panels is a soft boolish that specifies whether to include MDN panels or not. If it\u2019s turned on, MDN panels will be added automatically in output, positioned to line up with the elements which define the features the panels annotate. Each MDN panel includes a hyperlink to the MDN article for the feature it annotates, as well as browser-support details for the feature (similar to what\u2019s shown in the panels added when Include Can I Use Panels is enabled).\n\nBecause this examines MDN links for the IDs to use, no configuration is\nnecessary beyond turning the feature on; the panels will automatically be\nadded to the definitions or headings with the associated IDs.\n\nIf your spec is not yet in MDN, but you\u2019d like the panels to be added when it\nshows up, you can pass one of the \"maybe\" values of a soft boolish to allow it\nto silently upgrade when possible; otherwise, if directly turned on, it will\nemit a fatal error if it can\u2019t find your spec.\n\n    * Ignore MDN Failure takes one of the IDs that MDN is attempting to target, and prevents Bikeshed from emitting a warning if it can\u2019t find that ID. You can supply this multiple times to ignore several IDs, if needed. This allows you to have avoid having a build warning while waiting for MDN to be updated.\n\n  * Several keys relate to the Can I Use project:\n\n    * Include Can I Use Panels is a boolish that specifies whether to include Can I Use usage-data panels or not. If it\u2019s turned on, elements can take a caniuse=\"featureID\" attribute, where the featureID is the value specified in the url like https://caniuse.com/#feat=FEATUREIDHERE, and the panel will be positioned to line up with that element. (When possible, put this on the corresponding dfn, as the panel doesn\u2019t have any special indication of what feature it\u2019s for; if you don\u2019t, you must ensure the element has an ID of its own.)\n\n    * Can I Use URL automatically informs you when/if Can I Use starts tracking new features from your spec, so you don\u2019t have to check that yourself. It takes a single URL prefix, and can be specified multiple times to provide multiple URLs. These URLs are checked against the Can I Use data, and if there are any Can I Use features whose URL includes one of the specified URLs as a prefix, and the feature isn\u2019t already specified somewhere in your spec, it will log a warning for you.\n\n    * Ignore Can I Use URL Failure takes one of the URLs specified in Can I Use URL, and suppresses the warning that Bikeshed emits if the URL doesn\u2019t show up in the Can I Use database. (This error exists to help catch typos, rather than just letting it silently fail.) This allows you to put your URL in pre-emptively, and get an error only when Can I Use does include your specification (and you thus have features that aren\u2019t being tracked in your spec).\n\n  * Custom Warning Title specifies the title of a \"custom\" warning, requested via Warning: custom metadata.\n\n  * Custom Warning Text specifies the body of a \"custom\" warning. Like Abstract, it accepts multiple lines, and is parsed as Markdown (as if you\u2019d written them directly into the document).\n\n  * Prepare For TR is a boolish that specifies whether or not to apply a bunch of automatic \"fixups\" for common errors that would make a spec fail the W3C\u2019s PubRules check. This is applied automatically when you run the Echidna command to publish your spec, but you can use it manually to check precisely what your spec will look like when published.\n\n  * Use Dfn Panels is a boolish that determines whether \"definition panels\" are generated for every definition; it defaults to true. These \"panels\" show up when you click on a dfn, and show every local reference to the definition.\n\nIt automatically adds some JS and CSS to your page for the panels; you can\nsuppress this with Boilerplate: script-dfn-panel no, style-dfn-panel no and\nsupply your own if desired.\n\n  * Metadata Include and Metadata Order are defined in \u00a7 12.2 Rearranging and Excluding \"Spec Metadata\".\n\n  * Remove Multiple Links is a boolish (defaulting to false) that controls whether Bikeshed automatically suppresses multiple autolinks to the same term in a single paragraph. (That is, if multiple autolinks point to the same URL within a single parent element, all but the first will be reverted to plain spans.)\n\n  * Slim Build Artifact is a boolish (defaulting to false) that specifies whether or not Bikeshed should try and \"slim\" the output, to make it more appropriate as an obvious \"build artifact\", rather than an active usable spec. This turns off various usability features which otherwise bloat your HTML, and which aren\u2019t necessary if the output isn\u2019t intended to be actively used by humans. The exact set of features that are affected by this will evolve over time.\n\n  * Required IDs is a list of IDs that the document must contain. This can be used to ensure that certain links into the document don\u2019t rot over time.\n\n  * Force Crossorigin is a boolish that auto-adds the crossorigin=anonymous attribute to every relevant element (link, script, img, audio, video). You can set a different crossorigin value manually on the element, or skip the element entirely by putting nocrossorigin on it or an ancestor.\n\n  * WPT Path Prefix is a partial URL path that specifies a common path prefix for all of the tests in your wpt elements.\n\n  * WPT Display takes the values \"none\", \"closed\", \"open\", or \"inline\", and specifies whether and how wpt elements display anything in the output document.\n\n  * Tracking Vector Class is the HTML class attribute value used on the link inserted in elements annotated with the tracking-vector attribute.\n\n  * Tracking Vector Image is an image URL that can be used to represent tracking vectors with an external image. Otherwise an inline SVG is used. The image is a child of the aforementioned link.\n\n  * Tracking Vector Image Width is the width of the external image, if any.\n\n  * Tracking Vector Image Height is the height of the external image, if any.\n\n  * Tracking Vector Alt Text is the replacement text for the inline SVG or external image.\n\n  * Tracking Vector Title is the title for the inline SVG or external image.\n\n  * Image Auto Size is a boolish (defaulting to true) that specifies whether Bikeshed should automatically detect the size of images used in the document.\n\nA boolish value is a string representing a boolean value (true or false). The\nstring \"yes\", \"on\", \"true\", and \"y\" all represent true values, while the\nstrings \"no\", \"off\", \"false\", and \"n\" all represent false values.\n\nA soft boolish value is either a boolish value, or one of the strings \"maybe\",\n\"if possible\", or \"if needed\", indicating an intermediate intention between\nsomething being turned on and off.\n\nYou can also provide custom keys with whatever values you want, by prefixing\nthe key with !, like !Issue Tracking: in spec. Any custom keys are collected\ntogether and formatted as entries in the \"spec metadata\" boilerplate dl.\nSpecifying a custom key multiple times will put all the values as dds under a\nsingle dt for the key. A custom key name equal to one of the auto-generated\nkeys will add your custom value as an additional dd under that auto-generated\nkey.\n\nSome of the metadata keys are deprecated; you shouldn\u2019t use them, but just in\ncase you run into them in the wild, they\u2019re documented here for understanding.\nEach one recommends what you should be using instead.\n\n  * Use <i> Autolinks turns on legacy support for using i elements as \"dfn\" autolinks. It takes a boolish value.\n\nInstead of using this, just use the a element to autolink, as usual.\n\n  * Link Defaults lets you specify a default spec for particular autolinks to link to. The value is a comma-separated list of entries, where each entry is a versioned spec shortname, followed by a parenthesized link type, followed by a \"/\"-separated list of link phrases. For example, Link Defaults: html (dfn) allowed to show a popup/in parallel.\n\nInstead of using this, use a <pre class=link-defaults> block, as the error\nmessage suggests when this is necessary.\n\n  * Ignored Vars accepts a comma-separated list of variable names, and makes Bikeshed not emit warnings or errors about them being used only once in the document/algorithm.\n\nInstead of using this, put an ignore attribute on the var in question.\n\n### 4.1. Default Metadata\n\nTo specify default metadata for all specs generated for a given group and/or\nspec status, add an appropriate defaults.include file to the\nbikeshed/boilerplate/ folder. This file must be a JSON file, with the keys and\nvalues all strings matching the above descriptions.\n\nHere\u2019s an example file:\n\n    \n    \n    { \"Mailing List\": \"www-style@w3.org\", \"Mailing List Archives\": \"http://lists.w3.org/Archives/Public/www-style/\" }\n\n### 4.2. Computing Metadata From Other Metadata\n\nIf your Group produces several specs, and they all share some formulaic\nmetadata that could be auto-generated with a bit of string-replacement, you\ncan achieve this automatically with a \"computed-metadata.include\" file in the\nbikeshed/boilerplate/ folder. It has the exact same syntax as the\ndefaults.include file, except that you can use text macros in the file, based\non all the previous metadata (defaults, <pre class=metadata>, and command-line\noverrides).\n\nNote: Don\u2019t forget about custom text macros with the Text Macro metadata, if\nnone of the pre-defined ones give you the substitution strings you need.\n\nNote: By necessity from the definition, these metadata override all previous\nmetadata. Make sure that everything you set in this file is really something\nthat every single spec in your Group should have.\n\nNote: Bikeshed assumes that any text macros you use will be used inside of\nJSON strings, and escapes them accordingly. (In other words, you don\u2019t have to\nworry about JSON-escaping when writing your macros, but you do need to ensure\nthat all macros occur inside of double-quotes in your computed-\nmetadata.include file.)\n\n### 4.3. Overriding Metadata From The Command Line\n\nIf you want to generate multiple versions of a spec from the same source (such\nas a primary spec, plus some snapshots), you can override the metadata from\nthe command line to generate the alternate forms.\n\nFor any metadata key defined above, just pass it as a --md-foo=bar command-\nline argument. For example, to override the Status metadata, run bikeshed spec\n--md-status=ED.\n\n(If the metadata name has spaces in it, use dashes to separate the words\ninstead.)\n\n#### 4.3.1. Known Issues\n\n  1. You can\u2019t override the Use <i> Autolinks status, because you can\u2019t input the <> characters. I don\u2019t intend to fix this, as you shouldn\u2019t be specifying this in the first place.\n\n  2. You can\u2019t supply custom metadata keys (ones with a ! prefix). If you want to do this, let me know, and I\u2019ll work on it.\n\n  3. Passing values with spaces in them is tricky. This is an issue with the argparse library. The only way around it is to specify both of the positional arguments (the input and output filenames), then put the offending argument after them.\n\n### 4.4. Ordering Between Metadata Sources\n\nWhen you specify a particular metadata key multiple times in your document,\nthe exact behavior depends on which metadata key it is, but all of the\nbehaviors depend on the order things appear in. For example, if you specify\nTitle twice, the second one is used.\n\nThis also happens when metadata keys are duplicated between multiple sources,\nlike from your defaults.include file and your <pre class=metadata> block. It\u2019s\nimportant, then, to know what order the different sources are resolved in, so\nyou know which key \"wins\", or in what order a list of things is constructed\nin.\n\nThe ordering is, from first to last:\n\n  1. \"baseline\" metadata (the default values that Bikeshed uses)\n\n  2. defaults.include metadata\n\n  3. computed-metadata.include metadata\n\n  4. <pre class=metadata> blocks in your document\n\n  5. command-line metadata\n\nIn general, this follows the ordering of least-specific to most-specific.\n\n### 4.5. HTML \"Metadata\" (lang=\"\", <meta>, etc)\n\nGenerally, any HTML metadata (attributes on <html>, <meta> or <link> elements)\nshould be handled in your header.include boilerplate file. However, sometimes\nyou do need to add additional metadata to a specific document.\n\nFor attributes that belong on <html>, such as dir=\"\" or lang=\"\", simply add an\n<html> element with those attributes into your source file. A quirk of the\nHTML parser is that multiple <html> elements, wherever they appear, coalesce\ntheir attributes onto the one \"true\" <html> element that wraps the entire\ndocument, rather than actually showing up in the DOM. Bikeshed\u2019s serializer\nwill then output the one true <html> element with all the coalesced\nattributes.\n\nSimilarly, if you need to add <meta>, <link>, or <style> elements to your\ndocument, simply put them in your source. Bikeshed will automatically transfer\nthem to the <head> of the output document. (<script> elements are left where\nthey are, as their location can matter.)\n\n## 5\\. Markup Shortcuts\n\nBikeshed\u2019s source format is roughly HTML, but it allows you to omit or shorten\nseveral verbose/annoying parts of the language, reducing the amount of format\nnoise in the spec source, making it easier to read and write.\n\n### 5.1. Markdown\n\nBikeshed uses a Markdown variant called Bikeshed-flavored Markdown (BSMD). By\ndefault, it recognizes all of the \"block-level\" Markdown constructs defined by\nCommonMark, except for indented code blocks:\n\n  * paragraphs\n\n  * lists\n\n  * blockquotes\n\n  * headings (both underlined and #-surrounded)\n\n  * horizontal rules\n\n  * fenced code blocks (using ~ or `)\n\n  * HTML blocks\n\nBecause it doesn\u2019t have to handle indented code blocks, BSMD\u2019s HTML handling\nis generally superior to other Markdown implementations. You can freely switch\nback and forth between Markdown and HTML as needed, and indent properly. (In\nfact, you should properly indent everything; if you don\u2019t, you can sometimes\nget confusing errors!)\n\nIf the Markup Shorthands: markdown yes metadata is specified, it also\nrecognizes several of the Markdown \"inline elements\":\n\n  * emphasis (*emphasis*) and strong (**strong**) elements\n\n  * inline code (`code`) elements, which can include literal backticks by delimiting the content with multiple-backtick sequences: `` ` `` produces `. (Note that spaces at the beginning and end of the code element are stripped.)\n\n  * inline links, with optional title\n\nIt does not recognize \"autolinks\" (surrounded by <> characters), images, or\n\"hard line breaks\"; use HTML for these. It also does not recognize \"link\nreferences\" (defining the link location elsewhere, and referring to it by\nreference instead).\n\nIn addition to standard (CommonMark) Markdown, Bikeshed also recognizes\ndefinition lists, with the following format:\n\n    \n    \n    Here's the dl syntax: : key :: val : key 1 : key 2 :: more vals\n\nFor all three list formats, on the rare occasions you need to add a class or\nattribute to the list, you can wrap it in the appropriate list container,\nlike:\n\n    \n    \n    <ol class=foo> 1. first 2. second </ol>\n\nBikeshed will use the container you provided, rather than generating a fresh\none like it does by default.\n\nBikeshed also supports adding IDs to headings, via the Markdown Extra syntax:\n\n    \n    \n    Header 1 {#header1} ======== ### Header 2 ### {#header2}\n\nMore of Markdown will be supported in the future, as I get closer to adhering\nto the CommonMark specification.\n\n### 5.2. Notes, Issues, Examples, Advisements\n\nThe Markdown processor specially recognizes paragraphs starting with \"Issue:\n\", \"Advisement: \", \"Assertion: \", \"Note: \", or \"Note, \", and will add a\nmatching class to the paragraph automatically. These classes default to\n.issue, .advisement, .assertion, and .note, but can be customized with the\nmetadatas Issue Class, Advisement Class, Assertion Class, and Note Class.\n(However, the default classes receive styling from the default stylesheet, so\nmake sure you provide your own styling if you change them.)\n\nThe default styling of these blocks includes a generated-content \"header\"\ncontaining the word \"NOTE:\", etc. Elements with the .example class will also\nbe given a generated-content \"header\" in the format EXAMPLE n with an auto-\nincrementing number, and have self-links created to allow linking directly to\nthe example.\n\nIf you\u2019d like to provide your own custom header, write out the container\nelement yourself (rather than using the Markdown shorthand, just create any\nelement with the appropriate class), and add a heading=\"YOUR TEXT HERE\"\nattribute to the container. It will automatically have \"NOTE: \"/etc prepended\nto it. (This is used by \u00a7 5.10 Remote Issues to put the GitHub issue title on\nthe issue containers.)\n\nAlternately, if you want full control over the contents of the heading, write\nout the container element and create a <div class=marker> element containing\nthe text you want as its first child. (This is what the heading=\"\" attribute\ndoes; it just automatically prepends \"Note:\"/etc to the text to keep it\nvisually in line with other notes/etc by default.)\n\n### 5.3. Typography Fixes\n\nBikeshed will automatically handle a few typographic niceties for you, ones\nthat it can reliably detect:\n\n  * Possessive apostrophes, and most contraction apostrophes, are automatically turned into curly right single quotes (\u2019).\n\n  * Ending a line with -- will turn it into an em dash (\u2014) and pull the following line upwards so there\u2019s no space between the surrounding words and the dash.\n\n### 5.4. Autolink Shortcuts\n\nThere are several autolink shortcuts that make autolinks much shorter to\nwrite, such as 'foo' to link to a CSS property or descriptor, or {{foo}} to\nlink to an IDL construct. These are documented in \u00a7 7 Autolinking.\n\nOther types of linking shorthand also exist, such as [[#foo]] to link to\nsections of a spec (documented in \u00a7 7.9 Section Links), or [[FOO]] to link to\ngenerate and link to bibliography entries (documented in \u00a7 8 Bibliography).\n\n#### 5.4.1. Autolink Shortcuts That Work Anywhere: the l element\n\nThe autolink shorthands don\u2019t work in elements like pre, because it\u2019s too easy\nfor code constructs to look like autolinks. You can still manually write out\nyour autolink as an a element, but that can be much more verbose than the\nterse syntax that the shorthands provide. (For example, {{Foo/bar()}} vs <a\nmethod for=Foo>bar()</a>.)\n\nYou can avoid this by using the l element, and putting an autolink shorthand\ninside of it, like <l>{{Foo/bar()}}</l>. This will autolink exactly the same\nas normal, but works anywhere in your document. Extra bonus: it will recognize\nall the autolinking syntaxes, even if you have some turned off with the Markup\nShorthands metadata.\n\nNote: Currently the CSS value autolinking syntax (''foo'') does not work.\n\nThe l element itself is removed from the document and replaced by the\nautolink, but if you specify any attributes on the l, they\u2019ll be transferred\nto the generated a. In particular, this is useful for specifying linking\nattributes that can\u2019t be specified by the shorthand, like the spec to search\nfor, that would otherwise require converting all the way to a manual a\nautolink.\n\n### 5.5. var and Algorithms\n\nThe var element (or its shorthand equivalent, |foo|) is often used to mark up\n\"arguments\" to a prose algorithm. Bikeshed explicitly recognizes this, and has\nseveral features related to this.\n\nAlgorithms can be explicitly indicated in your markup by putting the algorithm\nattribute on a container element or a heading. All vars within an algorithm\nare \"scoped\" to that algorithm.\n\nNote: Algorithms need to have a name. By default, it\u2019ll infer one if there\u2019s\nonly a single dfn inside the algorithm container, but if there\u2019s zero or\nmultiple dfns, or you just want to give a clearer name, you can supply it as\nthe value of the algorithm attribute, like algorithm=\"to foo a bar\".\n\nGenerally, vars are used at least twice in an algorithm: once to define them,\nand at least once to actually use them for something. If you use a var only\nonce, there\u2019s a good chance it\u2019s actually a typo. Bikeshed will emit a warning\nif it finds any vars used only once in an algorithm. If this singular usage is\ncorrect, you can instruct Bikeshed to ignore the error by adding an ignore\nattribute to the var itself. (There\u2019s no way to do this with the |foo| syntax;\nyou have to convert it back to an actual var element.)\n\n### 5.6. Code Blocks (pre, etc)\n\nBikeshed has several nice features related to \"code blocks\"\u2014pre, xmp, and\nsometimes code.\n\n#### 5.6.1. pre whitespace stripping\n\nUsing a pre element in HTML is unsatisfying, because it forces you to break\nyour indentation strategy, pulling the content back to the margin edge (or\nelse employing silly hacks with comments and explicit newlines). The\npreprocessor fixes this.\n\nWhenever a pre element is encountered, the processor records how much\nwhitespace precedes the first line, and then strips that much whitespace from\nit and all following lines.\n\nAdditionally, if the closing </pre> is on its own line, the processor\nautomatically pulls it up onto the end of the previous line, so there\u2019s no\nfinal blank line in the content.\n\nIn other words, you can now write:\n\n    \n    \n    <div class='example'> <p> An example: <pre> &lt;ul> &lt;li>one &lt;li>two &lt;/ul> </pre> </div>\n\nThe preprocessor will automatically convert it into:\n\n    \n    \n    <div class='example'> <p> An example: <pre> &lt;ul> &lt;li>one &lt;li>two &lt;/ul></pre> </div>\n\n#### 5.6.2. xmp To Avoid Escaping Markup\n\nThe xmp element is an old HTML element that\u2019s now deprecated (but still\nrequired to be supported). It was intended for markup examples (thus the\nname), and has magical parsing properties, where its contents (everything\nuntil the </xmp> closing tag) are treated as literal text, and not interpreted\nas HTML. In particular, this means that within an xmp you don\u2019t need to escape\nyour < or & characters.\n\nBikeshed supports using xmp anywhere a pre can be used; it converts it into a\nproperly-escaped pre in the output to avoid validation errors. For example,\nthe two markup examples in the previous section are using xmp in this\ndocument\u2019s source.\n\nUse of xmp is particularly useful for IDL blocks, as IDL uses <foo> syntax for\nhigher-order types (like sequence<DOMString>). If you\u2019re using a pre and don\u2019t\nremember to escape this, you\u2019ll end up with confusingly-broken IDL, as the\n<DOMString> part is interpreted as an opening HTML tag. If you use xmp\ninstead, there\u2019s no need to remember to escape anything; you can write or copy\nraw WebIDL into the block and it\u2019ll be interpreted correctly.\n\n#### 5.6.3. Syntax Highlighting\n\nYou can syntax-highlight code blocks. Just add either a highlight=\"foo\"\nattribute or a lang-foo class to the element, or set a Default Highlight\nmetadata, and the element will automatically be syntax-highlighted according\nto the \"foo\" language rules. (Setting no-highlight closer will turn if off for\nan element; it looks for the closest ancestor with one of the attributes.)\n\nThe syntax highlighter uses Pygments, which supports a large set of languages.\nSee http://pygments.org/docs/lexers/ for the full list. (Use one of the \"short\nnames\" of the language for the \"foo\" value.)\n\nBikeshed comes with a default color scheme based loosely on that of Prism.js.\nIf you would like to use your own color scheme, turn off the automatic styles\nwith a Boilerplate: style-syntax-highlighting off metadata, then supply your\nown.\n\nNote: If you use highlight=html, script and style elements are automatically\nhighlighted with JS and CSS rules. Normative WebIDL blocks (class=idl) are\nautomatically highlighted, but you can use highlight=idl to highlight non-\nnormative ones.\n\nNote: If your code block already has markup in it, this feature will safely\n\"merge\" the highlighting into your existing markup.\n\n#### 5.6.4. Line Numbers\n\nYou can automatically generate line numbers for code blocks by adding a line-\nnumbers attribute to the element or an ancestor, or setting the Line Numbers\nmetadata to affect all elements. (Setting no-line-numbers closer will turn it\noff for an element; it looks for the closest ancestor with one of the\nattributes). The numbers are added to each line via CSS generated content, so\nthey\u2019ll always stay in sync and won\u2019t get copied when you highlight a chunk of\ntext.\n\n    \n    \n    Haikus are easy:five-seven-five syllables,spread over three lines.\n\nThe lines default to starting at 1; to change that, set the line-start\nattribute on the element to your desired starting value.\n\nIf you would like to produce your own line-numbering CSS, turn off the\nautomatic styles with a Boilerplate: style-line-numbers off metadata, then\nsupply your own.\n\nNote: Similar to syntax highlighting, this feature will safely \"merge\" the\nline-numbers markup into your existing markup. The only complication is if the\noriginal markup has elements that span more than one line; in this case, the\n\"line\" element will expand to cover all the lines spanned by your original\nmarkup. It will still put a line marker on the first and last line of this\nspan, so the effect isn\u2019t too noticeable if the original markup only spans two\nlines.\n\n#### 5.6.5. Highlighting Particular Lines\n\nIf you want to bring attention to particular lines in your code snippet, but\nneed to show more surrounding code for context, you can highlight the\nimportant ones with a line-highlight attribute.\n\n    \n    \n    Another haiku.This is the important line.Ignore what\u2019s down here.\n\nThe syntax of line-highlight is a comma-separated sequence of either integers\n(like 5), or integer ranges (like 2-4). For example, line-highlight=\"2-4, 6\"\nwill highlight lines 2, 3, 4, and 6.\n\nLike line-numbers (above), this defaults to considering the first line of the\nsnippet as line 1, but the numbering can be changed with the line-start\nattribute.\n\nIf you would like to produce your own line-highlighting CSS, turn off the\nautomatic styles with a Boilerplate: style-line-highlighting off metadata,\nthen supply your own.\n\nNote: This feature has the same restriction on line-spanning elements as the\nline-numbers feature does. In particular, if any line being wrapped in a\nmulti-line \"line\" element is highlighted, the entire \"line\" element gets\nhighlighted.\n\n### 5.7. Automatic ID Generation\n\nIf any heading, issue, or dfn element doesn\u2019t have an id attribute, one will\nbe automatically generated by the processor, to ensure it\u2019s usable as a link\ntarget.\n\nHeading IDs are generated directly from the text contents of the element,\ncleaning up the characters to be a valid id. This often isn\u2019t the best for\ncomplex heading texts, so it\u2019s not recommended to rely on this. (Bikeshed will\nwarn you that it\u2019s generating IDs, and suggest you supply one manually.)\n\nIf a heading changed significantly, so that you want to change the ID, but you\nwant links to the old heading ID to still work, put the old ID in an oldids=\"\"\nattribute on the heading element. If there are multiple, comma-separate them.\n\nIssues (elements with class=\"issue\") will generate IDs of the form\n\"issue-###\", where \"###\" is substring of a hash of the issue\u2019s contents. This\nmeans that an issue\u2019s ID will be stable against changes elsewhere in the\ndocument, including adding or removing issues above it in the source, but will\nchange if you change the contents of the issue.\n\nDefinition IDs are also generated directly from the text contents of the\nelement. Most definitions additionally get a prefix, such as \"propdef-\", to\navoid clashes with other definitions.\n\nIf an automatically-generated ID would collide with any other ID, it\u2019s\nautomatically de-duped by appending a number to the end. This isn\u2019t very\npretty, so if you want to avoid it, supply an ID yourself.\n\n### 5.8. Assertions\n\nBikeshed provides the ability to mark \"assertions\" that tests can refer to.\nThe assertion can either be added with the fake element <assert> or by adding\nan assert attribute to a div. (e.g. <div assert>).\n\nFor the <assert> tag, it will be replaced by a <span> tag in the generated\nsource. The <div> tag will pass through but the assert attribute is removed.\n\nIn both cases a unique ID is generated from the tags contents of the form\n\"assert-###\", where \"###\" is a substring of a hash of the assertions contents.\nThis ensures that you have a unique ID that won\u2019t change arbitrarily, but will\nchange when the contents of the assertion change, making it easier to tell\nwhen a test might no longer be testing the assertion it points to (because\nit\u2019s no longer pointing to a valid target at all!).\n\n### 5.9. Automatic Self-Link Generation\n\nGiving IDs to important things in your document, like headings and\ndefinitions, is great, but of little use if people don\u2019t know they can link to\nthem. Bikeshed will automatically generate a \"self-link\" in the margin next to\ncertain linkable elements which just links to the element, so people can click\non the link and then just copy the URL from their address bar to get a link\nstraight to what they care about.\n\nSelf-links are currently auto-generated for headings, definitions, and issues,\nand notes, examples, <li>s, and <dt>s that have been given IDs.\n\n### 5.10. Remote Issues\n\nAs defined earlier, you can start a paragraph with Issue: to cause Bikeshed to\nautomatically format it as an inline issue paragraph. You can also refer to\nremote issues, which are tracked in some other issue tracker. To do so,\ninstead start your paragraph with Issue(###): , where the ### is some\nidentifying value for the issue.\n\nIf the identifying value is of the form user/repo#number, Bikeshed assumes you\nare referring to GitHub repository, and points the issue at the corresponding\nissue.\n\nIf you have Repository set up to point to a GitHub repository (or it was auto-\ndetected as such, because you\u2019re working on the spec from within one), then a\nnumeric identifying value is assumed to be an issue number for your\nrepository.\n\nOtherwise, you need to tell Bikeshed how to convert the identifying value into\na remote issue link. Specify a format string in the Issue Tracker Template\nmetadata, with a {0} in the place where the identifying value should go.\nBikeshed will then point the issue at the generated url.\n\n### 5.11. Including Other Files\n\nSometimes a spec is too large to easily work with in one file. Sometimes\nthere\u2019s lots of repetitive markup that only changes in a few standard ways.\nFor whatever reason, Bikeshed has the ability to include additional files\ndirectly into your spec with a <pre class=include> block:\n\n    \n    \n    <pre class=include> path: relative/to/spec/location </pre>\n\nThe included document is parsed just like if it were written in locally,\nexcept that metadata blocks aren\u2019t processed. (For various reasons, they have\nto be parsed before any other processing occurs). This means that the include\nfile can use markdown, data blocks of various kinds (<pre class=anchors>, <pre\nclass=railroad>, etc), and both provide definitions for the outer document and\nrefer to ones defined by the outer document.\n\nNote: All include paths are processed relative to the outermost spec\ndocument\u2019s location. If you\u2019re including a document in another folder, and it\nincludes a document itself, take care that your paths are correctly relative\nto the outermost spec, not to the included file.\n\nIf you\u2019re including a block of repetitive markup multiple times, and want to\nvary how it\u2019s displayed, you can pass additional \"local\" text macros in the\nblock, which are valid only inside the included file:\n\n    \n    \n    <pre class=include> path: template.md macros: foo: bar baz: qux qux qux </pre>\n\nWith the above code, you can use [FOO] and [BAZ] macros inside the include\nfile, and they\u2019ll be substituted with \"bar\" and \"qux qux qux\", respectively.\n(Remember that you can mark text macros as optional by appending a ?, like\n[FOO?], in which case they\u2019ll be replaced with the empty string if Bikeshed\ncan\u2019t find a definition.)\n\n#### 5.11.1. Including Code Files\n\nWhile it\u2019s easy to include short code snippets in your document inline with an\nordinary <pre> block (particularly with a highlight attribute so it\u2019s\nformatted nicely), you sometimes want to instead include snippets of a larger\nexternal file. (For example, so you can keep that file up-to-date easily,\nwithout having to go in and fiddle with all the chunks you\u2019ve inlined into\nyour document.)\n\nNormal includes don\u2019t work for this, as they include the whole file and assume\nthat it\u2019s more Bikeshed code; instead, use <pre class=include-code> to include\npart (or all) of a file and have it rendered as highlightable source code.\n\n    \n    \n    <pre class=include-code> path: bigFile.cpp highlight: c++ show: 100-120 </pre>\n\nThis snippet will create a nicely highlighted code block containing lines\n100-120 of the file bigFile.cpp.\n\nYou can additionally include any of the more advanced highlighting options (\u00a7\n5.6.4 Line Numbers, \u00a7 5.6.5 Highlighting Particular Lines), using the same\nnames and value syntax as you would use when specifying them as attributes:\n\n    \n    \n    <pre class=include-code> path: someFile.cpp highlight: c++ line-numbers: line-highlight: 2-5, 10, 12 </pre>\n\nIf any of your options cause line-numbers to show up (using line-numbers or\nline-highlight), and you\u2019re showing a snippet of the larger file with show,\nthe numbering will default to using the numbering of the original file (so if\nyou said show: 6-10, the first visible line will be numbered \"6\"). You can\noverride this with line-start, as usual.\n\nNote that, unlike <pre class=include>, there is no macros option.\n\n#### 5.11.2. Including Non-Bikeshed HTML/SVG/etc\n\n<pre class=include> lets you insert chunks of Bikeshed source code into a\nlarger outer document. But what if you want to include some markup that isn\u2019t\nformatted as Bikeshed code? For example, SVG outputted by a design tool might\nnot conform to Bikeshed\u2019s syntax\u2014it might not indent properly, or it might use\nmarkup that will get messed up if parsed as Markdown, etc.\n\nTo avoid this, you can use <pre class=include-raw>. Just like <pre\nclass=include>, it takes a single path line:\n\n    \n    \n    <pre class=include-raw> path: myDiagram.svg </pre>\n\n...and replaces itself with that markup directly, without doing any additional\nBikeshed syntax processing.\n\nNote: Unlike <pre class=include>, there are no local macros, as macro\nsubstitution is part of Bikeshed\u2019s syntax processing, which is skipped here.\n\nNote: Most parts of later Bikeshed processing do work, such as linking to\ndefinitions, etc., because inclusions are processed very early in Bikeshed\u2019s\ntransformation pipeline. However, if you\u2019re writing something that\u2019s intended\nto use Bikeshed\u2019s features, you should really write Bikeshed source code and\nuse <pre class=include>, in case some things move to being part of syntax\nprocessing. For example, inline autolinking shorthands currently aren\u2019t, and\nso will work in include-raw substitutions, but that will change in the future.\n\n### 5.12. Tracking Vectors\n\nA tracking vector can be annotated with the tracking-vector attribute on the\nenclosing element. This will result in a link containing an image being\nprepended to the element.\n\n    \n    \n    <p tracking-vector>This is an example of an element annotated with that attribute.\n\nThis is an example of an element annotated with that attribute.\n\nThe various \"Tracking Vector *\" metadata keys can be used to customize the\nappearance of this annotation, though it\u2019s encouraged to leave those in their\ndefault state for a consistent appearance across standards.\n\n### 5.13. Image Size Detection\n\nIf an img element has a neither a width nor a height attribute, Bikeshed will\nautomatically detect these dimensions from the image file and insert both\nattributes into the resulting markup.\n\nGiven this markup:\n\n    \n    \n    <img alt=\"...\" src=\"img.jpg\">\n\nif the img.jpg file is 300 pixels wide and 100 pixels tall, bikeshed will\ngenerate the following output:\n\n    \n    \n    <img alt=\"...\" src=\"img.jpg\" width=\"300\" height=\"100\">\n\nBikeshed will also detect and insert the dimensions of the image if the\nelement has no src attribute but does have a srcset attribute. In that case,\nit accepts a narrow subset of the srcset syntax: a single image source URL\nfollowed by a single pixel density descriptor, limited to integers. Since the\nsrc attribute is mandatory in HTML, bikeshed will also add it to the output.\n\nIn order to specify high resolution images, use the following syntax:\n\n    \n    \n    <img alt=\"...\" srcset=\"highDPI.jpg 2x\">\n\nIf the highDPI.jpg file is 600 pixels wide and 200 pixels tall, bikeshed will\ngenerate the following output:\n\n    \n    \n    <img alt=\"...\" src=\"highDPI.jpg\" srcset=\"highDPI.jpg 2x\" width=\"300\" height=\"100\">\n\nNote: Bikeshed will only successfully detect the size of local images, and\nwill not attempt to fetch resources over the network, as there is no way for\nBikeshed to know whether the size it would get is stable. Using local images\nis generally preferred, but if you need to use a remote one, consider setting\nthe width and height manually.\n\nIf either of the width and height attributes is already set (or both are), or\nif both the src and srcset attributes are set, Bikeshed will assume you know\nwhat you\u2019re doing, skip detection, and leave the element unchanged.\n\nTo opt out of this automated size detection for a single image, set the\nboolean no-autosize attribute on it. To opt out for the entire document,\nspecify the Image Auto Size metadata with the value false.\n\n## 6\\. Definitions\n\nDefining a term is as easy as wrapping a dfn element around it. Most of the\ntime, this is all you\u2019ll need to do - the definition automatically gains an\nid, and is usually automatically exposed as an autolink target for local and\ncross-spec autolinks.\n\nAutolinking is a special mechanism in the processor to let you link terms to\ntheir definitions without having to explicitly provide a url. Instead, the\ntext of the link is matched against the text of the definitions, and if a\nmatch is found, the link\u2019s href is set up to connect the two.\n\n### 6.1. Conjugating/Pluralizing/etc the Linking Text\n\nBikeshed can automatically handle a wide range of English conjugations and\npluralizations. For example, if you define the term \"snap\", you can link to it\nwith \"snapping\" or \"snapped\" without having to manually add those variations\nto your dfn manually.\n\nAs such, it\u2019s best to define your term in the \"base\" form, singular and\npresent tense. Use lt='...' if necessary to set up the correct \"base\" linking\ntext, if your visible text needs to be in a conjugated form due to the\nsurrounding text.\n\nThese variations only work for the first or the last word in a phrase, so it\ncan conjugate \"activate the widget\" into \"activating the widget\", \"activate\nthe widgets\", or \"activating the widgets\". If you have a longer phrase where\nit\u2019s a middle word that conjugates differently, you do still have to manually\nhandle that, either by defining multiple linking texts on the dfn, or by\nmanually specifying the linking text on the a.\n\nIn addition to English variations, these \"conjugations\" handle some IDL\nvariations as well. For example, IDL terms that match an IDL keyword must be\ndefined in IDL with a leading underscore, to avoid grammatical ambiguities,\nbut actually define the term without the underscore. You can link to the term\nwith either syntax.\n\nSimilarly, because methods and attributes technically live in the same\nnamespace, it\u2019s safe to link to a method without the parens after its name.\n(This is useful when linking to a method in the middle of prose, when you\nmight be providing sample arguments that would interfere with linking, or\nlinking to things in the arguments, which would interact badly with the\narguments themselves being part of the method\u2019s link text.)\n\n### 6.2. Changing the Linking Text\n\nSometimes, the text of the definition isn\u2019t exactly what you want it to be\nlinked by, or you may want it to be linkable with more than one phrase. For\nexample, an algorithm named \"Check if three characters would start an\nidentifier\" may also want to be linkable from the phrase \"starts with an\nidentifier\". To alter the linking text, simply add an lt attribute (for\n\"Linking Text\") to the definition; the linking text is used instead of the\ntext content. You can separate multiple linking phrases by separating them\nwith the pipe \"|\" character.\n\n### 6.3. Defining Extra-Short \"Local\" Linking Texts\n\nSometimes you want to use an extra-short version of a term for within a spec,\nbut don\u2019t want to confuse things by exporting it globally. To achieve this,\nadd a local-lt attribute with the terms you want to be only usable within the\nspec; the syntax is identical to that of the lt attribute, described above.\n\nUsing local linking text does not disturb the normal linking-text process;\nthat still takes from either the element text or the lt attribute, as normal.\n\n### 6.4. Definition Types\n\nAll definitions have a definition type. This allows for \"namespacing\" of the\nlinking text, so you can define, for example, both a property and a term with\nthe same linking text, such as \"direction\" or \"color\".\n\nThere are several types for CSS values:\n\n  * property\n\n  * descriptor (the things inside at-rules like @font-face)\n\n  * value (any value that goes inside of a property, at-rule, etc.)\n\n  * type (an abstract type for CSS grammars, like <length> or <image>)\n\n  * at-rule\n\n  * function (like counter() or linear-gradient())\n\n  * selector\n\nThere are additional types for WebIDL definitions:\n\n  * interface\n\n  * constructor\n\n  * method\n\n  * argument\n\n  * attribute\n\n  * callback\n\n  * dictionary\n\n  * dict-member\n\n  * enum\n\n  * enum-value\n\n  * exception (for new DOMException names)\n\n  * const\n\n  * typedef\n\n  * stringifier\n\n  * serializer\n\n  * iterator\n\n  * maplike\n\n  * setlike\n\n  * extended-attribute (things like [EnforceRange])\n\nAnd for HTML/SVG/etc element definitions:\n\n  * element\n\n  * element-state (a spec concept, like input being in the \"password state\")\n\n  * element-attr\n\n  * attr-value\n\nA special type for URL schemes, like \"http\" or \"blob\":\n\n  * scheme\n\nA special type for HTTP headers:\n\n  * http-header\n\nA special type just for definitions of operators used in grammar definitions,\nlike || and similar:\n\n  * grammar\n\nA special type for browser permissions:\n\n  * permission\n\nAnd finally, some categories for \"English\" terms:\n\n  * abstract-op (for \"English-language algorithms\")\n\n  * dfn (for general terms and phrases, and a catch-all for anything else)\n\nThe processor will attempt to infer your definition type from the context and\ntext content of the definition:\n\n  * Is it inside a propdef, descdef, or elementdef block? Then it\u2019s a property, descriptor, or element.\n\n  * Is it inside an idl block (<pre class='idl'>)? Then it\u2019s an one of the IDL types, inferred by parsing the IDL.\n\n  * Does it start with an @? Then it\u2019s an at-rule.\n\n  * Is it surrounded by <>? Then it\u2019s a type.\n\n  * Does it start with a :? Then it\u2019s a selector.\n\n  * Does it end with ()? Then it\u2019s a function.\n\n  * Is it surrounded by double single quotes in the source, like ''foo''? Then it\u2019s a value.\n\n  * Otherwise, it\u2019s a dfn.\n\n(This auto-detection is obviously skewed towards CSS types; Bikeshed started\nas a CSS spec preprocessor, and the CSS types are easier to auto-detect\nsyntactically than anything else.)\n\nNote that this auto-detection is a last-resort operation. There are methods\n(defined below) to explicitly indicate what type a definition is, and those\nwin over the auto-detection.\n\nIf your value doesn\u2019t fit one of these categories, you\u2019ll have to tag it\nmanually. Just add the type as a boolean attribute to the definition, like\n\n    \n    \n    attribute DOMString <dfn attribute for=Foo>name</dfn>;\n\nAlternately, if you\u2019ve got several definitions of the same type that share\nsome container element (such as a <pre> or <dl>), just add a dfn-type=\"type-\ngoes-here\" attribute to the container. Anything which isn\u2019t explicitly tagged\notherwise will take that type by default.\n\n(There are more methods to determine definition type, but they\u2019re only meant\nfor legacy content, and so are not documented here.)\n\n### 6.5. Namespacing a Definition\n\nSome types of definitions are defined relative to a higher construct, such as\nvalues for a particular property, or attributes of a particular IDL interface.\nThis is useful, as it means these names don\u2019t have to be globally unique, but\nthat means your autolinks may have a hard time telling which name you intend\nto link to.\n\nTo fix this, the processor enforces that some types of definitions must define\nwhat they are for. This is specified with a for attribute on the definition.\n\nSpecifically:\n\n  * \"attribute\", \"constructor\", \"method\", \"const\", \"event\", \"serializer\", \"stringifier\", and \"iterator\" definitions must define what interface they\u2019re relative to.\n\n  * \"argument\" definitions must define what method or constructor they\u2019re relative to.\n\n  * \"dict-member\" definitions must define what dictionary they\u2019re relative to.\n\n  * \"enum-value\" definitions must define what enum they\u2019re relative to.\n\n  * \"element-attr\" and \"element-state\" definitions must define what element they\u2019re relative to.\n\n  * \"attr-value\" definitions must define what element and attribute they\u2019re relative to.\n\n  * \"descriptor\" definitions must define what at-rule they\u2019re relative to. (This happens automatically if you add a \"For\" line to the descdef table.)\n\n  * \"value\" definitions must define what property, descriptor, at-rule, type, selector, or function they\u2019re relative to. If a value definition is relative to a descriptor, the value must be of the form \"@foo/bar\", where \"@foo\" is the at-rule the \"bar\" descriptor is relative to.\n\nJust like with the definition type, you can instead declare what several\ndefinitions are for by putting an attribute on a container. In this case, just\nadd dfn-for to the container. This is especially useful for\nproperty/descriptor values, as they\u2019re usually defined in a dl, or IDL\ndefinitions, as you can just put a dfn-for on the <pre class='idl'>.\n\nIf a single definition is \"for\" multiple things, you can provide a comma-\nseparated list of values in the attribute.\n\n### 6.6. Exporting Definitions\n\nMost definitions are automatically \"exported\", which means they\u2019re made\navailable for other specs to autolink to. The only exception is \"dfn\" type\ndefinitions, which aren\u2019t exported by default.\n\nTo force a link to be exported, add an export boolean attribute to it. To\nforce a link not to be exported, add a noexport boolean attribute instead.\nLike the other attributes, you can instead add this to a container to have it\nbe a default for the definitions inside.\n\n### 6.7. Link Attributes On Ancestors\n\nAll of the dfn attributes can be specified on an ancestor of the dfn instead,\nif you have a group of dfns that all share a particular attribute.\n\nThey can be spelled out fully (like data-dfn-type), or without the data-\nprefix, like dfn-type or dfn-for. As there\u2019s no overlap with a similar data-\nlink-* attribute, dfn-force can omit dfn- as well, being spelled as merely\nforce and spec.\n\nA link will take the \"closest\" version of each attribute it can find, so\nspecifying an attribute directly on the link will override anything coming\nfrom an ancestor.\n\n### 6.8. Providing Custom Definitions\n\nIf you want to link to dfns in specs that aren\u2019t yet part of the autolinking\ndatabase, you can provide your own definition data that Bikeshed can use.\nWithin a <pre class='anchors'> element, define the anchors you need in\nInfoTree format, with the following keys:\n\n  * text - the linking text for the definition. (Exactly 1 required.)\n\n  * type - the definition\u2019s type (dfn, interface, etc) (Exactly 1 required.)\n\n  * urlPrefix and/or url - define the anchor\u2019s url, as described below. (At least one of urlPrefix or url must be specified. 0+ urlPrefix entries allowed, 0 or 1 url entries allowed.)\n\n  * for - what the definition is for. (Any number allowed, including 0.)\n\n  * spec - Which spec the definition comes from. (optional)\n\nTo generate the url for the anchor, first all of the urlPrefix entries are\nconcatenated. If a url is provided, it\u2019s appended to the prefixes; otherwise,\nthe text is url-ified and appended. (Lowercased, spaces converted to dashes,\nnon-alphanumeric characters dropped.) If neither urlPrefix nor url had a \"#\"\ncharacter in them, one is inserted between them.\n\nThe spec attribute is used only for index generation, and has no effect on URL\ngeneration.\n\nExample:\n\n    \n    \n    <pre class=\"anchors\"> urlPrefix: https://encoding.spec.whatwg.org/; type: dfn; spec: ENCODING text: ascii whitespace text: decoder url: http://www.unicode.org/reports/tr46/#ToASCII; type: dfn; text: toascii </pre> <a>ascii whitespace</a> links now!\n\nAlternately, this data can be provided in a file named anchors.bsdata, in the\nsame folder as the spec source, but this prevents you from using the web\nservice.\n\n### 6.9. Definitions data model\n\nBikeshed\u2019s most important feature is its powerful cross-spec autolinking. This\nis possible due to each definition being annotated with a rich set of\nmetadata, which is then exposed via custom attributes and picked up by\nspecialized scrapers (such as Shepherd) that then compile a definition\ndatabase that Bikeshed relies on.\n\nIf you\u2019re writing a spec processor or related tool and would like to\ninteroperate with the Bikeshed ecosystem, here\u2019s the full definition data\nmodel and how to properly expose it.\n\n  1. The defining element MUST be a dfn or h2...h6. No other element is recognized as defining a term.\n\n  2. The element MUST have an id attribute.\n\n  3. The linking text defaults to the text content of the dfn/heading. If the desired text content isn\u2019t suitable for linking text, or you wish to provide multiple linking texts, a [lt attribute](#changing-lt) containing one or more pipe-separated linking texts will override the text content. See also \u00a7 6.3 Defining Extra-Short \"Local\" Linking Texts\n\n  4. data-dfn-type MUST be provided, and set one of the accepted values.\n\n(In an actual Bikeshed document, this can be omitted from dfn elements and it\nwill be inferred from context, usually defaulting to \"dfn\" type. But non-\nBikeshed documents must specify this, or else they\u2019ll get their dfn type\ninferred heuristically, which may or may not be correct.)\n\n  5. Either data-export or data-noexport MAY be provided (both boolean attributes). If neither is provided, \"dfn\" type definitions default to noexport, while all others default to export. Unexported definitions aren\u2019t linkable by default.\n\n  6. Several types of definitions are namespaced to another construct; for example, attribute names are namespaced to an interface. These definitions MUST contain a data-dfn-for attribute, containing a comma-separated list of one or more definitions they\u2019re namespaced to.\n\nIf you have written a web spec and it conforms to this definition syntax,\ncontact the project maintainer and ask them to register your spec in Shepherd,\nso its definitions will be available to everyone else.\n\n## 7\\. Autolinking\n\nThe processor supports \"autolinks\" for easy linking to terms without having to\nfiddle around with urls. Instead, just match up the text of the link to the\ntext of the definition!\n\nThere are three types of autolink syntaxes you might see/use:\n\n  1. Dfn autolinks, like {{foo}} or [=foo=], which link to a definition. See \u00a7 7.1 Dfn Autolinks for details.\n\n  2. Spec/section autolinks, like [[FOO]] or [[#foo]], which link to a document or heading. See \u00a7 7.2 Spec/Section Autolinks for details.\n\n  3. Manual a elements without an href attribute, which can create either of the preceding two types, and are occasionally useful when the preceding syntaxes can\u2019t express what you need. See \u00a7 7.3 Manual Autolinks for details.\n\nYou may also see an l element, which is used to help augment dfn autolinks,\nand can avoid the need to use an a in many cases. See \u00a7 5.4.1 Autolink\nShortcuts That Work Anywhere: the l element for details.\n\n### 7.1. Dfn Autolinks\n\nDfn autolinks create links to definitions.\n\nThere are two parts to the syntax:\n\n  1. The wrapper, like {{...}} or [=...=], which specifies what type of definition you\u2019re linking to.\n\n  2. The inside syntax, which gives details on what you\u2019re trying to link to.\n\n#### 7.1.1. Wrapper Syntax\n\nThe characters used to wrap an autolink determine what type of definition (see\n\u00a7 6.4 Definition Types) you\u2019re trying to link to. They\u2019re arranged into\ncategories that can be individually turned on or off, if you don\u2019t think\nyou\u2019ll use a particular type of autolink, and want to avoid possibly\ntriggering an autolink accidentally:\n\nThe Dfn varieties (controlled by Markup Shorthands: dfn yes):\n\n  * [=foo=] is an autolink to the \"dfn\"-type definition \"foo\".\n\n  * [$foo$] is an autolink to the \"abstract-op\"-type definition \"foo\".\n\nThe HTTP varieties (controlled by Markup Shorthands: http yes):\n\n  * [:header:] or [::pseudo-header:] is an autolink to the \"http-header\"-type definition for \"header\" or \":pseudo-header\".\n\nThe IDL variety (controlled by Markup Shorthands: idl yes):\n\n  * {{foo}} or {{foo()}} is an autolink to one of the IDL types (interface, method, dictionary, etc) for the term \"foo\".\n\nThe markup (HTML/SVG/etc) varieties (controlled by Markup Shorthands: markup\nyes):\n\n  * <{element}> is an autolink to the element named \"element\".\n\n  * <{element/attribute}> is an autolink to the attribute or element-state named \"attribute\" for the element \"element\".\n\n  * <{element/attribute/attribute value}> is an autolink to the value \"attribute value\" of an attribute or element-state named \"attribute\" for the element \"element\".\n\nThe CSS varieties (controlled by Markup Shorthands: css yes):\n\n  * 'foo' (apostrophes/straight quotes) is an autolink to a property or descriptor named \"foo\". If there is both a property and a descriptor of a given name, this defaults to linking to the property if used in its bare ('foo') form.\n\n  * ''foo'' (double apostrophes) is an autolink to any of the CSS definition types except property and descriptor\n\n  * <<foo>> is an autolink to a type/production named \"<foo>\"\n\n    * Bikeshed supports the numeric-range restriction on type autolinks, such as <<length [0,10px]>>. Infinities in the range can be written as a literal \u221e character, an &infin; HTML character reference, or the literal string Infinity.\n\n  * <<'foo'>> is an autolink to the the property or descriptor named \"foo\" (used in grammars, where you need <foo> for non-terminals).\n\n  * <<foo()>> is an autolink to the function named \"foo\" (used in grammars)\n\n  * <<@foo>> is an autolink to the at-rule named \"@foo\" (used in grammars)\n\n#### 7.1.2. Inside Syntax\n\n  * Put the text you\u2019re trying to link to inside the autolink.\n\n[=foo=] will link to a <dfn dfn>foo</dfn>.\n\n  * If the definition is namespaced with a for attribute (see \u00a7 6.5 Namespacing a Definition), put the for value before the text, separated by a slash.\n\n{{Foo/bar}} will link to a <dfn attribute for=Foo>bar</dfn>.\n\nTo link specifically to the version of a definition without a for value, use\nan empty slash, like [=/url=], which will link to a <dfn>url</dfn>, but not a\n<dfn for=page>url</dfn>.\n\nIf you omit the /, it means you don\u2019t care what the for value of the\ndefinition is. The Assume Explicit For metadata can change this to make it\nmean the same as an empty slash.\n\n  * If your wrapper characters apply to more than one dfn type (like {{...}}, which can link to any of the IDL dfn types), you can append a !!type after the linking text if you need to differentiate them. (This is very rarely necessary.)\n\n'foo!!descriptor' will link to a <dfn descriptor>foo</dfn>, but not a <dfn\nproperty>foo</dfn>, while 'foo' can potentially link to either.\n\n  * If you want the visible text to be different from the linking text, you can append |visible text after the linking text.\n\n[=do foo|when foo is done=] will link to a <dfn dfn>do foo</dfn>, but will\ndisplay \"when foo is done\" as the visible text of the link.\n\nNote: Many variations on the linking text are automatically handled by\nBikeshed and don\u2019t need manual adjustment like this; see \u00a7 6.1\nConjugating/Pluralizing/etc the Linking Text for details.\n\nAll together, the order of pieces is:\n\n  1. for value\n\n  2. linking text\n\n  3. link type\n\n  4. visible text\n\nlike {{Document/ready!!attribute|the Document.ready attribute}}.\n\n### 7.2. Spec/Section Autolinks\n\nBiblio/spec/section autolinks create links to other documents as a whole, or\nsections of those documents, rather than to particular definitions. They come\nin three closely-related syntaxes:\n\n  1. Biblio/document autolinks, like [[FOO]] or [[!FOO]], which specify the shortname of a document (from SpecRef). See \u00a7 8 Bibliography for more details.\n\n  2. Local section autolinks, like [[#foo]], which link to another section in your current document by its ID.\n\n  3. Cross-spec section autolinks, like [[FOO#bar]], which link to a section of another document, and mixes the previous two syntaxes.\n\nSee \u00a7 7.9 Section Links for details on the latter two.\n\nLike dfn autolinks, if you want to display a specific visual text rather than\nwhat the autolink would normally display, you can append |visible text to the\ninternals, like [[CSS-FOO|the CSS Foo spec]].\n\nThese are all controlled by Markup Shorthands: biblio yes.\n\n### 7.3. Manual Autolinks\n\nIf one of the shorthand syntaxes don\u2019t work for whatever reason, even if you\nuse the l element, you can use an ordinary a element to specify a manual\nautolink.\n\nAny a without an href attribute is an autolink.\n\n  * By default, it\u2019s a \"dfn\" autolink, same as the [=...=] syntax. To override this, add the link type as an attribute, similar to dfn, like <a attribute>...</a> to autolink to an attribute.\n\n  * By default, the visible text and linking text are the text content. To override this, specify linking text in an lt attribute, like <a lt=\"do foo\">when foo is done</a>.\n\n  * If the definition is namespaced by a for attribute, add a for attribute, like <a attribute for=Document>ready</a>.\n\nTo link specifically to the version of a definition without a for value, use\nan empty for attribute, like <a for>a</a>, which will link to a\n<dfn>url</dfn>, but not a <dfn for=page>url</dfn>.\n\nIf you omit the for, it means you don\u2019t care what the for value of the\ndefinition is. The Assume Explicit For metadata can change this to make it\nmean the same as an empty slash.\n\n  * To link to a specific spec\u2019s version of a particular definition, add a spec attribute with the shortname of the spec you\u2019re linking to.\n\nAll together, it might look like <a attribute for=Document lt=ready>the\nDocument.ready attribute</a>.\n\n### 7.4. Link Types\n\nLinks have the same types as definitions, with a few additional \"union\" types\nthat are used by the shortcut forms. While you shouldn\u2019t specify them\nexplicitly, they\u2019ll show up in error messages sometimes, so here\u2019s a list of\nthem:\n\n  * \"propdesc\" - used by the 'foo' shorthand. A union of \"property\" and \"descriptor\".\n\n  * \"functionish\" - used by the ''foo()'' shorthand for things that look like functions. A union of \"function\", \"method\", \"constructor\", and \"stringifier\".\n\n  * \"maybe\" - used by the rest of the ''foo'' shorthand values. A union of \"dfn\" and all the CSS types except \"property\" and \"descriptor\". For legacy reasons, this link type has the additional magic that it doesn\u2019t flag an error if it can\u2019t find any matches, because it\u2019s also used to annotate inline CSS code fragments.\n\n  * \"idl\" - used by the {{foo}} shorthand. A union of all the IDL types.\n\n  * \"idl-name\" - used by the IDL auto-parser. A union of all the IDL types that can declare IDL argument types, like \"interface\", \"enum\", or \"dictionary\".\n\n  * \"element-sub\" - used by the <{foo/bar}> shorthand. A union of \"element-attr\" and \"element-state\".\n\nWhen you actually run the processor, you may get errors about there being too\nmany possible references to choose from. The processor will continue to run\nanyway, but its default choice might be the wrong definition. There are three\nthings you might have to do to fix these:\n\n  1. Specify the type explicitly, if the link isn\u2019t being processed as the correct type. Like definitions, this can be done by just adding the type as a boolean attribute on the link, or by adding a link-for attribute to a container. If the link is using shorthand syntax, you can use the !!type suffix to specify the type.\n\n  2. If the link type corresponds to one of the definition types that needs for to be specified, you may need to specify for on the link as well to narrow down which definition you\u2019re referring to. For example, many CSS properties define an \"auto\" value; to link to the \"auto\" value of the 'width' property in particular, specify <a value for=width>auto</a>, or the shorthand syntax ''width/auto''. To refer to a value of a descriptor, you can be completely explicit and specify the at-rule as well, like <a value for='@counter-style/system'>numeric</a>, but you\u2019re allowed to omit the at-rule if there are no other properties or descriptors with the same name, like ''system/numeric''. This might trigger errors in the future if a conflicting term gets added later, but it keeps your links shorter for now.\n\nAgain, you can specify a link-for attribute on a container to default it for\nall the autolinks inside the container. Alternately, you can specify link-for-\nhint on a container, which\u2019ll use the hint as the for value if possible (if\ndoing so wouldn\u2019t eliminate all the possible links). This is useful if some\ncontainer has a bunch of links for a given property, say, but some of the\nlinks are to other things entirely; using link-for means you have to manually\nspecify the other links aren\u2019t for anything, but link-for-hint is more \"do\nwhat I mean\".\n\n  3. If multiple specs define the same term, you may need to declare which spec you\u2019re referring to. (The processor is smart enough to automatically figure out which one you probably want in many cases.) Just add a spec attribute with the spec\u2019s shortname to either the link or a container. This can also be specified document-wide, as described in \u00a7 7.7 Configuring Linking Defaults. (You can add this to a dfn autolink by wrapping it in an l element, or by fully converting to an a element, and adding a spec attribute.)\n\nAs a final note, the autolinking algorithm will link differently based on\nwhether the spec being processed is a \"current\" (up-to-date) or \"snapshot\"\n(generated for a past date) draft. If \"current\" (ED, UD, etc.), it\u2019ll prefer\nto link to other current drafts, and will only link to \"snapshot\" if no\n\"current\" version of that spec exists. (If a definition only exists in the\n\"snapshot\" draft but not the \"current\" draft, that almost certainly means it\u2019s\nbeen deleted since the \"snapshot\" draft was last published, and thus shouldn\u2019t\nbe linked to.) On the other hand, \"official\" (WD, CR, etc.) specs will\npreferentially link to other official specs. A future version of the processor\nwill likely enforce the W3C\u2019s linking policy more strongly: preventing CRs\nfrom linking to EDs at all, preventing RECs from linking to anything below CR,\netc.\n\nIf you need to override the processor\u2019s choice for which status to link to for\na particular link, provide a status attribute containing either \"ED\" or \"TR\"\non the link or a container.\n\n### 7.5. Linking to Unexported Definitions\n\nMost definition types are automatically exported and made available for cross-\nlinking, but \"dfn\" type definitions aren\u2019t, because specs often define terms\nfor their own internal use that aren\u2019t meant to be used outside the spec (and\nin particular, aren\u2019t named in a way so as to avoid collisions).\n\nIf a spec contains a \"dfn\" type definition that you want to link to, but it\u2019s\nnot marked for export (either intentionally, or because it was accidentally\nmissed and fixing the spec would be time-consuming), using the spec attribute\n(defined above) will override the lack of an export declaration, and go ahead\nand link to it anyway.\n\n### 7.6. Link Attributes On Ancestors\n\nAll of the autolinking attributes can be specified on an ancestor of the\nautolink instead, if you have a group of links that all share a particular\nattribute.\n\nThey can be spelled out fully (like data-link-type), or without the data-\nprefix, like link-type. As there\u2019s no overlap with a similar data-dfn-*\nattribute, link-spec and link-status can omit link- as well, being spelled as\nmerely status and spec.\n\nA link will take the \"closest\" version of each attribute it can find, so\nspecifying an attribute directly on the link will override anything coming\nfrom an ancestor.\n\n### 7.7. Configuring Linking Defaults\n\nWhen there are multiple definitions for a given term and Bikeshed can\u2019t\nautomatically tell which one you want, it\u2019ll emit a warning asking you to\nspecify more explicitly. You can do this per-link, but you typically want to\nmake the same choice every time the term is autolinked; this can be done by\nadding a <pre class='link-defaults'> block, written in the InfoTree format.\nEach piece of info must have a spec, type, and text line, and optionally a for\nline if necessary to further disambiguate.\n\nSometimes this is too fine-grained, and you\u2019d actually like to completely\nignore a given spec when autolinking, always preferring to link to something\nelse. To do this, add a <pre class='ignored-specs'> block, written in the\nInfoTree format. Each piece of info must have a spec line, and optionally a\nreplacedBy line, both naming specs. If the info has just a spec line, that\nspec is ignored totally by default; linking to it requires you to manually\nspecify a spec=\"\" attribute on the autolink. If the info has a replacedBy\nline, then whenever an autolink has a choice between the two specs, it\u2019ll\ndelete the spec value from consideration, leaving only the replacedBy value\n(plus any other specs that might be providing a definition).\n\n### 7.8. Potentially-ambiguous for-less Links\n\nIf you were directed here by a Bikeshed error message, put an explicit for\nvalue on your autolink. (Use for=\"/\" to link to a definition without a for\nvalue of its own).\n\nBikeshed\u2019s autolinking functions as a series of filters, some of which are\noptional. For example, if you don\u2019t specify a for value, then Bikeshed simply\ndoesn\u2019t care about the for values of definitions as it searches. However, this\ndoesn\u2019t always match people\u2019s mental models\u2014in particular, people sometimes\nimplicitly assume that an autolink without a for will specifically match a\ndefinition without a for.\n\nUsually this is fine; if there are multiple possible definitions, Bikeshed\nwill just throw up a linking error informing you of how to be more specific.\nBut if you have a definition of that term with a for value in your local spec\n(or your anchors block), Bikeshed can silently select that as the correct\ndefinition to link to, causing accidental spec corruption if you meant to link\nto a cross-spec definition without a for.\n\nIn other words, if some other spec defines <dfn>term</dfn>, and then your spec\nboth defines <dfn for=foo>term</dfn> and links to <a>term</a> (expecting the\nlink to go to the cross-spec definition), you\u2019ll be disappointed, but won\u2019t\nknow it\u2019s wrong unless you manually check your links.\n\nBikeshed looks out for this situation, and flags it as a potentially-ambiguous\nlink, requiring you to specify the for value explicitly. If you want to link\nto the for-less cross-spec definition, simply add for=\"/\" to your autolink, to\nindicate explicitly that you want the definition without a for value.\nOtherwise, add the appropriate for value as normal.\n\n### 7.9. Section Links\n\nSometimes you want to link to a section of a document, rather than a specific\ndefinition. Bikeshed has section links to handle this case more easily:\n\n    \n    \n    [[#heading-id]]\n\nrenders as:\n\n    \n    \n    <a href=\"#heading-id\">\u00a76.1 The Example Section</a>\n\nNote that this is quite different from normal autolinks; rather than matching\non text and letting Bikeshed fill in the href, you match on href and let\nBikeshed fill in the text. This is because section titles change much more\noften than definition texts, so using text-based matching is fragile; on the\nother hand, their IDs tend to be stable, as they\u2019re often linked to. Also, the\nsection titles are often long and annoying to type, and they move around, so\nnumbering isn\u2019t stable.\n\nYou can also use cross-spec section links, as long as the spec is either in\nBikeshed\u2019s linking database, or the biblio database. The syntax is a mixture\nof a biblio reference and a section link:\n\n    \n    \n    [[css-flexbox-1#auto-margins]] [[CSS-access-19990804#Features]]\n\nwhich renders as:\n\n    \n    \n    <a href=\"https://drafts.csswg.org/css-flexbox-1/#auto-margins\">CSS Flexbox 1 \u00a78.1 Aligning with auto margins</a> <a href=\"http://www.w3.org/1999/08/NOTE-CSS-access-19990804#Features\">Accessibility Features of CSS \u00a7Features</a>\n\nIf Bikeshed knows about the spec, it link-checks you, and fills in the section\nnumber and heading in the generated text. If the spec is only in the\nbibliography database, Bikeshed just assumes that the link target exists and\nuses it directly in the text, because it has no way to tell what the section\nis named.\n\nIf the spec is multipage, like SVG, and Bikeshed knows about it, most of the\ntime you don\u2019t need to do anything different - Bikeshed will find the correct\npage for the heading you\u2019re linking to. On the rare occasions that the same\nheading id exists in multiple pages of the same spec, tho, specify the page\nlike [[svg/intro#toc]] (which indicates the #toc heading on the intro.html\npage). If the desired heading is on the top-level page, use an empty page\nname, like [[html/#living-standard]]. In any case, Bikeshed will throw an\nerror, and tell you what names it knows about so you can easily correct your\nlink.\n\n## 8\\. Bibliography\n\nBibliographical references form a special class of autolinks. They\u2019re\ntypically added only via the shorthands [[FOO]] for informative references and\n[[!FOO]] for normative references.\n\n(A \"normative reference\" is a reference that your document depends on;\nsomething in the other document is required in order to implement your\ndocument correctly. An \"informative\" reference is anything else. Informative\nreferences might be to normative documents, if your feature doesn\u2019t actually\ndepend on the referenced document.)\n\nUnlike regular autolinks, which link to dfn elements, biblio autolinks cause\nthe spec to generate entries in its \"References\" section, and then link to\nthat instead.\n\nThe bibliography database is completely separate from the autolinking\ndatabase, and comes from multiple sources. The default data comes from the\nSpecRef project and the CSSWG\u2019s own biblio file (preferring SpecRef\u2019s\ninformation when the same name appears in both).\n\n### 8.1. Biblio Link Modifiers\n\nSeveral aspects of how bibliography autolinks work can be controlled by adding\nkeywords to the autolink, after the biblio name.\n\n  * Some biblio entries come with multiple sets of urls; at present, Bikeshed tracks a single \"current\" url and a single \"snapshot\" url. In the W3C, for example, this maps to Editors Drafts and things in /TR space, respectively.\n\nYou can specify which url to use by specifying current or snapshot within the\nbiblio shorthand, like [[FOO current]], or specify the default url to choose\nfor all your biblio refs with the Default Ref Status.\n\n  * By default, biblio autolinks are formatted in the \"index\" style, where they are links to the bibliography, and appear like you typed, just with a single set of square brackets: [[FOO]] will produce a link with the text \"[FOO]\".\n\nAlternately, they can be configured to use the \"direct\" style, which links\ndirectly to the document in question, rather than the bibliography entry\ncontaining the link. (The bibliography entry still gets added.)\n\nThere is also an \"inline\" style, which links directly to the document in\nquestion, and formats itself as the title of the document, rather than as the\nshort biblio tag you typed.\n\nThese can be controlled on a link-by-link basis by setting inline, direct, or\nindex in the shorthand, like [[FOO inline]], or change the default for all\nbiblio links in the document by setting the Default Biblio Display metadata.\n\n  * The bibliography database tracks whether certain documents have been obsoleted by newer documents, and if you attempt to link to the the now-obsolete document, Bikeshed defaults to linking to the newer document instead and asking you to update the reference.\n\nIf you do intentionally need to link to a now-obsolete document (for example,\nif you\u2019re talking about a feature in the old document that\u2019s since been\nreplaced), you can tell Bikeshed you do intend to link to that by setting\nobsolete in the shorthand, like [[FOO obsolete]].\n\nAll of these keywords can be combined, in any order, such as [[FOO inline\nobsolete]] or [[FOO index current]].\n\n### 8.2. Autolinking and Automatic Bibliography Entries\n\nWhenever you autolink to a term from another spec using a standard dfn\nautolink, Bikeshed automatically adds a bibliography entry for that document\nif one doesn\u2019t already exist.\n\nBy default, it assumes these are normative references. However, if the link is\nin a \"non-normative\" element, Bikeshed doesn\u2019t put it in the bibliography.\nThis includes any notes (class=note), examples (class=example), or sections\nmanually marked with class=non-normative. (You can override this and get a\nnormative reference by adding a class=normative to the link or an ancestor.)\n\n### 8.3. Manual Biblio Links\n\nIf, for whatever reason, you need to craft a bibliography link manually, just\ncreate an a element with data-link-type=biblio and the biblio tag either in\nthe text content of the link or in a data-lt attribute, similar to a manually-\ncrafted autolink.\n\nIf you need one of the biblio link modifiers, add data-biblio-type=[normative | informative], data-biblio-status=[current | snapshot], data-biblio-display=[index | inline], and/or data-biblio-obsolete=\"\" to the link as well.\n\n### 8.4. Custom Biblio Entries\n\nYou can also add your own bibliography data, following the SpecRef JSON\nformat:\n\n    \n    \n    { \"foo-bar\": { \"authors\": [ \"Tab Atkins\", \"Bat Snikta\" ], \"href\": \"http://www.example.com/foo-bar/\", \"title\": \"Foo Bar Level 1\", \"status\": \"CR\", \"publisher\": \"W3C\", \"deliveredBy\": [ \"http://www.w3.org/html/wg/\" ] } }\n\nThis would allow you to write [[FOO-BAR]] into your document, and have it be\nrecognized as a valid autolink, with a bibliography entry generated in the\nindex just like any of the predefined biblio references.\n\nNote: Only the \"title\" field is strictly necessary; the rest can be omitted if\ndesired.\n\nThis JSON should be inline, in a <pre class=biblio> block. It can also be in a\nbiblio.json file in the same folder as the Bikeshed file, but this is\nincompatible with the web service.\n\nIf you find yourself adding this to more than one document, it might be worth\nadding to SpecRef itself so others can benefit from it as well; file an issue\non that project if you\u2019re interested.\n\n## 9\\. Definition Tables\n\nSeveral types of definitions have well-established presentations, as a simple\n\"key/value\" table providing all of the details in a standardized format.\n\nBikeshed handles these specially, with a dedicated set of <pre class=xxxdef>\nblocks. The information in the block is presented in a simple line-based Key:\nvalue format, similar to <pre class=metadata>, and this is transformed into a\nstandardized table.\n\nAll of the def tables look like this:\n\n    \n    \n    <pre class='propdef'> Name: flex-basis Value: content | <<'width'>> Initial: auto Inherited: no Applies to: <a>flex items</a> Computed value: as specified, with lengths made absolute Percentages: relative to the <a>flex container's</a> inner <a>main size</a> Animation type: length Canonical Order: per grammar </pre>\n\n### 9.1. Arbitrary Def Tables\n\nIf you want to display your own key/value rows in a similar way to the built-\nin types defined below, you can use a plain <pre class=simpledef> block.\n\n    \n    \n    <pre class=simpledef> first row: some info second row: different info second row: merged with the previous row </pre>\n\nwill render as:\n\nfirst row| some info  \n---|---  \nsecond row| different info merged with the previous row  \n  \nParsing is extremely simplistic:\n\n  * Each line defines a separate row.\n\n  * The first literal : character splits the \"key\" from the \"value\".\n\n  * Unique keys are displayed in order, with the key in a <th> and the value in a <td>.\n\n  * Repeated keys have their values merged (with a newline separating them, if that matters).\n\n  * HTML or Bikeshed markup can be used in both keys and values, like <b>Key</b>: value&copy;. The keys and values are both written literally into the document as the table, and then later parsed by Bikeshed as normal text.\n\nNote that the key/value splitting is done on the raw text, so a literal colon\nwill trigger the split no matter where it appears: <span title=\"behold: un\npipe\">what is it?</span>: a pipe will parse the key as <span title=\"behold,\nand the value as everything following that first colon. Use &#x3a; to HTML-\nescape the colon if needed.\n\n  * If the key starts with raw text, the first letter is capitalized in the output.\n\n### 9.2. CSS Property Tables\n\nCSS properties are defined with a <pre class=\"propdef\"> block.\n\nName, Value, Initial, and Inherited are all required.\n\n  * Name gives the property name. It will be automatically wrapped in a dfn by Bikeshed, so there\u2019s no need to do anything manually. Multiple comma-separated property names can be given, if several properties share identical propdef blocks.\n\n  * Value gives the grammar for the property, written in CSS\u2019s Value Definition Syntax. Anything that looks like a grammar non-terminal (like <foo>) will automatically be escaped and linked appropriately, so you don\u2019t need to manually autolink it.\n\n  * Initial gives the initial value of the property.\n\n  * Inherited must be \"yes\" or \"no\".\n\nAll the other keys listed in the block above are optional. If left\nunspecified, they\u2019ll be given a usually-reasonable default value:\n\n  * Applies to defaults to \"all elements\". It specifies what subset of elements the property has meaning for.\n\n  * Percentages defaults to \"n/a\". It specifies what value percentages are resolved against, if the property takes percentage values at all.\n\n  * Computed Value defaults to \"as specified\". It specifies what, if any, canonicalization occurs when transforming specified values to computed values. (Complex values should use \"see prose\" and define it in prose instead.)\n\n  * Canonical Order defaults to \"per grammar\". It specifies what order values are serialized in, if values are rearranged when parsing. (The default is almost always correct; usually only properties with unusual legacy constraints on their serialization will need to specify anything for this.)\n\n  * Animation Type defaults to \"discrete\". It specifies the Animation Type of the values.\n\n  * Logical Property Group is optional, and if specified defines the logical property group the property belongs to. (The value is usually, but doesn\u2019t have to be, a shorthand property name covering all the longhands in the group.)\n\nAll values are placed directly into the output HTML as written, so HTML tags,\nBikeshed autolinks, etc can all be used as normal.\n\nIf defining a shorthand property, put a \"shorthand\" class on the block. This\nwill change the block to only require Name and Value; Canonical Order is still\nallowed, but continues to default to \"per grammar\" as usual. All other keys\nwill default to \"see individual properties\", which is usually all you need.\n\nIf adding some values to a property, rather than defining the property itself,\nput a \"partial\" class on the block. It will now require a New Values key,\nrather than Value, but is otherwise normal.\n\nAdditional keys beyond what is described here can be provided; they\u2019re placed\nafter all the built-in keys.\n\nThe end result looks like:\n\nName:| flex-basis  \n---|---  \nValue:| content | <<'width'>>  \nInitial:| auto  \nApplies to:| flex items  \nInherited:| no  \nPercentages:| relative to the flex container\u2019s inner main size  \nComputed value:| as specified, with lengths made absolute  \nCanonical order:| per grammar  \nAnimation type:| length  \n  \n### 9.3. CSS Descriptor Tables\n\nCSS descriptors (like properties, but for at-rules) have def blocks similar\nto, but simpler than, propdef blocks.\n\nName, Value, and Initial are required keys, just like propdef blocks.\nAdditionally, For is required, giving the name of the at-rule the descriptor\nis for, like For: @counter-style. The rest of the propdef keys are not\nmeaningful for descriptors.\n\nLike propdef blocks, a \"partial\" class can be put on the block to indicate\nthat you\u2019re adding values to an existing definition; Name, For, and New Values\nmust be provided.\n\nWhile not technically descriptors, media features can be defined with this\nblock as well, if an \"mq\" class is put on the block. It then only requires\nName, For, and Value.\n\nAdditional keys beyond what is described here can be provided; they\u2019re placed\nafter all the built-in keys.\n\n### 9.4. HTML Element Tables\n\nHTML/SVG/etc elements can use a <pre class=\"elementdef\"> block. (The content\nand presentation of this block is similar to that in the HTML standard, but is\ncloser to that in the SVG standard.)\n\n  * Name - required. Gives the element name. Can provide multiple element names, comma-separated. The names will automatically be wrapped in a dfn for you.\n\n  * Categories - required. What element categories the element is part of. Can provide multiple values, comma-separated. The names will automatically be wrapped in links for you, of dfn type.\n\n  * Contexts - required. The contexts in which the element can be used. This is freeform HTML.\n\n  * Content model - required. The types of contents the element can contain. This is freeform HTML.\n\n  * Attributes and/or Attribute Groups - at least one is required. A comma-separated list of attribute names and/or attribute groups that this element can have. These will be automatically be wrapped in links for you\u2014element-attr type for attributes, and dfn type for attribute groups (like \"core attributes\" in SVG).\n\n  * DOM interfaces - required. A comma-separated list of WebIDL interface names corresponding to the elements being defined. The names will automatically be wrapped in links for you, of interface type.\n\nAdditional keys beyond what is described here can be provided; they\u2019re placed\nafter all the built-in keys.\n\n### 9.5. IDL Method Argument Tables\n\nIDL methods can have their arguments defined & documented in a <pre\nclass=\"argumentdef\"> block:\n\n    \n    \n    <pre class=idl> interface Foo { undefined bar(long arg1, DOMString? arg2); }; </pre> <pre class=argumentdef for=\"Foo/bar()\"> arg1: here's the first arg arg2: the second arg is different! </pre>\n\nThe argumentdef block must specify what method the arguments are for in a for\nattribute on the <pre>. The contents of the element must then, on each line,\nlist the argument name, a colon, then a description of that argument.\n\nIt will produce a table listing each argument, its description, and\nautomatically contain its type, nullability, and optionality (determined from\nthe IDL block), like:\n\n    \n    \n    interface Foo { undefined bar(long arg1, DOMString? arg2); };\n\nArguments for the Foo.bar() method.Parameter| Type| Nullable| Optional|\nDescription  \n---|---|---|---|---  \narg1| long| \u2718| \u2718| here\u2019s the first arg  \narg2| DOMString?| \u2714| \u2718| the second arg is different!  \n  \nNote: This automatically wraps the argument names in a dfn; this is meant to\nbe the canonical location of the argument\u2019s definition.\n\n## 10\\. WebIDL Processing\n\nBikeshed can automatically process IDL blocks, marking up all relevant terms\nfor you without any intervention, setting up definitions and autolinks as\nappropriate.\n\nTo activate this behavior, simply place the IDL in the <pre class='idl'>\nelement. Bikeshed will consume the text content of the element (ignoring any\nmarkup you may currently have) and replace it with marked-up text containing\ndfn and a elements.\n\nAs mentioned in \u00a7 5.6.2 xmp To Avoid Escaping Markup, you can use <xmp\nclass=idl> as well, so you don\u2019t have to escape your sequence<Foo>/etc types.\nThis prevents you from using other markup in your IDL, but that\u2019s relatively\nrare.\n\nFor IDL specifically, you can also use <script type=idl>. This has similar\neffects to <xmp>, but it interacts better with the syntax-highlighting of some\ntext editors, preventing the contents from being highlighted as HTML.\n\nIn the process of doing this, Bikeshed will also syntax-check your IDL, and\nreport fatal errors for any mistakes. Bikeshed\u2019s IDL parser, courtesy of Peter\nLinss, is intended to be forward-compatible with IDL changes, gracefully\nemitting unknown constructs unchanged and recovering as well as it can. If\nanything isn\u2019t recognized when it should be, or the parser fails in a major,\nnon-graceful way, please report it as an issue.\n\n### 10.1. Putting Definitions Elsewhere\n\nQuite often, you may want to have the actual definition of an IDL term (the\nthing that Bikeshed actually links to) somewhere in your prose near the full\ndefinition, rather than being in the IDL block.\n\nBikeshed will automatically produce an a in your IDL, rather than a dfn, if it\ncan find a pre-existing definition of that IDL term, including local\ndefinitions in the current spec. However, you have to mark up the definition\ncorrectly to get this to work, or else Bikeshed will fail to recognize there\u2019s\nan external definition and will mark up the IDL with a dfn as well.\n\nIn particular, method and attribute definitions need to have their for value\nset to the interface they\u2019re a part of (and similar with dictionary members).\nMethods have some further complexity - they should have their definition text\nset to contain the names of all their arguments.\n\nFor example, take the following example IDL:\n\n    \n    \n    interface Foo { undefined bar(DOMString baz, optional long qux); };\n\nTo have Bikeshed recognize a definition for the bar() method placed elsewhere,\nit must look something like <dfn method for=Foo title=\"bar(baz,\nqux)\">bar(DOMString baz, optional long qux)</dfn>.\n\nAdditionally, it should define alternate linking texts for omittable\narguments, like <dfn method for=Foo title=\"bar(baz,\nqux)|bar(baz)\">bar(DOMString baz, optional long qux)</dfn>. This way any valid\ncall signature can be used to autolink. Note that arguments are omittable if\nthey\u2019re marked with optional, or are variadic (like long... qux), or have a\ndefault value. Nullable arguments (like long? qux) are not omittable. (If you\nare fine with the dfn being in the IDL block, Bikeshed will do all of this for\nyou.)\n\nUnless all arguments can be omitted, the definition text should not have an\nalternative with empty args. For convenience, however, Bikeshed will allow\nautolinks with empty argument lists to work, as long as it can resolve the\nlink unambiguously. For example, {{Foo/bar()}} will autolink to the method\ndefined above, despite it not being a valid call signature, as long as there\nisn\u2019t an overload of bar() that it might also apply to.\n\n(The above applies to all functionish types: method, constructor, stringifier,\netc.)\n\nMarking up argument definitions is similar. To mark up the baz argument of the\nabove method, for example, do <dfn argument for=\"Foo/bar(baz, qux)\">baz</dfn>.\nYou should use the full call signature of the method.\n\n#### 10.1.1. Free Type/Etc Documentation on Attributes/Dict Members\n\nBikeshed automatically gathers information from your IDL block about\nattributes and dictionary members, such as their type, their default value,\nand whether they\u2019re readonly or nullable. You can have Bikeshed automatically\noutput that information in your definition elsewhere, by using a specific\nmarkup structure:\n\n    \n    \n    <dl dfn-type=attribute dfn-for=FooInterface> <dt><dfn>fooAttr</dfn> <dd>... <dt><dfn>barAttr</dfn> <dd>... </dl>\n\nIf an attribute or dictionary member is defined in a dt element, and is the\nsole content of that element, Bikeshed will automatically add useful\ninformation about the attribute following it.\n\nYou can also invoke this manually, by adding a <span data-attribute-info\nfor=\"FooInterface/fooAttr\"></span> element anywhere in your spec (or data-\ndict-member-info for dictionary members).\n\n### 10.2. Linking to Stringifiers\n\nLinking to a stringifier is a little complicated, because WebIDL allows four\ndifferent syntaxes for it.\n\nThe stringifier keyword itself is always linkable; it\u2019s a \"dfn\" type\ndefinition with for=MyInterface and linking text \"stringification behavior\".\nLike any other IDL construct, you can instead define the term yourself in the\nsame way, and the IDL will link to your definition instead, like <dfn dfn\nfor=MyInterface>stringification behavior</dfn>. This is generally what you\nshould use to link to the stringifier, as it\u2019ll maintain the links even if you\nchange which syntax form you use.\n\nIf you use the \"stringifier attribute\" form, like stringifier attribute\nDOMString href;, you can also just link/dfn the attribute as normal.\n\nIf you use the \"stringifier method\" form, like stringifier DOMString foo(long\nbar);, you can also just link/dfn the method as normal, like <dfn stringifier\nfor=MyInterface>foo(bar)</dfn>. (Note that it\u2019s a \"stringifier\" type\ndefinition, not \"method\".)\n\nIf you use the \"anonymous stringifier method\" form, like stringifier\nDOMString(long bar), you can still technically link/dfn it as a stringifier\nmethod. It doesn\u2019t have a name, so we invent one - it\u2019s called\n__stringifier__(), a la Python\u2019s magic methods. (Note the two underscores on\neach side.) You should almost never need to do this; the only reason to need\nto specify the method name (rather than just linking to the keyword, as\ndescribed above) is if you\u2019re linking/dfning an argument to the method, and\nneed to specify a for value for it.\n\n### 10.3. Turning Off Processing\n\nIf for whatever reason you don\u2019t want your IDL block to be processed by\nBikeshed, simply use another element, or another class. If you really want to\nuse <pre class=idl>, you can add a data-no-idl attribute to the element.\nBikeshed will leave these elements alone.\n\nAlternately, if your block is IDL, but it\u2019s not meant to be taken literally\n(for example, if it shows an example attribute, then explains in prose the set\nof actual attribute names to be used, as in the _camel_cased_attribute in\nCSSOM), put a class=extract on it.\n\n## 11\\. Testing Integration With WPT\n\nWhen writing specifications for the open web, the canonical way to test new\nfeatures and ensure interoperability is to contribute the testsuite to the Web\nPlatform Tests project. Bikeshed has some useful tools to interact with WPT\ninformation.\n\n### 11.1. Annotating Specs with Tests: the wpt element\n\nWhen writing tests, you can sometimes link to the section of the spec that\nyou\u2019re testing, to make it easier to review. But when you\u2019re actually reading\n(or updating!) the spec, you can\u2019t tell what sections are tested or untested,\nor what tests might need to be updated due to a change you\u2019re making. The wpt\nelement lets you easily link to your WPT testcases inline, right next to the\ntext they\u2019re testing, and helps make sure that the testsuite and the spec are\nkept in-sync.\n\nThe wpt element is a block-level element for parsing purposes; place it after\nor between paragraphs/etc. The contents of the element are line-based: each\nline contains a single test path (the path under the WPT repo, so not\nincluding the domain or the /web-platforms-tests/wpt/) pointing to the test\ncovering some nearby text.\n\nFor example:\n\n    \n    \n    Implementations must FOO whenever they would also BAR. <wpt> /foo-spec/foo-whenever-you-bar.html /foo-spec/no-foo-when-no-bar.html </wpt>\n\nIf all or most of your tests have a common path prefix, you can specify it in\nWPT Path Prefix metadata, and then leave it off of all the individual test\nlines. An explicit pathprefix attribute can also provide the path prefix, and\nwill override the metadata if specified.\n\nIf the preceding example used WPT Path Prefix, the wpt element could be\nshorter:\n\n    \n    \n    <pre class=metadata> WPT Display: open WPT Path Prefix: /foo-spec/ </pre> ... Implementations must FOO whenever they would also BAR. <wpt> foo-whenever-you-bar.html no-foo-when-no-bar.html </wpt>\n\nFor debugging purposes, a single <wpt-rest> element can be used in a spec,\nwhich will act like a wpt element containing all the tests under the current\npath prefix that aren\u2019t already specified in a wpt element. As this defeats\nBikeshed\u2019s ability to tell you when you\u2019re missing any tests, Bikeshed will\nemit a warning as long as a wpt-rest element is in use.\n\nBikeshed\u2019s knowledge of valid tests allows some useful checks:\n\n  * If WPT Path Prefix is specified, then any tests under that prefix that aren\u2019t specified in a wpt element will trigger a fatal error, so you\u2019ll be alerted when new tests are added.\n\n  * If you specify a path that doesn\u2019t exist (or no longer exists due to tests being moved or deleted), it will trigger a fatal error.\n\nThis check can be disabled for a given wpt element by giving it the skip-\nexistence-check boolean attribute. This allows you to point to private tests,\nsuch as those in browser-specific repos, without receiving errors about those\ntests missing from the main WPT repository.\n\nBy default, wpt elements don\u2019t display in the output document; they\u2019re\nintended to annotate the source file to help with spec authoring, and trigger\nBikeshed\u2019s checks. If you want to produce a test-annotated version of the\noutput, specify the WPT Display metadata with the value \"open\" or \"closed\";\nall of the wpt elements will become usefully-formatted lists of their\ncontained tests, with links to wpt.fyi, the live test on w3c-test.org, and the\nsource code on GitHub. The difference between \"open\" and \"closed\" is that with\nthe former, all wpt elements are initially displayed in a collapsed state to\navoid getting in the way of reading the document, while \"open\" causes them to\nbe expanded initially. In either case, the use can interactively collapse or\nexpand each element.\n\nWhen WPT Display: open is set, the wpt element turns into a \"TESTS\" block.When\nWPT Display: closed is set, the wpt element also turns into a \"TESTS\" block,\nbut it is initially collapsed.\n\nNote: For compatibility with earlier versions of Bikshed, \"inline\" is accepted\nas a synonym of \"open\".\n\nWhen the hidden attribute is set on the wpt element, Bikeshed will take the\ntests listed in that element into account, but exclude them from the output,\neven when producing a test-annotated version.\n\nNote: This can be useful when tests for all versions or levels of a single\nspecification are stored together under a single directory. Using WPT Path\nPrefix would cause Bikeshed to complain if the tests are not listed, but the\ntests may only be relevant for a later version of the specification. In such\ncases, listing the tests in a <wpt hidden> element silences the warnings,\nwithout adding anything irrelevant to the output.\n\nInformation about a set of tests described in a wpt element can be provided to\nthe reader by writing it in the title attribute of the wpt element. This will\nbe inserted in the output as an introductory paragraph before the test list. A\nlang or dir set on the wpt element will apply to the introductory paragraph if\nthere is one.\n\n    \n    \n    <h1 id=intro>Introduction</h1> This specification introduces... <wpt title=\"The following tests are crash tests that relate to general usage of the features described in this specification but are not tied to any particular normative statement.\"> crash-001.html crash-002.html </wpt>\n\nThe test block in the example above would be rendered as follows:\n\nIf multiple wpt follow each other in the source, with nothing between them\nother than whitespace, they will be fused together in the output, visually\ntaking less space than if they remained as separate elements. This will work\neven if they have different pathprefix or title attributes. When merging\nelements with title attributes, the tests listed in each element will be\npreceded by the relevant introductory paragraph, and visually separated from\ntests listed in different wpt elements.\n\nNote: More tools and options for integrating with WPT will be developed in the\nfuture.\n\n### 11.2. Updating Lists of Tests\n\nIf Bikeshed reports that a test doesn\u2019t exist, but you\u2019re sure that it does\n(and have checked the spelling!), make sure your data files are up-to-date\nwith bikeshed update (see \u00a7 3.6 bikeshed update) for details).\n\nIf you\u2019ve just pushed a new test to WPT and Bikeshed\u2019s update hasn\u2019t picked it\nup yet, try doing a manual update with bikeshed update --wpt --skip-manifest.\n\n## 12\\. Boilerplate Generation\n\nThe processor automatically generates nearly all of a spec\u2019s boilerplate, the\ntext that is repeated nearly identically across all specs.\n\nGenerally, you won\u2019t need to understand what\u2019s going on here in order to use\nthe processor - it\u2019ll just automatically do the right thing.\n\nFor help in creating new boilerplate files for your organization, see \u00a7 12.8\nCreating New Boilerplate Files For Your Organization.\n\n### 12.1. Groups\n\nMuch of the boilerplate is determined based on the Group metadata. If\nunspecified, it defaults to a generic set of boilerplate that is generally\nappropriate for most things, without making reference to any particular\nstandards body or the like. However, to obtain correct boilerplate for a given\nstandards body, \"Group\" can be used.\n\nSeveral groups are already accommodated with appropriate inclusion files:\n\n  * \"csswg\", as mentioned.\n\n  * \"dap\", for the Devices and Sensors Working Group\n\n  * \"fxtf\", for the FX Task Force\n\n  * \"houdini\", for the Houdini Task Force\n\n  * \"svg\", for the SVG Working Group\n\n  * \"webappsec\", for the WebApps Security Working Group\n\n  * \"whatwg\", for the WHATWG\n\n  * \"wg14\", for the C Standards Committee\n\n  * \"wg21\", for the C++ Standards Committee\n\n  * \"tc39\", for ECMAScript TC-39\n\n  * \"khronos\", for the Khronos Group\n\nYou can put whatever value you want into the \"Group\" value, though.\nUnrecognized values will just use the default boilerplate files. If you want\nto add specialized boilerplate files for your group, check out the File-Based\nIncludes section, later in this document, and write your own files.\n\n### 12.2. Rearranging and Excluding \"Spec Metadata\"\n\nAn important part of the boilerplate is the \"spec-metadata\" section. This will\nlikely be at the top of your header boilerplate, as it contains a bunch of\nuseful information about your spec.\n\nBikeshed generates a lot of these automatically for you, based on the metadata\nyou provide and other things detected from your document, and you can supply\n\"custom\" items as specified near the end of \u00a7 4 Metadata. There\u2019s a predefined\nordering of these, but if you\u2019d like a slightly different order, or to omit\nsome of the automatically-generated items, you can use Metadata Include and\nMetadata Order to control this.\n\nMetadata Include takes a comma-separated list of names and boolish values,\nwhere the names are the strings that show up in the dt in the spec metadata.\nEverything defaults to \"on\" currently, but you can explicitly turn them \"off\"\nto omit them from the spec metadata section.\n\nMetadata Order instead controls the ordering of the spec metadata section.\nIt\u2019s a comma-separated list of names, where the names are the strings that\nshow up in the dt in the spec metadata (same as Metadata Include). Two special\n\"names\" are recognized as well: the * name stands in for \"all the standard\nkeys that aren\u2019t otherwise explicitly specified\", while !* stands in for \"all\nthe custom keys that aren\u2019t otherwise explicitly specified\". (The default\nvalue is thus Metadata Order: *, !*, listing all the standard keys in the\ndefault order, followed by all the custom keys in the default order.)\n\nIf a name is specially pluralized when there are multiple entries (such as\n\"Editor\" vs \"Editors\"), use the singular version in either of these metadatas.\n\nFor example, Metadata Include: This version off will make Bikeshed omit the\n\"This version\" entry from the spec-metadata section, which is otherwise auto-\ngenerated by the ED metadata.\n\nIf you wanted to make sure that editors were listed before anything else, you\ncould set Metadata Order: Editor, *, !*.\n\n### 12.3. Text Macros\n\nSeveral text \"macros\" are defined by the spec\u2019s metadata, and can be used\nanywhere in the spec to substitute in the spec they stand for by using the\nsyntax [FOO]. Note that this is similar to the syntax for bibliography\nreferences, but it has only a single set of [] characters, and the text must\nbe uppercase. The following macros are defined:\n\n  * [TITLE] gives the spec\u2019s full title, as extracted from either the H1 or the spec metadata.\n\n  * [H1] gives the desired document heading, in case the in-page title is supposed to be different from the <title> element value.\n\n  * [SHORTNAME] gives the document\u2019s shortname, like \"css-cascade\".\n\n  * [VSHORTNAME] gives the \"versioned\" shortname, like \"css-cascade-3\".\n\n  * [STATUS] gives the spec\u2019s status.\n\n  * [LONGSTATUS] gives a long form of the spec\u2019s status, so \"ED\" becomes \"Editor\u2019s Draft\", for example.\n\n  * [STATUSTEXT] gives an additional status text snippet.\n\n  * [LATEST] gives the link to the undated /TR link, if it exists.\n\n  * [VERSION] gives the link to the ED, if the spec is an ED, and otherwise constructs a dated /TR link from today\u2019s date.\n\n  * [ABSTRACT] gives the document\u2019s abstract.\n\n  * [ABSTRACTATTR] gives the document\u2019s abstract, correctly escaped to be an attribute value.\n\n  * [YEAR] gives the current year.\n\n  * [DATE] or [DATE-DMMY] gives a human-readable date like \"30 January 2000\".\n\n  * [DATE-MY] gives a partial date like \"Jan 2000\"\n\n  * [DATE-MMY] gives a partial date like \"January 2000\"\n\n  * [CDATE] gives a compact date in the format \"YYYYMMDD\", like \"20000130\"\n\n  * [ISODATE] gives a compact date in iso format \"YYYY-MM-DD\", like \"2000-01-30\"\n\n  * [DEADLINE] gives a human-readable version of the deadline date (formatted like [DATE]), if one was specified.\n\n  * [LOGO] gives the url of the spec\u2019s logo.\n\n  * [REPOSITORY] gives the name of the VCS repository the spec is located in; this is currently only filled when the spec source is in a GitHub repository. (Patches welcome for more repo-extraction code!)\n\nAs these are substituted at the text level, not the higher HTML level, you can\nuse them anywhere, including in attribute values.\n\nYou can mark a macro as \"optional\" by appending a ? to its name, like [DATE?].\nThis will cause Bikeshed to just remove it (replace it with the empty string)\nif it can\u2019t find a definition, rather than throwing an error.\n\nLike most other markup shorthands, text macros can be \"escaped\" by prepending\na backslash, like \\\\[TITLE]. When Bikeshed sees this, it will remove the slash\nand leave the text alone. This is sometimes necessary when code examples in\nyour doc (such as a regex) accidentally look like text macros.\n\n### 12.4. Conditional Inclusion\n\nIf you have multiple boilerplate files for publishing with different document\nstatuses (like WD vs CR), but the only difference is that some sections are\nadded/omitted between them, you can greatly simplify things by instead making\na generic boilerplate for everything, and then adding/removing the variant\nbits with a conditional inclusion.\n\nTo mark an element as \"conditionally included\", put an include-if and/or\nexclude-if attribute on it, each of which takes a comma-separated list of\ninclusion conditions.\n\n  * If an element has include-if, it will included only if it matches at least one of the conditions.\n\n  * If an element has exclude-if, it will be included only if it matches none of the conditions.\n\n  * If an element has both, it will be included only if it passes the inclusion criteria for both.\n\nAn element that fails will be removed from the output entirely, along with its\ncontents.\n\nInclusion conditions can be:\n\n  * A Status value, like w3c/ED or LS, so you can include/exclude text for certain publication statuses only.\n\n  * The existence of a custom text macro (defined by the Text Macro metadata), keyed by the text macro name, like text macro: FOO to match a Text Macro: FOO here\u2019s a custom text macro metadata, so you can include text that uses a custom text macro only if that macro is defined.\n\nNote: For technical reasons, text macros are substituted before conditionals\ncan be evaluated. If you\u2019re conditioning an element on the existence of a text\nmacro so you can use that macro only when it is defined, make sure the text\nmacro is marked as optional when you use it (written as [FOO?] rather than\njust [FOO]), so it doesn\u2019t trigger an \"unknown text macro\" error before\nthrowing away the element anyway.\n\n  * The existence of a custom boilerplate element in the document, keyed by the boilerplate name, like boilerplate: FOO to match a <div boilerplate=FOO>...</div> element, so you can include text that pulls in a custom boilerplate only if that boilerplate is present.\n\nNormally the conditional attributes go on an existing element in your page,\nwhich\u2019ll show up in the output assuming it passes the tests. If there\u2019s not a\nnatural wrapper element, or adding such an element would mess with the\nsemantics or styling of the page, you can instead wrap the conditional content\nin an if-wrapper element.\n\nThe if-wrapper element is a standard block-level element that can contain any\nflow markup. It must have one of the conditional attributes. If it fails the\nconditions, it and its contents are removed from the document, as normal; if\nit passes the conditions, it is still removed from the document, but its\nchildren are left behind in its place.\n\nif-wrapper is still parsed as a standard unknown \"custom\" element by the HTML\nparser, and so can only appear in places where such elements are allowed; it\ncannot, for example, be used in the head of a document, or as a child of\ntable.\n\nIt\u2019s also considered \"block level\" by the Markdown parser. It can be used\ninline in text (tho you probably want to instead make the entire block\nconditional, for readability/editability), but it won\u2019t parse as intended if\nit\u2019s the very first content in a paragraph.\n\n### 12.5. Boilerplate Sections\n\nThe location of the boilerplate sections are indicated by elements with data-\nfill-with='' attributes. If the elements contain anything, they\u2019re emptied\nbefore being filled with the appropriate boilerplate. The valid data-fill-\nwith='' values are:\n\n  * \"table-of-contents\" for the ToC\n\n  * \"spec-metadata\" for the dl of spec data that\u2019s in the header of all of our specs\n\n  * \"abstract\" for the spec\u2019s abstract\n\n  * \"status\" for the status section\n\n  * \"logo\" for the W3C logo\n\n  * \"copyright\" for the W3C copyright statement\n\n  * \"warning\" for the relevant spec warning, if one was indicated in the metadata.\n\n  * \"references\" for the bibliography refs\n\n  * \"index\" for the index of terms (all the dfn elements in the spec)\n\n  * \"property-index\" for the table summarizing all properties defined in the spec\n\n  * \"idl-index\"\n\n  * \"issues-index\"\n\nAdditionally, \"header\" and \"footer\" boilerplate files are used to put content\nat the start and end of your document. Most or all of the above boilerplate\nsections should actually show up here, in the header and footer, rather than\nbeing manually specified in your source file.\n\n#### 12.5.1. Default Boilerplate\n\nSome sections listed above are generated by default; if you don\u2019t put an\nexplicitly data-fill-with container in your document, they\u2019ll generate anyway\n(if they have anything to fill themselves with), appending themselves to the\nend of the body. These sections are:\n\n  * all of the indexes: \"index\", \"property-index\", \"idl-index\", and \"issues-index\"\n\n  * \"references\"\n\nAgain, these will only auto-generate if there is something for them to do; if\nyour spec doesn\u2019t define any CSS properties, for example, the \"property-index\"\nboilerplate won\u2019t generate. If you want to suppress their generation even when\nthey do have something to do, use the Boilerplate metadata, like:\n\n    \n    \n    <pre class=\"metadata\"> Boilerplate: idl-index no, property-index no </pre>\n\n#### 12.5.2. Custom/Overriding Boilerplate\n\nSometimes a file-based boilerplate (see below) that is appropriate for most of\nthe specs in your group isn\u2019t quite right for your specific spec. Any\nboilerplate, file-based or Bikeshed-generated, can be overridden by custom\ntext of your choosing. Just add an element to your source document with the\ncontent you\u2019d like to show up in place of the offending boilerplate, and add a\nboilerplate=\"foo\" attribute to the container, specifying which boilerplate\nsection is being replaced.\n\nBikeshed will automatically remove that element from your document, and\ninstead inject its contents in place of the boilerplate that it would normally\nprovide.\n\nThe boilerplate attribute isn\u2019t limited to just the predefined boilerplate\nsection names; you can supply whatever section name you want, and if there\u2019s a\ndata-fill-with attribute somewhere in the document with the same name, the\nelement\u2019s contents will be moved there.\n\n### 12.6. Table of Contents\n\nThe headings in the spec are automatically numbered, and a table of contents\nautomatically generated.\n\nAny heading h2 to h6 (that is, skipping only the document-titling h1) is\nautomatically numbered by having a <span class='secno'>...</span> prepended to\nits contents. You can avoid this behavior for a heading and all of its\nsubsequent subheadings by adding class=\"no-num\" to the heading.\n\nSimilarly, a ToC is generated to match. Headings and their subheadings can be\nomitted from the ToC by adding class=\"no-toc\" to them.\n\nThe processor assumes that your headings are numbered correctly. It does not\nyet pay attention to the HTML outline algorithm, so using a bunch of h1s\nnested in sections will have very wrong effects.\n\nHeadings also automatically gain a self-link pointing to themselves, to enable\npeople to easily link to sections without having to return to the ToC.\n\n### 12.7. File-based Includes\n\nSeveral of the data-fill-with values (those that are static, rather than\ngenerated from in-document data) actually come from sets of .include files in\nthe include/ directory.\n\nThe base files are simply named \"foo.include\", where \"foo\" is the name of the\ndata-fill-with value. They can be specialized, however, to particular working\ngroups, and to particular document statuses.\n\nPutting the boilerplate in a folder named after the group, like\ncsswg/header.include, specializes it for that group (specified in the spec\u2019s\nmetadata). Adding a \"-STATUS\" to the filename specializes it for the status\n(same). These can be used together, like \"csswg/status-CR.include\".\n\nThe processor will first look for the \"group/foo-STATUS.include\" file, failing\nover to \"group/foo.include\", then \"foo-STATUS.include\", and finally\n\"foo.include\".\n\n### 12.8. Creating New Boilerplate Files For Your Organization\n\nBikeshed\u2019s default boilerplate generates a functional and reasonably\nattractive spec, but if your group has specific style requirements, you can\nproduce your own boilerplate files. This section is a basic guide to\ndeveloping these files.\n\nThe most important part of the boilerplate is the header.include and\nfooter.include file. These define the parts of the spec HTML that precede and\nfollow your actual spec content, so the source file can contain only the\nactual spec text, and all specs in the same organization can look similar.\n\nHere is a basic example header.include file:\n\n    \n    \n    <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"> <title>[TITLE]</title> <style> ... </style> </head> <body class=\"h-entry\"> <div class=\"head\"> <p data-fill-with=\"logo\"></p> <h1 id=\"title\" class=\"p-name no-ref\">[TITLE]</h1> <h2 id=\"subtitle\" class=\"no-num no-toc no-ref\">[LONGSTATUS], <span class=\"dt-updated\"><span class=\"value-title\" title=\"[CDATE]\">[DATE]</span> </h2> <div data-fill-with=\"spec-metadata\"></div> <div data-fill-with=\"warning\"></div> <p class='copyright' data-fill-with='copyright'></p> <hr title=\"Separator for header\"> </div> <div class=\"p-summary\" data-fill-with=\"abstract\"></div> <div data-fill-with=\"at-risk\"></div> <nav data-fill-with=\"table-of-contents\" id=\"toc\"></nav> <main>\n\nThis uses several of Bikeshed\u2019s boilerplating features:\n\n  * Text replacement, via the [FOO] macros. These macros are prepopulated by Bikeshed, either from metadata in the spec (like [TITLE]) or from environment data (like [DATE]). The full list of text macros can be found at \u00a7 12.3 Text Macros.\n\n  * Boilerplate pieces, via empty container elements with data-fill-with attributes. The list of Bikeshed-provided data-fill-with values can be found at \u00a7 12.5 Boilerplate Sections. At minimum, you want to include the abstract, table-of-contents, and spec-metadata sections here; they\u2019re all most useful at the top of the document.\n\n## 13\\. Railroad Diagrams\n\nA railroad diagram is a particular way of visually representing a structure\nroughly equivalent to regular expressions, or simple grammars. They tend to be\nmore readable and easier to grok than their equivalents written in terse\nregexps, and smaller than their equivalents written in explicit parsers.\n\nHere\u2019s an example of a railroad diagram, this one describing the syntax of\nvalid IDENT tokens in CSS:\n\nBikeshed supports the automatic generation of railroad diagrams from a\nsimplified DSL. To use, simply embed a diagram description in a <pre\nclass='railroad'> element - it\u2019ll get replaced by an appropriate svg element.\n\n### 13.1. The Diagram Language\n\nDiagrams are described by a custom DSL that somewhat resembles Python.\n\nA railroad diagram consists of a number of nested elements, each of which may\ncontain multiple children. Each element is specified as a command followed by\na colon, possibly followed by additional data (the prelude), and the element\u2019s\nchildren indented on following lines, like:\n\n    \n    \n    T: /* ZeroOrMore: N: anything but * followed by / T: */\n\nThis draws the following diagram:\n\nThe top-level elements are assumed to be a sequence of elements in the\ndiagram. Inside of a diagram, any of the elements may be used. Elements are\nsplit into two groups: containers and text.\n\nThe containers hold other elements, and modify their semantics:\n\n    * Sequence (And, Seq) - used for sequences of elements which must all be selected in order. Like concatenation in regexes. Takes 1 or more children.\n\n    * Stack - A sequence that arranges its children vertically. Useful for preventing diagrams from becoming excessively wide. Takes 1 or more children.\n\n    * Choice (Or) - used for a choice between elements. Like the | character in regexes. Takes 1 or more children. Optionally, the \"default\" index may be provided in the prelude (defaulting to 0).\n\n    * Optional (Opt)- used for an element that\u2019s optional. Like the ? character in regexes. Takes 1 child. Optionally, the word skip may be provided in the prelude to indicate that this term is skipped by default.\n\n    * OneOrMore (Plus)- used for an element that can be chosen one or more times. Like the + character in regexes. Takes 1 or 2 children: the first child is the element being repeated, and the optional second child is an element repeated between repetitions.\n\n    * ZeroOrMore (Star) - same as OneOrMore, but allows the element to be chosen zero times as well (skipped entirely). Like the * character in regexes. Like Optional, the keyword skip may be provided in the prelude to indicate that the \"default option\" is to skip it (repeat 0 times).\n\nThe text elements only contain text, not other elements. Their values are\ngiven in their preludes.\n\n    * Terminal (T) - represents a \"terminal\" in the grammar, something that can\u2019t be expanded any more. Generally represents literal text.\n\n    * NonTerminal (N) - represents a \"non-terminal\" in the grammar, something that can be expanded further.\n\n    * Comment (C) - represents a comment in the railroad diagram, to aid in reading or provide additional information. This is often used as the repetition value of a OneOrMore or ZeroOrMore to provide information about the repetitions, like how many are allowed.\n\n    * Skip (S) - represents nothing, an empty option. This is rarely necessary to use explicitly, as containers like Optional use it automatically, but it\u2019s occasionally useful when writing out a Choice element where one option is to do nothing.\n\n## 14\\. Source-File Processing: bikeshed source\n\nSometimes it\u2019s the source file you want to preprocess, if there is some\nfeature you want literally in your source that is hard or annoying to type in\nyourself. Bikeshed has some options for doing this as well.\n\nAll of these commands are accessed from the source sub-command, like bikeshed\nsource. You can run individual commands by specifying their relevant flag (see\nbikeshed source -h for a list), or run all of them by not passing any flags.\n\n### 14.1. Big Text\n\nWhen editing a large spec, it\u2019s easy to get lost in its length, and have to\nspend some time scrolling back and forth to find particular sections.\n\nThe Sublime Text editor has a special feature, the minimap, which shows an\nextremely-zoomed out version of your document while you scroll, so you can\nrecognize where you are in the file by the shape of your code. This can be\nmade even easier by putting extra-large \"ASCII art\" text in your source to\nlabel major sections, so they show up visibly in the minimap as section\nmarkers.\n\nBikeshed can auto-generate this \"ASCII art\" text for you with its --big-text\ncommand. Just add an HTML comment to your document on its own line that looks\nlike:\n\n    \n    \n    <!-- Big Text: Your Text -->\n\nIf you run bikeshed source --big-text, Bikeshed will replace it with a comment\nthat looks like:\n\n    \n    \n    <!-- Big Text: Your Text \u2588 \u2590\u258c \u2588\u2588\u2588\u258c \u2588\u258c \u2588\u258c \u2588\u2588\u2588\u2588\u258c \u2588\u2588\u2588\u2588\u2588\u258c \u2588\u2588\u2588\u2588\u2588\u258c \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u258c \u2590\u258c \u2588 \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588 \u2588 \u2588\u258c \u2588 \u2590\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588 \u2588 \u2588\u258c \u2590\u258c\u2588 \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u2588\u2588\u2588\u258c \u2588\u258c \u2588\u2588\u2588\u2588 \u2588 \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c\u2590\u2588 \u2588\u258c \u2588\u258c \u2588 \u2588 \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2590\u2588 \u2588\u258c \u2588\u258c \u2588 \u2588 \u2588\u258c \u2588\u258c \u2588\u2588\u2588\u258c \u2588\u2588\u2588\u258c \u2588\u258c \u2588\u258c \u2588\u258c \u2588\u2588\u2588\u2588\u2588\u258c \u2588 \u2588 \u2588\u258c -->\n\nWhich is clearly visible from Sublime\u2019s minimap!\n\nYou can also edit the first line to change the text, re-run bikeshed source\n--big-text, and it\u2019ll swap out the text art with your new text.\n\n## Appendix A: Bikeshed\u2019s \"InfoTree\" Format\n\nBikeshed\u2019s custom text formats attempt to be fairly regular; most of them\ninvolve specifying key/value pairs, and are line-based. For example,\nBikeshed\u2019s metadata format is one key/value pair per line, with a colon\nbetween the key and the value.\n\nThe InfoTree format, used by several things in Bikeshed, is similar. It\u2019s used\nwhen you need to specify data consisting of multiple key/value pairs, where\nit\u2019s common that multiple entries share some of that data. The InfoTree format\nmakes this easy to read, write, and maintain.\n\n### Specifying Information on a Single Line\n\nThe simplest way to provide a piece of information is by putting all the\nkey/value pairs on a single line. In the InfoTree format, this is done by\nputting a colon between the key and value, and separating the pairs with\nsemicolons. For example, here is an example of two \"anchor\" entries:\n\n    \n    \n    urlPrefix: https://encoding.spec.whatwg.org/; type: dfn; text: ascii whitespace urlPrefix: https://encoding.spec.whatwg.org/; type: dfn; text: utf-8\n\nThis specifies two entries, each with three keys: urlPrefix, type, and text.\n\n### Nesting Information to Share Pieces\n\nWhen multiple pieces of information share some key/value pairs, you can use\nnesting to indicate this, so you don\u2019t have to repeat yourself. Here\u2019s the\nsame two entries as before, but using nesting to share their common\ninformation:\n\n    \n    \n    urlPrefix: https://encoding.spec.whatwg.org/; type: dfn text: ascii whitespace text: utf-8\n\nJust like the previous, this defines two entries, each with three key/value\npairs. Now it\u2019s clearer, though, that the two entries share their urlPrefix\nand type data, and you only have to maintain the common data in one place.\n\n### Comments\n\nA line that starts with a # character (with any amount of preceding\nwhitespace) is a comment; it will be completely ignored for the purpose of\nparsing.\n\n### Additional Details\n\nThe order that keys are specified in is irrelevant. Feel free to rearrange\nthem for readability or more effective nesting.\n\nYou can specify the same key multiple times; the values will be collected into\nan array for later processing. (Each user of InfoTree will define whether\nmultiple values for a key is valid or not, and what it means.) The order that\nthe values appear in is preserved, as it might be important. (For example, in\nthe anchor format, multiple urlPrefix values are concatenated together, to\nhelp specify urls in multipage specs.)\n\nAdditional semicolons are silently ignored; in other words, empty entries get\ndropped, so you can put a final semicolon at the end of the line or not, as\nyou prefer.\n\n## Conformance\n\nConformance requirements are expressed with a combination of descriptive\nassertions and RFC 2119 terminology. The key words \u201cMUST\u201d, \u201cMUST NOT\u201d,\n\u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d,\n\u201cMAY\u201d, and \u201cOPTIONAL\u201d in the normative parts of this document are to be\ninterpreted as described in RFC 2119. However, for readability, these words do\nnot appear in all uppercase letters in this specification.\n\nAll of the text of this specification is normative except sections explicitly\nmarked as non-normative, examples, and notes. [RFC2119]\n\nExamples in this specification are introduced with the words \u201cfor example\u201d or\nare set apart from the normative text with class=\"example\", like this:\n\nThis is an example of an informative example.\n\nInformative notes begin with the word \u201cNote\u201d and are set apart from the\nnormative text with class=\"note\", like this:\n\nNote, this is an informative note.\n\n## Index\n\n### Terms defined by this specification\n\n  * [ABSTRACT], in \u00a7 12.3\n  * Abstract, in \u00a7 4\n  * [ABSTRACTATTR], in \u00a7 12.3\n  * Advisement Class, in \u00a7 4\n  * Algorithms, in \u00a7 5.5\n  * And, in \u00a7 13.1\n  * Assertion Class, in \u00a7 4\n  * Assume Explicit For, in \u00a7 4\n  * At Risk, in \u00a7 4\n  * bar(arg1, arg2), in \u00a7 9.5\n  * biblio autolink, in \u00a7 7.2\n  * Block Elements, in \u00a7 4\n  * Boilerplate, in \u00a7 4\n  * boolish, in \u00a7 4\n  * C, in \u00a7 13.1\n  * Can I Use URL, in \u00a7 4\n  * Canonical URL, in \u00a7 4\n  * [CDATE], in \u00a7 12.3\n  * Choice, in \u00a7 13.1\n  * Comment, in \u00a7 13.1\n  * Complain About, in \u00a7 4\n  * Custom Warning Text, in \u00a7 4\n  * Custom Warning Title, in \u00a7 4\n  * Dark Mode, in \u00a7 4\n  * [DATE], in \u00a7 12.3\n  * Date, in \u00a7 4\n  * [DATE-DMMY], in \u00a7 12.3\n  * [DATE-MMY], in \u00a7 12.3\n  * [DATE-MY], in \u00a7 12.3\n  * [DEADLINE], in \u00a7 12.3\n  * Deadline, in \u00a7 4\n  * Default Biblio Display, in \u00a7 4\n  * Default Highlight, in \u00a7 4\n  * Default Ref Status, in \u00a7 4\n  * dfn autolink, in \u00a7 7.1\n  * Die On, in \u00a7 4\n  * Die When, in \u00a7 4\n  * ED, in \u00a7 4\n  * Editor, in \u00a7 4\n  * Editor Term, in \u00a7 4\n  * exclude-if, in \u00a7 12.4\n  * Expires, in \u00a7 4\n  * External Infotrees, in \u00a7 4\n  * Favicon, in \u00a7 4\n  * flex-basis, in \u00a7 9.2\n  * Foo, in \u00a7 9.5\n  * Force Crossorigin, in \u00a7 4\n  * Former Editor, in \u00a7 4\n  * Group, in \u00a7 4\n  * [H1], in \u00a7 12.3\n  * H1, in \u00a7 4\n  * if-wrapper, in \u00a7 12.4\n  * Ignore Can I Use URL Failure, in \u00a7 4\n  * Ignored Terms, in \u00a7 4\n  * Ignored Vars, in \u00a7 4\n  * Ignore MDN Failure, in \u00a7 4\n  * Image Auto Size, in \u00a7 4\n  * Implementation Report, in \u00a7 4\n  * Include Can I Use Panels, in \u00a7 4\n  * include-if, in \u00a7 12.4\n  * Include MDN Panels, in \u00a7 4\n  * Indent, in \u00a7 4\n  * Infer CSS Dfns, in \u00a7 4\n  * Informative Classes, in \u00a7 4\n  * Inline Github Issues, in \u00a7 4\n  * [ISODATE], in \u00a7 12.3\n  * Issue Class, in \u00a7 4\n  * Issue Tracker Template, in \u00a7 4\n  * Issue Tracking, in \u00a7 4\n  * l, in \u00a7 5.4\n  * [LATEST], in \u00a7 12.3\n  * Level, in \u00a7 4\n  * Line Numbers, in \u00a7 4\n  * Link Defaults, in \u00a7 4\n  * Local Boilerplate, in \u00a7 4\n  * [LOGO], in \u00a7 12.3\n  * Logo, in \u00a7 4\n  * [LONGSTATUS], in \u00a7 12.3\n  * Mailing List, in \u00a7 4\n  * Mailing List Archives, in \u00a7 4\n  * manual autolink, in \u00a7 7.3\n  * Markup Shorthands, in \u00a7 4\n  * Max ToC Depth, in \u00a7 4\n  * Metadata Include, in \u00a7 4\n  * Metadata Order, in \u00a7 4\n  * N, in \u00a7 13.1\n  * No Abstract, in \u00a7 4\n  * no-autosize, in \u00a7 5.13\n  * No Editor, in \u00a7 4\n  * NonTerminal, in \u00a7 13.1\n  * Note Class, in \u00a7 4\n  * OneOrMore, in \u00a7 13.1\n  * Opaque Elements, in \u00a7 4\n  * Opt, in \u00a7 13.1\n  * Optional, in \u00a7 13.1\n  * Or, in \u00a7 13.1\n  * pathprefix, in \u00a7 11.1\n  * Plus, in \u00a7 13.1\n  * Prepare For TR, in \u00a7 4\n  * Previous Version, in \u00a7 4\n  * Remove Multiple Links, in \u00a7 4\n  * [REPOSITORY], in \u00a7 12.3\n  * Repository, in \u00a7 4\n  * Required IDs, in \u00a7 4\n  * Revision, in \u00a7 4\n  * S, in \u00a7 13.1\n  * Seq, in \u00a7 13.1\n  * Sequence, in \u00a7 13.1\n  * [SHORTNAME], in \u00a7 12.3\n  * Shortname, in \u00a7 4\n  * Skip, in \u00a7 13.1\n  * skip-existence-check, in \u00a7 11.1\n  * Slim Build Artifact, in \u00a7 4\n  * soft boolish, in \u00a7 4\n  * Stack, in \u00a7 13.1\n  * Star, in \u00a7 13.1\n  * [STATUS], in \u00a7 12.3\n  * Status, in \u00a7 4\n  * [STATUSTEXT], in \u00a7 12.3\n  * Status Text, in \u00a7 4\n  * T, in \u00a7 13.1\n  * Terminal, in \u00a7 13.1\n  * Test Suite, in \u00a7 4\n  * Text Macro, in \u00a7 4\n  * [TITLE], in \u00a7 12.3\n  * Title, in \u00a7 4\n  * Toggle Diffs, in \u00a7 4\n  * TR, in \u00a7 4\n  * Tracking Vector Alt Text, in \u00a7 4\n  * Tracking Vector Class, in \u00a7 4\n  * Tracking Vector Image, in \u00a7 4\n  * Tracking Vector Image Height, in \u00a7 4\n  * Tracking Vector Image Width, in \u00a7 4\n  * Tracking Vector Title, in \u00a7 4\n  * Translate IDs, in \u00a7 4\n  * Translation, in \u00a7 4\n  * URL, in \u00a7 4\n  * Use Dfn Panels, in \u00a7 4\n  * Use <i> Autolinks, in \u00a7 4\n  * [VERSION], in \u00a7 12.3\n  * [VSHORTNAME], in \u00a7 12.3\n  * Warning, in \u00a7 4\n  * Work Status, in \u00a7 4\n  * wpt, in \u00a7 11\n  * WPT Display, in \u00a7 4\n  * WPT Path Prefix, in \u00a7 4\n  * wpt-rest, in \u00a7 11.1\n  * [YEAR], in \u00a7 12.3\n  * ZeroOrMore, in \u00a7 13.1\n\n### Terms defined by reference\n\n  * [CSS-FLEXBOX-1] defines the following terms:\n\n    * flex container\n    * flex item\n    * main size\n  * [CSS-LOGICAL-1] defines the following terms:\n\n    * logical property group\n  * [HTML] defines the following terms:\n\n    * a\n    * audio\n    * body\n    * code\n    * dd\n    * del\n    * dfn\n    * dir\n    * dl\n    * dt\n    * h1\n    * h2\n    * h6\n    * head\n    * height\n    * hidden\n    * i\n    * image source\n    * img\n    * input\n    * lang\n    * link\n    * pixel density descriptor\n    * pre\n    * script\n    * section\n    * span\n    * src\n    * srcset\n    * style\n    * table\n    * title\n    * title (for html-global)\n    * var\n    * video\n    * width\n    * xmp\n  * [INFRA] defines the following terms:\n\n    * tracking vector\n  * [SVG2] defines the following terms:\n\n    * svg\n  * [WEB-ANIMATIONS-1] defines the following terms:\n\n    * animation type\n  * [WEBIDL] defines the following terms:\n\n    * DOMString\n    * long\n    * undefined\n\n## References\n\n### Normative References\n\n[CSS-FLEXBOX-1]\n\n    Tab Atkins Jr.; et al. CSS Flexible Box Layout Module Level 1. URL: https://drafts.csswg.org/css-flexbox-1/\n[CSS-LOGICAL-1]\n\n    Rossen Atanassov; Elika Etemad. CSS Logical Properties and Values Level 1. URL: https://drafts.csswg.org/css-logical-1/\n[CSS-VALUES-4]\n\n    Tab Atkins Jr.; Elika Etemad. CSS Values and Units Module Level 4. URL: https://drafts.csswg.org/css-values-4/\n[HTML]\n\n    Anne van Kesteren; et al. HTML Standard. Living Standard. URL: https://html.spec.whatwg.org/multipage/\n[INFRA]\n\n    Anne van Kesteren; Domenic Denicola. Infra Standard. Living Standard. URL: https://infra.spec.whatwg.org/\n[RFC2119]\n\n    S. Bradner. Key words for use in RFCs to Indicate Requirement Levels. March 1997. Best Current Practice. URL: https://datatracker.ietf.org/doc/html/rfc2119\n[SVG2]\n\n    Amelia Bellamy-Royds; et al. Scalable Vector Graphics (SVG) 2. URL: https://svgwg.org/svg2-draft/\n[WEB-ANIMATIONS-1]\n\n    Brian Birtles; et al. Web Animations. URL: https://drafts.csswg.org/web-animations-1/\n[WEBIDL]\n\n    Edgar Chen; Timothy Gu. Web IDL Standard. Living Standard. URL: https://webidl.spec.whatwg.org/\n\n## Property Index\n\nName| Value| Initial| Applies to| Inh.| %ages| Animation type| Canonical\norder| Computed value  \n---|---|---|---|---|---|---|---|---  \nflex-basis| content | <<'width'>>| auto| flex items| no| relative to the flex container\u2019s inner main size| length| per grammar| as specified, with lengths made absolute  \n  \n## IDL Index\n\n    \n    \n    interface Foo { undefined bar(long arg1, DOMString? arg2); };\n\n## Issues Index\n\nDefine the issues-list format. The -t output is already more than enough to\nactually work with, but it would still be good to describe it more fully. \u21b5\n\n", "frontpage": false}
