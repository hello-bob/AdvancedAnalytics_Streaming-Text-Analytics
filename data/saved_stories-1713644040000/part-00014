{"aid": "40097430", "title": "Show HN: To beat my impostor syndrome (and learn Bash), I read the RBENV GH repo", "url": "https://www.richie.codes/shell/", "domain": "richie.codes", "votes": 1, "user": "toomanyrichies", "posted_at": "2024-04-20 14:05:47", "comments": 0, "source_title": "The Shell", "source_text": "The Shell | Richie Codes\n\nThe Shell | Richie Codes\n\nRichie Codes\n\n# Introduction\n\n> \"The most effective debugging tool is still careful thought, coupled with\n> judiciously placed print statements.\" \u2014 Brian Kernighan, Unix for Beginners.\n\n> \"Don't chase your dreams. Humans are persistence predators. Follow your\n> dreams at a sustainable pace until they get tired and lie down.\" \u2013\n> @raven.corvids.club (on BlueSky)\n\n## Background\n\nWhat's the first thing that happens when you type bundle install into the\nterminal and hit \"Enter\"?\n\nThis is the question which set me off on this entire project. For those\nunfamiliar with the bundle install command, it comes from the Bundler library.\nBundler provides \"a consistent environment for Ruby projects by tracking and\ninstalling the exact gems and versions that are needed\", according to its\nwebsite.\n\nProfessionally, I work on a large Rails codebase with many contributors, and\nbundle install is one of the most common commands we find ourselves typing. I\nwas frustrated that I didn't know how this command worked under-the-hood.\nSince I'm a big believer that \"The best way to learn something is to explain\nit to someone else\", I decided to blog about what I was learning, as I learned\nit.\n\nAs it turns out, my deep-dive took me on a detour into the code for my Ruby\nversion manager. That version manager, named RBENV, creates shim files for\nevery Ruby command you enter, including bundle. Therefore, the first file I\nencountered in my deep-dive was this shim.\n\nIn the process of exploring this shim file (and RBENV's code in general), I\nended up learning a lot about the UNIX shell and Bash, the language RBENV is\nwritten in. At the risk of sounding like I'm backwards-rationalizing, I'd\nargue this is actually more useful than learning about Bundle, since Bash is\nmuch more broadly-used than Bundle.\n\nAlong the way, I kept a journal of all my wins, my frustrations, my questions,\nmy a-ha moments, etc. The document you're reading is an edited version of that\njournal.\n\n## Disclaimer\n\nThis is NOT an official guide to RBENV's codebase. I am *not* a member of the\nRBENV core team, nor is this guide endorsed by the core team in any way. It is\nsimply the (sometimes incorrect) educated guesses of a journeyman engineer who\nwants to attain mastery by teaching what he's learning. Please treat what you\nread here accordingly.\n\nIf you spot any errors or omissions, let me know at impostorsguides [at]\ngmail.\n\n## Table of Contents\n\n###\n\n    1. Part 1: The RBENV Shim\n\n      1. Introduction\n      2. Shebangs\n      3. The 'set' Command\n      4. The 'test' Command\n      5. Verbose Mode\n      6. Setting the Name of the User's Program\n      7. 'if'-blocks\n      8. 'for'-loops\n      9. 'case'-statements\n      10. Case 1: When we don't care about the args\n      11. Case 2: When the argument is a filepath\n      12. Setting the Correct Ruby Version\n      13. Executing The User's Command\n      14. Conclusion\n\n###\n\n    2. Part 2: The `rbenv` command (work-in-progress)\n\n      1. Introduction\n      2. The RBENV test harness\n      3. Setting debug mode via \"xtrace\"\n      4. Creating our first helper function, 'abort'\n      5. Dynamically loading helper libraries\n      6. Resolving paths\n      7. Setting environment variables\n      8. Importing plugins and sourcing configuration files\n      9. Making hooks available to commands\n      10. Running a specific RBENV command\n      11. rbenv Summary\n\n###\n\n    3. Part 3: The `rbenv init` command (work-in-progress)\n\n      1. Tests for `rbenv-init`\n      2. Completions, Local Vars, and Specifying The Shell\n      3. Printing init instructions\n      4. Initializing directories, setting env vars, sourcing completions, rehashing gems\n      5. Defining the \"rbenv\" shell function in `fish`\n      6. Tying up loose ends in the shell function\n      7. Why Use (Or Not Use) Shell Integration In RBENV\n      8. Pros And Cons Of The 4 Shells\n      9. init Summary\n\n###\n\n    4. Part 4: Other RBENV Commands (work-in-progress)\n\n      1. Commands- Introduction\n      2. 'rbenv --version'\n      3. rbenv-commands\n      4. rbenv-hooks\n      5. rbenv-completions\n      6. rbenv-exec\n      7. rbenv-global\n      8. rbenv-help\n      9. rbenv-local\n      10. rbenv-prefix\n      11. rbenv-rehash and rbenv-sh-rehash\n      12. rbenv-root\n      13. rbenv-sh-shell\n      14. rbenv-shims\n      15. rbenv-version\n      16. rbenv-version-file\n      17. rbenv-version-file-read\n      18. rbenv-version-file-write\n      19. rbenv-version-name\n      20. rbenv-version-origin\n      21. rbenv-versions\n      22. rbenv-whence\n      23. rbenv-which\n      24. rbenv-echo\n      25. Commands Summary\n\n###\n\n    5. Part 5: Infrastructure Files (work-in-progress)\n\n      1. Infrastructure- Introduction\n      2. The '.github/' directory\n      3. The bin/ directory\n      4. The completions/ directory\n      5. The rbenv.d/ directory\n      6. src/configure\n      7. Makefile.in\n      8. bash.h\n      9. Infrastructure Summary\n\n### Conclusion\n\nCopyright 2024 \u00a9 Richie Thomas. All rights reserved.\n\nFavicon by Freepik\n\n", "frontpage": false}
