{"aid": "40109825", "title": "Combining NMPC and AI for Rocket Control: A Python Simulation", "url": "https://github.com/jnz/PyRocketCraft", "domain": "github.com/jnz", "votes": 1, "user": "janosch9001", "posted_at": "2024-04-21 22:35:10", "comments": 0, "source_title": "GitHub - jnz/PyRocketCraft: Rocket Simulation, Reinforced Learning and Predictive Control", "source_text": "GitHub - jnz/PyRocketCraft: Rocket Simulation, Reinforced Learning and\nPredictive Control\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\njnz / PyRocketCraft Public\n\n  * Notifications\n  * Fork 4\n  * Star 22\n\nRocket Simulation, Reinforced Learning and Predictive Control\n\n22 stars 4 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# jnz/PyRocketCraft\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\njnzUpdate README.mdFeb 22, 2024eee0218 \u00b7 Feb 22, 2024Feb 22, 2024\n\n## History\n\n103 Commits  \n  \n### acados @ 285d382\n\n|\n\n### acados @ 285d382\n\n| add auto setup script and pyproj setup| Dec 21, 2023  \n  \n### img\n\n|\n\n### img\n\n| Delete img/compare.mp4| Feb 15, 2024  \n  \n### src\n\n|\n\n### src\n\n| Wait for a few seconds after touchdown| Feb 14, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| No functional change, pylint cosmetics| Jan 28, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Gitignore updated| Jan 26, 2024  \n  \n### .gitmodules\n\n|\n\n### .gitmodules\n\n| add acados as submodule| Dec 21, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Feb 22, 2024  \n  \n### env.sh\n\n|\n\n### env.sh\n\n| Fix: Don't overwrite existing LIBRARY_PATH| Jan 26, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| Added pytorch to dependencies| Jan 28, 2024  \n  \n### run_test.sh\n\n|\n\n### run_test.sh\n\n| run_tests: explicitly use python3| Jan 29, 2024  \n  \n### screencapture.sh\n\n|\n\n### screencapture.sh\n\n| Compare gif added| Feb 14, 2024  \n  \n### setup\n\n|\n\n### setup\n\n| setup script: leaner build of acados (without QPOASIS)| Dec 22, 2023  \n  \n### torch_nn_mpc-rocket-v2.pth\n\n|\n\n### torch_nn_mpc-rocket-v2.pth\n\n| Network is not stored as state_dict now| Jan 28, 2024  \n  \n## Repository files navigation\n\n## PyRocketCraft\n\nControl and land a rocket via deep learning or non-linear model predictive\ncontrol (NMPC) in a 3D physics environment (using the pybullet engine). The\nnon-linear MPC controller is using the acados library. The neural network\nparts are using pytorch.\n\nMail: jan@zwiener.org\n\nRun the program with\n\n    \n    \n    (source env.sh; ./src/rocketcraft.py)\n\n## Installation on Linux and macOS\n\nRun ./setup\n\n## Program structure\n\n    \n    \n    . \u251c\u2500\u2500 env.sh Setting up the env if coming back \u251c\u2500\u2500 torch_nn_mpc-rocket-vX.pth Trained network to imitate NMPC \u251c\u2500\u2500 setup Setting up the project for first use \u251c\u2500\u2500 src/expert_collect.py Generate data for training \u251c\u2500\u2500 src/expert_train.py Train the neural network \u251c\u2500\u2500 src/geodetic_toolbox.py Helper functions \u251c\u2500\u2500 src/modelrocket.urdf Pybullet visualization and physics definition of the rocket \u251c\u2500\u2500 src/mpc \u2502 \u2514\u2500\u2500 rocket_model.py NMPC model and system dynamics definition \u251c\u2500\u2500 src/nnpolicy.py Neural Network Controller \u251c\u2500\u2500 src/mpcpolicy.py Model Predictive Control Module \u251c\u2500\u2500 src/rocketcraft.py main entry point of application \u2514\u2500\u2500 src/simrocketenv.py Physics simulation with gym interface, using pybullet\n\n## Block diagram:\n\nThe main function in rocketcraft.py runs the NMPC code decoupled from the\nphysics simulation in a thread. The simulation part is in the simrocketenv\nfile that is using the OpenAI gym / Gymnasium interface and using pybullet in\nthe background for the heavy lifting of the physics simulation incl. collision\ndetection. The ctrl_thread_func will either call the MPCPolicy.py OR the\nNNPolicy.py. So either the rocket is controlled by a model predictive control\nalgorithm or a neural network.\n\n    \n    \n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 rocketcraft.py \u2502 \u2502 -------------- \u2502 'state' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502 simrocketenv.py \u2502 \u2502 pybullet \u2502 \u2502 main() \u2502 \u2502 --------------- \u2502\u2500\u2500\u25ba \u2502 -------- \u2502 \u2502 \u2502 'u' \u2502 \u2502 \u2502 \u2502 \u2502 \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 OpenAI gym env. \u2502 \u2502 Physics engine \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 Physics simulation \u2502 \u2502 and GUI \u2502 \u2502 \u25b2 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 'state' \u2502 \u2502 'u' \u2502 \u2502 \u25bc \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Controller Thread \u2502 'state' > \u2502 ctrl_thread_func()\u2502 < 'u' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\u25c4\u2500\u2500\u2500\u252c\u2500\u2500\u25ba\u2502 MPCPolicy.py \u2502\u25c4\u2500\u2500\u2500\u2500\u25ba \u2502 rocketmodel.py \u2502 \u2502 \u2502 \u2502 \u2502 -------------- \u2502 \u2502 -------------- \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 or\u2502 \u2502 NMPC controller \u2502 \u2502 NMPC model and \u2502 \u2502 \u2502 u = next(state) \u2502 \u2502 dynamics \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500\u25ba\u2502 NNPolicy.py \u2502 \u2514\u2500\u25ba \u2502 acados \u2502 \u2502 -------------- \u2502 \u2502 ------ \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Neural network \u2502 \u2502 Auto generated \u2502 \u2502 u = next(state) \u2502 \u2502 C-code \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n## Neural Network and Model Predictive Control\n\nDifferent control policies are available:\n\n  * NNPolicy\n  * MPCPolicy\n\nSwitch between the policies in rocketcraft.py:\n\n    \n    \n    # policy = MPCPolicy(initial_state) policy = NNPolicy()\n\nRun:\n\n    \n    \n    python3 src/expert_collect.py\n\nThis will write a expert_data.json file with training data (state vector,\ncontrol input (u) pairs, etc.). Then a new policy can be trained with this\ndata:\n\n    \n    \n    python3 src/expert_train.py\n\nThis will train a neural network based on the MPC data and generate a\ntorch_nn_mpc-rocket-vX.pth file that can be used by the NNPolicy class.\n\n## Model Predictive Control\n\nThe core \"magic\" of the model predictive control is located in the\nsrc/mpc/rocket_model.py file. Here the system dynamics are being described.\nThe heavy lifting of solving the MPC problem is performed by the awesome\nacados library.\n\n## Coordinate Frames\n\npybullet is using:\n\n  * World Frame (enu) East/North/Up(ENU): X = East, Y = North, Z = Up\n  * Body Frame (rosbody), X = Forward, Y = Left, Z = Up\n\n## Info\n\n2023-2024 Jan Zwiener. Free to use for academic research if this work is cited\nand linked. Contact author for commercial use.\n\n## About\n\nRocket Simulation, Reinforced Learning and Predictive Control\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n22 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n4 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * jnz Jan Zwiener\n  * MatthiasKainer Matthias Kainer\n\n## Languages\n\n  * Python 96.6%\n  * Shell 3.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
