{"aid": "40174158", "title": "Factorio Friday Facts #408 \u2013 Statistics improvements, Linux adventures", "url": "https://www.factorio.com/blog/post/fff-408", "domain": "factorio.com", "votes": 1, "user": "kgm", "posted_at": "2024-04-26 20:53:39", "comments": 0, "source_title": "Friday Facts #408 - Statistics improvements, Linux adventures | Factorio", "source_text": "Friday Facts #408 - Statistics improvements, Linux adventures | Factorio\n\nFactorio.com | Forums | Wiki | Mod Portal | API Docs\n\nLog in | Sign up\n\n\ud83c\uddfa\ud83c\udde6 We support the Ukrainian Red Cross.\n\nGame\n\nScreenshots Videos Content Artwork About us Buy Demo\n\nMerch\n\nBlog\n\nSupport\n\nHelp FAQ Presskit Contact\n\n## Friday Facts #408 - Statistics improvements, Linux adventures\n\nPosted by Klonan, raiguard on 2024-04-26\n\nHello, welcome once again to the world of facts.\n\n### StatisticsKlonan\n\nDo you love watching your production graphs grow as much as we do?\n\n#### Accumulator graph\n\nIt is a little bit tricky when you transition from Steam power to Solar panels\nand Accumulators, to know if you have enough capacity in the system to survive\nthe cold dark nights. Generally you might just wait until nighttime and see if\nyour factory blacksout, if so, build more solar and accumulators.\n\nIt would be helpful and convenient to see the statistics of accumulator charge\nlevels, so we added such information:\n\nThe main reason it was more critical, was that on Fulgora the production from\nlightning at nighttime is much less predictable, so it is much more important\nto see the timeline of the accumulator charge.\n\n#### Science graph\n\nYou can track science pack consumption in the production GUI, but that does\nnot account for things like productivity modules and the new research\nproductivity technologies.\n\nSo we added a new special item in the production statistics, that shows the\ntotal final 'Science' that is produced.\n\n#### Per surface production\n\nIt was tolerable in the first days of playtesting with planets and platforms\nthat all the production statistics were global. However when you want to get\nmore and more precise with your gameplay and trying optimize each part, it\nbecomes quite necessary.\n\nFor instance on platforms, we need to know if we are producing enough fuel and\nammo to keep the ride going:\n\nAnd its super helpful when checking if a specific planet producing enough when\nsome items are crafted in many places.\n\nWe also added a checkbox to switch to a 'Global statistics' view, so all the\npossibilities are available for the player.\n\n#### Quality graph\n\nGoing deeper still, we want to dissect our production by what quality the\nproduced items are.\n\nSo what do you think? Are there any other statistics improvements you can\nthink about for 2.0?\n\n### Linux adventuresraiguard\n\nI have appeared in a few FFFs by now but I have never formally introduced\nmyself. My name is raiguard. I have been playing Factorio since June 2017,\nmaking mods for the game since the 0.17 release in March 2019, and I finally\njoined Wube in March 2023. My primary roles at the company are expansion\nprogramming and Linux support, as well as being an advocate for the modding\ncommunity. I have been daily-driving Linux for multiple years and have fallen\never deeper into the black hole of customization and minimalism.\n\n\"Why don't most games support macOS and Linux?\" is a sentiment I often see\nechoed across the internet. Supporting a new platform is a lot more than just\nchanging some flags and hitting compile. Windows, macOS, Linux, and the\nNintendo Switch all use different compilers, different implementations of the\nC++ standard library, and have different implementation quirks, bugs, and\nfeatures. You need to set up CI for the new platform, expand your build system\nto support the new compiler(s) and architecture(s), and have at least one\nperson on the team that cares enough about the platform to actively maintain\nit. If you are a video game, you will likely need to add support for another\ngraphics backend (Vulkan or OpenGL) as well, since DirectX is Windows-\nexclusive.\n\nMany developers will take one look at the Windows market share and decide that\nit is not worth the trouble to support other platforms. Also, with the\nmeteoric rise of the Steam Deck and Proton, it is easier than ever for game\ndevelopers to ignore Linux support because Valve does some black magic that\nlets their game run anyway.\n\nFactorio supports macOS and Linux so well because there has always been\nsomeone at Wube who actively uses these platforms and is willing to take on\nthe burden of supporting it. Our native Apple Silicon support is a great\nexample of this. Today, I will take you through some of the adventures I've\nhad with maintaining Factorio's Linux support.\n\n#### Wayland\n\nMy first self-appointed task after joining the team was to add Wayland support\nto the game. Wayland is a new display protocol that has been in development to\nreplace the antiquated and insecure X11 system. Modern Linux distributions are\nbeginning to switch to Wayland as default, so supporting it in Factorio is\nparamount.\n\nWe utilize the SDL library which neatly handles most low-level system\ninteractions and abstracts them into a common interface. SDL has support for\nWayland, so all that I theoretically needed to do was build SDL with Wayland\nenabled and it would \"just work.\" However, it's not quite a simple plug-and-\nplay. Wayland provides \"protocols\" in the form of XML files that you then use\nthe wayland-scanner binary to convert into C program and header files.\n\nBeing relatively new to C++ at the time, my initial solution was convoluted\nand involved checking the generated Wayland protocols into our source tree, to\nbe manually regenerated every time we updated SDL. A few months ago, armed\nwith a years' worth of experience, I improved this workflow to automatically\ngenerate the files as a part of the build process, so they are always up-to-\ndate with the protocol XML files that SDL ships with.\n\nFactorio has supported Wayland since 1.1.77, but it needs to be explicitly\nenabled by setting SDL_VIDEODRIVER=wayland in your environment. For Factorio\n2.0 I added a dropdown to select your preference in the GUI:\n\nJuxtaposeJS\n\nX11 (left) vs. Wayland (right) with the desktop display scale set to 125%.\nNotice how the game renders at the display's native resolution when running\nunder Wayland.\n\n#### Client-side window decorations\n\nOnce Wayland support was implemented, I received a bug report that the window\nwas missing a titlebar and close buttons (called \"window decorations\") when\nrunning on GNOME. Most desktop environments will allow windows to supply their\nown decorations if they wish but will provide a default implementation on the\nserver side as an alternative. GNOME, in their infinite wisdom, have decided\nthat all clients must provide their own decorations, and if a client does not,\nthey will simply be missing. I disagree with this decision; Factorio does not\nneed to provide decorations on any other platform, nay, on any other desktop\nenvironment, but GNOME can (ab)use its popularity to force programs to conform\nto its idiosyncrasies or be left behind.\n\nTo fix this, I had to bring in another dependency, libdecor. It functions, and\nSDL even has support for it, but a video game shouldn't have to supply window\ndecorations in the first place.\n\nThe game has decorations now, but the theme doesn't match. Thanks GNOME!\n\n#### Window resizing seizures\n\nA video is worth more than a thousand words:\n\nPHOTOSENSITIVITY WARNING: Rapid flashing images.\n\nI use the Sway window manager, and a particularity of this window manager is\nthat it will automatically resize floating windows to the size of their last\nsubmitted frame. This has unveiled an issue with our graphics stack: it takes\nthe game three frames to properly respond to a window resize. The result is a\nrapid tug-of-war, with Sway sending a ton of resize events and Factorio\nresponding with outdated framebuffer sizes, causing the chaos captured above.\n\nI spent two full days staring at our graphics code but could not come up with\nan explanation as to why this is happening, so this work is still ongoing.\nSince this issue only happens when running the game on Wayland under Sway,\nit's not a large priority, but it was too entertaining not to share.\n\n#### Dynamically linked libraries\n\nIn a C++ program there are three ways to load/include a library:\n\n  * By including it in your source binary (static linking).\n  * Having the system load it when your program starts (dynamic linking).\n  * Your program loads it explicitly after startup (\"dynamic loading\" or what I call \"runtime linking\").\n\nWe have many libraries, such as SDL, FontStash, and Lua, that are statically\nlinked, but Factorio 1.1 also has many dynamically linked libraries:\n\n    \n    \n    rai@tantal ~/games/factorio $ ldd bin/x64/factorio linux-vdso.so.1 (0x00007ffc123b1000) libdl.so.2 => /lib64/libdl.so.2 (0x00007fc182f70000) librt.so.1 => /lib64/librt.so.1 (0x00007fc182f6b000) libresolv.so.2 => /lib64/libresolv.so.2 (0x00007fc182f5a000) libX11.so.6 => /lib64/libX11.so.6 (0x00007fc182e13000) libXext.so.6 => /lib64/libXext.so.6 (0x00007fc182dff000) libGL.so.1 => /lib64/libGL.so.1 (0x00007fc182d78000) libXinerama.so.1 => /lib64/libXinerama.so.1 (0x00007fc182d71000) libXrandr.so.2 => /lib64/libXrandr.so.2 (0x00007fc182d64000) libXcursor.so.1 => /lib64/libXcursor.so.1 (0x00007fc182d57000) libasound.so.2 => /lib64/libasound.so.2 (0x00007fc182c43000) libpulse.so.0 => /lib64/libpulse.so.0 (0x00007fc182bf1000) libpulse-simple.so.0 => /lib64/libpulse-simple.so.0 (0x00007fc182bea000) libm.so.6 => /lib64/libm.so.6 (0x00007fc182b07000) libpthread.so.0 => /lib64/libpthread.so.0 (0x00007fc182b02000) libc.so.6 => /lib64/libc.so.6 (0x00007fc182920000) /lib64/ld-linux-x86-64.so.2 (0x00007fc182f91000) libxcb.so.1 => /lib64/libxcb.so.1 (0x00007fc1828f5000) libGLX.so.0 => /lib64/libGLX.so.0 (0x00007fc1828c2000) libGLdispatch.so.0 => /lib64/libGLdispatch.so.0 (0x00007fc18280a000) libXrender.so.1 => /lib64/libXrender.so.1 (0x00007fc1827fc000) libXfixes.so.3 => /lib64/libXfixes.so.3 (0x00007fc1827f4000) libpulsecommon-16.1.so => /usr/lib64/pulseaudio/libpulsecommon-16.1.so (0x00007fc18276f000) libdbus-1.so.3 => /lib64/libdbus-1.so.3 (0x00007fc18271a000) libXau.so.6 => /lib64/libXau.so.6 (0x00007fc182714000) libsndfile.so.1 => /lib64/libsndfile.so.1 (0x00007fc182694000) libsystemd.so.0 => /lib64/libsystemd.so.0 (0x00007fc1825a1000) libasyncns.so.0 => /lib64/libasyncns.so.0 (0x00007fc182599000) libgsm.so.1 => /lib64/libgsm.so.1 (0x00007fc18258a000) libFLAC.so.12 => /lib64/libFLAC.so.12 (0x00007fc182524000) libvorbis.so.0 => /lib64/libvorbis.so.0 (0x00007fc1824f5000) libvorbisenc.so.2 => /lib64/libvorbisenc.so.2 (0x00007fc182448000) libopus.so.0 => /lib64/libopus.so.0 (0x00007fc1823ec000) libogg.so.0 => /lib64/libogg.so.0 (0x00007fc1823e2000) libmpg123.so.0 => /lib64/libmpg123.so.0 (0x00007fc182385000) libmp3lame.so.0 => /lib64/libmp3lame.so.0 (0x00007fc18230d000) libcap.so.2 => /lib64/libcap.so.2 (0x00007fc182303000) liblz4.so.1 => /lib64/liblz4.so.1 (0x00007fc1822df000) liblzma.so.5 => /lib64/liblzma.so.5 (0x00007fc1822ac000) libzstd.so.1 => /lib64/libzstd.so.1 (0x00007fc1821f0000) libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007fc1821cc000)\n\nAmong these libraries are X11 and PulseAudio, which are being deprecated in\nfavor of Wayland and PipeWire respectively. This causes a compatibility\nnightmare because if any dynamic dependencies are missing, the game will not\nlaunch. This obviously will not do!\n\nThe presence of these dependencies confused me because we utilize SDL for most\nof the low-level syscalls, audio, and video, and SDL relies entirely on\nruntime linking. An investigation revealed the source of most of these\ndependencies to be Allegro, the low-level library that we utilized for most of\nFactorio's alpha phase but we have since replaced with SDL. The only remaining\nuse of Allegro in 2.0 was as a secondary audio backend in case a user\nexperienced issues with the SDL audio backend, but the SDL backend has been\nstable for a very long time, so the time was ripe for its removal. This\neliminated 123,024 lines of code from the game and drastically reduced the\nnumber of dynamic dependencies:\n\n    \n    \n    rai@tantal ~/dev/wube/factorio (master) $ ldd bin/FinalReleasex64Clang/factorio linux-vdso.so.1 (0x00007fff96ff2000) libresolv.so.2 => /lib64/libresolv.so.2 (0x00007fd2df8a9000) libm.so.6 => /lib64/libm.so.6 (0x00007fd2df7c8000) libc.so.6 => /lib64/libc.so.6 (0x00007fd2df5e6000) /lib64/ld-linux-x86-64.so.2 (0x00007fd2df8d6000)\n\n#### Clipboard woes\n\nIt turns out that Allegro was not the only thing requiring us to link against\nX11. Back in 2017, we received a bug report that a user could not paste large\nblueprint strings into the game, and Oxyd fixed this by adding support for X11\nincremental clipboard transfers to our GUI backend's clipboard handler.\n\nI was hoping to utilize SDL's built-in clipboard functionality, but\nunfortunately SDL does not support incremental transfers. This means there are\nthree options:\n\n  * Continue linking against X11, requiring users to install X11 on their system to be able to run the game (I don't want to mess with static linking).\n  * Figure out how to do runtime linking and implement that.\n  * Upstream our incremental transfers code into SDL so we can leverage SDL's clipboard functions and other SDL-based games can benefit from our work.\n\nAs you might guess, I chose the third option. The work to upstream our code is\nongoing but should be done in time for Factorio 2.0's release.\n\n#### Asynchronous saving\n\nMany of you might not be aware that Factorio has support for saving your game\nin the background, without freezing while it does so. This feature is tucked\naway in the hidden settings and only works on macOS and Linux. This is one\ngreat example of taking advantage of a platform's features to benefit the\ngame, which would not be available to us if we simply went through Proton.\n\nAsynchronous saving works by using the fork syscall to essentially duplicate\nthe game. The primary instance - the one you interact with - continues\nplaying, but the newly forked child runs the saving process then exits on\ncompletion. I have used it for many years and have never had issues, but the\nsetting remains hidden because there are a few unsolved problems with it and\nit requires a significant amount of RAM to work.\n\nI would love to promote this feature away from its hidden status in 2.0. If\nyou are playing on Linux or macOS, please enable asynchronous saving\n(ctrl+alt+click Settings -> \"The rest\" -> non-blocking-saving) and report any\nissues you find. I am particularly interested in reproducing a seemingly\nrandom freeze that occurs at the end of the process. Thank you in advance!\n\n#### Continuing development\n\nThis has been but a glimpse of the work I have been doing to ensure Factorio\non Linux is the best that it can be. There are still many open bug reports and\nother issues but I am generally happy with the state of things and can\nconfidently say that Factorio has great Linux support.\n\nAs always, submit a text buffer with your feedback to the usual places.\n\nDiscuss on our forums Discuss on Reddit Subscribe by email\n\nTerms of Service|Privacy|Imprint|Presskit|Contact|RSS|Jobs\n\nCopyright \u00a9 2015 - 2024 Wube Software - all rights reserved.\n\n", "frontpage": false}
