{"aid": "40155220", "title": "x86 CPU performance features demos", "url": "https://github.com/MC-DeltaT/cpu-performance-demos", "domain": "github.com/mc-deltat", "votes": 2, "user": "mcdeltat", "posted_at": "2024-04-25 09:16:50", "comments": 0, "source_title": "GitHub - MC-DeltaT/cpu-performance-demos: Micro-benchmarks demonstrating low-level concepts that affect performance.", "source_text": "GitHub - MC-DeltaT/cpu-performance-demos: Micro-benchmarks demonstrating low-\nlevel concepts that affect performance.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nMC-DeltaT / cpu-performance-demos Public\n\n  * Notifications\n  * Fork 0\n  * Star 0\n\nMicro-benchmarks demonstrating low-level concepts that affect performance.\n\n### License\n\nGPL-3.0 license\n\n0 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# MC-DeltaT/cpu-performance-demos\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nMC-DeltaTReadme fixupSep 8, 20232cce00f \u00b7 Sep 8, 2023Sep 8, 2023\n\n## History\n\n50 Commits  \n  \n### branch-prediction\n\n|\n\n### branch-prediction\n\n| Remove % prefix from registers| Sep 7, 2023  \n  \n### cache-efficiency\n\n|\n\n### cache-efficiency\n\n| Finished cache efficiency demo explanation| Sep 8, 2023  \n  \n### indirect-jump-prediction\n\n|\n\n### indirect-jump-prediction\n\n| Use lowercase for register names| Sep 7, 2023  \n  \n### loop-carried-dependency\n\n|\n\n### loop-carried-dependency\n\n| Remove % prefix from registers| Sep 7, 2023  \n  \n### macro-fusion\n\n|\n\n### macro-fusion\n\n| Remove % prefix from registers| Sep 7, 2023  \n  \n### mov-elimination\n\n|\n\n### mov-elimination\n\n| Remove % prefix from registers| Sep 7, 2023  \n  \n### out-of-order-execution\n\n|\n\n### out-of-order-execution\n\n| Remove % prefix from registers| Sep 7, 2023  \n  \n### register-renaming\n\n|\n\n### register-renaming\n\n| Use lowercase for register names| Sep 7, 2023  \n  \n### superscalar-execution\n\n|\n\n### superscalar-execution\n\n| Remove % prefix from registers| Sep 7, 2023  \n  \n### zeroing-idiom\n\n|\n\n### zeroing-idiom\n\n| Use lowercase for register names| Sep 7, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Jan 21, 2023  \n  \n### Primer.md\n\n|\n\n### Primer.md\n\n| Cache explanation in primer| Sep 4, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Readme fixup| Sep 8, 2023  \n  \n## Repository files navigation\n\n# CPU Performance Demonstrations\n\nA collection of microbenchmarks demonstrating low-level concepts and\noptimisations that affect performance on modern x86 CPUs. Each demonstration\nexamines a single concept in isolation to make learning easier.\n\nWarning: CPU microarchitecture ahead!\n\n## How To Start\n\nIf you are new to the world of CPU architecture and microarchitecture, you may\nwant to read Primer.md, which covers some basic concepts that are prerequisite\nknowledge for many of the demonstrations.\n\nSome demonstrations inherently build on topics discussed in other\ndemonstrations. You may want to try the demonstrations in this order to\nminimise confusion:\n\n  1. Superscalar execution\n  2. Out-of-order execution\n  3. Branch prediction\n  4. Indirect jump prediction\n  5. Loop-carried dependencies\n  6. Register renaming\n  7. MOV elimination\n  8. Zeroing idioms\n  9. Macro-op fusion\n  10. Cache efficiency\n\nEnjoy!\n\n## Notes\n\n### Performance disclaimer\n\nNaturally, the exact results of microbenchmarks depend significantly on your\nCPU's microarchitecture - demonstrating microarchitecture in a\nmicroarchitecture-agnostic manner is difficult. Some factors that may\ncontribute to differing results include:\n\n  * Feature is not implemented on all CPUs.\n  * Particular instruction latencies are assumed.\n  * A minimum amount of parallel execution capacity (execution ports) is assumed.\n\nThe demonstrations were written and tested with Intel x86-64 CPUs from Skylake\nonwards in mind. I have tried my best to indicate in each demonstration\nbroadly which CPUs are supported and what assumptions are made.\n\n### What's this \"Skylake JCC alignment issue\"?\n\nIn almost every demonstration's assembly code, you will see something like\nthis:\n\n    \n    \n    .p2align 4 # Skylake JCC alignment issue (unimportant) loop: ...\n\nThe .p2align enforces memory address alignment on the start of the loop. This\nalignment ensures the loop's trailing jump instruction is placed correctly to\navoid a performance pessimisation on some Intel CPUs (see Intel's paper for\ndetails). Please ignore this issue - it does not affect the correctness of the\ndemonstrations.\n\n## About\n\nMicro-benchmarks demonstrating low-level concepts that affect performance.\n\n### Resources\n\nReadme\n\n### License\n\nGPL-3.0 license\n\nActivity\n\n### Stars\n\n0 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Assembly 81.4%\n  * Makefile 18.6%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
