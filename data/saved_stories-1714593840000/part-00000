{"aid": "40221059", "title": "Replace Xcode with Neovim using this open-source plugin. Check it out", "url": "https://github.com/wojciech-kulik/xcodebuild.nvim", "domain": "github.com/wojciech-kulik", "votes": 1, "user": "snippety", "posted_at": "2024-05-01 09:13:52", "comments": 0, "source_title": "GitHub - wojciech-kulik/xcodebuild.nvim: Neovim plugin to Build, Debug, and Test applications created for Apple devices (iOS, macOS, watchOS, etc.)", "source_text": "GitHub - wojciech-kulik/xcodebuild.nvim: Neovim plugin to Build, Debug, and\nTest applications created for Apple devices (iOS, macOS, watchOS, etc.)\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nwojciech-kulik / xcodebuild.nvim Public\n\n  * Sponsor\n  * Notifications\n  * Fork 7\n  * Star 363\n\nNeovim plugin to Build, Debug, and Test applications created for Apple devices\n(iOS, macOS, watchOS, etc.)\n\n### License\n\nMIT license\n\n363 stars 7 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# wojciech-kulik/xcodebuild.nvim\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n21 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nwojciech-kulikfix: improved LSP restart & nvim-lspconfig integration (#145)Apr\n29, 2024e6250f9 \u00b7 Apr 29, 2024Apr 29, 2024\n\n## History\n\n267 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| chore: added tests for quick module (#113)| Mar 25, 2024  \n  \n### doc\n\n|\n\n### doc\n\n| feat: showing live logs in the buffer (#136)| Apr 14, 2024  \n  \n### lua/xcodebuild\n\n|\n\n### lua/xcodebuild\n\n| fix: improved LSP restart & nvim-lspconfig integration (#145)| Apr 29, 2024  \n  \n### media\n\n|\n\n### media\n\n| docs: refreshed screenshots| Mar 27, 2024  \n  \n### scripts\n\n|\n\n### scripts\n\n| feat: added integration with neo-tree.nvim (#117)| Mar 28, 2024  \n  \n### specs\n\n|\n\n### specs\n\n| chore: added tests for quick module (#113)| Mar 25, 2024  \n  \n### tools\n\n|\n\n### tools\n\n| feat: improved performance of adding project files (#103)| Mar 20, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| chore: added tests for quick module (#113)| Mar 25, 2024  \n  \n### .luacheckrc\n\n|\n\n### .luacheckrc\n\n| chore: added luacheck and fixed warnings| Feb 27, 2024  \n  \n### .luarc.json\n\n|\n\n### .luarc.json\n\n| chore: project/manager.lua refactoring + added tests (#86)| Mar 9, 2024  \n  \n### .stylua.toml\n\n|\n\n### .stylua.toml\n\n| chore: renamed stylua.toml to .stylua.toml| Feb 27, 2024  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| feat: added support for lazy.nvim checkhealth command + updated docs (#...|\nFeb 28, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Nov 1, 2023  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| feat: added support for lazy.nvim checkhealth command + updated docs (#...|\nFeb 28, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| feat: showing live logs in the buffer (#136)| Apr 14, 2024  \n  \n## Repository files navigation\n\n# \ud83d\udee0\ufe0f xcodebuild.nvim\n\nA plugin designed to let you migrate your app development from Xcode to\nNeovim. It provides all essential actions for development including building,\ndebugging, and testing.\n\n## \u2728 Features\n\n  * Support for iOS, iPadOS, watchOS, tvOS, visionOS, and macOS.\n  * Project-based configuration.\n  * Project Manager to deal with project files without using Xcode.\n  * Test Explorer to visually present a tree with all tests and results.\n  * Built using official command line tools like xcodebuild and xcrun simctl.\n  * Actions to build, run, debug, and test apps on simulators and physical devices.\n  * Buffer integration with test results (code coverage, success & failure marks, duration, extra diagnostics).\n  * Code coverage report with customizable levels.\n  * Advanced log parser to detect all errors, warnings, and failing tests.\n  * nvim-tree, neo-tree, and oil.nvim integration that automatically reflects all file tree operations and updates Xcode project.\n  * nvim-dap integration to let you easily build, run, and debug apps.\n  * nvim-dap-ui integration to show app logs in the console window.\n  * lualine.nvim integration to show selected device, test plan, and other project settings.\n  * swift-snapshot-testing integration to present diff views for failing snapshot tests.\n  * Quick integration to show test results for tests written using Quick framework.\n  * Auto-detection of the target membership for new files.\n  * Picker with all available plugin actions.\n  * Highly customizable (many config options, auto commands, highlights, and user commands).\n\n## \ud83c\udf33 File Tree Integration\n\nXcodebuild.nvim is integrated with nvim-tree, neo-tree, and oil.nvim to let\nyou manage your project and files in a convenient way.\n\nEvery change in the file tree presented by these plugins will be automatically\nreflected in the Xcode project file.\n\nAdditionally, the Project Manager will try predicting targets for newly\ncreated files based on their location. If you prefer to select targets\nmanually, you can always disable it in the configuration using\nintegrations.nvim_tree.guess_target or integrations.oil_nvim.guess_target.\n\n## \u26a1\ufe0f Requirements\n\n##### Neovim environment\n\n  * Neovim 0.9.5+\n  * telescope.nvim to present pickers.\n  * nui.nvim to present floating code coverage report.\n  * nvim-tree, neo-tree, or oil.nvim to visually manage your project files.\n  * nvim-dap and nvim-dap-ui to debug apps.\n  * nvim-treesitter + Swift parser to show test results for tests written using Quick framework.\n\n##### External tools\n\n  * xcbeautify to format Xcode logs (you can set a different tool or disable formatting in the config).\n  * Xcodeproj to manage project files within Neovim.\n  * Ruby to use Xcodeproj gem.\n  * pymobiledevice3 to debug on physical devices and/or run apps on devices below iOS 17.\n  * xcode-build-server to make LSP work properly with xcodeproj/xcworkspace.\n  * codelldb to debug applications.\n  * Xcode to build, run, and test apps. Make sure that xcodebuild and xcrun simctl work correctly. Tested with Xcode 15.\n\n##### Availability of features\n\nDevice (iOS <17)| Device (iOS 17+)| via Network (<17 / 17+)| Simulator| MacOS  \n---|---|---|---|---  \nbuild| \ud83d\udee0\ufe0f| \u2705| \u274c / \u2705| \u2705| \u2705  \n(un)install| \ud83d\udee0\ufe0f| \u2705| \ud83d\udee0\ufe0f / \u2705| \u2705| \u274c  \nlaunch| \ud83d\udee0\ufe0f| \u2705| \ud83d\udee0\ufe0f / \u2705| \u2705| \u2705  \nrun tests| \ud83d\udee0\ufe0f| \u2705| \u274c / \u2705| \u2705| \u2705  \ndebug| \ud83d\udee0\ufe0f| \ud83d\udd10 \ud83d\udee0\ufe0f| \u274c| \u2705| \u2705  \ndebug tests| \u274c| \u274c| \u274c| \u2705| \u2705  \napp logs| \ud83e\udeb2| \ud83e\udeb2| \u274c| \u2705| \ud83e\udeb2  \n  \n\ud83d\udd10 - requires passwordless sudo permission for tools/remote_debugger script\n(see below).\n\n\ud83d\udee0\ufe0f - available if pymobiledevice3 is installed.\n\n\ud83e\udeb2 - available while debugging.\n\n## \ud83d\udce6 Installation\n\nInstall the plugin using your preferred package manager.\n\n### \ud83d\udca4 lazy.nvim\n\n    \n    \n    return { \"wojciech-kulik/xcodebuild.nvim\", dependencies = { \"nvim-telescope/telescope.nvim\", \"MunifTanjim/nui.nvim\", \"nvim-tree/nvim-tree.lua\", -- (optional) to manage project files \"stevearc/oil.nvim\", -- (optional) to manage project files \"nvim-treesitter/nvim-treesitter\", -- (optional) for Quick tests support (required Swift parser) }, config = function() require(\"xcodebuild\").setup({ -- put some options here or leave it empty to use default settings }) end, }\n\nInstall external tools:\n\n    \n    \n    brew install xcode-build-server brew install xcbeautify brew install ruby gem install xcodeproj python3 -m pip install -U pymobiledevice3\n\nTo quickly install all required tools you can run:\n\n    \n    \n    make install\n\nTip\n\nMake sure to check out Tips & Tricks!\n\nYou will find there a collection of useful tips & tricks for development in\nNeovim.\n\n## \ud83d\udcf1 Setup Neovim For iOS Development\n\nI wrote an article that gathers all the steps required to set up Neovim from\nscratch to develop iOS and macOS apps:\n\nThe Complete Guide To iOS & macOS Development In Neovim\n\nYou can also check out the sample Neovim configuration that I prepared for iOS\ndevelopment: ios-dev-starter-nvim\n\n## \ud83d\ude80 Usage\n\nMake sure to open your project's root directory and run XcodebuildSetup to\nconfigure it. The plugin needs several information like project file, scheme,\nconfig, device, and test plan to be able to run commands.\n\nRemember, that all the information are available in the help :h xcodebuild.\nEvery function is documented and described both in the help and in the code.\n\n### \ud83d\udd27 Commands\n\n### \u2318 Sample Key Bindings\n\n    \n    \n    vim.keymap.set(\"n\", \"<leader>X\", \"<cmd>XcodebuildPicker<cr>\", { desc = \"Show Xcodebuild Actions\" }) vim.keymap.set(\"n\", \"<leader>xf\", \"<cmd>XcodebuildProjectManager<cr>\", { desc = \"Show Project Manager Actions\" }) vim.keymap.set(\"n\", \"<leader>xb\", \"<cmd>XcodebuildBuild<cr>\", { desc = \"Build Project\" }) vim.keymap.set(\"n\", \"<leader>xB\", \"<cmd>XcodebuildBuildForTesting<cr>\", { desc = \"Build For Testing\" }) vim.keymap.set(\"n\", \"<leader>xr\", \"<cmd>XcodebuildBuildRun<cr>\", { desc = \"Build & Run Project\" }) vim.keymap.set(\"n\", \"<leader>xt\", \"<cmd>XcodebuildTest<cr>\", { desc = \"Run Tests\" }) vim.keymap.set(\"v\", \"<leader>xt\", \"<cmd>XcodebuildTestSelected<cr>\", { desc = \"Run Selected Tests\" }) vim.keymap.set(\"n\", \"<leader>xT\", \"<cmd>XcodebuildTestClass<cr>\", { desc = \"Run Current Test Class\" }) vim.keymap.set(\"n\", \"<leader>x.\", \"<cmd>XcodebuildTestRepeat<cr>\", { desc = \"Repeat Last Test Run\" }) vim.keymap.set(\"n\", \"<leader>xl\", \"<cmd>XcodebuildToggleLogs<cr>\", { desc = \"Toggle Xcodebuild Logs\" }) vim.keymap.set(\"n\", \"<leader>xc\", \"<cmd>XcodebuildToggleCodeCoverage<cr>\", { desc = \"Toggle Code Coverage\" }) vim.keymap.set(\"n\", \"<leader>xC\", \"<cmd>XcodebuildShowCodeCoverageReport<cr>\", { desc = \"Show Code Coverage Report\" }) vim.keymap.set(\"n\", \"<leader>xe\", \"<cmd>XcodebuildTestExplorerToggle<cr>\", { desc = \"Toggle Test Explorer\" }) vim.keymap.set(\"n\", \"<leader>xs\", \"<cmd>XcodebuildFailingSnapshots<cr>\", { desc = \"Show Failing Snapshots\" }) vim.keymap.set(\"n\", \"<leader>xd\", \"<cmd>XcodebuildSelectDevice<cr>\", { desc = \"Select Device\" }) vim.keymap.set(\"n\", \"<leader>xp\", \"<cmd>XcodebuildSelectTestPlan<cr>\", { desc = \"Select Test Plan\" }) vim.keymap.set(\"n\", \"<leader>xq\", \"<cmd>Telescope quickfix<cr>\", { desc = \"Show QuickFix List\" }) vim.keymap.set(\"n\", \"<leader>xx\", \"<cmd>XcodebuildQuickfixLine<cr>\", { desc = \"Quickfix Line\" }) vim.keymap.set(\"n\", \"<leader>xa\", \"<cmd>XcodebuildCodeActions<cr>\", { desc = \"Show Code Actions\" })\n\nTip\n\nPress <leader>X to access the picker with all commands.\n\nPress <leader>xf to access the picker with all Project Manager commands.\n\nPress <C-r> when the picker with devices is presented to refresh the list.\n\n### \ud83d\udccb Logs Panel\n\n  * Press o on a failed test in the summary section to jump to the failing location\n  * Press q to close the panel\n\n### \ud83e\uddea Test Explorer\n\n  * Press o to jump to the test implementation\n  * Press t to run selected tests\n  * Press T to re-run recently selected tests\n  * Press R to reload test list\n  * Press [ to jump to the previous failed test\n  * Press ] to jump to the next failed test\n  * Press <cr> to expand or collapse the current node\n  * Press <tab> to expand or collapse all classes\n  * Press q to close the Test Explorer\n\n## \u2699\ufe0f Configuration\n\n### \ud83d\udd25 Customize Xcodebuild.nvim\n\n### \ud83c\udfa8 Customize Highlights\n\n### \ud83e\udd16 Customize Behaviors\n\n### \ud83d\udce6 Swift Packages Development\n\nThis plugin supports only applications. However, if you develop Swift Package\nfor one of supported platforms, you can easily use this plugin by creating a\nsample iOS/macOS project in your root directory and by adding your package as\na dependency.\n\n## \ud83d\udd2c Debugger Configuration\n\nnvim-dap plugin lets you debug applications like in any other IDE. On top of\nthat nvim-dap-ui extension will present for you all panels with stack,\nbreakpoints, variables, logs, etc.\n\nTo configure DAP for development:\n\n  * Download codelldb VS Code plugin from: HERE. For macOS use darwin version.\n  * Just unzip vsix file and set paths in the configuration below.\n  * Install also nvim-dap-ui for a nice GUI to debug.\n  * Make sure to enable console window from nvim-dap-ui to see simulator logs.\n\n    \n    \n    return { \"mfussenegger/nvim-dap\", dependencies = { \"wojciech-kulik/xcodebuild.nvim\" }, config = function() local xcodebuild = require(\"xcodebuild.integrations.dap\") -- SAMPLE PATH, change it to your local codelldb path local codelldbPath = os.getenv(\"HOME\") .. \"/tools/codelldb-aarch64-darwin/extension/adapter/codelldb\" xcodebuild.setup(codelldbPath) vim.keymap.set(\"n\", \"<leader>dd\", xcodebuild.build_and_debug, { desc = \"Build & Debug\" }) vim.keymap.set(\"n\", \"<leader>dr\", xcodebuild.debug_without_build, { desc = \"Debug Without Building\" }) vim.keymap.set(\"n\", \"<leader>dt\", xcodebuild.debug_tests, { desc = \"Debug Tests\" }) vim.keymap.set(\"n\", \"<leader>dT\", xcodebuild.debug_class_tests, { desc = \"Debug Class Tests\" }) vim.keymap.set(\"n\", \"<leader>b\", xcodebuild.toggle_breakpoint, { desc = \"Toggle Breakpoint\" }) vim.keymap.set(\"n\", \"<leader>B\", xcodebuild.toggle_message_breakpoint, { desc = \"Toggle Message Breakpoint\" }) vim.keymap.set(\"n\", \"<leader>dx\", xcodebuild.terminate_session, { desc = \"Terminate Debugger\" }) end, }\n\n## \ud83d\udcf2 Debugging On iOS 17+ Device\n\nSince iOS 17, a new secure connection between Mac and mobile devices is\nrequired. Xcodebuild.nvim uses pymobiledevice3 to establish a special trusted\ntunnel that is later used for debugging. However, this operation requires sudo\n(more details).\n\nShowing a pop-up to enter a password every time you run a debugger would be\nquite annoying. That's why the plugin provides a small script\n(tools/remote_debugger) that wraps the only two operations requiring sudo\n(starting a secure tunnel and closing it).\n\nThis allows you to configure passwordless access just for this single file and\nmake it work with xcodebuild.nvim. You can even make a local copy if you are\nworried that the content of this file could be changed in the future.\n\n#### Passwordless access to remote_debugger\n\nYou can disable password requirement by updating /etc/sudoers file. Make sure\nto use the command below, otherwise you may break your sudo command:\n\n    \n    \n    sudo visudo -f /etc/sudoers\n\nAppend this line, but first update the path and the username:\n\n    \n    \n    YOUR_USERNAME ALL = (ALL) NOPASSWD: /Users/YOUR_USERNAME/.local/share/nvim/lazy/xcodebuild.nvim/tools/remote_debugger\n\n#### Creating a local copy of remote_debugger\n\nIf you don't want to configure the passwordless permission to the file that\ncould be changed in the future, you can make a local copy of this script, set\nyour local path in the config commands.remote_debugger, and update\n/etc/sudoers accordingly.\n\nPlease remember that you will have to update this file manually if it changes\nin the future.\n\n## \ud83d\udc1b Application Logs\n\nIf you installed nvim-dap and nvim-dap-ui, you can easily track your app logs.\nThe plugin automatically sends logs to the console window provided by nvim-\ndap-ui.\n\nTo see SIMULATOR logs you don't need to run the debugger. You can just show\nthe console and run the app (remember that the app must be launched using\nxcodebuild.nvim).\n\n    \n    \n    :lua require(\"dapui\").toggle()\n\nImportant\n\nLogs printed by NSLog will appear only if the debugger is NOT attached.\n\nYou can always clear the console window by calling:\n\n    \n    \n    :lua require(\"xcodebuild.integrations.dap\").clear_console()\n\n#### Logs without using nvim-dap\n\nIf you don't want to use nvim-dap you can always print logs directly to your\nterminal by calling (from your root directory):\n\n    \n    \n    tail -f .nvim/xcodebuild/app_logs.log\n\nThis approach works especially well if you are using tmux.\n\n## \ud83d\udea5 Lualine Integration\n\nYou can also integrate this plugin with lualine.nvim.\n\n## \ud83e\uddea Code Coverage\n\n## \ud83d\udcf8 Snapshot Tests Preview\n\nThis plugin offers a nice list of failing snapshot tests. For each test it\ngenerates a preview image combining reference, failure, and difference images\ninto one. It works with swift-snapshot-testing library.\n\nRun :XcodebuildFailingSnapshots to see the list.\n\n## \ud83d\udc68\ud83d\udcbb API\n\nIf you want to use functions directly instead of user commands, then please\nsee xcodebuild.actions module.\n\n## \ud83e\uddf0 Troubleshooting\n\nImportant\n\nThe first thing you should do is to check the output of :checkhealth\nxcodebuild and fix all issues.\n\nRun it from your project root directory.\n\n#### Configuration\n\nProcessing the project configuration is a very complex task that relies on\nparsing multiple crazy outputs from xcodebuild commands. Those logs are a pure\nnightmare to work with. This process may not always work.\n\nIn case of any issues with, you can try manually providing the configuration\nfile .nvim/xcodebuild/settings.json in your root directory.\n\n#### Tests\n\nIf you encounter issues with test detection, you may want to read this: Test\nFile Search - File Matching.\n\n#### LSP\n\nIn most cases, it's enough to run the project in Xcode, clean it CMD+Shift+K,\nbuild again CMD+B, and run xcode-build-server config again.\n\n#### Useful Help Tags\n\n  * :h xcodebuild\n  * :h xcodebuild.config\n  * :h xcodebuild.keys\n  * :h xcodebuild.tools\n  * :h xcodebuild.commands\n  * :h xcodebuild.events\n  * :h xcodebuild.highlights\n  * :h xcodebuild.dap\n\n## About\n\nNeovim plugin to Build, Debug, and Test applications created for Apple devices\n(iOS, macOS, watchOS, etc.)\n\n### Topics\n\nmacos swift ios apple neovim xcode tvos watchos nvim ios-swift xcodebuild\nvisionos\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n363 stars\n\n### Watchers\n\n10 watching\n\n### Forks\n\n7 forks\n\nReport repository\n\n## Releases 21\n\nv3.5.0 Latest\n\nApr 14, 2024\n\n\\+ 20 releases\n\n## Sponsor this project\n\nwojciech-kulik Wojciech Kulik\n\nSponsor\n\nLearn more about GitHub Sponsors\n\n## Contributors 4\n\n  * wojciech-kulik Wojciech Kulik\n  * TMTBO Tobyo Tenma\n  * srydell Simon Rydell\n  * Almaz5200 Artem\n\n## Languages\n\n  * Lua 93.1%\n  * Swift 3.4%\n  * Ruby 2.4%\n  * Other 1.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
