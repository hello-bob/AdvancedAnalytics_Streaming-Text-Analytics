{"aid": "40151982", "title": "A Beginner's Guide to the ESP8266", "url": "https://tttapa.github.io/ESP8266/Chap01%20-%20ESP8266.html", "domain": "tttapa.github.io", "votes": 10, "user": "davikr", "posted_at": "2024-04-25 01:03:12", "comments": 2, "source_title": "A Beginner's Guide to the ESP8266", "source_text": "A Beginner's Guide to the ESP8266\n\n# A Beginner's Guide to the ESP8266\n\nPieter P, 08-03-2017\n\nSome time ago, I wrote a Beginner's Guide to Arduino that seems to be very\npopular, so I decided to create a follow-up: A Beginner's Guide to the\nESP8266. That's right, a tutorial on how to use the world's most popular $3\nWi-Fi board.\n\nThis is going to be a very in-depth tutorial, covering some networking\nconcepts as well. If you're a beginner, and just want to go straight to the\nmore exciting Wi-Fi part, feel free to do so, I included short TL;DR's in the\nlonger, more technical parts.\n\nA short overview of what I'll cover in this article:\n\n  1. What is an ESP8266? A short overview of what an ESP8266 is, and what you can do with it\n  2. Deciding on what board to buy: There's loads of different ESP8266 available these days, finding the one that's best for you can be hard\n  3. Installing the software: you need to install some software to program the ESP8266, and maybe a USB driver\n  4. Setting up the hardware: some modules and boards need some external components\n  5. The ESP8266 as a microcontroller: the ESP8266 can be used as a normal microcontroller, just like an Arduino\n  6. Network protocols: Before we start using the Wi-Fi capabilities of the ESP8266, I'll teach you some of the network protocols involved\n  7. Setting up a Wi-Fi connection: That's probably why you're reading this, right?\n  8. Name resolution: Find the ESP8266 on your local network using mDNS\n  9. Setting up a simple web server: This enables you to add web pages to the ESP8266, and browse them from your computer or phone\n  10. Setting up an advanced web server: a more advanced server with a real file system that allows you to upload new files over Wi-Fi\n  11. OTA - uploading programs over Wi-Fi: You don't have to upload programs over USB, you can use Wi-Fi instead\n  12. Wirelessly controlling your RGB lighting: Change the color of your LED strips using your phone or computer\n  13. Getting the time: Connect to a time server using NTP and sync the ESP's clock\n  14. Monitoring sensors: log the temperature in your living room, save it in flash memory and show it in a fancy graph in your browser\n  15. Getting email notifications: Turn on a notification light when you've got unread emails\n  16. Advanced features: use DNS, captive portals, Wi-Fi connector libraries, OSC ...\n\nThis guide expects some basic knowledge of microcontrollers like the Arduino.\nIf that's something you're not already familiar with, I'd recommend you to\nread my Beginner's Guide to Arduino first, it covers a lot of the basics that\nI won't go into in this article.\n\nI really want to focus on the ESP8266-specific things, like Wi-Fi and other\nnetwork protocols, the ESP's hardware, software, IoT, etc ...\n\n### What is an ESP8266?\n\nThe ESP8266 is a System on a Chip (SoC), manufactured by the Chinese company\nEspressif. It consists of a Tensilica L106 32-bit micro controller unit (MCU)\nand a Wi-Fi transceiver. It has 11 GPIO pins* (General Purpose Input/Output\npins), and an analog input as well. This means that you can program it like\nany normal Arduino or other microcontroller. And on top of that, you get Wi-Fi\ncommunication, so you can use it to connect to your Wi-Fi network, connect to\nthe Internet, host a web server with real web pages, let your smartphone\nconnect to it, etc ... The possibilities are endless! It's no wonder that this\nchip has become the most popular IOT device available.\n\nThere are many different modules available, standalone modules like the ESP-##\nseries by AI Thinker, or complete development boards like the NodeMCU DevKit\nor the WeMos D1. Different boards may have different pins broken out, have\ndifferent Wi-Fi antennas, or a different amount of flash memory on board.\n\n(*) The ESP8266 chip itself has 17 GPIO pins, but 6 of these pins (6-11) are\nused for communication with the on-board flash memory chip.\n\n### Programming\n\nThere are different ways to program the ESP8266, but I'll only cover the\nmethod using the Arduino IDE. This is really easy for beginners, and it's a\nvery familiar environment if you've used Arduino boards before.\n\nJust keep in mind that it's not limited to this option: there's also an\nofficial SDK available to program it in real C, this is very useful if you\nwant to optimize your code or do some advanced tricks that aren't supported by\nthe Arduino IDE. Another possibility is to flash it with a LUA interpreter, so\nyou can upload and run LUA scripts. Or maybe you're more familiar with Python?\nThen you should check out the MicroPython firmware to interpret MicroPython\nscripts. I'm sure there's other languages available as well, so just do a\nquick Google search and write your code in the language of your choice.\n\n### Requirements\n\nYou'll need a couple of things in order to follow this guide:\n\n  * An ESP8266 board\n  * A computer that can run the Arduino IDE (Windows, Mac or Linux)\n  * A USB-to-Serial converter, it is very important that you use a 3.3V model*\n  * A USB cable\n  * A 3.3V power supply or voltage regulator*\n  * A Wi-Fi network to connect to\n\n(*) Your board may already include these. More information can be found in the\nnext chapter.\n\nNext chapter \u2192\n\narrow_forward\n\n", "frontpage": true}
