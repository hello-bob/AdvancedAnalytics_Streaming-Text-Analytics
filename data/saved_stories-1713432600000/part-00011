{"aid": "40071259", "title": "10 Years of Chrome DevTools (2018)", "url": "https://web.archive.org/web/20180907093023/https://blog.chromium.org/2018/09/10-years-of-chrome-devtools.html", "domain": "archive.org", "votes": 1, "user": "kaycebasques", "posted_at": "2024-04-17 23:34:19", "comments": 0, "source_title": "10 Years of Chrome DevTools", "source_text": "Chromium Blog: 10 Years of Chrome DevTools\n\nThe Wayback Machine - https://blog.chromium.org/2018/09/10-years-of-chrome-\ndevtools.html\n\n## Chromium Blog\n\nNews and developments from the open source browser project\n\n## 10 Years of Chrome DevTools\n\nThursday, September 6, 2018\n\nChrome is turning 10! Thank you for making the web development community so\nopen, collaborative, and supportive. DevTools draws inspiration from countless\nother projects. Here\u2019s a look back at how DevTools came about, and how it\u2019s\nchanged over the years.\n\n##\n\nIn the beginning, there was Firebug\n\nImagine for a moment that browsers didn't ship with developer tools. How would\nyou debug JavaScript? You'd basically have 3 options:\n\n  * Sprinkle window.alert() calls throughout your code.\n  * Comment out sections of code.\n  * Stare at the code for a long time until the JavaScript gods bless you with a solution.\n\nWhat about layout issues? Network errors? Again, all you could really do is\nconduct painstaking experiments in your code. This was the reality of web\ndevelopment up until 2006. Then a little tool called Firebug came along and\nchanged everything.\n\nA screenshot of Firebug's Net panel, taken from Saying Goodbye to Firebug\n(source and license)\n\nFirebug was a Firefox extension that let you debug, edit, and monitor pages in\nreal-time. As a web developer suddenly you went from having no visibility into\nyour pages to having what are essentially the core features of modern\ndeveloper tools. The ability to understand exactly why Firefox was behaving as\nit was unleashed a flood of creativity on the web. Without Firebug, the Web\n2.0 era wouldn't have been possible.\n\n##\n\nWebKit Web Inspector\n\n## Around the same time as Firebug\u2019s launch, a few Google engineers started\nworking on a project which would eventually lead to Chrome. From the start,\nChrome was a mashup of different code libraries. For rendering the Chrome\nengineers opted for WebKit, which is the open-source project that still powers\nSafari to this day. An added bonus of using WebKit was that it came with a\nhandy tool called the Web Inspector.\n\nA screenshot of the Web Inspector, taken from Web Inspector Redesign (source\nand license)\n\nLike the Net panel of Firebug, the original Web Inspector probably looks\nfamiliar. Much of its functionality lives on to this day as the Elements panel\nin Chrome DevTools. Web Inspector launched a few days after Firebug, and\nSafari was the first browser to bundle developer tooling directly into the\nbrowser.\n\n##\n\nThe \"Inspect Element\" era\n\nChrome brought many innovative ideas to the browser ecosystem, such as the\nomnibox that combined search and the address bar, and a multi-process\narchitecture that prevented one hanging tab from crashing the entire browser.\nBut the innovation we like the most was providing developer tools in every\nbuild to every user, exposed with the click of a mouse.\n\n\"Inspect Element\" in 2010\n\nBefore Chrome, developer tooling was an opt-in experience. You either had to\ninstall an extension, like Firebug, or enable some flags, as is still the case\nin Safari today. Chrome was the first browser to make developer tooling\naccessible from every browser instance. We'd like to claim that we had a grand\nvision for creating a developer-friendly browser from the start, but the\nreality is that Chrome had a lot of compatibility issues in its early days\n(which makes sense, since no one was building for it) and we needed to give\nweb developers an easy way to fix these issues. Web developers told us that it\nwas a useful feature, and we kept it.\n\n## The mobile era\n\nFor the first few years of the DevTools project, we essentially added chapters\nto the stories that Firebug and Web Inspector started. The next big shift in\nhow we approached DevTools happened when it became clear that smartphones were\nhere to stay.\n\nOur first mission in this brave new world was to enable developers to debug\nreal mobile devices from their development machines, which we call remote\ndebugging. DevTools was actually well-positioned to handle remote debugging,\nthanks to another consequence of Chrome\u2019s multi-process architecture. Early on\nin the DevTools project we realized that the only way a debugger could\nreliably access a multi-process browser was through a client-server protocol,\nwith the browser being the server, and the debugger being the client. When\nmobile Chrome came around, the protocol was already baked into it, so we just\nhad to make the DevTools running on your development machine communicate with\nthe Chrome running on your mobile device over the protocol. This protocol\nstill forms the backbone of DevTools today, and is now known as the Chrome\nDevTools Protocol.\n\nRemote Debugging\n\nRemote debugging was a step in the right direction, and to this day is still\nthe primary tool for making sure that your sites behave reasonably on real\nmobile devices. Over time, however, we realized that remote debugging could be\na bit tedious. When you're in the early phases of building out a site or\nfeature, you usually just need a first-order approximation of the mobile\nexperience. This prompted us to create a set of mobile simulation features,\nsuch as:\n\n  * Precisely emulating the mobile viewport, simulating touch-based input and device orientation.\n  * Throttling the network connection to simulate 3G and CPU to simulate less-powerful mobile hardware.\n  * Spoofing user agent, geolocation, accelerometer data and more.\n\nWe collectively refer to these features as Device Mode.\n\nAn early prototype of Device Mode\n\nDevice Mode in 2018\n\n## The performance era\n\nWhile the mobile era unfolded, big apps like Gmail were pushing the limits of\nthe web's capabilities. Gmail-scale bugs called for Gmail-scale tools. One of\nour first major contributions to the tooling ecosystem was to show a play-by-\nplay breakdown of exactly everything that Chrome had to do in order to display\na page.\n\nThe original Timeline panel, as announced in Do More with Chrome Developer\nTools\n\nThe Performance panel in 2018\n\nThese tools were a step in the right direction, but in order to spot\noptimization opportunities you needed to learn the nitty-gritty details about\nhow browsers work and sift through a lot of data. Lately we've been building\non this foundation to provide more guided performance insights. The new\nLighthouse engine powers the Audits panel, and is also available as a Node\nmodule for integration with CI systems.\n\nPerformance suggestions in the Audits panel\n\n## The Node.js era\n\nUp until 2014 or so, we mainly thought of DevTools as a tool for building\ngreat experiences on Chrome. The rise of Node prompted us to rethink our role\nin the web ecosystem. For the first few years of Node's existence, Node\ndevelopers were in a situation similar to that of web developers before\nFirebug, or Gmail developers before the Timeline panel: the scale of Node apps\noutpaced the scale of Node tools. Given that Node runs on Chrome's JavaScript\nengine, V8, DevTools was a natural candidate to fill the gap. Support for\ndebugging Node with DevTools landed in 2016 and includes the usual DevTools\nfeatures, such as breakpoints, code stepping, blackboxing, source maps for\ntranspiled code, and so on.\n\nNode Connection Manager\n\n## The DevTools protocol ecosystem\n\nThe name Chrome DevTools Protocol (CDP) suggests an API that only DevTools can\nuse. The reality is more general than that: it\u2019s the API that enables\nprogrammatic access to Chrome. Over the last few years, we've seen a few\nthird-party libraries and applications join the protocol ecosystem:\n\n  * chrome-remote-interface provides low level JavaScript access to the protocol\n\n  * Puppeteer brings it to the next level of abstraction and enables automation of the evergreen headless Chrome browser with modern JavaScript API\n\n  * Lighthouse automates the process of finding ways to improve the performance and quality of pages\n\nWe're excited to see thousands of projects depend on these packages to enable\nrich interaction with Chrome. If you\u2019re in the tooling or automation business,\nit\u2019s worth checking out the protocol to see if it opens up any opportunities\nin your domain. For example, the VS Code and WebStorm teams both use it to\nenable JavaScript debugging within their respective IDEs.\n\n## What's next?\n\nOur core mission is to build tools that help you create great experiences on\nthe web. We very much rely on your feedback to help us determine what products\nor features to build.\n\n  * Stay up-to-date on new features with our What's New posts\n\n  * Propose new features on the mailing list\n\n  * File bugs in Chromium Bug Tracker\n\n  * Follow us on Twitter to discover new features and bite-sized workflows\n\n  * Ask questions on Stack Overflow to get help with using DevTools\n\n  * Take matters into your own hands and contribute to DevTools\n\nThank you for creating such a vibrant community. We look forward to another 10\nyears of building the web with you.\n\nPosted by the Chrome DevTools team\n\nGoogle\n\nLabels: 10th birthday , birthday , chrome , devtools\n\n## Labels\n\n  * 10th birthday 2\n  * accessibility 1\n  * benchmarks 1\n  * beta 10\n  * birthday 2\n  * blink 1\n  * browser interoperability 1\n  * capabilities 1\n  * capable web 1\n  * chrome 3\n  * chrome apps 3\n  * Chrome Frame 1\n  * chrome web store 26\n  * chromeframe 3\n  * chromeos 3\n  * chromium 3\n  * cloud print 1\n  * dart 8\n  * dashboard 1\n  * devtools 12\n  * extensions 23\n  * feedback 1\n  * gdd 1\n  * googlechrome 12\n  * html5 11\n  * incognito 1\n  * javascript 3\n  * linux 2\n  * mac 1\n  * mobile 2\n  * na 1\n  * native client 8\n  * New Features 5\n  * octane 1\n  * open web 3\n  * releases 3\n  * rlz 1\n  * security 30\n  * spdy 2\n  * ssl 2\n  * v8 5\n  * web intents 1\n  * webapi 1\n  * webaudio 3\n  * webgl 7\n  * webkit 5\n  * webp 5\n  * webrtc 4\n  * websockets 5\n  * webtiming 1\n\n## Archive\n\n  * 2018\n\n    * Jan\n\n    * Feb\n\n    * Mar\n\n    * Apr\n\n    * May\n\n    * Jun\n\n    * Jul\n\n    * Aug\n\n    * Sep\n\n  * 2017\n\n    * Jan\n\n    * Feb\n\n    * Mar\n\n    * Apr\n\n    * May\n\n    * Jun\n\n    * Jul\n\n    * Aug\n\n    * Sep\n\n    * Oct\n\n    * Nov\n\n    * Dec\n\n  * 2016\n\n    * Jan\n\n    * Feb\n\n    * Mar\n\n    * Apr\n\n    * May\n\n    * Jun\n\n    * Aug\n\n    * Sep\n\n    * Oct\n\n    * Nov\n\n    * Dec\n\n  * 2015\n\n    * Jan\n\n    * Feb\n\n    * Mar\n\n    * Apr\n\n    * May\n\n    * Jun\n\n    * Jul\n\n    * Aug\n\n    * Sep\n\n    * Oct\n\n    * Nov\n\n    * Dec\n\n  * 2014\n\n    * Jan\n\n    * Feb\n\n    * Mar\n\n    * Apr\n\n    * May\n\n    * Jun\n\n    * Jul\n\n    * Aug\n\n    * Sep\n\n    * Oct\n\n    * Nov\n\n    * Dec\n\n  * 2013\n\n    * Jan\n\n    * Feb\n\n    * Mar\n\n    * Apr\n\n    * May\n\n    * Jun\n\n    * Jul\n\n    * Aug\n\n    * Sep\n\n    * Oct\n\n    * Nov\n\n    * Dec\n\n  * 2012\n\n    * Jan\n\n    * Feb\n\n    * Mar\n\n    * Apr\n\n    * May\n\n    * Jun\n\n    * Jul\n\n    * Aug\n\n    * Sep\n\n    * Oct\n\n    * Nov\n\n    * Dec\n\n  * 2011\n\n    * Jan\n\n    * Feb\n\n    * Mar\n\n    * Apr\n\n    * May\n\n    * Jun\n\n    * Jul\n\n    * Aug\n\n    * Sep\n\n    * Oct\n\n    * Nov\n\n    * Dec\n\n  * 2010\n\n    * Jan\n\n    * Feb\n\n    * Mar\n\n    * Apr\n\n    * May\n\n    * Jun\n\n    * Jul\n\n    * Aug\n\n    * Sep\n\n    * Oct\n\n    * Nov\n\n    * Dec\n\n  * 2009\n\n    * Jan\n\n    * Feb\n\n    * Mar\n\n    * Apr\n\n    * May\n\n    * Jun\n\n    * Jul\n\n    * Aug\n\n    * Sep\n\n    * Nov\n\n    * Dec\n\n  * 2008\n\n    * Sep\n\n    * Oct\n\n    * Nov\n\n    * Dec\n\n## Feed\n\nGoogleon\n\nGive us feedback in our Product Forums.\n\n## Company-wide\n\n  * Official Google Blog\n  * Public Policy Blog\n  * Student Blog\n\n## Products\n\n  * Android Blog\n  * Chrome Blog\n  * a Lat Long Blog\n\n## Developers\n\n  * Developers Blog\n  * Ads Developer Blog\n  * Android Developers Blog\n\n  * Google\n  * Privacy\n  * Terms\n\n", "frontpage": false}
