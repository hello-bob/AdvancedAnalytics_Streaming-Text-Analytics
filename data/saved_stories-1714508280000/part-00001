{"aid": "40210580", "title": "Zserio: Zero serialization overhead for C++, Java, Python", "url": "https://github.com/ndsev/zserio", "domain": "github.com/ndsev", "votes": 1, "user": "klaussilveira", "posted_at": "2024-04-30 13:03:52", "comments": 0, "source_title": "GitHub - ndsev/zserio: zero sugar, zero fat, zero serialization overhead", "source_text": "GitHub - ndsev/zserio: zero sugar, zero fat, zero serialization overhead\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nndsev / zserio Public\n\n  * Notifications\n  * Fork 27\n  * Star 99\n\nzero sugar, zero fat, zero serialization overhead\n\nzserio.org/\n\n### License\n\nBSD-3-Clause license\n\n99 stars 27 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# ndsev/zserio\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n16 Branches\n\n41 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nmikirUpdate Xml extension version to 1.0.1Apr 30, 2024aba07d1 \u00b7 Apr 30,\n2024Apr 30, 2024\n\n## History\n\n2,600 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| [#596] Fix C++ runtime tests to work for C++17 MSVC v142| Apr 25, 2024  \n  \n### 3rdparty\n\n|\n\n### 3rdparty\n\n| [#82] Revert back gtest version to 1.11.0 to work with old MinGW| Feb 22,\n2024  \n  \n### ant_task\n\n|\n\n### ant_task\n\n| Cleanup ant task| Dec 12, 2023  \n  \n### benchmarks\n\n|\n\n### benchmarks\n\n| Rename zserio-datasets repository to zserio-benchmarks-dataset| Sep 4, 2023  \n  \n### cmake\n\n|\n\n### cmake\n\n| Introduce new bigobj flag for MSVC compiler in CMake toolchain file| Apr 24,\n2024  \n  \n### compiler\n\n|\n\n### compiler\n\n| Update Xml extension version to 1.0.1| Apr 30, 2024  \n  \n### doc\n\n|\n\n### doc\n\n| Improve README.md by better description of C++ generator| Apr 19, 2024  \n  \n### mvn\n\n|\n\n### mvn\n\n| [#334] Add sources and javadocs to zserio bundle deployment| Nov 16, 2021  \n  \n### scripts\n\n|\n\n### scripts\n\n| [#603] Add black tool to check all Python sources| Apr 30, 2024  \n  \n### test\n\n|\n\n### test\n\n| [#603] Reformat all Python sources to comply with the black formatter| Apr\n30, 2024  \n  \n### .clang-format\n\n|\n\n### .clang-format\n\n| [#561] Set SpacesInContainerLiterals rule to false in clang format| Jan 12,\n2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| [#395] Update runtime libs doc to contain main page and examples| May 18,\n2022  \n  \n### .gitmodules\n\n|\n\n### .gitmodules\n\n| Rename zserio-datasets repository to zserio-benchmarks-dataset| Sep 4, 2023  \n  \n### CNAME\n\n|\n\n### CNAME\n\n| Create CNAME| Jul 26, 2018  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Create CONTRIBUTING.md, prepare issue and pull request templates| Mar 22,\n2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Update year in the license file| Feb 21, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| [#573] Add badges for SonarCloud| Apr 9, 2024  \n  \n### build.xml\n\n|\n\n### build.xml\n\n| [#545] Add official support for Java 17| Dec 12, 2023  \n  \n## Repository files navigation\n\nzero serialization overhead\n\nZserio is a framework for serializing structured data with a compact and\nefficient way with low overhead.\n\nYou can define your structured data in Zserio language and then you can use\nspecial generated source code in several languages to easily write and read\nyour data to and from a binary or a text stream.\n\nNo time to read? Go to the quick start or download latest release.\n\nIn for the numbers? Head over to benchmarks.\n\nQuestions? Check the FAQs.\n\nMore documentation? Go to the documentation.\n\n## Language support\n\nZserio supports the following code generators:\n\n  * C++ Generator together with runtime library using C++11, and developed with special attention to functional safety and performance\n  * Java Generator together with runtime library\n  * Python Generator together with runtime library\n\nIn addition to these, Zserio provides specialized text generators for\ndocumentation and export\n\n  * Doc Generator\n  * XML Generator\n\n## Introduction\n\nThe Zserio serialization framework allows you to serialize data in a compact\nand efficient way.\n\nThe key features include\n\n  * compactness (smaller than most other serializers)\n  * advanced schema definition options\n  * cross-platform\n  * multiple programming languages\n\nIt can be retrofitted on top of almost any other serialization language or\nmodel, since it gives the developer powerful low-level access.\n\nIt features simple and compound data structures and provides advanced features\nfor controlling at design time what writers will be able to fill in.\n\nZserio does have a very simple wire format described at Zserio Encoding Guide.\n\nZserio supports as well serialization and deserialization in JSON format\ndescribed at Zserio JSON Guide.\n\n## Quick Start\n\nTo be able to serialize data with Zserio, you have to follow these basic\nsteps:\n\n  1. Download the runtimes and the Zserio compiler from Github Releases\n  2. Set up your development environment with the Zserio runtime\n  3. Write the schema definition\n  4. Compile the schema and generate code\n  5. Serialize/deserialize using the generated code\n\nYou can find the detailed quick start tutorial in their respective\nrepositories:\n\n  * C++ Tutorial\n  * Java Tutorial\n  * Python Tutorial\n\nOr try Interactive Zserio Compiler based on Streamlit.\n\n## Features overview\n\n  * Optional elements\n  * Constraints\n  * Default values\n  * Parameters\n  * Alignments\n  * Offsets\n  * Arrays with indexed offsets\n  * Packed arrays\n  * Templates\n  * Generic services\n  * Generic Pub/Sub\n  * SQLite extension\n\n## Documentation\n\nDocumentation of the schema language can be found in the Zserio Language\nOverview.\n\nSchema language reference can be found in Quick Reference.\n\nExplanation how zserio encodes data to the wire format can be found in the\nZserio Encoding Guide.\n\nExplanation how zserio encodes data to the JSON format can be found in the\nZserio JSON Guide.\n\nExplanation how zserio schema can be extended not to break backward or forward\ncompatibility can be found in the Zserio Schema Evolution Guide.\n\nExplanation how to deal with all possible backward incompatibilities that can\noccur after updating of Zserio can be found in the Zserio Compatibility Guide.\n\nUser Guide can be found in the Zserio Compiler User Guide.\n\nBuild instructions can be found in the Zserio Compiler Build Instructions.\n\nC++ users can find more information in the C++ Tutorial.\n\nJava users can find more information in the Java Tutorial.\n\nPython users can find more information in the Python Tutorial.\n\nCheck out as well the Zserio Types Mapping for types mapping description.\n\n### Extensions\n\nZserio extension is any Java extension which implements zserio.tools.Extension\ninterface.\n\nFor example, if you need to implement a new code generator for Zserio, you\nneed to implement special Zserio extension. Or another example could be a\nZserio extension which only prints some schema statistics and it does not\ngenerate anything.\n\nEach Zserio extension should be packed in a single jar file.\n\nAll Zserio extensions which are available on the Java classpath are\nautomatically loaded during Zserio compiler startup.\n\nMore information how to implement a new Zserio extension can be found in the\nZserio extension sample.\n\n### Services\n\nService types allow to define generic service interfaces. But note that no\nunderlying communication library is provided by Zserio. Zserio only defines\nthe generic interface and users are responsible for its implementation.\nHowever, Zserio provides sample implementations of several services backends:\n\n  * C++ Zserio Service gRPC backend\n  * Java Zserio Service RMI backend\n  * Python Zserio Service HTTP backend\n\n### Pub/Sub\n\nPubsub types allow to define generic Pub/Sub clients. Users are responsible\nfor implementation of the generic Pub/Sub client interface provided by Zserio.\nHowever, Zserio provides sample implementations of several Pub/Sub backends:\n\n  * C++ Zserio Pub/Sub Mosquitto backend\n  * Java Zserio Pub/Sub Paho MQTT backend\n  * Python Zserio Pub/Sub Paho MQTT backend\n\nNote that Zserio doesn't provide any Pub/Sub server. There are various\nimplementations of servers (e.g. mosquitto) and it's the responsibility of the\nuser's Pub/Sub client implementation to communicate with the appropriate\nserver.\n\n## Contributions\n\nContributions are very welcome but we encourage to open a discussion or an\nissue first to agree on a solution or to avoid useless work in case we are\nalready solving a similar problem. Please see Contribution Guide.\n\n## About\n\nzero sugar, zero fat, zero serialization overhead\n\nzserio.org/\n\n### Topics\n\njava serialization cpp sqlite grpc data-structures schema-language code-\ngeneration compactness serialization-framework wire-format\n\n### Resources\n\nReadme\n\n### License\n\nBSD-3-Clause license\n\nActivity\n\nCustom properties\n\n### Stars\n\n99 stars\n\n### Watchers\n\n24 watching\n\n### Forks\n\n27 forks\n\nReport repository\n\n## Releases 41\n\nZserio v2.14.0 Latest\n\nApr 30, 2024\n\n\\+ 40 releases\n\n## Contributors 7\n\n## Languages\n\n  * Java 36.9%\n  * C++ 36.5%\n  * Python 14.0%\n  * FreeMarker 6.0%\n  * ZenScript 2.7%\n  * Shell 2.4%\n  * Other 1.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
