{"aid": "40198747", "title": "Open-Source Development \u2013 Strategies for getting involved", "url": "https://garrensmith.com/Opensource/Open-Source+Development+-+Strategies+for+getting+involved", "domain": "garrensmith.com", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-29 14:27:44", "comments": 0, "source_title": "Open-Source Development - Strategies for getting involved - Garren's public notes", "source_text": "Open-Source Development - Strategies for getting involved - Garren's public\nnotes\n\nGarren's public notes\n\nWelcome\n\nAbout\n\nBooks\n\nDatabases\n\nOpensource\n\nMy Contributions\n\nOpen-Source Development - Strategies for getting involved\n\nParenting\n\nPhotography\n\nWork\n\nChangelog\n\nClimbing\n\nCycling\n\nExercise\n\nMusic\n\nSideprojects\n\nStories\n\nGarren's public notes\n\nOpen-Source Development - Strategies for getting involved\n\nBeing involved in open-source software is a rewarding experience. It's not\nalways easy, and it's definitely not always glamorous. You won't always be\nchurning out amazing features. Often, it's about gathering consensus,\nassisting users with basic usage, or politely declining rude users demanding a\nfeature get implemented right now.\n\nBut if you persevere, there are a lot of benefits. Through my journey in open-\nsource, I've found myself improving in teamwork, written communication,\nproblem-solving, code reading, and writing software for pure joy. My open-\nsource contributions have led me to being paid to work on open-source\nprojects. Which has been a lot of fun.\n\nOn this page, you can see a list of My Contributions, which represents my\njourney and the projects I've contributed to. Starting out can be\nintimidating, or start the wrong way and get the current contributors annoyed\nleading to them ignoring you. Here are a few strategies I've found that helped\nme get involved and make meaningful contributions.\n\n####\n\nStart small\n\nMy journey into open-source began with small steps. I didn't dive straight\ninto complex projects but instead started with bite-sized tasks that matched\nmy skills. Don't try and rewrite large bits of the code base or criticise how\nit all works. Don't write large tickets on how the system is all wrong and you\ncould re-write it in a weekend. There is often a larger context you will not\nbe familiar with.\n\n####\n\nJoin the community, ask questions\n\nJoining the community and asking questions was one of the most crucial steps\nfor me. I found it helpful to join platforms like Discord or Discourse where\nthe project community gathers. I spent time lurking, reading up on development\ndiscussions, asking questions, and interacting with other contributors.\n\n####\n\nStart with trying the project and investigating the docs\n\nBefore diving into any contributions, I made sure to try out the projects for\nmyself, read the docs and get a feel for the project. Again looping back to\npoint 2 and asking questions while I try it all out.\n\n####\n\nLook for starter tags or ask the devs for something easy\n\nMany open-source projects label certain tasks as \"starter\" or \"beginner-\nfriendly.\" These are perfect for newcomers. If you're unsure, don't hesitate\nto ask the project maintainers for suggestions on where to start.\n\n####\n\nCommit to finishing it even If It takes long\n\nContributing to open-source projects can sometimes be a slow process. But it's\nimportant to commit to finishing what you start, even if it takes longer than\nexpected. Practising finishing a bug fix or feature by yourself is invaluable.\nIt will help you in your paying job. If your team knows you can handle work by\nyourself you will get given a lot more responsibility and freedom.\n\n####\n\nGive updates on the ticket to let the community know you are still working on\nit\n\nMake sure the functionality you working on has a GitHub ticket and it's\nassigned to you. Then don't ghost the community, rather keep the community\nupdated on your progress. Post a status every time you can, even if it's to\nsay I've made no progress and I'm stuck at this point. If you struggling to\nmake progress, don't forget to ask for help or ask questions when you get\nstuck.\n\n####\n\nBe friendly, and ask lots of questions even if they're simple or \"stupid\n\nBy now I hope you noticed the most important part, be involved in the\ncommunity and ask questions. Even if it feels like a stupid question. This is\nthe best way to learn a new code base. And getting into the habit of asking\nquestions really helps in your software career.\n\n####\n\nMiscommunication will happen\n\nBeing involved in an international community means that there are things lost\nin translation; misinterpreted; or what you said is plain wrong. The most\nimportant part is acknowledging that you did something wrong, apologise and\nwork to resolve the situation.\n\n###\n\nOver-committing to open-source\n\nA small note on over-committing because I think there could be books written\non this topic. Doing too much open-source work in your spare time will lead to\nburnout and anxiety. Take breaks, say no to lots of things, and most\nimportantly you don't owe anyone a fast turn-around on a bug, quick response\nto an issue or rushing a new release over your weekend. This is something you\nwant to enjoy. So take your time, enjoy the work, community and being involved\nin something other people use.\n\n###\n\nHave fun and learn as much as you can\n\nWorking on an open-source project can be so much fun and you get to meet lots\nof different people online and at community meetups. Have fun, learn as much\nas you can and be kind.\n\nLinks to this page\n\nWelcome\n\nOpen-Source Development - Strategies for getting involved\n\nNot found\n\nThis page does not exist\n\nInteractive graph\n\nOn this page\n\nPowered by Obsidian Publish\n\n", "frontpage": false}
