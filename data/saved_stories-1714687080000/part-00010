{"aid": "40237678", "title": "Just make your own language", "url": "https://blog.weberc2.com/posts/just-make-your-own-language.html", "domain": "weberc2.com", "votes": 1, "user": "Ygg2", "posted_at": "2024-05-02 15:55:54", "comments": 0, "source_title": "Just make your own language", "source_text": "Just make your own language\n\n# Craig Weber\n\n## Just make your own language\n\n2024-05-02 rust c c++ culture\n\nTL;DR: Musings about \"just make your own language\" as a trite retort to\nprogramming language criticism and how \"rewrite it in Rust\" might be\nthreatening that attitude.\n\nI've been programming since the early 2000s. I started in PHP, and then\nlearned Java, Python, C, and C++. In the early days especially, programming\ncommunities were super toxic. If you had questions and didn't read The Correct\nTextbook About The Blessed Programming LanguageTM\ufe0f, you would be berated. If\nyou did read said textbook and it didn't address your question, you would\nstill be berated for trying to do something outside of the instruction of The\nCorrect Textbook (if The Correct TextbookTM\ufe0f doesn't discuss it, then you\ndon't need it, heretic!).\n\nOne of my least favorite forms of toxicity (albeit not necessarily the most\ntoxic) was when someone would try to advocate for the need for a feature in C\nor C++^1, (for example, a standard build tool with dependency management). The\nrefrain almost always included a snarky, \"if you don't like The LanguageTM\ufe0f,\nfeel free to create your own!\"--knowing full well the absurdity of expecting a\nnew programmer to master programming language design and then implement a\nprogramming language and also market it so that enough other people use it\nthat it acquires enough marketshare that there are jobs available for using\nthat language and also an ecosystem of libraries and tools for it--all so that\nsaid programmer can reliably build projects or address whatever other issue\nwas lacking from the original language. And naturally I did try to make my own\nlanguage a few times before realizing the investment required and how much I\nwould need to learn to have a nonzero chance of succeeding (oh well, had fun,\nlearned a lot!).\n\nAnyway, skip ahead a few decades and now many in those same communities are\nnow aggrieved that someone actually managed to do exactly what they snarkily\nsuggested: Mozilla built Rust which addresses many of the issues that C and\nC++ programmers have had with their respective languages, but which their\ncommunities refused to take seriously. And not only that, but now people are\nadvocating for the rewriting of the C and C++ ecosystem in Rust, and many^2 in\nthe C and C++ communities are having none of it. The sacrilege! Sacr\u00e9 bleu!\n\nFWIW, I'm not a Rust fanboy--I think it's an improvement over C and C++, and I\nlike a lot about it, but it's not likely to be my main language any time soon.\nAnd moreover the Rust community has its own foibles that chafe me (criticizing\nmy preferred language without making a discernible effort to acknowledge how\nit manages to draw and retain its practitioners and enthusiasts \ud83d\ude43^3). I also\nthink \"rewrite it in Rust\" is pretty facile--it's often a lazy substitute for\na reasoned cost/benefit analysis. Even still, I appreciate that the whole\n\"rewrite it in rust\" phenomenon might make some C and C++ loyalists a little\nless likely to berate their fellow language enthusiasts when concerns are\nraised^4.\n\n  1. Whenever I mention C and C++ in the same breath, some will ignore everything else I wrote so as to deflect to \"C and C++ are different languages\" as though that is somehow not incumbent in referring to them by different names. \ud83d\ude43\n\n  2. Not all or necessarily even a majority. Ideally that would be implicit in \"many\", but somehow I find myself needing to caveat these things...\n\n  3. And to really bring things full circle, my preferred language's community has its own foibles! Programming language communities have evolved quite a lot over the intervening decades, but human nature remains a potent force.\n\n  4. Please note that my optimism about they hypothetical decrease in toxicity in the C and C++ communities is not the same thing as reveling in a hypothetical decline in either language's market share or some such thing.\n\n\u00ab Previous\n\n#### About\n\nSoftware enthusiast. Amateur blogger. I build things at Tempus. Thoughts and\nopinions are my own.\n\n#### Contact\n\n  * Mastodon\n  * Github\n  * Syndicated Feed\n\n#### Copyright\n\nCraig Weber 2016\n\n", "frontpage": false}
