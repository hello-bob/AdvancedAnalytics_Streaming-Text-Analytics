{"aid": "40264725", "title": "Migrations Done Well", "url": "https://blog.pragmaticengineer.com/typical-migration-approaches/", "domain": "pragmaticengineer.com", "votes": 1, "user": "braza", "posted_at": "2024-05-05 13:24:28", "comments": 0, "source_title": "Migrations Done Well: Typical Migration Approaches", "source_text": "Migrations Done Well: Typical Migration Approaches - The Pragmatic Engineer\n\n### Menu\n\nClose\n\n  * Home\n  * Newsletter\n  * My Books\n  * Reading List\n  * Popular Articles\n  * Ethics statement\n  * Sponsoring\n  * Investing\n  * Contact me\n  * About\n  * Now\n  * The Software Engineer's Guidebook\n  * Interview Preparation\n  * RSS Feed\n  * twitter\n  * youtube\n  * linkedin\n\nSubscribe\n\n  * Home\n  * Newsletter\n  * My Books\n  * Reading List\n  * Popular Articles\n  * Ethics statement\n  * Sponsoring\n  * Investing\n  * Contact me\n  * About\n  * Now\n  * The Software Engineer's Guidebook\n  * Interview Preparation\n  * RSS Feed\n  * twitter\n  * youtube\n  * linkedin\n\n# Migrations Done Well: Typical Migration Approaches\n\nThis article is an excerpt from Migrations Done Well: a guide for executing\nmigrations well, at both small and large scales, published in The Pragmatic\nEngineer. To get deep dives in your inbox like this issue, sign up here.\n\nMigrations are one of the most overlooked topics in software engineering,\nespecially at high-growth startups and companies. As a company\u2019s operations\ngrow, new systems and approaches are adopted to cope with extra load, more use\ncases, or more constraints. From time to time, engineers need to migrate over\nfrom an old system or approach, to a new one.\n\nAnd this is where things can get interesting, unexpected... and even ugly.\n\n## 1\\. The story of four different migrations\n\nEach migration is a story in itself, so here are four migrations. Each is\ndistinctly different from the others.\n\nThe migration with planned downtime\n\nIn 2012, PayPal announced it would take all of its global payments processing\nsystems down for an hour, within a three-hour window. This was to be while it\nmoved over to a new infrastructure. It was decided that taking the system\ndown, moving data over to the new infrastructure and then spinning it up, was\nthe safest way to go.\n\nEven though the scheduled time was at night in the US, this migration caused\nlosses thanks to transactions by global customers not being processed during\nthis time. However, the migration did complete as planned, while the\ndisruption and losses to the business were within the realm of what PayPal had\nplanned for.\n\nThe migration gone terribly wrong\n\nUK bank TSB has 5 million customers. It performed an IT migration in 2018,\nwhich ended up locking close to 2 million customers out of their accounts,\nunable to withdraw cash. Fixing the issues of the migration took many months;\nfive months after the migration went wrong, some customers were still locked\nout of their account, and the CEO of the bank was forced to quit over the\nepisode, after seven years in post.\n\nAlthough the root causes are still opaque, it seems this disaster was down to\na lack of proper testing ahead of the migration. Press covering the incident\nmentioned configuration problems, lack of infrastructure capacity and coding\nissues, all contributing to the problem. The outage cost the bank at least\n$480M in costs, not to mention heavy reputational and business damage.\n\nThe zero downtime migration\n\nWhen I joined Uber in 2016, the company had two payment systems: one\nprocessing pay-ins from customers (Riders and Eaters) and one dealing with\npayouts for partners (Drivers and Couriers). We started building a new, single\npayment system to replace these two standalone systems. In 2017, we switched\nover to the new system \u2013 codenamed Gulfstream \u2013 to handle Uber\u2019s payments.\n\nThe switch to a new payments system was invisible from the outside and the\nmigration was done without downtime or major issues. This was a case of a zero\ndowntime migration executed well.\n\nHowever, the long tail of the migration stretched on for years, and this long\ntail later turned out to cause problems.\n\nThe migration long-tail causing an outage\n\nAlthough the new payments system worked as the primary system, Uber still had\ndozens of internal systems that were dependent on the old payments\ninfrastructure. The new system did writebacks to these old systems to support\nconsumers that had not yet migrated over.\n\nLong migrations can be risky and this case was no different. In 2018, drivers\nwere unable to use Instant Pay for several days. The reason was an outage in\nthe writeback system which pushed production data to the legacy system. The\nsystem which handled driver payouts still used this old system, and as\nwritebacks were not arriving, this caused problems with payouts.\n\nThe engineering team didn\u2019t immediately detect the outage because while the\nproduction payments system had robust monitoring, the writeback system \u2013 meant\nto be in place for months and not years \u2013 did not have sophisticated\nmonitoring and alerting.\n\nMigration long-tails are common, risky and often cause outages, just like they\ndid in this case.\n\n## 2\\. Types of migrations\n\nThe word \u2018migration\u2019 describes a broad range of activities. Here are the most\ncommon types of migrations we engineers come across.\n\nService replacement. Replace OldService with NewService and move all customers\nover to eventually use NewService. An example is replacing an old, legacy\npayments system with a new one like Uber did, in the example above.\n\nService replacement.\n\nThis type of migration is very common at any fast-growing company. There might\nbe many reasons to write a new service instead of improving the old service,\nsuch as:\n\n  * The old system not supporting enough business requirements.\n  * The need to improve nonfunctional characteristics like handling extra load, achieving lower latency, storing more data.\n  * The language or framework the old service was written in, is no longer supported or preferred within the organization.\n\nService integration. Integrate a new service or approach.\n\nService integration.\n\nExamples include:\n\n  * Integrate a new API for use. For example, integrate a new payments processing service.\n  * Migrate to a new version of an external service. For example, move from the v1 API of a provider to a v2 API.\n  * Migrate to a new version of a service where instead of polling for events, the new service pushes events. Or instead of synchronously consuming inbound events, inbound events are consumed asynchronously, triggering callbacks.\n\nAs the examples above show, service integration migrations can include many\nthings. There are engineers who might not even consider some of the above to\nbe migrations, but treat them as a change in functionality. But I argue that\nwe should treat them as migrations.\n\nThis is because these are changes where an external service alters, and your\ncode also changes to ensure correct future behavior. This characteristic is\nwhat makes them risky changes, and why it\u2019s wise to proceed with caution,\nfollowing a migration playbook.\n\nService extraction. Move from an in-system dependency to an external one. This\nis a common approach at high-growth startups when large services get split up\ninto smaller ones.\n\nService extraction.\n\nOn the surface, service extractions seem like some of the most simple\nmigrations. After all, we\u2019re just moving code that already works into a new\nservice, right?\n\nWrong.\n\nService extractions are much more risky than simply moving code around. There\nare risks around networking and the correctness of the new service; especially\nas the code is rarely copied and pasted. Also, extracting a service comes\nloaded with future operational risks.\n\nWhile service extractions are one of the easiest types of migrations to pull\noff successfully without any monitoring or alerting in place, I suggest to\navoid this temptation and to follow a more thorough migration runbook, like\nthat we discuss below.\n\nCode migrations. Moving a part of the codebase to use a different framework,\nlibrary or a programming language.\n\nCode migration.\n\nThe biggest challenges of this type of migration are:\n\n  * Large-scale change. It\u2019s not uncommon to have to change a very high number of files and lines of code.\n  * Hard to rollback. Because the change is so large, it\u2019s also difficult, or sometimes impossible, to easily roll back the change. This is the opposite of most code changes which are small and can be unwound very easily.\n  * Harder to test in production. As the change is large-scale, it can be harder to test the full change under production traffic.\n\nA few examples of code migrations:\n\n  * Migrating to a new language. For example, Stripe migrated 3.5M lines of code over a weekend, from JavaScript type checked by Flow to Typescript.\n  * Upgrading to a new major version of a library, which introduces API-breaking changes.\n  * Changing coding patterns across the codebase. For example, updating a JavaScript codebase codebase to use promises instead of callbacks.\n\nData migrations. Migrating one or more databases to a new schema or database\nengine.\n\nData migration.\n\nData migrations are one of the most risky types of migrations. There are\nseveral reasons why:\n\n  * Difficult to roll back. When code is changed, it\u2019s easy enough to roll back a migration by rolling back the code. But this isn\u2019t always the case with data.\n  * Difficult to do in an atomic way. Ideally, a data migration is done as an atomic step. From one moment to the next, the old database or schema stops being used and all data moves to the new database or schema. But in practice, moving data takes time. This is why it\u2019s much easier to do a data migration with downtime.\n  * Data migration is often tied to code changes. For the migration to work as expected, code changes often need to be made at the very same time as the data is migrated.\n  * More edge cases to worry about. You will need to worry about edge cases like producers writing to the old database or using the old schema, or consumers not being able to understand the new schema.\n\nInfrastructure migrations. Move storage, computing or networking\ninfrastructure to a new provider or a new location.\n\nInfrastructure migration.\n\nInfrastructure migrations are the most risky, as they impact all services\nusing that infrastructure. An infrastructure migration gone wrong can take\ndown all dependent services with it. For this reason, these are the ones that\ntypically need more preparation than even data migrations.\n\nWhile all other migrations are virtual in the sense that they typically\ninvolve moving code or data, infrastructure migrations are when the physical\ninfrastructure might also need to be moved or changed, and onsite work might\nbe needed. Although most companies use cloud computing providers like AWS,\nAzure or Google Cloud, plenty of companies still operate their own data\ncenters, or run their own server boxes. Infrastructure migrations can mean\nchanges to these as well.\n\nService and tool upgrades are also changes which can cause outages. Examples\nof this include upgrading the CI/CD system to the latest version, updating\nJIRA to a new version, and other tooling infrastructure changes.\n\nBut for upgrades, the vendor of the tool is the one performing the migration.\nIt\u2019s advisable to understand how this migration happens under the hood and if\nit\u2019s a high-risk upgrade, and to use the approaches in this article to reduce\nthe risks of the update.\n\nThis was part 1 of 3 on how to do migrations well. Read the rest of the guide\nhere: Migrations Done Well: a guide for executing migrations well, at both\nsmall and large scales.\n\nPart 2: Executing a migration. Read it here.\n\n  1. Preparation\n  2. Pre-migration\n  3. The migration\n  4. After the migration\n  5. The migration\u2019s long-tail\n\nPart 3: The people and the business side of migrations. Read it here.\n\n  1. The people aspect of migrations\n  2. Selling migrations to the business\n  3. Closing advice for migrations\n  4. Further reading\n\nSubscribe to my weekly newsletter to get articles like this in your inbox.\nIt's a pretty good read - and the #1 tech newsletter on Substack.\n\n#### The Software Engineer's Guidebook\n\nI wrote The Software Engineer's Guidebook. Here is what Tanya Reilly, senior\nprincipal engineer and author of The Staff Engineer's Path says about it:\n\n> \"From performance reviews to P95 latency, from team dynamics to testing,\n> Gergely demystifies all aspects of a software career. This book is well\n> named: it really does feel like the missing guidebook for the whole\n> industry.\"\n\nGet the book here.\n\n### Featured Pragmatic Engineer Jobs\n\n  * Director of Engineering at Synthesia. \u00a3180-250K. Remote (EU or UK).\n  * Senior Frontend Engineer at WellTheory. $130-150K + equity. Remote (Global).\n  * Senior Frontend Developer at ePilot. \u20ac70-100K. K\u00f6ln (Germany) or Remote (Germany).\n  * Senior Full Stack Engineer at ePilot. \u20ac70-100K. Remote (Germany).\n\nThe above jobs score at least 9/12 on The Pragmatic Engineer Test.\n\n#### Newsletter\n\nEnjoying this article? Subscribe to my newsletter to get issues like this in\nyour inbox. It's a good read and the #1 technology newsletter on Substack.\n\n#### Gergely Orosz\n\nLast updated 23 October 2023. Originally published 15 Mar 2022.\n\nWriting The Pragmatic Engineer Newsletter. Author of The Software Engineer's\nGuidebook. Previously at Uber, Microsoft, Skype, Skyscanner.\n\nAmsterdam, Netherlands\n\n#### Share this post\n\nTwitter Facebook\n\nby Gergely Orosz\n\n### Menu\n\nClose\n\n  * Home\n  * Newsletter\n  * My Books\n  * Reading List\n  * Popular Articles\n  * Ethics statement\n  * Sponsoring\n  * Investing\n  * Contact me\n  * About\n  * Now\n  * The Software Engineer's Guidebook\n  * Interview Preparation\n  * RSS Feed\n  * twitter\n  * youtube\n  * linkedin\n\nSubscribe\n\n  * Home\n  * Newsletter\n  * My Books\n  * Reading List\n  * Popular Articles\n  * Ethics statement\n  * Sponsoring\n  * Investing\n  * Contact me\n  * About\n  * Now\n  * The Software Engineer's Guidebook\n  * Interview Preparation\n  * RSS Feed\n  * twitter\n  * youtube\n  * linkedin\n\n  * Subscribe via email\n  * Subscribe in a reader\n\nThe Pragmatic Engineer \u00a9 2022\n\n## Big Tech and the reality of scaling customer support\n\nThere are plenty of good examples to take from Big Tech when it comes to\nsoftware engineering: from how...\n\n## Notable Internal Systems at Amazon\n\nAmazon has a large number of internal systems. Here are ones worth knowing\nabout as a software engineer and...\n\n", "frontpage": false}
