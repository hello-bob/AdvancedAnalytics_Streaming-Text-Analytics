{"aid": "40261306", "title": "Misconceptions About Using Generative AI to Improve Programmer Productivity", "url": "https://www.growthaccelerationpartners.com/blog/6-misconceptions-about-using-generative-ai-to-improve-programmer-productivity", "domain": "growthaccelerationpartners.com", "votes": 1, "user": "ohjeez", "posted_at": "2024-05-05 00:01:43", "comments": 0, "source_title": "6 Misconceptions About Using Generative AI to Improve Programmer Productivity", "source_text": "6 Misconceptions About Using Generative AI to Improve Programmer Productivity\n- Growth Acceleration Partners\n\nSkip to content\n\n512-243-5754\n\n512-243-5754\n\n# 6 Misconceptions About Using Generative AI to Improve Programmer\nProductivity\n\nGrowth Acceleration Partners | April 16, 2024\n\nMachine Learning & AI\n\nReading Time: 7 minutes\n\nGenerative AI can improve developers\u2019 productivity \u2014 but only when they\ncorrectly calibrate expectations. Here are six ways to get off on the wrong\nfoot.\n\nAttempting to get through a work day without reading or hearing about AI is\nlike trying to send a text message with a carrier pigeon \u2014 highly unlikely.\nSoftware engineers in particular are inundated with articles exhorting them to\nuse generative AI (genAI) to write their applications. Most of those essays\nmake lofty promises, asserting that adopting GenAI guarantees better developer\nproductivity. And they often warn developers that they\u2019d better jump on board\nbefore their careers go the way of the dodo.\n\nPlenty of people are experimenting with or adopting GenAI, certainly. Gartner\npredicts eight in 10 enterprises will use GenAI APIs and models or deploy\nGenAI-enabled applications in production environments by 2026, up from less\nthan 5% in early 2023.\n\nThey\u2019re experiencing better programming productivity, too \u2014 to some degree.\nNine in 10 developers surveyed in the Evans Data 2023 Global Development\nSurvey Report say they got some benefit from using GenAI.\n\nBut \u201cYeah, let\u2019s jump on board!\u201d doesn\u2019t mean every developer should dive\nright in. Generative AI isn\u2019t ideal in all situations \u2014 particularly when\nprogrammers make wrong assumptions about its use.\n\nBefore you adopt GenAI, take the time to debunk these commonly misunderstood\nbeliefs, curated from the experiences of dozens of software engineers. Then\nyou can use these tools to get the most benefit.\n\n### Misconception: You just need to ask for what you want.\n\nFor decades, people have looked for foolproof ways to instruct computers.\nCOBOL initially was presented as a way for non-technical businesspeople to\ncreate software. The same pipe dream is being offered today: All you need to\ndo is tell the system what you want, and it\u2019ll create it. Poof... here\u2019s your\nsolution!\n\nHowever, as any software engineer knows, users don\u2019t always know what they\nwant, much less how to ask for it. Experienced programmers are adept at system\ndesign, but human languages do not express things as precisely as computer\nlanguages. Moreover, it\u2019s unrealistic to expect junior developers to express\nnon-trivial requirements clearly and unambiguously in natural language faster\nthan senior developers can express those requirements in code.\n\nIn the real world? Yes, GenAI can create code based on what you tell it you\nwant. But you get the most productivity by using GenAI for the tasks where\ncomputers excel: performing narrowly defined and repetitive tasks, thus\nfreeing human effort for things that require thought.\n\nAlso, using GenAI doesn\u2019t let you drop programming languages and system\ndesign. It means you need to add a new skill: prompt engineering. You need to\nknow when and how to ask an LLM to rewrite code to make it faster or more\nsecure. You must iterate requests to break down complex problems. That\u2019s a\nwhole suite of expertise yet to be fully developed.\n\nSo don\u2019t expect GenAI to write a complex application from a single prompt and\nhave it work perfectly on the first try. While LLMs are useful and powerful,\nyou need to educate yourself on how to use them well. It takes practice.\n\n### Misconception: GenAI can create the entire application for you.\n\nCertainly, you can use GenAI to write the code for a standard, mundane\napplication. It\u2019s good at generating code based on patterns and examples \u2014 the\ntype of software you knock out regularly, just with different values.\n\nFor many developers, GenAI is a useful, fast research assistant that suggests\npotential solutions, or an auto-complete that\u2019s aware of the context you\u2019re\nworking in. That certainly supports the promise of improved productivity,\nwhich is admirable. Go for it.\n\nHowever, while you can use GenAI to spit out a bunch of new React components\nor generate standard Apache configuration files, that is not where developers\nspend most of their time. The important pieces are down in the weeds, which \u2014\nat least today \u2014 require knowledge of an entire system. Don\u2019t expect any GenAI\nsystem to understand the context and intent behind the code.\n\nFurthermore, while GenAI can find potential solutions faster than humans can,\nit cannot judge the appropriateness or quality of those solutions. Expect\nGenAI applications to be unsuitable for novel or unconventional problems that\nrequire creativity.\n\nOne human might ask another: While you\u2019re busy writing more and more code, are\nyou taking enough time to ask whether you\u2019re building the right thing? A GenAI\nwon\u2019t. Human programmers bring intuition, insight and imagination to the\ntable, which AI cannot (yet?) replicate.\n\n### Misconception: GenAI\u2019s code quality is acceptable without adjustment.\n\nMost of these tools focus on writing code. But code generation is only the\nfirst step.\n\nBy far, developers\u2019 biggest concern with GenAI is the quality of the code it\nemits. Human oversight and intervention are crucial to ensure its quality,\nsecurity and reliability. Is the generated code correct? Was the training\ninput code correct? Did the AI understand what you were asking? Did you\nspecify the problem correctly, with all the boundary conditions?\n\nThat code has to be maintained. But by whom? Who understands it?\n\nSenior developers already look at someone\u2019s generated close-enough code\n(whether from a Design Patterns book, a previous project, or Stack Overflow),\ncorrect it to what they need, and gain productivity thereby. They barely\nrealize they\u2019re doing it. A junior developer lacks the experience or\nconfidence to know what needs to be corrected, and... that doesn\u2019t end well.\n\nGenAI can create shockingly good working code, but that code is similar to the\nexample code style that tech writers use. The generated code doesn\u2019t take\nadvantage of modularization, has few (if any) functions, relies on imperative\ncontrol rather than higher-level functions, doesn\u2019t use organizational or\nnaming features, and so on. Developers, especially junior developers, think\n\u201cit works\u201d (or, worse, \u201cit works on my machine,\u201d or \u201cit works if called\ncorrectly\u201d) is the end of the job. Code quality is iterative.\n\nGenerated code may contain vulnerabilities, bugs or inefficiencies that\nrequire human review and testing. Relying solely on AI for code generation\nwithout rigorous testing and quality assurance processes can lead to\nunreliable software.\n\nWorse, it can create false confidence in the code generated. For example, some\nacademic studies suggest developers who use AI assistants write less secure\ncode.\n\nBefore GenAI can be treated as trustworthy \u2014 and a true productivity\nenhancement \u2014 it needs to generate test plans and create tests to prove its\nsolutions\u2019 correctness (to whatever degree testing accomplishes that). But\ntoday, a developer must decide whether the solutions it presents are viable.\n\n### Misconception: You can trust the current crop of tools implicitly.\n\nAll the fawning, \u201cAdopt GenAI now!\u201d stories take it as a given that the tools\nare \u201cgood enough.\u201d That perception sets up everyone for disappointment.\n\nRemember: This is new. When you use GenAI today you are using Mosaic in 1994.\nExpect the field to improve rapidly. But don\u2019t expect the tools to do\neverything or to do it well.\n\nBeyond the technical issues, many uncertainties remain to be addressed.\n\nOne concern is the training data. Generative AI models require large amounts\nof high-quality training data to perform effectively, and that data needs to\nbe updated regularly. The industry also has not yet resolved whether biases\nand limitations in the training data can manifest in the generated code.\n\nAnother issue is AI\u2019s ethical and legal implications, and the governmental\noversight that may ensue. Of current note is the EU AI Act, the first\ncomprehensive regulation on AI proposed by a major regulator. . Developer\nproductivity may be hampered by the need to work with lawyers to address data\nprivacy, intellectual property rights and their potential for unintended\nconsequences.\n\n### Misconception: Developers\u2019 productivity instantly will skyrocket.\n\nAll those breathless articles touting GenAI for application development\nsuggest that integrating the generated code magically will result in long-term\nproductivity increases.\n\nIt does make a difference. But set your expectations for \u201chow much\u201d to a real-\nworld scenario. According to the Evans Data survey, 87% of developers who have\nused GenAI see a positive impact on their project development timeline.\nTwenty-two percent say GenAI reduced the time they spent by more than 20%.\nThat\u2019s a healthy improvement, surely.\n\nWith too many essays, though, the premise is that someone\u2019s productivity is\nmeasured by the speed of code generation. As if typing is the bottleneck, and\nthe only thing a developer needs is a way to type faster. More code does not\nsuggest more value.\n\n### Misconception: GenAI will be so good that developers won\u2019t be necessary.\n\nEvery technological innovation is accompanied by warnings that it\u2019ll replace\ndevelopers or IT personnel. GenAI is the latest to make that promise.\n\nSome people are taking the warnings seriously. According to the Evans Data\nsurvey, 28% of developers are extremely concerned that AI and machine learning\nmight eventually leave them without a job, and 46% are very concerned.\n\nThat means a quarter of developers aren\u2019t especially worried about GenAI\u2019s\neffect on their careers. Their primary reasons echo the sentiments discussed\nhere: their jobs require creativity that AI will never have (34%), AI can only\ndo what it\u2019s trained for and told to do (25%), and the developer expects to\nretire before AI becomes a factor (13%).\n\nThe computer industry regularly warns developers that a new technology will\neliminate their jobs. Usually, it shifts their role to a different type of\nproductivity. \u201cGenAI will just allow developers to produce more,\u201d explained\none developer. \u201cI have never seen a software house run out of work for\ndevelopers to do; there is always \u2018technical debt.\u2019\u201d\n\n### Expect productivity enhancements \u2014 not magic.\n\nUnderstanding these misconceptions is essential for adopting generative AI\ntools effectively and responsibly in programming workflows. The rate of\nimprovement in the models is breakneck, the GenAI tools are scaling linearly,\nand there\u2019s no reason to think the architectures are near theoretical or\nstructural performance limits.\n\nGenAI has the potential to enhance productivity and innovation in software\ndevelopment, but it\u2019s crucial to recognize its limitations and to address\nassociated challenges proactively.\n\nCould your business benefit from an expert partner in AI solutions? Reach out\nand let\u2019s explore how GAP can help.\n\n## RELATED ARTICLES\n\nVIEW ALL ARTICLES\n\nMay 1, 2024\n\nSoftware & Data Engineering\n\n### The Impact of Accessibility in Custom Software Development\n\nTechnology continues to shape our lives in profound ways, and making sure\neveryone \u2014 regardless of ability \u2014 can access and interact with digital\ncontent is not only the right thing to do, but also a smart business decision.\nAccessibility is a fundamental necessity, and it is much more difficult and\ncostly to retrofit into existing software than to incorporate it from the\nstart.\n\nRead More\n\nApril 24, 2024\n\nDigital Transformation, Nearshore Solutions, Software & Data Engineering,\nThought Leadership\n\n### The CIO Balancing Act: Prioritizing Exciting vs. Essential Projects While\nBuilding Teams to Handle it All\n\nFrom Infrastructure to Innovation, Tech Leaders Must Communicate Value &\nRetain the Right Expertise to Scale CIOs and CTOs are often in a balancing\nact: leveraging their technical expertise while also being strategic leaders.\nIt\u2019s about aligning technology investments with budgets and priorities. And\nyou\u2019re pursuing initiatives that achieve transformative changes alongside\ninitiatives that enable [...]\n\nRead More\n\n## Subscribe to our Newsletter\n\n## Company\n\n## Services\n\nCopyright \u00a9 2024 Growth Acceleration Partners. All Rights Reserved. Privacy Policy | Terms & Conditions\n\n### Start typing and press enter to search\n\nWe use cookies to enable website functionality, understand the performance of\nour site, provide social media features, and serve more relevant content to\nyou. We may also place cookies on our and our partners\u2019 behalf to help us\ndeliver more targeted ads and assess the performance of these campaigns. You\nmay review our Privacy Policy here. Accept\n\nPrivacy & Cookies Policy\n\n#### Privacy Overview\n\nThis website uses cookies to improve your experience while you navigate\nthrough the website. Out of these, the cookies that are categorized as\nnecessary are stored on your browser as they are essential for the working of\nbasic functionalities of the ...\n\nNecessary\n\nAlways Enabled\n\nNecessary cookies are absolutely essential for the website to function\nproperly. This category only includes cookies that ensures basic\nfunctionalities and security features of the website. These cookies do not\nstore any personal information.\n\nNon-necessary\n\nAny cookies that may not be particularly necessary for the website to function\nand is used specifically to collect user personal data via analytics, ads,\nother embedded contents are termed as non-necessary cookies. It is mandatory\nto procure user consent prior to running these cookies on your website.\n\nSAVE & ACCEPT\n\nNotifications\n\n", "frontpage": false}
