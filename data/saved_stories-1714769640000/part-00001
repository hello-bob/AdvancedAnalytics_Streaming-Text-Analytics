{"aid": "40248347", "title": "This Month in Rust GameDev: April Edition and Call for Submissions for May", "url": "https://gamedev.rs/news/050/", "domain": "gamedev.rs", "votes": 1, "user": "janhohenheim", "posted_at": "2024-05-03 14:51:40", "comments": 0, "source_title": "This Month in Rust GameDev #50 - April 2024", "source_text": "This Month in Rust GameDev #50 - April 2024 | Rust GameDev WG\n\nRust GameDev WG\n\n# This Month in Rust GameDev #50 - April 2024\n\n2024-05-03\n\nWelcome to the 50th issue of the Rust GameDev Workgroup\u2019s monthly newsletter.\nRust is a systems language pursuing the trifecta: safety, concurrency, and\nspeed. These goals are well-aligned with game development. We hope to build an\ninviting ecosystem for anyone wishing to use Rust in their development\nprocess! Want to get involved? Join the Rust GameDev working group!\n\nYou can follow the newsletter creation process by watching the coordination\nissues. Want something mentioned in the next newsletter? Send us a pull\nrequest. Feel free to send PRs about your own projects!\n\n  * Announcements\n  * Game Updates\n  * Engine Updates\n  * Learning Material Updates\n  * Library Updates\n  * Other News\n  * Discussions\n\n## Announcements #\n\nPlease fill out this survey before skipping this section! More info below!\n\nHey everyone, it\u2019s been a while! As you\u2019ve certainly noticed, the newsletter\nhas been on hiatus for a while. The reason was mostly maintainer burnout,\nwhich is also why the newsletter of August 2023 was not published until a few\ndays ago.\n\nWe\u2019re back now though! A couple of community members, Jan Hohenheim\n(@janhohenheim) and Thierry Berger (@Vrixyz), have led the revival of the\nnewsletter. This includes making changes requested by the community, and\nimproving sustainability for the long term.\n\nYou can read more about the changes being made in this blog post.\n\n### Community Survey #\n\nThis restructuring is also a good time to improve the content of the\nnewsletter. We\u2019ve got some community feedback on the Rust GameDev Discord\nalready and would like to hear more from you. It would be great if you could\nfill out this survey to let us know how we can improve the newsletter going\nforward. The survey closes on the 28th of May. We will be evaluating the\nsurvey results in an upcoming blog post, so stay tuned for that.\n\nThat\u2019s all for now. Have fun reading!\n\n## Game Updates #\n\n### Way of Rhea #\n\nWay of Rhea just got a release date: it will be coming to Steam on May 20th,\n2024!\n\nWay of Rhea (Steam) is a color-based puzzle game with difficult puzzles, but\nforgiving mechanics being developed by @masonremaley in a custom Rust engine.\n\nYou can support development by wishlisting Way of Rhea on Steam, or signing up\nfor the mailing list.\n\nRecently, a closed beta began. All characters now have voices, and various\nspeedrunning features were added. Older CPUs are now supported. Secrets were\nmade harder, and an in-game achievement UI was created.\n\nFor the full changelog, see the release notes.\n\n### SM64JSARCHIVE #\n\nSM64JSARCHIVE is an actively maintained fork of sm64js: a decompilation\nproject of Super Mario 64 to JavaScript. The code is open-sourced on GitHub.\n\nThe backend server, which is written in Rust, has finally been able to start\nafter 10 long months and is now live at https://mmo.sm64jsarchive.com\n\nA successful stress test for the MMO feature was run on April 10th.\n\n### Open Combat #\n\nOfficial demo available soon\n\nOpen Combat (GitHub, Discord) is a real-time tactical game which takes place\nduring World War II.\n\nThe basic game logic and HUD are now complete, and the high-definition map for\nthe demo is finished.\n\nSome things are missing, like high-definition assets for soldiers or minimal\nAI for opponents. But the demo is playable and the team would love to hear\nyour feedback!\n\n### Times of Progress #\n\nTimes of Progress (Steam, Twitter/X, Mastodon) is an upcoming city builder\ngame set during the industrial revolution.\n\nIn April, they added lots of UI widgets and improved performance by\nrefactoring the orders system.\n\nThe demo is not available yet but interested players can sign up for the\nupcoming closed beta by joining the newsletter.\n\n### Monk Tower #\n\nMonk Tower (itch.io, Google Play, Github) is a tiny coffee-break roguelike\ngame, intended for short runs (ca. 15mins).\n\nThe gameplay is quite distilled and revolves mostly around resource\nmanagement. The player has limited inventory capacity and the weapons get\ndamaged after each use. There are 20 randomly generated levels to beat.\n\nIt is available on desktop (Windows / Linux), Android, and Web (mobile\nfriendly). The game\u2019s source code also comes with a custom WGPU-based 2D\nframework.\n\nDiscussions: (/r/roguelikes)\n\n### You are Merlin #\n\nYou are Merlin (Web Game, GitHub - Rust/CLI, GitHub - WASM) by @hseager is a\ntext adventure game that compiles to both CLI and WebAssembly.\n\nThis initial version features a main quest, side quests, items, and a boss\nfight. Players can choose their favourite visual theme such as Zelda,\nWarcraft, and Fallout. The web version also supports mobile devices.\n\nAlthough fairly simple, this first version provides a good foundation for\nbuilding more features in later updates.\n\nDiscussions: (/r/rust_gamedev)\n\n### Jumpy #\n\nJumpy: Machine gun and Periscope\n\nJumpy (GitHub, Discord, Twitter) by Spicy Lobster is a pixel-style, tactical\n2D shooter with a fishy theme.\n\nThis month the base functionalities of round scoring and map transitions have\nbeen implemented. New weapons such as the Blunderbuss, Periscope, and Machine\nGun are ready for fish-on-fish combat.\n\nJumpy is now featuring corpse physics and a \u201cragdoll\u201d button to send your Fish\nflopping about.\n\nOn the treasure map for the near future is improving UX and new player\nexperience, polish and improvements on match scoring / round transitions, and\nmore awesome weapons.\n\nDiscussions: GitHub, Twitter\n\n## Engine Updates #\n\n### Bottomless-Pit 0.3 #\n\nBottomless-Pit is a 2d game engine written with WGPU that has been around for\na year, which can be found on crates.io and GitHub. Very recently a 2d camera\nwas added as well as WASM and web support. Current development is being\nfocused on stability and QoL changes like texture sampling options and\nimproved input. You can check out several engine examples on the web. Since\nthe engine is in its infancy, its developer calls for developers to use it and\ngive the engine some feedback.\n\nCurrent features are:\n\n  * Custom Shader Support\n  * Basic rendering\n  * Text rendering\n  * Input and window event handling\n\n## Learning Material Updates #\n\n### Building games for Android with Rust #\n\n@maciekglowka has recently shared some thoughts on their blog about building\nRust games for Android. Rather than a step-by-step guide, it is a collection\nof issues one can possibly encounter when targeting Android.\n\nTopics mentioned:\n\n  * \u2018Window\u2019 creation (via winit)\n  * Android app\u2019s lifecycle vs. the WGPU surface creation\n  * User data storage\n  * System UI hiding via jni and Android API\n  * Building AAB files to meet Google Play requirements\n\n### Bevy: A case study in ergonomic Rust #\n\nChris Biscardi was at RustNation UK recently and gave talk on Bevy\u2019s Rusty\nergonomics titled Bevy: A case study in ergonomic Rust. In their own words:\n\n> There are at least two, if not three, talks worth of material around how\n> Bevy progressively discloses complexity across multiple \u201cstacks\u201d of APIs;\n> and the work done so far is very impressive in terms of how it all fits\n> together, especially as a large-and-growing OSS project.\n\n### Reactivity in Bevy: From the Bottom Up #\n\nTalin wrote a three-part series on \u201cReactivity in Bevy: From the Bottom Up\u201d,\nwhich describes the workings of bevy_reactor, an experimental, work-in-\nprogress framework for doing reactive programming within Bevy.\n\n## Library Updates #\n\n### Jolt Bindings #\n\nLucian Greathouse has published their Jolt bindings for Rust. Jolt is a C++\nphysics engine you might know from its use in Horizon: Forbidden West. Lucian\nhas previously worked on JoltC, a C API for Jolt, which this project uses in\nthe background.\n\nThe bindings work can be found on the just-rust GitHub repo GitHub repository\nand come in two flavors:\n\n  * joltc-sys: Unsafe bindings to the C API\n  * rolt: Ergonomic and safe Rust API\n\n### Hexx 0.17 #\n\nHexx, the popular crate for hexagonal tools, has released version 0.17. This\nrelease has a strong focus on performance:\n\n  * Large performance improvement on various computations like rings and wedges\n  * Add support for optimized storage for hexagonal and rhombus-shaped maps\n  * Added support for rectiline path\n\nAnd utility:\n\n  * Added a 13th example showcasing all natively supported shapes\n  * Removed confusing items\n\n### Lightyear 0.13 #\n\nlightyear_website is a comprehensive networking library for bevy to make\nmultiplayer games. It comes with multiple types of transports (WebTransport,\nWebSocket, UDP, etc.) and supports replication techniques like client-side\nprediction, server interpolation, interest management, and more! Check out the\nexamples!\n\nThe latest release, 0.13, brings two big new features:\n\n  * Steam support: you can now use the Steamworks SDK as your transport layer, which lets you use the Valve network! Note that lightyear supports running multiple transports in parallel, so it\u2019s possible to have cross-play between Steam and non-Steam users.\n  * Listen-server mode: it is now possible to run a server and a client in the same process/bevy app. This can be useful to avoid the costs of a dedicated server, or to have a similar codebase between singleplayer and multiplayer.\n\nExample (with 300ms of latency)\n\n## Other News #\n\n  * Alice I. Cecile of the Bevy Foundation would like to collect community feedback on game development in Rust. Please fill out her survey!\n\n## Discussions #\n\nLogLog games has published a very well-written blog post about their reasons\nto leave Rust gamedev. It talks about shortcomings in Rust as a language in\ngeneral and as a game development tool in particular. Some insights into the\nlimitations of ECS are also provided. Some interesting community discussions\nhave been sparked by this post:\n\n  * Hacker News\n  * /r/gamedev\n  * /r/rust\n\nThat\u2019s all news for today, thanks for reading!\n\nWant something mentioned in the next newsletter? Send us a pull request.\n\nAlso, subscribe to @rust_gamedev on Twitter or /r/rust_gamedev subreddit if\nyou want to receive fresh news!\n\n## Rust GameDev WG\n\nStay up to date with the progress and recent developments in the Rust Game\nDevelopment Working Group.\n\n  * GitHub (rust-gamedev)\n  * Twitter (rust_gamedev)\n  * Discord (#wg-gamedev)\n  * RSS feed\n\n", "frontpage": false}
