{"aid": "40237521", "title": "Why Rust Isn't Killing C++", "url": "https://societysbackend.com/p/why-rust-isnt-killing-c", "domain": "societysbackend.com", "votes": 17, "user": "klelatti", "posted_at": "2024-05-02 15:42:44", "comments": 29, "source_title": "Why Rust Isn't Killing C++", "source_text": "Why Rust Isn't Killing C++ - by Logan Thorneloe\n\nShare this post\n\n#### Why Rust Isn't Killing C++\n\nsocietysbackend.com\n\n#### Discover more from Society's Backend\n\nA 5-min read each week to understand the engineering behind the AI you use\nevery day. Written by a machine learning engineer at Google.\n\nOver 1,000 subscribers\n\nContinue reading\n\nSign in\n\n# Why Rust Isn't Killing C++\n\n### And a consideration for choosing a language\n\nLogan Thorneloe\n\nApr 18, 2024\n\n6\n\nShare this post\n\n#### Why Rust Isn't Killing C++\n\nsocietysbackend.com\n\nShare\n\nI can\u2019t see a post about Rust or C++ without comments about Rust replacing\nC++. I\u2019ve worked in Rust as a cybersecurity intern at Microsoft and I really\nenjoyed it. I\u2019ve also worked extensively in C++ in both research applications\nand currently in my role as a machine learning engineer at Google. There is a\nton of overlap in applications between the two languages, but C++ isn\u2019t going\nanywhere anytime soon.\n\nThis is important to understand because the internet likes to perpetuate the\nmyth that C++ is a soon-to-be-dead language. I\u2019ve seen many people say not to\nlearn C++ because Rust can do basically everything C++ can do but is much\neasier to work with and almost guaranteed to be memory safe. This narrative is\nespecially harmful for new developers who focus primarily on what languages\nthey should gain experience in. This causes them to write off C++ which I\nthink is a huge mistake because it\u2019s actually one of the best languages for\nnew developers to learn.\n\nC++ is going to be around for a long time. Rust may overtake it in popularity\neventually, but it won\u2019t be anytime soon. Most people say this is because\ndevelopers don\u2019t want to/can\u2019t take the time to learn a new language (this is\nabhorrently untrue) or Rust isn\u2019t as capable as C++ (also untrue for the vast\nmajority of applications). In reality, there\u2019s a simple reason Rust won\u2019t\novertake C++ anytime soon: the developer talent pool.\n\nMost applications that use C++ are latency and efficiency critical. In my\nexperience, this criticality is responsible for the profitability of the\napplication. Two examples where C++ is frequently used are machine learning\nand high-frequency trading applications. Both require efficient, low-latency\nexecution to achieve a profit.\n\nYou might think: So what? Rust can be used here too. And it absolutely can be.\nBut the developer talent pool for C++ is much larger than Rust. Companies\nutilizing C++ are the same companies that tend toward a higher hiring bar\nbecause they need knowledgeable developers that are able to be productive\nquickly. A larger hiring pool is a great aid in this effort. Choosing C++ over\nRust makes sense just to have a larger pool of potential employees to pick\nfrom. Sure, a company can hire C++ developers and teach them Rust, but that\u2019s\na hit on developer velocity which these companies need to avoid.\n\nI bring this up because the \u201cRust has killed C++\u201d narrative can have a very\nnegative impact on individual software developers. C++ is one of the best\nlanguages for new developers to learn for two primary reasons:\n\n  * It forces an understanding of fundamentals. Fundamentals are important to learn and they lay the groundwork for a developer to learn other languages. Going from C++ to another language is easy but the other way can be a bit more difficult. I\u2019d like to emphasize here that part of the job of a software engineer is to be able to pick up languages required for the problem they\u2019re trying to solve. C++ is helpful for learning this skill.\n\n  * C++ is incredibly lucrative. The roles looking for excellent developers to tackle latency-critical problems tend to pay well. As a new developer, learning C++ puts you in a great position for a lucrative career.\n\nI recommend dabbling in C++. Even though I\u2019d like to program in Rust because\nit's very enjoyable, there\u2019s a ton of friction for new language adoption\nespecially in profit-critical applications. C++ isn\u2019t going anywhere anytime\nsoon.\n\n### Subscribe to Society's Backend\n\nBy Logan Thorneloe \u00b7 Launched 9 months ago\n\nA 5-min read each week to understand the engineering behind the AI you use\nevery day. Written by a machine learning engineer at Google.\n\n6 Likes\n\n\u00b7\n\n1 Restack\n\n6\n\nShare this post\n\n#### Why Rust Isn't Killing C++\n\nsocietysbackend.com\n\nShare\n\nComments\n\nMachine Learning Infrastructure: The Bridge Between Software Engineering and\nAI\n\nWhat makes machine learning infra so important and why I find it so\ninteresting\n\nDec 19, 2023 \u2022\n\nLogan Thorneloe\n\n92\n\nShare this post\n\n#### Machine Learning Infrastructure: The Bridge Between Software Engineering\nand AI\n\nsocietysbackend.com\n\n8\n\nDevin Has Exposed a Major Issue with Software Engineering\n\nAnd isn't that we're all going to lose our jobs\n\nMar 19 \u2022\n\nLogan Thorneloe\n\n34\n\nShare this post\n\n#### Devin Has Exposed a Major Issue with Software Engineering\n\nsocietysbackend.com\n\n11\n\nBackend Biweekly #3: 97 Updates and Resources\n\nHuge Nvidia Updates, Gemini Hackathon for Money, and more\n\nMar 29 \u2022\n\nLogan Thorneloe\n\n8\n\nShare this post\n\n#### Backend Biweekly #3: 97 Updates and Resources\n\nsocietysbackend.com\n\nReady for more?\n\n\u00a9 2024 Logan Thorneloe\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": true}
