{"aid": "40196386", "title": "The Goldilocks Consensus Problem", "url": "https://www.varunsrinivasan.com//2024/04/28/the-goldilocks-consensus-problem", "domain": "varunsrinivasan.com", "votes": 1, "user": "martialg", "posted_at": "2024-04-29 09:48:33", "comments": 0, "source_title": "The Goldilocks consensus problem", "source_text": "The Goldilocks consensus problem - Varun Srinivasan\n\n## The Goldilocks consensus problem\n\nImagine that you wanted to build a sufficiently decentralized Twitter \u2014 a\nsocial network in which no single person or company is in control. How would\nyou build something like that?\n\nA social network is decentralized if it has many servers run by different\npeople. The data would be spread across servers, so you\u2019d need a simple way to\nanswer questions like \u201cWhat are the latest posts?\u201d. This is where consensus\ncomes in.\n\nWe developed a new consensus model for Farcaster, our decentralized social\nnetwork. Existing models had user experience and decentralization tradeoffs,\nmaking scaling a social network difficult. Our model, called a deltagraph,\nuses blockchains and CRDTs to scale to millions, and hopefully billions, of\nusers.\n\n### Why do we need a new consensus model?\n\nFederation and blockchains, which are common models in untrusted networks,\nhave tradeoffs that aren\u2019t ideal for a social network. Federation is simple\nbut leads to centralization, while blockchains prevent this but are slow and\nexpensive.\n\nIn a federated system, anyone can run a server. Users pick the one they like,\nand all servers are loosely connected. In practice, federated services become\noligopolies. Email is an example of this, where it\u2019s very difficult to start a\nnew server as a new developer. There are many unwritten rules and gatekeepers\nthat you have to get past.\n\nWithout a forcing function, servers in a federated system diverge over time.\nAPIs and data formats become slightly different, intentionally or due to bugs.\nDevelopers write workarounds that become implicitly enshrined, making the\nsystem more complex and opaque. Federated servers start out simple because\nthere isn\u2019t formal consensus, but this tradeoff creates systemic complexity.\n\nBlockchains have a consensus model to prevent exactly this kind of problem.\nUnfortunately, the type of consensus they use makes them too slow and\nexpensive for social networks. Twitter users generate over 100,000 updates a\nsecond ^1, while a modern blockchain is 100x slower under ideal conditions ^2.\nUsers must pay for each post they add to the blockchain. It is hard to grow a\nsocial network under these constraints.\n\nWould faster blockchains solve this? The tradeoffs that blockchains make to\nsupport financial transactions make this unlikely. Consensus must prevent\ndouble spending, which limits the strategies that can be used. People invent\nnew ways to financialize things on blockchains which creates demand. The\nappetite for financial transactions seems insatiable even as supply increases,\nmaking it hard to store social data at a reasonable cost.\n\nSocial networks face a Goldilocks problem \u2014 federated consensus is too weak,\nand blockchain consensus is too strong.\n\n### Solving the Goldilocks problem with CRDTs\n\nBlockchains reach consensus by letting one node decide the transaction order.\nOther nodes must send transactions to them and wait for a confirmation. This\nstep is slow because it requires coordination over a network, but it is\nessential to prevent double-spending.\n\nA social network network doesn\u2019t need perfect ordering. Little harm is done if\nAlice\u2019s posts show up in your feed before Bob\u2019s. Farcaster\u2019s consensus model -\nthe deltagraph - uses CRDTs, which can reach consensus without coordination\nbut do not guarantee a global order.\n\nA deltagraph is made up of deltas, which are the atomic units of change.\nDeltas are stored on nodes, servers that accept them from users and forward\nthem to other nodes. Alice can say \u201cHello World\u201d by creating an add-post delta\nand sending it to a node. She can delete it later by sending a remove-post\ndelta. When a node gets the remove, it will discard the add-post and store the\nremove-post instead.\n\nWhat happens if deltas arrive in a different order? A \u201cremove-wins\u201d rule\nhandles this case. The rule says that if a post is removed, it can never be\nadded again. With these rules enforced, you can send deltas as many times as\nyou like and in any order, and they end up in the same state. This is very\ndifferent from blockchains, where reordering transactions changes outcomes.\n\nThe deltagraph organizes deltas into sets and graphs. A set maps to something\na user can do, like posting a message. It will store deltas related to that\naction and enforce rules. The rules are always commutative, associative, and\nidempotent, and they behave like anonymous delta-state CRDTs ^3. A graph is a\ncollection of sets that belong to a user.\n\nDeltas across graphs can be merged without rules because they can\u2019t affect\neach other. Even if Alice says \u201cHello world\u201d and Bob replies, the deltas can\nbe processed in any order. Deltagraph consensus is quick because it can run in\nparallel and without network calls.\n\nOnce a node achieves local consensus, it broadcasts deltas to other nodes.\nSyncing is more complex than blockchains because there is no global order. Two\nnodes have to compare all their sets to find missing deltas. There\u2019s ongoing\nresearch to improve sync speed in deltagraphs.\n\nDeltagraphs are much faster at consensus, but we still have a problem. What\nhappens if someone broadcasts a billion deltas? Nodes would sync this with\neach other, run out of storage, and the entire network would crash.\n\n### Charging rent\n\nFarcaster solves the overload problem by charging rent to store deltas. Users\npay a storage fee and can post as many deltas as they like for a year. Nodes\nstore a certain number of deltas for each user, and if the limit is crossed,\nthe oldest deltas are removed.\n\nIn a feed-based social network, older messages expiring will have little\nimpact on today\u2019s feed, and users can rent more storage to keep a longer\nhistory around.\n\nDeltagraphs apply a \u2018last-write-wins\u2019 which means that older deltas expire\nwhen the set is full. This rule can be stacked on top of the existing set\nrules while allowing deltas to be merged in any order. For instance, if Alice\nhas three deltas with increasing timestamps - A1, A2, A3 - and the set can\nonly store two deltas, the two most recent deltas will remain after the set\nlogic runs.\n\nThe problem with charging rent is that the deltagraph can\u2019t move money. This\nis a good thing because it reduces demand for space. We don\u2019t want Alice, who\nis trying to post a photo of her cat, to compete with Bob, who is trying to\nday trade. But how do we collect rent?\n\nFarcaster\u2019s deltagraph relies on a blockchain to handle the ordered\ntransactions ^4. A user must first make an onchain transaction to create an\naccount and pay rent from their wallet. They can then create a delta, sign it\nwith their wallet, and send it to the deltagraph. The deltagraph tracks\nonchain events and verifies the delta\u2019s signature before accepting it.\n\nThe deltagraph doesn\u2019t have to worry about byzantine fault problems. Thanks to\nCRDTs, most actions don\u2019t need coordinated consensus, and the few that do are\noutsourced to a blockchain. It\u2019s only concern is handling p2p layer challenges\nlike denial-of-service and eclipse attacks^5.\n\n### What\u2019s next for deltagraphs?\n\nThe deltagraph isn\u2019t theoretical \u2014 Farcaster has been using it for a year and\nhas over 300,000 paying users. The network has 1,000 nodes serving 5 million\ndeltas every day. Our goal is to reach Twitter scale while staying\ndecentralized and providing a great user experience, and we see a clear path\nahead.\n\nDeltagraphs augment blockchains, enabling applications that weren\u2019t cost-\neffective before. This design pattern might unlock other use cases that we\nhaven\u2019t yet considered. Alternate approaches to consensus \u2014 CRDTs, verifiable\ncompute, or something else entirely \u2014 could be paired with blockchains to\ndecentralize games, marketplaces, and other consumer apps.\n\nThanks to Shilpa Lokareddy, Dan Romero, Georgios Konstantopoulos, Sanjay\nRaveendran, Cassie Heart and Polynya for help with drafts.\n\n  1. Twitter data is hard to come by these days. The last known number was 6,000 tweets per second. After adding reactions, follows and accounting for growth, the number is likely ~100,000. \u21a9\n\n  2. Decentralized blockchains range from 60 (Ethereum) to 1600 (Solana) today. Source. \u21a9\n\n  3. van der Linde, A., Leit\u00e3o, J., & Pregui\u00e7a, N. (2016). \u0394-CRDTs: Making \u03b4-CRDTs delta-based. \u21a9\n\n  4. Farcaster\u2019s contracts live on OP Mainnet, but any programmable blockchain would work. \u21a9\n\n  5. Heilman, E., Kendler, A., Zohar, A., & Goldberg, S. (2015). Eclipse attacks on bitcoin\u2019s peer-to-peer network. \u21a9\n\nApril 28, 2024 \u00b7 farcaster, consensus, crdt, deltagraph\n\n", "frontpage": false}
