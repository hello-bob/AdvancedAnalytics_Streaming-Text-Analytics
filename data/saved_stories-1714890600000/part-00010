{"aid": "40259634", "title": "Remix \u2013 Build Better Websites", "url": "https://remix.run/", "domain": "remix.run", "votes": 1, "user": "ulrischa", "posted_at": "2024-05-04 19:08:06", "comments": 0, "source_title": "Remix - Build Better Websites", "source_text": "Remix - Build Better Websites\n\n# Welcome to Remix\n\n## Focused on web standards and modern web app UX, you\u2019re simply going to\nbuild better websites\n\nRemix is a full stack web framework that lets you focus on the user interface\nand work back through web standards to deliver a fast, slick, and resilient\nuser experience. People are gonna love using your stuff.\n\nGet StartedRead the Docs\n\n    \n    \n    export async function loader({ request }) { return getProjects(); } export async function action({ request }) { const form = await request.formData(); return createProject({ title: form.get(\"title\"), }); } export default function Projects() { const projects = useLoaderData(); const { state } = useNavigation(); const busy = state === \"submitting\"; return ( <div> {projects.map((project) => ( <Link to={project.slug}> {project.title} </Link> ))} <Form method=\"post\"> <input name=\"title\" /> <button type=\"submit\" disabled={busy}> {busy ? \"Creating...\" : \"Create New Project\"} </button> </Form> </div> ); }\n    \n    \n    export async function loader({ request }) { return getProjects(); } export async function action({ request }) { const form = await request.formData(); return createProject({ title: form.get(\"title\") }); } export default function Projects() { const projects = useLoaderData(); const { state } = useNavigation(); const busy = state === \"submitting\"; return ( <div> {projects.map((project) => ( <Link to={project.slug}>{project.title}</Link> ))} <Form method=\"post\"> <input name=\"title\" /> <button type=\"submit\" disabled={busy}> {busy ? \"Creating...\" : \"Create New Project\"} </button> </Form> </div> ); }\n\n## Testimonials\n\nJenna Smith,\n\nRadix UI\n\n> I've been waiting for something to encourage progressive enhancement in the\n> React space *forever* and Remix truly is so much more. Proving we don't need\n> to sacrifice React or choose SSG for a lightning fast, accessible UI, and\n> the DX makes it all too easy \ud83e\udd24\n\n@jkup\n\nCloudflare\n\n> holy \ud83d\udca9 Remix is good\n\n@aweary\n\nDiscord, prev React Core\n\n> I just rewrote my first Remix app on top of Cloudflare Workers and Supabase\n> and it\u2019s so damn good\n\n@TAbrodi\n\nSoftware Developer\n\n> My mind is still blown away with Remix! So easy and elegant \ud83d\ude29. I love how it\n> also focuses on Accessibility (Progressive Enhancement...) \ud83e\udd2f, A few days ago\n> I was like wazzup with remix, we got Next.js and Svelte \ud83d\ude34 ... and now I'm\n> fired up like crazy \ud83d\ude02. This is so good \ud83e\udd24\n\n@sergiodxa\n\nDaffy, prev Vercel\n\n> What\u2019s really cool with Remix loaders is that you can do most of your data\n> transformation and calculations there, like check if a list is empty, limit\n> the number of records, only send specific attributes, so your React\n> component just receives the data and renders it, no logic needed\n\n@elrickvm\n\nFullstack Dev, Frontside\n\n> Remix is going to put developers on the Hot Path to build accessible,\n> scaleable, and performant apps, that have stellar user experiences and\n> amazing developer ergonomics. It's not only going to be a win for\n> developers, but also a big win for the end-users!\n\n@theflyingcoder1\n\nFullstack Developer\n\n> In my opinion @remix_run will be game changer for corporate teams hesitant\n> to adopt full stack JavaScript. The core concepts are so intuitive you can\n> pick it up in a day, and it will even integrate into your existing stack.\n\n@wisecobbler\n\nSoftware Engineer, Box\n\n> I love what @mjackson and @ryanflorence are doing with Remix! Deploying to\n> AWS Lambda in under 30 seconds \ud83e\udd2f\n\n@meindertsmajens\n\nWeb Developer\n\n> Building with @remix_run has been awesome so far. Having used Next.js for\n> applications for years, the nested layouts are a wonderful feature. I also\n> haven't learned this much about the web in years.\n\n@cammchenry\n\nWeb Developer\n\n> I love using @remix_run for my website. Remix has improved my productivity\n> as a front-end developer by empowering me to seamlessly switch between\n> front-end and back-end code.\n\n@airuyi\n\nApp Developer\n\n> If you're doing #webdevelopment you should check out Remix \ud83d\udd25 It's a new\n> (old) paradigm for web dev, which simplifies our code, especially state\n> management\ud83d\ude05, speeds up our page loads, and gives us a mental model and\n> framework we can rely on to create our best work\n\n## While you were waiting for your static site to build, distributed web\ninfrastructure got really good. Break through the static.\n\nRemix is a seamless server and browser runtime that provides snappy page loads\nand instant transitions by leveraging distributed systems and native browser\nfeatures instead of clunky static builds. Built on the Web Fetch API (instead\nof Node) it can run anywhere. It already runs natively on Cloudflare Workers,\nand of course supports serverless and traditional Node.js environments, so you\ncan come as you are.\n\nPage speed is only one aspect of our true goal though. We're after better user\nexperiences. As you\u2019ve pushed the boundaries of the web, your tools haven\u2019t\ncaught up to your appetite. Remix is ready to serve you from the initial\nrequest to the fanciest UX your designers can think up. Check it out \ud83d\udc40\n\n## Remix has a cheat code: Nested Routes.\n\n\u2191\u2191\u2193\u2193\u2190\u2192\u2190\u2192BA\u21b5\n\nWebsites usually have levels of navigation that control child views.\n\nNot only are these components pretty much always coupled to URL segments...\n\n...they\u2019re also the semantic boundary of data loading and code splitting.\n\nHover or tap the buttons to see how they\u2019re all related\n\n\ud83d\udc47\n\nexample.com/sales/invoices/102000\n\nFakebooks\n\nDashboard\n\nAccounts\n\nSales\n\nExpenses\n\nReports\n\nSales\n\nOverview\n\nSubscriptions\n\nInvoices\n\nCustomers\n\nDeposits\n\nOverdue\n\n$10,800\n\nDue Soon\n\n$62,000\n\nInvoice List\n\nSanta Monica\n\n$10,800\n\n1995\n\nOverdue\n\nStankonia\n\n$8,000\n\n2000\n\nDue Today\n\nOcean Avenue\n\n$9,500\n\n2003\n\nPaid\n\nTubthumper\n\n$14,000\n\n1997\n\nDue in 10 Days\n\nWide Open Sp...\n\n$4,600\n\n1998\n\nDue in 8 Days\n\nStankonia\n\n$8,000\n\nDue Today \u2022 Invoiced 10/31/2000\n\nPro Plan\n\n$6,000\n\nCustom\n\n$2,000\n\nNet Total\n\n$8,000\n\n## What about loading states?\n\nThrough nested routes, Remix can eliminate nearly every loading state.\n\nMost web apps fetch inside of components, creating request waterfalls, slower\nloads, and jank.\n\nRemix loads data in parallel on the server and sends a fully formed HTML\ndocument. Way faster, jank free.\n\nWithout Remix\n\nexample.com/sales/invoices/102000\n\nFakebooks\n\nDashboard\n\nAccounts\n\nSales\n\nExpenses\n\nReports\n\nSales\n\ndocument\n\nroot.js\n\nuser.json\n\nsales.js\n\nsales/nav.json\n\ninvoices.js\n\ninvoice.js\n\ninvoice/{id}.json\n\nWith Remix\n\nexample.com/sales/invoices/102000\n\nFakebooks\n\nDashboard\n\nAccounts\n\nSales\n\nExpenses\n\nReports\n\nSales\n\nOverview\n\nSubscriptions\n\nInvoices\n\nCustomers\n\nDeposits\n\nOverdue\n\n$10,800\n\nDue Soon\n\n$62,000\n\nInvoice List\n\nSanta Monica\n\n$10,800\n\n1995\n\nOverdue\n\nStankonia\n\n$8,000\n\n2000\n\nDue Today\n\nOcean Avenue\n\n$9,500\n\n2003\n\nPaid\n\nTubthumper\n\n$14,000\n\n1997\n\nDue in 10 Days\n\nWide Open Sp...\n\n$4,600\n\n1998\n\nDue in 8 Days\n\nStankonia\n\n$8,000\n\nDue Today \u2022 Invoiced 10/31/2000\n\nPro Plan\n\n$6,000\n\nCustom\n\n$2,000\n\nNet Total\n\n$8,000\n\ndocument\n\nroot.js\n\nsales.js\n\ninvoices.js\n\ninvoice.js\n\n(Keep scrolling to compare)\n\nSay goodbye to Spinnageddon\n\nSay goodbye to Spinnageddon\n\n## Pre-fetching Everything\n\nNested routes allow Remix to make your app as fast as instant.\n\nRemix can prefetch everything in parallel before the user clicks a link.\n\nPublic Data. User Data. Modules. Heck, even CSS.\n\nZero loading states. Zero skeleton UI. Zero jank.\n\nAlright, you caught us, they\u2019re just prefetch link tags, #useThePlatform\n\nexample.com/dashboard\n\nFakebooks\n\nDashboard\n\nAccounts\n\nSales\n\nExpenses\n\nReports\n\nDashboard\n\nRecent Activity\n\nAlerts\n\nMessages\n\nNew Invoice\n\nCustomer\n\nStankonia\n\nNet Total\n\n$8,000\n\nNew Invoice\n\nCustomer\n\nOcean Avenue\n\nNet Total\n\n$9,500\n\nsales.js\n\nsales/nav.json\n\ninvoices.js\n\ninvoice.js\n\ninvoice/{id}.json\n\ninvoice.css\n\n## Data loading\n\n...\n\nYou ever notice most of the code in your app is for changing data?\n\nImagine if React only had props and no way to set state. What\u2019s the point? If\na web framework helps you load data but doesn\u2019t help you update it, what\u2019s the\npoint? Remix doesn\u2019t drop you off at the <form onSubmit> cliff. (What the heck\ndoes event.preventDefault do anyway?)\n\nResilient, progressively enhanced data updates are built in.\n\nIt\u2019s so simple it\u2019s kind of silly. Just make a form...\n\n...and an action on a route module. It looks like traditional HTML forms but\nenables fully dynamic web experiences you're after.\n\nRemix runs the action server side, revalidates data client side, and even\nhandles race conditions from resubmissions.\n\nGet fancy with transition hooks and make some pending UI. Remix handles all\nthe state, you simply ask for it.\n\nOr get jiggy with some optimistic UI. Remix provides the data being sent to\nthe server so you can skip the busy spinners for mutations, too.\n\nHTML forms for mutations. Who knew?\n\n    \n    \n    export default function NewInvoice() { return ( <Form method=\"post\"> <input type=\"text\" name=\"company\" /> <input type=\"text\" name=\"amount\" /> <button type=\"submit\">Create</button> </Form> ); } export async function action({ request }) { const body = await request.formData(); const invoice = await createInvoice(body); return redirect(`/invoices/${invoice.id}`); }\n\n## Error Handling\n\n:)\n\nYour websites run into problems, but with Remix they don\u2019t need to be\nrefreshed. Error handling is hard to remember and hard to do. That\u2019s why it\u2019s\nbuilt in.\n\nRemix handles errors while Server Rendering. Errors while Client Rendering.\nEven errors in your server side data handling.\n\n## Route Error Boundaries keep the happy path happy.\n\nEach route module can export an error boundary next to the default route\ncomponent.\n\nIf an error is thrown, client or server side, users see the boundary instead\nof the default component.\n\nRoutes w/o trouble render normally, so users have more options than slamming\nrefresh.\n\nIf a route has no boundary, errors bubble up. Just put one at the top and\nchill out about errors in code review, yeah?\n\nexample.com/sales/invoices/102000\n\nFakebooks\n\nDashboard\n\nAccounts\n\nSales\n\nExpenses\n\nReports\n\nSales\n\nOverview\n\nSubscriptions\n\nInvoices\n\nCustomers\n\nDeposits\n\nOverdue\n\n$10,800\n\nDue Soon\n\n$62,000\n\nInvoice List\n\nSanta Monica\n\n$10,800\n\n1995\n\nOverdue\n\nStankonia\n\n$8,000\n\n2000\n\nDue Today\n\nOcean Avenue\n\n$9,500\n\n2003\n\nPaid\n\nTubthumper\n\n$14,000\n\n1997\n\nDue in 10 Days\n\nWide Open Sp...\n\n$4,600\n\n1998\n\nDue in 8 Days\n\nStankonia\n\n$8,000\n\nDue Today \u2022 Invoiced 10/31/2000\n\nPro Plan\n\n$6,000\n\nCustom\n\n$2,000\n\nNet Total\n\n$8,000\n\nOh snap!\n\nThere was a problem loading this invoice\n\nThat's probably enough for now. What are you waiting for?\n\nGo Play!\n\n", "frontpage": false}
