{"aid": "40091540", "title": "A Readout from Tectonics", "url": "https://www.memorysafety.org/blog/tectonics-readout/", "domain": "memorysafety.org", "votes": 2, "user": "wofo", "posted_at": "2024-04-19 20:23:27", "comments": 0, "source_title": "A Readout from Tectonics", "source_text": "A Readout from Tectonics - Prossimo\n\nSupport this Work\n\n# A Readout from Tectonics\n\nJosh Aas Mar 29, 2024\n\nIn November of 2023, ISRG held an event in San Francisco called Tectonics. Our\ngoal was to discuss solutions for moving forward with memory safety for\ncritical Internet infrastructure. We had a group of about 50 people at the\ncenter of the memory safety movement, from engineers to public policy and\ncorporate decision makers. We could not have asked for a better group.\n\nThere were four tracks, plus substantial open time for all attendees to\ndiscuss amongst themselves. The tracks were:\n\n  * Facilitating adoption of memory safe code for Internet critical infrastructure\n  * Memory safety roadmaps for organizations\n  * Facilitating the inclusion of Rust in operating systems\n  * Improving trust in Rust dependency trees\n\nIn this post we'd like to communicate some of the take-aways from the group as\na whole as well as each track.\n\n## Making Connections\n\nJust from having spent the day together, we've seen connections and\nconversations continue between groups that previously weren't working\ntogether.\n\nFor example - folks from Tweede golf met folks from Immunant at the event.\nTweede golf is now contributing to the memory safe AV1 decoder that Immunant\nis working on, and Immunant is contributing to the memory safe zlib\nimplementation that Tweede golf is working on. We love to see it!\n\n## General Memory Safe Language Adoption Issues\n\nAcross all of our tracks there was quite a bit of discussion about general\nissues that prevent developers and organizations from moving to safer\nlanguages. The main issues identified were:\n\n  * Developer fondness for and commitment to C/C++, unwillingness to learn a new language.\n\n    * Fear that the knowledge one has built up over many years is now obsolete.\n    * Fear that any new language that isn't 20+ years old already is a fad, won't be around long enough to justify commitment.\n    * Lack of understanding about just how unsafe C and C++ are, and associated belief that one knows how to write/ship safe C/C++.\n  * Need to invest in making operating system support for memory safe languages like Rust equivalent or better than support for C/C++. Compilers need to be included, packaging systems need work, policies need updating.\n  * Lack of resources to rewrite components when people and orgs are stressed with maintenance and other demands for their current C/C++ software.\n  * Concern that new code will introduce an unacceptable number of new logic bugs while resolving memory safety issues.\n  * Complications and security risks associated with languages that tend to produce programs with large numbers of dependencies.\n\n## Facilitating Adoption of Memory Safe Code for Internet Critical\nInfrastructure\n\nThis track covered a lot of ground trying to identify roadblocks and paths\nforward. The group examined dynamics within and between private companies, the\nopen source community, philanthropy, and government.\n\nEase of use was a major topic, with the conversation frequently returning to\nimproving the toolchains for memory safe languages and making them, and\nvarious domain specific frameworks, more readily accessible to developers.\n\nThere was also quite a bit of discussion about the need for more regular\ncommunication between people working on memory safety issues at various\norganizations. There was general agreement that de-siloing some of the problem\nsolving would help move things along faster.\n\nPolicy making came up frequently, and memory safety was identified as an\ninteresting policy problem because this is an engineering problem that we know\nhow to solve. The people and resources are out there, we just need to bring it\nall together to move forward. It's likely that there are many policy levers\nworth pulling to help move things forward. A key driver behind this view was\nthe observation that in many contexts, a migration to a memory safe language\nis entirely a question of whether or not the project is resourced.\n\nThe group also discussed whether there are more places where we can build\ncollective commitments that we could seek funding from companies and\ngovernments for.\n\nWe'd like to thank Alex Gaynor and Paul Kehrer for leading this track.\n\n## Memory Safety Roadmaps for Organizations\n\nVarious people and groups have been considering the role that memory safe\nroadmaps for organizations might have to play in moving things forward. The\ngoal for this track was to spend time examining the potential in more depth.\n\nThere was general agreement that there isn't a single kind of roadmap likely\nto work across the entire spectrum of sizes and types of organizations. To get\ncoverage across the organizations that matter, we'll probably have to pursue\nmultiple strategies.\n\nThe three sources of influence in the space are regulation, market forces, and\ndistribution channels. We're looking for roadmap solutions that help these\nsources of influence make good decisions and exert their influence in the\nright areas. In order to do this, we need ways to measure the safety of\nsoftware and perhaps also the soundness of organizational policy and\ndirection.\n\nThere are questions about how to get executive buy-in for producing roadmaps,\nand how to make sure there is organizational follow-through. On the subject of\nwhat it would take to get executive buy-in, there was discussion about what\nother benefits might be bundled with the security benefits. For example -\nMoore's law is over and parallelism is the way forward for performance. Memory\nsafety really helps with this.\n\nWhen we think about the substance of a plan in a roadmap, there is broad\nagreement that we want organizations to commit to writing all new projects in\na memory safe language, followed by a commitment to moving critical components\nof existing software (e.g. media decoders, TLS libraries) to memory safe\nsoftware. What exactly we're looking for beyond that, and what's realistic, is\nnot clear enough.\n\nIt was proposed that if a roadmap plan encounters too many challenges, we\ncould pivot to some kind of external analysis for gaining insight into\nprogress. One option for external analysis is something like SSL Labs but for\nmemory safety. Pieces of software could be scored based on their memory\nsafety, and organizations could be scored based on their software, policies,\nand practices.\n\nWe'd like to thank Eric Mill and Bob Lord for leading this track.\n\n## Facilitating the inclusion of Rust in operating systems\n\nRust is a key tool for programs that need to be both high performance and\nmemory safe. Strong support for Rust in operating systems can greatly improve\nsecurity. This track explored the challenges and possibilities for Rust\nsupport in operating systems. The takeaways included:\n\n  * Interfacing between Rust and C++ is extremely difficult. Because of limitations imposed by the complexity of C++, Bindgen forces a C interface model.\n\n    * Can interoperability with C++ be improved with deeper integration of clang++ in the Rust compiler?\n    * Would it be possible to create a model in which C++ and Rust are subsumed into one model, with Rust bringing the memory management verification?\n  * Need to make a better plan for long-term support of older Rust compiler/toolchain versions. This is also a problem for LLVM to some extent.\n  * Porting some parts of libc (e.g. DNS, malloc) to Rust would certainly be a boon for operating system security.\n  * Static compilation presents challenges for updating dependencies because each package using a dependency must update instead of a single shared library. Operating systems will take some time to adjust to this.\n\n    * Is there a future in which it's possible to ship dependencies as dynamically linked libraries?\n  * Integrating additional memory safe code in operating systems will involve more cross-language boundaries in binaries. We should try to minimize the possibility of memory management issues on these boundaries, including the ones described here.\n  * More a la carte separation of std and core (e.g. stack unwinder) would be helpful. The ability to move platform irrelevant components would be helpful in order to support additional platforms.\n\nWe'd like to thank Arlie Davis and Siddarth Pandit for leading this track.\n\n## Improving Trust in Rust Dependency Trees\n\nRust makes it easy to include dependencies, but this has led to a tendency for\nRust programs to include many dependencies. It's not uncommon to see 100+\ndependencies even for modest programs. The problem is that this necessitates\nan extensive web of trust that is a serious security liability. We have seen\nsimilarly vulnerable supply chains in Node and Python lead to disaster [1][2].\n\nLogistically, having many dependencies can create problems for operating\nsystem packages trying to introduce Rust programs into contexts where having\nso many dependencies is rare (e.g., C).\n\nWhile it is possible to build applications with fewer dependencies, the\nproblem is endemic within the Rust ecosystem. It's not clear that the Rust\nproject today is keen to address the problem, so Tectonics attendees have been\ndiscussing two possible options, which could be pursued in parallel:\n\n  1. Building and promoting a more advanced version of blessed.rs, one that offers more assurances about the blessed packages. The idea is to get programs and libraries to use the same set of dependencies and take more steps to ensure that the blessed packages are well-maintained. We could also focus on reducing indirect dependencies for the blessed packages.\n  2. Building a set of libraries outside of the official Rust project, to be maintained by the community that builds it. This would offer the same guarantees and benefits that a standard library would: security update guarantees, trustworthy ownership, consistent and thorough testing, consistent naming and searchability, etc.\n\nOf these options #1 would probably be an easier but less complete solution. We\nhave already heard from multiple parties interested in option #2 that could\nbring significant resources to bear.\n\nWe'd like to thank Florian Gilcher and Dirkjan Ochtman for leading this track.\n\n## Conclusion\n\nThis was the first event that ISRG has ever produced. We learned a lot, and\nwe're pleased with the outcomes, including stronger relationships between\nvarious people and organizations. We may do it again if we feel the timing is\nright at some point in the future.\n\nAs we shared in the opening, this group of about 50 people at the center of\nthe memory safety movement made Tectonics the success that it was. We're\ngrateful for everyone listed below for their time and contributions:\n\nALEX GAYNOR\n\nALEX REBERT\n\nAMIT LEVY\n\nANDREW WHALLEY\n\nARLIE DAVIS\n\nBOB LORD\n\nCHRIS PALMER\n\nCRAIG NEWMARK\n\nDAVID WESTON\n\nDAN FERNELIUS\n\nDIRKJAN OCHTMAN\n\nDOUG GREGOR\n\nEDWARD WANG\n\nFIONA KRAKENBUERGER\n\nFOLKERT DE VRIES\n\nGAIL FREDERICK\n\nHUGO VAN DE POL\n\nJEFF HODGES\n\nJOEL MARCEY\n\nJOSH AAS\n\nKEES COOK\n\nKEVIN RIGGLE\n\nLUIS VILLA\n\nMATTHEW RILEY\n\nMICHAEL BRENNAN\n\nPAUL KEHRER\n\nPER LARSEN\n\nPOWEN SHIAH\n\nRAMON DE C VALLE\n\nSARAH GRAN\n\nSHAI CASPIN\n\nSTEPHEN CRANE\n\nSTEPHEN LUDIN\n\nSTEW SCOTT\n\nTYLER MCMULLEN\n\nWALTER PEARCE\n\nWINDOW SNYDER\n\nYAEL GRAUER\n\nYUCHEN WU\n\n548 Market St, PMB 77519 San Francisco, California 94104-5401\n\nSend all mail or inquiries to:\n\nPO Box 18666, Minneapolis, MN 55418-0666, USA\n\n### Resources\n\n  * Privacy Policy\n  * Trademark Policy\n\n### Social\n\n  * Twitter\n  * LinkedIn\n\nRead all about our nonprofit work this year in our 2023 Annual Report.\n\n### Sign up for the Prossimo newsletter\n\n\u00a9 2022 Internet Security Research Group. All rights reserved.\n\nBack to top\n\n", "frontpage": false}
