{"aid": "40208696", "title": "Safari flaw can expose iPhone users in the EU to tracking", "url": "https://www.mysk.blog/2024/04/28/safari-tracking/", "domain": "mysk.blog", "votes": 1, "user": "skilled", "posted_at": "2024-04-30 08:56:16", "comments": 0, "source_title": "Safari Flaw Can Expose iPhone Users in the EU to Tracking", "source_text": "Safari Flaw Can Expose iPhone Users in the EU to Tracking\n\nSkip to content\n\nMysk\n\n# Safari Flaw Can Expose iPhone Users in the EU to Tracking\n\nPosted byMysk April 28, 2024April 28, 2024 Leave a comment on Safari Flaw Can\nExpose iPhone Users in the EU to Tracking\n\nBy Talal Haj Bakry and Tommy Mysk\n\nIf you enjoyed this work, you can support us by checking out our apps:\n\n  * TextCrafter \u2013 Craft & Share\n  * Ctrl \u2013 The best presentation companion for your Apple Watch\n  * Canvas \u2013 Draw Together, Wirelessly!\n\n## tl;dr\n\nApple has introduced a new URI scheme in iOS 17.4 to allow EU users to\ndownload and install alternative marketplace apps from websites. Once an\nauthorized browser invokes the special URI scheme marketplace-kit, it hands\noff the installation request to a MarketplaceKit process that starts\ncommunicating with the marketplace back-end servers to finally install the\napp. As part of the installation flow, the MarketplaceKit process sends a\nunique client_id identifier to the marketplace back-end. Both Safari and the\nMarketplaceKit process allow any website to make a call to the marketplace-kit\nURI scheme of a particular marketplace. As a result, multiple websites can\ntrigger the MarketplaceKit process to send the same unique identifier\nclient_id to the same marketplace back-end. This way a malicious marketplace\ncan track users across different websites.\n\n## Video\n\n## Background\n\nTo comply with the European Digital Market Act (DMA), Apple had to introduce a\nnew method that allows EU users to download and install alternative\nmarketplace apps from the developers\u2019 websites. The marketplace developer\nneeds to add a call to a special URI scheme to their website. The call must be\ntriggered by an HTML button, i.e. a click event. According to Apple, this is a\nsecurity measure to prevent triggering the installation process without the\nuser\u2019s consent.\n\nApple must have forgotten that this is the web, and developers can actually\nstyle HTML buttons to virtually look like anything. It\u2019s not clear what value\nthis security measure brings. Anyhow, the new URI scheme looks like this:\n\n    \n    \n    marketplace-kit://install ?alternativeDistributionPackage=<url> &installVerificationToken=<install verification token> &token=<authentication token> &account=<user id>;\n\nApple documentation describe the fields as follows:\n\nURL Parameter| Description  \n---|---  \nalternative Distribution Package| Your marketplace app\u2019s alternative\ndistribution package in the assembled format described in Ingesting an\nalternative distribution package.  \ninstall VerificationToken| A required JSON web signature (JWS). For more\ninformation, see Supplying an install verification token.  \ntoken| An optional authentication token to include if downloads require\nauthorization. iOS sends the token back to your token endpoint to reference\nthis request. The value is free-form, and can contain any information at your\ndiscretion.  \naccount| An optional user ID for the page visitor. iOS groups apps in restore\nrequests based on account. iOS also provides the account as login_hint for the\nauthorization call during interactive re-authentication; for more information,\nsee Reauthenticating a person to manage apps.  \n  \nWhen this scheme is invoked by an authorized browser, it hands off the\ninstallation request to MarketplaceKit. Then MarketplaceKit starts an internal\nprocess that receives all the URL parameters and kick-starts the installation\nprocess. It starts by retrieving the following .well-known resource from the\nmarketplace website:\n\n    \n    \n    https://<fully-qualified-domain>/.well-known/oauth-authorization-server\n\nMarketplaceKit constructs this URL by replacing the base URL with the base URL\npassed in the alternativeDistributionPackage parameter. Once downloaded,\nMarketplaceKit extracts the token_endpoint URL from the JSON structure and\nsends the following request to it:\n\n    \n    \n    POST /oauth/token HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded grant_type=urn:ietf:params:oauth:grant-type:token-exchange &issued_token_type=urn:ietf:params:oauth:token-type:access_token &subject_token=eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0 &subject_token_type=urn:ietf:params:oauth:token-type:access_token &client_id=6ef01a168f14431d98a0626cf5c89104\n\nAs Apple documentation explains, client_id is \u201ca value that iOS randomly\ngenerates once per marketplace, device, and account combination.\u201d This means\nthat client_id remains unique as long as the combination of device, Apple ID\naccount, and marketplace remains the same. It remains the same every time the\nmarketplace-kit scheme is invoked, even after a device restart or clearing the\nbrowser cache. In addition, MarketplaceKit relays whatever token passed to the\nscheme in the parameter token to the subject_token parameter in the POST\nrequest to the /oauth/token endpoint.\n\nIt is worth noting that only browsers authorized by Apple can invoke the\nmarketplace-kit URI scheme. Browsers willing to support the new scheme have to\napply for a special entitlement. At the moment, only Brave, Ecosia, and Safari\nsupport the marketplace-kit URI scheme.\n\n## Implementation Flaws\n\nOur testing shows that Apple delivered this feature with catastrophic security\nand privacy flaws. First, Safari invokes the marketplace-kit URI scheme\nwithout checking the origin of the website containing the URI scheme and the\nURL passed in the alternativeDistributionPackage input parameter. This allows\ncross-site tracking as we\u2019ll show in the next section.\n\nSecond, MarketplaceKit would accept any parameters once invoked. It doesn\u2019t\nread or validate the JWT tokens passed in the argument. We are sure that\nMarketplace doesn\u2019t read the tokens because we sent text that doesn\u2019t conform\nto a valid JWT structure and MarketplaceKit accepted it. Worse, it blindly\nrelayed the invalid JWT token when calling the /oauth/token endpoint. This\nopens the door to various injection attacks to target either the\nMarketplaceKit process or the marketplace back-end.\n\nThird, certificate pinning is not deployed in the entire process. This makes\nit easy to intercept and manipulate requests between the MarketplaceKit\nprocess and the marketplace back-end. It might be tricky to support\ncertificate pinning here because MarketplaceKit might communicate with many\nservers that can dynamically be changed by the marketplace developer in the\n.well-known resources. But this also has potential issues. In our testing, we\noverwrote the .well-known resources through intercepting the calls and we fed\nour own endpoints. As a result, MarketplaceKit called our endpoints.\n\nFlaws in software are not uncommon. However, the severity of these flaws in\nboth the design and implementation raise concerns about Apple\u2019s entire\napproach to app sideloading.\n\n## Secretly Tracking Users\n\nOur observation shows that MarketplaceKit always reacts to the input\nparameters passed in the scheme and send the client_id identifier to any\nwebsite. It doesn\u2019t check if the information matches a registered marketplace\nor not. However, we realized that when the information doesn\u2019t match a\nregistered marketplace, client_id keeps changing every time the URI scheme is\ninvoked. But as long as the base URL of alternativeDistributionPackage and\naccount input parameters match a registered app marketplace, then\nMarketplaceKit would always send a fixed client_id to the /oauth/token\nendpoint of the registered marketplace.\n\nThis makes the perfect recipe for a malicious marketplace to be able to track\nusers across different websites. All the malicious marketplace has to do is\nget approved by Apple. History shows that Apple\u2019s review process is very\nflawed as many scam apps continue to find their way to Apple\u2019s App Store.\n\nThe release of the first alternative marketplace run by altstore.io has made\nthe process clearer for us and provided a good example for experimentation.\n\nWe built a couple websites to prove our theory. Since the AltStore has already\nbeen approved by Apple, we \u201cborrowed\u201d their alternativeDistributionPackage URL\nand account name. We added the following code to an HTML button and deployed\nit on three different websites, namely mysk.ca, mysk.app, and mysk.io:\n\n    \n    \n    async function downloadAltStore() { const adpURL = \"https://altstore.io/\"; const storeAccountName = \"altstore\"; const installURL = \"marketplace-kit://install?alternativeDistributionPackage=\" + adpURL + \"&installVerificationToken=\" + \"some token\" + \"&token=\"+ \"thisIsMyskCa\" + \"&account=\" + storeAccountName; window.location.href = installURL; }\n\nNow when a user visits these three websites, each website will trigger\nMarketplaceKit to call the marketplace endpoint and hand it the unique\nclient_id and any custom payload passed in the token parameter. The unique\nclient_id will enable the marketplace developer to trace all three visits to\nthe same user. It can also share this information with the websites to\npersonalize ads, for example.\n\nFor the script above, MarketplaceKit sent the following request to the\n/oauth/token endpoint of AltStore:\n\n    \n    \n    POST /oauth/token HTTP/1.1 Host: 8b70f8gea.execute-api.eu-central-1.amazonaws.com Content-Type: application/x-www-form-urlencoded Connection: keep-alive Accept: */* User-Agent: ManagedAppDistribution/1.0 iOS/17.4.1 model/iPhone 12,8 build/21E236 Content-Length: 262 Accept-Language: en-US,en;q=0.9 Accept-Encoding: gzip, deflate, br client_id=BF66B736-AC4B-4E04-A8C7-2628AD577E55 &issued_token_type=urn:ietf:params:oauth:token- type:access_token&grant_type=urn:ietf:params:oauth:grant-type:token- exchange&subject_token=thislsMyskCa&subject_token_type=urn:ietf:params:oauth:token-type:access_token\n\nWe used Safari on iOS 17.4.1 in private browsing mode during the test.\n\nThe sample script shown above breaks right after exchanging the unique\nidentifier. It doesn\u2019t run the entire flow to eventually install the app.\nApple documentation states that the installation can only be started once\ninvoked from the developer\u2019s registered website. But the check for the website\nhappens at a very later stage of the process.\n\nWhat makes this attack perfect for trackers is that MarketplaceKit runs once\nthe user taps on a button. It could really be any button. And it sends the\nunique client_id silently without the user being aware of that. And when it\nfails for some networking reason, it fails silently without presenting any\nerror to the user.\n\nThis attack only works on EU iPhones. Other iPhones don\u2019t support the\nmarketplace-kit URI scheme.\n\n## Final Words\n\nThe flaw of exposing users in the EU to tracking is the result of Apple\ninsisting on inserting itself between marketplaces and their users. This is\nwhy Apple needs to pass an identifier to the marketplaces so they can identify\ninstalls and perhaps better calculate the due Core Technology Fee (CTF).\n\nSafari should protect users against cross-site tracking. It should do what\nBrave has done and check the origin of the website and match it against the\nURL passed in the alternativeDistributionPackage parameter. It shouldn\u2019t\ninvoke the URI scheme if the URLs don\u2019t match. Surprisingly, Apple finds it\nmore important to check if the scheme call came from an HTML button event than\nchecking for cross-site invocation of the marketplace-kit URI scheme. Very\nPuzzling.\n\nMoreover, we always advise developers dealing with JWT tokens to verify them\nbefore using them. Sadly, we can\u2019t even give this advice to Apple because they\ndon\u2019t even try to parse the JWT tokens. So, please read the JWT tokens and\nmake sure they are parsable, then validate them before working on the request.\n\nFinally, EU users who want to avoid being tracked should use Brave. It\u2019s\ncurrently the only authorized browser that blocks this type of cross-site\ntracking.\n\n## Technical details\n\n  * iOS version: 17.4.1\n  * iPhone country: Germany\n  * Tested Brave version: 1.65\n  * Tested Ecosia version: 9.4.0\n\nPosted byMyskApril 28, 2024April 28, 2024Posted inSecurity\n\n## Leave a comment\n\n### Cancel reply\n\n## If you like this work...\n\nSupport us by downloading our apps at https://mysk.app\n\nMysk, Proudly powered by WordPress.\n\nWe use cookies on our website to give you the most relevant experience by\nremembering your preferences and repeat visits. By clicking \u201cAccept\u201d, you\nconsent to the use of ALL the cookies.\n\nCookie settingsACCEPT\n\nPrivacy & Cookies Policy\n\n#### Privacy Overview\n\nThis website uses cookies to improve your experience while you navigate\nthrough the website. Out of these, the cookies that are categorized as\nnecessary are stored on your browser as they are essential for the working of\nbasic functionalities of the ...\n\nNecessary\n\nAlways Enabled\n\nNecessary cookies are absolutely essential for the website to function\nproperly. This category only includes cookies that ensures basic\nfunctionalities and security features of the website. These cookies do not\nstore any personal information.\n\nNon-necessary\n\nAny cookies that may not be particularly necessary for the website to function\nand is used specifically to collect user personal data via analytics, ads,\nother embedded contents are termed as non-necessary cookies. It is mandatory\nto procure user consent prior to running these cookies on your website.\n\nSAVE & ACCEPT\n\n", "frontpage": false}
