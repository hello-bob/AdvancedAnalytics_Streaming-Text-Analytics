{"aid": "40090389", "title": "YAMLScript \u2013 Program in YAML", "url": "https://yamlscript.org/", "domain": "yamlscript.org", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-19 18:30:24", "comments": 0, "source_title": "YAMLScript.org", "source_text": "YAMLScript.org | YAMLScript\n\nYAMLScript \u2014 Program in YAML\n\nYAMLScript is a new YAML Loader that can add \"Super Powers\" to your plain old\nYAML config files.\n\nYAMLScript intends to provide a loader library for every programming language\nthat uses YAML. Currently we have working libraries for Clojure, Java, NodeJS,\nPerl, Python, Raku, Ruby and Rust.\n\nBy using YAMLScript as your YAML loader, You can dynamically include data from\nother data files (YAML, JSON, XML, CSV, etc), pull data in from the web or\neven from a database. You can filter, map, merge, reduce, generate,\nconcatenate, interpolate and manipulate your data to your heart's content.\n\nIf you've ever wanted more from your YAML files, YAMLScript has you covered.\nYou can easily mix logic into your data files at any point.\n\nOn the other hand, if you just want a rock solid YAML 1.2 loader (without any\ncode evaluation magic) that works the same in any programming language, you\nshould also give YAMLScript a try.\n\nAll valid YAML 1.2 Core Schema files are also valid YAMLScript files! That's\npretty much any YAML config file you already have.\n\nWithout the special !yamlscript/v0 tag at the top, your YAMLScript loader will\nload any existing YAML (or JSON) just as one would expect a normal YAML loader\nto do.\n\nLater you can add the special tag and take your YAML capabilities to a whole\nnew level!\n\nHere's an example of using YAMLScript in a YAML file called file.yaml:\n\n    \n    \n    --- !yamlscript/v0/ &pets\n    \n    cats:: load(\"cats.yaml\") dogs:: curl(\"https://yamlscript.org/dogs.yaml\") .yaml/load().big\n    \n    --- !yamlscript/v0/\n    \n    about: A YAMLScript Example about Pets title:: \"$(ENV.USER.str/capitalize())'s Pets\" birds: !sort: - Parrot - Canary - Owl cats:: .*pets.cats dogs:: .*pets.dogs.shuffle().take(2 _)\n\nAnd these other files:\n\n    \n    \n    $ cat cats.yaml - Siamese - Persian - Maine Coon\n    \n    $ curl -s https://yamlscript.org/dogs.yaml small: - Chihuahua - Pomeranian - Maltese\n    \n    big: - Mastiff - Great Dane - Saint Bernard - Otterhound\n\nFrom the command line, run:\n\n    \n    \n    $ ys --load file.yaml {\"about\":\"A YAMLScript Example about Pets\", \"title\":\"Ingy's Pets\", \"birds\":[\"Canary\",\"Owl\",\"Parrot\"], \"cats\":[\"Siamese\",\"Persian\",\"Maine Coon\"], \"dogs\":[\"Otterhound\",\"Saint Bernard\"]}\n\nBy default YAMLScript outputs JSON, but it can also output YAML by running:\n\n    \n    \n    $ ys -Y file.yaml about: A YAMLScript Example about Pets title: Ingy's Pets birds: - Canary - Owl - Parrot cats: - Siamese - Persian - Maine Coon dogs: - Great Dane - Mastiff\n\nYou can get the same result from a programming language like Python by using\nits YAMLScript loader library. Here's a CLI one liner to do the same thing in\nPython:\n\n    \n    \n    $ python -c ' import yamlscript,yaml ys = yamlscript.YAMLScript() input = open(\"file.yaml\").read() data = ys.load(input) print(yaml.dump(data))' about: A YAMLScript Example about Pets birds: - Canary - Owl - Parrot cats: - Siamese - Persian - Maine Coon dogs: - Otterhound - Mastiff title: Ingy's Pets\n\nYAMLScript is also a new, complete, full featured, general purpose, functional\nand dynamic programming language whose syntax is encoded in YAML. YAMLScript\ncan be used for writing new software applications and libraries.\n\nHere's an example of a YAMLScript program called 99-bottles.ys:\n\n    \n    \n    #!/usr/bin/env ys-0\n    \n    # Print the verses to \"99 Bottles of Beer\" # # usage: # ys 99-bottles.ys [<count>]\n    \n    defn main(number=99): each [n (number .. 1)]: say: paragraph(n)\n    \n    defn paragraph(num): | $bottles(num) of beer on the wall, $bottles(num) of beer. Take one down, pass it around. $bottles(num - 1) of beer on the wall.\n    \n    defn bottles(n): cond: n == 0 : 'No more bottles' n == 1 : '1 bottle' => : \"$n bottles\"\n\nYou can run this program from the command line:\n\n    \n    \n    $ ys 99-bottles.ys 3 3 bottles of beer on the wall, 3 bottles of beer. Take one down, pass it around. 2 bottles of beer on the wall.\n    \n    2 bottles of beer on the wall, 2 bottles of beer. Take one down, pass it around. 1 bottle of beer on the wall.\n    \n    1 bottle of beer on the wall, 1 bottle of beer. Take one down, pass it around. No more bottles of beer on the wall.\n\nYAMLScript can compile programs to native binary executables. It's as simple\nas this:\n\n    \n    \n    $ ys -b 99-bottles.ys * Compiling YAMLScript '99-bottles.ys' to '99-bottles' executable\n    \n    $ time ./99-bottles 1 1 bottle of beer on the wall, 1 bottle of beer. Take one down, pass it around. No more bottles of beer on the wall.\n    \n    real 0m0.010s user 0m0.006s sys 0m0.005s\n\nThat's pretty fast!\n\nThe YAMLScript language has all the things you expect from a modern\nprogramming language including:\n\n  * Using builtin and third party libraries\n  * Defining your own namespaces and functions\n  * All the standard data types and structures\n  * Standard libraries with hundreds of battle tested functions\n  * Reasonable performance on par with common dynamic languages\n\n## Installing ys - The YAMLScript Command Line Tool\n\nThe ys command line tool is the easiest way to get started with YAMLScript.\nIt's currently available on Linux and macOS for both Intel and ARM.\n\nYou can try ys out temporarily (for the duration of your shell session) by\nrunning this command in your terminal:\n\n    \n    \n    $ . <(curl https://yamlscript.org/try-ys)\n\nThis will install ys in a temporary directory and add it to the PATH\nenvironment variable of your current shell session.\n\nOr you can install the latest release with:\n\n    \n    \n    $ curl https://yamlscript.org/install | bash\n\nMake sure that ~/.local/bin is in your PATH environment variable.\n\nTo install elsewhere or install a specific version, set the PREFIX and/or\nVERSION environment variables to the desired values:\n\n    \n    \n    $ curl https://yamlscript.org/install | PREFIX=/some/dir VERSION=0.1.xx bash\n\n> NOTE: The default PREFIX is ~/.local (or /usr/local if you run the command\n> as root).\n\nYou can also install ys from source:\n\n    \n    \n    $ git clone https://github.com/yaml/yamlscript $ cd yamlscript $ make build $ make install $ export PATH=~/.local/bin:$PATH\n\n> NOTE: The pre-built binaries currently fail on some older kernels. If you\n> have trouble with the pre-built binaries, try building from source.\n\nThe install process has the very minimal dependencies of git, make, curl, and\nbash. (The libz-dev package is also required on Linux.)\n\nTest your new ys installation by running:\n\n    \n    \n    $ ys --help\n    \n    ys - The YAMLScript (YS) Command Line Tool - v0.1.56\n    \n    Usage: ys [] []\n    \n    Options:\n    \n    --run Run a YAMLScript program file (default) -l, --load Output (compact) JSON of YAMLScript evaluation -e, --eval YSEXPR Evaluate a YAMLScript expression multiple -e values joined by newline\n    \n    -c, --compile Compile YAMLScript to Clojure -b, --binary Compile to a native binary executable\n    \n    -p, --print Print the result of --run in code mode -o, --output FILE Output file for --load, --compile or --binary\n    \n    -T, --to FORMAT Output format for --load: json, yaml, edn -J, --json Output (pretty) JSON for --load -Y, --yaml Output YAML for --load -E, --edn Output EDN for --load\n    \n    -m, --mode MODE Add a mode tag: code, data, or bare (for -e) -C, --clojure Treat input as Clojure code\n    \n    -d Debug all compilation stages -D, --debug-stage STAGE Debug a specific compilation stage: parse, compose, resolve, build, transform, construct, print can be used multiple times -S, --stack-trace Print full stack trace for errors -x, --xtrace Print each expression before evaluation\n    \n    --install Install the libyamlscript shared library --upgrade Upgrade both ys and libyamlscript\n    \n    --version Print version and exit -h, --help Print this help and exit\n\nor:\n\n    \n    \n    $ ys --version YAMLScript 0.1.56\n\n## Installing a YAMLScript Library\n\nYAMLScript can be installed as a YAML loader library (module) in several\nprogramming languages.\n\nSo far there are libraries in these languages: Clojure, Java, NodeJS, Perl,\nPython, Raku, Ruby and Rust.\n\nSeveral more are in the works, and the goal is to get it to every language\nwhere YAML is used.\n\nCurrently to install a YAMLScript library you need to install both the\nlanguage library and the matching version of libyamlscript.so.\n\nFor Python you would do:\n\n    \n    \n    $ pip install yamlscript Successfully installed yamlscript-0.1.56 $ curl https://yamlscript.org/install | VERSION=0.1.56 install Installed ~/.local/lib/libyamlscript.so - version 0.1.56\n\nFor some other language, use that language's library installer. Just make sure\nthe versions match for the library and libyamlscript.\n\n## YAMLScript Language Design\n\nYAMLScript code compiles to Clojure code and then is evaluated by a Clojure\nruntime native binary engine. This means that YAMLScript is a very complete\nlanguage from the get-go.\n\n> NOTE: To see the generated Clojure code for any YAMLScript code just use the\n> -c (--compile) flag for ys:\n>  \n>  \n>     $ ys -c -e 'say: \"Hello\"' (say \"Hello\")\n\nClojure is a Lisp dialect that runs on the JVM, however YAMLScript is not run\non the JVM. No Java or JVM installation is used to run (or build) YAMLScript\nprograms.\n\nThe YAMLScript compiler and runtime interpreter is written in Clojure and then\ncompiled to a native machine code binary using GraalVM's native-image\ncompiler. It is standalone and quite fast.\n\nIt is also compiled into a native shared library that can be embedded into\nalmost any programming language. YAMLScript intends to ship language bindings\nfor (at least) 42 popular programming languages.\n\nYAMLScript syntax uses a combination of YAML structure and Clojure Lisp code\nsyntaxes combined together. The code parts have syntax variants that make it\nfeel more like Python or Ruby than a Lisp.\n\nHow a YAMLScript program is syntactically styled is very much up to the\nprogrammer. She can go Full Lisp or Full YAML, but most likely using a\ncombination of the two will end up reading the best.\n\n## Status\n\nYAMLScript is already a working programming language but it does not yet have\na stable v0 API release version. In other words, you can use it now but some\nthings might change.\n\nA stable release of YAMLScript v0 is expected in Q2 of 2024.\n\nOnce v0 is announced stable, its API will remain backwards compatible for its\nlifetime. That is to say, any files containing !yamlscript/v0 will always\ncontinue to work the same.\n\n## YAMLScript Resources\n\n  * Web Site\n  * Documentation\n  * Matrix Chat\n  * Slack Chat\n  * Blog\n  * March 2023 Talk\n  * GitHub Repository\n  * Discussions\n  * Issues\n\n## Recent Posts\n\n  * 16 Apr 2024 | 6 min read\n\n#blog\n\n### YAMLScript Spring Update\n\nIt's been a while since I let you know what's been happening with YAMLScript.\nI've been busy working on it every day this year and I have a lot to tell you\nabout! YAMLScript Activity in 2024 Let me...\n\nread article\n\n  * 14 Mar 2024 | 3 min read\n\n#blog\n\n### YAMLScript Firsts\n\nRemember Your First Time? Do you remember the first time you wrote a program\nin a new language? For YAMLScript, mine was yesterday! This is my first post\nof 2024. I've been working on YAMLScript...\n\nread article\n\n  * 25 Dec 2023 | 1 min read\n\n#blog #advent-2023\n\n### 2023 Advent Index\n\nWelcome to the 2023 YAMLScript Advent Blog! Dec 24 - Wrapped and Ready Dec 23\n- Perl to Rust Dec 22 - Flip Flops Dec 21 - YAML, Python and the Holy Graal\nDec 20 - Godspeed Dec 19 - Reindeer All...\n\nread article\n\n  * 24 Dec 2023 | 3 min read\n\n#blog #advent-2023\n\n### Wrapped and Ready\n\nThe Elves have everything wrapped up. Literally! Tonight's the big night. It's\nTime to Deliver! Welcome to Day 24 of the YAMLScript Advent Calendar It's also\ntime to wrap up this year's YAMLScript...\n\nread article\n\n  * 23 Dec 2023 | 4 min read\n\n#blog #advent-2023\n\n### Perl to Rust\n\nWhen Santa is doing his job in the Luxembourg area, I've always wondered how\nhe gets from Perl to Rust. Maybe he takes this route! Welcome to Day 23 of the\nYAMLScript Advent Blog! A couple of days ago...\n\nread article\n\n  * 22 Dec 2023 | 3 min read\n\n#blog #advent-2023\n\n### Flip Flops\n\nCan you imagine Santa walking around in flip flops? I've never been up to the\nNorth Pole, but I'm pretty sure there's no beaches. I always pictured Santa\nwearing moon boots around the...\n\nread article\n\n  * 21 Dec 2023 | 2 min read\n\n#blog #advent-2023\n\n### YAML, Python and the Holy Graal\n\nWhich has a greater airspeed velocity... an unladen swallow or Santa's sleigh?\nWell, that depends... are we talking about an African or European swallow?\nHuh? Welcome to Day 21 of the...\n\nread article\n\n  * 20 Dec 2023 | 4 min read\n\n#blog #advent-2023\n\n### Godspeed\n\nI wonder if Santa has a Hemi? Supercharged, Turbocharged? Maybe a Nitro\nBurning Funny Sleigh? Dude's got to get around the world in one night.\nGodspeed, my festive friend! Welcome to Day 20 of the...\n\nread article\n\n  * 19 Dec 2023 | 3 min read\n\n#blog #advent-2023\n\n### Reindeer All The Way Down\n\nSanta is in charge of Christmas. He's the one who makes sure that all the\nchildren get presents. But who is in charge of getting Santa his presents?\nThat's where the reindeer come in. They are the...\n\nread article\n\n  * 18 Dec 2023 | 5 min read\n\n#blog #advent-2023\n\n### Santa's in d'buggy\n\nWith one week to go, Santa's gotta get his sleigh in top shape. Can't have any\nbreakdowns on the big night. His sleigh might look like a simple wooden buggy,\nbut it's more temperamental and buggy than...\n\nread article\n\nView All Posts\n\n  * GitHub\n  * RSS\n\nPowered by Eleventy. Theme: Eleventy Duo.\n\n", "frontpage": false}
