{"aid": "40082793", "title": "What is the difference between BI and AI\uff1f", "url": "https://github.com/SPLWare/esProc/wiki/What-is-the-difference-between-BI-and-AI%EF%BC%9F", "domain": "github.com/splware", "votes": 1, "user": "Judyrabbit", "posted_at": "2024-04-19 02:07:57", "comments": 0, "source_title": "What is the difference between BI and AI\uff1f", "source_text": "What is the difference between BI and AI? \u00b7 SPLWare/esProc Wiki \u00b7 GitHub\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nSPLWare / esProc Public\n\n  * Notifications\n  * Fork 309\n  * Star 4.4k\n\n# What is the difference between BI and AI?\n\nJump to bottom\n\nesProcSPL edited this page Apr 15, 2024 \u00b7 1 revision\n\nThere is an I in both BI and AI, and the corresponding English word is\n\"Intelligence\", which appears to have the same meaning.\n\nActually, it's not the case. Even if we only discuss issues in the field of\nbusiness decision-making, there are significant differences between the I in\nBI and AI.\n\nBroadly speaking, tasks that rely on data to assist business decision-making\ncan be called BI, and BI can be said to include AI. BI is the purpose, AI is\nthe means, and BI can be achieved through AI means or other means. In this\nsense, the I of BI will be greater than that of AI.\n\nHowever, the term BI has now been severely narrowed down. By BI, we often\nrefer to interactive multidimensional analysis of data. That is to say,\nlooking at statistical values from various dimensions, there are routine\nactions such as pivot, slicing, and drilling, and people may try to identify\nproblems in business operations during the interaction process. For example,\nif a product has a large sales volume, drill down to see which region or sales\nmethod caused it, and then apply the underlying business rules for promotion.\n\nTo be honest, this type of BI is very simple in terms of technology, and the\nmathematical knowledge used does not exceed that of middle school. It is\nbasically addition, but there are many conditions. Most business users can\nunderstand, while all database engineers can implement it. The interface of BI\nproducts is often flashy, and the use of good products is very smooth, but\nthere is not much technical content (i.e. difficulty), and it can be done\nmeticulously with a lot of effort (there is a lot of complexity). The\ntechnical difficulty of BI lies not in the interface, but mainly in how the\nbackend can achieve high-speed response when the data volume is particularly\nlarge. After all, BI is an interactive operation scene, and it is useless to\nhave a respond after a few minutes of waiting.\n\nAI is different. In the field of business decision-making, the main focus is\non model-building and predicting, which means using historical data to predict\nthe probability of certain events (don't think about stock trading, there is\ncurrently no publicly available mature AI technology that can continuously\npredict stock trends). For example, banks can predict the default probability\nof loan customers to determine whether to issue loans and loan interest rates,\nmerchants can know whether packaging certain products for sale can increase\nthe probability of users purchasing to determine sales strategies, etc.\nObviously, this information has significant implications for business\noperations.\n\nTo implement these tasks, engineers need to have rich statistical knowledge\nand be familiar with various algorithms of machine learning. This technical\ncontent is very high, and there are not many people who can truly master it.\nThere are many open-source packages available for model-building and\nprediction, which can also be used by ordinary programmers. However, if you\ndon't understand algorithms and simply use open-source packages, the models\nbuilt are often poor, and you don't know why, and there is no way to improve\nthem. Because a good model requires a lot of data preprocessing and model\nselection work, and various algorithms also have a large number of parameters\nto set, some people are not even clear about what a normal distribution is, so\nof course, it is impossible to build a good model.\n\nEven for business users who only use these models, in order to evaluate the\neffectiveness of these modeling predictions, they need to learn a lot of\nknowledge and concepts, otherwise they will not be able to understand them. AI\ndoes not have a very low threshold for either engineers or users.\n\nSo, AI and narrow BI are completely different, these two are far apart. BI's I\nis a relatively easy IT technology problem (especially in the front-end),\nwhile AI's I is a mathematical problem that requires N years of accumulation.\n\nMany years ago, there was a famous beer diaper story in the industry, which\nwas told by SAS company that putting beer and diapers together can increase\nsales. However, this story is often used by BI manufacturers to argue. In\nfact, the multidimensional analysis interface of BI cannot discover this\npattern.\n\nNowadays, some BI vendors are also adding AI features to their products, which\nmeans adding some open-source packages. This situation can be considered a\ngimmick. Because if this manufacturer can do well in AI and the threshold\nitself is high enough, they can completely develop a product independently,\nwithout the need to hang on to a low threshold BI product.\n\nExpanding the scope of AI further, not just limited to the field of business\ndecision-making, such as the trendy generative AI, will have some correlation\nwith BI. The goal of modern narrow definition BI is to enable business\npersonnel to analyze data, using a smooth visual interface. If generative AI\ntechnology is used, machines can directly convert human language and text into\ndata calculations, which can further reduce the application threshold.\n\nBut current technology is still difficult to achieve this., because the data\nstructure of enterprise applications is often very complex, making it\nimpossible to simply put it in the GPT prompt (far beyond its length), and the\ncost of doing fine tune is also relatively high, the key is the lack of\nmaterials. On the other hand, the syntax structure of SQL is only suitable for\nsingle table queries. When the association between multiple tables is not\nunique, there can be serious ambiguity, and AI does not know how to match\nthem.\n\nAt present, the SPL team is researching this issue. Using DQL technology can\nsolve the association ambiguity of SQL, and then using GPT technology to layer\nnatural language. Combined with SPL's deep understanding of data structures,\nit is possible to make correct and sufficiently complex natural language\nqueries. At present, we have achieved basic Chinese query capabilities and are\ncurrently developing English.\n\nSPL Resource: SPL Official Website | SPL Blog | Download esProc SPL | SPL Source Code\n\n  * Learn performance optimization skills from TPCH tests\n  * Ordered storage of SPL\n  * The impasse of SQL performance optimizing\n  * The Open-source SPL Redefines OLAP Server\n\n##### Clone this wiki locally\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
