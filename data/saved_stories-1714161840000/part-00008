{"aid": "40167314", "title": "How to Scale Databases", "url": "https://newsletter.techworld-with-milan.com/p/how-to-scale-databases", "domain": "techworld-with-milan.com", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-26 09:12:58", "comments": 0, "source_title": "How to scale databases", "source_text": "How to scale databases - by Dr Milan Milanovi\u0107\n\n# Tech World With Milan Newsletter\n\nShare this post\n\n#### How to scale databases\n\nnewsletter.techworld-with-milan.com\n\n#### Discover more from Tech World With Milan Newsletter\n\nInsights into a beautiful world of Software Engineering simplified. Join\nreaders from Microsoft, Google, Meta, Amazon, and more.\n\nOver 29,000 subscribers\n\nContinue reading\n\nSign in\n\n# How to scale databases\n\nDr Milan Milanovi\u0107\n\nApr 25, 2024\n\n17\n\nShare this post\n\n#### How to scale databases\n\nnewsletter.techworld-with-milan.com\n\nShare\n\nIn this issue, we will discuss how to solve one of the most common software\nbottlenecks in production: database scalability. There are two types of\nscaling strategies: vertical and horizontal.\n\nAlso, we will see how Figma scaled their Postgre database to almost infinite\nscalability by using those approaches.\n\nSo, let\u2019s dive in.\n\n##\n\nRegister for POST/CON 24 | April 30 - May 1 (Sponsored)\n\nPOST/CON Postman's biggest API conference, from April 30 - May 1 in San\nFrancisco, California, has sold out! Join the waitlist for Postman's largest\nuser conference ever for the opportunity to learn from industry leaders,\nlisten to in-depth presentations, and participate in exclusive conversations.\n\nJoin here!\n\n##\n\nHow do we scale databases?\n\nDatabases usually consist of tables with columns and rows. Yet, traditional\nmonolithic databases can become sluggish and cumbersome as they balloon in\nsize. Database partitioning is a powerful technique for wrangling data and\nkeeping databases running smoothly.\n\nDatabase partitioning is the process of splitting a large table or database\ninto smaller, more manageable chunks called partitions. This allows us to\nquery only parts of the data, making it faster to load.\n\nIn general, we have two types of partitioning:\n\n###\n\nHorizontal Partitioning (Sharding)\n\nIt splits tables by row, each partition containing the same schema but\ndifferent rows. It is ideal for multi-tenant applications where data can be\ndivided by customer or user for distributed computing or when data is too\nlarge to be stored in one DB.\n\nThere are different kinds of sharding:\n\n  * Key-Based (Hash) sharding: A shard is determined using a hash function on a specific key column within each record. This hash function uniformly distributes records across available shards. The main advantage is the even distribution of data and workload, but it can complicate queries that span multiple shards and make re-sharding.\n\n  * Range-based sharding divides data into shards based on the ranges of a particular key. For example, customer IDs ranging from 1 to 1000 might be stored in one shard, while 1001 to 2000 are stored in another. This approach simplifies queries that involve range operations but can lead to uneven data distribution and hotspots if the data isn't uniformly distributed across the ranges.\n\n  * Directory-Based sharding: This method uses a lookup table to map keys to their corresponding shards. It offers excellent flexibility, allowing for easy addition or removal of shards and straightforward re-sharding. However, it introduces a potential single point of failure in the lookup service and can become a performance bottleneck if not appropriately managed.\n\n  * Geo-sharding: distributes data based on geographic location. It aims to keep data physically closer to its users to reduce latency and improve compliance with local data regulations. This strategy benefits global applications serving users in distinct geographic regions. Balancing data distribution and ensuring efficient access across regions requires careful management.\n\n  * Customer-based Sharding: In multi-tenant architectures where each customer has potentially vastly different data sizes and usage patterns, customer-based sharding can be employed. This involves allocating a shard per customer or group of customers, optimizing for performance and isolation. While it offers high customization for serving large customers, it can lead to challenges in efficiently utilizing resources across shards.\n\nWhen sharding, every DB server must be the same structurally, and data records\nmust be divided in a sharded DB.\n\n###\n\nVertical Partitioning\n\nIt divides tables by column or table, separating frequently accessed columns\nfrom those less used, optimizing access times and cache efficiency. So, each\ntable could be placed in a separate database.\n\nYet, database sharding is challenging. It's time-consuming because you must\nadjust many things, such as moving data and mapping queries. And it also costs\nmoney.\n\nWhat are some good practices when you hit the issues with your DB:\n\n  1. Vertical scaling - first, add more power to your DB server (CPU, memory, etc.)\n\n  2. Replication - Create a read replica of your DB. This helps you improve reading performance, but you must also have caching.\n\nIf all of these cannot help, then you do partitioning:\n\n\ud83d\udd38 Use horizontal partitioning for large tables where scalability and\nperformance for specific queries are critical.\n\n\ud83d\udd38 Use vertical partitioning when you have tables with many columns, but not\nall are accessed together frequently\n\nDatabase Sharding explained (Credits: Architecture notes - Mahdi Yusuf)\n\n> If you want to learn more about SQL and databases, check this article:\n\nTech World With Milan Newsletter\n\nHow To Learn SQL?\n\nIn this issue, we talk about the following: How to Learn SQL? What is the\nDifference Between Inner, Left, Right, and Full Join? SQL Queries Run Order\nWhat is Query Optimizer? Top 20 SQL Query Optimization Techniques Tools &\nResources...\n\nRead more\n\na year ago \u00b7 40 likes \u00b7 7 comments \u00b7 Dr Milan Milanovi\u0107\n\n##\n\nHow Figma scaled their Postgres database to infinite scalability\n\nIn 2020, Figma still used a single extensive Amazon RDS database to meet their\ndemands regarding metadata storage, such as permissions, file info, comments,\netc. Yet, they observed 65% utilization during peak traffic due to the high\nvolume. To solve this issue, they did a few tactical fixes, such as updating\nthe DB to the most significant instance, creating multiple read replicas, and\nestablishing a new DB for new use cases. Yet, they discovered this would only\nsatisfy the need for a little volume.\n\nWhat they did was a two-step process:\n\n###\n\nVertical Partitioning (2020)\n\nFirst, they investigated horizontal and vertical partitioning and decided on\nthe latter based on related tables. Vertical partitioning stores tables and\ncolumns in a separate database or tables (such as Figma files or\nOrganizations).\n\nYet, the process took work. They did the following:\n\n  1. Identification of tables to partition. In the first step, they found the tables with a significant portion of the workload that were not connected to others. They did this by attaching validators into Ruby ActiveRecord so that they could see which queries reference the same group of tables.\n\n  2. Managing migration. When they identified the tables, they needed to create a plan for migration without downtime. And they made a custom migration solution, which did the following:\n\n    1. Prepare client apps to query from multiple db partitions (by using PgBouncer)\n\n    2. Replicate tables from the original DB to a new DB\n\n    3. Pause activity on the original DB\n\n    4. Wait for DBs to sync\n\n    5. Reroute traffic to the new DB\n\n  3. Logical replication. In Postgres, they selected logical replication because it allows porting over a subset of tables and replicating to a database.\n\n###\n\nHorizontal Partitioning (2023)\n\nAnd this worked fine until the end of 2022, when they found that some tables\ncontained several terabytes and billions of rows, which became too large for a\nsingle DB. They needed a better solution to minimize developer impact, scale\ntransparently, make incremental progress, and maintain strong data\nconsistency. The solution was horizontal sharding - breaking up a single table\nor group of tables and splitting the data across multiple physical database\ninstances. A table can handle infinite shards at the physical layer once\nhorizontally sharded at the application layer.\n\nHorizontal scaling is much more complex than vertical scaling because it needs\nto improve reliability and consistency when the table is split among many\nphysical tables. So, they started with scaling a simple but high-traffic\ntable. The approach included sharding groups of related tables into\ncolocations (called colos) with the same sharding key (where tables support\ncross-joins and complete transactions) and using logical sharding.\n\nTo reduce the risk of a horizontal sharding rollout, they tried to isolate the\nprocess of preparing a table at the application layer from the physical one.\nTo enable this, they made \u201clogical sharding\u201d different from \u201cphysical\nsharding.\u201d Once the table is logically shared, all reading and writing will\nhappen as if the table is already horizontally shared. When this works\nproperly, they would do a physical sharding.\n\nAlso, they built a DBProxy query engine that intercepts SQL queries and routes\nthem to various Postgre databases. A query engine built into DBProxy can\ncomprehend and run intricate queries sharded horizontally. Thanks to DBProxy,\nthey could also incorporate functions like request hedging and dynamic load-\nshedding.\n\n##\n\nBonus: Free e-book \u201cEloquent JavaScript\u201d\n\nCurrently in its 4th Edition, this is one of the best books on JavaScript, and\nit\u2019s completely free.\n\nCreated by Marijn Haverbeke, it guides you from basic to more advanced\nconcepts of JavaScript, including building a few mini-projects.\n\nIn the book, you will learn:\n\n  * Values, types, and operators\n\n  * Program structure\n\n  * Functions\n\n  * Data structures\n\n  * Modules\n\n  * Higher-order functions\n\n  * The DOM\n\n  * Asynchronous programming\n\n  * Handling Events\n\n  * And more\n\nMartin writes clearly and concisely; I always liked his style in previous\neditions.\n\nYou can read the entire book online or download it in various formats (PDF,\nEPUB, MOBI): https://eloquentjavascript.net.\n\n\u201cEloquent JavaScript\u201d by Marijn Haverbeke\n\n##\n\nMore ways I can help you\n\n  1. 1:1 Coaching: Book a working session with me. 1:1 coaching is available for personal and organizational/team growth topics. I help you become a high-performing leader \ud83d\ude80.\n\n  2. Promote yourself to 29,000+ subscribers by sponsoring this newsletter.\n\nThanks for reading Tech World With Milan Newsletter! Subscribe for free to\nreceive new posts and support my work.\n\n17 Likes\n\n\u00b7\n\n3 Restacks\n\n17\n\nShare this post\n\n#### How to scale databases\n\nnewsletter.techworld-with-milan.com\n\nShare\n\nComments\n\nBooks Every Software Engineer Must Read in 2023.\n\nYou probably already noticed that I'm a big fan of reading. I usually read 3-4\nbooks per month. You can learn from knowledgeable people in two ways: to...\n\nJun 8, 2023 \u2022\n\nDr Milan Milanovi\u0107\n\n88\n\nShare this post\n\n#### Books Every Software Engineer Must Read in 2023.\n\nnewsletter.techworld-with-milan.com\n\n6\n\nHow to Select a Design Pattern?\n\nIn this issue, we will talk about design patterns, explaining them in a simple\nlanguage, what kinds of patterns we have, when to use them, and when not...\n\nFeb 15 \u2022\n\nDr Milan Milanovi\u0107\n\n62\n\nShare this post\n\n#### How to Select a Design Pattern?\n\nnewsletter.techworld-with-milan.com\n\n1\n\nWhat Are Deployment Patterns?\n\nDeployment patterns are automated methods of introducing new application\nfeatures to your users. Your ability to cut downtime depends on the\ndeployment...\n\nJun 22, 2023 \u2022\n\nDr Milan Milanovi\u0107\n\n49\n\nShare this post\n\n#### What Are Deployment Patterns?\n\nnewsletter.techworld-with-milan.com\n\nReady for more?\n\n\u00a9 2024 Dr Milan Milanovi\u0107\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
