{"aid": "40162549", "title": "The state of realtime and embedded Linux", "url": "https://lwn.net/SubscriberLink/970555/b7b280909a8383a0/", "domain": "lwn.net", "votes": 1, "user": "chmaynard", "posted_at": "2024-04-25 20:24:03", "comments": 0, "source_title": "The state of realtime and embedded Linux [LWN.net]", "source_text": "The state of realtime and embedded Linux [LWN.net]\n\nLWN .net News from the source\n\n  * Content\n\n    * Weekly Edition\n    * Archives\n    * Search\n    * Kernel\n    * Security\n    * Events calendar\n    * Unread comments\n    * LWN FAQ\n    * Write for us\n\n| |\n\nSubscribe / Log in / New account\n\n# The state of realtime and embedded Linux\n\n## [LWN subscriber-only content]\n\n### Welcome to LWN.net\n\nThe following subscription-only content has been made available to you by an LWN subscriber. Thousands of subscribers depend on LWN for the best news from the Linux and free software communities. If you enjoy this article, please consider accepting the trial offer on the right. Thank you for visiting LWN.net!| | \n\n### Free trial subscription\n\nTry LWN for free for 1 month: no payment or credit card required. Activate\nyour trial subscription now and see why thousands of readers subscribe to\nLWN.net.  \n---  \n  \nBy Jonathan Corbet April 25, 2024\n\nOSSNA\n\nLinux, famously, appears in a wide range of systems. While servers and large\ndata centers get a lot of the attention, and this year will always be the year\nof the Linux desktop, there is also a great deal of Linux to be found in\nrealtime and embedded applications. Two talks held in the realtime and\nembedded tracks of the 2024 Open Source Summit North America provided\nlisteners with an update on how Linux is doing in those areas. Work on\nrealtime Linux appears to be nearing completion, while the embedded community\nis still pushing forward at full speed.\n\n#### Finishing realtime\n\nThe realtime session was run as a panel discussion featuring Kate Stewart,\nDaniel Bristot de Oliveira, Sebastian Siewior, and an empty chair representing\nThomas Gleixner who, with help from the airlines, missed his deadline for\narrival to the conference. Bristot started by asking what has motivated the\nrealtime community to do all of the work it has done. Stewart answered that\nthere was a problem (the need for a version of Linux that could meet realtime\nresponse requirements), and a number of companies got together to fund it. The\nlatest stage alone was an eight-year journey, but this project is getting\nclose to completion.\n\nSiewior added that there is not much core code left in the realtime\nrepository; most of it is related to the ongoing printk() work. The rest is\nchanges to drivers and such. Stewart said that the funding needed to finish\nthis work properly is now available. Siewior noted that effort is going into\nbackporting realtime-related fixes to older kernels as well.\n\nBristot said that work on scheduling and tooling is ongoing. People have been\nworking on problems with realtime throttling for years. In an attempt to keep\na runaway realtime process from killing the system, the kernel will only let\nrealtime tasks use 95% of the available CPU time, even if nothing else is\ncontending for the CPU. Realtime developers would like to get that 5% back,\nbut without compromising the ability to recover a runaway system. Many of the\nproposed solutions, Bristot said, would have constrained the development\ncommunity in the future as people came to depend on them. His conclusion from\nthat experience is that \"cutting corners is bad\" and doesn't help in the long\nrun.\n\nThe solution to the throttling problem that has emerged is deadline servers.\nThe kernel's deadline scheduler runs tasks at an even higher priority than\nrealtime tasks, meaning that it cannot be locked out by an out-of-control\nrealtime task. A deadline server is a task, running under the deadline\nscheduler with a 5% CPU share, that runs normal (non-realtime) processes, if\nany need the CPU. Some work has had to be done to run the deadline server at\nthe right time to minimize the impact on realtime tasks.\n\nStewart asked whether the upstreaming of the realtime code has had an effect\non the rest of the kernel; Bristot answered that realtime discussions are now\njust a normal part of the kernel's development process rather than being a\nseparate thing. Siewior observed that having the realtime code upstream has\nreduced interest in finishing the job. Bristot pointed out that there is a lot\nof useful code in the kernel that started in the realtime tree; now it is\nupstream and everybody benefits from it, but they forget where it came from.\n\nAn audience member asked what projects the realtime community was working on\nnext. Bristot said that, so far, the focus has been almost exclusively on\nlatency, but it is time to start thinking more about related problems. The\nscheduling of multiple tasks and optimizing response time for all of them is\nhigh on the list. Sharing a CPU with more than one realtime task can bring out\nmore locking problems; that increases the pressure to, among other things, get\nthe proxy execution work into the mainline.\n\nBristot raised a longstanding problem with the deadline scheduler: its\nadmission-control algorithm (which decides whether a new deadline task can be\naccepted while still ensuring that all tasks will meet their deadlines) works\nglobally across the entire system. A side effect of this design is that it is\nnot possible to set CPU affinity for deadline tasks, but that is something\nthat users want to be able to do. Disabling admission control allows users to\nplace their tasks, but that takes away an important guarantee, and the global\npolicy is inefficient anyway. So there is interest in finding ways to\npartition a system.\n\nStewart turned the discussion to how people can get involved with realtime\nLinux; Siewior was quick to point out that there is a need for better\ndocumentation. An audience member echoed that sentiment, saying that users are\nhaving to rediscover how to set up a realtime system; they would benefit from\nsome better guides. He also noted that the real-time Linux analysis tool\n(RTLA) has proved to be helpful with this task, but it is just a beginning.\nBristot answered that some things just take time; RTLA was born in 2010, but\nonly really became useful years later.\n\nAnother audience member pressed this point; the need is urgent for guides to\nhelp users with setup, benchmarking, and so on. Bristot answered that \"getting\nthings right in the kernel creates momentum\" that can solve this kind of\nproblem \u2014 over time. A solution that is good for all use cases encourages\nfurther development. Now that it is easy to add new tools to RTLA, for\nexample, others are contributing them.\n\nTim Bird said that he has been trying to convince people in the space sector\nthat Linux is a realtime system, but \"they aren't buying it\". Realtime Linux\nstill has a messaging problem, he said. RTLA doesn't help in this regard, it\nis a tool that \"shows you all the ways Linux fails at realtime\"; it gives the\nwrong kind of message. Bristot answered that realtime is not just about\nlatency; solving a problem requires understanding the workload in question,\nadapting it to the Linux execution model, and using tools (like RTLA) to find\nmisbehavior. Linux is like other operating systems in that regard. Siewior\nadded that, if one buys a 100GB/sec network card, that kind of bandwidth will\nnot just materialize right away. The system has to be tuned to get the\nexpected level of performance; realtime is the same story.\n\nBristot insisted that Linux is a valid realtime option; with proper tuning and\nuse of CPU isolation, he said, a RHEL system can achieve latency of less than\n10\u03bcs. Bird said such results just lead to the impression that an expert user\ncan get the needed response, but only after tweaking 100 tuning knobs. Bristot\nallowed that a certain amount of expertise is required, but said that the\nsituation is getting better.\n\nWhen an audience member asked whether the time has come for a detailed book\nabout realtime on Linux, Siewior pointed to the realtime wiki as a starting\npoint. He has been asking developers and users to provide updates, but\ncomplained that it never happens. Bristot suggested adding information to the\nkernel's documentation tree as a way to add momentum and encourage\ncontributions; Stewart said that tends to raise the quality of the\ndocumentation as well. Alison Chaiken suggested splitting the kernel's lengthy\ncommand-line parameter documentation to provide a realtime-specific document;\nSiewior worried that splitting the documentation that way could create\nconsistency problems over time.\n\nAnother audience member suggested eliminating all of those kernel parameters,\nmaking the realtime-specific tuning knobs modifiable at run time instead.\nBristot said that would be a long and difficult task; Siewior added that there\nare quite a few parameters that can only be set at boot time.\n\nAs the session ran out of time, it wandered into some rather less-serious\nsuggestions, including removing all of the code (that solves the problem of\ntoo many tuning knobs) or just asking some large-language model to spew out a\nbunch of useful realtime documentation. Bristot answered that ChatGPT \"doesn't\nknow a thing\" about realtime Linux, so that otherwise entirely viable option\nwas discarded, and the session came to a close.\n\n#### Catching up with embedded Linux\n\nThe \"state of embedded Linux\" session was held the next day; it was run by\nBird and Marta Rybczy\u0144ska. The overall impression was one of a great deal of\nongoing activity, and a number of problems yet to be solved.\n\nRybczy\u0144ska began with an overview of recent kernel releases, pointing out the\nchanges that are of specific interest to embedded-system developers:\n\n  * 6.4: the removal of the SLOB memory allocator, a document on building a trimmed kernel, the removal of MODULE_LICENSE() declarations from non-modular code, and user trace events.\n  * 6.5: better parallelization on the bring-up of x86 CPUs, a reorganization of 32-bit devicetree files, and a lot of ftrace and perf updates.\n  * 6.6: the ability to build a kernel without buffer heads, the eventfs filesystem, and x86 shadow stacks.\n  * 6.7: a parameter to disable 32-bit emulation on 64-bit x86 systems, the removal of Itanium architecture support, improvements to kernel samepage merging, and a number of printk() improvements.\n  * 6.8: initial deadline server support, the first driver written in Rust, a reorganization of some core networking data structures, the removal of the SLAB memory allocator, and data-type profiling for perf.\n  * 6.9 (upcoming): the ext2 filesystem has been deprecated, some significant kernel timer changes, work to reduce locking contention in the network stack, and the run-time modifiable energy model.\n\nAlso covered was the end of six-year support for the long-term stable kernel\nreleases. Users looking for longer support, Bird said, can look to the Civil\nInfrastructure Platform or the Ubuntu long-term releases \u2014 or they can follow\nthe stable updates and change kernel versions during a device's lifetime. \"But\nwe never do that\".\n\nRybczy\u0144ska mentioned a number of ongoing efforts, starting with work being\ndone at TI to reduce boot times. This is especially of interest in the\nautomotive world. This work seems to be focused on initializing devices in the\nboot loader, then passing them to the kernel in a fully ready state.\n\nOn the graphics front, she cited the NVK Vulkan driver for NVIDIA GPUs. Work\nis ongoing to improve the MTD-SPI-NOR subsystem for faster filesystem access,\nand the EROFS filesystem is getting caching and speed enhancements as well.\nThe realtime work was mentioned as well. This portion of the talk concluded\nwith a discussion of the kernel project starting to assign its own CVE numbers\nfor vulnerabilities.\n\nBird took over to present a \"rant\" about system size \u2014 always a concern for\nembedded deployments. The removal of the SLOB allocator, which was intended\nfor use on small systems, is something that can be accepted, he said; it was\nnot really being used anymore. But, he complained, there were only two kernel\nreleases between the time that SLOB was deprecated and when it was actually\nremoved; embedded developers were unlikely to notice the deprecation in that\ntime period, which should have been longer. The removal of SLAB in the same\nyear didn't help either. He acknowledged the addition of the CONFIG_SLUB_TINY\nconfiguration option, which helps, but he said that SLUB will never be as\nsmall as SLOB was. Some users, he worried, have lost a useful kernel feature.\n\nOn the testing front, there was a proposal to provide integration with\nGitLab's continuous-integration (CI) system, but Linus Torvalds did not like\nit. That proposal is thus dead, but there is still the possibility that this\nkind of support could be added at lower levels of the kernel \"where Linus\ndoesn't have to worry about it\". The ability to run CI testing right out of\nthe box would make testing much easier, Bird said.\n\nWith regard to toolchains, GCC 13.2 was released in July 2023; the GCC 14\nrelease is due at about any time and brings some interesting static-analyzer\nimprovements. GCC, he said, is a useful testing program; it finds more bugs\nthan any others. He mentioned that Bootlin makes available a set of prebuilt\ncross-toolchains for those who don't want to build their own.\n\nRybczy\u0144ska mentioned that the Yocto Project 5.0 release is coming \"at any\nhour\". This will be a new long-term-support release, and the first with\ngeneric Arm 64-bit support. This release is based on the 6.6 kernel.\n\nIn industry news, the Cyber Resilience Act (CRA) is progressing in Europe; it\nwill require vendors to provide security updates for their products and\nperform due diligence on the components they incorporate. The final\npublication of the CRA is expected in October, and it will come into full\nforce in 2027. Three years to prepare is not a long time, she said, given that\nthere are a lot of associated standards that still need to be written.\n\nThe HDMI 2.1 specification is out. AMD wanted to write an open-source driver\nfor HDMI 2.1, but the HDMI Forum blocked it, so there will be no free driver.\n\nShe concluded by mentioning that the Mars helicopter, after 72 flights, is\ngrounded with damaged blades, and that mission has come to an end. We will\nsurely see other missions taking Linux into space, though, she said.\n\nBird gave an overview of the conference situation; the Embedded Linux\nConference is back to a twice-per-year schedule. The (northern-hemisphere)\nspring event will be held in North America, while the fall event will be in\nEurope. The next will be in Vienna in September. Some attendees dislike the\nmove away from a standalone event in favor of colocation with large events\nlike the Open Source Summit; Bird said that the move was driven by sponsorship\n(or the lack thereof).\n\nThe Embedded Linux Wiki, which is a longstanding resource for this community,\nrecently lost funding for its system administrator. The good news is that the\nperson involved has taken a job at the Linux Foundation and will continue to\nwork on the wiki. The site is out of date in places and underutilized, he\nsaid, but it also contains a lot of useful material; volunteers to help are\nwelcome.\n\nRybczy\u0144ska concluded by saying that the embedded community is doing well; it\nwill be the year of embedded Linux yet again. Much of the needed kernel\ninfrastructure for embedded Linux is in place now, she said, and there are\nstill new developers showing up to help. The community's infrastructure needs\nsome investment, but the community as a whole is in a good place.\n\n[Thanks to the Linux Foundation, LWN's travel sponsor, for supporting our\ntravel to this event.]\n\nIndex entries for this article  \n---  \nConference| Embedded Open Source Summit/2024  \nConference| Open Source Summit North America/2024  \n  \n> Did you like this article? Please accept our trial subscription offer to be\n> able to see more content like it and to participate in the discussion.  \n> ---  \n  \n(Log in to post comments)\n\n### So Gleixner was locked out?\n\nPosted Apr 25, 2024 15:45 UTC (Thu) by epa (subscriber, #39769) [Link]\n\n> an empty chair representing Thomas Gleixner who, with help from the\n> airlines, missed his deadline for arrival to the conference\n\nThis isn't clear; what is this \"deadline\"? It sounds as though if he didn't\nget there by the deadline, he would be refused admission. Don't you mean to\nsay that he hadn't arrived yet?\n\n### So Gleixner was locked out?\n\nPosted Apr 25, 2024 16:01 UTC (Thu) by mb (subscriber, #50428) [Link]\n\nI think this probably is Jonathan's fine humor. Missing a deadline is fatal\nfor realtime systems. ;-) Made me laugh.\n\n### The state of realtime and embedded Linux\n\nPosted Apr 25, 2024 18:32 UTC (Thu) by willy (subscriber, #9762) [Link]\n\nI guess the embedded people are getting what they paid for. If SLOB or SLAB\nwere so useful for them, they can either maintain them out-of-tree or start\nparticipating.\n\nCopyright \u00a9 2024, Eklektix, Inc. Comments and public postings are copyrighted\nby their creators. Linux is a registered trademark of Linus Torvalds\n\n", "frontpage": false}
