{"aid": "40129770", "title": "Sdt: Prototype implementation of SDT probes using hot-patching", "url": "https://reviews.freebsd.org/D44483", "domain": "freebsd.org", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-23 08:30:57", "comments": 0, "source_title": "\u2699 D44483 sdt: Prototype implementation of SDT probes using hot-patching", "source_text": "\u2699 D44483 sdt: Prototype implementation of SDT probes using hot-patching\n\nPage MenuHomeFreeBSD\n\nLog In\n\nPaths\n\n  * Table of Contentst\n\n  * -cddl/contrib/opensolaris/cmd/dtrace/test/tst/common/sdt/\n  * -contrib/\n  * -opensolaris/\n  * -cmd/\n  * -dtrace/\n  * -test/\n  * -tst/\n  * -common/\n  * -sdt/\n  * -tst.sdtargs.d\n  * -sys/\n  * -amd64/include/\n  * -include/\n  * -sdt_machdep.h\n  * -arm/\n  * -arm/\n  * -sdt_machdep.c\n  * -include/\n  * -sdt_machdep.h\n  * -arm64/\n  * -arm64/\n  * -sdt_machdep.c\n  * -include/\n  * -sdt_machdep.h\n  * -cddl/dev/\n  * -dev/\n  * -dtrace/\n  * -dtrace_test.c\n  * -sdt/\n  * -sdt.c\n  * -conf/\n  * -files.arm\n  * -files.arm64\n  * -files.powerpc\n  * -files.riscv\n  * -files.x86\n  * -i386/include/\n  * -include/\n  * -sdt_machdep.h\n  * -kern/\n  * -kern_sdt.c\n  * -modules/dtrace/\n  * -dtrace/\n  * -Makefile\n  * -powerpc/\n  * -include/\n  * -sdt_machdep.h\n  * -powerpc/\n  * -sdt_machdep.c\n  * -riscv/\n  * -include/\n  * -sdt_machdep.h\n  * -riscv/\n  * -sdt_machdep.c\n  * -sys/\n  * -sdt.h\n  * -x86/\n  * -include/\n  * -sdt_machdep.h\n  * -x86/\n  * -sdt_machdep.c\n\n  * Hide Panelf\n  * Keyboard Reference?\n\n| Differential D44483\n\n# sdt: Prototype implementation of SDT probes using hot-\npatchingAcceptedPublicActions\n\nAuthored by markj on Mar 23 2024, 6:49 AM.\n\n  * Edit Revision\n  * Update Diff\n  * Download Raw Diff\n  * Edit Related Revisions...\n  * Edit Parent Revisions\n  * Edit Child Revisions\n  * Edit Related Objects...\n  * Edit Commits\n  * Mute Notifications\n  * Flag For Later\n  * Award Token\n\nTagsNoneReferenced Files| F81929616: D44483.diff  \n---  \nTue, Apr 23, 8:35 AM2024-04-23 08:35:27 (UTC+0)  \n  \nF81888139: D44483.diff  \n---  \nMon, Apr 22, 5:26 PM2024-04-22 17:26:35 (UTC+0)  \n  \nUnknown Object (File)  \n---  \nSat, Apr 20, 9:23 PM2024-04-20 21:23:57 (UTC+0)  \n  \nUnknown Object (File)  \n---  \nThu, Apr 18, 2:25 PM2024-04-18 14:25:56 (UTC+0)  \n  \nUnknown Object (File)  \n---  \nThu, Apr 18, 1:52 PM2024-04-18 13:52:41 (UTC+0)  \n  \nUnknown Object (File)  \n---  \nThu, Apr 18, 1:44 PM2024-04-18 13:44:55 (UTC+0)  \n  \nUnknown Object (File)  \n---  \nThu, Apr 18, 1:44 PM2024-04-18 13:44:22 (UTC+0)  \n  \nUnknown Object (File)  \n---  \nThu, Apr 18, 8:21 AM2024-04-18 08:21:00 (UTC+0)  \n  \nView All 13 Files\n\nSubscribers\n\nbnovkov  \n---  \n  \nchristos  \n---  \n  \ndomagoj.stolfa_gmail.com  \n---  \n  \nemaste  \n---  \n  \nimp  \n---  \n  \njhibbits  \n---  \n  \nolce  \n---  \n  \nriscv  \n---  \n  \n#\n\nDetails\n\nReviewers\n\n    gnn  \n---  \nandrew  \nmanu  \ndomagoj.stolfa_gmail.com  \nGroup Reviewers\n\n    DTrace  \n---  \n  \nSummary\n\n    \n    \n    The idea here is to avoid a memory access and conditional branch per probe site. Instead, the probe is represented by an \"unreachable\" unconditional function call. asm goto is used to store the address of the probe site (represented by a no-op sled) and the address of the function call into a tracepoint record. Each SDT probe carries a list of tracepoints. When the probe is enabled, the no-op sled corresponding to each tracepoint is overwritten with a jmp to the corresponding label. The implementation uses smp_rendezvous() to park all other CPUs while the instruction is being overwritten, as this can't be done atomically in general. I verified that llvm 17 moves argument marshalling code and the sdt_probe() function call out-of-line, i.e., to the end of the function. Per gallatin@ in D43504, this approach has less overhead when probes are disabled. To make the implementation simpler, I removed support for probes with 7 arguments; nothing makes use of this except a regression test case. I also didn't implement this for 32-bit powerpc since I wasn't able to figure out how to boot it in QEMU. I have a couple of follow-up patches which take this further: 1. We can now fill out the \"function\" field of SDT probe names automatically, since we know exactly where each tracepoint is located. 2. We can put additional code between the asm goto target label and the probe itself. This lets us perform some probe-specific argument marshalling without any overhead when the probe is disabled. For example: ``` if (SDT_PROBES_ENABLED()) { int reason = CLD_EXITED; if (WCOREDUMP(signo)) reason = CLD_DUMPED; else if (WIFSIGNALED(signo)) reason = CLD_KILLED; SDT_PROBE1(proc, , , exit, reason); } ``` becomes ``` SDT_PROBE1_EXP(proc, , , exit, reason, int reason; reason = CLD_EXITED; if (WCOREDUMP(signo)) reason = CLD_DUMPED; else if (WIFSIGNALED(signo)) reason = CLD_KILLED; ); ``` In the future I would like to use this mechanism more generally, e.g., to remove branches and marshalling code used by hwpmc, and generally to make it easier to add new tracepoint consumers without having to add more conditional branches to hot code paths.\n\n#\n\nDiff Detail\n\nRepository\n\n    rG FreeBSD src repository\nLint\n\n    Lint Skipped  \n---  \nUnit\n\n    Tests Skipped  \n---  \nBuild Status\n\n    Buildable 57023  \n---  \nBuild 53911: arc lint + arc unit  \n  \n### Event Timeline\n\nmarkj created this revision.Mar 23 2024, 6:49 AM2024-03-23 06:49:45 (UTC+0)\n\nHerald added a reviewer: gnn. \u00b7 View Herald TranscriptMar 23 2024, 6:49\nAM2024-03-23 06:49:45 (UTC+0)\n\nHerald added subscribers: olce, imp. \u00b7 View Herald Transcript\n\nmarkj requested review of this revision.Mar 23 2024, 6:49 AM2024-03-23\n06:49:45 (UTC+0)\n\nHarbormaster completed remote builds in B56756: Diff 136124.Mar 23 2024, 6:50\nAM2024-03-23 06:50:24 (UTC+0)\n\nmarkj mentioned this in D43504: netinet: add a probe point for IP stats\ncounters.Mar 23 2024, 7:16 AM2024-03-23 07:16:12 (UTC+0)\n\nmarkj updated this revision to Diff 136829.Wed, Apr 10, 12:07 AM2024-04-10\n00:07:23 (UTC+0)\n\nComment Actions\n\nProvide a full implementation.\n\nHerald added a reviewer: andrew. \u00b7 View Herald TranscriptWed, Apr 10, 12:07\nAM2024-04-10 00:07:23 (UTC+0)\n\nHerald added a reviewer: andrew. \u00b7 View Herald Transcript\n\nHerald added a reviewer: manu. \u00b7 View Herald Transcript\n\nHerald added subscribers: riscv, jhibbits, emaste. \u00b7 View Herald Transcript\n\nHarbormaster completed remote builds in B57023: Diff 136829.Wed, Apr 10, 12:07\nAM2024-04-10 00:07:29 (UTC+0)\n\nmarkj edited the summary of this revision. (Show Details)Wed, Apr 10, 12:08\nAM2024-04-10 00:08:51 (UTC+0)\n\nmarkj added a reviewer: DTrace.\n\nchristos added a subscriber: christos.Thu, Apr 11, 12:39 AM2024-04-11 00:39:20\n(UTC+0)\n\nbnovkov added a subscriber: bnovkov.Thu, Apr 11, 7:47 AM2024-04-11 07:47:29\n(UTC+0)\n\nmarkj added a comment.Sat, Apr 20, 4:22 PM2024-04-20 16:22:33 (UTC+0)\n\nComment Actions\n\nAny feedback from DTrace? I would like to commit this soon.\n\ngnn accepted this revision.Sat, Apr 20, 4:28 PM2024-04-20 16:28:32 (UTC+0)\n\nComment Actions\n\nLGTM\n\nThis revision is now accepted and ready to land.Sat, Apr 20, 4:28 PM2024-04-20\n16:28:32 (UTC+0)\n\ndomagoj.stolfa_gmail.com accepted this revision.Mon, Apr 22, 8:53 PM2024-04-22\n20:53:35 (UTC+0)\n\ndomagoj.stolfa_gmail.com added a subscriber: domagoj.stolfa_gmail.com.\n\nComment Actions\n\nI ran the tests with this applied on amd64, had a few kmods load/unload\nconcurrently for a while and looked through the concurrency around the\npatching code. Everything seems to work fine on my end.\n\nsys/cddl/dev/sdt/sdt.c  \n---  \n374| Might make sense for this to say: ... for %s:%s:%s:%s\\n\", ...,\ntp->probe->prov->name, tp->probe->mod, tp->probe->func, tp->probe->name); to\navoid confusion?  \n  \n#\n\nRevision Contents\n\nChangeset List\n\n  * Files\n  * History\n  * Commits\n  * Similar\n\nPath| Size  \n---|---  \n| cddl/| contrib/| opensolaris/| cmd/| dtrace/| test/| tst/| common/| sdt/  \n---|---|---|---|---|---|---|---|---  \n  \n| tst.sdtargs.d  \n---  \n  \n11 lines  \n| sys/  \n---  \n  \n| amd64/| include/  \n---|---  \n  \n| sdt_machdep.h  \n---  \n  \n5 lines  \n| arm/| arm/  \n---|---  \n  \n| sdt_machdep.c  \n---  \n  \n84 lines  \n| arm/| include/  \n---|---  \nkern/  \n  \n| sdt_machdep.h  \n---  \nkern_sdt.c  \n  \n37 lines  \n| arm64/| arm64/  \n---|---  \n  \n| sdt_machdep.c  \n---  \n  \n98 lines  \n| arm64/| include/  \n---|---  \nkern/  \n  \n| sdt_machdep.h  \n---  \nkern_sdt.c  \n  \n37 lines  \n| cddl/| dev/  \n---|---  \n  \n| dtrace/  \n---  \n  \n| dtrace_test.c  \n---  \n  \n6 lines  \n| sdt/  \n---  \n  \n| sdt.c  \n---  \n  \n94 lines  \n| conf/  \n---  \n  \n| files.arm  \n---  \n  \n1 line  \n| files.arm64  \n---  \n  \n1 line  \n| files.powerpc  \n---  \n  \n1 line  \n| files.riscv  \n---  \n  \n1 line  \n| files.x86  \n---  \n  \n1 line  \n| i386/| include/  \n---|---  \n  \n| sdt_machdep.h  \n---  \n  \n5 lines  \n| kern/  \n---  \n  \n| kern_sdt.c  \n---  \n  \n21 lines  \n| modules/| dtrace/  \n---|---  \n  \n| Makefile  \n---  \n  \n4 lines  \n| powerpc/| include/  \n---|---  \nkern/  \n  \n| sdt_machdep.h  \n---  \nkern_sdt.c  \n  \n37 lines  \n| powerpc/| powerpc/  \n---|---  \n  \n| sdt_machdep.c  \n---  \n  \n80 lines  \n| riscv/| include/  \n---|---  \nkern/  \n  \n| sdt_machdep.h  \n---  \nkern_sdt.c  \n  \n37 lines  \n| riscv/| riscv/  \n---|---  \n  \n| sdt_machdep.c  \n---  \n  \n89 lines  \n| sys/  \n---  \n  \n| sdt.h  \n---  \n  \n123 lines  \n| x86/| include/  \n---|---  \nkern/  \n  \n| sdt_machdep.h  \n---  \nkern_sdt.c  \n  \n31 lines  \n| x86/| x86/  \n---|---  \n  \n| sdt_machdep.c  \n---  \n  \n105 lines  \n  \nCommit| Tree| Parents| Author| Summary| Date  \n---|---|---|---|---|---  \ne578cdf1b0a7| 78dd24e23183| 63e232a1d929| Mark Johnston| sdt: Prototype\nimplementation of SDT probes using hot-patching (Show More...)| Mar 23 2024,\n6:38 AM  \n  \n  * D44274 ossl: Add GCM support on powerpc64/powerpc64le (POWER8+)\n\n    * \u00b7Reviewers: jhb, jhibbits\n\n    * Mon, Apr 15, 1:41 PM2024-04-15 13:41:50 (UTC+0)\n\nAuthor: sanastasio_raptorengineering.com\n\n#\n\nDiff 136829\n\nView Options\n\n# cddl/contrib/opensolaris/cmd/dtrace/test/tst/common/sdt/tst.sdtargs.d\n\nShow All 21 Lines  \n---  \n/*  \n* Copyright 2008 Sun Microsystems, Inc. All rights reserved.  \n* Use is subject to license terms.  \n*/  \n#pragma ident \"%Z%%M% %I% %E% SMI\"  \n/*  \n\\- * ASSERTION: Verify that argN (1..7) variables are properly remapped.  \n\\+ * ASSERTION: Verify that argN (1..6) variables are properly remapped.  \n*/  \nBEGIN  \n{  \n/* Timeout after 5 seconds */  \ntimeout = timestamp + 5000000000;  \nignore = $1;  \n}  \nERROR  \n{  \nprintf(\"sdt:::test failed.\\n\");  \nexit(1);  \n}  \ntest:::sdttest  \n\\- /arg0 != 1 || arg1 != 2 || arg2 != 3 || arg3 != 4 || arg4 != 5 || arg5 != 6\n||  \n\\- arg6 != 7/  \n\\+ /arg0 != 1 || arg1 != 2 || arg2 != 3 || arg3 != 4 || arg4 != 5 || arg5 !=\n6/  \n{  \nprintf(\"sdt arg mismatch\\n\\n\");  \n\\- printf(\"args are : %d, %d, %d, %d, %d, %d, %d\\n\", arg0, arg1, arg2,  \n\\- arg3, arg4, arg5, arg6);  \n\\- printf(\"should be : 1, 2, 3, 4, 5, 6, 7\\n\");  \n\\+ printf(\"args are : %d, %d, %d, %d, %d, %d\\n\", arg0, arg1, arg2,  \n\\+ arg3, arg4, arg5);  \n\\+ printf(\"should be : 1, 2, 3, 4, 5, 6\\n\");  \nexit(1);  \n}  \ntest:::sdttest  \n{  \nexit(0);  \n}  \nprofile:::tick-1  \n/timestamp > timeout/  \n{  \ntrace(\"test timed out\");  \nexit(1);  \n}  \n  \nView Options\n\n# sys/amd64/include/sdt_machdep.h\n\n  * This file was added.\n\n\\+ /*  \n---  \n\\+ * This file is in the public domain.  \n\\+ */  \n+  \n\\+ #include <x86/sdt_machdep.h>  \n  \nView Options\n\n# sys/arm/arm/sdt_machdep.c\n\n  * This file was added.\n\n\\+ /*-  \n---  \n\\+ * SPDX-License-Identifier: BSD-2-Clause  \n\\+ *  \n\\+ * Copyright (c) 2024 Mark Johnston <markj@FreeBSD.org>  \n\\+ *  \n\\+ * Redistribution and use in source and binary forms, with or without  \n\\+ * modification, are permitted provided that the following conditions  \n\\+ * are met:  \n\\+ * 1. Redistributions of source code must retain the above copyright  \n\\+ * notice, this list of conditions and the following disclaimer.  \n\\+ * 2. Redistributions in binary form must reproduce the above copyright  \n\\+ * notice, this list of conditions and the following disclaimer in the  \n\\+ * documentation and/or other materials provided with the distribution.  \n\\+ *  \n\\+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  \n\\+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  \n\\+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE  \n\\+ * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  \n\\+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL  \n\\+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  \n\\+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  \n\\+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT  \n\\+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  \n\\+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  \n\\+ * SUCH DAMAGE.  \n\\+ */  \n+  \n\\+ #include <sys/systm.h>  \n\\+ #include <sys/sdt.h>  \n+  \n\\+ #include <machine/cpu.h>  \n+  \n\\+ /*  \n\\+ * Return true if we can overwrite a nop at \"patchpoint\" with a jump to the  \n\\+ * target address.  \n\\+ */  \n\\+ bool  \n\\+ sdt_tracepoint_valid(uintptr_t patchpoint, uintptr_t target)  \n\\+ {  \n\\+ int32_t offset;  \n+  \n\\+ if (patchpoint == target ||  \n\\+ (patchpoint & (INSN_SIZE - 1)) != 0 ||  \n\\+ (target & (INSN_SIZE - 1)) != 0 ||  \n\\+ patchpoint + 2 * INSN_SIZE < patchpoint)  \n\\+ return (false);  \n\\+ offset = target - (patchpoint + 2 * INSN_SIZE);  \n\\+ if (offset < -(1 << 24) || offset > (1 >> 24))  \n\\+ return (false);  \n\\+ return (true);  \n\\+ }  \n+  \n\\+ /*  \n\\+ * Overwrite the copy of _SDT_PATCH_INSTR at the tracepoint with a jump to\nthe  \n\\+ * target address.  \n\\+ */  \n\\+ void  \n\\+ sdt_tracepoint_patch(uintptr_t patchpoint, uintptr_t target)  \n\\+ {  \n\\+ uint32_t instr;  \n+  \n\\+ KASSERT(sdt_tracepoint_valid(patchpoint, target),  \n\\+ (\"%s: invalid tracepoint %#x -> %#x\",  \n\\+ __func__, patchpoint, target));  \n+  \n\\+ instr =  \n\\+ (((target - (patchpoint + 2 * INSN_SIZE)) >> 2) & ((1 << 24) - 1)) |  \n\\+ 0xea000000;  \n\\+ memcpy((void *)patchpoint, &instr, sizeof(instr));  \n\\+ icache_sync(patchpoint, sizeof(instr));  \n\\+ }  \n+  \n\\+ /*  \n\\+ * Overwrite the patchpoint with a nop instruction.  \n\\+ */  \n\\+ void  \n\\+ sdt_tracepoint_restore(uintptr_t patchpoint)  \n\\+ {  \n\\+ uint32_t instr;  \n+  \n\\+ instr = 0xe320f000u;  \n\\+ memcpy((void *)patchpoint, &instr, sizeof(instr));  \n\\+ icache_sync(patchpoint, sizeof(instr));  \n\\+ }  \n  \nView Options\n\n# sys/arm/include/sdt_machdep.h\n\n  * This file was copied from sys/kern/kern_sdt.c.\n\n/*-  \n---  \n* SPDX-License-Identifier: BSD-2-Clause  \n*  \n\\- * Copyright 2006-2008 John Birrell <jb@FreeBSD.org>  \n\\+ * Copyright (c) 2024 Mark Johnston <markj@FreeBSD.org>  \n*  \n* Redistribution and use in source and binary forms, with or without  \n* modification, are permitted provided that the following conditions  \n* are met:  \n* 1. Redistributions of source code must retain the above copyright  \n* notice, this list of conditions and the following disclaimer.  \n* 2. Redistributions in binary form must reproduce the above copyright  \n* notice, this list of conditions and the following disclaimer in the  \n* documentation and/or other materials provided with the distribution.  \n\\- *  \n\\- * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND  \n\\+ *  \n\\+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  \n* ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  \n* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  \n\\- * ARE DISCLAIMED. IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE  \n\\+ * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  \n* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  \n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  \n* OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  \n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  \n* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  \n* OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  \n* SUCH DAMAGE.  \n*/  \n\\- #include <sys/param.h>  \n\\- #include <sys/systm.h>  \n\\- #include <sys/kdb.h>  \n\\- #include <sys/sdt.h>  \n\\+ #ifndef _SYS_SDT_MACHDEP_H_  \n\\+ #define _SYS_SDT_MACHDEP_H_  \n\\- SDT_PROVIDER_DEFINE(sdt);  \n\\+ #define _SDT_PATCH_INSTR \"nop\"  \n\\- /*  \n\\- * Hook for the DTrace probe function. The SDT provider will set this to  \n\\- * dtrace_probe() when it loads.  \n\\- */  \n\\- sdt_probe_func_t sdt_probe_func = sdt_probe_stub;  \n\\- volatile bool __read_frequently sdt_probes_enabled;  \n-  \n\\- /*  \n\\- * This is a stub for probe calls in case kernel DTrace support isn't  \n\\- * enabled. It should never get called because there is no DTrace support  \n\\- * to enable it.  \n\\- */  \n\\- void  \n\\- sdt_probe_stub(uint32_t id, uintptr_t arg0, uintptr_t arg1,  \n\\- uintptr_t arg2, uintptr_t arg3, uintptr_t arg4)  \n\\- {  \n-  \n\\- printf(\"sdt_probe_stub: unexpectedly called\\n\");  \n\\- kdb_backtrace();  \n\\- }  \n\\+ #endif /* _SYS_SDT_MACHDEP_H_ */  \n  \nView Options\n\n# sys/arm64/arm64/sdt_machdep.c\n\n  * This file was added.\n\n\\+ /*-  \n---  \n\\+ * SPDX-License-Identifier: BSD-2-Clause  \n\\+ *  \n\\+ * Copyright (c) 2024 Mark Johnston <markj@FreeBSD.org>  \n\\+ *  \n\\+ * Redistribution and use in source and binary forms, with or without  \n\\+ * modification, are permitted provided that the following conditions  \n\\+ * are met:  \n\\+ * 1. Redistributions of source code must retain the above copyright  \n\\+ * notice, this list of conditions and the following disclaimer.  \n\\+ * 2. Redistributions in binary form must reproduce the above copyright  \n\\+ * notice, this list of conditions and the following disclaimer in the  \n\\+ * documentation and/or other materials provided with the distribution.  \n\\+ *  \n\\+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  \n\\+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  \n\\+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE  \n\\+ * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  \n\\+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL  \n\\+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  \n\\+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  \n\\+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT  \n\\+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  \n\\+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  \n\\+ * SUCH DAMAGE.  \n\\+ */  \n+  \n\\+ #include <sys/systm.h>  \n\\+ #include <sys/sdt.h>  \n+  \n\\+ #include <vm/vm.h>  \n\\+ #include <vm/pmap.h>  \n+  \n\\+ #include <machine/cpufunc.h>  \n\\+ #include <machine/md_var.h>  \n\\+ #include <machine/vmparam.h>  \n+  \n\\+ /*  \n\\+ * Return true if we can overwrite a nop at \"patchpoint\" with a jump to the  \n\\+ * target address.  \n\\+ */  \n\\+ bool  \n\\+ sdt_tracepoint_valid(uintptr_t patchpoint, uintptr_t target)  \n\\+ {  \n\\+ void *addr;  \n\\+ int64_t offset;  \n+  \n\\+ if (!arm64_get_writable_addr((void *)patchpoint, &addr))  \n\\+ return (false);  \n+  \n\\+ if (patchpoint == target ||  \n\\+ (patchpoint & (INSN_SIZE - 1)) != 0 ||  \n\\+ (target & (INSN_SIZE - 1)) != 0)  \n\\+ return (false);  \n\\+ offset = target - patchpoint;  \n\\+ if (offset < -(1 << 26) || offset > (1 << 26))  \n\\+ return (false);  \n\\+ return (true);  \n\\+ }  \n+  \n\\+ /*  \n\\+ * Overwrite the copy of _SDT_PATCH_INSTR at the tracepoint with a jump to\nthe  \n\\+ * target address.  \n\\+ */  \n\\+ void  \n\\+ sdt_tracepoint_patch(uintptr_t patchpoint, uintptr_t target)  \n\\+ {  \n\\+ void *addr;  \n\\+ uint32_t instr;  \n+  \n\\+ KASSERT(sdt_tracepoint_valid(patchpoint, target),  \n\\+ (\"%s: invalid tracepoint %#lx -> %#lx\",  \n\\+ __func__, patchpoint, target));  \n+  \n\\+ if (!arm64_get_writable_addr((void *)patchpoint, &addr))  \n\\+ panic(\"%s: Unable to write new instruction\", __func__);  \n+  \n\\+ instr = (((target - patchpoint) >> 2) & 0x3fffffful) | 0x14000000;  \n\\+ memcpy(addr, &instr, sizeof(instr));  \n\\+ cpu_icache_sync_range((void *)patchpoint, INSN_SIZE);  \n\\+ }  \n+  \n\\+ /*  \n\\+ * Overwrite the patchpoint with a nop instruction.  \n\\+ */  \n\\+ void  \n\\+ sdt_tracepoint_restore(uintptr_t patchpoint)  \n\\+ {  \n\\+ void *addr;  \n\\+ uint32_t instr;  \n+  \n\\+ if (!arm64_get_writable_addr((void *)patchpoint, &addr))  \n\\+ panic(\"%s: Unable to write new instruction\", __func__);  \n+  \n\\+ instr = 0xd503201f;  \n\\+ memcpy(addr, &instr, sizeof(instr));  \n\\+ cpu_icache_sync_range((void *)patchpoint, INSN_SIZE);  \n\\+ }  \n  \nView Options\n\n# sys/arm64/include/sdt_machdep.h\n\nLoading...\n\nView Options\n\n# sys/cddl/dev/dtrace/dtrace_test.c\n\nLoading...\n\nView Options\n\n# sys/cddl/dev/sdt/sdt.c\n\nLoading...\n\nView Options\n\n# sys/conf/files.arm\n\nLoading...\n\nView Options\n\n# sys/conf/files.arm64\n\nLoading...\n\nView Options\n\n# sys/conf/files.powerpc\n\nLoading...\n\nView Options\n\n# sys/conf/files.riscv\n\nLoading...\n\nView Options\n\n# sys/conf/files.x86\n\nLoading...\n\nView Options\n\n# sys/i386/include/sdt_machdep.h\n\nLoading...\n\nView Options\n\n# sys/kern/kern_sdt.c\n\nLoading...\n\nView Options\n\n# sys/modules/dtrace/Makefile\n\nLoading...\n\nView Options\n\n# sys/powerpc/include/sdt_machdep.h\n\nLoading...\n\nView Options\n\n# sys/powerpc/powerpc/sdt_machdep.c\n\nLoading...\n\nView Options\n\n# sys/riscv/include/sdt_machdep.h\n\nLoading...\n\nView Options\n\n# sys/riscv/riscv/sdt_machdep.c\n\nLoading...\n\nView Options\n\n# sys/sys/sdt.h\n\nLoading...\n\nView Options\n\n# sys/x86/include/sdt_machdep.h\n\nLoading...\n\nView Options\n\n# sys/x86/x86/sdt_machdep.c\n\nLoading...\n\nLog In to Comment\n\n", "frontpage": false}
