{"aid": "40065231", "title": "JetBrains Qodana analyzes code in the CI pipeline of open-source projects", "url": "https://blog.jetbrains.com/qodana/2024/04/improving-code-quality-in-javascript-projects-with-qodana/", "domain": "jetbrains.com", "votes": 2, "user": "KerryBeetge", "posted_at": "2024-04-17 14:34:13", "comments": 0, "source_title": "Improving Code Quality in JavaScript Projects With Qodana | The Qodana Blog", "source_text": "Improving Code Quality in JavaScript Projects With Qodana | The Qodana Blog\n\nBlog\n\nSkip to content\n\n  * Blogs by Topic\n  * Search\n\nBurger menu icon\n\n## The Qodana Blog\n\nThe code quality platform for teams\n\nFollow\n\n  * Follow:\n  * Twitter Twitter\n  * RSS RSS\n\nGet Qodana\n\nArticles Best Practices Code Review How-To's Tips & Tricks WebStorm\n\n# Improving Code Quality in JavaScript Projects With Qodana\n\nMaksim Grushchenko Kerry Beetge\n\nApril 17, 2024\n\nThere\u2019s no doubt that code quality plays an important role in any team\u2019s\noutput. Whether you\u2019re weeding out critical issues, improving your skills, or\nsimply establishing standards as a team, it\u2019s paramount to be on the same page\nwhen it comes to defining and executing high-quality projects. Having the\nright tools along the way can also be a huge help.\n\nJetBrains Qodana is a powerful static code analysis platform that enables\nteams to analyze code quality and find issues before runtime. In this post,\nwe\u2019ll give an in-depth demonstration of how to analyze JavaScript code with\nQodana, using a Keystone project as an example.\n\nAs you\u2019ll see, this approach enabled us to identify \u201cCritical\u201d and \u201cHigh-\nSeverity\u201d issues first and then explore any other issues that needed to be\naddressed. Let\u2019s dive in!\n\n### Setup\n\nTo start, we used a custom qodana.yaml file, which you can find here: (via the\nConfiguration tab).\n\nIn this instance, we used TeamCity to launch the analysis, but you can use\nwhichever CI/CD tool you prefer. You also have the option to use the Qodana\nPlugin in WebStorm \u2013 where we viewed issues and corrected code at times.\nYou\u2019ll see some of this below.\n\n### Results\n\nAfter getting set up, launching, and waiting briefly for the analysis to\nfinish, we examined our results. Let\u2019s take a look at the results of this\nproject, from most to least critical.\n\nIn most cases, we ignore problems in generated files and suggest excluding\nthese files from the analysis. Let\u2019s take a look at the most critical issues\nfirst.\n\n### Critical Issues\n\nQodana found two issues with \u201cCritical\u201d severity. Both of these were incorrect\nCSS property names. Take a look here.\n\nIt\u2019s possible that the authors wanted to use a CSS property text-decoration-\nskip-ink, but something went wrong. Luckily, this particular instance has\nturned out not to be critical, because it only affects underlined text on the\nerror and loading pages, but this won\u2019t always be the case.\n\nSometimes, problems like these could break the layout of the page. Just\nimagine if you had typed something like display: plex instead of display: flex\nin CSS styles for the root container of your layout. This could easily crash\nyour site layout.\n\nIn this case, the issue turned out to be an easy fix. Qodana highlighted it,\nand all we had to do was use the correct property name:\n\ntext-decoration-skip-ink: auto;\n\n### High-severity issues\n\nIn this example, there are a lot of \u201cHigh-severity\u201d issues. Let\u2019s take a\ncloser look at them:\n\nComma expression\n\nIn this case, we\u2019re using WebStorm (The JavaScript and TypeScript IDE by\nJetBrains) with Qodana.\n\nQodana says:\n\n\u201cReports a comma expression. Such expressions are often a sign of overly\nclever code and may lead to subtle bugs. Comma expressions in the initializer\nor in the update section of for loops are ignored\u201d.\n\nYou can view the result here. This is a real mistake where the author typed a\ncomma instead of a period.\n\nDue to this typo, we won\u2019t see this message the next time prepare-release.js\nis called:\n\n...because we will get an error, such as Uncaught ReferenceError: push is not\ndefined.\n\nAgain, this is an easy fix. We just have to change the comma to a period.\nLet\u2019s do that immediately.\n\n#### Unused global symbol\n\nWe identified multiple \u201cUnused global symbol\u201d issues. Sometimes, issues like\nthese mean we removed a chunk of code but forgot about interfaces, public\nclass props, etc., that were only used in that chunk of code. These issues can\noccasionally be false positives, but you should always look into them just to\nbe on the safe side.\n\nFor example, let\u2019s say you\u2019re writing the code for the documentation\ninterface. You define headings for H1 to H6 but then only use H1 to H3. In\nthis case, you will get \u201cUnused global symbol\u201d issues, because Qodana can\u2019t\nfind evidence of other heading levels. It\u2019s up to you whether you want to\ndelete the unused headings to make your code clearer or whether you choose to\nkeep it. Both options are fine, but a decision needs to be made.\n\n#### Unused local symbol\n\nAn unused local symbol is much easier to address. This type of issue indicates\nthat you have declared but not used a local variable. In our analysis of these\nproblems, all of them relate to unused function args. You can just remove\nthese unused args or use _arg notation (of course, only if your linter allows\nit).\n\n#### Function with inconsistent returns\n\nThis is a bit of a tricky one. An issue like this doesn\u2019t always indicate an\nerror in your code. Sometimes, it\u2019s more about clarity and simplicity. But\nsometimes, it can lead to unexpected and unclear errors.\n\nOf course, from time to time, we use return to simplify code or to return\nearlier from our function without additional constructions. Regardless, you\nneed to be prepared to deal with scenarios like this, especially when you use\nthese functions in other places.\n\nHow do we fix it? Usually, you can rewrite your code to avoid this problem.\nSee the example below:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\ndir.map(x => {\n\nif (x === '.next') return\n\nreturn fs.rm(Path.join(projectAdminPath, x), { recursive: true })\n\n})\n\ndir.map(x => { if (x === '.next') return return\nfs.rm(Path.join(projectAdminPath, x), { recursive: true }) })\n\n    \n    \n    dir.map(x => { if (x === '.next') return return fs.rm(Path.join(projectAdminPath, x), { recursive: true }) })\n\nYou can rewrite it as:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\ndir\n\n.filter(x => x !== '.next')\n\n.map(x => {\n\nreturn fs.rm(Path.join(projectAdminPath, x), { recursive: true })\n\n})\n\ndir .filter(x => x !== '.next') .map(x => { return\nfs.rm(Path.join(projectAdminPath, x), { recursive: true }) })\n\n    \n    \n    dir .filter(x => x !== '.next') .map(x => { return fs.rm(Path.join(projectAdminPath, x), { recursive: true }) })\n\nIn some cases, this issue isn\u2019t important, and you may opt not to make any\nchanges to your code. Qodana can highlight these potential issues in your\ncode, but you need to examine the result and decide whether to fix it or not.\n\n#### Overwritten property\n\nThere were a few \u201cOverwritten property\u201d problems highlighted. These can crop\nup either because CSS properties have literally been overwritten or because\nsome properties have merely been duplicated. Ignoring them can lead to\nunexpected UI style bugs.\n\n#### Reserved word used as name\n\nWe have three problems here, all of which are caused by using the reserved\nword enum as a variable name. In most cases, the code still works perfectly,\nbut some keywords can cause errors. Some developers prefer to avoid situations\nlike this because, at the very least, it will affect code highlighting in the\nIDE.\n\n#### Unused assignment\n\nIn the project we analyzed, Qodana reports this issue in three scenarios:\n\n1\\. When we try to use a variable before initialization, as was done here. The\ncode in the example will work normally because we have an undefined value\nincluded in the array, and in JS, a construction like [].includes(undefined)\ngenerally works like a charm. But in other cases using a variable before\ninitialization can cause bugs.\n\n2\\. Redundant variable initialization, as can be seen here. Language services\nor static analysis tools can control the variable initialization flow and\nreport an error when you try to use an uninitialized variable (like in p.1).\nBut in this case, it\u2019s mostly about code style. Some developers prefer\ninitialization variables with a default value like let str = ''\n\nIf we want to secure a variable type for TS typings, we can use:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\nlet str: string;\n\nif (condition) {\n\nstr = 'a';\n\n} else {\n\nstr = 'b';\n\n}\n\nlet str: string; if (condition) { str = 'a'; } else { str = 'b'; }\n\n    \n    \n    let str: string; if (condition) { str = 'a'; } else { str = 'b'; }\n\n3\\. Redundant value assignment to a variable, as seen here. In this code, we\ntry to get a person. If we\u2019re unsuccessful ( if (!person) ), we try to create\none. And here we assign a value to a variable but don\u2019t use this variable\nanymore.\n\n#### Exception used for local control-flow\n\nThis is an interesting one. In this code, we throw an error in the try block\nthat will always be caught in the catch block.\n\nThere\u2019s actually something of a heated debate about this \u2013 some people think\nit\u2019s an anti-pattern (or at least a code smell), but other people just use it\nwith no qualms.\n\nSome developers in our team prefer this way (the article is for C# but works\nperfectly with other languages) when working with exceptions but still allow\nthemselves to \u201cmisbehave\u201d, as in our example.\n\n#### Single character alternation\n\nHere, we have the same issue in different files. In this code, the following\nregular expression is used:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\n<strong>/(>|<)/gi</strong>\n\n<strong>/(>|<)/gi</strong>\n\n    \n    \n    <strong>/(>|<)/gi</strong>\n\nWhat does it mean? We just want to find > or < . Regular expressions have\ncharacter classes to help us with this, and we can simply rewrite this RegExp\n(exactly as Qodana suggests).\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\n<strong>/[><]/gi</strong>\n\n<strong>/[><]/gi</strong>\n\n    \n    \n    <strong>/[><]/gi</strong>\n\nThis is more readable and should be faster (there may be some fluctuations\nwith different regular expression engines).\n\n#### Redundant local variable\n\nHere we see cases like this \u2013 issues that can be discussed and debated. In\nthis case, it\u2019s mostly about code style. However, we\u2019ve used it both ways \u2013\nwith a redundant variable and without. This is why: If you need to debug code\noften, creating a variable can be more convenient because it\u2019s easier to work\nwith it in the debugger. In other cases, it\u2019s not as important. Ultimately,\nit\u2019s up to you and your team.\n\n#### Unsound type guard check\n\nThis is a tricky issue. Here\u2019s a simplified version of the code that will\ngenerate this warning:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\nconst func = (value: number) => {\n\nif (typeof value !== \"number\") {\n\nthrow new Error(\"Oh, no\");\n\n}\n\n// do smth\n\n...\n\n}\n\nconst func = (value: number) => { if (typeof value !== \"number\") { throw new\nError(\"Oh, no\"); } // do smth ... }\n\n    \n    \n    const func = (value: number) => { if (typeof value !== \"number\") { throw new Error(\"Oh, no\"); } // do smth ... }\n\nExample of issue\n\nFrom the TS point of view, this if statement doesn\u2019t make sense because you\ncan constrain the type for the function arg value \u2013 the value can have only\nthe number type, and you can remove this statement to reduce the amount of\ncode. Less code, fewer bugs. Of course, the arg type cannot protect us from\nsomething like func(\u201dstring\u201d as any), but that\u2019s truly evil, don\u2019t do that.\n\nWhat if somebody uses your TS code inside a JS codebase? They don\u2019t have type\nchecking, and this kind of if statement can help prevent bugs.\n\nIn other words, the decision about this issue should take into account how the\ncode will be used in the future.\n\n### Moderate-severity issues\n\nNow let\u2019s look at \u201cModerate-severity\u201d issues:\n\n#### Deprecated symbol used\n\nWe have about 80 issues like this in the report. In general, these aren\u2019t\nurgent and don\u2019t need to be fixed right away. But from time to time, we need\nto deal with them to avoid problems when we want to upgrade the dependencies\nthey affect.\n\nUsually, these are easy to fix, especially if your dependency code has good\nJSDoc comments like:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\n/**\n\n* @deprecated\n\n*\n\n* [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/keyCode)\n\n*/\n\nreadonly keyCode: number;\n\n/** * @deprecated * * [MDN\nReference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/keyCode)\n*/ readonly keyCode: number;\n\n    \n    \n    /** * @deprecated * * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/keyCode) */ readonly keyCode: number;\n\nOf course, sometimes you need to rewrite a bit of your code when changing\ndeprecation usages.\n\nThis is another situation where Qodana can help you highlight points where\nchanges are needed and estimate the time you will need to upgrade your code.\n\n#### Duplicates\n\nEvery team has its own tolerance level for duplicate code. Sometimes,\nduplicate code is okay, but other times, it needs to be addressed, depending\non team standards.\n\nRedundant \u2018await\u2019 expression\n\nIn these cases, we wait for a non-promise result. Something like:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\n// non-promise\n\nconst func = (): string => {\n\nreturn \"a\";\n\n}\n\nconst asyncFunc = async (): Promise<void> => {\n\nconst log = await func(); // redundant \"await\"\n\nconsole.log(log);\n\n}\n\n// non-promise const func = (): string => { return \"a\"; } const asyncFunc =\nasync (): Promise<void> => { const log = await func(); // redundant \"await\"\nconsole.log(log); }\n\n    \n    \n    // non-promise const func = (): string => { return \"a\"; } const asyncFunc = async (): Promise<void> => { const log = await func(); // redundant \"await\" console.log(log); }\n\nSimply remove these redundant await and make your code clearer.\n\n#### Redundant nesting in template literal\n\nHere, we have two identical cases:\n\nborder: `1px solid ${'var(--border)'}`\n\nThere may have been some ${variable} here earlier, but that\u2019s no longer the\ncase. We can just rewrite it like this:\n\nborder: '1px solid var(--border)' //don't use literal at all\n\n#### Redundant type arguments\n\nA few issues of this type were reported. What are they all about? Let\u2019s take a\nlook and get a general idea.\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\nexport interface Foo<T extends string = string> {\n\nprop: T;\n\n}\n\nconst variable: Foo<string> = {prop: \"a\"}\n\n// equals to\n\n// const variable: Foo = {prop: \"a\"}\n\nexport interface Foo<T extends string = string> { prop: T; } const variable:\nFoo<string> = {prop: \"a\"} // equals to // const variable: Foo = {prop: \"a\"}\n\n    \n    \n    export interface Foo<T extends string = string> { prop: T; } const variable: Foo<string> = {prop: \"a\"} // equals to // const variable: Foo = {prop: \"a\"}\n\nIn cases like these, we can omit <string> as a solution because it equals the\ndefault value.\n\n#### Expression statement which is not assignment or call\n\nThis is the only issue in this category \u2013 but it\u2019s a bug. Nothing serious, but\nimportant to consider nonetheless. For some reason, this orphaned header ended\nup alone and didn\u2019t make it into the return block. Let\u2019s fix this!\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\nexport default function Index ({ authors }: { authors: Author[] }) {\n\nreturn (\n\n<>\n\n<h1>Keystone Blog Project - Home</h1>\n\n<ul>\n\n// ... other code\n\nexport default function Index ({ authors }: { authors: Author[] }) { return (\n<> <h1>Keystone Blog Project - Home</h1> <ul> // ... other code\n\n    \n    \n    export default function Index ({ authors }: { authors: Author[] }) { return ( <> <h1>Keystone Blog Project - Home</h1> <ul> // ... other code\n\nFrom here, we create a PR again and keep going until we\u2019re happy with our\nprogress.\n\nAll told, our Qodana analysis helped us identify issues by severity and\naddress them step by step. Your team can do the same on projects with various\nlicense types.\n\n## Do you want to try running Qodana analysis for yourself?\n\nIf you have any questions or need assistance, submit a ticket to our issue\ntracker in YouTrack by clicking on New Issue in the top right-hand corner of\nthe screen or let us know in the comments. You can also tag us on Twitter or\ncontact us at qodana-support@jetbrains.com. We\u2019re always here to help you get\nset up.\n\nFree 60-day trial!\n\ncode quality code review Qodana WebStorm\n\n  * Share\n  * Facebook\n  * Twitter\n  * Linkedin\n\nPrev post WebStorm 2024.1: Sticky Lines, Quick Documentation Improvements,\nFull Line Completion, and MoreWebStorm 2024.1.1 Is Now Available Next post\n\n#### Subscribe to Qodana Blog updates\n\nThanks, we've got you!\n\n  1. Setup\n  2. Results\n  3. Critical Issues\n  4. High-severity issues\n  5. Moderate-severity issues\n  6. Do you want to try running Qodana analysis for yourself?\n\n## Discover more\n\n#### How to improve code quality in game development with Qodana and Unity\n\nWe tried Qodana on an internal Unity project \u2013 Archipelago, a virtual reality\napp that visualizes sales in the form of mountains. Qodana brings all of\nRider\u2019s Unity inspections to CI analysis so the whole team can review code.\n\nEkaterina Trukhan January 31, 2024\n\n2\n\n#### Qodana for .NET 8 is almost ready! Try the EAP and let us know what you\nthink\n\nQodana now supports .NET 8, starting from the 2023.3-eap version, with plans\nto release the official linter before the end of the year.\n\nKerry Beetge December 1, 2023\n\n0\n\n#### How Zynex Monitoring Solutions uses Qodana to Manage Code Quality for\ntheir .NET Applications \u2013 Case Study\n\nWe'd like to share the story of the cloud team at Zynex Monitoring Solutions,\nwho have recently adopted Qodana to monitor the quality and security of their\npatient monitoring platform.\n\nMaarten Balliauw November 13, 2023\n\n0\n\n#### Qodana Is Out Of Preview With First-Class JetBrains IDE Integration\n\nToday, Qodana announces a huge milestone: It\u2019s no longer in preview and is\navailable commercially with some major improvements. Get in now to enjoy a 50%\ndiscount on your first year.\n\nValerie Kuzmina July 19, 2023\n\n8\n\n  * Privacy & Security\n  * Terms of Use\n  * Legal\n  * Genuine tools\n\n  * Twitter\n  * Facebook\n  * Linkedin\n  * Instagram\n  * Youtube\n  * RSS\n  * Tiktok\n\nMerchandise store iconMerchandise store\n\nCopyright \u00a9 2000 JetBrains s.r.o.\n\n", "frontpage": false}
