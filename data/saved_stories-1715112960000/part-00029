{"aid": "40283804", "title": "Should I run NPM run build/prod on dev or prod?", "url": "https://www.vincentschmalbach.com/should-i-run-npm-run-build-prod-on-dev-or-prod/", "domain": "vincentschmalbach.com", "votes": 2, "user": "vincent_s", "posted_at": "2024-05-07 09:40:32", "comments": 0, "source_title": "Should I run npm run build/prod on dev or prod?", "source_text": "Should I run npm run build/prod on dev or prod? - Vincent Schmalbach\n\nSkip to content\n\nCategories\n\nDevOps Laravel\n\n# Should I run npm run build/prod on dev or prod?\n\nDecember 20, 2023 by Vincent Schmalbach\n\nShould you run npm run build on your development machine and commit everything\nto Git or should you commit your app without those files and run npm run build\non your production server? Here are the pros and cons of those two approaches:\n\n## Running npm run build on Development and Committing to Git\n\n### Pros\n\n  1. Consistency: Ensures that the build is consistent across environments since you're deploying the exact same files that were tested in development.\n  2. Faster Deployment: Reduces the deployment time as the build step is already done.\n  3. Simplicity: Simplifies the production deployment process, especially if your production environment has limitations.\n\n### Cons\n\n  1. Repository Size: Increases the size of your Git repository, as built files, especially from front-end frameworks, can be quite large.\n  2. Merge Conflicts: Can lead to potential merge conflicts with built files, especially if multiple developers are working on the project.\n  3. Outdated Artifacts: There's a risk of deploying outdated artifacts if developers forget to rebuild after making changes.\n\n## Running npm run build on Production\n\n### Pros\n\n  1. Clean Repository: Keeps the repository clean as you only commit source files.\n  2. Up-to-Date Builds: Ensures that the latest source is always built for production, reducing the risk of deploying outdated code.\n  3. Environment Specific Builds: Allows for creating environment-specific builds if needed (e.g., different API endpoints, feature toggles).\n\n### Cons\n\n  1. Longer Deployment Time: Increases deployment time as the build process is part of the deployment.\n  2. Potential for Build Failures: If there are issues in the build process, they will only be caught during deployment, which can be risky.\n  3. Dependency on Build Tools in Production: Requires that your production environment has the necessary build tools and configurations.\n\n## Alternative: Use Continuous Integration (CI)\n\nAutomate the build process using a CI/CD pipeline. This way, you can run tests\nand build in a controlled environment, and then deploy the artifacts to\nproduction. This combines the benefits of both approaches.\n\n### Leave a Reply Cancel reply\n\n## Want to work with me?\n\nHire Me Today Explore my services\n\n#### About\n\nVincent Schmalbach is an entrepreneur, software developer and SEO expert. He\nworks as a freelance software developer and specializes in modern SaaS and\nbusiness app development, leveraging well over 10 years of experience in the\nfield.\n\n#### Posts\n\n  * Bootstrap 5 Utility Classes\n  * GitHub: Rename master branch to main and make it the default\n  * Migrating a Git repo with full history\n  * LLMs Will Not Replace Software Engineers\n  * Analyzing Cursor's GPT-4 API Request\n  * Adding Claude 3 Opus (or any other model) to Cursor\n\n#### Services\n\n  * SEO Services\n  * Ecommerce Website Development\n  * Website Design & Development\n  * Full-Stack Web Development\n\n\u00a9 Vincent Schmalbach\n\n| Privacy Policy | Imprint\n\n", "frontpage": false}
