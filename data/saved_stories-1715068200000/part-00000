{"aid": "40281422", "title": "Show HN: I built a console log to detect and prevents leaking secrets", "url": "https://github.com/Onboardbase/secure-log", "domain": "github.com/onboardbase", "votes": 1, "user": "lexokoh", "posted_at": "2024-05-07 01:47:45", "comments": 0, "source_title": "GitHub - Onboardbase/secure-log: Detects and prevents leaking secrets and API tokens into your logs.", "source_text": "GitHub - Onboardbase/secure-log: Detects and prevents leaking secrets and API\ntokens into your logs.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nOnboardbase / secure-log Public\n\n  * Notifications\n  * Fork 7\n  * Star 89\n\nDetects and prevents leaking secrets and API tokens into your logs.\n\n### License\n\nMIT license\n\n89 stars 7 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# Onboardbase/secure-log\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n7 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndantelexUpdate README.mdApr 15, 20242ae16ca \u00b7 Apr 15, 2024Apr 15, 2024\n\n## History\n\n84 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| use node 18| Apr 12, 2024  \n  \n### src\n\n|\n\n### src\n\n| pass failing test| Apr 12, 2024  \n  \n### test\n\n|\n\n### test\n\n| pass failing test| Apr 12, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| v0.1.1| Jul 25, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Update LICENSE| Jan 12, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 15, 2024  \n  \n### jest.config.js\n\n|\n\n### jest.config.js\n\n| run size limit| Apr 12, 2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| Update package.json| Apr 15, 2024  \n  \n### tsconfig.json\n\n|\n\n### tsconfig.json\n\n| v0.1.1| Jul 25, 2023  \n  \n### tsdx.config.js\n\n|\n\n### tsdx.config.js\n\n| run size limit| Apr 12, 2024  \n  \n### yarn.lock\n\n|\n\n### yarn.lock\n\n| \ud83d\udce6 NEW: Add support for consola and exposes utility functions| Apr 12, 2024  \n  \n## Repository files navigation\n\n# Secure log\n\nA better and more secure console logging experience. Detects and prevents\nleaking secrets and API tokens into your logs.\n\nCheck out other language support Python\n\n# Contents\n\n  * Secure log\n  * Contents\n\n    * Install\n    * Usage\n\n      * Supported console methods\n\n## Install\n\nTo use SecureLog,\n\n    \n    \n    yarn add @onboardbase/secure-log # npm i @onboardbase/secure-log\n\n## Usage\n\nImport the SecureLog library at the top level of your project. If you use any\nenv/secret library (e.g. dotenv) in your project, you should import those\nbefore importing SecureLog.\n\n    \n    \n    import SecureLog from '@onboardbase/secure-log'; new SecureLog(); // For JS projects, use new SecureLog.default() console.log('random value'); // Onboardbase Signatures here: random value.\n\nThen you can use your console.log as usual. This should include the SecureLog\nprefix and log your value.\n\nThe SecureLog Library also accepts an object.\n\n    \n    \n    export default interface IOptions { disableOn?: 'development' | 'production'; // You can use this to specify if you want the SecureLog library to be disabled in a specific environment disableConsoleOn?: 'development' | 'production'; // You can use this to disable the console entirely in a specific environment warnOnly?: boolean; // If this is true, secure log will only print out a warning message rather than exit the program when it detects a secret leak. forceNewInstance?: boolean; // SecureLog maintains a singleton, use this option to refresh the singleton and updating the config in the process. maskLeakedSecrets?: boolean; // Hide the value of a leaked secrets from reaching the console prefix:? string; // customize the prefix for the logs. defaults to \"Onboardbase Signatures here:\" globalConsoleObject:? Console // SecureLog advertently uses the standard console.log to output to the console, this option enables configuring the standard console object that is used within the library to output to the console. }\n\nExample:\n\n    \n    \n    new SecureLog({ disableConsoleOn: 'development', warnOnly: true }); // This will disable the SecureLog library on development environment. console.log('sensitive secret here'); // This won't be executed.\n\nIf a secret is detected in a log message, SecureLog can either issue a warning\nor exit the process, depending on the warnOnly option. The default value for\nwarnOnly is false, hence SecureLog will exit the process when it detects a\nsecret leak.\n\nThe disableConsoleOn option passed to the SecureLog library will ensure that\nthe console.log statement is not executed.\n\nThe disableOn && disableConsoleOn depend on your process.env.NODE_ENV to work\nperfectly. That is, it compares the environment passed from the disableOn ||\ndisableConsoleOn option with the environment in your process.env.NODE_ENV to\nknow when to disable the SecureLog library or the console statements itself.\n\nThe SecureLog library scans the arguments passed to the console.log function\nto check if any of the ...args inside your console.log function is a potential\nsecret. It does this by comparing the arguments passed to console.log with the\nvalues of your current environment: process.env. It throws an error if any\npotential secret is found.\n\nExample:\n\n    \n    \n    console.log('secret', process.env.AWS_ACCESS_KEY_ID); // Onboardbase Signatures here: ************ is a valid secret for the key: AWS_ACCESS_KEY_ID\n\nThis will throw a warning if an actual AWS_ACCESS_KEY_ID is found in the\nprocess.env to notify the user that they are logging a potential secret.\n\nExample: React App\n\n    \n    \n    <head> <script defer src=\"https://cdn.jsdelivr.net/npm/@onboardbase/secure-log/dist/index.min.js\"> new SecureLog.default() </script> </head>\n\nExample: NodeJs\n\n    \n    \n    const express = require('express') const app = express() const SecureLog = require('@onboardbase/secure-log') const port = 3000 new SecureLog() app.get('/', (req, res) => { res.send('Hello World!') }) app.listen(port, () => { console.log(`Example app listening on port ${port}`) })\n\n### Supported console methods\n\nThe SecureLog library currently only supports these console methods:\n\n  * console.log, console.clear, console.warn, console.profileEnd, console.debug, console.info, console.error, console.table\n\n### API\n\n#### createSecureConsolaReporter\n\nTo securely log with consola, use the createSecureConsolaReporter method to\ncreate a reporter.\n\nIt exposes a secure log instance with the following config: { warnOnly: true,\nforceNewInstance: true, maskLeakedSecrets: true, }\n\n    \n    \n    import { createSecureConsolaReporter } from \"@onboardbase/secure-log\" const options: IOptions = {} // override the default config used to initialize secure log instance const consola = createSecureConsolaReporter(options) process.env.NODE_ENV = \"development\" consola.log(\"hello there from development\") // {\"date\":\"2024-04-12T17:46:07.099Z\",\"args\":[\"hello there from ***********\"],\"type\":\"log\",\"level\":2,\"tag\":\"\"}\n\n### maskLeakedSecrets(data: any) : any\n\nMask leaked secrets in a string|array|object.\n\n    \n    \n    import { maskSecretLeaks } from \"@onboardbase/secure-log\" // mask secrets existing in a predefined array of values const valuesIn = ['asd'] // *** 9200 *** development console.log(maskSecretLeaks('asd 9200 asd development', valuesIn)); const secrets = { PORT: '9200', NODE_ENV: 'development' }; process.env = secrets; // mask secrets in process.env // asd 9200 asd *********** console.log(maskSecretLeaks('asd 9200 asd development')); // { key: [ 'asd 9200 asd ***********' ] } console.log(maskSecretLeaks({ key: ['asd 9200 asd development'] })); // [ 'asd 9200 asd ***********' ] console.log(maskSecretLeaks(['asd 9200 asd development'])); // { nested: { env: '***********' } } console.log(maskSecretLeaks({ nested: { env: 'development' } }));\n\n### validateSecretLeak(data: any): boolean\n\nValidate if a string|object|array contains secrets\n\n    \n    \n    import { validateSecretLeak } from \"@onboardbase/secure-log\" const secrets = { PORT: '9200', NODE_ENV: 'development' }; process.env = secrets; console.log(validateSecretLeak(\"development\")) // true\n\n## About\n\nDetects and prevents leaking secrets and API tokens into your logs.\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\nCustom properties\n\n### Stars\n\n89 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n7 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 6\n\n## Languages\n\n  * TypeScript 99.4%\n  * JavaScript 0.6%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
