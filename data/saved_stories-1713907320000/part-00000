{"aid": "40132944", "title": "Double Edged Sword of Docker: Balancing Benefits and Risks", "url": "https://it-notes.dragas.net/2024/04/22/the-doubled-edge-sword-of-docker/", "domain": "dragas.net", "votes": 1, "user": "vermaden", "posted_at": "2024-04-23 15:19:24", "comments": 0, "source_title": "The Double-Edged Sword of Docker: Balancing Benefits and Risks", "source_text": "The Double-Edged Sword of Docker: Balancing Benefits and Risks -\n\nCookie Consent by TermsFeed\n\nNoi usiamo i cookies\n\nNoi usiamo i cookies e altre tecniche di tracciamento per migliorare la tua\nesperienza di navigazione nel nostro sito, per mostrarti contenuti\npersonalizzati e annunci mirati, per analizzare il traffico sul nostro sito, e\nper capire da dove arrivano i nostri visitatori.\n\n# The Double-Edged Sword of Docker: Balancing Benefits and Risks\n\nPosted on April 22, 2024 | 4 minutes | 821 words | Stefano Marinelli\n\nAs a systems administrator, I am deeply concerned about the consequences of\nthe current widespread adoption of technologies like Docker. Having been a\nproponent and early adopter of containerization for many years, I recognized\nits potential early on and have been advocating for its use in many of the\nLinux-based setups I manage.\n\nInitially, this relieved me of some headaches. One recurring issue was dealing\nwith developers requesting \u201cexotic\u201d setups\u2014by exotic, I mean specific\n(sometimes multiple) versions of PHP on the same VPS, or unique combinations\nof PHP and MySQL (or MariaDB) that required adding external repositories of\nall sorts\u2014creating future problems when one of these repositories ceases to\nexist or be updated, leaving us with an unstable, dangerous, or unupgradable\nsystem.\n\nIn many cases, I resolved these issues by partitioning components into FreeBSD\njails (one jail per service, one for data, with bind mounts as needed\u2014perfect\nefficiency, excellent upgradability and stability, maximum security). However,\nthis wasn\u2019t always feasible. Sometimes, the explicit use of Linux was\nrequired, prompting the need for an alternative solution. In the past, I\nseparated components using LXC, similar to FreeBSD jails, but then Docker\narrived, and the approach changed.\n\nAt that point, the problem seemed solved: I just needed to provide a VPS with\nDocker, handle backups, data, monitoring, etc., but leave developers the\nfreedom to include the specific versions of components they needed in their\nsetups.\n\nBut...\n\nDevelopers often make poor system administrators. And rightly so, because\nsystem administrators are often poor developers. However, this leads to a\nseries of medium-term problems:\n\n  * Continued use of outdated (or conversely, bleeding-edge and thus unstable) component versions in Dockerfiles, creating stability issues or, worse, security vulnerabilities.\n  * A habitual approach to software crashes as if they were normal. Well-developed software should not crash but autonomously manage issues. When a crash is inevitable, it should indicate a situation so severe that it requires a system administrator\u2019s intervention. Instead, the world is full of unstable stacks that crash at the slightest exception, with the mentality, \u201cthe container will just restart.\u201d This, to me, is unacceptable.\n  * Lack of optimization: I often hear, \u201cI\u2019ve maxed out the resources on MySQL, we need to scale up.\u201d But upon reviewing, I realize that there has been no tuning of its configuration. After some adjustments, the load often decreases by 90%, making it entirely manageable. Yet, we are in an era dominated by major cloud players whose goal is not to optimize our costs (as they claim) but to make us spend more, seemingly simplifying tasks with tools like Kubernetes (and autoscaling) but actually encouraging us to unnecessarily complicate our infrastructure and spend more. Using more resources while contradicting the ecological awareness that marks our times.\n  * Lack of big-picture thinking: As system administrators managing the overall system, we always have a holistic view. Developers, rightly focused on their projects, often lack the depth of understanding to identify the bottleneck in the entire setup. A typical comment I hear is, \u201cthe site is slow, we need a more powerful server.\u201d In 90% of cases, this is unnecessary and would be completely ineffective. A misimplemented feature launching 50 concurrent long PHP processes wouldn\u2019t be solved by increasing from 4 to 8 cores. It would help, sure, but it wouldn\u2019t be a solution. Solving it by reducing the processes to two would change everything.\n  * Lack of backup strategy: The average developer focuses on the reproducibility of their setup, maybe keeping a database dump (not always), but seldom addresses the issue of recovery time. I recently had a discussion with a colleague (who calls himself a DevOps) who told me he had \u201cproduction database dumps, a .tar.gz of individual web app directories, and notes on how he set up that server.\u201d When I asked how many systems he managed, he said \u201cover 100, on the same cluster.\u201d Asked about disaster recovery, he believed it was \u201cimpossible\u201d for such a cluster to be unreachable for long (though the OVH Strasbourg fire should have taught us that nothing is impossible when data is concentrated in one place). Nevertheless, he thought he could restore operations in \u201cabout 2 hours per server\u201d\u2014thus, 100 servers would require 200 hours of work. For 99% of setups, these would be totally unacceptable timelines.\n\nToday, we have hardware so powerful that it can handle unimaginable loads from\njust a few years ago. A bit of planning, optimization, and design can greatly\nreduce costs, and increase productivity, stability, and system reliability.\n\nThus, I remain in favor of solutions like Docker, but the turn the entire IT\nindustry is taking towards such solutions worries me because it might improve\nsome aspects but will worsen others. We are simply shifting the problem\nelsewhere.\n\nIn my view, there is no one-size-fits-all solution to any problem; each\nrequires its own study and implementation.\n\nThe solution to all the problems we have known was one: 42. And we all know\nhow that turned out.\n\ndocker container linux server freebsd jails lxc\n\n#### See also\n\n  * Make your own E-Mail server - Part 2 - Adding Webmail and More with Nextcloud\n  * Make your own E-Mail server - Part 1 - FreeBSD, OpenSMTPD, Rspamd and Dovecot included\n  * Installing Alpine Linux on a FreeBSD Jail\n  * How to Create a FreeBSD Jail Hosting XRDP and XFCE for Remote Desktop Access\n  * Migrating from VM to Hierarchical Jails in FreeBSD\n\n  * \u2190 Previous Post\n\nStefano Marinelli \u2022 \u00a9 2024 \u2022 IT Notes\n\nHugo v0.123.8 powered \u2022 Theme Beautiful Hugo adapted from Beautiful Jekyll\n\n", "frontpage": false}
