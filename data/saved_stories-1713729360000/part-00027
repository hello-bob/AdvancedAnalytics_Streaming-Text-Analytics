{"aid": "40105522", "title": "OpenPubkey: Protocol for leveraging OpenID to bind identities to public keys", "url": "https://github.com/openpubkey/openpubkey", "domain": "github.com/openpubkey", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-21 13:12:40", "comments": 0, "source_title": "GitHub - openpubkey/openpubkey: Reference implementation of OpenPubkey", "source_text": "GitHub - openpubkey/openpubkey: Reference implementation of OpenPubkey\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nopenpubkey / openpubkey Public\n\n  * Notifications\n  * Fork 34\n  * Star 556\n\nReference implementation of OpenPubkey\n\neprint.iacr.org/2023/296\n\n### License\n\nApache-2.0 license\n\n556 stars 34 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# openpubkey/openpubkey\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n9 Branches\n\n4 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nEthanHeilmanDefault to minor versions in release-drafter-config.yml (#193)Apr\n18, 2024eba749e \u00b7 Apr 18, 2024Apr 18, 2024\n\n## History\n\n103 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Default to minor versions in release-drafter-config.yml (#193)| Apr 18, 2024  \n  \n### cert\n\n|\n\n### cert\n\n| Release 0.3 cleanup (#170)| Apr 6, 2024  \n  \n### client\n\n|\n\n### client\n\n| feat: Adds OIDC ID Token Refresh Flow to openpubkey client and google...|\nApr 18, 2024  \n  \n### cosigner\n\n|\n\n### cosigner\n\n| Adds golangci linter runner action (#186)| Apr 16, 2024  \n  \n### discover\n\n|\n\n### discover\n\n| feat: Adds OIDC ID Token Refresh Flow to openpubkey client and google...|\nApr 18, 2024  \n  \n### docs\n\n|\n\n### docs\n\n| Adds microsoft/azure and gitlab JWKS URIs to FAQ (#142)| Mar 20, 2024  \n  \n### examples\n\n|\n\n### examples\n\n| feat: Adds OIDC ID Token Refresh Flow to openpubkey client and google...|\nApr 18, 2024  \n  \n### gq\n\n|\n\n### gq\n\n| Adds golangci linter runner action (#186)| Apr 16, 2024  \n  \n### oidc\n\n|\n\n### oidc\n\n| feat: Adds OIDC ID Token Refresh Flow to openpubkey client and google...|\nApr 18, 2024  \n  \n### pktoken\n\n|\n\n### pktoken\n\n| feat: Adds OIDC ID Token Refresh Flow to openpubkey client and google...|\nApr 18, 2024  \n  \n### providers\n\n|\n\n### providers\n\n| feat: Adds OIDC ID Token Refresh Flow to openpubkey client and google...|\nApr 18, 2024  \n  \n### util\n\n|\n\n### util\n\n| Adds apache2 license to all files (#174)| Apr 11, 2024  \n  \n### verifier\n\n|\n\n### verifier\n\n| feat: Adds OIDC ID Token Refresh Flow to openpubkey client and google...|\nApr 18, 2024  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| Initial commit| Sep 14, 2023  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Rejig oidc provider interface and packages (#24)| Nov 1, 2023  \n  \n### .golangci.yml\n\n|\n\n### .golangci.yml\n\n| Adds golangci linter runner action (#186)| Apr 16, 2024  \n  \n### CODE-OF-CONDUCT.md\n\n|\n\n### CODE-OF-CONDUCT.md\n\n| Create CODE-OF-CONDUCT.md (#60)| Nov 15, 2023  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Update CONTRIBUTING.md| Nov 10, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Sep 14, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Google OP can use different port is that port is already taken (#167)| Apr\n5, 2024  \n  \n### SECURITY.md\n\n|\n\n### SECURITY.md\n\n| Creates SECURITY.md (#49)| Nov 2, 2023  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| Bump github.com/go-jose/go-jose/v3 from 3.0.0 to 3.0.3 (#192)| Apr 18, 2024  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| Bump github.com/go-jose/go-jose/v3 from 3.0.0 to 3.0.3 (#192)| Apr 18, 2024  \n  \n## Repository files navigation\n\n# OpenPubkey\n\n## Overview\n\nOpenPubkey is a protocol for leveraging OpenID Providers (OPs) to bind\nidentities to public keys. It adds user- or workload-generated public keys to\nOpenID Connect (OIDC), enabling identities to sign messages or artifacts under\ntheir OIDC identity.\n\nWe represent this binding as a PK Token. This token proves control of the OIDC\nidentity and the associated private key at a specific time, as long as a\nverifier trusts the OP. Put another way, the PK Token provides the same\nassurances as a certificate issued by a Certificate Authority (CA) but\ncritically, does not require adding a CA. Instead, the OP fulfills the role of\nthe CA. This token can be distributed alongside signatures in the same way as\na certificate.\n\nOpenPubkey does not add any new trusted parties beyond what is required for\nOpenID Connect. It is fully compatible with existing OpenID Providers (Google,\nAzure/Microsoft, Okta, OneLogin, Keycloak) without any changes to the OpenID\nProvider.\n\nCompanies building on OpenPubkey include:\n\n  * Docker, Inc is building a public container registry where OpenPubkey is used to sign Docker Official Images.\n\n  * BastionZero uses OpenPubkey to provide secure remote access to infrastructure.\n\nOpenPubkey is a Linux Foundation project. It is open source and licensed under\nthe Apache 2.0 license. This project presently provides an OpenPubkey client\nand verifier for creating and verifying PK Tokens from Google\u2019s OP (for users)\nand GitHub\u2019s OP (for workloads).\n\n## Getting Started\n\nLet's walk through a simple message signing example. For conciseness we omit\nthe error handling code. The full code for this example can be found in\n./examples/simple/example.go.\n\nWe start by configuring the OP (OpenID Provider) our client and verifier will\nuse. In this example we use Google as our OP.\n\n    \n    \n    opOptions := providers.GetDefaultGoogleOpOptions() opOptions.SignGQ = signGQ op := providers.NewGoogleOpWithOptions(opOptions)\n\nNext we create the OpenPubkey client and call opkClient.Auth:\n\n    \n    \n    opkClient, err := client.New(op) pkt, err := opkClient.Auth(context.Background())\n\nThe function opkClient.Auth opens a browser window to the OP, Google in this\ncase, which then prompts the user to authenticate their identity. If the user\nauthenticates successfully the client will generate and return a PK Token,\npkt.\n\nThe PK Token, pkt, along with the client's signing key can then be used to\nsign messages:\n\n    \n    \n    msg := []byte(\"All is discovered - flee at once\") signedMsg, err := pkt.NewSignedMessage(msg, opkClient.GetSigner())\n\nTo verify a signed message, we first verify that the PK Token pkt is issued by\nthe OP (Google). Then we use the PK Token to verify the signed message.\n\n    \n    \n    pktVerifier, err := verifier.New(provider) err = pktVerifier.VerifyPKToken(context.Background(), pkt) msg, err := pkt.VerifySignedMessage(signedMsg)\n\nTo run this example type: go run .\\examples\\simple\\example.go.\n\nThis will open a browser window to Google. If you authenticate to Google\nsuccessfully, you should see: Verification successful:\nanon.author.aardvark@gmail.com (https://accounts.google.com) signed the\nmessage 'All is discovered - flee at once' where\nanon.author.aardvark@gmail.com is your gmail address.\n\n## How Does OpenPubkey Work?\n\nOpenPubkey supports both workload identities and user identities. Let's look\nat how this works for users and then show how to extend OpenPubkey to\nworkloads.\n\n### OpenPubkey and User Identities\n\nIn OpenID Connect (OIDC) users authenticate to an OP (OpenID Provider), and\nthe OP grants the user an ID Token. These ID Tokens are signed by the OP and\ncontain claims made by the OP about the user such as the user's email address.\nImportant to OpenPubkey is the nonce claim in the ID Token.\n\nThe nonce claim in the ID Token is a random value sent to the OP by the user's\nclient during authentication with the OP. OpenPubkey follows the OpenID\nConnect authentication protocol with the OP, but it transmits a nonce value\nset to the cryptographic hash of both the user's public key and a random value\nso that the nonce is still cryptographically random, but any party that speaks\nOpenPubkey can check that ID Token contains the user's public key. From the\nperspective of the OP, the nonce looks just like a random value.\n\nLet's look at an example where a user, Alice, leverages OpenPubkey to get her\nOpenID Provider, google.com, to bind her OIDC identity, alice@acme.co, to her\npublic key alice-pubkey. To do this, Alice invokes her OpenPubkey client.\n\n  1. Alice's OpenPubkey client generates a fresh key pair for Alice, (alice-pubkey, alice-signkey), and a random value rz. The client then computes the nonce=crypto.SHA3_256(upk=alice-pubkey, alg=ES256, rz=crypto.Rand()). The value alg is set to the algorithm of Alice's key pair.\n  2. Alice's OpenPubkey client then initiates OIDC authentication flow with the OP, google.com, and sends the nonce to the OP.\n  3. The OP requests that Alice consents to issuing an ID Token and provides credentials (i.e., username and password) to authenticate to her OP (Google).\n  4. If Alice successfully authenticates, the OP builds an ID Token containing claims about Alice. Critically, this ID Token contains the nonce claim generated by Alice's client to commit to Alice's public key. The OP then signs this ID Token under its signing key and sends the ID Token to Alice.\n\nThe ID Token is a JSON Web Signature (JWS) and follows the structure shown\nbelow:\n\n    \n    \n    payload: { \"iss\": \"https://accounts.google.com\", \"aud\": \"878305696756-6maur39hl2psmk23imilg8af815ih9oi.apps.googleusercontent.com\", \"sub\": \"123456789010\", \"email\": \"alice@acme.co\", \"nonce\": 'crypto.SHA3_256(upk=alice-pubkey, alg=ES256, rz=crypto.Rand(), typ=\"CIC\")', \"name\": \"Alice Example\", ... } signatures: [ {\"protected\": {\"typ\": \"JWT\", \"alg\": \"RS256\", \"kid\": \"1234...\", \"typ\": \"JWT\"}, \"signature\": SIGN(google-signkey, (payload, signatures[0].protected))` }, ]\n\nAt this point, Alice has an ID Token, signed by google.com (the OP). Anyone\ncan download the OP's (google.com) public keys from google.com's well-known\nJSON Web Key Set (JWKS) URI (https://www.googleapis.com/oauth2/v3/certs) and\nverify that this ID Token committing to Alice's public key was actually signed\nby google.com. If Alice reveals the values of alice-pubkey, alg, and rz,\nanyone can verify that the nonce in the ID Token is the hash of upk=alice-\npubkey, alg=ES256, rz=crypto.Rand(). Thus, Alice now has a ID Token signed by\nGoogle that cryptography binding her identity, alice@acme.co, to her public\nkey, alice-pubkey.\n\n### PK Tokens\n\nA PK Token is simply an extension of the ID Token that bundles together the ID\nToken with values committed to in the ID Token nonce. Because ID Tokens are\nJSON Web Signatures (JWS) and a JWS can have more than one signature, we\nextend the ID Token into a PK Token by appending a second signature/protected\nheader.\n\nAlice simply sets the values she committed to in the nonce as a JWS protected\nheader and signs the ID Token payload and this protected header under her\nsigning key, alice-signkey. This signature acts as cryptographic proof that\nthe user knows the secret signing key corresponding to the public key.\n\nNotice the additional signature entry in the PK Token example below (as\ncompared to the ID Token example above):\n\n    \n    \n    \"payload\": { \"iss\": \"https://accounts.google.com\", \"aud\": \"878305696756-6maur39hl2psmk23imilg8af815ih9oi.apps.googleusercontent.com\", \"sub\": \"123456789010\", \"email\": \"alice@acme.co\", \"nonce\": <crypto.SHA3_256(upk=alice-pubkey, alg=ES256, rz=crypto.Rand(), typ=\"CIC\")>, \"name\": \"Alice Example\", ... } \"signatures\": [ {\"protected\": {\"alg\": \"RS256\", \"kid\": \"1234...\", \"typ\": \"JWT\"}, \"signature\": <SIGN(google-signkey, (payload, signatures[0].protected))> }, {\"protected\": {\"upk\": alice-pubkey, \"alg\": \"EC256\", \"rz\": crypto.Rand(), \"typ\": \"CIC\"}, \"signature\": <SIGN(alice-signkey, (payload, signatures[1].protected))> }, ]\n\nThe PK Token can be presented to an OpenPubkey verifier, which uses OIDC to\nobtain the OP\u2019s public key and verify the OP's signature in the ID Token. It\nthen use the values in the protected header to extract the user's public key.\n\n### OpenPubkey and Workload Identities\n\nJust like OpenID Connect, OpenPubkey supports both user identities and\nworkload identities.\n\nThe workload identity setting is very similar to the user identity setting\nwith one major difference. Workload OpenID Providers, such as github.com, do\nnot include a nonce claim in the ID Token. Unlike user identity providers,\nthey allow the workload to specify an aud(audience) claim. Thus workload\nidentity functions in a similar fashion as user identity but rather than\ncommit to the public key in the nonce, we use the aud claim instead.\n\n### GQ Signatures To Prevent Replay Attacks\n\nAlthough not present in the original OpenPubkey paper, GQ signatures have now\nbeen integrated so that the OpenID Provider's (OP) signature can be stripped\nfrom the ID Token and a proof of the OP's signature published in its place.\nThis prevents the ID Token within the PK Token from being used against any\nOIDC resource providers as the original signature has been removed without\ncompromising any of the assurances that the original OP's signature provided.\n\nWe follow the approach specified in the following paper: Reducing Trust in\nAutomated Certificate Authorities via Proofs-of-Authentication.\n\nFor user-identity scenarios where the PK Token is not made public, GQ\nsignatures are not required. GQ Signatures are required for all current\nworkload-identity use cases.\n\n## How To Use OpenPubkey\n\nOpenPubkey is driven by its use cases. You can find all available use cases in\nthe examples folder.\n\nWe expect this list to continue growing (and if you have an idea for an\nadditional use case, please file an issue, raise the idea in a community\nmeeting, or send a message in our Slack channel!\n\n## How To Develop With OpenPubkey\n\nAs we work to get this repository ready for v 1.0, you can check out the\nexamples folder for more information about OpenPubkey's different use cases.\nIn the meantime, we would love for the community to contribute more use cases.\nSee below for guidance on joining our community.\n\n## Governance and Contributing\n\n### File An Issue\n\nFor feature requests, bug reports, technical questions and requests, please\nopen an issue. We ask that you review existing issues before filing a new one\nto ensure your issue has not already been addressed.\n\nIf you have found what you believe to be a security vulnerability, DO NOT file\nan issue. Instead, please follow our security disclosure policy.\n\n### Code of Conduct\n\nBefore contributing to OpenPubkey, please review our Code of Conduct.\n\n### Contribute To OpenPubkey\n\nTo learn more about how to contribute, see CONTRIBUTING.md.\n\n### Get Involved With Our Community\n\nTo get involved with our community, see our community repo. You\u2019ll find\ndetails such as when the next community and technical steering committee\nmeetings are.\n\n### Join Our Slack\n\nFind us over on the OpenSSF Slack in the #openpubkey channel.\n\n### Report A Security Issue\n\nTo report a security issue, please follow our security disclosure policy.\n\n## FAQ\n\nSee the FAQ for answers to Frequently Asked Questions about OpenPubkey.\n\n## About\n\nReference implementation of OpenPubkey\n\neprint.iacr.org/2023/296\n\n### Topics\n\nidentity oauth2 cryptography openid-connect software-supply-chain-security\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\n### Code of conduct\n\nCode of conduct\n\n### Security policy\n\nSecurity policy\n\nActivity\n\nCustom properties\n\n### Stars\n\n556 stars\n\n### Watchers\n\n17 watching\n\n### Forks\n\n34 forks\n\nReport repository\n\n## Releases 1\n\nOpenPubkey Release v0.3.0 Latest\n\nApr 11, 2024\n\n## Packages 0\n\nNo packages published\n\n## Contributors 17\n\n\\+ 3 contributors\n\n## Languages\n\n  * Go 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
