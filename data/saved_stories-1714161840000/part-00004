{"aid": "40167272", "title": "Don't get hit with the pendulum: DevOps shifted too far left", "url": "https://blog.christianposta.com/devops-shifted-too-far-left/", "domain": "christianposta.com", "votes": 1, "user": "iximiuz", "posted_at": "2024-04-26 09:03:34", "comments": 0, "source_title": "Don't get hit with the pendulum: DevOps shifted too far left", "source_text": "Don't get hit with the pendulum: DevOps shifted too far left \u2013 Software Blog\n\nSoftware Blog\n\n### Christian Posta\n\nField CTO at solo.io, author Istio in Action and Microservices for Java\nDevelopers, open-source enthusiast, cloud application development, committer @\nApache, Serverless, Cloud, Integration, Kubernetes, Docker, Istio, Envoy\n#blogger\n\nTwitter Google+ LinkedIn Github Stackoverflow\n\n# Don't get hit with the pendulum: DevOps shifted too far left\n\nYou probably wouldn\u2019t be surprised if I told you modern networking based on\nopen source projects like Istio, SPIFFE, Cilium and others (See my paper about\nthe CAKES stack) are typically consumed by what we now call \u201cplatform\nengineering\u201d teams. You\u2019ve probably heard the term platform engineering or\nseen some nice write-ups on it (like the one from my industry colleague Daniel\nBryant).\n\nAt Solo.io working with our partners and customers, we get to see some of the\nimportant details about how platform engineering teams emerge, how they get\nfunded, how they work with other parts of the organization and some of the\nopportunities and challenges they\u2019ve run into. Through this, I\u2019ve observed\nsomething worth saying out loud: just like other examples of large pendulum\nswings in our industry, DevOps has introduced a large swing in a direction\nthat doesn\u2019t produce desired outcomes at large organizations: shifting too far\nleft.\n\n> What do I mean by DevOps shifting too far left?\n\nLet\u2019s recall that DevOps is a movement that attempts to break down silos in IT\norganizations to improve delivery speed and quality of software. A lot of\nbeneficial practices emerged from DevOps including a focus on automation,\nimproving communication between teams, and trying to shift certain delivery\nactivities \u201cto the left\u201d, ie, closer to development. For example, introducing\nquality testing, vulnerability scanning, security testing, et. al. closer to\nthe time code is built and tested instead of farther down the delivery\npipeline (to the right). Accounting for these non-functional requirements\ncloser to development creates a tighter feedback loop and reduces the cost of\ndelivery because it\u2019s cheaper to correct any issues earlier in the delivery\npipeline.\n\nShifting left has benefits as pointed out above. However, taken to the\nextreme, this shift left can be detrimental.\n\n> \u201cYou build it, you run it\u201d\n\nAnother popular idea in the implementation of DevOps is application teams\ntaking more responsibility for the code they ship. In principle, this is a\ngreat idea. In practice in some organizations, this has turned into \u201cYou build\nit.... like, everything, the code (pick whatever language you want!), the\ntests, the docker images, the Kubernetes clusters, CNIs, service mesh, the\nobservability tooling, the integration with CI/CD, the api gateways, the\nALBs/NLBs, databases, underlying VPCs, etc etc etc. And then you run all of\nthat.\u201d\n\nSounds like you should be running AWAY from all of that.\n\nNot only have some organizations tried to turn their application delivery\nteams into \u201cfull stack app to infrastructure engineers\u201d, but they have told\neach of their teams/lines of business they are all responsible for doing this\nthemselves. The \u201cdecentralization\u201d enables each team/LOB to \u201cgo faster\u201d.\n\nIn practice, this is a disaster. A very very very expensive, disaster. And no,\nyou go slower.\n\nWe\u2019ve seen this scenario quite a few times and they kind of go like this:\n\nSome executive declares \u201cwe\u2019re doing DevOps now\u201d and going all in on the\nCloud. They start handing out AWS developer accounts like candy and each team\nis off and running. Initially each team feels liberated; they get to do\nwhatever they want. Then they quickly realize there\u2019s actually a lot to do for\nthe \u201cyou run it part\u201d when there are no established best practices, tooling,\nand they don\u2019t have the experience on the team. They fumble a bit, try some\nthings, fail at some things, and end up throwing up their hands or burning\nout. They go back to an infrastructure team and say \u201ccan you run this for us\u201d\nand the infra teams look at whats there and say \u201chell no\u201d. Now you have a\nbunch of teams with a lot of infrastructure technical debt unable to safely\ndeploy code.\n\nI want to be clear, this is not inherently a \u201cDevOps\u201d issue. It\u2019s more how\nlarge organizations have embraced and implemented DevOps. And that\u2019s likely\npart of how \u201cplatform engineering\u201d became a thing. A team of specialists\nworking cross-silos that build and support underlying infrastructure and\nexposes common golden-path workflows with tools, SDKs, UIs, automation,\ndeclarative configuration, etc that best fits how the developers want to work.\nThey are measured by improving developer experience, reducing costs, and\nimproving compliance.\n\nPlatform engineering is about the most \u201cbig enterprise\u201d thing these\norganizations could do to best practice \u201cDevOps\u201d and the \u201cyou build it, you\nrun it\u201d mantra. Even when I worked at Amazon.com through my time at\nZappos.com, the Amazonians living the \u201cyou build it, you run it\u201d mantra had a\nmassive amount of tooling to do builds, deploys, testing, monitoring,\nalerting, etc at their disposal. It was not as simple as \u201chere\u2019s AWS, knock\nyourself out\u201d. That was over 10 years ago when I was there, so I cannot\ncomment how it is now (please reach out if you have insight on what it\u2019s like\nnow).\n\nWill platform engineering be the appropriate solution? It\u2019s the next part of\nthe journey most organizations are embarking on, there are still challenges\naround the people problem, but it seems to fit better from my observations.\n\n#### Share on\n\n  * Twitter\n  * Facebook\n  * Google+\n\nDon't get hit with the pendulum: DevOps shifted too far left was published on\nApril 25, 2024.\n\n#### You might also enjoy (View all posts)\n\n  * Does Platform Engineering Solve the People Problem\n  * Understanding Istio Telemetry v2\n  * Diving Into Istio 1.6 Certificate Rotation\n\n\u00a9 2024 Christian Posta. Powered by Jekyll using the Minimal Mistakes theme.\n\n", "frontpage": false}
