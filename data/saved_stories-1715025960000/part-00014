{"aid": "40273042", "title": "Moaning about YAML Frontmatter", "url": "https://dotat.at/@/2024-05-05-frontmatter.html", "domain": "dotat.at", "votes": 1, "user": "fanf2", "posted_at": "2024-05-06 10:26:16", "comments": 0, "source_title": "Moaning about YAML frontmatter \u2013 Tony Finch", "source_text": "Moaning about YAML frontmatter \u2013 Tony Finch\n\n# Tony Finch \u2013 blog\n\n  * home\n  * search\n  * archive\n  * recent\n  * feed\n  * links\n  * elsewhere\n\nAs is typical for static site generators, each page on this web site is\ngenerated from a file containing markdown with YAML frontmatter.\n\nNeither markdown nor YAML are good. Markdown is very much the worse-is-better\nof markup languages; YAML, on the other hand, is more like better-is-worse.\nYAML has too many ways of expressing the same things, and the lack of\nredundancy in its syntax makes it difficult to detect mistakes before it is\ntoo late. YAML\u2019s specification is incomprehensible.\n\nBut they are both very convenient and popular, so I went with the flow.\n\n## multiple documents\n\nA YAML stream may contain several independent YAML documents delimited by ---\nstart and ... end markers, for example:\n\n    \n    \n    --- document: 1 ... --- document: 2 ...\n\n## string documents\n\nThe top-level value in a YAML document does not have to be an array or object:\nyou can use its wild zoo of string syntax too, so for example,\n\n    \n    \n    --- | here is a preformatted multiline string\n\n## frontmatter and markdown\n\nPutting these two features together, the right way to do YAML frontmatter for\nmarkdown files is clearly,\n\n    \n    \n    --- frontmatter: goes here ... --- | markdown goes here\n\nThe page processor can simply:\n\n  * feed the contents of the file to the YAML parser\n  * use the first document for metadata\n  * feed the second document to the markdown processor\n  * check that\u2019s the end of the file\n\nNo need for any ad-hoc hacks to separate the two parts of the file: the YAML\nacts as a lightweight wrapper for the markdown.\n\n## markdown inside YAML\n\nThe crucial thing that makes this work is that the markdown after the --- | delimiter does not need to be indented.\n\nMarkdown is very sensitive to indentation, so all the tooling (most\nimportantly my editor) gets righteously confused if markdown is placed in a\ncontainer that introduces extra indentation.\n\n## YAML in Perl\n\nThe static site generator for www.dns.cam.ac.uk uses --- | to mark the start of the markdown in its source files. This worked really nicely.\n\nThe web site was written in Perl, because most of the existing DNS\ninfrastructure was Perl and I didn\u2019t want to change programming languages.\nYAML was designed by Perl hackers, and the Perl YAML modules are where it all\nwent wrong started.\n\n## YAML in other languages\n\nThe static site generator for https://dotat.at is written in Rust, using\nserde-yaml.\n\nI soon discovered that, unlike the original YAML implementations, serde-yaml requires top-level strings following --- | to be indented. This bug seems to be common in YAML implementations for languages other than Perl.\n\nAs a result I had to add a bodge to the page processor:\n\n  * split the file using a regex\n  * feed the first part to the YAML parser\n  * feed the second part to the markdown processor\n\n## mainstream frontmatter\n\nTo make my bodge somewhat more tolerable, I made sure that it was compatible\nwith other similar bodges.\n\nFor instance, Pandoc supports YAML metadata, and Emacs markdown mode supports\nPandoc-style YAML metadata, so the road to hell is at least reasonably well\npaved.\n\n## grump\n\nIt works, but it doesn\u2019t make me happy. I suppose I deserve the consequences\nof choosing technology with known deficiencies. But it requires minimal\neffort, and is by and large good enough.\n\nComments welcome via \u2022 Dreamwidth \u2022 Fediverse \u2022\n\nTony Finch <dot@dotat.at>\n\n", "frontpage": false}
