{"aid": "40234440", "title": "The right words in the right place: Nix documentation is getting better", "url": "https://www.tweag.io/blog/2024-05-02-right-words-right-place/", "domain": "tweag.io", "votes": 1, "user": "ingve", "posted_at": "2024-05-02 09:59:24", "comments": 0, "source_title": "The right words in the right place", "source_text": "The right words in the right place - Tweag\n\nTechnical groups\n\nOpen source\n\nCareers\n\nResearch\n\nBlog\n\nContact\n\nConsulting services\n\nTechnical groups\n\nOpen source\n\nCareers\n\nResearch\n\nBlog\n\nContact\n\nConsulting services\n\n## The right words in the right place\n\n2 May 2024 \u2014 by Valentin Gagarin\n\ntl;dr You may not believe it, but Nix documentation is getting better. Nixpkgs\nand NixOS still need more time.\n\n# Table of contents\n\n  * Overview\n  * Motivation\n  * Statistics\n  * Retrospective\n  * Thoughts on future work\n  * Acknowledgements\n\n# Overview\n\nThis is a retrospective of my and many other people\u2019s work on documentation in\nthe Nix ecosystem between October 2022 and March 2024. It serves as a showcase\nof what we achieved together, and gives an impression of what\u2019s involved in\nimproving the user experience in a complex software system. A lot has happened\nduring that time, so this text is quite lengthy.\n\nThe details of this report will mainly be interesting to power users and\nactive contributors, or people working on software projects that are in a\nsimilar situation as Nix. For everyone else, I\u2019d summarise the effort so far\nas \u201csuccess in slow motion that indicates compounding effects\u201d. Much of it was\nmade possible through ongoing sponsorship from Antithesis, Tweag, and many\nindividuals, along with the incredible commitment of numerous volunteers.\n\n  * nix.dev is now the official documentation hub for the Nix ecosystem, designed to follow the Di\u00e1taxis documentation framework.\n  * There are a number of new in-depth tutorials and practical guides, with more in the making.\n  * The contribution process got smoother and is documented much better.\n  * The Nix manual substantially improved in terms of structure, clarity, and detail. It can now be accessed by release version on nix.dev.\n  * The Nixpkgs and NixOS manuals are now entirely written in Markdown, after two years of migrating away from XML.\n  * More people than ever have contributed improvements to documentation.\n  * The official NixOS Wiki has launched under wiki.nixos.org.\n\nIt may not seem like much, but these are big changes that posed enough of a\nchallenge to arrive at. It\u2019s still not easy or fast to learn all the things\nneeded to wield the full power of Nix. However, there are reports of people\ngrasping most of it within a couple of weeks on their own, which would be a\nsignificant improvement over what previously seemed to take months. And as\nmore contributors chime in, things are continuously getting better.\n\nThe next steps will be expanding reference documentation, developing more\nsuitable technical infrastructure, adding more tutorials, shaping an\ninformation architecture that connects the ecosystem... and simply figuring a\nlot of things out and writing them down.\n\n# Motivation\n\nWhat originally compelled me to start working on improving Nix documentation\nwas a vague feeling that there was something profound about Nix, something\nthat was merely obscured by confusing explanations. It wasn\u2019t just the fact\nthat the Nix ecosystem permanently solves many problems in computing I believe\nshould never have existed in the first place. It was the question: What\nunderlying principle makes it possible for it to do so? Being in the right\nplace at the right time often enough has allowed me to pursue a few hunches as\npart of my day job at Tweag for the past two years. And that time was needed.\n\nFirst, it took me a while to fully grasp how beautifully simple Nix is\nconceptually:\n\n  * The Nix store has a computation engine that operates on file system trees, disguised as a system for caching sandboxed execve calls.\n  * The Nix language\u2019s most distinguishing features are, not coincidentally, first-class facilities for dealing with file system paths and strings.\n  * Nixpkgs is the world\u2019s largest knowledge base for getting open source software to run.\n  * NixOS offers a uniform user interface for configuring that open source software.\n\nSecond, after staring at it long enough, it turns out that the underlying\npowerful idea is programming itself! More precisely, disciplined programming:\n\n  * The Nix store enforces referential integrity on the file system and constrains processes to act like pure functions, and it facilitates distributed, incremental computation. Read more on that in Taming Unix with functional programming.\n  * Nixpkgs is written in the purely functional Nix language, and keeps scaling due to a substantial amount of automation.\n  * The magic behind NixOS (and related tools, such as Home Manager) is the module system, which combines a rich type system with modular composition. Together with virtual machines, it enables systematic integration testing of a large part of the ecosystem\u2019s artifacts.\n\nFrom the outside, all of this seems terribly messy. It has grown organically\nover 20 years, and most of it is still only sparsely documented. Some parts\nare hard to understand; but that\u2019s often because programming can be\nfundamentally hard. And it doesn\u2019t help that things are just as messy on the\ninside. There are places where I\u2019d say \u201cthe code doesn\u2019t understand itself\u201d.\n\nThe same things that make Nix hard to learn and use also make it hard to\ndocument and teach: There are many ways of doing certain things with Nix, and\noften none of them is clearly superior. A large part of that problem must\neventually be solved at the implementation level, but that is subject to the\nLisp Curse. In a volunteer-driven open source software community, many\ntechnical issues reduce to social issues. The real challenge is coordination!\n\nThat\u2019s not exactly what I had originally subscribed to. But in retrospect,\nmaybe it\u2019s not surprising that, apart from finding the right words and the\nright place for them, the path to better documentation is paved with debates,\ndesign documents, fundraisers, UX workshops, governance meetings \u2014 that is,\nlistening and talking to lots of people.\n\nMaking the ecosystem more approachable for a mass audience may as well end up\nto be teaching \u201cdisciplined software development with Nix\u201d. But even that will\nrequire us, as a community-of-practice, to agree on (rather than just find)\nanswers to many open questions. Until then, this report is meant to be a\npanorama of what that process has entailed so far, from my perspective. I hope\nthat it will encourage you to try for yourself and participate, or otherwise\nhelp out.\n\n# Statistics\n\nBefore getting into a lengthy narrative, let\u2019s look at recorded documentation\nactivities of the past two years. tl;dr: numbers go up, this is good.\n\nThe following three charts show the number of documentation-related pull\nrequests merged in the three repositories the team has worked on: Nix,\nNixpkgs, and nix.dev. The charts have the same vertical scale and each bar\nstands for a quarter of a year since the beginning of 2022. Documentation work\non Nix is underrepresented prior to Q3, since we only then began\nsystematically labeling those pull requests. For nix.dev all pull requests are\ncounted. The most recent period accounts for at most half of the quarter,\nbecause this is when I compiled the data.\n\nNotably, Nixpkgs documentation activities have grown roughly with (and\npossibly even slower than) the overall number of users and contributors. This\nsample shows all pull requests automatically labeled as being related to\ndocumentation, which often comes with package updates and are often\ninconsequential in practice.\n\nIn contrast, the frequency of changes in nix.dev and the Nix manual greatly\nincreased since the documentation team was founded.\n\nThe next three charts show the number of GitHub issues related to\ndocumentation that were opened or closed in a given quarter, again for Nix,\nNixpkgs, and nix.dev. These charts also have the same scale. Here, one can\nobserve that Nixpkgs documentation activities, while more pronounced overall\ndue to the greater number of people involved, are significantly driven by the\nteam. There is also some up-and-down due to alternating between more\nexploratory and more implementation-oriented periods.\n\nThe final three charts show the number of new contributors and those who made\nrepeated contributions related to documentation, again per quarter and for\nNix, Nixpkgs, and nix.dev. These charts are not to scale with each other\nbecause including Nixpkgs would have made the others unreadable. This is the\nmost notable change, and in my opinion the most important success: We now have\naround 10 people working consistently on Nix reference documentation and\nintroductory materials \u2014 more than ever!\n\nAnd now for the full story, which is long because we have made and learned so\nmany things.\n\n# Retrospective\n\nIn 2022, I started out with the hypothesis that there needs to be a\ncomprehensive document that one could read cover to cover to understand the\nNix ecosystem. With Nix inventor Eelco Dolstra\u2019s blessing and Tweag\u2019s funding\nI started an effort to write what we called The Nix Book.\n\nIt turned out not to be that simple at all. The ecosystem is too large, the\nspectrum of use cases too wide, and the details too messed up to just sit down\nand blurt out everything one knows, and then wait for others to fix the typos.\nIn fact, there have been multiple such attempts by different people.\n\nA more systematic approach was needed. In addition to an initial literature\nsurvey, I also ran a small usability study and evaluated the 2022 community\npolls. During that time, the documentation team was founded, and became the\nforum for developing and refining goals for documentation in the Nix\necosystem, and working towards their achievement.\n\nAs of today, the documentation team meeting was held more than a hundred\ntimes. I\u2019m convinced: we\u2019re delivering. You can feel the change in pace and\natmosphere, and the numbers support it.\n\nOver the period covered by this report, we formulated multiple sets of goals.\nThey reflect our evolving understanding of the problem space and shifts in\npriorities.\n\nBecause all other attempts to make a comprehensive tractable review turned out\nto be impractical, I will first list the goals in the order they were\npublished, for reference. Then, based on the statements reworded and regrouped\nto avoid overlap, I will present results for each category separately.\n\n## Documentation goals for the Nix ecosystem\n\nI chose the following categories for evaluating documentation activities,\nbecause they emerge from the concrete goals recorded in the past. I ordered\nthem taking into account their relative importance and the sequence of events;\nbut mostly all of this is merely a narrative device to condense a lot of\ninformation.\n\n### Improve discoverability\n\nMany of the most obvious issues with Nix-related documentation revolve around\nobstacles to finding relevant information. We made notable progress on\nimproving discoverability, by more clearly separating the roles of different\ninformation sources, reworking navigation paths, and adding cross-references.\nBut we also ran into deeper structural and technical problems, which we\nstarted to address from various angles.\n\n### Increase coverage of reference documentation\n\nThe Nix ecosystem is a large piece of software. The goal is to eventually\ncapture all of its interfaces in reference documentation.\n\nWe mainly added much more information to the Nix reference manual, but have\nnot yet started fully documenting the Nix language syntax. There were many\nincremental improvements to Nixpkgs reference manual, and work is ongoing to\nfurther increase coverage. The people involved with the documentation team did\nnot work on the NixOS manual, and the official NixOS Wiki has only recently\nlaunched.\n\n### Ensure correctness of reference documentation\n\nMerely having interface documentation is not enough, the information also has\nto be correct and up to date.\n\nContributors corrected countless errors and omissions in all documentation\nresources. Work is ongoing to render all of the Nixpkgs library documentation\nfrom the source code. There are technical obstacles to increase automatic\npresentation of interface documentation in the Nix reference manual.\n\nThe biggest impact on correctness would be made by automatically testing\nexamples as part of continuous integration, but there was no progress on that\napart from exchanging ideas. We\u2019ve been updating examples while working on\nother things, to make them more self-contained so they could be tested\neventually.\n\n### Improve the contributor experience\n\nI claim that one of the most important use cases of any community-driven open\nsource project is contributing to that project. Much of our efforts revolved\naround easing contributions, in particular to documentation. We added and\nimproved contributor guides for each component of the Nix ecosystem, and added\nautomation to further reduce friction. Substantial parts of official\ndocumentation are now actively maintained, and the team holds regular meetings\nto review and merge pull requests. As a consequence, in the second half of\n2023 we got much more work done than ever, and more people than ever joined\nand stayed to help.\n\n### Teach important skills\n\nPart of the documentation team\u2019s mission is to provide more and better\nlearning materials. Thanks to many volunteers\u2019 patience and endurance, the\ngroup produced roughly one tutorial every two months between end of 2022 and\nend of 2023. This reportedly improved the learning experience \u2014 especially\nwhere we took the time to build a solid foundation in reference documentation.\nThat way, we have addressed a good chunk of fundamental use cases.\n\nBut there is still much ground to cover, even for what we consider essential\nskills and workflows in the Nix ecosystem. Some articles could be a lot\nshorter. Nonetheless, there are now more and much better tutorials than ever,\nall of which are actively maintained to incorporate feedback and keep up with\nbest practices.\n\n### Explain concepts\n\nThe Nix ecosystem approaches many problems in a unique way, which requires\nintroducing new terms and explaining why certain things are the way they are.\nWhile that was my original motivation to start working on documentation,\nexplanations have shown to be less of an important tool for serving immediate\nneeds. As a result, only a few things were worked on.\n\n### Reduce onboarding time\n\nThe primary mission of the documentation team is to reduce onboarding time for\nbeginners. That plays into addressing the other challenges I have talked\nabout, such as attracting more contributors. We figured that a sequence of\nlessons focused on widely applicable skills would be an effective resource for\nusers to become self-sufficient in the ecosystem.\n\nTo that end, there was a coordinated project to design what we called the\nLearning Journey, which was supported by many people through a fundraiser on\nOpen Collective. Despite some setbacks, we achieved the main goals and will\ncontinue with implementation by writing more tutorials for the curriculum.\n\n# Summary\n\nAll in all, we can claim success: The number of new and regular contributors\nto Nix documentation and nix.dev has increased significantly every quarter.\nThe average turnaround time for documentation contributions seems to have\ndecreased. We\u2019ve come quite far with smoothing out the first couple of days\nand weeks of using vanilla Nix. Based on feedback and heuristics, such as\nquestions asked on Discourse, I conclude that we have substantially reduced\nthe time required for onboarding with Nix. I\u2019m convinced that discoverability\nof learning materials and reference documentation has also improved a lot.\nSome of these results have yet to be validated with more evidence.\n\n# Thoughts on future work\n\nI think that Nix documentation is on the right trajectory to eventually shake\noff its negative reputation and thus help unleash the power of Nix onto the\nworld. I suggest to continue following the goals discussed in this report, and\nin order to reach them more quickly:\n\n  * Finish things that have been started.\n  * Put more emphasis on technical infrastructure and automation.\n  * Focus on fewer topics, prioritise reference documentation.\n  * Cultivate code ownership and empower more people to become maintainers.\n  * Write more tutorials outlined in the Learning Journey.\n  * Help establish a consistent information architecture across the Nix ecosystem.\n  * Secure more funding to support volunteer efforts.\n  * Systematically measure effectiveness of documentation efforts.\n\n# Acknowledgements\n\nThis whole endeavor has only been possible to sustain thanks to ongoing\nfinancial support. I\u2019d like to thank the leadership of Antithesis, Tweag,\nFlox, and Determinate Systems for funding me, Silvan, Zach, and Luc to lead\nand assist the documentation team\u2019s efforts over the past 18 months. Many\nthanks also to all our supporters on Open Collective for your confidence in\nour mission and your crucial role in speeding up progress.\n\nAn enormous amount of work has also been done by numerous volunteers, who did\nnot just contribute to multiple articles and many small improvements, but were\nalso involved in arriving at technical decisions and implementing them. Some\nof them stay around to incorporate corrections to their texts and code. Thank\nyou so much for your indispensable contributions to our collective endeavor:\n\n  * Alejandro S\u00e1nchez Medina (@alejandrosame)\n  * Lorenzo Manacorda (@asymmetric)\n  * Alexander Bantyev (@balsoft)\n  * Bob van der Linden (@bobvanderlinden)\n  * Bernardo Vecchia Stein (@danielsidhion)\n  * Domen Kozar (@domenkozar)\n  * John Ericson (@Ericson2314)\n  * Henrik Karlsson (@henrik-ch)\n  * Johannes Kirschbauer (@hsjobeki)\n  * @lassulus\n  * J\u00f6rg Thalheim (@Mic92)\n  * Shahar \u201cDawn\u201d Or (@mightyiam)\n  * Na\u00efm Favier (@ncfavier)\n  * Norbert Melzer (@NobbZ)\n  * Olaf Hochherz (@olafklingt)\n  * @pennae\n  * Alexander Groleau (@proofconstruction)\n  * Ryan Lahfa (@raitobezarius)\n  * Sol\u00e8ne Rapenne (@rapenne-s)\n  * Robert Hensing (@roberth)\n  * Ron Efroni (@ronef)\n  * Jeff Huffman (@tejing1)\n  * Th\u00e9ophane Hufschmitt (@thufschmitt)\n  * Thomas Bereknyei (@tomberek)\n  * Daniel Ramirez (@wamirez)\n  * Yorick van Pelt (@YorickvP)\n  * Yuki Langley (@yukiisbored)\n  * Zach Mitchell (@zmitchell)\n\nAbout the authors\n\nValentin GagarinAfter an artistic career in education, film making and\ngraphics design, Valentin grew into informatics, where he quickly developed a\nmathematical and engineering mindset as well as a passion for functional\nprogramming, reproducibility, and effective communication.\n\nIf you enjoyed this article, you might be interested in joining the Tweag\nteam.\n\nThis article is licensed under a Creative Commons Attribution 4.0\nInternational license.\n\n\u2190 Re-implementing the Nix protocol in Rust\n\nCompany\n\nAboutOpen SourceCareersContact Us\n\nWhat we do\n\nStrategyProduct DevelopmentPlatform ModernizationDigital OperationsWork\n\nInsights\n\nModus BlogOspo BlogResearchInnovation podcast\n\nConnect with us\n\n\u00a9 2024 Modus Create, LLC\n\nPrivacy PolicySitemap\n\n", "frontpage": false}
