{"aid": "40141941", "title": "Unpacking the Truth of Peer Reviews in the Software Industry", "url": "https://leadshorizons.com/p/unpacking-the-truth-of-peer-reviews", "domain": "leadshorizons.com", "votes": 1, "user": "alvarolorente", "posted_at": "2024-04-24 08:27:20", "comments": 0, "source_title": "Unpacking the Truth of Peer Reviews in the Software Industry", "source_text": "Unpacking the Truth of Peer Reviews in the Software Industry\n\nShare this post\n\n#### Unpacking the Truth of Peer Reviews in the Software Industry\n\nleadshorizons.com\n\n#### Discover more from Leads Horizons\n\nLearnings and thoughts about engineering strategy, scaling teams/companies &\nother software related subjects\n\nContinue reading\n\nSign in\n\n# Unpacking the Truth of Peer Reviews in the Software Industry\n\nAlvaro Lorente\n\nApr 24, 2024\n\n2\n\nShare this post\n\n#### Unpacking the Truth of Peer Reviews in the Software Industry\n\nleadshorizons.com\n\nShare\n\nI currently feel like the odd one, out. It appears that many people are\nassociating peer review in software with code reviews via pull requests. I\ndon\u2019t, on what side are you?\n\nEven before I transitioned into leadership roles, where coding took on a\nsecondary function, I did not engage in pull requests. In fact, I haven't\nsubmitted a pull request in a professional context since 2017.\n\nLeads Horizons is a reader-supported publication. To receive new posts and\nsupport my work, consider becoming a free or paid subscriber.\n\nLet's delve into the nuances of the peer review process in this article.\n\n##\n\nUnderstanding Peer Review\n\nPeer reviews, also commonly referred to as peer assessments, involve a\nrigorous and structured process whereby a professional's work or research is\nevaluated and critiqued by one or more individuals who possess similar\ncompetencies, educational background, and expertise. This concept and\nmethodology of peer review originated and took root in the academic sphere,\nwhere it is routinely employed as a critical tool to appraise and judge the\nvalue of scholarly outputs and research findings.\n\nThe primary function of this system is to serve as a form of quality control,\nsignificantly bolstering the credibility, reliability, and overall accuracy of\nthe work that is being reviewed. This is achieved by providing an additional\nlevel of scrutiny, thereby eliminating any potential errors or oversight that\nmight have been missed by the original author.\n\nFundamentally, peer review is a cooperative and collaborative process. It is\nmeticulously designed to enhance the quality of work produced, encourage\ncontinuous learning and improvement among professionals, and support the\nestablishment and maintenance of objectivity. It ensures that the work\nproduced adheres to the highest standards of excellence, providing an\nessential layer of accountability in professional settings.\n\n##\n\nSoftware Development Peer Reviews\n\nWithin software development, peer reviews often manifest as code reviews. This\ninvolves a developer scrutinizing a software project's source code to identify\nbugs, errors, or potential enhancements. It's about more than just pinpointing\nissues\u2014it's also about understanding varied methodologies and learning from\ncolleagues.\n\n###\n\nTypes of Code Review\n\nI want to emphasize this point, as it appears that the contemporary software\ndevelopment scene may not fully grasp it.\n\n> Code reviews aren't always synonymous with Pull Requests \ud83e\udd2f\n\nLet's delve into the alternatives:\n\nKent Beck has offered a two-dimensional perspective on the types of peer\nreviews in his article. The two dimensions are:\n\n  * Synchronicity: Refers to the timing of the review process. It can occur in real-time as the code is being written (synchronous) or after the author has completed the code (asynchronous).\n\n  * Continuity: Considers the workflow in relation to the review process. It can either allow the author to continue working (non-Blocking), or require the author to pause until the review is completed (Blocking).\n\nLet's explore what does each of this peer review means:\n\n  * Formal Review: A formal review is a thorough and systematic evaluation of a project, product, or performance. It is often conducted by a group of qualified individuals and follows a specific procedure or set of criteria.\n\n  * Pull Request: A Pull Request is a feature in version control systems, like Git, where a developer proposes changes to a codebase. The request is a way to communicate the changes to the team and ask for review and integration into the main code branch. This technique was created for 0 - trust environments where people don\u2019t know each other.\n\n  * Over The Shoulder Review: This is an informal method of code review where one developer looks over the author's shoulder as the latter walks through the code.\n\n  * Code Comments: In this approach, developers annotate the source code with comments. These comments offer insights, point out potential issues, and suggest improvements.\n\n  * Pair Programming: This is a method where two programmers work simultaneously at one workstation. The \u201cdriver\u201d writes the code, while the \u201cobserver\u201d reviews each line of code as it's being written.\n\n###\n\nThe Relation Between Feedback Cycle & Waste\n\nInherent to the process of peer reviewing is its role as a \u201cquality\u201d gate. As\nsuch, many these processes tend to fall into the blocking quadrant of\noperational procedures. This characteristic of peer reviews can create\nsituations where individuals become idle, waiting for the process to be\nunblocked. This idle time is not only detrimental to productivity, but can\nalso affect morale and engagement among team members if they span over time.\nTherefore, it is important to streamline the feedback cycle to minimize these\nidle periods and maintain efficient workflow dynamics.\n\nIn addition, the involvement of a second individual to review the work is also\nnecessary for any type of peer review process. Implying that the longer the\nfeedback cycle between the generation of code and its review, leads to an\nincrease in waste and rework. This is due to the fact that the longer the\ndelay in feedback, the greater the potential for the initial work to diverge\nfrom the optimal path, necessitating more significant changes and revisions\nlater on.\n\nTherefore, it is crucial to establish a swift and efficient feedback cycle in\npeer review processes. By doing so, we not only reduce the likelihood of waste\nand rework, but also enhance the overall productivity and effectiveness of our\nteams.\n\nIf we take this into account, we want to be as much as possible in the sync &\nnon-blocking quadrant, as the synchronicity causes a small feedback cycle and\nthe non-blocking minimizes the IDLEs.\n\n###\n\nDebunking Pair Programming Myths\n\n> Why're then we not all doing pair programming?\n\nPair programming is often misunderstood and associated with numerous\nfallacies, specially in the realm of efficiency of project resources and\nvelocity. With this in mind, let's review the studies:\n\n  * The Costs and Benefits of Pair Programming:\n\n> The significant benefits of pair programming are that: \u2022 many mistakes get\n> caught as they are being typed in rather than in QA test or in the field\n> (continuous code reviews); \u2022 the end defect content is statistically lower\n> (continuous code reviews); \u2022 the designs are better and code length shorter\n> (ongoing brainstorming and pair relaying); \u2022 the team solves problems faster\n> (pair relaying); \u2022 the people learn significantly more, about the system and\n> about software development (line- of-sight learning); \u2022 the project ends up\n> with multiple people understanding each piece of the system; \u2022 the people\n> learn to work together and talk more often together, giving better\n> information flow and team dynamics; \u2022 people enjoy their work more.\n>\n> The development cost for these benefits is not the 100% that might be\n> expected, but is approximately 15%. This is repaid in shorter and less\n> expensive testing, quality assurance, and field support.\n\n  * The Case for Collaborative Programming: Teams completed their task 40% faster than the individuals (and this result was statistically significant).\n\n> A field experiment was conducted using experienced programmers who worked on\n> a challenging problem important to their organization, in their own\n> environments, and with their own equipment. Findings revealed that all the\n> teams outperformed the individual programmers, enjoyed the problem-solving\n> process more, and had greater confidence in their solutions.\n\n  * Management Impact on Software Cost and Schedule: Regarding the performance of pairs vs individuals:\n\n> Final project results were outstanding. Total productivity was 175 lines per\n> person-month (lppm) compared to a documented average individual productivity\n> of only 77 llpm. [...] The error rate [...] was three orders of magnitude\n> lower than the organization\u2019s norm.\n\n  * The Collaborative Software Process: One key finding was that pairs took 15% more developer hours to produce their solutions, but those solutions had 15% fewer bugs.\n\n> An experiment was run in 1999 with approximately 40 senior Computer Science\n> students at the University of Utah. Two-thirds of the students worked in\n> two-person collaborative teams [...]. The other students worked\n> independently [...] to develop the same assignments. The productivity, cycle\n> time, and quality of the two groups have been compared. Empirical results\n> point in favor of the collaborative teams [...].\n\nHaving reviewed the data, it's important to recognize that our industry leans\nagainst this technique not due to the data, but for other subconscious\nunderlying reasons:\n\n  * The data might seem counterintuitive.\n\n  * The available tools are more attuned to a different technique (pull requests).\n\n  * Given our inherent social tendencies, there's a psychological aspect to consider that we believe spending too much time with a person is not enjoyable.\n\n##\n\nPairing in Other Engineering Roles\n\nPairing can be applied effectively in these roles in the following ways:\n\n###\n\nDesign\n\nIn design, pairing can be used for brainstorming, critiquing, and refining\ndesign concepts. This includes sketching, prototyping, user testing, and\niterating on designs. Pairing helps to bring multiple perspectives to a design\nproblem, leading to more innovative and inclusive solutions.\n\n###\n\nProduct\n\nIn product roles, pairing can be beneficial during product planning, strategy\ndiscussions, and execution. Two product managers can collaborate to define the\nproduct roadmap, prioritize features, and make decisions based on customer\nfeedback and data analysis. Pairing can lead to more robust product strategies\nand better decision-making.\n\n###\n\nLeadership\n\nIn leadership roles, pairing can be used for decision-making, strategic\nplanning, and problem-solving. Two leaders can work together to guide their\nteam or company, make critical business decisions, and navigate complex\nchallenges. Pairing in leadership can foster a culture of collaboration,\nimprove communication, and lead to better outcomes for the team and\norganization.\n\n##\n\nClosing thoughts\n\nPeer review, in software development, is a critical quality control process.\nIt involves evaluation of a professional's work by others with similar\nexpertise, enhancing the work's credibility and accuracy.\n\nHowever, peer review isn't synonymous with pull requests and can take various\nforms such as formal reviews, over the shoulder reviews, code comments, and\npair programming.\n\nPair programming, often misunderstood, is an efficient method that reduces\nerrors, improves design, and enhances team dynamics. It can be applied to\nother roles like design, product, and leadership for brainstorming, refining\nconcepts, strategic planning, and decision-making.\n\nThank you for reading Leads Horizons. This post is public so feel free to\nshare it.\n\nShare\n\nShare\n\n##\n\n\ud83d\udcda Picks of the Week\n\n  * AWS for Data Engineers: Conquer the Cloud in 90 Days by\n\nYordan Ivanov\n\n  * My 25-Year Engineering Career Retrospective by\n\nNicola Ballotta\n\n  * 6 tools that made my life much easier as a Software Engineer by\n\nPetar Ivanov\n\n  * Top 3 Lessons Learned from a Huge Leadership Change by\n\nMicha\u0142 Poczwardowski\n\n##\n\n\ud83d\uddde\ufe0f Other articles people like\n\n#### Beyond Clean Code & Architecture\n\nAlvaro Lorente\n\n\u00b7\n\nMar 20\n\nRead full story\n\n#### Beyond Coding\n\nAlvaro Lorente\n\n\u00b7\n\nMar 6\n\nRead full story\n\n#### Mastering Second Level Relationships\n\nAlvaro Lorente\n\n\u00b7\n\nApr 17\n\nRead full story\n\n##\n\n\u270c\ufe0f That\u2019s all folks\n\nI love hearing from readers, and I\u2019m looking for feedback. How am I doing with\nLeads Horizons? Is there anything you\u2019d like to see more or less? Which\naspects of the newsletter do you enjoy the most?\n\nUse the links below, or even better, hit reply and say hello. I\u2019d love to hear\nfrom you!\n\n  * \ud83d\ude0d Awesome\n\n  * \ud83d\ude10 Okay\n\n  * \ud83e\udd2e Bad\n\nPlease don't hesitate to connect with me on LinkedIn and send a message. I\nalways respond to every one!\n\n### Subscribe to Leads Horizons\n\nBy Alvaro Lorente \u00b7 Launched a year ago\n\nLearnings and thoughts about engineering strategy, scaling teams/companies &\nother software related subjects\n\n3 Likes\n\n\u00b7\n\n2 Restacks\n\n2\n\nShare this post\n\n#### Unpacking the Truth of Peer Reviews in the Software Industry\n\nleadshorizons.com\n\nShare\n\nComments\n\nThe Strategic Vs. Tactical Mindset\n\nExplore the balance between strategic and tactical mindsets in the field of\nengineering. This article discusses the importance of both perspectives in...\n\nApr 3 \u2022\n\nAlvaro Lorente\n\n24\n\nShare this post\n\n#### The Strategic Vs. Tactical Mindset\n\nleadshorizons.com\n\nMastering Second Level Relationships\n\nBoost your workplace productivity and job satisfaction by understanding and\neffectively managing second level relationships. Learn about their impact...\n\nApr 17 \u2022\n\nAlvaro Lorente\n\n12\n\nShare this post\n\n#### Mastering Second Level Relationships\n\nleadshorizons.com\n\n5\n\nBeyond Coding\n\nThe Cost of Software Development\n\nMar 6 \u2022\n\nAlvaro Lorente\n\n12\n\nShare this post\n\n#### Beyond Coding\n\nleadshorizons.com\n\nReady for more?\n\n\u00a9 2024 Alvaro Lorente\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
