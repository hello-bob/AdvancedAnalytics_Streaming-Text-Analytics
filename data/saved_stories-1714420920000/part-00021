{"aid": "40196002", "title": "Linux ecosystem contributions from SteamOS (2023)", "url": "https://lwn.net/Articles/946188/", "domain": "lwn.net", "votes": 1, "user": "bibanez", "posted_at": "2024-04-29 08:39:32", "comments": 0, "source_title": "Linux ecosystem contributions from SteamOS [LWN.net]", "source_text": "Linux ecosystem contributions from SteamOS [LWN.net]\n\nLWN .net News from the source\n\n  * Content\n\n    * Weekly Edition\n    * Archives\n    * Search\n    * Kernel\n    * Security\n    * Events calendar\n    * Unread comments\n    * LWN FAQ\n    * Write for us\n  * Edition\n\n    * Return to the Front page\n\n| |\n\nSubscribe / Log in / New account\n\n# Linux ecosystem contributions from SteamOS\n\nBenefits for LWN subscribersThe primary benefit from subscribing to LWN is\nhelping to keep us publishing, but, beyond that, subscribers get immediate\naccess to all site content and access to a number of extra site features.\nPlease sign up today!  \n---  \n  \nBy Jake Edge October 3, 2023\n\nOSSEU\n\nThe SteamOS Linux distribution is focused on gaming, naturally, but the effort\nto build it has resulted in contributions to multiple areas in the Linux\necosystem. Alberto Garcia has been working on SteamOS and came to Bilbao,\nSpain to describe some of those contributions at Open Source Summit Europe\n2023. There are some obvious areas where a gaming-focused OS might contribute\nupstream, such as graphics, but the talk showed contributions in several other\nareas as well.\n\nGarc\u00eda introduced himself as an employee of Igalia, which happened to turn\n22-years old on the day of his talk. He is also a longtime FOSS and Debian\ndeveloper; he has previously worked on projects like QEMU and Maemo. Lately,\nhe has been working on SteamOS and getting Linux working on the Steam Deck\nconsumer hardware. One of the things he likes about free-software development\nis the way that new projects end up contributing to older projects that are\nnot necessarily directly connected; SteamOS fits that model well.\n\n#### Steam Deck\n\nThe Steam Deck is a handheld gaming system that was released by Valve, the\ncompany behind the Steam game-distribution service, in 2022. The current\nversion of the operating system for the device is SteamOS 3; there were two\nprevious versions, but those do not work on the Steam Deck and have been\ndiscontinued. He finds the Steam Deck interesting because it is an example of\n\"a successful consumer device with standard Linux components\".\n\nHis talk would cover a bunch of different contributions from SteamOS, many of\nthem from his colleagues at Igalia, but the talk was not meant to be an\nexhaustive list. In addition, there are contributions from other companies and\ndevelopers, as well as from regular users. Garc\u00eda said that he tried to give\ncredit to the contributors in the talk and in his slides, but he apologized in\nadvance to anyone that he had missed.\n\nHe showed a picture of the SteamOS user interface, but said that, for the\npurposes of the talk, it was an uninteresting full-screen interface that\nallows buying and playing games. Under the hood, though, SteamOS is a Linux\ndistribution that is based on Arch Linux. It uses standard Linux components,\nwith a few customizations, on a filesystem that is based on the Filesystem\nHierarchy Standard (FHS). It has a user space with GNU tools and utilities,\nsystemd as its init, and D-Bus for inter-process communication. Unlike many\nother devices, though, access to the underlying OS is completely unlocked by\ndefault; \"the user has complete access to the OS, there's nothing hidden\".\nUsers can run a shell as root on the Steam Deck.\n\nThere are two modes in SteamOS: gaming and desktop. Most users never leave\ngaming mode, which gives them access to their Steam games, allows configuring\nthings like the network, and more. But the desktop mode is available; he\nshowed a screen shot and said \"if this looks like a regular KDE Plasma\nsession, it's because that's what it is exactly\". In desktop mode, users can\ninstall anything they want, including web browsers, tools, and non-Steam\ngames; in fact, the Steam client allows running non-Steam games that are\ninstalled on the Deck. Meanwhile, adding a keyboard, mouse, and display allows\nusing the Steam Deck in desktop mode as a regular desktop computer.\n\nUnlike, say, Android's developer mode, desktop mode is not hidden away at all.\nThe regular power menu has a \"Switch to Desktop\" option alongside things like\n\"Shutdown\" and \"Restart\". That mode can be accessed by anyone.\n\n#### Proton and Wine\n\nThe use case for the device is to play games on Linux, but there is an\ninherent problem with that: most Steam games only run on Windows. Those games\nare never going to get Linux versions, so the Proton compatibility layer is\nused to allow the games to run on SteamOS. Proton was developed by Valve in\n2018 using a collection of different open-source tools. The main components of\nit are Wine, translators to convert Direct3D to Vulkan, and GStreamer. It is\nan actively developed project that is available in the Proton GitHub\nrepository.\n\nWine is a project to run Windows applications on Linux, but it is not an\nemulator; instead the Windows APIs are implemented using POSIX and/or Linux\nAPIs. It is developed by the community, but the main driver behind the project\nis a company called CodeWeavers, which works in a partnership with Valve on\nWine for Proton. All of the components of Proton are customized for SteamOS\nand the Steam Deck, but all of those changes are contributed back to the\nupstream projects.\n\nWhen implementing Windows APIs on Linux, there are two possibilities; the\nfirst is that the API is similar to that of Linux, which means there is no\nproblem. Those APIs can be directly provided in Wine; \"there's maybe a little\noverhead, but it works fine\". If there is no equivalent Linux API, Wine needs\nto implement it, which can result in high overhead; there are some APIs that\ncannot be implemented in user space as well. Some developers have been looking\nat which APIs are problematic to implement, but are used frequently in games,\nin order to add features to Linux to help bridge the gap.\n\n#### Kernel features\n\nFor example, Windows has a synchronization function that is used by a lot of\ngames, WaitForMultipleObjects(). There is no direct equivalent in Linux, so it\nhad been implemented using futex(), but futex() is restricted to a single\nobject. The solution is a new futex() API, which was proposed because the\nexisting API was hard to use and extend. That proposal led to the addition of\nthe futex_waitv() system call in 5.16. The full new API is still a work in\nprogress, but futex_waitv(), which was developed by Andr\u00e9 Almeida and others,\nis sufficient to emulate the Windows API call.\n\nA well-known feature of Windows filesystems is that they are case-insensitive\nso applications expect that \"data.bin\" and \"DATA.BIN\" refer to the same\nfile\u2014which is not generally true for Linux filesystems. The \"slow solution\" to\nthis problem was to implement the case-insensitivity in Wine; when a file\nlookup failed, Wine would have to look for case-variant versions of the name.\nThe faster solution was to make ext4 case-insensitive, which was developed by\nGabriel Krisman Bertazi \"from our friends at Collabora\". Daniel Rosenberg\nlater added the feature to F2FS for Android, Garc\u00eda said.\n\nHe quickly went through a few other kernel features, some of which are still\nin progress, that came from SteamOS, including the user-space adaptive\nspinlock work by Almeida and Mathieu Desnoyers. Spinlocks are difficult to\nimplement reliably in user space, but changes to restartable sequences have\nprovided a path to do so. Another change was to support mounting two Btrfs\nfilesystems with the same fsid; this was done so that systems with A/B\npartitioning schemes can mount both filesystems at once when that is needed.\nGuilherme Piccoli did the work on the Btrfs feature, as well as working on the\nhandling of split locks so that the kernel slowdown applied to those\noperations can be disabled. Games frequently use split locks, so slowing them\ndown in gaming-centric workloads only leads to unhappy users.\n\n#### Graphics\n\nThere are many more kernel improvements, Garc\u00eda said, but then turned to\ncontributions in another critical part of a gaming device: graphics. The RADV\nVulkan driver for AMD GPUs was developed by Valve and others; it is an open-\nsource driver that is part of the Mesa project. It is an alternative to the\nofficial AMD drivers; RADV is what most Linux distributions are shipping, thus\nwhat most people are using, he said.\n\nA related contribution is the ACO shader compiler for AMD graphics, which was\ndeveloped by Valve and released in 2019. It reduces stuttering and increases\nthe frames-per-second (FPS) rate. There are also some Vulkan extensions for\nhardware-accelerated video, which needs encoding and decoding support in the\ngraphics drivers and multimedia frameworks, such as for GStreamer; the work on\nthat is still in progress.\n\nThe Linux Direct Rendering Manager (DRM) subsystem exposes a small set of\ncolor properties; proposals to extend the color API have been made, but none\nhas been adopted. AMD GPUs have additional color capabilities, so a driver-\nspecific color API for AMD devices has been developed; among other things, it\nwill allow displaying high-dynamic-range (HDR) content. This capability, which\nwas developed by Melissa Wen, Joshua Ashton, and Harry Wentland, will be part\nof the upcoming SteamOS 3.5 release.\n\nGPUs are complex beasts; they can crash, but there is no standard way to\nreport a problem of that sort to user space. There is work in progress to\naddress that lack by standardizing GPU-hang reporting and handling, as well as\ncreating a standard for what compositors do after a GPU reset. Almeida\npresented on his work in that area at Open Source Summit North America in May.\n\nValve has developed an open-source micro-compositor, gamescope, in order to\nsolve problems with games trying to use resolutions that are different than\nthe native resolution of the display. \"Instead of changing resolutions every\ntime for every game, gamescope tricks the game into thinking it is running in\nthe resolution that the game requested.\" It then converts the output to\nconform to the native resolution; it can also do frame-rate limiting for\nreducing power consumption. Gamescope runs the Steam Deck game user interface\nand it is available in most Linux distributions.\n\n#### OS and Flatpak\n\nPart of the work on SteamOS is the same as with any distribution: ensuring\nthat all of the components work well together, handling updates seamlessly,\nand so on. But there are parts of what SteamOS is doing that are of interest\nto the rest of the community. SteamOS 3, which is what Garc\u00eda has personally\nbeen working on, is a customization layer on top of Arch Linux; almost all of\nthe packages come directly from Arch, without being changed or even rebuilt.\nThe Arch Linux philosophy is for packages to be as close to upstream as\npossible; downstream patches are not applied \"unless it is really necessary\".\nSteamOS has adopted the same philosophy; when there is a problem with a\npackage, it is fixed upstream whenever possible.\n\nUnlike Arch, SteamOS has an immutable, read-only root filesystem; it has an\nA/B partitioning scheme, so there are two versions of the root filesystem\navailable, one of which is the active root. When an update is done, the\ninactive partition is updated; if all goes well, the update partition becomes\nthe new active root. Users are not expected to do anything that changes the\nroot filesystem, though they have the ability to do so since they have the\nprivileges to remount the root filesystem as read-write; any changes will be\nlost at the next OS update, however. \"So what is the way to install new\nsoftware?\"\n\nSteam games are obtained from the store, \"so Steam takes care of everything\".\nFor desktop applications, the suggested installation mechanism is to use\nFlatpak. It is also used by other distributions with read-only root\nfilesystems, such as Fedora Silverblue and Endless OS.\n\nFlatpak is a framework for sandboxed desktop applications that are isolated\nfrom the host OS; the isolation level can be adjusted depending on the needs\nof the application. Flatpak is also a distribution-independent packaging\nsystem; it allows the application developers to create a binary package that\ncan be installed on any distribution that supports the framework. Flatpak\napplications can be distributed from anywhere, but the Flathub repository is\n\"the Linux app store\"; there are more than 2000 applications available there\nand it has become the primary distribution site for some applications (e.g.\nBottles). SteamOS developers are working as part of the Flatpak community to\nfix bugs and add features.\n\nHe noted that using Flatpak as the primary distribution mechanism for desktop\nmode in SteamOS was something of a Trojan horse, as shown in a Mastodon post\n(and in the image on the left). When application developers add support for\nthe Steam Deck, they are indirectly supporting the Linux desktop. Any effort\nthat is put into improving the SteamOS version is immediately usable on the\nLinux desktop as well.\n\nPortals are the mechanism used by Flatpak applications to interact with the\nhost, though Portals are not Flatpak-specific. They provide a D-Bus interface\nto access things outside of the Flatpak sandbox for opening files and URLs,\ntaking screen shots, changing settings, and more.\n\nThe Portal API is implemented by a desktop-specific backend, but not all of\nthe backends work on all of the desktop environments, which can cause a\nvariety of different problems. The way to choose the backend was fairly\nlimited and that affected the Steam Deck because it has two separate desktop\nsessions active, one for each mode. Some work by Emmanuele Bassi gives a\nbetter way to choose Portals and backends; it was recently released in xdg-\ndesktop-portal 1.18.0 and will start appearing in major distributions soon.\n\nThere is also work on bug fixes and new features for KDE that have been\ncontributed by the SteamOS developers. That includes handling updates with\nmany packages, improving detection of new icons, and better udev-event\nhandling. Beyond that, there are lots of other contributions to things like\nNetworkManager, Pipewire, ALSA, and more.\n\nGarc\u00eda wrapped up by reiterating that SteamOS is making lots of contributions\nto make desktop Linux better and it is also providing an incentive for\ndesktop-application developers to target Linux with their software. In the\nQ&A, he was asked about installing other types of packages; Flatpak is only\nfor desktop applications, not for command-line tools. He said that there is no\nofficial support for installing those tools, yet, but that people are\nexperimenting with various ways to do so.\n\n[I would like to thank LWN's travel sponsor, the Linux Foundation, for travel\nassistance to Bilbao for OSSEU.]\n\nIndex entries for this article  \n---  \nConference| Open Source Summit Europe/2023  \n  \n(Log in to post comments)\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 4, 2023 2:52 UTC (Wed) by Cyberax (\u272d supporter \u272d, #52523) [Link]\n\nSomebody joked that Win32 is the only stable API/ABI for Linux, because of\nWine. And this is true, I have some fairly tricky Win32 code from 2003 that\nworks perfectly on the latest Linux.\n\nIt's kinda both awesome and sad.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 4, 2023 3:52 UTC (Wed) by jengelh (subscriber, #33263) [Link]\n\nWell, the Linux syscalls are the same. Unreal Tournament 99/GOTY update 436\n(built in 2000 or so) still runs today.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 4, 2023 13:20 UTC (Wed) by ballombe (subscriber, #9523) [Link]\n\nIt also relies on the X11 protocol, right ?\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 4, 2023 15:11 UTC (Wed) by jengelh (subscriber, #33263) [Link]\n\nYeah. But X11 and GL are just as old as Win32 (\"decades\") and are practically\nunchanged.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 4, 2023 16:56 UTC (Wed) by ballombe (subscriber, #9523) [Link]\n\nIndeed, the value of backward compatibility is underestimated nowadays.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 4, 2023 14:43 UTC (Wed) by willy (subscriber, #9762) [Link]\n\nHmm? The Linux ELF transition was 1995. I appreciate a.out support was\nremoved, but what doesn't work with an ELF binary from 1995?\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 4, 2023 17:20 UTC (Wed) by dullfire (subscriber, #111432) [Link]\n\nMaybe he means some common shared libs have broken ABI compatibility? IIRC\nglibc should be compatible back to around 2000-ish I think (there was the\nwhole libc kerfuffle that gave us libc.so.6 on x86). However I can't say I've\ntested that lately.\n\nbut yeah, given a supporting userspace library, basically any normal program\nshould work.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 5, 2023 1:43 UTC (Thu) by Cyberax (\u272d supporter \u272d, #52523) [Link]\n\n> IIRC glibc should be compatible back to around 2000-ish\n\nThe broke compat recently: https://blog.hiler.eu/win32-the-only-stable-abi/\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 5, 2023 6:31 UTC (Thu) by dullfire (subscriber, #111432) [Link]\n\nif that's what qualifies as a \"stable abi\" break, then I will note \"wine\" is\nNOT a stable ABI: it depends on glibc just as much as anything else (the glibc\nhash break would be just as broken for wine... it's just wine itself probably\nnever used it. While win32 programs use PE, and thus do not generally care\nabout ELF related issues that are \"out of scope\").\n\nBut more than all that: wine breaks stuff fairly often too. I have had the\nfrustration of \"oops can't run this game I ran 2 years ago on the same hw\nbecause a wine change broke it\".\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 5, 2023 1:50 UTC (Thu) by Cyberax (\u272d supporter \u272d, #52523) [Link]\n\nThe problem is that anything more complicated than the kernel and maaybe glibc\nis not stable. And you need a lot of stuff for a game: sound, graphics, input\nhandling, a simple UI framework, etc.\n\nThe application that I tested was not a game, but an MFC-based specialized\neditor. With VTK-based visualizations. It all just works, with only mild\nvisual artifacts.\n\nWhat's funny is that I also later rewrote this app using wxWindows (now called\nwxWidgets) to run on Linux, and I have no idea how I can launch it now. It\ncan't be recompiled, and the binary dependencies are no longer there.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 5, 2023 9:57 UTC (Thu) by dullfire (subscriber, #111432) [Link]\n\n> The problem is that anything more complicated than the kernel and maaybe\n> glibc is not stable. And you need a lot of stuff for a game: sound,\n> graphics, input handling, a simple UI framework, etc.\n\nThis is true for win32 as well. As soon as you use stuff that's out of\nscope... the ABI stability no longer applies[1]. I will also note that most\nwindows games are not (directly) written for the win32 ABI. Most windows games\nuse some sort of toolkit. Directx was common (I think it still is, but I've\nlong been out of windows dev).\n\n> What's funny is that I also later rewrote this app using wxWindows (now\n> called wxWidgets) to run on Linux, and I have no idea how I can launch it\n> now. It can't be recompiled, and the binary dependencies are no longer\n> there.\n\nThis is the rough analogy of, in a pure windows environment, porting a\nwin32/MFC program to SDL1.2, then later, having only SDL2.0 installed, whining\nthat it wont compile or run.\n\nMaybe this biggest complaint here is that the FLOSS ecosystem has no single\n\"core do-everything\" ABI. But, that is more or less by consensus.\n\nHowever I guess the closest analog to win32 we have is maybe glibc+libX11. I\nwould imagine that if you wrote a program conforming to both their ABI's back\nin 2000-ish[2], it might still work now. Furthermore, if it did not the\nsoftware corrections would likely be small, and substitute userspace library\ncould work around an existing binary.\n\nPerhaps the community would benefit from a simple GUI/toolkit that had a focus\non ABI stability instead of chasing the latest hotness in UI paraphernalia, or\nsupport for the latest rendering features. Of course you can always add new\nstuff to a stable ABI, but a lot of **good** new concepts would want an API\nrefactor to be integrated well. However this would either be a huge\nmaintenance burden (symbol versioning) or break the ABI.\n\nAs far as I know the community has not yet made any such toolkit mainstream\n(for example, neither GTK nor QT would fit that bill).\n\n[1] This should sound tautological. Because the original statement contained a\ntautology.\n\n[2] remember AMD64 came out around 2001 IIRC, so w/e ABI's most people use for\ntheir current desktops probably didn't even exist in the 90s or before.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 5, 2023 10:27 UTC (Thu) by HenrikH (subscriber, #31152) [Link]\n\nLet us also not forget that the typical windows install is to bundle every\nsingle external dependency while on Linux the same publisher (if we are\ntalking about closed source games or apps) relies on the distro to provide\nthose dependencies.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 5, 2023 15:53 UTC (Thu) by halla (subscriber, #14185) [Link]\n\nClosed-source or not: there are plenty of ways to not depends on distribution\npackaged dependencies anymore. For Linux, we publish appimages of Krita, and\nonly libc, X11 and the opengl drivers are distro-provided. This has worked\nvery well for us in the past eight years.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 5, 2023 14:08 UTC (Thu) by farnz (subscriber, #17727) [Link]\n\nMany Windows programs are still running on the 32-bit ABI that goes all the\nway back to Windows NT 3.1. Their library and OS dependencies are usually more\nrecent, but there hasn't been the big push to make everything 64-bit.\n\nThe only pressure that Microsoft does apply is that newer SDKs make it hard to\navoid building against newer OS versions; if you use an SDK from Windows NT\n3.1, you can build a binary that's compatible from NT 3.1 to Windows 11, but\nthe current Windows SDK will silently prefer Windows 7 and later APIs whether\nyou like it or not.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 5, 2023 19:45 UTC (Thu) by Cyberax (\u272d supporter \u272d, #52523) [Link]\n\n> This is true for win32 as well. As soon as you use stuff that's out of\n> scope... the ABI stability no longer applies[1]. I will also note that most\n> windows games are not (directly) written for the win32 ABI. Most windows\n> games use some sort of toolkit. Directx was common (I think it still is, but\n> I've long been out of windows dev).\n\nDirectX can be considered a part of the Win32 ABI. It's incredibly backwards-\ncompatible. You can still launch games written for DirectX 6, present in\nWin98. It did deprecate several components (DirectPlay, DirectShow), but the\ncore graphics and sound components are still compatible all the way back to\nthe previous millennium.\n\n> This is the rough analogy of, in a pure windows environment, porting a\n> win32/MFC program to SDL1.2, then later, having only SDL2.0 installed,\n> whining that it wont compile or run.\n\nIt's not just SDL, it's more like QT or GTK. Can you run a program written for\nGTK 1.2 now?\n\n> Maybe this biggest complaint here is that the FLOSS ecosystem has no single\n> \"core do-everything\" ABI. But, that is more or less by consensus.\n\nIt's not by \"consensus\". It's mostly because anything above the most basic\nlayer is fragmented to hell.\n\n> [2] remember AMD64 came out around 2001 IIRC, so w/e ABI's most people use\n> for their current desktops probably didn't even exist in the 90s or before.\n\nMicrosoft still fully supports 32-bit apps! Even on ARM64 platforms via\nemulation. Think about this: games written in the early 2000-s for a 32-bit\narchitecture, still can work on most recent Windows running on a completely\ndifferent architecture.\n\nThey are not perfect, of course. Nothing is. But Microsoft really tries to\nkeep the old running. And the importance of this is something that Linux\necosystem only now is starting to realize.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 5, 2023 22:38 UTC (Thu) by pizza (subscriber, #46) [Link]\n\n> They are not perfect, of course. Nothing is. But Microsoft really tries to\n> keep the old running. And the importance of this is something that Linux\n> ecosystem only now is starting to realize.\n\nOf course, it helps to have a multi-billion-per-year desktop monopoly funding\n(and directing) the developers ensuring this backwards compatibility\ncontinues.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 6, 2023 3:42 UTC (Fri) by Cyberax (\u272d supporter \u272d, #52523) [Link]\n\nThat's most definitely a factor. Yet I think that the Linux ecosystem as a\nwhole has only recently started taking ABI backwards compatibility seriously.\n\nProbably just in time for the classic desktop to become irrelevant.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 6, 2023 11:11 UTC (Fri) by farnz (subscriber, #17727) [Link]\n\nThere's also a little bit of legacy that resulted in MS taking ABI seriously\nat a time when open source just didn't care; DLL Hell.\n\nDLL Hell had a lot of contributing factors that weren't present on *nix\nsystems of the same era; first, imports from DLLs could be done by ordinal\ninstead of by name, which meant that if a new version of the DLL didn't retain\nthe same ordinal positions for all functions as the previous version (e.g.\nbecause ordinal choice depended on symbol order in the object files), you'd\nhave problems. Worse, the runtime linker couldn't tell that you weren't\nexpecting the function to be different - all it knew is that you'd asked for\nsymbol #4, and that's what it gave you; in contrast, on ELF systems, symbol\nlookup is always by name, so the runtime linker could say \"you asked for\nprint_magic_output, but the library does not contain that symbol\".\n\nAdd in the single address space of Win16 (so one bad program could take out\nthe entire system), and the fact that there was rarely a separate sysadmin\nmaintaining the platform (so you had non-technical users doing crazy things\nbased on half-understood rumours, not solid understanding of the system), and\nyou had a problem that could only be solved by thinking hard about ABI and\ngetting it right.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 6, 2023 16:42 UTC (Fri) by Cyberax (\u272d supporter \u272d, #52523) [Link]\n\nAh yes, I remember.\n\nMicrosoft decided to be very careful with DLLs. They are still extremely\nlimited compared to ELF shared libraries. It's hard to do circular\ndependencies, and all the exports must be clearly marked.\n\nI remember our Linux guys laughing at my Windows code because I had to add\n\"__declspec(dllexport)\" in all kinds of places. By default, Unix shared\nobjects just export everything. Now it's pretty clear that this kind of\nexplicit exports makes shared objects way more reliable.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 6, 2023 18:17 UTC (Fri) by andresfreund (subscriber, #69562) [Link]\n\nI agree that exporting all symbols by default was a bad idea. But the macro\nmagic required to switch between declspec(dllexport) and declspec(dllimport),\ndepending on whether you build or consume a library, is also fairly\nridiculous.\n\n### Linux ecosystem contributions from SteamOS\n\nPosted Oct 17, 2023 8:51 UTC (Tue) by NAR (subscriber, #1313) [Link]\n\nThink about this: games written in the early 2000-s for a 32-bit architecture,\nstill can work on most recent Windows running on a completely different\narchitecture.\n\nWell, I have Civilization IV on CD from 2005 and it doesn't work - the copy\nprotection depends on some kind of service that's no longer included since\nWindows 10.\n\n### Proton \u2192 Wine\n\nPosted Oct 17, 2023 5:19 UTC (Tue) by Hi-Angel (guest, #110915) [Link]\n\n> All of the components of Proton are customized for SteamOS and the Steam\n> Deck, but all of those changes are contributed back to the upstream\n> projects.\n\nNot entirely true. AFAIK Proton is using FUTEX2 which (as the article noted)\ncurrently consists of futex_waitv. However, upstream WINE has no such code\n(and to be sure it's still the case I just git-grepped over the WINE repo for\nwaitv keyword).\n\n### Proton \u2192 Wine\n\nPosted Oct 21, 2023 10:59 UTC (Sat) by cpitrat (subscriber, #116459) [Link]\n\nIIUC futex_waitv is the syscall and in wine code you should rather look for\nglibc functions. I think this would be pthread_mutex_lock_any() or\npthread_mutex_timedlock_any()\n\nCopyright \u00a9 2023, Eklektix, Inc. This article may be redistributed under the\nterms of the Creative Commons CC BY-SA 4.0 license Comments and public\npostings are copyrighted by their creators. Linux is a registered trademark of\nLinus Torvalds\n\n", "frontpage": false}
