{"aid": "40162930", "title": "Cease labeling recursion as challenging for students", "url": "https://mabelcor.substack.com/p/cease-labeling-recursion-as-challenging", "domain": "mabelcor.substack.com", "votes": 20, "user": "shenisha", "posted_at": "2024-04-25 20:58:21", "comments": 45, "source_title": "Cease labeling recursion as challenging for students", "source_text": "Cease labeling recursion as challenging for students\n\n# Mabel\u2019s Substack\n\nShare this post\n\n#### Cease labeling recursion as challenging for students\n\nmabelcor.substack.com\n\n#### Discover more from Mabel\u2019s Substack\n\nMy personal Substack\n\nContinue reading\n\nSign in\n\n# Cease labeling recursion as challenging for students\n\nMabel Cor\n\nApr 25, 2024\n\nShare this post\n\n#### Cease labeling recursion as challenging for students\n\nmabelcor.substack.com\n\nShare\n\n\u201cTo iterate is human, to recurse divine.\u201d -Peter Deutsch\n\nRecursion is a natural idea. When humans perform repetitive tasks, we don't\nassign state variables, and we generally don't keep counters. We just keep\ndoing the same thing over and over until we arrive at some kind of terminating\ncondition. This \u201cpattern\u201d forms the basis of recursive programming.\n\nIn \u201cThe Little Schemer\u201d Friedman and Felleisen lay out the following basic\npattern for writing recursive functions.\n\n  * Establish a terminating condition.\n\n  * Accumulate the results of the recursion.\n\n  * Change some argument in the recursive call to move closer to the terminating condition.\n\nThis is a very natural, very basic way of going about writing recursive\nfunctions. Take for example a function that performs exponentiation. Here are\nthe questions we might ask ourselves if we were to perform the computation.\n\nIs the exponent 1? Then obviously the answer is the number itself.\n\nOtherwise, the answer is the number times the number to the original power\nminus one.\n\nIn code, we have\n\n    \n    \n    (define (expt n p) (if (equals? p 1) n (* n (expt n (- p 1)))\n\nObviously this is a basic example, but the concept isn't difficult to grasp.\nWhy then do students have such a hard time?\n\nIn my experience, effective recursive thinking requires two important mental\nprocesses come naturally. The first is understanding the process that\nrecursive procedures generate. Continuing the example above, we need to be\nable to quickly understand that that procedure will generate a process that\nlooks like:\n\n(* n (expt n (p-1))\n\n(* n (* n (expt n (p-1))) etc...\n\nwhile an iterative process generates:\n\n((*n n) (p-1))\n\nat every step in its computation. This can be hard for students to understand\nas comparatively, an iterative process is much easier to understand at every\n\u201cstep\u201d in a given computation. Recursive procedures in some sense need to be\nunderstood as a gestalt, thinking about them as a series of computations can\nbe somewhat frustrating. This brings us to the next important shift in mental\nprocesses.\n\nThinking recursively requires a shift from thinking imperatively to thinking\ndeclaratively (albeit not a very big one.) We become concerned with the\nstructure of the problem. Recursion forces this on us by forcing us to define\nthe problem in terms of itself. This can be somewhat \u201cshocking\u201d at first, but\nbecomes routine with practice.\n\nNow that we've looked at why recursion might be difficult, we're going to look\nat why none of these reasons is a reason to call recursion \u201chard.\u201d IMHO,\nrecursion is much more natural than iteration and ought to be taught first.\nWhile practicing programmers may not use recursion very often, understanding\nrecursion is critical to understanding the nature of computation.\n\nThe main barrier to understanding recursion is understanding that most\nrecursive functions follow a basic pattern (mentioned above.) I think that the\nlack of understanding in the student body concerning recursion is a\npedagogical issue rather than a conceptual one.\n\n### Subscribe to Mabel\u2019s Substack\n\nBy Mabel Cor \u00b7 Launched 5 minutes ago\n\nMy personal Substack\n\n1 Like\n\nShare this post\n\n#### Cease labeling recursion as challenging for students\n\nmabelcor.substack.com\n\nShare\n\nComments\n\nReady for more?\n\n\u00a9 2024 Mabel Cor\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": true}
