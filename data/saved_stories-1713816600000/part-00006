{"aid": "40112895", "title": "Build an AI data exploration agent with Gemini", "url": "https://ai.google.dev/gemini-api/tutorials/sql-talk", "domain": "ai.google.dev", "votes": 1, "user": "ko3us", "posted_at": "2024-04-22 10:14:40", "comments": 0, "source_title": "Build an AI data exploration agent with Gemini | Google AI for Developers", "source_text": "Build an AI data exploration agent with Gemini | Google AI for Developers\n\nai.google.dev uses cookies from Google to deliver and enhance the quality of\nits services and to analyze traffic. Learn more.\n\n  * English\n  * Deutsch\n  * Espa\u00f1ol \u2013 Am\u00e9rica Latina\n  * Fran\u00e7ais\n  * Indonesia\n  * Italiano\n  * Polski\n  * Portugu\u00eas \u2013 Brasil\n  * Ti\u1ebfng Vi\u1ec7t\n  * T\u00fcrk\u00e7e\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * \u05e2\u05d1\u05e8\u05d9\u05ea\n  * \u0627\u0644\u0639\u0631\u0628\u064a\u0651\u0629\n  * \u0641\u0627\u0631\u0633\u06cc\n  * \u0939\u093f\u0902\u0926\u0940\n  * \u09ac\u09be\u0982\u09b2\u09be\n  * \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22\n  * \u4e2d\u6587 \u2013 \u7b80\u4f53\n  * \u4e2d\u6587 \u2013 \u7e41\u9ad4\n  * \u65e5\u672c\u8a9e\n  * \ud55c\uad6d\uc5b4\n\nSign in\n\n  * On this page\n  * Project setup\n\n    * Create a Cloud Shell instance for the project\n    * Get a Cloud project ID\n    * Configure the SQL Talk project\n  * Test the project\n  * Modify the application\n\n    * Add a function call definition\n  * Additional resources\n\nCheck out the new Gemini API Cookbook for quickstarts and examples to help you\nget started.\n\n  * Google AI for Developers\n  * Products\n\nWas this helpful?\n\n# Build an AI data exploration agent with Gemini\n\nbookmark_borderbookmark Stay organized with collections Save and categorize\ncontent based on your preferences.\n\n  * On this page\n  * Project setup\n\n    * Create a Cloud Shell instance for the project\n    * Get a Cloud project ID\n    * Configure the SQL Talk project\n  * Test the project\n  * Modify the application\n\n    * Add a function call definition\n  * Additional resources\n\nBuild an artificial intelligence (AI) powered chat interface for your business\nsystem programming interfaces and let your colleagues ask questions about your\nbusiness data. Doing analysis and reporting on your organization's data is\nessential for improving how you do business. Finding problems, discovering\ntrends, and investigating results are all possible with the right data, but as\na developer, helping your non-coding colleagues discover the right data can be\nchallenging.\n\nThe SQL Talk project is an open source application that uses generative AI\ntechnology to answer questions about business data. The project uses the\nGemini API and the Function Calling feature to transform business data\nquestions into SQL queries and API calls, and then transform results back into\nplain language. You can use this project as a starting point for building a\ndata agent for your own business, and help your colleagues get answers without\nyou having to write a bunch of single-use code.\n\nFor a video overview of the project and how to extend it, including insights from the folks who build it, check out AI Data Agent | Build with Google AI. Otherwise, you can get started extending the project using the following instructions.\n\nFigure 1. SQL Talk project application user interface.\n\n## Project setup\n\nThese instructions walk you through getting the SQL Talk project setup for\ndevelopment and testing. The general steps are creating the SQL Talk project,\nsetting up a Google Cloud Shell Editor development project, getting a Google\nCloud Project ID, and using a script to configure the project settings. These\ninstructions describe how to set up the project using the Cloud Shell Editor,\nwhich makes setting up, running and updating the project quick and convenient.\n\n### Create a Cloud Shell instance for the project\n\nYou can set up the SQL Talk project by cloning the project repository into a\nCloud Shell instance. This process sets up a virtual development environment\ninstance inside the Google Cloud infrastructure for the project and clones the\ncode repository into that virtual environment.\n\nTo create a Cloud Shell instance for SQL Talk:\n\n  * Click the following link to create a Cloud Shell instance of SQL Talk.\n\nThis link sets up a Google Cloud Shell Editor instance and clones the\nrepository for SQL Talk into the instance.\n\nFigure 2. SQL Talk project cloned into a Google Cloud Shell Editor development\nenvironment.\n\n### Get a Cloud project ID\n\nThe SQL Talk project uses a Google Cloud project ID to connect to Google Cloud\nservices, including the Gemini models. You configure a project ID within the\nCloud Shell Editor to allow the application to connect with these services.\n\nTo connect the Cloud Shell Editor to a project ID:\n\n  1. Navigate to the Google Cloud console and sign in, if needed.\n  2. Select an existing Cloud Project, or create a new one.\n  3. Make a note of the Cloud Project ID for the project.\n  4. Connect the Editor instance to your project and configure the project. In the Cloud Shell Editor window, terminal panel enter the following command:\n    \n        gcloud config set project YOUR_PROJECT_ID\n\nImportant: The Vertex AI API requires billing to be enabled in the projects\nwhere you use it. Make sure that billing is enabled for the Cloud project ID\nyou are using.\n\n### Configure the SQL Talk project\n\nThe SQL Talk project uses Google Cloud services to run the project, including\nthe BigQuery database service and the Vertex AI API to connect to Gemini\nmodels. The SQL Talk project includes a setup.sh script that configures the\nproject with the required Google Cloud services and starts the default version\nof the project.\n\nTo configure and run the project Cloud Shell Editor instance:\n\n  1. In the Cloud Shell Editor window terminal panel, navigate to the Cloud Shell SQL Talk (/sql-talk-app) project directory:\n    \n        cd ~/cloudshell_open/generative-ai/gemini/function-calling/sql-talk-app\n\n  2. In the terminal panel, enter the following command:\n    \n        bash setup.sh\n\nWhen the setup script successfully completes, you should see a message similar\nto the following in the Cloud Shell Editor terminal window. This message\nindicates the setup process was successful and the SQL Talk application is\nrunning:\n\n    \n    \n    You can now view your Streamlit app in your browser. Network URL: http://##.##.##.##:8080 External URL: http://##.##.##.##:8080\n\n## Test the project\n\nOnce you have completed setup of the SQL Talk project, you can test the\napplication to verify it is functioning as expected. The setup script\nautomatically starts the application when you run it, and you can restart the\napplication using the following steps.\n\nTo run the SQL Talk application:\n\n  1. If the Cloud Shell Editor has been idle and disconnected, you may need to reconnect to your Cloud project ID.\n    \n        gcloud config set project YOUR_PROJECT_ID\n\n  2. In the Cloud Shell Editor window terminal panel, navigate to the Cloud Shell SQL Talk project directory.\n    \n        cd ~/cloudshell_open/generative-ai/gemini/function-calling/sql-talk-app\n\n  3. In the terminal panel, enter the following command.\n    \n        ~/miniforge/bin/streamlit run app.py --server.enableCORS=false \\ --server.enableXsrfProtection=false --server.port 8080\n\n  4. View the SQL Talk application. At the top right of the Cloud Shell Editor window, select the Web Preview button, and then Preview on port 8080.\n\nTo view updates to the SQL Talk application:\n\n  * In the SQL Talk web application Web Preview, reload the browser or browser tab.\n\nTo stop the SQL Talk application:\n\n  * In the Cloud Shell Editor window terminal panel, type Ctrl-C.\n\n## Modify the application\n\nYou can change the behavior and add capabilities to the SQL Talk application\nby modifying the Python code for the application. This section describes how\nto add a new function call to the SQL Talk application.\n\nThe Gemini API Function Calling feature uses a specific syntax to define\nfunctions to be used by the generative model to answer questions or solve\nproblems. This syntax does not need to precisely match the syntax of an actual\nAPI call. Instead, you use the Function Calling feature to force the\ngenerative model to provide specific data inputs or parameters that conform to\nthe API call syntax, and then use those parameters to execute the actual API\ncalls within your application code.\n\nThis example implementation shows you how to create a function call definition\nfor listing recent database queries or jobs, and then map that definition to\nthe actual API call within the SQL Talk application code.\n\n### Add a function call definition\n\nAdd a new function call for listing recent database queries or jobs. This\ndefinition is used by the generative model to understand what the API call\ndoes and what input parameters it requires. This example function definition\nis defined with no parameters.\n\nTo add a new function call to the application:\n\n  1. In the Cloud Shell Editor window, open the sql-talk-app/app.py code file.\n  2. After the list_datasets_funcfunction declaration, add a new FunctionDeclaration.\n    \n        list_jobs_func = FunctionDeclaration( name=\"list_jobs\", description=\"Get a list of the 10 most recent database requests to help answer the user's question\", parameters={ \"type\": \"object\", \"properties\": { }, }, )\n\n  3. Add the new function to the sql_query_tool object.\n    \n        sql_query_tool = Tool( function_declarations=[ sql_query_func, list_datasets_func, List_jobs_func, # add this new function list_tables_func, get_table_func, ], )\n\nTo add code to run the API call for the new function:\n\n  * In the sql-talk-app/app.py code file, add a new if clause to the while function_calling_in_process:loop.\n    \n        if response.function_call.name == \"list_datasets\": ...\n    \n    # add this if clause for list_jobs function if response.function_call.name == \"list_jobs\": api_response = client.list_jobs(max_results=10) # API request(s) api_response = str([job.job_id for job in api_response]) api_requests_and_responses.append( [response.function_call.name,params, api_response])\n\n## Additional resources\n\nFor more information about the SQL Query project, see the code repository and\ncheck out the Cloud Community blog post about the SQL Talk project. If you\nneed help building the application or are looking to collaborate with other\ndevelopers, check out the Google Developers Community Discord server, and the\nGoogle Cloud AI/ML Forum. For more Build with Google AI projects, check out\nthe video playlist.\n\nWas this helpful?\n\nExcept as otherwise noted, the content of this page is licensed under the\nCreative Commons Attribution 4.0 License, and code samples are licensed under\nthe Apache 2.0 License. For details, see the Google Developers Site Policies.\nJava is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2024-04-18 UTC.\n\n", "frontpage": false}
