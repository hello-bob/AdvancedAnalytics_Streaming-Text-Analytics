{"aid": "40092357", "title": "Porting Games for the Web with Emscripten", "url": "https://midzer.de/porting-games-for-the-web-with-emscripten", "domain": "midzer.de", "votes": 1, "user": "midzer", "posted_at": "2024-04-19 21:56:42", "comments": 0, "source_title": "Flimmerkiste", "source_text": "Flimmerkiste\n\n# Porting games for the web with Emscripten\n\nIn this post I want to show a brief overview of how to create game ports in\nWebAssembly (WASM) via the Emscripten toolchain. This is no detailed example\nfor a specific game or engine, it's just to get a gist of all steps involved\nin this process.\n\nIt is targeted to be as beginner friendly as possible, but first, experience\nin reading C/C++ is recommended if you jump on a first project yourself.\n\nLet's start this journey by looking for appropriate games or source code you\nwant to bring to life in a browser.\n\n## Fewer dependencies means more joy#\n\nPorting games to a different OS or in our case for all modern browsers which\nsupport WASM, can be hard to impossible. Picking an easy project at the\nbeginning is essential, especially for newcomers.\n\nWhat is an \"easy project\"? In short, it's a repository in C/C++ languages and\nwith as few as possible dependencies. Of course, Emscripten offers pre-\ncompiled ports of many popular libraries like SDL. Let's keep this in mind,\nwhen we talk about it later.\n\n## It should work natively#\n\nIn case you found a handy repository, try to build it for your OS first. If\nthis fails already, you will be stuck on the web port too. I highly recommend\nbuilding on Linux, because the Emscripten toolchain is similar to GCC or\nClang. Stick to the README and hopefully your game compiles fine.\n\n## Prepare your setup#\n\nWell, now it's time to get your gear ready! Go and grab Emscripten and dive\ninto at least the \"Getting Started\" section. More experience is to be earned\nthe more you play around with this toolset. So let's start out keeping things\nsimple.\n\n## It depends on the build system#\n\nThere are many build systems around. For this tutorial I focus on CMake.\n\nIf there is a CMakeLists.txt do\n\n    \n    \n    mkdir build && cd build emcmake cmake ..\n\nto generate a Makefile file. Most likely this is going to throw errors,\nbecause of unresolved dependencies. Sometimes, depending on the build script,\nit can't find SDL2 for example which is REQUIRED. So, let's modify\nCMakeLists.txt and remove REQUIRED to fit our needs. Yes, we can do it!\n\n## Ready for compiling#\n\nAsumming the previous command finished successfully, we are going to heat up\nour CPU. Start compiling with emmake make.\n\nNow, you could encounter compiler errors. Something external is probably\nmissing. Perhaps SDL2 headers are not found? A possible way to fix this is by\nsetting compiler flags like this\n\n    \n    \n    add_compile_options(-sUSE_SDL2)\n\nsomewhere in CMakeLists.txt. Re-run the compile command and check whether it's\nworking now. Simply put, you can use this method to shim through the whole\ncompilation process. Finally, all source code object files (.o) have been\ncreated. Awesome!\n\n## Linking everything together#\n\nUsing CMake, there are going to be more directories in ./build. Navigate to a\nsubdirectory where those object files are stored.\n\n    \n    \n    emcc *.o -o index.html\n\ncreates an index.html, index.js and index.wasm for a hello-word program. For\nmore complex scenarios, linker errors will most likely occur. You will have to\nlink more dependencies either via additional command line flags (-sUSE_SDL=2\nfor SDL2 for example) or as static, pre-compiled .a files. Have a looksie at\nEmscripten's documentation or GitHub Issues if you're stuck.\n\n## Run, baby, run#\n\nInside the directory with our output, run\n\n    \n    \n    python3 -m http.server\n\nwhich opens a simple Web Server on Port 8000. In your browser, you should see\nthe Emscripten logo, an HTML5 canvas element, and a logging feature at address\nlocalhost:8000.\n\nEither the log on the page or your browser's developer console can give you\nmore hints about potential errors. The key is to fix all these errors, one\nafter another, by adding those flags to your previous linker step:\n\n  * make it async -> -sASYNCIFY\n  * memory out of bounds -> -sALLOW_MEMORY_GROWTH\n  * missing game data -> \\--preload-file GAMEDATA\n  * more detailed error info -> -sASSERTIONS\n\nThis is just a very small subset of all flags Emscripten offers for compile\nand linking actions. This can be very hard depending on the game. Tweaking\nsource code directly is mandatory at some point.\n\n## Final words#\n\nIn this tutorial I presented a way for newcomers to port applications to the\nweb. Given its current state, this post functions as an introduction to the\nwhole topic. Proper debugging techniques and optimizations on the final binary\nare not considered and could be topic of interest for a future post.\n\nHappy porting!\n\n1/13 00:00\n\nProps to original authors\n\n", "frontpage": false}
