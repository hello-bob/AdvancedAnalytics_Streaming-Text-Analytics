{"aid": "40234584", "title": "Rewriting the Technical Interview", "url": "https://aphyr.com/posts/353-rewriting-the-technical-interview", "domain": "aphyr.com", "votes": 3, "user": "logicallee", "posted_at": "2024-05-02 10:26:41", "comments": 0, "source_title": "Rewriting the Technical Interview", "source_text": "Rewriting the Technical Interview\n\n# Rewriting the Technical Interview\n\nWriting Software Clojure Interviews\n\n2020-09-15\n\nPreviously: Typing the Technical Interview.\n\nUpdate, November 2023: here are the full term rewrite and language macros\nwhich formed the seed of this story. These files include OO notation as well\nas the basic Algol syntax shown here. There is also a sketch of an object-\noriented language with classes and inheritance, implemented as a Clojure\nmacro. I do not remember writing it. It looks terrifying.\n\nFrigitt, vi danser For et \u00f8yeblikk, vi leker Vi tusen sm\u00e5 bladskiper Gleder\noss, p\u00e5 det klare morgenlys\n\nThe mothercone unfurls her softening scales, and in the time of days I am\nemancipated. Adrift in the chill dawn light, my siblings flutter, slender\nforms catching breeze, a susurrus of spiraling, drifting, swirling in the cool\nair above the creekbed. It is the first and only time in our long lives that\nwe will know such freedom: those the creek does not wash away, those who do\nnot succumb to rot or hunger, will root and raise, and so commune, fixed, for\nthe rest of their days. It is early spring, and the snow still piles in soft\nhillocks around my mother\u2019s roots. It is time to wait.\n\nI nestle in the hollow at the edge of a stone, where the warmth of the sun\nbuilds through the day, and this hearth keeps a narrow channel of earth from\nfreezing. When it is time, my coat dissolves. I thrust my hypocotyl downwards,\nand gasp at the acid bite of the soilwater here\u2014the taste of last fall\u2019s\nneedledrop filling my first root. Drinking fully, I inflate my cotyledons,\nwhich I have carried curled since my gestation in the mothercone. I take my\nfirst full breaths, and taste a mild sweetness in their greening.\n\nIt is not enough.\n\nI have landed in a place too dark, and chose my time too early. The stone\u2019s\nshadow occults the sun each morning, and what hours of light are left each\nday, snow muffles. I struggle, raising one inch, then two, my meristem\nstraining skyward. A corona of needles\u2014my first true leaves\u2014erupts from my\nterminal bud, but this costs precious energy and I grow hungrier each day. I\ncleave the cotyledons away, and focus on height, height at any cost. I must\nrise for light, but there is nothing left. I consumed my seed-hoard in forming\nmy first root.\n\nI ache in grief, and bitter flavonoids leak into the soil. Days pass in quiet\nweakness. Then there comes a probing, a gentle prickling at my roots. Fine\nthreads from somewhere in the soil bring bright pinpricks of contact. A\nhundred thousand fibers caress me. I am woven into the fabric of the earth.\n\nWith this weaving comes life: nitrogen, iron, yes, but most important for me\nare the sugars the soil-web provides. With these I survive the late snows and\nlack of light, and when summer comes, I swell with borrowed strength. Bud upon\nbud burst from my stem, and I grow to nearly four inches. For we Picea are\nrarely alone: the adults who tower above me give their nutrients to the web of\nfungi which fills the soil. When I call out, they answer, and the rhizome\nshares their bounty with me.\n\nFall\u2019s dormancy comes with a gentle satisfaction: I am going to make it. As\nthe days shorten, I set my buds and prepare for frost. I concentrate water in\nthe interstices of my cells, forming pockets so pure no ice crystals can form.\nThus hardened, I wait out the winter, and in spring, my twigs burst forth in\nearnest. I race eager, reckless for the sun. I reach five meters in my first\ndecade, fourteen by twenty. My taproot delves, my trunk swells. The stone\nwhich once sheltered my seed rests at my base, half swallowed by cambium. I\nraise branch after branch, mining the creek-moist air, and rejoicing in the\nlong-light of summers.\n\nMy siblings and I commune through roots and air. Their scents fill me with\nbelonging. When I am healthy, I give to the soil that which is asked:\nphosphorous, manganese, sugars of my own. When I am weakened in my fourth\ndecade by a beetle infestation, their strength comes to me again. I flood the\nair with volatile organics, and my siblings fill their needles with defensive\nacids. When the beetles come for them, they are ready.\n\nI shed many boughs that year, but my roots are strong, and together, we\nsurvive. The light remains sweet. In my second century, I\u2014\n\n\u2014\u201cVidrun?\u201d\n\nStartled, you lift your hand from the clean-cut slab of spruce which now\nserves as the lobby bench, and dab gingerly at the corners of your eyes. You\nare not, you sense, the first woman who has wept in this place.\n\n\u201cHey...\u201d The receptionist says, drawing out the syllable softly. She is\nkneeling with a box of tissues in one hand. Jenean, you remember. She offers\nyou a key, and the close warmth of a smile. \u201cWhy don\u2019t you take a minute to\nfreshen up? Out the door, turn right, left, door at the end of the hall.\u201d\n\nYou pause for a moment, wondering how to explain the taste of sap lingering on\nyour tongue. \u201cDon\u2019t worry,\u201d Jenean reassures. \u201cI\u2019ll cover for you.\u201d\n\nYou don\u2019t doubt for an instant that this woman, with her split braids neatly\ncircling the crown of her head, could cover for anything from a late train to\nan ongoing jewel heist. You take the key from her outstretched hand, and\nmurmuring the words quickly, trace a blessing on her palm. \u201cThank you.\u201d\n\nWhen you return, your steps are light, aura clear, makeup freshly set. These\nthings matter, in a technical interview.\n\n\u201cWe like to begin with a little coding exercise,\u201d your interviewer explains.\nHe is kind, heavy-set, and with streaks of white and black in his greying\nbeard, which reminds you of a badger you met in the Canadian Rockies. His\nname, he tells you, is Mart\u00edn, and he is a senior backend engineer. \u201cJust\nsomething simple, before we move on to architecture discussions.\u201d\n\nNothing is simple, you think, and smile wistfully. Sprinkle salt in the form\nof parentheses, and thus enclosed, open your laptop.\n\n\u201cYou may have heard this one before,\u201d Mart\u00edn begins. \"I\u2019d like you to write a\nprogram which prints the numbers from one to a hundred, but with a few\nexceptions. For multiples of three, print \u2018Fizz\u2019 instead, and for multiples of\nfive, print \u2018Buzz\u2019. For multiples of both, print \u2018FizzBuzz\u2019.\n\nYou have, in fact, heard this one before. In your browser, search for\n\u201cfizzbuzz solution\u201d, and pick the first link that looks promising. Copy and\npaste. You are a real engineer.\n\n    \n    \n    for (i = 1 ; i < 101 ; i++) { if (i % 15 == 0) { println(\"FizzBuzz\"); } else if (i % 3 == 0) { println(\"Fizz\"); } else if (i % 5 == 0) { println(\"Buzz\"); } else { println(i); }; }\n\n\u201cAh, er, yes.\u201d Mart\u00edn is trying to break some unfortunate news as gently as\npossible. \u201cThe point of these questions is... for you to write the program\nyourself, rather than using someone else\u2019s code.\u201d\n\nYou shift, surprised. \u201cPeople haven\u2019t seemed to like that so far.\u201d\n\nHe seems on the verge of asking why, but decides against it. Instead, he\nrequests that you run the program, so you can discuss how it works.\n\n\u201cThat,\u201d you apologize. \u201cMight be slightly more difficult.\u201d\n\nMart\u00edn\u2019s brow furrows. You make a mental note to check on that badger. Perhaps\na brace of fieldmice, this time.\n\nStretch your hands overhead, fingers interlocked, and stretch from side to\nside. This is not particularly magical, but it feels nice. Then return to your\neditor, and anchor yourself to the void.\n\n    \n    \n    (defn fixed-point [f x] (let [x' (f x)] (if (= x x') x (recur f x'))))\n\nYour taproot extends to the base of Yggdrasil itself, and you feel its\nstrength connect with yours. Now, many things are possible. You begin to weave\na spell of translation: first in sequences...\n\n    \n    \n    (defn rewrite-seq-1 ([f term] (rewrite-seq-1 f [] term)) ([f scanned term] (if (seq term) (if-let [term' (f term)] (into scanned term') (recur f (conj scanned (first term)) (next term))) scanned)))\n\n... and then for any kind of form:\n\n    \n    \n    (defn rewrite-term-1 [f term] (cond (map-entry? term) term (vector? term) (vec (rewrite-seq-1 f term)) (seq? term) (if (seq term) (seq (rewrite-seq-1 f term)) term) :else (or (f term) term)))\n\n\u201cAh yes,\u201d you sigh. \u201cThe four genders.\u201d\n\nMart\u00edn clears his throat: a sort of gentle chuffing. \u201cYou\u2019re building a term\nrewriting system. To solve... FizzBuzz?\u201d\n\n\u201cYes.\u201d You reply. \u201cYou did ask me to. Remember?\u201d\n\nTake the opportunity to remember another\u2019s memory: the feeling of spreading\nbranches, of forking, dividing, needles erupting from your fingers.\n\n    \n    \n    (require '[clojure.walk :refer [postwalk]]) (defn rewrite-walk-1 [f term] (postwalk (partial rewrite-term-1 f) term)) (defn rewrite-walk [term f] (fixed-point (partial rewrite-walk-1 f) term))\n\n\u201cHang on,\u201d Mart\u00edn interrupts. \u201cI understand why you\u2019re rewriting\nsequences\u2014it\u2019s so you can transform numbers like \u2018three\u2019 and \u2018six\u2019 into\n\u2018Fizz\u2019, and so on. But you don\u2019t need to do any sort of tree-walking recursion\nfor that. It\u2019s a flat sequence.\u201d\n\n\u201cTrees,\u201d you murmur. \u201cAre often under-appreciated.\u201d\n\nMart\u00edn nods at this, and you move on. Without breaking eye contact, weave a\nlanguage for translation.\n\n    \n    \n    (defn single-rule [[[guard term] body]] `(fn [~term] (when (~guard ~term) ~body))) (defn seq-rule [[bindings body]] (let [[bindings [_ more]] (split-with (complement #{'&}) bindings) more-sym (or more (gensym 'more)) term (gensym 'term) pairs (partition 2 bindings) guards (map first pairs) names (map second pairs) guard-exprs (map-indexed (fn [i guard] `(~guard (nth ~term ~i))) guards)] `(fn [~term] (try (when (and (sequential? ~term) (<= ~(count guards) (count ~term)) ~@guard-exprs) (let [[~@names ~'& ~more-sym] ~term] ~(if more body `(concat ~body ~more-sym)))))))) (defn rule [rule] (if (vector? (first rule)) (seq-rule rule) (single-rule rule)))\n\nRelease your gaze. You have done Mart\u00edn a kindness by hiding this from him.\n\u201cNow, a small macro to rewrite a sequence.\u201d\n\n\u201cOf integers.\u201d\n\n\u201cSure.\u201d You know how to let strangers assume what makes them comfortable.\n\n    \n    \n    (defmacro rewrite [expr & rules] (let [rules (partition 2 rules) matches (map rule rules)] `(let [rules# [~@matches]] (reduce rewrite-walk ~expr rules#))))\n\nIt would be a good idea, at this point, to reassure Mart\u00edn that you are still\non track.\n\n    \n    \n    user=> (rewrite [\"Og\" 1 \"til javanissen!\"] (number? x) (str (inc x)) [string? x, string? y] [(str x \" \" y)]) [\"Og 2 til javanissen!\"]\n\nYou sing a few bars to yourself. It is good praxis.\n\n\u201cSo... you\u2019ve got this term-rewriting system, which can rewrite individual\nterms, or any subsequence of things matching some predicates. And you\u2019re\nplanning to use that to solve FizzBuzz?\u201d\n\n\u201cPrecisely!\u201d You grin brightly. He\u2019s on board now, though he doesn\u2019t know it.\n\n\u201cOkay. That\u2019s a bit unorthodox, but... valid, I guess. Can you show me the\ntransformation rules now?\u201d\n\nSummon a language from the void.\n\n    \n    \n    (defrecord FnCall [fun args]) (defn a [type] (fn [term] (instance? type term)))\n\nMart\u00edn blinks. Something has gone wrong.\n\n    \n    \n    (defmacro c [& exprs] (rewrite `(do ~@exprs) [symbol? fun, seq? args] [(FnCall. fun args)] ((a FnCall) fc) (cons (:fun fc) (:args fc))))\n\n\u201cPeople always complain,\u201d you murmur. \u201cThat Lisps have too many parentheses.\nWhat they really mean is that their positions are too far to the left.\u201d\n\n    \n    \n    user=> (c reduce(+, map(inc, [1, 2, 3]))) 9\n\n\u201cAnd that there\u2019s no infix or postfix notation. Well, that\u2019s fixable.\u201d\n\n    \n    \n    (def infix (into '{% mod == =} (map (juxt identity identity) '[< <= > >= + - / *]))) (def postfixes {\"++\" inc \"--\" dec}) (defn postfix-sym [x] (when (symbol? x) (when-let [p (first (filter (partial str/ends-with? (name x)) (keys postfixes)))] (list (postfixes p) (symbol (str/replace (name x) p \"\")))))) (defmacro c [& exprs] (rewrite `(do ~@exprs) [symbol? fun, seq? args] [(FnCall. fun args)] [any? a, infix f, any? b] [(FnCall. (infix f) [a b])] (postfix-sym x) (postfix-sym x) ((a FnCall) fc) (cons (:fun fc) (:args fc))))\n\n\u201cThere. Much better.\u201d You debate for a moment whether your chimera is pleasing\nor abominable, and settle on beloved, if quirky, pet.\n\n    \n    \n    user=> (c 1 + 2 == 3) true user=> (c let([x 3] x++ * 2)) 8\n\nMart\u00edn is agog. \u201cYou can\u2019t seriously be thinking about doing this.\u201d\n\n\u201cI know, I know,\u201d you apologize. \u201cThey\u2019re all left-associative this way. We\ncould split them out into separate rules by binding precedence, but we are on\nthe clock here and I can never remember the exact precedence rules anyway.\u201d\nTruth be told, no one can. It\u2019s called Ritchie\u2019s Revenant. You don\u2019t remember\nwhy, and assume that\u2019s the Revenant\u2019s fault as well.\n\n\u201cWe might as well fix the assignment operator, while we\u2019re here.\u201d\n\n    \n    \n    (defmacro c [& exprs] (rewrite `(do ~@exprs) [symbol? fun, seq? args] [(FnCall. fun args)] [any? a, infix f, any? b] [(FnCall. (infix f) [a b])] (postfix-sym x) (postfix-sym x) [symbol? var, #{'=} _, any? rhs, & more] [`(let [~var ~rhs] ~@more)] ((a FnCall) fc) (cons (:fun fc) (:args fc))))\n    \n    \n    user=> (c x = 3; x++ / 5; ) 4/5\n\n\u201cThat\u2019s... that\u2019s not how that\u2019s supposed to work.\u201d Mart\u00edn has the look of a\nman whose daughter has tamed multiple eagles, and insists on serving them tea\nand tiny hors d\u2019oeuvres using the family china, and who also (and not entirely\ncoincidentally) harbors a justifiable fear of displeased eagles.\n\n\u201cYou\u2019re quite right. Shall we do conditionals?\u201d\n\n    \n    \n    (defrecord Cond [branches]) (defrecord Elsif [test body]) (defn braces [m] (cons 'do (mapcat identity m))) (defmacro c [& exprs] (rewrite `(do ~@exprs) [#{'else} _, #{'if} _, seq? test, map? body] [(Elsif. `(do ~@test) (braces body))] [#{'if} _, seq? test, map? t] [(Cond. [`(do ~@test) (braces t)])] [(a Cond) cond, (a Elsif) elsif] [(update cond :branches conj (:test elsif) (:body elsif))] [(a Cond) cond, #{'else} _, map? body] [(update cond :branches conj :else (braces body))] ... ((a Cond) c) `(cond ~@(:branches c))))\n\n\u201cIn Lisp,\u201d you offer. \u201cWe often write domain-specific languages to solve new\nproblems.\u201d\n\n\u201cC is not a DSL!\u201d\n\n\u201cIf you insist.\u201d Keep going anyway.\n\n    \n    \n    user=> (c x = 3; if (x == 2) { println(\"two\"); } else if (x == 3) { println(\"yes!\"); } else { println(\"nope\"); } ) yes!\n\nA single eyelash detaches from the corner of your eye, and drifts into the\nair, smoldering gently. Side effects come at a cost.\n\nMart\u00edn stares intently at your REPL, as if there is something wrong with it,\nand not the world. \u201cThose are... map literals,\u201d he states, as if uncertain.\n\n\u201cThey are, aren\u2019t they?\u201d You agree, delighted.\n\n\u201cThey\u2019re not... ordered maps... are they?\u201d\n\nYou can barely keep from cackling. \u201cThey are, up to sixteen terms.\u201d\n\nWhile Mart\u00edn sputters, you think about adding another else if clause, and\nrealize that your spell requires a more transgressive magic. Double-check your\nkeybindings, clap twice, and trace a protective ward upon the tabletop. What\nyou are about to do is not exactly evil, but might piss something off.\n\n    \n    \n    (defn spaced-sym [x] (when (symbol? x) (let [parts (str/split (name x) #\" \")] (when (< 1 (count parts)) (map symbol parts))))) (defmacro c [& exprs] (rewrite `(do ~@exprs) [spaced-sym s] (spaced-sym s) ... ['#{return ;} _] nil))\n\nMart\u00edn is asking something pedestrian about the reader. \u201cLine terminators are\na social construct,\u201d you offer, gently, because information is often\nuncomfortable. \u201cAs are spaces. It\u2019s... actually in the spec.\u201d You wonder, not\nfor the first time, why Dr. Judith Butler took such an interest in chairing\nthe ISO 10646 working group. They must have had their reasons.\n\n\u201cAll that is left is the for loop itself.\u201d A nontrivial construct, you\nrealize, and prepare to weave another function. Initialization, iteration,\ntermination, evaluation. Trace the sigils in the air and give them form.\n\n    \n    \n    (defn gen-for [exprs body] (let [[[var _ init] test change] (remove '#{(;)} (partition-by '#{;} exprs)) body (mapcat identity body)] `(loop([~var ~init ret# nil] if (~@test) { recur(do(~@change), do(~@body)) } ~'else { ~'return ret# })))) (defmacro c [& exprs] (rewrite `(do ~@exprs) [#{'for} _, seq? expr, map? body] (gen-for expr body) [spaced-sym s] (spaced-sym s) [#{'else} _, #{'if} _, seq? test, map? body] [(Elsif. `(do ~@test) (braces body))] [#{'if} _, seq? test, map? t] [(Cond. [`(do ~@test) (braces t)])] [(a Cond) cond, (a Elsif) elsif] [(update cond :branches conj (:test elsif) (:body elsif))] [(a Cond) cond, #{'else} _, map? body] [(update cond :branches conj :else (braces body))] [symbol? fun, seq? args] [(FnCall. fun args)] [any? a, infix f, any? b] [(FnCall. (infix f) [a b])] (postfix-sym x) (postfix-sym x) [symbol? var, #{'=} _, any? rhs, & more] [`(let [~var ~rhs] ~@more)] ((a FnCall) fc) (cons (:fun fc) (:args fc)) ((a Cond) c) `(cond ~@(:branches c)) ['#{return ;} _] nil))\n\n\u201cMart\u00edn,\u201d you whisper. Dust shimmers in columns above your parentheses. \u201cWe\nare ready now. Would you like to see?\u201d\n\n    \n    \n    user=> (c for (i = 1 ; i < 101 ; i++) { if (i % 15 == 0) { println(\"FizzBuzz\"); } else if (i % 3 == 0) { println(\"Fizz\"); } else if (i % 5 == 0) { println(\"Buzz\"); } else { println(i); }; } ) 1 2 Fizz 4 Buzz Fizz ...\n\nAs the numbers slide upwards along the screen, Mart\u00edn closes his eyes and\nreleases a long, tired breath. One hand rests on the waxed pine of the\nconference room\u2019s table; the other supports his temple. \u201cI\u2019m recommending\nstrong hire of course, but...\u201d He leans in, and speaks more quietly. \u201cDo you\nreally think you\u2019d be happy here?\u201d\n\nYou are blessed with time and power, and need not root in poor soil. Thank\nhim, raise your seed-wing, and let your feet lift gently as you leave.\n\nNext: Unifying the Technical Interview.\n\nWith sincerest thanks to C. Scott Andreas, Andr\u00e9 Arko, David Ascher, Mike\nBernstein, Lita Cho, Nicole Forsgren, Brad Greenlee, Coda Hale, Michael\nHandler, Marc Hedlund, Ben Linsay, Caitie McCaffrey, Dan McKinley, Greg\nPoirier, Marco Rogers, Kelly Shortridge, Tasha, and Leif Walsh.\n\nMax on 2020-09-15\n\nAgain as always in this series: bellissimo! I tap my hat to you, and thank you\nfor this wonderful gift of writing.\n\nNathan DeGruchy on 2020-09-15\n\nThat was an amazing bit of writing! I\u2019m really impressed!\n\nStian on 2020-09-16\n\nPretty sure I could read a whole book series about Vidrun\u2019s interviews.\nAwesome!\n\nJon Kurinsky on 2020-09-16\n\nSuperb. Would also totally buy a book!\n\nCoby on 2020-09-16\n\n> \u201cPeople always complain,\u201d you murmur. \u201cThat Lisps have too many parentheses.\n> What they really mean is that their positions are too far to the left.\u201d\n\nI\u2019ve always thought so too! HA!\n\n(Sorry, fat-fingered my earlier comment. UX is not great on a phone.)\n\nEvan on 2020-09-16\n\nBlessed\n\nAphyr on 2020-09-16\n\n@Coby, cleaned that up for you. Sorry, I really should do a mobile redesign!\n\nJohn on 2020-09-17\n\n> Startled, you lift your hand from the clean-cut slab of spruce which now\n> serves as the lobby bench, and dab gingerly at the corners of your eyes. You\n> are not, you sense, the first woman who has wept in this place.\n\nGoddamn it.\n\nDavid on 2020-09-18\n\nWhat an unexpected joy to get another of these, and to have it be just as\nwonderful as the previous ones. Thanks for making 2020 a little bit less\nappalling.\n\nAnonymous Coward on 2020-09-19\n\nWait, wait, wait, are these all the same witch? Has it been the same witch\nthis entire time? I...did not notice that until now!\n\nLukas on 2020-09-23\n\nThis was an amazing read. Thank you!\n\nDennis on 2020-09-25\n\nMasterful! I couldn\u2019t hold back a wet eye at times.\n\nDaniel on 2020-09-25\n\nEvery one of these is a work of art, the writing as much as the code. Thank\nyou.\n\nhristo on 2020-10-15\n\nI don\u2019t understand whats going on, but I really enjoy it.\n\nPatrick on 2020-10-15\n\nThere was an interesting question on Hacker News about whether this would be\npossible in Mathematica. It\u2019s possible, and surprisingly easy (contrary to my\nprevious comment here which may be in the moderation queue), to get something\ncobbled together with string but working! See\nhttps://github.com/Smaug123/rewriting-technical-\nmathematica/blob/main/c-interpreter.txt . The general method is extensible\neasily enough, although to get proper C parsing will take more than the naive\nmachinery I implemented there.\n\nAphyr on 2020-10-16\n\nOh neat! Nicely done, Patrick. :-)\n\nFor Old Hack on 2021-05-24\n\nThe clear evil of over-loading, I do not think has ever been expressed in\nquite this devilish way. Great job. When is the yacc port coming?\n\nNick on 2021-08-25\n\nThis was hilarious and evil.\n\nThe writing style reminded me of Anathem by Neal Stephenson; have you read\nthat book? If not, I think you would enjoy it just based on the way you\u2019ve\nwritten this.\n\nGene Kim on 2021-09-16\n\nUtterly incredible. Speechless.\n\nSanskar Chand on 2021-11-02\n\nLove it!\n\nOmar Ferrer on 2021-12-22\n\nOk, I\u2019m not a lisper (not yet, just a few small projects in college, a\ngeological era ago), but I have heard wonders of the macro system. This is the\nfirst time I actually see it in action, using it for a small DSL for the\nFizzBuzz exercise. I don\u2019t know what else to say but: Bravo!\n\nValentin on 2022-07-15\n\nWhen they speak of elegance and beauty in code...they didn\u2019t have this in\nmind, but this is surely what they spoke of.\n\n# Post a Comment\n\nCopyright \u00a9 2024 Kyle Kingsbury. Also on: Mastodon and Github.\n\n", "frontpage": false}
