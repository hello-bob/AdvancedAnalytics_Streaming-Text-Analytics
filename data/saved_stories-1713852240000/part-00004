{"aid": "40118374", "title": "Forge: A Tool to Teach Formal Methods", "url": "https://blog.brownplt.org/2024/04/21/forge.html", "domain": "brownplt.org", "votes": 2, "user": "__rito__", "posted_at": "2024-04-22 19:46:00", "comments": 0, "source_title": "Forge: A Tool to Teach Formal Methods", "source_text": "Forge: A Tool to Teach Formal Methods\n\n# The Brown PLT Blog\n\nRSS\n\nCONTACT\n\nGROUP PAGE\n\nPREVIOUS POSTS\n\n  * Forge: A Tool to Teach Formal Methods\n  * Finding and Fixing Standard Misconceptions About Program Behavior\n  * Privacy-Respecting Type Error Telemetry at Scale\n  * Profiling Programming Language Learning\n  * The Examplar Project: A Summary\n  * A Core Calculus for Documents\n  * Observations on the Design of Program Planning Notations for Students\n  * Conceptual Mutation Testing\n  * Generating Programs Trivially: Student Use of Large Language Models\n  * A Grounded Conceptual Model for Ownership Types in Rust\n  * What Happens When Students Switch (Functional) Languages\n  * Typed-Untyped Interactions: A Comparative Analysis\n  * Little Tricky Logics\n  * Identifying Problem Misconceptions\n  * Performance Preconceptions\n  * Structural Versus Pipeline Composition of Higher-Order Functions\n  * Plan Composition Using Higher-Order Functions\n  * Towards a Notional Machine for Runtime Stacks and Scope\n  * Gradual Soundness: Lessons from Static Python\n  * Applying Cognitive Principles to Model-Finding Output\n  * Automated, Targeted Testing of Property-Based Testing Predicates\n  * A Benchmark for Tabular Types\n  * Student Help-Seeking for (Un)Specified Behaviors\n  * Adding Function Transformers to CODAP\n  * Developing Behavioral Concepts of Higher-Order Functions\n  * Adversarial Thinking Early in Post-Secondary Education\n  * Teaching and Assessing Property-Based Testing\n  * Students Testing Without Coercion\n  * Using Design Alternatives to Learn About Data Organizations\n  * What Help Do Students Seek in TA Office Hours?\n  * Combating Misconceptions by Encouraging Example-Writing\n  * The Hidden Perils of Automated Assessment\n  * Mystery Languages\n  * Resugaring Type Rules\n  * Picking Colors for Pyret Error Messages\n  * Can We Crowdsource Language Design?\n  * Crowdsourcing User Studies for Formal Methods\n  * User Studies of Principled Model Finder Output\n  * A Third Perspective on Hygiene\n  * Scope Inference, a.k.a. Resugaring Scope Rules\n  * The PerMission Store\n  * Examining the Privacy Decisions Facing Users\n  * The Pyret Programming Language: Why Pyret?\n  * Resugaring Evaluation Sequences\n  * Slimming Languages by Reducing Sugar\n  * In-flow Peer Review: An Overview\n  * Tierless Programming for SDNs: Differential Analysis\n  * Tierless Programming for SDNs: Verification\n  * Tierless Programming for SDNs: Optimality\n  * Tierless Programming for SDNs: Events\n  * Tierless Programming for Software-Defined Networks\n  * CS Student Work/Sleep Habits Revealed As Possibly Dangerously Normal\n  * Parley: User Studies for Syntax Design\n  * Typechecking Uses of the jQuery Language\n  * Verifying Extensions\u2019 Compliance with Firefox's Private Browsing Mode\n  * From MOOC Students to Researchers\n  * Social Ratings of Application Permissions (Part 4: The Goal)\n  * Social Ratings of Application Permissions (Part 3: Permissions Within a Domain)\n  * Social Ratings of Application Permissions (Part 2: The Effect of Branding)\n  * Social Ratings of Application Permissions (Part 1: Some Basic Conditions)\n  * Aluminum: Principled Scenario Exploration Through Minimality\n  * A Privacy-Affecting Change in Firefox 20\n  * The New MOOR's Law\n  * Essentials of Garbage Collection\n  * (Sub)Typing First Class Field Names\n  * Typing First Class Field Names\n  * S5: Engineering Eval\n  * Progressive Types\n  * Modeling DOM Events\n  * Mechanized LambdaJS\n  * ECMA Announces Official \u03bbJS Adoption\n  * Objects in Scripting Languages\n  * S5: Wat?\n  * Belay Lessons: Smarter Web Programming\n  * S5: Semantics for Accessors\n  * S5: A Semantics for Today's JavaScript\n  * The Essence of JavaScript\n  * ADsafety\n\n## Forge: A Tool to Teach Formal Methods\n\nPosted on 21 April 2024.\n\nFor the past decade we have been studying how best to get students into formal\nmethods (FM). Our focus is not on the 10% or so of students who will\nautomatically gravitate towards it, but on the \u201cother 90%\u201d who don\u2019t view it\nas a fundamental part of their existence (or of the universe). In particular,\nwe decided to infuse FM thinking into the students who go off to build\nsystems. Hence the course, Logic for Systems.\n\nThe bulk of the course focuses on solver-based formal methods. In particular,\nwe began by using Alloy. Alloy comes with numerous benefits: it feels like a\nprogramming language, it can \u201cRun\u201d code like an IDE, it can be used for both\nverification and state-exploration, it comes with a nice visualizer, and it\nallows lightweight exploration with gradual refinement.\n\nUnfortunately, over the years we have also run into various issues with Alloy,\na full catalog of which is in the paper. In response, we have built a new FM\ntool called Forge. Forge is distinguished by the following three features:\n\n  1. Rather than plunging students into the full complexity of Alloy\u2019s language, we instead layer it into a series of language levels.\n\n  2. We use the Sterling visualizer by default, which you can think of as a better version of Alloy\u2019s visualizer. But there\u2019s much more! Sterling allows you to craft custom visualizations. We use this to create domain-specific visualizations. As we show in the paper, the default visualization can produce unhelpful, confusing, or even outright misleading images. Custom visualization takes care of these.\n\n  3. In the past, we have explored property-based testing as a way to get students on the road from programming to FM. In turn, we are asking the question, \u201cWhat does testing look like in this FM setting?\u201d Forge provides preliminary answers, with more to come.\n\nJust to whet your appetite, here is an example of what a default Sterling\noutput looks like (Alloy\u2019s visualizer would produce something similar, with\nfewer distinct colors, making it arguably even harder to see):\n\nHere\u2019s what custom visualization shows:\n\nSee the difference?\n\nFor more details, see the paper. And please try out Forge!\n\n", "frontpage": false}
