{"aid": "40058786", "title": "WG21 (C++ Standard Committee) April 2024 Mailing", "url": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/#mailing2024-04", "domain": "open-std.org", "votes": 1, "user": "quuxplusone", "posted_at": "2024-04-16 23:49:15", "comments": 0, "source_title": "ISO/IEC JTC1/SC22/WG21 - Papers 2024", "source_text": "ISO/IEC JTC1/SC22/WG21 - Papers 2024\n\n# JTC1/SC22/WG21 - Papers 2024\n\nWG21 Number| Title| Author| Document Date| Mailing Date| Previous Version|\nSubgroup| Disposition  \n---|---|---|---|---|---|---|---  \nSD-1| 2024 PL22.16/WG21 document list| Nevin Liber| 2024-04-16| 2024-04  \n  \n# mailing2024-01\n\nWG21 Number| Title| Author| Document Date| Mailing Date| Previous Version|\nSubgroup| Disposition  \n---|---|---|---|---|---|---|---  \n2024-01  \nP1255R11| A view of 0 or 1 elements: views::maybe| Steve Downey| 2024-01-12|\n2024-01| P1255R10| SG9 Ranges,LEWG Library Evolution  \nP1255R12| A view of 0 or 1 elements: views::maybe| Steve Downey| 2024-01-16|\n2024-01| P1255R11| SG9 Ranges,LEWG Library Evolution,LWG Library  \nP1709R5| Graph Library| Phillip Ratzloff, Andrew Lumsdaine, Richard\nDosselmann, Michael Wong, Matthew Galati, Jens Maurer, Domagoj Saric, Jesun\nFiroz, Kevin Deweese| 2024-01-15| 2024-01| P1709R4| SG6 Numerics,SG14 Low\nLatency,SG19 Machine Learning  \nP2019R5| Thread attributes| Corentin Jabot| 2024-01-13| 2024-01| P2019R4| LEWG\nLibrary Evolution  \nP2527R3| std::variant_alternative_index and std::tuple_element_index| Alex\nChristensen| 2024-01-02| 2024-01| P2527R2| LEWG Library Evolution  \nP2664R6| Proposal to extend std::simd with permutation API| Daniel Towner,\nRuslan Arutyunyan| 2024-01-16| 2024-01| P2664R5| SG1 Concurrency and\nParallelism,LEWG Library Evolution  \nP2748R3| Disallow Binding a Returned Glvalue to a Temporary| Brian Bi|\n2024-01-08| 2024-01| P2748R2| CWG Core  \nP2748R4| Disallow Binding a Returned Glvalue to a Temporary| Brian Bi|\n2024-01-08| 2024-01| P2748R3| CWG Core  \nP2835R2| Expose std::atomic_ref's object address| Gonzalo Brito Gadeschi|\n2024-01-10| 2024-01| P2835R1| LEWG Library Evolution  \nP2894R2| Constant evaluation of Contracts| Timur Doumler| 2024-01-11| 2024-01|\nP2894R1| SG21 Contracts  \nP2900R4| Contracts for C++| Joshua Berne, Timur Doumler, Andrzej Krzemie\u0144ski|\n2024-01-16| 2024-01| P2900R3| SG21 Contracts  \nP2932R3| A Principled Approach to Open Design Questions for Contracts| Joshua\nBerne| 2024-01-16| 2024-01| P2932R2| SG21 Contracts  \nP2946R1| A flexible solution to the problems of `noexcept`| Pablo Halpern|\n2024-01-16| 2024-01| P2946R0| EWGI SG17: EWG Incubator,EWG Evolution  \nP2957R1| Contracts and coroutines| Andrzej Krzemie\u0144ski, Iain Sandoe|\n2024-01-13| 2024-01| P2957R0| SG21 Contracts  \nP2963R1| Ordering of constraints involving fold expressions| Corentin Jabot|\n2024-01-13| 2024-01| P2963R0| EWG Evolution  \nP2988R1| std::optional<T&>| Steve Downey, Peter Sommerlad| 2024-01-05|\n2024-01| P2988R0| LEWG Library Evolution,LWG Library  \nP3044R0| sub-string_view from string| Michael Florian Hava| 2024-01-16|\n2024-01| LEWG Library Evolution  \nP3054R0| 2023-12 Library Evolution Poll Outcomes| Inbal Levi, Fabio Fracassi,\nBen Craig, Billy Baker, Nevin Liber, Corentin Jabot| 2024-01-13| 2024-01| All\nof WG21  \nP3079R0| Should ignore and observe exist for constant evaluation of\ncontracts?| Oliver Rosten| 2024-01-11| 2024-01| SG21 Contracts  \nP3084R0| Slides for LEWG views::maybe 20240109| Steve Downey| 2024-01-12|\n2024-01| LEWG Library Evolution  \nP3086R0| Proxy: A Pointer-Semantics-Based Polymorphism Library| Mingxin Wang|\n2024-01-16| 2024-01| LEWGI SG18: LEWG Incubator,LEWG Library Evolution  \nP3087R0| Make direct-initialization for enumeration types at least as\npermissive as direct-list-initialization| Jan Schultke| 2024-01-16| 2024-01|\nEWGI SG17: EWG Incubator  \n  \n# mailing2024-02 pre-Tokyo\n\nWG21 Number| Title| Author| Document Date| Mailing Date| Previous Version|\nSubgroup| Disposition  \n---|---|---|---|---|---|---|---  \n2024-02 pre-Tokyo  \nP0493R5| Atomic maximum/minimum| Al Grant, Al Grant, Bronek Kozicki, Tim\nNorthover| 2024-02-12| 2024-02| P0493R4| SG1 Concurrency and Parallelism,LWG\nLibrary  \nP0843R10| inplace_vector| Gonzalo Brito Gadeschi, Timur Doumler, Nevin Liber,\nDavid Sankel| 2024-02-12| 2024-02| P0843R9| LWG Library  \nP0876R15| fiber_context - fibers without scheduler| Oliver Kowalke, Nat\nGoodspeed| 2024-02-14| 2024-02| P0876R14| CWG Core,LWG Library  \nP1061R7| Structured Bindings can introduce a Pack| Barry Revzin, Jonathan\nWakely| 2024-02-15| 2024-02| P1061R6| EWG Evolution  \nP1144R10| std::is_trivially_relocatable| Arthur O'Dwyer| 2024-02-15| 2024-02|\nP1144R9| EWG Evolution,LEWG Library Evolution  \nP1729R4| Text Parsing| Elias Kosunen, Victor Zverovich| 2024-02-11| 2024-02|\nP1729R3| SG9 Ranges,SG16 Unicode,LEWG Library Evolution  \nP2047R7| An allocator-aware optional type| Nina Ranns, Pablo Halpern Ville\nVoutilainen| 2024-02-15| 2024-02| P2047R6| LEWG Library Evolution  \nP2075R4| Philox as an extension of the C++ RNG engines| Ilya Burylov, Ruslan\nArutyunyan; Andrey Nikolaev; Alina Elizarova; Pavel Dyakov; John Salmon|\n2024-02-14| 2024-02| P2075R3| LEWG Library Evolution  \nP2249R5| Mixed comparisons for smart pointers| Giuseppe D'Angelo| 2024-02-15|\n2024-02| P2249R4| LEWG Library Evolution  \nP2249R6| Mixed comparisons for smart pointers| Giuseppe D'Angelo| 2024-02-15|\n2024-02| P2249R5| LEWG Library Evolution  \nP2299R4| `mdspan`s of All Dynamic Extents| Bryce Adelstein Lelbach|\n2024-02-15| 2024-02| P2299R3| LEWG Library Evolution  \nP2389R0| `dextents` Index Type Parameter| Bryce Adelstein Lelbach| 2024-02-15|\n2024-02| LEWG Library Evolution  \nP2422R0| Remove nodiscard annotations from the standard library specification|\nVille Voutilainen| 2024-02-09| 2024-02| LEWG Library Evolution,LWG Library  \nP2643R2| Improving C++ concurrency features| Gonzalo Brito Gadeschi, Olivier\nGiroux, Thomas Rodgers| 2024-01-31| 2024-02| P2643R1| LEWG Library Evolution  \nP2686R3| constexpr structured bindings and references to constexpr variables|\nCorentin Jabot, Brian Bi| 2024-02-15| 2024-02| P2686R2| EWG Evolution,CWG Core  \nP2688R1| Pattern Matching: `match` Expression| Michael Park| 2024-02-15|\n2024-02| P2688R0| EWG Evolution  \nP2721R0| Deprecating function| Michael Florian Hava| 2024-02-14| 2024-02| LEWG\nLibrary Evolution  \nP2727R4| std::iterator_interface| Zach Laine| 2024-02-05| 2024-02| P2727R3|\nLEWG Library Evolution  \nP2746R4| Deprecate and Replace Fenv Rounding Modes| Hans Boehm| 2024-02-15|\n2024-02| P2746R3| SG6 Numerics,LEWG Library Evolution  \nP2758R2| Emitting messages at compile time| Barry Revzin| 2024-02-15| 2024-02|\nP2758R1| EWG Evolution,LEWG Library Evolution  \nP2781R4| std::constexpr_wrapper| Zach Laine, Matthias Kretz| 2024-02-11|\n2024-02| P2781R3| LEWG Library Evolution  \nP2786R4| Trivial Relocatability For C++26| Mungo Gill, Alisdair Meredith|\n2024-02-09| 2024-02| P2786R3| EWG Evolution,LEWG Library Evolution  \nP2822R0| Providing user control of associated entities of class types| Lewis\nBaker| 2024-02-15| 2024-02| EWG Evolution  \nP2835R3| Expose std::atomic_ref's object address| Gonzalo Brito Gadeschi|\n2024-01-31| 2024-02| P2835R2| LEWG Library Evolution  \nP2845R6| Formatting of std::filesystem::path| Victor Zverovich| 2024-01-27|\n2024-02| P2845R5| SG16 Unicode,LEWG Library Evolution,LWG Library  \nP2863R4| Review Annex D for C++26| Alisdair Meredith| 2024-02-15| 2024-02|\nP2863R3| EWG Evolution,LEWG Library Evolution  \nP2875R3| Undeprecate `polymorphic_allocator::destroy` For C++26| Alisdair\nMeredith| 2024-02-15| 2024-02| P2875R2| LEWG Library Evolution  \nP2893R2| Variadic Friends| Jody Hagins, Arthur O'Dwyer| 2024-02-12| 2024-02|\nP2893R1| CWG Core  \nP2900R5| Contracts for C++| Joshua Berne, Timur Doumler, Andrzej Krzemie\u0144ski|\n2024-02-15| 2024-02| P2900R4| EWG Evolution,LEWG Library Evolution  \nP2927R1| Observing exceptions stored in exception_ptr| Gor Nishanov, Arthur\nO'Dwyer| 2024-02-15| 2024-02| P2927R0| LEWG Library Evolution  \nP2964R0| Allowing user-defined types in std::simd| Daniel Towner, Ruslan\nArutyunyan| 2024-02-09| 2024-02| SG1 Concurrency and Parallelism,LEWG Library\nEvolution  \nP2988R2| std::optional\\| Steve Downey, Peter Sommerlad| 2024-02-15| 2024-02|\nP2988R1| LEWG Library Evolution,LWG Library  \nP2988R3| std::optional<T&>| Steve Downey, Peter Sommerlad| 2024-02-15|\n2024-02| P2988R2| LEWG Library Evolution,LWG Library  \nP2989R1| A Simple Approach to Universal Template Parameters| Corentin Jabot,\nGa\u0161per A\u017eman| 2024-02-15| 2024-02| P2989R0| EWG Evolution  \nP2992R1| Attribute [[discard(\"reason\")]]| Giuseppe D'Angelo| 2024-02-02|\n2024-02| P2992R0| SG22 Compatibility,EWG Evolution  \nP2994R1| On the Naming of Packs| Barry Revzin| 2024-02-14| 2024-02| P2994R0|\nEWG Evolution  \nP2996R2| Reflection for C++26| Barry Revzin, Wyatt Childers, Peter Dimov,\nAndrew Sutton, Faisal Vali, Daveed Vandevoorde, Dan Katz| 2024-02-15| 2024-02|\nP2996R1| EWG Evolution  \nP3002R1| Policies for Using Allocators in New Library Classes| Pablo Halpern|\n2024-02-15| 2024-02| P3002R0| LEWG Library Evolution  \nP3004R0| Principled Design for WG21| John Lakos, Harold Bott, Mungo Gill, Lori\nHughes, Alisdair Meredith, Bill Chapman, Mike Giroux, Oleg Subbotin|\n2024-02-15| 2024-02| EWG Evolution,LEWG Library Evolution  \nP3005R0| Memorializing Principled-Design Policies for WG21| John Lakos, Harold\nBott, Bill Chapman, Mungo Gill, Mike Giroux, Alisdair Meredith, Oleg Subbotin|\n2024-02-14| 2024-02| EWG Evolution,LEWG Library Evolution  \nP3008R1| Atomic floating-point min/max| Gonzalo Brito Gadeschi, David Sankel|\n2024-01-31| 2024-02| P3008R0| SG6 Numerics,LEWG Library Evolution  \nP3016R2| Resolve inconsistencies in begin/end for valarray and braced\ninitializer lists| Arthur O'Dwyer| 2024-02-12| 2024-02| P3016R1| LEWG Library\nEvolution  \nP3019R4| Vocabulary Types for Composite Class Design| Jonathan Coe, Antony\nPeacock, Sean Parent| 2024-02-05| 2024-02| P3019R3| LEWG Library Evolution  \nP3019R5| Vocabulary Types for Composite Class Design| Jonathan Coe, Antony\nPeacock, Sean Parent| 2024-02-07| 2024-02| P3019R4| LEWG Library Evolution  \nP3019R6| Vocabulary Types for Composite Class Design| Jonathan Coe, Antony\nPeacock, Sean Parent| 2024-02-11| 2024-02| P3019R5| LEWG Library Evolution  \nP3032R0| Less transient constexpr allocation| Barry Revzin| 2024-02-13|\n2024-02| EWG Evolution  \nP3045R0| Quantities and units library| Mateusz Pusz, Dominik Berner, Johel\nErnesto Guerrero Pe\u00f1a, Charles Hogg, Nicolas Holthaus, Roth Michaels, Vincent\nReverdy| 2024-02-15| 2024-02| SG6 Numerics,SG16 Unicode,LEWGI SG18: LEWG\nIncubator  \nP3047R0| Remove deprecated namespace `relops` from C++26| Alisdair Meredith|\n2024-02-15| 2024-02| LEWG Library Evolution  \nP3052R1| view_interface::at()| Hewill Kang| 2024-01-30| 2024-02| P3052R0| SG9\nRanges,SG23 Safety and Security  \nP3055R1| Relax wording to permit relocation optimizations in the STL| Arthur\nO'Dwyer| 2024-02-12| 2024-02| P3055R0| LEWG Library Evolution  \nP3060R1| Add std::views::upto(n)| Weile Wei, Zhihao Yuan| 2024-02-15| 2024-02|\nP3060R0| SG9 Ranges,LEWG Library Evolution,LWG Library  \nP3068R0| Allowing exception throwing in constant-evaluation.| Hana Dus\u00edkov\u00e1|\n2024-02-11| 2024-02| EWG Evolution  \nP3072R1| Hassle-free thread attributes| Zhihao Yuan| 2024-02-15| 2024-02|\nP3072R0| LEWG Library Evolution  \nP3073R0| Remove evaluation_undefined_behavior and will_continue from the\nContracts MVP| Timur Doumler, Ville Voutilainen| 2024-01-27| 2024-02| SG21\nContracts  \nP3074R1| std::uninitialized<T>| Barry Revzin| 2024-01-30| 2024-02| P3074R0|\nEWG Evolution  \nP3074R2| std::uninitialized<T>| Barry Revzin| 2024-02-13| 2024-02| P3074R1|\nEWG Evolution  \nP3085R0| `noexcept` policy for SD-9 (throws nothing)| Ben Craig| 2024-02-10|\n2024-02| LEWG Library Evolution  \nP3088R0| Attributes for contract assertions| Timur Doumler, Joshua Berne|\n2024-02-12| 2024-02| SG21 Contracts  \nP3088R1| Attributes for contract assertions| Timur Doumler, Joshua Berne|\n2024-02-13| 2024-02| P3088R0| SG21 Contracts  \nP3090R0| std::execution Introduction| Inbal Levi, Eric Niebler| 2024-02-14|\n2024-02| LEWG Library Evolution  \nP3091R0| Better lookups for `map` and `unordered_map`| Pablo Halpern|\n2024-02-06| 2024-02| LEWGI SG18: LEWG Incubator  \nP3092R0| Modules ABI requirement| Chuanqi Xu| 2024-01-29| 2024-02| SG15\nTooling,ARG ABI Review Group  \nP3093R0| Attributes on expressions| Giuseppe D'Angelo| 2024-02-02| 2024-02|\nSG22 Compatibility,EWG Evolution  \nP3094R0| std::basic_fixed_string| Mateusz Pusz| 2024-02-05| 2024-02| SG16\nUnicode,LEWGI SG18: LEWG Incubator,LEWG Library Evolution  \nP3095R0| ABI comparison with reflection| Saksham Sharma| 2024-02-15| 2024-02|\nSG7 Reflection,LEWG Library Evolution  \nP3096R0| Function Parameter Reflection in Reflection for C++26| Adam Lach,\nWalter Genovese| 2024-02-14| 2024-02| SG7 Reflection  \nP3101R0| Differentiating potentially throwing and nonthrowing violation\nhandlers| Ran Regev, Ga\u0161per A\u017eman| 2024-01-22| 2024-02| SG21 Contracts  \nP3102R0| Refining Contract Violation Detection Modes| Joshua Berne|\n2024-02-06| 2024-02| SG21 Contracts  \nP3103R0| More bitset operations| Jan Schultke| 2024-01-25| 2024-02| LEWGI\nSG18: LEWG Incubator  \nP3104R0| Bit permutations| Jan Schultke| 2024-01-26| 2024-02| LEWGI SG18: LEWG\nIncubator  \nP3105R0| constexpr std::uncaught_exceptions()| Jan Schultke| 2024-01-26|\n2024-02| LEWGI SG18: LEWG Incubator  \nP3106R0| Clarifying rules for brace elision in aggregate initialization| James\nTouton| 2024-02-03| 2024-02| CWG Core  \nP3107R0| Permit an efficient implementation of std::print| Victor Zverovich|\n2024-02-03| 2024-02| LEWG Library Evolution  \nP3109R0| A plan for std::execution for C++26| Lewis Baker, Eric Niebler, Kirk\nShoop, Lucian Radu| 2024-02-12| 2024-02| LEWG Library Evolution  \nP3110R0| Array element initialization via pattern expansion| James Touton|\n2024-02-05| 2024-02| EWGI SG17: EWG Incubator,EWG Evolution  \nP3112R0| Specify Constructor of std::nullopt_t| Brian Bi| 2024-02-14| 2024-02|\nLEWG Library Evolution,LWG Library  \nP3113R0| Slides: Contract assertions, the noexcept operator, and deduced\nexception specifications| Timur Doumler| 2024-02-02| 2024-02| SG21 Contracts  \nP3114R0| noexcept(contract_assert(_)) -- slides| Andrzej Krzemie\u0144ski|\n2024-02-02| 2024-02| SG21 Contracts  \nP3115R0| Data Member, Variable and Alias Declarations Can Introduce A Pack|\nCorentin Jabot| 2024-02-15| 2024-02| EWG Evolution  \nP3116R0| Policy for explicit| Zach Laine| 2024-02-08| 2024-02| LEWG Library\nEvolution  \nP3117R0| Extending Conditionally Borrowed| Zach Laine, Barry Revzin|\n2024-02-15| 2024-02| SG9 Ranges,LEWG Library Evolution  \nP3122R0| [[nodiscard]] should be Recommended Practice| Jonathan Wakely|\n2024-02-15| 2024-02| LEWG Library Evolution,LWG Library  \nP3123R0| 2024-02 Library Evolution Polls| Inbal Levi, Fabio Fracassi, Ben\nCraig, Nevin Liber, Billy Baker, Corentin Jabot| 2024-02-15| 2024-02| LEWG\nLibrary Evolution  \nP3126R0| Graph Library: Overview| Phil Ratzloff, Andrew Lumsdaine| 2024-02-12|\n2024-02| SG14 Low Latency,SG19 Machine Learning,LEWG Library Evolution  \nP3127R0| Graph Library: Background and Terminology| Phil Ratzloff, Andrew\nLumsdaine| 2024-02-12| 2024-02| SG14 Low Latency,SG19 Machine Learning,LEWG\nLibrary Evolution  \nP3128R0| Graph Library: Algorithms| Phil Ratzloff, Andrew Lumsdaine|\n2024-02-12| 2024-02| SG14 Low Latency,SG19 Machine Learning,LEWG Library\nEvolution  \nP3129R0| Graph Library: Views| Phil Ratzloff, Andrew Lumsdaine| 2024-02-12|\n2024-02| SG14 Low Latency,SG19 Machine Learning,LEWG Library Evolution  \nP3130R0| Graph Library: Graph Container Interface| Phil Ratzloff, Andrew\nLumsdaine| 2024-02-12| 2024-02| SG6 Numerics,SG14 Low Latency,SG19 Machine\nLearning,LEWG Library Evolution  \nP3131R0| Graph Library: Graph Containers| Phil Ratzloff, Andrew Lumsdaine|\n2024-02-12| 2024-02| SG6 Numerics,SG14 Low Latency,SG19 Machine Learning,LEWG\nLibrary Evolution  \nP3133R0| Fast first-factor finding function| Chip Hogg| 2024-02-14| 2024-02|\nSG6 Numerics,LEWG Library Evolution  \nP3135R0| Hazard Pointer Extensions| Maged Michael, Michael Wong, Paul\nMcKenney| 2024-02-11| 2024-02| SG1 Concurrency and Parallelism,LEWG Library\nEvolution,LWG Library  \nP3136R0| Retiring niebloids| Tim Song| 2024-02-15| 2024-02| SG9 Ranges  \nP3137R0| views::to_input| Tim Song| 2024-02-15| 2024-02| SG9 Ranges  \nP3138R0| views::cache_last| Tim Song| 2024-02-15| 2024-02| SG1 Concurrency and\nParallelism,SG9 Ranges  \nP3140R0| std::int_least128_t| Jan Schultke| 2024-02-14| 2024-02| EWGI SG17:\nEWG Incubator,LEWGI SG18: LEWG Incubator  \nP3142R0| Printing Blank Lines with println| Alan Talbot| 2024-02-12| 2024-02|\nLEWG Library Evolution  \nP3143R0| An in-depth walk through of the example in P3090R0| Lewis Baker|\n2024-02-13| 2024-02| LEWG Library Evolution  \nP3144R0| Deprecate Delete of Incomplete Class Type| Alisdair Meredith, Mingo\nGill, John Lakos| 2024-02-15| 2024-02| SG12 Undefined and Unspecified\nBehavior,EWGI SG17: EWG Incubator  \nP3146R0| Clarifying std::variant converting construction| Giuseppe D'Angelo|\n2024-02-13| 2024-02| LEWG Library Evolution,LWG Library  \nP3147R0| A Direction for Vector| Alan Talbot| 2024-02-14| 2024-02| LEWG\nLibrary Evolution  \nP3148R0| Formatting of chrono Time Values| Alan Talbot| 2024-02-14| 2024-02|\nLEWG Library Evolution  \nP3149R0| async_scope -- Creating scopes for non-sequential concurrency| Ian\nPetersen, J\u00e1n Ondru\u0161ek; Jessica Wong; Kirk Shoop; Lee Howes; Lucian Radu\nTeodorescu;| 2024-02-15| 2024-02| SG1 Concurrency and Parallelism,LEWG Library\nEvolution  \nP3150R0| SG14: Low Latency/Games/Embedded/Financial Trading virtual Meeting\nMinutes 2023/12/13-2024/2/14| Michael Wong| 2024-02-15| 2024-02| SG14 Low\nLatency  \nP3151R0| SG19: Machine Learning virtual Meeting Minutes to\n2023/12/14-2024/02/8| Michael Wong| 2024-02-15| 2024-02| SG19 Machine Learning  \nP3153R0| An allocator-aware variant type| Nina Ranns, Pablo Halpern, Ville\nVoutilainen| 2024-02-15| 2024-02| LEWG Library Evolution  \nP3154R0| Deprecating signed character types in iostreams| Elias Kosunen|\n2024-02-15| 2024-02| SG16 Unicode,LEWG Library Evolution  \nP3155R0| noexcept policy for SD-9 (The Lakos Rule)| Timur Doumler, John Lakos|\n2024-02-15| 2024-02| LEWG Library Evolution  \nP3156R0| empty_checkable_range| Hewill Kang| 2024-02-15| 2024-02| LEWGI SG18:\nLEWG Incubator  \nP3157R0| Generative Extensions for Reflection| Andrei Alexandrescu, Bryce\nLelbach, Michael Garland| 2024-02-15| 2024-02| SG7 Reflection  \nP3158R0| Headless Template Template Parameters| James Touton| 2024-02-15|\n2024-02| EWGI SG17: EWG Incubator,EWG Evolution  \nP3160R0| An allocator-aware `inplace_vector`| Pablo Halpern| 2024-02-15|\n2024-02| LEWG Library Evolution  \nP3300R0| C++ Asynchronous Parallel Algorithms| Bryce Adelstein Lelbach|\n2024-02-15| 2024-02| SG1 Concurrency and Parallelism,LEWG Library Evolution  \n  \n# mailing2024-04 post-Tokyo\n\nWG21 Number| Title| Author| Document Date| Mailing Date| Previous Version|\nSubgroup| Disposition  \n---|---|---|---|---|---|---|---  \n2024-04 post-Tokyo  \nN4974| 2024-11 Wroclaw meeting information| Herb Sutter| 2024-03-18| 2024-04|\nAll of WG21  \nN4975| 2024 WG21 admin telecon meetings| Herb Sutter| 2024-02-21| 2024-04| All\nof WG21  \nN4976| WG21 agenda: 18-23 March 2024, Tokyo, Japan| John Spicer| 2024-02-26|\n2024-04| All of WG21  \nN4978| WG21 2024-03 Admin telecon minutes| Nina Ranns| 2024-03-11| 2024-04|\nAll of WG21  \nN4979| Hagenberg Meeting Invitation and Information| Peter Kulczycki, Michael\nHava| 2024-03-22| 2024-04| All of WG21  \nN4980| WG21 2024-03 Tokyo Minutes of Meeting| Nina Ranns| 2024-04-05| 2024-04|\nAll of WG21  \nN4981| Working Draft, Programming Languages -- C++| Thomas K\u00f6ppe| 2024-04-16|\n2024-04| N4971| All of WG21  \nN4982| Editors' Report, Programming Languages -- C++| Thomas K\u00f6ppe|\n2024-04-16| 2024-04| All of WG21  \nP0260R8| C++ Concurrent Queues| Detlef Vollmann, Lawrence Crowl, Chris Mysen,\nGor Nishanov| 2024-03-09| 2024-04| P0260R7| SG1 Concurrency and\nParallelism,LEWG Library Evolution  \nP0562R1| Initialization List Symmetry| Alan Talbot| 2024-03-22| 2024-04|\nP0562R0| EWG Evolution  \nP0562R2| Trailing Commas in Base-clauses and Ctor-initializers| Alan Talbot|\n2024-04-15| 2024-04| P0562R1| CWG Core  \nP0609R3| Attributes for Structured Bindings| Aaron Ballman| 2024-03-21|\n2024-04| P0609R2| CWG Core| Adopted 2024-03  \nP0843R11| inplace_vector| Gonzalo Brito Gadeschi, Timur Doumler, Nevin Liber,\nDavid Sankel| 2024-03-22| 2024-04| P0843R10| LWG Library  \nP0876R16| fiber_context - fibers without scheduler| Oliver Kowalke, Nat\nGoodspeed| 2024-03-22| 2024-04| P0876R15| EWG Evolution,CWG Core,LWG Library  \nP1061R8| Structured Bindings can introduce a Pack| Barry Revzin, Jonathan\nWakely| 2024-04-14| 2024-04| P1061R7| CWG Core  \nP1068R11| Vector API for random number generation| Ilya Burylov, Pavel Dyakov,\nRuslan Arutyunyan, Andrey Nikolaev, Alina Elizarova| 2024-04-02| 2024-04|\nP1068R10| LWG Library| Adopted 2024-03  \nP1317R1| Remove return type deduction in std::apply| Aaryaman Sagar, Eric\nNiebler| 2024-04-04| 2024-04| P1317R0| LEWG Library Evolution  \nP2034R3| Partially Mutable Lambda Captures| Ryan McDougall, Nestor Subiron\nMontoro| 2024-03-20| 2024-04| P2034R2| EWGI SG17: EWG Incubator,EWG\nEvolution,CWG Core  \nP2075R5| Philox as an extension of the C++ RNG engines| Ilya Burylov, Ruslan\nArutyunyan; Andrey Nikolaev; Alina Elizarova; Pavel Dyakov; John Salmon|\n2024-04-01| 2024-04| P2075R4| LEWG Library Evolution,LWG Library  \nP2127R0| Making C++ Software Allocator Aware| Pablo Halpern, John Lakos|\n2024-03-12| 2024-04| LEWG Library Evolution  \nP2135R1| P2055R1: A Relaxed Guide to memory_order_relaxed| Paul E. McKenney,\nHans Boehm and David Goldblatt| 2024-04-10| 2024-04| P2135R0| SG1 Concurrency\nand Parallelism  \nP2141R2| Aggregates are named tuples| Antony Polukhin| 2024-03-06| 2024-04|\nP2141R1| LEWG Library Evolution,LWG Library  \nP2248R8| Enabling list-initialization for algorithms| Giuseppe D'Angelo|\n2024-03-20| 2024-04| P2248R7| LWG Library| Adopted 2024-03  \nP2300R8| `std::execution`| Eric Niebler, Micha\u0142 Dominiak, Georgy Evtushenko,\nLewis Baker, Lucian Radu Teodorescu, Lee Howes, Kirk Shoop, Michael Garland,\nBryce Adelstein Lelbach| 2024-04-02| 2024-04| P2300R7| LEWG Library\nEvolution,LWG Library  \nP2300R9| `std::execution`| Eric Niebler, Micha\u0142 Dominiak, Georgy Evtushenko,\nLewis Baker, Lucian Radu Teodorescu, Lee Howes, Kirk Shoop, Michael Garland,\nBryce Adelstein Lelbach| 2024-04-02| 2024-04| P2300R8| LEWG Library\nEvolution,LWG Library  \nP2355R2| Postfix fold expressions| S. Davis Herring| 2024-03-21| 2024-04|\nP2355R1| EWG Evolution  \nP2389R1| `dextents` Index Type Parameter| Bryce Adelstein Lelbach, Mark\nHoemmen| 2024-04-12| 2024-04| P2389R0| LEWG Library Evolution  \nP2414R3| Pointer lifetime-end zap proposed solutions| Paul E. McKenney, Maged\nMichael, Jens Maurer, Peter Sewell, Martin Uecker, Hans Boehm, Hubert Tong,\nNiall Douglas, Thomas Rodgers, Will Deacon, Michael Wong, David Goldblatt,\nKostya Serebryany, Anthony Williams, Tom Scogland, and JF Bastien| 2024-04-08|\n2024-04| P2414R2| SG1 Concurrency and Parallelism,EWG Evolution  \nP2542R8| views::concat| Hui Xie, S. Levent Yilmaz| 2024-03-20| 2024-04|\nP2542R7| SG9 Ranges,LEWG Library Evolution,LWG Library| Adopted 2024-03  \nP2573R2| = delete(\"should have a reason\");| Yihe Li| 2024-03-22| 2024-04|\nP2573R1| CWG Core| Adopted 2024-03  \nP2591R5| Concatenation of strings and string views| Giuseppe D'Angelo|\n2024-03-20| 2024-04| P2591R4| LWG Library| Adopted 2024-03  \nP2746R5| Deprecate and Replace Fenv Rounding Modes| Hans Boehm| 2024-04-16|\n2024-04| P2746R4| SG6 Numerics,LEWG Library Evolution  \nP2747R2| constexpr placement new| Barry Revzin| 2024-03-19| 2024-04| P2747R1|\nEWG Evolution  \nP2748R5| Disallow Binding a Returned Glvalue to a Temporary| Brian Bi|\n2024-03-23| 2024-04| P2748R4| CWG Core| Adopted 2024-03  \nP2755R1| A Bold Plan for a Complete Contracts Facility| Joshua Berne, Jake\nFevold, John Lakos| 2024-04-11| 2024-04| P2755R0| SG21 Contracts  \nP2786R5| Trivial Relocatability For C++26| Mungo Gill, Alisdair Meredith|\n2024-04-09| 2024-04| P2786R4| EWG Evolution,LEWG Library Evolution  \nP2795R5| Erroneous behaviour for uninitialized reads| Thomas K\u00f6ppe|\n2024-03-22| 2024-04| P2795R4| SG12 Undefined and Unspecified Behavior,SG23\nSafety and Security,EWG Evolution,CWG Core,LWG Library| Adopted 2024-03  \nP2809R3| Trivial infinite loops are not Undefined Behavior| JF Bastien|\n2024-03-21| 2024-04| P2809R2| SG22 Compatibility,CWG Core| Adopted 2024-03  \nP2810R4| is_debugger_present is_replaceable| Ren\u00e9 Ferdinand Rivera Morell, Ben\nCraig| 2024-03-21| 2024-04| P2810R3| LWG Library| Adopted 2024-03  \nP2825R1| Overload Resolution hook: declcall(unevaluated-postfix-expression)|\nGa\u0161per A\u017eman| 2024-03-21| 2024-04| P2825R0| EWGI SG17: EWG Incubator,EWG\nEvolution  \nP2825R2| Overload Resolution hook: declcall(unevaluated-postfix-expression)|\nGa\u0161per A\u017eman| 2024-04-16| 2024-04| P2825R1| EWG Evolution  \nP2826R2| Replacement functions| Ga\u0161per A\u017eman| 2024-03-18| 2024-04| P2826R1|\nEWG Evolution  \nP2830R2| Standardized Constexpr Type Ordering| Ga\u0161per A\u017eman, Nathan Nichols|\n2024-03-18| 2024-04| P2830R1| EWG Evolution  \nP2830R3| Standardized Constexpr Type Ordering| Ga\u0161per A\u017eman, Nathan Nichols|\n2024-04-16| 2024-04| P2830R2| EWG Evolution  \nP2841R2| Concept and variable-template template-parameters| Corentin Jabot,\nGa\u0161per A\u017eman| 2024-02-22| 2024-04| P2841R1| EWG Evolution  \nP2845R7| Formatting of std::filesystem::path| Victor Zverovich| 2024-03-10|\n2024-04| P2845R6| LEWG Library Evolution,LWG Library  \nP2845R8| Formatting of std::filesystem::path| Victor Zverovich| 2024-03-21|\n2024-04| P2845R7| LWG Library| Adopted 2024-03  \nP2855R1| Member customization points for Senders and Receivers| Ville\nVoutilainen| 2024-02-22| 2024-04| P2855R0| LEWG Library Evolution  \nP2863R5| Review Annex D for C++26| Alisdair Meredith| 2024-04-16| 2024-04|\nP2863R4| EWG Evolution,LEWG Library Evolution  \nP2866R2| Remove Deprecated Volatile Features From C++26| Alisdair Meredith|\n2024-04-16| 2024-04| P2866R1| SG1 Concurrency and Parallelism,LEWG Library\nEvolution  \nP2867R2| Remove Deprecated strstreams From C++26| Alisdair Meredith|\n2024-03-20| 2024-04| P2867R1| LWG Library| Adopted 2024-03  \nP2869R4| Remove Deprecated `shared_ptr` Atomic Access APIs From C++26|\nAlisdair Meredith| 2024-03-21| 2024-04| P2869R3| LWG Library| Adopted 2024-03  \nP2872R3| Remove `wstring_convert` From C++26| Alisdair Meredith| 2024-03-20|\n2024-04| P2872R2| LWG Library| Adopted 2024-03  \nP2873R1| Remove Deprecated locale category facets for Unicode from C++26|\nAlisdair Meredith, Tom Honermann| 2024-04-08| 2024-04| P2873R0| LEWG Library\nEvolution  \nP2875R4| Undeprecate `polymorphic_allocator::destroy` For C++26| Alisdair\nMeredith| 2024-03-21| 2024-04| P2875R3| LWG Library| Adopted 2024-03  \nP2893R3| Variadic Friends| Jody Hagins, Arthur O'Dwyer| 2024-03-22| 2024-04|\nP2893R2| CWG Core| Adopted 2024-03  \nP2900R6| Contracts for C++| Joshua Berne, Timur Doumler, Andrzej Krzemie\u0144ski|\n2024-02-29| 2024-04| P2900R5| EWG Evolution,LEWG Library Evolution  \nP2927R2| Observing exceptions stored in exception_ptr| Gor Nishanov, Arthur\nO'Dwyer| 2024-04-16| 2024-04| P2927R1| LEWG Library Evolution  \nP2944R3| Comparisons for reference_wrapper| Barry Revzin| 2024-03-21| 2024-04|\nP2944R2| EWG Evolution,LEWG Library Evolution| Adopted 2024-03  \nP2977R1| Build database files| Ben Boeckel, Daniel Ruoso| 2024-03-25| 2024-04|\nP2977R0| SG15 Tooling  \nP2988R4| std::optional<T&>| Steve Downey, Peter Sommerlad| 2024-04-16|\n2024-04| P2988R3| LEWG Library Evolution,LWG Library  \nP2993R0| Constrained Numbers| Luke Valenty| 2024-03-21| 2024-04| SG6\nNumerics,SG23 Safety and Security  \nP2997R1| Removing the common reference requirement from the indirectly\ninvocable concepts| Barry Revzin, Tim Song| 2024-03-22| 2024-04| P2997R0| SG9\nRanges,LEWG Library Evolution  \nP3008R2| Atomic floating-point min/max| Gonzalo Brito Gadeschi, David Sankel|\n2024-03-19| 2024-04| P3008R1| LEWG Library Evolution  \nP3016R3| Resolve inconsistencies in begin/end for valarray and braced\ninitializer lists| Arthur O'Dwyer| 2024-03-22| 2024-04| P3016R2| LWG Library  \nP3019R7| Vocabulary Types for Composite Class Design| Jonathan Coe, Antony\nPeacock, Sean Parent| 2024-03-19| 2024-04| P3019R6| LEWG Library Evolution,LWG\nLibrary  \nP3019R8| Vocabulary Types for Composite Class Design| Jonathan Coe, Antony\nPeacock, Sean Parent| 2024-03-22| 2024-04| P3019R7| LEWG Library Evolution,LWG\nLibrary  \nP3029R1| Better mdspan's CTAD| Hewill Kang| 2024-03-21| 2024-04| P3029R0| LEWG\nLibrary Evolution| Adopted 2024-03  \nP3032R1| Less transient constexpr allocation| Barry Revzin| 2024-03-22|\n2024-04| P3032R0| EWG Evolution  \nP3032R2| Less transient constexpr allocation| Barry Revzin| 2024-04-16|\n2024-04| P3032R1| EWG Evolution  \nP3034R1| Module Declarations Shouldn't be Macros| Michael Spencer| 2024-03-21|\n2024-04| P3034R0| All of WG21| Adopted 2024-03  \nP3037R1| constexpr std::shared_ptr| Paul Keir| 2024-03-05| 2024-04| P3037R0|\nSG7 Reflection,LEWG Library Evolution  \nP3049R0| node-handles for lists| Michael Florian Hava| 2024-04-03| 2024-04|\nLEWG Library Evolution  \nP3050R1| Fix C++26 by optimizing linalg::conjugated for noncomplex value\ntypes| Mark Hoemmen| 2024-04-08| 2024-04| P3050R0| LEWG Library Evolution  \nP3064R0| How to Avoid OOTA Without Really Trying| Paul E. McKenney, Alan\nStern, Michael Wong, and Maged Michael| 2024-04-05| 2024-04| SG1 Concurrency\nand Parallelism  \nP3068R1| Allowing exception throwing in constant-evaluation.| Hana Dus\u00edkov\u00e1|\n2024-03-30| 2024-04| P3068R0| EWG Evolution  \nP3072R2| Hassle-free thread attributes| Zhihao Yuan| 2024-03-18| 2024-04|\nP3072R1| LEWG Library Evolution  \nP3074R3| trivial union (was std::uninitialized<T>)| Barry Revzin| 2024-04-14|\n2024-04| P3074R2| EWG Evolution  \nP3085R1| `noexcept` policy for SD-9 (throws nothing)| Ben Craig| 2024-03-17|\n2024-04| P3085R0| LEWG Library Evolution  \nP3086R1| Proxy: A Pointer-Semantics-Based Polymorphism Library| Mingxin Wang|\n2024-03-18| 2024-04| P3086R0| LEWGI SG18: LEWG Incubator,LEWG Library\nEvolution  \nP3086R2| Proxy: A Pointer-Semantics-Based Polymorphism Library| Mingxin Wang|\n2024-04-16| 2024-04| P3086R1| LEWG Library Evolution  \nP3091R1| Better lookups for `map` and `unordered_map`| Pablo Halpern|\n2024-03-22| 2024-04| P3091R0| LEWGI SG18: LEWG Incubator  \nP3094R1| std::basic_fixed_string| Mateusz Pusz| 2024-03-20| 2024-04| P3094R0|\nSG16 Unicode,LEWG Library Evolution  \nP3097R0| Contracts for C++: Support for virtual functions| Timur Doumler,\nJoshua Berne, Ga\u0161per A\u017eman| 2024-04-15| 2024-04| SG21 Contracts  \nP3103R1| More bitset operations| Jan Schultke| 2024-03-07| 2024-04| P3103R0|\nLEWGI SG18: LEWG Incubator  \nP3104R1| Bit permutations| Jan Schultke| 2024-03-07| 2024-04| P3104R0| LEWGI\nSG18: LEWG Incubator  \nP3104R2| Bit permutations| Jan Schultke| 2024-04-05| 2024-04| P3104R1| LEWGI\nSG18: LEWG Incubator  \nP3105R1| constexpr std::uncaught_exceptions()| Jan Schultke| 2024-03-07|\n2024-04| P3105R0| LEWGI SG18: LEWG Incubator  \nP3105R2| constexpr std::uncaught_exceptions()| Jan Schultke| 2024-04-05|\n2024-04| P3105R1| LEWGI SG18: LEWG Incubator  \nP3106R1| Clarifying rules for brace elision in aggregate initialization| James\nTouton| 2024-03-21| 2024-04| P3106R0| CWG Core| Adopted 2024-03  \nP3107R1| Permit an efficient implementation of std::print| Victor Zverovich|\n2024-02-25| 2024-04| P3107R0| LEWG Library Evolution  \nP3107R2| Permit an efficient implementation of std::print| Victor Zverovich|\n2024-03-17| 2024-04| P3107R1| LEWG Library Evolution  \nP3107R3| Permit an efficient implementation of std::print| Victor Zverovich|\n2024-03-18| 2024-04| P3107R2| LEWG Library Evolution  \nP3107R4| Permit an efficient implementation of std::print| Victor Zverovich|\n2024-03-20| 2024-04| P3107R3| LEWG Library Evolution  \nP3107R5| Permit an efficient implementation of std::print| Victor Zverovich|\n2024-03-21| 2024-04| P3107R4| LWG Library| Adopted 2024-03  \nP3119R0| Tokyo Technical Fixes to Contracts| Joshua Berne| 2024-04-04|\n2024-04| SG21 Contracts  \nP3122R1| [[nodiscard]] should be Recommended Practice| Jonathan Wakely|\n2024-03-12| 2024-04| P3122R0| LEWG Library Evolution,LWG Library  \nP3135R1| Hazard Pointer Extensions| Maged Michael, Michael Wong, Paul\nMcKenney| 2024-04-12| 2024-04| P3135R0| SG1 Concurrency and Parallelism  \nP3146R1| Clarifying std::variant converting construction| Giuseppe D'Angelo|\n2024-02-20| 2024-04| P3146R0| LEWG Library Evolution,LWG Library  \nP3147R1| A Direction for Vector| Alan Talbot| 2024-03-18| 2024-04| P3147R0|\nLEWG Library Evolution  \nP3149R1| async_scope -- Creating scopes for non-sequential concurrency| Ian\nPetersen, J\u00e1n Ondru\u0161ek; Jessica Wong; Kirk Shoop; Lee Howes; Lucian Radu\nTeodorescu;| 2024-03-13| 2024-04| P3149R0| SG1 Concurrency and\nParallelism,LEWG Library Evolution  \nP3149R2| async_scope -- Creating scopes for non-sequential concurrency| Ian\nPetersen, J\u00e1n Ondru\u0161ek; Jessica Wong; Kirk Shoop; Lee Howes; Lucian Radu\nTeodorescu;| 2024-03-20| 2024-04| P3149R1| LEWG Library Evolution  \nP3159R0| C++ Range Adaptors and Parallel Algorithms| Bryce Adelstein Lelbach|\n2024-03-18| 2024-04| SG1 Concurrency and Parallelism,LEWG Library Evolution  \nP3160R1| An allocator-aware `inplace_vector`| Pablo Halpern| 2024-03-09|\n2024-04| P3160R0| LEWG Library Evolution  \nP3161R0| Unified integer overflow arithmetic| Tiago Freire| 2024-02-17|\n2024-04| SG6 Numerics  \nP3161R1| Unified integer overflow arithmetic| Tiago Freire| 2024-03-13|\n2024-04| P3161R0| SG6 Numerics  \nP3162R0| LEWG [[nodiscard]] policy| Darius Nea\u021bu, David Sankel| 2024-02-22|\n2024-04| LEWG Library Evolution  \nP3164R0| Improving diagnostics for sender expressions| Eric Niebler|\n2024-03-01| 2024-04| LEWG Library Evolution  \nP3165R0| Contracts on virtual functions for the Contracts MVP| Ville\nVoutilainen| 2024-02-27| 2024-04| SG21 Contracts  \nP3166R0| Static Exception Specifications| Lewis Baker| 2024-03-16| 2024-04|\nEWGI SG17: EWG Incubator,LEWGI SG18: LEWG Incubator  \nP3167R0| Attributes for the result name in a postcondition assertion| Tom\nHonermann| 2024-02-28| 2024-04| SG21 Contracts  \nP3168R0| Give std::optional Range Support| David Sankel, Marco Foco, Darius\nNea\u021bu, Barry Revzin| 2024-02-28| 2024-04| LEWG Library Evolution  \nP3168R1| Give std::optional Range Support| David Sankel, Marco Foco, Darius\nNea\u021bu, Barry Revzin| 2024-04-11| 2024-04| P3168R0| LEWG Library Evolution  \nP3169R0| Inherited contracts| Jonas Persson| 2024-04-14| 2024-04| SG21\nContracts  \nP3170R0| sinkable exception error message| Jarrad J Waterloo| 2024-02-29|\n2024-04| LEWG Library Evolution  \nP3171R0| Adding functionality to placeholder types| Barry Revzin, Peter Dimov|\n2024-03-04| 2024-04| LEWG Library Evolution  \nP3172R0| Using `this` in constructor preconditions| Andrzej Krzemie\u0144ski|\n2024-03-08| 2024-04| SG21 Contracts  \nP3173R0| P2900R6 may be minimimal, but it is not viable| Gabriel Dos Reis|\n2024-03-15| 2024-04| EWG Evolution  \nP3174R0| SG16: Unicode meeting summaries 2023-10-11 through 2024-02-21| Tom\nHonermann| 2024-03-09| 2024-04| SG16 Unicode  \nP3175R0| Reconsidering the `std::execution::on` algorithm| Eric Niebler|\n2024-03-14| 2024-04| LEWG Library Evolution  \nP3176R0| The Oxford variadic comma| Jan Schultke| 2024-03-07| 2024-04| EWGI\nSG17: EWG Incubator  \nP3177R0| const prvalues in the conditional operator| Barry Revzin| 2024-03-18|\n2024-04| EWG Evolution  \nP3179R0| C++ parallel range algorithms| Ruslan Arutyunyan, Alexey Kukanov|\n2024-03-15| 2024-04| SG1 Concurrency and Parallelism,SG9 Ranges  \nP3180R0| C++ Standard Library Ready Issues to be moved in Tokyo, Mar. 2024|\nJonathan Wakely| 2024-03-15| 2024-04| All of WG21| Adopted 2024-03  \nP3181R0| Atomic stores and object lifetimes| Hans Boehm, Dave Claussen, David\nGoldblatt| 2024-04-16| 2024-04| SG1 Concurrency and Parallelism  \nP3182R0| Add pop_value methods to container adaptors| Brian Bi| 2024-04-16|\n2024-04| LEWG Library Evolution  \nP3183R0| Contract testing support| Bengt Gustafsson| 2024-04-15| 2024-04| SG21\nContracts  \nP3187R1| remove ensure_started and start_detached from P2300| Kirk Shoop,\nLewis Baker| 2024-03-21| 2024-04| P3187R0| SG1 Concurrency and\nParallelism,LEWG Library Evolution  \nP3187R1| remove ensure_started and start_detached from P2300| Kirk Shoop,\nLewis Baker| 2024-03-21| 2024-04| P3187R0| SG1 Concurrency and\nParallelism,LEWG Library Evolution  \nP3188R0| Proxy: A Pointer-Semantics-Based Polymorphism Library - Presentation\nslides for P3086R1| Mingxin Wang| 2024-04-16| 2024-04| LEWGI SG18: LEWG\nIncubator  \nP3189R0| Slides for LEWG presentation of P2900R6: Contracts for C++| Timur\nDoumler, Joshua Berne, Andrzej Krzemie\u0144ski| 2024-03-19| 2024-04| LEWG Library\nEvolution  \nP3190R0| Slides for EWG presentation of D2900R7: Contracts for C++| Timur\nDoumler, Joshua Berne, Andrzej Krzemie\u0144ski| 2024-03-20| 2024-04| EWG Evolution  \nP3191R0| Feedback on the scalability of contract violation handlers in P2900|\nLouis Dionne, Yeoul Na, Konstantin Varlamov| 2024-03-21| 2024-04| SG21\nContracts,EWG Evolution  \nP3192R0| LEWGI/SG18 Presentation of P3104R1 Bit Permutations| Jan Schultke|\n2024-03-19| 2024-04| LEWGI SG18: LEWG Incubator  \nP3194R0| LEWGI/SG18 Presentation of P3105R1 constexpr\nstd::uncaught_exceptions()| Jan Schultke| 2024-03-19| 2024-04| LEWGI SG18:\nLEWG Incubator  \nP3196R0| Core Language Working Group \"ready\" Issues for the March, 2024\nmeeting| Jens Maurer| 2024-03-23| 2024-04| CWG Core| Adopted 2024-03  \nP3197R0| A response to the Tokyo EWG polls on the Contracts MVP (P2900R6)|\nTimur Doumler, John Spicer| 2024-04-12| 2024-04| SG21 Contracts,EWG Evolution  \nP3198R0| A takeaway from the Tokyo LEWG meeting on Contracts MVP| Andrzej\nKrzemie\u0144ski| 2024-03-29| 2024-04| SG21 Contracts  \nP3199R0| Choices for make_optional and value()| Steve Downey| 2024-03-22|\n2024-04| LEWG Library Evolution  \nP3201R0| LEWG [[nodiscard]] policy| Jonathan Wakely, David Sankel, Darius\nNea\u021bu| 2024-03-22| 2024-04| LEWG Library Evolution  \nP3201R1| LEWG [[nodiscard]] policy| Jonathan Wakely, David Sankel, Darius\nNea\u021bu| 2024-03-22| 2024-04| P3201R0| LEWG Library Evolution  \nP3203R0| Implementation defined coroutine extensions| Klemens Morgenstern|\n2024-03-22| 2024-04| EWGI SG17: EWG Incubator  \nP3205R0| Throwing from a `noexcept` function should be a contract violation.|\nGa\u0161per A\u017eman, Jeff Snyder, Andrei Zissu, Ben Craig| 2024-04-15| 2024-04| SG21\nContracts,EWG Evolution,LEWG Library Evolution  \nP3207R0| More & like| Jarrad J Waterloo| 2024-03-24| 2024-04| LEWG Library\nEvolution  \nP3208R0| import std; and stream macros| Sunghyun Min| 2024-04-16| 2024-04|\nEWGI SG17: EWG Incubator,LEWGI SG18: LEWG Incubator  \nP3210R0| A Postcondition *is* a Pattern Match| Andrew Tomazos| 2024-03-28|\n2024-04| SG21 Contracts,EWG Evolution  \nP3211R0| views::transform_join| Hewill Kang| 2024-04-07| 2024-04| SG9\nRanges,LEWG Library Evolution,LWG Library,Direction Group  \nP3213R0| 2024-04 Library Evolution Polls| Inbal Levi, Fabio Fracassi, Ben\nCraig, Nevin Liber, Billy Baker, Corentin Jabot| 2024-04-16| 2024-04| LEWG\nLibrary Evolution  \nP3215R0| Slides: Thread Attributes as Designators (P3072R2 presentation)|\nZhihao Yuan| 2024-03-29| 2024-04| LEWG Library Evolution  \nP3216R0| views::slice| Hewill Kang| 2024-04-07| 2024-04| SG9 Ranges,LEWG\nLibrary Evolution,LWG Library,Direction Group  \nP3217R0| Adjoints to \"Enabling list-initialization for algorithms\": find_last|\nGiuseppe D'Angelo| 2024-03-31| 2024-04| LEWG Library Evolution,LWG Library  \nP3218R0| const references to constexpr variables| Jarrad J Waterloo|\n2024-04-09| 2024-04| EWG Evolution,CWG Core  \nP3220R0| views::delimit| Hewill Kang| 2024-04-16| 2024-04| SG9 Ranges,LEWG\nLibrary Evolution,LWG Library,Direction Group  \nP3221R0| Disable pointers to contracted functions| Jonas Persson| 2024-04-15|\n2024-04| SG21 Contracts  \nP3222R0| Fix C++26 by adding transposed special cases for P2642 layouts| Mark\nHoemmen| 2024-04-08| 2024-04| LEWG Library Evolution  \nP3223R0| Making std::basic_istream::ignore less surprising| Jonathan Wakely|\n2024-04-12| 2024-04| LEWG Library Evolution  \nP3224R0| Slides for P3087 - Make direct-initialization for enumeration types\nat least as permissive as direct| Jan Schultke| 2024-04-05| 2024-04| EWGI\nSG17: EWG Incubator  \nP3225R0| Slides for P3140 std::int_least128_t| Jan Schultke| 2024-04-05|\n2024-04| EWGI SG17: EWG Incubator,LEWGI SG18: LEWG Incubator  \nP3226R0| Contracts for C++: Naming the \"Louis semantic\"| Timur Doumler|\n2024-04-12| 2024-04| SG21 Contracts  \nP3228R0| Contracts for C++: Revisiting contract check elision and duplication|\nTimur Doumler| 2024-04-16| 2024-04| SG21 Contracts  \nP3230R0| views::(take|drop)_exactly| Hewill Kang| 2024-04-08| 2024-04| SG9\nRanges,LEWG Library Evolution,LWG Library,Direction Group  \nP3232R0| User-defined erroneous behaviour| Thomas K\u00f6ppe| 2024-04-16| 2024-04|\nSG12 Undefined and Unspecified Behavior,SG23 Safety and Security,EWG\nEvolution,LEWG Library Evolution  \nP3233R0| Issues with P2786 (Trivial Relocatability For C++26)| Giuseppe\nD'Angelo| 2024-04-16| 2024-04| SG12 Undefined and Unspecified Behavior,EWG\nEvolution,LEWG Library Evolution  \nP3234R0| Utility to check if a pointer is in a given range| Glen Joseph\nFernandes| 2024-04-16| 2024-04| EWGI SG17: EWG Incubator,LEWGI SG18: LEWG\nIncubator  \nP3236R0| Please reject P2786 and adopt P1144| Alan de Freitas, Daniel Liam\nAnderson, Giuseppe D'Angelo, Hans Goudey, Hartmut Kaiser, Isidoros Tsaousis,\nJacques Lucke, Krystian Stasiowski, Shreyas Atre, St\u00e9phane Janel, Thiago\nMaciera| 2024-04-14| 2024-04| EWGI SG17: EWG Incubator  \nP3237R0| Matrix Representation of Contract Semantics| Andrei Zissu|\n2024-04-15| 2024-04| SG21 Contracts  \nP3240R0| Slides for EWGI presentation on allocators, Tokyo 2024| Alisdair\nMeredith| 2024-04-16| 2024-04| LEWGI SG18: LEWG Incubator  \nP3241R0| Slides for LEWG presentation on trivial relocation, April 2024|\nAlisdair Meredith| 2024-04-16| 2024-04| LEWG Library Evolution  \nP3242R0| Copy and fill for mdspan| Nicolas Morales, Christian Trott, Mark\nHoemmen, Damien Lebrun-Grandie| 2024-04-16| 2024-04| LEWG Library Evolution  \nP3243R0| Give std::optional Range Support - Presentation, Tokyo 2024| David\nSankel, Marco Foco, Darius Nea\u021bu, Barry Revzin| 2024-04-15| 2024-04| LEWG\nLibrary Evolution  \nP3244R0| [[nodiscard]] Policy - Presentation, Tokyo 2024| David Sankel, Darius\nNea\u021bu| 2024-04-15| 2024-04| LEWG Library Evolution  \nP3245R0| Allow `[[nodiscard]]` in type alias declarations| Xavier Bonaventura|\n2024-04-16| 2024-04| EWGI SG17: EWG Incubator  \nP3247R0| Deprecate the notion of trivial types| Jens Maurer| 2024-04-16|\n2024-04| LEWG Library Evolution,CWG Core\n\n", "frontpage": false}
