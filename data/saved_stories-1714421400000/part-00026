{"aid": "40197560", "title": "CloudGoat", "url": "https://github.com/RhinoSecurityLabs/cloudgoat", "domain": "github.com/rhinosecuritylabs", "votes": 1, "user": "udev4096", "posted_at": "2024-04-29 12:44:52", "comments": 0, "source_title": "GitHub - RhinoSecurityLabs/cloudgoat: CloudGoat is Rhino Security Labs' \"Vulnerable by Design\" AWS deployment tool", "source_text": "GitHub - RhinoSecurityLabs/cloudgoat: CloudGoat is Rhino Security Labs'\n\"Vulnerable by Design\" AWS deployment tool\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nRhinoSecurityLabs / cloudgoat Public\n\n  * Notifications\n  * Fork 572\n  * Star 2.4k\n\nCloudGoat is Rhino Security Labs' \"Vulnerable by Design\" AWS deployment tool\n\n### License\n\nBSD-3-Clause license\n\n2.4k stars 572 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# RhinoSecurityLabs/cloudgoat\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n19 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\njdearmasRemove publicly exposed by defaultJan 26, 20244417f4d \u00b7 Jan 26,\n2024Jan 26, 2024\n\n## History\n\n368 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Refactor/cloud breach s3 (#214)| Jan 4, 2024  \n  \n### core\n\n|\n\n### core\n\n| Remove publicly exposed by default| Jan 26, 2024  \n  \n### scenarios\n\n|\n\n### scenarios\n\n| Format vulnerable lambda (#229)| Jan 25, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Resolve local exec using the wrong profile| Jun 18, 2022  \n  \n### Dockerfile\n\n|\n\n### Dockerfile\n\n| Fix dockerfile's import of the requirements file| Mar 7, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Jul 17, 2018  \n  \n### README.md\n\n|\n\n### README.md\n\n| This commit adds the AWS Glue Privilege Escalation scenario to Cloudg...|\nDec 11, 2023  \n  \n### cloudgoat.py\n\n|\n\n### cloudgoat.py\n\n| help fixes and change create to always runs apply| Aug 5, 2021  \n  \n### docker_stack.yml\n\n|\n\n### docker_stack.yml\n\n| Fix stack service name typo| Jul 30, 2019  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| Upgrade PyYAML version to 6.0.1| Sep 15, 2023  \n  \n## Repository files navigation\n\n# CloudGoat (\u2601\ufe0f\ud83d\udc10)\n\nCloudGoat is Rhino Security Labs' \"Vulnerable by Design\" AWS deployment tool.\n\n# Quick reference\n\n  * Where to get help: the Rhino Security Labs Discord, or Stack Overflow\n\n  * Where to file issues: https://github.com/RhinoSecurityLabs/cloudgoat/issues\n\n  * Maintained by: the CloudGoat Community\n\n# CloudGoat 2.0 is here!\n\nCloudGoat is Rhino Security Labs' \"Vulnerable by Design\" AWS deployment tool.\nIt allows you to hone your cloud cybersecurity skills by creating and\ncompleting several \"capture-the-flag\" style scenarios. Each scenario is\ncomposed of AWS resources arranged together to create a structured learning\nexperience. Some scenarios are easy, some are hard, and many offer multiple\npaths to victory. As the attacker, it is your mission to explore the\nenvironment, identify vulnerabilities, and exploit your way to the scenario's\ngoal(s).\n\nBelow are our main goals for CloudGoat:\n\n  * Focused, Curated, High-Quality Learning Experiences - Each of CloudGoat\u2019s scenarios should provide the opportunity for experimentation, exploration, and building hands-on cloud security skills.\n  * Good Documentation - We've done our best to ensure that CloudGoat\u2019s scenarios are well-documented and easy to understand and evaluate in terms of difficulty, content, structure, and skills-required.\n  * Easy to Install and Use - We understand that CloudGoat is a means to an end - learning and practicing cloud security penetration testing. Therefore, we aim to keep things simple, straightforward, and reliable.\n  * Modularity - Each scenario is a standalone learning environment with a clear goal (or set of goals), and CloudGoat is able to start up, reset, or shut down each scenario independently.\n  * Expandability - CloudGoat\u2019s core components (python app and scenarios) are designed to permit easy and independent expansion - by us or the community.\n\nBefore you proceed, please take note of these warnings!\n\n> Warning #1: CloudGoat creates intentionally vulnerable AWS resources into\n> your account. DO NOT deploy CloudGoat in a production environment or\n> alongside any sensitive AWS resources.\n\n> Warning #2: CloudGoat can only manage resources it creates. If you create\n> any resources yourself in the course of a scenario, you should remove them\n> manually before running the destroy command.\n\n## Requirements\n\n  * Linux or MacOS. Windows is not officially supported.\n\n    * Argument tab-completion requires bash 4.2+ (Linux, or OSX with some difficulty).\n  * Python3.6+ is required.\n  * Terraform >= 0.14 installed and in your $PATH.\n  * The AWS CLI installed and in your $PATH, and an AWS account with sufficient privileges to create and destroy resources.\n  * jq\n\n## Quick Start\n\nTo install CloudGoat, make sure your system meets the requirements above, and\nthen run the following commands:\n\n    \n    \n    git clone https://github.com/RhinoSecurityLabs/cloudgoat.git cd cloudgoat pip3 install -r ./requirements.txt chmod +x cloudgoat.py\n\nYou may also want to run some quick configuration commands - it'll save you\nsome time later:\n\n    \n    \n    $ ./cloudgoat.py config profile $ ./cloudgoat.py config whitelist --auto\n\nNow, at your command, CloudGoat can create an instance of a scenario in the\ncloud. When the environment is ready, a new folder will be created in the\nproject base directory named after the scenario and with a unique scenario ID\nappended. Inside this folder will be a file called start.txt, which will\ncontain all of the resources you'll need to begin the scenario, though these\nare also printed to your console when the create command completes. Sometimes\nan SSH keypair named cloudgoat/cloudgoat.pub will be created as well.\n\n> Note: Don't delete or modify the scenario instance folder or the files\n> inside, as this could prevent CloudGoat from being able to manage your\n> scenario's resources.\n\nAs you work through the scenario, feel free to refer to the scenario's readme\nif you need direction. If you get stuck, there are cheat sheets linked at the\nbottom of each route's walkthrough.\n\nWhen you are finished with the scenario, delete any resources you created\nyourself (remember: CloudGoat can only manage resources it creates) and then\nrun the destroy command. It's always a good idea to take a quick glance at\nyour AWS web-console afterwards - just in case something didn't get deleted.\n\nYou can read the full documentation for CloudGoat's commands here in the Usage\nGuide section.\n\n## How to use CloudGoat's Docker image\n\n### Option 1: Run with default entrypoint\n\n    \n    \n    $ docker run -it rhinosecuritylabs/cloudgoat:latest\n\n### Option 2: Run with AWS config and credentials\n\n> Warning: Running this command will mount your local AWS configuration files\n> into the Docker container when it is launched. This means that any user with\n> access to the container will have access to your host computer's AWS\n> credentials.\n    \n    \n    $ docker run -it -v ~/.aws:/root/.aws/ rhinosecuritylabs/cloudgoat:latest\n\n## Scenarios Available\n\n### vulnerable_lambda (Small / Easy)\n\n$ ./cloudgoat.py create vulnerable_lambda\n\nIn this scenario, you start as the 'bilbo' user. You will assume a role with\nmore privileges, discover a lambda function that applies policies to users,\nand exploit a vulnerability in the function to escalate the privelages of the\nbilbo user in order to search for secrets.\n\nVisit Scenario Page.\n\n### vulnerable_cognito (Small / Moderate)\n\n$ ./cloudgoat.py create vulnerable_cognito\n\nIn this scenario, you are presented with a signup and login page with AWS\nCognito in the backend. You need to bypass restrictions and exploit\nmisconfigurations in Amazon Cognito in order to elevate your privileges and\nget Cognito Identity Pool credentials.\n\nContributed by TrustOnCloud.\n\nVisit Scenario Page.\n\n### iam_privesc_by_key_rotation (Small / Easy)\n\n$ ./cloudgoat.py create iam_privesc_by_key_rotation\n\nExploit insecure IAM permissions to escalate your access. Start with a role\ntha manages other users credentials and find a weakness in the setup to access\nthe \"admin\" role. Using the admin role retrieve the flag from secretsmanager.\n\nContributed by infrasec.sh.\n\nVisit Scenario Page.\n\n### iam_privesc_by_rollback (Small / Easy)\n\n$ ./cloudgoat.py create iam_privesc_by_rollback\n\nStarting with a highly-limited IAM user, the attacker is able to review\nprevious IAM policy versions and restore one which allows full admin\nprivileges, resulting in a privilege escalation exploit.\n\nVisit Scenario Page.\n\n### lambda_privesc (Small / Easy)\n\n$ ./cloudgoat.py create lambda_privesc\n\nStarting as the IAM user Chris, the attacker discovers that they can assume a\nrole that has full Lambda access and pass role permissions. The attacker can\nthen perform privilege escalation using these new permissions to obtain full\nadmin privileges.\n\n> Note: This scenario may require you to create some AWS resources, and\n> because CloudGoat can only manage resources it creates, you should remove\n> them manually before running ./cloudgoat destroy.\n\nVisit Scenario Page.\n\n### cloud_breach_s3 (Small / Moderate)\n\n$ ./cloudgoat.py create cloud_breach_s3\n\nStarting as an anonymous outsider with no access or privileges, exploit a\nmisconfigured reverse-proxy server to query the EC2 metadata service and\nacquire instance profile keys. Then, use those keys to discover, access, and\nexfiltrate sensitive data from an S3 bucket.\n\nVisit Scenario Page.\n\n### iam_privesc_by_attachment (Medium / Moderate)\n\n$ ./cloudgoat.py create iam_privesc_by_attachment\n\nStarting with a very limited set of permissions, the attacker is able to\nleverage the instance-profile-attachment permissions to create a new EC2\ninstance with significantly greater privileges than their own. With access to\nthis new EC2 instance, the attacker gains full administrative powers within\nthe target account and is able to accomplish the scenario's goal - deleting\nthe cg-super-critical-security-server and paving the way for further nefarious\nactions.\n\n> Note: This scenario may require you to create some AWS resources, and\n> because CloudGoat can only manage resources it creates, you should remove\n> them manually before running ./cloudgoat destroy.\n\nVisit Scenario Page.\n\n### ec2_ssrf (Medium / Moderate)\n\n$ ./cloudgoat.py create ec2_ssrf\n\nStarting as the IAM user Solus, the attacker discovers they have ReadOnly\npermissions to a Lambda function, where hardcoded secrets lead them to an EC2\ninstance running a web application that is vulnerable to server-side request\nforgery (SSRF). After exploiting the vulnerable app and acquiring keys from\nthe EC2 metadata service, the attacker gains access to a private S3 bucket\nwith a set of keys that allow them to invoke the Lambda function and complete\nthe scenario.\n\nVisit Scenario Page.\n\n### ecs_takeover (Medium / Moderate)\n\n$ ./cloudgoat.py create ecs_takeover\n\nStarting with access to the external website, the attacker needs to find a\nremote code execution vulnerability. By using RCE the attacker can get access\nto resources available to the website container. Abusing several ECS\nmisconfigurations the attacker gains access to IAM permissions that allow them\nto force ECS into rescheduling the target container to a compromised instance.\n\nVisit Scenario Page.\n\n### rce_web_app (Medium / Hard)\n\n$ ./cloudgoat.py create rce_web_app\n\nStarting as the IAM user Lara, the attacker explores a Load Balancer and S3\nbucket for clues to vulnerabilities, leading to an RCE exploit on a vulnerable\nweb app which exposes confidential files and culminates in access to the\nscenario\u2019s goal: a highly-secured RDS database instance.\n\nAlternatively, the attacker may start as the IAM user McDuck and enumerate S3\nbuckets, eventually leading to SSH keys which grant direct access to the EC2\nserver and the database beyond.\n\nVisit Scenario Page.\n\n### codebuild_secrets (Large / Hard)\n\n$ ./cloudgoat.py create codebuild_secrets\n\nStarting as the IAM user Solo, the attacker first enumerates and explores\nCodeBuild projects, finding unsecured IAM keys for the IAM user Calrissian\ntherein. Then operating as Calrissian, the attacker discovers an RDS database.\nUnable to access the database's contents directly, the attacker can make\nclever use of the RDS snapshot functionality to acquire the scenario's goal: a\npair of secret strings.\n\nAlternatively, the attacker may explore SSM parameters and find SSH keys to an\nEC2 instance. Using the metadata service, the attacker can acquire the EC2\ninstance-profile's keys and push deeper into the target environment,\neventually gaining access to the original database and the scenario goal\ninside (a pair of secret strings) by a more circuitous route.\n\n> Note: This scenario may require you to create some AWS resources, and\n> because CloudGoat can only manage resources it creates, you should remove\n> them manually before running ./cloudgoat destroy.\n\nVisit Scenario Page.\n\n### cicd (Medium / Moderate)\n\n$ ./cloudgoat.py create cicd\n\nFooCorp is a company exposing a public-facing API. Customers of FooCorp submit\nsensitive data to the API every minute. The API is implemented as a Lambda\nfunction, exposed through an API Gateway. Because FooCorp implements DevOps,\nit has a continuous deployment pipeline automatically deploying new versions\nof their Lambda function from source code to production in under a few\nminutes.\n\nYour goal: steal the sensitive data submitted by FooCorp customers!\n\nContributed by Datadog.\n\nVisit Scenario Page.\n\n### detection_evasion (Medium / Hard)\n\n$ ./cloudgoat.py create detection_evasion\n\nThe goal of this scenario is to read out the values for both secrets without\nbeing detected. The secrets are both stored in Secrets Manager, and their\nvalues have the following format (cg-secret-XXXXXX-XXXXXX).\n\nThis scenario is significantly different from other CloudGoat scenarios. In\ndetection_evasion, your goals will be outlined for you more clearly, and the\nchallenge is to complete them without triggering alarms. There is more setup\ninvolved in this scenario, and it will take longer to play (you might\nwant/need to play it multiple times).\n\nVisit Scenario Page.\n\n### ecs_efs_attack (Large / Hard)\n\n$ ./cloudgoat.py create ecs_efs_attack\n\nStarting with access the \"ruse\" EC2 the user leverages the instace profile to\nbackdoor the running ECS container. Using the backdoored container the\nattacker can retireve credentials from the container metadata API. These\ncredentials allow the attacker to start a session on any EC2 with the proper\ntags set. The attacker uses their permissions to change the tags on the Admin\nEC2 and starts a session. Once in the Admin EC2 the attacker will port scan\nthe subnet for an open EFS to mount. Once mounted the attacker can retrieve\nthe flag from the elastic file system.\n\nVisit Scenario Page.\n\n### glue_privesc(Large / Moderate)\n\n$ ./cloudgoat.py create glue_privesc\n\nThis scenario starts with a web page that uploads a CSV file and performs data\nvisualization through the Glue service. The attacker steals the credentials\npresent on the webpage via a SQL injection attack and uploads a reverse shell\nto create a Glue Job to obtain the secret string\n\n> Note: This scenario may require you to create some AWS resources, and\n> because CloudGoat can only manage resources it creates, you should remove\n> them manually before running ./cloudgoat destroy.\n\nVisit Scenario Page.\n\n## Usage Guide\n\nThe basic anatomy of a CloudGoat command is as follows:\n\n> $ ./cloudgoat.py [ command ] [ sub-command ] [ --arg-name ] [ arg-value ]\n\nThe five main commands in CloudGoat are summarized below:\n\n### create\n\ncreate [ scenario-name ] deploys a scenario to the AWS account of your\nchoosing. You can also run create against an existing scenario if you wish -\nCloudGoat will simply destroy and recreate the scenario named.\n\n> Tip: you can use /scenarios in the name, which allows for bash's native tab-\n> completion.\n\nNote that the --profile is required for safety reasons - we don't want anyone\naccidentally deploying CloudGoat scenarios to a production environment - and\nCloudGoat will not use the system's \"default\" AWS CLI profiles or profiles\nspecified as defaults via environment variables. You can, however, set this\nvia config profile to avoid having to provide it every time.\n\n### list\n\nlist shows some information about all, undeployed, or deployed scenarios, or\neven a lot of information about a [ scenario-name ] that's already deployed.\n\n### destroy\n\ndestroy shuts down and deletes a [ scenario-name ]'s cloud resources, and then\nmoves the scenario instance folder to ./trash - just in case you need to\nrecover the Terraform state file or other scenario files. You can also specify\nall instead of a scenario name to destroy all active scenarios.\n\n> Tip: CloudGoat can only manage resources it creates. If you create any\n> resources yourself in the course of a scenario, you should remove them\n> manually before running the destroy command.\n\n### config\n\nconfig allows you to manage various aspects of your CloudGoat installation,\nspecially the IP whitelist, your default AWS profile, and tab-completion via\nargcomplete. It's worth briefly describing what each of these sub-commands do.\n\n#### whitelist\n\nCloudGoat needs to know what IP addresses should be whitelisted when\npotentially-vulnerable resources are deployed in the cloud, and these IPs are\ntracked in a ./whitelist.txt file in the base project directory. The IP\naddress you provide for whitelisting doesn't have to be in CIDR format, but\nCloudGoat will add a /32 to any naked IPs you provide. Optionally, you can add\nthe --auto argument, and CloudGoat will automatically make a network request,\nusing curl to ifconfig.co to find your IP address, and then create the\nwhitelist file with the result.\n\n#### profile\n\nWhile CloudGoat will not ever use the system's \"default\" AWS CLI profiles or\nprofiles specified as defaults via environment variables, you can instruct\nCloudGoat to use a particular AWS profile by name using the config profile\ncommand. This will prompt for and save your profile's name in a config.yml\nfile in the base project directory. As long as that file is present CloudGoat\nwill use the profile name listed inside for create and destroy commands,\nrather than requiring the --profile flag. You can run the config profile\ncommand at any time to view the name of your CloudGoat-default profile and\nvalidate the format of the config.yml. You can also create config.yml\nmanually, if you wish, provided that you use the correct format.\n\n#### argcomplete\n\nWe really wanted to have native tab-completion in CloudGoat, but as it turns\nout that was somewhat difficult to do outside of a REPL. It should work\nreasonably well for Linux users, and those OSX users brave enough to figure\nout a way to upgrade their bash version to 4.2+. CloudGoat does include and\nsupport the python library \"argcomplete\". A brief summary of how to install\nargcomplete is provided below, though for more detailed steps you should refer\nto the official documentation at the library's github page.\n\n  1. Install the argcomplete Python package using CloudGoat's requirements.txt file: $ pip3 install -r core/python/requirements.txt\n  2. In bash, run the global Python argument completion script provided by the argcomplete package: $ activate-global-python-argcomplete\n  3. Source the completion script at the location printed by the previous activation command, or restart your shell session: $ source [ /path/to/the/completion/script ]\n\nFor those who cannot or do not wish to configure argcomplete, CloudGoat also\nsupports the use of directory paths as scenario names, which means tab-\ncompletion will work for scenario names. Just use /scenario/[ scenario-name ]\nor ./[ scenarioinstance-name ] and your shell should do the rest.\n\n### help\n\nhelp provides contextual help about commands. help can come before or after\nthe command in question, so it's always there when you need it. Below are some\nexamples:\n\n  * $ ./cloudgoat.py create help\n  * $ ./cloudgoat.py destroy help\n  * $ ./cloudgoat.py list help\n  * $ ./cloudgoat.py config help\n\nOne other use of note: $ ./cloudgoat.py [ scenario-name ] help can be used to\nprint to the console a brief summary of the scenario, as defined by the\nscenario's author.\n\n## Feature Requests and Bug Reports\n\nIf you have a feature request or a bug to report, please submit them here.\n\nFor bugs, please make sure to include a description sufficient to reproduce\nthe bug you found, including tracebacks and reproduction steps, and check for\nother reports of your bug before filing a new bug report.\n\nFor features, much the same applies! Be specific in your request, and make\nsure someone else hasn't already requested the same feature.\n\n## Contribution Guidelines\n\nContributions to CloudGoat are greatly appreciated. If you'd like to help make\nthe project better, read on.\n\n  1. Python code in CloudGoat should generally follow Python's style conventions, favoring readability and maintainability above all.\n  2. Follow good git practices: use pull requests, prefer feature branches, always write clear commit messages.\n  3. CloudGoat uses black and flake8 - Python syntax and style linters - If you're going to commit code for CloudGoat, ensure that first flake8, and then black are both run on all Python files in core/python/ and on cloudgoat.py. black's decisions take priority over flake8's. Both of these are commented out in the core/python/requirements.txt file since normal users don't need them.\n  4. CloudGoat code should always use the BSD 3-clause license.\n\nAnd lastly, thank you for contributing!\n\n## Changelog\n\n  * 6/24/19: CloudGoat 2.0 is released!\n\n## Disclaimer\n\nCloudGoat is software that comes with absolutely no warranties whatsoever. By\nusing CloudGoat, you take full responsibility for any and all outcomes that\nresult.\n\n## About\n\nCloudGoat is Rhino Security Labs' \"Vulnerable by Design\" AWS deployment tool\n\n### Resources\n\nReadme\n\n### License\n\nBSD-3-Clause license\n\nActivity\n\nCustom properties\n\n### Stars\n\n2.4k stars\n\n### Watchers\n\n71 watching\n\n### Forks\n\n572 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 41\n\n\\+ 27 contributors\n\n## Languages\n\n  * Python 88.3%\n  * HCL 10.0%\n  * Go 0.5%\n  * HTML 0.4%\n  * CSS 0.3%\n  * JavaScript 0.3%\n  * Other 0.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
