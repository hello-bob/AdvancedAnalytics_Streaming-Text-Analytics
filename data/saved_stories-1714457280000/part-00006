{"aid": "40202549", "title": "JunctionOS", "url": "https://github.com/JunctionOS/junction", "domain": "github.com/junctionos", "votes": 1, "user": "yagyu", "posted_at": "2024-04-29 19:04:52", "comments": 0, "source_title": "GitHub - JunctionOS/junction: Next-generation datacenter OS built on kernel bypass to speed up unmodified code while improving platform density and security", "source_text": "GitHub - JunctionOS/junction: Next-generation datacenter OS built on kernel\nbypass to speed up unmodified code while improving platform density and\nsecurity\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nJunctionOS / junction Public\n\n  * Notifications\n  * Fork 2\n  * Star 24\n\nNext-generation datacenter OS built on kernel bypass to speed up unmodified\ncode while improving platform density and security\n\n### License\n\nMIT license\n\n24 stars 2 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# JunctionOS/junction\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\njoshuafriedupdate READMEApr 2, 2024923da5b \u00b7 Apr 2, 2024Apr 2, 2024\n\n## History\n\n612 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Update ci.yml| Feb 23, 2023  \n  \n### junction\n\n|\n\n### junction\n\n| filesystem hacks| Mar 29, 2024  \n  \n### lib\n\n|\n\n### lib\n\n| nit, missing patch| Mar 29, 2024  \n  \n### scripts\n\n|\n\n### scripts\n\n| filesystem hacks| Mar 29, 2024  \n  \n### .clang-format\n\n|\n\n### .clang-format\n\n| [junction/tooling]: move to a .clang-format based formatting style| Mar 11,\n2024  \n  \n### .clang-tidy\n\n|\n\n### .clang-tidy\n\n| linter fixes| Jan 4, 2023  \n  \n### .envrc\n\n|\n\n### .envrc\n\n| [junction/envrc]: make CC and CXX point to gcc and g++| Feb 6, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| [junction/cereal]: implement serialization of misc types (#65)| Mar 11, 2024  \n  \n### .gitmodules\n\n|\n\n### .gitmodules\n\n| [junction/cereal]: install cereal| Feb 7, 2024  \n  \n### CMakeLists.txt\n\n|\n\n### CMakeLists.txt\n\n| [junction/cereal]: install cereal| Feb 7, 2024  \n  \n### LICENSE.md\n\n|\n\n### LICENSE.md\n\n| Create LICENSE.md| Feb 22, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| update README| Apr 2, 2024  \n  \n## Repository files navigation\n\n# Junction\n\nJunction is a prototype for a next generation datacenter operating system that\nfocuses on improving performance and security while enabling high degrees of\nresource multiplexing.\n\nJunction moves most OS functionality into userspace with a library operating\nsystem (LibOS) that uses kernel-bypass CPU features and network queues for\nhigh performance. The host kernel plays a minimal role - it is only\nresponsible for multiplexing CPU cores, memory, and the page cache. This\nreduces the wide attack surface posed by the system call interfaces in today's\nOSes.\n\nApplications run in Junction containers, each of which has a private copy of\nthe Junction LibOS shared by the applications in the container. Our prototype\nLibOS implements a large fraction of the Linux system call interface, and can\nrun unmodified Linux binaries. Junction is able to run programs written in\nPython, Javascript, Java, and Go, and many written in C/C++/Rust.\n\nOur paper on Junction appeared at NSDI 2024 and describes our motivation and\ndesign in greater detail.\n\n### Contributing\n\nWe welcome contributions to Junction. If you have an issue with missing\nfunctionality or other bugs, please let us know and feel free to submit a pull\nrequest!\n\n### Contact\n\nFor any questions about Junction, please email junction@csail.mit.edu or open\nan issue on Github.\n\n## Hardware Requirements\n\nJunction runs on modern x86 Intel and AMD CPUs. For optimal networking\nperformance, Junction requires a modern NVIDIA NIC (ConnectX-5 and later).\nJunction can also support other NICs using a DPDK SoftNIC with reduced\nperformance, security, and density guarantees.\n\nJunction supports User IPIs (UIPIs) for increased security and better\ninterrupt performance. UIPI is available on Intel server processors starting\nwith 4th Generation Xeon Scalable CPUs (codenamed Sapphire Rapids). For other\nCPUs, Junction automatically uses Linux signals.\n\n## Software Requirements\n\nJunction runs on unmodified Linux Kernels, and was tested on versions 6.2.0\nand later. Building Junction requires GCC 12 or later. Our scripts assume your\nmachine is using Ubuntu, though Junction itself can run on other distros.\n\n## Building Junction\n\nClone the Junction repo and run the following script that installs needed\npackages (using apt) and builds dependencies. This step can take a few\nminutes.\n\n    \n    \n    scripts/install.sh\n\nNext, run the following command to compile Junction itself.\n\n    \n    \n    scripts/build.sh\n\n## Running Junction\n\nIn order to run Junction, the core scheduler must be running. Run the\nfollowing command in a seperate window:\n\n    \n    \n    lib/caladan/scripts/setup_machine.sh sudo lib/caladan/iokerneld ias\n\nNote that the arguments that you provide to the core scheduler will vary\ndepending on your network configuration (see networking).\n\nYou can start a Junction container using junction_run. Each Junction container\nis started with a configuration file that specifies the maximum number of\ncores to use and a unique IP address. A sample configuration file is provided\nat build/junction/caladan_test.config. To run a program, simply pass that\nprogram and its arguments to junction_run as follows:\n\n    \n    \n    cd build/junction ./junction_run caladan_test.config -- /usr/bin/openssl speed\n\nTo run multiple applications inside a single Junction container, we recommend\nusing a shell script that launches each application. We found that Junction\nworks with the fish shell which uses posix_spawn() instead of fork().\n\n## Networking Options\n\n### ConnectX NICs\n\nThis networking mode provides the best security, density, and performance for\nJunction. It requires a dedicated NVIDIA ConnectX-5 or later NIC.\n\nYou will need the PCI address of your NIC, which can be found by running lspci | grep ConnectX. If an interface is configured in Linux for this NIC, you will first need to bring it down by running sudo ip link set down <ifname>.\n\nNext, bind the NIC to the vfio driver:\n\n    \n    \n    sudo modprobe vfio-pci sudo lib/caladan/dpdk/usertools/dpdk-devbind.py -b vfio-pci <pci address>\n\nFinally, use the following command when starting the core scheduler:\n\n    \n    \n    sudo lib/caladan/iokerneld ias vfio nicpci <pci address>\n\n### DPDK SoftNIC\n\nIf your machine has a high performance NIC that works with DPDK, you may use\nthat instead. We have tested support for Intel NICs that use the ixgbe and\ni40e drivers.\n\nUse the following command to launch the core scheduler:\n\n    \n    \n    sudo lib/caladan/iokerneld ias no_hw_qdel nicpci <pci address>\n\n### No High Performance NIC (TUN/TAP)\n\nWhen a high performance networking is not needed, the DPDK SoftNIC can be\nconfigured to use a TUN/TAP device. Start the core scheduler with this\ncommand:\n\n    \n    \n    sudo lib/caladan/iokerneld ias no_hw_qdel -- --allow 00:00.0 --vdev=net_tap0\n\n## Configuring Preemption\n\nThe scheduler time slice quantum can be set on a per-container basis by\nappending runtime_quantum_us <us> to the configuration file used to launch the\ncontainer. If User IPIs are available on your machine, they will be enabled\nautomatically. To force the use of Linux signals instead, add nouintr as an\nargument when running the setup_machine.sh script (see Running Junction). Note\nthat all Junction containers and the scheduler must be closed when running\nthis script.\n\n## Testing\n\nYou can run a suite of unit and end-to-end tests using the following script:\n\n    \n    \n    scripts/test.sh\n\n## Debugging\n\nJunction can be built in debug mode by adding the -d flag to the build script.\nWhen using GDB to debug, it may be necessary to manually load the symbols for\nprograms loaded by Junction. To quickly add these symbols, you can run source\n<path to junction>/scripts/tools/gdb_find_symbols.py in GDB after the program\nand its shared libraries are loaded.\n\n## License\n\nSee the LICENSE file for license rights and limitations (MIT).\n\n## About\n\nNext-generation datacenter OS built on kernel bypass to speed up unmodified\ncode while improving platform density and security\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\nCustom properties\n\n### Stars\n\n24 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n2 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 6\n\n## Languages\n\n  * C++ 86.4%\n  * Python 3.6%\n  * CMake 3.2%\n  * Assembly 2.8%\n  * Shell 2.1%\n  * Go 0.7%\n  * Other 1.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
