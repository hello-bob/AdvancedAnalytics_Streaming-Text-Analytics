{"aid": "40165280", "title": "Swift Tooling: Windows Edition", "url": "https://speakinginswift.substack.com/p/swift-tooling-windows-edition", "domain": "speakinginswift.substack.com", "votes": 1, "user": "CharlesW", "posted_at": "2024-04-26 02:16:38", "comments": 0, "source_title": "Swift Tooling: Windows Edition", "source_text": "Swift Tooling: Windows Edition\n\n# Speaking in Swift by The Browser Company\n\nShare this post\n\n#### Swift Tooling: Windows Edition\n\nspeakinginswift.substack.com\n\n# Swift Tooling: Windows Edition\n\n### Productivity on every platform - a deep dive on the ways we're writing\nSwift code on Windows, and improving the developer experience along the way.\n\nThe Browser Company\n\nMar 07, 2024\n\n22\n\nShare this post\n\n#### Swift Tooling: Windows Edition\n\nspeakinginswift.substack.com\n\n5\n\nShare\n\nA view of the Swift developer experience in VS Code, courtesy of Jeremy Day.\n\nSwift on Windows is production ready, today. We\u2019ve talked before about how we\nrun Swift code on Windows, but we haven\u2019t talked about how we write Swift code\non Windows. Windows is already a mature development environment for authoring\nSwift code, and it\u2019s only getting better. Here we will go over the state of\nthe Swift ecosystem and tooling support on Windows, and discuss our plans to\ncontinue to improve the developer experience for Swift devs working on\nWindows.\n\nThe Swift Developer Experience:\n\nVisual Studio Code (hereafter \u201cVS Code\u201d) is the development environment of\nchoice for writing Swift code on Windows. The Swift Server Workgroup publishes\nan official Swift extension for VS Code, which serves as the primary\nintegration point for a great deal of Swift tooling. All the IDE features you\nwould expect are available: building and debugging with breakpoints; running\nand debugging tests; code navigation, autocomplete, and hover documentation;\ninline error reporting; and more. In addition to the first-party Swift\nextension, there are a plethora of other ways to extend VS Code to enhance the\ndevelopment experience. For example, GitHub\u2019s AI-powered Copilot extension\nworks great with Swift!\n\nWhen opening a Swift project for the first time in VS Code, the Swift\nextension kicks into gear and starts setting up your development environment.\nThe extension generates launch configurations, which enable you to build and\ndebug at the press of a button (Ctrl+Shift+b to build; F5 to debug).\nDependencies are discovered and checked out and, after the first build, the\nproject\u2019s tests are enumerated in the VS Code test explorer, providing a\nconvenient way to run and debug tests. This initial build also generates a\nsymbol index, which powers language services like \u201cgo to definition\u201d and\nrefactoring.\n\nAll of this comes together to provide a first-class development experience for\nwriting Swift programs on Windows. The Swift ecosystem and tooling on Windows\nis productive and ready for industry use.\n\nEditing code:\n\nWe\u2019ve come a long way from the days of teletypes and ed! VS Code is extensible\nwith language-specific editor services via the language server protocol. The\nSwift extension provides this functionality via sourcekit-lsp, a language\nserver implementation for Swift that is built on the same sourcekitd library\nused by Xcode. Code completion simplifies API discovery and avoids context\nswitches to pore over documentation. Code navigation allows you to breeze\nthrough the codebase and spend less time scrolling through the file explorer,\nby enabling you to jump straight to the location where a symbol is defined, or\nfinding all references of a given symbol in the codebase. Errors and warnings\nare displayed inline in the editor, so there\u2019s no need to visually parse line\nnumbers out of compiler errors.\n\nProgrammers all have their own opinions about code style, but most will agree\nthat codebase consistency is more important than any particular style.\nAutomated formatting tools trivialize this style consistency: swift-format\nwill keep your codebase nice and clean. This tool is integrated into\nsourcekit-lsp, and is also available as a standalone CLI tool.\n\nBuilding and testing code:\n\nThe Swift toolchain includes the Swift Package Manager (SPM), which is the\nprimary command line application for interacting with the Swift compiler. It\ncan build your project, run your tests, manage your dependencies, and more.\nMany of the nice VS Code integrations outlined above are enabled by this tool,\nwhich is supported on Windows.\n\nWhile SPM covers the 99% use-case, sometimes you need a little more control\nover a project\u2019s build. For those cases, CMake can be used to build Swift\nprojects with meticulous control. CMake supports integrating external tools\ninto a project\u2019s build, like calling into swift-winrt to generate WinRT\nbindings. It also enables you to limit the visibility of symbols in built\ndynamic libraries, which prevents running into the Windows limit of 64k\nexported symbols per DLL in large projects. CMake already supports building\nSwift projects, and the upcoming 3.29 release will bring further improvements,\nincluding support for language servers like sourcekit-lsp.\n\nYou\u2019re also not limited to building just for Windows x64: building for ARM64\nis supported, which is particularly useful for cross platform development on a\nMac with Windows running in Parallels. Official ARM64 toolchain builds are\nstill in the works, but preview builds are available today on The Browser\nCompany\u2019s fork of swift-build. Cross-compilation in either direction is\nsupported by both SPM and CMake.\n\nTesting with XCTest is supported with both build systems. When using SPM to\nbuild your project, the Swift extension discovers tests in your project and\npopulates VS Code\u2019s test explorer. Testing with CMake requires a bit more\nmanual effort to set up, but with a bit of work it\u2019s possible to\nprogrammatically generate test harnesses and register the tests with CTest,\nCMake's test runner. Once everything is defined in CMake terms, the CMake\nTools VS Code extension provides test explorer integration.\n\nDebugging:\n\nDebugging Swift code on Windows is easy and familiar. The Swift toolchain\nships with LLDB, which implements Microsoft\u2019s Debug Adapter Protocol (DAP),\nenabling seamless integration with VS Code. Command line debugging is also\navailable, for those who feel more at home in a terminal. The toolchain also\nincludes swift-inspect, a tool which enables you to gather information about a\nrunning Swift process, although there\u2019s still work to do to enable concurrency\ninspection on Windows.\n\nDebugging compiled binaries requires generating debug information, which can\nidentify the source location of symbols and provide other useful data to the\ndebugger about the program that would otherwise have been lost during\ncompilation. DWARF is the preferred debug information format for Swift, as it\nenables rich debugging with LLDB, but Swift on Windows can also generate\npartial debug information in the PDB format to integrate with Windows first-\nparty debugging tools. PDBs don\u2019t reliably enable runtime inspection of Swift\nvariables, but they provide enhanced debugging of code that interfaces with\nWindows system APIs. Generation of PDB files is supported when building Swift\non Windows with both SPM and CMake.\n\nA benefit of developing on Windows is access to the suite of first-party\ndebugging tools published by Microsoft. WinDBG is a general purpose debugger\nwith decades of development behind it, and is particularly useful for\ndebugging Swift programs which interact with Windows system libraries. Because\nof the PDB files generated alongside Swift programs, stacktraces which cross\nlanguage interop boundaries are fully symbolicated. For tracking down\nperformance issues, Windows Performance Analyzer (WPA) provides detailed\nbreakdowns of performance characteristics and resource usage during a run of\nthe application.\n\nTooling survey:\n\n  * The official Swift plugin for VS Code (GitHub, Swift blog) provides integration points for building, formatting and linting, debugging, testing, language services, and more. Windows-specific issues are tracked here.\n\n  * sourcekit-lsp (GitHub) provides language services for Swift; like goto definition, autocomplete, refactoring, and more. It\u2019s built on top of sourcekit, the language services library which powers Xcode, and is distributed as part of the Swift toolchain.\n\n  * swift-format (GitHub) if the official Swift code formatter and is distributed as part of the Swift toolchain.\n\n  * swift-inspect (GitHub) enables inspection of a live Swift process, like enumeration of live array objects or metadata allocations. Concurrency inspection is not yet enabled on Windows. This tool is distributed as part of the Swift toolchain.\n\n  * Swift Package Manager (GitHub) is the official Swift packaging tool. SPM provides entry points for building and testing projects, and will manage your project\u2019s dependencies.\n\n  * CMake (GitLab) is a powerful build tool with finer control over project build, although some manual configuration is required.\n\n  * VS Code CMake Tools (GitHub) provides editor integration with CMake projects, such as test explorer support, building and debugging entry points, build tool configuration, and more.\n\n  * lldb (GitHub, Swift.org) is LLVM\u2019s debugger, extended to support Swift. It implements the Debug Adapter Protocol (DAP), which enables debugging straight from VS Code.\n\n  * WinDbg (learn.microsoft.com) is a first-party Windows debugger, and is great for debugging Swift code that interacts with system libraries.\n\n  * Windows Performance Analyzer (WPA) (learn.microsoft.com) provides event tracing and resource usage characteristics of the execution of a program on Windows. Great for finding performance bottlenecks in Swift applications.\n\n  * Process Monitor (learn.microsoft.com) traces file system and registry access of an application, and general process/thread activity.\n\nIt\u2019s Your Turn:\n\nWe hope you\u2019ll agree that developing Swift on Windows is productive and fun.\nIf you\u2019ve been curious about writing Swift on Windows, there\u2019s never been a\nbetter time to start. All you need to do is grab a Swift toolchain release and\ninstall VS Code with the Swift extension, and you\u2019re ready to start coding! If\nyou want to try out the latest features, you can grab a bleeding edge\ntoolchain from The Browser Company\u2019s swift-build releases, with the caveat\nthat these toolchain releases may be less stable.\n\nIf you run into any problems or have suggestions, please file an issue in any\nof the repositories linked above (PRs are welcome too!) There\u2019s still a lot of\nways to make the developer experience even better. Let\u2019s work together to make\nSwift on Windows the best it can be!\n\nWe\u2019ll see you on the internet,\n\nJeremy\n\n### Subscribe to Speaking in Swift by The Browser Company\n\nLaunched 7 months ago\n\nSharing our technical learnings as we build Arc on Windows - in Swift.\n\n22 Likes\n\n22\n\nShare this post\n\n#### Swift Tooling: Windows Edition\n\nspeakinginswift.substack.com\n\n5\n\nShare\n\n5 Comments\n\nTaeksoo JungMar 9\u00b7edited Mar 9It's great stuff.BTW, do you have any plan to\nprovide declarative API sets like SwiftUI for this WinUI projection?It doesn't\nneed to be same as SwiftUI but some sort of declarative API can gain more\ndevelopers.I think that it is a normal developer expection when hearing Swift\ndevelopment is possible on Windowds.Expand full commentLikeReplyShare  \n---  \n  \n4 replies by The Browser Company and others\n\n4 more comments...\n\nReady for more?\n\n\u00a9 2024 The Browser Company\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
