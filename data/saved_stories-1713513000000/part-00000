{"aid": "40082695", "title": "What Are Chrome Flags?", "url": "https://developer.chrome.com/docs/web-platform/chrome-flags", "domain": "chrome.com", "votes": 4, "user": "keepamovin", "posted_at": "2024-04-19 01:48:37", "comments": 0, "source_title": "What are Chrome flags? | Web Platform | Chrome for Developers", "source_text": "What are Chrome flags? | Web Platform | Chrome for Developers\n\ndeveloper.chrome.com uses cookies from Google to deliver and enhance the\nquality of its services and to analyze traffic. Learn more.\n\n  * English\n  * Deutsch\n  * Espa\u00f1ol \u2013 Am\u00e9rica Latina\n  * Fran\u00e7ais\n  * Indonesia\n  * Italiano\n  * Nederlands\n  * Polski\n  * Portugu\u00eas \u2013 Brasil\n  * Ti\u1ebfng Vi\u1ec7t\n  * T\u00fcrk\u00e7e\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * \u05e2\u05d1\u05e8\u05d9\u05ea\n  * \u0627\u0644\u0639\u0631\u0628\u064a\u0651\u0629\n  * \u0641\u0627\u0631\u0633\u06cc\n  * \u0939\u093f\u0902\u0926\u0940\n  * \u09ac\u09be\u0982\u09b2\u09be\n  * \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22\n  * \u4e2d\u6587 \u2013 \u7b80\u4f53\n  * \u4e2d\u6587 \u2013 \u7e41\u9ad4\n  * \u65e5\u672c\u8a9e\n  * \ud55c\uad6d\uc5b4\n\nSign in\n\n  * Web Platform\n\n  * On this page\n  * Understand the risks\n\n    * ...and proceed with caution\n  * chrome://flags\n  * Command-line flags\n\n    * Set the Chrome user data directory\n    * Beware of flag conflicts\n  * Two other ways to try out experimental features\n  * Which features get a flag?\n  * What about Chrome settings?\n  * What about origin trials?\n  * Find out more\n\n  * Home\n  * Docs\n\n  * Web Platform\n\nWas this helpful?\n\n# What are Chrome flags?\n\nbookmark_borderbookmark Stay organized with collections Save and categorize\ncontent based on your preferences.\n\n  * On this page\n  * Understand the risks\n\n    * ...and proceed with caution\n  * chrome://flags\n  * Command-line flags\n\n    * Set the Chrome user data directory\n    * Beware of flag conflicts\n  * Two other ways to try out experimental features\n  * Which features get a flag?\n  * What about Chrome settings?\n  * What about origin trials?\n  * Find out more\n\nActivate additional debugging tools, or try out new or experimental features.\n\nSam Dutton\n\nChrome flags are a way to activate browser features that are not available by\ndefault.\n\nFor example, Chrome wanted to allow users to try picture-in-picture video\nfeatures, before rolling it out to everyone.\n\nThe feature was made available behind a flag, so any user could try it out and\ngive feedback. The code and design were tested and polished based on the\nfeedback, so now you can use picture-in-picture by default in Chrome\u2014and it\nworks really well.\n\n## Understand the risks\n\nMost Chrome users will never need to use Chrome flags.\n\nIf you do set Chrome flags, you need to be careful. By activating or\ndeactivating features, you could lose data or compromise your security or\nprivacy\u2014and features you toggle with a flag may stop working or be removed\nwithout notice.\n\nIf you're an enterprise IT administrator, you shouldn't use Chrome flags in\nproduction. You might want to take a look at enterprise policies instead.\n\n### ...and proceed with caution\n\nHaving said all that, if you're a web developer who needs to try out new\ntechnology\u2014or just a curious geek\u2014then getting to know Chrome flags can be\nreally worthwhile.\n\nThere are a large number of flags for many different types of features. Some\nflags affect the way Chrome looks or works, and some activate features such as\nnew JavaScript APIs. The availability of flags depends on which version of\nChrome you're running.\n\nKey point: Make sure to test your site in Chrome Stable without any flags set:\nas the majority of your users will experience it.\n\nThere are two ways to set Chrome flags:\n\n  * From the chrome://flags page.\n  * By opening Chrome from the command line in a terminal.\n\n## chrome://flags\n\nTo set a flag from the chrome://flags page in Chrome, you need to find the\nflag, toggle the setting for the flag, then relaunch the browser. For example,\nto activate Chrome's heads-up display for performance metrics:\n\n  1. Search for the feature.\n\n  2. Set the value to Enabled.\n\n  3. Relaunch Chrome.\n\nNow you can use the heads-up display that shows technical information about\nweb page performance.\n\nNote: If you make changes to chrome://flags, all the flags you've changed are\nlisted first on the page.\n\n## Command-line flags\n\nIf you're a web developer, you may want to set flags by opening Chrome from\nthe command line in a terminal. You run the command to open Chrome, and add\nthe flags you want to set. There are a lot more Chrome settings you can\nconfigure from the command line than those available from the chrome://flags\npage.\n\nFor example, to run Chrome Canary from a terminal on a Mac, with the Topics\nAPI activated and epoch length set to 15 seconds, use the following command:\n\n    \n    \n    /Applications/Google\\ Chrome\\ Canary.app/Contents/MacOS/Google\\ Chrome\\ Canary --enable-features=BrowsingTopics:time_period_per_epoch/15s,PrivacySandboxAdsAPIsOverride,PrivacySandboxSettings3,OverridePrivacySandboxSettingsLocalTesting\n\nThat's just one example! There are hundreds of other flags for activating,\ndeactivating and configuring less well-known features.\n\nIf you regularly use different Chrome channels with command-line flags, you\nmight want to create a function for each channel, and add these to your shell\nRC file. For example, on macOS:\n\n  1. Open a terminal.\n  2. Create a function: cf(){ open -a 'Google Chrome Canary' --args $*; }\n  3. Use the function: cf --enable-features=TrackingProtection3pcd\n\n### Set the Chrome user data directory\n\nIn Chrome engineering language, Chrome user refers to an \"individual human\nuser of Chrome\".\n\nA Chrome client refers to an individual installation of Chrome on a device.\n\nMore precisely, a Chrome client corresponds to an individual user data\ndirectory. Each Chrome profile is stored in a subdirectory within the user\ndata directory.\n\nIf you run Chrome from the command line, you can set the user data directory\nwith the --user-data-dir flag.\n\nThat means you can have a separate user data directory for development, with\nits own profile subdirectories. Creating a new user data directory makes\nChrome behave as if it had been freshly installed, which can be helpful for\ndebugging profile-related issues.\n\nTo run Chrome from the command line with a new temporary user directory, use\nthe following flag:\n\n    \n    \n    --user-data-dir=$(mktemp -d)\n\nYou might also want to add the following flags to avoid the browser check and\nfirst run UI:\n\n    \n    \n    --no-default-browser-check --no-first-run\n\n### Beware of flag conflicts\n\nIt's possible that the flags you set could conflict with each other.\nchrome://flags settings override command-line settings for the same flag, and\nthe defaults for a chrome://flags setting might, in some cases, override your\ncommand line configurations. If the flags you set running Chrome from the\ncommand line don't work as expected, you should check your chrome://flags\npage.\n\nNote that the settings shown on the chrome://flags page don't reflect flags\nset from the command line. Instead, take a look at the chrome://version page.\nThe Command Line section shows flag settings.\n\n## Two other ways to try out experimental features\n\nYou can enable a range of experimental features that don't have their own\nflag, by toggling the chrome://flags#enable-experimental-web-platform-features\nflag. Documentation for new features will explain when this is an option.\n\nIn Chrome Beta you can try out featured experiments and give feedback, by\ntoggling Experiment settings and relaunching the browser. Test experimental\nfeatures in Chrome provides more detail.\n\n## Which features get a flag?\n\nNot all experimental features get their own Chrome flag:\n\n  * Some features only become available when they ship in Chrome Canary, and can't be activated by a flag before that. This is quite rare.\n  * For 'smaller' features that require no more than 1\u20132 quarters of work, experimental availability is provided by enabling the following flag: chrome://flags#enable-experimental-web-platform-features This activates multiple minor features.\n  * Major features are made available for experimentation with flags specific to the feature, using chrome://flags or command line switches.\n\n## What about Chrome settings?\n\nChrome settings and Chrome flags serve different purposes.\n\nChrome flags enable the user to activate or deactivate experimental features,\nwhereas the controls available from the chrome://settings page allow the user\nto customize their experience for features that are available by default.\n\n## What about origin trials?\n\nOrigin trials are a way for developers to test a new or experimental web\nplatform feature at scale, and give feedback to the web standards community\nbefore the feature is made available to all users.\n\nFeatures undergoing an origin trial are activated on all pages that provide a\nvalid token for that trial. This allows website owners to activate an\nexperimental feature for all their users, without requiring users to change\nbrowser settings or set flags. By comparison, Chrome flags allow individual\nusers to activate or deactivate an experimental feature, on all websites they\nvisit. Getting started with Chrome's origin trials provides more detail.\n\n## Find out more\n\n  * The chromium.org website explains how to set flags from the command line, for mobile and desktop on different platforms.\n  * Learn about features, flags, switches, and other patterns for browser experimentation.\n  * Chrome Flags for Tooling documents flags relevant to tools, automation, and benchmarking.\n  * List of Chromium Command Line Switches is automatically updated with all available flags and, last time we checked, there were more than 1400 of them!\n  * Chromium Flag Updates is a bot that tweets changes to the chrome/browser/flag-metadata.json file.\n  * There are even more flags available to configure individual JavaScript API features. You can find out more about them from API documentation and proposal explainers.\n  * Experimental features in Firefox\n\nWas this helpful?\n\nExcept as otherwise noted, the content of this page is licensed under the\nCreative Commons Attribution 4.0 License, and code samples are licensed under\nthe Apache 2.0 License. For details, see the Google Developers Site Policies.\nJava is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-02-08 UTC.\n\n", "frontpage": true}
