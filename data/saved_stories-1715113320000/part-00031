{"aid": "40284434", "title": "How SMS Fraud Works. How to Guard Against It (Why Twitter Disabled SMS 2FA)", "url": "https://technicallythinking.substack.com/p/how-sms-fraud-works-and-how-to-guard-against-it", "domain": "technicallythinking.substack.com", "votes": 2, "user": "thunderbong", "posted_at": "2024-05-07 11:50:34", "comments": 0, "source_title": "How SMS Fraud Works and How to Guard Against It", "source_text": "How SMS Fraud Works and How to Guard Against It\n\n# Technically Thinking\n\nShare this post\n\n#### How SMS Fraud Works and How to Guard Against It\n\ntechnicallythinking.substack.com\n\n#### Discover more from Technically Thinking\n\nperspectives on engineering at startups\n\nContinue reading\n\nSign in\n\n# How SMS Fraud Works and How to Guard Against It\n\n### or why Twitter disabled SMS 2FA \ud83d\udcac\n\nApurva Chitnis\n\nFeb 28, 2023\n\n11\n\nShare this post\n\n#### How SMS Fraud Works and How to Guard Against It\n\ntechnicallythinking.substack.com\n\n6\n\nShare\n\nWith Twitter disabling text message two-factor authentication, I thought it\u2019d\nbe fun to do a deep-dive into how SMS fraud works and how app developers can\nguard against it.\n\nIt\u2019s a fascinating story of perverse incentives, short-sighted regulation, and\ntechnical ingenuity.\n\nLet\u2019s dig in! \ud83d\udc47\n\n> Note to all subscribers of Mindful Musings \u2014 this post (and others that will\n> follow) are part of a new series that I\u2019m calling Technically Thinking. The\n> focus of this section will be more engineering-related, with deep dives,\n> introduction pieces, and more for engineers and hackers.\n>\n> If that\u2019s not your cup of tea, feel free to opt-out of Technically Thinking\n> in your subscription \u2014 I won\u2019t mind! \ud83d\ude0a\n\n###\n\nPremium numbers\n\nTo start, let\u2019s recap Twitter\u2019s recent announcement:\n\nTwitter Support @TwitterSupport\n\nEffective March 20, 2023, only Twitter Blue subscribers will be able to use\ntext messages as their two-factor authentication method. Other accounts can\nuse an authentication app or security key for 2FA. Learn more here:\nhttps://t.co/wnT9Vuwh5n\n\n1:36 AM \u2219 Feb 18, 2023\n\n8,599Likes4,177Retweets\n\nIn plain English, this simply means that only users of the paid version of\nTwitter will get a code sent to their phone during login.\n\nThe key to understanding SMS fraud is understanding that some numbers are\npremium. If you want to call or send an SMS to this number, it\u2019ll cost you\nsome money \u2014 typically tens of cents \u2014 and the owner of the number gets a\nportion of those tens of cents for themselves.\n\nOwners of these phone numbers typically offer legitimate services that cost\nmoney to supply and offer value to their users, such as tele-voting, dating,\nand tech support.\n\nHowever, these numbers can be gamed for easy profit \ud83e\udd11\n\nThanks for reading Technically Thinking! Subscribe for free to receive new\nposts and support my work.\n\n###\n\nSMS fraud\n\nA bad actor, let\u2019s call him Bob, gets hold of several premium phone numbers1.\nBob could be a hacker, or could be a mobile phone network operator gone bad.\n\nBob finds a web service that will send text messages to his premium phone\nnumbers. These messages could be two-factor authentication codes, one time\npasswords, or any other text message sent to the user as part of the service\n(eg partiful.com sends event reminders via SMS).\n\nBob finds a way to make the service send thousands of SMSs to his premium\nphone numbers. This might be very easy. The front end service might be easy to\nmanipulate, and the backend endpoints might be unprotected and easy to\nreverse-engineer.\n\nEven worse, many services use a standardised endpoint for sending SMSs. This\nmakes it vastly easier to for Bob to find sites to attack. For example, if the\nservice uses a third party for authenticating users and sending out 2FA or OTP\ncodes, such as Auth0, then the endpoint for sending SMSs is mostly known: all\nBob needs to do is to figure out a way to discover the Auth0\u2019s ID for a web\nservice (fairly easy, since the web service\u2019s front-end makes a request\ncontaining this ID), and then they can attack all sites that use that third\nparty service.\n\nFinally, Bob makes the service send thousands of SMSs to his premium phone\nnumbers. The web service loses \ud83d\udcb5\ud83d\udcb5\ud83d\udcb5, and Bob profits.\n\n\u201ca hacker using sms\u201d, imagined by labs.openai.com\n\n###\n\nGuarding against SMS fraud\n\nThere\u2019s no one silver bullet to prevent SMS fraud. But here are a few ideas\nthat could work:\n\n  * If using a third-party service to authenticate users, such as Auth0, you could obfuscate the endpoint used to send SMSs. Whilst this won\u2019t prevent an attack outright, it does make it much harder to discover that an attack is possible.\n\nSimilar to how a bike thief targets the easiest to steal bikes, a good hacker\nwould move onto web services that are easier to hack. My hunch is that this\napproach would work for well enough for the long tail of apps.\n\n  * Block all requests from IPs that originate in cloud providers, fraudulent ISPs, or are otherwise sketchy. This should be fairly simple to implement \u2014 many services exist that allow you to rate the quality of an IP address \u2014 and would probably be very effective.\n\n  * Add IP-based rate-limiting to the endpoint that sends out SMS to block Bob\u2019s attack. If set up correctly, this won\u2019t affect legitimate users. However, this only works against a simple attack. If Bob architects his attack to send requests from a variety of IP addresses \u2014 a distributed attack \u2014 then this wouldn\u2019t work.\n\n  * Only send an SMS to a specific phone number a small number of times before blocking that phone number for a cool-off period. We could do this on the front-end, but if Bob is determined, he could figure out the backend endpoint to attack instead. Blocking the phone number on the backend is harder: it requires keeping a record of phone numbers and their recent login attempts.2\n\n  * Force the user to solve a CAPTCHA before sending them an SMS. Whilst this approach works well at blocking attackers \u2014 solving the CAPTCHA is hard and expensive to do at scale \u2014 it does degrade the user\u2019s experience of the service.\n\n  * Identify and block premium rate phone numbers, using libphonenumber. Whilst this seems promising, I don\u2019t know how reliable the data and how effective this approach is.\n\n  * Only send text messages to paid accounts. This is the approach Twitter has gone with. It\u2019s not a bad option, but as you can see from the list above, there\u2019re many other approaches you could take.\n\n  * Block mobile phone network operators with a high number of fraudulent users. This would block clearly bad network operators, but wouldn\u2019t work well if the network has many legitimate users.\n\n  * Use WhatsApp to send messages instead3. WhatsApp is free unlike SMS, but not all users across the world use WhatsApp.\n\nA good solution would make use of enough of the approaches above, prioritising\nby time investment and effectiveness, until the attackers move onto easier\ntargets.\n\nI\u2019ve got some personal experience implementing the above measures, and have a\nstory or two to share about how my team handled the fallout. But that\u2019s a\nstory for another time... \ud83d\udc68\ud83d\udcbb\n\n###\n\nBlocking SMS fraud at the source\n\nThis brings me to my final point:\n\n> IMO, Twilio \u2014 a dominant SMS API \u2014 has a huge opportunity to offer SMS fraud\n> protection as a (free? \ud83d\ude4f) add-on to their standard APIs.\n>\n> Since Twilio has data on fraudulent phone numbers and carriers across all\n> their accounts, Twilio are in the unique position to block bad numbers and\n> carriers fast \u2014 before they becomes a big issue for multiple web services.\n>\n> Twilio can even detect invalid phone numbers outright using Silent Network\n> Auth \u2014 a next-generation authentication mechanism \u2014 and it feels like this\n> utility ought to be shared between their users.\n\nI\u2019d love to hear any other thoughts, ideas and approaches folks have used \u2014\nplease share by writing a comment below, and we can all learn.\n\nThat\u2019s it for now \u2014 protect those endpoints, and have a great week!\n\nThere\u2019s an excellent discussion on HackerNews.\n\n1\n\nNote that these premium phone numbers don\u2019t even need to work: they don\u2019t need\nto be connected to a SIM card that is working and registered to a phone. As\nlong as they can be routed to, they can be used in this attack.\n\n2\n\nI\u2019m curious if there\u2019s a good data structure and algorithm to make this\nefficient and work at scale. Please share if you know of one!\n\n3\n\nCredit to @csharpminor on HN for their suggestion.\n\n### Subscribe to Technically Thinking\n\nBy Apurva Chitnis \u00b7 Launched a year ago\n\nperspectives on engineering at startups\n\n11 Likes\n\n\u00b7\n\n1 Restack\n\n11\n\nShare this post\n\n#### How SMS Fraud Works and How to Guard Against It\n\ntechnicallythinking.substack.com\n\n6\n\nShare\n\n6 Comments\n\nVraj ShahApr 22Liked by Apurva ChitnisExcellent Article!Another ways that we\nhave handled the above problem is by\\- We monitored and analyzed network\ntraffic for unusual patterns, such as spikes in SMS requests, which could\nindicate a coordinated attack. This we then combined with IP reputation\ndatabases.\\- We have also built APIs that specialize in real-time fraud\ndetection to monitor and analyze each SMS request's risk level. These APIs use\nlibphonenumber and global fraud data to evaluate the risk associated with an\nincoming request.\\- Using machine learning algorithms to analyze user behavior\npatterns we help detect anomalies that signify fraudulent activities. If a\nuser's current activity deviates significantly from their usual pattern, the\nsystem require additional authentication or temporarily block the user.\\- We\nhave implemented status based failover systems (delivery, read or open\nreceipts). For instance customer can decide to send the OTP on WhatsApp and\nthen if it is failed to deliver in 10s; send an OTPs on SMS or EMAIL.Regarding\nthe tech; redis has worked out beautifully for us at scale (using data\nstructures as sorted set to implement a rolling window based ratelimiting,\netc.)At fyno.io, tackling SMS fraud is what we do best. We've successfully\nintegrated advanced monitoring systems, real-time APIs, machine learning, all\nbecause this is our bread and butter and as a company you don't have to build\nthis non core service.Expand full commentLike (3)ReplyShare  \n---  \n  \nMatiasApr 21Liked by Apurva ChitnisGreat article!All those strategies are a\ngreat first layer of protection, we see however of tool fraud attacks in which\nthese protections don\u2019t suffice, it could be part of those fraudsters business\nmodel to even by-pass capcha.Seams like now twilio is now offering some kind\nof protection but it doesn\u2019t comes free.We built ding.live for that reason, a\ndifferent pricing in which we don\u2019t rely on overselling the sms price so we\ndon\u2019t have to look for extra margin when less are sent due to better fraud\nprotection.Expand full commentLike (1)ReplyShare  \n---  \n  \n4 more comments...\n\nIdentity, authentication, and authorisation from the ground up\n\nIn this post we will dive deeper and demystify how apps actually implement\nauthentication. Do it right, and you barely notice it. But do it wrong, and...\n\nAug 28, 2023 \u2022\n\nApurva Chitnis\n\n3\n\nShare this post\n\n#### Identity, authentication, and authorisation from the ground up\n\ntechnicallythinking.substack.com\n\nDemystifying Identity, Authentication and Authorisation: Part 1\n\nLet's understand what these terms actually mean!\n\nJul 23, 2023 \u2022\n\nApurva Chitnis\n\n1\n\nShare this post\n\n#### Demystifying Identity, Authentication and Authorisation: Part 1\n\ntechnicallythinking.substack.com\n\nReady for more?\n\n\u00a9 2024 Apurva Chitnis\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
