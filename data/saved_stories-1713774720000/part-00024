{"aid": "40110785", "title": "Making a Flute Controlled Mouse", "url": "https://0110.be/posts/Making_a_flute_controlled_mouse", "domain": "0110.be", "votes": 1, "user": "zdw", "posted_at": "2024-04-22 01:36:58", "comments": 0, "source_title": "0110.be - Making a flute controlled mouse", "source_text": "Making a flute controlled mouse - 0110.be\n\n# ~ Making a flute controlled mouse\n\n\u00bb By Joren on Monday 22 April 2024\n\nThere is something about surprising interfaces: clapping to switch on lights\nis more fun than a flipping a switch or pressing a panic-button to order a\npizza is more fun than ordering via an app. Recently I came across this\nsurprising interface: a flute controlled mouse cursor for a first person\nshooter. I recognize a good idea when I see one, and immediately wanted\nreplicate the idea and make it freely available. So I got to work:\n\nVid: a microcontroller controlling mouse movements based on pitch detection.\n\nWhat do we need for flute-based mouse? First we need a way to determine if a\nnote is being played and if a note is produced, we need to be able to\ndetermine which note is being played by the musician. Next, we need to hijack\nand control a cursor via the detected note and trigger a click event when a\nspecific note is played. Finally we need to play a flute, preferably a\nrecorder, to move the mouse cursor in an obviously superior and relaxed\nfashion. It is not strictly required to use a recorder but a recorder is very\nmuch advised.\n\nThe note determination can be done by a fundamental frequency detector. A\ndetector returns a frequency in Hertz and a confidence score which tells you\nhow reliable the detection is. With some filtering, this is exactly what we\nneed. If the frequency is close enough to a configured value, a note is\ndetected. The confidence score tells us to either accept or ignore the\ndetection. With this info it is possible to connect a note-detection to an\naction - like moving a cursor left or right, up or down.\n\nFinally we need to move the mouse cursor. There are a few ways to do this.\n\n## \ud83e\ude88 An micro-controller-based solution - Pitch perfect pointer positioning -\nPiPePoPo\n\nFig: Flute-based web-browsing as envisioned by its developer.\n\nA portable way to move a mouse cursor is to let a micro-controller impersonate\nas a standard mouse, a \u2018USB Human Interface Device\u2019. Once the micro-controller\nis attached via USB it registers as a mouse and allows to move the cursor and\nregister click events. To build a flute-based mouse, the micro-controller then\nneeds a microphone and a pitch estimator to finally send cursor events.\n\nI based my project on an RP2040 - a micro-controller chip designed by\nRaspberry Pi - since it offers a simple way to present itself to an operating\nsystem as a mouse. Just include PluggableUSBHID.h and USBMouse.h and use the\nMouse API to control the mouse. For me it only behaved as a standard mouse if\nSerial is not used at the same time: in other words the dual USB profile does\nnot seem to work reliably. Sending mouse events from your code looks, for\nexample, like ` Mouse.move(-4, 7)` to move the mouse minus four units in the\nhorizontal and seven units in the vertical direction. Click events have a\nsimilarly straightforward API. The RP2040 also has a built-in microphone,\nwhich makes it ideal for audio applications, or so it seems.\n\nUnfortunately, the RP2040 chip performs poorly for computationally heavy audio\nprocessing workloads. Such applications need to perform many floating point\noperations per second, but the RP2040 lacks a hardware floating point unit\n(FPU) which makes it relatively slow. When attempting to run a pitch-detection\nalgorithm, the RP2040 was too slow to run the algorithm in real-time. After\nprofiling the pitch estimation algorithm there was a clear place where most\nfloat operations occurred. Replacing those with much quicker fixed point\noperations makes the algorithm faster than real-time and usable on the\nRP2040.lt\n\nTo give a sens of the difference in speed between fixed point and floating\npoint operations on the RP2040: with the default arduino build process, a\nmillion floating point operations take over 883 000 microseconds, a million\nfixed point operations take 8 microseconds. Fixed point operations are around\n5 orders of magnitude faster!\n\nI have named released the code under the name Pitch perfect pointer\npositioning or PiPePoPo for short. For the details, please do check the source\ncode repository. Perhaps the most intresting, reusable component is the ANSI C\nimplementation of the YIN pitch estimator, both in floating point and sped up\nwith fixed point operations.\n\n## \ud83e\ude88 A browser extension - Pitch perfect pointer positioning - PiPePoPo\n\nThe hardware based solution works reliably but, evidently, it needs a piece of\nhardware. To make sure everybody can enjoy a solution in software is provided\nin this section in the form of a chrome browser extension.\n\nMoving a cursor is not possible in a browser: if a pointer location could be\nmodified it would open a whole range of possibilities for abuse. A\nsurprisingly easy workaround, however, is to hide the actual cursor and show a\nreplacement cursor-like icon. This fake cursor can be moved programmatically.\nWith the position of this fake cursor known, a click event can be triggered\nand result in, for example, following a link.\n\nTo take this idea to its logical next step, I implemented a chrome browser\nplug-in for flute-based web-browsing. I also relased this on GitHub under the\nPitch perfect Pointer Positioning or PiPePoPo brand. Check the installation\ninstructions in the PiPePoPo repository. Perhaps most of interest is how audio\nprocessing is handled by a Web Audio API Audio Worklet.\n\nVid: Controlling a cursor via a browser extension.\n\nJoin the flute-based web-browsing revolution today and experience web browsing\nlike never before and install PiPePoPo.\n\nUGent and Code\n\n0110.be 0110 concerten ARIP Code Collaborative Filtering Command Line\nApplication Computational ethnomusicology Computational musicology Cultuur\nDeep-learning Dutch featured Folk Music Analysis (FMA) conference fran\u00e7ais\nHackerspace Ghent Harde waren HoGent IPEM ISMIR Java Jazz JNMR Joren In\nHalmstad LaTeX Mac OS X Music Information Retrieval Muziek Panako PeachNote\nPiano Poging tot humor Portfolio Presentation Projecten Reizen Research papers\nSchool Tarsos TarsosDSP TarsosTranscoder Thesis UGent Vooruit WSOLA\n\n", "frontpage": false}
