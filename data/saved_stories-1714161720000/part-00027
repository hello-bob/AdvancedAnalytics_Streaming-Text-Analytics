{"aid": "40167196", "title": "Wild \u2013 Incremental Linker Written in Rust", "url": "https://github.com/davidlattimore/wild", "domain": "github.com/davidlattimore", "votes": 1, "user": "syrusakbary", "posted_at": "2024-04-26 08:50:02", "comments": 0, "source_title": "GitHub - davidlattimore/wild", "source_text": "GitHub - davidlattimore/wild\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ndavidlattimore / wild Public\n\n  * Sponsor\n  * Notifications\n  * Fork 5\n  * Star 188\n\n### License\n\n188 stars 5 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# davidlattimore/wild\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n1 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndavidlattimoreAdd support for shared object outputApr 25, 202405f1b7b \u00b7 Apr\n25, 2024Apr 25, 2024\n\n## History\n\n102 Commits  \n  \n### .cargo\n\n|\n\n### .cargo\n\n| Minor cleanup of build config| Mar 3, 2024  \n  \n### .github\n\n|\n\n### .github\n\n| Initial release| Feb 4, 2024  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| Initial release| Feb 4, 2024  \n  \n### wild\n\n|\n\n### wild\n\n| Add support for shared object output| Apr 25, 2024  \n  \n### wild_lib\n\n|\n\n### wild_lib\n\n| Add support for shared object output| Apr 25, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Minor doc tweaks| Feb 12, 2024  \n  \n### Cargo.lock\n\n|\n\n### Cargo.lock\n\n| Cleanup some unnecessary dependency duplication| Mar 18, 2024  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| Use released version of object crate| Mar 5, 2024  \n  \n### LICENSE-APACHE\n\n|\n\n### LICENSE-APACHE\n\n| Initial release| Feb 4, 2024  \n  \n### LICENSE-MIT\n\n|\n\n### LICENSE-MIT\n\n| Initial release| Feb 4, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Improve instructions for building rust code| Mar 6, 2024  \n  \n### cackle.toml\n\n|\n\n### cackle.toml\n\n| Update cackle.toml| Mar 5, 2024  \n  \n### rustfmt.toml\n\n|\n\n### rustfmt.toml\n\n| Initial release| Feb 4, 2024  \n  \n### self-link-and-test\n\n|\n\n### self-link-and-test\n\n| Minor adjustments for workspace| Mar 3, 2024  \n  \n## Repository files navigation\n\n# Wild linker\n\nWild is a linker with the goal of being very fast for iterative development.\n\nIt's still very much a work-in-progress and definitely shouldn't be used for\nlinking any production binaries. It's probably not really ready for\ndevelopment purposes yet, since there's a bunch of important stuff it can't\nyet do like debug info and dynamic linking.\n\n## Q&A\n\n### Why another linker?\n\nMold is already very fast, however it doesn't do incremental linking and the\nauthor has stated that they don't intend to. Wild doesn't do incremental\nlinking yet, but that is the end-goal. By writing Wild in Rust, it's hoped\nthat the complexity of incremental linking will be achievable.\n\n### What isn't yet supported?\n\nLots of stuff. Here are some of the larger things that aren't yet done,\nroughly sorted by current priority:\n\n  * Debug info\n  * Support for position-independent static executables\n  * Dynamic linking\n  * Incremental linking\n  * Mac support\n  * Windows support\n  * Support for architectures other than x86-64\n  * Support for a wider range of linker flags\n  * Linker scripts\n  * LTO\n\n### How can I verify that Wild was used to link a binary?\n\nInstall readelf, then run:\n\n    \n    \n    readelf -p .comment my-executable\n\nLook for a line like:\n\n    \n    \n    Linker: Wild version 0.1.0\n\nOr if you don't want to install readelf, you can probably get away with:\n\n    \n    \n    strings my-executable | grep Linker\n\n### Where did the name come from?\n\nIt's somewhat of a tradition for linkers to end with the letters \"ld\". e.g.\n\"GNU ld, \"gold\", \"lld\", \"mold\". Since the end-goal is for the linker to be\nincremental, an \"I\" is added. The \"W\" doesn't stand for anything and was just\nselected based on it giving an interesting word.\n\n### Benchmarks\n\nThere are lots of features that Wild doesn't yet support, so I'm not sure\nbenchmarking is super useful at this stage. That said, I have done some very\npreliminary comparisons. I've tried linking the binary in my warm build\nbenchmark repository, which builds an ~80MB, non-PIE, statically linked binary\nwith symbol tables, eh-frames and no debug info. On my laptop, I get the\nfollowing times:\n\nLinker| Time (ms)| \u00b1 Standard deviation (ms)| CPU time (ms)| File size (MiB)  \n---|---|---|---|---  \nGNU ld| 12300| 150| 12299| 80.3  \ngold| 3365| 30| 3362| 83.3  \nlld| 905| 5.6| 1222| 84.8  \nmold| 457| 7.2| 2834| 81.1  \nwild| 363| 6.6| 1585| 80.9  \n  \nNotes about these results:\n\n  * CPU time is user + system CPU time as reported by hyperfine.\n  * Mold by default forks, which lets the user not wait for the mold process that does the work to shutdown. This is a neat optimisation. In the above benchmarks, the time column is with this optimisation enabled. The CPU time however is with this optimisation disabled (--no-fork), since when forking is enabled, we can't easily measure the CPU time.\n\nI want to stress that this is only one benchmark. Many unknowns remain:\n\n  * Will the results be significantly different for other benchmarks?\n  * How will Wild scale up when linking much larger binaries and/or on systems with many CPU cores?\n  * Will implementing the missing features require changes to Wild's design that might slow it down?\n\nAll we can really conclude from this benchmark is that Wild is currently\nreasonably efficient at non-incremental linking and reasonable at taking\nadvantage of a few threads. I don't think that adding the missing features\nshould change this benchmark significantly. i.e. adding support for debug info\nreally shouldn't change our speed when linking with no debug info. I can't be\nsure however until I implement these missing features.\n\nIf you decide to benchmark Wild against other linkers, in order to make it a\nfair comparison, you should ensure that the other linkers aren't doing work on\nsomething that Wild doesn't support. In particular:\n\n  * No debug info should be linked. e.g. pass --strip-debug to all linkers\n  * A non-PIE binary should be produced. i.e. pass --no-pie\n\nThere might be other flags that speed up the other linkers by letting them\navoid some work that they're currently doing. If you know of such flags,\nplease let me know.\n\n## Linking Rust code\n\nCurrently Wild only works with somewhat specific compilation and linking\noptions. The following is a cargo test command-line that can be used to build\nand test a crate using Wild. This has been run successfully on a few popular\ncrates (e.g. ripgrep, serde, tokio, rand, bitflags). It assumes that the\n\"wild\" binary is on your path.\n\n    \n    \n    cargo test --target x86_64-unknown-linux-musl --config 'target.x86_64-unknown-linux-musl.linker=\"/usr/bin/clang-15\"' --config 'target.x86_64-unknown-linux-musl.rustflags=[\"-C\", \"relocation-model=static\", \"-C\", \"target-feature=+crt-static\", \"-C\", \"debuginfo=0\", \"-C\", \"link-arg=--ld-path=wild\"]'\n\n### Contributing\n\nIf you'd like to work on something specific, please reach out either by filing\nan issue or via email so that we can avoid any wasted work. I like talking to\npeople about Rust by video chat. If you'd like to discuss Wild, Rust compile\ntimes etc, you can book a slot in my calendar. If you can't find anything at a\ntime that suits, email me and I'll see if we can find a time that works.\n\n### Sponsorship\n\nIf you'd like to sponsor this work, that would be very much appreciated. The\nmore sponsorship I get the longer I can continue to work on this project full\ntime.\n\n### License\n\nLicensed under either of Apache License, Version 2.0 or MIT license at your\noption.\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in Wild by you, as defined in the Apache-2.0 license,\nshall be dual licensed as above, without any additional terms or conditions.\n\n## About\n\nNo description, website, or topics provided.\n\n### Resources\n\nReadme\n\n### License\n\nActivity\n\n### Stars\n\n188 stars\n\n### Watchers\n\n7 watching\n\n### Forks\n\n5 forks\n\nReport repository\n\n## Releases\n\n1 tags\n\n## Sponsor this project\n\ndavidlattimore David Lattimore\n\nSponsor\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * davidlattimore David Lattimore\n  * pinkforest pinkforest(she/her)\n\n## Languages\n\n  * Rust 91.6%\n  * C 7.6%\n  * Other 0.8%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
