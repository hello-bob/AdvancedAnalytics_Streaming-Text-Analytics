{"aid": "40113786", "title": "Will Visual Studio Be Migrated to .NET Core and Become Multi-Platform?", "url": "https://blog.ndepend.com/visual-studio-multi-platform/", "domain": "ndepend.com", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-22 12:39:57", "comments": 0, "source_title": "Will Visual Studio Be Migrated to .NET Core and Become Multi-Platform?", "source_text": "Will Visual Studio Be Migrated to .NET Core and Become Multi-Platform? -\nNDepend Blog\n\nX\n\nDownload the NDepend Trial and gain valuable insights into your .NET code\nwithin a few minutes  \n---  \n  \nx\n\nNDepend New Version v2024.1.0\n\n  * ### Meet ndepend.\n\n  * NDepend v2020.1.2 Released!\n  * Use Cases\n  * Getting Started\n  * Features\n  * Sample Reports\n  * Screenshots\n  * Default Rules\n  * Testimonials\n\n  * ### Need more information?\n\n  * Case Studies and Resources\n  * NDepend User Voice\n  * Developer vs Build-Machine vs Azure DevOps / TFS extension\n  * What's New\n  * Release Notes\n  * JArchitect, NDepend for Java\n  * CppDepend, NDepend for C++\n\n  * Contact Us\n  * Partners\n  * Trainings\n  * EULA\n\nNDepend Blog\n\nImprove your .NET code quality with NDepend\n\n# Will Visual Studio Be Migrated to .NET Core and Become Multi-Platform?\n\n### Share this:\n\n  * Facebook\n  * Twitter\n  * LinkedIn\n\nApril 22, 2024 7 minutes read\n\nI came across comments on a recent Reddit post and thought it would be\nintriguing to analyze the DLLs of Visual Studio 2022 (version 17.9.6) using\nNDepend. This analysis could reveal interesting details about how closely VS\n2022 adheres to the old .NET Framework, Windows native calls, and WPF and\nWinForms\n\nFull-fledged version of Visual Studio for Windows still based on the old .NET\nFramework, Do you think Microsoft will eventually rewrite it using the new\ncross-platform .NET version to provide a fully-featured Visual Studio for\nmacOS and Linux as well?\n\nNotice that there are two distinct questions:\n\n  * Will Visual Studio Be Migrated to .NET Core? (but still remain Windows-centric).\n  * Will Visual Studio Be Multi-Platform?\n\nDisclaimer: For nearly two decades, I\u2019ve been the creator and lead developer\nof NDepend, a tool that functions both as a Visual Studio extension and a\nstandalone app that can collaborate with VSCode and JetBrains Rider. NDepend\nalso integrates into CI/CD pipelines to deliver interactive web reports on\n.NET code quality and security. We\u2019ve collaborated with many Visual Studio\nengineers over the years, who have provided invaluable assistance, though we\nhave no insider information. This post is based purely on observable facts and\nspeculations derived from them.\n\nIndex\n\nToggle\n\n## Visual Studio: A Colossal .NET Code Base\n\nTo analyze the Visual Studio code base, I set up a new NDepend project\nreferencing DLLs located in the folder C:\\Program Files\\Microsoft Visual\nStudio\\2022\\Community\\Common7\\IDE and its subfolders. I then manually pruned\nDLLs such as mscorlib and Newtonsoft.Json that, although present in these\nfolders, are not directly related to Visual Studio. The results were as\nfollows\n\n  * 1.609 assemblies DLLs (70 EXEs, 1.539 DLLs)\n  * that contain 239.223 types\n  * that contain 1.954.404 methods and 905.143 fields\n  * for a total of 40.998.296 IL instructions. Obviously we don\u2019t have access to source code so we\u2019ll stick with # IL Instructions to measure code size. In average a statement compiles to 7 IL instructions so the analyzed code base contains roughly 5.8M statements.\n\nHere is a dependencies graph of the 754 assemblies whose name matches\n*VisualStudio* (click it to see a larger image) :\n\n## Native Calls in the Visual Studio Code Base\n\nWith this C# LINQ code query we obtain 9.769 native methods (Platform Invoke):\n\nC\n\n1| from m in Methods where m.IsPInvokeImpl select m  \n---|---  \n  \nIt is interesting to look at the distribution of native calls in Visual Studio\nDLLs with this query:\n\nC\n\n1234567| let pInvokeImpls = Methods.Where(m =>\nm.IsPInvokeImpl).ToHashSetEx()let asm = pInvokeImpls.ParentAssemblies()from a\nin asmlet calls = a.ChildMethods.Intersect(pInvokeImpls).ToArray()orderby\ncalls.Length descendingselect new { a, calls}  \n---|---  \n  \nHere are the findings. They indicate that core components of Visual Studio,\nsuch as the debugger, team foundation, the profiler, and the shell, heavily\ndepend on native calls.\n\n## Visual Studio Usage of WPF and Winforms\n\nLet\u2019s query the Visual Studio classes and structures that are using WPF or\nWinforms:\n\nC\n\n1234567| let uiTypes =\nThirdParty.Assemblies.WithNameIn(\"PresentationFramework\",\"PresentationCore\",\"System.Windows.Form\",\"System.Drawing\").ChildTypes().ToHashSetEx()from\nt in Application.Types.UsingAny(uiTypes)select new { t, uiTypesUsed =\nt.TypesUsed.Intersect(uiTypes) }  \n---|---  \n  \nWe obtain 12 615 types. Looking at these types matched in the metric view (in\nblue) provides insight into Visual Studio\u2019s reliance on Windows-centric UI\nframeworks, More importantly, it appears that WPF and WinForms are being\nutilized broadly across various projects. This suggests a lack of concerted\neffort to limit UI dependencies to specialized projects to facilitate greater\nabstraction from the code.\n\n## Target Framework of Visual Studio DLLs\n\nThis code query identifies assemblies compiled against any version of the .NET\nFramework, ranging from 1.0 to 4.8.\n\nC\n\n1234| from a in Application.Assemblieswhere\na.TargetFrameworkName.StartsWithAny(\"net4\", \"net20\", \"net10\")orderby\na.NbILInstructions descendingselect new { a, a.TargetFrameworkName,\na.ChildTypes, a.NbILInstructions }  \n---|---  \n  \nHere are the results:\n\nIn terms of IL instructions, 76.2% of the Visual Studio code is compiled\nagainst the .NET Framework. The remaining 23.8% is compiled against .NET\nStandard 2.0 or a version of .NET Core such as net6.0, net7.0, or net8.0.\n\n.NET Standard 2.0 code can run within a .NET Framework or .NET Core process.\nHowever, .NET Core assemblies run within background processes spawned by\ndevenv.exe, the main Visual Studio process which is a .NET Framework process.\n\n## What Can We Conclude?\n\n### Will Visual Studio Be Migrated to .NET Core? (but still remain Windows-\ncentric).\n\nFirst, let\u2019s go through why would it be beneficial:\n\n  * Visual Studio would benefit from all the performance gains brought by the .NET team over the year\n  * Certainly, developers working on Visual Studio are somewhat frustrated with working with a framework frozen in 2019.\n  * Visual Studio\u2019s main process operating on the old .NET Framework projects an image of an outdated, legacy product to the community\n\nShifting Visual Studio 2022 to x64 required a tremendous amount of work.\nSimilarly, upgrading the hundreds of projects to .NET 8 (or higher) will also\nbe a significant undertaking. However, considering that .NET Core fully\nsupports native calls, along with WPF and WinForms, the scope of this\nmigration is significantly bounded.\n\nCurrently, it\u2019s not a secret that DevDiv is heavily focused on integrating AI\nenhancements to boost .NET developer productivity. However, given the\nadvantages and feasibility of running Visual Studio on .NET Core, it\u2019s\nreasonable to anticipate this change in the next version of Visual Studio, or\nthe one following. Once again, this is just speculation and should not be\nconsidered as insider information, it is not.\n\n### The UI challenge to make Visual Studio Multi-Platform\n\nAdapting Visual Studio to work on Mac OS and Linux presents a unique\nchallenge. WPF and WinForms are primarily designed for Windows. However,\nAvalonia XPF aims to enable WPF applications to run on multiple platforms.\nSimilarly, Mono WinForms provides a multi-platform port of WinForms. Publicly,\nMicrosoft has consistently dismissed any expectation of migrating these UI\nframeworks to other operating systems. Additionally, these alternative\ntechnologies demand substantial manual effort. Considering the extensive use\nof WPF and WinForms within the Visual Studio code base, it seems unrealistic\nto expect that Visual Studio will become multi-platform as-is one day.\n\nWhat about transitioning Visual Studio to a fully featured cross-platform UI\nframework? Firstly, which framework would be suitable? MAUI, perhaps?\nPersonally, I haven\u2019t worked with MAUI and thus have no opinion on it. Yet,\nMAUI appears to receive considerable criticism\u2014perhaps the detractors are just\nmore vocal? I\u2019m not sure. In the main Reddit post comment states \u201cI don\u2019t\nthink that they are mad enough to use MAUI, and web-technologies also look\nlike a bad fit due to performance considerations.\u201d. Secondly, as we saw the\nscale of this task is so vast that I question whether it will ever be\naccomplished.\n\nKeep in mind the UI challenge is just one aspect. Many core components of\nVisual Studio, especially the debugger, depend heavily on native calls,\npresenting their own set of migration challenges.\n\n### Will Visual Studio Be Multi-Platform?\n\nUltimately, what are the advantages of making Visual Studio compatible with\nMac OS and Linux? Microsoft has phased out Visual Studio for Mac, while\nsimultaneously investing heavily in enhancing .NET programming on VS Code. The\nmessage from Microsoft is straightforward: For a comprehensive IDE for .NET\nprogramming, use Visual Studio on Windows. For other platforms, the powerful\nand free source code editor, VS Code, is available.\n\nNonetheless, Microsoft is aware of the success of JetBrains Rider, a\ncommercial, multi-platform .NET IDE. For the time being, however, VS Code\nremains Microsoft\u2019s solution for multi-platform .NET programming. As a Reddit\ncomment underlines: \u201cThe distance between VS and Linux is much larger than the\ndistance between VS Code and a full IDE.\u201d. Another comment speculates: \u201cWhere\nI think they\u2019re really going is trying to use the C# Dev Kit in VS Code as an\nexcuse to port their Intellisense and several other \u201csecret sauce\u201d features to\nbe cross-platform. Once that\u2019s done, I think they\u2019re going to build a new,\ncross-platform VS on top of that version of VS Code, sort of how like\nMicrosoft Edge is a fork of Chromium.\u201d\n\nIn summary, it is unlikely that Visual Studio will become multi-platform\nanytime soon.\n\n## Our Strategy as a Visual Studio Extension Provider\n\nIn 2021, to address the challenges of .NET Core and multi-platform\ncompatibility, we migrated the majority of our code base to .NET Standard 2.0.\nCurrently, 68.7% of our code is capable of running on .NET 8.0, 7.0, 6.0, or\n.NET Framework. We wrote a detailed post about this challenge: 5x Lessons\nLearned from Migrating a Large Legacy to .NET 5/6\n\nThis adaptation enables the CI/CD components of our product to produce HTML\ninteractive reports across various platforms. We offer users the option to run\nthe analysis on .NET 8.0, 7.0, or 6.0. Each corresponding folder\u2014net8.0,\nnet7.0, and net6.0\u2014includes a console executable that initiates the\nappropriate framework and then calls the .NET Standard 2.0 code for analysis\nand report generation.\n\nMeanwhile, both the Visual Studio extension and the standalone UI\nVisualNDepend.exe remain compiled against the .NET Framework. For the Visual\nStudio extension, this is a requirement. For VisualNDepend.exe, it is\nconvenient because \u2013 unlike .NET Core \u2013 the .NET Framework comes pre-installed\non all Windows machines.\n\nDuring this migration, we abstracted 42% of the UI code from any specific UI\nframework. This way we facilitate a smoother transition when we eventually\nswitch to a multi-platform UI framework. In the meantime, we have invested in\nenhancing the existing UI and significantly improving the HTML interactive\nreport as well. Given that more applications are transitioning to the browser\nnowadays, developing a fully usable and navigable web presentation of NDepend\nresults is a strategic move for the future.\n\n### Share this:\n\n  * Facebook\n  * Twitter\n  * LinkedIn\n\n## Make your .NET code beautiful with NDepend\n\nDownload the NDepend Trial and gain valuable insights into your .NET code\nwithin a few minutes\n\nDownload the 14 day trial now\n\n### Leave a Reply Cancel reply\n\n### Innovative\n\n> \"NDepend is giving me insight into my apps that I hadn\u2019t had before. Once I\n> realized the depth and breadth of the information I was looking at, I was\n> like a kid in a candy shop.\"\n\nScott Hanselman Program Manager at Microsoft\n\n### Architecture\n\n> \"The issues NDepend raised for me seemed to be more related to architecture\n> issues versus the other tools. It definitely gave me insight into what to\n> refactor and how to reduce technical debt.\"\n\nDavid Shifflet Senior Software Developer\n\nGet informed about our latest blog post.\n\n  * .NET 41\n  * Architecture 40\n  * C# 38\n  * Case Study 7\n  * NDepend 21\n  * Performance 5\n  * Visual Studio 57\n\n## Recent Posts\n\n  * Will Visual Studio Be Migrated to .NET Core and Become Multi-Platform? April 22, 2024\n  * C# String Interpolation Explained April 17, 2024\n  * Clean Architecture in ASP.NET Core April 16, 2024\n  * C# Async Await Explained April 16, 2024\n  * Visual Studio vs Visual Studio Code: The Ultimate Guide (2024) April 15, 2024\n\n## Archives\n\n  * April 2024 (10)\n  * March 2024 (2)\n  * February 2024 (1)\n  * January 2024 (7)\n  * December 2023 (2)\n  * November 2023 (9)\n  * October 2023 (3)\n  * August 2023 (1)\n  * June 2023 (1)\n  * May 2023 (1)\n  * April 2023 (2)\n  * February 2023 (1)\n  * January 2023 (2)\n  * November 2022 (2)\n  * October 2022 (2)\n  * August 2022 (1)\n  * June 2022 (2)\n  * May 2022 (1)\n  * January 2022 (2)\n  * November 2021 (2)\n  * October 2021 (1)\n  * September 2021 (2)\n  * August 2021 (1)\n  * July 2021 (2)\n  * June 2021 (1)\n  * May 2021 (4)\n  * April 2021 (4)\n  * March 2021 (1)\n  * February 2021 (3)\n  * January 2021 (3)\n  * December 2020 (3)\n  * November 2020 (3)\n  * October 2020 (3)\n  * September 2020 (4)\n  * July 2020 (4)\n  * June 2020 (3)\n  * April 2020 (1)\n  * March 2020 (1)\n  * February 2020 (2)\n  * January 2020 (1)\n  * October 2019 (1)\n  * September 2019 (5)\n  * August 2019 (1)\n  * July 2019 (3)\n  * April 2019 (1)\n  * February 2019 (2)\n  * January 2019 (2)\n  * December 2018 (2)\n  * November 2018 (3)\n  * October 2018 (5)\n  * September 2018 (3)\n  * August 2018 (3)\n  * July 2018 (3)\n  * June 2018 (4)\n  * May 2018 (6)\n  * April 2018 (5)\n  * March 2018 (6)\n  * February 2018 (4)\n  * January 2018 (4)\n  * December 2017 (3)\n  * November 2017 (6)\n  * October 2017 (5)\n  * September 2017 (5)\n  * August 2017 (6)\n  * July 2017 (4)\n  * June 2017 (5)\n  * May 2017 (4)\n  * April 2017 (4)\n  * March 2017 (4)\n  * February 2017 (4)\n  * January 2017 (4)\n  * December 2016 (4)\n  * November 2016 (4)\n  * October 2016 (4)\n  * September 2016 (5)\n  * August 2016 (4)\n  * July 2016 (4)\n  * June 2016 (5)\n  * May 2016 (4)\n  * April 2016 (5)\n  * March 2016 (5)\n  * February 2016 (6)\n  * January 2016 (4)\n  * December 2015 (6)\n  * November 2015 (5)\n  * October 2015 (5)\n  * September 2015 (4)\n  * August 2015 (4)\n  * July 2015 (5)\n  * June 2015 (1)\n\n  * ### about\n\n  * What's new in NDepend\n  * Download 14-Day Free Trial\n  * Buy\n  * EULA\n\n  * ### product\n\n  * Features\n  * Walkthrough Videos\n  * Sample Reports\n  * Screenshots\n  * Default Rules\n  * Resources\n  * Release Notes\n\n  * ### documentation\n\n  * Getting Started\n  * Code Metrics definitions\n  * Intro to code queries and rules\n  * Trending\n  * Dependency Graph\n  * Dependency Matrix\n  * Code Diff\n\n  * ### connect\n\n  * Email\n  * Twitter\n  * Facebook\n  * LinkedIn\n  * ### extras\n\n  * Default Code Rules\n  * NDepend API\n\n  * Home\n  * Product\n  * Blog\n  * Docs\n  * Download\n  * Buy\n  * About\n  * Privacy Policy\n\n  * Copyright \u00a9 2004-2023 ZEN PROGRAM\n\nMade with love by Growth Labs\n\n", "frontpage": false}
