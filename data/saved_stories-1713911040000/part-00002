{"aid": "40133670", "title": "EU Right to repair: Making repair easier and more appealing to consumers", "url": "https://www.europarl.europa.eu/news/en/press-room/20240419IPR20590/right-to-repair-making-repair-easier-and-more-appealing-to-consumers", "domain": "europa.eu", "votes": 24, "user": "janpot", "posted_at": "2024-04-23 16:16:02", "comments": 8, "source_title": "Right to repair: Making repair easier and more appealing to consumers | News | European Parliament", "source_text": "Right to repair: Making repair easier and more appealing to consumers | News | European Parliament\n\nDear visitor,\n\nWe use analytics cookies to offer you a better browsing experience. You have\nthe choice to refuse or accept them.\n\nFor any information on the other cookies and server logs we use, we invite you\nto read our data protection policy , our cookies policy and our cookies\ninventory.\n\nNews European Parliament\n\nEuropean Parliament\n\n#\n\nRight to repair: Making repair easier and more appealing to consumers\n\nPress Releases\n\nPlenary session\n\nIMCO\n\n6 hours ago\n\n##\n\nShare this page:\n\n  * Facebook\n\n  * Twitter\n\n  * LinkedIn\n\n  * WhatsApp\n\n  * Manufacturer has to repair a product for a reasonable price and within a reasonable timeframe after the legal guarantee period\n\n  * Access to spare parts, tools and repair information for consumers\n\n  * Incentives to opt for repair, such as repair vouchers and funds\n\n  * Online platforms will assist consumers in finding local repair services and shops selling refurbished goods\n\nRepairers and consumers will have better access to spare parts and repair-\nrelated information and tools. \u00a9 AdobeStock / Fxquadro\n\nThe new rules reinforce the right to repair, aim to reduce waste and bolster\nthe repair sector by making it easier and more cost-effective to repair goods.\n\nOn Tuesday, Parliament adopted the directive on the so-called \u201cright to\nrepair\u201d for consumers with 584 votes in favour, 3 against and 14 abstentions.\nThe rules clarify the obligations for manufacturers to repair goods and\nencourage consumers to extend a product\u2019s lifecycle through repair.\n\nObligation to repair\n\nThe new rules ensure that manufacturers provide timely and cost-effective\nrepair services and inform consumers about their rights to repair. Goods\nrepaired under the warranty will benefit from an additional one-year extension\nof the legal guarantee, further incentivising consumers to choose repair\ninstead of replacement.\n\nAfter the legal guarantee has expired, the manufacturer is still required to\nrepair common household products, which are technically repairable under EU\nlaw, such as washing machines, vacuum cleaners, and even smartphones. The list\nof product categories can be extended over time. Consumers may also borrow a\ndevice whilst theirs is being repaired or, if it cannot be fixed, opt for a\nrefurbished unit as an alternative.\n\nInformation on repair conditions and services\n\nA European information form can be offered to consumers to help them assess\nand compare repair services (detailing the nature of the defect, price and\nduration of the repair). To make the repair process easier, a European online\nplatform with national sections will be set up to help consumers easily find\nlocal repair shops, sellers of refurbished goods, buyers of defective items or\ncommunity-led repair initiatives, such as repair cafes.\n\nRevitalising the repair market\n\nThe rules aim to strengthen the EU repair market and reduce repair costs for\nconsumers. Manufacturers will have to provide spare parts and tools at a\nreasonable price and will be prohibited from using contractual clauses,\nhardware or software techniques that obstruct repairs. In particular, they\ncannot impede the use of second-hand or 3D-printed spare parts by independent\nrepairers, nor can they refuse to repair a product solely for economic reasons\nor because it was previously repaired by someone else.\n\nPromoting affordable repair\n\nTo make repairs more affordable, each member state will have to implement at\nleast one measure to promote repair, such as repair vouchers and funds,\nconducting information campaigns, offering repair courses or supporting for\ncommunity-led repair spaces.\n\nQuote\n\nRapporteur Ren\u00e9 Repasi (S&D, DE) said: \u201cConsumers\u2019 right to repair products\nwill now become a reality. It will be easier and cheaper to repair instead of\npurchase new, expensive items. This is a significant achievement for\nParliament and its commitment to empower consumers in the fight against\nclimate change. The new legislation extends legal guarantees by 12 months when\nopting for repair, gives better access to spare parts and ensures easier,\ncheaper and faster repair.\u201d\n\nNext steps\n\nOnce the directive is formally approved by Council and published in the EU\nOfficial Journal, member states will have 24 months to transpose it into\nnational law.\n\nBackground\n\nAccording to the European Commission, the premature disposal of consumer goods\nproduces 261 million tons of CO2-equivalent emissions, consumes 30 million\ntonnes of resources, and generates 35 million tonnes of waste in the EU each\nyear. Consumers also lose about \u20ac12 billion yearly by replacing goods rather\nthan repairing them. Additionally, the new rules are expected to bring \u20ac4.8\nbillion in growth and investment within the EU. The directive complements\nother new EU rules on Ecodesign and on Empowering consumers for the green\ntransition.\n\nConference on the future of Europe\n\nThe legislation responds directly to citizens\u2019 demands, as expressed in the\nConference on the Future of Europe. More concretely, proposals 5(6), (7), (10)\nand 11(2) on sustainable consumption and sustainable growth and innovation -\nlaunching a \u201crepair\u201d platform; introducing measures to promote a right to\nrepair and access to spare parts; taking EU action to incentivise consumers to\nuse products for longer; and addressing planned obsolescence and ensuring the\nright to repair.\n\n##\n\nContacts:\n\n  * ### Yasmina YAKIMOVA\n\nPress Officer\n\nContact data:\n\n    * Phone number: (+32) 2 28 42626 (BXL)\n    * Mobile number: (+32) 470 88 10 60\n    * E-mail: yasmina.yakimova@europarl.europa.eu\n    * Twitter account: @EP_SingleMarket\n\n##\n\nFurther information\n\n  * Committee on the Internal Market and Consumer Protection\n\n  * Procedure file\n\n  * Adopted text (23.04.2024)\n\n  * Video of the debate (22.03.2024)\n\n  * Press conference with the rapporteur after the final vote (23.04.2024)\n\n  * EP research service: Right to repair - Strengthened consumer rights\n\n  * EP multimedia: Circular economy\n\n##\n\nProduct information\n\nRef.: 20240419IPR20590\n\n##\n\nShare this page:\n\n  * Facebook\n\n  * Twitter\n\n  * LinkedIn\n\n  * WhatsApp\n\nSign up for mail updates\n\nPDF version\n\n## News\n\n### Parliament in your country\n\n  * Open in a new page London\n  * Open in a new page Dublin\n  * Open in a new page Edinburgh\n  * Open in a new page Valletta\n  * Open in a new page Washington\n\n### Tools\n\n  * Open in a new page Legislative Observatory\n  * Open in a new page Multimedia Centre\n  * Open in a new page EbS\n\n### The President of the European Parliament\n\n  * Open in a new page European Parliament President\u2019s website\n\n## European Parliament\n\n  * Open in a new page News\n  * Topics\n  * Open in a new page MEPs\n  * Open in a new page About Parliament\n  * Open in a new page Plenary\n  * Open in a new page Committees\n  * Open in a new page Delegations\n  * Elections\n\n## The Parliament on social media\n\n  * Check out Parliament on Facebook\n  * Check out Parliament on Twitter\n  * Check out Parliament on Flickr\n  * Check out Parliament on LinkedIn\n  * Check out Parliament on YouTube\n  * Check out Parliament on Instagram\n  * Check out Parliament on Pinterest\n  * Check out Parliament on Snapchat\n  * Check out Parliament on Reddit\n\n## Information links\n\n  * Open in a new pageContact\n  * Open in a new pageRSS\n  * Open in a new pageSitemap\n  * Open in a new pageLegal notice\n  * Open in a new pagePrivacy policy\n  * Open in a new pageAccessibility\n\n", "frontpage": true}
{"aid": "40133680", "title": "Attackers spread backdoor via eScan antivirus software update process", "url": "https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/", "domain": "avast.io", "votes": 2, "user": "skilled", "posted_at": "2024-04-23 16:17:18", "comments": 0, "source_title": "GuptiMiner: Hijacking Antivirus Updates for Distributing Backdoors and Casual Mining", "source_text": "GuptiMiner: Hijacking Antivirus Updates for Distributing Backdoors and Casual\nMining - Avast Threat Labs\n\n  * Menu\n\n  * Menu\n\n# GuptiMiner: Hijacking Antivirus Updates for Distributing Backdoors and\nCasual Mining\n\nby Jan Rub\u00edn and Mil\u00e1nekApril 23, 202450 min read\n\n## Key Points\n\n  * Avast discovered and analyzed a malware campaign hijacking an eScan antivirus update mechanism to distribute backdoors and coinminers\n  * Avast disclosed the vulnerability to both eScan antivirus and India CERT. On 2023-07-31, eScan confirmed that the issue was fixed and successfully resolved\n  * The campaign was orchestrated by a threat actor with possible ties to Kimsuky\n  * Two different types of backdoors have been discovered, targeting large corporate networks\n  * The final payload distributed by GuptiMiner was also XMRig\n\n## Introduction\n\nWe\u2019ve been tracking a curious one here. Firstly, GuptiMiner is a highly\nsophisticated threat that uses an interesting infection chain along with a\ncouple of techniques that include performing DNS requests to the attacker\u2019s\nDNS servers, performing sideloading, extracting payloads from innocent-looking\nimages, signing its payloads with a custom trusted root anchor certification\nauthority, among others.\n\nThe main objective of GuptiMiner is to distribute backdoors within big\ncorporate networks. We\u2019ve encountered two different variants of these\nbackdoors: The first is an enhanced build of PuTTY Link, providing SMB\nscanning of the local network and enabling lateral movement over the network\nto potentially vulnerable Windows 7 and Windows Server 2008 systems on the\nnetwork. The second backdoor is multi-modular, accepting commands from the\nattacker to install more modules as well as focusing on scanning for stored\nprivate keys and cryptowallets on the local system.\n\nInterestingly, GuptiMiner also distributes XMRig on the infected devices,\nwhich is a bit unexpected for such a thought-through operation.\n\nThe actors behind GuptiMiner have been capitalizing on an insecurity within an\nupdate mechanism of Indian antivirus vendor eScan to distribute the malware by\nperforming a man-in-the-middle attack. We disclosed this security\nvulnerability to both eScan and the India CERT and received confirmation on\n2023-07-31 from eScan that the issue was fixed and successfully resolved.\n\nGuptiMiner is a long-standing malware, with traces of it dating back to 2018\nthough it is likely that it is even older. We have also found that GuptiMiner\nhas possible ties to Kimsuky, a notorious North Korean APT group, by observing\nsimilarities between Kimsuky keylogger and parts of the GuptiMiner operation.\nIn this analysis, we will cover the GuptiMiner\u2019s features and its evolution\nover time. We will also denote in which samples the particular features are\ncontained or introduced to support the overall comprehension in the vast range\nof IoCs.\n\nIt is also important to note that since the users rarely install more than one\nAV on their machine, we may have limited visibility into GuptiMiner\u2019s activity\nand its overall scope. Because of this, we might be looking only at the tip of\nthe iceberg and the true scope of the entire operation may still be subject to\ndiscovery.\n\n## Infection Chain\n\nTo illustrate the complexity of the whole infection, we\u2019ve provided a flow\nchart containing all parts of the chain. Note that some of the used filenames\nand/or workflows can slightly vary depending on the specific version of\nGuptiMiner, but the flowchart below illustrates the overall process.\n\nThe whole process starts with eScan requesting an update from the update\nserver where an unknown MitM intercepts the download and swaps the update\npackage with a malicious one. Then, eScan unpacks and loads the package and a\nDLL is sideloaded by eScan clean binaries. This DLL enables the rest of the\nchain, following with multiple shellcodes and intermediary PE loaders.\n\nResulted GuptiMiner consists of using XMRig on the infected machine as well as\nintroducing backdoors which are activated when deployed in large corporate\nnetworks.\n\nGuptiMiner\u2019s infection chain\n\n## Evolution and Timelines\n\nGuptiMiner has been active since at least 2018. Over the years, the developers\nbehind it have improved the malware significantly, bringing new features to\nthe table. We will describe the specific features in detail in respective\nsubsections.\n\nWith that said, we also wanted to illustrate the significant IoCs in a\ntimeline representation, how they changed over time \u2013 focusing on mutexes,\nPDBs, and used domains. These timelines were created based on scanning for the\nIoCs over a large sample dataset, taking the first and last compilation\ntimestamps of the samples, then forming the intervals. Note that the scanned\ndataset is larger than listed IoCs in the IoC section. For more detailed list\nof IoCs, please visit our GitHub.\n\n### Domains in Time\n\nIn general, GuptiMiner uses the following types of domains during its\noperations:\n\n  * Malicious DNS \u2013 GuptiMiner hosts their own DNS servers for serving true destination domain addresses of C&C servers via DNS TXT responses\n  * Requested domains \u2013 Domains for which the malware queries the DNS servers for\n  * PNG download \u2013 Servers for downloading payloads in the form of PNG files. These PNG files are valid images (a logo of T-Mobile) that contain appended shellcodes at their end\n  * Config mining pool \u2013 GuptiMiner contains two different configurations of mining pools. One is hardcoded directly in the XMRig config which is denoted in this group\n  * Modified mining pool \u2013 GuptiMiner has the ability to modify the pre-defined mining pools which is denoted in this group\n  * Final C&C \u2013 Domains that are used in the last backdoor stage of GuptiMiner, providing additional malware capabilities in the backdoored systems\n  * Other \u2013 Domains serving different purposes, e.g., used in scripts\n\nNote that as the malware connects to the malicious DNS servers directly, the\nDNS protocol is completely separated from the DNS network. Thus, no legitimate\nDNS server will ever see the traffic from this malware. The DNS protocol is\nused here as a functional equivalent of telnet. Because of this, this\ntechnique is not a DNS spoofing since spoofing traditionally happens on the\nDNS network.\n\nFurthermore, the fact that the servers for which GuptiMiner asks for in the\nRequested domain category actually exist is purely a coincidence, or rather a\nnetwork obfuscation to confuse network monitoring tools and analysts.\n\nTimeline illustrating GuptiMiner\u2019s usage of domains in time\n\nFrom this timeline, it is apparent that authors behind GuptiMiner realize the\ncorrect setup of their DNS servers is crucial for the whole chain to work\nproperly. Because of this, we can observe the biggest rotation and shorter\ntimeframes are present in the Malicious DNS group.\n\nFurthermore, since domains in the Requested domain group are irrelevant (at\nleast from the technical viewpoint), we can notice that the authors are\nreusing the same domain names for longer periods of time.\n\n### Mutexes in Time\n\nMutexes help ensure correct execution flow of a software and malware authors\noften use these named objects for the same purpose. Since 2018, GuptiMiner has\nchanged its mutexes multiple times. Most significantly, we can notice a change\nsince 2021 where the authors changed the mutexes to reflect the\ncompilation/distribution dates of their new versions.\n\nTimeline illustrating GuptiMiner\u2019s usage of mutexes in time\n\nAn attentive reader can likely observe two takeaways: The first is the\napparent outliers in usage of MIVOD_6, SLDV15, SLDV13, and Global\\Wed Jun 2\n09:43:03 2021. According to our data, these mutexes were truly reused multiple\ntimes in different builds, creating larger timeframes than expected.\n\nAnother point is the re-introduction of PROCESS_ mutex near the end of last\nyear. At this time, the authors reintroduced the mutex with the string in\nUTF-16 encoding, which we noted separately.\n\n### PDBs in Time\n\nWith regard to debugging symbols, the authors of GuptiMiner left multiple PDB\npaths in their binaries. Most of the time, they contain strings like MainWork,\nProjects, etc.\n\nTimeline illustrating PDBs contained in GuptiMiner in time\n\n## Stage 0 \u2013 Installation Process\n\n### Intercepting the Updates\n\nEveryone should update their software, right? Usually, the individual either\ndownloads the new version manually from the official vendor\u2019s site, or \u2013\npreferably \u2013 the software itself performs the update automatically without\nmuch thought or action from the user. But what happens when someone is able to\nhijack this automatic process?\n\nOur investigation started as we began to observe some of our users were\nreceiving unusual responses from otherwise legitimate requests, for example\non:\n\nhttp://update3[.]mwti[.]net/pub/update/updll3.dlz\n\nThis is truly a legitimate URL to download the updll3.dlz file which is, under\nnormal circumstances, a legitimate archive containing the update of the eScan\nantivirus. However, we started seeing suspicious behavior on some of our\nclients, originating exactly from URLs like this.\n\nWhat we uncovered was that the actors behind GuptiMiner were performing man-\nin-the-middle (MitM) to download an infected installer on the victim\u2019s PC,\ninstead of the update. Unfortunately, we currently don\u2019t have information on\nhow the MitM was performed. We assume that some kind of pre-infection had to\nbe present on the victim\u2019s device or their network, causing the MitM.\n\n### Update Package\n\nc3122448ae3b21ac2431d8fd523451ff25de7f6e399ff013d6fa6953a7998fa3 (version.dll,\n2018-04-19 09:47:41 UTC)\n\nThroughout the analysis, we will try to describe not just the flow of the\ninfection chain, malware techniques, and functionalities of the stages, but we\nwill also focus on different versions, describing how the malware authors\ndeveloped and changed GuptiMiner over time.\n\nThe first GuptiMiner sample that we were able to find was compiled on Tuesday,\n2018-04-19 09:47:41 and it was uploaded to VirusTotal the day after from\nIndia, followed by an upload from Germany:\nc3122448ae3b21ac2431d8fd523451ff25de7f6e399ff013d6fa6953a7998fa3\n\nThis file was named C:\\Program Files\\eScan\\VERSION.DLL which points out the\ntarget audience is truly eScan users and it comes from an update package\ndownloaded by the AV.\n\nEven though this version lacked several features present in the newer samples,\nthe installation process is still the same, as follows:\n\n  1. The eScan updater triggers the update\n  2. The downloaded package file is replaced with a malicious one on the wire because of a missing HTTPS encryption (MitM is performed)\n  3. A malicious package updll62.dlz is downloaded and unpacked by eScan updater\n  4. The contents of the package contain a malicious DLL (usually called version.dll) that is sideloaded by eScan. Because of the sideloading, the DLL runs with the same privileges as the source process \u2013 eScan \u2013 and it is loaded next time eScan runs, usually after a system restart\n  5. If a mutex is not present in the system (depends on the version, e.g. Mutex_ONLY_ME_V1), the malware searches for services.exe process and injects its next stage into the first one it can find\n  6. Cleanup is performed, removing the update package\n\nThe malicious DLL contains additional functions which are not present in the\nclean one. Thankfully the names are very verbose, so no analysis was required\nfor most of them. The list of the functions can be seen below.\n\nAdditional exported functions\n\nSome functions, however, are unique. For example, the function X64Call\nprovides Heaven\u2019s gate, i.e., it is a helper function for running x64 code\ninside a 32-bit process on a 64-bit system. The malware needs this to be able\nto run the injected shellcode depending on the OS version and thus the bitness\nof the services.exe process.\n\nHeaven\u2019s gate to run the shellcode in x64 environment when required\n\nTo keep the original eScan functionality intact, the malicious version.dll\nalso needs to handle the original legacy version.dll functionality. This is\ndone by forwarding all the exported functions from the original DLL. When a\ncall of the legacy DLL function is identified, GuptiMiner resolves the\noriginal function and calls it afterwards.\n\nResolving function that ensures all the original version.dll exports are\navailable\n\n### Injected Shellcode in services.exe\n\nAfter the shellcode is injected into services.exe, it serves as a loader of\nthe next stage. This is done by reading an embedded PE file in a plaintext\nform.\n\nEmbedded PE file loaded by the shellcode\n\nThis PE file is loaded by standard means, but additionally, the shellcode also\ndestroys the PE\u2019s DOS header and runs it by calling its entry point, as well\nas it removes the embedded PE from the original location memory altogether.\n\n#### Command Line Manipulation\n\nAcross the entire GuptiMiner infection chain, every shellcode which is loading\nand injecting PE files also manipulates the command line of the current\nprocess. This is done by manipulating the result of GetCommandLineA/W which\nchanges the resulted command line displayed for example in Task Manager.\n\nCommand line manipulation function\n\nAfter inspecting this functionality, we believe it either doesn\u2019t work as the\nauthors intended or we don\u2019t understand its usage. Long story short, the\ncommand line is changed in such a way that everything before the first\n--parameter is skipped, and this parameter is then appended to the process\nname.\n\nTo illustrate this, we could take a command: notepad.exe param1 --XX param2\nwhich will be transformed into: notepad.exeXX param2\n\nHowever, we have not seen a usage like power --shell.exe param1 param2 that\nwould result into: powershell.exe param1 param2 nor have we seen any\nconcealment of parameters (like usernames and passwords for XMRig), a type of\nbehavior we would anticipate when encountering something like this. In either\ncase, this functionality is obfuscating the command line appearance, which is\nworth mentioning. An interested reader can play around with the functionality\nat the awesome godbolt.org here.\n\n### Code Virtualization\n\n7a1554fe1c504786402d97edecc10c3aa12bd6b7b7b101cfc7a009ae88dd99c6 (version.dll,\n2018-06-12 03:30:01)\n\nAnother version with a mutex ONLY_ME_V3 introduced a code virtualization. This\ncan be observed by an additional section in the PE file called .v_lizer. This\nsection was also renamed a few times in later builds.\n\nA new section with the virtualized code is called .v_lizer\n\nThankfully the obfuscation is rather weak, provided the shellcode as well as\nthe embedded PE file are still in the plaintext form.\n\nFurthermore, the authors started to distinguish between the version.dll stage\nand the PE file loaded by the shellcode by additional mutex. Previously, both\nstages used the shared mutex ONLY_ME_Vx, now the sideloading uses MTX_V101 as\na mutex.\n\n## Stage 0.9 \u2013 Installation Improvements\n\n3515113e7127dc41fb34c447f35c143f1b33fd70913034742e44ee7a9dc5cc4c (2021-03-28\n14:41:07 UTC)\n\nThe installation process has undergone multiple improvements over time, and,\nsince it is rather different compared to older variants, we decided to\ndescribe it separately as an intermediary Stage 0.9. With these improvements,\nthe authors introduced a usage of scheduled tasks, WMI events, two differently\nloaded next stages (Stage 1 \u2013 PNG loader), turning off Windows Defender, and\ninstalling crafted certificates to Windows.\n\nThere are also multiple files dropped at this stage, enabling further\nsideloading by the malware. These files are clean and serve exclusively for\nsideloading purposes. The malicious DLLs that are being sideloaded, are two\nPNG loaders (Stage 1):\n\n  * de48abe380bd84b5dc940743ad6727d0372f602a8871a4a0ae2a53b15e1b1739 *atiadlxx.dll\n  * e0dd8af1b70f47374b0714e3b368e20dbcfa45c6fe8f4a2e72314f4cd3ef16ee *BrLogAPI.dll\n\n### WMI Events\n\nde48abe380bd84b5dc940743ad6727d0372f602a8871a4a0ae2a53b15e1b1739\n(atiadlxx.dll, 2021-03-28 14:30:11 UTC)\n\nAt this stage, WMI events are used for loading the first of the PNG loaders.\nThis loader is extracted to a path: C:\\PROGRAMDATA\\AMD\\CNext\\atiadlxx.dll\n\nAlong with it, additional clean files are dropped, and they are used for\nsideloading, in either of these locations (can be both):\nC:\\ProgramData\\AMD\\CNext\\slsnotif.exe C:\\ProgramData\\AMD\\CNext\\msvcr120.dll or\nC:\\Program Files (x86)\\AMD\\CNext\\CCCSlim\\slsnotify.exe C:\\Program Files\n(x86)\\AMD\\CNext\\CCCSlim\\msvcr120.dll\n\nThe clean file slsnotify.exe is then registered via WMI event in such a way\nthat it is executed when these conditions are met:\n\nWMI conditions to trigger sideloading\n\nIn other words, the sideloading is performed on a workday in either January,\nJuly, or November. The numbers represented by %d are randomly selected values.\nThe two possibilities for the hour are exactly two hours apart and fall within\nthe range of 11\u201316 or 13\u201318 (inclusive). This conditioning further underlines\nthe longevity of GuptiMiner operations.\n\n### Scheduled Tasks\n\ne0dd8af1b70f47374b0714e3b368e20dbcfa45c6fe8f4a2e72314f4cd3ef16ee\n(BrLogAPI.dll, 2021-03-28 14:10:27 UTC)\n\nSimilarly to the WMI events, GuptiMiner also drops a clean binary for\nsideloading at this location: C:\\ProgramData\\Brother\\Brmfl14c\\BrRemPnP.exe\n\nThe malicious PNG loader is then placed in one (or both) of these locations:\nC:\\Program Files (x86)\\Brother\\Brmfl14c\\BrLogAPI.dll C:\\Program\nFiles\\Brother\\Brmfl14c\\BrLogAPI.dll\n\nThe scheduled task is created by invoking a Task Scheduler. The scheduled task\nhas these characteristics:\n\n  * It is created and named as C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\Brother\\Brmfl14c\n  * Executes: C:\\ProgramData\\Brother\\Brmfl14c\\BrRemPnP.exe\n  * The execution is done under a folder containing the to-be-sideloaded DLL, e.g.: C:\\Program Files (x86)\\Brother\\Brmfl14c\\\n  * The execution is performed with every boot (TASK_TRIGGER_BOOT) with SYSTEM privileges\n\n### Deploy During Shutdown\n\n3515113e7127dc41fb34c447f35c143f1b33fd70913034742e44ee7a9dc5cc4c (2021-03-28\n14:41:07 UTC)\n\nLet\u2019s now look at how all these files, clean and malicious, are being\ndeployed. One of GuptiMiner\u2019s tricks is that it drops the final payload,\ncontaining PNG loader stage, only during the system shutdown process. Thus,\nthis happens at the time other applications are shutting down and potentially\nnot protecting the user anymore.\n\nThe main flow of the Stage 0.9 variant \u2013 drops final payload during system\nshutdown\n\nFrom the code above, we can observe that only when the SM_SHUTTINGDOWN metric\nis non-zero, meaning the current session is shutting down, as well as all the\nsupporting clean files were dropped successfully, the final payload DLL is\ndropped as well.\n\nAn engaged reader could also notice in the code above that the first function\nthat is being called disables Windows Defender. This is done by standard means\nof modifying registry keys. Only if the Defender is disabled can the malware\nproceed with the malicious actions.\n\n### Adding Certificates to Windows\n\nMost of the time, GuptiMiner uses self-signed binaries for their malicious\nactivities. However, this time around, the attackers went a step further. In\nthis case, both of the dropped PNG loader DLLs are signed with a custom\ntrusted root anchor certification authority. This means that the signature is\ninherently untrusted since the attackers\u2019 certification authority cannot be\ntrusted by common verification processes in Windows.\n\nHowever, during the malware installation, GuptiMiner also adds a root\ncertificate to Windows\u2019 certificate store making this certification authority\ntrusted. Thus, when such a signed file is executed, it is understood as\ncorrectly signed. This is done by using CertCreateCertificateContext,\nCertOpenStore, and CertAddCertificateContextToStore API functions.\n\nFunction which adds GuptiMiner\u2019s root certificate to Windows\n\nThe certificate is present in a plaintext form directly in the GuptiMiner\nbinary file.\n\nA certificate in the plaintext form which is added as root to Windows by the\nmalware\n\nDuring our research, we found three different certificate issuers used during\nthe GuptiMiner operations:\n\n  * GTE Class 3 Certificate Authority\n  * VeriSign Class 3 Code Signing 2010\n  * DigiCert Assured ID Code Signing CA\n\nNote that these names are artificial and any resemblance to legitimate\ncertification authorities shall be considered coincidental.\n\n### Storing Payloads in Registry\n\n8e96d15864ec0cc6d3976d87e9e76e6eeccc23c551b22dcfacb60232773ec049\n(upgradeshow.dll, 2023-11-23 16:41:34 UTC)\n\nAt later development stages, authors behind GuptiMiner started to integrate\neven better persistence of their payloads by storing the payloads in registry\nkeys. Furthermore, the payloads were also encrypted by XOR using a fixed key.\nThis ensures that the payloads look meaningless to the naked eye.\n\nWe\u2019ve discovered these registry key locations to be utilized for storing the\npayloads so far:\n\n  * SYSTEM\\CurrentControlSet\\Control\\Nls\\Sorting\\Ids\\en-US\n  * SYSTEM\\CurrentControlSet\\Control\\PnP\\Pci\\CardList\n  * SYSTEM\\CurrentControlSet\\Control\\Wdf\\DMCF\n  * SYSTEM\\CurrentControlSet\\Control\\StorVSP\\Parsers\n\n## Stage 1 \u2013 PNG Loader\n\nff884d4c01fccf08a916f1e7168080a2d740a62a774f18e64f377d23923b0297 (2018-04-19\n09:45:25 UTC)\n\nWhen the entry point of the PE file is executed by the shellcode from Stage 0,\nthe malware first creates a scheduled task to attempt to perform cleanup of\nthe initial infection by removing updll62.dlz archive and version.dll library\nfrom the system.\n\nFurthermore, the PE serves as a dropper for additional stages by contacting an\nattacker\u2019s malicious DNS server. This is done by sending a DNS request to the\nattacker\u2019s DNS server, obtaining the TXT record with the response. The TXT\nresponse holds an encrypted URL domain of a real C&C server that should be\nrequested for an additional payload. This payload is a valid PNG image file (a\nT-Mobile logo) which also holds a shellcode appended to its end. The shellcode\nis afterwards executed by the malware in a separate thread, providing further\nmalware functionality as a next stage.\n\nNote that since the DNS server itself is malicious, the requested domain name\ndoesn\u2019t really matter \u2013 or, in a more abstract way of thinking about this\nfunctionality, it can be rather viewed as a \u201cpassword\u201d which is passed to the\nserver, deciding whether the DNS server should or shouldn\u2019t provide the\ndesired TXT answer carrying the instructions.\n\nAs we already mentioned in the Domains timeline section, there are multiple of\nsuch \u201cRequested domains\u201d used. In the version referenced here, we can see\nthese two being used:\n\n  * ext.peepzo[.]com\n  * crl.peepzo[.]com\n\nand the malicious DNS server address is in this case:\n\n  * ns1.peepzo[.]com\n\nHere we can see a captured DNS TXT response using Wireshark. Note that\nTransaction ID = 0x034b was left unchanged during all the years of GuptiMiner\noperations. We find this interesting because we would expect this could get\neasily flagged by firewalls or EDRs in the affected network.\n\nDNS TXT response captured by Wireshark\n\nThe requests when the malware is performing the queries is done in random\nintervals. The initial request for the DNS TXT record is performed in the\nfirst 20 minutes after the PNG loader is executed. The consecutive requests,\nwhich are done for the malware\u2019s update routine, wait up to 69 hours between\nattempts.\n\nThis update mechanism is reflected by creating separate mutexes with the\nshellcode version number which is denoted by the first two bytes of the\ndecrypted DNS TXT response (see below for the decryption process). This\nensures that no shellcode with the same version is run twice on the system.\n\nMutex is numbered by the shellcode\u2019s version information\n\n### DNS TXT Record Decryption\n\nAfter the DNS TXT record is received, GuptiMiner decodes the content using\nbase64 and decrypts it with a combination of MD5 used as a key derivation\nfunction and the RC2 cipher for the decryption. Note that in the later\nversions of this malware, the authors improved the decryption process by also\nusing checksums and additional decryption keys.\n\nFor the key derivation function and the decryption process, the authors\ndecided to use standard Windows CryptoAPI functions.\n\nTypical use of standard Windows CryptoAPI functions\n\nInterestingly, a keen eye can observe an oversight in this initialization\nprocess shown above, particularly in the CryptHashData function. The prototype\nof the CryptHashData API function is:\n\nBOOL CryptHashData( [in] HCRYPTHASH hHash, [in] const BYTE *pbData, [in] DWORD\ndwDataLen, [in] DWORD dwFlags );\n\nThe second argument of this function is a pointer to an array of bytes of a\nlength of dwDataLen. However, this malware provides the string L\"POVO@1\" in a\nUnicode (UTF-16) format, represented by the array of bytes *pbData.\n\nThus, the first six bytes from this array are only db 'P', 0, 'O', 0, 'V', 0\nwhich effectively cuts the key in half and padding it with zeroes. Even though\nthe malware authors changed the decryption key throughout the years, they\nnever fixed this oversight, and it is still present in the latest version of\nGuptiMiner.\n\n### DNS TXT Record Parsing\n\nAt this point, we would like to demonstrate the decrypted TXT record and how\nto parse it. In this example, while accessing the attacker\u2019s malicious DNS\nserver ns.srnmicro[.]net and the requested domain spf.microsoft[.]com, the\nserver returned this DNS TXT response:\n\nVUBw2mOgagCILdD3qWwVMQFPUd0dPHO3MS/CwpL2bVESh9OnF/Pgs6mHPLktvph2\n\nAfter fully decoding and decrypting this string, we get:\n\nThis result contains multiple fields and can be interpreted as:\n\nName| Value  \n---|---  \nVersion 1| 1  \nVersion 2| 5  \nKey size| \\r (= 0xD)  \nKey| Microsoft.com  \nC&C URL| http://www.deanmiller[.]net/m/  \nChecksum| \\xde  \n  \nThe first two bytes, Version 1 and Version 2, form the PNG shellcode version.\nIt is not clear why there are two such versions since Version 2 is actually\nnever used in the program. Only Version 1 is considered whether to perform the\nupdate \u2013 i.e., whether to download and load the PNG shellcode or not. In\neither case, we could look at these numbers as a major version and a minor\nversion, and only the major releases serve as a trigger for the update\nprocess.\n\nThe third byte is a key size that denotes how many bytes should be read\nafterwards, forming the key. Furthermore, no additional delimiter is needed\nbetween the key and the URL since the key size is known and the URL follows.\nFinally, the two-byte checksum can be verified by calculating a sum of all the\nbytes (modulo 0xFF).\n\nAfter the DNS TXT record is decoded and decrypted, the malware downloads the\nnext stage, from the provided URL, in the form of a PNG file. This is done by\nusing standard WinINet Windows API, where the User-Agent is set to contain the\nbitness of the currently running process.\n\nThe malware communicates the bitness of the running process to the C&C\n\nThe C&C server uses the User-Agent information for two things:\n\n  * Provides the next stage (a shellcode) in the correct bitness\n  * Filters any HTTP request that doesn\u2019t contain this information as a protection mechanism\n\n### Parsing the PNG File\n\nAfter the downloaded file is a valid PNG file which also contains a shellcode\nappended at the end. The image is a T-Mobile logo and has exactly 805 bytes.\nThese bytes are skipped by the malware and the rest of the file, starting at\nan offset 0x325, is decrypted by RC2 using the key provided in the TXT\nresponse (derived using MD5). The reason of using an image as this \u201cprefix\u201d is\nto further obfuscate the network communication where the payload looks like a\nlegitimate image, likely overlooking the appended malware code.\n\nPNG file containing the shellcode starting at 0x325\n\nAfter the shellcode is loaded from the position 0x325, it proceeds with\nloading additional PE loader from memory to unpack next stages using Gzip.\n\n### IP Address Masking\n\n294b73d38b89ce66cfdefa04b1678edf1b74a9b7f50343d9036a5d549ade509a (2023-11-09\n14:19:45 UTC)\n\nIn late 2023, the authors decided to ditch the years-long approach of using\nDNS TXT records for distributing payloads and they switched to IP address\nmasking instead.\n\nThis new approach consists of a few steps:\n\n  1. Obtain an IP address of a hardcoded server name registered to the attacker by standard means of using gethostbyname API function\n  2. For that server, two IP addresses are returned \u2013 the first is an IP address which is a masked address, and the second one denotes an available payload version and starts with 23.195. as the first two octets\n  3. If the version is newer than the current one, the masked IP address is de-masked and results in a real C&C IP address\n  4. The real C&C IP address is used along with a hardcoded constant string (used in a URL path) to download the PNG file containing the shellcode\n\nThe de-masking process is done by XORing each octet of the IP address by 0xA,\n0xB, 0xC, 0xD, respectively. The result is then taken, and a hardcoded\nconstant string is added to the URL path.\n\nAs an example, one such server we observed was www.elimpacific[.]net. It was,\nat the time, returning:\n\nThe address 23.195.101[.]1 denotes a version and if it is greater than the\ncurrent version, it performs the update by downloading the PNG file with the\nshellcode. This update is downloaded by requesting a PNG file from the real\nC&C server whose address is calculated by de-masking the 179.38.204[.]38\naddress:\n\nThe request is then made, along with the calculated IP address 185.45.192[.]43\nand a hardcoded constant elimp. Using a constant like this serves as an\nadditional password, in a sense: 185.45.192[.]43/elimp/\n\nGuptiMiner is requesting the payload from a real IP address\n\nWhen the PNG file is downloaded, the rest of the process is the same as usual.\n\nWe\u2019ve discovered two servers for this functionality so far:\n\nQueried server| URL path constant  \n---|---  \nwww.elimpacific[.]net| elimp  \nwww.espcomp[.]net| OpenSans  \n  \n### Anti-VM and Anti-debug Tricks\n\n294b73d38b89ce66cfdefa04b1678edf1b74a9b7f50343d9036a5d549ade509a (2023-11-09\n14:19:45 UTC)\n\nAlong with other updates described above, we also observed an evolution in\nusing anti-VM and anti-debugging tricks. These are done by checking well known\ndisk drivers, registry keys, and running processes.\n\nGuptiMiner checks for these disk drivers by enumerating\nHKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\Disk\\Enum:\n\n  * vmware\n  * qemu\n  * vbox\n  * virtualhd\n\nSpecifically, the malware also checks the registry key\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Cylance for the presence of Cylance AV.\n\nAs other anti-VM measures, the malware also checks whether the system has more\nthan 4GB available RAM and at least 4 CPU cores.\n\nLast but not least, the malware also checks the presence of these processes by\ntheir prefixes:\n\nProcess name prefix| Tool name  \n---|---  \nwireshar| Wireshark  \nwindbg.| WinDbg  \ntcpview| TCPView  \n360| 360 Total Security  \nhips| Huorong Internet Security (hipsdaemon.exe)  \nproce| Process Explorer  \nprocm| Process Monitor  \nollydbg| OllyDbg  \n  \n### Storing Images in Registry\n\n6305d66aac77098107e3aa6d85af1c2e3fc2bb1f639e4a9da619c8409104c414 (2023-02-22\n14:03:04 UTC)\n\nSimilarly to Storing Payloads in Registry, in later stages of GuptiMiner, the\nauthors also started to save the downloaded PNG images (containing the\nshellcodes) into registry as well. Contrary to storing the payloads, the\nimages are not additionally XORed since the shellcodes in them are already\nencrypted using RC2 (see DNS TXT Record Decryption section for details).\n\nWe\u2019ve discovered these registry key locations to be utilized for storing the\nencrypted images containing the shellcodes so far:\n\n  * SYSTEM\\CurrentControlSet\\Control\\Arbiters\\Class\n  * SYSTEM\\CurrentControlSet\\Control\\CMF\\Class\n  * SYSTEM\\CurrentControlSet\\Control\\CMF\\CORE\n  * SYSTEM\\CurrentControlSet\\Control\\CMF\\DEF\n  * SYSTEM\\CurrentControlSet\\Control\\CMF\\Els\n  * SYSTEM\\CurrentControlSet\\Control\\CMF\\ASN\n  * SYSTEM\\CurrentControlSet\\Control\\MSDTC\\BSR\n\n## Stage 2 \u2013 Gzip Loader\n\n357009a70daacfc3379560286a134b89e1874ab930d84edb2d3ba418f7ad6a0b (2019-04-02\n07:30:21 UTC)\n\nThis stage is the shortest, the Gzip loader, which is extracted and executed\nby the shellcode from the PNG file, is a simple PE that decompresses another\nshellcode using Gzip and executes it in a separate thread.\n\nThis thread additionally loads Stage 3, which we call Puppeteer, that\norchestrates the core functionality of the malware \u2013 the cryptocurrency mining\nas well as, when applicable, deploying backdoors on the infected systems.\n\nThroughout the GuptiMiner operations, Gzip loader has not been changed with\nlater versions.\n\n## Stage 3 \u2013 Puppeteer\n\n364984e8d62eb42fd880755a296bd4a93cc071b9705c1f1b43e4c19dd84adc65 (2019-03-15\n10:07:36 UTC)\n\nLet\u2019s now look at the biggest Stage 3, the Puppeteer. It pulls its strings\neverywhere across the infected system, manipulating the GuptiMiner components\nto do its bidding, hence the name we\u2019ve chosen. It orchestrates further\nactions and deploys two core components of the malware \u2013 an XMRig coinminer\nand two types of backdoors that target devices present in large corporate\nnetworks. Of course, Puppeteer also introduces additional tricks to the\narsenal of the whole GuptiMiner operation.\n\nThis stage also uses one of the many Global\\SLDV mutexes which we described in\nthe Mutex timeline. For example, this particular sample uses SLDV01 as its\nmutex.\n\n### Puppeteer Setup\n\nPuppeteer performs several steps for a proper setup. Firstly, it adds a new\npower scheme in Windows so the PC does not go to sleep. If the CPU has only\none core (anti-VM) or the mutex already exists, the malware ceases to function\nby going to infinite sleep.\n\nIn the next phase, the malware kills all the processes with a name\nmsiexec.exe, cmstp.exe, or credwiz.exe. After that, it creates a separate\nthread that injects XMRig into a credwiz.exe process freshly created by the\nmalware. The malware also disables Windows Defender by setting its service\nstart status to disabled.\n\nFor the persistence, Puppeteer chose an interesting approach. Firstly, it\ncreates a scheduled task with the following configuration:\n\n  * A legitimate rundll32.exe file is copied and renamed into C:\\ProgramData\\Microsoft\\Crypto\\Escan\\dss.exe and this file is executed from the scheduled task\n  * The malicious DLL is placed to C:\\ProgramData\\Microsoft\\Crypto\\Escan\\updll3.dll3 and this file is loaded by dss.exe (exported function ValidateFile)\n  * The task is executed with every boot (TASK_TRIGGER_BOOT) and TASK_RUNLEVEL_HIGHEST priority\n  * The task is named and located at C:\\Windows\\system32\\tasks\\Microsoft\\windows\\autochk\\ESUpgrade\n\nWith that, the malware copies the content of updll3.dll3 into memory and\ndeletes the original file from disk. Puppeteer then waits for a system\nshutdown (similarly to Stage 0.9) by waiting for SM_SHUTTINGDOWN metric to be\nset to non-zero value, indicating the shutdown. This is checked every 100\nmilliseconds. Only when the shutdown of the system is initiated, the malware\nreintroduces the updll3.dll3 file back onto disk.\n\nPutting the malicious DLL back just before the system restart is really sneaky\nbut also has potentially negative consequences. If the victim\u2019s device\nencounters a crash, power outage, or any other kind of unexpected shutdown,\nthe file won\u2019t be restored from memory and Puppeteer will stop working from\nthis point. Perhaps this is the reason why authors actually removed this trick\nin later versions, trading the sophistication for malware\u2019s stability.\n\nA code ensuring the correct after-reboot execution\n\nThe repetitive loading of updll3.dll3, as seen in the code above, is in fact\nPuppeteer\u2019s update process. The DLL will ultimately perform steps of\nrequesting a new PNG shellcode from the C&C servers and if it is a new\nversion, the chain will be updated.\n\n### XMRig Deployment\n\nDuring the setup, Puppeteer created a separate thread for injecting an XMRig\ncoinminer into credwiz.exe process. Before the injection takes place, however,\na few preparation steps are performed.\n\nThe XMRig configuration is present directly in the XMRig binary (standard JSON\nconfig) stored in the Puppeteer binary. This configuration can be, however,\nmodified to different values on the fly. In the example below, we can see a\ndynamic allocation of mining threads depending on the robustness of the\ninfected system\u2019s hardware.\n\nPatching the XMRig configuration on the fly, dynamically assigning mining\nthreads\n\nThe injection is standard: the malware creates a new suspended process of\ncredwiz.exe and, if successful, the coinmining is injected and executed by\nWriteProcessMemory and CreateRemoteThread combo.\n\nPuppeteer continuously monitors the system for running process, by default\nevery 5 seconds. If it encounters any of the monitoring tools below, the\nmalware kills any existing mining by taking down the whole credwiz.exe process\nas well as it applies a progressive sleep, postponing another re-injection\nattempt by additional 5 hours.\n\n  * taskmgr.exe\n  * autoruns.exe\n  * wireshark.exe\n  * wireshark-gtk.exe\n  * tcpview.exe\n\nFurthermore, the malware needs to locate the current updll3.dll3 on the system\nso its latest version can be stored in memory, removed from disk, and dropped\njust before another system restart. Two approaches are used to achieve this:\n\n  * Reading eScan folder location from HKEY_LOCAL_MACHINE\\SOFTWARE\\AVC3\n  * If one of the checked processes is called download.exe, which is a legitimate eScan binary, it obtains the file location to discover the folder. The output can look like this:\n\n    * \\Device\\HarddiskVolume1\\Program Files (x86)\\eScan\\download.exe\n\nThe check for download.exe serves as an alternative for locating eScan\ninstallation folder and the code seems heavily inspired by the example code of\nObtaining a File Name From a File handle on MSDN.\n\nFinally, Puppeteer also continuously monitors the CPU usage on the system and\ntweaks the core allocation in such a way it is not that much resource heavy\nand stays under the radar.\n\n### Backdoor Setup\n\n4dfd082eee771b7801b2ddcea9680457f76d4888c64bb0b45d4ea616f0a47f21 (2019-06-29\n03:38:24 UTC)\n\nThe backdoor is set up by the previous stage, Puppeteer, by first discovering\nwhether the machine is operating on a Windows Server or not. This is done by\nchecking a DNS Server registry key (DNS Server service is typically running on\na Windows Server edition): SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\DNS\nServer\n\nAfter that, the malware runs a command to check and get a number of computers\njoined in a domain: net group \u201cdomain computers\u201d /domain\n\nThe data printed by the net group command typically uses 25 characters per\ndomain joined computer plus a newline (CR+LF) per every three computers, which\ncan be illustrated by the example below:\n\nExample output of net group command\n\nIn this version of the backdoor setup, Puppeteer checks whether the number of\nreturned bytes is more than 100. If so, Puppeteer assumes it runs in a network\nshared with at least five computers and downloads additional payloads from a\nhardcoded C&C (https://m.airequipment[.]net/gpse/) and executes it using\nPowerShell command.\n\nNote that the threshold for the number of returned bytes was different and\nsignificantly higher in later versions of GuptiMiner, as can be seen in a\ndedicated section discussing Modular Backdoor, resulting in compromising only\nthose networks which had more than 7000 computers joined in the same domain!\n\nIf the checks above pass, Puppeteer uses a PowerShell command for downloading\nand executing the payload and, interestingly, it is run both in the current\nprocess as well as injected in explorer.exe.\n\nFurthermore, regardless of whether the infected computer is present in a\nnetwork of a certain size or not, it tries to download additional payload from\ndl.sneakerhost[.]com/u as well. This payload is yet another PNG file with the\nappended shellcode. We know this because the code uses the exact same parsing\nfrom the specific offset 0x325 of the PNG file as described in Stage 1.\nHowever, during our analysis, this domain was already taken down and we\ncouldn\u2019t verify what kind of payload was being distributed here.\n\nThe Puppeteer\u2019s backdoor setup process was improved and tweaked multiple times\nduring its long development. In the upcoming subsections, we will focus on\nmore important changes, mostly those which influence other parts of the\nmalware or present a whole new functionality.\n\n### Later Puppeteer Versions\n\nIn later versions, the attackers switched to the datetime mutex paradigm (as\nillustrated in Mutexes in Time section) and also introduced additional process\nmonitoring of more Sysinternals tools like Process explorer, Process monitor,\nas well as other tools like OllyDbg, WinDbg, and TeamViewer.\n\n#### Pool Configuration\n\n487624b44b43dacb45fd93d03e25c9f6d919eaa6f01e365bb71897a385919ddd (2023-11-21\n18:05:43 UTC)\n\nAdditionally, the GuptiMiner authors also started to modify pool addresses in\nXMRig configurations with a new approach. They started using subdomains by \u201cr\u201d\nand \u201cm\u201d depending on the available physical memory on the infected system. If\nthere is at least 3 GB of RAM available, the malware uses: m.domain.tld with\nauto mode and enabled huge pages.\n\nIf the available RAM is lesser than 3 GB, it uses: r.domain.tld with light\nmode and disabled huge pages.\n\nIn order to not keep things simple, the authors later also started to use \u201cp\u201d\nas a subdomain in some versions, without any specific reason for the naming\nconvention (perhaps just to say it is a \u201cpool\u201d).\n\nThe usage of all such domains in time can be seen in the Domains timeline.\n\n#### Variety in Used DLLs\n\nPuppeteer used many different names and locations of DLLs over the years for\nsideloading or directly loading using scheduled tasks. For example, these\nmight be:\n\n  * C:\\Program Files (x86)\\eScan\\updll3.dll3\n  * C:\\Program Files\\Common Files\\SYSTEM\\SysResetErr\\SysResetErr.DLL\n  * C:\\Program Files\\Microsoft SQL Server\\SpellChecking\\MsSpellChecking.DLL\n  * C:\\Program Files\\Microsoft SQL Server\\SpellChecking\\MsSpellCheckingHost.DLL\n  * C:\\ProgramData\\AMD\\CNext\\atiadlxx.dll\n  * C:\\ProgramData\\Microsoft\\Assistance\\LunarG\\vulkan-1.dll\n  * C:\\ProgramData\\Microsoft\\Crypto\\Escan\\updll3.dll\n  * C:\\ProgramData\\Microsoft\\Crypto\\Escan\\updll3.dll3\n  * C:\\ProgramData\\Microsoft\\Network\\Escan\\AutoWake.dll\n\n#### Puppeteer Cleanup\n\n1c31d06cbdf961867ec788288b74bee0db7f07a75ae06d45d30355c0bc7b09fe (2020-03-09\n00:57:11 UTC)\n\nWe\u2019ve also seen \u201ccleaner\u201d Puppeteers, meaning they didn\u2019t contain the setup\nprocess for backdoors, but they were able to delete the malicious DLLs from\nthe system when a running monitoring tool was detected.\n\n#### Deploy Per-Quarter\n\n1fbc562b08637a111464ba182cd22b1286a185f7cfba143505b99b07313c97a4 (2021-03-01\n10:43:27 UTC)\n\nIn this particular version, the deployment of the backdoor was performed once\nevery 3 months, indicating a per-quarter deployment.\n\nThe deployment happens at March, June, September, and December\n\n## Stage 4 \u2013 Backdoor\n\nSince no one who puts such an effort into a malware campaign deploys just\ncoinminers on the infected devices, let\u2019s dig deeper into additional sets of\nGuptiMiner\u2019s functionalities \u2013 deploying two types of backdoors on the\ninfected devices.\n\n### PuTTY Backdoor\n\n07beca60c0a50520b8dbc0b8cc2d56614dd48fef0466f846a0a03afbfc42349d (2021-03-01\n10:31:33 UTC) E:\\Projects\\putty-src\\windows\\VS2012\\x64\\Release\\plink.pdb\n\nOne of the backdoors deployed by GuptiMiner is based on a custom build of\nPuTTY Link (plink). This build contains an enhancement for local SMB network\nscanning, and it ultimately enables lateral movement over the network to\npotentially exploit Windows 7 and Windows Server 2008 machines by tunneling\nSMB traffic through the victim\u2019s infected device.\n\n#### Local SMB Scanning\n\nFirst, the plink binary is injected into netsh.exe process by Puppeteer with\nthe Deploy per-quarter approach. After a successful injection, the malware\ndiscovers local IP ranges by reading the IP tables from the victim\u2019s device,\nadding those into local and global IP range lists.\n\nWith that, the malware continues with the local SMB scanning over the obtained\nIP ranges: xx.yy.zz.1-254. When a device supporting SMB is discovered, it is\nsaved in a dedicated list. The same goes with IPs that don\u2019t support SMB,\neffectively deny listing them from future actions. This deny list is saved in\nspecific registry subkeys named Sem and Init, in this location:\nHKEY_LOCAL_MACHINE \\SYSTEM\\CurrentControlSet\\Control\\CMF\\Class where Init\ncontains the found IP addresses and Sem contains their total count.\n\nThere are conditions taking place when such a scan is performed. For example,\nthe scan can happen only when it is a day in the week (!), per-quarter\ndeployment, and only at times between 12 PM and 18 PM. Here, we denoted by (!)\na unique coding artefact in the condition, since checking the day of the week\nis not necessary (always true).\n\nQuestionable conditioning for SMB scanning\n\nFinally, the malware also creates a new registry key\nHKEY_LOCAL_MACHINE\\SYSTEM\\RNG\\FFFF three hours after a successful scan. This\nserves as a flag that the scanning should be finished, and no more scanning is\nneeded.\n\nAn even more interesting datetime-related bug can be seen in a conditioning of\nRNG\\FFFF registry removal. The removal is done to indicate that the malware\ncan perform another SMB scan after a certain period of time.\n\nAs we can see in the figure below, the malware obtains the write time of the\nregistry key and the current system time by SystemTimeToVariantTime API\nfunction and subtracts those. The subtraction result is a floating-point\nnumber where the integral part means number of days.\n\nFurthermore, the malware uses a constant 60*60*60*24=5184000 seconds (60 days)\nin the condition for the registry key removal. However, the condition is\ncomparing VariantTime (days) with seconds. Thus, the backdoor can activate\nevery 51.84 days instead of the (intended?) 60 days. A true blessing in\ndisguise.\n\nRemoval of RNG\\FFFF key, deploying the backdoor after 51.84 days\n\n#### Lateral Movement Over SMB Traffic\n\nAfter the local SMB scan is finished, the malware checks from the received SMB\npacket results whether any of the IP addresses that responded are running\nWindows 7 or Windows Server 2008. If any such a system is found on the local\nnetwork, the malware adds these IP addresses to a list of potential targets.\n\nFurthermore, GuptiMiner executes the main() legacy function from plink with\nartificial parameters. This will create a tunnel on the port 445 between the\nattacker\u2019s server gesucht[.]net and the victim\u2019s device.\n\nParameters used for plink main() function\n\nThis tunnel is used for sending SMB traffic through the victim\u2019s device to the\nIP addresses from the target list, enabling lateral movement over the local\nnetwork.\n\nNote that this version of Puppeteer, deploying this backdoor, is from 2021. We\nalso mentioned that only Windows 7 and Windows Server 2008 are targeted, which\nare rather old. We think this might be because the attackers try to deploy an\nexploit for possible vulnerabilities on these old systems.\n\nTo orchestrate the SMB communication, the backdoor hand-crafts SMB packets on\nthe fly by modifying TID and UID fields to reflect previous SMB communication.\nAs shown in the decompiled code below, the SMB packet 4, which is crafted and\nsent by the malware, contains both TID and UID from the responses of the local\nnetwork device.\n\nThe backdoor hand-crafts SMB packets on the fly\n\nHere we provide an example how the SMB packets look like in Wireshark when\nsent by the malware. After the connection is established, the malware tries to\nlogin as anonymous and makes requests for \\IPC$ and a named pipe.\n\nSMB traffic captured by Wireshark\n\nInterested reader can find the captured PCAP on our GitHub.\n\n### Modular Backdoor\n\nf0ccfcb5d49d08e9e66b67bb3fedc476fdf5476a432306e78ddaaba4f8e3bbc4 (2023-10-10\n15:08:36 UTC)\n\nAnother backdoor that we\u2019ve found during our research being distributed by\nPuppeteer is a modular backdoor which targets huge corporate networks. It\nconsists of two phases \u2013 the malware scans the devices for the existence of\nlocally stored private keys and cryptocurrency wallets, and the second part is\nan injected modular backdoor, in the form of a shellcode.\n\n#### Checks on Private Keys, Wallets, and Corporate Network\n\nThis part of the backdoor focuses on scanning for private keys and wallet\nfiles on the system. This is done by searching for .pvk and .wallet files in\nthese locations:\n\n  * C:\\Users\\\\*\n  * D:\\\\*\n  * E:\\\\*\n  * F:\\\\*\n  * G:\\\\*\n\nIf there is such a file found in the system, its path is logged in a newly\ncreated file C:\\Users\\Public\\Ca.txt. Interestingly, this file is not processed\non its own by the code we have available. We suppose the data will be stolen\nlater when further modules are downloaded by the backdoor.\n\nThe fact that the scan was performed is marked by creating a registry key:\nHKEY_LOCAL_MACHINE\\SYSTEM\\Software\\Microsoft\\DECLAG\n\nIf some private keys or wallets were found on the system or the malware is\nrunning in a huge corporate environment, the malware proceeds with injecting\nthe backdoor, in a form of a shellcode, into the mmc.exe process.\n\nThe size of the corporate environment is guessed by the same approach as\nPuppeteer\u2019s backdoor setup with the difference in the scale. Here, the malware\ncompares the returned list of computers in the domain with 200,000 characters.\nTo recapitulate, the data printed by the net group command uses 25 characters\nper domain joined computer plus a newline (CR+LF) per every three computers.\n\nExample output of net group command\n\nThis effectively means that the network in which the malware operates must\nhave at least 7781 computers joined in the domain, which is quite a large\nnumber.\n\n#### Backdoor\n\n8446d4fc1310b31238f9a610cd25ea832925a25e758b9a41eea66f998163bb34\n\nThis shellcode is a completely different piece of code than what we\u2019ve seen so\nfar across GuptiMiner campaign. It is designed to be multi-modular with the\ncapability of adding more modules into the execution flow. Only a networking\ncommunication module, however, is hardcoded and available by default, and its\nhash is 74d7f1af69fb706e87ff0116b8e4fa3a9b87275505e2ee7a32a8628a2d066549\n(2022-12-19 07:31:39 UTC).\n\nAfter the injection, the backdoor decrypts a hardcoded configuration and a\nhardcoded networking module using RC4. The RC4 key is also hardcoded and\navailable directly in the shellcode.\n\nThe configuration contains details about which server to contact, what ports\nto use, the length of delays that should be set between commands/requests,\namong others. The domain for communication in this configuration is\nwww.righttrak[.]net:443 and an IP address 185.248.160[.]141.\n\nDecrypted network module configuration\n\nThe network module contains seven different commands that the attacker can use\nfor instructing the backdoor about what to do. A complete list of commands\naccepted by the network module can be found in the table below. Note that each\nmodule that can be used by the backdoor contains such a command handler on its\nown.\n\nCommand| Description  \n---|---  \n3.0| Connect  \n3.1| Read socket  \n3.2| Write socket  \n3.3| Close socket  \n4| Close everything  \n6| Return 1  \n12| Load configuration  \n  \nThe modules are stored in an encrypted form in the registry, ensuring their\npersistence: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PCB\n\nThe backdoor also uses an import by hash obfuscation for resolving API\nfunctions. The hashing function is a simple algorithm that takes each byte of\nthe exported function name, adds 1 to it, and then multiplies the previously\ncalculated number (calculated_hash, starts with 0) by 131 and adds it to the\nbyte:\n\nThe server www.righttrak[.]net:443 had, at the time, a valid certificate. Note\nfor example the not-at-all-suspicious email address the authors used.\n\nCertificate on www.righttrak[.]net:443 as shown by Censys\n\n#### Other Infection Vectors of Modular Backdoor\n\naf9f1331ac671d241bf62240aa52389059b4071a0635cb9cb58fa78ab942a33b\n\nDuring our research, we have also found a 7zip SFX executable containing two\nfiles:\n\n  * ms00.dat\n  * notepad.exe\n\nnotepad.exe is a small binary that decrypts ms00.dat file using RC4 with a key\nV#@!1vw32. The decrypted ms00.dat file is the same Modular Backdoor malware as\ndescribed above.\n\nHowever, we have not seen this SFX executable being distributed by GuptiMiner.\nThis indicates that this backdoor might be distributed by different infection\nvectors as well.\n\n## Related and Future Research\n\nWe\u2019ve also observed other more or less related samples during our research.\n\n### PowerShell Scripts\n\nInterestingly, we\u2019ve found the C&C domain from the backdoor setup phase (in\nPuppeteer) in additional scripts as well which were not distributed by\ntraditional GuptiMiner operation as we know it. We think this might be a\ndifferent kind of attack sharing the GuptiMiner infrastructure, though it\nmight be a different campaign. Formatted PowerShell script can be found below:\n\nA PowerShell script targeting eScan (formatted)\n\nIn this case, the payload is downloaded and executed from the malicious domain\nonly when an antivirus is installed, and its name has more than 4 letters and\nstarts with eS. One does not have to be a scrabble champion to figure out that\nthe malware authors are targeting the eScan AV once again. The malicious code\nis also run when the name of the installed AV has less than 5 letters.\n\nWe\u2019ve found this script being run via a scheduled task with a used command: \"cmd.exe\" /c type \"\\<domain>\\SYSVOL\\<domain>\\scripts\\gpon.inc\" | \"\\<domain>\\SYSVOL\\<domain>\\scripts\\powAMD64.dat\" -nop - where powAMD64.dat is a copy of powershell.exe. The task name and location was C:\\Windows\\System32\\Tasks\\ScheduledDefrag\n\n### Usage of Stolen Certificates\n\nWe have found two stolen certificates used for signing GuptiMiner payloads.\nInterestingly, one of the used stolen certificates originates in Winnti\noperations. In this particular sample, the digital signature has a hash:\n529763AC53562BE3C1BB2C42BCAB51E3AD8F8A56\n\nThis certificate is the same as mentioned by Kaspersky more than 10 years ago.\nHowever, we\u2019ve also seen this certificate to be used in multiple malware\nsamples than just GuptiMiner, though, indicating a broader leak.\n\nA complete list of stolen certificates and their usage can be found in the\ntable below:\n\nStolen certificate SHA1| Signed GuptiMiner sample  \n---|---  \n529763AC53562BE3C1BB2C42BCAB51E3AD8F8A56|\n31dfba1b102bbf4092b25e63aae0f27386c480c10191c96c04295cb284f20878  \n529763AC53562BE3C1BB2C42BCAB51E3AD8F8A56|\n8e96d15864ec0cc6d3976d87e9e76e6eeccc23c551b22dcfacb60232773ec049  \n31070C2EA30E6B4E1C270DF94BE1036AE7F8616B|\nb0f94d84888dffacbc10bd7f9983b2d681b55d7e932c2d952d47ee606058df54  \n31070C2EA30E6B4E1C270DF94BE1036AE7F8616B|\nf656a418fca7c4275f2441840faaeb70947e4f39d3826d6d2e50a3e7b8120e4e  \n  \n### Possible Ties to Kimsuky\n\n7f1221c613b9de2da62da613b8b7c9afde2ea026fe6b88198a65c9485ded7b3d (2021-03-06\n20:13:32 UTC)\n\nDuring our research, we\u2019ve also found an information stealer which holds a\nrather similar PDB path as was used across the whole GuptiMiner campaign\n(MainWork): F:\\\\!PROTECT\\Real\\startW-2008\\MainWork\\Release\\MainWork.pdb\n\nHowever, we haven\u2019t seen it distributed by GuptiMiner and, according to our\ndata, it doesn\u2019t belong to the same operation and infection chain. This\nmalware performs stealing activities like capturing every keystroke,\nharvesting HTML forms from opened browser tabs, noting times of opened\nprograms, etc., and stores them in log files.\n\nWhat is truly interesting, however, is that this information stealer might\ncome from Kimsuky operations. Also known as Black Banshee, among other\naliases, Kimsuky is a North Korean state-backed APT group.\n\nIt contains the similar approach of searching for AhnLab real-time detection\nwindow class name 49B46336-BA4D-4905-9824-D282F05F6576 as mentioned by both\nAhnLab as well as Cisco Talos Intelligence in their Information-gathering\nmodule section. If such a window is found, it will be terminated/hidden from\nthe view of the infected user.\n\nFunction that searches and terminates AhnLab\u2019s real-time detection window\nclass\n\nFurthermore, the stealer contains an encrypted payload in resources, having a\nhash: d5bc6cf988c6d3c60e71195d8a5c2f7525f633bb54059688ad8cfa1d4b72aa6c\n(2021-02-19 19.02.2021 15:00:47 UTC) and it has this PDB path:\nF:\\PROTECT\\Real\\startW-2008\\HTTPPro\\Release\\HTTPPro.pdb\n\nThis module is decrypted using the standard RC4 algorithm with the key\nmessi.com. The module is used for downloading additional stages. One of the\nused URLs are: http://stwu.mygamesonline[.]org/home/sel.php\nhttp://stwu.mygamesonline[.]org/home/buy.php?filename=%s&key=%s\n\nThe domain mygamesonline[.]org is commonly used by Kimsuky (with variety of\nsubdomains).\n\nThe keylogger also downloads next stage called ms12.acm:\n\nThe next stage is downloaded with a name ms12.acm\n\nWith this, we see a possible pattern with the naming convention and a link to\nModular Backdoor. As described in the Other Infection Vectors section, the 7z\nSFX archive contains an encrypted file called ms00.dat with which we struggle\nto ignore the resemblance.\n\nLast but not least, another strong indicator for a possible attribution is the\nfact that the Kimsuky keylogger sample\ndddc57299857e6ecb2b80cbab2ae6f1978e89c4bfe664c7607129b0fc8db8b1f, which is\nmentioned in the same blogpost from Talos, contains a section called .vlizer,\nas seen below:\n\nKimsuky keylogger sections\n\nDuring the GuptiMiner installation process (Stage 0), we wrote about the\nthreat actors introducing Code Virtualization in 2018. This was done by using\na dedicated section called .v_lizer.\n\n## Conclusion\n\nIn this analysis, we described our findings regarding a long-standing threat\nwe called GuptiMiner, in detail. This sophisticated operation has been\nperforming MitM attacks targeting an update mechanism of the eScan antivirus\nvendor. We disclosed the security vulnerability to both eScan and the India\nCERT and received confirmation on 2023-07-31 from eScan that the issue was\nfixed and successfully resolved.\n\nDuring the GuptiMiner operation, the attackers were deploying a wide chain of\nstages and functionalities, including performing DNS requests to the\nattacker\u2019s DNS servers, sideloading, extracting payloads from innocent-looking\nimages, signing its payloads with a custom trusted root anchor certification\nauthority, among others.\n\nTwo different types of backdoors were discovered, targeting large corporate\nnetworks. The first provided SMB scanning of the local network, enabling\nlateral movement over the network to potentially exploit vulnerable Windows 7\nand Windows Server 2008 systems on the network. The second backdoor is multi-\nmodular, accepting commands on background to install more modules as well as\nfocusing on stealing stored private keys and cryptowallets.\n\nInterestingly, the final payload distributed by GuptiMiner was also XMRig\nwhich is a bit unexpected for such a thought-through operation.\n\nWe have also found possible ties to Kimsuky, a notorious North Korean APT\ngroup, while observing similarities between Kimsuky keylogger and fragments\ndiscovered during the analysis of the GuptiMiner operation.\n\n## eScan follow-up\n\nWe have shared our findings and our research with eScan prior to publishing\nthis analysis. For the sake of completeness, we are including their statement\non this topic:\n\n\u201cI would also like to highlight some key points: 1. Our records indicate that\nthe last similar report was received towards the end of the year 2019. 2.\nSince 2020, we have implemented a stringent checking mechanism that utilizes\nEV Signing to ensure that non-signed binaries are rejected. 3. Multiple\nheuristic rules have been integrated into our solution to detect and block any\ninstances of legitimate processes being used for mining, including the forking\nof unsigned binaries. 4. While our internal investigations did not uncover\ninstances of the XRig miner, it is possible that this may be due to geo-\nlocation factors. 5. Our latest solution versions employ secure (https)\ndownloads, ensuring encrypted communication when clients interact with our\ncloud-facing servers for update downloads.\u201d\n\nAccording to our telemetry, we continue to observe new infections and\nGuptiMiner builds within our userbase. This may be attributable to eScan\nclients on these devices not being updated properly.\n\n## Indicators of Compromise (IoCs)\n\nIn this section, we would like to summarize the Indicators of Compromise\nmentioned in this analysis. As they are indicators, it doesn\u2019t automatically\nmean the mentioned files and/or domains are malicious on their own.\n\nFor more detailed list of IoCs of the whole GuptiMiner campaign, please visit\nour GitHub.\n\n### Evolution and Timelines\n\n#### Domains\n\nDomain  \n---  \n_spf.microsoft[.]com  \nacmeautoleasing[.]net  \nb.guterman[.]net  \nbreedbackfp[.]com  \ncrl.microsoft[.]com  \ncrl.peepzo[.]com  \ncrl.sneakerhost[.]com  \ndesmoinesreg[.]com  \ndl.sneakerhost[.]com  \nedgesync[.]net  \nespcomp[.]net  \next.microsoft[.]com  \next.peepzo[.]com  \next.sneakerhost[.]com  \ngesucht[.]net  \ngesucht[.]net  \nglobalsign.microsoft[.]com  \nicamper[.]net  \nm.airequipment[.]net  \nm.cbacontrols[.]com  \nm.gosoengine[.]com  \nm.guterman[.]net  \nm.indpendant[.]com  \nm.insomniaccinema[.]com  \nm.korkyt[.]net  \nm.satchmos[.]net  \nm.sifraco[.]com  \nns.bretzger[.]net  \nns.deannacraite[.]com  \nns.desmoinesreg[.]com  \nns.dreamsoles[.]com  \nns.editaccess[.]com  \nns.encontacto[.]net  \nns.gravelmart[.]net  \nns.gridsense[.]net  \nns.jetmediauk[.]com  \nns.kbdn[.]net  \nns.lesagencestv[.]net  \nns.penawarkanser[.]net  \nns.srnmicro[.]net  \nns.suechiLton[.]com  \nns.trafomo[.]com  \nns.trafomo[.]com  \nns1.earthscienceclass[.]com  \nns1.peepzo[.]com  \nns1.securtelecom[.]com  \nns1.sneakerhost[.]com  \np.bramco[.]net  \np.hashvault[.]pro  \nr.sifraco[.]com  \nspf.microsoft[.]com  \nwidgeonhill[.]com  \nwww.bascap[.]net  \n  \n#### Mutexes\n\nMutex  \n---  \nESOCESS_  \nGlobal\\Fri Aug 13 02:17:49 2021  \nGlobal\\Fri Aug 13 02:22:55 2021  \nGlobal\\Mon Apr 19 06:03:17 2021  \nGlobal\\Mon Apr 24 07:19:54 2023  \nGlobal\\Mon Feb 27 08:11:25 2023  \nGlobal\\Mon Jun 14 03:22:57 2021  \nGlobal\\Mon Mar 13 07:29:11 2023  \nGlobal\\Mon Mar 22 09:16:00 2021  \nGlobal\\Sun Jun 13 08:22:07 2021  \nGlobal\\Thu Aug 10 03:25:11 2023  \nGlobal\\Thu Aug 12 02:07:58 2021  \nGlobal\\Thu Feb 23 08:37:09 2023  \nGlobal\\Thu Mar 25 02:03:14 2021  \nGlobal\\Thu Mar 25 09:31:19 2021  \nGlobal\\Thu Nov 2 08:21:56 2023  \nGlobal\\Thu Nov 9 06:19:40 2023  \nGlobal\\Tue Apr 25 08:32:05 2023  \nGlobal\\Tue Mar 23 02:37:32 2021  \nGlobal\\Tue Oct 10 08:07:11 2023  \nGlobal\\Wed Aug 11 09:16:37 2021  \nGlobal\\Wed Jan 5 09:15:56 2022  \nGlobal\\Wed Jun 2 09:43:03 2021  \nGlobal\\Wed Mar 1 01:29:48 2023  \nGlobal\\Wed Mar 23 08:56:01 2022  \nGlobal\\Wed Mar 23 09:06:36 2022  \nGlobal\\Wed May 10 06:38:46 2023  \nGlobal1  \nGlobalMIVOD_V4  \nGMCM1  \nMIVOD_6  \nMTX_EX01  \nMutex_ONLY_ME_V1  \nMutex_ONLY_ME_V2  \nMutex_ONLY_ME_V3  \nPROCESS_  \nSLDV014  \nSLDV02  \nSLDV024  \nSLDV04  \nSLDV10  \nSLDV11  \nSLDV13  \nSLDV15  \nSLDV17  \nSLDV22  \nSLDV26  \n  \n#### PDB paths\n\nPDB path  \n---  \nE:\\projects\\projects\\RunCompressedSC\\x64\\Release\\RunCompressedSC.pdb  \nE:\\Projects\\putty-src\\windows\\VS2012\\x64\\Release\\plink.pdb  \nF:\\CODE-20221019\\Projects\\RunCompressedSC\\x64\\Release\\RunCompressedSC.pdb  \nF:\\Pro\\MainWork\\Release\\MainWork.pdb  \nF:\\Pro\\MainWork\\x64\\Release\\MainWork.pdb  \nF:\\Projects\\2020-NEW\\20200307-NEW\\MainWork-\nVS2017-IPHLPAPI\\Release\\MainWork.pdb  \nF:\\Projects\\2020-NEW\\20200307-NEW\\MainWork-\nVS2017-IPHLPAPI\\x64\\Release\\MainWork.pdb  \nF:\\Projects\\2020-NEW\\20200307-NEW\\MainWork-\nVS2017-nvhelper\\Release\\MainWork.pdb  \nF:\\Projects\\2020-NEW\\20200307-NEW\\MainWork-\nVS2017-nvhelper\\x64\\Release\\MainWork.pdb  \nF:\\Projects\\RunCompressedSC\\x64\\Release\\RunCompressedSC.pdb  \nF:\\V202102\\MainWork-VS2017 \u2013 Monitor\\Release\\MainWork.pdb  \nF:\\V202102\\MainWork-VS2017 \u2013 Monitor\\x64\\Release\\MainWork.pdb  \nH:\\projects\\MainWork\\Release\\MainWork.pdb  \n  \n### Stage 0 \u2013 Installation Process\n\nIoC| Note  \n---|---  \nhttp://update3[.]mwti[.]net/pub/update/updll3.dlz  \nc3122448ae3b21ac2431d8fd523451ff25de7f6e399ff013d6fa6953a7998fa3| C:\\Program\nFiles\\eScan\\VERSION.DLL  \n7a1554fe1c504786402d97edecc10c3aa12bd6b7b7b101cfc7a009ae88dd99c6| updll65.dlz  \n  \n### Stage 0.9 \u2013 Installation Improvements\n\n### Stage 1 \u2013 PNG Loader\n\nIoC| Note  \n---|---  \nff884d4c01fccf08a916f1e7168080a2d740a62a774f18e64f377d23923b0297  \next.peepzo[.]com  \ncrl.peepzo[.]com  \nns1.peepzo[.]com  \nhttp://www.deanmiller[.]net/m/  \n294b73d38b89ce66cfdefa04b1678edf1b74a9b7f50343d9036a5d549ade509a  \n185.45.192[.]43/elimp/  \n6305d66aac77098107e3aa6d85af1c2e3fc2bb1f639e4a9da619c8409104c414  \nSYSTEM\\CurrentControlSet\\Control\\Arbiters\\Class| Registry  \nSYSTEM\\CurrentControlSet\\Control\\CMF\\Class| Registry  \nSYSTEM\\CurrentControlSet\\Control\\CMF\\CORE| Registry  \nSYSTEM\\CurrentControlSet\\Control\\CMF\\DEF| Registry  \nSYSTEM\\CurrentControlSet\\Control\\CMF\\Els| Registry  \nSYSTEM\\CurrentControlSet\\Control\\CMF\\ASN| Registry  \nSYSTEM\\CurrentControlSet\\Control\\MSDTC\\BSR| Registry  \n  \n### Stage 2 \u2013 Gzip Loader\n\nIoC| Note  \n---|---  \n357009a70daacfc3379560286a134b89e1874ab930d84edb2d3ba418f7ad6a0b  \n  \n### Stage 3 \u2013 Puppeteer\n\nIoc| Note  \n---|---  \n364984e8d62eb42fd880755a296bd4a93cc071b9705c1f1b43e4c19dd84adc65  \nC:\\ProgramData\\Microsoft\\Crypto\\Escan\\dss.exe  \nC:\\ProgramData\\Microsoft\\Crypto\\Escan\\updll3.dll3  \nC:\\Windows\\system32\\tasks\\Microsoft\\windows\\autochk\\ESUpgrade| Scheduled task  \nHKEY_LOCAL_MACHINE\\SOFTWARE\\AVC3| Registry  \n\\Device\\HarddiskVolume1\\Program Files (x86)\\eScan\\download.exe  \n4dfd082eee771b7801b2ddcea9680457f76d4888c64bb0b45d4ea616f0a47f21  \nSOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\DNS Server| Registry  \nnet group \u201ddomain computers\u201d /domain| Command  \nhttps://m.airequipment[.]net/gpse/  \n487624b44b43dacb45fd93d03e25c9f6d919eaa6f01e365bb71897a385919ddd  \nC:\\Program Files (x86)\\eScan\\updll3.dll3  \nC:\\Program Files\\Common Files\\SYSTEM\\SysResetErr\\SysResetErr.DLL  \nC:\\Program Files\\Microsoft SQL Server\\SpellChecking\\MsSpellChecking.DLL  \nC:\\Program Files\\Microsoft SQL Server\\SpellChecking\\MsSpellCheckingHost.DLL  \nC:\\ProgramData\\AMD\\CNext\\atiadlxx.dll  \nC:\\ProgramData\\Microsoft\\Assistance\\LunarG\\vulkan-1.dll  \nC:\\ProgramData\\Microsoft\\Crypto\\Escan\\updll3.dll  \nC:\\ProgramData\\Microsoft\\Crypto\\Escan\\updll3.dll3  \nC:\\ProgramData\\Microsoft\\Network\\Escan\\AutoWake.dll  \n1c31d06cbdf961867ec788288b74bee0db7f07a75ae06d45d30355c0bc7b09fe  \n1fbc562b08637a111464ba182cd22b1286a185f7cfba143505b99b07313c97a4  \n  \n### Stage 4 \u2013 Backdoor\n\nIoC| Note  \n---|---  \n07beca60c0a50520b8dbc0b8cc2d56614dd48fef0466f846a0a03afbfc42349d  \nE:\\Projects\\putty-src\\windows\\VS2012\\x64\\Release\\plink.pdb| PDB  \nHKEY_LOCAL_MACHINE \\SYSTEM\\CurrentControlSet\\Control\\CMF\\Class| Registry  \nHKEY_LOCAL_MACHINE\\SYSTEM\\RNG\\FFFF| Registry  \ngesucht[.]net  \nf0ccfcb5d49d08e9e66b67bb3fedc476fdf5476a432306e78ddaaba4f8e3bbc4  \nHKEY_LOCAL_MACHINE\\SYSTEM\\Software\\Microsoft\\DECLAG| Registry  \n8446d4fc1310b31238f9a610cd25ea832925a25e758b9a41eea66f998163bb34| Shellcode  \n74D7F1AF69FB706E87FF0116B8E4FA3A9B87275505E2EE7A32A8628A2D066549  \nwww.righttrak[.]net:443  \n185.248.160[.]141  \nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PCB| Registry  \naf9f1331ac671d241bf62240aa52389059b4071a0635cb9cb58fa78ab942a33b  \n  \n### Related and Future Research\n\nIoC| Note  \n---|---  \n\u201ccmd.exe\u201d /c type \u201c\\<domain>\\SYSVOL\\<domain>\\scripts\\gpon.inc\u201d | \u201c\\<domain>\\SYSVOL\\<domain>\\scripts\\powAMD64.dat\u201d -nop \u2013| Command  \nC:\\Windows\\System32\\Tasks\\ScheduledDefrag| Scheduled task  \n529763AC53562BE3C1BB2C42BCAB51E3AD8F8A56| Certificate SHA1  \n31070C2EA30E6B4E1C270DF94BE1036AE7F8616B| Certificate SHA1  \n31dfba1b102bbf4092b25e63aae0f27386c480c10191c96c04295cb284f20878  \n8e96d15864ec0cc6d3976d87e9e76e6eeccc23c551b22dcfacb60232773ec049  \nb0f94d84888dffacbc10bd7f9983b2d681b55d7e932c2d952d47ee606058df54  \nf656a418fca7c4275f2441840faaeb70947e4f39d3826d6d2e50a3e7b8120e4e  \n7f1221c613b9de2da62da613b8b7c9afde2ea026fe6b88198a65c9485ded7b3d  \nF:\\\\!PROTECT\\Real\\startW-2008\\MainWork\\Release\\MainWork.pdb| PDB  \n  \nTagged asantivirus, backdoor, cryptomining, Kimsuky, malware, mitm, xmrig\n\nShare:XFacebook\n\n##### Further reading\n\nPCUncategorized\n\n## From BYOVD to a 0-day: Unveiling Advanced Exploits in Cyber Recruiting\nScams\n\nApril 18, 2024by Luigino Camastra\n\nKey Points Avast discovered a new campaign targeting specific individuals\nthrough fabricated job offers. Avast uncovered a full attack chain from\ninfection vector to deploying \u201cFudModule 2.0\u201d rootkit with 0-day Admin ->\nKernel exploit. Avast found a previously undocumented Kaolin...\n\nPC\n\n## Lazarus and the FudModule Rootkit: Beyond BYOVD with an Admin-to-Kernel\nZero-Day\n\nFebruary 28, 2024by Jan Vojt\u011b\u0161ek\n\nThe Lazarus Group is back with an upgraded variant of their FudModule rootkit,\nthis time enabled by a zero-day admin-to-kernel vulnerability for\nCVE-2024-21338. Read this blog for a detailed analysis of this rootkit variant\nand learn more about several new techniques, including a handle table entry...\n\nPC\n\n## Decrypted: HomuWitch Ransomware\n\nFebruary 20, 2024by Threat Research Team\n\nHomuWitch is a ransomware strain that initially emerged in July 2023. Unlike\nthe majority of current ransomware strains, HomuWitch targets end-users -\nindividuals - rather than institutions and companies.\n\n2024 Copyright \u00a9 Avast Software s.r.o.\n\n#### Menu\n\n#### Categories\n\n  * Events\n  * IoT\n  * Mobile\n  * Network\n  * Other/Research\n  * PC\n  * Reports\n  * Uncategorized\n\n#### Tags\n\nanalysis Android APT backdoor botnet brazil cryptocurrency cryptomining csrf\nddos decryptor decryptors desktop DirtyMoe dns hijack dropper exploit fake-app\nghostdns Google Play Store HW iot malware mobile obfuscation P-Code phishing\nransomware rat report Research reversing risk rootkit router security series\nspyware stealer takedown threat-intel threats VB vulnerability worm\n\n#### Recent Posts\n\n  * GuptiMiner: Hijacking Antivirus Updates for Distributing Backdoors and Casual Mining\n  * From BYOVD to a 0-day: Unveiling Advanced Exploits in Cyber Recruiting Scams\n  * Lazarus and the FudModule Rootkit: Beyond BYOVD with an Admin-to-Kernel Zero-Day\n  * Decrypted: HomuWitch Ransomware\n  * Decrypted: Rhysida Ransomware\n\n#### Archive\n\n  * April 2024\n  * February 2024\n  * January 2024\n  * December 2023\n  * November 2023\n  * October 2023\n  * September 2023\n  * August 2023\n  * July 2023\n  * June 2023\n  * May 2023\n  * April 2023\n  * February 2023\n  * January 2023\n  * December 2022\n  * November 2022\n  * October 2022\n  * September 2022\n  * August 2022\n  * July 2022\n  * June 2022\n  * May 2022\n  * April 2022\n  * March 2022\n  * February 2022\n  * January 2022\n  * December 2021\n  * November 2021\n  * October 2021\n  * September 2021\n  * August 2021\n  * July 2021\n  * June 2021\n  * May 2021\n  * April 2021\n  * March 2021\n  * February 2021\n  * December 2020\n  * November 2020\n  * October 2020\n  * September 2020\n  * August 2020\n  * June 2020\n  * May 2020\n  * April 2020\n  * December 2019\n  * September 2019\n  * August 2019\n  * July 2019\n  * April 2019\n  * March 2019\n  * February 2019\n  * January 2019\n  * August 2018\n  * January 2018\n  * October 2017\n\n#### Meta\n\n  * Log in\n  * Entries feed\n  * Comments feed\n  * WordPress.org\n\n", "frontpage": false}
{"aid": "40133687", "title": "Google fires more workers after CEO says workplace isn\u2019t for politics", "url": "https://www.washingtonpost.com/technology/2024/04/22/google-nimbus-israel-protest-fired-workers/", "domain": "washingtonpost.com", "votes": 69, "user": "latexr", "posted_at": "2024-04-23 16:17:54", "comments": 134, "source_title": "Google fires more workers after CEO says workplace isn\u2019t for politics", "source_text": "Google fires more workers who protested its deal with Israel - The Washington\nPost\n\nAdvertisement\n\nDemocracy Dies in Darkness\n\n# Google fires more workers after CEO says workplace isn\u2019t for politics\n\n## Some employees protested the tech giant\u2019s contract with the Israeli\ngovernment. They\u2019ve been let go.\n\nBy Gerrit De Vynck\n\nand\n\nCaroline O'Donovan\n\nApril 22, 2024 at 10:09 p.m. EDT\n\nGoogle CEO Sundar Pichai is seen in 2017. (Tsering Topgyal/AP)\n\nListen\n\n2 min\n\nShare\n\nComment\n\nSave\n\nSAN FRANCISCO \u2014 Google fired about 20 more workers it said participated in\nprotests denouncing the company\u2019s cloud computing deal with the Israeli\ngovernment, bringing the total number of workers fired in the past week over\nthe issue to more than 50, according to the activist group representing the\nworkers.\n\nA spokesperson for Google confirmed it had fired more workers after continuing\nits investigation into the April 16 protests, which included sit-ins at\nGoogle\u2019s offices in New York City and Sunnyvale, Calif.\n\nThe firings come several days after chief executive Sundar Pichai told\nemployees in a companywide memo that they should not use the company as a\n\u201cpersonal platform\u201d or \u201cfight over disruptive issues or debate politics.\u201d\n\nStory continues below advertisement\n\n\u201cThe corporation is attempting to quash dissent, silence its workers and\nreassert its power over them,\u201d said Jane Chung, a spokesperson for No Tech for\nApartheid, a group that has protested Google\u2019s and Amazon\u2019s contracts with the\nIsraeli government since 2021.\n\nOn April 22, dozens were arrested at New York University and Yale as tensions\nflared again on campuses over the Israel-Gaza war. (Video: Julie Yoon/The\nWashington Post)\n\nThe protests at Google are among a wave of opposition to the U.S. government\nand corporations working with the Israeli government and military. Pro-\nPalestinian protesters have been arrested in recent days at Yale and Columbia\nuniversities, spurring accusations of heavy-handedness by university officials\nand inspiring another wave of demonstrations at other colleges around the\ncountry. The day before the Google sit-ins, activists blocked highways,\nbridges and airport entrances across the United States to protest the war in\nGaza.\n\nAdvertisement\n\nAt Google, the situation has become a public fight between Google managers and\nthe fired employees. Google says that each worker it fired actively disrupted\nits offices, while the workers dispute the claims, saying some of those fired\ndid not even enter the company\u2019s office on the day of coordinated\ndemonstrations against the company.\n\nStory continues below advertisement\n\nGoogle has fired workers in the past who publicly criticized the company, but\nit has not fired this many people at once. For years, Google had a reputation\nas the most free and open among the Big Tech companies in terms of office\nculture and collaboration. The company celebrated an internal culture in which\nemployees knew what other teams were working on and were encouraged to\nquestion the decisions of leaders.\n\nFollow Technology\n\nIn his memo to workers, Pichai said the company\u2019s openness was a strength but\napplied to work topics, not politics.\n\n\u201cWe have a culture of vibrant, open discussion that enables us to create\namazing products and turn great ideas into action,\u201d he said in the memo, which\nthe company posted online. \u201cBut ultimately we are a workplace and our policies\nand expectations are clear: this is a business.\u201d\n\nAdvertisement\n\nAdvertisement\n\nTOP STORIES\n\nTechnology\n\nBig Tech news and how to take control of your data and devices\n\nBiden marks Earth Day with Va. event; Trump is on trial in N.Y.\n\nAI is about to make the online child sex abuse problem much worse\n\nHow Trump has become angrier and more isolated on Truth Social\n\nback\n\nTry a different topic\n\nSign in or create a free account to save your preferences\n\nAdvertisement\n\nAdvertisement\n\nwashingtonpost.com \u00a9 1996-2024 The Washington Post\n\n  * washingtonpost.com\n  * \u00a9 1996-2024 The Washington Post\n\n", "frontpage": true}
{"aid": "40133700", "title": "Noisy: The Class You Wrote a Hundred Times", "url": "https://vzalzal.com/posts/noisy-the-class-you-wrote-a-hundred-times/", "domain": "vzalzal.com", "votes": 1, "user": "ingve", "posted_at": "2024-04-23 16:18:55", "comments": 0, "source_title": "Noisy: The Class You Wrote a Hundred Times", "source_text": "Noisy: The Class You Wrote a Hundred Times | vzalzal's coding blog\n\n# Noisy: The Class You Wrote a Hundred Times\n\nApril 21, 2024 \u00b7 2 min\n\nYou have probably written a class that prints a message in all its special\nmember functions. And like me, you probably wrote it multiple times. I decided\nto write it well once and for all, and share it.\n\n## Context#\n\nRecently, I was writing some code involving structured bindings and I was\nunsure whether it would incur unintended copy or move operations. As usual,\nwhen I am in this situation, I open up Compiler Explorer and test it. For the\nnth time, I ended up coding a class like this one:\n\n    \n    \n    struct S { S() { std::cout << \"ctor\\n\"; } ~S() { std::cout << \"dtor\\n\"; } // ... and so on with copy and move operations }\n\nI don\u2019t know how many times I wrote this class! I thought maybe it was time I\nwrite it well, once and for all, and then reuse it when I need it. And then, I\nthought that I am probably not the only one having written that class over and\nover again, am I? Maybe this could be useful to others.\n\n## Noisy#\n\nSo I decided to upload it to GitHub. Here it is:\nhttps://github.com/VincentZalzal/noisy. I hope it can be useful to you too!\n\nIf you are a user of Compiler Explorer, know that you can directly include a\nfile via URL, which is pretty handy in this case.\n\n    \n    \n    #include <https://raw.githubusercontent.com/VincentZalzal/noisy/main/noisy.h>\n\nvz::Noisy prints a message for each call to a special member function. As a\nbonus, at the end of the program, it also prints a summary of the number of\ncalls for each member function. For example, running the following program:\n\n    \n    \n    vz::Noisy make_noisy() { return {}; } int main() { vz::Noisy x = std::move(make_noisy()); }\n\nwould print:\n\n    \n    \n    Noisy( 0): default constructor Noisy( 1): move constructor from Noisy( 0) Noisy( 0): destructor Noisy( 1): destructor ===== Noisy counters ===== Default constructor count: 1 Move constructor count: 1 Destructor count: 2\n\n## Other use cases#\n\nWhile the main use case is code exploration, you can also use vz::Noisy for\ntesting purposes. The counters can be queried instead of being printed to\nscreen. For example, you could ensure a custom container does not leak objects\nor make unintended copies.\n\nYou can also use it to compare the number of calls to special member functions\nperformed by two different algorithms, like std::sort and std::stable_sort.\n\n## Conclusion#\n\nYou will find more details on how to use vz::Noisy in the README file. Do not\nhesitate to share your thoughts!\n\n  * utility\n\n\u00a9 2024 vzalzal's coding blog Powered by Hugo & PaperMod\n\n", "frontpage": false}
{"aid": "40133711", "title": "Ray-Ban Meta Smart Glasses Styles and Meta AI Updates", "url": "https://about.fb.com/news/2024/04/new-ray-ban-meta-smart-glasses-styles-and-meta-ai-updates/", "domain": "fb.com", "votes": 4, "user": "davidbarker", "posted_at": "2024-04-23 16:19:32", "comments": 0, "source_title": "New Ray-Ban | Meta Smart Glasses Styles and Meta AI Updates", "source_text": "New Ray-Ban | Meta Smart Glasses Styles and Meta AI Updates | Meta\n\nSkip to content\n\nMeta\n\nsee all results for\n\nBack to Newsroom\n\nMeta\n\n# New Ray-Ban | Meta Smart Glasses Styles and Meta AI Updates\n\nApril 23, 2024April 23, 2024\n\nVideo Player\n\n00:00\n\n00:00\n\n01:00\n\nUse Up/Down Arrow keys to increase or decrease volume.\n\n## Takeaways\n\n  * We\u2019re expanding the Ray-Ban Meta smart glasses collection with new styles.\n  * We\u2019re adding video calling with WhatsApp and Messenger to share your view on a video call.\n  * We\u2019re rolling out Meta AI with Vision, so you can ask your glasses about what you\u2019re seeing and get helpful information \u2014 completely hands-free.\n\nOur second-generation smart glasses, in partnership with EssilorLuxottica,\nhave been flying off the shelves \u2014 they\u2019re selling out faster than we can make\nthem. And just in time for sunglasses season, we\u2019re expanding the Ray-Ban Meta\nsmart glasses collection with new styles designed to fit more face shapes so\nyou can find the perfect pair. We\u2019re also adding new features, including\nupdates to Meta AI, to make the glasses even more useful.\n\n## A Frame for Every Face\n\nLooking for a vintage vibe? Our new Skyler frames feature a cat eye design\ninspired by an era of iconic jet-set style, designed to suit smaller faces.\n\nWe\u2019re also adding a new low bridge option for our Headliner frames. If your\nglasses tend to slide down your nose, sit too low on your face or press on\nyour cheeks, this is the fit for you.\n\nThere are hundreds of different custom frame and lens combinations on the Ray-\nBan Remix platform, so you can mix and match to make the glasses your own on\nray-ban.com. And our new styles are designed to be prescription lens\ncompatible. Skyler and the new Headliner low bridge fit are available for pre-\norder now on meta.com and ray-ban.com. These new styles are available in 15\ncountries, including the US, Canada, Australia, and throughout Europe.\n\nWe\u2019re also introducing the first limited-edition Ray-Ban Meta smart glasses in\nan exclusive Scuderia Ferrari colorway for Miami 2024. Ray-Ban Meta for\nScuderia Limited Edition brings together the legacy of Ferrari, timeless Ray-\nBan design and cutting-edge tech from Meta, available April 24, 2024.\n\n## Share Your View on a Video Call\n\nFrom a breathtaking vista on a hike to experiencing your kid\u2019s first steps,\nthere are some moments in life that are just meant to be shared. That\u2019s why\nwe\u2019re adding the ability to share your view on a video call via WhatsApp and\nMessenger, completely hands-free.\n\nAt the grocery store and not sure which brand of kombucha to buy? Can\u2019t tell\nif that pineapple is ripe? Now you can hop on a video call with your mom and\nget her advice based on what you see. Video calling on Ray-Ban Meta smart\nglasses is rolling out gradually, so if you don\u2019t see the update right away,\nsit tight \u2014 it\u2019s on the way!\n\n## Meta AI Makes Your Smart Glasses Even Smarter\n\nFrom integrated audio to an ultra-wide 12 MP camera, Ray-Ban Meta smart\nglasses are jam-packed with tech. And in the US and Canada, you also get Meta\nAI \u2014 an intelligent assistant that helps you get things done, create and\nconnect with the people and things you care about. Just say, \u201cHey Meta,\u201d and\nask away! You can control the glasses using voice commands, and thanks to Meta\nAI, even get access to real-time information.\n\nWe started testing a multimodal AI update in December, so you can ask your\nglasses about what you\u2019re seeing, and they\u2019ll give you smart, helpful answers\nor suggestions. That means you can do more with your glasses because now they\ncan see what you see. Starting today, we\u2019re rolling this functionality out to\nall Ray-Ban Meta smart glasses in the US and Canada in beta.\n\nSay you\u2019re traveling and trying to read a menu in French. Your smart glasses\ncan use their built-in camera and Meta AI to translate the text for you,\ngiving you the info you need without having to pull out your phone or stare at\na screen.\n\nCategories\n\n:\n\nMeta Product News Technology and Innovation\n\nTags:\n\nArtificial Intelligence and Machine Learning Ray-Ban Meta Smart Glasses\n\n## Related News\n\nMeta\n\n### Introducing the New Ray-Ban | Meta Smart Glasses\n\nIn partnership with EssilorLuxottica, we\u2019re launching a new generation of Ray-\nBan Meta smart glasses, available for pre-order now.\n\nSeptember 27, 2023October 3, 2023\n\n## Topics\n\n  * Company News\n  * Technology and Innovation\n  * Data and Privacy\n  * Safety and Expression\n  * Combating Misinformation\n  * Economic Opportunity\n  * Election Integrity\n  * Strengthening Communities\n  * Diversity and Inclusion\n\n## Featured News\n\n  * Meta\n\nIntroducing Our Open Mixed Reality Ecosystem April 22, 2024\n\n  * Meta\n\nMeet Your New Assistant: Meta AI, Built With Llama 3 April 18, 2024\n\nFacebook\n\n  * Virtual reality\n\n    * Shop Meta Quest\n    * Refurbished Meta Quest 2\n    * VR for Good\n    * Forums\n    * Referrals\n    * Blog\n    * Creators\n    * Download SDKs\n    * Developers\n    * Made for Meta partner program\n    * Meta Quest health & safety information\n    * Meta Quest safety center\n    * VR for work\n\n  * Video calling\n\n    * Shop Meta Portal\n    * Compare\n    * Features\n    * Private by design\n    * Meta Portal health & safety information\n\n  * Smart glasses\n\n    * Shop Ray-Ban Stories\n    * Privacy information\n    * Terms of service\n    * Data policy\n    * Supported countries\n\n  * About us\n\n    * About Meta\n    * Media gallery\n    * Brand resources\n    * For investors\n\n  * Our community\n\n    * Support SMB\n    * Giving together\n    * Social impact\n    * Business and community growth\n    * VR for Good\n\n  * Our actions\n\n    * Data and privacy\n    * Safety and expression\n    * Elections\n    * COVID-19 response\n    * Regulations\n\n  * Support\n\n    * Shop Help Center\n    * Order status\n    * Returns\n    * Find a product demo\n    * Legal\n    * Facebook Help Center\n    * Messenger Help Center\n    * Instagram Help Center\n    * WhatsApp Help Center\n    * Workplace Help Center\n    * Meta Quest\n    * Meta Verified\n\nFacebook\n\nFollow Us\n\nSkip footer menu\n\nSkip footer menu\n\n#### Virtual reality\n\n  * Shop Meta Quest\n  * Refurbished Meta Quest 2\n  * VR for Good\n  * Forums\n  * Referrals\n  * Blog\n  * Creators\n  * Download SDKs\n  * Developers\n  * Made for Meta partner program\n  * Meta Quest health & safety information\n  * Meta Quest safety center\n  * VR for work\n\n#### Smart glasses\n\n  * Shop Ray-Ban Stories\n  * Privacy information\n  * Terms of service\n  * Data policy\n  * Supported countries\n\n#### Support\n\n  * Shop Help Center\n  * Order status\n  * Returns\n  * Find a product demo\n  * Legal\n  * Facebook Help Center\n  * Messenger Help Center\n  * Instagram Help Center\n  * WhatsApp Help Center\n  * Workplace Help Center\n  * Meta Quest\n  * Meta Verified\n\n#### About us\n\n  * About Meta\n  * Media gallery\n  * Brand resources\n  * For investors\n\n#### Our community\n\n  * Support SMB\n  * Giving together\n  * Social impact\n  * Business and community growth\n  * VR for Good\n\n#### Our actions\n\n  * Data and privacy\n  * Safety and expression\n  * Elections\n  * COVID-19 response\n  * Regulations\n\n\u00a9 2024 Meta\n\nCommunity Standards\n\nData Policy\n\nTerms\n\nCookie policy\n\nTo help personalize content, tailor and measure ads, and provide a safer\nexperience, we use cookies. By clicking or navigating the site, you agree to\nallow our collection of information on and off Facebook through cookies. Learn\nmore, including about available controls: Cookie Policy\n\n", "frontpage": false}
