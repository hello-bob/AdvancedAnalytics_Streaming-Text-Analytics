{"aid": "40051814", "title": "3DPrintedClocks: \"A sprawling library of Python code for 3D printing clocks\"", "url": "https://github.com/MrBunsy/3DPrintedClocks", "domain": "github.com/mrbunsy", "votes": 2, "user": "jstanley", "posted_at": "2024-04-16 13:48:37", "comments": 0, "source_title": "GitHub - MrBunsy/3DPrintedClocks: Various bits and bobs for 3D printed clocks and accessories", "source_text": "GitHub - MrBunsy/3DPrintedClocks: Various bits and bobs for 3D printed clocks\nand accessories\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nMrBunsy / 3DPrintedClocks Public\n\n  * Notifications\n  * Fork 0\n  * Star 13\n\nVarious bits and bobs for 3D printed clocks and accessories\n\n### License\n\n13 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# MrBunsy/3DPrintedClocks\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n4 Branches\n\n26 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nMrBunsyfinal tweaks to dial to have just one layer of red and print it\nfirstdd2e74b \u00b7\n\n## History\n\n710 Commits  \n  \n### autoclock\n\n|\n\n### autoclock\n\n| fixed regressions in hands for chunkier motion works, investigating 3...  \n  \n### clocks\n\n|\n\n### clocks\n\n| made text thickenss consistent on pendulum bob and fixed nut depth on...  \n  \n### images\n\n|\n\n### images\n\n| clock 7 render and photo added  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| ignore pycache  \n  \n### Clock build notes.txt\n\n|\n\n### Clock build notes.txt\n\n| fixed dial pillar positions when not symetric and added extra little ...  \n  \n### LICENCE_cern_ohl_s_v2.txt\n\n|\n\n### LICENCE_cern_ohl_s_v2.txt\n\n| adding licence in keeping with usual convention  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| adding licence in keeping with usual convention  \n  \n### README.md\n\n|\n\n### README.md\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### Slicing Notes.txt\n\n|\n\n### Slicing Notes.txt\n\n| adding notes to git  \n  \n### autoclock.py\n\n|\n\n### autoclock.py\n\n| more work on the readme  \n  \n### autoclock_server.py\n\n|\n\n### autoclock_server.py\n\n| customisable dial previews, also width settable but I think that's no...  \n  \n### calculate_gears.py\n\n|\n\n### calculate_gears.py\n\n| can generate a clock with a spring barrel, far from printable yet  \n  \n### demo_gears.py\n\n|\n\n### demo_gears.py\n\n| finished the whistle and improved diamond style for narrow gaps (shou...  \n  \n### demos.py\n\n|\n\n### demos.py\n\n| better hand demo and sword hands fixed  \n  \n### ducting.py\n\n|\n\n### ducting.py\n\n| candidate for clock 24  \n  \n### enfield_replacement_shelf.py\n\n|\n\n### enfield_replacement_shelf.py\n\n| tidying up the rolling ball tray and a possible replacement shelf for...  \n  \n### gcode_processor.py\n\n|\n\n### gcode_processor.py\n\n| final tweaks to dial to have just one layer of red and print it first  \n  \n### generate.py\n\n|\n\n### generate.py\n\n| re-arrangement ready to parallelise build. Whistle works pretty well ...  \n  \n### giant_clock_01.py\n\n|\n\n### giant_clock_01.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### images_for_readme.py\n\n|\n\n### images_for_readme.py\n\n| tweak to the door on the pendulum bob, also refactor the pendulum cla...  \n  \n### mantel_clock_27_springtest.py\n\n|\n\n### mantel_clock_27_springtest.py\n\n| more progress on the brocot clock and some refactoring  \n  \n### mantel_clock_29.py\n\n|\n\n### mantel_clock_29.py\n\n| more progress on the brocot clock and some refactoring  \n  \n### mantel_clock_30.py\n\n|\n\n### mantel_clock_30.py\n\n| more progress on the brocot clock and some refactoring  \n  \n### mantel_clock_31.py\n\n|\n\n### mantel_clock_31.py\n\n| doesn't really belong in clocks, but made some ducting for the fume c...  \n  \n### mantle_ball_clock_09.py\n\n|\n\n### mantle_ball_clock_09.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### power_calculations.py\n\n|\n\n### power_calculations.py\n\n| tidying up the rolling ball tray and a possible replacement shelf for...  \n  \n### render.py\n\n|\n\n### render.py\n\n| Decided on the CERN open hardware licence.  \n  \n### rolling_ball_clock_32.py\n\n|\n\n### rolling_ball_clock_32.py\n\n| more progress on the brocot clock and some refactoring  \n  \n### test.py\n\n|\n\n### test.py\n\n| few renamings and screws for holding dial on with anchor holder. This...  \n  \n### test2.py\n\n|\n\n### test2.py\n\n| surprisingly positive progress for the dial-gcode-rearranging tool!  \n  \n### test_rolling_ball.py\n\n|\n\n### test_rolling_ball.py\n\n| few renamings and screws for holding dial on with anchor holder. This...  \n  \n### testclock.py\n\n|\n\n### testclock.py\n\n| untested and slightly bodged lantern pinions  \n  \n### testescapement.py\n\n|\n\n### testescapement.py\n\n| think I've worked out what was wrong with brocot - wasn't aligning th...  \n  \n### toy_pocketwatch.py\n\n|\n\n### toy_pocketwatch.py\n\n| Refactor of names  \n  \n### wall_clock_01.py\n\n|\n\n### wall_clock_01.py\n\n| working gear layout for centred escape wheel with four wheels  \n  \n### wall_clock_02_weight.py\n\n|\n\n### wall_clock_02_weight.py\n\n| Refactor of names  \n  \n### wall_clock_03.py\n\n|\n\n### wall_clock_03.py\n\n| a potentially balanced second hand for the new watch hands. Also some...  \n  \n### wall_clock_04.py\n\n|\n\n### wall_clock_04.py\n\n| two things at once: refactor of escapements and fix anchor for wall c...  \n  \n### wall_clock_05.py\n\n|\n\n### wall_clock_05.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_05_retrofit.py\n\n|\n\n### wall_clock_05_retrofit.py\n\n| experimenting with ways to have at least two perimeters on teh first ...  \n  \n### wall_clock_06_8day_cord.py\n\n|\n\n### wall_clock_06_8day_cord.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_07_30hour_cord.py\n\n|\n\n### wall_clock_07_30hour_cord.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_08.py\n\n|\n\n### wall_clock_08.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_09.py\n\n|\n\n### wall_clock_09.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_10_8day_cord_pulley.py\n\n|\n\n### wall_clock_10_8day_cord_pulley.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_11_30hour_rope.py\n\n|\n\n### wall_clock_11_30hour_rope.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_12_8day_cord_pulley.py\n\n|\n\n### wall_clock_12_8day_cord_pulley.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_13_granny.py\n\n|\n\n### wall_clock_13_granny.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_14_grasshopper.py\n\n|\n\n### wall_clock_14_grasshopper.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_15_grasshopper.py\n\n|\n\n### wall_clock_15_grasshopper.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_16_deadbeat_front.py\n\n|\n\n### wall_clock_16_deadbeat_front.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_17_xmas.md\n\n|\n\n### wall_clock_17_xmas.md\n\n| support for direct arbour for escapement not on the front, and tinker...  \n  \n### wall_clock_17_xmas.py\n\n|\n\n### wall_clock_17_xmas.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_18_8day_grasshopper.py\n\n|\n\n### wall_clock_18_8day_grasshopper.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_19_dial_centre_seconds.py\n\n|\n\n### wall_clock_19_dial_centre_seconds.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_20.py\n\n|\n\n### wall_clock_20.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_21_8day_grasshopper.py\n\n|\n\n### wall_clock_21_8day_grasshopper.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_22_tony.py\n\n|\n\n### wall_clock_22_tony.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_23_moonphase.py\n\n|\n\n### wall_clock_23_moonphase.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_24_parents.py\n\n|\n\n### wall_clock_24_parents.py\n\n| final tweaks to dial to have just one layer of red and print it first  \n  \n### wall_clock_25_month.py\n\n|\n\n### wall_clock_25_month.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_26.py\n\n|\n\n### wall_clock_26.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_28_fixed_centre_second.py\n\n|\n\n### wall_clock_28_fixed_centre_second.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### wall_clock_32_spring_moon.py\n\n|\n\n### wall_clock_32_spring_moon.py\n\n| few tweaks to new moonclock and partial renaming of clock style to ge...  \n  \n### whistle_box.py\n\n|\n\n### whistle_box.py\n\n| some progress on the whistle box  \n  \n### whistle_test.py\n\n|\n\n### whistle_test.py\n\n| finished the whistle and improved diamond style for narrow gaps (shou...  \n  \n## Repository files navigation\n\n# 3DPrintedClocks\n\nA sprawling library of python code for 3D printing clocks and accessories.\nCadQuery is used to produce the 3D models (exported to STL) and numpy is used\nfor much of the vector arithmetic. I use the Cadquery editor (cq-editor) to\nvisualise the clock as I'm developing.\n\nMost of the code is part of a library intended for generating complete clocks\nto be 3D printed. Deadbeat and grasshopper escapements are complete and\nfunctional. There was a (not great) recoil escapement which has since been\ndeprecated and removed.\n\nSee the wall_clock_* python scripts in the root directory for examples of\ngenerating complete clocks. Clocks 3 and earlier were from when the library\nwas in a state of flux and are unlikely to work without checking out old tags.\nAll later clocks will generate a preview if opened in the CadQuery editor.\n\nDocumentation is lacking as this is a hobby project and I'm easily distracted.\nThis readme was mostly written with my future self in mind: it aims to provide\na general overview. The code is commented with my intentions throughout so for\nmore information I recommend digging into the relevant class. However a fairly\ngood understanding of how a clock works is assumed, so I'd recommend at least\nskim-reading The Modern Clock if you are interested in using it to produce\nyour own clock.\n\nNote: it turns out \"arbor\", in its horological sense, doesn't have a \"u\". This\nchange is rolling out slowly throughout the codebase. There are also two\nstyles of code format throughout, where newer and refactored code is\nattempting to adhere to PEP8 and more conventional python norms. My day job is\nin C/C++ and it shows.\n\n## Licence\n\nThis source describes Open Hardware and is licensed under the CERN-OHL-S v2.\n\nYou may redistribute and modify this source and make products using it under\nthe terms of the CERN-OHL-S v2 or any later version\n(https://ohwr.org/cern_ohl_s_v2.txt).\n\nThis source is distributed WITHOUT ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING\nOF MERCHANTABILITY, SATISFACTORY QUALITY AND FITNESS FOR A PARTICULAR PURPOSE.\nPlease see the CERN-OHL-S v2 for applicable conditions.\n\nSource location: https://github.com/MrBunsy/3DPrintedClocks\n\nAs per CERN-OHL-S v2 section 4, should you produce hardware based on this\nsource, You must where practicable maintain the Source Location visible on the\nexternal case of the clock or other products you make using this source.\n\nMy entirely non-lawyerly understanding is that this is like the GPL for\nhardware design (since the STLs are the output of the software, I cannot use\nthe more conventional GPL to cover them). I don't wish to limit anyone's use\nof this library, but I do wish to prevent clocks developed using the library\nbecoming closed source. If you distribute (paid or free) STLs for a clock, or\na printed clock, you must also provide the source code used to generate those\nSTLs.\n\n# Acknowledgements\n\nI'm standing on the shoulders of giants and would like to acknowledge the\nfollowing resources:\n\nHugh Sparks' write-up on cycloidal gears.\n\nA small amount of source code is from Dr Rainer Hessmer's gear generator (MIT\nLicence).\n\nThe Modern Clock by Ward L Goodich (and project Gutenberg!). Especially the\nchapter on escapements.\n\nComputer Aided Design of Harrison Twin Pivot and Twin Balance Grasshopper\nEscapement Geometries by David Heskin (His other documents and blog are worth\nlooking at too).\n\nAn honourary mention to Brian Law's Wooden Clocks. I would like to stress that\nmy designs are my own, but I have taken inspiration and motivation from seeing\nwhat Brian has demonstrated to be possible.\n\nI found an excellent write up on designing deadbeat escapements after I'd\ndesigned mine. If you're starting from scratch, I'd recommend it. This is very\nsimilar to the approach I decided on.\n\n# Using the Library\n\nBelow I will go through the main files and give a rough overview of how to use\nthe classes required to design your own clock. Much of the design is in flux,\nespecially the SimpleClockPlates which tend to require more options and\nrefactoring with every new design. I try and ensure comments are sufficient to\nunderstand the intent of each class and their major functions.\n\nI assume a fairly detailed knowledge of the workings of clocks through the\ncode and readme. I recommend at least a cursory read through The Modern Clock\nif you're starting from scratch (although probably skip chapters II and VII,\nthere are better explanations of the mathematics behind clocks and most of it\nisn't necessary for gaining an overview).\n\n## Escapements (clocks/escapements.py)\n\nThe heart of a clock is its escapement. This provides power to the pendulum\nand also regulates the time.\n\nFirst create an escapement object. For details of what the parameters for the\ndeadbeat and grasshopper do, see their relevant sections below.\n\n### Anchor Escapement\n\nDeadbeat is implemented, recoil is not (yet). Greatest efficiency is achieved\nif the pallets are at 45 degrees. At the moment this is done by eye and I've\nsettled on the following configurations for 30 and 40 toothed escape wheels:\n\n    \n    \n    #for 40 teeth (1 RPM with a period of 1.5s, approx 55cm pendulum) drop =1.5 lift =3 lock=1.5 escapement = clock.AnchorEscapement(drop=drop, lift=lift, teeth=40, lock=lock, style=clock.AnchorStyle.CURVED_MATCHING_WHEEL) # for 30 teeth (1RPM with a period of 2s, approx 1m pendulum) lift=4 drop=2 lock=2 escapement = clock.AnchorEscapement(drop=drop, lift=lift, teeth=30, lock=lock)\n\nI intend to create a method that would automatically calculate lift and drop\nfor any given number of teeth as well as adjusting the shape of the teeth.\n\nNote that the style of anchor is configured here. The default has straight\narms.\n\n### Grasshopper Escapement\n\nUsing default arguments the grasshopper will attempt to meet Harrison's\nstipulations (via David Heskin's interpretation) and use a few binary searches\nto generate compliant geometry. This is slow, so I recommend using\nGrasshopperEscapement.get_harrison_compliant_grasshopper() to fetch one using\npre-calculated set of parameters.\n\nThe grasshopper is only supported on the front of the clock - it is too large\nto fit between the plates.\n\nThe geometry calculations in this class are a direct implementation of David\nHeskin's write up and use his naming schemes.\n\n## Going Train\n\nThe going train is the name given to the series of gears that link the power\n(weight on a chain or cord) to the escapement. The small gears are called\npinions and the large gears are called wheels. In a gearbox for a motor you'll\nusually be gearing down to increase torque and decrease speed. On a clock\nyou're gearing up from the power source to increase the run time of the clock.\n\nGear sizes are defined by module size. moduleReduction can be configured to\nresult in decreasing module size along the going train. Each wheel needs to be\nsmaller than the last to fit and module reduction is an easy way to help\ncalculate a valid train.\n\nYou can configure the use of a pulley with usePulley. This changes the\ncalculations for the runtime of the clock and will affect the plates slightly.\n\nSmaller pendulum periods (aprox < 1s) will probably need 4 wheels to find a\nvalid train which isn't physically huge.\n\n30 hours is about the most you can achieve from a clock without a chainwheel\n(powered wheels are interchangable called chainwheels or powered wheels\nthroughout, because the chain was the first implemented). For eight day clocks\nyou will need one chainwheel.\n\nUsing degreased and oiled bearings clocks can run reliably with ~40uW. With\ngreased bearings you will need at least ~65uW. There is always a trade off to\nbe had: heavier weights provide more power and in theory make the clock more\nreliable - except they also require more robust plates and can cause the\nplates to bend, making the clock less reliable. Newer designs use M4 machine\nscrews through the whole length of the pillars which help with rigidity.\n\nA variety of different power sources are supported. All are weight driven (for\nnow, I have plans for springs):\n\n  * ChainWheel: The very first implemented, works for lightweight chains only. Deprecated - use ChainWheel2 instead, it's better and has no drawbacks.\n  * ChainWheel2: A much better chainwheel, with a suitably strong chain it can easily support many kilos.\n  * CordWheel\n\n    * With key: a key can be used to wind the weight back up. This results in a more narrow wheel (closer together and thus stronger plates) but requires access for the key. See clocks like wall clock 12.\n    * Without key: two cords, one with the weight and the other to pull to wind the weight back up. Only been used on 30hour clocks (see wall clock 07).\n  * RopeWheel: Multiple attempts to use a rope (tried hemp as it had most friction) with a counterweight and friction. It does work but requires too much counterweight for me to explore the idea further. See wall clock 11.\n\nFinally genGears creates the Arbor objects which represent the physical gears\nthat will be printed (note that these will be wrapped up in ArborsForPlates\nlater, which provides dimensions not yet known at this stage). Reducing the\nthickness of the gears reduces friction, so we can run with a lighter weight,\nbut also reduces their strength. Therefore I usually have thick gears for the\nchain wheel and reduce the thickness towards the escapement.\n\n    \n    \n    moduleReduction = 0.9 # relatively simple eight day clock, needs one chain wheel in order to provide enough runtime # Large pendulum period so it can calculate a valid train with only 3 wheels train = clock.GoingTrain(pendulum_period=2, wheels=3, escapement=escapement, maxWeightDrop=1200, chainAtBack=False, chainWheels=1, hours=7.5 * 24) # find a valid combination of gears that meets the constraints specified. This can get slow with 4 wheels, but is usually fast with only 3. train.calculate_ratios(max_wheel_teeth=130, min_pinion_teeth=9, wheel_min_teeth=60, pinion_max_teeth=15, max_error=0.1, module_reduction=moduleReduction) # configure what type of power the going train will have and this will calculate the gear ratios to provide the requested runtime for the maxWeightDrop # genChainWheels2 uses the newer pocket chain wheel which is strong and reliable enough to cope with heavy duty chain for eight day clocks train.gen_chain_wheels2(COUSINS_1_5MM_CHAIN, ratchetThick=6, arbourD=4, looseOnRod=False, prefer_small=True, preferedDiameter=30) train.gen_gears(module_size=0.9, module_reduction=moduleReduction, thick=2.4, thickness_reduction=0.9, chain_wheel_thick=4, pinion_thick_multiplier=3, style=gearStyle, powered_wheel_module_increase=1, chain_wheel_pinion_thick_multiplier=2, pendulum_fixing=pendulumFixing, stack_away_from_powered_wheel=True) # print to console how much power we can expect for the calculated chain wheel train.print_info(weight_kg=2)\n\nAn example output from printInfo for a 4-wheel going train with short\npendulum:\n\n> {'train': [[72, 10], [75, 9], [60, 27]]} pendulum length:\n> 0.13977573912159377m period: 0.75s escapement time: 27.0s teeth: 36 Powered\n> wheel diameter: 29 [[86, 10]] layers of cord: 2, cord per hour: 1.2cm to\n> 1.1cm min diameter: 29.0mm Cord used per layer: [1319.468914507713,\n> 680.531085492287] runtime: 178.6hours using 2.0m of cord/chain for a weight\n> drop of 1000. Chain wheel multiplier: 8.6 ([[86, 10]]) With a weight of 3kg,\n> this results in an average power usage of 45.8\u03bcW\n\nFinding the expected power usage for a given weight is useful - it will show\nif the clock is viable. Using degreased and oiled bearings can result in a\nreliable clock with a power of 40\u03bcW, but if this is your first attempt at\nprinting a clock I recommend aiming for more like 80\u03bcW.\n\n## Motion Works\n\nThe motion works gears down from the minute hand to the hour hand and provides\na means to mount both the hour and minute hands.\n\nThe cannon pinion holds the minute hand and slots through the centre of the\nhour holder. The cannon pinion is held onto the arbor by friction - a pair of\nnuts locked against each other with a spring washer at the base, and another\npair of nuts locked against each other on the front of the hands. This allows\nyou to set the time independently of the going train.\n\nAdding extra_height will make the motion works longer than the minimum -\nuseful if you need the hands further from the clock plates (or dial)\n\ninset_at_base provides a hole in the bottom of the cannon pinion large enough\nto fit the nuts and spring washer. This enables the motion works to be more\nsnug to the plate. You will need to manually specify the arbor distance to\ngenerate larger motion works with .calculateGears(arbourDistance=30) for the\ncannon pinion to be large enough for this to work. If a bearing is provided to\nthe motion works, it will generate space to slot a bearing into the top and\nbottom of the cannon pinion. This is for slotting the second hand through the\nmotion works. This will assume you need a time setting arbor (the flower\ngear).\n\nIf the arbor is going to sit above the cannon pinion compensateLooseArbour\nwill elongate the teeth of the gears slightly. This helps prevent the hour\nhand slipping if the clock plates droop slightly over time.\n\nCompact motion works may require two nylock screws to hold the arbor in the\nright place.\n\n    \n    \n    # motion works as used in the earlier clocks, with caps on the pinions motionWorks = clock.MotionWorks(extra_height=10, compact=False) # a motion works that could be used with a centred second hand motion_works = MotionWorks(compact=True, bearing=get_bearing_info(3), extra_height=20) motion_works.calculate_size(arbor_distance=30)\n\n## Pendulum Bob\n\nThe Pendulum class generates the bob and the ring (for avoiding the hands on\nfront mounted pendulums, or the bottom pillar on rear pendulums).\n\nThis class can produce two types of bob: solid and hollow. The hollow bob is\ndesigned to be filled with something heavy (I use steel shot) and have the lid\nscrewed in place.\n\n    \n    \n    pendulum = clock.Pendulum(hand_avoider_inner_d=100, bob_d=80, bob_thick=15)\n\n## Dial\n\nDials consist of an outer ring and an optional inner seconds-hand ring. Each\ncan have different styles.\n\nEye-clocks with eyes that look left and right with the pendulum swing are\nsupported, but with only one implementation currently.\n\nTop and bottom fixings to the clock plates are both optional (but you'll need\nat least one). These are overriden if using compact clock plates with a\nfilled-in dial.\n\n    \n    \n    dial = clock.Dial(outside_d=180, bottom_fixing=True, top_fixing=True, style=clock.DialStyle.ROMAN, seconds_style=clock.DialStyle.CONCENTRIC_CIRCLES)\n\n## Clock Plates\n\nThe plates tie everything together. They arrange the arbors, provide wall\nfixings and hold the dial. From clock 4 onwards they are backwards\ncompatibility has been preserved, with all new features being optional. The\ndifferent options available are best demonstrated in the various working clock\ndesigns.\n\nBy default the motion works arbor is directly bellow the cannon pinion. This\ncan be overriden with motion_works_angle_deg (which replaces the deprecated\noption motionWorksAbove).\n\nThere are three main styles of clock plate:\n\n  * VERTICAL: The default options provide a vertical plate strong enough for a 30 hour clock (see clock 4).\n  * ROUND: A circular layout is possible, but results in an offset pendulum and hands (see clock 5)\n  * COMPACT: Similar to VERTICAL but will place some arbors out to the side to reduce the total height. See clock 22.\n\nFor vertical eight day clocks, the option heavy will increase the radius of\nthe bottom pillar and extraHeavy will increase the top pillar and plate width\nas well as increasing the bottom pillar shape to slightly engulf the chain\nwheel.\n\npendulumFixing sets the way the pendulum is attached to the anchor. Working\noptions are FRICTION_ROD and DIRECT_ARBOUR_SMALL_BEARINGS. Friction rod has\nboth the anchor and pendulum holder attached to the same rod with friction,\nand the beat can be set by adjusting the pendulum holder. \"Direct Arbor\"\nextends the arbor with the crutch and has the pendulum holder as part of a\nspecial collet which slots onto the arbor. The beat can only be set by bending\nthe pendulum rod or adjusting the angle of the clock on the wall, but it\nshould already be in beat if the pendulum and clock are perfectly vertical.\nSee clocks 12 and 19 for the first working direct arbor implementation.\n\ndirect_arbor_d will set the radius of the arbor if the pendulum fixing is\nDIRECT_ARBOUR_SMALL_BEARINGS. The default has proven to be acceptable.\n\nBy default the pendulum is at the front and the back plate is directly against\nthe wall. This is controlled with pendulumAtFront and backPlateFromWall will\nresult in what is called the \"wall standoff\" which generates extra pillars\nwhich are attached to the back of the back plate. Clock 14 was the first use\nof backPlateFromWall for the grasshopper escapement.\n\nfixingScrews expects a MachineScrew. This defaults to countersunk M3 screws,\nbut most clocks will need M4 if you want to easily find screws long enough to\npass through the front, back and wall standoff.\n\nescapementOnFront will mount the escape wheel and anchor on the front of the\nclock. This was done for the grasshoppers (Clocks 14, 15 and 17) but should be\nsupported for anchor escapements too.\n\nextraFrontPlate is deprecated, but was an attempt to add another plate to help\nhold the escape wheel in place for a front mounted escapement.\n\nchainThroughPillarRequired forces the bottom pillar to be wide enough for the\nchain (or cord) to pass through the pillar. Generally you will want this to be\ntrue for a chain driven clock to prevent the chain falling off if the clock is\nleft running for long enough.\n\ncentred_second_hand routes the escape wheel rod through the centre of the\nmotion works. See Clocks 12 and 19. This requires the motion works to be\nconfigured with a bearing.\n\npillars_separate defaults to true and results in the pillars between the\nplates being separate parts. If it is false they are printed attached to the\nback plate. To re-print old designs without a wall standoff (pre clock 14)\nthis will probably need to be true in order for there to be somewhere to put\nthe nuts for the fixing screws without compromising strength.\n\ndial accepts a Dial object. configure_dimensions on the dial will be called to\nset the support length. override_fixing_positions will be called if the dial\nis \"filled in\" (tony) and the plates are configured with two bottom pillars.\n\nhuygens_wheel_min_d: If the going train is configured with a \"huygens wheel\"\n(my term for the clock using Huygen's maintaining power) you can override the\ndiameter of the extra chain wheel. By default it will be to fit on top of the\nbottom pillar\n\nallow_bottom_pillar_height_reduction is experimental and intended to reduce\nthe height of the clock plates if the plates are extraHeavy. It is still\nuntested.\n\nBy default there is only one bottom_pillars, but it can be set to 2. See Clock\n22 for an example of this. Useful for shorter pendulums and more compact clock\ndesigns.\n\ncentre_weight is experimental, intended to move the chain wheel to the side so\nthe weight (when no pulley is used) is in the centre of the clock. it is\nuntested.\n\nscrews_from_back will place the nuts for the fixing screws that hold the\nplates together at the front of the clock, rather than the back.\n\nendshake is how much extra space there is between the plates for the arbors to\n\"shake\". I recommend increasing above the default of 1mm for heavy clocks as\nthe arbors can jam between the plates if the plates droop slightly.\n\n    \n    \n    pendulumSticksOut = 10 backPlateFromWall = 30 # clock 20's clock plates plates = clock.SimpleClockPlates(train, motionWorks, pendulum, plate_thick=9, back_plate_thick=10, pendulum_sticks_out=pendulumSticksOut, name=\"Wall 20\", style=clock.GearTrainLayout.COMPACT, motion_works_above=True, heavy=True, extra_heavy=True, pendulum_fixing=pendulumFixing, pendulum_at_front=False, back_plate_from_wall=backPlateFromWall, fixing_screws=clock.MachineScrew(metric_thread=4, countersunk=True), chain_through_pillar_required=True, pillars_separate=True, dial=dial, bottom_pillars=1, motion_works_angle_deg=45, allow_bottom_pillar_height_reduction=False, endshake=1.5)\n\n## Hands\n\nA large variety of hand styles exist, with the following options:\n\n  * Outline of a different colour, or set to 0 for no outline. Doesn't work with small cuckoo hands or baroque hands.\n  * Centred second hand. Only produces good second hands with SIMPLE_ROUNDED and BREGUET\n  * Chunky: makes the hand generally wider, some hands don't look good without a dial behind them (only affects BREGUET)\n\ngetHandDemo() will produce models of all hand styles for a quick overview.\n\n    \n    \n    # clock 12's hands with a centred second hand hands = clock.Hands(style=clock.HandStyle.BREGUET, minuteFixing=\"circle\", minuteFixing_d1=motionWorks.get_minute_hand_square_size(), hourfixing_d=motionWorks.get_hour_hand_hole_d(), length=dial.outside_d * 0.45, thick=motionWorks.minute_hand_slot_height, outline=1, outlineSameAsBody=False, second_hand_centred=True, chunky=True)\n\n## Pulleys\n\nTwo pulleys exist, a simple LightweightPulley with a wheel that can be printed\nin one piece or the more heavy duty BearingPulley which fits a bearing inside\nthe pulley wheel. For eight day clocks with a heavier weight I recommend the\nBearingPulley.\n\nThe LightweightPulley supports either slotting a steel tube into the wheel\n(use_steel_rod=True), or running with plastic on the machine screw directly. I\nsuspect the steel tube is overkill because this is only used on lightweight\nclocks anyway, but it might make it possible to use with heavier weights.\n\nBoth pulleys use a standard cuckoo weight hook to provide a hook for the\nweight.\n\n    \n    \n    pulley = clock.BearingPulley(diameter=train.powered_wheel.diameter, bearing=clock.get_bearing_info(4), wheel_screws=clock.MachineScrew(2, countersunk=True, length=8)) pulley = LightweightPulley(diameter=plates.get_diameter_for_pulley(), use_steel_rod=False)\n\n## Assembly\n\nThe Assembly is used for generating previews of the clock for inspection to\nensure the geometry is correct and the clock is printable. The going train and\nplates logic isn't perfect, it is possible to produce designs where things\noverlap or would be impossible to assemble. The ability to see an assembled\nclock rendered helps avoid discovering these problems after you've started\nprinting.\n\nget_clock() provides a CaqQuery workplane that represents the entire assembled\nclock. This can be exported to STL. show_clock() only works in CQ-editor but\nprovides a coloured preview of the clock.\n\n## Other Bits\n\n### Cuckoo_bits\n\nThis can generate a pendulum rod + pendulum bob fixing for a cuckoo clock.\nDesigned to be the same as traditional cuckoo clocks using friction rather\nthan a nut to hold the bob in place. As such, it's about as accurate as\ntraditional cuckoos!\n\nWorking whistles and bellow parts also!\n\n### Leaves\n\nCan generate a few types of leaves, used for cuckoo clocks and the Christmas\nclock.\n\n# Slicing Gears\n\nThe gears need careful configuration when slicing - rarely do default settings\nresult in good gears.\n\n  * Check no small bits of perimeter or infill in the teeth/leaves. Sometimes this can be achieved by slightly adjusting the perimeter and external perimeter widths. May need to import *_pinion_STL_modifier.stl and add settings:\n\n    * 1 Perimeter\n    * No top or bottom solid layers\n    * 0% Fill density\n  * Elephant foot needs to be correct (note that for the MK4 0.25 nozzle, prusaslicer has 0 elephant foot by default! 0.1mm was sufficient)\n  * Manually place seam to be between gaps in teeth\n  * Extra perimeter and minimum shell thickness at top and bottom for strength.\n  * Usually Classic slicer is better than Arachne\n  * Disable gap fill to reduce stringing\n  * I've used Avoid crossing perimeters. I'm undecided how important it is.\n\n# Multi-Colour on a non Multi-Material Printer\n\nThis is surprisingly easy to do and looks great when printed on a textured\nsheet. Since I don't own a multi-material printer I've used a variation on a\ntechnique I found on a blog post that works with PrusaSlicer and my Prusa Mk3:\n\n  * I added a new printer to prusa slicer, and configured it with multiple extruders.\n  * I then added the custom G-code for \"Tool change G-code\" to be M600. This tells the printer to request the user to change the filament.\n  * When exporting gcode, I manually edit the file to remove the first M600 call - otherwise the printer asks you to change the filament immediately.\n  * Import all the STL files for the object at once - it should ask you if you want to treat them as a single object. Say yes!\n  * The object should be printed \"upside down\", so the manual filament changes are over fairly quickly, and the rest of the object can print without intervention.\n  * Using a wipe tower helps ensure there aren't any gaps or splurges in your print, but you can reduce the purge quantity a lot.\n  * When changing filament on the first layer, take special care to look for and remove any long stringing common with PETG.\n  * When changing filament, grab the extruded waste with pliers, but don't tug it away until you've confirmed it's succeeded and the print head starts to move away! It will extrude a short length after you've pressed the button to confirm.\n  * When changing filament, after you've removed one filament, check to see if the nozzle needs a clean before inserting the next filament.\n\nPrinting in PETG on a textured bed, with the 'front' of the object facing down\nresults in a very neat and tidy front surface. With well tuned z-offset and\nelephant's foot then there will be no gaps and very little colour blurring at\nthe boundaries between colours.\n\n## About\n\nVarious bits and bobs for 3D printed clocks and accessories\n\n### Resources\n\nReadme\n\n### License\n\nActivity\n\n### Stars\n\n13 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\n26 tags\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Python 98.7%\n  * TypeScript 1.1%\n  * Other 0.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
