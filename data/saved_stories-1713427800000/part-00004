{"aid": "40069599", "title": "Hardest Problem in Computer Science: Centering Things", "url": "https://tonsky.me/blog/centering/", "domain": "tonsky.me", "votes": 25, "user": "tobr", "posted_at": "2024-04-17 20:17:11", "comments": 5, "source_title": "Hardest Problem in Computer Science: Centering Things", "source_text": "Hardest Problem in Computer Science: Centering Things @ tonsky.me\n\n  * Blog\n  * Talks\n  * Projects\n  * Logos\n  * Patrons\n\n# Hardest Problem in Computer Science: Centering Things\n\nThis is my claim: we, as a civilization, forgot how to center things.\n\nI mean, we know how to do it. It has never been simpler:\n\n    \n    \n    display: flex; justify-content: center; /* Horizontal centering */ align-items: center; /* Vertical centering */\n\n(don\u2019t ask why you need to remember four words instead of just\nhorizontal/vertical, it\u2019s still better than before)\n\nOr you can use grids if you want:\n\n    \n    \n    display: grid; justify-items: center; /* Horizontal centering */ align-items: center; /* Vertical centering */\n\n(also don\u2019t ask why justify-content became justify-items)\n\nIf you feel like school today, we can deduce it from the first principles:\n\nHey, even ChatGPT knows how to center things:\n\nOkay, maybe not right away, but eventually it gets there.\n\nWhat I\u2019m saying is: everybody knows how to center things. It\u2019s trivial. And if\nyou are lost, the knowledge is right there.\n\nYet, when we look at actual applications, we see that these methods are not\nused. We see this:\n\nor this:\n\nor even this:\n\nSo something is clearly getting lost between know-how and applying that\nknowledge.\n\nIn theory, there\u2019s no difference between theory and practice. Unfortunately,\nwe live in practice.\n\nSo what\u2019s happening? Let\u2019s find out.\n\n# Fonts\n\nFonts are one of the biggest offenders. You can see poorly aligned text\neverywhere. Let me showcase.\n\nApple can\u2019t do it:\n\nMicrosoft can\u2019t do it:\n\nGitHub can\u2019t do it:\n\nValve can\u2019t do it:\n\nSlack can\u2019t do it:\n\nTelegram can\u2019t do it:\n\nGoogle Maps can\u2019t do it:\n\nHonestly, I can provide an endless supply of poorly-aligned buttons without\neven having to look for them:\n\nI think you get the idea. Myriad companies big and small, native or web, and\nnone are safe from text-centering problems.\n\n# Line height\n\nIf font metrics are not enough, the next problem on our way to perfect\ncentering is line-height.\n\nLine height is... complicated. A canonical article to learn about it is\nVincent De Oliveira\u2019s Deep dive CSS: font metrics, line-height and vertical-\nalign.\n\nThis is how it looks applied in practice. Slack:\n\nNotion:\n\nAirbnb:\n\nYouTube:\n\nAligning two things in different containers is almost impossible:\n\nAlthough many have tried:\n\nNot many have succeeded:\n\nCSS might get in the way (different controls having different defaults which\nyou have to undo before even starting trying to align):\n\nNo easy solution here, just roll up your sleeves and delve into\nspecifications.\n\n# Icons\n\nIcons are like small rectangles put in line with text. Therefore all problems\ncaused by text AND line height apply here. Aligning icons next to text is a\nnotoriously hard task.\n\nAtom:\n\nPlatform formerly known as Twitter:\n\niOS:\n\nMozilla:\n\nYouTube:\n\nSometimes icon wins over text:\n\nSometimes text wins over icon:\n\nSometimes both lose:\n\nSome icons are just plain old HTML form controls:\n\nSome are stylized:\n\nThanks @bee for the picture\n\nSometimes people will get creative to achieve perfect alignment:\n\nBut overall it\u2019s a pretty hopeless game:\n\nThe problem is, CSS doesn\u2019t help us either. There are 13 possible values for\nthe vertical-align property, but none would align the icon in a meaningful\nway:\n\ntext-align: middle comes closest, but it aligns by x-height, not cap-height,\nwhich still looks unbalanced:\n\nThat\u2019s exactly why people love web programming so much. There\u2019s always a\nchallenge.\n\n# Icon fonts\n\nAligning rectangles is relatively easy. Aligning text is hard. Icons are\nrectangles. So what if we put icons into a font file?\n\nNow we can\u2019t align anything:\n\nNeither can we set icon size! In the example above, all icons were set to the\nsame font size and line height. As you can see, all of them come out different\nsizes, with different paddings, and none were properly aligned.\n\nDespite many shortcomings and almost no upsides, companies rushed to add icon\nfonts everywhere. The result is this:\n\nmacOS 10.14 \u2192 macOS 10.15\n\nNotice how operators are not vertically aligned anymore and are also blurry.\nAll because of switching to icon font.\n\nApple was so committed to icon fonts they even ruined the QuickTime record\nbutton:\n\nJust look at it:\n\nYes, it actually looks like this to this day. As does the calculator.\n\nBut they are far from being the only ones. One:\n\nTwo:\n\nThree:\n\nFour:\n\nFive:\n\nSix:\n\nSeven:\n\nSame as with text alignment, there\u2019s an endless supply of poorly aligned\nicons.\n\n# Skill issue\n\nNot only programmers fail to center things. Designers do it, too:\n\nCurrent version / my fix\n\nThe problem with icons is that sometimes you have to take their shape into\naccount for things to look good:\n\nBad centering / good centering\n\nTriangle is notably tricky:\n\nSometimes it is too far to the left:\n\nSometimes it\u2019s too far to the right:\n\nIt can even be too high up (line-height strikes again):\n\n# Horizontal centering\n\nYou might think that only centering things vertically is hard. Not only!\nHorizontal might be hard, too:\n\nI don\u2019t think there\u2019s a deep reason for these, except for people just being\nsloppy:\n\nJust, come on!\n\nCan this be a deliberate decision?\n\nI don\u2019t know. Icons can suffer from it, too:\n\nAs can text:\n\n# What can be done: designers\n\nSo what is the problem?\n\nIt all starts with the font. Right now, the bounding box of a text block looks\nlike this:\n\nThe problem is, it can also look like this:\n\nor this:\n\nNow, what will happen if you try to center text by centering its bounding box?\n\nThe text will be off! Even though rectangles are perfectly centered.\n\nBut even if font can have its metrics unbalanced, it doesn\u2019t mean it does.\nWhat happens in reality?\n\nIn reality, most of the popular fonts have metrics slightly off. Many have it\nsignificantly off:\n\nPercentages are of cap-height\n\n10% is not a small number. It\u2019s a whole pixel in font size 13! Two, if you\nhave 2\u00d7 scaling! It\u2019s easily noticeable.\n\nBasically, Segoe UI is the reason why Github on Windows looks like this:\n\nThe solution is simple: make tight bounding boxes and centering will become\ntrivial:\n\nIf you use Figma, it already can do this (although it\u2019s not the default):\n\n# What can be done: font designers\n\nIf you are a font designer, make life easier for everybody by setting your\nmetrics so that ascender \u2212 cap-height = descender:\n\nOr the same idea, visually:\n\nImportant! You don\u2019t have to actually extend your ascenders/descenders to\nthese boundaries. As you can see in the picture, my ascender space, for\nexample, is way underutilized. Just make the numbers match.\n\nFor both web and native, to avoid headaches, choose a font that already\nfollows this rule. SF Pro Text, Inter, and Martian Mono seem to do this\nalready, so they will center perfectly with no extra effort.\n\nSee Font size is useless; let\u2019s fix it for more information.\n\n# What can be done: web developers\n\nFrom the developer side, it\u2019s a bit more tricky.\n\nThe first thing to understand, you need to know which font you\u2019ll be using.\nUnfortunately, this doesn\u2019t work if you plan to substitute fonts.\n\nWe\u2019ll use IBM Plex Sans, a font used on this very page. IBM Plex Sans has the\nfollowing metrics:\n\nWhen you set font-size, what you set is UPM (this will also be equal to 1em).\nHowever, the actual space occupied by the text block is the space between the\nascender and descender.\n\nWith a few simple calculations, we get that extra padding-bottom: 0.052em\nshould do the trick:\n\nShould work like this:\n\nOr in actual CSS (select text to see default text bounding box):\n\nAndy\n\nYou can get the required font metrics for your font from opentype.js.org/font-\ninspector.html (ascender, descender, sCapHeight).\n\nNow that we have that sorted, aligning icons is not that hard too. You set\nvertical-align: baseline and then move them down by (iconHeight - capHeight) /\n2:\n\nThis, unfortunately, requires you to know both font metrics and icon size. But\nhey, at least it works:\n\nAndy\n\nAgain, select the text above to see how different the browser\u2019s bounding box\nis from the correct position.\n\n# What can be done: icons fonts\n\nSTOP.\n\nUSING.\n\nFONTS.\n\nFOR.\n\nICONS.\n\nUse normal image format. The one with dimensions, you know? Width and height?\n\nHere, I drew a diagram for you, to help you make a decision:\n\nJust look at how hard Apple tries to put the checkmark inside the rectangle,\nand the rectangle next to the text label:\n\nAnd they still fail!\n\nNothing is easier than aligning two rectangles. Nothing is harder than trying\nto align text that has an arbitrary amount of empty space around it.\n\nThis is a game that can\u2019t be won.\n\n# What can be done: optical compensations\n\nWe, developers, can only mathematically align perfect rectangles. So for\nanything that requires manual compensation, please wrap it in a big enough\nrectangle and visually balance your icon inside:\n\n# What can be done: everyone\n\nPlease pay attention. Please care. Bad centering can ruin otherwise decent UI:\n\nBut a properly aligned text can make your UI sing:\n\nEven if it\u2019s hard. Even if tools make it inconvenient. Even if you have to\nsearch for solutions. Together, I trust, we can find our way back to putting\none rectangle inside another rectangle without messing it up.\n\nI, for one, want to live in a world of beautiful well-balanced UIs. I trust\nthat you do, too.\n\nIt\u2019s all worth it in the end.\n\n# Honorable mention\n\nOur article would be incomplete without this guy:\n\nTake care!\n\nApril 16, 2024\n\nHi!\n\nI\u2019m Niki. Here I write about programming and UI design Subscribe\n\nI also create open-source stuff: Fira Code, DataScript, Clojure Sublimed and\nHumble UI. If you like what I do and want to get early access to my articles,\nyou should support me on Patreon.\n\n", "frontpage": true}
