{"aid": "40167107", "title": "Fluent: A localization system for natural-sounding translations", "url": "https://github.com/projectfluent/fluent/wiki/", "domain": "github.com/projectfluent", "votes": 1, "user": "ColinWright", "posted_at": "2024-04-26 08:34:21", "comments": 0, "source_title": "Home", "source_text": "Home \u00b7 projectfluent/fluent Wiki \u00b7 GitHub\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nprojectfluent / fluent Public\n\n  * Notifications\n  * Fork 43\n  * Star 1.3k\n\n# Home\n\nJump to bottom\n\nSta\u015b Ma\u0142olepszy edited this page Apr 17, 2019 \u00b7 7 revisions\n\n## Quick Start\n\nFluent is a family of localization specifications, implementations and good\npractices developed by Mozilla. We\u2019re inviting translation tool authors to try\nit out. Please use GitHub issues or visit the Fluent Discourse to provide\nfeedback.\n\nThe formal definition of the grammar can be found in the spec/ directory,\ntogether with documents outlining good practices, validation rules, and the\ncompatibility strategy for future releases.\n\n## Background\n\nSoftware localization has been dominated by an outdated paradigm: the\ntranslation is just a dictionary of strings which map one-to-one to the\nEnglish (en-US) copy. This paradigm is unfair and limiting to languages with\ngrammars more complex than English. For any grammatical feature not supported\nby English, a special case must be added to the source code, leaking logic\ninto all translations. Furthermore, creating good UIs which depend on multiple\nexternal arguments is hard and requires the developer to understand the\ngrammar of the languages the product targets.\n\nGoals\n\n  * Design a DSL for creating expressive translations which can depend on many internal and external arguments.\n  * Design a low-level API for parsing and formatting translations which keeps localizations isolated from each other.\n  * Create a reference implementation which can be used to build localization frameworks.\n\nNon-Goals\n\n  * Create a new localization framework.\n  * Solve IO for all platforms.\n\n## Design Philosophy\n\nThe design of Fluent is centered around the following five concepts: Control\nand Isolation, Simplicity, Tolerance, Modularity and composability, and The\nPrinciple of Least Power. See the Design Principles document for more details.\n\n## Project Pillars\n\nThe intended outcome of Project Fluent is a syntax for describing translation\nresources and a low-level API for formatting translations into strings.\n\n  * Syntax specification with a reference parser implementation\n  * Requirements and good practices for API implementations\n  * Implementation in JavaScript\n  * Implementation in Python\n  * Implementation in Rust\n\n## Home\n\n## Design\n\nDesign Principles Error Handling Fluent and Standards BiDi in Fluent\n\n## Good Practices\n\nGood Practices for Developers\n\n## Comparisons\n\nFluent and ICU MessageFormat Fluent and L20n Fluent vs gettext\n\n## Integrating Fluent\n\nIntegrating Fluent \u2014 Overview Integrating Fluent \u2014 Use Cases\n\n##### Clone this wiki locally\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
