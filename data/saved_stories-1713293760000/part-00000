{"aid": "40051296", "title": "Running a Bug Bash: A Guide", "url": "https://spin.atomicobject.com/bug-bash-guide/", "domain": "atomicobject.com", "votes": 1, "user": "philk10", "posted_at": "2024-04-16 12:54:36", "comments": 0, "source_title": "Running a Bug Bash: A Guide", "source_text": "Running a Bug Bash: A Guide\n\n\u2190 Back to Blog Home\n\n# Running a Bug Bash: A Guide\n\nExploratory Testing\n\nby: Miranda Michalski\n\nApril 16, 2024\n\n  * Twitter\n  * Facebook\n  * Linkedin\n  * Hackernews\n\n### Article summary\n\n  * What's a bug bash?\n  * Get ready.\n  * Examples\n\nImagine yourself on a project with a tight deadline, multiple moving parts,\nand a shortage of dedicated testing team members. How do you test the app\nthoroughly within a short timeframe, identify and report bugs, all while\nensuring the entire team gains a comprehensive understanding of the project?\nThe answer lies in scheduling a bug bash.\n\n## What\u2019s a bug bash?\n\nBut what exactly is a bug bash? It involves time-boxing the testing effort,\noften adopting an \u201call hands on deck\u201d approach that includes individuals from\nmarketing and customer support teams.\n\nHowever, setting up a Bug Bash isn\u2019t a task for the faint-hearted. It requires\nsubstantial effort to organize and navigate the flood of information it\ngenerates. Recently, I assisted in coordinating several bug bashes, using\nFigmaJam to manage the findings effectively.\n\n## Get ready.\n\nHere\u2019s a high-level overview of Bug Bash preparation.\n\n  1. Scheduling the bug bash. Choose an appropriate time for the event, ensuring enough functionality for testers while also considering release timing and allocating time for bug fixes.\n  2. Setting up FigmaJam. Create the FigmaJam board early, allowing the inclusion of the link in the email invitation. Develop the board structure, including sections for instructions, feature focus areas, test prerequisites, and bug logging.\n  3. Communicating expectations. Clearly communicate expectations and processes with testers, outlining test prerequisites such as downloading the app and logging in to confirm access.\n  4. Support during testing. Assemble a support team to address access issues, data problems, and software blockers encountered during testing.\n  5. Logging defects. After the bug bash, encourage participants to stay and log issues in the bug tracking system. This collaborative effort ensures findings are documented effectively for further action.\n\nAdditional considerations include creating test scenarios to ensure\ncomprehensive coverage, defining test credentials and supporting test data,\nand assigning testers to specific scenarios. For instance, in testing payment\nfunctionalities, scenarios might involve various payment methods and scenarios\nsuch as insufficient funds or coupon applications.\n\nBy meticulously planning and executing a Bug Bash, teams can efficiently\nidentify and address bugs, foster collaboration, and gain valuable insights\ninto the project\u2019s overall status.\n\n## Examples\n\nSample Bug Bash InstructionsExample Feature Bug Reporting Area in FigJam\n\ndebuggingbugs\n\nMiranda Michalski Quality Analyst | Delving, diving, driving and careening along to inform a high-quality user experience. Also a source of stories, puns and jokes.\n\nAll Posts \u2192\n\n### Related Posts\n\n  * Exploratory Testing\n\n## Test Network Requests with Cypress Intercepts\n\n  * Exploratory Testing\n\n## Deal with Flaky Cypress Tests: Cloud vs. Parallelized Testing\n\n  * Exploratory Testing\n\n## Here\u2019s How to Test Your Site\u2019s \u201cGood Until\u201d State\n\n## Keep up with our latest posts.\n\nWe\u2019ll send our latest tips, learnings, and case studies from the Atomic\nbraintrust on a monthly basis.\n\n[mailpoet_form id=\"1\"]\n\nConversation\n\n### Join the conversation Cancel reply\n\n### UX & Design Category\n\n  * Figma\n  * Design Strategy\n  * UX/Design Practices\n  * UX/Design Techniques\n  * UX/Design Tools\n  * Exploratory Testing\n\nRelated Posts\n\nExploratory Testing\n\n# Test Network Requests with Cypress Intercepts\n\nExploratory Testing\n\n# Deal with Flaky Cypress Tests: Cloud vs. Parallelized Testing\n\nExploratory Testing\n\n# Here's How to Test Your Site's \"Good Until\" State\n\n### Tell Us About Your Project\n\nWe\u2019d love to talk with you about your next great software project. Fill out\nthis form and we\u2019ll get back to you within two business days.\n\nShare Your Project\n\nAtomic is a software design + development consultancy.\n\n\u00a9 2024 Atomic Object LLC\n\n##### Explore\n\n  * Careers\n  * Diversity\n  * Resources\n  * Atomic Blog\n\n##### Offices\n\n  * Grand Rapids\n  * Ann Arbor\n  * Chicago\n  * Raleigh-Durham\n\n##### Details\n\n  * Contact\n  * Media\n  * Privacy Policy\n\nLoading Comments...\n\n", "frontpage": false}
