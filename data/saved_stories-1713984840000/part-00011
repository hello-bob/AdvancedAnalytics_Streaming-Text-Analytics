{"aid": "40142802", "title": "Dapr: Microservices API", "url": "https://dapr.io/", "domain": "dapr.io", "votes": 1, "user": "DrinkWater", "posted_at": "2024-04-24 10:49:33", "comments": 0, "source_title": "Dapr - Distributed Application Runtime", "source_text": "Dapr - Distributed Application Runtime\n\n## APIs for Building Secure and Reliable Microservices\n\nDapr provides integrated APIs for communication, state, and workflow. Dapr\nleverages industry best practices for security, resiliency, and observability,\nso you can focus on your code.\n\nHandling millions of transactions efficiently with Dapr.\n\nRead the article\n\nHow DeFacto migrated to an event-driven architecture with Dapr.\n\nRead the article\n\nHow At-Bay improved operations with Dapr.\n\nRead the article\n\nBosch\u2019s Residential IoT Services GmbH (RIoT) uses Dapr actors and Java SDK to\nbuild a large scale smart home IoT solution.\n\nRead the article\n\n## Build distributed applications faster\n\nDapr is a set of integrated APIs with built-in best practices and patterns to\nbuild distributed applications. Dapr increases your developer productivity by\n20-40% with out-of-the-box features such as workflow, pub/sub, state\nmanagement, secret stores, external configuration, bindings, actors,\ndistributed lock, and cryptography. You benefit from the built-in security,\nreliability, and observability capabilities, so you don't need to write\nboilerplate code to achieve production-ready applications.\n\n### Automate your business processes\n\nAuthor workflows in code to automate complex business processes that are\nstateful, durable, and long-running.\n\nTake advantage of workflow patterns such as task chaining, fan-out/fan-in,\nmonitor, timers, and external system interaction. Combine Dapr workflow with\nthe Dapr APIs to send messages, invoke services, and store key/value data.\nWorkflow state can be stored in any database of your choice.\n\n### Best practices to build secure and resilient applications\n\nDapr includes built-in security features that are \"on by default\". Developers\nand ops can set application-centric policies on APIs, services, and components\nto limit access without getting into low level networking concerns.\nCommunication is automatically encrypted in-transit with mTLS.\n\nDapr also provides resiliency policies to protect against failures due to any\nnumber of issues, including hardware failures, unexpected throughput, or\napplication lifecycle events, such as scaling out and application restarts.\nDapr provides specific capabilities that detect failures and enable\nconfigurable retries, back-offs, circuit breakers and timeouts.\n\n### Integrate with the infrastructure of your choice\n\nDapr's component model decouples the integrated API with the underlying\nresources. For instance, when you're using the Dapr publish subscribe API, you\ncan change the message broker by swapping out a yaml component file to switch\nfrom RabbitMQ, to Kafka (or any other supported broker), without changing your\napplication code.\n\nDapr applications run on Kubernetes or run self-hosted on any virtual or\nphysical machine, so you can run Dapr applications on any cloud or edge.\n\n### Incrementally adopt\n\nDapr can be introduced into an existing architecture incrementally. Dapr\napplications can call non-Dapr endpoints while still having the Dapr benefits\nof having resiliency policies, observability, security access through scoping\nand more.\n\n## APIs\n\n### Service invocation\n\nService invocation enables applications to communicate with each other through\nwell-known endpoints in the form of http or gRPC messages. Dapr provides an\nendpoint that acts as a combination of a reverse proxy with built-in service\ndiscovery, while leveraging built-in distributed tracing and error handling.\n\n> Read more about Service invocation\n\n### Publish subscribe\n\nPub/Sub is a loosely coupled messaging pattern where senders (or publishers)\npublish messages to a topic, to which subscribers subscribe. Dapr supports the\npub/sub pattern between applications.\n\n> Read more about Publish subscribe\n\n### State management\n\nApplication state is anything an application wants to preserve beyond a single\nsession. Dapr provides a key/value-based state and query APIs with pluggable\nstate stores for persistence.\n\n> Read more about State management\n\n### Actors\n\nAn actor is an isolated, independent unit of compute and state with single-\nthreaded execution. Dapr provides an actor implementation based on the virtual\nactor pattern which provides a single-threaded programming model and where\nactors are garbage collected when not in use.\n\n> Read more about Actors\n\n### Workflow\n\nThe Workflow API enables you to define long running, persistent processes or\ndata flows that span multiple microservices using Dapr workflows or workflow\ncomponents. The Workflow API can be combined with other Dapr API building\nblocks.\n\n> Read more about Workflow\n\n### Secrets\n\nDapr provides a secrets API and integrates with secret stores such as public\ncloud stores, local stores and Kubernetes to store the secrets. Services can\ncall the secrets API to retrieve secrets, for example to get a connection\nstring to a database.\n\n> Read more about Secrets\n\n### External configuration\n\nThe Configuration API enables you to retrieve and subscribe to application\nconfiguration items for supported configuration stores. This enables an\napplication to retrieve specific configuration information, for example, at\nstart up or when configuration changes are made in the store.\n\n> Read more about External configuration\n\n### Bindings\n\nA binding provides a bi-directional connection to an external cloud/on-premise\nservice or system. Dapr allows you to invoke the external service through the\nDapr binding API, and it allows your application to be triggered by events\nsent by the connected service.\n\n> Read more about Bindings\n\n### Distributed lock\n\nThe distributed lock API enables you to take a lock on a resource so that\nmultiple instances of an application can access the resource without conflicts\nand provide consistency guarantees.\n\n> Read more about Distributed lock\n\n### Cryptography\n\nWith the cryptography API, you can leverage cryptography in a safe and\nconsistent way. Dapr exposes APIs that allow you to perform operations, such\nas encrypting and decrypting messages, within key vaults or the Dapr sidecar,\nwithout exposing cryptographic keys to your application.\n\n> Read more about Cryptography\n\n## Cross Cutting Concerns\n\n### Security\n\nDapr provides end-to-end security with the service invocation API, with the\nability to authenticate an application with Dapr and set endpoint access\npolicies. For pub/sub components, you can limit which topic types and\napplications are allowed to publish and subscribe to specific topics.\n\n> Read more about Security\n\n### Observability\n\nDapr can be configured to emit tracing data using the widely adopted protocols\nof Open Telemetry (OTEL) and Zipkin. This makes it easily integrated with\nmultiple observability tools.\n\n> Read more about Observability\n\n### Resiliency\n\nDapr provides a capability for defining and applying fault tolerance\nresiliency policies to your application. You can define policies for following\nresiliency patterns: timeouts, retries/back-offs, circuit breakers. These\npolicies can be applied to any Dapr API calls when calling components with a\nresiliency spec.\n\n> Read more about Resiliency\n\n## Trusted and Adopted by\n\n## Watch a Quick Introduction to Dapr\n\n## Watch Dapr - The ultimate developer API for authoring microservices\n\nDapr is a Cloud Native Computing Foundation Incubating project\n\n  * Learn\n  * Concepts\n  * Getting Started\n  * Quickstarts\n\n  * Community\n  * GitHub\n  * Discord\n\n  * News & Media\n  * Blog\n  * Case studies\n  * Logos\n\n  * Legal\n  * Terms\n  * Privacy\n  * Trademarks\n\nCopyright \u00a9 2023, The Dapr Authors\n\nThe Linux Foundation has registered trademarks and uses trademarks. For a list\nof trademarks of The Linux Foundation, please see our Trademark Usage page.\n\n", "frontpage": false}
