{"aid": "40215283", "title": "Lateral Thinking: examples of creative solutions", "url": "https://blog.fponzi.me/2024-04-30-lateral-thinking-examples.html", "domain": "fponzi.me", "votes": 1, "user": "federicoponzi", "posted_at": "2024-04-30 19:35:41", "comments": 0, "source_title": "Lateral Thinking: examples of creative solutions", "source_text": "Lateral Thinking: examples of creative solutions\n\n# Federico Ponzi's Blog\n\nHome Blog\n\n# Lateral Thinking: examples of creative solutions\n\nPublished on 2024-04-30 | Last update: 2024-04-30 | 9 min read\n\n  * The solutions\n\n    * Memory leak? Just put more RAM\n    * Delete your account fast\n    * DNS\u2019s case insensitivity for security purposes\n    * Nintendo copy protection\n    * Want to reach out? Solve the quiz first!\n    * Want to access this website? Solve the quiz first!\n    * More efficient fluorescent lamps\n    * Fake it until you make it: Amazon Mechanical Turk\n    * Game boy screen mirroring\n    * Keep track of time using the Alternate Current frequency\n    * Constant work\n    * Lavarand\n  * Other\n\n    * Deploying cats to fight infestations\n    * Too many complains about baggage reclaim wait time\n  * Conclusion\n\nI like to think that problems are what's most worth obsessing on, and that\nsolutions usually follow easily from a good understanding of a problem. This\npost is not about problems, but rather about surprisingly clever solutions.\n\nFrom Wikipedia:\n\n> Lateral thinking is a manner of solving problems using an indirect and\n> creative approach via reasoning that is not immediately obvious. It involves\n> ideas that may not be obtainable using only traditional step-by-step logic\n\nI'm planning to update it over time, so if you have interesting examples,\nplease send them over, and I\u2019ll consider including them.\n\n## The solutions\n\n### Memory leak? Just put more RAM\n\nMissiles require some software running on them. Imagine that during debugging,\nyou found that this software is leaking memory. Memory leaking happens when a\nprogram never releases allocated memory. When the system runs out of memory,\nthe program will fail to allocate more memory and probably crash.\n\nBecause finding the leak can be very expensive in time and resources, the\nalternative solution was to calculate how much memory was leaked over time\n(say 3KiB/minute), and to put enough RAM to allow it to hit the target.\n\n  * Source: An amusing story about a practical use of the null garbage collector.\n\n### Delete your account fast\n\nSome companies tend to make it tough to disable/delete your account. This dark\npattern is used to discourage users from going through the hustle of deleting\ntheir account or stop their subscription to the service.\n\nA solution to get it closed faster is to \"abuse\" the service in a way that\nwould get it deleted due to company policy infringement. For example, on a\nsocial media website, one could post banned content (p*rn) or just spam links.\n\n  * Source: https://news.ycombinator.com/item?id=39900422.\n\n### DNS\u2019s case insensitivity for security purposes\n\nThe small (16-bit) size of the DNS transaction ID has made it a frequent\ntarget for forgery, with the unhappy result of many cache pollution\nvulnerabilities.\n\nInstead of creating a breaking change of the protocol, an RFC by Vixie and\nDagon explains how to exploit the protocol's specification to increase the\nentropy of the DNS transaction id. The idea is to simply randomly flip the\ncapitalization of letters in DNS queries. The DNS standards require that name\nservers treat names with case-insensitivity; therefore, it's not a breaking\nchange. This trick helps to improve the randomness and unpredictability of DNS\nquery identifiers, making it harder for attackers to manipulate or spoof DNS\nresponses.\n\n  * Source: https://datatracker.ietf.org/doc/html/draft-vixie-dnsext-dns0x20-00 and Google dev docs\n  * Shared by: Marco Biagi\n\n### Nintendo copy protection\n\nWhen you turn on a Game Boy, the first screen you'll see is the Nintendo\u2019s\nlogo. This logo is present in all cartridges, and at a boot time the cpu will\ncompare it to the one stored in the ROM. If they don\u2019t match, the Game Boy\nwill halt the execution\u2014something went wrong when reading data. For this\nreason, all game developers need to put the Nintendo\u2019s logo in the game's\ncartridge.\n\nThe clever idea is that this logo check is not used for checking the\nconnection only, but also to get rid of unlicensed copies of games. Nintendo\nhad a plan to sue all unauthorized uses of their logo. In this way, they\ndidn't have to put any license protection software/hardware.\n\n  * Source: Hacking the Game Boy cartridge protection\n  * Shared by: Federico Scozzafava\n\n### Want to reach out? Solve the quiz first!\n\nSay that you\u2019re getting a lot of spam emails, and your filters are not able to\ncapture them and filter them out.\n\nYou could, for example, try to tune your filters better, and update them over\ntime to overcome spammer\u2019s eluding techniques.\n\nOr as an alternative, you could respond to every email and ask them \"to\ncompute a moderately hard, but not intractable function\". This is the idea\nproposed by Dwork and Naor in their 1992 paper \"Pricing via Processing or\nCombatting Junk Mail\". This same high-level idea is behind Bitcoin\u2019s Proof Of\nWork as well.\n\n  * Source: Pricing via Processing or Combatting Junk Mail\n\n### Want to access this website? Solve the quiz first!\n\nThis one ties to the proof of work idea. To differentiate a bot from a real\nuser, ask them to solve a captcha!\n\nThe clever idea behind it is that this work is not wasted (as in Bitcoin\u2019s\nproof of work), for example, it\u2019s well known that Google uses solutions of\nRecaptcha challenges to \"to digitize text, annotate images, and build machine-\nlearning datasets. This in turn helps preserve books, improve maps, and solve\nhard AI problems.\".\n\n  * Source: Google Recaptcha\n\n### More efficient fluorescent lamps\n\nAs recently as in the year 2000s, before LED lights were the norm, fluorescent\nlamps were very low power, cost-efficient alternative to incandescent light\nbulbs. Their only downside is the warm-up time before providing the light at\nfull capacity.\n\nA solution developed by General Electric called Compact Fluorescent Lamp (CFL)\nwas to put an incandescent light bulb inside a fluorescent one. When the light\nis turned on, the inner light bulb would initially provide the light, and it\nwould be shut off as soon as the fluorescent one was warmed up. The inner\nlight bulb had also the side effect of help heating up the gas in the\nsurrounding lamp. Source: Bright from the Start: GE's CFL with an incandescent\ntrick up its sleeve on YouTube\n\n  * Source: Bright from the Start: GE's CFL with an incandescent trick up its sleeve\n  * Shared by: Federico Scozzafava\n\n### Fake it until you make it: Amazon Mechanical Turk\n\nIt is tough to build a great product, especially if there are not yet\ncompetitors around to take inspiration from. If you want to use some machine\nlearning model, you will also need a training dataset.\n\nOne way to fix this problem would be to just take some realistic actors and\nrecord hours of videos. In this way, you could build your dataset to then\ntrain your model and finally release the product to understand if customers\nlike it or not.\n\nAnother way is to have an MVP for a model, and use Amazon Mechanical Turk to\nhelp tagging videos of real users and help decide on ambiguous scenarios.\n\nThis example has the Amazon Just Walk Out technology in mind, in which\nMechanical Turk was used to watch the recordings of customers taking items and\nbill them after walking out of the store.\n\n  * Source: Amazon's AI Stores Seemed Too Magical. And They Were.\n  * Shared by: Federico Scozzafava\n\n### Game boy screen mirroring\n\nThe original Game Boy was not designed with screen mirroring in mind, so it\ndoes not come with a video output.\n\nOne way to get screen mirroring would be to open it and modify the motherboard\nto add this support.\n\nA clever idea was to create a cartridge shield that taps into the system bus,\nand would transmit all the bits to an emulator running on the computer\neffectively achieving screen mirroring without accessing to the video memory.\n\nThis technique is similar to a Digital Twin simulation.\n\n  * Source: A Game Boy capture cartridge: The GB Interceptor on YouTube\n  * Shared by: Federico Scozzafava\n\n### Keep track of time using the Alternate Current frequency\n\nElectronic devices like clocks sometime need access to a time source to work\nproperly. One way to solve this problem is to add a crystal oscillator: when\ncurrent is applied, they vibrate with a certain frequency and can be used for\ntimekeeping.\n\nAnother solution is to use the alternate current source\u2019s frequency to\ncalculate the passing of time. The AC line frequency is simply sent through a\ncounter/clock circuit. Most of these clocks do have a very economical circuit\nand backup battery to keep time when the AC line power is off. Their accuracy\non the backup battery can be quite bad over extended times.\n\n  * Source: Quora\n  * Shared by: Federico Scozzafava\n\n### Constant work\n\nIn your web service, every request adds some amount of load to your system.\nAssessing the load per request, it\u2019s hard because usually when the system is\nunloaded, every request takes some small effort to complete, while when the\nsystem is more loaded it will take more effort. So it seems like the cost per\nrequest varies depending on the current load of the system. Given some load\nper request, we could use this number to estimate how many servers are needed\nto handle some number of requests per second. But again, it\u2019s challenging to\npredict how your service will behave under a heavy load.\n\nConstant work is a concept introduced in the AWS builders library article by\nColm MacC\u00e1rthaigh \"Reliability, constant work, and a good cup of coffee\". It\nrecommends that each request should require an equal amount of effort to\ncomplete. How? Doing the same amount of work per request - in some cases,\nwasting cpu time running no-ops. Having a constant amount of work per request\ngives you predictability on how the system will perform under a heavy load.\n\n  * Source: Reliability, constant work, and a good cup of coffee\n\n### Lavarand\n\nCryptography relies on the ability to generate random numbers that are both\nunpredictable and kept secret from any adversary. Computers are predictable\nmachines and a way to gather some random number is to sense the environment\n(temperature, capturing atmospheric noise, etc.).\n\nBecause each of the sensing mechanisms could potentially be tampered with,\ndepending on the business requirements of the use case it might make sense to\nuse as input a mix of different sources of randomness.\n\nLavarand, also known as the Wall of Entropy, is a system that was first\nproposed and built by Silicon Graphics in 1996 and more recently implemented\nby Cloudflare as well. Lavarand uses lava lamps as a secondary source of\nrandomness for the production servers.\n\n  * Source: LavaRand in Production on Cloudflare Blog\n  * Shared by: Marco Biagi\n\n## Other\n\nThe following are not related to computers, but they are still interesting or\nfunny.\n\n### Deploying cats to fight infestations\n\nIn 1960, the UK \u2019s Royal Air Force deployed cats to fight rat infestation:\n\n> The cats were flown out of Singapore and delivered in crates dropped by\n> parachutes as part of a broader program of supplying cats to combat an\n> infestation of rats.\n\nSource: Operation Cat Drop on Wikipedia.\n\n### Too many complains about baggage reclaim wait time\n\nAt Houston\u2019s airport, customers were complaining that about the long wait\ntimes for baggage claim.\n\nAfter trying to speed up the baggage handling process, the executives of the\nairport decided to move the gate farther. In this way, people needed more time\nto walk there, giving the staff enough time to unload the baggage. I\u2019m not\nsure how true this story is, but still it sounds like a lateral thinking\nsolution.\n\nSource: https://www.nytimes.com/2012/08/19/opinion/sunday/why-waiting-in-line-\nis-torture.html\n\n## Conclusion\n\nThe initial goal of this article was to describe solutions that I find\ncreative or surprising. After talking about it with some friends and\ncolleagues, I had to try to give a definition of what qualified to be included\nhere and what not. In fact, \"creative\" and \"surprising\" are a subjective way\nto describe something. Some examples in this article might not be in fact\nconsidered as \"lateral thinking\" for some of the readers that could think of\nthem as being obvious\u2014but that\u2019s ok.\n\nFor every example, I first thought about the problem. Then tried to think\nabout an obvious, logical solution. If the alternative solution seemed\ncreative, then I had it included here.\n\nWhile undoubtedly creative, I\u2019ve decided to not include examples like how \"An\nArtist Used 99 Phones to Fake a Google Maps Traffic Jam\" because they are not\nsolving a problem.\n\nThe most fun part for me was discussing ideas with other people and getting\nmessaged back a few days later with new examples. I hope that you will start\nnoticing and appreciate lateral thinking solutions, and if you have good\nexamples - please send them over!\n\n## About the author\n\nHello! I'm Federico Ponzi, a Software Engineer at AWS. I'm interested in\ndistributed systems and operating systems, and this is my personal blog.\n\nIf you have questions, comments, feedback or just want to say hi, please reach\nout: Twitter, Mastodon, Linkedin, Github. You can also reach out via email\nusing x@y where x is \"me\" and y is this domain.\n\n\u00a9 2023 Federico Ponzi. The opinions expressed here do not represent the views\nof my current or past employers.\n\nThis website was generated with Genereto.\n\n", "frontpage": false}
