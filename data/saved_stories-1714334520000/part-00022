{"aid": "40187153", "title": "FastAPI", "url": "https://greenash.net.au/thoughts/2024/04/on-fastapi/", "domain": "greenash.net.au", "votes": 1, "user": "rcarmo", "posted_at": "2024-04-28 09:07:00", "comments": 0, "source_title": "On FastAPI - GreenAsh", "source_text": "On FastAPI - GreenAsh\n\nGreenAsh\n\n\u2630\n\n# On FastAPI\n\n28 Apr 2024\n\nOver the past year or two, I've been heavily using FastAPI in my day job. I've\nbeen around the Python web framework block, and I gotta say, FastAPI really\nsucceeds in its mission of building on the strengths of its predecessors\n(particularly Django and Flask), while feeling more modern and adhering to\ncertain opinionated principles. In my opinion, it's pretty much exactly what\nthe best-in-breed of the next logical generation of web frameworks should look\nlike.\n\n\u00a1\u00c1ndale, \u00e1ndale, arriba! Image source: The Guardian\n\nLet me start by lauding FastAPI's excellent documentation. Having a track\nrecord of rock-solid documentation, was (and still is!) \u2013 in my opinion \u2013\nDjango's most impressive achievement, and I'm pleased to see that it's also\nbecoming Django's most enduring legacy. FastAPI, like Django, includes docs\nchanges together with code changes in a single (these days called) pull\nrequest; it clearly documents that certain features are deprecated; and its\ndocs often go beyond what is strictly required, by including end-to-end\ninstructions for integrating with various third-party tools and services.\n\nFastAPI's docs raise the bar further still, with more than a dash of humour in\nmany sections, and with a frequent sprinkling of emojis as standard fare. That\nlatter convention I have some reservations about \u2013 call me old-fashioned, but\nyou could say that emoji-filled docs is unprofessional and is a distraction.\nHowever, they seem to enhance rather than detract from overall quality; and,\nyou know what, they put a non-emoji real-life smile on my face. So, they get\nmy tick of approval.\n\nFastAPI more-or-less sits in the Flask camp of being a \"microframework\", in\nthat it doesn't include an ORM, a template engine, or various other things\nthat Django has always advertised as being part of its \"batteries included\"\nphilosophy. But, on the other hand, it's more in the Django camp of being\nhighly opinionated, and of consciously including things with which it wants a\nhassle-free experience. Most notably, it includes Swagger UI and Redoc out-of-\nthe-box. I personally had quite a painful experience generating Swagger docs\nin Flask, back in the day; and I've been tremendously pleased with how API doc\ngeneration Just WorksTM in FastAPI.\n\nMuch like with Flask, being a microframework means that FastAPI very much\nstands on the shoulders of giants. Just as Flask is a thin wrapper on top of\nWerkzeug, with the latter providing all things WSGI; so too is FastAPI a thin\nwrapper on top of Starlette, with the latter providing all things ASGI.\nFastAPI also heavily depends on Pydantic for data schemas / validation, for\nstrongly-typed superpowers, for settings handling, and for all things JSON. I\nthink it's fair to say that Pydantic is FastAPI's secret sauce.\n\nMy use of FastAPI so far has been rather unusual, in that I've been building\napps that primarily talk to an Oracle database (and, indeed, this is unusual\nfor Python dev more generally). I started out by depending on the (now-\ndeprecated) cx_Oracle library, and I've recently switched to its successor\npython-oracledb. I was pleased to see that the fine folks at Oracle recently\nreleased full async support for python-oracledb, which I'm now taking full\nadvantage of in the context of FastAPI. I wrote a little library called\nfastapi-oracle which I'm using as a bit of glue code, and I hope it's of use\nto anyone else out there who needs to marry those two particular bits of tech\ntogether.\n\nThere has been a not-insignificant amount of chit-chat on the interwebz\nlately, voicing concern that FastAPI is a one-man show (with its BDFL\n@tiangolo showing no intention of that changing anytime soon), and that the\nFastAPI issue and pull request queues receive insufficient TLC. Based on my\nexperience so far, I'm not too concerned about this. It is, generally\nspeaking, not ideal if a project has a bus factor of 1, and if support\nrequests and bug fixes are left to rot.\n\nHowever, in my opinion, the code and the documentation of FastAPI are both\nhigh-quality and highly-consistent, and I appreciate that this is largely\nthanks to @tiangolo continuing to personally oversee every small change, and\nthat loosening the reins would mean a high risk of that deteriorating. And,\nspeaking of quality, I personally have yet to uncover any bugs either in\nFastAPI or its core dependencies (which I'm pleasantly surprised by,\nconsidering how heavily I've been using it) \u2013 it would appear that the items\nlanguishing in the queue are lower priority, and it would appear that\n@tiangolo is on top of critical bugs as they arise.\n\nIn summary, I'm enjoying coding with FastAPI, I feel like it's a great fit for\nbuilding Python web apps in 2024, and it will continue to be my Python\nframework of choice for the foreseeable future.\n\n\u2190 What (I think) the Voice is all about\n\nABN: 58 377 192 424 \u00a9 2004-2024 Jeremy Epstein. Legalities apply.\n\n", "frontpage": false}
