{"aid": "40256763", "title": "Show HN: Client only public key authentication IdP (similar: SSH and OAuth 2.1)", "url": "https://sign-poc.js.org", "domain": "sign-poc.js.org", "votes": 2, "user": "imcotton", "posted_at": "2024-05-04 11:19:44", "comments": 0, "source_title": null, "source_text": "try build links, or Discuss on Hacker News\n\nWarning: WIP, do NOT use in production!\n\n## Outline\n\n### What\n\n  * SSH alike public key authentication\n  * OAuth 2.1 (PKCE) alike signing flow\n  * IdP that only frontend static site, easy to self-hosting\n  * general-purpose public service, open source under AGPLv3 (releasing soon)\n\n### Why\n\n  * pre site username / password flow is centralized and out of control\n  * password managers ease up credential management, but not breaking the loop\n  * Passkeys so far only leads to vendor look-in, (read: \"Passkeys: A Shattered Dream\")\n\n### How\n\n  1. starts login process\n  2. navigate to signing site\n\n     * client_id: UUID v5 (NS:URL) based on redirect_uri's origin\n  3. username and password associated to the signing site only\n\n     * seed: hard coded to the signing site, changeable for custom deploy\n\n       * SHA256(\"quick brown fox jumps over the lazy dog\")\n  4. navigate back from signing site\n\n     * pub: Ed25519 public key\n     * state: received from step 2\n     * timestamp: signing time in ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ)\n     * signature:\n\n       * first compute sample from HMAC_SHA256({ key: timestamp, message: challenge })\n       * then sign the sample by Ed25519 private key\n  5. challenge retrieved by state or cookie\n  6. logged in\n\n## Code Snippets\n\n", "frontpage": false}
