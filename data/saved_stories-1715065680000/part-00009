{"aid": "40278791", "title": "Fixing the Git Blame Beachball", "url": "https://zed.dev/blog/git-blame-beachball", "domain": "zed.dev", "votes": 1, "user": "tosh", "posted_at": "2024-05-06 19:52:54", "comments": 0, "source_title": "Fixing the Git Blame Beachball", "source_text": "Fixing the Git Blame Beachball\n\n\u2190 Back to Blog\n\n# Fixing the Git Blame Beachball\n\nConrad Irwin\n\nMay 6th, 2024\n\nWe had just finished making the change, I ran git commit, and immediately Zed\nfroze, started to beachball..., and 10 seconds later it was back.\n\nI tried again: make a change, git commit, see a beachball. Uh Oh.\n\nZed is supposed to be fast. What's going on?\n\nWe pulled open Instruments and ran a CPU profile:\n\nmacOS Instruments showing a Severe Hang, and no CPU usage.\n\nHmm... our process is doing... nothing...? That doesn't make sense. At least\nInstruments agrees that this is a \"Severe Hang\".\n\nMikayla did some searching and found this post, that suggested we try the\n\"Thread State\" instrument:\n\nThread State instruments showing the main thread is blocked.\n\nWell, that's interesting, the main thread is indeed blocked (and indeed so are\nalmost all our backgrount threads). But why?\n\nStumbling across the \"OS Fundamentals\" sub-instrument in the drop-down on the\nleft led us to the answer.\n\nOS Fundamentals sub-instrument showing a psynch_cvwait syscall\n\nIt's stuck in a syscall psynch_cvwait. That's a condition variable wait, but\nwhat's it waiting for? None of our background threads seem to be doing\nanything either...\n\nLooking at the stack-trace by clicking the bottom-most right-most icon gives\nus a glimmer of a clue, but more of a \"that shouldn't happen\".\n\nBacktrace from the main thread\n\nIt looks like the main thread is blocking deliberately, in a\nblock_with_timeout. We do this in a few places to ensure that if we can do a\nuser-visible task quickly the result shows up on the next frame. That said the\ntimeout is set to 5ms so that if the task takes longer than expected we don't\nblock the UI thread. In this case we blocked for 4550ms which is, checks\nnotes, about 1000 times too long.\n\nPushing that question to the side: Why isn't the main thread being woken up\nafter 5ms? We continued clicking around in Instruments.\n\nLooking at the Narrative view in the bottom right, we get our first real hint:\n\nThe Narrative around the time the thread was unblocked\n\n\"The thread was made runnable by git\". Interesting. Given that I was\ntriggering this with a git commit it wasn't surprising that git was running,\nbut it was surprising that it'd be blocking Zed.\n\nFiltering the Narrative view by git reveals something even more interesting.\nIt looks like almost every time our app is woken, it's being woken by git, and\nnot just that, it's a different git process each time. We have 257 git\nprocesses running?!\n\nA large number of git process-swaps in the Narrative\n\nThe most recent feature we added in this space was Inline Git Blame, so that\nwas the prime suspect. Sure enough, disabling that eliminated the problem.\n\nFrom there it was relatively easy to track down. When we'd added the git blame\ncode it was to power the gutter, and so the assumption was that it would be\nopen in one or two files at a time. We set up a bunch of event listeners so\nthat if the git index changed, then the blame would update.\n\nUnfortunately, because git blame is now enabled for every file, and we had 257\nfiles open, every time I changed the git index by committing, Zed would spawn\n257 git processes simultaneously. Oops! (now fixed...).\n\nThat leaves only the mystery of why the main thread wasn't being woken up\nafter 5ms. I think part of the problem here is contention \u2013 our process tree\nis using as much CPU as it can spawning git processes - but that's not the\nwhole story.\n\nIn order to wake up the main thread after a few milliseconds, we spawn a\nbackground task that sleeps for the required time, and then signals (via the\ncondition variable) the main thread to resume. Unfortunately GPUI timers on\nmacOS were being run with a lower priority than background tasks. A classic\npriority inversion: The main thread was waiting on the lowest-priority task,\nwhich was in turn blocked by all our git processes. Oops again! (also now\nfixed...).\n\nWe take great pride in making Zed fast, and it's a little embarrassing when we\naccidentally make it slow. That said, it's always fun to dig in and figure out\nwhat's going on.\n\nThese fixes shipped in v0.133.7, along with fixes for a few other hangs that\nwe discovered using our new monitoring tool (blog post to follow!).\n\nIf your Zed beachballs, please file an issue, we'd love to dig in with you and\nfigure it out.\n\n### Looking for a better editor?\n\nYou can try Zed today on macOS. Download now!\n\n### We are hiring!\n\nIf you're passionate about the topics we cover on our blog, please consider\njoining our team to help us ship the future of software development.\n\nConrad Irwin\n\n05/06/24\n\n\u00a9 2024 Zed Industries.\n\nEULA \u00b7 Attributions \u00b7 Sign in\n\n#### Product\n\n  * Download\n  * FAQ\n  * Roadmap\n  * EULA\n  * CLA\n\n#### Developers\n\n  * Docs\n  * Releases\n  * GitHub\u2197\n  * Status\u2197\n\n#### Community\n\n  * Blog\n  * Feedback\n  * Discussions\u2197\n  * Merch\u2197\n\n#### Company\n\n  * About\n  * Team\n  * Jobs\n  * Twitter\u2197\n\n", "frontpage": false}
