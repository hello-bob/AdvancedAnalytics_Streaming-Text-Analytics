{"aid": "40122919", "title": "Generate code for declarative language instead of programming language", "url": "https://near.tl/developer-forever/forum/announcement/generate-code-for-declarative-language-instead-of-.anc-17ee9632-adef-49b3-b320-c4e0b82c8d8a.html", "domain": "near.tl", "votes": 4, "user": "QueensGambit", "posted_at": "2024-04-22 22:09:56", "comments": 0, "source_title": "Generate code for declarative language instead of progr...", "source_text": "Generate code for declarative language instead of programming language\n\nCommunity About Post Question\n\n  * Community\n  * About\n\nTo post a comment, please sign in with your email.\n\nGenerate code for declarative language instead of programming language\n\nCommunity\n\n>\n\nAnnouncement\n\nCode Generation AI is all the rage these days. But is generating code for\nprogramming languages like JavaScript and Python the right path to take? I\nthink not. I think we should be generating code for declarative languages like\nExcel or SQL.\n\nWhat's the difference, you ask?\n\nIn declarative languages, you express what your intention is. For example, in\nExcel, you can use SUM() to add all the line items and calculate the order\namount. If the quantity of a line item changes, it will automatically\nrecalculate the line item amount and then invoke SUM() to recalculate the\norder amount. But in imperative languages like JavaScript or Python, you\ninstruct the computer on how to calculate the order amount. You would\nimplement a function to add the line items as the order amount. Anytime the\nquantity of a line item changes, it is your job to call the function and\nrecalculate the order amount.\n\nWhy is this important?\n\nIf you are asking AI to generate code for your requirements, you are\nessentially expressing your intent. So, expressing it in a declarative\nlanguage seems natural. This will help the person who gave the requirement to\nunderstand the code generated by the AI. On the other hand, generating code\nfor a programming language seems like the worst form of leaky abstraction.\n\"Leaky abstraction\" describes a scenario where attempts to simplify a system\nend up requiring users to understand its underlying complexities to\ntroubleshoot it. Code generation can automate the creation process. But, the\nresulting code can be a puzzle even to a skilled developer who is debugging\nit. The person who gave the requirement will most likely not understand any of\nit.\n\nSo, why do AI companies generate code like this?\n\nI guess it comes down to the availability of training data for AI. There are a\nlot of open-source projects in JavaScript or Python, so it is easy to train AI\nwith it. But open-source projects in Excel are almost non-existent. So, the\nunavailability of training data might be the primary reason behind the\ndirection these code generation AI companies are taking. At Neartail, we are\ntaking a middle road. We have created a declarative language using JavaScript\nsyntax so that we could train the AI as well as make it understandable to\nbusiness owners. Will other AI companies realize the perils of leaky\nabstraction and change its course? Only time will tell.\n\nPosted by Mani Doraisamy\n\nApr 22\n\nComments (0)\n\n### Recent Announcements\n\nCheck out the latest updates.\n\nFounders have no idea what they are doing\n\nBoth first-time and second-time founders often don\u2019t know what they\u2019re doing.\nHowever, first-time founders believe they must appear knowledgeable, so they\npretend to have all the answers in front of their employees. This act\ncontributes to their feeling of being impostors\u2014the more they pretend, the\nmore they feel like frauds. Second-time founders understand that all founders\nare in the same situation of not knowing everything. This realization leads\nthem not to feel obliged to act as if they have all the answers. They are more\nopen about their uncertainties with their employees and investors, which is\nwhy they come across as more authentic. The advantage of being in accelerators\nlike YC is that first-time founders can realize they don\u2019t need to know\neverything. They see that their heroes\u2014alums, investors, mentors\u2014don\u2019t have\nall the answers either. They offer suggestions, not definitive answers, which\ninstead of being a disappointment, shows first-time founders that everyone is\nin the same boat. It\u2019s better to be authentic and seek answers from their own\nexperiences. This is a major benefit of being in a community such as YC or in\na city like San Francisco.\n\nWhat do your school grades, money, and SEO have in common?\n\n* School grades are measures of our knowledge in a subject. * Money is a measure of the usefulness of our work to others. * SEO traffic is a measure of the usefulness of our content to others. Unfortunately, they can be inaccurate reflections of our contributions. For example, we can memorize a subject without truly understanding it and still receive good grades. When these measures are widely accepted as authoritative, companies may recruit based on grades rather than actual knowledge, leading us to study for grades rather than for understanding. Similar issues occur with money and SEO. Optimizing for measures instead of actual contributions leads to gaming the system.\n\n\u00a9 2024. All Rights Reserved.\n\nMade With Neartail\n\n", "frontpage": true}
