{"aid": "40154443", "title": "Why the boring tech is the best for starting a startup", "url": "https://jointhetechbubble.substack.com/p/why-the-boring-tech-is-the-best-for", "domain": "jointhetechbubble.substack.com", "votes": 1, "user": "vladcalin", "posted_at": "2024-04-25 07:16:09", "comments": 0, "source_title": "Why the boring tech is the best for starting a startup", "source_text": "Why the boring tech is the best for starting a startup\n\nShare this post\n\n#### Why the boring tech is the best for starting a startup\n\njointhetechbubble.substack.com\n\n#### Discover more from The Tech Bubble\n\nIndie hacking, startups and technology, all in one place, through the lens of\na tech startup CTO\n\nContinue reading\n\nSign in\n\n# Why the boring tech is the best for starting a startup\n\n### Forget all the new shiny tech. Think of the most boring tech stack\npossible. Yes, that's the money maker.\n\nVlad C\u0103lin\n\nApr 25, 2024\n\nShare this post\n\n#### Why the boring tech is the best for starting a startup\n\njointhetechbubble.substack.com\n\nShare\n\nWhen it comes to starting a startup, mainly building a product, especially if\nyou have a technical background, the first thing you do is picking the tech\nstack.\n\nIf you have a tech background, then you want to leverage your valuable skills\nto build the product, hopefully after you validated the idea and that there is\nenough demand to justify building it.\n\nIndieHackers.com has a dedicated group for Developers where all the talk is\nabout tech stacks and which is the best tech for X for for Y, so it has to be\na question a lot of people ask. And I\u2019ll answer it.\n\n#\n\nStick with a boring stack\n\nBoring technologies are the best for a product that is just started. They\nbecame boring because they have been used again and again by a lot of\ncompanies. And all these companies would not have picked it again and again if\nit wasn\u2019t doing something right.\n\nBoring technologies are often the ones that offer the most stability product\nwise, because the languages and frameworks are mature enough to not dump weird\nunexplained bugs on you, for which exist open issues on Github created two\nmonths ago, staying there with no answers.\n\nThe quirks have been figured out long ago, and all is left is to build\nsomething useful using it.\n\nExamples of such technologies that are considered boring, but they get the job\ndone:\n\n  * PostgreSQL for the database (stay away from MongoDB, although a lot of inexperienced developers push it for all projects. You need a relational database as the core database, you\u2019ll thank me later)\n\n  * Python with Django is considered boring enough (and some people steer away from it because its default philosophy involves templating and refreshing the page when you click something, but you can make more dynamic SPAs with Django too.\n\n  * CSS + SCSS/SASS + a frontend component framework: I see a lot of people going for Tailwind, which I consider to be a shiny tool that doesn\u2019t do well, it just takes too much time to get the right combination of classes while also keeping your codebase sane. I prefer the good ol\u2019 Bootstrap with a layer of SASS customization on top of it.\n\n  * Redis for caching, although in the MVP phase you won\u2019t need it, and if you\u2019re caching things you\u2019re probably prematurely optimizing\n\n  * Containers for deployments. Some people will pick a VPS on which to host the service as a regular service, with a NGINX in front. That\u2019s alright, but I prefer to use containers, as they offer a seamless development experience, and the nicer the development experience is, the faster you can ship.\n\n#\n\nStick with what you already know\n\nOne other good criteria to choose your tech stack for an MVP is to just stick\nwith what you already know.\n\nIf you choose something new, you\u2019ll have to learn its quirks from scratch,\nlearn all the new tooling a new language or framework comes with, and you\u2019ll\nend up using it inefficiently anyway. At least less efficient than you would\nuse the tools that you are already familiar with.\n\nThat\u2019s why I stick with Python, React, Bootstrap and Kubernetes for deployment\n(thank God for managed Kubernetes, although I would definitely have picked\nanother method to launch my containers).\n\nEach developer that has a career definitely has a tech stack they made their\nmoney with so far. So that\u2019s the obvious choice.\n\nOf course, there\u2019s the issue of being specialized in a development niche, and\nlacking the experience with the development areas that are needed to put out a\ncomplete functional product.\n\nIf you are specialized only in backend technologies, then you need to build\nthe skillset for frontend development and infrastructure work. Same if you are\nspecialized in frontend technologies: you need backend and infrastructure.\n\nIn that case, the best choice is of course to pick something boring (see the\nprevious section).\n\n#\n\nWhat if I am not a developer?\n\nWell, then it gets tricky. Building a product requires ... well... building,\nand you have to be resourceful to be able to build something without having\nthe tools of a builder.\n\nFrom here, I see three options:\n\n  * try to put together an MVP using technologies available for people like you. I am talking about no-code tools, but they are somewhat limited in functionality. Alternatively, you need to find a way to deliver value and get paid without building a fully fledged product at all: a lot of non-technical founders start doing what they do as a manually performed service, and when they draw in enough money or interest, they seek funding to hire people to build it, or then partner up with a technical person.\n\n  * pay to build it: although to do it, you need capital, and it\u2019s a risky endeavor if you don\u2019t really know how the development process and deliverables look like. There are freelancers out there that oversell themselves, fail to deliver, or just outright scam. But the good part is that if you do this and find good freelancers to give life to your idea, then you already proved that you have \u201cskin in the game\u201d and will make you appear more serious when pitching this to possible cofounders or investors.\n\n  * partner up with a technical cofounder: although easier said than done, it\u2019s probably the best way to go about it. But to do that, you can\u2019t just go to them with an idea, because they gem bombarded by idea people wanting to access their skill set for cheap or for free. You need to prove to them that you are reliable, did the groundwork, prove interest and prove that you have skin in the game. Check out my other article about finding a technical cofounder.\n\n#\n\nConclusion\n\nIn conclusion, picking the tech stack is a big choice that will shape how you\ndeliver, more importantly: how fast you deliver and the quality of your work.\n\nTo reduce the risk, as a CTO of a tech startup, I advise you to pick something\nboring (which is battle tested, is mature enough and has a lot of resources\navailable online in case you get stuck), or something familiar (the speed of\ndelivery you gain by skipping a whole new learning curve is very valuable in\nthe early days, when you just need to iterate fast and put the product in the\nhands of the customers fast). If you\u2019re not technical, then you have multiple\noptions to get a product going: either build it with no-code tools or by\noffering the value yourself in a more manual way, just to prove some traction\nand get some money in, pay for the development of the product if you have the\nfunds and the managerial expertise or find a technical cofounder to join you.\n\nThanks for reading The Tech Bubble! Subscribe for free to receive new posts\ntwice per week about indie hacking, tech and startups.\n\nShare this post\n\n#### Why the boring tech is the best for starting a startup\n\njointhetechbubble.substack.com\n\nShare\n\nComments\n\nHow to convince technical people to join as a co-founder?\n\nI heard it's difficult for a business oriented person to find a tech savvy co-\nfounder to take care of building the product. But why is that?\n\nApr 16 \u2022\n\nVlad C\u0103lin\n\nShare this post\n\n#### How to convince technical people to join as a co-founder?\n\njointhetechbubble.substack.com\n\nMy first startup attempt\n\nAnd why it failed miserably...\n\nApr 1 \u2022\n\nVlad C\u0103lin\n\nShare this post\n\n#### My first startup attempt\n\njointhetechbubble.substack.com\n\nHow I failed with SpamLabs even before it even started\n\nAnd why I enjoyed it so much.\n\nApr 4 \u2022\n\nVlad C\u0103lin\n\nShare this post\n\n#### How I failed with SpamLabs even before it even started\n\njointhetechbubble.substack.com\n\nReady for more?\n\n\u00a9 2024 Vlad Calin\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
