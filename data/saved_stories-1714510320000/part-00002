{"aid": "40211569", "title": "Malicious Python Code Gains Execution", "url": "https://blog.phylum.io/how-malicious-python-code-gains-execution/", "domain": "phylum.io", "votes": 3, "user": "louislang", "posted_at": "2024-04-30 14:50:35", "comments": 0, "source_title": "Series: How Malicious Python Code Gains Execution", "source_text": "Series: How Malicious Python Code Gains Execution\n\nDiscord Sign Up Free\n\nApr 24, 2024 2 min read Insights and Resources\n\n# Series: How Malicious Python Code Gains Execution\n\nPhoto by Brecht Corbeel / Unsplash\n\nThe primary vector for malicious code running in software developer\nenvironments (e.g., local system, CI/CD runners, production servers, etc.) is\nsoftware dependencies. This is third-party code which often means open-source\nsoftware, also known as running code from strangers on the internet.\n\nThe prized goal for attackers is arbitrary code execution. It\u2019s the stuff high\nCVE scores are made of and often the topic of how vulnerabilities can turn\ninto exploits. It\u2019s the foothold needed to run cryptominers, steal secrets, or\nencrypt data for ransom. It\u2019s no wonder why threat actors want it, but how do\nthey get it? Sutton\u2019s Law makes it obvious why they go after open-source\nsoftware: because executing arbitrary code is easy there.\n\nThis is a series examining the methods malicious Python code gains execution.\nSome of the methods are obvious and some are potentially undiscovered or at\nleast not found in the wild, yet. What they all mostly have in common is the\nreliance on a software dependency in the form of a Python package, which is\nwhere we begin.\n\n  * Python Package Spoofing\n\nThreat modeling is a useful defensive exercise to predict and prevent future\nattacks. By thinking like a malicious actor, we can identify the attack\nsurface, enumerate possible compromise vectors, and neutralize them with\nconsidered countermeasures. As security researchers, we\u2019ll don a hat of a\ndarker color to put ourselves in the right mindset. Certainly not a black hat,\nbut maybe more of a gray thinking cap. The remainder of the series documents\nthese findings.\n\n  * Python Trojan Functions and Imports\n  * Python Package Installation Attacks\n  * Devious Python Build Requirements\n  * (More links will be added here as new posts in the series are published)\n\nPutting our white hat back on, there are countermeasures to protect developers\nfrom these attacks. First, use a lockfile every time an environment is created\nto ensure reproducibility. Then, guard against any changes to that lockfile by\nautomatically monitoring the health of the lockfile and the dependencies\ncontained therein. Finally, don\u2019t allow arbitrary code to run anywhere in your\ndevelopment process.\n\nPhylum can detect, report, and block malicious packages. Other solutions are\nmerely looking for known vulnerabilities and will therefore miss this entire\nrisk domain. Use Phylum to analyze dependencies. Integrations exist to guard\nPRs with a free GitHub app or a GitHub action. There is also a CLI and pre-\ncommit hook for local development, as well as a phylum Python package that can\nbe pip/pipx installed. Additional supported CI platforms include GitLab CI,\nAzure Pipelines, and Bitbucket Pipelines, with more coming.\n\nAt the time of this writing, Phylum offers Python lockfile and manifest\nsupport for pip, pipenv, and poetry. A free community edition is available for\neveryone to automate software supply chain security to block new risks,\nprioritize existing issues, and only use trusted open-source code.\n\nProtect yourself from software supply chain attacks\n\nFree Github App\n\n#### Charles Coggins\n\nSenior Software Engineer, responsible for integrations and author of the\n\"phylum\" Python package. Documentation and quality champion, runner, baseball\nand scout dad, pod-faster, and lover of outdoors.\n\n## Subscribe to our research\n\nKeep up with the latest software supply chain attacks\n\n### You might also like...\n\n## Devious Python Build Requirements\n\nApr 29, 2024\n\n## Python Package Installation Attacks\n\nApr 24, 2024\n\n## Python Trojan Functions and Imports\n\nApr 24, 2024\n\nPhylum \u00a9 2024\n\n", "frontpage": false}
