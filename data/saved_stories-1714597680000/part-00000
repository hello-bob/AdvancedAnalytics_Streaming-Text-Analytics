{"aid": "40224308", "title": "Software Friction", "url": "https://www.hillelwayne.com/post/software-friction/", "domain": "hillelwayne.com", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-05-01 15:05:44", "comments": 0, "source_title": "Software Friction", "source_text": "Software Friction\n\nSkip to Content\n\nHillel Wayne\n\n# Software Friction\n\nPosted on May 01, 2024\n\nIn his book On War, Clausewitz defines friction as the difference between\nmilitary theory and reality:\n\n> Thus, then, in strategy everything is very simple, but not on that account\n> very easy. Everything is very simple in war, but the simplest thing is\n> difficult. These difficulties accumulate and produce a friction, which no\n> man can imagine exactly who has not seen war.\n>\n> As an instance of [friction], take the weather. Here, the fog prevents the\n> enemy from being discovered in time, a battery from firing at the right\n> moment, a report from reaching the general; there, the rain prevents a\n> battalion from arriving, another from reaching in right time, because,\n> instead of three, it had to march perhaps eight hours; the cavalry from\n> charging effectively because it is stuck fast in heavy ground.\n\nEver since reading this, I\u2019ve been seeing \u201cfriction\u201d everywhere in software\ndevelopment:\n\n  * A vendor\u2019s API doesn\u2019t work quite as you thought it did, or it did and then they changed it.\n  * Bugs. Security alerts. A dependency upgrade breaks something.\n  * Someone gets sick. Someone\u2019s kid gets sick. Someone leaves the company. Someone leaves for Burning Man.\n  * The requirements are unclear, or a client changes what they want during development. A client changes what they want after development.\n  * A laptop breaks or gets stolen. Slack goes down for the day.\n  * Tooling breaks. Word changes every font to wingdings. (This is a real thing)\n\nThis list is non-exhaustive and it\u2019s not possible to catalogue all possible\nsources of friction.\n\n### Some Properties of Friction\n\nFriction matters more over large time horizons and large scopes, simply\nbecause more things can go wrong.\n\nFriction compounds with itself: two setbacks are more than twice as bad as one\nsetback. This is because most systems are at least somewhat resilient and can\nadjust itself around some problem, but that makes the next issue harder to\ndeal with.\n\n(This is a factor in the controversial idea of \u201cdon\u2019t deploy on Fridays\u201d. The\nfriction caused by a mistake during deployment, or of needing to doing a\nrollback, would be made much worse by the friction of people going offline for\nthe weekends. The controversy is between people saying \u201cdon\u2019t do this\u201d and\npeople advocating for systemic changes to the process. Either way the goal is\nto make sure friction doesn\u2019t cause problems, it\u2019s a debate over how exactly\nto do this.)\n\nAddressing friction can also create other sources of friction, like if you\nupgrade a dependency to fix a security alert but the new version is subtly\nbackwards incompatible. And then if you\u2019re trying to fix this with a teammate\nwho lives in a different timezone...\n\n## Addressing Friction\n\nFriction is inevitable and impossible to fully remove. I don\u2019t think it\u2019s\npossible to even fully anticipate. But there are things that can be done to\nreduce it, and plans can be made more resilient to it. I don\u2019t have insight\ninto how military planners reduce friction. This is stuff I\u2019ve seen in\nsoftware:\n\nSmaller scopes and shorter iterations\n\n    This is the justification for \u201cagile\u201d over \u201cwaterfall\u201d. When you have short timelines then there\u2019s less room for friction to compound. The more you\u2019re doing and the longer your timeline the more uncertainty you have and the more places things can go wrong. You still have room for friction if you\u2019re doing lots of small sprints back to back, though. Then you\u2019re just running an inefficient marathon.\nMore autonomy\n\n    Friction is the difference between the model and the world, and at a high level you can only see models. If people have enough autonomy to make locally smart decisions, then they can recover from friction more easily. But if people get so much autonomy they isolate, they can make things much worse. I once saw an engineer with a lot of autonomy delete a database that was \u201ctoo slow\u201d.\nRedundancy\n\n    This could be spare equipment in storage, high bus factors, or adding slack to a schedule. Then if something goes wrong you can fix it more quickly, leaving less room for another problem to compound. This comes at the cost of efficiency under normal circumstances, which is why projects naturally drift towards less redundancy.\nBetter planning\n\n    Good planning won\u2019t identify all sources of friction, but planning will identify more sources, and that\u2019s a big benefit. For example, writing formal specifications can expose problems in the design or turn unknown-unknowns into known-unknowns (which you can then study into more detail). This can be the difference between being blindsided by 5 things and being blindsided by 15 things. This is why I\u2019m so bullish on formal methods.\nAutomation\n\n    This is a double-edged sword. On one hand, automating processes leaves less room for people to make mistakes. On the other, automated processes can have their own bugs, which creates their own sources of friction. Also, if the automation runs long enough people will forget how it works or the full scope of what it does, leaving everyone completely unprepared for if it breaks. Automation can come at the cost of experience.\nExperience\n\n    The more problems you\u2019ve encountered, the more problems you will see coming, and the more experience you\u2019ll have recovering from problems. Unfortunately this is something you mostly have to learn the hard way. But one shortcut is...\nGaming\n\n    \n\nOne interesting book on this is the Naval War College Fundamentals of War\nGaming. In it they argue that there\u2019s two purpose to wargaming: gathering\ninformation on how situations can develop, and giving commanders (some)\nexperience in a safe environment. If a trainee learns that \u201cweather can\ndisrupt your plan\u201d in a wargame, they don\u2019t have to learn it with real human\nlives. Similarly, I\u2019d rather practice how to retrieve database backups when\nI\u2019m not desperately trying to restore a dropped table. To my understanding,\nboth security and operations teams use gaming for this reason.\n\n(At the same time, people have to devote time to running participate in games,\nwhich is inefficient in the same way adding redundancy is.)\n\nChecklists and runbooks\n\n    \n\nWays of formalizing tacit knowledge of dealing with particular problems.\n\n### Questions I have about friction\n\nIs it useful to subcategorize sources of friction? Does calling a tooling\nproblem \u201ctechnical\u201d as opposed to \u201csocial\u201d friction do anything useful to us?\n\nHow do other fields handle friction? I asked some people in the construction\nindustry about friction and they recognized the idea but didn\u2019t have a word\nfor it. What about event planners, nurses, military officers?\n\nHow do we find the right balance between \u201cdoing X reduces the effect of\nfriction\u201d and \u201cnot doing X is more efficient right now\u201d?\n\nIs friction important to individuals? Do I benefit from thinking about\nfriction on a project, even if nobody else on my team does?\n\nThanks for Jimmy Koppel for feedback. If you liked this post, come join my\nnewsletter! I write new essays there every week.\n\nI train companies in formal methods, making software development faster,\ncheaper, and safer. Learn more here.\n\nCategories: Programming\n\nTags: Terms\n\nPowered by Buttondown.\n\n\u00a9 2024 Hillel Wayne\n\n", "frontpage": false}
