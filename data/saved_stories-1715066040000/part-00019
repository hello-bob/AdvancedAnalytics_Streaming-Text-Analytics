{"aid": "40279854", "title": "Show HN: The Zrok SDK for Node.js", "url": "https://blog.openziti.io/the-nodejs-zrok-sdk", "domain": "openziti.io", "votes": 1, "user": "rentallect", "posted_at": "2024-05-06 21:45:07", "comments": 0, "source_title": "The NodeJS zrok SDK", "source_text": "The NodeJS zrok SDK\n\n# The NodeJS zrok SDK\n\n## Simple, secure peer-to-peer ingress for your NodeJS applications\n\nCurt Tudor\n\n\u00b7May 6, 2024\u00b7\n\n5 min read\n\nYou may be familiar with zrok, the open-source solution built on OpenZiti,\nwhich makes it very easy to securely share resources over the internet. If you\nare already a zrok fan, that's great news -- Thank you for being part of our\ncommunity!\n\nIf zrok is new to you, please check out this post introducingzrok.\n\nzrok is built to enable developers to seamlessly and securely share their\napplications (we previously released our zrok Golang SDK, and our zrok Python\nSDK). Using just a little code enables you to share your app through zrok's\nrobust network.\n\nToday we are excited to expand our zrok SDK philosophy by introducing a NodeJS\nSDK (available as of zrok 0.4.30), and that is what we'll discuss in this\narticle.\n\nThe package is published as @openziti/zrok\n\nWe will be spinning up a local HTTP server to be served via zrok!\n\nIf you want to follow along you'll need to have a zrok environment set up. If\nyou don't want to self-host you can sign up for a free account at zrok.io.\n\nCheck out the Getting Started guide for more information.\n\n## Expanding into NodeJS\n\nHere is all it takes to spin up a zrok-enabled web server using Express:\n\n    \n    \n    let root = zrok.Load() await zrok.init( root ).catch(( err: Error ) => { console.error(err); return process.exit(1) }); let shr = await zrok.CreateShare(root, new zrok.ShareRequest( zrok.PROXY_BACKEND_MODE, zrok.PRIVATE_SHARE_MODE, \"http-server\", [\"public\"]) ); console.log(`access remotely using: 'zrok access private ${shr.Token}'`) let app = zrok.express( shr.Token ); app.get('/', function(_: Request, res: any){ res.write(`Hello zrok!`) res.end() }); app.listen(undefined, () => { console.log( `private HTTP Server is now listening for incoming requests` ) })\n\nLet's quickly go over what's happening here:\n\nFirst, we use the zrok object to load the root config and initialize, and then\nwe're off to the races.\n\nWe create a private zrok share, and then we call zrok.express using the share\ntoken we just created.\n\nThis zrok.express call spins up a NodeJS Express server, however, the Express\nserver is transparently instrumented by the zrok SDK (and its embedded Ziti\nSDK for NodeJS) to enable the Express web server to \"bind\" (i.e. host) the\nZiti Service represented by the zrok share.\n\nIn other words, the NodeJS Express web server does NOT listen on an open TCP\nport as traditional NodeJS Express servers do (because that's way too\ninsecure).\n\nInstead, a zrok-enabled NodeJS Express server listens ONLY for incoming Ziti\nconnections to the private zrok share (because zero-trust connections are now\nconsidered best practice, and this is how the most robust security is done\nthese days).\n\nThe SIGINT handler at the end just handles a CTRL-C event, and tears down the\nzrok share.\n\nThe above example employs a private share. You can opt to use a public share\nif you like; in that case, you can find it here.\n\nTo expand this example from here you would simply declare any routes your app\nwants to expose and it's just like producing a typical Express server. No\nadditional complications!\n\n## Why Though?\n\nThe primary reason is we want this to be easy.\n\nSharing what you make should be painless. You develop the application -- let\nzrok handle all the security complications.\n\nPlus you can deploy your application anywhere. As long as the environment can\nreach the zrok host controller, it can run wherever you want it to.\n\nIt can live in a container, cloud-hosted, or even run nicely on a home server,\nor dev laptop.\n\n## Coming Attractions (zrok+BrowZer)\n\nSince the above example talks about sharing an Express web server over zrok, I\nwould be remiss if I didn't mention something exciting we will release soon\nthat will alleviate a few friction points.\n\nTo illustrate, today if you want to spin up a web server on your laptop and\nthen share it privately with someone, the person you are sharing it with will\nneed to:\n\n  * download the zrok binary, then\n\n  * execute a specific zrok command (which starts a local HTTP listener), then\n\n  * point their browser at that HTTP listener (typically running at http://127.0.0.1:9191)\n\nThe above technology certainly works in many scenarios, but there are use\ncases where it may not...\n\nFor example, it's possible that the person you are sharing your local web\nserver with is not tech-savvy (e.g. my grandmother) and they can't\nsuccessfully obtain and/or run the zrok commands on their client.\n\nAnother use case is when the remote person can't install new tooling on their\nmachine due to a lack of permission (e.g. IT restrictions). Or they can, but\nthey elect not to.\n\nAnother use case is when you want to share your web app with someone who wants\nto access it on their mobile phone (where zrok binaries simply can't be\ninstalled).\n\nThe above use cases could be supported perfectly if only you could share a\n(magic) URL with the people you want to share your private web server with.\nThis is because every laptop and mobile phone already has a ubiquitous web\nbrowser, so your friends, family, and colleagues already have what they\nneed...except the URL...\n\nSo what's this magic URL, and what makes it \"magic\"?\n\nThe URL you will share with people will resemble this:\nhttps://<SOME_SHARE_TOKEN>/zrok.browzer.cloudziti.io\n\n(SOME_SHARE_TOKEN is produced by your zrok share private command)\n\nOpenZiti BrowZer provides the magic that ties everything together. We are\ncurrently testing this new zrok+BrowZer functionality and we will release it\nsoon.\n\nOnce it has been shipped, we will be back here posting articles that discuss\nall the details, so be sure to subscribe to this blog's newsletter so you\ndon't miss the announcements.\n\n## Moving Forward\n\nMoving forward we want zrok to be as accessible as possible, both in options\nand ease of use. Support for more languages is coming! If you want to talk\nabout languages to support or friction points, please reach out on Discourse!\n\nAlso if you like zrok or OpenZiti and want to support it, we would very much\nappreciate you dropping a star on both Github (zrok) / Github (OpenZiti).\n\nIt means a lot!\n\n## Subscribe to our newsletter\n\nRead articles from OpenZiti Tech Blog directly inside your inbox. Subscribe to\nthe newsletter, and don't miss out.\n\nzrokNode.jsWeb DevelopmentSecurity\n\n### Written by\n\n# Curt Tudor\n\n### Published on\n\n# OpenZiti Tech Blog\n\nDiscussion of OpenZiti, the open source, modern, programmable, network overlay\nand edge components, for application-embedded, zero-trust networking.\n\nDiscussion of OpenZiti, the open source, modern, programmable, network overlay\nand edge components, for application-embedded, zero-trust networking.\n\nShare this\n\nArticle Series\n\n### zrok\n\n1\n\n# Connecting to Local Development Environment from Cloud Hosts with zrok\n\nAll developers have at some point used cloud-provided compute hosts. It's very\neasy, it's very conve...\n\n2\n\n# Introducing zrok\n\nI'm fortunate that I've had the opportunity to work on many interesting\nprojects throughout my caree...\n\n4\n\n# Websockets over zrok\n\nWhere we started If you were using zrok <=v0.3.3 you might have noticed that\nwebsockets weren't exac...\n\n5\n\n# zrok v0.4.0 Released!\n\nToday we celebrate the initial release of zrok v0.4.0. This new release of\nzrok introduces important...\n\n6\n\n# Announcing the zrok Public Beta!\n\nzrok is officially in public beta. Feel free to download the latest release of\nzrok and invite yours...\n\n7\n\n# The zrok SDK\n\nHopefully, you're already familiar with zrok, our open-source solution for\neasy and secure sharing. ...\n\n8\n\n# zrok with the Power of Caddy\n\nIt's that time again... we've just dropped a new zrok release! This time the\nmarquee features are ba...\n\n9\n\n# The zrok OAuth Public Frontend\n\nWith the v0.4.7 release we now support authenticating users of your public\nzrok shares using either ...\n\n10\n\n# zrok Drives (an Early Preview)\n\nIf you've been following my \"office hours\" video series, you know that I've\nbeen mentioning somethin...\n\n11\n\n# zrok frontdoor\n\nzrok frontdoor is the heavy-duty front door to your app or site. It makes your\nwebsite or app availa...\n\n12\n\n# Minecraft Over zrok\n\nIn 2022, we showed you how to run a Minecraft server privately and securely\nusing OpenZiti. Since th...\n\n13\n\n# The zrok Drives CLI Preview\n\nWith the release of v0.4.23, zrok now includes a set of CLI commands that\nsimplifies the management ...\n\n14\n\n# The zrok SOCKS Backend\n\nzrok provides a number of powerful tools for sharing private resources. In\naddition to our multiple ...\n\n15\n\n# zrok Permission Modes\n\nzrok is a powerful platform for sharing. The latest releases of zrok allow you\nto get granular about...\n\n16\n\n# Secure Remote Development with zrok and JetBrains\n\nI took this photo while working remote. Can you guess the location?If you can\nsecure your remote wor...\n\n17\n\n# The NodeJS zrok SDK\n\nYou may be familiar with zrok, the open-source solution built on OpenZiti,\nwhich makes it very easy ...\n\n\u00a92024 OpenZiti Tech Blog\n\nArchive\u00b7Privacy policy\u00b7Terms\n\nWrite on Hashnode\n\nPowered by Hashnode - Home for tech writers and readers\n\n", "frontpage": false}
