{"aid": "40253988", "title": "Pipxu \u2013 A Faster Alternative to Pipx", "url": "https://github.com/bulletmark/pipxu", "domain": "github.com/bulletmark", "votes": 3, "user": "bulletmarker", "posted_at": "2024-05-04 01:09:06", "comments": 0, "source_title": "GitHub - bulletmark/pipxu: Install and Run Python Applications in Isolated Environments using UV", "source_text": "GitHub - bulletmark/pipxu: Install and Run Python Applications in Isolated\nEnvironments using UV\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nbulletmark / pipxu Public\n\n  * Notifications\n  * Fork 1\n  * Star 37\n\nInstall and Run Python Applications in Isolated Environments using UV\n\n37 stars 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# bulletmark/pipxu\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n19 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nbulletmarkImprove installation instructionsMay 1, 2024a14ee93 \u00b7 May 1, 2024May\n1, 2024\n\n## History\n\n65 Commits  \n  \n### doc\n\n|\n\n### doc\n\n| Improve example| Apr 16, 2024  \n  \n### pipxu\n\n|\n\n### pipxu\n\n| Add check for minimum supported UV version| Apr 29, 2024  \n  \n### .flake8\n\n|\n\n### .flake8\n\n| Initial commit| Mar 29, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial commit| Mar 29, 2024  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Import importlib.metadata normally since now >=3.8| Apr 24, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Improve installation instructions| May 1, 2024  \n  \n### pipxu-bootstrap\n\n|\n\n### pipxu-bootstrap\n\n| Improve installation instructions| May 1, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| Should have removed importlib-metadata| Apr 25, 2024  \n  \n## Repository files navigation\n\n## PIPXU - Install and Run Python Applications in Isolated Environments using\nUV\n\npipxu installs Python applications, i.e. Python packages which have one or\nmore executable programs, into independent isolated virtual environments on\nyour system. Each package and it's dependencies are thus insulated from all\nother applications, and from the system Python. pipxu creates links to\napplication executables in a common directory, which you have in your PATH.\nPackages are typically sourced from PyPI, the Python Package Index.\n\npipxu is a re-implementation of most of the functionality of the popular pipx\ntool but is much faster because it uses uv to create and install application\nvirtual environments instead of venv and pip as used by pipx. The pipxu code\nhas been developed completely independently of pipx and is not a fork. For\ncompatibility and ease of migration, the provided commands have the same names\nas pipx. Most commands are implemented, at least for common use cases,\nalthough some command functionality, options, and output are slightly\ndifferent.\n\nThis utility has been developed and tested on Linux but will likely also work\non macOS. It has been briefly tested and seems to run ok on Windows. The\nlatest documentation and code is available at\nhttps://github.com/bulletmark/pipxu.\n\n## Usage\n\nType pipxu or pipxu -h to view the usage summary:\n\n    \n    \n    usage: pipxu [-h] [--uv uv_path] [-m] [--home HOME] [--bin-dir BIN_DIR] [--man-dir MAN_DIR] [--default-python DEFAULT_PYTHON] [-V] {debug,inject,install,list,reinstall,runpip,uninject,uninstall,upgrade,version} ... Install Python applications into isolated virtual environments and create links to the executables in a bin directory for your PATH. Like pipx but uses uv instead of venv + pip. options: -h, --help show this help message and exit --uv uv_path path to uv executable, default=\"uv\" -m, --no-man-pages do not install package man pages --home HOME specify PIPXU_HOME --bin-dir BIN_DIR specify PIPXU_BIN_DIR --man-dir MAN_DIR specify PIPXU_MAN_DIR --default-python DEFAULT_PYTHON path to default python executable, default=\"python3\" -V, --version just print pipxu version and exit Commands: {debug,inject,install,list,reinstall,runpip,uninject,uninstall,upgrade,version} debug Run an installed application using a debugger. inject Install extra packages into an application. install Install one or more Python applications using isolated virtual environments. list List applications installed by this tool. reinstall Reinstall one, or more, or all applications. runpip Run pip with given arguments on virtual environment for the given application. uninject Uninstall extra packages from an application. uninstall Uninstall one, or more, or all applications. upgrade Upgrade one, or more, or all applications. version List installed application versions. Note you can set default starting global options in $HOME/.config/pipxu- flags.conf.\n\nType pipxu <command> -h to see specific help/usage for any individual command:\n\n### Command debug\n\n    \n    \n    usage: pipxu debug [-h] [-e EXECUTABLE] [-d DEBUGGER] package [args ...] Run an installed application using a debugger. Tries to work out your preferred debugger from the standard PYTHONBREAKPOINT environment variable. If not set it defaults to pdb. Or you can set it explicitly with the -d/--debugger option. positional arguments: package installed application name args options and arguments to pass to application, should start with \"--\" options: -h, --help show this help message and exit -e EXECUTABLE, --executable EXECUTABLE executable to run, default is same as \"package\" name -d DEBUGGER, --debugger DEBUGGER explicit debugger package to use\n\n### Command inject\n\n    \n    \n    usage: pipxu inject [-h] [-v] package extras [extras ...] Install extra packages into an application. Note the same --index-url is used as/if specified in the original install. positional arguments: package installed application name extras extra package name[s] to inject/install options: -h, --help show this help message and exit -v, --verbose give more output\n\n### Command install\n\n    \n    \n    usage: pipxu install [-h] [-p PYTHON] [-f] [-e] [-d] [--system-site-packages] [-i INDEX_URL] [-v] package [package ...] Install one or more Python applications using isolated virtual environments. positional arguments: package application[s] to install options: -h, --help show this help message and exit -p PYTHON, --python PYTHON specify explicit python executable path -f, --force recreate any already installed venv -e, --editable install application[s] in editable mode -d, --include-deps include executables from dependencies --system-site-packages allow venv access to system packages -i INDEX_URL, --index-url INDEX_URL base URL of Python Package Index -v, --verbose give more output\n\n### Command list\n\n    \n    \n    usage: pipxu list [-h] [--json] [package ...] List applications installed by this tool. positional arguments: package list the given application[s] only options: -h, --help show this help message and exit --json output json instead\n\n### Command reinstall\n\n    \n    \n    usage: pipxu reinstall [-h] [-p PYTHON | --reset-python] [--system-site-packages | --no-system-site-packages] [-v] [--all] [--skip] [package ...] Reinstall one, or more, or all applications. positional arguments: package application[s] to reinstall (or to skip for --all --skip) options: -h, --help show this help message and exit -p PYTHON, --python PYTHON specify explicit python executable path --reset-python reset any explicit python path to default python --system-site-packages allow venv access to system packages, overrides the per-application setting --no-system-site-packages remove venv access to system packages, overrides the per-application setting -v, --verbose give more output --all reinstall ALL applications --skip skip the specified applications when reinstalling all (only can be specified with --all)\n\n### Command runpip\n\n    \n    \n    usage: pipxu runpip [-h] package [args ...] Run pip with given arguments on virtual environment for the given application. positional arguments: package installed application name args arguments to pass to uv pip, should start with \"--\". options: -h, --help show this help message and exit\n\n### Command uninject\n\n    \n    \n    usage: pipxu uninject [-h] [-v] package extras [extras ...] Uninstall extra packages from an application. positional arguments: package installed application name extras extra package name[s] to uninstall options: -h, --help show this help message and exit -v, --verbose give more output\n\n### Command uninstall\n\n    \n    \n    usage: pipxu uninstall [-h] [-v] [--all] [--skip] [package ...] Uninstall one, or more, or all applications. positional arguments: package application[s] to uninstall (or to skip for --all --skip) options: -h, --help show this help message and exit -v, --verbose give more output --all uninstall ALL applications --skip skip the specified applications when uninstalling all (only can be specified with --all)\n\n### Command upgrade\n\n    \n    \n    usage: pipxu upgrade [-h] [-v] [--all] [--skip] [package ...] Upgrade one, or more, or all applications. positional arguments: package application[s] to upgrade (or to skip for --all --skip) options: -h, --help show this help message and exit -v, --verbose give more output --all upgrade ALL applications --skip skip the specified applications when upgrading all (only can be specified with --all)\n\n### Command version\n\n    \n    \n    usage: pipxu version [-h] [package] List installed application versions. positional arguments: package report specific application and dependent package versions options: -h, --help show this help message and exit\n\n## Installation and Upgrade\n\nPython 3.8 or later is required. Arch Linux users can install pipxu from the\nAUR and skip this section.\n\nThe uv program must be installed (and it's version must be 0.1.33 or later).\nIf uv is not available via your system packages, you can install it by\nfollowing the uv installation instructions for your platform.\n\nE.g. For Linux and macOS:\n\n    \n    \n    curl -LsSf https://astral.sh/uv/install.sh | sh\n\nE.g. For Windows:\n\n    \n    \n    powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\nNote pipxu is on PyPI. With uv installed and on your PATH, run the tiny\nbootstrap shell script which installs pipxu to a temporary directory then runs\npipxu from there to install itself normally:\n\n    \n    \n    $ curl -LsSf https://raw.githubusercontent.com/bulletmark/pipxu/main/pipxu-bootstrap | sh\n\nOr install pipxu using pipx if you prefer (or you are using Windows where\npipxu-bootstrap may not work):\n\n    \n    \n    $ pipx install pipxu $ pipxu install pipxu $ pipx uninstall pipxu\n\nTo upgrade:\n\n    \n    \n    $ pipxu upgrade pipxu\n\nTo uninstall all pipxu installed applications, and then uninstall pipxu\nitself:\n\n    \n    \n    $ pipxu uninstall --all --skip pipxu $ pipxu uninstall pipxu\n\n## Recovery\n\nThe pipxu package also installs the aforementioned pipxu-bootstrap shell\nscript on your system so you can always recover easily from a broken pipxu\ninstallation by manually running that script. E.g. The following may be needed\nafter a major or incompatible Python version upgrade where pipxu may have\nstopped working:\n\n    \n    \n    $ pipxu-bootstrap $ pipxu reinstall --all --skip pipxu\n\nIf you are on Windows, reinstall pipxu using pipx as described in the previous\nsection then pipxu reinstall --all --skip pipxu.\n\n## Comparison to pipx\n\nWhy would you use pipxu instead of pipx? The main reason is to gain a massive\nspeed improvement. pipx uses python -m venv to create and install virtual\nenvironments and pip to install packages whereas pipxu uses uv for these\noperations. uv is a new project written in rust which has a better design than\nvenv + pip, caches aggressively, and is much faster. Also, pipx installs pip\ninto each virtual environment using a shared overlay which it has to update\nperiodically so you sometimes experience pipx seeming to hang for a while\nwhile this update occurs. pipxu just creates a minimal lean virtual\nenvironment and uses uv for all operations so does not need to do this\nperiodic update.\n\nNote that pipx offers some esoteric options and features which pipxu does not\nhave. pipxu caters for the common use cases. pipxu never modifies your PATH.\n\npipxu adds some small but handy features not present in pipx:\n\n  1. For the commands uninstall, reinstall, and upgrade, pipx only allows you to specify one application whereas pipxu allows you to specify one or more applications. To do an operation on all applications, pipx, requires you use a corresponding *-all command, e.g. to upgrade all applications you use upgrade-all. pipxu simply offers a --all option on each of those base commands to do the same thing, thus avoiding the need for the extra *-all commands. Also, pipx also does not offer --skip for all those *-all commands consistently, whereas pipxu does.\n\n  2. You can do pipxu commands on an editable projects (as often used by developers) in the current directory by simply typing \".\" as the package name and this works for all commands. E.g. pipxu uninstall . or pipxu inject . pudb. I.e. pipxu automatically determines the package name associated with the current directory. Note that pipx accepts \".\" for the install command, but not for any others.\n\n  3. For Python developers,pipxu adds a debug command to conveniently run an installed application using a debugger. pipx does not have this command. Read more about the debug command here.\n\n  4. If run as root or with sudo, pipxu installs applications to a global location.\n\n## Environment Variables\n\nType pipxu without any arguments to see usage and the current environment. The\nenvironment is printed at the bottom of the screen output as follows:\n\nE.g. run as my user \"mark\":\n\n    \n    \n    Environment: PIPXU_HOME = /home/mark/.local/share/pipxu PIPXU_BIN_DIR = /home/mark/.local/bin PIPXU_MAN_DIR = /home/mark/.local/share/man PIPXU_DEFAULT_PYTHON = python3 Your PATH contains PIPXU_BIN_DIR (/home/mark/.local/bin).\n\nOr run as root, or with sudo:\n\n    \n    \n    Environment: PIPXU_HOME = /opt/pipxu PIPXU_BIN_DIR = /usr/local/bin PIPXU_MAN_DIR = /usr/local/share/man PIPXU_DEFAULT_PYTHON = python3 WARNING: Your PATH does not contain PIPXU_BIN_DIR (/usr/local/bin).\n\nYou can set those environment variables, or provide them as command line\noptions, to override the defaults if you want. Note, as seen in the output\nabove, pipxu reports if PIPXU_BIN_DIR is included or not in your PATH. To\nensure you can run the applications installed by pipxu, that directory must be\nin your PATH. E.g. for most users on Linux using the default locations, ensure\nthat ~/.local/bin is added to your PATH environment variable.\n\n## Command Default Options\n\nYou can add default global options to a personal configuration file\n~/.config/pipxu-flags.conf. If that file exists then each line of options will\nbe concatenated and automatically prepended to your pipxu command line\narguments. Comments in the file (i.e. # and anything after on a line) are\nignored. Type pipxu to see all supported options.\n\nThe global options: --uv, --no-man-pages, --home, --bin-dir, --man-dir,\n--default-python, are the only sensible candidates to consider setting as\ndefaults.\n\n## Command Line Tab Completion\n\nCommand line shell tab completion is automatically enabled on pipxu commands\nand options using argcomplete. You may need to first (once-only) activate\nargcomplete global completion.\n\n## License\n\nCopyright (C) 2024 Mark Blakeney. This program is distributed under the terms\nof the GNU General Public License. This program is free software: you can\nredistribute it and/or modify it under the terms of the GNU General Public\nLicense as published by the Free Software Foundation, either version 3 of the\nLicense, or any later version. This program is distributed in the hope that it\nwill be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\nPublic License at http://www.gnu.org/licenses/ for more details.\n\n## About\n\nInstall and Run Python Applications in Isolated Environments using UV\n\n### Topics\n\npython virtualenv pip venv uv pipx\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n37 stars\n\n### Watchers\n\n4 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases\n\n19 tags\n\n## Contributors 2\n\n  * bulletmark Mark Blakeney\n  * Nardol Patrick ZAJDA\n\n## Languages\n\n  * Python 98.0%\n  * Makefile 1.1%\n  * Shell 0.9%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
