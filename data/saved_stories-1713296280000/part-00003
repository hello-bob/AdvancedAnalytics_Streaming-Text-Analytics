{"aid": "40051695", "title": "Some thoughts on switching daemons to be socket activated via systemd", "url": "https://utcc.utoronto.ca/~cks/space/blog/linux/SystemdSocketActivationThoughts", "domain": "utcc.utoronto.ca", "votes": 1, "user": "voxadam", "posted_at": "2024-04-16 13:37:50", "comments": 0, "source_title": "Chris's Wiki :: blog/linux/SystemdSocketActivationThoughts", "source_text": "Chris's Wiki :: blog/linux/SystemdSocketActivationThoughts\n\nChris Siebenmann :: CSpace \u00bb blog \u00bb linux \u00bb SystemdSocketActivationThoughts\n\nWelcome, guest.\n\n## Some thoughts on switching daemons to be socket activated via systemd\n\nMarch 31, 2024\n\nSocket activation is a systemd feature for network daemons where systemd is\nresponsible for opening and monitoring the Internet or local socket for a\ndaemon, and it only starts the actual daemon when a client connects. This\nbehavior mimics the venerable inetd but with rather more sophistication and\nfeatures. A number of Linux distributions are a little bit in love with\nswitching various daemons over to being socket activated this way, from the\ntraditional approach where the daemon handles listening for connections itself\n(along with the sockets involved). Sometimes this goes well, and sometimes it\ndoesn't.\n\nThere are a number of advantages to having a service (a daemon) activated by\nsystemd through socket activation instead of running all the time:\n\n  * Services can simplify their startup ordering because their socket is ready (and other services can start trying to talk to it) before the daemon itself is ready. In fact, systemd can reliably know when a socket is 'ready' instead of having to guess when a service has gotten that far in its startup.\n\n  * Heavy-weight daemons don't have to be started until they're actually needed. As a consequence, these daemons and their possibly slow startup don't delay the startup of the overall system.\n\n  * The service (daemon) responsible for handling a particular socket can often be restarted or swapped around without clients having to care.\n\n  * The daemon responsible for the service can shut down after a while if there's no activity, reducing resource usage on the host; since systemd still has the socket active, the service will just get restarted if there's a new client that wants to talk to it.\n\nSocket activated daemons don't have to ever time out and exit on their own;\nthey can hang around until restarted or explicitly stopped if they want to.\nBut it's common to make them exit on their own after a timeout, since this is\nseen as a general benefit. Often this is actually convenient, especially on\ntypical systems. For example, I believe many libvirt daemons exit if they're\nunused; on my Fedora workstations, this means they're often not running (I'm\nusually not running VMs on my desktops).\n\nApart from another systemd unit and the daemon having a deeper involvement\nwith systemd, the downside of socket activation is that your daemon isn't\nimmediately started and sometimes it may not be running. The advantage of\ndaemons immediately starting on boot is that you know right away whether or\nnot they could start, and if they're always running you don't have to worry\nabout whether they'll restart under the system's current conditions (and\nperhaps some updated configuration settings). If the daemon has an expensive\nstartup process, socket activation can mean that you have to wait for that on\nthe first connection (or the first connection after things go idle), as\nsystemd starts the daemon to handle your connection and the daemon goes\nthrough its startup.\n\nSimilarly, having the theoretical possibility for a daemon to exit if it's\nunused for long enough doesn't matter if it will never be unused for that long\nonce it starts. For example, if a daemon has a deactivation timeout of two\nminutes of idleness and your system monitoring connects to it for a health\ncheck every 59 seconds, it's never going to time out (and it's going to be\nstarted very soon after the system boots, when the first post-boot health\ncheck happens).\n\nPS: If you want to see all currently enabled systemd socket activations on\nyour machine, you want 'systemctl list-sockets'. Most of them will be local\n(Unix) sockets.\n\n(7 comments.)\n\nWritten on 31 March 2024.\n\n| \u00ab| The Prometheus scrape interval mistake people keep making  \n---|---  \n| The power of being able to query your servers for unpredictable things| \u00bb  \n---|---  \n  \nThese are my WanderingThoughts (About the blog)\n\nFull index of entries Recent comments\n\nThis is part of CSpace, and is written by ChrisSiebenmann. Mastodon: @cks\nTwitter @thatcks\n\n* * *\n\nCategories: links, linux, programming, python, snark, solaris, spam, sysadmin,\ntech, unix, web Also: (Sub)topics\n\nThis is a DWiki. GettingAround (Help)\n\nPage tools: View Source, Add Comment.\n\nAtom Syndication: Recent Comments.\n\nLast modified: Sun Mar 31 22:33:49 2024 This dinky wiki is brought to you by\nthe Insane Hackers Guild, Python sub-branch.\n\n", "frontpage": false}
