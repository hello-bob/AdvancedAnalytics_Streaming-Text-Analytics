{"aid": "40204690", "title": "Arno's Engram Keyboard Layout", "url": "https://engram.dev/", "domain": "engram.dev", "votes": 1, "user": "luqtas", "posted_at": "2024-04-29 22:07:42", "comments": 0, "source_title": "Arno\u2019s Engram keyboard layout", "source_text": "Arno\u2019s Engram keyboard layout | engram\n\nSkip to the content.\n\n# Arno\u2019s Engram keyboard layout\n\n## Arno's Engram v2.0 (\"Engram\") layout is an optimized key layout for touch\ntyping in English based on ergonomic considerations, with a protocol and\nsoftware for creating new, optimized key layouts in other languages.\n\nView on GitHub\n\n# Arno\u2019s Engram keyboard layout\n\nEngram v2.0 (\u201cEngram\u201d) is a key layout optimized for comfortable and efficient\ntouch typing in English created by Arno Klein, with open source code to create\nother optimized key layouts. You can install the Engram v2.0 layout on\nWindows, macOS, and Linux or try it out online. An article is under review\n(see the preprint for an earlier (and superceded) version (v1.3) with\ndescription).\n\n[See here for the Spanish version, engram-es]\n\nLetters are optimally arranged according to ergonomics factors that promote\nreduction of lateral finger movements and more efficient typing of high-\nfrequency letter pairs. The most common punctuation marks are logically\ngrouped together in the middle columns and numbers are paired with\nmathematical and logic symbols (shown as pairs of default and Shift-key-\naccessed characters).\n\nSee below for a full description and comparisons with other key layouts.\n\n### Standard diagonal keyboard (default and Shift-key layers)\n\n### \u201cErgonomic\u201d orthonormal keyboard (default and Shift-key layers)\n\n    \n    \n    [{ 1| 2= 3~ 4+ 5< 6> 7^ 8& 9% 0* ]} /\\ bB yY oO uU '( \") lL dD wW vV zZ #$ @` cC iI eE aA ,; .: hH tT sS nN qQ gG xX jJ kK -_ ?! rR mM fF pP\n\nLetter frequencies (Norvig, 2012), showing that the Engram layout emphasizes\nkeys in the home row:\n\n    \n    \n    B Y O U L D W V Z C I E A H T S N Q G X J K R M F P 53 59 272 97 145 136 60 38 3 119 270 445 287 180 331 232 258 4 67 8 6 19 224 90 86 76\n\n(c) 2021 Arno Klein, MIT license\n\n# Contents\n\n  1. Why a new key layout?\n  2. How does Engram compare with other key layouts?\n  3. Guiding criteria\n  4. Summary of steps and results\n\n## Why a new key layout?\n\nPersonal history In the future, I hope to include an engaging rationale for\nwhy I took on this challenge. Suffice to say I love solving problems, and I\nhave battled repetitive strain injury ever since I worked on an old DEC\nworkstation at the MIT Media Lab while composing my thesis back in the 1990s.\nI have experimented with a wide variety of human interface technologies over\nthe years \u2013 voice dictation, one-handed keyboard, keyless keyboard, foot\nmouse, and ergonomic keyboards like the Kinesis Advantage and Ergodox\nkeyboards with different key switches. While these technologies can\nsignificantly improve comfort and reduce strain, an optimized key layout can\nonly help when typing on ergonomic or standard keyboards.\n\nI have used different key layouts (Qwerty, Dvorak, Colemak, etc.) for\ncommunications and for writing and programming projects, and have primarily\nrelied on Colemak for the last 10 years. I find that most to all of these key\nlayouts:\n\n  * Demand too much strain on tendons\n\n    * strenuous lateral extension of the index and little fingers\n  * Ignore the ergonomics of the human hand\n\n    * different finger strengths\n    * different finger lengths\n    * natural roundedness of the hand\n    * home row easier than upper row for shorter fingers\n    * home row easier than lower row for longer fingers\n    * ease of little-to-index finger rolls vs. reverse\n  * Over-emphasize alternation between hands and under-emphasize same-hand, different-finger transitions\n\n    * same-row, adjacent finger transitions are easy and comfortable\n    * little-to-index finger rolls are easy and comfortable\n\nWhile I used ergonomic principles outlined below and the accompanying code to\nhelp generate the Engram layout, I also relied on massive bigram frequency\ndata for the English language. if one were to follow the procedure below and\nuse a different set of bigram frequencies for another language or text corpus,\nthey could create a variant of the Engram layout, say \u201cEngram-French\u201d, better\nsuited to the French language.\n\nWhy \u201cEngram\u201d? The name is a pun, referring both to \u201cn-gram\u201d, letter\npermutations and their frequencies that are used to compute the Engram layout,\nand \u201cengram\u201d, or memory trace, the postulated change in neural tissue to\naccount for the persistence of memory, as a nod to my attempt to make this\nlayout easy to remember.\n\n## How does Engram compare with other key layouts?\n\nBelow we compare the Engram layout with different prominent key layouts\n(Colemak, Dvorak, QWERTY, etc.) for some large, representative, publicly\navailable data (all text sources are listed below and available on GitHub).\n\n#### Engram Scoring Model scores (x100) for layouts, based on publicly\navailable text data\n\nEngram scores higher for all text and software sources than all other layouts\naccording to its own scoring model (higher scores are better):\n\nLayout| Google bigrams| Alice| Memento| Tweets_100K| Tweets_20K| Tweets_MASC|\nSpoken_MASC| COCA_blogs| iweb| Monkey| Coder| Rosetta  \n---|---|---|---|---|---|---|---|---|---|---|---|---  \nEngram| 62.48| 61.67| 62.30| 63.03| 60.28| 62.49| 61.56| 62.19| 62.38| 62.23|\n62.51| 62.48  \nHalmak| 62.40| 61.60| 62.23| 62.93| 60.26| 62.43| 61.51| 62.13| 62.31| 62.16|\n62.46| 62.40  \nHieamtsrn| 62.39| 61.64| 62.27| 62.99| 60.27| 62.47| 61.53| 62.16| 62.35|\n62.20| 62.49| 62.39  \nNorman| 62.35| 61.57| 62.20| 62.86| 60.21| 62.39| 61.47| 62.08| 62.27| 62.12|\n62.40| 62.35  \nWorkman| 62.37| 61.59| 62.22| 62.91| 60.23| 62.41| 61.49| 62.10| 62.29| 62.14|\n62.43| 62.37  \nMTGap 2.0| 62.32| 61.59| 62.21| 62.88| 60.22| 62.39| 61.49| 62.09| 62.28|\n62.13| 62.42| 62.32  \nQGMLWB| 62.31| 61.58| 62.21| 62.90| 60.25| 62.40| 61.49| 62.10| 62.29| 62.14|\n62.43| 62.31  \nColemak Mod-DH| 62.36| 61.60| 62.22| 62.90| 60.26| 62.41| 61.49| 62.12| 62.30|\n62.16| 62.44| 62.36  \nColemak| 62.36| 61.58| 62.20| 62.89| 60.25| 62.40| 61.48| 62.10| 62.29| 62.14|\n62.43| 62.36  \nAsset| 62.34| 61.56| 62.18| 62.86| 60.25| 62.37| 61.46| 62.07| 62.25| 62.10|\n62.39| 62.34  \nCapewell-Dvorak| 62.29| 61.56| 62.17| 62.86| 60.20| 62.36| 61.47| 62.06|\n62.24| 62.10| 62.37| 62.29  \nKlausler| 62.34| 61.58| 62.20| 62.89| 60.25| 62.39| 61.48| 62.09| 62.27|\n62.12| 62.41| 62.34  \nDvorak| 62.31| 61.56| 62.17| 62.85| 60.23| 62.35| 61.46| 62.06| 62.24| 62.09|\n62.35| 62.31  \nQWERTY| 62.19| 61.49| 62.08| 62.72| 60.17| 62.25| 61.39| 61.96| 62.13| 61.99|\n62.25| 62.19  \n  \nKeyboard Layout Analyzer (KLA) scores for the same text sources\n\n> The optimal layout score is based on a weighted calculation that factors in\n> the distance your fingers moved (33%), how often you use particular fingers\n> (33%), and how often you switch fingers and hands while typing (34%).\n\nEngram scores highest for 7 of the 9 and second highest for 2 of the 9 text\nsources; Engram scores third and fourth highest for the two software sources,\n\u201cCoder\u201d and \u201cRosetta\u201d (higher scores are better):\n\nLayout| Alice in Wonderland| Memento screenplay| 100K tweets| 20K tweets| MASC\ntweets| MASC spoken| COCA blogs| iweb| Monkey| Coder| Rosetta  \n---|---|---|---|---|---|---|---|---|---|---|---  \nEngram| 70.13| 57.16| 64.64| 58.58| 60.24| 64.39| 69.66| 68.25| 67.66| 46.81|\n47.69  \nHalmak| 66.25| 55.03| 60.86| 55.53| 57.13| 62.32| 67.29| 65.50| 64.75| 45.68|\n47.60  \nHieamtsrn| 69.43| 56.75| 64.40| 58.95| 60.47| 64.33| 69.93| 69.15| 68.30|\n46.01| 46.48  \nColemak Mod-DH| 65.74| 54.91| 60.75| 54.94| 57.15| 61.29| 67.12| 65.98| 64.85|\n47.35| 48.50  \nNorman| 62.76| 52.33| 57.43| 53.24| 53.90| 59.97| 62.80| 60.90| 59.82| 43.76|\n46.01  \nWorkman| 64.78| 54.29| 59.98| 55.81| 56.25| 61.34| 65.27| 63.76| 62.90| 45.33|\n47.76  \nMTGAP 2.0| 66.13| 53.78| 59.87| 55.30| 55.81| 60.32| 65.68| 63.81| 62.74|\n45.38| 44.34  \nQGMLWB| 65.45| 54.07| 60.51| 56.05| 56.90| 62.23| 66.26| 64.76| 63.91| 46.38|\n45.72  \nColemak| 65.83| 54.94| 60.67| 54.97| 57.04| 61.36| 67.14| 66.01| 64.91| 47.30|\n48.65  \nAsset| 64.60| 53.84| 58.66| 54.72| 55.35| 60.81| 64.71| 63.17| 62.44| 45.54|\n47.52  \nCapewell-Dvorak| 66.94| 55.66| 62.14| 56.85| 57.99| 62.83| 66.95| 65.23|\n64.70| 45.30| 45.62  \nKlausler| 68.24| 59.91| 62.57| 56.45| 58.34| 64.04| 68.34| 66.89| 66.31|\n46.83| 45.66  \nDvorak| 65.86| 58.18| 60.93| 55.56| 56.59| 62.75| 66.64| 64.87| 64.26| 45.46|\n45.55  \nQWERTY| 53.06| 43.74| 48.28| 44.99| 44.59| 51.79| 52.31| 50.19| 49.18| 38.46|\n39.89  \n  \n#### Keyboard Layout Analyzer consecutive same-finger key presses\n\nKLA (and other) distance measures may not accurately reflect natural typing,\nso below is a more reliable measure of one source of effort and strain \u2013 the\ntally of consecutive key presses with the same finger for different keys.\nEngram scores lowest for 6 of the 11 texts, second lowest for two texts, and\nthird or fifth lowest for three texts, two of which are software text sources\n(lower scores are better):\n\nKLA (and other) distance measures may not accurately reflect natural typing,\nso below is a more reliable measure of one source of effort and strain \u2013 the\ntally of consecutive key presses with the same finger for different keys.\nEngram scores lowest for 6 of the 9 and second or third lowest for 3 of the 9\ntext sources, and third or fifth lowest for the two software text sources\n(lower scores are better):\n\nLayout| Alice| Memento| Tweets_100K| Tweets_20K| Tweets_MASC| Spoken_MASC|\nCOCA_blogs| iweb| Monkey| Coder| Rosetta  \n---|---|---|---|---|---|---|---|---|---|---|---  \nEngram| 216| 11476| 320406| 120286| 7728| 3514| 137290| 1064640| 37534|\n125798| 5822  \nHalmak| 498| 13640| 484702| 170064| 11456| 5742| 268246| 2029634| 68858|\n144790| 5392  \nHieamtsrn| 244| 12096| 311000| 119490| 8316| 3192| 155674| 1100116| 40882|\n158698| 7324  \nNorman| 938| 20012| 721602| 213890| 16014| 9022| 595168| 3885282| 135844|\n179752| 7402  \nWorkman| 550| 13086| 451280| 136692| 10698| 6156| 287622| 1975564| 71150|\n132526| 5550  \nMTGap 2.0| 226| 14550| 397690| 139130| 10386| 6252| 176724| 1532844| 58144|\n138484| 7272  \nQGMLWB| 812| 17820| 637788| 189700| 14364| 7838| 456442| 3027530| 100750|\n149366| 8062  \nColemak Mod-DH| 362| 10960| 352578| 151736| 9298| 4644| 153984| 1233770|\n47438| 117842| 5328  \nColemak| 362| 10960| 352578| 151736| 9298| 4644| 153984| 1233770| 47438|\n117842| 5328  \nAsset| 520| 12519| 519018| 155246| 11802| 5664| 332860| 2269342| 77406|\n140886| 6020  \nCapewell-Dvorak| 556| 14226| 501178| 163878| 12214| 6816| 335056| 2391416|\n78152| 151194| 9008  \nKlausler| 408| 14734| 455658| 174998| 11410| 5212| 257878| 1794604| 59566|\n135782| 7444  \nDvorak| 516| 13970| 492604| 171488| 12208| 5912| 263018| 1993346| 64994|\n142084| 6484  \n  \n#### Inward roll frequencies\n\nHere we tally the number of bigrams (in billions of instances from Norvig\u2019s\nanalysis of Google data) that engage inward rolls (little-to-index sequences),\nwithin the four columns of one hand, or any column across two hands. Engram\nscores second highest for 32 keys and highest for 24 keys, where the latter\nensures that we are comparing Engram\u2019s letters with letters in other layouts\n(higher scores are better):\n\nTotal inward roll frequency in billions\n\n    \n    \n    Layout 32 / 24 keys Engram: 4.64 / 4.51 Halmak: 4.59 / 4.25 Hieamtsrn: 4.69 / 4.16 Norman: 3.99 / 3.61 Workman: 4.16 / 3.63 MTGap 2.0: 3.96 / 3.58 QGMLWB: 4.36 / 2.81 Colemak Mod-DH: 4.15 / 3.51 Colemak: 4.17 / 3.16 Asset: 4.03 / 3.05 Capewell-Dvorak: 4.39 / 3.66 Klausler: 4.42 / 3.52 Dvorak: 4.40 / 3.20 QWERTY: 3.62 / 2.13\n\nLayout| Year| Website  \n---|---|---  \nEngram| 2021| https://engram.dev  \nHalmak 2.2| 2016| https://github.com/MadRabbit/halmak  \nHieamtsrn| 2014| https://mathematicalmulticore.wordpress.com/the-keyboard-\nlayout-project/#comment-4976  \nColemak Mod-DH| 2014| https://colemakmods.github.io/mod-dh/  \nNorman| 2013| https://normanlayout.info/  \nWorkman| 2010| https://workmanlayout.org/  \nMTGAP 2.0| 2010|\nhttps://mathematicalmulticore.wordpress.com/2010/06/21/mtgaps-keyboard-\nlayout-2-0/  \nQGMLWB| 2009| http://mkweb.bcgsc.ca/carpalx/?full_optimization  \nColemak| 2006| https://colemak.com/  \nAsset| 2006| http://millikeys.sourceforge.net/asset/  \nCapewell-Dvorak| 2004|\nhttp://michaelcapewell.com/projects/keyboard/layout_capewell-dvorak.htm  \nKlausler| 2002|\nhttps://web.archive.org/web/20031001163722/http://klausler.com/evolved.html  \nDvorak| 1936| https://en.wikipedia.org/wiki/Dvorak_keyboard_layout  \nQWERTY| 1873| https://en.wikipedia.org/wiki/QWERTY  \nText source| Information  \n---|---  \n\u201cAlice in Wonderland\u201d| Alice in Wonderland (Ch.1)  \n\u201cMemento screenplay\u201d| Memento screenplay  \n\u201c100K tweets\u201d| 100,000 tweets from: Sentiment140 dataset training data  \n\u201c20K tweets\u201d| 20,000 tweets from Gender Classifier Data  \n\u201cMASC tweets\u201d| MASC tweets (cleaned of html markup)  \n\u201cMASC spoken\u201d| MASC spoken transcripts (phone and face-to-face: 25,783 words)  \n\u201cCOCA blogs\u201d| Corpus of Contemporary American English blog samples  \n\u201cRosetta\u201d| \u201cTower of Hanoi\u201d (programming languages A-Z from Rosetta Code)  \n\u201cMonkey text\u201d| Ian Douglas\u2019s English-generated monkey0-7.txt corpus  \n\u201cCoder text\u201d| Ian Douglas\u2019s software-generated coder0-7.txt corpus  \n\u201ciweb cleaned corpus\u201d| First 150,000 lines of Shai Coleman\u2019s iweb-corpus-\nsamples-cleaned.txt  \n  \nReference for Monkey and Coder texts: Douglas, Ian. (2021, March 28). Keyboard\nLayout Analysis: Creating the Corpus, Bigram Chains, and Shakespeare\u2019s Monkeys\n(Version 1.0.0). Zenodo. http://doi.org/10.5281/zenodo.4642460\n\n## Guiding criteria\n\n    \n    \n    1. Assign letters to keys that don't require lateral finger movements. 2. Promote alternating between hands over uncomfortable same-hand transitions. 3. Assign the most common letters to the most comfortable keys. 4. Arrange letters so that more frequent bigrams are easier to type. 5. Promote little-to-index-finger roll-ins over index-to-little-finger roll-outs. 6. Balance finger loads according to their relative strength. 7. Avoid stretching shorter fingers up and longer fingers down. 8. Avoid using the same finger. 9. Avoid skipping over the home row. 10. Assign the most common punctuation to keys in the middle of the keyboard. 11. Assign easy-to-remember symbols to the Shift-number keys.\n\n### Factors used to compute the Engram layout\n\n  * N-gram letter frequencies\n\nPeter Norvig\u2019s analysis of data from Google\u2019s book scanning project\n\n  * Flow factors (transitions between ordered key pairs) These factors are influenced by Dvorak\u2019s 11 criteria (1936).\n\n## Summary of steps and results\n\nWe will assign letters to keys by choosing the arrangement with the highest\nscore according to our scoring model. However, there are over four hundred\nseptillion, or four hundred trillion trillion (26! =\n403,291,461,126,605,635,584,000,000, or 4.032914611 E+26) possible\narrangements of 26 letters (24! = 6.204484017 E+23), so we will arrange the\nletters in four steps, based on ergonomics principles. These consist of (Step\n1) assigning the eight most frequent letters to different keys, optimizing\nassignment of the remaining (Step 2) eight most frequent letters, and (Step 3)\neight least frequent letters (besides Z and Q), and (Step 4) exchanging\nletters.\n\n### Step 1: Define the shape of the key layout to minimize lateral finger\nmovements\n\nWe will assign 24 letters to 8 columns of keys separated by two middle columns\nreserved for punctuation. These 8 columns require no lateral finger movements\nwhen touch typing, since there is one column per finger. The most comfortable\nkeys include the left and right home rows (keys 5-8 and 17-20), the top-center\nkeys (2,3 and 14,15) that allow the longer middle and ring fingers to uncurl\nupwards, as well as the bottom corner keys (9,12 and 21,24) that allow the\nshorter fingers to curl downwards. We will assign the two least frequent\nletters, Z and Q (or J), to the two hardest-to-reach keys lying outside the\n24-key columns in the upper right (25 and 26):\n\n    \n    \n    Left: Right: 1 2 3 4 13 14 15 16 25 5 6 7 8 17 18 19 20 26 9 10 11 12 21 22 23 24\n\nWe will consider the most comfortable keys to be those typed by either hand on\nthe home row, by the ring and middle finger above the home row, and by the\nindex and little finger below the home row, with a preference for the\nstrongest (index and middle) fingers:\n\n    \n    \n    - 2 3 - - 14 15 - 5 6 7 8 17 18 19 20 9 - - 12 21 - - 24\n\n### Step 2: Arrange the most frequent letters based on comfort and bigram\nfrequencies\n\nIn prior experiments using the methods below, all vowels consistently\nautomatically clustered together. Below, we will arrange vowels on one side\nand the most frequent consonants to the other side to encourage balance and\nalternation across hands. Since aside from the letters Z and Q there is\nsymmetry across left and right sides, we will decide later which side the\nvowels and which side the most frequent consonants should go.\n\n#### Vowels\n\nE, T, A, O, I, N, S, R, H, L, D, C, U, M, F, P, G, W, Y, B, V, K, X, J, Q, Z\n\nThe highest frequency bigrams that contain two vowels are listed below in\nbold, with more than 10 billion instances in Peter Norvig\u2019s analysis of Google\ndata:\n\nOU, IO, EA, IE, AI, IA, EI, UE, UA, AU, UI, OI, EO, OA, OE\n\n    \n    \n    OU 24,531,132,241 IO 23,542,263,265 EA 19,403,941,063 IE 10,845,731,320 AI 8,922,759,715 IA 8,072,199,471 EI 5,169,898,489 UE 4,158,448,570 UA 3,844,138,094 AU 3,356,322,923 UI 2,852,182,384 OI 2,474,275,212 EO 2,044,268,477 OA 1,620,913,259 OE 1,089,254,517\n\nWe will assign the most frequent vowels with over 100 billion instances in\nNorvig\u2019s analysis (E=445,A=331,O=272,I=270) to four of the six most\ncomfortable keys on the left side of the keyboard (keys 2,3,5,6,7,8). We will\nassign the letter E, the most frequent in the English language, to either of\nthe strongest (index and middle) fingers on the home row, and assign the other\nthree vowels such that (1) the home row keys typed by the index and middle\nfingers are not left vacant, and any top-frequency bigram (more than 10\nbillion instances in Norvig\u2019s analysis) (2) does not use the same finger and\n(3) reads from left to right (ex: EA, not AE) for ease of typing (inward roll\nfrom little to index finger vs. outward roll from index to little finger).\nThese constraints lead to three arrangements of the four vowels:\n\n    \n    \n    - - O - - - O - - - - - - I E A I - E A I O E A - - - - - - - - - - - -\n\n#### Consonants\n\nOn the right side of the keyboard, we will assign four of the five most\nfrequent consonants (with over 5% or 150 billion instances in Norvig\u2019s\nanalysis: T=331, N=258, S=232, R=224, and H=180) to the four home row keys. We\nwill assign the letter T, the most frequent consonant in the English language,\nto either of the strongest (index and middle) fingers on the home row. As with\nthe left side, letters are placed so that top-frequency bigrams read from\nright to left (ex: HT, not TH) for ease of typing. The top-frequency bigrams\n(more than 10 billion instances in Norvig\u2019s analysis) include: TH, ND, ST, NT,\nCH, NS, CT, TR, RS, NC, and RT (below 10 billion instances these bigrams start\nto occur in reverse, such as RT and TS):\n\n    \n    \n    TH 100,272,945,963 3.56% ND 38,129,777,631 1.35% ST 29,704,461,829 1.05% NT 29,359,771,944 1.04% CH 16,854,985,236 0.60% NS 14,350,320,288 CT 12,997,849,406 TR 12,006,693,396 RS 11,180,732,354 NC 11,722,631,112 RT 10,198,055,461\n\nThe above constraints lead to five arrangements of the consonants:\n\n    \n    \n    - - - - - - - - - - - - - - - - - - - - R T S N H T S N H T S R H T N R T S N R - - - - - - - - - - - - - - - - - - - -\n\nWe will assign the fifth consonant to a vacant key on the left home row if\nthere is a vacancy, otherwise to the key below the right index finger (any\nother assignment requires the same finger to type a high-frequency bigram).\nThe resulting 20 initial layouts, each with 15 unassigned keys, are\nrepresented below with the three rows on the left and right side of the\nkeyboard as a linear string of letters, with unassigned keys denoted by \u201c-\u201d.\n\n    \n    \n    --O- HIEA ---- ---- RTSN ---- --O- RIEA ---- ---- HTSN ---- --O- NIEA ---- ---- HTSR ---- --O- SIEA ---- ---- HTNR ---- --O- IHEA ---- ---- RTSN ---- --O- IREA ---- ---- HTSN ---- --O- INEA ---- ---- HTSR ---- --O- ISEA ---- ---- HTNR ---- --O- -IEA ---- ---- RTSN H--- --O- -IEA ---- ---- HTSN R--- --O- -IEA ---- ---- HTSR N--- --O- I-EA ---- ---- RTSN H--- --O- I-EA ---- ---- HTSN R--- --O- I-EA ---- ---- HTSR N--- ---- IOEA ---- ---- RTSN H--- ---- IOEA ---- ---- HTSN R--- ---- IOEA ---- ---- HTSR N--- --O- HIEA ---- ---- TSNR ---- --O- IHEA ---- ---- TSNR ----\n\n### Step 3: Optimize assignment of the remaining letters\n\nWe want to assign letters to the 17 unassigned keys in each of the above 20\nlayouts based on our scoring model. That would mean scoring all possible\narrangements for each layout and choosing the arrangement with the highest\nscore, but since there are over 355 trillion (17!) possible ways of arranging\n17 letters, we will break up the assignment into two stages for the most\nfrequent and least frequent remaining letters.\n\n#### Most frequent letters\n\nWe will compute scores for every possible arrangement of the seven most\nfrequent of the remaining letters (in bold below) assigned to vacancies among\nthe most comfortable sixteen keys.\n\nE, T, A, O, I, N, S, R, H, L, D, C, U, M, F, P, G, W, Y, B, V, K, X, J, Q, Z\n\n    \n    \n    Left: Right: - 2 3 - - 14 15 - 5 6 7 8 17 18 19 20 9 - - 12 21 - - 24\n\nSince there are 5,040 (7!) possible combinations of eight letters for each of\nthe 21 layouts, we need to score and evaluate 105,840 layouts. To score each\narrangement of letters, we construct a frequency matrix where we multiply a\nmatrix containing the frequency of each ordered pair of letters (bigram) by\nour flow and strength matrices to compute a score.\n\n### Least frequent letters\n\nNext we will compute scores for every possible (40,320 = 8!) arrangement of\nthe least frequent eight letters (in bold below, besides Z and Q) in the\nremaining keys, after substituting in the 21 results of the above for an\nadditional 846,720 layouts:\n\nE, T, A, O, I, N, S, R, H, L, D, C, U, M, F, P, G, W, Y, B, V, K, X, J, Q, Z\n\n    \n    \n    Left: Right: 1 - - 4 13 - - 16 - - - - - - - - - 10 11 - - 22 23 -\n\n#### Further optimize layouts by exchanging more letters\n\nIf we relax the above fixed initializations and permit further exchange of\nletters, then we can search for even higher-scoring layouts. As a final\noptimization step we exchange letters, eight keys at a time (8! = 40,320)\nselected twice in 14 different ways, in each of the above 21 layouts, to score\na total of 23,708,160 more combinations. We allow the following keys to\nexchange letters:\n\n    \n    \n    1. Top rows 2. Bottom rows 3. Top and bottom rows on the right side 4. Top and bottom rows on the left side 5. Top right and bottom left rows 6. Top left and bottom right rows 7. Center of the top and bottom rows on both sides 8. The eight corners 9. Left half of the top and bottom rows on both sides 10. Right half of the top and bottom rows on both sides 11. Left half of non-home rows on the left and right half of the same rows on the right 12. Right half of non-home rows on the left and left half of the same rows on the right 13. Top center and lower sides 14. Top sides and lower center 15. Repeat 1-14\n\n### Engram Scoring Model\n\nOur optimization algorithm finds every permutation of a given set of letters,\nmaps these letter permutations to a set of keys, and ranks these letter-key\nmappings according to a score reflecting ease of typing key pairs and\nfrequency of letter pairs (bigrams). The score is the average of the scores\nfor all possible bigrams in this arrangement. The score for each bigram is a\nproduct of the frequency of occurrence of that bigram, the frequency of each\nof the bigram\u2019s characters, and flow, strength (and optional speed) factors\nfor the key pair.\n\n#### Factors to penalize strenuous key transitions\n\nDirection:\n\n    \n    \n    - outward = 0.9: outward roll of fingers from the index to little finger (same hand)\n\nDexterity:\n\n    \n    \n    - side_above_3away = 0.9 - index and little finger type two keys, one or more rows apart (same hand) - side_above_2away = 0.9^2 = 0.81 - index finger types key a row or two above ring finger key, or - little finger types key a row or two above middle finger key (same hand) - side_above_1away = 0.9^3 = 0.729 - index finger types key a row or two above middle finger key, or - little finger types key a row or two above ring finger key (same hand) - middle_above_ring = 0.9 - middle finger types key a row or two above ring finger key (same hand) - ring_above_middle = 0.9^3 = 0.729 - ring finger types key a row or two above middle finger key (same hand) - lateral = 0.9 - lateral movement of (index or little) finger outside of 8 vertical columns\n\nDistance:\n\n    \n    \n    - skip_row_3away = 0.9 - index and little fingers type two keys that skip over home row (same hand) - (e.g., one on bottom row, the other on top row) - skip_row_2away = 0.9^3 = 0.729 - little and middle or index and ring fingers type two keys that skip over home row (same hand) - skip_row_1away = 0.9^5 = 0.59049 - little and ring or middle and index fingers type two keys that skip over home row (same hand)\n\nRepetition:\n\n    \n    \n    - skip_row_0away = 0.9^4 = 0.6561 - same finger types two keys that skip over home row - same_finger = 0.9^5 = 0.59049 - use same finger again for a different key - cannot accompany outward, side_above, or adjacent_shorter_above\n\nStrength: Accounted for by the strength matrix (minimum value for the little\nfinger = 0.9)\n\n### Step 4: Evaluate winner against other optimized layouts\n\nAfter assigning letters Z and Q to upper right keys outside of the home blocks\nand testing left/right side swap of all letters, the winning layout is:\n\n    \n    \n    B Y O U L D W V Z C I E A H T S N Q G X J K R M F P\n\nWe ran tests on the winning layout:\n\n    \n    \n    1. Evaluate optimized layouts using interkey speed estimates 2. Evaluate variants of the candidate winner using interkey speed estimates 3. Test sensitivity of the candidate winner to the scoring parameters\n\nFor test 1, we rescored all of the 20 top-scoring layouts optimized from the\n20 initialized layouts, and replaced the factor matrix with the inter-key\nspeed matrix. The same two layouts that tied for first place do so again.\n\nFor test 2, we rescored all of the 5,040 variants of the candidate winner that\nwere tied for first place, replacing the factor matrix with the interkey speed\nmatrix. The candidate winner scored highest.\n\nFor test 3, we ran a test on the variants of the candidate winner layout to\nsee how robust they are to removal of scoring parameters. We removed each of\nthe 11 scoring parameters one by one and ranked the new scores for the\nvariants. The candidate winner scored highest for 8 of the 11 cases, and\nsecond highest for two other cases, demonstrating that this layout is not\nsensitive to individual parameters.\n\n### Step 5. Arrange non-letter characters in easy-to-remember places\n\nNow that we have all 26 letters accounted for, we turn our attention to non-\nletter characters, taking into account frequency of punctuation and ease of\nrecall.\n\n### Frequency of punctuation marks\n\n  * Statistical values of punctuation frequency in 20 English-speaking countries (Table 1): Sun, Kun & Wang, Rong. (2018). Frequency Distributions of Punctuation Marks in English: Evidence from Large-scale Corpora. English Today. 10.1017/S0266078418000512. https://www.researchgate.net/publication/328512136_Frequency_Distributions_of_Punctuation_Marks_in_English_Evidence_from_Large-scale_Corpora \u201cfrequency of punctuation marks attested for twenty English-speaking countries and regions... The data were acquired through GloWbE.\u201d \u201cThe corpus of GloWbE (2013) is a large English corpus collecting international English from the internet, containing about 1.9 billion words of text from twenty different countries. For further information on the corpora used, see https://corpus.byu.edu/.\u201d\n\n  * Google N-grams and Twitter analysis: \u201cPunctuation Input on Touchscreen Keyboards: Analyzing Frequency of Use and Costs\u201d S Malik, L Findlater - College Park: The Human-Computer Interaction Lab. 2013 https://www.cs.umd.edu/sites/default/files/scholarly_papers/Malik.pdf \u201cthe Twitter corpora included substantially higher punctuation use than the Google corpus, comprising 7.5% of characters in the mobile tweets and 7.6% in desktop versus only 4.4%... With the Google corpus,only 6 punctuation symbols (. -\u2019 ( ) \u201c) appeared more frequently than [q]\u201d\n\n  * \u201cFrequencies for English Punctuation Marks\u201d by Vivian Cook http://www.viviancook.uk/Punctuation/PunctFigs.htm \u201cBased on a writing system corpus some 459 thousand words long. This includes three novels of different types (276 thousand words), selections of articles from two newspapers (55 thousand), one bureaucratic report (94 thousand), and assorted academic papers on language topics (34 thousand). More information is in Cook, V.J. (2013) \u2018Standard punctuation and the punctuation of the street\u2019 in M. Pawlak and L. Aronin (eds.), Essential Topics in Applied Linguistics and Multilingualism, Springer International Publishing Switzerland (2013), 267-290\u201d\n\n  * \u201cA Statistical Study of Current Usage in Punctuation\u201d: Ruhlen, H., & Pressey, S. (1924). A Statistical Study of Current Usage in Punctuation. The English Journal, 13(5), 325-331. doi:10.2307/802253\n\n  * \u201cComputer Languages Character Frequency\u201d by Xah Lee. Date: 2013-05-23. Last updated: 2020-06-29. http://xahlee.info/comp/computer_language_char_distribution.html NOTE: biased toward C (19.8%) and Py (18.5%), which have high use of \u201c_\u201d.\n\nFrequency:\n\n    \n    \n    Sun: Malik: Ruhlen: Cook: Xah: /1M N-gram % /10,000 /1,000 All% JS% Py% . 42840.02 1.151 535 65.3 6.6 9.4 10.3 , 44189.96 556 61.6 5.8 8.9 7.5 \" 2.284 44 26.7 3.9 1.6 6.2 ' 2980.35 0.200 40 24.3 4.4 4.0 8.6 - 9529.78 0.217 21 15.3 4.1 1.9 3.0 () 4500.81 0.140 7 7.4 9.8 8.1 ; 1355.22 0.096 22 3.2 3.8 8.6 z 0.09 - - : 3221.82 0.087 11 3.4 3.5 2.8 4.7 ? 4154.78 0.032 14 5.6 0.3 / 0.019 4.0 4.9 1.1 ! 2057.22 0.013 3 3.3 0.4 _ 0.001 11.0 2.9 10.5\n\n### Add punctuation keys and number keys\n\nWe will assign the most frequent punctuation according to Sun, et al (2018) to\nthe six keys in the middle two columns: . , \u201c \u2018 - ? ; : () ! _\n\n    \n    \n    B Y O U ' \" L D W V Z C I E A , . H T S N Q G X J K - ? R M F P\n\nWe will use the Shift key to group similar punctuation marks (separating and\njoining marks in the left middle column and closing marks in the right middle\ncolumn):\n\n    \n    \n    B Y O U '( \") L D W V Z #$ @` C I E A ,; .: H T S N Q G X J K -_ ?! R M F P\n\nSeparating marks (left): The comma separates text in lists; the semicolon can\nbe used in place of the comma to separate items in a list (especially if these\nitems contain commas); open parenthesis sets off an explanatory word, phrase,\nor sentence.\n\nJoining marks (left): The apostrophe joins words as contractions; the hyphen\njoins words as compounds; the underscore joins words in cases where whitespace\ncharacters are not permitted (such as in variables or file names).\n\nClosing marks (right): A sentence usually ends with a period, question mark,\nor exclamation mark. The colon ends one statement but precedes the following:\nan explanation, quotation, list, etc. Double quotes and close parenthesis\ncloses a word, clause, or sentence separated by an open parenthesis.\n\nNumber keys: The numbers are flanked to the left and right by [square\nbrackets], and {curly brackets} accessed by the Shift key. Each of the numbers\nis paired with a mathematical or logic symbol accessed by the Shift key:\n\n    \n    \n    { | = ~ + < > ^ & % * } \\ [ 1 2 3 4 5 6 7 8 9 0 ] / 1: | (vertical bar or \"pipe\" represents the logical OR operator: 1 stroke, looks like the number one) 2: = (equal: 2 strokes, like the Chinese character for \"2\") 3: ~ (tilde: \"almost equal\", often written with 3 strokes, like the Chinese character for \"3\") 4: + (plus: has four quadrants; resembles \"4\") 5 & 6: < > (\"less/greater than\"; these angle brackets are directly above the other bracket keys) 7: ^ (caret for logical XOR operator as well as exponentiation; resembles \"7\") 8: & (ampersand: logical AND operator; resembles \"8\") 9: % (percent: related to division; resembles \"9\") 0: * (asterisk: for multiplication; resembles \"0\")\n\nThe three remaining keys in many common keyboards (flanking the upper right\nhand corner Backspace key) are displaced in special keyboards, such as the\nKinesis Advantage and Ergodox. For the top right key, we will assign the\nforward slash and backslash: / \\\\. For the remaining two keys, we will assign\ntwo symbols that in modern usage have significance in social media: the\nhash/pound sign and the \u201cat sign\u201d. The hash or hashtag identifies digital\ncontent on a specific topic (the Shift key accesses the dollar sign). The \u201cat\nsign\u201d identifies a location or affiliation (such as in email addresses) and\nacts as a \u201chandle\u201d to identify users in popular social media platforms and\nonline forums.\n\nThe resulting Engram layout:\n\n    \n    \n    [{ 1| 2= 3~ 4+ 5< 6> 7^ 8& 9% 0* ]} /\\ bB yY oO uU '( \") lL dD wW vV zZ #$ @` cC iI eE aA ,; .: hH tT sS nN qQ gG xX jJ kK -_ ?! rR mM fF pP\n\nengram is maintained by binarybottle. This page was generated by GitHub Pages.\n\n", "frontpage": false}
