{"aid": "40058625", "title": "Show HN: Acopw 1.0.0, a cryptographically secure password generator for Go", "url": "https://sr.ht/~jamesponddotco/acopw-go/", "domain": "sr.ht", "votes": 2, "user": "jamesponddotco", "posted_at": "2024-04-16 23:27:54", "comments": 0, "source_title": "acopw-go: Small cryptographically secure password generator package for Go.", "source_text": "acopw-go: Small cryptographically secure password generator package for Go.\n\n## ~jamesponddotco/acopw-go\n\n  * summary\n  * sources\n  * mailing lists\n  * tickets\n\nSmall cryptographically secure password generator package for Go.\n\nacd83b8 Fix linter issues\n\n~jamesponddotco pushed to ~jamesponddotco/acopw-go git\n\n44 minutes ago\n\nacd83b8 Fix linter issues\n\n~jamesponddotco pushed to ~jamesponddotco/acopw-go git\n\n44 minutes ago\n\nView project feed RSS\n\n## #acopw\n\nPackage acopw provides a simple, efficient, and secure way to generate random\npasswords, passphrases, and PINs using Go. It leverages the speed of\nmath/rand/v2 with the cryptographic security of ChaCha8 for generating random\ndata, ensuring the highest level of randomness, security, and performance.\n\nWhen generating diceware passwords, it uses a curated list with over 23\nthousand words, one of the largest word lists out there.\n\nSample output:\n\n    \n    \n    (#lR?xdVe^o#;|{K>k%Y$,SXnn?nLl[=+|^cf|AWCtA}YoP(Vb=G^rwj]f;u@~Py u{AQTrcOcHG#/.K>j{?P=\\=jm%O>)hC;.Y%l,~fE'v];^@AY!?I}=DzyKlE@GEKb hefty_spacetime_ENVELOPE_hearing_trend_fossils_unusable deplored-desert-victory-runtime-coupland-costly-CLASSICS 728079 996388\n\n### #Installation\n\nTo install acopw and use it in your project, run:\n\n    \n    \n    go get git.sr.ht/~jamesponddotco/acopw-go@latest\n\n### #Usage\n\n#### #Random passwords\n\nTo generate a random password, use Random and call the Generate() method.\n\n    \n    \n    package main import ( \"log\" \"git.sr.ht/~jamesponddotco/acopw-go\" ) func main() { random := &acopw.Random{ Length: 16, UseLower: true, UseUpper: true, UseNumbers: true, UseSymbols: true, } log.Println(random.Generate()) }\n\n#### #Diceware passwords\n\nTo generate a diceware password, use Diceware and call the Generate() method.\n\n    \n    \n    package main import ( \"log\" \"git.sr.ht/~jamesponddotco/acopw-go\" ) func main() { diceware := &acopw.Diceware{ Separator: \"-\", Length: 6, Capitalize: true, } log.Println(diceware.Generate()) }\n\n#### #PINs\n\nTo generate a PIN, use PIN and call the Generate() method.\n\n    \n    \n    package main import ( \"log\" \"git.sr.ht/~jamesponddotco/acopw-go\" ) func main() { pin := &acopw.PIN{ Length: 6, } log.Println(pin.Generate()) }\n\n### #Contributing\n\nAnyone can help make acopw better. Send patches on the mailing list and report\nbugs on the issue tracker.\n\nYou must sign-off your work using git commit --signoff. Follow the Linux\nkernel developer's certificate of origin for more details.\n\nAll contributions are made under the MIT License.\n\n### #Acknowledgements\n\n  * Tests were mostly written using a combination of Claude 3 and GPT-4.\n  * Big thanks to the EFF for providing some word lists, which were complimented by me crawling Wikipedia.\n  * Big thanks to Christopher Wellons for reviewing and auditing the underlying cryptographic implementation for biases and security issues. He also helped with many of the performance optimizations for the v1.0.0 release.\n\n### #Resources\n\nThe following resources are available:\n\n  * Package documentation.\n  * Support and general discussions.\n  * Patches and development related questions.\n  * Instructions on how to prepare patches.\n  * Feature requests and bug reports.\n\nReleased under the MIT License.\n\n", "frontpage": false}
