{"aid": "40285429", "title": "What's New in WebGPU (Chrome 125) \u2013 Blog \u2013 Chrome for Developers", "url": "https://developer.chrome.com/blog/new-in-webgpu-125", "domain": "chrome.com", "votes": 2, "user": "_feynon", "posted_at": "2024-05-07 13:49:40", "comments": 0, "source_title": "What's New in WebGPU (Chrome 125) | Blog | Chrome for Developers", "source_text": "What's New in WebGPU (Chrome 125) | Blog | Chrome for Developers\n\ndeveloper.chrome.com uses cookies from Google to deliver and enhance the\nquality of its services and to analyze traffic. Learn more.\n\n  * English\n  * Deutsch\n  * Espa\u00f1ol \u2013 Am\u00e9rica Latina\n  * Fran\u00e7ais\n  * Indonesia\n  * Italiano\n  * Nederlands\n  * Polski\n  * Portugu\u00eas \u2013 Brasil\n  * Ti\u1ebfng Vi\u1ec7t\n  * T\u00fcrk\u00e7e\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * \u05e2\u05d1\u05e8\u05d9\u05ea\n  * \u0627\u0644\u0639\u0631\u0628\u064a\u0651\u0629\n  * \u0641\u0627\u0631\u0633\u06cc\n  * \u0939\u093f\u0902\u0926\u0940\n  * \u09ac\u09be\u0982\u09b2\u09be\n  * \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22\n  * \u4e2d\u6587 \u2013 \u7b80\u4f53\n  * \u4e2d\u6587 \u2013 \u7e41\u9ad4\n  * \u65e5\u672c\u8a9e\n  * \ud55c\uad6d\uc5b4\n\nSign in\n\n  * Blog\n\n  * On this page\n  * Subgroups (feature in development)\n  * Render to slice of 3D texture\n  * Dawn updates\n  * What's New in WebGPU\n\n    * Chrome 125\n    * Chrome 124\n    * Chrome 123\n    * Chrome 122\n    * Chrome 121\n    * Chrome 120\n    * Chrome 119\n    * Chrome 118\n    * Chrome 117\n    * Chrome 116\n    * Chrome 115\n    * Chrome 114\n    * Chrome 113\n\n  * Chrome for Developers\n  * Blog\n\n# What's New in WebGPU (Chrome 125)\n\nbookmark_borderbookmark Stay organized with collections Save and categorize\ncontent based on your preferences.\n\n  * On this page\n  * Subgroups (feature in development)\n  * Render to slice of 3D texture\n  * Dawn updates\n  * What's New in WebGPU\n\n    * Chrome 125\n    * Chrome 124\n    * Chrome 123\n    * Chrome 122\n    * Chrome 121\n    * Chrome 120\n    * Chrome 119\n    * Chrome 118\n    * Chrome 117\n    * Chrome 116\n    * Chrome 115\n    * Chrome 114\n    * Chrome 113\n\nFran\u00e7ois Beaufort\n\nThe number of WebGPU features might feel a bit sparse this time, but some\nmajor advancements are just around the corner! Future releases will include\nfeatures like shader compilation speed improvements, and changes to the async\nmodel of the implementation using WGPUFuture.\n\n## Subgroups (feature in development)\n\nThe subgroups feature enables SIMD-level parallelism, allowing threads within\na group to communicate and perform collective math operations (for example,\ncalculating the sum of 16 numbers). This provides a highly efficient form of\ncross-thread data sharing.\n\nSubgroup operations are supported by modern GPU APIs, but naming and\nimplementation details vary. The Chrome team has identified the commonalities\nand is now working to standardize this feature. Check out the proposal and\ncomment if you have questions.\n\nThere's a minimal and unstandardized implementation of subgroups behind the\n\"Experimental Web Platform Features\" flag at chrome://flags/#enable-\nexperimental-web-platform-features so that developers can give it a try and\nshare feedback as real-world benefits have not been proven yet in the context\nof WebGPU.\n\nWhen the \"chromium-experimental-subgroups\" feature is available in a\nGPUAdapter, request a GPUDevice with this feature to get experimental\nsubgroups support in WGSL and check its minSubgroupSize and maxSubgroupSize\nlimits.\n\nYou also need to explicitly enable this extension in your WGSL code with\nenable chromium_experimental_subgroups. When enabled, you get access to the\nfollowing additions:\n\n  * subgroup_invocation_id: A built-in value for the index of the thread within the subgroup.\n  * subgroup_size: A built-in value for subgroup size access.\n  * subgroupBallot(value): Returns a set of bit fields where the bit corresponding to subgroup_invocation_id is 1 if value is true for that active invocation and 0 otherwise.\n  * subgroupBroadcast(value, id): Broadcasts the value from the invocation with subgroup_invocation_id matching id to all invocations within the subgroup. Note: id must be a compile-time constant.\n\nThe following code snippet provides a base to tinker with and discover the\npotential of subgroups.\n\n    \n    \n    const adapter = await navigator.gpu.requestAdapter(); if (!adapter.features.has(\"chromium-experimental-subgroups\")) { throw new Error(\"Experimental subgroups support is not available\"); } // Explicitly request experimental subgroups support. const device = await adapter.requestDevice({ requiredFeatures: [\"chromium-experimental-subgroups\"], });\n    \n    const shaderModule = device.createShaderModule({ code: ` enable chromium_experimental_subgroups;\n    \n    @compute @workgroup_size(64) fn main( @builtin(global_invocation_id) global_id : vec3u, @builtin(subgroup_size) sg_size : u32, @builtin(subgroup_invocation_id) sg_id : u32) { // TODO: Use subgroupBallot() and subgroupBroadcast(). }`, });\n\n## Render to slice of 3D texture\n\nYou can now render directly to slice(s) of 3D textures within render passes,\nexpanding its capabilities beyond common 2D texture rendering, with the new\ndepthSlice member in a GPURenderPassColorAttachment. This addition allows you\nfor example to create voxel-based scenes and effects by rendering directly\ninto 3D texture volumes. See issue dawn:1020.\n\n## Dawn updates\n\nCheck out the exhaustive list of commits.\n\n## What's New in WebGPU\n\nA list of everything that has been covered in the What's New in WebGPU series.\n\n### Chrome 125\n\n  * Subgroups (feature in development)\n  * Render to slice of 3D texture\n  * Dawn updates\n\n### Chrome 124\n\n  * Read-only and read-write storage textures\n  * Service workers and shared workers support\n  * New adapter information attributes\n  * Bug fixes\n  * Dawn updates\n\n### Chrome 123\n\n  * DP4a built-in functions support in WGSL\n  * Unrestricted pointer parameters in WGSL\n  * Syntax sugar for dereferencing composites in WGSL\n  * Separate read-only state for stencil and depth aspects\n  * Dawn updates\n\n### Chrome 122\n\n  * Expand reach with compatibility mode (feature in development)\n  * Increase maxVertexAttributes limit\n  * Dawn updates\n\n### Chrome 121\n\n  * Support WebGPU on Android\n  * Use DXC instead of FXC for shader compilation on Windows\n  * Timestamp queries in compute and render passes\n  * Default entry points to shader modules\n  * Support display-p3 as GPUExternalTexture color space\n  * Memory heaps info\n  * Dawn updates\n\n### Chrome 120\n\n  * Support for 16-bit floating-point values in WGSL\n  * Push the limits\n  * Changes to depth-stencil state\n  * Adapter information updates\n  * Timestamp queries quantization\n  * Spring-cleaning features\n\n### Chrome 119\n\n  * Filterable 32-bit float textures\n  * unorm10-10-10-2 vertex format\n  * rgb10a2uint texture format\n  * Dawn updates\n\n### Chrome 118\n\n  * HTMLImageElement and ImageData support in copyExternalImageToTexture()\n  * Experimental support for read-write and read-only storage texture\n  * Dawn updates\n\n### Chrome 117\n\n  * Unset vertex buffer\n  * Unset bind group\n  * Silence errors from async pipeline creation when device is lost\n  * SPIR-V shader module creation updates\n  * Improving developer experience\n  * Caching pipelines with automatically generated layout\n  * Dawn updates\n\n### Chrome 116\n\n  * WebCodecs integration\n  * Lost device returned by GPUAdapter requestDevice()\n  * Keep video playback smooth if importExternalTexture() is called\n  * Spec conformance\n  * Improving developer experience\n  * Dawn updates\n\n### Chrome 115\n\n  * Supported WGSL language extensions\n  * Experimental support for Direct3D 11\n  * Get discrete GPU by default on AC power\n  * Improving developer experience\n  * Dawn updates\n\n### Chrome 114\n\n  * Optimize JavaScript\n  * getCurrentTexture() on unconfigured canvas throws InvalidStateError\n  * WGSL updates\n  * Dawn updates\n\n### Chrome 113\n\n  * Use WebCodecs VideoFrame source in importExternalTexture()\n\nExcept as otherwise noted, the content of this page is licensed under the\nCreative Commons Attribution 4.0 License, and code samples are licensed under\nthe Apache 2.0 License. For details, see the Google Developers Site Policies.\nJava is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2024-05-07 UTC.\n\n", "frontpage": false}
