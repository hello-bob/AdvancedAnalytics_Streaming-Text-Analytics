{"aid": "40154774", "title": "Node.js 22 is now available", "url": "https://nodejs.org/en/blog/announcements/v22-release-announce", "domain": "nodejs.org", "votes": 1, "user": "tosh", "posted_at": "2024-04-25 08:05:46", "comments": 0, "source_title": "Node.js \u2014 Node.js 22 is now available!", "source_text": "Node.js \u2014 Node.js 22 is now available!\n\nNode.js v22 is now available!\n\n# Node.js 22 is now available!\n\nThe Node.js Project\n\nNode.js 22 is now available!\n\nWe're excited to announce the release of Node.js 22! Highlights include\nrequire()ing ES modules, a WebSocket client, updates of the V8 JavaScript\nengine, and more!\n\nNode.js 22 will enter long-term support (LTS) in October, but until then, it\nwill be the \"Current\" release for the next six months. We encourage you to\nexplore the new features and benefits offered by this latest release and\nevaluate their potential impact on your applications.\n\nThe project continues to make progress across a number of areas, with many new\nfeatures and fixes flowing into existing LTS releases. For that reason, the\nchanges outlined in the changelog for Node.js 22 only represent a small subset\nof the features and work since the last major release. This blog post will add\nsome additional context on the larger body of work in relation to those\nchanges.\n\nYou can read more about our release policy at\nhttps://github.com/nodejs/release.\n\nTo download Node.js 22.0.0, visit: https://nodejs.org/download/current/. You\ncan find the release post at https://nodejs.org/blog/release/v22.0.0, which\ncontains the full list of commits included in this release.\n\n### Notable Changes\n\n#### V8 Update to 12.4\n\nThe V8 release 12.4 includes new features like WebAssembly Garbage Collection,\nArray.fromAsync, Set methods and iterator helpers.\n\nContributed by Micha\u00ebl Zasso in #52465\n\n#### Maglev\n\nV8's Maglev Compiler is now enabled by default on supported architectures\n(https://v8.dev/blog/maglev). Maglev improves performance for short-lived CLI\nprograms.\n\nContributed by Keyhan Vakil in #51360\n\n#### Support require()ing synchronous ESM graphs\n\nThis release adds require() support for synchronous ESM graphs under the flag\n--experimental-require-module.\n\nIf --experimental-require-module is enabled, and the ECMAScript module being\nloaded by require() meets the following requirements:\n\n  * Explicitly marked as an ES module with a \"type\": \"module\" field in the closest package.json or a .mjs extension.\n  * Fully synchronous (contains no top-level await).\n\nrequire() will load the requested module as an ES Module, and return the\nmodule name space object. In this case it is similar to dynamic import() but\nis run synchronously and returns the name space object directly. We intend to\neventually enable require(esm) by default in the future, without the flag.\n\nContributed by Joyee Cheung in #51977\n\n#### Running package.json scripts\n\nNode.js 22 includes a new experimental feature for the execution of scripts\nfrom the package.json with the cli flag node --run <script-in-package-json>.\nIt also supports node --run test which executes the test command inside\npackage.json scripts.\n\nContributed by Yagiz Nizipli #52190\n\n#### Stream default High Water Mark\n\nIncreased the default High Water Mark for streams from 16KiB to 64KiB. This\nprovides a performance boost across the board at the cost of slightly higher\nmemory usage. Users in memory sensitive environments are encouraged to\nexplicitly set setDefaultHighWaterMark.\n\nContributed by Robert Nagy in #52037\n\n#### Watch Mode (node --watch)\n\nFrom this release Watch Mode is considered stable. When in watch mode, changes\nin the watched files cause the Node.js process to restart.\n\nContributed by Moshe Atlow #52074\n\n#### WebSocket\n\nThe browser-compatible implementation of WebSocket, previously behind the flag\n--experimental-websocket, will be enabled by default. This provides a\nWebSocket client to Node.js without external dependencies.\n\nContributed by the Undici team and Aras Abbasi in #51594\n\n#### glob and globSync\n\nThis release adds to the node:fsmodule the functions glob and globSync for\npattern matching. Developers can now utilize these functions for matching file\npaths based on specified patterns.\n\nContributed by Moshe Atlow #51912\n\n#### Improve performance of AbortSignal creation\n\nThis release enhances the efficiency of creating AbortSignal instances,\nleading to significantly improved performance in fetch and the test runner.\n\nContributed by Raz Luvaton in #52505\n\n## Call to action\n\nTry out the new Node.js 22 release! We\u2019re always happy to hear your feedback.\nTesting your applications and modules with Node.js 22 helps to ensure the\nfuture compatibility of your project with the latest Node.js changes and\nfeatures.\n\nAlso of note is that Node.js 18 will go End-of-Life in April 2025, so we\nadvise you to start planning to upgrade to Node.js 20 (LTS) or Node.js 22\n(soon to be LTS).\n\nLooking to the future, the Next-10 team is running a survey to gather info\nfrom the ecosystem. Help shape the future of Node.js by participating. Submit\nyour feedback here.\n\nNextDiving into the Node.js Website Redesign\n\nLast Updated\n\n    Apr 24, 2024\nReading Time\n\n    4 min read\nContribute\n\n    Edit this page\nTable of Contents\n\n    \n\n  1. Notable Changes\n  2. V8 Update to 12.4\n  3. Maglev\n  4. Support require()ing synchronous ESM graphs\n  5. Running package.json scripts\n  6. Stream default High Water Mark\n  7. Watch Mode (node --watch)\n  8. WebSocket\n  9. glob and globSync\n  10. Improve performance of AbortSignal creation\n  11. Call to action\n\nTrademark PolicyPrivacy PolicyCode of ConductSecurity Policy\n\n\u00a9 OpenJS Foundation\n\n", "frontpage": false}
