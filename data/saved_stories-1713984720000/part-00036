{"aid": "40142565", "title": "The problem with new URL(), and how URL.parse() fixes that", "url": "https://kilianvalkhof.com/2024/javascript/the-problem-with-new-url-and-how-url-parse-fixes-that/", "domain": "kilianvalkhof.com", "votes": 3, "user": "kilian", "posted_at": "2024-04-24 10:12:55", "comments": 0, "source_title": "The problem with new URL(), and how URL.parse() fixes that | Kilian Valkhof", "source_text": "The problem with new URL(), and how URL.parse() fixes that | Kilian Valkhof\n\n# Kilian Valkhof\n\n## Building tools that make developers awesome.\n\n## The problem with new URL(), and how URL.parse() fixes that\n\nJavascript, 24 April 2024, 3 minute read\n\nAs someone building a browser I need to parse a lot of URLs. Partially to\nvalidate them, but also to normalize them or get specific parts out of the\nURL. The URL API in browsers lets you do that, but it\u2019s ergonomics aren\u2019t\nideal.\n\n### The problem with new URL()\n\nThe \u201cnew\u201d in front of new URL() indicates that it\u2019s used as a constructor:\ncalling it creates a new URL instance for you. When you give it a malformed\nURL however, one that it can\u2019t parse, it throws an error. Because it throws an\nerror, you need to write code to handle that error.\n\nIf you don\u2019t do that, The thrown error won\u2019t get handled and your JS stops\nbeing executed. The following code looks great but if urlstring is malformed,\nit will stop execution:\n\n    \n    \n    const urlstring = \"this is not a URL\"; const not_a_url = new URL(urlstring);\n\nSo you'll want to wrap it in a try...catch so that the error is caught.\n\n    \n    \n    const urlstring = \"this is not a URL\"; let not_a_url; try { not_a_url = new URL(urlstring); } catch { // not_a_url is already undefined so no need to actually do anything. }\n\nThat's a lot more lines of code, has more visual noise and it means you have\nto change not_a_url from a const to a let to be able to overwrite it. The\ncontrol flow of the application ends up being more complex.\n\n### Making it slightly better\n\nA recent addition to the URL api is URL.canParse(), a function that returns\ntrue if the URL is a parseable URL.\n\nIt's only been available cross-browser since December 2023 so it might be a\nlittle too early for general use, but it does make the code more readable.\n\nInstead of trying and catching the error, we can first check if the URL is\nparseable before parsing it, and we can do that inline:\n\n    \n    \n    const urlstring = \"this is not a URL\"; const not_a_url = URL.canParse(urlstring) && new URL(urlstring);\n\nThis makes not_a_url a const again, and is definitely easier to understand.\n\n### Complaining\n\nRather than being constructive and writing my own little function to abstract\nthat try...catch or canParse away from my regular code base, I decided to do\nthe right thing and complain on Twitter:\n\n> Making new URL() throw when you give it an invalid URL was a terrible API\n> choice.\n\nNot much later Anne van Kesteren replied with a link to a GitHub issue\ndiscussing the addition of a \"parse\" function to URL that would not throw.\n\nAnne added that issue in 2018 but my tweet renewed interest. Not much later,\nAnne added URL.parse() to the spec and implementation bugs were filed for all\nbrowser engines.\n\nAnne himself implemented it in WebKit and it's also going to ship in Chromium\n126 and Firefox 126.\n\n### Using URL.parse\n\nWith URL.parse we can go back to that original example all the way up top, and\nkeep our control flow as simple as possible:\n\n    \n    \n    const urlstring = \"this is not a URL\"; const not_a_url = URL.parse(urlstring);\n\nThe browsers with this feature will ship in the next few months (Firefox in\nMay, Chrome in June, I've not been able to figure out when Safari will) so\nyou'll have to wait a little before using it but I can't wait to get rid of\nall my try..catch calls!\n\nHi, I'm Kilian. I make Polypane, the browser for responsive web development\nand design. If you're reading this site, that's probably interesting to you.\nTry it out!\n\n### Related Posts\n\nCreating files in JavaScript in your browser\n\n19 May 2020, 3 minute read\n\nDid you know you can create files using JavaScript right inside your browser\nand have users download them? You can create files with a proper name and mime\ntype and it only takes a few lines of code.\n\nSupercharging number inputs\n\n11 August 2020, 6 minute read\n\nThe number input type provides a nice way for to deal with numbers. You can\nset bounds with the min and max attributes and users can press up and down to\ngo add or remove 1, or if you add the step attribute, go up or down by a step.\nBut what if we want [...]\n\nDetecting media query support in CSS and JavaScript\n\n13 July 2021, 5 minute read\n\nRecently I needed a way to detect support for a media query in CSS and\nJavascript. To detect if a browser supports a certain CSS feature, you can use\n@supports () { ... }, but that doesn\u2019t work for media queries. In this article\nI\u2019ll show you how you can detect support for media queries [...]\n\n### Categories\n\n  * Accessibility (9)\n  * Apps (11)\n  * Chatbots (4)\n  * CSS & HTML (69)\n  * Design (19)\n  * Electron (7)\n  * Javascript (22)\n  * Life (19)\n  * Linux (2)\n  * SenCSs (6)\n  * Web (35)\n  * Wordpress (1)\n\n### Social\n\n  * Twitter\n  * Mastodon\n  * Github\n  * Linkedin\n  * Ko-fi\n  * Hacker news\n\n\u00a9 2006 \u2013 2024 Kilian Valkhof. Articles available for redistribution under\nlicence.\n\n", "frontpage": false}
