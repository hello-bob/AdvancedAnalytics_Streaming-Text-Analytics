{"aid": "40246306", "title": "Web Component for Copyright Years", "url": "https://gist.github.com/ceving/6e65886e04563ed9e6e42cc5f8d3f656", "domain": "gist.github.com", "votes": 1, "user": "fagnerbrack", "posted_at": "2024-05-03 11:06:10", "comments": 0, "source_title": "Web Component for Copyright Years", "source_text": "Web Component for Copyright Years \u00b7 GitHub\n\nSkip to content\n\nSign in Sign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nInstantly share code, notes, and snippets.\n\n# ceving/Web Component for Copyright Years.md\n\nLast active April 29, 2024 07:06\n\nShow Gist options\n\n  * Download ZIP\n\n  * Star 33 You must be signed in to star a gist\n  * Fork 6 You must be signed in to fork a gist\n\n  *     * Learn more about clone URLs\n\n  * Save ceving/6e65886e04563ed9e6e42cc5f8d3f656 to your computer and use it in GitHub Desktop.\n\n  * Learn more about clone URLs\n\nSave ceving/6e65886e04563ed9e6e42cc5f8d3f656 to your computer and use it in\nGitHub Desktop.\n\nDownload ZIP\n\nWeb Component for Copyright Years\n\nRaw\n\nWeb Component for Copyright Years.md\n\n# Web Component for Copyright Years\n\nThis Web Components keeps the year in your copyright notice up-to-date.\n\n    \n    \n    export { CopyrightYearElement } const name = \"copyright-year\"; class CopyrightYearElement extends HTMLSpanElement { constructor() { super(); } connectedCallback() { const year = new Date().getFullYear(); const shadow = this.attachShadow({ mode: \"open\" }); const span = document.createElement(\"span\"); span.appendChild(document.createTextNode(`${this.textContent} - ${year}`)); shadow.appendChild(span); } } customElements.define(name, CopyrightYearElement, {extends: 'span'});\n\nUse the module.\n\n    \n    \n    <script type=\"module\" src=\"copyright-year.js\"></script>\n\nUse the Web Component with the attribute is\n\n    \n    \n    <span>&copy; <span is=\"copyright-year\">2023</span> Web Component Super Hero</span>\n\nor as a dedicated element.\n\n    \n    \n    <span>&copy; <copyright-year>2023</copyright-year> Web Component Super Hero</span>\n\n###\n\nDanny-Engelman commented Mar 28, 2024 \u2022\n\n  * You are not exporting anything, so no export required. Its a single anonymous call.\n\n  * Apple for over 10 years now has stated they will never implement is= syntax (extending existing elements)\n\n  * An Empty constructor call (only calling super()) is pointless , as each callback will call its parent callback by default; So if you do not declare a connectedCallback, the connectedCallback on the parent is called; I think they call it OOP\n\n  * this.textContext only works for you because the component in this case is defined after DOM is parsed. Place it in the HEAD and not in a file that loads after DOMContentLoaded and your code will fail.\n\n  * ::slotted() only works on DOM elements that get slotted, not on text elements\n\n    \n    \n    <copyright-year>Microsoft</copyright-year> <copyright-year guri=\"guidelines URI\">Apple</copyright-year> <copyright-year fixed guri=\"guidelines URI\">Meta</copyright-year> <copyright-year fixed guri=\"guidelines URI\"><b>Google</b></copyright-year> <script> customElements.define(\"copyright-year\", class extends HTMLElement { constructor() { const createElement = (tag, props = {}) => Object.assign(document.createElement(tag), props); const spacer = \"&nbsp;\".repeat(3); super() .attachShadow({ mode: \"open\" }) .append( createElement(\"style\", { innerHTML: `:host{display:block;margin:0;padding:0;width:100%;background:beige}`+ `:host(*){font-size:120%}`+ `::slotted(*){font-size:120%;color:red}`+ `:host([fixed]){display:inline-block;position:fixed;bottom:0}` }), createElement(\"span\", { innerHTML: \"\u00a9\ufe0f \" + (new Date().getFullYear()) + spacer }), createElement(\"slot\", { innerHTML: `by ACME` }), createElement(\"span\",{ innerHTML: this.getAttribute(\"guri\") ? spacer + `<A href=\"${this.getAttribute(\"guri\")}\">Read our guidelines</a>` : \"\" }) ); } }); </script>\n\n###\n\nAdnanear commented Mar 29, 2024\n\n>   * You are not exporting anything, so no export required. Its a single\n> anonymous call.\n>   * Apple for over 10 years now has stated they will never implement is=\n> syntax (extending existing elements)\n>   * An Empty constructor call (only calling super()) is pointless , as each\n> callback will call its parent callback by default; So if you do not declare\n> a connectedCallback, the connectedCallback on the parent is called; I think\n> they call it OOP\n>   * this.textContext only workds becuase the component in this case is\n> defined after DOM is parsed. Place it in the HEAD and not in a file that\n> loads after DOMContentLoaded and your code will fail.\n>   * ::slotted() only works on DOM elements that get slotted, not on text\n> elements\n>\n\n>  \n>  \n>     <copyright-year>Microsoft</copyright-year> <copyright-year\n> guri=\"guidelines URI\">Apple</copyright-year> <copyright-year fixed\n> guri=\"guidelines URI\">Meta</copyright-year> <copyright-year fixed\n> guri=\"guidelines URI\"><b>Google</b></copyright-year> <script>\n> customElements.define(\"copyright-year\", class extends HTMLElement {\n> constructor() { const createElement = (tag, props = {}) =>\n> Object.assign(document.createElement(tag), props); const spacer =\n> \"&nbsp;\".repeat(3); super() .attachShadow({ mode: \"open\" }) .append(\n> createElement(\"style\", { innerHTML:\n> `:host{display:block;margin:0;padding:0;width:100%;background:beige}`+\n> `:host(*){font-size:120%}`+ `::slotted(*){font-size:120%;color:red}`+\n> `:host([fixed]){display:inline-block;position:fixed;bottom:0}` }),\n> createElement(\"span\", { innerHTML: \"\u00a9\ufe0f \" + (new Date().getFullYear()) +\n> spacer }), createElement(\"slot\", { innerHTML: `by ACME` }),\n> createElement(\"span\",{ innerHTML: this.getAttribute(\"guri\") ? spacer + `<A\n> href=\"${this.getAttribute(\"guri\")}\">Read our guidelines</a>` : \"\" }) ); }\n> }); </script>\n\nNo one cares about Apple's safari to be honest, if the other major browsers\ndecide to do something. Apple will be forced to join the union, otherwise it\nwill be a downside for them.\n\nIt's not like Safari isn't the nowadays Internet Explorer, but it is indeed\nthe most buggy one and the only one to make developers suffer in order to get\nthings compatible without putting some kind of black sorcery just to make\nApple happy -_-\n\n###\n\nlukebrowell commented Mar 29, 2024 \u2022\n\nThis web component is cool.\n\n###\n\nrobingamedev commented Mar 29, 2024\n\n>   * You are not exporting anything, so no export required. Its a single\n> anonymous call.\n>   * Apple for over 10 years now has stated they will never implement is=\n> syntax (extending existing elements)\n>   * An Empty constructor call (only calling super()) is pointless , as each\n> callback will call its parent callback by default; So if you do not declare\n> a connectedCallback, the connectedCallback on the parent is called; I think\n> they call it OOP\n>   * this.textContext only workds becuase the component in this case is\n> defined after DOM is parsed. Place it in the HEAD and not in a file that\n> loads after DOMContentLoaded and your code will fail.\n>   * ::slotted() only works on DOM elements that get slotted, not on text\n> elements\n>\n\n>  \n>  \n>     <copyright-year>Microsoft</copyright-year> <copyright-year\n> guri=\"guidelines URI\">Apple</copyright-year> <copyright-year fixed\n> guri=\"guidelines URI\">Meta</copyright-year> <copyright-year fixed\n> guri=\"guidelines URI\"><b>Google</b></copyright-year> <script>\n> customElements.define(\"copyright-year\", class extends HTMLElement {\n> constructor() { const createElement = (tag, props = {}) =>\n> Object.assign(document.createElement(tag), props); const spacer =\n> \"&nbsp;\".repeat(3); super() .attachShadow({ mode: \"open\" }) .append(\n> createElement(\"style\", { innerHTML:\n> `:host{display:block;margin:0;padding:0;width:100%;background:beige}`+\n> `:host(*){font-size:120%}`+ `::slotted(*){font-size:120%;color:red}`+\n> `:host([fixed]){display:inline-block;position:fixed;bottom:0}` }),\n> createElement(\"span\", { innerHTML: \"\u00a9\ufe0f \" + (new Date().getFullYear()) +\n> spacer }), createElement(\"slot\", { innerHTML: `by ACME` }),\n> createElement(\"span\",{ innerHTML: this.getAttribute(\"guri\") ? spacer + `<A\n> href=\"${this.getAttribute(\"guri\")}\">Read our guidelines</a>` : \"\" }) ); }\n> }); </script>\n\nPutting it in the head script like that defeats the purpose of a web\ncomponent.\n\nThe safari bit is valid.\n\n###\n\nDanny-Engelman commented Mar 29, 2024\n\n> Putting it in the head script like that defeats the purpose of a web\n> component.\n\nDepends on the use case. if you need 10 SVG icons be done ASAP, without FOUCs,\nyou declare one <svg-icon> Web Component the head of your document. Just like\nany GUI stuff\n\nA copyright notice below the fold can be aysnc/lazy/module loaded\n\n###\n\nurbanisierung commented Mar 29, 2024\n\n<3\n\n###\n\nKooiInc commented Mar 30, 2024\n\nMmm, looks a lot like the code in my Stackblitz project (see\ncreateCopyrightComponent). It uses a webcomponent helper module that doesn't\nneed the class syntax.\n\n###\n\nliamnewmarch commented Apr 3, 2024 \u2022\n\nThanks for sharing this @ceving!\n\n@Danny-Engelman, I think you\u2019re trying to help but your code review comes\nacross as critical. Reviews can be tricky but try to give helpful pointers and\njustifications rather than opinions.\n\n> You are not exporting anything, so no export required. Its a single\n> anonymous call.\n\nI see what you\u2019re saying but there\u2019s nothing wrong with exporting the class.\nIt can be helpful to export components so they can be extended later on.\n\nI would go for export class CopyrightYearElement ... for the sake of\nreadability instead of hoisting the export to the top of the script, but this\nis fine.\n\n> Apple for over 10 years now has stated they will never implement is= syntax\n> (extending existing elements)\n\nFair enough. Your recommendation here is to extend HTMLElement instead of\nHTMLSpanElement, remove the {extends: 'span'} option from the definition, and\nnot to recommend using the is attribute.\n\n> An Empty constructor call (only calling super()) is pointless , as each\n> callback will call its parent callback by default; So if you do not declare\n> a connectedCallback, the connectedCallback on the parent is called; I think\n> they call it OOP\n\nAlso fair enough. This is called inheritance \u2013 the constructor is inherited\nfrom the parent class, HTMLElement \u2013 and is a key part of object oriented\nprogramming or OOP.\n\n> this.textContext only works for you because the component in this case is\n> defined after DOM is parsed. Place it in the HEAD and not in a file that\n> loads after DOMContentLoaded and your code will fail.\n\nThe code in the gist will not fail if you follow the instructions. You\u2019re\nright that connectedCallback can be called before the component\u2019s children are\nparsed, but the gist says to include the module with <script type=\"module\">\nwhich defers execution of the script until after the DOM is ready.\n\n> ::slotted() only works on DOM elements that get slotted, not on text\n> elements\n\nI might be missing something but no revision of the gist seems to use\n::slotted()...?\n\nHope that helps \ud83d\ude42\n\nI\u2019d like to critique the code you shared too. One tip to make things more\nreadable is to tag the code block with the langugage you\u2019re using, this\nenables syntax highlighting. edit: My bad, I was looking at one of the\nreplies.\n\n    \n    \n    <copyright-year>Microsoft</copyright-year> <copyright-year guri=\"guidelines URI\">Apple</copyright-year> <copyright-year fixed guri=\"guidelines URI\">Meta</copyright-year> <copyright-year fixed guri=\"guidelines URI\"><b>Google</b></copyright-year>\n\nI\u2019m not sure where the fixed and guri=\"...\" attributes came from but they seem\nspecific to your use-case and you may want to remove them.\n\n    \n    \n    <script>\n\nAs mentioned, <script> is fine but you can run into ordering bugs if the\nscript isn\u2019t the last thing in your <body>. You might want to consider using\n<script type=\"module\"> or <script defer> which is the current best practice\nand means you can include it in your <head> with no problems.\n\n    \n    \n    customElements.define(\"copyright-year\", class extends HTMLElement { constructor() { const createElement = (tag, props = {}) => Object.assign(document.createElement(tag), props);\n\nThis is a neat utility function but it doesn\u2019t feel like it should live in the\nconstructor of this web component.\n\n    \n    \n    const spacer = \"&nbsp;\".repeat(3);\n\nThis also feels like it might be specific to your use-case. If it\u2019s possible\nyou might want to consider using CSS instead of non-breaking spaces.\n\n    \n    \n    super() .attachShadow({ mode: \"open\" }) .append( createElement(\"style\", { innerHTML: `:host{display:block;margin:0;padding:0;width:100%;background:beige}`+ `:host(*){font-size:120%}`+ `::slotted(*){font-size:120%;color:red}`+ `:host([fixed]){display:inline-block;position:fixed;bottom:0}` }),\n\nI won\u2019t review the CSS which seems custom, but it looks like a lot of this\ncould be moved out of the shadow DOM which would save you from having to\nminify it manually. Bear in mind that code is read more times than it\u2019s\nwritten, so if you\u2019re able to write this out fully and minify it as part of a\nbuild step then future developers (or even yourself) will thank you.\n\n    \n    \n    createElement(\"span\", { innerHTML: \"\u00a9\ufe0f \" + (new Date().getFullYear()) + spacer }),\n\nI would recommend using textContent over innerHTML as a best practice where\nyou can to avoid potential XSS injection attacks, although this case should be\nfine. I noticed you used &nbsp; above and the unicode copywright character\nhere, so it might be good to be consistent.\n\n    \n    \n    createElement(\"slot\", { innerHTML: `by ACME` }), createElement(\"span\",{ innerHTML: this.getAttribute(\"guri\") ? spacer + `<A href=\"${this.getAttribute(\"guri\")}\">Read our guidelines</a>` : \"\" })\n\nAgain this content feels specific to your use-case. If you add the <a> tag as\na child in the HTML where this is used it would help keep the component\ngeneric.\n\n    \n    \n    ); } }); </script>\n\n###\n\nkremalicious commented Apr 28, 2024 \u2022\n\n> No one cares about Apple's safari to be honest, if the other major browsers\n> decide to do something. Apple will be forced to join the union, otherwise it\n> will be a downside for them.\n\nWith this attitude, you should stay away from web development. Dismissing\nevery iPhone and iPad out there just because you don't like it is a user-\nhostile attitude and I hope I never have to use anything you produce\n\nSign up for free to join this conversation on GitHub. Already have an account?\nSign in to comment\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
