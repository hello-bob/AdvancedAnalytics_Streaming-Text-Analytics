{"aid": "40092420", "title": "Help us invent CSS&#160;Grid&#160;Level&#160;3, a.k.a. \"Masonry\" layout", "url": "https://webkit.org/blog/15269/help-us-invent-masonry-layouts-for-css-grid-level-3/", "domain": "webkit.org", "votes": 1, "user": "feross", "posted_at": "2024-04-19 22:03:41", "comments": 0, "source_title": "Help us invent CSS Grid Level 3, aka \u201cMasonry\u201d layout", "source_text": "Help us invent CSS Grid Level 3, aka \u201cMasonry\u201d layout | WebKit\n\nWebKit\n\n# Help us invent CSS Grid Level 3, aka \u201cMasonry\u201d layout\n\nApr 19, 2024\n\nby Jen Simmons\n\n  * What is masonry layout?\n  * Inventing masonry\n  * Four demos\n  * Creating a classic masonry / waterfall layout\n  * Leveraging Grid\u2019s full power to define columns\n  * Leveraging Grid\u2019s ability to let content span columns\n  * Columnar vs. Modular Grids\n  * Using subgrid and explicit placement\n  * The Debate\n  * What is a grid?\n  * We want to hear from you\n  * P.S. About the name...\n\nIf you\u2019ve been making websites for years, you know how frustrating it was to\nlay out a web page with CSS floats. Managing sizes and placement was tedious\nand time consuming. Being creative was often impossible. CSS Grid greatly\neased that pain with Grid Level 1 in 2017, and now with Grid Level 2, aka\nSubgrid. But even with the powerful CSS of today, not every layout imaged by\ndesigners is possible. In fact, when CSS Grid shipped, one of the most\ncommonly asked questions was: \u201chow do I write CSS to accomplish a masonry\nlayout?\u201d Sadly, for the last seven years the answer has been \u2014 you can\u2019t.\n\n## What is masonry layout?\n\nWhat do we mean by the term \u201cmasonry layout\u201d? Basically it\u2019s the pattern seen\nin the following image \u2014 where content packs together like a brick or stone\nwall. That\u2019s where it gets the name \u201cmasonry\u201d. It\u2019s also frequently called\n\u201cwaterfall layout\u201d, as a metaphor for how content flows down the page like a\nwaterfall.\n\nThis layout is popular because it solves a few problems that other layouts do\nnot.\n\n  1. It allows for content of different aspect ratios, and avoids the need to crop or truncate content in order to turn everything into uniform rectangles.\n  2. It distributes content across the page (instead of flowing down each column, one by one). This follows the natural reading order as you scroll the page. And it lets the website lazy-load additional content at the bottom without moving existing content around.\n\nThis layout creates uniformly-sized columns, without any rows. It\u2019s quite\npossible that because this layout has required JavaScript, anything more\ncreative or complex has been too hard to pull off \u2014 and we\u2019ve been left with\nan expectation that masonry layout should only ever be a simple pattern with\nuniformly-sized columns. Let\u2019s see what\u2019s possible if we build it into CSS\ninstead.\n\n## Inventing masonry\n\nA mechanism in CSS for \u201cmasonry layout\u201d was first proposed by Mozilla in\nJanuary 2020 as an extension of CSS Grid, and implemented as an experiment\nbehind a flag in Firefox Nightly. In 2022, Apple started implementing this CSS\nGrid Level 3 proposal in Safari Technology Preview (where it\u2019s currently on by\ndefault), and we\u2019ve been helping to move the web standard along to reach\nmaturity.\n\nHowever, there are big questions still being asked about how CSS should handle\nmasonry-style layouts. Some people remain skeptical that this capability\nshould be part of CSS Grid, and want it to instead be its own separate display\ntype. Others are questioning whether or not this kind of layout is needed on\nthe web at all \u2014 they aren\u2019t sure that well-known websites will use it. With\nsuch fundamental disagreements at play, no browser can ship. We must first\ncome to consensus in the CSS Working Group.\n\nThis is where we need your help. We\u2019d like real-world web designers and\ndevelopers to weigh into the discussion, and express what it is that you want.\nYour input really can make a difference.\n\nIn this article, we\u2019ll walk through how the CSS Grid Level 3 proposal works,\nand how you can use its new capabilities. We\u2019ll show you why we believe these\nfeatures should be part of CSS Grid, and explain what the alternative would be\nif the CSS Working Group creates display: masonry instead. And then, we\u2019ll ask\nyou to join the debate to help move us forward. Please do read to the end.\n\n## Four demos\n\nTo show why we at Apple believe this capability should be part of CSS Grid, we\ncreated four demonstrations. If you\u2019d like, try them yourself at\nwebkit.org/demos/grid3. View these demos in a browser that supports Grid Level\n3 \u2014 currently Safari Technology Preview or Firefox after you\u2019ve turned on the\nfeature flag.\n\nNote there\u2019s a control panel for each demo, with the relevant layout code\nprinted to the page. Turn on \u201cNumber items\u201d to see the relationship between\nthe HTML order of content and the layout placement of that content.\n\nEach demo has a multitude of variations. Switch between variations from the\ndropdown menu, which changes only the CSS. The HTML stays the same.\n\n## Creating a classic masonry / waterfall layout\n\nFirst, let\u2019s take a look at how to build a classic masonry/waterfall layout.\nIn this gallery of photos, each image is wrapped with a figure element, and\nthe figures are direct children of a main element.\n\n    \n    \n    <main> <figure><img src=\"photo-1.jpg\"></figure> <figure><img src=\"photo-2.jpg\"></figure> <figure><img src=\"photo-3.jpg\"></figure> </main>\n\nWe start by applying display: grid to the main element to create the Grid\ncontainer. Then we can define grid-template-columns however we\u2019d like.\n\nIn this case, let\u2019s use grid-template-columns: repeat(auto-fill, minmax(14rem,\n1fr)) to ask the browser to repeat a looped definition to create a set of\nflexible columns that are each of a minimum of 14rem. This results in\nuniformly-sized columns, typical of the classic masonry/waterfall layout. The\ngap: 1rem; rule creates a 1rem-wide space between the items \u2014 both between the\ncolumns, and horizontally between items.\n\nAnd then, we\u2019ll define the \u201crows\u201d with the masonry value. (It\u2019s likely the\nname of this value will change before this ships in browsers \u2014 more on that at\nthe end of this article. For now, masonry is what works.)\n\n    \n    \n    main { display: grid; grid-template-columns: repeat(auto-fill, minmax(14rem, 1fr)); gap: 1rem; grid-template-rows: masonry; }\n\nThe grid-template-rows: masonry rule tells the browser: \u201cPlease do not create\nrows. Instead pack the content into a masonry/waterfall-like pattern.\u201d\n\nThat\u2019s it! In four lines of CSS, with zero media queries or container queries,\nwe\u2019ve created a flexible layout that works on screens of all sizes. And\nthere\u2019s no need to crop content to force everything into same-sized boxes.\n\nIn graphic design, a layout that has uniformly-sized columns and no rows is\noften called a \u201csymmetrical columnar grid\u201d. For centuries, columnar grids were\nthe dominant type of grid used in page design.\n\n## Leveraging Grid\u2019s full power to define columns\n\nNow let\u2019s dive into the advantages of combining the full power of CSS Grid\nwith masonry/waterfall packing. CSS Grid provides many options for defining\ngrid our columns. Using fr units to create a symmetrical grid is only one\noption of many.\n\nHow could these possibilities be used for a masonry/waterfall-style layout?\nLet\u2019s try mixing fixed-sized columns with flexible columns. We could make the\nfirst and last column fixed-sized, while the middle columns are flexible,\nchanging in both size and number.\n\nSpecifically, the first and last columns are exactly 14 characters wide, while\nthe middle columns are flexible (at least 28 characters wide) and change in\nnumber to fill the available space.\n\n    \n    \n    main { display: grid; grid-template-columns: 14ch repeat(auto-fill, minmax(28ch, 1fr)) 14ch; grid-template-rows: masonry; gap: 1rem; }\n\nThis is just one of many, many possibilities.\n\nCSS Grid allows for a lot of creativity with its options for defining grid\ntracks:\n\n  * fixed sizes defined in any unit (px, em, rem, cqi, lh, ch, ic, cap, vw, svh, and many more)\n  * max-content and min-content\n  * the full power of fr units\n  * minmax() functions\n  * %-sized\n  * auto\n\nThese options in CSS Grid allow you to create something much more dynamic and\nflexible in interesting ways. You can create two stages of flexibility,\nbecause the fr-unit sized columns grow and shrink in a separate stage from the\nminmax()-sized columns. The max-content and min-content values let you size\nthe columns based on the content size, rather than sizing the content based on\nthe column size. The fr units can easily be used to create compound or\nasymmetrical grids, where the columns are different sizes. The options are\nendless.\n\nBy adding the ability to pack content in a masonry/waterfall pattern to CSS\nGrid, we maintain the full power of Grid for defining our columns in whichever\nmanner we like.\n\nFor example, let\u2019s use grid-template-columns: repeat(auto-fill, minmax(8rem,\n1fr) minmax(16rem, 2fr)) minmax(8rem, 1fr) to create a pattern of alternating\nnarrow and wider columns, where all the columns are flexible. More columns are\nadded when there\u2019s space. And there\u2019s always an odd number of columns, ending\nwith a narrow one.\n\nEven when we define columns using only the simple fr unit, the full power\nprovided in CSS Grid means different columns can be set to different sizes.\nFor fun, let\u2019s use fr units to define a set of columns sized to inject the\nvibes of the golden ratio by using the Fibonacci sequence in grid-template-\ncolumns: 1fr 1fr 2fr 3fr 5fr 8fr;\n\nIn a more practical example, let\u2019s use max-content when defining our columns.\nContent-based sizing is an incredibly power feature of CSS Grid. This demo of\na mega menu layout uses grid-template-columns: repeat(auto-fill, minmax(max-\ncontent, 30ch)); to ensure that every column is big enough to fit every link\nwithout wrapping text.\n\nMega menus have been hard to code, especially across multiple screen sizes.\nWith CSS Grid Level 3, it becomes incredibly easy. A few lines of code creates\na dynamic layout which adds and removes columns one at a time as space allows\n\u2014 without any media/container queries, and with wrapping prevention.\n\nMany of these examples could never be created with masonry as a separate\ndisplay type. The discussion of display: masonry is to only allow symmetrical\ncolumns (columns that are the same size as each other), much like multicolumn\nlayout does today.\n\n## Leveraging Grid\u2019s ability to let content span columns\n\nCSS Grid also lets us span items across multiple columns. Let\u2019s use that\ncapability to see what interesting options might emerge. How about making\nevery 5th image span two grid columns, while the rest of the images are span\none column.\n\nWhat if instead, we put a wider class on specifically on images that have a\nwider aspect-ratio, to make those images span multiple columns. We can also\nchange the styling a bit, making the corners square instead of round, and\nreducing the grid gap to zero. This gives us a different way to pack photos of\ndifferent aspect ratios together.\n\nWe also experimented with combining the classic masonry/waterfall layout of\nphotos with View Transitions. When a user clicks/taps on any photo, it grows\nto span multiple columns. The browser automagically animates the transition.\n(This demo requires Safari Technology Preview 192 or later.)\n\nThese variations of the Photos and Mega Menu demos are just a small taste of\nall of the many possibilities you get when leveraging the full power of CSS\nGrid in the column direction, while simultaneously turning off rows.\n\n## Columnar vs. Modular Grids\n\nWhat happens when we keep experimenting? Let\u2019s let go of thinking about\n\u201cmasonry\u201d, and start imagining Grid Level 3 purely as an expansion of Grid. At\nits core, CSS Grid Level 3 provides a mechanism for turning off rows. It lets\nus create a columnar grid \u2014 a grid that\u2019s made up of columns alone.\n\nBy contrast, a modular grid is a grid where everything is lined up in both\ncolumns and rows. They became popular in the 20th century during the dominance\nof modernism in graphic design. CSS Grid Level 1 is really good at making\nmodular grids... that\u2019s what it wants to do. In fact, float-based layouts also\nencouraged the creation of modular grids on the web, since you had to make all\nyour content the same height to get your floats to clear. Images need to be\nthe same aspect ratio. Text has to be the same length. This is often\naccomplished on the back-end with policies enforced by the content management\nsystem, or on the front-end by CSS that truncates/crops the content.\n\nIt\u2019s incredible common for websites to do some variation of this sort of\nmodular grid, laid out here with CSS Grid Level 1.\n\nOf course, this example is overly simplistic. The article ledes look bare with\nno teaser images. The uniformity is so strict and formal, the design lacks\nlife. Real websites find other ways to breathe life back into the design.\n\nBut what if the layout itself could also provide some vitality and interest?\nWhat will happen if we use CSS Grid to create a columnar grid as easily as it\ncreates a modular grid? What if we don\u2019t truncate content, and instead let it\nbe the size that it wants to be \u2014 and get the layout to work for the content,\nrather than forcing the content to work for the layout?\n\nA classic masonry/waterfall layout with various lengths of text looks like\nthis, which is already more engaging since a user can read more about each\narticle:\n\nAlthough, that\u2019s still a bit visually repetitive. Symmetrical columnar grids\noften are. We need the rest of the power of CSS Grid to do something more\ninteresting. Let\u2019s make the latest article much bigger, and have it span four\ncolumns. A handful of other recent articles can be medium-sized and span two\ncolumns. While the older content is smaller, spanning one column.\n\nNow this otherwise visually boring text is starting to look fairly lively. If\nwe were to add images to each of these articles, it would be it even more\ndynamic.\n\nLet\u2019s experiment with mixing images and text together on a webpage for a\nmuseum. The first grid item is a header that introduces the museum, and\nprovides navigation to other resources. The rest of the content consists of\npieces of artwork and their information: title, artist, year, medium, catalog\nnumber and location.\n\nBecause the paintings are gorgeous, the content looks pretty great in a\nclassic masonry/waterfall layout.\n\nLet\u2019s see what else we can do by utilizing two more powerful features of CSS\nGrid \u2014 subgrid and explicit placement.\n\n## Using subgrid and explicit placement\n\nThe functionality provided by subgrid in CSS Grid Level 2 is incredible, and\nit\u2019s finally supported in most browsers.\n\nInstead of listing the painting\u2019s metadata in a single left-aligned column,\nlet\u2019s see how we might better use the available space. By using subgrid, we\ncan put the year and catalog number on the right of each card \u2014 and line up\nthis data for one painting with the same data for the other paintings.\n\nBy adding this new functionality to CSS Grid Level 3, we get the benefit of\nexisting developer tools. You can use the Grid Inspector in Safari Technology\nPreview today as you try out grid-template-rows: masonry.\n\nIf masonry is its own display type, and not part of CSS Grid, it will not get\nthe benefit of subgrid.\n\nWe can also use the power of CSS Grid Level 1 to explicitly place the header\ninto the last two columns, moving it to the top right corner of the page with\ngrid-column: -3 / -1.\n\nIn just a few lines of layout code, we are using the full power of CSS Grid\nLevels 1, 2, and 3 to create flexible columns that change in number to\naccommodate the available size \u2014 without using any media queries or container\nqueries.\n\nHopefully you can see the advantages of fully combining a mechanism for\nmasonry/waterfall layouts with CSS Grid \u2014 providing many more creative\npossibilities than masonry alone.\n\n## The Debate\n\nSo let\u2019s get into the debate that\u2019s been blocking the CSS Working Group from\nmoving forward. Our hope is that web designers and developers chime in (post\nto social media, write blog posts) with your thoughts about which direction\nCSS should take.\n\nSome people, including those of us at Apple, like having \u201cMasonry\u201d be part of\nCSS Grid. We believe this functionality is a mechanism to expand CSS Grid \u2014\nallowing it to finally create columnar grids as well as modular grids. And we\nwant this functionality to be mixed with all the other features of Grid,\nincluding the powerful options for defining a columns, track spanning,\nexplicit placement, and subgrid.\n\nOther people instead believe Masonry should be its own separate display type.\nAt first glance, defining Masonry with a new display type might make a lot of\nsense. You do get a tidy separation between layout types.\n\n    \n    \n    display: block; display: inline; display: flexbox; display: grid; display: masonry;\n\nThe CSS Working Group has not discussed how the syntax for a separate Masonry\ndisplay type would work, but perhaps it would be patterned after Multicolumn\nlayout.\n\n    \n    \n    main { display: masonry; columns: 28ch; }\n\nOr perhaps the syntax would be patterned after Grid, but with significant\nlimitations:\n\n    \n    \n    main { display: masonry; masonry-columns: repeat(5, minmax(28ch, 1fr)); /* where only one repeating width is allowed */ }\n\nEither way, it\u2019s clear that advocates of this option want Masonry to be\nlimited to a symmetrical grid \u2014 where all the columns are the same size as\neach other. None of the rest of CSS Grid\u2019s track sizing capabilities would be\nallowed.\n\nMaking masonry a simple and separate layout type would avoid the work\nnecessary to keep Grid and Masonry working together in combination \u2014 both now\nand in the long term. Doing this would simplify the layout model, make it\neasier to implement in browsers, reduce the potential for performance traps,\nand allow the feature sets of Grid and Masonry to diverge.\n\nConversely, we believe the effort needed to add this capability to CSS Grid is\nworth the many benefits to be had. The CSS Grid Level 3 specification has\nalready been written, and implemented in two browser engines. And yes, while\nmaking CSS Grid more complex will make it harder to extend in the future, we\nbelieve there\u2019s an advantage to having these two types of grid layouts\nintertwined. This way the CSS Working Group will always define all new\nadditions for both modular and columnar grids. There won\u2019t be something added\nto display: grid that will be left out of display: masonry, or vice versa. For\nexample, many developers want CSS Grid Level 4 to provide a mechanism for\nstyling grid areas and grid lines \u2014 perhaps a way to add a background color to\na track, or create a rule line in a gap. It\u2019d be great to ensure that will\nwork for both modular and columnar grids from Day 1.\n\nAnother argument made by advocates of display: masonry is that that masonry is\nconceptually a fundamentally different layout type from CSS Grid, and\ntherefore should have its own display type. They often describe CSS Grid as\ninherently being about \u201clining things up in two-dimensions\u201d, and since masonry\nonly lines things up in one dimension, \u201cit\u2019s not a grid\u201d. (In fact, some have\nadvocated that Masonry is more like Flexbox, since \u201cboth line things up in one\ndirection\u201d.)\n\nIn many ways, your perspective on this question might depends on what you\nimagine a grid is.\n\n## What is a grid?\n\nGrids are an incredibly important aspect of graphic design. Grids are used to\nline up text, images and other content in a regular pattern. They help\nreadability and usability by making things predictable.\n\nYou can trace their use through thousands of years of history.\n\n[Left] Antoine V\u00e9rard published a French translation of Boccaccio in 1498.\nSeen in Thirty Centuries of Graphic Design, by James Craig and Bruce Barton,\n1987. [Right] A Russian illustrated sheet proclaiming that \u2018Hops are head\nabove all other fruit\u2019. Seen in Books: A Living History by Martyn Lyons, 2011.\n\nIt wasn\u2019t until the 20th century that European and American modernists started\npromoting the idea that \u201cproper\u201d graphic design grids should line content up\nin both directions \u2014 in rows as well as columns.\n\nMassimo Vignelli is especially well-known for promoting the idea that lining\nthings up in both columns and rows is a superior practice of graphic design.\nTwo examples from The Vignelli Canon, 2010.\n\nEven today, there is a lot of debate about which type of grid is the best grid\nor the only legitimate grid. Many designers claim a 12 column grid is the only\ncorrect way to design a web page \u2014 or 12 columns for \u201cdesktop\u201d, 8 columns for\n\u201ctablet\u201d, and 4 columns for \u201cphones\u201d. At times designers have gotten quite\nreligious about their ideas of what a \u201cproper grid\u201d looks like.\n\nMark Bouton argued for years that symmetrical columnar grids are incredibly\nformulaic and boring. He promoted the use of asymmetrical compound grids in\ndesign for the web. Today, luckily CSS Grid Level 1 makes it incredibly easy\nto create both asymmetrical grids and compound grids, giving designers the\nfreedom to create what they want. But only if they also want all their grids\nto be a modular grids.\n\nBoth modular and columnar grids are in fact grids. And CSS Grid deserves the\nability to also create columnar grids.\n\nIdeas for designing columnar grids, in Editing by Design, by Jan V. White.\n\nWe believe there\u2019s an opportunity for CSS to enable a rich history of design\ngrids to come to the web \u2014 and would be greatly disappointed to see the new\nmasonry feature limited to only allowing symmetrical columnar grids.\n\nBut what do you think?\n\n## We want to hear from you\n\nThis is where you come in. Try some demos of your own. Write about your\nthoughts on your own blog. Comment at the CSS Working Group in this issue.\n\n  * Should \u201cmasonry\u201d/\u201cwaterfall\u201d be part of CSS Grid?\n  * Do you want the capabilities to define a columnar grid with CSS Grid \u2014 to use subgrid, spanning, explicit placement, and all the many options for track sizing? Or do you only want the ability to define a classic masonry layout with equal-sized columns?\n  * Will you use this? What might you create with it?\n  * Do you have links to demos you\u2019ve made? We want to see your ideas and use cases.\n  * Are there things you want to do that you can\u2019t do with this model?\n\nOften, thinking about something theoretically and actually seeing it in use\ncan be very different. To make sure the CSSWG gets the design of this feature\ncorrect, we need developers to gain some hands-on experience, and articulate\nyour thoughts about what it\u2019s like.\n\nThe WebKit team has been working on Masonry for a year and a half. It was\nfirst enabled by default in Safari Technology Preview 163 in February 2023.\nThere\u2019s a bit more polish needed, and details to work out (naming being one).\nBut we would like to ship this feature soon. To do so, these fundamental\nquestions need to be resolved.\n\nThank you for your help!\n\n## P.S. About the name...\n\nIt\u2019s likely masonry is not the best name for this new value. Names in CSS are\nusually simple words that directly describe the result they create \u2014 like\ncenter, under, contain, clip, revert, ltr, always, break-word, hidden, allow-\nend, scale-down, wrap, smooth.\n\nThe word \u201cmasonry\u201d is more of a metaphor, where the meaning has to be\nexplained with a backstory. Such a term is harder to remember for developers\nwho do not speak English. And arguably, the syntax could just as easily be\ngrid-template-rows: waterfall instead, since that\u2019s the dominant word for this\nlayout used in certain regions, not masonry.\n\nPlus, once you start to write a lot of code using this feature, it\u2019s likely\nyou\u2019ll come to the realization that we did \u2014 this really isn\u2019t about the\nlayout used by Pinterest or other similar sites. This is a mechanism for\ntelling the browser, \u201cplease create a grid, but without any rows.\u201d\n\nPerhaps the best syntax could be grid-template-rows: none; to convey \u201cplease\ndo not give me any rows\u201d. Sadly, it\u2019s too late to use this name, because none\nis the default value for grid-template-* and means \u201cplease give me only\nimplicit rows, no explicit ones\u201d.\n\nInstead we could use the name off to convey \u201cplease turn off the grid in the\nrow direction, and give me only columns\u201d.\n\n    \n    \n    main { display: grid; grid-template-columns: repeat(auto-fill, minmax(14rem, 1fr)); grid-template-rows: off; }\n\nThe CSSWG is debating this name in this issue. If you have ideas or\npreferences for a name, please join that discussion.\n\nMeanwhile, masonry is the value that is currently implemented in Safari\nTechnology Preview, since that\u2019s what the Editor\u2019s Draft currently uses. And\nso that\u2019s what we used in our demos above, and what you should use in yours.\nBut do expect the name of this value to change in the future. And perhaps\nprepare for a future where we call this \u201ccolumnar grid\u201d or \u201cGrid Level 3\u201d\ninstead of \u201cMasonry\u201d.\n\nPreviouslyRelease Notes for Safari Technology Preview 192Learn more\n\n", "frontpage": false}
