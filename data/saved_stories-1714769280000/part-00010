{"aid": "40248232", "title": "PostgreSQL mistakes and how to avoid them with Jimmy Angelakos", "url": "https://www.simplyblock.io/post/postgresql-mistakes-and-how-to-avoid-them", "domain": "simplyblock.io", "votes": 2, "user": "noctarius", "posted_at": "2024-05-03 14:41:05", "comments": 0, "source_title": "PostgreSQL mistakes and how to avoid them with Jimmy Angelakos", "source_text": "PostgreSQL mistakes and how to avoid them with Jimmy Angelakos\n\ntop of page\n\nChat with us\n\n#### simplyblock and Kubernetes\n\nSimplyblock provides high-IOPS and low-latency Kubernetes persistent volumes\nfor your demanding database and other stateful workloads.\n\nBook a demo\n\n  * Chris Engelbert\n  *     * 24 hours ago\n    * 11 min read\n\n# PostgreSQL mistakes and how to avoid them with Jimmy Angelakos\n\nThis interview is part of the Simplyblock's Cloud Commute Podcast, available\non Youtube, Spotify, iTunes/Apple Podcasts, Pandora, Samsung Podcasts, and our\nshow site.\n\nIn this installment of podcast, we're joined by Jimmy Angelakos (X/Twitter), a\nfreelance consultant, talks about his experiences with customers running\nPostgreSQL on bare-metal, in the cloud, and on Kubernetes. He also talks about\nhis new book \"PostgreSQL Mistakes and How to Avoid Them\".\n\nChris Engelbert: Welcome back everyone. Welcome to the next episode of\nsimplyblock's Cloud Commute podcast. Today I have a very interesting guest,\nvery different from the other ones before, because he's actually an author,\nwriting a book right now. Well, I think he already published one or two at\nleast. But he'll talk about that himself. Welcome, Jimmy.\n\nJimmy Angelakos: Hi, very nice to be here.\n\nChris Engelbert: Very nice. Thank you for being here. Maybe we just start\nsimple with the basic stuff. Who are you? Where are you from? What do you do\nfor a living? Except for writing a book.\n\nJimmy Angelakos: My name is Jimmy Angelakos, which is obviously a Greek name.\nI live in Edinburgh in Scotland. I've been working with Postgres for maybe\naround 16 years now, exclusively. I haven't used any other database in 16\nyears in a professional capacity. Naturally, the time came to share my\nexperiences and I wrote a couple of books on this. Well, I actually co-wrote\nthe \"PostgreSQL16 Administration Cookbook\" with my lovely co-authors Boris\nMej\u00edas, Gianni Ciolli, Vibhor Kumar, and the sadly departed Simon Riggs, who\nwas an awesome fellow. I'd like to pay a little tribute to him as a person, as\na mentor to the entire Postgres community. He will be greatly missed.\n\nChris Engelbert: Thank you very much. I appreciate you sharing that because I\nthink it was last week at the time of recording. It is a sad story for the\nPostgres community as a whole. Thank you for sharing that. From your\nprofessional life, for the last couple of years next to writing books, I think\nyou're mostly working as a consultant with a couple of different companies and\ncustomers. What do you think is the most common task? I mean, you're probably\ncoming in to help them optimize Postgres, optimize queries.\n\nJimmy Angelakos: Right. I've done all sorts of things in the past few years,\nlike training customers to use Postgres in general, training them to use\nPostgres in a specific way that is suited to their needs. I have provided\nsupport to customers who ran Postgres, and also professional services like\nconsulting. I can't really say what the thing they use the most is or they\nrequest the most, but I can tell you a few of the things. Some customers come\nin and say, \"My queries aren't running well. What can I do?\" It's like the\nmost frequent thing you hear. Some other people say, \"Tell me what hardware to\nbuy for Postgres.\" You tell them, \"I can't really give you a response because\nit really depends on your workload,\" which is the most important factor, I\nthink, with databases. Everyone uses them differently. If it's a database that\nis widely used as Postgres with so many use cases and so many different ways\nto use it, you can do analytics on it. To an extent, you can use it for\ntransaction processing (OLTP), you can use it as a document database, with\nJSONB. There's all sorts of things you can do. There's no good answer to the\nthings that people ask like, \"Give me the best tuning parameters for\nPostgres,\" or \"How to write a query the right way.\" It really depends on the\namount of data you have, the type of data you have, and the sort of queries\nyou're going to be running.\n\nChris Engelbert: Yeah, that makes a lot of sense. It's not only for the\nPostgres community or for Postgres. That is very true for a lot of things.\nFrom my own personal background, with a lot of programming languages or\nruntime environments, people ask, \"What is the optimized or the optimal way of\nconfiguring it?\" And they're like, \"I don't know. Can't give you the answer.\"\nSo, yeah, I hear where you're coming from. All right, so... Sorry, I'm still\nhaving a little bit of a flu. So, from your personal background, you said\nyou've co-written one book, but I also hinted on the fact that you're writing\nanother book right now, and I looked a little bit into it because it's on\nManning and it has Early Access, which is nice. But maybe you can give us a\nlittle bit of an insight of what you're writing about.\n\nJimmy Angelakos: Right. So, the book that is under construction is called\nPostgreSQL Mistakes and how you can avoid them. So, it's a bit of an anti-how-\nto. So, for people that are used to how-to books, like, \"How do I partition?\nHow do I do this? How do I do that?\" It's a bit of the other way around. I was\ntrying to do this, but things went wrong. So, it's experiences that I've\ncollected from the things I've seen our customers do or the things I've done\nin the past.\n\nChris Engelbert: Right.\n\nJimmy Angelakos: And it's really important to learn from mistakes. Everyone\nmakes mistakes. And Postgres is very particular in how it wants things done.\nSo if you get it right, the database is fantastic. It works very well with\nexcellent performance. And when you start to do things a different way, you\ncan see different results. And that's basically the whole idea. There's three\nchapters. Three chapters up on the web now. And there's a huge fourth chapter\nthat's being published as we speak. That has anti-patterns that are not really\nrestricted to Postgres. It's things like, don't improvise, don't create your\nown distributed systems. There's people that have spent hundreds of thousands\nof hours working on these problems, and you don't need to reinvent the wheel.\n\nChris Engelbert: I hear you. As you said, there's three chapters out right\nnow. I haven't seen the fourth one yet, so I think I have to look into that\nright after the recording.\n\nJimmy Angelakos: Manning are in the process of publishing it as we speak.\n\nChris Engelbert: All right, cool. But so far, I really like the second chapter\nand you bringing up all of the SQL code examples and showing the execution\nplans. And I think just by saying the word execution plan or the term\nexecution plan, I probably lost half of the audience right now. So maybe you\ncan give them a little bit of a feeling of what is an execution plan? Why is\nit so important to understand those things?\n\nJimmy Angelakos: Yeah, so Postgres has a quasi-intelligent query planner,\nwhich basically examines the way your query is written and produces a plan on\nhow it's going to get executed by the database server. It's like, oh, they\nwrote this, where, this, and that, and it looks like a join. So I'm going to\nperform a join of these tables and then I'm going to order the results in\nthis. So that's the execution plan. It's basically telling you how the\ndatabase is going to execute your SQL query. Now, the planner takes into\naccount things such as how much memory do you have or how fast are your disks\nthat you've already specified in the Postgres configuration. It also takes\ninto account things like what's the nature of the data? What's the\ncardinality, let's say, in your tables? And these are things that are updated\nautomatically by Postgres itself in its statistics tables. So it produces,\nmost of the time, a really good plan. And what is a good plan? It's the\ncheapest plan in terms of arbitrary cost. And arbitrary cost is calculated\nusing those factors that I just mentioned. And it iterates through many plans\nfor the execution, chooses the cheapest one, which will probably end up being\nthe fastest one to execute in real-world terms. And seeing the execution plans\nis key to understand why your queries are running well or why they're running\nslowly. Because then you can see, ah, this is what Postgres was trying to do.\nSo maybe I should force its hand by writing this slightly differently.\n\nChris Engelbert: Yeah, that's true. I think my personal favorite example is a\ncommon table expression, which ends up being a join because the query planner\nunderstands now a join is actually better. I don't need to do the temporary\nheap table to store the intermediate result. So we kind of hinted where people\ncan find the early access version. It's at Manning. Do you want to add\nanything more to that? Maybe have a specific simple URL or something where\npeople can find it.\n\nJimmy Angelakos: I can share the URL, but I certainly cannot spell it out.\n\nChris Engelbert: Ok, that's fair enough. We're going to put it in the show\nnotes. That's totally fine.\n\nJimmy Angelakos: Thanks very much. Yeah, I think it's going to be an\ninteresting book because it's real-world use cases. And where it isn't a real-\nworld use case, it's close enough. And I will tell you so in the text.\n\nChris Engelbert: That is true. And I agree. As I said, I've well kind of read\nthrough the first three. I read as much as I had time, but I really enjoyed\nit. And many of those code examples you brought up, as I said, especially in\nthe second chapter, they were like, yes, either I've been there or I had\npeople helping with that as well. I've worked for a Postgres based startup in\nthe past. And we had people asking pretty much the same questions over and\nover again. So yes, for everyone using Postgres or starting using Postgres,\nit's probably a pretty, pretty good pick.\n\nJimmy Angelakos: Thank you. I appreciate that. Yeah, as you know, people are\nfamiliar with other databases because Postgres has most recently exploded in\npopularity. It was kind of a niche database for a few years. And now it looks\nlike all the enterprises are using it, all the hyperscalers are starting to\nuse it, like AWS, Google, Azure. This means that they have recognized the\nvalue that Postgres brings to the table.\n\nChris Engelbert: Yeah, I agree. And I think it's kind of interesting because\nyou kind of hinted at that earlier. But you can do a lot of things with\nPostgres. There is a lot of stuff in Postgres itself. If you want document\ndatabase, you have XML and JSON. If you want key value, you have hstore. But\nthere is also a really good extensibility to Postgres, giving you the chance\nto plug everything else in, like time series, graph databases. I don't know\nwhat else. You probably could define Postgres as the actual really only in the\nworld multimodal database.\n\nJimmy Angelakos: Right, yeah. And we were actually considering of changing the\ndescription of Postgres on the website, where you go in and it says it's an\nobject relational database, which is kind of a formal, traditional way to put\nit. But nowadays, you're right. I think it's more of a multimodal database.\nAnd I think that is also the term that Simon Riggs preferred. Because it does\nall of these things and can also let you do. Things that the developers of\nPostgres hadn't even thought of because of the extension system. Like a very\nfamous extension is PostGIS, which is the GIS (geospatial) capabilities for\nPostgres, and is now considered the gold standard in geographical databases.\n\nChris Engelbert: True.\n\nJimmy Angelakos: From an open-source extension to an open-source database. And\nthere's like thousands of people that are professionally employed to use this\nextension in their day jobs, which is amazing.\n\nChris Engelbert: True. I agree. So let me see. Let me flip back a little bit.\nI mean, we're officially a cloud podcast. We talked a lot about the cool\nPostgres world. And I was part of a Postgres world. I was part of the Java\nworld. So that is mostly the guests I had so far. But because we're a cloud\npodcast, what do you think, like working with all the different customers,\nwhat is your feeling? Like how many people are actually deploying Postgres in\nthe cloud, in Kubernetes, in EC2, or anything like that?\n\nJimmy Angelakos: Well, the company I'm working with right now are using it on\nRDS. They're using RDS Postgres because it suits their use case better in the\nsense that they don't have a team that wants to worry about replication and\nbackups and things like that. And availability zones, they want that handled\nas a service. And that fits their use case quite well. When you want more\nflexibility, you can still use the cloud. You can run, for example, Postgres\non Azure boxes or EC2 boxes or whatever you want. But then you have to take\ncare of these things yourself.\n\nChris Engelbert: Right.\n\nJimmy Angelakos: But it still gives you freedom from having to worry about\nhard drives and hardware and purchase orders and things like that. You just\nsend off a check every month and you're done. Now, Kubernetes is an\ninteresting case. There's a couple of operators for Postgres. The most recent\none is Cloud Native PG, which is starting to get supported and getting\ntraction from the Cloud Native Computing Foundation, which is great. And they\nare trying to do things in a different way that is totally cloud-native. So\neverything is defined as a resource in Kubernetes. But the resources map to\nthings that are well known in Postgres, like clusters and nodes and backups\nand actual things so that you don't have to perform black magic like running\nit in a pod, but also having to configure the pod manually to talk to another\npod that is your replicant, things like that. And there are other operators\nthat have evolved over time to approximate this ease of use. I think the\nCrunchy Data Operator comes to mind. It started off being very imperative.\nThey had a command-line utility that created clusters and so on. And now\nthey've turned it into a declarative, which is more cloud-native, more\npreferred by the Kubernetes world.I think these two are the major Postgres\nthings that I've seen in Kubernetes, at least that I've seen in use the past\nfew years. There are still things that haven't been sorted because, as we\nsaid, Postgres is super flexible. And this flexibility and the ease of use of\nKubernetes, where everything is taken care of automatically, comes at a cost.\nYou have reduced flexibility when you're on Kubernetes. So there's things that\nhaven't been totally worked out yet, like how do you one-click migrate from a\ncluster that is outside Kubernetes to something that is running in Kubernetes?\nOr can you take a backup that was produced elsewhere and create a cluster in\nKubernetes, a Postgres cluster from that backup? Now, once they have these\nthings sorted and also hardware support is very important when you're talking\nto databases, I think we'll see many more people going to Postgres on\nKubernetes in production. But specifically hardware and specifically disk\nperformance and throughput and latency, you have to get into the hardware\nnitty-gritty of Kubernetes to take maximum advantage of Postgres because as a\ndatabase, it loves fast disks. Generally speaking, the faster your disk, the\nfaster Postgres will go.\n\nChris Engelbert: That is true. And just like a shameless plug, we're working\non something. But because we're running out of time already, 20 minutes is\nalways so super short. What do you think is going to be the next thing for\nPostgres, the database world, the cloud world, whatever you like. What do you\nthink is the next thing?\n\nJimmy Angelakos: I can't give you an answer, but you can go search on YouTube\nand you can find Simon's last contribution to the Postgres community. He gave\na talk at PostgreSQL Conference Europe last December where he said \"Postgres,\nthe next 20 years\" or something to that effect. And he predicted things, how\nthings will go for Postgres in the future and future directions. That's a very\ninteresting talk for anyone who wants to watch that. I wouldn't want to hazard\na guess because I've seen people just blindly accept the thing that AI is the\nnext big thing. And everything in Postgres and databases and Java and Python\nis going to revolve around AI in the future. That remains to be seen.\n\nChris Engelbert: I like that because normally I start to say, please don't say\nAI. Everyone says that. And I think AI will be a big part of the future, but I\nagree with you. It remains to be seen how exactly. Yeah, thank you very much.\nWe're going to put the video link in the show notes as well for everyone\ninterested. And yeah, Jimmy, thank you very much. It was a pleasure having\nyou.\n\nJimmy Angelakos: Thanks very much. I appreciate the invitation.\n\nChris Engelbert: My pleasure. And for the audience, we're going to see or hear\nus next week. And thank you very much for being here.\n\n  * PostgreSQL\n  * \u2022\n  * kubernetes\n\n## Recent Posts\n\nSee All\n\nBlock Storage Volume Pooling for the Cloud-Age\n\nKubernetes: Future or Fad?\n\nProduction-grade PostgreSQL on Kubernetes with \u00c1lvaro Hern\u00e1ndez Tortosa from\nOnGres\n\nSimplyblock is the first company to build a container storage system for\nKubernetes, specifically designed for latency-sensitive, IO-intensive, cloud-\nnative stateful workloads, such as databases, analytics, crypto / blockchain,\ndocument storages, and others.\n\nA fully distributed storage solution, built upon our VASHTM technology,\noffering seamless scalability without downtimes, and is highly optimized for\nAWS NVMe\u00ae (io1/2) and gp3 volumes.\n\n##### Subscribe to keep updated\n\n###### Products\n\nWhy Simplyblock\n\nFrequently Asked Questions\n\nGlossary\n\n###### Use Cases\n\nKubernetes Container Storage\n\nDatabase Storage\n\nCrypto / Blockchain Storage\n\nData Warehouse Storage\n\nCDN / Shared Webserver Storage\n\nFile / Asset Storage\n\nSupported Technologies\n\n###### Compare\n\nSimplyblock vs Amazon EBS\n\nSimplyblock vs Ceph\n\n###### Resources\n\nDocumentation\n\nBlog\n\nWhitepapers\n\nWebinars\n\nCase Studies\n\nPricing\n\n###### Support\n\nSupport\n\n###### Company\n\nAbout\n\nCareers\n\nNewsroom\n\nPress Releases\n\nBrand\n\nContact Us\n\nCloud Commute Podcast\n\n\u00a9 2024 Simplyblock Gmbh | All Rights Reserved.\n\nImprint\n\nPrivacy Policy\n\nThe NVM Express & Design\u00ae and the NVM EXPRESS\u00ae NVMe\u00ae, and NVMe-oFTM word marks\nare registered or unregistered service marks of NVM Express, Inc. Amazon Web\nServices, AWS, the Powered by AWS logo, Amazon EBS, Amazon EKS are trademarks\nof Amazon.com, Inc. or its affiliates. Intel and the Intel logo are trademarks\nof Intel Corporation or its subsidiaries.\n\nbottom of page\n\n", "frontpage": false}
