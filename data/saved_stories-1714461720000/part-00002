{"aid": "40205017", "title": "How to Fund FOSS, Save It from the CRA, and Improve Cybersecurity", "url": "https://gavinhoward.com/2023/11/how-to-fund-foss-save-it-from-the-cra-and-improve-cybersecurity/", "domain": "gavinhoward.com", "votes": 3, "user": "nomdep", "posted_at": "2024-04-29 22:45:45", "comments": 0, "source_title": "How to Fund FOSS, Save It from the CRA, and Improve Cybersecurity | Gavin D. Howard", "source_text": "How to Fund FOSS, Save It from the CRA, and Improve Cybersecurity | Gavin D. Howard\n\n# About\n\n# Contact\n\n# Archive\n\n# Categories\n\n# Tags\n\n# Subscribe\n\n# How to Fund FOSS, Save It from the CRA, and Improve Cybersecurity\n\n28 Nov 2023\n\nTech: Professionalism\n\n  * Big Tech\n  * Blender\n  * Blender Foundation\n  * CRA\n  * Cybersecurity Resilience Act\n  * Fault\n  * FOSS\n  * Free and Open Source Software\n  * Liability\n  * Microsoft\n  * Open Source\n  * Professionalism\n  * Tech\n\nToggle Warnings Toggle Notes\n\nPlease see the disclaimer.\n\nAssumed Audience: Hackers, programmers, and anyone in the tech industry. But\nespecially EU-level politicians who might vote on the CRA.\n\nEpistemic Status: Only somewhat confident, but absolutely confident that the\nideas herein have some chance of improving the status quo.\n\nDiscuss on Hacker News and Reddit.\n\nPlease send this post to EU politicians.\n\n## Introduction\n\nProgrammers are terrified. And rightfully so.\n\nThere is a monster, a colossus that may sweep into the shining City of Open\nSource and trample it all with less care than Godzilla.\n\nThis beast is the child of desire for better software, but it has grown into a\ncaricature with the opposite effect.\n\nThis leviathan freak is Europe\u2019s Cybersecurity Resilience Act.\n\nThere\u2019s a lot of bad (and you should read about it), but to speedrun the parts\nI care about:\n\n  * All software (\u201cdigital products\u201d) must meet \u201cessential cybersecurity requirements.\u201d\n  * \u201cCritical\u201d software must be certified.\n\nOkay, doesn\u2019t sound too bad, right? We all want companies to improve...\n\n<whisper>It includes Open Source software that take donations.</whisper>\n\nSon of another rippin\u2019 sandstorm! That\u2019s a disaster!\n\n## The Solution\n\nSo what if I told you there is a solution that would not only save Open\nSource, but fund it and improve cybersecurity? Would you believe me?\n\nIf you don\u2019t, well, you can quit reading now and pretend ignorance. And don\u2019t\nlet the boot hit you on the way out.\n\nBut if you are at least curious, you probably think there is a catch.\n\nI won\u2019t bury it; the catch is this: we must own the responsibility society is\ntrying to give us and act like it!\n\n### Accepting Liability\n\nOh, you don\u2019t know what taking responsibility means?\n\n<mutter>Kids these days.</mutter>\n\nThe meaning of responsibility is accepting liability if you get paid.\n\nThat\u2019s it. That is all.\n\nIf you make it and sell it, you better make it right.\n\nIn both senses of \u201cmaking it right.\u201d\n\n### A Legal Framework\n\nOf course, if we\u2019re going to do this, we need some system, and the CRA\nobviously ain\u2019t it.\n\nPeople talk about the CRA being \u201cvague\u201d and \u201cbroad,\u201d but those terms are nigh\nnonsensical.\n\nLet me lay out why the CRA is bad: it creates liability between parties that\nmay have no business relationship!\n\nYou could take FOSS that I wrote, and if I happen to accept donations, I\u2019m now\nliable to you even though you paid me nothing.\n\n\u201cBut Gavin, we do the same thing for products.\u201d\n\nNot really.\n\nYes, a physical product does still need to meet minimum standards. But if you\nget a physical thing for free from someone else (free couch on the curb,\nanyone?), that person no longer has any claim on the manufacturer.\n\nSoftware is different. If I give you some software from someone else, that\ndoes not deprive me of that software, so the author is now liable for us both.\n\nLiability for software can grow without bound.\n\nIn addition, software is \u201cpure thought-stuff\u201d, so it is not limited by\nphysical constraints, for the most part. This means that software can become\nmore complex than the most complex physical objects we could build.\n\nExample: you make a physically accurate physics engine. And then add a dragon\nto it.\n\nAnyway, software is different, and we need a different legal framework.\n\n#### Fault Flow Matches Money Flow\n\nSo let\u2019s use fault flow, er, liability protection, to fix the CRA.\n\nWith the CRA as it is, you are basically liable to all of society as a whole.\n\nThat cannot work; that is unsustainable, maybe even for the largest companies!\n\nEven as someone who wishes for proper liability in the industry, that thought\nis petrifying!\n\nSo the most important change we need to make to the CRA is that fault should\nonly flow upstream when money does.\n\nIf there is no monetary business relationship, the software author should have\nzero liability.\n\nBarring negligence and malice.\n\nNo poisoning free cookies, Mallory.\n\nThis one simple change saves Open Source. Period. No questions asked.\n\nWhy? Because Open Source projects don\u2019t have business relationships. At least,\nthe ones we care about don\u2019t.\n\nMost importantly, our Nebraska rando will be saved from lawsuits!\n\nOne little detail that we must not forget: since fault flow matches money\nflow, that means that whenever money does flow, whoever receives it must\naccept liability.\n\nThis is the part that gives this teeth, and this is why it needs to be done in\nlaw like the CRA; if contracts could still disclaim liability, they will, so\nwe need to make it illegal to do so.\n\n#### Money in Open Source\n\n\u201cBut Gavin, a lot of FOSS projects I care about take money, so that\nrequirement will hurt them.\u201d\n\nAu contraire! It gives them a built-in business model!\n\nLet\u2019s take Blender as an example. They get donations from some of the biggest\ncompanies.\n\nWell, those companies pay to ensure Blender works on their hardware (Intel,\nDell, nVidia and AMD), so the liability that the Blender Foundation has is\nthat Blender will work on that hardware.\n\n\ud83d\ude10\n\nUm, yes, that\u2019s what they are already paying for. Blender would have no\nproblem if this proposal happened. In fact, they might get more money as more\nstudios that use Blender now must pay or accept liability.\n\nAnd that is the built-in business model: actual FOSS maintainers would accept\nthe fault flowing back to them and get paid for it.\n\nStarting a career in FOSS would become almost comically simple: start a\nbusiness or non-profit around some software, work on it on the side until it\ngrows enough revenue to support you full-time, and then quit your day job in\nfavor of your business.\n\nNo fiddling with business models, no trying to \u201csell\u201d your software (for\nmoney) or tug on heartstrings to drum up donations.\n\nYou make a project, you get programmers to use it for free (\u201cooh, shiny new\nthing!\u201d), and you have a business as soon as they start using your code in\nemployment.\n\nLike stealing a bone from a puppy.\n\nOf course, people do have to use your software, but I\u2019m not the greatest\nsalesman, and I got a project into Mac OSX. How hard could it be?\n\nFamous last words.\n\n\u201cBut Gavin, I would still have to found a business or a non-profit!\u201d\n\nWell, yeah, receiving money is work.\n\nBut after having spun up an LLC with the ability to receive money, I can say\nthat it\u2019s not too hard.\n\nAnd if there are lawyers out there who use Open Source, you can pay it back by\nguiding maintainers in setting up these orgs pro bono. Just sayin'.\n\nAt that point, you have an actual, real-life entity that businesses can send\nmoney to. Businesses love sending money to entities rather than people.\n\nFor bonus points, you can use something like GnuCash to create \u201cofficial\u201d\ninvoices; businesses will snarf that like my wife snarfs sushi!\n\nYou get all this for a one-time payment of a week or two of your spare time.\nAnd bits and pieces here and there.\n\nThen if your project is good enough, and companies start using it, they\u2019ll\ncome to you. Easiest sales ever.\n\nAnd if nothing happens, well, you didn\u2019t even quit your job, so no biggie.\n\nBut in general, I would bet my entire lifetime earnings that:\n\n  1. More money would flow into Open Source,\n  2. More people would be able to make a living on their FOSS projects.\n\nAnother example: OpenSSL was sorely lacking funds at the time of Heartbleed.\nAnd they got a measly $9000 after.\n\nWut.\n\nSurely if this proposal became law, OpenSSL would be flooded with cash.\n\nOh, that would be a good day. And I believe that story would not just happen,\nit would be common.\n\nOur Nebraska rando would actually get money!\n\n\u201cBut I just want to work on my project as a hobby!\u201d\n\nAh, yes, I feel you. That\u2019s still a good choice.\n\nAnd this will actually make it easier.\n\nJust don\u2019t set anything up. And if anyone files a bug report or a feature\nrequest that you just don\u2019t want to deal with, simply remind them, \u201cThis is my\nhobby. Go away.\u201d\n\nThey\u2019ll flee to the projects that do accept money, because those projects will\nexist, and you\u2019ll have the peace you want with a good hobby and no burn out\nfrom entitled users!\n\nWin-win!\n\n#### Better Software\n\nIt gets better; with this proposal, software would magically get better.\n\nI get that you\u2019re worried about your favorite FOSS project that receives\ndonations.\n\nYou may ask, \u201cWould they really be forced to accept liability if they take\nmoney?\u201d\n\nYep! And that\u2019s a good thing!\n\nFOSS projects would have to hit the brakes on features and stabilize\neverything; \u201cit\u2019s not 1.0 yet\u201d or \u201cmove fast and break things\u201d are not a valid\nexcuses in the eyes of the law.\n\nAnd that applies to not-so-free software, too!\n\nThis shift would incentivize the \u201cboring\u201d work that makes software great\nbecause if accepting money means putting your neck on the line, I\u2019m sure most\ncode \u201cninjas\u201d in FOSS and companies would slacken speed and magically find the\ntime to make an exceptional test suite.\n\nIn other words, by requiring liability, software would get better, almost like\nall of the \u201creasons\u201d companies and FOSS projects gave were excuses all along.\n\nAnd I\u2019m sure you\u2019d like that, even for your favorite FOSS project.\n\n#### Closing Loopholes\n\nBut besides the work that money would bring (<s>ugh, how awful!</s>), there\nare a few more problems.\n\nFirst, companies might try to claim that they are not distributing software if\nthey have a web app or something similar.\n\nPersonally, I think that if the software is available for public use, it\nshould count, and those users deserve the same things. If it\u2019s a web app, or\nan arcade machine, OEM software, or even a IoT toaster, it counts.\n\nSecond, companies like Google may try to claim that since their services are\n\u201cfree,\u201d they shouldn\u2019t be subject to the law.\n\nNaw, bruh, we\u2019ll just redefine data and ads as equivalent to money in the case\nof digital services and products. If a consumer gives up data, even\nunknowingly, or is served ads, they are a user deserving of liability\nprotection. Simple as.\n\nThird, how shall we fix the boundless liability problem caused by easily\ndistributing software?\n\nThis one is more complicated and requires politicians to play along.\n\nBecause the other thing the law should do is define two types of liability:\ndirect liability and redistribution liability.\n\nAnd the law must only allow those two types; contracts should not override\nthem.\n\nDirect liability is the liability you think it is: I make software, I give you\nsoftware, I take payment, I accept liability for your use of the software. I\nam directly liable to you and you only.\n\nBut what if my software is a library, and you want to redistribute it as part\nof your own program? Should I be liable to your users?\n\nOf course not.\n\nUnless I see as much green and gold as a Kansas cornfield. If you do, I would\ngive you redistribution liability protection.\n\nAt that point, yes, I would be liable to your users for bugs in my library.\n\n\u201cBut Gavin, how do we know if it was a bug in the library?\u201d\n\nWherever the fix was for the problem. If the fix is in my library, I\u2019m liable.\nIn your app? You\u2019re liable. In both? We\u2019re both liable.\n\n\u201cBut perhaps the docs were just not complete?\u201d\n\nThen I am liable. If I didn\u2019t document my library enough for you to use it\ncorrectly, that\u2019s on me because complete documentation is something a\nprofessional should create.\n\nYes, I went there. Write complete docs for your projects, people!\n\nNow, say I had a library, and you had a library that used mine. Say you got\nredistribution liability from me and distributed your library to a company\nthat built an app using your library. Then that company distributes the app to\nthe public.\n\nObviously, I am liable to that third-party company because you redistributed\ndirectly to them. But am I liable to that company\u2019s users?\n\nThe answer should be no.\n\nRedistribution liability must be only one level. This is key to preventing\nboundless liability.\n\nBut it also will have two good side effects.\n\nIn our example, that third-party company must figure out what their transitive\ndependencies are because they need redistribution liability from all of them.\n\nSo they get redistribution liability from you, and then they get\nredistribution liability from me.\n\nWe both get paid! Hooray! And I get paid twice as much because my library was\nmore foundational!\n\nThis would partially solve Daniel Stenberg\u2019s Open Source Pyramid Problem since\nfoundational software used everywhere would naturally accumulate more funds\ninstead of the reverse.\n\nThat\u2019s the first good side effect.\n\nThe second is like unto it: companies would actually figure out what\ndependencies they have! Complete Software Bills of Material would be the rule,\nnot the exception. And people would have a reason for cutting down excessive\ndep trees.\n\n## Should We Just Kill the CRA?\n\n\u201cWhy can\u2019t we just not have liability like it is now?\u201d\n\nSociety don\u2019t care. People with power don\u2019t care.\n\nAlas, high-class turn to grass your sorry working class mass enmasse if you\nmake morass that cause impasse and harass the brass in first-class.\n\nAnd besides, is our current system working?\n\nNo, it\u2019s not. Our software is terrible. Disclaiming liability is not working.\n\nIn fact, my personal opinion is that Microsoft\u2019s worst sin was not using its\nmonopoly power to push Windows or IE or Office; it was using its monopoly\npower to normalize disclaiming liability even when you pay.\n\nAbsolutely ludicrous.\n\nNow, I know what you\u2019re thinking; you think responsibility is a dirty four-\nletter word.\n\nWhen it\u2019s shortened to r12y, anyway.\n\nBut if you think that, you\u2019re a fool. And I\u2019mma show you why.\n\nFirst, even the US Federal Government is trying to do something. It\u2019s obvious\nthat society thinks the tech industry has jumped the shark, and it\u2019s not a\nbaby shark either; it\u2019s a Meg.\n\nTechies, and tech industrialists, we are responsible for this. It\u2019s our fault.\n\nWe have to own that responsibility.\n\nBecause society will compel us to.\n\n### Forced Responsibility\n\nIf you retort that society won\u2019t compel us to own responsibility because we\nhave no legal responsibility, you are a fool!\n\nI mean, yes, with laws as they are, we don\u2019t, but the CRA shows that society\nseems stupid bent on giving us that legal responsibility.\n\nWhy is society going that direction? Well...\n\n> We rule the world.\n>\n> The world doesn\u2019t know this yet. We don\u2019t quite know it yet.\n>\n> Other people believe that they rule the world, but they write the rules\n> down, and they hand them to us. And then we write the rules that go into the\n> machines that execute everything that happens on this planet nowadays.\n>\n> No law can be enacted without software; no law can be enforced without\n> software. No government can act without software.\n>\n> We rule the world.\n>\n> \u2013 Uncle Bob Martin, \u201cThe Future of Programming\u201d\n\nSociety has learned that we have the power to rule the world, and they want\nthat power back.\n\nYes, that\u2019s right: this is a power struggle, the kind of clash with the\nhighest stakes and the vilest tactics.\n\nOh, and on one side is all of society, including governmental nation-state\nactors with mammoth power who intend to keep it.\n\nWe, as an industry, might be \u201cpowerful,\u201d but when society decides to use\nactual force on us, we won\u2019t stand a chance.\n\n> You and I could go to jail for the code we write.\n>\n> \u2013 Uncle Bob Martin, Voxxed CERN 2019 Keynote\n\nOh, you think it won\u2019t happen? Well, let\u2019s expand Uncle Bob\u2019s above quote\nabout the Volkswagen emissions scandal:\n\n> ...The CEO of Volkswagen North America...said, and I quote, \u201cWell, it was\n> just a couple of software developers who did it for whatever reason.\u201d\n>\n> Now, it was a couple of software developers who did it...so those guys,\n> whoever they were, they put their fingers on the keyboard, and they typed\n> the cheating code.\n>\n> They\u2019re in jail, and they deserve to be in jail.\n>\n> You and I could go to jail for the code we write.\n>\n> \u2013 Uncle Bob Martin, Voxxed CERN 2019 Keynote\n\nThat\u2019s right: it has already happened!\n\nSo yeah, you\u2019re a fool if you think that can\u2019t happen to you!\n\nAnd I agree: those software developers deserve to be in jail.\n\n### Catastrophic Rage\n\nBut there\u2019s one tiny detail about the Volkswagen emissions scandal that may\nhave escaped your notice: nobody died.\n\nWhat if people did die? What if bad software caused a catastrophe?\n\nOf course, it will have to be a catastrophe, not a slow walk of death.\n\nYes, we are killing people everyday. Think about that and feel ashamed.\n\nWe\u2019ve been lucky so far that events like the Boeing 737 MAX scandal, which did\nkill people, have not stirred up rage.\n\nBecause three years before that scandal, Uncle Bob was prophetic:\n\n> And when [a catastrophe] happens (and it will happen, it has to happen; it\u2019s\n> just a matter of time), when this happens, the politicians of the world will\n> rise up, as they should, in righteous indignation, which they should have,\n> and they will point their fingers right at us, and they will ask us the\n> question, \u201cHow could you have let this happen?\u201d\n>\n> They won\u2019t point at our managers because our managers will say, \u201cOh it was\n> some software guys who did it for whatever reason.\u201d\n>\n> They will point at us, and they will ask us this question, and we\u2019d better\n> have an answer for them because if our answer is, \u201cWell, my boss made me do\n> that,\u201d that is not going to fly!\n>\n> \u2013 Uncle Bob Martin, \u201cThe Future of Programming\u201d\n\nSo we are running on borrowed time. Almost 5 years of borrowed time.\n\nA catastrophe will happen, and if the fury is furious enough, society might\nload us all onto a 737 MAX with an incompetent pilot and let it run out of gas\nmidair. Over a spittin\u2019 volcano.\n\nAnd if society decides we deserve that, I\u2019ll gladly be the one to fly that\nplane because I think I will agree.\n\nYes, I include myself in this. I am not blameless.\n\nTechies, and tech industrialists, we are not ready for the coming catastrophe\nand the pure, pristine rage that will follow.\n\n### Digital Chains\n\nBut even if we are all morqued, we will still be spared; the worst will be yet\nto come.\n\nWe are building digital chains right now, and they imprison everyone who ain\u2019t\nin the elite club.\n\nFor if we are morqued, our loved ones will survive to live in the world we\ncreated.\n\nDuring the power struggle, power centers will only gather more. And then\nthey\u2019ll use that power to stamp on the faces of your loved ones. Forever.\nEverywhere.\n\nYes, that includes you tech industrialists! You think governments are going to\nlet you act like quasi-governments? Nah, they\u2019ll oppress you too, or merck you\nif you fight back.\n\nEven if you are in a different country.\n\n### A Warning to Tech Industrialists\n\nAnd tech industrialists, while I have your attention, I have another warning\nfor you.\n\nI know you are loathe to give up your laurels built up by cheating common\npeople with buggy software.\n\nBut these changes are coming regardless because society can only tolerate so\nmuch. So if you want to limit the liability you have, you need to accept some\nliability.\n\nHow much? The same amount as physical objects at least.\n\nOf course, since software is more complex, it will be more work to get the\nequivalent reliability. And since software can do so much, we should hold it\nto a higher standard.\n\nIf you want a seat at the table to decide, you have to accept that liability\nupfront.\n\nNo more pushing untested software on consumers, no more updates.\n\nAnd if you want the least liability possible, this proposal is your best shot.\n\nAnd Google, you can go to company Hades if you dare to stop the \u201cdata and ads\nas money\u201d tack!\n\n## Our Best Chance\n\nSo yeah, liability will happen; it\u2019s just a matter of when and how.\n\nOur best chance to survive as an industry, and not meet Pele with a supersonic\nswan dive, is to get society on our side.\n\nEven better if we could win by gaining the favor of non-state actors; we could\nshake off those digital chains.\n\nAnd how to do that?\n\nWell, if we stand up right now, with a plan that will work for society and us,\nthey might accept it.\n\nBut we need to do it right now! Every day without a plan in place is a day\nwhere the snowball could smash us on its way down to our shining City of Open\nSource.\n\n## How to Be Professional\n\n\u201cOkay, Gavin, you got a plan?\u201d\n\nBoy, do I have a plan!\n\nIt\u2019s simple; we just need to emulate the best professionals: professional\nengineers.\n\n\u201cWhat makes them the best?\u201d\n\nThey actually can suffer consequences. And do.\n\n\u201cGavin, I don\u2019t hear of many professional engineers suffering consequences.\u201d\n\nThat\u2019s because the consequences made them get their snot together, so they\nactually know how to do their jobs!\n\n\u201cWait, are you saying that we don\u2019t know how to do our jobs?\u201d\n\nTHAT\u2019S EXACTLY WHAT I AM SAYING, YOU DUMB, DELUDED, DIMWITTED DOLT!\n\nAhem.\n\n### Professional Standard of Care\n\nWhat I mean is that professional engineers have strict standard practices they\nmust know and adhere to.\n\nBut if they do know and adhere to them, that is good enough.\n\nFor example, as far as I know, the engineers in the Tacoma Narrows Bridge\nCollapse never faced consequences. Why? Because the failure was the result of\na physical phenomenon that they were not expected to worry about.\n\nWhich has since changed, so if a bridge were to collapse due to the same issue\nnow, there would be consequences.\n\nBut there are consequences for engineering negligence, such as the legal\nconsequences of the Hyatt Regency walkway collapse.\n\nIn fact, I highlight that collapse specifically because of the legal changes\naround responsibility, which those responsible tried to deflect.\n\nThough the Engineer of Record for the Hyatt Regency, Jack D. Gillum,\nsupposedly regrets what happened, and did lose his license, if he was not\nwilling to directly compensate victims, I believe he didn\u2019t regret it enough.\n\nBut the key is that they do have to adhere to those practices, and they must\ndo so strictly.\n\n<whine>\u201cBuilding a set of best practices sounds hard.\"</whine>\n\nBullnanny! I made a checklist that would be a good start. And I\u2019m just one guy\nwith a gutsy grudge.\n\nWith a professional standard of care, all you need to do is follow it\nresponsibly and keep it up-to-date because every professional should\nconstantly update best practices as knowledge grows.\n\nDo that, and society will be satisfied, even if an accident happens.\n\nAnd if they\u2019re not, well, they just wanted an excuse to bring back volcano\nsacrifices anyway.\n\nSo taking on responsibility is not as bad as it sounds; just make sure you\nhave an up-to-date checklist that you follow more religiously than politicians\nlie.\n\nRandom plug: please read The Checklist Manifesto.\n\n### Professional Code of Ethics\n\nBut having just an up-to-date standard of care is not enough.\n\nWe need to have a standard of ethics too. With teeth.\n\nAnd yes, I made one already as well.\n\n\u201cBored!\u201d\n\nNo shim, Sherlock! Ethics are boring. But necessary.\n\nRemember the Volkswagen story? The CEO was all too happy to throw those\nprogrammers under the bus. Our managers will as well.\n\nYes, I\u2019ve had a manager throw me under the bus before.\n\nIf we professionalize, we have to have a standard of ethics to prevent that.\n\nHere\u2019s how it works: CEO or PHB tells you, \u201cDo this shady thing.\u201d\n\nYou say \u201cNo, it\u2019s against the Software Engineer Code of Ethics.\u201d\n\nPHB says, \u201cDo it or you\u2019re fired.\u201d\n\nYou say, \u201cYou need a professional software engineer on this project; good luck\nkeeping one if you fire them for following the Code of Ethics. They\u2019ll want to\nkeep their licenses.\u201d\n\nThat\u2019s why it has to have teeth; if engineers could lose their license for\nviolating it, that\u2019s a powerful incentive. You could always find another job;\nyou can\u2019t easily get a license back.\n\nAnd if the engineers do play along, they\u2019ll deserve the blame because they had\nan out and didn\u2019t take it.\n\nProfessionalizing protects us more than it injures us; we can handle\nliability, but that programmer pulverizing bus is a problem.\n\nAlso, there will be a nice side effect: we will be in control of project\nmanagement, not product owners or managers.\n\nIn engineering projects, the \u201cmanager\u201d or \u201cdirector\u201d is an engineer, the\nEngineer of Record. We could figure out how to run our projects best for us.\nNo stupid \u201csprints,\u201d no useless meetings, no performative standups.\n\nUnless you love them.\n\n### People Certification\n\nOf course, if there are professional Engineers of Record, we need a way to\ncertify them.\n\nWell, obviously, we need to train them and test them. Duh.\n\n...\n\nOkay, that\u2019s dodging discussion. How should it be done?\n\nLet me tell you a story.\n\nI raised these ideas publicly at a conference once, and a woman castigated me\nfor gatekeeping, saying that just because my parents paid for my college\neducation doesn\u2019t mean that others can.\n\nI paid for my own college education, by the way.\n\nI was green, so I couldn\u2019t think fast enough to respond, but now I know.\n\nSince university doesn\u2019t prepare you for a programming job anyway, we can\nforego a college requirement.\n\nInstead, we should require an apprenticeship.\n\nIt makes sense; programming is a craft, and it is best learned on the job.\n\nSuch jobs should have no gatekeeping requirements, but they should be\nintensive, focused on output and mentorship, and quite long.\n\nAlso, not every programmer needs to be certified; only the best should be, and\nonly the best should be apprentices. An Engineer of Record should be able to\ndirect hundreds of uncertified programmers, and not one of them should need\ncertification if the Engineer of Record does his job right.\n\nSo yes, we need training, but we should avoid putting any obstacle in the way\nthat requires anything but humility and ability to learn.\n\nAny such obstacle will harm us and society, and society won\u2019t be happy.\n\n### Software Certification\n\nI have been skirting one subject: when exactly a software project needs a\ncertified Engineer of Record.\n\nThe CRA already has an answer: anything classified as Class I or Class II\nproducts.\n\nA fairly good list of both is here.\n\nThose are good lists, but I don\u2019t think the details matter.\n\nOn this point, we could let the politicians debate and decide, with some\nadvice. Whatever society decides is important enough to need certification is\nimportant enough, simply by being part of the list that a majority cares\nabout.\n\nThough I would personally add any software that takes part in handling the\nsoftware supply chain, such as compilers, interpreters, package managers,\nbuild systems, version control systems, etc.\n\nOh, and compiler authors, I think 00UB should be illegal, and I will work to\nmake it so. You have been warned.\n\nBut if you\u2019re unnerved that the list will be so large that the industry will\ncome to a standstill due to the lack of certified Engineers, the best way to\nconvince society that something isn\u2019t important enough is to treat all\nsoftware as critical and develop them right, even if you\u2019re not certified.\n\nIf every programmer treated their software with the care society deserves,\nthen society might minister mercy on some things.\n\n### Bootstrapping the Plan\n\nAlrighty then, we have a plan for a system, but how do we start the engine?\nAfter all, certified Software Engineers of Record don\u2019t exist (except in a few\ncountries), so how do we get some?\n\nFirst, let\u2019s create a professional organization. Then let\u2019s have it nail the\nStandard of Care and the Code of Ethics.\n\nAnd then, that organization could solicit nominations from everywhere about\nwho could be considered the \u201croot\u201d professional engineers, programmers so\ngood, so ethical, and so careful, that they deserve the title without any\ntraining.\n\nI hereby nominate: Dr. D. Richard Hipp of SQLite, Daniel Stenberg of cURL, and\nThomas Pornin of BearSSL.\n\nOnce the nominations are in, members could vote yes or no on each nomination.\nEvery person with a supermajority is given the title by fiat.\n\nAnd then, companies should offer to pay one or more to take on apprentices\nwhile preparing existing software for certification.\n\nBecause yep! There be stuff that need cert pronto!\n\nOnce the root Engineers are chosen, they should be given a period of time to\ncertify existing software. Maybe one or two years.\n\nAfter that point, both the Engineers and the software are bootstrapped, and\nsociety quietly transitions to a superior status quo.\n\n## Conclusion\n\nIf you don\u2019t believe by now that accepting liability is the best thing that\ncan happen to the tech industry, I\u2019m a crude communicator.\n\nBut if I have convinced you, your journey to professionalism starts now.\n\nKeep a checklist. Refer to it often. Hit a minimum standard. Evangelize\nprofessionalism. Participate politically. Refuse to break your personal code\nof ethics. And stand by your work or admit your mistakes.\n\nOur industry, our world, our shining City of Open Source, and the freedom of\nour loved ones depend on all of us, including you now that you know.\n\nSo change yourself first. If enough of us do that, the rest will follow.\n\nOh, and do send this to the EU politicians. They need a plan to replace the\nCRA, so let\u2019s give it to them.\n\nThank you to Loup Vaillant for reading a draft of this post; his \u201cvery short\ncomment\u201d was worth an ounce of gold for every word.\n\nNewer Post Older Post\n\n# Recent Posts\n\nWhat Computers Cannot Do: The Consequences of Turing-Completeness\n\nBuild System Schism: The Curse of Meta Build Systems\n\nHow Yzena Versions Software and Interfaces\n\n# Subscribe\n\n  * Twitter\n  * GitHub\n  * Atom\n\n\u00a92018-2024 Gavin D. Howard. All rights reserved. 100% AI-free organic content.\n\n", "frontpage": false}
