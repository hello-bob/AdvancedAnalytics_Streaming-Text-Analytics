{"aid": "40176130", "title": "Clang's -O0 output: branch displacement and size increase", "url": "https://maskray.me/blog/2024-04-27-clang-o0-output-branch-displacement-and-size-increase", "domain": "maskray.me", "votes": 4, "user": "todsacerdoti", "posted_at": "2024-04-27 01:04:58", "comments": 0, "source_title": "Clang's -O0 output: branch displacement and size increase", "source_text": "Clang's -O0 output: branch displacement and size increase | MaskRay\n\n# MaskRay\n\n2024-04-27\n\n# Clang's -O0 output: branch displacement and size increase\n\ntl;dr Clang 19 will remove the -mrelax-all default at -O0, significantly\ndecreasing the text section size for x86.\n\n## Span-dependent instructions\n\nIn assembly languages, some instructions with an immediate operand can be\nencoded in two (or more) forms with different sizes. On x86-64, a direct\nJMP/JCC can be encoded either in 2 bytes with a 8-bit relative offset or 6\nbytes with a 32-bit relative offset. A short jump is preferred because it\ntakes less space. However, when the target of the jump is too far away (out of\nrange for a 8-bit relative offset), a near jump must be used.\n\n    \n    \n    1 2 3 4\n\n|\n\n    \n    \n    ja foo # jump short if above, 77 <rel8> ja foo # jump near if above, 0f 87 <rel32> .nops 126 foo: ret  \n  \n---|---  \n  \nA 1978 paper by Thomas G. Szymanski (\"Assembling Code for Machines with Span-\nDependent Instructions\") used the term \"span-dependent instructions\" to refer\nto such instructions with short and long forms. Assemblers grapple with the\nchallenge of choosing the optimal size for these instructions, often referred\nto as the \"branch displacement problem\" since branches are the most common\ntype. A good resource for understanding Szymanski's work is Assembling Span-\nDependent Instructions.\n\n## Start small and grow\n\nPopular assemblers still used today tend to favor a \"start small and grow\"\napproach, typically requiring one more pass than Szymanski's \"start big and\nshrink\" method. This approach often results in smaller code and can handle\nadditional complexities like alignment directives.\n\nIn LLVM, the MC library (Machine Code) is reponsible for assembly,\ndisassembly, and object file formats. Within MC, \"assembler relaxation\" deals\nwith span-dependent instructions. This is distinct from linker relaxation.\n\nEli Bendersky provides a detailed explanation in a 2013 blog post and\nhighlights an interesting behavior:\n\n> For example, when compiling with -O0, the LLVM assembler simply relaxes all\n> jumps it encounters on first sight. This allows it to put all instructions\n> immediately into data fragments, which ensures there's much fewer fragments\n> overall, so the assembly process is faster and consumes less memory.\n\nWhen -O0 is enabled and the integrated assembler is used (common by default),\nclangDriver passes the -mrelax-all flag to the LLVM MC library. This sets the\nMCRelaxAll flag in MCTargetOptions, instructing the assembler to potentially\nstart with the long form (near) for JMP and JCC instructions on the X86 target\nonly. Other instructions like ADD/SUB/CMP and non-x86 architectures remain\nunaffected.\n\n## -mrelax-all tradeoff\n\nHere is an example:\n\n    \n    \n    1 2 3 4 5\n\n|\n\n    \n    \n    void foo(int a) { // -mrelax-all: near jump (6 bytes) // -mno-relax-all or -fno-integrated-as: short jump (2 bytes) if (a) bar(); }  \n  \n---|---  \n  \nThe assembly (clang -S) looks like:\n\n    \n    \n    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\n|\n\n    \n    \n    foo: # @foo # %bb.0: # %entry pushq %rbp movq %rsp, %rbp subq $16, %rsp movl %edi, -4(%rbp) cmpl $0, -4(%rbp) je .LBB0_2 # %bb.1: # %if.then movb $0, %al callq bar@PLT .LBB0_2: # %if.end addq $16, %rsp popq %rbp retq  \n  \n---|---  \n  \nThe JE instruction assembles to either a short jump (8-bit relative offset) or\nnear jump (32-bit relative offset).\n\n    \n    \n    1 2 3 4 5 6 7 8 9 10 11 12 13\n\n|\n\n    \n    \n    # -mrelax-all MCSection MCDataFragment: empty MCAlignFragment: alignment=4 MCDataFragment: instructions including JE (jump near if equal, 6 bytes)# -mno-relax-all MCSection MCDataFragment: empty MCAlignFragment: alignment=4 MCDataFragment: instructions before JE (push; mov; sub; mov; cmp) MCRelaxableFragment: JE (jump short if equal, 2 bytes). This JE could be expanded, but not in this case. MCDataFragment: instructions after JE (mov; call; add; pop; ret)  \n  \n---|---  \n  \nThe impact of -mrelax-all on text section size is significant, especially when\nthere are many branch instructions. In an x86-64 release build of lld,\n-mrelax-all increased the .text section size by 7.9%. This translates to a\n5.4% increase in VM size and a 4.6% increase in the overall file size.\n\nDean Michael Berris proposed to remove the -mrelax-all default for -O0 in\n2016, but it stalled. -mrelax-all caused undesired interaction issues with\nRISC-V's conditional branch transforms, leading Craig Topper to remove\n-mrelax-all at -O0 for RISC-V recently.\n\nWhile -mrelax-all might have offered slight compile time benefits in the past,\nthe gains are negligible today. Benchmarking using stage 2 builds of Clang\nshowed no measurable difference between -mrelax-all and -mno-relax-all. On\nllvm-compile-time-tracker running the llvm-test-suite/CTMark benchmark,\ncompile time actually increased slightly by 0.62% while the text section size\ndecreased by 4.44%.\n\nA difference for assembly at different optimisation levels would be quite\nsurprising. GCC/GNU assembler don't exhibit similar expansion of JMP/JCC\ninstructions even at -O0.\n\nThese arguments strengthen the case for removing -mrelax-all as the default\nfor -O0. My patch has landed and will be included in the next major release,\nLLVM 19.1.\n\n## Understanding the compile time difference\n\nI have studied a notorious huge file, llvm/lib/Target/X86/X86ISelLowering.cpp.\n\nFragment count: A significant difference exists in the number of assembler\nfragments generated:\n\n  * -mrelax-all: 89633\n  * -mno-relax-all: 143852\n\nWith -mrelax-all, the number of MCRelaxableFragments is substantially reduced\n(to zero when building Clang). This reduction likely contributes to the\ncompile time difference.\n\nFixed-point iteration: -mrelax-all ensures the fixed-point iteration algorithm\n(almost always) converges in a single iteration. In contrast, with -mno-relax-\nall, around 6% of sections require additional iterations. However, this\ndifference is likely not the primary factor affecting compile time.\n\n    \n    \n    1 2 3 4 5 6 7 8 9\n\n|\n\n    \n    \n    // -mrelax-all 1: 13919 2: 1// -mno-relax-all 1: 13103 2: 793 3: 23 4: 1  \n  \n---|---  \n  \n## Why didn't people complain about the code size increase?\n\nBecause people generally care less about -O0 code size. -O0 is often used\nalongside -g for debugging purposes. The total file size increase caused by\n-mrelax-all might seem less significant in comparison.\n\nIn addition, not all projects can be successfully built with -O0 optimization.\nThis is typically due to issues like very large programs or mandatory inlining\nbehavior.\n\nFor a discussion on size reduction ideas in ELF relocatable files, please\ncheck out my blog post about Light ELF.\n\nYou might also be interested in my notes about GNU assembler and LLVM\nintegrated assembler.\n\nShare Comments\n\n  * clang\n  * llvm\n  * x86\n\n### Popular\n\n  * All about thread-loca... (36191)\n  * .init, .ctors, and .i... (20228)\n  * When can glibc be bui... (18265)\n  * All about Global Offs... (14347)\n  * Why isn't ld.lld faster? (13432)\n  * Stack unwinding (10943)\n  * All about Procedure L... (10056)\n  * -fno-semantic-interpo... (9537)\n  * ELF interposition and... (8781)\n  * All about symbol vers... (8488)\n  * C++ exception handlin... (8070)\n  * \u652f\u6301Android\u3001iOS 9\u5185\u7f6eIPSe... (8054)\n  * Relative relocations ... (7585)\n  * 2019\u5e74\u603b\u7ed3\u2014\u2014\u5de5\u5177\u94fe\u7684\u4e00\u5e74 (6961)\n  * Weak symbol (6899)\n  * LLD and GNU linker in... (6412)\n  * Relocatable linking (6349)\n  * All about UndefinedBe... (6269)\n  * Control-flow integrity (6068)\n  * The dark side of RISC... (5948)\n  * All about LeakSanitizer (5665)\n  * \u6307\u5b9adynamic linker\u4ee5\u4f7f\u7528\u9ad8\u7248... (5329)\n  * C++ language server c... (5156)\n  * 2021\u5e74\u603b\u7ed3 (5134)\n  * glibc and DT_GNU_HASH (5128)\n  * gcov\u4e0eLLVM\u4e2d\u7684\u5b9e\u73b0 (4575)\n  * DEFCON 26 CTF\u53c2\u8d5b\u8bb0 (4559)\n  * Linker garbage collec... (4506)\n  * Compressed debug sect... (4469)\n  * 2022\u5e74\u603b\u7ed3 (4269)\n  * \u7ea6\u745f\u592b\u95ee\u9898\u7684\u4e24\u4e2aO(log n)\u89e3\u6cd5 (4172)\n  * GNU indirect function (4015)\n  * ODR violation detection (3947)\n  * Explain GNU style lin... (3807)\n  * RISC-V linker relaxat... (3784)\n  * Build glibc with LLD 13 (3727)\n  * C standard library he... (3684)\n  * Android\u5fae\u4fe1\u6570\u636e\u5bfc\u51fa (3620)\n  * All about sanitizer i... (3608)\n  * All about COMMON symbols (3567)\n  * Force-directed\u7b97\u6cd5(1)\u2014\u2014... (3522)\n  * zstd compressed debug... (3516)\n  * Copy relocations, can... (3285)\n  * Symbol processing (3279)\n  * LLVM\u547d\u4ee4\u884c\u9009\u9879\u7684\u5904\u7406 (3056)\n  * Compiler driver and c... (2959)\n  * -march=, -mcpu=, and ... (2926)\n  * \u5b8c\u7f8e\u8ff7\u5bab\u751f\u6210\u7b97\u6cd5 (2823)\n  * \u8fd1\u51b5 (2795)\n  * Unwinding through a s... (2560)\n  * \u4ece-fpatchable-function... (2506)\n  * Archives and --start-lib (2478)\n  * Layering check with C... (2453)\n  * Everything I know abo... (2332)\n  * COMDAT and section group (2330)\n  * \u300aDebug Hacks\u300b\u548c\u8c03\u8bd5\u6280\u5de7 (2130)\n  * DEFCON 24 CTF\u53c2\u8d5b\u8bb0 (2109)\n  * \u7688\u4f9dEmacs (2080)\n  * WeeChat\u64cd\u4f5c\u5404\u79cd\u804a\u5929\u8f6f\u4ef6 (2077)\n  * lld 15 ELF changes (2036)\n  * Segment tree (1970)\n  * \u4e00\u6b21\u670d\u52a1\u5668BMC\u56fa\u4ef6\u9006\u5411\u7ecf\u5386 (1944)\n  * lld 14 ELF changes (1933)\n  * DEFCON 25 CTF\u53c2\u8d5b\u8bb0 (1873)\n  * _FORTIFY_SOURCE (1805)\n  * Dependency related li... (1775)\n  * \u6211\u662f\u8fd9\u6837\u4f7f\u7528\u5fae\u4fe1\u7684\u2014\u2014wechatircd... (1754)\n  * \u4f7f\u7528Suricata\u8fdb\u884cIDS/IPS (1720)\n  * Everything I know abo... (1718)\n  * Competitive programmi... (1712)\n  * 2020\u5e74\u603b\u7ed3 (1691)\n  * Metadata sections, CO... (1590)\n  * \u8c03\u8bd5\u6280\u5de72 (1523)\n  * \u4eceASC'14\u5230ISC'15\u2014\u2014\u6211\u7684\u8d85\u7b97\u7ade... (1490)\n  * ccls 0.20181225 release (1471)\n  * 2014\u5e74\u603b\u7ed3\u2014\u2014\u7ade\u8d5b\u7684\u4e00\u5e74 (1462)\n  * Analysis and introspe... (1449)\n  * LeetCode solutions (1411)\n  * Toolchain testing (1361)\n  * Nginx\u6839\u636eAccept-Languag... (1333)\n  * PI_STATIC_AND_HIDDEN/... (1309)\n  * Distribution of debug... (1265)\n  * FreeBSD src browsing ... (1258)\n  * OverTheWire - Natas W... (1248)\n  * SECTIONS and OVERWRIT... (1217)\n  * wechatircd\u2014\u2014\u7528IRC\u5ba2\u6237\u7aef\u63a7\u5236... (1190)\n  * \u6a21\u5757\u5185\u51fd\u6570\u8c03\u7528\u548clibc\u7b26\u53f7\u91cd\u547d\u540d (1107)\n  * \u5efa\u7acb\u6e05\u534e\u5927\u5b66Node Packaged M... (968)\n  * \u8131\u79bbchroot\u7684\u67b7\u9501 (931)\n  * Evil--\u5728Emacs\u4e2d\u6a21\u62dfVim (917)\n  * \u81ea\u52a8\u83b7\u53d6SSH\u5bc6\u7801\u5e76\u767b\u5f55 (866)\n  * \u6211\u7684xmonad\u914d\u7f6e (862)\n  * 8\u95e8\u7f16\u7a0b\u8bed\u8a00\u7684\u8bbe\u8ba1\u601d\u8003 (847)\n  * RedTigers Hackit Warg... (841)\n  * DWARF in reproducible... (825)\n  * Dominator tree (816)\n  * \u7528udev\u81ea\u52a8\u6302\u8f7dusb\u8bbe\u5907 (814)\n  * \u65e0\u9700\u6bcf\u65e5\u626b\u7801\u7684IRC\u7248\u5fae\u4fe1\u548cQQ:wech... (811)\n  * \u7ec8\u7aef\u6a21\u62df\u5668\u4e0b\u4f7f\u7528\u53cc\u500d\u5bbd\u5ea6\u591a\u8272Emoji\u5b57\u4f53 (790)\n  * lld linked musl on Po... (777)\n  * DEFCON 23 CTF\u53c2\u8d5b\u8bb0 (770)\n  * kth element in a suba... (770)\n  * Cyber Grand Challenge... (731)\n  * ELF Hacks (723)\n  * Function multi-versio... (706)\n  * J\u8bed\u8a00\u521d\u63a2 (704)\n  * DEFCON 21 CTF\u53c2\u8d5b\u8bb0 (698)\n  * DEFCON 21\u2014\u2014\u6211\u7684\u594b\u6597 (689)\n  * \u6c5f\u82cf\u4fe1\u5b89\u7ade\u8d5b\u521d\u8d5b\u5de5\u4f5c\u7ec4\u8bb0\u4e8b (648)\n  * Real World CTF 2018 r... (635)\n  * Gmail\u7684OfflineIMAP XOA... (627)\n  * \u4f7f\u7528Burkhard-Keller tre... (615)\n  * D-Link\u8def\u7531\u5668\u540e\u95e8\u6ce8\u8bb0 (604)\n  * 80\u5206\u949f8\u8bed\u8a00 (584)\n  * C minifier with Clang (583)\n  * DEFCON 22 CTF\u53c2\u8d5b\u8bb0 (581)\n  * 2018-09-09 ccls\u6700\u8fd1\u66f4\u65b0 (570)\n  * gcc\u4e2dsqrt\u5b9e\u73b0 (569)\n  * BCTF\u5de5\u4f5c\u7ec4\u8bb0\u4e8b (556)\n  * Python is ugly (552)\n  * LeetCode Best Time to... (546)\n  * \u7b97\u6cd5\u3001FP\u3001\u524d\u7aef\u3001\u5b89\u5168\u3001\u7cfb\u7edf\u7ba1\u7406\u2014\u2014201... (544)\n  * Explaining thread loc... (540)\n  * \u5f02\u4e8eMake\u7684\u53e6\u4e00\u79cd\u6784\u5efa\u7cfb\u7edf (537)\n  * \u5043\u5e08\u2014\u2014finite automaton\u751f\u6210\u5de5\u5177 (519)\n  * Linker symbol processing (519)\n  * NOIP 2004 \u6570\u5b57\u6e38\u620f(\u866b\u98df\u7b97) (512)\n  * \u4e8c\u53c9\u6811\u904d\u5386\u7b97\u6cd5\u603b\u7ed3 (480)\n  * \u57fa\u4e8e mutt+offlineimap+n... (475)\n  * \u5e76\u884cN-body\u6a21\u62df (461)\n  * Real World CTF 2018 c... (445)\n  * $ccls/navigate\u548cindex.... (439)\n  * \u5728Makefile\u4e2d\u81ea\u52a8\u751f\u6210\u4f9d\u8d56 (437)\n  * webqqircd\u2014\u2014\u7528IRC\u5ba2\u6237\u7aef\u63a7\u5236W... (426)\n  * telegramircd\u2014\u2014\u7528IRC\u5ba2\u6237\u7aef... (413)\n  * Haskell\u5b66\u4e60\u7b14\u8bb0 (409)\n  * \u81ea\u7136\u8bed\u8a00\u5904\u7406\u4e4b\u8bcd\u8bed\u62bd\u53d6 (409)\n  * Buffalo WZR-600DHP Op... (405)\n  * HDU OJ\u4e00\u4e9b\u9898\u76ee (393)\n  * \u7b2c\u4e8c\u5c4a\u9752\u5c11\u5e74\u5f00\u53d1\u8005\u5927\u4f1a (381)\n  * \u79f0\u7403\u95ee\u9898\u6269\u5c55\u2014\u2014\u6839\u636e\u5f53\u524d\u5df2\u77e5\u4fe1\u606f\u9009\u62e9\u6700\u4f18\u79f0\u91cf\u65b9\u6848 (371)\n  * \u7528Makefile\u642d\u5efa\u535a\u5ba2 (371)\n  * jq\u5b9e\u73b0\u539f\u7406\u2014\u2014\u5b57\u8282\u7801 (369)\n  * Extract an archive me... (366)\n  * ML\u7f16\u8bd1\u5668Caml Featherweig... (354)\n  * Makefile\u4ecb\u7ecd (353)\n  * Analysis options in l... (352)\n  * .emacs (344)\n  * \u4e09\u67f1\u6c49\u8bfa\u5854\u76f8\u5173\u6269\u5c55\u95ee\u9898 (334)\n  * \u6574\u7cfb\u6570Discrete Fourier t... (334)\n  * LeetCode Expression A... (333)\n  * \u7528Perl\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5206\u6790csv\u6587\u4ef6 (327)\n  * Ko-Aluru suffix array... (321)\n  * ML\u7f16\u8bd1\u5668Caml Featherweig... (314)\n  * C++ language server c... (308)\n  * \u5e38\u6570\u7a7a\u95f4Invert Binary Tre... (305)\n  * GTK+ tic-tac-toe(\u4e95\u5b57\u68cb) (294)\n  * \u7528Makefile\u642d\u5efa\u535a\u5ba2-2 (289)\n  * \u516b\u6570\u7801 (273)\n  * ISC'14 Student Cluste... (273)\n  * \u7ec8\u7aef\u6a21\u62df\u5668\u4e0b\u5bbd\u5b57\u7b26\u9000\u683c (273)\n  * RuCTFE 2012\u53c2\u8d5b\u8bb0 (272)\n  * Trend Micro Codinsani... (271)\n  * BCTF 2016 hsab\u53caBetaFo... (262)\n  * \u667a\u80fd\u4f53\u5927\u8d5b\u4e0e\u5e73\u53f0\u5f00\u53d1 (260)\n  * \u7528Google Analytics API... (253)\n  * TUNA\u6280\u672f\u6c99\u9f99\u53caA Pretty Pri... (250)\n  * \u201c1001\u591c\u201d\u5b66\u751f\u8282\u7ebf\u4e0a\u89e3\u8c1c\u6d3b\u52a81001/... (250)\n  * PyGTK\u8ff7\u5bab\u751f\u6210\u5668mazer (248)\n  * GTK+\u9ed1\u767d\u68cbreversi (247)\n  * \u4f7f\u7528Double-array trie\u4f18\u5316... (243)\n  * Haskell\u5b9e\u73b0\u7684Splay\u6811 (241)\n  * BCTF 2015 CamlMaze\u547d\u9898\u62a5... (241)\n  * cquery\u6700\u8fd1\u6539\u52a8\u4e0elibclang.s... (241)\n  * \u8ba1\u7b97\u6240\u6709\u540e\u7f00\u7684\u6392\u540d (240)\n  * \u57df\u540d\u8fc1\u79fb\u81f3maskray.me (228)\n  * \u7528DocPad\u6784\u5efa\u9759\u6001\u7f51\u7ad9 (220)\n  * USACO JAN10 Gold (218)\n  * SVT13117ECS\u4e0aGentoo\u5b89\u88c5\u8bb0... (214)\n  * \u7528rss2email\u9605\u8bfbfeeds (213)\n  * \u7528Expect\u8fde\u63a5\u65e0\u7ebf\u7f51\u7edc (206)\n  * Tiling window manager... (198)\n  * \u7528Pike's VM\u5b9e\u73b0\u7684\u975e\u56de\u6eaf\u6b63\u5219\u8868\u8fbe\u5f0f\u5f15\u64ce (198)\n  * \u7ed9xbindkeys\u6dfb\u52a0key seque... (193)\n  * Dancing Links+Algorit... (191)\n  * genkernel (191)\n  * \u6839\u636e\u8ba1\u5212\u6c42\u89e3Rush (190)\n  * ZJU 1638. Greedy Island (177)\n  * \u7f51\u7edc\u5b66\u5802feeds2mail (165)\n  * cquery USR\u4f18\u5316\u548c\u5206\u5c42diff (165)\n  * Ouroborus Program - q... (160)\n  * String index structur... (157)\n  * COMMON symbols (154)\n  * Js_of_ocaml\u548cEmscripten (134)\n  * SECUINSIDE CTF Quals ... (118)\n  * Awesome 3 debian menu (113)\n  * r2con 2017 r2cLEMENCy (108)\n  * XV Olimpiada Informat... (105)\n  * checker (100)\n\n### Tag Cloud\n\nadc ai9 algorithm asc automaton awesome bctf binary binutils bmc build system\nc c++ ccls cgc chroot clang codinsanity coffee script compiler compression\ncomputer security contest csv ctf data structure debug defcon desktop docker\nelf emacs email emoji emscripten event expect ext4 fdpic feeds firmware\nfloating point forensics freebsd game gcc gentoo github glibc graph drawing\ngtk hanoi haskell hpc image inotify ipsec irc isc j javascript josephus\nproblem jq kernel kythe ld leetcode libunwind linker linux llvm lsp m68k\nmakefile math maze mirror ml musl mutt n-body network nginx nim nlp node.js\nnoip notmuch npm ocaml offlineimap oi oj openwrt parallel parser generator\nperl powerpc presentation puzzle python qq radare2 regex regular expression\nreverse engineering review riscv router rtld ruby ructfe s390x sanitizer\nscheme search security shell ssh stringology student festival puzzle suffix\narray suffix automaton summary suricata telegram telegramircd terminal tls\ntraversal tree trendmicro udev unicode usb vim vpn vte wargame web analytics\nwebqqircd website wechat wechatircd window manager windows x86 xbindkeys\nxmonad xz yanshi\n\n### Blogroll\n\n  * BYVoid\n  * fqj1994\n  * ppwwyyxx\n\n\u00a9 2024 MaskRay Powered by Hexo\n\n", "frontpage": true}
