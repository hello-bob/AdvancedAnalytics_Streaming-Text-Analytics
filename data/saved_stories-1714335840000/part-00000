{"aid": "40188783", "title": "How to Make Architecture Decisions", "url": "https://www.ben-morris.com/how-to-make-architecture-decisions/", "domain": "ben-morris.com", "votes": 1, "user": "kiyanwang", "posted_at": "2024-04-28 14:21:46", "comments": 0, "source_title": "How to make architecture decisions", "source_text": "How to make architecture decisions\n\nBen Morris. Agile enterprise architecture.\n\n# How to make architecture decisions\n\n28 March 2024\n\nWe want empower engineering teams to make their own decisions, but we should\nalso recognise that autonomous teams cannot solve every problem on their own.\nSometimes they may lack the experience, perspective, or technical know-how to\ndrive a decision. Some engineers are reluctant to assert opinions on their\ncolleagues, while others can be a little too eager to do so.\n\nDecision making becomes more difficult as the impact of a decision starts to\nspread beyond team boundaries. As the scope of a decision increases, more\npeople become involved, different agendas come into play, and it can be\ndifficult to broker agreement. The trade-offs tend to become more nuanced, and\nthe risks are not always immediately obvious.\n\nLarger scale decisions with wide impact need to be made with a sense of\nexpertise and experience, as well as organisational sensitivity. The bigger\nthe impact, the more an experienced architect can add value by helping to\nforesee any likely outcomes and navigating the potential consequences.\n\n## Knowing what decisions to make\n\nTechnology decisions don't have to be made explicitly. You can decide not to\nmake a formal decision, though you need to recognise that this allows lots of\nsmaller decisions to accumulate over time. You need to decide whether this\nmatters, i.e. are you happy to let a decision evolve in a more informal way?\n\nFor example, if you choose not provide guidance around which database to use,\nthen your engineering teams will make their own minds up. They may eventually\ncoalesce on a single solution, or they may use different solutions to reflect\nthe varied types of workloads in play. The point is that in the absence of a\nformal decision, your approach to database standardisation will be determined\nby lots of individual engineering decisions.\n\nIt's up to the architect to foresee these outcomes and decide whether they are\ncomfortable with them. Does it matter where this lands, or does it make sense\nto constrain the available choices in some way? Will this make life easier in\nthe long term and help you to manage costs, or will it merely undermine\nagility without delivxering any tangible benefits? Ultimately, it takes wisdom\nand experience to know when to make a decision.\n\nDecisions can constrain teams and reduce the available options, but this can\nbe a positive thing. Constraints can enable innovation by focusing future\nefforts on a narrower range of options. This is the sense of creating \"guard\nrails\" for engineering teams, where the more generic challenges of engineering\nare regarded as \"solved problems\". This allows teams to focus on those\ndecisions that are more directly relevant to their domain.\n\nOne important aspect of this is whether decisions are reversible. Jeff Bezos\nfamously made a distinction between \"Type 1\" and \"Type 2\" decisions, where the\nformer are irreversible decisions that he likened to \"one-way doors\". This is\nbasic risk management: the more consequential and irreversible the decision,\nthe more care you should take in making it.\n\nThe catch is that it's not always that easy to spot a consequential decision.\nIt's also surprisingly easy for apparently reversible decisions to become more\nconsequential than expected. You can manage the risk by making changes smaller\nand getting feedback more quickly, making it easier to reverse out of those\ndecisions that aren't panning out.\n\nWhich decisions should architects be involved in? If we want empowered and\nautonomous engineering teams, then architects shouldn't be involved in their\nday-to-day work. They should only get involved in decisions where the impact\nwill be felt beyond the team's boundaries. Again, this is driven by risk\nmanagement. If the impact of a decision is limited to an individual\nengineering team, then potential problems tend to be smaller and more\nmanageable.\n\n## When to make decisions\n\nIf decisions close off options, then there is an obvious danger in making\ndecisions too early. You can constrain teams unnecessarily by making decisions\nbased on an immature understanding of the problem domain. Sometimes no\ndecision is the wisest choice. If you're not comfortable with a decision, then\nit might make sense to explore the problem domain to resolve the source of\ndiscomfort.\n\nMary and Tom Poppendieck identified the \"last responsible moment\" as a guiding\nprinciple for decision making. They defined this as that point at which\n\"failing to make a decision eliminates an important alternative\". The\nimplication is that there is a \"point of no return\" at which failing to make\nan explicit decision can create its own constraints. You should make these\ndecisions explicit, rather than just have them happen to you through inaction.\n\nOne problem with the \"last responsible moment\" is that it's often difficult to\nrecognise when that moment has arrived. It tends to be easier to spot when it\nhas already passed. It can also become an excuse for procrastination. There is\nnever a golden moment where the clouds part to reveal the perfect decision.\nThere are always trade-offs and there is always uncertainty, so decision\nmaking requires a degree of courage.\n\nIf every decision is delayed until that \"last responsible moment\" then we risk\ncreating an amorphous decision space that is riven with uncertainty. Too many\nopen decisions create mental clutter that can impede progress. Decisions are\nbuilt on top of other decisions, and you need a solid foundation and a clear\n\"direction of travel\". Engineering teams tend to thrive on certainty, so you\nshouldn't be afraid to rule out options and opportunities.\n\n## Visibility and collaboration\n\nAlthough everybody tends to agree on the need for strong decision making and\n\"guard rails\" to guide engineering teams, the tricky part comes in recognising\nwhere these guard rails should be. You need to take a collaborative and\ninclusive approach to decision making to encourage buy-in and ensure\nrelevance.\n\nMost organisations have natural leaders that emerge informally in the\ntechnology space. These natural leaders are not exclusive to architecture and\ncan be found in engineering, infrastructure, or even product teams. Building a\ncommunity of natural leaders is vital for establishing consensus and getting\nbuy-in for decisions. A more formal TOGAF-style \"architecture board\" can help\nto bake this network of influencers more formally into decision-making.\n\nYou also need to make sure that decisions are visible. Architectures usually\nemerge from the result of a series of imperfect decisions. None of us are\nreliable witnesses and circumstances change. A log of lightweight decision\nrecords can help to create a \"shared memory\" for architecture that documents\nhow the various trade-offs were understood at the time. It can also help to\nkeep decisions honest by forcing you to explain how decisions are aligned with\nthe wider business and technical objectives.\n\nSome conflict is inevitable, but that shouldn't make you shy away from making\ndecisions. If somebody really does stand to lose from a decision, then you\nmight not be in the right place. The problem domain might need reframing, or\nyou need to do more work to establish common ground and a shared\nunderstanding. That said, so long as decisions are made on an inclusive basis,\nand the reasons behind them are clearly articulated, then any conflict around\nthem is usually manageable. For the most part, engineering teams usually\nwelcome clear and credible decision making.\n\nFiled under Architecture, Strategy, Development process, Agile and Governance.\n\n## About me\n\nI am a London-based technology architect who has led development across start-\nups, digital agencies, software houses, and corporates. Over the years I have\nbuilt a lot of stuff including scalable cloud-native architectures, data\nprocessing platforms, systems integrations, and SaaS applications. My current\nfocus is on providing architectural leadership in agile environments.\n\nI currently work as Chief Architect for the global market intelligence agency\nMintel. Opinions are my own and not the views of my employer, etc.\n\nYou can check me out on LinkedIn.\n\nThis site publishes an RSS feed. It also contains a list of all published\narticles and an archive of older stuff.\n\n\u00a9 2024 Ben Morris.\n\n", "frontpage": false}
