{"aid": "40163172", "title": "Understanding the Redpanda Data Transform Architecture Using WebAssembly", "url": "https://redpanda.com/blog/wasm-architecture", "domain": "redpanda.com", "votes": 2, "user": "rrampage", "posted_at": "2024-04-25 21:20:01", "comments": 0, "source_title": "Understanding the Redpanda Data Transform architecture", "source_text": "Understanding the Redpanda Data Transform architecture\n\nBlog\n\nEngineeringCloudProduct\n\n# Understanding the Redpanda Data Transform architecture\n\nHow we eliminated the data ping-pong for simple, efficient data transformation\n\nByAlexander GallegoTyler RockwoodonApril 25, 2024\n\nAround 60% of stream processing is spent on mundane transformation tasks.\nFormat unification for machine learning (ML) workloads, filtering for privacy,\nsimple enrichments like geo-IP translations \u2014 the list goes on.\n\nTo stand up something \u201csimple\u201d often involves three or four distributed\nsystems, multiple nights of reading configurations, and a few too many\nespressos. Once you\u2019re done, you end up ping-ponging the data back and forth\nbetween storage and compute, when all you had to do was remove a field from a\nJSON object.\n\nTo the data engineer, it feels like an endless game of system whack-a-mole\nbefore you can start working on the good part of actually understanding the\ndata.\n\nRedpanda solves this problem and eliminates the data ping-pong with Redpanda's\nData Transforms. Powered by WebAssembly (Wasm), this feature allows engineers\nto read data, prepare messages, and make API calls without the \u201cdata ping-\npong\u201d for simpler and less expensive in-broker data transformations.\n\nIn this post, we go under the hood to show you how this engine runs.\n\n## Digging into Redpanda Data Transforms\n\nRedpanda Data Transforms is built on the Wasmtime engine, which powers many\nother modern serverless platforms. Embedding this virtual machine directly\nonto each shard in Redpanda's thread-per-core architecture provides an\nalternative to the classical data back-and-forth when trying to make sense of\nreal-time streaming data.\n\nData transforms before and after Redpanda\n\nWhat JavaScript did for the web in the late 90s is what Wasm can do for\nserver-side applications. JavaScript allowed developers to turn static content\ninto the immersive web experiences of today, fundamentally changing the web by\nshipping code to the user\u2019s computer.\n\nSimilarly, Wasm empowers the engineer to transform Redpanda by shipping\ncomputational guarantees (code) to the storage engine. Codifying business\npractices like GDPR compliance or custom on-disk encryption mechanics, with\nnear native-level performance at runtime.\n\nIn brief, Redpanda Data Transforms lets you tell Redpanda what piece of code\n(.wasm) can run on what data (topics), on what location, at a specific time\n(on event triggers) in an auditable fashion.\n\nIn other words, the Redpanda controller can tell you exactly what code is\ntouching what piece of data, on what computers, and at what offsets.\n\nThe most exciting part about sharing this feature is that Redpanda Data\nTransforms complements the existing tooling and frameworks you already have in\nthe enterprise. It simply inverts the relation of shipping data to compute by\nshipping code to data.\n\nThe data lifecycle\n\n> Check out our post on how Redpanda Data Transforms compares to Apache Flink\n> to learn how they compare and when to use them.\n\n## Unpacking the architecture\n\nThe architecture of Redpanda Data Transforms is composed of three important\ncomponents:\n\n  1. Client-side tooling and SDKs\n\n  2. Data Transforms lifecycle management\n\n  3. Data flow through the WebAssembly runtime\n\n### 1\\. Client-side tooling and SDKs\n\nRedpanda Data Transforms provides a simple experience to transform your data.\nYou simply write a function that takes a record in, and then you write back\nout the transformed records. Redpanda takes care of storing and managing the\ncode, running the code, moving data around, and providing metrics and logs.\nWe've baked a full development experience into rpk, our development tool.\n\nrpk transform init will generate a getting started template. You don't need to\nuse the scaffolding, but rpk takes care of all the boilerplate so you can\nfocus on getting the job done.\n\nOur SDKs allow you to focus on modifying each record as it's written to the\ninput topic. Once you've written your transformation, you can build it to\nWebAssembly using rpk transform build.\n\nHere\u2019s an example of a transformation that redacts a single field from a JSON\nrecord.\n\n    \n    \n    // This example shows a transform that removes a // sensitive field from a JSON object. func main() { transform.OnRecordWritten(redactJson) } type RecordPayload struct { UserName string `json:\"username\"` Email string `json:\"email\"` Purchase TransactionInfo `json:\"purchase\"` } func redactJson(e transform.WriteEvent, w transform.RecordWriter) error { var payload RecordPayload if err := json.Unmarshal(e.Record().Value, &payload); err != nil { return err } payload.email = \"\" // Remove sensitive field b, err := json.Marshal(e.Record().Value) if err != nil { return err } return w.Write(transform.Record{ Key: e.Record().Key, Value: b, }) }\n\n### 2\\. Data Transforms lifecycle management\n\nData Transforms can be deployed in one command using rpk transform deploy\n--input-topic=foo --output-topic=bar.\n\nTo see the deployed transforms running in the cluster as well as their status\nand if there\u2019s any lag, you can use rpk transform list.\n\nAll of these commands use Redpanda's Admin API and are auditable events. Once\na transform is deployed, Redpanda stores the metadata and binary internally\nwith other cluster metadata.\n\nAfter that, any core that becomes the Raft leader for a partition on the input\ntopic will also spin up a WebAssembly Virtual Machine (VM) with the code\ndeployed to run your transformation code. If the Raft leadership changes, we\nstop processing records, persist the latest offset that was processed, and\nthen start the Wasm VM on the same core as the new leader.\n\n### 3\\. Data flow through the WebAssembly runtime\n\nWith the Raft leader and your code running on the same core, we can easily\nprocess records by reading from the local Raft leader's log and pushing those\nthrough the WebAssembly VM \u2014 and your code.\n\nThe resulting records are directly written to the Raft leaders for the output\ntopic that you specify at deployment. If the output leader is on another\nbroker, we use our internal Remote Procedure Calls to write these records,\nbypassing the Kafka API, and writing directly to our internal Raft layer.\n\nData flow through the Wasm runtime\n\nWhile these transforms are running, we periodically commit the offset of the\nrecords that have successfully processed in the input topic. This allows us to\nresume processing in the correct place if there are failures, crashes, or\nredeploys. This is similar to using consumer groups in the Kafka API, except\nit's all transparently handled for you, so you can focus on the task at hand.\n\n## What else you should know\n\nWebAssembly will change server-side software permanently. Allowing injection\nof code inside Redpanda at strategic points fundamentally changes what the\nstorage engine can do for you while giving you isolation, high function\ndensity, granularity of execution, native performance, and multi-tenant by\ndesign \u2014 all in your favorite programming language.\n\nCurrently, Redpanda Data Transforms is a beta feature for Redpanda Cloud's\nDedicated and BYOC options. If you\u2019re a developer fascinated with hacking low-\nlatency storage systems, we\u2019d love to know more about you, so check out\nRedpanda's open engineering jobs!\n\nTo learn more about running data transformations with Wasm, here are a few\nhandy resources:\n\n  * [Docs] Redpanda Data Transforms\n\n  * [Blog] Real-time predictions on the fly for ML apps with Redpanda Data Transforms\n\n  * [Video] Redpanda Office Hour: Everything about Redpanda Data Transforms powered by Wasm\n\n  * [Streamcast] Redpanda Data Transforms launch stream\n\nLastly, follow us on LinkedIn and X to catch our upcoming product updates!\n\n#### Let's keep in touch\n\nSubscribe and never miss another blog post, announcement, or community event.\nWe hate spam and will never sell your contact information.\n\n## Related articles\n\nEngineeringTutorialCommunity\n\n###### How to integrate Kafka Streams with Redpanda\n\nOsinachi Chukwujama \u2022\n\nMay 12, 2022\n\nEngineeringCulture\n\n###### The Data Engineering Podcast interview\n\nAlexander Gallego \u2022\n\nOctober 2, 2020\n\nEngineering\n\n###### Redpanda\u2019s official Jepsen report: What we fixed, and what we shouldn\u2019t\n\nDenis Rystsov \u2022\n\nMay 3, 2022\n\n\u00a9 2024 Redpanda Data Inc.\n\nCookie preferences\n\nThis website uses cookies to enhance the user experience and to better\nunderstand how our site is used. By continuing to use this site or clicking on\nAccept, you are consenting to our use of cookies and our privacy policy.\n\n", "frontpage": false}
