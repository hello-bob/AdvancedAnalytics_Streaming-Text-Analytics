{"aid": "40183732", "title": "A Software Engineering Career Ladder", "url": "https://www.jamesshore.com/v2/blog/2024/a-software-engineering-career-ladder", "domain": "jamesshore.com", "votes": 1, "user": "jdlshore", "posted_at": "2024-04-27 21:28:34", "comments": 0, "source_title": "James Shore: A Software Engineering Career Ladder", "source_text": "James Shore: A Software Engineering Career Ladder\n\n## The Art of Agile^SM\n\n## A Software Engineering Career Ladder\n\n### April 27, 2024\n\nI\u2019ve been quiet lately, and that\u2019s because I\u2019ve joined OpenSesame as Vice\nPresident of Engineering. It\u2019s been a fascinating opportunity to rebuild an\nengineering organization from the inside, and I\u2019m loving every minute. We\u2019re\nintroducing a lot of cutting-edge software development practices, such as\nself-organizing vertically-scaled teams and Extreme Programming.\n\nAs you might expect, introducing these changes to an organization with\n[REDACTED] number of engineers has been challenging. (I\u2019m not sure if I\u2019m\nallowed to say how many engineers we have, so let\u2019s just say \u201clots,\u201d but not\n\u201ctons.\u201d Bigger than a breadbox, anyway. Enough that I don\u2019t do any coding\nmyself, and the managers that report to me don\u2019t have time to do much either.)\n\nWhat I\u2019m really doing is changing the engineering culture at OpenSesame.\nCulture doesn\u2019t change easily. It tends to snap back. True change involves\nchanging hundreds of little day-to-day decisions. That\u2019s hard, even when\npeople want to make those changes, and full buy-in is hard to come by. I\u2019ve\nhired several XP coaches to help, but even they\u2019re stretched thin.\n\n### A Lever for Change\n\nThis is where the new career ladder comes in. OpenSesame had a pretty\ninnovative approach to career development before I joined. It involved a\nspreadsheet where engineers would gather evidence of their skills. Each piece\nof evidence contributed towards an engineer\u2019s promotion. It did a nice job of\nbeing objective (or at least, as objective as these things can be) and clear\nabout expectations.\n\nThe new career ladder builds on the ideas of the previous spreadsheet to\nintroduce the changes I want. Where the old spreadsheet focused on individual\nownership and investigating new technologies, the new one emphasizes teamwork,\npeer leadership, and maintainable code. I\u2019m hoping this will help direct\npeople to new behaviors, which will in turn start to change the engineering\nculture.\n\nThe new spreadsheet also replaces the previous evidence-based approach with a\nsimple manager-led evaluation of skills. This makes room for a lot more\nskills. Too many, possibly. It\u2019s a very fine-grained approach. But I\u2019m hoping\nthat will help provide clarity to engineers and give them the opportunity to\npick and choose which skills they want to work on first.\n\n### How It Works\n\nEach title has certain skill requirements, which are grouped into skill sets.\nFor example, \u201cSoftware Engineer\u201d requires these skill sets:\n\n  * Basic Communication\n  * Basic Leadership\n  * Basic Product\n  * Basic Implementation\n  * Basic Design\n  * Basic Operations\n\nEach skill set includes several skills. For exaqmple, \u201cBasic Design\u201d includes\nthese skills:\n\n  * Decompose problem into tasks\n  * Class abstraction\n  * Mental model of your team\u2019s codebase\n  * Mental model of a complex dependency\n  * Campsite rule\n  * Fail fast\n  * Paranoiac telemetry\n  * Evaluate simple dependencies\n\n(There\u2019s a document that explains each skill in more detail.)\n\nManagers evaluate each engineers\u2019 skills by talking to team members and\nobserving their work. Each skill is graded on this scale:\n\n  * None. The engineer doesn\u2019t have this skill.\n  * Learning. The engineer is learning this skill.\n  * Proficient. The engineer can succeed at the skill when they concentrate on it, but it isn\u2019t second nature.\n  * Fluent. The engineer uses the skill automatically, without special effort, whenever it\u2019s appropriate.\n\nWhen an employee is fluent at all the skills for a particular title (and all\nprevious titles), they\u2019re eligible for promotion to that title.\n\n(We also offer step promotions, such as Software Engineer 1 to Software\nEngineer 2, which come when the engineer is proportionally far along their way\nto the next title.)\n\n### Submitted for Your Approval\n\nWhy tell you all this? Because I want your feedback. We have an early draft\nthat we\u2019re starting to roll out to a handful of engineers. I\u2019m sure there are\nopportunities for improvement. We\u2019ve probably forgotten some skills, or set\nthe bar too high in some areas, or too low.\n\nSo I\u2019d love for you to take a look and share what you think. Maybe you\u2019ll find\nsome of the ideas useful for your own teams, too. You can find the spreadsheet\nand documentation here:\n\n  * Skill documentation\n  * Career ladder spreadsheet (somewhat mangled)\n\nPlease share your feedback in one of these places:\n\n  * Mastodon\n  * LinkedIn\n  * Hacker News\n\n### Full Career Ladder\n\nHere\u2019s the full list of titles and skills. You can find descriptions of each\nskill in the documentation.\n\n#### Associate Software Engineers\n\nAssociate Software Engineer 1s are at the start of their career. They\u2019re\nexpected to understand the basics of software development, and be able to work\nin a professional setting, but they\u2019re mostly working under the guidance of\nmore experienced engineers.\n\n  * Professionalism\n\n    * Spoken and written English\n    * Work ethic\n    * Intrinsic motivation\n    * Remote attendance\n    * In-person attendance\n    * Active participation\n    * Respectful communication\n    * Transparency\n    * Team orientation\n    * Follow the process\n    * Grit\n    * Absorb feedback\n    * Growth mindset\n    * OpenSesame Qualified^1\n  * Classroom Engineering\n\n    * Object-oriented programming language\n    * Pairing/teaming driver\n    * Classroom-level debugging\n    * Function and variable abstraction\n\n^1\u201cOpenSesame Qualified\u201d is our internal training program.\n\n#### Software Engineers\n\nSoftware Engineer 1s still have a lot to learn, but they\u2019re able to contribute\nto the work of their team without explicit guidance. They\u2019re beginning to\ndemonstrate peer leadership skills and develop their abilities as generalizing\nspecialists.\n\n  * Basic Communication\n\n    * Collective ownership\n    * Defend a contrary stance\n    * \u201cYes, and...\u201d\n    * Try it their way\n    * Technical feedback\n    * Active listening\n    * As-built documentation\n  * Basic Leadership\n\n    * Basic facilitation\n    * Team steward\n    * Valuable increment steward\n    * Scut work\n  * Basic Product\n\n    * Your team\u2019s product\n    * Your team\u2019s customers and users\n    * User story definition\n  * Basic Implementation\n\n    * Your team\u2019s programming language\n    * Your team\u2019s codebase\n    * Basic test-driven development\n    * Sociable unit tests\n    * Narrow integration tests\n    * End-to-end tests\n    * Manual validation\n    * Spike solutions\n    * Basic SQL\n    * Pairing/teaming navigator\n    * Basic algorithms\n    * Basic performance optimization\n    * Debugging your team\u2019s components\n    * Simple dependency integration\n    * Unhappy path thinking\n  * Basic Design\n\n    * Decompose problem into tasks\n    * Class abstraction\n    * Mental model of your team\u2019s codebase\n    * Mental model of a complex dependency\n    * Method and variable refactoring\n    * Campsite rule\n    * Fail fast\n    * Paranoiac telemetry\n    * Evaluate simple dependencies\n  * Basic Operations\n\n    * Source control\n    * Your team\u2019s release process\n    * On-call responsibility\n    * On-call triaging\n    * Issue investigation\n    * Your team\u2019s cloud infrastructure\n    * Code vulnerability awareness\n    * Cloud vulnerability awareness\n\n#### Senior Software Engineers\n\nDespite the name, Senior Software Engineer 1s are still fairly early in their\ncareers. However, they have enough experience to take a strong peer leadership\nrole in their teams. They\u2019ve developed broader generalist skills and deeper\nspecialist skills.\n\n  * Advanced Communication\n\n    * Clear and concise speaking\n    * Clear and concise writing\n    * Technical diagramming\n    * Explain mental model\n    * Ensure everyone\u2019s voice is heard\n    * Coalition building\n    * Interpersonal feedback\n    * Runbook documentation\n  * Advanced Leadership\n\n    * Peer leadership\n    * Comfort with ambiguity\n    * Risk management\n    * Intermediate facilitation\n    * Mentoring and coaching\n    * Critique the process\n    * Circles and soup\n  * Advanced Product\n\n    * Ownership\n    * Vertical slices\n    * Cost/value optimization\n  * Advanced Implementation\n\n    * All of your team\u2019s programming languages\n    * All of your team\u2019s codebases\n    * Codebase specialty\n    * Code performance optimization\n    * Complex dependency integration\n    * Retrofitting tests\n    * Exploratory testing\n  * Advanced Design\n\n    * Codebase design\n    * Simple design\n    * Reflective design\n    * Cross-class refactoring\n    * Basic database design\n    * Mental model of team dependencies\n    * Evaluate complex dependencies\n    * Simplify and remove dependencies\n  * Advanced Operations\n\n    * Observability\n    * Basic build automation\n    * Basic deployment automation\n    * Incident leader\n    * Incident communicator\n    * Incident fixer\n  * Senior SE Specialty\n\n    * Choose one of the specialty skill sets listed below.\n\n#### Technical Leads\n\nTechnical Leads are the backbone of a team. They combine deep expertise in\nseveral specialties with the ability to mentor and coach less experienced team\nmembers. They work closely with the team\u2019s other technical leads to advise\nengineering managers on the capabilities and needs of the team. However, this\nremains a coding-centric role, and the majority of their time is spent as a\nplayer-coach working alongside other team members.\n\n  * Team Leadership\n\n    * Personal authority\n    * Leaderful teams\n    * Leadership specialty\n    * Assess technical skills\n    * Assess interpersonal skills\n    * Assess product skills\n    * Technical interview\n    * Impediment removal\n  * Interpersonal Leadership\n\n    * Humility\n    * Psychological safety\n    * Calm the flames\n    * Ignite the spark\n  * Product Leadership\n\n    * Options thinking\n    * Status and forecasting\n    * Progress and priorities\n  * Design Leadership\n\n    * Simple codebase architecture\n    * Reflective codebase architecture\n    * Risk-driven codebase architecture\n    * Architectural refactoring\n    * Published API design\n  * Technical Lead Specialties\n\n    * Choose three(?) additional specialty skill sets.\n\n#### Staff Engineers\n\nStaff Engineers make a difference to the performance of Engineering as a\nwhole. They rove between teams, cross-pollinating information and ideas. They\nwork hands-on with each team, acting as player-coaches, bringing a breadth and\ndepth of expertise that people are happy to learn from.\n\nThese skill sets haven\u2019t been defined yet.\n\n#### Principal Engineers\n\nThis level hasn\u2019t been defined yet.\n\n#### Specialty Skill Sets\n\nStarting at the Senior Software Engineer level, engineers choose specialty\nskill sets in additional to the foundational skill sets described above. We\nhaven\u2019t defined these skill sets yet, but here are some of the ones we\u2019re\nconsidering:\n\n  * Product\n  * Distributed systems\n  * Databases\n  * Security\n  * Extreme Programming\n  * Developer Automation\n  * Algorithms\n  * Machine Learning\n  * Front-End\n  * iOS\n  * Android\n\n### Feedback\n\nPlease share your thoughts!\n\n  * Mastodon\n  * LinkedIn\n  * Hacker News\n\nIf you liked this entry, check out my best writing and presentations, and\nconsider subscribing to updates by email or RSS.\n\nCopyright 2002-2024 Titanium I.T. LLC | Phone: +1-503-267-5490 | Email: jshore@jamesshore.com\n\nColophon | Sharing\n\n", "frontpage": false}
