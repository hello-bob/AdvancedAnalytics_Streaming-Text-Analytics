{"aid": "40274770", "title": "Advice for Developers: How to Keep Moving When You're Stuck", "url": "https://spin.atomicobject.com/solve-problem-when-stuck/", "domain": "atomicobject.com", "votes": 1, "user": "philk10", "posted_at": "2024-05-06 13:59:16", "comments": 0, "source_title": "Advice for Developers: How to Keep Moving When You\u2019re Stuck", "source_text": "Advice for Developers: How to Keep Moving When You're Stuck\n\n\u2190 Back to Blog Home\n\n# Advice for Developers: How to Keep Moving When You\u2019re Stuck\n\nPersonal Optimization\n\nby: Brian Vanderwal\n\nMay 5, 2024\n\n  * Twitter\n  * Facebook\n  * Linkedin\n  * Hackernews\n\n### Article summary\n\n  * Take a deep breath.\n  * Talk at someone.\n  * Get more information.\n  * Read the documentation.\n  * Keep a log.\n  * Come back to center.\n\nImagine you\u2019ve been tasked with fixing a bug. Or you discovered an issue while\nimplementing a feature. With no obvious solution, you ask around to see if\nanyone has ideas. Nobody does. Or none of their ideas work. It looks like\nyou\u2019re on your own.\n\nYou dive in and try everything you can think of. Hours pass with no apparent\nprogress. Hours turn into days. The deadline is looming. You need something to\nshow for all your effort, but nothing is working. You hate this problem and\njust want it to be gone. Now what?\n\n## Take a deep breath.\n\nYour reptilian brain is not going to help you here. It\u2019s raising your stress\nlevels, tensing your muscles, and generally making it hard to think. Taking a\nbreath sounds trite, but it\u2019s easy to forget when you\u2019re under pressure. When\ntime is running out, it seems the only course of action is to hold your breath\nand face the problem head-on.\n\nAnd once you\u2019ve been at it a while, simply taking a breath and trying to\n\u201cclear your mind\u201d might not be enough. Instead, try shifting your focus to\nsomething else for the moment. See if you can fill in a few squares on that\ncrossword in the break room.\n\n## Talk at someone.\n\nEven if you don\u2019t have a person to actively pair with to solve the problem,\ntalking through it can help your own brain process things. A good listener can\nbe a person, a rubber duck, or a chatbot of your choice.\n\nChatbots are rapidly replacing search engines for solving esoteric programming\nissues. Whereas searching Google or StackOverflow depends on somebody else\nhaving experienced (and solved!) the same issue, chatbots can often give you a\nmore direct answer faster. Even if the bot doesn\u2019t solve your problem\nimmediately, the chance that it will at least give you some ideas to try is\nworth a few minutes.\n\n## Get more information.\n\nOnce you\u2019ve exhausted all your best guesses, it\u2019s easy to get stuck in a\nbrute-force loop of trying anything and everything. This sort of stabbing in\nthe dark can sometimes work out, but, most of the time, you need more\ninformation.\n\nIs there some behavior in the bug reproduction that seems impossible? Add as\nmuch logging as you can in order to piece together a comprehensive picture of\nwhat\u2019s going on. Or temporarily delete code until the problem goes away to\nnarrow down the cause.\n\nIs there some aspect of the system you\u2019re not very familiar with? It\u2019s worth\ntaking some time to understand the piece of the system most related to the\nproblem at hand. Even if the code itself is readable, keeping a map of a\ncomplicated system in your head is difficult. Draw a diagram to help yourself\nremember the important parts. Tools that generate graphs like function call\ntrees from source code are neat, but usually include too much noise to\nactually be useful.\n\n## Read the documentation.\n\nReading documentation is tedious. And it\u2019s hard to think about spending hours\nporing over documentation when you need to solve this issue now. But unless\nyou\u2019re an expert in the tool/framework/language at hand, you will have gaps in\nyour knowledge. And the answer might be hiding in those gaps.\n\nIt\u2019s hard to overstate the value of reading documentation, especially if\nyou\u2019re stuck in a loop of guessing and checking. It\u2019s annoying how often the\nsolution to a problem was one configuration setting that I never would have\nthought to look for.\n\n> \u201cGive me six hours to chop down a tree and I will spend the first four\n> sharpening the axe.\u201d \u2014 commonly attributed to Abe Lincoln\n\nSpend some time solidifying your understanding of the domain surrounding the\nproblem. Then you\u2019ll be more likely to solve the problem without guessing.\nYou\u2019ll also be able to make sense of whatever you observe in the course of\nyour investigation more easily.\n\n## Keep a log.\n\nIf you don\u2019t remember what you\u2019ve tried, or what sub-problems you\u2019ve already\nsolved, it will take much longer to find the solution. Find a way to record\nyour progress. Keep details about what you\u2019ve tried, and especially copy the\nexact text of any error messages. When you inevitably have to backtrack and\ntry something different, you will likely face the same error again.\n\nIf I\u2019m working through a code problem, I like to make \u201ccheckpoint\u201d commits in\nGit. These are a lot like WIP (work-in-progress) commits but tend to be much\nmore granular. A checkpoint is like a fork in the road that I might come back\nto if I hit a dead-end. If I am ever about to abandon a bunch of code I just\nwrote, I will ensure it\u2019s captured in a checkpoint first. Parts of the code\nmight ultimately still be useful, and it\u2019s nice to have a reference of what I\ntried.\n\n## Come back to center.\n\nPeriodically remind yourself of the original problem you\u2019re trying to solve.\nAfter a few hours, you might realize you\u2019ve gone down several rabbit trails\nand are thoroughly stuck in the weeds. But getting there may have given you\nsome new information to attack the original problem. Take a moment to\nbrainstorm about what to try next. You might even realize you were trying to\nsolve the wrong problem all along.\n\nproblem solving\n\nBrian Vanderwal Software Consultant and Developer at Atomic Object Grand\nRapids. Clean coder. Minimalist. Rock climber.\n\nAll Posts \u2192\n\n### Related Posts\n\n  * Personal Optimization\n\n## Shifting Gears: Master the Art of Work-Life Balance in a Remote World\n\n  * Personal Optimization\n\n## Improve Your Work by Managing Your Energy\n\n  * Personal Optimization\n\n## Not Just Another Programming Language: Skills That Make a Difference\n\n## Keep up with our latest posts.\n\nWe\u2019ll send our latest tips, learnings, and case studies from the Atomic\nbraintrust on a monthly basis.\n\n[mailpoet_form id=\"1\"]\n\nConversation\n\n### Join the conversation Cancel reply\n\n### The Software Life Category\n\n  * Growing as Makers\n  * Extracurricular Activities\n  * Evolving the Industry\n  * Personal Optimization\n\nRelated Posts\n\nPersonal Optimization\n\n# Shifting Gears: Master the Art of Work-Life Balance in a Remote World\n\nPersonal Optimization\n\n# Improve Your Work by Managing Your Energy\n\nPersonal Optimization\n\n# Not Just Another Programming Language: Skills That Make a Difference\n\n### Tell Us About Your Project\n\nWe\u2019d love to talk with you about your next great software project. Fill out\nthis form and we\u2019ll get back to you within two business days.\n\nShare Your Project\n\nAtomic is a software design + development consultancy.\n\n\u00a9 2024 Atomic Object LLC\n\n##### Explore\n\n  * Careers\n  * Diversity\n  * Resources\n  * Atomic Blog\n\n##### Offices\n\n  * Grand Rapids\n  * Ann Arbor\n  * Chicago\n  * Raleigh-Durham\n\n##### Details\n\n  * Contact\n  * Media\n  * Privacy Policy\n\n", "frontpage": false}
