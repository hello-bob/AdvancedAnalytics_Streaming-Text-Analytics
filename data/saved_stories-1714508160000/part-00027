{"aid": "40210549", "title": "Skylicht: Modern Fork of Irrlicht 3D", "url": "https://github.com/skylicht-lab/skylicht-engine", "domain": "github.com/skylicht-lab", "votes": 1, "user": "klaussilveira", "posted_at": "2024-04-30 12:59:15", "comments": 0, "source_title": "GitHub - skylicht-lab/skylicht-engine: Skylicht Engine is C++ Game Engine based on Irrlicht 3D. And my goal is to create a high-performance and lightweight Game Framework that can seamlessly function on both web and mobile platforms. This framework will be available to everyone for free.", "source_text": "GitHub - skylicht-lab/skylicht-engine: Skylicht Engine is C++ Game Engine\nbased on Irrlicht 3D. And my goal is to create a high-performance and\nlightweight Game Framework that can seamlessly function on both web and mobile\nplatforms. This framework will be available to everyone for free.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nskylicht-lab / skylicht-engine Public\n\n  * Sponsor\n  * Notifications\n  * Fork 50\n  * Star 593\n\nSkylicht Engine is C++ Game Engine based on Irrlicht 3D. And my goal is to\ncreate a high-performance and lightweight Game Framework that can seamlessly\nfunction on both web and mobile platforms. This framework will be available to\neveryone for free.\n\n### License\n\nMIT license\n\n593 stars 50 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# skylicht-lab/skylicht-engine\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nducphamhongAdd empty boid system demoApr 26, 2024c69a0f4 \u00b7 Apr 26, 2024Apr 26,\n2024\n\n## History\n\n1,735 Commits  \n  \n### .circleci\n\n|\n\n### .circleci\n\n| Fix CI Android by another way install cmake| Feb 10, 2023  \n  \n### .github\n\n|\n\n### .github\n\n| Fix linux build use default cmake| Apr 25, 2024  \n  \n### Assets\n\n|\n\n### Assets\n\n| Fix bugs render particles on MacOS, change attribute size for Angle M...|\nApr 23, 2024  \n  \n### BuildCommand\n\n|\n\n### BuildCommand\n\n| Update make install for bullet3| Apr 3, 2024  \n  \n### CMake\n\n|\n\n### CMake\n\n| Update structure of Angle project| Feb 2, 2024  \n  \n### Documents\n\n|\n\n### Documents\n\n| Update the ambient (skinned instancing) is brighter| Apr 24, 2024  \n  \n### Projects\n\n|\n\n### Projects\n\n| Add empty boid system demo| Apr 26, 2024  \n  \n### Samples\n\n|\n\n### Samples\n\n| Add empty boid system demo| Apr 26, 2024  \n  \n### Scripts\n\n|\n\n### Scripts\n\n| Refactor for install library| Apr 3, 2024  \n  \n### Tools\n\n|\n\n### Tools\n\n| Fix software skinning for iOS demo| Mar 4, 2024  \n  \n### UnitTest/TestApp\n\n|\n\n### UnitTest/TestApp\n\n| Move angle source| Apr 2, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Add code to render Skinned with bone texture (just done the pose, not...|\nApr 9, 2024  \n  \n### CMakeLists.txt\n\n|\n\n### CMakeLists.txt\n\n| Update CMakeLists.txt and header| Apr 5, 2024  \n  \n### CMakeProjects.cmake\n\n|\n\n### CMakeProjects.cmake\n\n| Add empty boid system demo| Apr 26, 2024  \n  \n### LICENSE.md\n\n|\n\n### LICENSE.md\n\n| Rename LICENSE to LICENSE.md| Nov 26, 2019  \n  \n### PlatformConfig.cmake\n\n|\n\n### PlatformConfig.cmake\n\n| Fix link dynamic library on MacOS| Apr 6, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 23, 2024  \n  \n### Version.txt\n\n|\n\n### Version.txt\n\n| #6 Fix gitinorge & update editor Version.txt| Mar 21, 2021  \n  \n### appveyor.yml\n\n|\n\n### appveyor.yml\n\n| Update make install for bullet3| Apr 3, 2024  \n  \n### ios.cmake\n\n|\n\n### ios.cmake\n\n| Update ios ci| Feb 15, 2024  \n  \n## Repository files navigation\n\n# Skylicht Engine\n\nSkylicht Engine, which is an evolution of the Irrlicht Project. We have\nupgraded more features: Sound Engine, Physics Engine, Particle Engine...\n\n  * Core functionality: Direct3D11, OpenGL 4+, OpenGLES 3+, Google Angle GLES video driver backends.\n\n  * Cross-Platform Framework: Android, IOS, Win32/Win64, UWP, Linux, MacOS, HTML5.\n\n  * Render pipeline: Forwarder & Deferred.\n\nSkylicht Engine is a super lightweight Game Engine that targets mobile\nplatforms (Android, IOS). And, it's completely free.\n\n# How to build the project\n\nPlatform| Build Status  \n---|---  \nCygwin64  \nWindows  \nMacOS, IOS  \nLinux  \nEmscripten  \nAndroid  \n  \n## Prerequisites\n\n  * CMake 3.12 or higher\n  * Python 3.x\n  * Visual Studio (2017 or higher if you want to build on Windows OS)\n\n## Build source code\n\n  * Clone this repo\n\n  * Build assets bundle\n\n    \n    \n    C:\\skylicht-engine>cd Assets C:\\skylicht-engine\\Assets>python BuildAssetBundles.py C:\\skylicht-engine\\Assets>cd ..\n\n  * Run CMake from the current directory to generate visual studio project or xcode project\n\n    \n    \n    # Visual Studio 2017 C:\\skylicht-engine>cmake -S . -B ./PrjVisualStudio -G \"Visual Studio 15 2017\" -A x64 # Visual Studio 2019 C:\\skylicht-engine>cmake -S . -B ./PrjVisualStudio -G \"Visual Studio 16 2019\" -A x64 # Xcode /User/Skylicht/Documents/skylicht-engine$cmake -S . -B ./PrjMac -G Xcode # Linux $ skylicht-engine$ cmake -S . -B ./PrjLinux -G \"Unix Makefiles\"\n\n  * Open the generated solution PrjVisualStudio/SKYLICHT_ENGINE.sln\n\n  * Once the solution opens, right click the SampleXXX project, click \"Set as StartUp Project\" and click the play button at the top to run the Demo App.\n\n  * More details: please preview command in BuildCommand folder.\n\n## Build data assets\n\n### Compress Texture\n\n  * Optional, You can skip this step if you don't modify any resource texture.\n  * This python tool will convert texture .TGA to compressed texture (.DDS, .ETC2, .PVRTC) to optimize gpu memory on runtime.\n\n    \n    \n    # Install Tinydb # https://pypi.org/project/tinydb C:\\skylicht-engine>C:\\Python37\\Scripts\\pip install tinydb # Install Pillow (Image processing) # https://pillow.readthedocs.io/en/4.1.x/index.html C:\\skylicht-engine>C:\\Python37\\Scripts\\pip install Pillow # Compress TGA to DDS, ETC2, PVR texture C:\\skylicht-engine>cd Assets C:\\skylicht-engine\\Assets>python BuildTextureCompressDDS.py C:\\skylicht-engine\\Assets>python BuildTextureCompressETC.py C:\\skylicht-engine\\Assets>python BuildTextureCompressPVR.py C:\\skylicht-engine\\Assets>cd ..\n\n### Build Shader\n\n  * Optional, You can skip this step if you don't modify any shader.\n  * This python tool use C Preprocessor to inline shader script (HLSL, HLSL)\n\n    \n    \n    # Install pcpp (C Preprocessor tool) # https://pypi.org/project/pcpp C:\\skylicht-engine>C:\\Python37\\Scripts\\pip install pcpp # Build shader script C:\\skylicht-engine>cd Assets C:\\skylicht-engine\\Assets>python BuildShader.py C:\\skylicht-engine\\Assets>cd ..\n\n# Add your code to Project\n\n## Add source code\n\n  * Add new source files or subfolders on Projects/{ProjectName}/Source and regenerate project\n\n    \n    \n    C:\\skylicht-engine>cmake -S . -B ./PrjVisualStudio -G \"Visual Studio 15 2017\" -A x64\n\n## Create application project\n\n  * Run Scripts/create_project.py. Example: Create application NewApplication at folder Samples\\NewApplication\n\n    \n    \n    C:\\skylicht-engine>python Scripts\\create_project.py NewApplication Samples\\NewApplication\n\n  * Edit CMakeProjects.cmake, add new line:\"subdirs (Samples/NewApplication)\" and regenerate projects\n  * Open Visual Studio Solution and click NewApplication - \"Set as StartUp Project\".\n\n# Android\n\n## Prerequisites\n\n  * Install Android Studio and SDK\n  * Install mingw-w64 for Windows\n  * Install Android NDK\n\n## How to build\n\n### Step 1: Build native library\n\n  * Edit the file BuildCommand/BuildAndroidNDK.cmd by text editor and update your path MINGW and NDK\n\n    \n    \n    # BuildAndroidNDK.cmd # Set your pc folder, example set MINGW=C:\\mingw-w64\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\mingw64\\bin set NDK=C:\\SDK\\android-ndk-r21e ...\n\n  * Run BuildCommand/BuildAndroidNDK.cmd to build android native library\n\n### Step 2: Copy native library to Gradle Project\n\n    \n    \n    # Make folder jniLibs on Android Project C:\\skylicht-engine>mkdir Projects\\Android\\app\\src\\main\\jniLibs\\armeabi-v7a C:\\skylicht-engine>mkdir Projects\\Android\\app\\src\\main\\jniLibs\\arm64-v8a # Copy result native ndk (from step 1) to jniLibs # Project SampleSkinnedMesh C:\\skylicht-engine>copy Bin\\Android\\Libs\\arm64-v8a\\libSampleSkinnedMesh.so Projects\\Android\\app\\src\\main\\jniLibs\\arm64-v8a C:\\skylicht-engine>copy Bin\\Android\\Libs\\armeabi-v7a\\libSampleSkinnedMesh.so Projects\\Android\\app\\src\\main\\jniLibs\\armeabi-v7a\n\n### Step 3: Copy asset resource to Gradle Project\n\n    \n    \n    C:\\skylicht-engine\\Assets>python BuildTextureCompressETC.py C:\\skylicht-engine\\Assets>python BuildAssetBundles.py C:\\skylicht-engine\\Assets>cd.. # Create assets folder in Gradle Project C:\\skylicht-engine>mkdir Projects\\Android\\app\\src\\main\\assets # Copy built-in asset C:\\skylicht-engine>copy Bin\\BuiltIn.zip Projects\\Android\\app\\src\\main\\assets # Copy project asset # Project SampleSkinnedMesh C:\\skylicht-engine>copy Bin\\Common.zip Projects\\Android\\app\\src\\main\\assets C:\\skylicht-engine>copy Bin\\SampleModelsResource.zip Projects\\Android\\app\\src\\main\\assets # Dont forget copy ETC texture C:\\skylicht-engine>copy Bin\\SampleModelsETC.zip Projects\\Android\\app\\src\\main\\assets\n\n### Step 4: Build APK by Android Studio or Gradle\n\nOpen Android Studio and import project Projects\\Android\n\nRun command build from Android Studio:\n\n### Android development\n\n  * You can rename your package name at build.gradle (Projects\\Android\\app)\n  * You can rename your application name at string.xml (Projects\\Android\\app\\src\\main\\res\\values)\n\n# iOS\n\n## Prerequisites\n\n  * Apple arm64 device\n  * Install XCode\n\n## How to build\n\n### Step 1: Build compress texture ETC and Build Asset Bundles\n\n    \n    \n    # Grant permission executive for PVRTexTool skylicht-engine/Tools/PVRTexTool/darwin$ chmod +x PVRTexToolCLI # Build compress texture ETC skylicht-engine/Assets$ python3 BuildTextureCompressETC.py # Build asset bundles skylicht-engine/Assets$ python3 BuildAssetBundles.py\n\n### Step 2: Generate iOS xCode Project\n\nIf you want build samples for iOS device, you should replace the\nbundleIdentifier in Samples/{ProjectName}/CMakeLists.txt.\n\n    \n    \n    elseif (BUILD_IOS) # replace your application name set(MACOSX_BUNDLE_EXECUTABLE_NAME SampleHelloWorld) set(APP_NAME \"SampleHelloWorld\") # replace your bundleIdentifier set(APP_BUNDLE_IDENTIFIER \"com.skylicht.helloword\") set(CODE_SIGN_IDENTITY \"iPhone Developer\") else()\n\nAnd generate iOS xCode Project by this script.\n\n    \n    \n    # generate project for iOS device skylicht-engine/BuildCommand$ ./GenerateXCodeIOS.sh # or generate for iOS simulator skylicht-engine/BuildCommand$ ./GenerateXCodeIOSSimulator.sh\n\nOpen iOS XCode Project on folder skylicht-\nengine/PrjIOS/SKYLICHT_ENGINE.xcodeproj\n\nNote: iOS Simulator is not yet support compressed texture and hardware\nskinning.\n\n# Build static or shared library\n\nSkylicht Engine can be compiled into a standalone library to simplify\nintegration into other projects.\n\n## Shared library\n\n    \n    \n    C:\\skylicht-engine>cmake -S . -B ./PrjVisualStudio -G \"Visual Studio 17 2022\" -A x64 -DINSTALL_LIBS=ON -DBUILD_SHARED_LIBS=ON C:\\skylicht-engine>cmake --build ./PrjVisualStudio --target install --config Debug\n\nNote: Use the parameters \"-DINSTALL_LIBS=ON -DBUILD_SHARED_LIBS=ON\" with cmake\ncommand\n\n## Static library\n\n    \n    \n    C:\\skylicht-engine>cmake -S . -B ./PrjVisualStudio -G \"Visual Studio 17 2022\" -A x64 -DINSTALL_LIBS=ON C:\\skylicht-engine>cmake --build ./PrjVisualStudio --target install --config Debug\n\n## How to integrate\n\nAnd then copy the resulting InstallLibs folder to another project. See the\nproject example: https://github.com/skylicht-lab/hello-skylicht\n\n# Roadmap\n\n  * Skylight Engine Core (In progress)\n  * Engine Editor (In progress)\n\n# Code example\n\n    \n    \n    // INIT SCENE FUNCTION // init scene/zone CScene* scene = new CScene(); CZone* zone = scene->createZone(); // camera CGameObject *camObj = zone->createEmptyObject(); CCamera* camera = camObj->addComponent<CCamera>(); camera->setPosition(core::vector3df(0.0f, 1.5f, 4.0f)); camera->lookAt( core::vector3df(0.0f, 0.0f, 0.0f), // look at target position core::vector3df(0.0f, 1.0f, 0.0f) // head up vector ); // load model CMeshManager* meshManager = CMeshManager::getInstance(); CEntityPrefab* meshPrefab = meshManager->loadModel(\"SampleModels/BlendShape/Cat.fbx\", NULL, true); // load material CMaterialManager* materialMgr = CMaterialManager::getInstance(); // search textures folder std::vector<std::string> textureFolders; // use Skylicht Editor to edit .mat file ArrayMaterial& catMaterials = materialMgr->loadMaterial(\"SampleModels/BlendShape/Cat.mat\", true, textureFolders); // create 3d object CGameObject* cat = zone->createEmptyObject(); cat->setName(\"Cat\"); cat->getTransformEuler()->setPosition(core::vector3df(0.0f, 1.0f, 0.0f)); // add render mesh component & init material CRenderMesh* meshRenderer = cat->addComponent<CRenderMesh>(); meshRenderer->initFromPrefab(meshPrefab); meshRenderer->initMaterial(catMaterials); // render scene to screen CForwardRP* renderPipeline = new CForwardRP(); CBaseApp* app = getApplication(); u32 w = app->getWidth(); u32 h = app->getHeight(); renderPipeline->initRender(w, h); // RENDER TO SCREEN FUNCTION renderPipeline->render( NULL, // render target is screen camera, // the camera scene->getEntityManager(), // all entities in scene core::recti() // the viewport is fullscreen );\n\n# Sample Projects\n\n### Samples\\HelloWorld\n\nEngine Components are used:\n\n  * FreeType Font\n  * Glyph Font\n  * Canvas Component\n  * Graphics2D\n  * GUI Text\n\n### Samples\\DrawPrimitives\n\nThis demo is to draw Cube 3D, set up, transform and use components.\n\n### Samples\\Materials\n\nThis demo code, that renders Sphere 3D, loads textures (Diffuse, Normal,\nSpecular), and binds SpecGloss shader to Material.\n\n### Samples\\SampleShader\n\nThis demo code, How to binds shader to Material.\n\n### Samples\\LuckyDraw\n\nEngine Components are used:\n\n  * FreeType Font\n  * Glyph Font\n  * Graphics2D\n  * GUI Text\n  * GUI Image\n  * GUI Mask\n  * EventManager\n\n### Samples\\SkinnedMesh\n\nThis is example code. How to render character model with animation, models are\ndownloaded from mixamo\n\n  * DAE Collada loader model/animation\n  * Forwarder rendering\n  * Skydome\n  * AnimationController\n\nLive demo: Emscripten\n\nBlendshape live demo: Emscripten\n\n### Samples\\LightmapUV\n\nThis is a demo how to use UnwrapUV tool to create Lightmap UV. Library xatlas\nis integrated to Skylicht Engine.\n\n### Samples\\Lightmapping\n\nThis is a demo code to use lightmapper to bake indirect lighting color on\nlightmap texture. Project references: Lightmapper\n\n#### Gazebo\n\nResult lightmap\n\n### Sponza lightmap\n\nSponza indirect lighting baked by Skylicht Lightmapper\n\n### Samples\\Sponza\n\nThis example is how to set up a simple lighting & lightmap. This scene uses\nbasic diffuse bump specular shader.\n\nRun on Ubuntu 20.04\n\nLive demo: (Web PC Only) Emscripten\n\n### Samples\\LightmappingVertex\n\nThis is a demo to use lightmapper to set indirect lighting color on vertex\ncolor.\n\nEngine Components are used:\n\n  * OBJ Wavefront loader\n  * Deferred and Forwarder rendering\n  * Dynamic Direction Lighting\n  * Shadow Mapping\n  * Lightmapper\n  * Skydome\n\n#### Baked Global Illumination (3 bounces)\n\nIrradiance baked on Vertex Color:\n\n#### Indirect + Direction light - No post processing (3 bounces light)\n\n### Samples\\Collision\n\nThis is a demo to use CollisionManager to get collision point from the ray.\n\nAnd how to query all triangles inside a Box\n\nAnd how to use the decal projector feature\n\nLive demo: (Web PC Only) Emscripten\n\n### Samples\\Instancing\n\nThis is demo setup render many mesh instancing to optimize draw call and\nrender performance.\n\nLive demo: Emscripten\n\n### Samples\\SkinnedMeshInstancing\n\nThis is a demo of drawing many characters and animations, that use GPU\nInstancing technique.\n\n### Samples\\Particles\n\nSkylicht Particle Component is a cleanup version of SPARK. We have optimized\nby GPU Billboard Instancing.\n\nThis is demo code how to create particle system and use imgui\n\n#### Basic particle\n\n#### Explosion demo\n\n#### Magic particle\n\nThis is a demo code on how to use a simple projectile, impact, trail particle,\nsub emitter system.\n\n### Samples\\Noise2D, Noise3D\n\nThis is demo code how to use noise library shader to make vfx effect, particle\nturbulence.\n\n# Contributing\n\nWelcome if you want to contribute your code to Skylicht Engine (Ex: add\nfeature or fix bug). Wellcome to join the group. Open an issue and submit a\npull request to this repository. Please read CONTRIBUTING.md for details on\nour code of conduct, and the process for submitting pull requests.\n\n# Thanks\n\n  * Julien Fryer (SPARK) about references and source code demo of particle system.\n  * Inigo Quilez about perlin noise reference.\n  * Irrlicht Community, who have shared some demo\n\n# License\n\nSkylicht Engine is licensed under MIT License\n\nSkylicht Engine is based in part on the work of:\n\n  * Irrlicht Engine\n  * Bullet Physics\n  * Google Angle\n  * Ocornut Imgui\n  * Xatlas\n  * ufbx\n  * Spark Particle\n  * Freetype2\n  * Independent JPEG Group, libPng, zlib, curl...\n\nThis means that if you've used the Skylicht Engine in your product, you must\nacknowledge somewhere in your documentation that you've used. It would also be\nnice to mention that you use the 3rd parties library... Please see the README\nfiles from 3rd parties for further information.\n\nThanks, Project Maintainer: Pham Hong Duc\n\n## About\n\nSkylicht Engine is C++ Game Engine based on Irrlicht 3D. And my goal is to\ncreate a high-performance and lightweight Game Framework that can seamlessly\nfunction on both web and mobile platforms. This framework will be available to\neveryone for free.\n\n### Topics\n\ngame-engine game-development particle directx11 irrlicht-engine opengles3\nlightmapper skylicht-engine google-angle\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\nCustom properties\n\n### Stars\n\n593 stars\n\n### Watchers\n\n32 watching\n\n### Forks\n\n50 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Sponsor this project\n\nskylicht-lab Skylicht Lab\n\nSponsor\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Contributors 3\n\n  * ducphamhong Duc Pham Hong\n  * niansa niansa/tuxifan\n  * Joilnen Joilnen\n\n## Languages\n\n  * C++ 67.8%\n  * C 28.6%\n  * HLSL 1.1%\n  * GLSL 0.9%\n  * CMake 0.6%\n  * HTML 0.5%\n  * Other 0.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
