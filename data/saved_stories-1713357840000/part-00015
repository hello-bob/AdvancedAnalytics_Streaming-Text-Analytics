{"aid": "40059988", "title": "Git-botch-email: Git's use of email", "url": "https://dorotac.eu/posts/git-botch-email/", "domain": "dorotac.eu", "votes": 1, "user": "goranmoomin", "posted_at": "2024-04-17 03:01:26", "comments": 0, "source_title": "Git-botch-email", "source_text": "Git-botch-email\n\n# # Git-botch-email\n\nI don't really like git-send-email. I avoid projects that use it, if I can.\n\nIt could have been much better, but I (thankfully) use it rarely enough that I\ncan't come up with its list of sins on the spot, and I don't end up getting my\narguments acknowledged.\n\nToday (2021-09-24) I have the dreadful need to send a patch to the Linux\nkernel, and I'm going to make the most of it by lining up my thoughts.\nHopefully someone takes it to heart and creates a `git-sends-email-better`.\n\n## ## Email is all right\n\nDon't get me wrong, I like the decentralization aspect of email, I like that\nit's based on open standards, that I can use an arbitrary client to send it,\nand that I don't have to run random code on my computer just to submit or\nreview patches. Forges fail at those, to various extents.\n\n## ## But git adds its own quirks\n\nI have a tree with my commit on top: it changed 3 lines. I want someone to\ninclude my changes on top of the official tree. Let's assume that I read the\nproject's contribution guide, and I know that I need to use git-send-email,\nand I also know where to send the change. Let's begin.\n\n    \n    \n    ``` $ git send-email No patch files specified! git send-email [options] <file | directory | rev-list options > [...] ```\n\n\"patch files\"? I thought git operated on the basis of commits and trees. Why\nwould I want to send a patch file using git? Anyway, there's a \"rev-list\"\npossiblity, so we can proceed with that:\n\n    \n    \n    ``` $ git send-email 00082f898de21fd5ebb28dc561c173f6fde8e44a /tmp/7yZAWWiApC/0001-media-imx-Fix-rounding.patch To whom should the emails be sent (if anyone)? ```\n\nI answer the questions, and then I get:\n\n    \n    \n    ``` Send this email? ([y]es|[n]o|[e]dit|[q]uit|[a]ll): ```\n\nLol, no. It's my first submission, and I want to review it. Possibly by giving\nit to someone else first. I'm only human, and I make mistakes.\n\nBut where's the \"save\" option?\n\nOkay, never mind. Maybe there is a \"save\" option further along the way. After\nall, I didn't give git any email access yet \u2013 I just want a dry run. It's not\ngoing to throw away the edits it offers you to perform, right?\n\n    \n    \n    ``` Send this email? ([y]es|[n]o|[e]dit|[q]uit|[a]ll): y sendmail: Cannot open mail:25 Died at /usr/libexec/git-core/git-send-email line 1497, <FIN> line 3. ```\n\n...Actually, it totallydid throw them away. Thankfully I didn't make any edits\n(j/k, the first time in my life I tried to send a patch, I followed a tutorial\nand already wrote a heap of text at this step. That hurt).\n\nDo you know how the cat keeps meowing but you have no idea what it wants? If\nonly it could speak human language.\n\nIf only git-send-email could speak human language.\n\nSome searching later, it turns out that, indeed, git wanted to have access to\nmy SMTP server to send the email itself.\n\n### ### Git sending emails\n\nLet's get back to the save fiasco. I have a perfectly cromulent email client\nwhich can import .mbox or .eml files, and send them on. It's already\nconfigured for my email server, it can sign my emails, I trust it with my\npasswords, and it's customized to save sent emails to IMAP.\n\nWhy can't I save my git patch, and load it into my email client, to send it\nwith my GPG signature?\n\nWhy should I trust git with full access to my email outbox? Why shouldn't I be\nable to use my usual Mail User Agent (MUA) to do the sending in a way that I\npre-approved, respecting the security level I want to maintain, including TLS\nversions? Email is based on standards, after all.\n\nI just hope Git doesn't handle the email password itself, given its track\nrecord.\n\nOh, and don't forget that if you have a fancy multi-identity setup in your\nMUA, you have to duplicate it with git-send-email. Sure, git has a global\nconfig file. But If I configured that to my work account, then I'm one mistake\naway from sending a personal contribution to some other random repo from my\nwork email. Double difficulty if you contribute under multiple different\ncontexts.\n\nSo I'm stuck at having to configure every repo which demands git-send-email\nseparately (use `--local` instead of `--global`. With git-send-email, opsec is\nharder.\n\nJust give me the damn save already!\n\n### ### Acceptance\n\nOkay, I guess I have little choice in the matter. *Sigh*. Let's change the\nemail to point to myself as the addressee. This will obviously not be a dry\nrun for the final email because of the address mismatch, but hopefully nothing\nstarts on fire when we change the addressee later.\n\nGreat, it seems to look ... odd. I was not expecting the patch to be part of\nthe message. How am I supposed to download and apply it? By copying and\npasting? It makes sense: those who reply can easily add their comments inline.\nI guess I can live with it. As long as I don't change the contents of the\npatch, it should be possible to extract.\n\n### ### Intermission\n\nBut wait, git-send-email allows you to edit the message before sending, and\nmess it up in any way you want?!?\n\n    \n    \n    ``` Send this email? ([y]es|[n]o|[e]dit|[q]uit|[a]ll): y OK. Log says: [...] Result: 250 ```\n\nLOL, git-send-email apparently doesn't do any validation. I hope that email\ndidn't actually get forwarded anywhere. I put in \"none\" in the address field,\nbut I dont really know well enough how git-send-email works. I've seen it add\naddresses. That wouldn't have worried me with my MUA.\n\n### ### Back to the draft\n\nOh, right, maybe I can actually edit the draft from my MUA this time! If git-\nsend-email doesn't try to stop me from being an idiot, I have no reason to use\nit now.\n\nI copied the email from inbox to drafts, and added the timely message.\n\n### ### Intermission 2\n\n> > Sometimes it's convenient to annotate patches with some notes that are not\n> meant to be included in the commit message. [...] Such messages can be\n> written below the three dashes \"---\" that are in every patch after the\n> commit message.\n\nSo, if I want to include extra context inside my email, I should cram it in\nbetween lines of computer-readable text and hope for the best?\n\n>\n>     ``` The changes from 451a7b7815d0b pass 2^n to round_up, while n is needed. Fixes: 451a7b7815d0b --- Hi, I tested the patch on the Librem 5. drivers/staging/media/imx/imx-media-utils.c | 6 +++--- 1 file changed, 3 insertions(+), 3 deletions(-) diff --git a/drivers/staging/media/imx/imx-media-utils.c b/drivers/staging/media/> imx/imx-media-utils.c index 5128915a5d6f..a2d8fab32a39 100644 ```\n\nThat must be the best way ever invented to ensure people accidentally alter\nthe wrong thing.\n\n### ### Applying the patch\n\nI was hoping not to have to go through the ordeal, but I don't want to bother\nmy co-workers with my non-work blog. I'm being too nice.\n\nI was joking when I said \"copy-paste\" the email content, and yet, this is how\nStack Overflow deals with it. And while I'm finding a bunch of guides for\nsending, that's the only answer dealing with receiving git-send-email results.\nAlas.\n\nSurprisingly, it worked-for-me.\n\nA couple exchanged emails later, and... I need to change the commit contents.\nSince the change was small, I just winged it, and altered the email directly,\nbut if I actually had to go through the entire ordeal of git-send-email, I'd\nlose my changes again.\n\n### ### Revisions\n\nFinally, my email went to review. Of course, it didn't come out unscathed. I\nhad to submit a second version, which consisted of multiple commits.\n\nHere again, git-send-email showed how being careful results in paper cuts:\neach commit is sent as a separate email. That would have been okay of I could\njust load them into my draft folder and send from there, but, as we\nestablished earlier, the only way to do that is to send the email to myself.\nThat means I have to change the recipient list for each email in the series\nmanually. What botheration!\n\n## ## More tool problems\n\nEven after the patch was sent successfully, it's still less than a commit. It\ndoes not preserve the history of how the author got there. The base tree is\ndiscarded, and only the diff remains. Without an external convention, the\nreviewer does't even know which tree to apply the patch on, much less where it\nwas originally tested. It's impossible to merge trees using git-send-patch\neither. There's not much \"git\" in it, really, because commits and trees are\nwhat git is made of.\n\n## ## Linux problems\n\nThere's a separate class of problems that are not the consequence of the tool,\nbut the consequence of the culture which is often associated with the tool.\nIt's fixable without any software changes, but it needs changes to wetware \u2013\nwhich is probably even more difficult.\n\nHere's a loose list, based on the Linux kernel:\n\nHow to find the correct address to direct the patches? How to find the correct\ntree to apply the patch on? Magical incantations are sometimes required like\n\"Signed-off-by:\" that have a meaning other than its constituent words (no, it\ndoesn't mean your email is signed). Those things are documented, but they are\nnot universal, and not obvious. And they are not difficult in the same way as\nwriting a kernel patch is difficult \u2013 those are pure bureaucracy overhead,\nwhich does not have any bearing on code quality.\n\nMore overhead is in supporting ancient clients that can't handle MIME or\ncompression. Those are banned in the kernel, instead of fixing clients to\nhandle compression and inline disposition. Another exercise to support\ninflexible tools at the expense of human effort.\n\nAnd the mother of all pet peeves: hard-wrapping of commit messages. Do you\nprefer to read prose by incessant scrolling, or with nonsense lines? Random\nexample from the Linux kernel mailing list:\n\nMonospaced text hard-wrapped wider than the display, reader scrolls every line\nhorizontally\n\nThis is what reading a patch would look like on the Librem 5 \u2013 depending on\nhow you prefer to suffer \u2013 and it's also what any other pre-formatted text\nlooks like. Including your commit messages. Have mercy and don't do hard\nwrapping.\n\n## ## It can be better!\n\nThose are, in the end, not unsurmountable problems, at least not all of them.\n*When used together with a competent email client*, git-send-email does its\njob passably. The only paper cut is not being able to export the emails\nwithout sending them.\n\nIt gets worse if there's no competent email client. Then the task of editing,\nreviewing, saving for later and coming back, and fixing mistakes falls\nentirely on the same tool. As far as I can tell, it's rather tedious, and the\nability to get an overview is rather poor. There's no way to save and resume\nat all.\n\nI'm not going to give it a score better than \"passable\" even with this papered\nover: it remains a fact that git-send-email almost encourages the submitter to\naccidentally mess up the patch by entering text in the wrong place. Until the\npayload is clearly delineated from the cover letter (as an inline\nattachment?), this cannot be solved.\n\n## ## **Some time later**\n\nOne of my patches was eventually accepted. The rest have been picked up by\nsome poor soul who has been trying to get them upstreamed for the past 2\nmonths.\n\ngit-send-email didn't get in the way any more, but I still messed up. I missed\nsome feedback in my inbox, and thought the patches were completely forgotten,\nuntil the new person stepped in. You might blame my way of reading email, and\nyou would be right: my email inbox is a mess. I've been trying to fix it for\nthe past 5 years with little success. Meanwhile, I rarely lose feedback when\nit's placed on a web page, because it organizes conversations in a sensible\nmanner.\n\nThankfully, that problem is not inherent to email, and has been solved by\nsourcehut. It closes the gap between an email-only workflow and a web-only\nforge by providing a single contact point, and displaying the knowledge\n(including historical data) in a decent manner. My analysis wouldn't be\ncomplete without mentioning it, and I ask projects using git-send-email to\nadopt it or something similar: I can't handle naked emails, and I'm not the\nonly one!\n\nBut, being an internet service, sourcehut doesn't fix the problems in git-\nsend-email. Perhaps they could come up with an improve version of that tool? I\nsure hope they could.\n\nWritten on 2022-03-13.\n\nComments\n\ndcz's projects\n\nThoughts on software and society.\n\nAtom feed\n\nArticles published under the CC-BY-SA 4.0 license.\n\n", "frontpage": false}
