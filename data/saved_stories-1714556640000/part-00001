{"aid": "40216732", "title": "How to make a web color palette with Bash", "url": "https://allthingsopen.org/articles/web-color-palette-bash-tutorial", "domain": "allthingsopen.org", "votes": 3, "user": "billybuckwheat", "posted_at": "2024-04-30 21:44:04", "comments": 0, "source_title": "How to make a web color palette with Bash tutorial - All Things Open", "source_text": "How to make a web color palette with Bash tutorial - All Things Open : All\nThings Open\n\n# We Open Source\n\nA community education resource\n\nApril 30, 2024\n\n5 min read\n\n# How to make a web color palette with Bash tutorial\n\n## Use a \u2018for\u2019 loop in Bash to loop over a set of values and create a web-safe\ncolor palette.\n\nBy Jim Hall\n\nImage by Pexels from Pixabay\n\nYou can select colors in HTML pages using several different methods, including\nthe old standby of \u201chex\u201d or hexadecimal color values. Specifying a color using\nhex values requires a combination of numbers that represent the amount of red,\ngreen, and blue light. These values are in the range 0 to 255, but in hex\nnumbers that\u2019s 00 to ff.\n\nWhen the web was still a new idea, and computers had only a limited set of\ncolors they could display reliably across different systems, many web\ndevelopers used a set of \u201cweb-safe colors\u201d to design new websites. These web-\nsafe colors incremented the hex values by \u201c3\u201d so had numbers like 00, 33, ..\nand so on until cc and ff. While modern computers can display many more colors\nthan this limited palette, I sometimes like to refer back to the web-safe\ncolors when I create new web pages. That way, I know my pages will look good\nanywhere.\n\nYou can find copies of the web-safe palette in many places online, but you can\njust as easily create your own web-safe color sample. And it\u2019s a perfect\nopportunity to learn how to use the for loop in Bash scripts.\n\n## How to use the Bash \u2018for\u2019 loop\n\nThe basic form of a Bash for loop looks like this:\n\n    \n    \n    for variable in set ; do statements ; done\n\nFor example, let\u2019s say you wanted to print the numbers 1, 2, and 3. You can do\nthat using a Bash for loop:\n\n    \n    \n    $ for n in 1 2 3; do echo $n; done 1 2 3\n\nBash uses semicolons to separate commands, and let you write multiple\nstatements on a single line. If you were write this for loop out in a Bash\nscript file, you might instead write it on multiple lines like this:\n\n    \n    \n    #!/bin/bash for n in 1 2 3 do echo $n done\n\nBut I like to write out my for loops so the do starts \u201cinline\u201d with the for,\nand the done statement starts at the same level as the for statement:\n\n    \n    \n    #!/bin/bash for n in 1 2 3 ; do echo $n done\n\nHowever you choose to write out your for statement is a matter of personal\npreference.\n\n## Nested loops\n\nYou can also put one loop inside another loop, called \u201cnested\u201d loops. This can\nhelp you iterate over two or more variables, to combine tasks that need to be\ndone at the same time. For a simple example, let\u2019s say you wanted to print the\ncombinations of the letters A, B, and C with the numbers 1, 2, and 3. You can\ndo that with two nested for loops in Bash:\n\n    \n    \n    #!/bin/bash for letter in A B C ; do for num in 1 2 3 ; do echo $letter$num done done\n\nThis Bash script generates the nine combinations of the three letters and\nthree numbers:\n\n    \n    \n    $ bash nested.bash A1 A2 A3 B1 B2 B3 C1 C2 C3\n\n## Creating the web color palette with a \u2018for\u2019 loop\n\nThe web-safe color palette is all possible combinations of red, green, and\nblue from the hex color #000000 (black) to #ffffff (white) where each\nhexadecimal value of red, green, and blue steps up between the values 00, 33,\n66, 99, cc and ff. To create the web-safe palette, we need to use three nested\nfor loops, each for red, green, and blue values:\n\n    \n    \n    #!/bin/bash for red in 00 33 66 99 cc ff ; do for green in 00 33 66 99 cc ff ; do for blue in 00 33 66 99 cc ff ; do echo \"#$red$green$blue\" done done done\n\nSaving this script as colors.bash and running it generates a list of all 216\npossible combinations of web-safe colors:\n\n    \n    \n    $ bash colors.bash | wc -l 216 $ bash colors.bash | head #000000 #000033 #000066 #000099 #0000cc #0000ff #003300 #003333 #003366 #003399\n\n## Making it look pretty\n\nWe can use this script to generate an HTML page with each of the web-safe\ncolors, arranged in a \u201cpalette.\u201d To do that, let\u2019s first make a small edit to\nthe Bash script, to put each color in a separate <div> and each hex code\ninside a <code> tag. This will make it easier to apply styles to the HTML page\nin the next step:\n\n    \n    \n    #!/bin/bash for red in 00 33 66 99 cc ff ; do for green in 00 33 66 99 cc ff ; do for blue in 00 33 66 99 cc ff ; do echo \"<div style='background-color:#$red$green$blue'>\" echo \"<code>#$red$green$blue</code>\" echo \"</div>\" done done done\n\nThis updated Bash script generates an HTML page with \u201cbands\u201d of colors:\n\n    \n    \n    $ bash colors.bash > colors.html\n\nScreenshot (cropped); image: Jim Hall (CC-BY)\n\nTo turn the color bands into boxes, we need to apply a CSS style called \u201cgrid\u201d\nto place the <div> elements in a grid of six boxes per row. At the same time,\nwe can add \u201cpadding\u201d inside each box so the color and hex code are easier to\nsee, and a small \u201cgap\u201d between each box in the grid. An updated Bash script\nmight look like this, with the extra HTML and CSS inserted in the script using\na Bash trick called \u201chere\u201d documents, using cat<<EOF to start the \u201chere\u201d\ndocument, ended with EOF on its own line:\n\n    \n    \n    #!/bin/bash cat<<EOF <!DOCTYPE html> <html> <head> <title>Web-safe colors</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <style> @media only screen and (min-width:700px) { body { display: grid; grid-template-columns: repeat(6,1fr); column-gap: 1em; row-gap: 1em; } div { padding-bottom: 2em; } } code { background-color: black; color: white; } </style> </head> <body> EOF for red in 00 33 66 99 cc ff ; do for green in 00 33 66 99 cc ff ; do for blue in 00 33 66 99 cc ff ; do echo \"<div style='background-color:#$red$green$blue'>\" echo \"<code>#$red$green$blue</code>\" echo \"</div>\" done done done cat<<EOF </body> </html> EOF\n\nThe Bash script generates a professional-looking web-safe color palette. This\nmakes a handy reference when you need to refer to the web-safe colors.\nWhenever you need it, just run the script and save the output to a file, then\nopen the file in your web browser:\n\nScreenshot (cropped); image: Jim Hall (CC-BY)\n\n## About the Author\n\nJim Hall is an open source software advocate and developer, best known for\nusability testing in GNOME and as the founder + project coordinator of\nFreeDOS. At work, Jim is CEO of Hallmentum, an IT executive consulting company\nthat provides hands-on IT Leadership training, workshops, and coaching.\n\nRead Jim's Full Bio\n\nThis work is licensed under a Creative Commons Attribution-Share Alike 4.0\nInternational License.\n\n#### Save the Date for All Things Open 2024\n\nJoin thousands of open source friends October 27-29 in downtown Raleigh for\nATO 2024!\n\nSave the Date 2024\n\n#### Upcoming Events\n\nWe do more than just All Things Open and Open Source 101. See all upcoming\nevents here.\n\nUpcoming Events\n\n#### Open Source Meetups\n\nWe host some of the most active open source meetups in the U.S. Get more info\nand RSVP to an upcoming event.\n\nAll Things Open RTP Meetup Open Source South Carolina Open Source Charlotte\n\n## Keep in Touch\n\nStay up-to-date with news and events\n\n## New to All Things Open?\n\n  * About Us\n  * Mission & Values\n  * Environmental Policy\n  * Contact Us\n\n## Popular Links\n\n  * All Things Open 2024\n  * Meetups\n  * Speak at an Event\n  * Open Source Score\n\nWe're proud to be a Certified B Corporation\n\n\u00a9 All Things Open 2024\n\n", "frontpage": false}
