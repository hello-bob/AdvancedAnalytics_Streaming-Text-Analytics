{"aid": "40263568", "title": "An integrated food supply model for resilient foods in nuclear winter", "url": "https://allfed.github.io/allfed-integrated-model/", "domain": "allfed.github.io", "votes": 1, "user": "protontypes", "posted_at": "2024-05-05 10:00:35", "comments": 0, "source_title": "ALLFED Integrated Model", "source_text": "ALLFED Integrated Model\n\n  * Docs \u00bb\n  * ALLFED Integrated Food System Model\n\n# ALLFED Integrated Food System Model\n\nAn integrated food supply model for resilient foods in nuclear winter\n\n# Run the model\n\n  * You can create a variety of different scenarios with this model. A collection of possible scenarios are already available in the scenarios folder (e.g. run_model_with_resilient_foods.py). Examples of usage can be found in the scripts folder. Resulting pptx can be found in results/large_reports/. If you don't wish to run these results yourself, you can find more pregenerated results in the Zenodo repository (https://zenodo.org/record/7039924).\n\n### Running on command line\n\n(See Dependencies section first)\n\nResults from the paper can be rerun using the following command:\n\n    \n    \n    python3 plot_manuscript_figures.py rerun all\n\nYou can always just run\n\n    \n    \n    python3 plot_manuscript_figures.py\n\nTo see how to run fewer plots, load plots you already ran, or show specific\nresults from the paper.\n\nIndividual scenarios, or a series of scenarios of interest, can be specified\nin the scenarios/ folder.\n\n    \n    \n    ./run_scenarios_from_yaml.sh True False True argentina.yaml\n\nThis shows a series of stackplots of argentina with no food trade, including\nanimal slaughter, feed, and food available to humans after waste each month.\nThe scenarios shown are:\n\n  1. Baseline net production (continued feed/biofuel, normal climate)\n  2. Baseline gross production (shut off feed/biofuel, normal climate)\n  3. Nuclear winter net production (continued feed/biofuel, 150 Tg nuclear winter)\n  4. Nuclear winter with reduced feed/waste (continued feed/biofuel, nuclear winter, reduced waste)\n  5. Nuclear winter with resilient foods (continued feed/biofuel, nuclear winter, reduced waste, resilient foods)\n  6. Nuclear winter with resilient foods & more area (continued feed/biofuel, nuclear winter, reduced waste, resilient foods, cropland expansion)\n\nThe first argument is whether to show plotted simulation results for the\ndifferent rounds of optimization. The second argument is whether to show a map\nof percent people fed for all countries, and shows at the end for each type of\nscenario specified in the yaml file. The third argument should be set to False\nunless you are running the model from the web interface.\n\nRounds of optimization: Round1 is zero feed/biofuel for ascertaining minimum\nhuman needs that can be satisfied, Round2 determines the amount of feed and\nbiofuel that could be used to optimally produce feed and optionally biofuel,\nand the Round3 finally combines the appropriate amount of feed and biofuel\nused while still satisfying human minimum caloric needs. You can alter the\nplots shown by commenting out display code in scenarios/run_scenario.py\ndisplay_results_of_optimizer_round function calls.\n\nTo run these scenarios for a specific country, you can create a new yaml file\nwith a specific country specified in the yaml file. For example, to run Oman,\nyou can add the following to the yaml:\n\n    \n    \n    settings: countries: \"OMN\"\n\nWhere \"OMN\" is the 3 letter iso3 code for Oman.\n\nIf you name this new yaml file for the scenarios as:\n\"your_yaml_file_here.yaml\", then you would run:\n\n    \n    \n    ./run_scenarios_from_yaml.sh True False your_yaml_file_here.yaml\n\nTo see the results for Oman baseline, nuclear winter, and nuclear winter with\nresilient foods.\n\n# More Details\n\nSee the zenodo repository for more results and reports:\nhttps://zenodo.org/record/7039924\n\n# How the model works in general\n\n# more details\n\n#### Dependency management with Anaconda\n\nThe integrated model is written in python 3, ensure you have some version of\npython3, although it has only been tested with python 3.9 or later. Then,\ninstall the required packages using conda or miniconda:\n\nYou'll also need to install conda or miniconda, micromamba, or similar.\n\nSee https://docs.anaconda.com/anaconda/install/index.html for installation\ninstructions.\n\nOnce the program is installed on your device, set up a separate environment\nfor the project (do not use your base environment). This step and the\nfollowing can be done in two ways: - using the GUI or - using the Anaconda\nPrompt. For people new to coding the GUI is more intuitive.\n\n##### GUI\n\n  1. Open the Anaconda Navigator.\n  2. Select the tap \"Environments\".\n  3. Click \"Import\" and select the \"environment.yml\" file from the repository and name the new environment. All dependencies will be installed automatically.\n\n##### Anaconda Prompt\n\n  1. Open Anaconda Prompt.\n  2. Type in the following line:\n\n    \n    \n    conda env create -f environment.yml\n\nThe dependencies will be installed automatically and the environment will be\nname intmodel.\n\nIf you close out the terminal and open it later you will want to activate the\nenvironment again using\n\n    \n    \n    conda activate intmodel\n\nFor both versions: Code from this project will only run smoothly when opened\nin the new environment and when the working directory is set to the path\nlocation of the repository on your machine.\n\n# Regenerate documentation\n\n    \n    \n    python3 automate_mkdocs.py gendocs --config mkgendocs.yml mkdocs serve\n\nThen navigate to http://127.0.0.1:8000/ in your web browser.\n\n# Detailed Explanation of Files and Folders in this Repository\n\nBelow we explain all of the folders and files used for getting data,\nprocessing data, running simulations, then displaying and saving results of\nmodels.\n\nFiles purely for mentation or creating the python environment are not included\nbelow.\n\n## Directory Structure\n\n    \n    \n    \u251c\u2500\u2500 data/ \u2502 \u2502 All the tabulated data used for the repository, as well as intermediary \u2502 processed results from import scripts. Also contains data explaining \u2502 assumptions of the model in the Supplemental_Data.xlsx file. \u2502 \u251c\u2500\u2500 results/ \u2502 \u2502 Outputs of the model including figures and pptx generated reports. \u2502 \u251c\u2500\u2500 scripts/ \u2502 \u2502 Convenient scripts used to run sets of python scripts. \u2502 \u251c\u2500\u2500 src/ \u2502 \u2502 All of the code used to model the food system and to run simulations. \u2502\n\n## data/\n\nAll data for the use of generating scenarios is contained in this directory,\nwith the exception that some aggregate global constants for the food system\nare stored in the src/scenarios/scenarios.py file. (Note: currently getting\nrid of \"magic numbers\" in other files, but it is a long process)\n\nresilient_food_primary_results.npy, no_resilient_food_primary_results.npy\n\nThese are used for plotting data from src/scenarios/plot_primary_food.py.\n\nSupplemental_Data.xlsx\n\nThis is part of the raw data imported in the case of Nutrition, or used\ndirectly for estimating the performance of crop relocation or expected diet\navailability, as well as crop seasonality.\n\nThe spreadsheet contains the following tabs:\n\n  * Summary of field margins\n  * Cost modelling\n  * Diet affordability\n  * Crop years\n  * Production & stocks seasonality\n  * Crop Model Results\n  * Crop Model ASRS Relocation Estimate\n  * Crop Model No Relocation\n  * Crop Model 2005\n  * Production 2005\n  * Production 2005 Raw\n  * Nutrition\n\n## data/no_food_trade/\n\nContains data used to run the country-by-country no food trade model.\n\nprocessed_data/\n\nAll of the CSV files in this folder are generated by running the\nscripts/run_all_imports.sh file. They contain data in standard format for each\ncountry on values of interest for the food system models (for no food trade\nscenarios).\n\nraw_data/\n\nAll data files used for each country in the no food trade scenarios, directly\nfrom the data source (before processing to make standard format). Processing\nof these files happens using the import files in\n/src/import_scripts_no_food_trade/ directory, which can in turn be called all\nat once using the scripts/run_all_imports.sh script.\n\ncomputer_readable_combined.csv\n\nThe ultimate result from running all the import scripts in\nsrc/import_scripts_no_food_trade, (also accomplished using\nscripts/run_all_scripts.py). In particular, the\nsrc/import_scripts_no_food_trade/import_food_data.py file creates this by\nmerging the csvs into a dataframe then exporting the result to this csv.\n\n## data/no_food_trade/raw_data/\n\nRaw data files for each country in the no food trade scenarios, directly from\nthe data source (before processing to make standard format). Processing of\nthese files happens using the import files in\n/src/import_scripts_no_food_trade/ directory, which can in turn be called all\nat once using the scripts/run_all_imports.sh script.\n\nFAOSTAT_*_.CSV\n\nData files imported directly from FAOSTAT for the year in question.\n\nIntegrated Model With No Food Trade.xlsx\n\nThe spreadsheet is used as a remaining set of data pertaining to no food trade\nscenarios, which is imported in addition to raw FAOSTAT data to create the\nfinal computer_readable_code.csv file.\n\nContains the following tabs: * Population * Food waste * Outdoor crop\nProduction Seasonality * Outdoor Crop Production Baseline * Outdoor Crop\nProduction NW * Food Stocks * Seafood - excluding seaweeds * Grazing * Seaweed\n* Cellulosic Sugar * Greenhouses * Methane SCP * Combined\n\nrutgers_nw_production_raw.csv\n\nRaw data provided by the Rutgers Toon group from Xia et al publication\nregarding grasses and staple crops (spring wheat, maize, soybean, rice)\nfractional crop yields to baseline in a 150 tg nuclear winter scenario.\n\n## results/\n\nOutputs of the model including figures and pptx generated reports.\n\nlarge_reports/\n\nReports generated with the run_model_no_trade_baseline.py,\nrun_model_no_trade_no_resilient_foods.py, and\nrun_model_no_trade_with_resilient_foods.py in src/scenarios/.\n\nFigure_4/\n\nDiagrammatic flow chart of the integrated model.\n\n*.fig\n\nFigures produced by running some src/scenarios/ files. The last stage of\nfigure generation (plotting itself) always occurs in the\nsrc/utilities/plotter.py file.\n\n## scripts/\n\nConvenient scripts used to run sets of python scripts.\n\ncreate_all_no_trade_scenario_pptx.sh\n\nGenerates a full set of results in results/large_reports/ by running\nrun_model_no_trade scripts in src/scenarios/, using both the \"single\" and\n\"multi\" arguments.\n\nrun_all_imports.sh\n\nThis script creates all the imported .csv files in the\ndata/no_food_trade/processed_data folder, by running all the import_*_csv.py\nscripts in src/import_scripts_no_food_trade/. It's required to run this for\nimporting all the food system input data before running simulations if\nno_food_trade scenarios are being run.\n\n## src/\n\nAll of the code used to model the food system and to run simulations\n\nfood_system/\n\nCalled by the compute_parameters function in src/optimizer/parameters.py, each\nfunction represents a different part of the food system.\n\nimport_scripts_no_food_trade/\n\nThis is required to be run before other files in src/ in order to import raw\ndata into a usable format for other files in src/. It is a set of scripts that\nare run to import food system data, typically by the\nscripts/run_all_imports.sh file. These create the imported .csv files in the\ndata/no_food_trade/processed_data folder. It's required to run this for\nimporting all the food system input data before running simulations for\nno_food_trade scenarios.\n\n## src/optimizer/\n\nThe optimizer folder runs the following sequence in order for every scenario:\ncompute_parameters, run_optimizer, extract_results, interpret_results,\nvalidate_results. The parameters.py file also imports all the src/food_system\ncategory-specific calculations. The results of parameters.py are sent to the\noptimizer.py through the constants_out variable.\n\nOptimization in optimizer uses the PuLP linear optimizer to optimally satisfy\nthe series of constraints used in that model.\n\n## src/scenarios/\n\nRunning a script in scenarios is done after completing import of the scripts,\nif no_food_trade scenarios are being run. Files in scenarios/ are either\nutility files used to specify the scenarios or provide an intermediary\ninterface to allow other scripts to run the model in a particular way, scripts\nused to process and run specific scenarios for the nuclear winter with or\nwithout global food trade between trading blocs, or scripts which plot the\nresults of these scenario runs. The scenarios are all either involving full\nfood trade or no food trade between trading blocs, as determined by the\ntrading bloc data in no_food_trade/computer_readable_combined.csv and\nglobally-aggregated data stored in scenarios.py.\n\nUtility files used to specify the scenarios are: scenarios.py Utility files\nused to provide an intermediary interface to allow other scripts to run the\nmodel in a particular way are: run_model_no_trade.py, run_scenario.py\n\nScripts used to process and run specific scenarios for the nuclear winter with\nglobal food trade between trading blocs: run_model_with_resilient_foods.py,\nrun_model_baseline.py, run_model_no_resilient_foods.py, create_figure_3abcd.py\n\nScripts which plot the results of these scenario runs: plot_primary_food.py\n\nScripts used to process and run specific scenarios for the nuclear winter\nwithout global food trade between trading blocs: create_figure_1ab.py,\ncreate_figure_2abcde.py, run_model_no_trade_baseline.py,\nrun_model_no_trade_no_resilient_foods.py,\nrun_model_no_trade_with_resilient_foods.py, reproduce_xia_et_al_USA.py,\nrun_USA_with_improved_numbers.py\n\nThe files which simply plot results are: plot_primary_food.py\n\nThe scenarios are run under a single set of assumptions or multiple sets of\nassumptions. Uses input data stored in\ndata/no_food_trade/computer_readable_combined.csv. The python files in this\ndirectory are all the ways that the model can be run.\n\nOverall, the scripts in the scenarios folder interrelate as follows:\n\n( run_model_with_resilient_foods.py, run_model_baseline.py,\nrun_model_no_resilient_foods.py, create_figure_3abcd.py )\n==calls=for=each=scenario==> run_scenario.py\n\n( create_figure_1ab.py, create_figure_2abcde.py, reproduce_xia_et_al_USA.py,\nrun_USA_with_improved_numbers.py, run_model_no_trade_with_resilient_foods.py,\nrun_model_no_trade_no_resilient_foods.py, run_model_no_trade_baseline.py )\n==call=with=scenarios=defined==> run_model_no_trade.py\n\nrun_model_no_trade.py ==calls=for=each=scenario==> run_scenario.py\n\nIn the case of no food trade: scenarios.py <==loads==\ndata/no_food_trade/computer_readable_combined.csv\n\nrun_scenario.py <==loads== scenarios.py\n\nNext, the run_scenario.py file calls the optimizer as follows in order to\nproduce results for each scenario:\n\nrun_scenario.py ==calls=in=this=order=> src/optimizer/parameters.py\nsrc/optimizer/optimizer.py src/optimizer/extract_results.py\nsrc/optimizer/interpret_results.py src/optimizer/validate_results.py\n\nFinally the results are returned from run_scenario back up the call chain in\nreverse order.\n\nutilities/\n\nvarious useful utilities that are called elsewhere in the program, that do not\nserve any core function for the modelling. Notably, all the plotting code is\nlocated in the utilities directory.\n\nNext\n\nMe\n\nBuilt with MkDocs using a theme provided by Read the Docs.\n\nNext \u00bb\n\n", "frontpage": false}
