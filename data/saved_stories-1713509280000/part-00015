{"aid": "40081883", "title": "Effect \u2013 The Missing Stdlib for TypeScript", "url": "https://effect.website/", "domain": "effect.website", "votes": 1, "user": "lelo_tp", "posted_at": "2024-04-18 23:40:11", "comments": 0, "source_title": "Effect \u2013 The best way to build robust apps in TypeScript", "source_text": "Effect \u2013 The best way to build robust apps in TypeScript\n\nDocsBlog\n\nGitHubDiscord\n\n# The best way to ship fastership fasterin TypeScript\n\n  * Maximum Type-safety (incl. error handling)\n  * Makes your code more composable, reusable and testable\n  * Extensive library with a rich ecosystem of packages\n  * Clustering and Workflows (Alpha)\n\nGet Started\n\nEffect works everywhere:\n\nAnd with everything:\n\n## Make the hard things easy\n\nAs your application grows, Effect scales with it - keeping your code simple\nand maintainable.\n\nComplexity(Lower is better)\u2013Without Effect\u2013With Effect\n\nFeatures\n\n### Without Effect\n\n  * 1\n\n  * 2\n\n  * 3\n\n  * 4\n\n  * 5\n\n  * 6\n\n  * 7\n\n  * 8\n\n  * 9\n\n  * 10\n\n  * 11\n\n  * 12\n\n  * 13\n\n  * 14\n\n  * 15\n\n  * 16\n\n  * 17\n\n  * 18\n\n  * 19\n\n    \n    \n    async function getTodo( id: number ): Promise< | { ok: true; todo: any } | { ok: false; error: \"InvalidJson\" | \"RequestFailed\" } > { try { const response = await fetch(`/todos/${id}`) if (!response.ok) throw new Error(\"Not OK!\") try { const todo = await response.json() return { ok: true, todo } } catch (jsonError) { return { ok: false, error: \"InvalidJson\" } } } catch (error) { return { ok: false, error: \"RequestFailed\" } } }\n\n### With Effect\n\n  * 1\n\n  * 2\n\n  * 3\n\n  * 4\n\n  * 5\n\n  * 6\n\n  * 7\n\n    \n    \n    const getTodo = ( id: number ): Effect.Effect<unknown, HttpClientError> => Http.request.get(`/todos/${id}`).pipe( Http.client.fetchOk(), Http.response.json, )\n\n## The missing standard library for TypeScript\n\nTypeScript/JavaScript, the most popular programming language, is still missing\na standard library. Effect is filling this gap by providing a solid foundation\nof data structures, utilities, and abstractions to make building applications\neasier.\n\nSee 2022 State of JavaScript survey\n\n### Most desired JS features\n\n2022 State of JavaScript survey\n\n  * 2\\. Standard LibraryDocs\n\n  * 4\\. Immutable Data StructuresDocs\n\n  * 5\\. ObservableDocs\n\n  * 6\\. Pipe OperatorDocs\n\n  * 8\\. Pattern MatchingDocs\n\n### Powerful building blocks\n\nEvery part of the Effect ecosystem is designed to be composable. The Effect\nprimitives can be combined in many different ways to tackle the most complex\nproblems.\n\n  * Immutable data structures\n  * Asynchronous queues & pub-sub\n  * Configuration & dependency management\n\nRead documentation\n\n### No more one-off dependencies\n\nWith Effect the batteries are included. Regardless of the application, your\npackage.json will have never been this small.\n\n  * Data validation & serialization\n  * Frameworks for CLI & HTTP applications\n  * Powerful abstractions for every platform\n\nRead documentation\n\n### Never try & catch again\n\nEffect doesn't shy away from errors \u2014 it embraces them as a fact of life.\nSuccessfully handle failure with the built-in error-handling primitives.\n\n  * Type-safe errors as values\n  * Powerful retry & recovery APIs\n  * Tools for logging & tracing\n\nRead documentation\n\n## Let's see some example code\n\nDoing the right thing in TypeScript is hard. Effect makes it easy! We have\ncollated some examples to show you how Effect can be utilized in your next\nproject.\n\n  * Effect helps you with handling errors, async code, concurrency, streams and much more.\n  * Effect provides a unified replacement for many one-off dependencies.\n  * Effect integrates deeply with your current tech stack.\n\nEffect helps you with handling errors, async code, concurrency, streams and\nmuch more.\n\n#### Without Effect\n\n  * 1\n\n  * 2\n\n  * 3\n\n  * 4\n\n  * 5\n\n    \n    \n    const main = () => { console.log('Hello, World!') }\n    \n    main()\n\n$\n\nbun src/index.ts\n\n    \n    \n    Hello, World!\n\n#### With Effect\n\n  * 1\n\n  * 2\n\n  * 3\n\n  * 4\n\n  * 5\n\n    \n    \n    import { Console, Effect } from 'effect'\n    \n    const main = Console.log('Hello, World!')\n    \n    Effect.runSync(main)\n\n$\n\nbun src/index.ts\n\n    \n    \n    Hello, World!\n\n## Effect gives you new Superpowers\n\n### Composable & Reusable\n\nEverything in the Effect ecosystem is designed to work together. Building\napplications with Effect feels like playing with Lego.\n\n### Maximum Type-Safety\n\nEffect leverages the full power of TypeScript to give you confidence in your\ncode. From errors to managing dependencies \u2014 if it compiles, it works.\n\n### Built-In Tracing\n\nThe built-in support for tracing is first-class. Effect integrates seamlessly\nwith OpenTelemetry to give you full visibility over your application's\nperformance.\n\n### Built-In Metrics\n\nEffect has built-in support for metrics. You can use the provided\nOpenTelemetry exporter to integrate with a wide range of dashboards.\n\n### Easy to refactor\n\nMake changes to your app with confidence. Effect's powerful abstractions make\nit easy to refactor your code without breaking anything.\n\n## What Effect users are saying\n\nEffect is the \ud83d\udc10 of TypeScript - Rust style error handling - Retries,\nConcurrency, Streams, ... - Missing standard library\n\nTobias Lins\n\nProduct Engineer at Vercel\n\nEffect is so, so good. Error handling in TypeScript has always felt so\nhaphazard. Effect makes it feel effortless. And that\u2019s only a tiny part of\nwhat makes Effect such a great set of libraries. Keep up the great work!\n\nDevin Jameson\n\nSoftware engineer at PolyCam\n\nI LOVE Effect, been using it for a month now and it took a minute to figure\nout how to build composable services, but oh-my-god my code has never been\nthis sexy.\n\nDavid Peter\n\nFunctional programmer in TypeScript\n\nDelightfully, Effect is one of those rare tools that lift you up & educate you\nto become a better developer; Sustainably and well beyond the framework\nitself. And it does so both /effect/ively and *very* gently... Also, our\ncommunity is *chefs kiss*\n\nSebastian Lorenz\n\nTypeScript Engineer\n\nEffect is the \ud83d\udc10 of TypeScript - Rust style error handling - Retries,\nConcurrency, Streams, ... - Missing standard library\n\nTobias Lins\n\nProduct Engineer at Vercel\n\nEffect is so, so good. Error handling in TypeScript has always felt so\nhaphazard. Effect makes it feel effortless. And that\u2019s only a tiny part of\nwhat makes Effect such a great set of libraries. Keep up the great work!\n\nDevin Jameson\n\nSoftware engineer at PolyCam\n\nI LOVE Effect, been using it for a month now and it took a minute to figure\nout how to build composable services, but oh-my-god my code has never been\nthis sexy.\n\nDavid Peter\n\nFunctional programmer in TypeScript\n\nDelightfully, Effect is one of those rare tools that lift you up & educate you\nto become a better developer; Sustainably and well beyond the framework\nitself. And it does so both /effect/ively and *very* gently... Also, our\ncommunity is *chefs kiss*\n\nSebastian Lorenz\n\nTypeScript Engineer\n\nEffect is the \ud83d\udc10 of TypeScript - Rust style error handling - Retries,\nConcurrency, Streams, ... - Missing standard library\n\nTobias Lins\n\nProduct Engineer at Vercel\n\nEffect is so, so good. Error handling in TypeScript has always felt so\nhaphazard. Effect makes it feel effortless. And that\u2019s only a tiny part of\nwhat makes Effect such a great set of libraries. Keep up the great work!\n\nDevin Jameson\n\nSoftware engineer at PolyCam\n\nI LOVE Effect, been using it for a month now and it took a minute to figure\nout how to build composable services, but oh-my-god my code has never been\nthis sexy.\n\nDavid Peter\n\nFunctional programmer in TypeScript\n\nDelightfully, Effect is one of those rare tools that lift you up & educate you\nto become a better developer; Sustainably and well beyond the framework\nitself. And it does so both /effect/ively and *very* gently... Also, our\ncommunity is *chefs kiss*\n\nSebastian Lorenz\n\nTypeScript Engineer\n\n## Okay, so what's the catch?\n\n### Learning curve\n\nLearning Effect can be quite daunting but it doesn\u2019t take long for you to be\nproductive. It\u2019s similar to learning TypeScript. It\u2019s worth it.\n\n### Different programming style\n\nTo ensure a high level of type-safety, composabilty and tree-shakability,\nEffect's programming style might be different from what you're used to.\n\n### Extensive API surface\n\nEffect has an API for every situation. While it may take some time to learn\nthem all, a handful of the most common ones will get you a long way.\n\n## Frequently asked questions\n\n### Can I incrementally adopt Effect?\n\nYes! Adopting Effect you can start by refactoring small portions of your app,\nusually the ones with higher complexity, and keep going as you see fit\n\n### Does Effect scale?\n\nEffect was built for production since the very beginning, we take good care of\nmaking everything as performant as possible, by providing you with better ways\nto deal with concurrency and great observability finding bottlenecks in your\nprogram becomes easy\n\n### Do I have to know functional programming?\n\nNo! While Effect makes usage of Functional Programming principles and patterns\ninternally you can be proficient in Effect by simply using it as a smart\nPromise and forget that there is even a thing called Functional Programming\n\n### The library is huge, do I have to know it all?\n\nNo! Every module in Effect is made with a specific problem in mind that is\ndeemed to be common enough but you don't need to know everything, in fact you\ncan harness 80% of the productivity gain by just learning a few functions and\n2-3 core modules.\n\n### What's the minimum bundle size?\n\nThe core of Effect is a runtime system that weights about 15k when compressed\nand tree-shaken, the rest scales with usage. If you end up using 100k of\nEffect code there is a good chance your app would have been 1Mb if not using\nEffect\n\n### Any more questions?\n\nFeel free to reach out in our Discord community!\n\nJoin our Discord\n\n## Join our welcoming community\n\nSee all contributors\n\nJoin Discord\n\n2277+ community members\n\n290 currently online\n\nSee all contributors\n\nJoin Discord\n\n2277+ community members\n\n290 currently online\n\n## Start to ship faster in TypeScript\n\nEffect makes it easy to build typed, robust & scalable applications. Check out\nour friendly documentation to get started.\n\nGet Started\n\nMIT Licensed Copyright \u00a9 2024 Effectful Technologies Inc.\n\nGitHubDiscordTwitter\n\n### Docs\n\n  * Getting Started\n  * Guides\n  * API\n\n### Company\n\n  * Effectful\n\n### Legal\n\n  * Terms & Conditions\n  * Privacy Policy\n  * Contact Us\n\n", "frontpage": false}
