{"aid": "40133032", "title": "Unreal Engine 5.4 Release Notes", "url": "https://dev.epicgames.com/documentation/en-us/unreal-engine/unreal-engine-5.4-release-notes", "domain": "epicgames.com", "votes": 1, "user": "makepanic", "posted_at": "2024-04-23 15:27:19", "comments": 0, "source_title": "Unreal Engine 5.4 Release Notes", "source_text": "Unreal Engine 5.4 Release Notes | Epic Developer Community\n\n  * Unreal Engine 5.4\n  * Unreal Engine 5.3\n  * Unreal Engine 5.2\n  * Unreal Engine 5.1\n  * Unreal Engine 5.0\n\n  1. Developer\n  2. Unreal Engine 5.4 Release Notes\n\n# Unreal Engine 5.4 Release Notes\n\nOverview of new and updated features in Unreal Engine 5.4\n\n# What's New?\n\nUnreal Engine 5.4 brings further improvement to the core UE5 toolset. This\nrelease delivers improvements in a wide variety of areas, including Rendering,\nWorldbuilding, Procedural Content Generation (PCG), Animation and Modeling\ntools, Virtual Production, Simulation, and more.\n\nThis release includes improvements submitted by our community of Unreal Engine\ndevelopers on GitHub. Thank you to each of these contributors to Unreal Engine\n5.4:\n\nAGTomasz, alasher, amuTBKT, aschulz90, AtariDreams, avudnez, batlam987,\nBenVlodgi, berry0511, BigBirdSDP, BinaerBoy, BioXide, BlueMountainsIO,\nbovesan, brasky, bstegerESRI, ChetRippo, DannyGoodayle, DanteSSS333, dclyde-\nbrg, DecoyRS, devhyper, disseminate, djbozkosz, djethernet1, DomCurry,\ndorgonman, DoubleDeez, dpull, DreamSworK, duyaokun, dyanikoglu, EchoRed-3D,\nerebel55, ericdrobinson, Eyesiah, f3db43f4g443, fahhem, FattyMieo,\nFlyAndNotDown, foobit, fpwong, gameltb, gaspardpetit, gaurang-ingale,\ngeordiemhall, GregB-WG, Gusten, hcarrikerriot, hellokenlee, hnrqbaggio,\nhooni7440, igor-kondratiev, ilkeraktug, ill, intvoker, JakubZbikowski,\njamespark-unreal, jeremywhite2k, jiaqiaoyou, jkorpian, jorgenpt, juliancao,\nJungle178, Kalmalyzer, KaosSpectrum, KarimLUCCIN, karlingen, kdada, kdbn,\nKeithRare, kissSimple, klukule, KristofMorva, kyoilkim, ldisthebest,\nLennardF1989, lightbringer, Lithel, lolisia, losjun, LtRandolph,\nMagForceSeven, MalikuMane, MarcoAltomonteMilestone, MarcusSvensson92,\nMartinWickhamFB, mastercoms, Maxime, obinot, meglinge, midgen, MihailPreis,\nMystfit, najmm01, nchapmantimberline, negril, nickdarnell, originomeg,\nPhDittmann, phebert74, phisko, PICO-XR, pierricgimmig, projectgheist,\nPromesis, psketi, RandomInEqualities, Rideron85, RiotJoshuaGlazer, Ronsenval,\nrqgbx, RVillani, saim80, sapayne, scahp, shchavinskyi, Sigma-Erebus,\nslonopotamus, splatxman, SRombauts, SungJJinKang, sunluchang, Szmyk,\nTaaviVarjo, Tanc-ANT, teddemunnik, tehpola, thomasvanta, thraidh, tilongzs,\ntmcguire-meta, tnam, TroutZhang, Vaei, Victov, vorixo, wouter140, wwKevinS,\nXertor, xuelongmu, zenoengine, zgrapher, zhaojunmeng\n\n## Character and Animation\n\n### Extensibility for Animation Authoring Tools\n\nThis feature provides further extensibility within the Blueprint/Python APIs\nfor users to create customizable tools for animation authoring.\n\n  * Better Selection Scripting - you can grab selected keyframes and edit the selection of objects within Sequencer.\n\n### Layered Control Rigs\n\nWe have a new Layered Control Rig system which lets you use all the power of\nControl Rigs on top of many workflows, without the need to bake the data down\nto edit the characters, which can be destructive.\n\n### Animation Authoring\n\n#### New Gizmos\n\nThis update introduces redesigned gizmos for translation, rotation, and scale\nthat provide a familiar and intuitive interface for posing and animation.\n\n  * An improved look and style.\n\n  * Proper indirect manipulation.\n\n  * An improved arcball.\n\n  * A Parent Space option in Viewport while posing. We previously only had World and Local options available.\n\n#### Constraints 2.0\n\nWe have rewritten much of our constraint system to better handle level\nsequence workflows.\n\n  * Animated Constraints are now fully stored in the Level Sequence.\n\n  * Improved the evaluation engine to better support more constraint setups without causing cycles.\n\n  * Worked on the UX to improve the tool while using it.\n\n#### Anim Details 2.0 / Channel Box (mockup)\n\nWe overhauled the animation channel box to provide an experience more familiar\nto users of other popular DCC tools.\n\n### Post Retarget Phase\n\nWe added a new Retarget Phase that handles a set of operations after the\nretargeted result from IK Retargeter. These operations are applied in a stack\norder that aims to resolve retarget problems that are challenging or cannot be\nfully solved by FK Retarget Chain Maps or Full Body IK Retargeting.\n\nThis provides for proper assignment IK bones to match either the source\nanimation or retargeted result, root motion generation on the retargeted\nanimation, and animation curve remapping.\n\n### Sequencer Readability\n\nCreate a more appealing experience in the cinematic space, to broaden and\nenhance the wide audience of users, providing the means to create faster,\nbetter, and more complex cinematic experiences.\n\n  * Outliner Columns for Track States - The left hand side of the Sequencer Hierarchy Tree now includes new columns for users to see and access the Pin/Mute/Lock/Solo states of tracks with icons.\n\n  * Keyframe Status Indicators - The keyframe icon for animatable properties now changes based on the current keyframe status of the property while working in Sequencer. Users can easily tell if a property is keyed, not keyed, partially keyed, or modified.\n\n  * Sequencer Tree Look and Color Improvements - Provides a major change to the look and color of the Sequencer Tree to make it easier to view the contents within the Sequencer Tree.\n\n### Expansion of Animating Materials in Sequencer\n\nWe expanded authoring material animations in Sequencer with support for\nLayered Material Parameters, Overlay Materials, Volumetric Cloud Components,\nand Custom Primitive Data Support. Materials Slots are now referenced from the\nSlot Names rather than indices, and can be rebounded within Sequencer on any\nmesh component update.\n\nThis expansion completes providing the means for users to create any material-\nbased animation within Sequencer.\n\n### Binding Lifetime Track\n\nIn order to determine when an object is bound in Sequencer, there is now a new\ntrack for all bindings called the Binding Lifetime track. Users can add\nadditional sections to determine the portions in time in which Sequencer has\ncontrol over the bounded object.\n\nFor in-game cinematics, this helps determine if gameplay or Sequencer has\ncontrol over a dynamic object, such as the player character.\n\n### Modular Control Rig (Experimental)\n\nModular Control Rig uses the entire framework of Control Rig for building\nrobust animation rigs that are ready to be animated on any skeleton instantly.\n\n#### Tools to Rig with Modules\n\n  * New Modular Rig asset and editor.\n\n  * New Visual Schematic for immediate feedback in the viewport.\n\n  * Includes a native Library of modules.\n\n#### Tools to Author Modules:\n\n  * Convert any control rig into a Module instantly.\n\n  * Create connectors and sockets to connect modules together..\n\n  * The new Connector Event automates connections between modules.\n\n  * Add metadata to modules with Get/Set Metadata nodes.\n\n  * Pre/Post Forwards Solve events allow rig logic between modules.\n\n### Deformer Graph Libraries (Beta)\n\nEnables deformer graphs to be functionalized. Deformers can be encapsulated\ninto functions and chained together to create new deformation schemes. This\ngreatly simplifies the deformer graph, and allows you to mix and match pre-\nbuilt deformers from a Deformer Library to create custom deformation schemes\nfor your animation.\n\n  * Loop over deformer nodes.\n\n  * Collapse graphs and create functions.\n\n  * Deformer Function Library (Beta).\n\n    * Linear Blend Skinning, DQ Skinning, Bend, Twist, Squash & Stretch, Flare, Twist, and Lattice.\n\n### Skeletal Editor (Beta)\n\nExpand Component Editing - Easier editing and selection of per-vertex bones\nand weights.\n\n  * Component Editor\n\n  * Component Snapping for Bones (vertexes, faces, edges).\n\n  * Additional component selection schemes.\n\n  * Generate PolyGroups and Paint PolyGroups now have Quad mesh display\n\nAnimation Insights - Create bones and weights in context to your animation.\n\n  * Transform bones while painting.\n\n  * Propagate bone changes to referenced animations.\n\nCharacterization - Further simplify bone and weight creation tools by\nproviding improved starting points and helpful defaults.\n\n  * Copy / Paste / Duplicate bones\n\n### Control Rig Direct Manipulation\n\nDirect Manipulation enables easier interaction with rig elements directly in\nthe Viewport. This also includes many quality of life improvements to\ninterfacing with the Control Rig editor.\n\nVisually pose rig elements (controls, bones, nulls) in the Viewport and update\nvalues in the graph for implemented nodes.\n\n  * Select nodes in the graph and use T,R,S hotkeys for immediate interaction in the viewport.\n\nQuality of life improvements around manipulation.\n\n  * Marquee Selection is enabled.\n\n  * You can now swap Control Rigs on the Control Rig AnimBP node.\n\n  * You can attach AnimBP functions to a Control Rig AnimBP node.\n\n  * You can now profile functions.\n\n  * Profile stats display directly in the graph.\n\n  * Profile is now a rolling average of frames for more accurate feedback.\n\n  * Isolate profiling by selecting graph nodes.\n\n  * Metadata nodes are 20% faster\n\n  * Rig Hierarchy uses less memory.\n\n### Automatic Animation Retargeting for Bipedal Characters\n\nThis workflow will make animation retargeting for common bipedal skeletons\nmore accessible and consistent inside Unreal Engine.\n\nFor common bipedal skeletons, Retarget Chain Creation and Full Body IK setup\nare now fully automated with a click of a button. In the Retargeter, new Pose\nAlignment tools provide better matching between the Source and Target for\nRetargeting.\n\nA new simple dialog that combines the automation processes provides for either\na quick batch retarget or the generation of the automated assets for\nadditional editing.\n\n### Choosers and Proxy Tables (Beta)\n\nChoosers and Proxy Tables offer a framework for selecting animations for\nplayback based on game context, without having to write complex logics. These\nfeatures are now in Beta with Unreal Engine 5.4.\n\n### Motion Matching\n\nMotion Matching becomes Production Ready in Unreal Engine 5.4. It ships with a\nsuite of tools offering animator-centric workflows for gameplay animation. We\nvalidated Unreal Engine's Motion Matching on Fortnite Chapter 5, shipping on\nall platforms thanks to the scalability of the system and running on all 100\nplayer characters as well as the NPCs.\n\n## Rendering\n\n### Neural Network Engine\n\nThere is an increasing demand for neural network applications both in-editor\nand in-game, and on the CPU as well as on the GPU. The neural network\ninference engine in UE allows developers to load and efficiently run their\npre-trained neural network models. NNE addresses these disparate needs by\nproviding a common API - analogous to the existing RHI layer - which allows\neasy swapping of backends depending on the particular needs of each\napplication.\n\nExemplar use cases include tooling, animation, rendering, and physics, where\neach individual use case may have different needs in terms of platform and\nmodel support. There are dozens of different ML backends and it is not\npractical to implement them all, so we provide extensibility hooks which allow\nexternal developers to implement the NNE interface in a plug-in providing\ntheir own runtime.\n\n### Nanite - Tessellation (Experimental)\n\nDynamic programmable displacement provides a way to modify Nanite meshes at\nruntime using a displacement map or procedural material. Unlike World Position\nOffset which can only operate on the original mesh vertices, Nanite\ndisplacement tessellates the mesh at runtime into additional triangles to\nconform to the detail of the displacement map. Nanite only generates as much\ntriangle detail as required for the current pixel density.\n\nBenefits include:\n\n  * The ability to use lighter source meshes in the authoring pipeline.\n\n  * Material-driven and animated displacement.\n\n  * Creating detailed Nanite landscapes.\n\nFor more information, see Nanite Virtualized Geometry.\n\n### Nanite - Optimized Shading\n\nNanite Compute-Based Shading is a long-term project focused on moving Nanite\nmaterials from traditional raster shading over to compute shaders for a number\nof optimization and new-feature opportunities, in addition to making it\npossible to clean up a lot of complex code required for the raster approach.\n\nThe ultimate goal is to fully replace the pixel shader path in its entirety,\noffering increased performance on both CPU and GPU, improve code\nmaintainability, and also make it possible to implement advanced Nanite\nmaterial functionality that would not be otherwise possible.\n\nFor more information, see Nanite Virtualized Geometry.\n\n### Nanite - Spline Mesh\n\nSpline meshes are used for deforming static meshes along the shape of a\nspline, for example to model roads over landscape terrain. Spline meshes\nremain a significant missing piece as scenes in UE trend towards using Nanite\nfor more and more scene content, especially for improved Lumen and Virtual\nShadow Map performance.\n\nSupport for Nanite spline meshes was released as Experimental in UE 5.3.\nRemaining work includes performance and memory optimizations, preventing\ncracks, and fixing up areas such as level streaming and transform caching.\n\nFor more information, see Nanite Virtualized Geometry.\n\n### Orthographic Camera Rendering (Beta)\n\nOrthographic rendering is a very common way to visualize projects in\narchitecture and manufacturing, and is also used in games as a stylistic\ncamera choice. In Unreal 5.4, orthographic rendering has reached Beta status.\nMost aspects of the deferred render are now supported, but there may be edge\ncases which have not yet been carefully vetted.\n\nAreas of remaining work to achieve Product Ready status include:\n\n  * AO\n\n  * Decals\n\n  * Volumetrics\n\nFor more information, see Orthographic Camera.\n\n### Temporal Super Resolution\n\nTemporal Super Resolution is UE's built-in cross-platform upscaling\ntechnology. Images render at a portion of the cost of the full resolution by\namortizing some of the costly rendering calculations across many frames.\n\nThe next version of Unreal will include these changes to TSR:\n\n  * History Resurrection - A new feature on High, Epic, and Cinematic antialiasing scalability. Previously accumulated details can be discarded for different reasons: occlusion, shading changes, going out of screen. If these details show up again on screen, TSR has to reaccumulate those details again, which can result in noise or trail artifacts. History Resurrection keeps old TSR history that has these previously seen details to reproject samples from whenever there is a better match for reprojection than more recent frames.\n\n  * \"Has Pixel Animation\" Material Flag - A new material option indicating whether a material has animated texture or pattern motion, which would not be represented in the object's motion vectors. The flag allows TSR to disable anti-flickering heuristics which could otherwise create ghosting due to the lack of motion vectors.\n\n  * Visualize TSR show flag: this visualization mode can be used to better understand how TSR is working, and also can help reporting TSR issues to Epic.\n\nFor more information, see Temporal Super Resolution\n\n### Heterogeneous Volumes - Deferred Rendering (Experimental)\n\nHeterogeneous Volume Rendering provides for integrated rendering of volumetric\nphenomena such as fire, smoke, and fluids driven by Niagara Fluids or Open VDB\nfiles.\n\nIn 5.4, our focus was to provide shadow-casting support for Heterogeneous\nVolumes and integration with existing rendering passes, such as translucent\nobjects.\n\nMuch of the remaining work for the deferred renderer includes adding support\nfor global illumination, as well as improvements to features and performance.\n\nFor more information, see Heterogenous Volumes and Sparse Volume Textures.\n\n### Optimize Shader Cook Time\n\nCooking is the process of converting assets such as meshes, textures, and\nmaterials into platform-specific formats for deployment of packaged games.\nCooking materials on a large project can take a very long time, often many\nhours.\n\nIn 5.4, we significantly overhauled how shader compilation work is executed,\nwith both increases to parallelization and a reduction in redundant work. The\nresults of this optimization effort are approximately 30% fewer shaders being\ncompiled, a reduction in game thread work for shader compilation tasks, and\nsignificantly faster preprocessing of shaders. All of these factors together\nresult in a significant improvement in project cook times - particularly ones\nwhich involve shader invalidations.\n\n### RHI - Render Parallelization\n\nRender Thread performance is very often the limiting factor for UE titles.\nThis is because some operations are restricted to this particular thread, even\nthough current platforms and graphics API can do them in parallel. The goal is\nto improve performance by refactoring the Renderer Hardware Interface (RHI)\nAPI to remove these constraints and fully utilize the multithreading\ncapabilities of the target hardware.\n\nWe shipped a major refactor of the rendering systems in 5.4 which allows for\nfar greater overlap of work, which in turn permits lower target frame times.\nIn our CitySample testing, the render thread performance is roughly 2x faster\nin 5.4 as compared to 5.0.\n\n### RHI - Bindless Rendering (Experimental)\n\nBindless resources are a low-level feature related to the management of\ntextures and other types of data buffers in modern Renderer Hardware\nInterfaces (RHIs) such as DX12, Vulkan, and Metal. Adding support for bindless\nresources will provide for more flexible GPU programming paradigms and\nadditional features within the renderer, and is also a requirement for full\nray tracing support on Vulkan.\n\nFor the 5.4 release this feature is supported on the majority of platforms\nwhich are SM6-capable. However, given how recently we enabled the feature, it\nis still considered as experimental, and there may be some bugs to iron out.\n\n### Vulkan - Ray Tracing (Experimental)\n\n5.4 marks the experimental release for Vulkan ray tracing features at parity\nwith DX12, including on the Linux platform. This means the full suite of ray-\ntracing features can now be used, including Hit Lighting mode in Lumen and\nPath Tracing. As an experimental release, we expect that there will be bugs\nand other errors - and it should not be relied upon for production.\n\n### Programmatic PSO Precaching\n\nWe intend for automated PSO gathering and caching to remove all the manual\nprocesses for collecting all possible required PSO combinations for a game.\nThe most important state for the PSOs are the shaders themselves, and each\ncombination of these needs to be properly precached to avoid runtime hitches.\nTo that end, the goal for shader precaching is to find and save all possible\nvalid and potentially used shader combinations.\n\n### Hardware Ray Tracing\n\nWe made substantial Improvements to hardware raytracing (HWRT). These\nimprovements offer speed gains of 2x in the case of primitives and it helps to\nship 60hz experiences which use HWRT.\n\n  * GPU instance culling, parallelization for instances and primitives.\n\n  * Additional primitive types.\n\n  * Optimized path tracer with a roughly 15% speed improvement over Release 5.3 and roughly equivalent to Release 5.2 without any reduction in features or need to introduce additional shader permutations.\n\n  * HWRT uses the path tracer light grid and consequently supports very large numbers of lights.\n\nFor more information, see Hardware Ray Tracing.\n\n### Large World Coordinates on GPU\n\nLarge World Coordinates (LWC) in UE introduced support for double-precision\ntransforms and data types, allowing the maximum world size to increase from\n21km to 88,000,000km. LWC Rendering Support on the GPU was based on a tiled\nrepresentation, which has a number of limitations including imprecision and\njittering near tile boundaries.\n\nWe are refactoring LWC Rendering to support full double-precision\nrepresentation on the GPU, which will allow large worlds to be rendered more\nreliably when the camera is far from the origin. Work includes:\n\n  * Changing the extended GPU floating point representation to achieve higher precision where it matters.\n\n  * Creating user facing tools to make life easier to work with materials in LWC.\n\n  * Ensuring that LWC calculations are only emitted where they are actually needed for perf savings.\n\nFor more information, see Large World Coordinate Rendering\n\n## Developer Iteration\n\n### Unreal Zen Storage as Local DDC\n\nIn UE 5.4 we are introducing our new Unreal Zen Storage server architecture\nthat will provide improved data conditioning performance and faster editor\nloading and time to \u2018Play In Editor\u2019 (PIE) workflows. Zen replaces the \u2018loose\nfile\u2019-based DDC from previous releases to avoid local filesystem performance\nbottlenecks and provides greater control over cache writes, eviction, and data\nde-duplication.\n\n### Unreal Cloud DDC\n\nAn Unreal Derived Data Cache and content-addressable storage solution designed\nto deploy on self-hosted cloud infrastructure for distributed / hybrid studios\nand teams. Efficiently share cooked data between team members with\nactive/passive region replication, auto-connect to closest region, and\nenterprise login & authentication.\n\nSupported and production tested on AWS; including source and docker image.\n\nInstructions are available to deploy on Azure; including source and docker\nimage.\n\n### Multi-Process Cook\n\nMulti-process cook is now Production Ready for UE 5.4. Multi-process cook\nhelps reduce the total time it takes you to get a cooked output from a build\nfarm server or on your local workstation by leveraging all available CPU cores\nand memory resources.\n\nPerformance gains may vary, depending on the size of the project and how the\ndata is separated. For best results, we recommend that you test different\n\u2018CookProcessCount\u2019 values depending on the project and available hardware\nspecs.\n\n### Unreal Horde - Continuous Integration (Beta)\n\nAn out-of-the-box continuous integration solution designed for any Unreal\nEngine development team. Horde is a horizontally scalable, distributed\ncontinuous integration and build platform system hooked into Perforce, and\ntightly integrated with Unreal Engine developer iteration tools and workflows.\n\n### Unreal Build Accelerator (Beta)\n\nUnreal Build Accelerator (UBA) is a local and distributed compilation solution\nfor C++ Compilation used in conjunction with Unreal Build Tool and/or Horde\u2019s\nRemote Build (compute task) system. Horde is the coordinator to assign helper\nresources. UBA transmits local data, executes the remote task and returns the\nresults.\n\nIn Unreal Engine 5.4 release UBA is in Beta status, and works with C++\ncompilation jobs on Windows OS. We recommend trying UBA with infrastructure on\nthe same physical or private network. UBA may work across a reachable Virtual\nor External network or Cloud Compute Instances, but we do not recommend this\npath for this release.\n\nNative macOS and Linux support, process idle detection, and shader compilation\nare considered experimental and targeted for a later release\n\n### Unreal Zen Storage as Shared DDC (Experimental)\n\nReplace the use of network file shares as DDC storage with the new Unreal Zen\nStorage server architecture.\n\nThis architecture is more latency-tolerant, and optimized for network\ncommunications of DDC operations to remote machines, and not for file system\noperations from the previous system; operations no longer do synchronous IO at\nthe DDC storage level.\n\n## Motion Graphics\n\n### Motion Graphics Mode\n\nIntroducing the Unreal Engine Motion Graphics Mode, a game-changing\nenvironment meticulously crafted to empower motion graphics designers with\nprecisely tailored tools. Our thoughtfully designed layout ensures seamless\nworkflow initiation and sustained productivity. Equipped with specialized\ntools for the 2D canvas and an enhanced world outliner featuring intuitive\nhierarchies, the Motion Graphics Mode provides a comprehensive suite including\n3D shapes, cloners, effectors, modifiers, animators, and features for non-\nlinear animations. This dedicated mode is engineered to elevate the motion\ngraphics design experience, offering a robust and user-friendly platform for\ndesigners to bring their creative visions to life.\n\n### Viewport: Rulers and Guides\n\nIn the realm of screen design, precision is everything. Ensuring your content\nlands exactly where intended is a non-negotiable. That's why we're excited to\nintroduce the Motion Design Viewport \u2013 a game-changer for motion designers.\n\n##### Motion Design Viewport Features\n\n2D Grid and Rulers: Navigate your canvas with confidence using the 2D grid and\nrulers. These visual aids provide a clear reference for precise content\nplacement.\n\nSnapping: Achieve seamless alignments with the snapping feature. Elements\neffortlessly lock into place, eliminating the frustration of misalignments.\n\nPan and Zoom: Enhance your view and focus on specific details with the pan and\nzoom functionality. Get closer to your design for meticulous adjustments.\n\nCanvas Borders Beyond Camera View: Extend your canvas beyond the camera view.\nThis feature allows you to visualize the entirety of your design, ensuring no\nelement goes unnoticed.\n\nDrag and Drop Workflow for 2D Shapes: Simplify your design process with a\nuser-friendly drag-and-drop workflow for 2D shapes. Intuitively build your\ncomposition.\n\nTransform Panel for Quick Access: Efficiently manage and adjust elements with\nthe transform panel. Enjoy quick access to essential controls for seamless\nmodifications.\n\nViewport Background Images or Solid Colors: Customize your design environment\nwith background images or solid colors in the viewport. Tailor the workspace\nto your preferences.\n\nRGBA - Preview Modes: Preview your design with precision using RGBA modes.\nEnsure accurate representation and fine-tune your content accordingly.\n\n### Cloners and Effectors\n\nUnlocking the potential for dynamic creativity, designers can effortlessly\nbreathe life into shapes and patterns through the intuitive Cloner and\nEffector system. At the core, Cloners are built on top of Unreal Engines'\npowerful Niagara particle system. This powerful combination provides a\nseamless platform for animating designs, enabling designers to experiment with\ninfinite variations effortlessly.\n\n#### Cloners\n\nCloner Options\n\n  * Grid\n\n  * Sphere Uniform\n\n  * Sphere Random\n\n  * Circle, Line\n\n  * Mesh\n\n  * Spline\n\n  * Honeycomb\n\nFeatures\n\n  * Step - Transform position and scale per clone\n\n  * Random - Add Min and Max and Variations\n\n  * Mask - Constrain patterns based on textures\n\n  * Progress - Animate progress across clones\n\n#### Effectors\n\nEffectors Features\n\n  * Procedurally animate clones within a radius and falloff system.\n\n  * Animate position, scale, rotation\n\n  * Circle, Box, Plane, Unbound shapes\n\n  * Custom Falloffs and easing\n\n    * Ease In, Ease Out, Bounce In, Bounce Out, and so on.\n  * Magnitude\n\n  * Forces\n\n    * Orientation\n\n    * Vortex\n\n    * Curl Noise\n\n    * Gravity\n\n### Effector Forces\n\nIn design, procedural animation is essential, and our latest update takes it\nup a notch. Introducing forces for Vortex, Orientation, Noise, and Gravity in\nour effector system, giving designers the tools to experiment with infinite\nvariations effortlessly. Now, manipulating numerous clones simultaneously\nbecomes a breeze, allowing for quick and cool results that redefine creative\npossibilities.\n\nForces\n\n  * Orientation\n\n  * Vortex\n\n  * Curl Noise\n\n  * Gravity\n\n### Material Designer\n\nThe Material Designer introduces an intuitive and user-friendly layer stack,\nproviding a seamless experience for building complex materials on the fly.\nDesigned for efficiency, it grants users access to familiar blend modes,\nopacity controls, and masking features. This tool empowers users to swiftly\nand effortlessly craft intricate materials, making the process both accessible\nand efficient.\n\nMaterial Designer Features\n\n  * Dockable UI panels\n\n  * Layer system for stacking textures\n\n  * Designer-friendly blend modes\n\n  * Pan, scale, and rotate textures from common UI\n\n  * Clamping, mirroring\n\n  * Toggling options with no recompiling\n\n  * Creation and export of dynamic materials\n\n  * Keyframable properties\n\n### Material Designer FX Layers\n\nIn advancing the Material Designer, our goal is to incorporate layer effects,\nopening up possibilities for features like blur, color correction, and\ndistortion effects. This initiative aims to establish a versatile framework\nthat empowers users to build a myriad of shader effects within the Unreal\nEngine, enhancing the creative capabilities of our platform.\n\nFilters and FX\n\n  * Blur / Dilate / Erode\n\n  * Color: Hue / Saturation / Luminance\n\n  * Levels\n\n  * Distortion\n\n  * Pixelate\n\n  * Sharpen\n\n### Actor Alignment Tools\n\nDesigners frequently find themselves adapting graphics to a grid-based system,\nunderscoring the significance of reliable alignment tools. These tools empower\ndesigners to achieve precision and consistency in their layouts.\n\nActor Alignment Tools\n\n  * Align: Left, Center, Right\n\n  * Distribute Left, Center, Right\n\n  * Stack: Align Front, Middle, Back\n\n  * Rotation: Align Rotation to Camera\n\n  * Size: Size content to screen\n\n### 2D and 3D Primitives\n\nEmpowering designers at the core of their creative process involves providing\ntools for seamlessly incorporating procedural shapes into their designs. This\nnecessitates a versatile set of tools capable of generating a wide array of\nunique shapes. Designers will appreciate having dynamic tools that enable\nreal-time adjustments directly within the viewport, enhancing their workflow\nwith live and interactive design modifications.\n\n3D Shape:\n\n  * Sphere - Options for Start Latitude, End Longitude, Start Latitude, Latitude Degree, Sides\n\n  * Cylinder - Sides, Top Radius, Angle Degree, Start Degree\n\n  * Cube - Bevel, Bevel Count,\n\n  * Cone - Sides, Top Radius, Angle Degree, Start Degree\n\n  * Torus - Slice, Sides, Inner Size, Angle Degree, Start Degree\n\n  * Cog / Gear - Slice, Sides, Inner Size, Angle Degree, Start Degree\n\nEach shape can have bevels and caps, and have the ability to apply materials\nto the bevel edges\n\n2D: Shapes:\n\n  * Rectangle - Left Slant, Right Slant, Global Bevel Size, Global Bevel Smoothness, TL, TR, BL, BR\n\n  * Polygon - Points, Inner Size Amount, Bevel, Bevel Smoothness\n\n  * Line, Circle, Star, Arrow and Chevron\n\n### Geometry Modifiers\n\nDesigners seek the capability to procedurally modify geometry in their\ndesigns. The system facilitates the addition of procedural modifiers onto the\nbase geometry for operations such as Booleans. Users can effortlessly enable\nor disable these modifiers and rearrange their order, empowering the creation\nof diverse and customized designs. Geometry modifiers are built on top of the\nUnreal Engine geometry scripting functions meaning the system can be further\nexpanded in the future.\n\nGeometry Modifiers\n\nExtrudes - Extrude a piece of geometry in depth. Designers can scale the UVs\nacross the front caps, back caps, rounding, and sides.\n\nBevels - Add a bevel to any piece of dynamic geometry.\n\nBooleans - Subtract, add, and combine based on the channel.\n\nOutline / Stroke - Add an outline or a stroke to any 2D shape, of varying\nwidth from 0px to 20px or more, as designers require.\n\nMirror - Flip or mirror a piece of geometry easily with a modifier. Designers\ncan mirror geometry along any axis, X, Y, or Z, while also respecting the\npivot.\n\nPatterns - Replicate the geometry in patterns, like a grid, a circle, and so\non.\n\nNormals - Recalculate normals.\n\nDeformations:\n\nBend - Designers can bend or deform a piece of geometry.\n\nTaper - Designers can taper geometry over the length of an object.\n\n### SVG Importer\n\nGiven the widespread use of programs producing graphic design and branding\ninformation in SVG format, designers need to import SVG files. Our SVG\nimporter is designed to seamlessly generate 3D geometry from any SVG file\nwhile keeping the material colors intact.\n\n  * SVG Actor\n\n  * Swap SVGs on the Fly\n\n  * Copy & Paste SVG - XML to generate geometry\n\n  * Extrude\n\n  * Bevels\n\n  * Caps\n\n  * UVs\n\n### Text 3D Improvements\n\nRobust font features are a fundamental necessity for designers, as they\ncontribute personality and expression to their designs. We seek to simplify\nthe process of searching and testing fonts, enhancing overall design\nefficiency.\n\n#### Features\n\n  * Preview fonts without importing\n\n  * Favorite Fonts\n\n  * Font Categories\n\n  * Import Fonts into the project\n\n  * Max Width\n\n  * Max Height\n\n  * Scale Proportionally\n\n  * Dynamic Material\n\n  * Dynamic Gradients\n\n  * Custom Materials\n\n### Outliner Enhancements\n\nEmpowers designers with the capability to create highly specific hierarchies\nfor grouping items critical to motion graphics workflows. Currently, this\nfeature is a separate tab to the World Outliner. This newfound ability\nprovides designers with much greater control over organizing, displaying, and\nmanaging scenes to suit their exact needs. Feedback about this version\nrelative to the World Outliner will help us refine Unreal Engine UX.\n\nOutliner Features\n\n  * Non-alphabetically sorted actors.\n\n  * Easy grouping of actors under null objects.\n\n  * Per-actor visibility states.\n\n  * Layer coloring for organization.\n\n  * Modifier system for geometry, animation, and remote control.\n\n  * Filtering system for easy displaying only needed actors or modifiers.\n\n  * Options to not auto-expand actor hierarchies.\n\n  * Copy and paste modifiers for geometry, animation, and remote control.\n\n  * Moving the pivot and group actors with hotkeys.\n\n  * Batch renaming of actors.\n\n### Renaming Tool\n\nEnsuring a streamlined workflow is crucial for designers and other users,\nincluding maintaining proper naming conventions in the world outliner. In\nproduction, where repetitive elements are abundant, we are introducing a tool\nto facilitate batch renaming of actors and assets. This tool comes equipped\nwith prefix, suffix, search, and replace functionalities, offering designers\nan efficient solution for maintaining a clean and organized workspace.\n\nOutliner\n\n  * Actor Rename Selected\n\n  * Actor Rename Selected Class\n\nContent Browser\n\n  * Asset Rename Selected Asset\n\n  * Asset Rename Asset Class\n\nFeatures\n\n  * Base Rename\n\n  * Prefix - Add, remove, Numerate\n\n  * Suffix - Add, remove, Numerate\n\n  * Search and Replace\n\n### Animation Modifier System\n\nMotion graphic artists now have access to powerful features that allow them to\neffortlessly add procedural animation to nearly any property. This innovative\ntool opens up endless creative possibilities by enabling artists to seamlessly\nincorporate dynamic effects such as wiggle, bounce, oscillation, and random\nanimations. Not only does this tool enhance efficiency, it also unleashes a\nnew realm of creative expression, enabling artists to elevate their motion\ngraphics with captivating and dynamic backgrounds.\n\nAnimation Modifiers\n\nTarget Properties for animation\n\nAdd procedural wave functions to drive properties\n\nAnimation Functions\n\nSin, Cosine, Square, Inverted Square, Sawtooth, Triangle, Bounce, Pulse,\nPerlin\n\n### Transition Logic\n\nIn live television, the seamless presentation of multiple on-screen elements\nand their smooth transitions are paramount. Transition logic plays a pivotal\nrole in precisely controlling the entry and exit of elements during live\nshows. This capability empowers designers to intelligently structure graphic\nsystems, ensuring that each element appears and disappears on the screen\nexactly as intended, providing a level of precision essential for impactful\nlive broadcasts.\n\nTransition Logic Features:\n\n  * State machine for deciding transitions\n\n  * Add multiple elements to a layer\n\n  * Design transition states\n\n### Broadcast Rundown\n\nFor broadcast designers, the capability to execute graphics live on air is\nparamount. The operator uses the Broadcast Rundown, a tool facilitating the\nlive output of levels. This rundown not only enables graphics testing, but\nalso facilitates their live playback through SDI or IP video streams. Our\nremote control system empowers operators to create multiple pages and\nvariations of content, providing a comprehensive solution for seamless live\nbroadcasting.\n\nFunctions\n\n  * Per page - preview and program\n\n  * Change Text, Images, Videos, Properties per page\n\n  * Save pages at the number for easy recall\n\n  * Drag and drop reordering\n\n  * Preview Alpha channel\n\n  * Robust Playlist APIs\n\n  * Filtered views\n\n  * Macros\n\n  * Multiple Channels output\n\n  * Render to Disk using the MRQ\n\n### Stagger Animations\n\nTo enhance efficiency for designers, we are introducing a feature that\nstreamlines offsetting animations in time. With this tool, users can\nconveniently select multiple layer bars and effortlessly apply time offsets,\nfacilitating the swift creation of dynamic pop-up animations.\n\n### Masking Modifiers\n\nMasking stands as a fundamental feature for designers, especially in the realm\nof motion graphics where scenes invariably incorporate masking elements. Our\naim is to seamlessly blend performance with simplicity, offering various forms\nof masking based on materials that prioritize speed and efficiency for an\noptimal design experience.\n\nOpacity: Easily fade out any on-screen element with the opacity control.\nIntegrated seamlessly into the Material Designer, it provides a\nstraightforward way to achieve smooth transitions with native support.\n\nTexture: Simply apply a texture as the source for masking specific portions of\na 3D model.\n\nGeometry Mask: Use a source piece of geometry to create masks for well-defined\nedges, offering a simple yet effective solution for your masking needs.\nExplore refined design possibilities with this user-friendly tool.\n\n### Grid Arrange Modifier\n\nEmpowering users with the Grid Arrange modifier, this feature facilitates the\neven distribution of any actor within the hierarchy. Particularly crucial for\ntext-based layouts using a grid system, this tool allows for dynamic\nadjustments to the layout to accommodate varying size requirements.\n\nGrid Arrange Features:\n\n  * Horizontal Alignment: (Center by default)\n\n  * Vertical Alignment: (Center by default)\n\n  * Max Horizontal Items: 0 is no maximum, 4 would mean the 5th item appears on the second row\n\n  * Padding: space between items\n\n  * Size (XY): item size\n\n## Virtual Production\n\n### Multi-Process Inner Frustum\n\nHistorically, the inner frustum render for an ICVFX Camera could never make\nuse of mGPU because of both limitations in Unreal Engine/nDisplay's rendering\nand the fact that at least some resources would have to be shared with the\nother outer Viewports. With the introduction of SMPTE 2110 support, we can now\ndedicate an entire nDisplay render node to just the inner frustum, opening the\npossibility of throwing more of the available hardware at what's seen in\ncamera (that is, two GPUS rather than one). Multi-Process Inner Frustum\nenables the ability to render the inner frustum at the highest quality.\n\nAs new cameras increase in resolution and volumes increase in size, this will\nallow the system to scale with the needs of these productions.\n\n### Depth of Field Estimation\n\nDepth of field is an integral part of film vocabulary and a critical tool for\ncinematographers to direct the viewer's attention. However, when filming an\nIn-Camera VFX scene in an LED volume, it was impossible to achieve truly\naccurate depth of field because everything rendered by nDisplay would get the\nsame depth of the field even though technically, some objects in the scene are\nfurther from the camera than others.\n\nDepth of Field Estimation solves this by leveraging the fact that within\nUnreal Engine, we know everything necessary to calculate the \"proper\" depth of\nfield, that is:\n\n  * Position and orientation of the stage volume in the Unreal Engine scene.\n\n  * Camera position, aperture, lens focal length, and focal distance using LiveLink.\n\n  * Distance between all objects within the Unreal Engine scene.\n\nThe result is a newfound ability to have objects in the Unreal Engine scene be\ndefocused based on a calculation that takes into account the information\nabove, as well as the defocus that the lens is already applying based on its\nreal world aperture/lens combination.\n\n### Virtual Scouting Toolset (Experimental)\n\nThe new Virtual Scouting tools enable linear content creators to view,\nannotate, and edit their scenes in VR.\n\nWe completely reworked the UX for Virtual Scouting to take advantage of the\nnew XR Creative Framework. The tools are easier to use and extending them is\nnow significantly easier for developers.\n\nWith it you can:\n\n  * View and Edit levels in VR, in a multi-user editor session.\n\n  * Measure\n\n  * Annotate\n\n  * Capture screenshots and place cameras.\n\n  * Playback Level Sequences.\n\n  * Create local lights.\n\n  * Control environment lights.\n\nThis toolset also has support for running in a PIE session and packaging into\na runtime executable.\n\n### XR Creative Framework\n\nXR Creative Framework provides a development framework for teams to create in-\neditor XR (VR and In-headset MR) tools, facilitating the creation of bespoke\nworkflows using the latest OpenXR supported HMDs and controllers.\n\nThe new Framework forms the basis of an updated set of Virtual Production\nScouting tools. These tools serve as an example of how to develop within the\nXR Creative Framework.\n\n### Live Link VCam for Android\n\nLive Link VCam, the companion app to the in-editor Virtual Camera system, is\ncoming to Android. Virtual Camera users with an ARCore compatible Android\ndevice can now use the full Virtual Camera on their projects.\n\n### Virtual Camera for Mac\n\nVirtual Camera is coming to Mac with full support. Users can now leverage\nsoftware Pixel Streaming on x86/ARM and hardware acceleration on ARM based\nM-Series Mac devices.\n\n### LiveLink Hub\n\nOn stages or setups with multiple instances of UE running in a multi-user\nediting session - ICVFX, Live Composite, Full CG mocap shoots, and broadcast\nstudios - there is a need to set LiveLink sources per editor session.\nSometimes the setup requires each editor session to have a slightly different\nconfiguration so the previous LiveLink default preset-on-load workflow falls\nshort.\n\nTo enable more complex workflows, we created an external app (similar to the\nMulti-User Slate server) that monitors running editor sessions, connects to\nLiveLink sources, visualizes them and rebroadcasts them to each editor\nsession. Editor sessions no longer need to subscribe to LiveLink sources - the\napp tells each UE instance what LiveLink sources to receive and how to\ninterpret them (preprocessors, axis swaps, role modification).\n\nInitial support targets LiveLink workflows, with DMX, OSC, and device control\non the development roadmap.\n\n### nDisplay Cine Camera Frustum Fit\n\nDynamically resize the nDisplay frustums so they fit within the active camera\nFOV animations. nDisplay Cine Camera Frustum Fit enables nDisplay users from\nall industries to properly map typical UE content using the Cine Camera to\nphysical displays of arbitrary shapes and configurations.\n\n  * Compute a bounding box around a set of defined Displays.\n\n  * Provide a mechanism to fit and scale the nDisplay frustums into the active or selected UE cine camera frustum.\n\n  * Expose options such as Fill and Fit to properly handle aspect-ratio mismatches.\n\n## Simulation and VFX\n\n### Niagara Asset Browser\n\nThe new Niagara Asset Browser provides users with a means to base their new\neffects on Niagara Emitters and Niagara Systems in a user-friendly way. It\noffers browsing content by tag, making it easy to explore various effects.\n\nIt provides a less complicated workflow than before:\n\n  * The workflow has a single-page UI instead of a multi-step process.\n\n  * Users can look at all effects at once, which was not previously possible,\n\n  * The Niagara Asset Browser is comparable to the Content Browser, for more intuitive use.\n\nUsers can define their own tags for their assets, making it easy to set up\ngroups of content. External content providers, like Marketplace creators, can\nship assets with their own tags and tag definitions, organizing content more\neasily.\n\n### Niagara Data Channels (Experimental)\n\nNiagara Data Channels (NDCs) are available for experimentation in 5.4 but we\ndon't advise using them to ship content yet.\n\nNDCs are a method to pass data between Niagara Systems, Niagara, and other\nparts of UE. One important use case has been to use NDCs to inject events into\nlarge shared Niagara systems to enable better performance for features such as\nimpact FX. This is one of the key areas that users may like to experiment\nwith.\n\nUpdates in 5.4 include:\n\n  * GetNDCSpawnData: A new function on the NDC Reader Data Interface. It enables particles to retrieve their spawning NDC index and associated data for use in the Read function in the particle script when reading the NDC data.\n\n    * This is an alternative and preferred method to overriding the SpawnGroup for the particle. Using it, NDC spawning can be combined into a single spawn event internally which is far faster and allows arbitrary numbers of NDC spawns on the GPU, where previously they were limited to 8 per frame.\n  * Emitter.ID: NDC Reader ID functions now take in an Emitter.ID from the caller to choose which emitter to spawn into. This replaces a direct binding set on the DI and means a single System level NDC Reader DI can spawn into many emitters in a Niagara System rather than each emitter needing their own.\n\n  * Improved Blueprint UX: Blueprints now have a single node path for writing entries to NDC that auto populates the pins for the NDC in question.\n\n  * Several UX and QOL improvements.\n\n  * Improved stability and performance.\n\nLearn more by reading the [Niagara Data Channels documentation] (creating-\nvisual-effects/niagara-data-channels).\n\n### Niagara Lightweight Emitters (Experimental)\n\nLightweight emitters are available to experiment with in 5.4. They are still\nin development and we recommend against shipping content using them for now.\n\nOur goal is to improve content creation speed and reduce the need to optimize\nwhen using lightweight emitters. Users can create lightweight emitters in\ntheir systems and mix and match between the different types after enabling the\nproject setting. Lightweight emitters don't need to compile which results in a\nfaster workflow and the amount of emitters in a system will have less impact\non performance.\n\nThe underlying technology is quite different as there is no particle state,\ndata is only generated when visible, but they should look and feel familiar to\na Niagara user. They have a more restricted feature set. A limited number of\nmodules were converted to lightweight and only some renderers are compatible.\nThey are not programmable from content, i.e. you can not create scratchpads /\nmodules / dynamic inputs. Users can extend on the feature set using C++,\nintroducing new modules and templates, however, as they are experimental,\nbreaking API changes might be introduced between releases.\n\nLearn more by reading the [Niagara Lightweight Emitters documentation]\n(creating-visual-effects/niagara-lightweight-emitters).\n\n### Niagara - CPU VectorVM (Experimental)\n\nVectorVM is the Virtual Machine that Niagara uses to execute scripts on the\nCPU. We rewrote the VectorVM interpreter to get more performance for\nprocessing CPU scripts. The original byte code now goes through an\noptimization pass which includes:\n\n  * Reduces high water mark memory usage by significantly reducing the number of temporary registers required.\n\n  * Dead code removal.\n\n  * Combines many common pairs of operations into single operations.\n\n  * Reformats the byte code for smaller memory usage.\n\nWhen enabled, the optimizations to the VectorVM should be seamless to the\nuser. When CPU scripts are compiled, the resulting byte code will be optimized\nand then, if available, the new interpreter will be used.\n\nUsers can see significantly faster processing with these improvements to the\nVectorVM CPU script. The CPU workload has been reduced substantially (some\nscripts have shown a 4x improvement in cycle count), but practical wins are\nless significant because the execution has become severely limited by memory\nthroughput. Real world effects have seen a 10% savings in execution time.\n\n### Chaos Panel/Pattern Cloth Editor (Beta)\n\nChaos Cloth for Unreal Engine 5.4 includes the continued development of the\nCloth Editor, including an update to Beta status from Experimental.\n\nChanges from 5.3 to 5.4\n\n  * Added a USD import node with fabric support.\n\n  * Added a Default Dataflow template.\n\n  * Added new Dataflow nodes, and updated the Geometry Remesh node.\n\n  * Updated the Selection node and workflow.\n\n  * Added a new Collision system, and updated Self-Collision.\n\n  * Updated Skin Weight Transfer.\n\n  * Added LOD support\n\n  * Exposed the Proxy (Wrap) deformer as a Dataflow node\n\n  * Display Visualization and Debug Updates.\n\n  * Quality of Life Improvements.\n\n### Chaos Visual Debugger (Beta)\n\nChaos Visual Debugger is a new tool and framework that provides for recording\nand playing back the state of the physics simulation in a given game or\napplication for debugging purposes.\n\nIn UE 5.4, Chaos Visual Debugger has two main parts:\n\n  * Debug Data Generation: A system to record the state of the physics simulation.\n\n  * Debug Data Visualization: An Editor tool which has its own editor world, Viewport, Outliner, Details panel, and recording playback controls. Once a trace file is loaded in the tool, the tool offers the ability to play and visualize the state of the simulation frame by frame (and also sub-step, by sub-step), and select objects to see their state at any given frame (or sub-step).\n\nIn future versions, the tool will be able to re-simulate from any given\nrecorded frame.\n\nLearn more by reading the [Chaos Visual Debugger documentation] (making-\ninteractive-experiences/Physics/chaos-visual-debugger).\n\n### Physics Based Character Movement (Experimental)\n\nPhysics Based Character movement is a new Experimental feature we are building\ninto Character Mover 2.0 which provides for two-way physics-based interaction\nbetween the character and its environment.\n\n  * The system uses movement modes created in Character Mover 2.0 and takes the output movement as a target motion for a physics representation of the character.\n\n  * The character imparts forces on the parts of the physics world it is interacting with, and physics forces and constraints can in turn affect the movement of the character.\n\n  * Multiplayer physics-based motion with rollback and re-simulation is supported using Networked Physics.\n\n### Niagara Fluids (Beta)\n\nWith 5.4, we bring the following improvements to Niagara Fluids:\n\n  * 2D Liquids: Improved surfacing and rendering.\n\n  * 2D Gas: FFT-based pressure solver and cubic interpolation.\n\n  * 3D Gas/Liquids: High precision boundary conditions with finite volume method.\n\n  * 3D Liquids: 2-way coupled simulation with GPU particles.\n\n  * 2D Gas: Caching support.\n\n### Chaos Destruction\n\nChaos Destruction is now Production Ready with Unreal Engine 5.4. This release\nadds the following improvements:\n\n  * Geometry collection performance and memory\n\n    * We significantly reduced memory cost per geometry collection instance.\n\n    * We added many performance optimizations.\n\n  * Chaos cache manager\n\n    * Recorded tracks now use a simple compression scheme which means smaller cache collection assets on disks and in memory.\n  * Geometry collection rendering\n\n    * Root Proxy meshes are now supported with and without a custom renderer.\n\n### ML Clothing (Beta)\n\nML Clothing is now Beta in 5.4.\n\n  * Improved the user interface for defining multiple sections on the skeletal mesh.\n\n  * Added a new training mode that learns the morph targets.\n\n  * Improved tools for automatically creating the nearest neighbor dataset.\n\nLearn more by reading the [Machine Learning Simulation documentation] (making-\ninteractive-experiences/Physics/cloth-simulation/ml-cloth-simulation-\noverview).\n\n### Networked Physics (Beta)\n\nNetworked Physics is Beta in 5.4 and offers two key capabilities:\n\n  * Predictive Interpolation (Beta) is a new physics replication model that handles some local prediction of physics while still running in the \"interpolation\" timeline, providing both responsive and accurate physics replication results, to a certain limit.\n\n  * Physics Resimulation (Experimental) is a solution for when physics replication needs to be even more responsive and predicted than what the Predictive Interpolation solution can handle. This solution also means pawns can be physics-based in a multiplayer game. The new NetworkPhysicsComponent provides for implementation of custom physics pawns to handle the custom inputs and states, as well as taking care of network replication, linking inputs to physics-ticks, applying inputs and states during physics resimulations, decaying and predicting inputs if needed, and much more.\n\nLearn more by reading the [Networked Physics documentation] (making-\ninteractive-experiences/Physics/networked-physics).\n\n## Worldbuilding\n\n### World Partition Runtime Hash with 3D Grid\n\nThe new World Partition Runtime Hash solution contains a list of partition\nobjects, which can be of different types and easily expanded for project-\nspecific requirements. Each partition object holds their HLOD layers settings.\nThe runtime hash still supports data layers, one file per actor, and relies on\nthe streaming source components. New world partition levels will default to\nthe runtime hash. An upgrade path from the previous spatial hash is available\nwhen selecting the new runtime hash in a level.\n\nThe runtime hash uses the Loose Hierarchical Grid partition type, a fully 3D\nstreaming grid where the actors' extents are used to vary the streaming cells\nbounds to reduce streaming grid level promotion.\n\n### HLOD in Editor\n\nAs a workflow improvement, generated HLODs, previously only visible during\nplay in editor (PIE) and cooked builds, can now be seen directly within the\nEditor and updated individually.\n\nYou can adjust the HLODs in editor min and max draw distance in the main\nviewport Show options.\n\n### Level Instances Soft Object References\n\nWorld Partition now supports soft object path references from actors and\nobjects in a parent level to actors and objects inside level instances.\n\nWith World Partition, actors inside level instances can get embedded into\nstreaming level cells causing their runtime object paths to be changed as a\nresult. The new Editor Soft Object Path reference to those actors will now\nresolve and work at runtime.\n\n### Server Streaming\n\nWorld Partition now supports dedicated server streaming, in and out, based on\nthe streaming source position replication. This provides for better server\nbalancing and optimization considering large worlds in multiplayer games.\n\n### Sub World Partitions (Experimental)\n\nYou can now have multiple sub world partitions within a level enabled through\ncode or blueprint.\n\nLevel instance actors, with their level behavior property set to standalone\nand referencing a streaming enabled world partition level, will be\nautomatically considered as a sub world partition level.\n\nHLODs of sub world partitions are not supported from the parent world and will\nonly appear once the standalone level instance actor is streamed in.\n\n### Runtime Data Layer Logic Operator\n\nPreviously, the default runtime data layer \"OR\" logic operator to define the\nruntime state was hardcoded.\n\nThe New Maps Data Layers Logic Operator option in the Project Settings means\nusers can choose between \"OR\" or \"AND\" operators for their project's default\nruntime state logic operator for the runtime data layers in newly-created\nmaps.\n\nThis can also be set per-level under the World Settings using the Data Layers\nLogic Operator option.\n\n### Landscape Nanite Automatic Async Build\n\nWhen editing Landscape with Nanite enabled, the edited tiles' Nanite\nrepresentation needs to be rebuilt. With UE 5.4, this build operation is\nautomatically and asynchronously processed in the background while keeping the\neditor responsive, and provides up-to-date Landscape Nanite data on the fly.\n\nFor large and GPU memory intensive Nanite Landscapes, we recommend adjusting\nthe amount of Landscape Nanite builds that can trigger in parallel using the\nfollowing CVAR:\n\n    \n    \n    landscape.Nanite.MaxSimultaneousMultithreadBuilds VALUE\n\n### Water Scalability\n\nWe improved water scalability for very large environments with dynamically\ntessellated water mesh, and local processing of water information texture at\nruntime within a defined area around the view location. The water outside this\narea falls back to static meshes matching the shape of the water body.\n\nThe Local Only Tessellation option on the Water Zone actor activates runtime\nwater information texture processing, while you can adjust the sliding window\nusing the Local Tessellation Extent.\n\n## Procedural Content Generation (PCG)\n\n### Runtime Hierarchical Generation\n\nRuntime Hierarchical Generation maximizes PCG graph execution at runtime by\ncombining user-defined grid size and generation distances per grid, adding PCG\nGeneration Source component(s), and adjusting generation policies for\nordering, priorities, and update frequency.\n\nIt provides a way to create richer dynamic environments, complex rules to be\ngenerated live, and larger procedural worlds as an automatic partitioned\nruntime execution solution.\n\nAdditionally, it can also greatly improve editor-only workflows and iteration\nby generating only around the camera or any other actor with a PCG Generation\nSource.\n\n### Node Graph UX\n\nUE 5.4 introduces multiple UX improvements when working with the PCG node\ngraph, these include:\n\n  * Named reroutes: Declare a named reroute and use it anywhere in the same graph.\n\n  * Debug object tree: Selecting a debug object is now done through the debug object tree window, it provides a better view over loop iterations and subgraphs, and improves overall navigation between related graphs. It also displays if there are warnings and errors for each debug object. To inspect nodes within a graph, you must select a debug object.\n\n  * Smarter graph refresh: To increase iteration speed when adding unconnected nodes or deleting unused nodes, the graph will not refresh as its compiled output is identical.\n\n  * Multi-data and empty edge display: Edges flowing from node to node in PCG can hold multi-data or be empty. The edge display is now thicker when flowing multi-data and faded when empty. Regular edge thickness represents single data. This can be observed only after execution with a debug object selected.\n\n  * Multi attribute list and Details views: You can now open and lock up to 4 attribute lists and Details views. Ideal for comparing nodes and data.\n\n  * Input and Output pins setup: Pins can be set with a behavior (normal, loop, feedback) and IN/OUT can be removed or edited.\n\n  * Landscape tracking modes: Landscape edit callbacks trigger PCG updates of graphs using Get Landscape Data, and can lead to workflow issues. Within the Project Settings, you can now set the Landscape tracking time delay, disable only in Landscape edit mode, disable landscape tracking completely or disable global refresh entirely.\n\n  * Required pins indicator: Pins now have a required indicator tied to the execution culling. Nodes with unconnected required pins will be automatically culled from the graph execution.\n\n  * Attribute list view copy/paste: You can now select and copy-paste the attribute list view content as comma-separated content into any external application.\n\n  * Multi-Line node titles and less intrusive renaming support: We completely redesigned node titles to provide clear information, and node renaming is now only possible through the right-click menu or by pressing F2.\n\n  * Performance window: We added wall time information to the performance window as well as a search filter box to isolate specific nodes when profiling.\n\n  * Search window: The search window is now recursive and returns nodes within subgraphs.\n\n  * Graph instances from Content Browser: You can create PCG graph instances from existing graphs or other graph instances directly within the Content Browser through the right click menu.\n\n### Nodes and Operators\n\n5.4 introduces multiple native PCG elements including:\n\n  * Match and set attributes: Matches an attribute value between two data entries such as point data and an attribute set table. On matched entries, all attributes from the matched data input are copied over. When multiple entries match, a random selection is done or an additional weight attribute can be provided to better control the selection.\n\n  * Get property from object path: It is now possible to get properties from an object path attribute, including arrays, structures and sub-structures within arrays. Each object path resolved will return a flat attribute set table data.\n\n  * Multi switch and select nodes: Select and switch nodes with configurable inputs and outputs selected from an Integer value that can be dynamically set.\n\n  * Runtime quality branch and select: A runtime-only PCG quality level branch and select node that can be expanded with the required levels. The Default input/output will be used for disabled quality level pins. Enabled but unconnected quality level pins will not produce any data for that quality level. Works with dynamic branch culling.\n\n  * Data tag operations: Add, remove, or filter data by tag.\n\n  * Attribute cast nodes: Cast to desired types (Boolean, Double, Float, Integer, Name, Vector, etc.) when possible.\n\n  * Logic nodes : Data Count, Point Count, Filter Data by Attribute or Index, and Get Loop Index.\n\n  * Texture sampler: Provides for easier texture sampling after the Get Texture Data. The Get Texture Data also supports Tex2DArray and CPU texture sampling.\n\n  * Sort points by attribute: Useful to sort points by density, scale, or any attribute. Can be helpful to enforce a specific order before an Attribute Partition node.\n\n  * Native Create Points, Create Points Grid, and Point Neighborhood: Fast native versions of the early Blueprint elements that were heavily used in multiple examples and early adopters logic.\n\n  * Point operations (Duplicate Point, Split Points, Apply Scale to Bounds, Combine Points, Reset Point Center): Multiple new nodes to manipulate point data.\n\n  * Print string: Prints a custom string or attribute value within the log, as well as on screen and/or on the nodes directly. Useful when debugging graphs and for warning users of unsupported tool behavior or data while editing.\n\n  * Visualize attribute: Prints the attribute value directly in the world at the point's location. Custom prefix, point index, attribute name, offset, color, and duration can be configured on the node.\n\n### Attribute Set Tables\n\nPCG Attribute Set Tables can be created from graph parameters, Blueprint\nstructures, and arrays through actor property getters or constructed from\nmultiple Attribute Sets within the PCG graph.\n\nThis allows for driving more complex logic from exposed parameters such as\nbiomes with their sets of assets.\n\nMultiple attribute operations have been updated to support the concept\nattribute tables such as Filters, Add, and Copy Attributes. Attribute Set to\nPoints and Points to Attribute Set conversion nodes have also been added.\n\n### Feedback Loops\n\nThrough the new configurable per-pin Usage option in the PCG graph\nInput/Output nodes, Loop subgraphs can now have re-entering data for each loop\niteration from their Feedback pins.\n\nOutside feedback Input pins, visible on the Loop subgraph node in the parent\ngraph, can be initialized with data for its first iteration while Output\nfeedback pins will return the result of the last iteration.\n\nTo further improve with Loops and feedback Loops, we also provided a new Get\nLoop Index node.\n\n### Recursive Subgraphs\n\nA PCG graph can now recursively run itself as a subgraph to create\nhierarchical logic by passing data from the parent graph execution to its\nchild recursion. The recursion will happen as long as data is provided to the\nrecursive subgraph.\n\nThe PCG Biome Core plugin leverages this concept and can be used as an\nexample, each primary point can have its own hierarchy of children all\nprocessed through the same recursive subgraph.\n\nUsing this functionality requires safeguards done through graph logic to\nprevent infinite recursion.\n\n### Biome Core Plugin (Experimental)\n\nThe PCG Biome Core plugin is a data-driven systemic biome generator built\nentirely using the PCG Framework. It showcases the latest improvements and\nserves as an advanced example of a world-building tool for productions. It is\nstand-alone and can be used as-is, as a starting point, or customized.\n\nThe Biome Core is a fixed pipeline using asset and biome definitions while\ndesigned to be very flexible by dividing key components such as sampling,\ntransforms and filtering into separate problem spaces. Each of these can be\ncompletely customized to any project constraints or needs using the PCG\nFramework.\n\nOnce the initial setup is provided, artists and designers can easily define\nbiomes within a world without editing graphs or complex logic.\n\nThe PCG Biome Sample plugin is an initial setup example of the PCG Biome Core.\nIt is meant to help understand how to provide the definitions data assets, use\nthe provided classes, and build generators, filters, and transforms graphs.\n\n### Native Level To PCG Data Asset\n\nThe Level to PCG Data Asset action outputs a PCG Data Asset containing a point\ndata representing all static meshes and instanced static meshes found within\nthe level(s) selected. The transforms, mesh, material, bounds, actor\nhierarchy, relative transforms and all user set actor tags are written for\neach point in the exported data. It uses a new mechanic to export to PCG Data\nAsset and can be extended.\n\nUsing the new Load PCG Data Asset node, or dragging and dropping the exported\nPCG Data Asset into a PCG graph, the contained point data representing the\nsource level visuals can not only serve to spawn but can also modify and\nmanipulate prior spawnings through tag filtering, hierarchy, or any logic.\nThis provides manual artistic control over Assemblies which can then be used\nand modified procedurally.\n\nThe PCG assembly workflow was first showcased in the Electric Dreams GDC Demo\nand Sample; it is also used in the Lego Fortnite world creation system. This\nnative version replaces the previous Asset Action Utility blueprint with\nbetter export and update options, its own PCG Data Asset class, and a specific\nLoad PCG Data Asset node.\n\n### Dynamic Attribute Tracking\n\nDynamic attribute tracking allows graph updates to trigger when external\nreferenced data is modified. This includes data assets, data tables, blueprint\nexposed variables, graph parameters, graph instance settings, and PCG settings\nchanges, on top of any changes triggered from getters targeting self, parent,\nactors with specific actors tags, or class and landscape.\n\n### Branch Execution Culling\n\nStatic and dynamic graph execution branch culling greatly improves performance\nby removing any unnecessary processing.\n\nThe execution culling is applied automatically when using Branch nodes for\ndownstream elements and works with dynamically set branch conditions at\nruntime.\n\nWe also updated PCG Nodes with a required pin indicator. The culling will also\napply to any nodes with unconnected required pins while input-less nodes such\nas getters will always execute. Custom Blueprints elements input pins can also\nbe configured with the required pin option.\n\n### Dynamic Subgraphs\n\nSubgraphs nodes can now accept an object path attribute to any existing PCG\ngraph through its Subgraph Override pin. It supports changing the graph\ndynamically and contextually for execution at any time, from editor to\nruntime.\n\nWhen no graph is set within the Subgraph node, the default In and Out pins\nwill be used. If a graph is set, it becomes a template for the subgraph node\npins when overridden.\n\n### Proxy Node\n\nA proxy node is an indirection to any PCG Settings from an object path\nattribute set through its Settings Override pin. It supports changing\ndynamically and contextually which node settings are executed at any time,\nfrom editor to runtime.\n\nThe Proxy node can be templated using the native element class, the blueprint\nelement class, or a specific setting.\n\n### Transient Preview Mode\n\nAs an option on the PCG component, the Preview and set Preview on Load editing\nmodes generate transient artifacts and data locally.\n\nUsing these modes, you will be able to test changes locally without breaking\nexisting data and decide when the data should be updated. It also prevents\ncontention from multiple users updating shared PCG content by deferring\nupdates to manual or build machine processes when desired while retaining live\nediting and preview for all users.\n\n### PCG Offline Builder\n\nThe PCG world partition builder can generate PCG components in a level and\nsave the results. It can be run from the console or from the command line.\nThis process is also suitable for running as an automated job on a build\nmachine.\n\nThe process loads the level completely, waits for asynchronous processes to\ncomplete such as static mesh builds and others, then schedules generation on\nmatching PCG components. When all generation is complete the process saves the\nlevel and exits.\n\nCommand line example with arguments:\n\n    \n    \n    UnrealEditor.exe ProjectName MapName -Unattended -AllowCommandletRendering -run=WorldPartitionBuilderCommandlet -Builder=PCGWorldPartitionBuilder -IncludeGraphNames=PCG_GraphA;PCG_GraphB\n\nConsole command example:\n\n    \n    \n    pcg.BuildComponents -IncludeGraphNames=PCG_GraphA;PCG_GraphB\n\n### Multi-Data Attribute Ops\n\nAll Attribute Operations nodes now support multi-data for all inputs which can\npersist separate data while applying the same operation to all of them. In\nprevious versions, Attribute Operations were limited to single data which was\nforcing expensive data merges or creating graph clutter with many duplicated\noperations.\n\n### Water Spline Interop\n\nThe PCG Water Interop extra plugin adds a Get Water Spline Data node. Samples\non the water spline will be scaled to the width of the river and write water\nspline specific metadata such as the Depth, WaterVelocityScalar, RiverWidth,\nand AudioIntensity.\n\n## Platform\n\n### Mobile Renderer\n\nThe mobile renderer in Unreal Engine 5.4 brings several improvements:\n\n  * GPUScene memory and performance optimizations, which improves automatic batching and reduces the number of draw calls.\n\n  * Dynamic lights rendering performance improvements, supporting many local lights.\n\n  * PSO caching on-demand for Android.\n\n### Android Platform\n\nUnreal Engine 5.4 brings several new Android platform-specific features:\n\n  * x86_64 architecture binaries shipping in the UE install build from the launcher, simplifying workflows for developers deploying to Android x86_64 targets.\n\n  * Android emulator support (Experimental). This provides a way to run games made with UE from the Android Studio provided emulator.\n\n### Lumen on Mobile (Experimental)\n\nExperimental support for Lumen on recent mobile devices using the Desktop\nDeferred Renderer.\n\n### Apple Vision Pro Support (Experimental)\n\nWe expect to ship experimental support for Apple Vision Pro\u2019s Full Immersion\nStyle (Full Immersion) in 5.4. With this initial implementation, Unreal Engine\nsupports stereo rendering through Metal and camera transform driven by the\nhead mounted display pose.\n\n### Pixel Streaming on Mac\n\nWebRTC Pixel Streaming is currently supported for Windows and Linux. Future\ndevelopment will enable software pixel streaming on x86/ARM Mac devices.\nHardware accelerated Pixel Streaming will be available on ARM based M-Series\nMacs.\n\n## Audio\n\n### MetaSounds\n\nMetaSounds are now Production Ready in 5.4. Although MetaSounds are still\nunder heavy development with many features and improvements planned, they have\nbeen shipped on all titles from Epic Games, many of which were built from the\nbeginning on MetaSounds. We have made a number of performance and memory\nimprovements to achieve this, and plan on doing many more.\n\n  * Builder API improvements\n\n    * The Builder API is a Blueprint scripting API that provides the means for MetaSounds to be procedurally built by games at runtime and by editor tools.\n\n    * They were shipped in UEFN's Patchwork, and feature a number of improvements in 5.4, including live updating of the graph.\n\n  * Memory and CPU improvements\n\n    * Operator caching feature (optional feature used to cache operator memory, further reducing CPU hit on compiling MetaSounds).\n\n    * A number of performance and memory improvements across the board.\n\n  * Editor workflows improvements\n\n    * Space-bar previewing in Content Browser.\n\n    * Audio-visualizations for spectrum and oscilloscope in the MetaSound editor.\n\n    * A Find tab to search within a MetaSound like a Blueprint.\n\n    * Editor details panel and graph members menu show more information by default.\n\n    * MetaSound Preset icons properly display a preset icon instead of a MetaSound Source icon.\n\n    * Read-only properties in the Details panel can now be copied.\n\n### Sound Attenuation In-Editor Live-Update\n\nUnreal Engine 5.4 now offers the ability for Sound Attenuation settings to\nlive-update while playing in the editor. This allows updates to the\nattenuation settings to happen while in the editor without having to play\nagain.\n\n### Dynamic Submixes\n\nSubmixes are DSP graphs which help you mix multiple sources into a single\noutput. With 5.4, Submixes can now be added and removed from the Submix graph\nin Blueprint and from plugins. This provides flexible Submix graphs for\ntemporary plugin content or for temporary gameplay content.\n\n### Audio Insight (Experimental)\n\nThe new Audio Insight plugin enables an editor-tool which provides a way for\naudio developers to perform analysis and debugging of PIE sessions in real-\ntime.\n\n  * Features source event lists with sortable columns on several source parameters.\n\n  * Features time-plots of relevant audio information (volume, pitch, distance, and so on).\n\n  * Clickable list items to navigate in the editor to find the asset played.\n\n  * Substring-based filtering to allow soloing and muting sources in real time.\n\n  * Audio metering on desired submix view.\n\n  * Global audio metering and analysis.\n\n  * Automatically set audio logging.\n\n  * Customizable layouts.\n\nAudio Insight is Experimental in 5.4, for future version the team is working\non:\n\n  * Standalone mode.\n\n  * Connecting with packaged games, including mobile and console.\n\n  * Recording and playing back profile recordings.\n\n  * Tail recordings.\n\n### Harmonix Plugin (Experimental)\n\nNew in Unreal Engine 5.4, the Harmonix plugin provides a suite of tools and\nruntime capabilities which can be used to create musical gameplay.\n\n  * Adds support for importing MIDI files.\n\n  * Plays MIDI files in MetaSounds.\n\n  * Routes MIDI event streams to a variety of new MetaSound nodes designed for musical gameplay and musical systems.\n\n  * A new software sampler instrument in MetaSounds.\n\n  * Allows watching MIDI events and clocks from the game thread to synchronize visual effects and beat-match scoring with rendered music.\n\n### RAD Audio Codec (Experimental)\n\nRAD's Audio Codec (RAC) is a new multi-platform perceptual audio codec that\nfeatures better compression ratios, faster decodes and higher qualities than\nthe Bink Audio codec.\n\n## Modeling\n\n### UV Tools Improvements (Beta)\n\nUV editing is a vital part of the development of efficient assets. We\ncorrected the UV Editor display to properly display the layouts wireframe.\n\nTexel Density: A new texel density tool is now available to set a mesh's UV\ntexel density to a consistent value based on scale and texture values.\n\nMultiple Mesh Display: We updated the 3D preview to facilitate proper\nplacement of multiple meshes when selected.\n\n### Modeling Tools (Beta)\n\nThe Modeling Mode tools are the foundation for effective development, editing,\nand quality management of all mesh types. Unreal Engine 5.4 contains some\nheavily-requested features and improvements.\n\nBevel: The Bevel tool now supports subdivisions instead of just the single\nchamfered edge. This facilitates the creation of more complex and production-\noriented meshes.\n\nExtrude Edge: This new option is now available inside of the Select tool\ncategory, PolyGroup Edit tool, and Triangle Edit tool.\n\nHarvest Instance: The new Harvest Instances tool creates new HISM or ISM from\nselected actors, speeding the process of creation.\n\nDelete PolyGroup Edge: Deletion of a PolyGroup edge facilitates faster\ntopology edits on complex meshes. The deletion is performing a similar\nfunction to merging PolyGroups, but provides for a larger variety of topology\nchanges with fewer interactions.\n\n### Modeling Workflows (Beta)\n\nModeling workflows require efficient interactions and feedback. The selection,\ntransformation, snapping, and display of all mesh elements is critical to\neffective asset and world building.\n\nMesh Element Display: The mesh elements workflow we introduced in 5.3 now has\nan improved display of the unselected and selected elements. This provides\nartists with proper feedback about available elements for selection.\n\nElement Transform: The transformation gizmo now has additional functionality\nto support the object axis for mesh element selections.\n\nCreate Shape: The shape tools now have an option to generate new shapes at the\norigin facilitating quick creation of meshes without the need to place and\nthen reposition.\n\nTo learn more about Modeling Mode, including workflows and tools, see Getting\nStarted with Modeling Mode.\n\n### Geometry Scripting (Beta)\n\nGeometry Scripting is an Unreal Engine plugin containing a set of Function\nLibraries that generate and edit mesh geometry using Blueprints and Python.\nGeometry scripting functionality continues to expand with additional\nfunctions.\n\nTransferBoneWeightsFromMesh: Transfer bone weights from the source Dynamic\nMesh to the target Dynamic Mesh using the Inpaint method which is more robust\nthan the Closest Point Method. The target mesh is usually a mesh without any\nprevious weights (that is, converted from a StaticMesh).\n\nGetRootBoneName, GetBoneChildren, GetAllBoneInfo, GetBoneInfo are additional\nnodes for gathering bone information.\n\nBlurMeshVertexColors is a new node similar to the AttribBlur node in Houdini.\n\nCollision Shapes: We added new functions for directly manipulating Collision\nShapes, exposing the Collision Merge algorithm and related functionality.\n\n  * GetSimpleCollisionFromComponent\n\n  * SetSimpleCollisionOfDynamicMeshComponent\n\n  * GetSimpleCollisionFromStaticMesh\n\n  * SetSimpleCollisionOfStaticMesh\n\n  * GetSimpleCollisionShapeCount\n\n  * AppendSimpleCollisionShapes\n\n  * MergeSimpleCollisionShapes\n\n  * TransformSimpleCollisionShapes\n\n  * CombineSimpleCollision\n\n  * ApproximateConvexHullsWithSimplerCollisionShapes\n\n  * SimplifyConvexHulls\n\n  * AppendSphereCovering\n\n  * StaticMeshHasCustomizedCollision\n\nPoint Sets: We added new functions for working with point sets:\n\n  * KMeansClusterToIDs\n\n  * KMeansClusterToArrays\n\n  * TransformsToPoints\n\n  * FlattenPoints\n\n  * UnflattenPoints\n\n  * MakeBoundingBoxFromPoints\n\n  * GetPointsFromIndexList\n\n  * DownsamplePoints\n\n  * OffsetTransforms.\n\nSplines: We improved USplineComponent sampling with new methods on the\ncomponent that support sampling custom ranges:\n\n  * ConvertSplineToPolyLineWithDistances\n\n  * ConvertSplineToPolyline_InDistanceRange\n\n  * ConvertSplineToPolyline_InTimeRange SampleSplineToTransforms and ConvertSplineToPolyPath now support custom ranges as well. For closed splines, these ranges can wrap around, making it easy to sweep sections smoothly around a loop.\n\nCopyMeshFromComponent now supports copying meshes from Geometry Collection\nComponents and Instanced Static Mesh Components.\n\nAppendTriangulatedPolygon3D is a new function for triangulating polygons with\n3D vertices.\n\nDynamic Mesh: We improved the Dynamic Mesh Component class which used meshes\ngenerated by Geometry Script. It now has better control and default behavior\nfor Tangents, and supports standard Vertex Color and Collision Shape rendering\nusing the 'Show' flags in the editor viewport.\n\nTo learn more, see Introduction to Geometry Scripting.\n\n### Texturing Tools (Experimental)\n\nTextures are a primary component when creating experiences in Unreal Engine.\nThey are used in materials, UI, landscape, and model development.\n\nThe experimental Texture Graph Editor uses node-focused design. The editor has\na browsable node palette that contains a range of nodes for generating and\nmodifying textures. The Texture Graph Editor can use existing textures,\nmaterials, or material functions, along with math nodes and texture subgraphs.\nUsers can combine texture graphs with blueprint and editor utility widgets to\ncreate custom tools to optimize common workflows.\n\n## Content Pipeline\n\n### Interchange Framework UX\n\nInterchange Framework provides users with easier ways to create, extend, and\nparameterize import, re-import, and soon export, workflows.\n\nInterchange simplifies editing and storing import settings, creation of custom\nsettings adapted to use cases, and even extending the import process with\ncreators or pipeline managers' own custom import behaviors.\n\nWe updated Interchange's UI/UX to ease artists and content creators\ninteractions with the import dialog:\n\n  * Introduced filters to reduce the clutter in the settings dialog window.\n\n  * Added a preview mode to get insights on the import process.\n\n  * Added the conflict view mode for parity with legacy options.\n\n### FBX Import Customization (Beta)\n\nUsing the Interchange Framework, FBX import is becoming more customizable.\n\nThis feature enables artists, content creators, and pipeline managers to\nfinely tune import behavior for the FBX file format.\n\nIn 5.4 the import of FBX assets is considered complete, while scene import\nstill requires UI changes. However, the two features are still deactivated by\ndefault.\n\n### USD Specification Coverage\n\nUSD is a versatile scene description file format with a growing adoption\nacross the 3D industry. It is used by content creators and artists to transfer\n3D content, especially scene description, between DCCs. Originally used in the\nmedia entertainment industry, its use is now spreading to games and other\nindustries like automotive, architecture, and so on.\n\nThe expansion of UE coverage of USD standard specification broadens content\ncreators\u2019 supported use cases and provides them with a smoother experience\nwhen importing scenes from their DCCs into UE.\n\nIn 5.4, we extended the specification coverage to support:\n\n  * Collisions: UsdPhysicsCollisionAPI, UsdPhysicsMeshCollisionAPI\n\n  * usdVol schema: OpenVDB assets only\n\n  * Primitive mesh schemas: UsdGeomCube, UsdGeomSphere, and so on.\n\n  * Static mesh subdivision: Subdivision scheme attribute with OpenSubdiv\n\n  * Draw modes: UsdGeomModelAPI schema\n\n  * Prim metadata\n\n  * primvars:normals\n\n### USD Export Extensions\n\nExpanding the range of UE features that can be exported broadens content\ncreators\u2019 supported use cases and provides them with a smoother experience.\n\nIn 5.4, we extended the export features to cover\n\n  * Baked PCG\n\n  * Geometry cache\n\n  * Nested skeletal data\n\n  * Prim metadata\n\n### glTF Export/Import Roundtrip\n\nglTF is a common 3D model file format that is used as an interchange format in\nthe 3D ecosystem as well as a publishing format for the web and XR\napplications. In some industries, especially the web, it is the main working\nformat for content creators and artists.\n\nThe extensive coverage of glTF features enables content creators to have a\nsmooth and lossless exchange of models with their DCCs or publishing\napplications.\n\nArtists and content creators can work as part of a bigger ecosystem using the\nglTF interchange format. It enables them to import models from online\nlibraries into UE or to publish their UE scenes into a web-ready format.\n\nIn 5.4, most commonly used glTF extensions are now supported in UE. In details\nthe focus is on:\n\n  * Closed the round trip gap: We aligned the exporter to support the same extensions as the importer.\n\n  * Added material extension for export:\n\n    * KHR_materials_transmission (Thin translucency)\n\n    * KHR_materials_sheen\n\n    * KHR_materials_specular\n\n    * KHR_materials_ior\n\n  * Added extensions for import:\n\n    * KHR_materials_iridescence\n\n    * KHR_draco_mesh_compression\n\n### MaterialX - Substrate & OpenPBR (Experimental)\n\nWe extended MaterialX import to support creation of Substrate materials and\ntranslation of OpenPBR based shaders. OpenPBR Surface description was\ninitiated by Autodesk and Adobe as a successor to Autodesk Standard Surface\nand Adobe Standard Material.\n\nSubstrate support provides artists a way to get a more realistic\nrepresentation of their MaterialX shaders. Support of OpenPBR provides artists\nwith access to a growing industry standard inside their projects.\n\nArtists importing MaterialX with Substrate enabled will now get materials\nusing a better Substrate representation and not a wrapper of the legacy\nMaterial onto Substrate. OpenPBR imports work with Legacy and Substrate\nMaterials but provide better material representation with Substrate.\n\nPlease note that Substrate Materials is still an Experimental feature.\n\n## Framework\n\n### Character Mover 2.0 (Experimental)\n\nThe Mover plugin (a.k.a. Character Mover 2.0) is a massive improvement to the\nexisting character movement functionality in UE. It is a very large endeavor\nthat has numerous touchpoints in the codebase, ranging from physics to\nanimation to networking.\n\nThe main features of this effort are:\n\n  * Support for all actor types, not only characters.\n\n  * Helps gameplay programmers to focus on movement, less on the complexities of networking.\n\n  * Improves extensibility and customization through modularity, while empowering non-engineers to craft their own movement.\n\n  * Expands gameplay possibilities by discarding rigid requirements and improving interactions with physics-simulated objects.\n\n  * Supports a generalized rollback networking model that other systems can also use.\n\n### Gameplay Interactions Plugin (Experimental)\n\nThe Gameplay Interactions plugin provides a way for you to use State Trees and\nSmart Objects together along with Contextual Anim Scene (among others) to\ncreate a complete and flexible interaction system between actors, allowing\nstate trees to handle both the logic of the objects and the actors using them.\n\n### External State Tree Sub-Tree (Experimental)\n\nExternal subtree support for state trees is similar to the Sub-Tree feature we\nintroduced previously, but actually defined as a separate file which can then\nbe re-used in multiple different trees instead of being limited to the current\none. This empowers content creators to compose state trees out of multiple\npre-existing chunks, allowing modular behaviors that can end up being closer\nto what could previously be achieved only by using behavior trees.\n\nLearn more by reading the [External State Tree Overview documentation]\n(making-interactive-experiences\\artificial-intelligence\\state-tree\\external-\nstatetree-overview).\n\n### Large World Coordinates Networking Support (Beta)\n\nLarge world coordinates are now officially supported by UE's network\ntechnology, providing a way for you to create large worlds in a multiplayer\nenvironment without having to worry about hitting networking related\nlimitations.\n\n### GAS Debugging Improvements\n\nWe improved a lot of the debugging tools that can be used with the Gameplay\nAbility System (GAS) so you have a lot more built-in debugging opportunities\nwhile using this great framework.\n\n### Data-Only Blueprint Merging (Beta)\n\nWhile we introduced data assets merging in 5.3, we are now introducing the\npossibility of merging Data-Only Blueprints (as opposed to full Blueprint\ngraphs, which are still unsupported). This should allow developers everywhere\nto have much better insight in diffing and merging their BP data assets.\n\n### Windows GameInput API (Beta)\n\nMicrosoft recently released their new GameInput API for Windows and this\nprovides a way for us to add more \"out of the box\" connectivity support for\ncontrollers on the Windows platform.\n\nThis includes PlayStation controllers, without special first party license\nrequirements (SDK access). The first Experimental version will include support\nfor :\n\n  * Xbox controllers\n\n  * PS4/5 controllers\n\n  * Racing Wheels\n\n  * Flight sticks\n\n  * Arcade sticks\n\nYes, this also means native support for classic USB plastic instruments in UE,\nenabling using these peripherals in your own games (and inside Fortnite\nFestival!)\n\n### Iris Replication (Beta)\n\nUnreal Engine 5.4 brings workflow improvements, as well quality of life\nfeatures we introduced to the plugin, which should make using it and debugging\na lot more accessible in any network environment.\n\n### Navmesh Generation for Large Worlds (Experimental)\n\nWhile shipping Lego Fortnite, we had to optimize the different systems inside\nof our navigation tools to have better support for much larger and dynamic\nworlds. As such, we have made lots of improvements to the runtime generation\ndebugging tools available.\n\nWe also made better tools for Invokers and made navmesh resolutions better, so\nyou can tweak your game's performance by introducing these concepts and\nhopefully be able to generate the navmesh, when, where, and how you need to.\nNow, navmesh generation becomes less of a bottleneck with large open worlds\nwith huge amounts of AIs present!\n\nFinally we introduced even more fixes for navlinks generation, with better\nworld partition and OFPA support.\n\n## Editor\n\n### Multi User Actor Replication\n\nReplicate actors in real time over Multi-User Editing. For those cases where\ndistinct transactions are not enough, users can now curate a list of actors\nfrom the world and the properties on them that they want replicate in real-\ntime.\n\n### Multi User Remote Function Call\n\nMulti User Remote function call provides a way for one client to call for the\nexecution of pre-defined C++ and Blueprint functions on another client over\nMulti-User Editing.\n\n### Editor Accessibility: Application Scale (Experimental)\n\nUsers can now use the Application Scale setting under Editor Preferences >\nGeneral - Appearance > User Interface to adjust the size of UI elements in the\nEditor.\n\nSetting the value above 1.0 will increase the size of text and UI controls,\nproportionately, making labels and values easier to read.\n\nSetting the value below 1.0 will decrease the size of text and UI controls,\nwhich means more content can fit on the screen.\n\n## UI Systems\n\n### Slate PostBuffer (Experimental)\n\nUI Developers can now sample the scene with UI Materials more efficiently, and\napply arbitrary FX such as full-screen desaturations and color shifts. This\nwas not feasible previously due to SceneColor not being exposed for UI\nMaterials. In this experimental release, only a scene Blur FX is available,\nbut more effects will be added in future releases.\n\nLearn more by reading the [Slate PostBuffer documentation] (creating-user-\ninterfaces/umg-editor/SlatePostBuffer).\n\nYou can also explore a sample of Slate PostBuffer by downloading the Content\nExample project from the Unreal Engine marketplace, and then looking at the\nUI_SlatePostBuffer map.\n\n### UMG Viewmodel (Beta)\n\nThe UMG Viewmodel plugin, based on the MVVM (Model-View-Viewmodel) pattern,\nempowers designers to work independently from programmers, and to be able to\nmake structural changes to Widgets without code changes.\n\nIn this release, we extended the limits of what UI designers and developers\ncan do with the following features:\n\n  * Binding to events: Create a binding that executes when an event is fired.\n\n  * Static Viewmodel: Initialize values of an instance of a Viewmodel directly in UMG.\n\n  * Show Blueprint graph: See the associated Blueprint graph for a binding.\n\n  * Diagnostics: More precise information provided in validation and error logging.\n\n## Media\n\n### Medio IO Realtime MIP Generation\n\nWe have now exposed the ability to generate mipmap chains for Media Tracks in\nreal-time for improved rendering and video image stability. We added the\nfollowing:\n\n  * A Media Track setting that enables real time mipmap chain generation.\n\n  * A Media Plate Actor checkbox that exposes the above setting under the mipmap section.\n\n### Media IO EXR Latlong Pole Mips Offset\n\nVirtual Production users on LED stages are experiencing increased tiles\nrequests at the poles when playing large latlong tiled EXR files. This\ntypically happens on ceiling nDisplay nodes where the IO requirements can jump\npast the hardware capabilities causing stalls or playback stutters. We are now\nproviding an optimized system accessible through the Media Plate Actor to\nautomatically increase the MIP levels requested and cap the Media Plate\nbandwidth EXR tiles requests.\n\n  * We added a Media Plate Actor option called Adaptive Pole Mip Offset to automatically adjust MIP offset to keep IO requests constant.\n\n    * This works only with tiled EXR in the Sphere configuration.\n\n### Media IO Minimize TSR/TAA Artifacts\n\nVideo playback and Material based animations exhibit visual artifacts such as\nsmudging when used with TSR and TAA. Even though the visual degradation can be\nimproved with real-time MIPS and increased screen percentage, it is not enough\nto produce the desired image fidelity. Media IO Minimize TSR/TAA Artifacts\nminimizes the experienced artifacts caused by the temporal algorithm and the\nlack of motion vectors. This benefits users from all industries using video\nplayback or streamed content of any kind.\n\n  * Minimizes TSR and other TAA-caused artifacts (temporal algorithms).\n\n  * Provides a temporal pass-through for specially-tagged geometry such as playback plates.\n\n## Production Rendering Pipeline\n\n### Render Layers\n\nTo better connect Unreal Engine within studio pipelines, Movie Render Queue\nnow has the ability to easily generate Render Layers as high-quality elements\nfor post compositing. Shots can be broken down into multiple layers to do\nthings like separate foreground characters from the background environment,\nproviding more control over the final image and facilitating the integration\nwith live action plate footage. Render Layers are supported for both the Path\nTracer and Deferred Renderer.\n\n### Movie Render Graph\n\nTo help studios scale their Unreal Engine rendering usage to larger and larger\nprojects, Movie Render Queue now uses a new node-based architecture to manage\nrender settings. Movie Render Graph provides artists and supervisors the\nfundamental building blocks that define a render along with data flow and\nlogic nodes to build out graphs that are as simple or complex as necessary to\naddress the needs of both small and large teams.\n\nArtists can set up graphs to render a single shot, or design graphs to scale\nout across complex multi-shot workflows. A strong and intuitive inheritance\nscheme means productions can construct hierarchical render settings at any\nlevel, whether show, sequence, or shot. The graph system also puts pipeline\ncapabilities front and center with convenient, developer-friendly entry points\nfor pre- and post-scripting and automation.\n\n## Protocols\n\n### DMX Control Console\n\nEffectively drive and control large quantities of fixtures and faders using\nthe DMX Control Console. Designed to simplify DMX debugging and to give you\nquick control of a set of fixtures, which can be virtual or physical. Auto-\ngenerate and populate faders based on your library and patch selection. Users\nfrom Live and Virtual Production industries can use these faders to generate\nand send DMX data to physical devices.\n\n  * Asset based infrastructure for better UI controls and UE consistency.\n\n  * Multi-select and Patch grouping.\n\n  * Multiple Patch selection no longer displays multiple fixture groups, instead displaying just one, similar to the Details panel behavior.\n\n  * Use folder nesting of Patches inside groups to expose a given set of faders.\n\n  * Search channel history now remembers what a user has searched for before so they don't need to retype it constantly.\n\n  * Search templates for quick search of specific channels. Since all the possible channels of a given Patch are already known, users can now pick from them instead of using an arbitrarily search.\n\n  * Saving & Reloading Cues to recall presets of fader states.\n\n  * Control Widgets for more powerful and intuitive control knobs and widgets.\n\n### DMX Pixel Mapping\n\nDMX and Pixel Mapping features are now often used in larger complex setups\nwhich require the ability to effectively drive and pixel map large numbers of\nfixture patches. To further simplify the Pixel Mapper UX and to help support\nLive/Virtual Production users, we made the following improvements:\n\n  * Grid system for pixel grid accuracy: You can now snap Patches to a grid. The grid can be of arbitrary resolution (width and height) regardless of the input texture.\n\n  * Patch color scheme is now taken from the DMX Library: This is now consistent with Control Console and Library.\n\n  * Exposing the Patch highlight size for extra clarity.\n\n  * Patch rotation and horizontal/vertical flip support for increased flexibility.\n\n  * Font size scalability so that we can better read Patch information.\n\n  * High precision internal buffers for downscale, blur, and pixel mapping processing.\n\n  * Linearity flag support for input textures.\n\n### DMX Data Conflict Monitoring\n\nPreviously, Users could be unaware of potential DMX data collisions because\nthere was no centralized UI to view and identify such conflicts. Now, DMX Data\nConflict Monitoring implements a UI panel or window that exposes all\ncurrently-sending DMX subsystem instances, like the Control Console , Pixel\nMappers, or Blueprints. This benefits all industries and users using DMX,\nespecially those using combinations of tools with the Pixel Mapper and Control\nConsole.\n\n  * Centralized UI panel or window to expose and centralize all concurrent DMX sending subsystem instances. For example, active instances of Control Console, Pixel Mapping or Blueprint.\n\n  * Highlight collisions and conflicts on a per-patch basis.\n\n## Platform SDK Upgrades\n\n  * Windows\n\n    * Visual Studio 2022 v17.4 or newer\n\n    * Windows SDK 10.0.18362 or newer\n\n    * LLVM clang\n\n      * Minimum: 15.0.0\n\n      * Preferred: 16.0.6\n\n    * .NET 4.6.2 Targeting Pack\n\n    * .NET 6.0\n\n  * IDE Version the Build farm compiles against\n\n    * Visual Studio: Visual Studio 2022 17.8 14.38.33130 toolchain and Windows 10 SDK (10.0.18362.0)\n\n    * Xcode: Xcode 14.2\n\n  * GDK\n\n    * Minimum Windows SDK: 10.0.19041.0\n\n    * GDK: October 2023 Update 3\n\n    * Latest recovery version\n\n    * Supported IDE: Visual Studio 2022\n\n  * Linux\n\n    * Native Linux Development\n\n* Recommended OS: Ubuntu 22.04 or CentOS 7\n\n* Compiler: clang 16.0.6\n\n    * Cross-Compile Toolchain: v22 clang-6.0.6-based (CentOS 7)\n  * macOS\n\n    * Recommended\n\n      * Latest macOS 13 Ventura\n\n      * Latest Xcode 14.1 or newer\n\n    * Minimum\n\n      * macOS 13 Ventura\n\n      * Xcode 14.1\n\n  * EOSSDK\n\n    * 1.16.3 binaries with 1.16.2 headers\n  * Steam\n\n    * 1.57\n  * iOS / tvOS / iPadOS\n\n    * Recommended\n\n      * Latest macOS 13 Ventura\n\n      * Latest Xcode 14 Sonoma\n\n    * Minimum\n\n      * macOS 13 Ventura\n\n      * Xcode 14.1\n\n    * Supported Target SDK versions: iOS 15 or later\n\n    * Graphics API: Metal 2.4 and Metal 3.0\n\n  * Android\n\n    * Android Studio Flamingo 2022.2.1 Patch 2 May 24, 2023\n\n    * Android NDK r25b\n\n    * Android SDK\n\n      * Recommended: SDK 33\n\n      * Minimum for compiling UE: SDK 30\n\n      * Minimum target SDK for running on device: SDK 26\n\n* AGDE v23.1.82+ required if you are using AGDE debugging.\n\n    * Build-tools: 33.0.1\n\n    * Java runtime: OpenJDK 17.0.6 2023-01-17\n\n  * Switch\n\n    * SDK 16.2.3\n\n    * Minimum Firmware Version: 17.0.0-7.0\n\n    * Nintendo Dev Interface 2.5.5\n\n    * Supported IDE: Visual Studio 2022\n\n  * PS4\n\n    * Orbis SDK 11.508.011\n\n    * System software 11.508.011\n\n    * Supported IDE: Visual Studio 2022\n\n  * PS5\n\n    * Prospero SDK 9.00.00.40\n\n    * System Software 9.00.00.45\n\n    * Supported IDE: Visual Studio 2022\n\n  * ARCore\n\n    * 1.37\n  * ARKit\n\n    * 4.0\n  * OpenXR\n\n    * 1.0.27\n\n## Release Notes\n\n### Animation\n\nAPI Change:\n\n  * FSkeletalMeshObject::MinDesiredLODLevel is no longer clamped to the highest loaded LOD, so when mesh streaming is enabled MinDesiredLODLevel may reference a LOD that is not streamed in.\n  * ILODSyncInterface now makes a distinction between the LOD requested for streaming (if mesh streaming is enabled) and the LOD requested for rendering. SetSyncLOD and GetCurrentSyncLOD have been deprecated in favor of Get/SetForceStreamedLOD and Get/SetForceRenderedLOD.\n\nNew:\n\n  * Added a function to UDNAAsset that allows it to be copied at runtime. This is needed for systems that dynamically generate meshes at runtime, such as Mutable.\n\n  * Control Rig: Added key reduction/optimize for bool, int, enum channels when baking to control rig\n\n  * Lowered the angle threshold for flagging bad BlendSpace triangulation from 4 to 1 degree, to reduce the chance of bogus warnings.\n\n  * Add an option to enable/disable each BlendSpace sample when using \"analyse all\"\n\n  * PerformanceCaptureCore plugin** This experimental plugin add two new actor components and two new actor classes to replace animation blueprint workflows for motion capture:\n\n    * Performer Component: Should be added to skeletal meshes that bone-for-bone match an active LiveLink subject. The Performer Component let's you choose a skeletal mesh (defaults to the one closest to the root component) and a LiveLink subject. The component overrides the animinstance on the chosen skeletal mesh and ensures it is driven by the LiveLink Data.\n    * Retarget Component: Should be added to an actor with a skeletal mesh. Allows the user to choose a source and a target skeletal mesh component (the source can be part of an external actor) and an IKretarget asset to copy animation between the source and target.\n    * CapturePerformer Actor: A skeletal mesh actor containing the Performer Component functionality.\n    * CaptureCharacter Actor: A skeletal mesh actor contain the Retarget component functionality and BP scripting API to control the retargeting properties.\n  * Motion Extractor Modifier: Added space enum to allow calculating motion relative to another bone.\n\n  * Improving packing on SkeletalMeshComponent which should get a 16 byte gain. This will cause SkeletalMeshComponentBudgeted to drop to the 4080 bin for all platforms other than Switch, getting 288 bytes back for each.\n\n  * The LOD Sync Component now behaves correctly when mesh streaming is enabled\n\n  * Converting from static mesh to skeletal mesh now allows setting the target path, swapping out suffix/prefix, and give a choice of where to place the root bone.\n\n  * Add ForceNextTickThisFrame function to AnimationBudgetAllocator.\n\n  * Improved memory usage estimation for cooking animation clips\n\n  * Provide alternative orientation calculation method for BlendSpace analysis. This avoids problems when the pointing bone is not restricted to an \"upright\" orientation.\n\nBug Fix:\n\n  * The default deformer setting is now retained when re-importing a skeletal mesh.\n\n  * Fixed not being able to set the preview mesh for a multi-selection of animation assets in the sequence browser.\n\n  * Fixed buttons in the BlendSpace details from disappearing when searching.\n\n  * Added a new setting \"Build Half Edge Buffers\" to Skeletal Mesh Editor. It allows half edge data to be cooked with the Skeletal mesh asset such that deformer graphs using half edge data interface still work once the assets are cooked\n\n  * Fix to get blending of control rig poses working when a sequence has multiple control rigs\n\n  * Changed some calls to GetValueOnAnyThread from GetValueOnGameThread as RigVM can also be used in jobs\n\n  * Fixed an issue in the skeletal mesh or skeleton editors where transforming bones or resetting them back to a default pose wasn't undoing properly.\n\n  * Fix to AnimationBudgeAllocator that keeps tick rates consistent between tick prerequisites.\n\n  * Fixed an issue where editing per-platform settings on the skeletal mesh details would sometimes leave the platform name as \"None\" instead of the actual platform name.\n\nDeprecated:\n\n  * Add OverrideMinLOD and deprecate SetMinLOD in SkinnedMeshComponent. - SetMinLOD requires bOverrideMinLod to be true for it to function, so adding a function that sets MinLOD and bOverrideMinLod to true. [FYI] Paul.McLaurin, Chris.Marini\n\n  * Control Rig: Deprecated interaction rig as it's no longer used.\n\n#### Gameplay\n\nNew:\n\n  * blendstack support for automatic transitions in state machine\n\n  * Find and replace feature for ChooserTable property references\n\n  * Allocate temporary memory for chooser evaluation on the stack\n\n  * Rewind Debugger track view improvements - Striped background - Track names in tooltips - Synchronized hover state - Object tracks now display lifetime with SEventTimelineView\n\n  * Fix for rewind debugger scrubbing crash\n\n  * Added icons for Proxy Tables and Proxy Assets\n\n  * ChooserPlayer anim graph node\n\n  * Drag/Drop Assets to add to ChooserTable\n\n  * Add toolbar toggle buttons for auto Eject/Record features in Rewind Debugger\n\n  * Fix for choosers and proxy assets that return classes (such as for selecting an Anim Class)\n\n  * Added FootstepAnimEventsModifier to the AnimationModifierLibrary. Used to generate sync markers and notifies for any number of specified bones.\n\n  * Property binding optimizations for choosers\n\n  * ChooserTable Editor multi select and edit support\n\n  * Add support for overriding PlayRate from within blend stack subgraph\n\n  * Fix ChooserTable crash on asset reload\n\n  * Improvements to anim node property tracing and display in the animation blueprint editor: - Trace selected animation for ChooserPlayer node. - Make debug bubbles in rewind debugger show all traced node properties, except Name. - Make sequence player nodes display the current sequence in the debug bubble. - Trace assets, such as Sequence or BlendSpace with the Key: Asset, and enable display of the Asset column in the AnimGraph rewind debugger details.\n\n  * Anim Node Reference Tag support for nodes inside BlendStack subgraphs\n\n  * Separating BlendStack from PoseSearch into its own plugin\n\n  * Move camera shake-related headers into sub-directories, move legacy headers into separate directory\n\n  * Support for nested Chooser Tables in the same file\n\n  * Fix for end of lifetime tracing on linked anim graphs\n\n  * \"Any\" setting for Chooser Enum Column\n\n  * Fix settings in rewind debugger not saving\n\n  * Enable visual logger rewind debugger integration\n\n  * Optimizations for ChooserTable and Proxy property access\n\n  * add multi-output support to proxy table lookups\n\n  * Chooser Debugging with Rewind Debugger\n\n  * Rewind Debugger Track Type filtering\n\n  * Fallback result for chooser tables\n\n  * Refactor chooser evaluation context to avoid memory allocations at runtime\n\n  * Added support for filtering notifies originating from a blend stack.\n\n  * Improve handling of Child AnimationBluprints in Rewind Debugger\n\n  * Rename camera shake API parameter structs to make room for new ones\n\n  * Auto eject on pause feature for Rewind Debugger\n\n  * Clamp montage playback when stopping at end of section\n\nBug Fix:\n\n  * Fix crash in proxy table editor when selecting the row after the last row\n\n  * Fixed Rewind Debugger crash which could happen if starting PIE before opening the Rewind Debugger when auto-record is enabled\n\n  * Fixed for stack overflows in rewind debugger related to animation setups with large numbers of curves\n\n  * Properly build the duration of the composite shake\n\n  * Add support for bitfield bool properties in chooser property access\n\n  * Crash fix in ChooserTableEditor when deleting rows\n\n  * Fixed warnings when opening assets from rewind debugger, and made animation assets scrub to the correct frame when opening via double click\n\n  * Fix bug with property binding widget where it won't display anything if the only bindable properties are children of a UObject function\n\n  * Fix for cooker crash with User Defined Structs in Instanced Struct data in Choosers/Proxy Tables\n\n  * Make Rewind Debugger links to nodes in the AnimationBlueprint, from the AnimGraph track details, attach debugging to the correct instance when they open\n\n  * rewind debugger optimizations - fix bugs causing treeview to refresh repeatedly, make curves tracks not update unless they are expanded\n\n  * Fix native proxy table bindings not working\n\n  * Fix crash when changing struct binding in Proxy Table Struct outputs\n\n#### Movie Render Queue\n\nNew:\n\n  * Exposed all OpenEXR compression formats to movie render queue outputs.\n\n  * Exposed OpenColorIO CPU transform support in the movie render graph.\n\nBug Fix:\n\n  * Movie Render Pipeline: Fixed selected shots not getting enabled in the queue when right clicking in Sequencer to Render Shot\n\n  * Fix to allow MRQ to render water.\n\n  * Updated the audio renderer to ensure the audio is correct when more than one temporal sample is used.\n\n#### Rigging\n\nNew:\n\n  * Deformer Graph: Changed the location of the checkbox for atomic operations and read access from \"Set Resource\" node to the Output Bindings on a kernel node. This allows a kernel to read from/perform atomic operation on its outputs whose type is int.\n\n  * Added the ability to remove curves in the Curve Expression animation blueprint nodes. This can be done either by using the undef() operator on the right-hand side of the expression, or by just prefixing the curve name with - (e.g. -CurveName) and omitting the rest of the assignment expression.\n\n  * Deformer Graph: Added support for automatically caching results of kernels whose output won't change. These kernels are marked in green color. Only kernels in the Update Graph are considered.\n\n  * Added a project setting, r.GPUSkin.AlwaysUseDeformerForUnlimitedBoneInfluences, that allows you to enable Unlimited Bone Influences in a project without compiling extra shader permutations for GPU skinning. This saves runtime memory, disk space and shader compilation time. When the setting is enabled, any mesh LODs using Unlimited Bone Influences that don't have a deformer assigned will use the DeformerGraph plugin's default deformer. This ensures that UBI meshes are always rendered with a deformer, and therefore the GPU skinning permutations for UBI aren't needed. This change also adds a per-LOD setting that allows users to disable mesh deformers on a LOD, which could be useful for controlling performance, e.g. disabling an expensive deformer on lower LODs. Some changes to functions on USkinnedMeshComponent lay the foundations for having different deformers on different LODs as well.\n\n  * Added support for direct link between data interfaces in Deformer Graph\n\n  * Control Rig: Allow runtime changes to control rig class in AnimBP. The Animation Blueprint node now offers functionality to change the control rig class used at runtime.\n\n  * Control Rig: Command to load all control rigs. With the command line command \"\"ControlRig.LoadAllAssets\" all assets in the current project can be loaded - helping with finding issues in assets.\n\n  * Control Rig: Support for marquee selection in the viewport\n\n  * Control Rig: Allow full compilation in PIE. Rigs can now be recompiled during PIE - which makes it easier to iterate on characters as they are in pose in the game.\n\n  * The Base LOD parameter is now exposed on LOD setting data assets.\n\n  * ControlRig Virtual Machine (RigVM) has been refactored to make it stateless and optimized to decrease the cost of creating instances (all instances of the same graph now share the VM). Also, the internal memory backing system has been changed to use instanced structs.\n\n  * RigVM: Ray Math Functions. We've added \"Intersect Ray\", \"Intersect Plane\", a ray \"GetAt\" and \"Transform Ray\" nodes\n\n  * RigVM: Enable profiling in release mode\n\n  * Users can now convert a sub graph node into a reusable function that can be used in other deformer graph assets if its access specifier is set to public.\n\n  * Moved some functions from RigVMBlueprint to the RigVMClientHost, so these are available for different users of the system through the client host interface\n\n  * Added built-in Deformer Graph functions for Linear Blend Skinning and Dual Quaternion Skinning\n\n  * Control Rig: Added editor only AssetUserData array to ActorComponent, SkeeletalMesh, Skeleton and RigVMHost. These will add editor only dependencies to the referenced data.\n\n  * The Skeletal Mesh Modeling Toolkit plugin now includes all the same polygroup manipulation tools as the static modeling toolset.\n\n  * Control Rig: Our standard function library is now exposed to UEFN #virtualized\n\n  * ControlRig: added Parent constraint math Node\n\n  * An arbitrary number of single-channel / alpha vertex maps can now be imported via FBX onto skeletal meshes.\n\n  * Added built-in Deformer Graph functions for non-linear deformation including Bend, Squash&Stretch, Twist and Flare.\n\n  * Added built-in Deformer Graph Function for Lattice Deformation.\n\n  * Deformer Graph: Added support for math expression when setting the execution domain of a kernel\n\n  * Added a new Control Rig node, Curve Exists, to check whether a curve actually exists on a skeletal mesh without evaluating it.\n\n  * Fix Control Display actor always shows hidden controls\n\n  * Control Rig: Added Pre and Post forward solve events which will be executed immediately before and after the forward solve. These events are useful when rig modules need to execute before and after a child module has been processed.\n\n  * Disabled creation of deformer instances for dedicated server\n\n  * Added support for loop nodes in Deformer Graph\n\n  * Control Rig: Direct manipulation on nodes. Right clicking on nodes now allows user to interact with values on pins like vectors or transform directly. Node developers can also offer custom functionality, like for example with the Aim nodes.\n\nBug Fix:\n\n  * Bind RigVMHost type so blueprint created callback can be called on control rigs\n\n  * [Modular Control Rig]- Content only. Fix extra nulls that were showing up when someone uses the chain module causing clutter in the outliner.\n\n  * Fix an issue with duplicated vertex data interface providing invalid data for mesh with more than 1 material section.\n\n  * Get animation attributes working with control rig component\n\n  * Fixed ControlRig VM hash calculation runtime cost by moving the hashing to compile time. The hash function cost has also been significatively reduced.\n\n  * Fix Skeleton Data Interface node in Deformer Graph not working when the skeletal mesh is using unlimited bone weights\n\n  * Fixed shader compilation error when connecting a parameter pin to a resource pin on a custom compute kernel node in Deformer Graph. This type of connection is now supported\n\n  * Fix Deformer Graph editor crash when clearing preview mesh while the transform manipulator is shown in the viewport\n\n  * Fix for ControlRig silently losing pin connections to UUserStruct members, when a member of the struct is renamed while being used by the rig\n\n  * [Modular Control Rig]- Fix leg module to let user change the shape of the controls. Fixed a few other very small issues in the arms, legs, piston, addControls modules.\n\n  * Fixed ControlRig VM compiler generating duplicated properties by reusing operands in inline functions.\n\n  * Fixed assertion when editing a user defined struct used by a deformer graph before the deformer graph is opened/loaded in editor\n\n  * Fixed a multithreading issue at Control Rig function registry, in order to avoid a deadlock when a VM is initializing in a thread while a different worker thread registers a function.\n\n  * Fixed Skeletal Mesh Editor's LODInfo section not displaying new vertex attributes added via Add Weight Map Layer in Skeletal Mesh Editing Tools\n\n#### Runtime\n\nNew:\n\n  * Changing the default animation curve compression codec to use ACL.\n\n    * This reduces the compressed memory footprint, and it improves decompression performance.\n  * Runtime switching override physics assets on rigid body animation node using function library\n\n  * Introduced new flag to ignore the RBAN LOD threshold CVAR and force use the one locally set on the anim graph node.\n\n  * Exposed LOD threshold as a pin for the pose driver node\n\n  * Blend Stack: Added per-sample graph support\n\n  * Added support for skeleton compatibility in combination with blend profiles / masks.\n\n  * Added the ability to add comments to curves on animations\n\n  * Improved tooltip on CompatibleSkeletons in USkeleton\n\n  * Added OnMontageBlendedIn callback to animation instance\n\n  * New: Changed p.RigidBodyNode CVar from using TAutoConsoleVariable to using a bool FAutoConsoleVariableRef instead. This avoids unnecessary calls to CVarEnableRigidBodyNodeServer.GetValueOnAnyThread(); instead, it uses the bool variable bEnableRigidBodyNode.\n\n  * Add possibility to expose the LOD thresholds as pins for the following nodes: Control Rig Rig Logic Skeletal Control Base (RBAN)\n\n  * Anim notify and sync marker workflow changes\n\n    * Skeletons are no longer dirtied when adding notifies and sync markers from animation timelines.\n    * Removing notifies and sync markers from the skeleton now does only that. To remove from animations, use the find/replace tab\n  * Added the option to toggle the request forward behavior that is used by the in Inertialization Anim Node, and removed the request forwarding from DeadBlending Anim Node.\n\n  * Respect bExposeNotifiesUICommands option in NotifyPanel in the skeleton and animation sequence editors\n\n  * Only process a sequence once when adding multiple keys # jira UE-193618\n\n  * Made Dead Blending Anim Node store pose and bone data sparsely according to which bones are present in the CompactPose.\n\n  * Expose anim graph IsActive to anim node functions\n\n  * Updated the ACLPlugin to latest develop branch\n\n    * Source git commit: 5091b840185542fbe1cde5643c9c60448ae631fc\n    * This reduces the compressed memory footprint and improves visual fidelity.\n  * Use UToolMenu for AnimNotifyTrack ContextMenu. This allows users to customize the menu and apply permissions.\n\n  * New layers added to an anim layer interface will now start on a shared group by default, making them share instance at runtime, for better default performance.\n\n  * Added support to rename blend masks and blend profiles in the skeleton editor\n\n  * Added a new visibility-based tick option to the skinned mesh component that forces ticking montages and refresh bones when a montage is being played.\n\n  * Added the ability to run find replace on mirror data tables for an existing table. This functionality is useful if you have new bones or have changed your find / replace expressions for the table.\n\nBug Fix:\n\n  * Fixed new anim state machine transition nodes not appearing when the graph is far from the origin\n\n  * Switched to using FLazyName for control rig built in types\n\n  * Fix function renames not applying to property access nodes and compilation crashes post-rename\n\n  * Fix montages not being marked dirty when (e.g.) adding curve comments or changing curve colors\n\n  * Fix notifies not being displayed in context menus under certain circumstances\n\n  * Fix an infinite loop caused by requesting a start time outside the range of the animation by exactly the input DeltaTime\n\n  * Fix for issue where anim streamable couldn't be created directly from anim sequence asset #changelist validated #virtualized\n\n  * Fix budgeted meshes that are placed in levels not getting registered when playing as client\n\n  * Fixed animation sequence editor details not showing the the list of bone animation tracks\n\n  * Several improvements to reduce the likelihood of running into stack overflows when evaluating large AnimBPs.\n\n  * Fix crashes when \"call function\" nodes are root-wards from a layered blend per bone node\n\n  * Creating a montage directly from a sequence now respects the sequence framerate\n\n  * Fixed not advancing sync markers properly if two or more markers are to be passed in a single tick.\n\n  * Added curve debugger back to the skeleton editor\n\n  * Fix URO-interpolated curves 'flickering'\n\n  * Disabled MinKeysForResampling when resampling is not selected in anim compression settings\n\n  * Fix to prevent anim montages from continuing to play animations past the end of the the last section.\n\n  * Fix crashes around creating and deleting pose assets\n\n  * Animation editor preview scene OnAnimChange delegate will now be called with the correct animation asset being set in the scene (or null ptr if preview is getting closed)\n\n  * Removed curve compression codec instance GUID since it causes cook determinism issues and isn't otherwise required.\n\n  * Fix animation attribute registration issues with attributes defined as user-defined structs\n\n  * Fixed branching point notifies anim montages on load that were saved with a null LinkedMontage ptr\n\n  * Added edit condition to disable anim per-track compression adaptive error settings when the features are not enabled\n\n  * Add missing nullptr check on animation blueprint editor preview instance\n\n  * Fixed an use after destruction issue at AssetEditorModeManager, if the PreviewScene has been already destroyed when the World cleanup takes place\n\n  * Fixed crashes refreshing animation timelines\n\n  * Fixed issue with Dead Blending Anim Node creating NaNs when encountering negative scales, and also made it so that the the LinearlyInterpolateScales flag causes scalar velocities to be calculated linearly. This allows for full support of negative scales when this option is enabled.\n\n  * Switched missing bones ensure to be a logged error\n\n  * Fix ensures and crashes when interacting with the Motion Matching node\n\n  * Fix animation compression not dispatching when the curve codec is changed and the animation has no bone data\n\n  * Fixed stack offset in AddErrorIfFalse to correctly report file & line that the error was emitted on\n\n  * Newly-spawned anim instances now call BeginPlay overide points when they are spawned 'late'\n\n  * Support pose watch when debugging parent or linked anim blueprints. Also prevent toggling pose watch from child anim bps\n\n  * Fix crashes when creating property bags with identical layouts from multiple threads\n\n  * Fixed crash setting a preview animation blueprint\n\n  * Fixed recording of anim notify states in looping montage sections\n\n  * Fixed custom property node delegate registation from the ALT to allow for async loading\n\n  * Animation debug draw items now flush in both post update and post evaluate\n\n  * Fix anim BP node orphan pins not getting removed on disconnection\n\n  * Update compatible skeleton mappings when a ref skeleton is updated.\n\n  * Update FRetargetingScope to ensure raw transforms have compatible skeletons applied\n\n  * Fix crash initializing rigid body nodes for skeletal mesh components with no mesh assigned\n\n  * RandomPlayer anim graph node now calls PreloadRequiredAssets.\n\n  * Fix crash showing debug information for a blend space evaluator with no blendspace\n\n  * Skeleton Mesh Linkup map has been refactored, in order to avoid leaving dead data in the LinkUpTable.\n\n  * Allow Sockets to be added to Virtual Bones. Enable other functionality for Virtual Bones.\n\n  * Moved LocalBlendCSBoneTransforms to use a TArrayView\n\n  * Fix ACF_IntervalFixed32NoW codec format for translation/scale when used with linear key reduction\n\n  * Fixed an issue with AnimSequences generating cook indeterminism due to curve names sorting.\n\n  * Added AnimDrawDebugCapsule to AnimInstanceProxy for debug drawing purposes\n\n  * Fixed crash reverting Skeletal Mesh unsaved changes while the asset is opened in the editor\n\n  * Optimize common case of single full-weight entry in a blend list\n\n  * Fix ensure when removing a notify track\n\n  * Disable 'Add Socket' action in skeleton tree when a bone is not selected\n\n  * Ensure that both notify and notify state properties are copied when copy/pasting\n\n  * Fix recording/display of pose attribute debug info\n\n  * Remove invalid ensures. Compatible skeletons means we can no longer guarantee that all bones within the pose asset exist in the skeleton. [FYI] Jurre.deBaare\n\n  * GetLinkedAnimLayerInstanceByClass now optionally checks for Child class.\n\n  * Expose bind pose scale to compression codecs. Update the ACLPlugin to use the bind pose scale.\n\n  * Fix mesh space additive remapping to use the correct rotation fixup.\n\n  * Optimized the opening of notifies/sync marker widget\n\n  * Ensure that bones missing from an anim sequence still follow their parent when the sequence is a mesh-space additive just like they would if the bones were present in the sequence but not animated.\n\n  * Fix to give smoother interpolation when evaluation frames are skipped. This is similar to the calculation used in the budget allocator.\n\n  * Optimized various low-level parts of the anim blueprint runtime\n\n  * Fix for crash when validating auto rule based transitions. Also reinstated some warnings as info\n\n  * Fix error caused by unknown edit condition in twist corrective node\n\n  * Fix incorrect BuildUnsorted overload being picked when compiling EngineTests\n\n  * Fixed an assert being hit while ticking a montage with sync markers due to its position being modified outside of its asset player.\n\n  * Fix curve debugger not working correctly with pose watches when connected to an external instance\n\n  * Fix edge cases around re-importing meshes with bones inserted into the hierarchy\n\n    * This adds a CVar (a.Skeleton.AllowIncompatibleSkeletalMeshMerge) to enable the addition of bones into the middle of skeleton hierarchies via import.\n  * Fix for debug draw on blendspace player nodes when debugging parent anim bps\n\n  * Fixed curve filtering option on DeadBlending on Anim Node.\n\n  * Fixed issue when BlendProfiles and BlendModes were used in combination on DeadBlending Anim Node. Added bone filter to Inertialization node. Memory improvements to Inertialization node and some cleanup/deprecation of old code.\n\n  * Fix unfixable warnings when variables referenced in in anim graph node pin bindings are removed\n\n  * Fix for potential crash when retrieving anim attribute values\n\n  * Prevent crash when attempting to create animation asset with invalid mesh/skeleton\n\n  * Fix crash opening binding menus in state tree\n\n  * RigVM: Fix pin-resolution behavior with already-resolved float and double pins\n\n  * Fix issue where screen size property isn't correctly hidden in skel mesh details customization when driving LOD settings from data asset\n\n  * Fixed blend spaces not syncing properly when using inertial blends. *Fixed blend spaces not syncing when using \"Transition Leader\" and \"Transition Follower\" sync group roles.\n\n  * Fix blend list optimization to correctly check weight of single active pose\n\n  * Fix node bindings not being present for nodes that are drag-dropped\n\n  * Fix pasted 'anim getter' nodes introducing hidden references to their source anim BP\n\n  * Fixed the animation editor renaming of float curves, that was returning error due to an issue in the name check.\n\n  * Fix FMessageStack::HasMessage to properly account for popped messages\n\n  * Fix bug with CurveSource node where it would affect curves not present in the curve source asset\n\n  * Expose a native way to get the 'main' anim instance in a thread safe way, negating the need to nest property accesses to acheive the same effect\n\n  * Exposed AddAnimNotifies publicly in FAnimInstanceProxy\n\n  * Correctly use the key reduction thresholds in \"Remove Trivial Keys\" animation compression\n\n  * Fixed accumulation of attributes not working properly when evaluating a pose from a slot node using time blend profiles and additive poses.\n\n  * Fix crash when unlinking a linked anim layer that nests a linked anim graph\n\n  * Fix debugging watched pins in child anim BPs\n\n  * Fixed per-track compression to not allow selection of invalid scale formats\n\n  * Fix for an issue where WheelController anim node wasn't updating upstream nodes in the anim graph\n\n  * Fixed inertial blends originating from a BlendBy anim node not working with sync groups.\n\n  * Fix \"weighted moving average\" mode in modify curve node\n\n  * Fixed a crash when reloading a skeletal mesh while an animation sequence is open, due to a stored raw pointer in the PersonaToolkit\n\n  * Fix montage preview of non-default tracks not firing notifies\n\n  * Tweaked skeleton tree bone weight tooltip to better reflect the weighting of a bone\n\n  * Add support for blendspace graph nodes to FBlendProfileCustomization::GetSkeletonFromOuter\n\n  * Fix an invalid memory read when ACF_None is used as a rotation format in various animation codecs\n\n  * Added clamping to the UI for \"Remove Every Second Key\" anim compression's Min Keys property\n\n  * Fix GC crash with Sequencer anim instance proxies\n\n  * Assets (i.e. not umaps) with external packages now save correctly when saving from the content browser\n\n#### Sequencer\n\nNew:\n\n  * Sequencer- Allow materials to be referenced by material slot name rather than just by index. This prevents breaking resolution of material parameter tracks when materials indices get reordered within a mesh, as long as the slot names remain consistent. For now, we try to match by slot name first, and then by index if we cannot find a material by its slot name (or one doesn't exist in the binding for backwards compatibility). We also provide ways to refresh/fixup this binding in case material slot names or indices change. * Adding the ability to reference the OverlayMaterial in MeshComponents, and animate parameters in it, or change which material is assigned to the overlay material property using a material switcher track.\n\n  * Sequencer: Add the ability to animate layer and function material parameters in Sequencer.\n\n  * Sequencer: Tree View UX - Alternating rows have different tints, parents have different tints, make sure top level rows also report as a parent row, rows that have keys or sections selected also report as highlighted\n\n  * Sequencer: UX changes for Playback Controls - new icons, info button, current time indicator.\n\n  * Sequencer: Sequencer and Curve Editor Key Selection in BP/Python\n\n  * Sequencer: Animation Mode: When reopening level sequence restore tween/tool states, recreate control rig as needed, and restore selection.\n\n  * Sequencer- Added a track for animating custom primitive data on PrimitiveComponents. Custom primitive data is an alternative way of driving material parameters. It allows you to map any of 36 numbered float parameters on a PrimitiveComponent to one or more material parameters across multiple meshes and materials. You can apportion between 1-4 slots in a row to handle anything from scalar to color parameters. Previously these could only be set via code or blueprint, but now these can be animated in Sequencer.\n\n  * Sequencer: Constraints: Animated constraints live in the level sequence\n\n  * Add shared state structure for sequence hierarchies, with new \"playback capabilities\" container This lets external code (like level sequence actors or UMG widgets) specify what a given sequence instance can provide in terms of contextual information or logic. This is a first step towards removing the necessity for IMovieScenePlayer in core sequencer evaluation code.\n\n  * Add grouping system to help with the common pattern of multiple contributors being grouped when animated the same target\n\n  * Take Recorder: Add tokens (ie. day, month, take, actor) for animation asset and audio asset directories. Also, added tooltip information for what tokens can be used\n\n  * In TakeRecorder, the audio device list is now more robust to devices going offline. A menu item has been added for refreshing device list.\n\n  * Sequencer: Added Conform to Range in the right click menu of the timeline to conform the start/end range to the subsequence range.\n\n  * Sequencer: Added a new interface that allows any UObject to implement an interface (either in C++ or BP) to receive events when Sequencer binds/unbounds that object. To get the events requires the sequence add a Binding Lifetime track to the binding. If the BindingLifetime track remains infinite in length, then the events will fire at the beginning and end of sequence playback respectively. If the binding lifetime track has a finite range, then the events will fire when entering/exiting the binding lifetime section.\n\n  * Sequencer: Added SetCompletionModeOverride and GetCompletionModeOverride on the SequencePlayer.\n\n  * Sequencer: Control Rig: Avoid issues with running PIE with the editor with Control Rig. Instead of sharing the same Control Rig in all worlds if there is a new game world we use a new instance of the control rig and set up/evalute that one in evaluation.\n\n  * Curve Editor: Show first and last key's tangent handle on both sides. This is useful for example, if you have pre and post infinity set to cycle, you can manipulate the last key's leave tangent so that it's smooth to the first key's arrive tangent.\n\n  * Fix curve editor stacked view mode not displaying single channel curves\n\n  * Fix Curve Editor Curve Name node updating\n\n  * Sequencer: Change bRestoreState boolean option on FMovieSceneSequencePlaybackSettings to an enumeration named FinishCompletionStateOverride with 3 values (Default, ForceKeepState, ForceRestoreState) with ForceRestoreState being the equivalent option to setting bRestoreState to true. bRestoreState was used to force PreAnimatedState to be cached for all items globally and then restored when the Sequence is stopped or is finished. When set to false, no such override occurred, and completion mode was determined per track section by the settings on each track section. We now have a 3rd option- ForceKeepState. If FinishCompletionStateOverride is set to ForceKeepState, then when the sequence is stopped or completed, we do not restore any state, regardless of track section settings- all state active when the sequence ends is persisted.This is done by discarding any preanimated state metadata and storage, preventing it from being used to restore state.\n\n  * Sequencer: Constraints working with snapper.\n\n  * Sequencer: Added the ability to move all the selected marks either by dragging or by nudging (ctrl-arrow keys)\n\n  * Sequencer: Parse takes by asset name rather than shot display name. This allows you to rename the shot label and the takes which are name based, will stay intact. This also fixed a bug where when you change takes, the shot label doesn't come along with it.\n\n  * Add logging and checks to diagnose unknown crashes around sequence instance creation\n\n  * Convert slomo track to use the ECS evaluation\n\n  * Add cached expansion state values to the curve editor tree so expansion state is restored when selection changes instead of defaulting automatically to a closed state. There are just saved per session, not in any asset.\n\n  * Optimized reinitialization of double blender accumulation buffers\n\n  * Sequencer: Make MoveSection virtual so that sections can implement how they want to be moved\n\n  * Added suppressible dialog to prompt user to use audio clock source when audio is added to a sequence.\n\n  * Upgrade camera shake tracks to use the ECS evaluation\n\n  * Sequencer: Added support for component visibility in editor. There is existing support for the actor's temporarily hidden in editor property. This adds support for the component's visible in editor property.\n\n  * Sequencer: Added missing BlueprintType to MovieSceneFolder so that they are exposed to Blueprints\n\n  * Curve Editor: Show arrive tangent if previous key is cubic. This allows the arrive tangent of a constant key to be visible and manipulatable.\n\n  * Sequencer: Anim Details: Per animator feedback we only select curves on the section to key section when there are multiple sections.\n\n  * Make material systems use the new grouping system and benefit from hierarchical bias\n\n  * Improve cinematic preview of camera shakes\n\n  * Sequencer: New Auto/Smart auto with no overshoot. Set's Sequencer.AutoTangentNew 2 as default revert this value to \"1\" to go to previous behavior.\n\n  * Sequencer: Linked Anim Instances. Delete links if we can't resolve(by loading) the object referenced.\n\n  * Curve Editor: Changed Curve Editor tool time properties so that they display based on the user preferences (ie. frames, seconds, timecode).\n\n  * Sequencer: Add pre/post cycles to integer and bool channels. Integer supports all but linear, bool supports constant(default), cycle and oscillate\n\n  * Sequencer: Allow resizing subsequence track and template sequence track row heights\n\n  * Sequencer: New Tween Tools for Blend Relative, Blend To Ease, and Smooth/Rough\n\n  * Sequencer- Add a new 'SequencerAnimationOverride' interface for blueprint Anim Instances. This allows custom anim blueprints to either: a) Allow Sequencer to swap out their anim instance during playback (swapping it back after). This is similar to checking the 'Force Custom Mode' checkbox on a Skeletal Animation track section, but at the blueprint level without having to change anything in Sequencer. b) Provide a list of valid Anim Slot names for the Sequencer Skeletal Animation track section UI to choose from. When provided by a blueprint with the interface, a valid slot will always be chosen when creating new skeletal animation sections.\n\n  * Sequencer: Control Rig: Fix setting zero value so it doesn't always add and uses default interoplation\n\n  * Add option for choosing whether the camera cut track restores the original (pre-animated) viewport position on unlock.\n\n  * Make the camera shake previewer aware of the world in which it should run shakes\n\n  * Sequencer: Added a shortcut for Focus Playback Time, which focuses the view range on the current playback time without changing zoom level.\n\n  * Movie Render Queue: Panoramic Renderer now respects the camera rotation by default. The original behavior can be restored in the Panoramic Render Pass's settings.\n\n  * Add a Native Finished delegate for Movie Scene Sequence Player\n\n  * Sequencer: Add support for animating material parameters on volumetric cloud component materials.\n\n  * Upgrade visibility track to ECS evaluation\n\n  * Movie Render Queue: Enabled the maximize button on the PIE window to allow increasing the size of the image preview.\n\n  * Sequencer: Added FBX Export options for baking - Bake None, Bake Transforms, Bake Channels, Bake All.\n\n  * Support multiple sequences for the dynamic binding BP extension.\n\n  * Sequencer: Control Rig: Add priority order for Control Rig External Nodes. Allow for multiple Control Rigs on same binding.\n\n  * Sequencer: Added GetNextKey/GetPreviousKey functions which are exposed to SequencerOutlinerScriptingObject. Also, GetNextKey/GetPreviousKey now operate within the the sequence's time bounds (which can be restricted to the selection range).\n\n  * Sequencer: Pose Library: Blend float/vector2d controls.\n\n  * Sequencer: NLA: Split Sections will inherit root motion matched location.\n\n  * Control Rig: Control rig track order set by python/bp and set default to 100. Allow for multiple Control Rigs over same bound object.\n\n  * Add option to disable auto-arranging of camera cut sections\n\n  * Sequencer: Allow dropping actors that haven't been possessed into folders in Sequencer\n\n  * Sequencer: Add shortcuts for Clear Global Marked Frames and Show Marked Frames Globally\n\n  * Sequencer: Allow MovieSceneByteProperty tracks to find UEnums nested in structs in order to properly show the UI for animating these enums.\n\n  * Sequencer: Added SetLoopMode/GetLoopMode to LevelSequenceEditorBlueprintLibrary.\n\nBug Fix:\n\n  * Sequencer: reset director blueprints in UMG when stopping an animation\n\n  * Sequencer: Control Rig: Fix crash with adding CR to anim bp instances due to skeleton not existing in initialization.\n\n  * Don't call CleanTaggedGarbage twice on systems that happen to belong to multiple phases.\n\n  * Curve Editor: Fixed the Transform tool not working with the Scale Center option.\n\n  * Sequencer: Fixed PasteBindings not returning the actual pasted bindings.\n\n  * Sequencer: When baking, check that the bake data is valid. The bake operation bakes from start to end frame inclusive. In the case of a spawnable in a subsequence, the spawnable won't exist for the end frame, so there is no bake data, in which case we use the default transform.\n\n  * Sequencer: Fixed dragging multiple sections on different rows.\n\n  * Sequencer: Fix leaking pre animated state for tracks set to keep state. Looping sequences with spawnables in subscenes could cause memory to continually get allocated in pre animated storage for each time spawnables were created. This was occurring for sections that were set to 'Keep State'. Even though states were not being cached, memory was being allocated in the cache tied to the object keys because 'MakeEntry' was being called. This memory was not even required as we weren't ever caching into it or restoring state. To fix this, logic has been reorganized in the CachePreAnimatedState functions to check whether we are meant to be tracking state before creating entries.\n\n  * Sequencer: Fixed show Selected Nodes Only not always showing the selected actors if the bound object's name wasn't the same as the binding name.\n\n  * Sequencer: Fix issue with possessable tracks that map to spawnables. If the spawnable despawns/spawns, the possessable track was not getting correctly invalidated, and so was failing to reconnect after the spawnable respawns. In addition, update the label color logic so that if a possessable references a spawnable, and the spawnable is despawned that we show a 'gray' color instead of red, just like we do for regular spawnable tracks.\n\n  * Movie Render Queue: Fixed an issue where canceling a job would report as a successful job for some callbacks.\n\n  * Sequencer: Fix memory stomp that was leading to crash on undo/redo of Control Rig Constraint Bake.\n\n  * Sequencer: Fixed shot name being erroneously carried over when switching takes and creating new takes.\n\n  * Fixed an issue in TakeRecorder where an unavailable audio input devices was not properly handled.\n\n  * Curve Editor: Fixed jittery movement when manipulating keys.\n\n  * Fix false positive assert from firing when an incorrect name is given to property bindings.\n\n  * Sequencer: Control Rig: Masked controls may not key correctly since wrong control/mask index was being used. Also fix old CIS warning from Marc. [FYI] marc.audy\n\n  * Fix a bug where, in some special circumstances, Sequencer would not cache the correct initial material parameter value\n\n  * Stable sort sequencer outliner children to avoid weird reordering issues\n\n  * Only set last known position on client-side initialization, to solve bug with replicated sequence that doesn't start at 0.\n\n  * Speculative fix for crash during level sequence actor teardown.\n\n  * Be more lenient in editor about invalid dynamic binding resolvers\n\n  * Sequencer- Improve performance of searching for items in large sequences by keeping the Spawnables, Possessables, and ObjectBindings arrays sorted by FGuid and using BinarySearch where searching is necessary. Testing was performed on adds and searches in these arrays to ensure improvement (to searches). Adds are a bit more expensive, but should be alright in the vast majority of use cases. Iimprovement could be made if necessary to bulk additions by adding bulk operation functionality.\n\n  * Don't run sequence updates when a client late-joins a level with stopped sequences\n\n  * Sequencer: Fixed Ctrl+B not browsing to asset when Sequencer is open.\n\n  * Seqencer: Add Evaluate to Integer channel\n\n  * Sequencer: NLA: Fix match with next not working with blend options.\n\n  * Sequencer: Control Rig: Remove auto compensation with space switching when we modify a channel, can lead to inaccuracies.\n\n  * Sequencer: clear cache of UMG widget director instances when invalidating cached data. [FYI] simon.orr\n\n  * Re-add FBX import/export menu entries to template sequences\n\n  * Fix splitting/trimming of looping sub-sections\n\n  * Resolve desired camera cut view target before checking if it's the same as the current one. This fixes some bugs when blending back to gameplay.\n\n  * Better handle incorrect/unresolved camera bindings in the camera cut track\n\n  * Anim: Return playing montage if there is one already playing. This fixes a bug where if a montage is playing when Sequencer starts, it doesn't return to that montage when Sequencer ends.\n\n  * Sequencer: Import from Animation Root now imports keys relative to the current Sequencer time.\n\n  * Fixed cleanup of invalid bindings by moving this logic from PostInitProperties to PostLoad\n\n  * Movie Render Queue: Fixed an issue where MoviePipeline.h shadowed GetPipelineState which causes the MoviePipelinePIEExecutor to call the base implementation (which always returns uninitialized).\n\n  * Sequencer: Fixed sequence getting marked dirty when closing a blueprint\n\n  * Sequencer: Fix Exclude Default Property Tracks array so that it can include properties on components multiple times. CameraComponent.FocusSettings.ManualFocusDistance, CameraComponent.CurrentAperture.\n\n  * Null check before synchronizing level editor selection.\n\n  * Sequencer: Fixed sequence getting marked dirty when destroying a spawned object.\n\n  * Sequencer: Constraints getting removed if we compensate out of a sequence boundary so need ot re-evaluate to make sure it's set up.\n\n  * Sequencer: Fixed hierarchical easing channels being destroyed when still in use\n\n  * Take Recorder: Fixed crash when using invalid character in the Animation subdirectory\n\n  * Better handle incorrectly resolved object in dynamic bindings\n\n  * Sequencer: Fix edge case where sequences with server-only or client-only subsections do not behave correctly with a single target executable for both server and client using TargetType.Game. In that case both server and client-only subsections stayed included. The fix is to detect when a sequence containing server-only or client-only subsections is being compiled for such a target, and mark that sequence as volatile, forcing it to be recompiled in those circumstances.\n\n  * Correctly initialize bOverrideAspectRatioAxisConstraint.\n\n  * Sequencer: Snapping: Constraints: Perform Euler filter when snapping/compensation static meshes\n\n  * Sequencer: Fix default interpolation not being used on baking/loading animation onto control rigs.\n\n  * Sequencer: Fixed rendering when scale transform changes signs (ie. positive to negative).\n\n  * Fix camera cut flag not being set when spawnable cameras are the last in control\n\n  * Sequencer: Fixed string array property values being incorrectly set with incorrect values.\n\n  * Sequencer: Fixed soft object path BP nodes not being correctly populated from payload variables\n\n  * Sequencer: Fix sync issues with replicated sequences while that sequence is itself animating the global time dilation. The code around calculating latency was not taking into account effective time dilation.\n\n  * PR #10925: Fixed UserWidget's PlayAnimationForward and PlayAnimationReverse not playing animations if the animation was recently stopped. #contrib 10925\n\n  * Curve Editor: Paste should paste should just paste onto the selected curves (or if none selected, derive the curves to paste onto). It shouldn't paste onto the hovered curves\n\n  * Handle play-rate in replicated playback synchronization\n\n  * Sequencer: Added missing EditAnywhere tags for ExportFBXParams which was preventing it from being visible in blueprints\n\n  * Sequencer: Control Rig: Fix keying Rotator controls from Rotation Order fallout\n\n  * Start tracking pre-animated state on new track instance inputs before stopping tracking on old ones\n\n  * In Sequencer, the audio clock is now interpolated between frames resulting in smoother animation.\n\n  * Seuquencer: Smart Auto hotkey missing in Sequencer\n\n  * Sequencer: Remove copy relative option because it's a bit of a hidden feature and causes confusion when copying keys with the mouse hovered over keys at different times\n\n  * Rerun Construction Scripts is now respected for any base blueprint class\n\n  * Fixed registered tick interval not being reset when player was torn down\n\n  * Curve Editor: Added shortcut to toggle lock camera command in Sequencer\n\n  * Fix rendering issue where color property tracks in Materials were causing key areas to get culled due to mismatching outliner and trackview heights.\n\n  * Sequencer: Changed numeric edits so that they are applied only on Enter (and no longer on focus change).\n\n  * Sequencer: Anim Detail Fixes, reset to default and vector3d working #changelist validated #virtualized\n\n  * PR #10839: Fixed disappearing root motion in template sequences. #contrib 10839\n\n  * Curve Editor: Fixed mirrored text for Arabic.\n\n  * Sequencer: Fixed snapping to section start/end points when resizing sections.\n\n  * Curve Editor: Fixed the curve name being carried over when you change curves.\n\n  * Don't cache the aspect ratio axis constraint if there's no local player\n\n  * Sequencer: Make sure setting the last view target is done even in early out. This fixes an issue where if sequence 1 plays and cuts to camera 1, and the sequence 2 plays and also cuts to camera 2, it restores properly when the sequences finish playing.\n\n  * Curve Editor: Fixed curve framing now always framing all curve point values.\n\n  * Handle fully-overlapped sections when arranging camera cuts\n\n  * Preserve camera shake instances across re-imports\n\n  * Fix displaying of looping sub-sections\n\n  * Sequencer: Added Modify() in SetSequence to fix the UI not updating when changing the sequence on a subsequence section.\n\n  * Sequencer: Control Rig:Only reconstruct in game thread #changelist validated #virtualized\n\n  * Sequencer: Added back missing drop shadow on text in sections.\n\n  * Change how the sequence observer is queried to solve networking bugs related to observer info sometimes not being replicated in time for the client to use it to decide whether a sequence should be played or not.\n\n  * Fix editor preview blending back to gameplay\n\n  * Curve Editor: Fixed BakeInterval for FFT Filter.\n\n  * Don't invalidate bindings when looking for an object\n\n  * Curve Editor: Fix performance issue by refreshing the container on tick rather than in the getter functions.\n\n  * Constraints: Use weak pointer to hold World in Constraint Subystem\n\n  * Sequencer: Step to Next/Previous Mark now also steps to the next/previous global marked frames.\n\n  * Sequencer: Fixed the color tint not carrying over when switching takes or duplicating a shot.\n\n  * Sequencer: SetCurrentTime and SetCurrentLocalTime should force an evaluation if the current time is already the requested time. Users would expect an evaluation to occur.\n\n  * Take Recorder: Fixed setting the animation track name from the animation settings.\n\n  * Sequencer: account for non-zero playback start times when trimming/splitting sub-sequences.\n\n  * Sequencer: Snapper: Don't include controls without shapes as snap objects\n\n  * Sequencer: Disallow keying muted/disabled tracks.\n\n  * Sequencer Scripting: Change to Get/Set View and Working Ranges to double precision\n\n  * Restore camera cut view target even if the previous view target isn't valid anymore.\n\n  * Sequencer: If there is a subsequence range, clamp to that rather than the playback range. Users want to be able to clamp the scrubbing to the bounds of the shot, rather than the outer playback range.\n\n  * Sequencer: Fixed tracks/bindings getting sorted incorrectly when adding tracks.\n\n  * Fix for a rare issue with replicated sequences running an incorrect update soon after their creation\n\n  * Patch up bound object pointers in the property instantiator system when an object gets replaced\n\n  * Fix some issues with replicated sequence playback\n\n  * Sequencer: Tween tool not working on objects since Sequencer isn't present.\n\n  * Curve editor sets new key attributes based on neighbour keys (previous or next key to the curve time), in order to maintain the existing curve keys\n\n  * Sequencer: Fixed crash when binding overrides array change when using binding overrides during runtime.\n\n  * Movie Render Queue: Fixed the Movie Pipeline in-game overlays using visibility bindings which created a blueprint warning when Property Bindings were disabled for a project.\n\n  * Sequencer: Fixed nodes getting automatically sorted on undo.\n\n  * Sequencer: Fix issue where Movie Scene Event UObject payload parameters were not properly creating references to the UObjects and therefore renaming those UObjects would not create redirectors and the references would be lost.\n\n  * Fix a crash when recompiling a user widget while sequencer is open\n\n  * Sequencer: Game mode playback would not turn back on gizmo's, do to editor regression, which now needs you to manully turn on widgets with game mode turned off.\n\nDeprecated:\n\n  * Sequencer: Deprecated bRestoreState and replaced it with FinishCompletionStateOverride. Blueprints that reference Restore State will need to be fixed up manually by adding FinishCompletionStateOverride.\n\n  * Take Recorder: Changed PreInitialize, Started, Stopped, Finished, Cancelled, MarkedFrameAdded to multicast delegates. Deprecated delegates that the multicast delegates replace\n\n  * Sequencer: Added Time Unit as an argument to marked frames commands. Deprecated existing functions: GetMarkedFrames, AddMarkedFrame, SetMarkedFrame, FindMarkedFrameByFrameNumber, FindNextMarkedFrame. Added new functions that have the old function's display names: GetMarkedFramesInSequence, AddMarkedFrameToSequence, SetMarkedFrameInSequence, FindMarkedFrameByFrameNumberInSequence, FindNextMarkedFrameInSequence\n\n  * Sequencer: Fixed ULevelSequenceEditorSubsystem which was incorrectly marked as Blueprintable.\n\n  * Sequencer: Deprecated Get/SetCurrentTime and Get/SetCurrentLocalTime in favor of Get/SetGlobalPosition and Get/SetLocalPosition so that units can be specified in frames, seconds, marks or timecode.\n\n  * Sequencer: SequenceTimeUnit has been deprecated and moved to the MovieScene module as MovieSceneTimeUnit.\n\n  * Sequencer: Deprecated SequencePlayer on the LevelSequenceActor. It can now be accessed through GetSequencePlayer(). #noqatesting\n\n#### Synthesis\n\nNew:\n\n  * [MLDeformer] Added PIE debugging support, and Rewind Debugger integration of the external morph targets. You can now connect the ML Deformer asset editor to a character inside a PIE session.\n\n  * [MLDeformer] Add proper support for LOD, replacing the quality level setting. Each skeletal mesh LOD level can now have the ML Deformer applied to it. You can also have a lower number of ML Deformer LOD levels than skeletal mesh LODs.\n\n  * [MLDeformer] Add support for multiple animations as training inputs.\n\n  * [MLDeformer] Changed the framework and neural morph model from beta to production ready.\n\n  * [MLDeformer] Added support for comparing ML Deformer models side by side inside the ML Deformer editor. The comparison MLD assets requires to be trained on the same skeletal mesh for it to work. They can use different ML Deformer model types though. Also added support for detailed searches for MLD assets inside the content browser. For example you can search for untrained MLD assets, or assets with specific input animations or property values. All those searchable properties start with a \"MLDeformer.\" prefix.\n\n  * [GeomCache] Added some virtual method to the tracks to sample at a specific frame directly (sample index).\n\n  * [MLDeformer] Add support for output morph weight clamping in the Neural Morph Model. This is an extra safety feature to prevent potential extreme deformations when running the deformer on unseen poses.\n\n  * [MLDeformer] Improve neural morph model bone mask generation.\n\n  * [MLDeformer] Show the frame counts in geom cache vs anim sequence duration mismatch warnings.\n\n  * [MLDeformer] Add an extra improvement to the handling of bindings in the ML Deformer Component. Also removed the quality level from the ML Deformer component as that isn't used anymore since we added LOD.\n\n  * Added the ability to specify the parent of the world-space controls in Physics Control Component\n\nBug Fix:\n\n  * [MLDeformer] Fixed some issue where just saved newly created assets would still be marked dirty after opening them again.\n\n  * [MLDeformer] Fix some crash when pressing Undo in a specific case.\n\n  * [MLDeformer] Fix some reimport issue when reimporting skeletal meshes.\n\n  * [MLDeformer] Fixed a crash when enabling ML Deformer Framework plugin, but no ML Deformer model plugins, and creating a new ML Deformer asset.\n\n  * [MLDeformer] Improved handling of delegate bindings, which could prevent crashes.\n\n  * [MLDeformer] Fix a crash when saving a level after creating a character blueprint with Vertex Delta Model in it and a compute graph component.\n\n  * [MLDeformer] Fixed a crash when packaging a project with a blueprint that has a VertexDeltaModel based ML Deformer inside it.\n\n  * [MLDeformer] Fixed a crash when switching between NMM and NN and back to NMM models.\n\n  * [MLDeformer] Fix some bug that reported crazy amount of memory usage in the UI and directly improved it by separating memory from asset sizes.\n\n  * [MLDeformer] Fixed some crash blocker bug when creating a new ML Deformer asset and switching to Nearest neighbor model. #trivial\n\n  * [MLDeformer] Crash fix when clearing the input animations array in the UI and when switching characters.\n\n  * [MLDeformer] Fix sampling inaccuracies, which could lead to large deltas at certain frames. And some small parallel optimizations to make samplers slightly faster.\n\n  * [MLDeformer] Some small tweak when detecting if an animation is the same length or not. - Fix in the Vertex Delta Model training, where it would fail when clicking Train, as the API changed but the python script wasn't updated yet. - Fixed a bug in the VertexDeltaModel where it wouldn't save the neural network. - Fixed a bug where the VertexDeltaModel extracted the wrong size from a tensor.\n\n### Editor\n\nAPI Change:\n\n  * This still encodes and uploads a tiny black texture to the hardware.\n\nNew:\n\n  * New \"Asset Disk Size\" tool (Tools | Audit > Asset Disk Size) for Unreal Editor which can load AssetRegistry.bin and .ucookmeta files from a cook and provide a variety of analysis options for investigating asset and plugin dependencies and their costs in terms of disk size. The tool allows you to ask questions like: \"What is the marginal cost in terms of disk space for adding an additional asset to the game?\" and \"How much disk space would we save by removing this asset and any assets that it depends on (which are not used by any other asset)?\"\n\n  * Added angular speed units (deg/s, rad/s) for display in editor and conversion\n\n  * Texture RenderTarget export to DDS file supports cubes, volumes, and all pixel formats.\n\n  * Optimized loading of Asset Registry data in the editor, the initial asset scan should be significantly faster on large projects\n\n  * Categories in the Message Log window are now sorted alphabetically\n\n  * Add support for manual auto-complete commands in the Output Log console\n\n  * Add r.Editor.NeverStartInPreviewMode Disable Preview Platform automatically if Preview crashed\n\n  * Added the ability to optionally run content validation during cook\n\n    * The following flags can be passed when running the cook commandlet: -RunAssetValidation. Run asset validation (EditorValidatorSubsystem) on assets loaded during cook. -RunMapValidation. Run map validation (MapCheck) on maps loaded during cook. * -ValidationErrorsAreFatal. Consider validation errors (from RunAssetValidation or RunMapValidation) as fatal (preventing the package from being cooked).\n    * Any validation errors are downgraded to warnings when running without -ValidationErrorsAreFatal to ensure that things looking for log errors or a non-zero return code don't consider the errors as failing the cook, and the \"Cook.AllowContentValidation\" CVar controls whether validation can run even if the flags are passed.\n    * These flags (-RunAssetValidation in particular) replace the older (and broken) bValidateAssetsWhileSavingForCook option in EditorValidatorSubsystem.\n  * New context menu options added to Spline Components:\n\n    * Closed Loop - Quickly toggle the Closed Loop property StraightenToNext - Quickly reset selected points tangent to align directly toward the next spline point StraightenToPrevious - Quickly reset selected points tangent to align directly toward the previous spline point ToggleSnapTangentAdjustments - Toggle behavior that would reset tangents when performing any Snap or Align action.\n  * Engine (map and set add item); Implementing a way to have the map and set fill in with the next available enum value instead of always doing the default value. -- Code -- PropertyHandleImpl: FPropertyHandleMap::AddItem() - Added a HasKey() lambda. We're then checking if the map property's key is an enum property, if so, we'll loop the enum values to see if the map doesn't already have that enum value as a key. When we find one that isn't in the map, we're adding a child node and then setting the child's key node to be the enum value that is not in the map yet. If the map property's key is not enum then we do the old check for if the default key isn't there. FPropertyHandleSet::AddItem() - Added a HasElement() lambda. We're then checking if the set property's element is an enum property, if so, we'll loop the enum values to see if the set doesn't already have the enum value as an element. When we find one that isn't in the set, we're adding a child node and then setting the child node to be the enum value that is not in the set yet. If the set property's element is not enum then we do the old check for if the default key isn't there. UnrealTypes: FSetProperty::GetElementProperty() - Added this getter to return the ElementProp property.\n\n  * Property Bindings: Add MaxDepth parameter to the widget so that systems can customize the maximum property depth to discover\n\n  * Copy relevant warnings/errors to the texture editor window to avoid having to hunt them down.\n\n  * The Editor's splash screen now includes information about module loading progress\n\n  * Add tokenized search support for Searchable Combo Box\n\n  * Added a category type that can be used with FMessageDialog to control the icon used by the in-editor dialog.\n\n  * Imath: upgrade Imath to version 3.1.9\n\n  * Added a context menu entry to perform asset validation on specific actors\n\n  * Added basic source control support to Content Browser file data sources\n\n    * This is enough to support the basic operations (on add, delete, move, rename), as well as the revision control file menu (to allow sync, revert, check-in, history, and diffing).\n  * SCC: Fix Uncontrolled Changelist missing writable assets to reconcile\n\n  * Editor | Add mechanism for extending the global status bar elements (Content Browser and Output Log buttons)\n\n  * Added a content browser filter to only show the assets that are not used by another asset.\n\n  * Make it possible to listen when the Status Bar Output Log is cleared\n\n  * Add ImageCore::ResizeImage a high quality and fast resizer using stb_image_resize2. Old \"ResizeTo\" will be deprecated.\n\n  * Texture RenderTarget create static texture and update texture now works with all pixel formats. Use the new GetRenderTargetImage API.\n\n  * Scene Outliner: Add an option to mark a folder as the Current Folder on double click instead of expanding it\n\n  * UnrealPak now uses the CookMetadata file to optionally write out size information for plugins. This information is written back to the cook metadata file, and is enable via a project packaging setting.\n\n  * Added FCoreDelegates::OnCommandletPreMain and FCoreDelegates::OnCommandletPostMain\n\n    * This allows things to hook in to provide additional initialization or shutdown logic for any commandlet that may be run.\n    * FCoreDelegates::OnCommandletPreMain is akin to FCoreDelegates::OnFEngineLoopInitComplete (which doesn't run for commandlets).\n  * Add viewport client to the view modifier parameters so that subscribers know what viewport is being modified\n\n  * The texture editor now clearly shows when the texture being viewed is not what will be used in the shipping game.\n\n  * Added directory watchers for plugin root directories (instead of individual directories) in the Asset Registry to save memory\n\n  * Added AssetRegistry.IgnoreEmptyDirectories console variable that can be enabled to ignore empty directories left behind by renames to improve load times along with several others for tweaking asset registry scan performance\n\n  * Add new Texture asset actions in the right-click menu for textures in the content browser which can modify the texture source data stored in the uasset. Actions include changing higher bit depths to 8 bit, compressing the source with JPEG, resizing below a threshold size, and resizing to power of two.\n\n  * Make r.InstanceCulling.OcclusionCull have ECVF_Preview flag\n\n  * Add ECVF_Preview to cvar r.Mobile.AntiAliasing so it is previewable\n\n  * New: Added support for removing (and optionally reverting) animation modifier(s) from a selection of sequences in the content browser.\n\n  * Added metadata map to MetaHuman DNAAsset that comes with a Face SkeletalMesh.\n\n  * Support setting actor picker with the currently selected actor in the level editor\n\n  * GenerateStreamingInstallManifest - Add AllowPerChunkCompressionWildcard to allow pak files to opt into or out of being compressed through CompressedChunkWildcard. CopyBuildToStagingDirectory - Use bAllowPerChunkCompression to enable bCompressed to override global compression settings. This will correctly allow chunks to opt in and out of being compressed. NOTE: If DDPI specifies a hardware compression setting of 'None', this won't work as expected because there will be no global compression settings to opt in to. In this case, set bForceUseProjectCompressionFormatIgnoreHardwareOverride=true and bCompressed=False in [/Script/UnrealEd.ProjectPackagingSettings], then setup whatever project compression settings you would like chunks to be able to opt in to.\n\n  * 2D Textures can now be marked as \"CPU Accessible\". This switches the texture from being usable by the GPU and allows the CPU to access the texture's source top mip. The format doesn't change.\n\n  * OpenEXR: upgrade OpenEXR to version 3.2.1\n\n  * Add cvar, Mainframe.ShowRestoreAssetsPromptInPIE, to allow re-opening asset editors when -PIE is present\n\n  * Scene outliner and changelist window now sort entries by name in natural order\n\n  * Cooked Editor: Fixed an issue where the asset registry state of an cooked plugin would remove some of the needed development tags from an asset that might already exist in the EditorClientAssetRegistry data.\n\nBug Fix:\n\n  * Fixed a crash in our Json serialization code that would happen when serializing an object with an empty string as a key.\n\n  * Preview Platform message displayed only when Preview is Active displayed\n\n  * Fix for dynamically sources textures going black when opening in the texture editor.\n\n  * Make the ProcessClick behavior in the SCS Editor Viewport Client handle the ComponentVisManager in the same order as the Level Editor Viewport, making it easier to add custom tools and extensions to your editor. This will result in the right click behavior being evaluated in the same order as the level editor for more consistent options.\n\n  * Fixed various crashes associated with editing a texture or otherwise changing the ddc key during a texture build.\n\n  * Clear the auto-save restore file after closing the main frame (and discarding changes)\n\n    * This avoids the auto-save restore prompt appearing if the editor crashes after the user has already opted to discard their pending changes during shutdown\n  * Fixed soft-object actor references failing to fix-up when moving (via copy/paste) actors to a new world\n\n  * Env. Light Mixer: Expose inner properties of SecondFogData when parent row is displayed\n\n  * Removed old code that would incorrectly ensure if a raw memory address was reused for temporary maps in the editor\n\n  * Fix for encode speed not showing up in the texture editor viewer on newly built textures.\n\n  * Lots of various cook metadata fixes\n\n  * Crash fixes for FConsoleVariablesEditorModule\n\n  * Fix several bugs that would break Game Feature Plugins when changing the Asset Manager project settings in the editor\n\n  * Made the paper2D on object reimported function safe to use in a cooked editor and made the existing code more robust by not crashing if we are missing the SourceTexture meta data.\n\n  * Fix seamless travel not using the correct feature level\n\n  * Fix undo history crash when temporary property not yet in object reflection data.\n\n  * The content browsers path filters settings are now persisted properly per instance.\n\n  * Fix PropertyHandleRotator crash when children not yet populated\n\n  * Fix OverrideSP to work with the correct command line\n\n  * Fixed an issue with the api of the asset definitions. The GetSourceFiles function didn't allow to resolve the source file paths in a way that is independant of the asset implementation details. This also fixes the issues where the editor is not able to find the source file during a reimport or simply navigating to that file via the content browser.\n\n  * Fixed material editor crash when trying to restore previously open shader code tab before shader instances are populated\n\n  * Removing texture build metadata.\n\n  * Select All Actor of Class: Use full class path to avoid ambiguous results\n\n  * Fix for typo in non pow2 volume texture mip count computation.\n\n  * Fix crash in level editor context menu for delta transform to actors\n\n  * Fixed incorrect scaling of tangents for meshes with non-uniform BuildScale. Note that the previous, incorrect behavior is still supported by a \"bUseLegacyTangentScaling\" flag on the static mesh asset, and already-imported assets will default to use that old behavior to avoid modifying existing meshes.\n\n  * Fixed many bugs with displaying gamma correction of textures in the texture editor viewer and thumbnails. One side effect is that normal maps will now be shown the linear gamma, so they appear light blue instead of dark blue.\n\n  * Property editor - Optimized performance when using a PropertyPermissionList to save several minutes of editor startup time\n\n  * Re-enables video and audio capture on the Mac platform when using a media player asset in the editor.\n\n  * Fix PropertyPathHelpers crashing due to missing vtables from incorrect pointer calculations\n\n  * Fixed ComponentTypeRegistry blocking unload of ActorComponent blueprint classes\n\n  * Fix bug where grayscale textures stored in TSF_G8 that used compression type UserInterface2D (EditorIcon) due to odd dimenions would output incorrectly as R8 and therefore appear red instead of gray.\n\n  * Fixed bug where starting Play In Editor before the asset registry scan finished could break assets like Data Registries that listen for the completion callback\n\n  * Don't allow 16Bit VALU for the Preview SP if the Editor SP does not support it\n\n  * Fix Select All Actor Children was not part of a transaction\n\n  * Fix the Game Feature Data UI to show an error instead of crash if one is created outside a plugin\n\n  * Fix UnlitViewMode for Mobile Preview\n\n  * Editor: Fixed a bug when entering PIE and clearing selection, which attemps to clear selection on a spawnable that has been destroyed.\n\nDeprecated:\n\n  * Deprecate asset registry writeback after stage as we're running in to too many things that need information we no longer have after stage. Use asset registry writeback during stage if you need compressed package sizes.\n\n  * Removing the AR Point Cloud plugin as it's no longer supported or maintained.\n\n#### Content Pipeline\n\nNew:\n\n  * Added a new translator for USD primitives types (like Cube or Cylinder). The generated meshes will use the same points and topology used by usdview whenever possible.\n\n  * It should now be possible to isolate the session layer and it's Sublayers when right-clicking them on the lower panel of the USD Stage Editor window.\n\n  * OpenUSD: upgrade OpenUSD to version v23.11\n\n  * Alembic: upgrade Alembic to version 1.8.6\n\n  * Fixed many issues with USD file format listings on save/export/open/reference/payload dialogs.\n\n  * Improve handling of nested skeletal data (such as nested SkeletalMeshComponents or nested SkelRoots) when importing, opening and exporting USD stages.\n\n  * Added support for handling skeletal attach sockets when exporting transforms to USD.\n\n  * Setting material overrides on HierarchicalInstancedStaticMeshComponents generated for USD PointInstancer prims will have the corresponding assignment written out to the USD Stage, just like for other component types.\n\n  * The \"USD Stage\" window has been renamed to \"USD Stage Editor\", and has been moved out of the Windows -> Virtual Production menu onto the top level of the Windows menu.\n\n  * USDImporter: add support for the usdMtlx plugin on Mac The usdMtlx plugin that is included with OpenUSD adds a file format plugin for reading MaterialX documents and translating them into UsdShade shading networks. The plugin was already supported on Windows and Linux, and this adds support for the plugin on Mac.\n\n  * Added support for importing and exporting prim metadata from/to USD, by storing it on the generated assets' AssetUserData.\n\n  * Added some support for alternate USD draw modes as described by the UsdGeomModelAPI schema, including bounding boxes and cards and even animations of some properties.\n\n  * Added a new UsdStageActor property and USD import option called \"bReuseIdenticalAssets\", that lets users disable the mechanism that shares the generated Unreal assets by hash when opening or importing USD Stages.\n\n  * Added support for handling USD Skeleton prims with multiple root bones when opening or importing USD Stages.\n\n  * Added support for exporting the output actors and components of PCG graphs to USD.\n\n  * Added support for subdividing USD meshes via OpenSubdiv and pxOsd.\n\n  * OpenSubdiv: upgrade OpenSubdiv to version 3.5.0\n\n  * It is now possible to isolate session layers on the USD Stage Editor window.\n\n  * Added support for USD collision APIs. Now the UsdPhysicsCollisionAPI schema must be applied to a mesh prim to enable it as a collider while UsdPhysicsMeshCollisionAPI can be applied to specify the collision approximation shape to use.\n\n  * Added cvars under USD.StaticMesh.BuildSettings and USD.Nanite.Settings to control quality of static and Nanite mesh building.\n\n  * Added support for parsing OpenVDB textures referenced by USD Stages as Unreal SparseVolumeTextures.\n\n  * USDImporter: align sublayer manipulation API on FSdfLayer wrapper with USD API The utility functions in UsdUtils for creating and inserting sublayers perform additional work that may not always be desirable such as authoring a root/default prim, so wrapping the sublayer manipulation functions from the USD API allows direct access to edit sublayer paths.\n\n  * Geometry caches can now be exported to USD.\n\n  * When exporting static and skeletal meshes to USD, the old 'unrealMaterial' prim attribute will no longer be emitted, in favor of authoring material bindings with full USD Material prims with \"unreal\" render contexts. Using the 'unrealMaterial' string attribute on prims is now fully deprecated.\n\n  * Implemented the \"StageState\" property on UsdStageActors, that can control whether the currently opened stage is closed, opened, or opened and loaded (assets and components were generated).\n\n    * This property can be bound on external LevelSequences to easily control when to load the stage, or can be used to quickly open USD Stages via the USD Stage Editor without fully loading assets and components.\n  * USDImporter: expose more type name-related functions of UsdPrim on UE wrapper This adds SetTypeName(), ClearTypeName(), and HasAuthoredTypeName().\n\n  * Right-clicking on a prim on the USD Stage Editor will now show a couple of new options on the bottom of the menu that allow adding or removing any arbitrary API schema, as well as quickly adding the most common API schemas.\n\nBug Fix:\n\n  * Fixed how the mesh's material assignments were not being factored in for the asset hash when exporting static and skeletal mesh assets to USD.\n\n  * Fixed how the right-hand panel of the USD Stage Editor wouldn't refresh in some situations.\n\n  * Fixed how the \"kind\" prim attribute would be shown twice on the prim details panel of the USD Stage Editor.\n\n  * Fixed a crash when importing USD Stages with LiveLinkAPI schema on a SkelRoot or Skeleton.\n\n  * Fixed how morph target controls were not being generated when using Control Rigs with USD Skeleton and SkelRoot prims in USD Stages without skeletal animation.\n\n  * Alembic: Static and skeletal mesh import now merge the non-unique material slots together. Each unique face set now translates to a unique material slot regardless of the \"Merge meshes\" setting.\n\n  * Fix imported LevelSequences from USD Stages ending up with broken actor and component bindings on some scenarios.\n\n  * Fix Sequencer tracks generated for animated USD Stages not receiving keys if the animation originates from a non-local layer (such as a reference or a payload).\n\n  * Alembic:\n\n    * Materials are now properly mapped on geometry caches when visibility animation is used. Now, the materials won't shift around when a mesh section is hidden. * Alembic import of geometry cache and skeletal mesh can now be interrupted.\n  * Fixed MaterialX reference paths set up inside USD Stages being ignored in some situations.\n\n  * Alembic: Import conversion presets have been renamed. Max/Maya preset names have been switched since their transform were reversed.\n\n  * Fixed an ensure being triggering when parsing USD Stages with invalid UV set indices.\n\n  * Fixed support for exporting LevelSequences with attachment tracks to USD.\n\n  * The UnrealUSDWrapper module will now be automatically loaded if one of its static functions is called before the caller has explicitly loaded it.\n\n  * Fixed how the File -> Export All option of the USD Stage Editor wasn't working for new stages.\n\n  * Fixed incorrect skeletal mesh material assignments on meshes generated from USD SkelRoot prims whose Skeleton prim had a very high number of bones.\n\n  * Imrpoved use of g room cache in Blueprint and Sequencer. Now it is possible to set the a groom cache through Blueprint and to add and set multiple groom cache tracks in Sequencer (for multiple groom components on the same actor).\n\n  * Fixed some UX issues related to the USD Default Asset Cache dialog.\n\n  * Fixed a crash when exporting USD layers to file paths that are invalid paths for the USD SDK.\n\n  * Fixed how materials generated from USD were not updating after changing the reference material paths on project settings and reloading the stage.\n\n  * Fixed a crash when the USD Importer plugin generated StaticMesh assets without any valid render data.\n\n  * USD: Improved memory usage of geometry caches by properly unloading them when closing the stage.\n\n  * Fixed how the File -> ExportAll option of the USD Stage Editor window would silently output layers to Engine/Binaries in some cases.\n\n  * Texture2DBuilder shouldn't remove mips - this is unneeded, and in the use cases where the builder texture is reused as the final texture, causes issues.\n\n  * Fixed a crash when repeatedly importing AnimSequence assets from USD in some scenarios.\n\n  * Fixed a crash when trying to cook UsdAssetCaches with persistent StaticMesh assets.\n\n  * USDImporter: fix allocator management scoping in UsdUtils::GetPointInstancerTransforms()\n\n  * Fix strange joint rotation behavior when importing skeletons with negative scalings (such as mirrorings) from USD.\n\n  * Fixed a crash when trying to parse SkeletalMeshes from USD Skeleton prims with no bones.\n\n  * Fixed crash when using the Actions -> Import workflow with an UsdStageActor without a valid UsdAssetCache.\n\n  * Fixed how it wasn't possible to package assets imported from USD for all platforms.\n\n  * Fixed various crashes on corrupted files during content import.\n\n  * Fixed some crashes when parsing Groom and GeometryCache assets from USD stages.\n\n  * Fixed a crash when exiting the Unreal Engine with a loaded USD Stage actor on the level.\n\n  * Fixed how the USD Stage Editor would not update when the prims were modified during a Play-In-Editor session.\n\n#### Datasmith\n\nBug Fix:\n\n  * Fixed an issue where double clicking on a Datasmith Scene asset wouldn't open its corresponding editor.\n\n#### Framework\n\nNew:\n\n  * Introduce validation for MustImplement meta tags for SPropertyEditorClass and SPropertyEditorEditInline to prevent non-interface classes being specified, and to protect against UInterface from being specified.\n\n  * Return a proper error message when a user tries to submit a changelist containing files not mapped to the current stream.\n\n  * Context Menu/SubMenu slate widgets can now be tagged\n\n  * Reduce log spamming by making the 'scene viewport resized log' verbose.\n\n  * Improved performance in the editor for allocation heavy workloads by slightly increasing the delay when memory goes back to the OS.\n\n  * Add a new initialization path to ISourceControlProvider allowing the caller to customize the initialization logic and retrieve more info about the initialization itself.\n\n  * Added tag metadata to items in New Asset menu of Context Browser\n\n  * Material Editor: Added statistics for preshaders, and dumping of preshader expressions and parameter fetches in human readable form to the HLSL source. Preshaders are bytecode expressions generated from a material graph and executed on the CPU, to offload invariant work from the GPU -- inspecting them can be useful for debugging.\n\n  * Return files not being marked for add due to P4IGNORE as errors rather than info.\n\n  * Support MustImplement, AllowedClasses and DisallowedClasses filtering for EditInline properties.\n\nBug Fix:\n\n  * Fixed ensure when editing CDO properties in FDataLayersBroadcast::OnObjectPostEditChange.\n\n  * Ensure that the editor's PlayWorld context is valid prior to handling a request to end the current PIE session.\n\n  * Fixed property clamping not taking into account the instance meta data if present on the property handle\n\n#### Landscape\n\nAPI Change:\n\n  * Note : this API change is backwards-compatble both on the code and data side\n\n  * Removed FLandscapeEditorServices, which didn't make much sense in terms of design wrt dependency inversion : instead, FLanscapeEditorModule is the one implementing ILandscapeEditorServices\n\nNew:\n\n  * When calculating runtime virtual texture volume bounds, if the bounds align actor is a landscape, then we now include all of its child landscape components.\n\n  * Fixed incorrect landscape CVar names\n\n  * Water: exposed a function to set river transition materials from blueprint and added a water mesh update when setting these materials to ensure the new MIDs are set.\n\n  * Water: Expose a method to set the far mesh material from blueprint on the water zone.\n\n  * Fixed BP functions RenderHeightmap/Weightmap/s functions so that they don't require their transform and extents pin to be connected, since it's a supported case already. Also, made it explicit in the code that WeightmapScaleBias is not to be used, since it has a different meaning than HeightmapScaleBias. This was compensated by the FloorToInt32 that is done later, but still, it might avoid any future confusion to explicitly use a 0 bias instead (which is always true on weightmaps where there's no texture sharing).\n\n  * Updates Landscape editor icons (BP Brush affects Heightmap/Weightmap/VisibilityLayer). Changes buttons to toggle buttons for landscape editor BP brushes affecting layers features. Updates landscape editor target list colors, padding, text color to reflect UE5 style.\n\n  * Water: removed the serialized ExtentInTiles from the quad tree. This is now recomputed dynamically based on the size of the water zone to prevent potential mismatch and remove some ambiguous authority over the size of the water zone.\n\n  * Added BP method to retrieve landscape target (paint) layer names\n\n  * Moves GrassTypes from LandscapeProxy to LandscapeComponent. Allows the use of different GrassTypes between the proxy and components by using LandscapeMaterialOverride.\n\n  * Water: Fixed exclusion volumes not updating water collisions when they are moved/changed. - Refactored the exclusion volume setting names so that they are more user-friendly. - Also supports a new mode which allows removing water bodies from the exclusion volume when including all.\n\n  * Added system to invalidate VSM pages when using (non-Nanite) landscape, to hide shadow artifacts induced by the vertex morphing system of standard landscape : Relies on pre-computing max height delas from mip-to-mip for every landscape component Invalidation occurs when the evaluated max delta between the heights at the LOD value that was active when VSM was last cached is different enough from the heights at the current LOD value (for a given persistent view), based on a height threshold that is tweakable per landscape and overridable per landscape proxy Invalidation doesn't occur when Nanite landscape is used The invalidation rate is decreased as the LOD value goes up, controlled by a screen size parameter in the landscape actor (overridable per proxy), under which no invalidation will occur. This avoids over-invalidating VSM on higher LOD values, since they tend to occupy less real estate and therefore don't need to have perfect shadows Added per landscape (overridable per-proxy) shadow map bias to help with this problem too Added 3 non-shipping CVars to help tweak those 3 parameters in-game (landscape.OverrideNonNaniteVirtualShadowMapConstantDepthBiasOverride, landscape.OverrideNonNaniteVirtualShadowMapInvalidationHeightErrorThreshold, landscape.OverrideNonNaniteVirtualShadowMapInvalidationScreenSizeLimit) The whole invalidation system can be enabled/disabled via CVar landscape.AllowNonNaniteVirtualShadowMapInvalidation Added another CVar (landscape.NonNaniteVirtualShadowMapInvalidationLODAttenuationExponent) to tweak the screen-size-dependent invalidation rate curve shape Misc: Fixed landscape.DumpLODs command : now works without parameter and can be used several times Changed CachedSectionLODValues system for landscape to be usable both for ViewState-less views (one-shot renders like water info custom render passes) and \"persistent\" views (those that have FViewStateInterface associated). This allows to keep track of the previous frame's CachedSectionLODValues for a given persistent view and removes the previous hacky method Landscape UX fixes Fixed some landscape CVars which were not render-thread safe\n\n  * New:** Expose Landscape force layer update to BP\n\n  * Deprecated prototype-y function to change LOD settings on landscape directly on the render proxy : it's already doable in a normal fashion by invalidating the render proxy\n\n  * Water: implemented support for a localized water quadtree when Local-only tessellation is enabled on the parent water zone.\n\n  * Water: Expose an event on the water zone which is fired whenever the water info texture is created or recreated\n\n  * Various UX improvments for landscape : Added an option to be able to consider the paint layer's hardness parameter when using the erosion tool. Set to false by default because this used to be misleading for users Set hardness to 0 by default for landscape layer info assets (for the same reason as above) Added several missing tooltips Added support for double-clicking on a paint layer thumbnail to open the corresponding landscape layer info asset\n\n  * Nanite skirts improvements : when trying to maintain the slope at the edge by extrapolating the skirt vertex position, we now only do it if the slope is going downwards from the edge vertex to the skirt vertex (otherwise, in case of steep slopes, the skirt depth might not be enough to bring the skirt's vertex underneath the neighboring landscape proxy)\n\n  * Implemented a new GerstnerWave shader and corresponding material function that supports splitting the wave spectrum into three buckets for low/mid/high frequency waves. This can be useful to filter out some of the higher frequency waves on lower end platforms in the material or utilize some interpolation instead of recomputing everything per-pixel for some frequency buckets.\n\n  * Turned landscape brush size's max slider and max clamp value into project settings\n\n  * Added RenderWeightmap/RenderWeightmaps BP functions to landscape in order to let users pack weightmaps onto the channels of a render target 2D (or render target 2D array), much like they could with heightmaps These can be called at runtime as they operate on the final weightmap data and they will render in a given world area, regardless of landscape component limits\n\nBug Fix:\n\n  * Fixed ensure when painting/sculpting outside a landscape\n\n  * Prevented computing the landscape texture hash twice when it has changed * Fixed landscape getting dirty even when the detected difference is lesser than the detection threshold\n\n  * Fixes new landscape location/rotation/scale reset to default button not showing up when using the gizmos. Adds LandscapeEditor DetailsView RightColumnMinWidth to allow ResetToDefault button to be properly hit testable.\n\n  * Fixed potential crashes in landscape code when iteration over garbage actor\n\n  * Ensure the LOD level is within valid ranges when building Nanite landscape data\n\n  * Fixed incorrect landscape components being rendered when doing a partial update of landscape edit layers\n\n  * Fixed crash when updating landscape edit layers (account for missing layer data, like we do everywhere else in the code)\n\n  * Made sure landscapes that belong to a level instance are not editable. The only landscapes that appear in landscape mode (and that can be updated) are now those that belong to the main level.\n\n  * Disabled landscape.RemoveEmptyPaintLayersOnEdit by default since it causes more problems (landscape actors being dirty on load for no apparent reason) than it solves. We need a proper separation between editor and final data to solve this for good.\n\n  * Fixed Per LOD material overrides not working on landscape streaming proxies\n\n  * Fixes invalid ZOffset overflowing the grass exporter projection matrix.\n\n  *     * Automated LandscapeInherited/LandscapeOverridable enforcement of properties on the proxies so that using the meta-data on the landscape proxy property is sufficient to get the required behavior Changed list of overridden properties to a list of FName (memory optimization) Made bBakeMaterialPositionOffsetIntoCollision LandscapeInherited since that's how it is used Removed useless recomputation of normals when changing the scale when edit layers are enabled Fixed LandscapeInherited/LandscapeOverride properties which were not detected as such because we were using Property->Name instead of MemberProperty->Name Tagged all remaining ALandscapeProxy properties as either LandscapeInherited or LandscapeOverride Fixed landscape proxy overridable/inherited property names that didn't always appear readonly\n  * Fixed landscape GPU readback pool not being depleted in most cases.\n\n  * Changed \"Mode\" property in landscape import/export to either \"Import Mode\" or \"Export Mode\" to be more explicit to the user\n\n  * Fixed landscape component count display in editor when selecting streaming proxies\n\n  * Bugfixes for ULandscapeSplinesComponent::CopyToSplineComponent - Account for reversed spline meshes within non-reversed landscape spline segments - Added some QoL for auto detecting looping landscape splines\n\n  * Fix for landscape layer not being recognized as such when used within material layers\n\nDeprecated:\n\n  * Landscape cleanup : Removed deprecated code from <=UE5.2 Moved UHierarchicalInstancedStaticMeshComponent::AcceptPrebuiltTree and UHierarchicalInstancedStaticMeshComponent::BuildTreeAnyThread to UGrassInstancedStaticMeshComponent\n\n#### Scripting\n\nNew:\n\n  * Allow overriding the name of an EditorUtilityTask\n\n  * Exposed DataTable column export names to scripting\n\n    * GetDataTableColumnExportNames\n  * Allow Python to be disabled entirely for certain commandlets\n\n    * This can be done by adding the following to any Editor.ini file: [PythonScriptPlugin] +DisablePythonForCommandlet=CommandletName\n  * Allow all FillDataTableFromX functions to provide an optional row struct override for automated imports\n\n  * Added an editor utility function for getting the asset 'root' directory - e.g. /Game/ in most projects, but sometimes $ProjectName\n\n  * Data Table automation improvements\n\n    * Always consider the FillDataTableFromX functions to be running an automated import when the optional ImportRowStruct is provided.\n    * Added GetDataTableRowStruct to query the row struct of an existing data table.\n  * Added support for autocast functions for objects to support their super classes\n\n  * Added bIsActionForBlueprints to UAssetActionUtility for better UX than needing to override a function\n\n  * Add GeneratedClass API to Editor Utility Framework\n\n  * SetEditorProperty/GetEditorProperty can now access class sparse data, and fixed arrays can be assigned to/read from dynamic arrays\n\n  * Exposed Data Table export to scripting\n\n    * ExportDataTableToCSVString\n    * ExportDataTableToCSVFile\n    * ExportDataTableToJSONString\n    * ExportDataTableToJSONFile\n  * Added ResetEditorProperty to reset a given property back to its archetype value\n\n  * Exposed DataTable column utils to scripting\n\n    * GetDataTableColumnNames to get the raw property name of each column.\n    * GetDataTableColumnNameFromExportName to convert a friendly export name to its raw column name.\n  * Added the ability to wrap a Python object for use as a UPROPERTY on a UCLASS or USTRUCT.\n\n    * PythonObjectHandle allows Python generated types to store arbitrary Python objects as native properties, rather than rely on the lifetime of the Python wrapper object to keep a non-property object reference alive.\n\nBug Fix:\n\n  * Fixed an crash when using the set editor property bp node on a property that might not be compatible with the pinned property type. The function PropertyAccessUtil::ArePropertiesCompatible was not robust enough and would crash in some case like using it to see if we can write a dynamic array to a static array property or the inverse.\n\n  * Updated get/set_editor_property in Python to handle getting/setting the sparse class data for a CDO\n\n  * Fixed Python Nativization failing to validate against an interface class\n\n  * Update utility widgets to mark their child utility widgets as transient recursively. This prevents an issue where the level gets marked dirty by nested utility widgets.\n\n  * Fixed UnpackReturnValues failing to correctly handle a None return value from a Python implemented function\n\n  * Removed a bad assertion in UEditorUtilitySubsystem::RemoveTaskFromActiveList, and updated a similar check in RegisterAndExecuteTask to ensure we avoid duplicate task registration\n\n  * Fixed an issue where the blueprint utility callable function DeleteAsset would fail to delete an asset due to being referenced by FBlueprintActionDatabase.\n\n  * Sparse class data is automatically marked as bIsSparseClassDataSerializable when set from an editor utility - this prevents sparse class data from not being saved after it has been set by a script\n\n#### UI\n\nNew:\n\n  * Exposed 'use sections for categories' bool to the asset picker config - Added identifier to the expanded category (previously None)\n\n  * Enable mobile platform stats in Material Editor by default\n\n  * Made the editor splash screen movable.\n\n  * [Output Log] The \"Settings\" dropdown menu now uses the Tool Menus system under the hood, enabling downstream/contextual customization.\n\n  * Added option to force always compiling materials for mobile in material editor\n\n  * Added Select All/None button for column view right click context menu in the Content Browser\n\n  * Added \"Find References\" to UMG animation right-click menu.\n\n  * Property Editor: Add getting the expansion state for a detail property row.\n\n  * Added a scrollbar to the localization dashboard when there are many localization targets.\n\n  * Property Editor: Remove 0-360 restriction on rotation dragging so that you can drag to negative rotations and beyond 360. The delta is set to 1 (ie. slider rotates by 1 degrees)\n\n  * Exposed RequestForceRefresh for detail customizations to use\n\n    * Using RequestForceRefresh is preferable when the refresh can be deferred, as it can prevent performance problems from refreshing the view multiple times within a single frame\n  * Added single struct property support to the PropertyEditor, through the use of the StructureDataProvider interface.\n\n  * Added support in the category builder for external structure properties, though the use of the StructureDataProvider interface\n\n  * The main menu sub-menus, sections, and entries created by registering tab spawners into the menus can now be given explicit FNames. This allows other code to extend the same menu structure using the ToolMenus system.\n\n  * Improve platform stats and material editor compilation warnings\n\n  * Add a low-level unit test project for the ToolMenus menu system.\n\n  * Added a way to manually grant EditConditionHides behavior to Detail Property Rows that have custom Edit Conditions defined outside of property metadata (e.g. FDetailPropertyRow::EditCondition).\n\nBug Fix:\n\n  * Mac: Fix NSCursor hotSpot logic. Need to use the actual size for the user coordinates instead of the image dimensions. Additionally, the hotspot: expects values from 0,0 -> w-1,h1. When a blueprint node specifies a value where (hotSpot.x/y * Image.pixelW/H) > Image.size.W/H, where hotSpot.x/y is 0...1.0, then no cursor would be displayed.\n\n  * Minor revision to SGraphPanel to decouple its refresh on updates to the underlying graph object from a dependency on a parent SGraphEditor.\n\n    * This allows SGraphPanel widgets that live outside of an editor context (e.g. previews) to avoid node/pin references going stale if the underlying graph object is reconstructed.\n  * CommonUI: Action Domains: Fixed an edge case where action wasn't found if we had multiple action domains.\n\n  * Editor: Fixed Allow Cinematic Control so that it restores properly when you reopen the editor.\n\n  * Improve Class Viewer offset and padding so that it doesn't overlap with other elements\n\n  * Fixed failure to propagate property value changes for floating point values (including structures of floating point values like rotators and transforms)\n\n  * Scene Outliner: Fix crash in folder context menu generation.\n\n  * Color Customization: Fixed transaction not ending when closing the inline color picker.\n\n  * Don't show Level Instance properties on the World Settings\n\n  * Fix image size getting set to random values when applying new materials #okforgitub public\n\n  * Fix a crash that could happen when object references were collected while the menu system was generating a widget using a legacy code path.\n\n  * Fixed comment bubble text input background scaling incorrectly with multiple lines of text.\n\n  * SSubobjectEditor::GetSelectedItemsForContextMenu provides the correct component for inherited SCS components\n\n#### UX\n\nNew:\n\n  * Added binding to create a new Custom Event Node. No binding by default. Similar to pressing C to create a new Comment Node.\n\n  * The level viewport camera info will now get saved when closing the editor. They will be reapplied when the editor is relaunched and the same level is reloaded.\n\n  * Use Microsoft Windows style grey and red hover colors for the minimize, maximize, and close buttons of the editor title bar.\n\n  * ShowOnlyInnerProperties now works on nested structs to show the properties on the innermost struct marked with the specifier.\n\n  * PR #10826: Add delegate in UAssetEditorSubsystem to broadcast when an asset editor is closing #contrib 10826\n\n  * Warn if derived material instances fail to compile in Material Editor\n\n  * Add a viewport action to focus the selected actors in the outliner (to be used with AlwaysFrameSelection off)\n\n  * Add support for searching the collection filter in the Reference Viewer.\n\n  * Change the background color of the editor project badge to match the rest of the title bar.\n\n  * Add a plugin filter to the Reference Viewer. Only plugins that contain assets visible in the unfiltered graph are shown in the list.\n\n  * Outliner: Keep folders selected when changing / clearing search text\n\n  * Reduce vertical space consumed by the title bar and tab areas of editor windows. This includes reducing the height of the minimize, maximize, and close buttons to further pack the interface.\n\n  * In the Level Editor, the Focus Selected command has been moved to the Actor context menu and renamed to Frame Selected. In addition, the View Options menu items now appear in the Actor menu in the main menu bar as well as in the contextual menu.\n\n  * Add bindable viewport camera rotation UI commands\n\n  * Add \"Browse to Asset\" context action to the global asset picker\n\n  * Pasting / Duplicating an actor now moves the new one to the \"Current Folder\" (if it's set)\n\n  * Report issues in base material for shader platforms not covered by current RHI feature levels.\n\n  * Added new keybind that combines Close Minor Tab and Close New Tab. Unbound by default, this keybind will let users press a single key to close the focused tab regardless of its type, prioritizing minor tabs.\n\n  * Make keyboard shortcuts searchable in Editor Settings with the format: KeyBinding=\"F\"\n\n  * Make it possible to move the UE window by dragging with the mouse on the title bar project badge.\n\n  * Property customizations: Added a CreatePropertyValueWidgetWithCustomization API that accounts for customization and thus supports struct properties.\n\n  * UToolMenus: Add API to support Menu Profiles, a menu profile is a lightweight version of a menu customization - but you can have multiple menu profiles and activate/deactivate them at runtime per menu instance using a new menu context.\n\n  * EditorUtilityBlueprintFactory: Modify the class picker to use a TreeView to show classes in hierarchy\n\n  * Most menus in the editor are searchable by typing into them. To make this more obvious, we now show the menu search field by default in menus with 10 or more items. You can change this threshold using a new setting under \"General - Appearance - User Interface\".\n\nBug Fix:\n\n  * PR #11216: Fix Overlapping section name in FMainMRUFavoritesList by allowing an override for the favorites section ini. This fixes a bug where favorite levels were not persisting #contrib 11216\n\n  * Fixed an issue where the modal progress bar (FFeedbackContext) wouldn't get displayed to the user.\n\n  * Updated FNavigationConfig with an option to only send key events if no modifiers are held Updated the EditorNavigationConfig to use this new setting, preventing an issue where the Ctrl+Space content drawer hotkey would be consumed by some widgets\n\n  * Fixing a bug where the checkout error dialog box won't show even though there are packages which failed to checkout.\n\n  * Property Matrix: Fix a bug that stopped search from working in the \"Pinned Columns\" tab\n\n  * Fix crash pressing 'w' or 'e' in material editor to due hidden viewport movement triggering a draw of hidden viewports\n\n  * Tweaked the content drawer behavior so that it gets properly summoned when browsing to an asset from a pinned tab.\n\n  * You can now paste into the Mobility field of the details panel.\n\n  * Property Matrix: Fix a crash when you tried to edit a property on a light component\n\n  * Fix a crash on hovering over the \"transform\" submenu in the light mixer context menu [FYI] Jason.Walter\n\n  * AssetEditorToolkit: Fix a crash when trying to force delete an open DataFlow asset\n\n  * Fix Rotator not shown in degrees by default Math Struct customization [FYI] Andrea.Botti\n\n  * Outliner: Fix a crash in the \"level\" column name selection code when you tried to exit PIE.\n\n### Foundation\n\nNew:\n\n  * Added Experimental Studio Telemetry plugin.\n  * This is fetaure captures telemetry for common Editor workflows and can be extended by the end user to support their own anlaytics backends via an IAnalyticsProvider implmentation exposed from an IAnalyticsProviderModule implmentation. Studio Telemetry is enabled by default and comes with 2 sample Analytics Providers - A Horde Analytics implmentation and a JSON Log file implementation.\n\n  * Added support for the TOptional type to UHT.\n\n  * DDC Http Store - Added ability to configure AuthScheme (defaulting to JWTBearer as before) and the ability to directly specify a auth token. This can be used to run with the ServiceAccount scheme in Cloud DDC which we intend to use for getting onboarded quicker by licensees (it is not a recommended approch to use for wider deployments across teams).\n\n  * Made memory usage print outs in out-of-memory situations use a common unit (GiB)\n\n  * Add support for plain text to FAutomationTestBase::AddExpectedMessage\n\n  * Added missing LLM Tag for AssetRegistry loading\n\n  * Support load and save of platform specific test exclusion list from the Test Automation window\n\n  * Added GetTypeHash to FDynamicallyTypedValue for when used as a key for TMaps.\n\n  * Added FDataRegistryResolverScope::ResolveNameFromId interface that allows specifying temporary local objects instead of having to allocate a shared pointer for every single one. Deprecated the ResolveIdToName overload that returns the resolver as TSharedPtr.\n\n  * Made it so that LLM counters are updated more regularly during cooking (on package load and save)\n\nBug Fix:\n\n  * Fixed that some FName allocations were not using the FName LLM tag\n\n  * OidcToken - Allow multiple instances of oidc token to read the windows token store at the same time, and prevent updating the token store file if there are no changes applied to it. Reduced the scope the mutex to only cover the updating of the token store.\n\n  * OidcToken Create output directory for temp file if its missing Corrected logic for tokens that do not expire (they are set to expire at 0 which we didn't treat correctly) * Make sure to save the new refresh token we get after using a old one, resolves issues for horde.exe that had to prompt users for logins more often then it should need to.\n\n  * Prevent the server from sending the server-only-option of ?listen when doing a Client Travel. This will prevent the client from incorrectly thinking it's a listen server during travel.\n\n  * OidcToken - Removed special case handling of chrome and edge as this causes issue when spawned from Visual Studio\n\n  * OidcToken - Allow you to only specify the list of redirect uris instead of both that and the single redirect uri\n\n  * Moved FUntilDoneLatentCommand Predicate call to be able to: - Done() correctly - Be able to call Predicate multiple times on FUntilDoneLatentCommand::Update().\n\n  * Fixed crash in SQLite when the current malloc doesn't support FMemory::GetAllocSize.\n\n  * OidcToken - Allow for allocating of an access token without a identity token, we never actually used the IdentityToken and allowing to get a access token without it allows us to sidestep issues with some IdPs only providing thin tokens when you request both identity and access tokens at the same time.\n\n  * OidcToken - Added timeout option (defaults to 20 minutes) were if the user hasn't logged in the opened browser for this time we just shutdown with a error, this prevents zombie processes from sticking around at the risk of users coming back after this timeout and trying to login to the popuped browser and getting a 404 (as the local webserver will have shutdown).\n\n#### Build\n\nNew:\n\n  * UGS: We no longer download a precompiled binary if we have just downloaded that exact binary.\n\n  * Adding SplitFirst and SplitLast StringOps to BuildGraph, which return the first and last element (respectively) of the split input string.\n\n  * Modified UBT to generate more detailed information when the compiler crashes.\n\n  * Added KeepFileOpenLog option to build targets so that you can optionally skip -fileopenlog during cooks to save memory\n\n  * Support live coding when the BaseDir is != than the Executable path\n\n  * Added a warning if a project module is found to have a dependency on a plugin module without listing that plugin as a dependency. The plugin has to be enabled by default or enabled in the .uproject or enabled in the target.cs\n\n  * Support for game projects overriding how to copy files during staging. A CustomStageCopyHandler can be implemented to supply the copy operation\n\n  * TargetRules can filter referenced plugins to determine if it should be ignored from the build.\n\n  * Added support for -fextend-lifetimes compilation switch on selected Clang-based platforms which improves debugging experience of optimized builds by increasing the number of local variables for which the debugger can show values. The feature may slightly reduce performance and is intended to be used in development only. It has to be explicitly activated by setting bOptimizeForDebugging variable in Platform section of BuildConfiguration.xml. It won't affect Test or Shipping configurations.\n\n  * UGS: Change the default UGS build config from DebugGame to Development. Only affects new UGS installs.\n\n  * Extending ICustomStageCopyHandler to support overriding of the plugin manifest file creation. Allows game projects to have control over how plugin descriptors are added to the manifest\n\n  * Intel\u00ae Implicit SPMD Program Compiler (ISPC) has been updated to version 1.21.0.\n\n  * UGS: Improve the performance of the \"Finding last code change...\" step in the sync.\n\n  * Add \"-FORCEUPDATEALL\" option to update .vcxproj.user files during project generation\n\n  * Fixed -SkipEncryption not skipping encryption of PAK files\n\nBug Fix:\n\n  * Fixed source indexing on Windows-based platforms generating incorrect paths for workspaces using the 'import' functionality on Perforce.\n\n  * Fixed issue where UBT would fail with a concurrency error when doing log once logging.\n\n  * UBT: Fix for MakeStubItems with Circular Deps.\n\n  * Fix a problem with path determination during chunked DLC builds\n\n  * Outputting the plugin filename with Json parse exceptions\n\n  * Fix UBT to enable hot reload modules for engine only builds. This is done so that live coding checks still work when building from P4V or other tools that might not specify a project file.\n\n  * Objects referenced only by soft path literals will be correclty included in packaged games when using CookSettings.SkipOnlyEditorOnly\n\nDeprecated:\n\n  * Prevent future inclusion of MinWindows.h, PreWindowsApi.h and PostWindowsApi.h via header guard warning. - use WindowsHWrapper.h, AllowWindowsPlatformTypes.h and HideWindowsPlatformTypes.h instead.\n\n#### Compile Time Improvements\n\nNew:\n\n  * UBA: Handle the scenario where files may be spread across mounts and linking won't work. When this happens fall back to copying/sendfile-ing files around.\n\n  * UBA: Fix bus error on Intel Macs due to a stacksize limit\n\n  * UBA: Add support for CPU time for MacOS using mach messages.\n\n  * UBA: Fix for UbaAgents waiting for host now that poll is used.\n\nBug Fix:\n\n  * UBA: Fixes various small bugs.\n\n  * UBA: Fix up tests on Mac. * Need to grab the actual clang binary location and the SDK path.\n\n  * UBA: Close fds when done with polling to stop leaking on MacOS.\n\n  * UBA: Fix for populateCasFromXcode.\n\n  * UBA: Bump cmdline limit to 64k\n\n  * UBA: Add if some defs around POLLUP for platform differences\n\n  * UBA: Additional changes for Mac support. Fixes an issue with socket closing Adds support for getting number of procs.\n\n  * UBA: Remove Touch test from Mac running.\n\n  * UBA: Address issue of agents quitting instead of waiting to connect to host.\n\n  * UBA: Various fixes for POSIX APIs. Checking returns a bit better Handling \"/\" in a friendly way since realpath calls stat with \"/\" Hooks up lockFd so we don't accidently close fd1 and fd2 (aka stdout/stderr) MacOS doesn't have subreaper so implement another way using sysctl\n\n  * UBA: Clean up thread attrs after creating the thread.\n\n#### Core\n\nAPI Change:\n\n  * Enable it via GlobalDefinitions.Add(\"UE_STORE_OBJECT_LIST_INTERNAL_INDEX=1\") in your Target.cs. This functionality requires enabling 4 bytes wide FName (can be enabled by setting bFNameOutlineNumber to true in Target.cs) as it takes advantage of the padding in the UObjectBase memory layout.\n\n  * UObject::CollectDefaultSubobjects was deprecated for being redundant and incorrect and the comments were updated on IsDefaultSubobject to document the confusing behavior. Most of the time it is better to use a different function like IsTemplate or the new IsTemplateForSubobjects\n\n  * Depending on a compiler this change may introduce compilation errors when passing TObjectPtr variables to UE_LOG macros in which case the raw UObject pointer needs to be extracted with TObjectPtr::Get() function:\n\n    * TObjectPtr ObjPtr; UE_LOG(LogTemp, Log, TEXT(\"UObject pointer: 0x%x\"), ObjPtr.Get());\n    * Some C++ compilers may also fail to compile foreach loop statements when iterating over an array of TObjectPtrs where the elemental variable declaration is a const value type of TObjectPtr (const TObjectPtr Value). In this case the elemental variable declaration needs to be converted to a reference type:\n    * TArray> ArrayOfObjectPtrs; for (const TObjectPtr& Value: ArrayOfObjectPtrs)\n  * This information is always available at runtime via the BuildSettings module regardless of being embedded in the binaries.\n\nNew:\n\n  * Sponsor mode in UnrealTraceServer Adds new \"sponsored\" mode of running the server, in addition to regular \"persistent\" mode. In this mode the server must be started with a parent pid. Additional pids can be added. When all sponsor processes have exited and there are no active connections the server will exit. Controlling which mode the server runs in can be done in Unreal Insights or via the Trace Widget in Unreal Editor. Command line options and command parsing has also been refactored and is now parsed and passed to all main functions. Command line help is also added.\n\n  * Update VTune library to latest 2023 release.\n\n  * Replaced versioning implementation in FInstancedStruct to use archive custom versioning. Also make serialization symmetrical so struct serialized in cooked builds can be deserialized in Editor builds.\n\n  * Added new static StringType::Construct* functions to replace the dubious set of string constructors whose behavior aren't obvious - the old form of constructor are not yet deprecated for FString but are for FUtf8String and FAnsiString.\n\n  * Added TIsTArrayView_V as a more efficient alternative to TIsTArrayView::Value.\n\n  * Fix EUnitType::DataSize quantization factor to 1024 instead of 1000. The data size units are treated as KiB, MiB, GiB etc\n\n  * Added another operator+ for FAsciiSet to allow for combining sets\n\n  * Added a family of string splitting functions as UE::String::Split(First|Last)[OfAny][Char].\n\n  * Add additional macros for getting enum/member/function names as string views. Required for using in a compile time context.\n  * Add missing macro for getting enum name as a string, to match the existing macros for member and function names.\n\n  * Made LexToString more generic by providing a string type as an optional template parameter.\n\n  * UnrealBuildTool: Setting to control print level of PVS-Studio analyzer warnings (-StaticAnalyzerPVSPrintLevel)\n\n  * Update TFuture/TSharedFuture to work with non-copyable types.\n\n  * The debug name provided for the DDC requests has been modified to append a \"[Fast]\" and/or \"[Meta]\" tag to make DDC logs clearer as to what key is being requested and hit/missed.\n\n  * Improve DataTable errors to help diagnostic between mising struct and not yet deserialized error\n\n  * Added FunctionFwd.h for the forward declarations of types defined in Function.h.\n\n  * Added functions to CompositeDataTable for adding and removing individual Parent Tables as well as removing an array of Parent Tables.\n\n  * Extended TArray bulk serialization to all arithmetic types.\n\n  * PR #11054: [PVS-Studio] Add new PVS-Studio.exe silent exit code mode. #contrib 11054\n\n  * Added floating point unit tests for FMath::Wrap. Added a new FMath::Modulo which generically encapsulates integral/float differences.\n\n  * Moved TUseBitwiseSwap into its own header.\n\n  * AsyncCompilationHelper - Remove 16ms main thread sleep that happens per incomplete task and instead favours polling all tasks and sleeping once if not all tasks are complete. ICompilable WaitCompletionWithTimeout () method is now documented to poll if given a 0 TimeLimitSeconds. To adjust for this, implementers of ICompilable will now poll if TimeLimitSeconds is 0 before waiting. There are a few implementers that don't use an event and sleep which is not ideal, but we at least now poll again after sleeping to avoid another round trip to know if the task is complete. FAsyncTaskBase::WaitCompletionWithTimeout now polls for completion when given a time limit of 0 seconds. This simplifies use, and avoids unintended yielding. Before PIE.Startup FAsyncTask::SyncCompletion Total Inclusive Time 5.25s (40606 calls) After PIE.Startup FAsyncTask::SyncCompletion Total Inclusive Time 195ms (39504 calls)\n\n  * checkf and ensureMsgf will now validate the printf parameters when UE_VALIDATE_FORMAT_STRINGS is defined. FormatStringSan::bIsIntegralEnum now properly detects TEnumAsByte as enum types.\n\n  * Added FAnsiString and FUtf8String.\n\n  * Replaced loop with modulo in FMath::Wrap to make it run in constant time. Added some tests that would have failed with the previous implementation due to lack of floating point precision. Added some constexpr tests, though only the integer tests can be supported before C++23.\n\n  * Added TRefCountingMixin to provide AutoRTFM aware ref-counting for use with TRefCountPtr\n\n  * UnrealBuildTool: Option to disable anaylzing engine modules or generated code\n\n  * PR #10774: Add target rule for ALLOW_CONSOLE_IN_SHIPPING define #contrib 10774\n\n  * Add config file options so that the virtualization system is able to retry pulling failed payloads when running in unattended mode (defaults to off)\n\n  * Support emitting line tables only for debugging rather than disabling debug info entirely Configuration is the same as TargetRules.DebugInfo and will override that setting except when debug info is disabled for the entire target\n\n  * Eliminated most blocking during requests in the Cloud DDC\n\n  * Increase the maximum possible size of TInlineValue\n\n  * Read the environment variable UE_LOG_JSON_TO_STDOUT to enable structured logging on stdout for consistency with other tools\n\n  * Adding an LLM console command to associate allocations with their underlying page allocation in Unix to classify them as shared/private/unreferenced. This also fixes the old smaps parser to not incorrectly bail before EOF if fewer bytes were provided than asked for as that's an allowable condition.\n\n  * Added CHARTEXT(CharType, x) which expands out to x, TEXT(x) or UTF8TEXT(x) depending on CharType.\n\n  * Intel ICX 2024.0 integration plus instrumented/sampled PGO support (via Jeff.Rous)\n\n  * Added PREPROCESSOR_VA_ARG_COUNT(...) and PREPROCESSOR_APPEND_VA_ARG_COUNT(Prefix, ...) macros, which evaluate to the number of arguments passed to it and a token made by appending a prefix to the count respectively.\n\n  * Avoid unecessary copies of FStreamableDelegate within FStreamableManager. + Added an overload of FStreamableHandle::ExecuteDelegate that takes the FStreamableDelegates by rvalue. This code path will continue to pass the delegates along by rvalue to avoid copies. + Fixed up multiple call sites where copies were being done and replaced with moves.\n\n  * Improved plugin manager exclusion support when using -EnableAllPlugins\n\n    * Added -ExceptRestrictedPlugins to allow you to exclude any restricted plugins\n    * Added wildcard support to -ExceptPlugins (and -EnablePlugins and -DisablePlugins) so you can do something like -ExceptPlugins=\"Online*\"\n  * Cache the 'NotExcluded' state alongside 'Excluded' and 'Included' to prevent excessive query ConditionallyExcludeObjectForRealm on deeply nested object graph with a lot of public leaves\n\n  * BuildSettingsVersion.V4 enable msvc strict conformance mode by default\n\n  * JsonObject, JsonWriter and JsonSerializerMacros updated to use FStringViews and FString to avoid unnecessary allocations.\n\n  * Add IsValidIndex function to TPagedArray for parity with other containers.\n\n  * Added the ability to delay reachability analysis interations by the specified number of frames (with gc.DelayReachabilityIterations console variable) to stress test garbage collector write barrier in TObjectPtr.\n\n  * TArray::Append now consistently uses a 'grow' instead of 'reserve' memory growth strategy, so it has amortized linear cost to call many Append()s in a loop for all versions of the function. (Previously it inconsistently used either strategy depending on how it was called.)\n\n  * Added FPackageName::GetVersePath as a shared util for UObjectBaseUtility and FAssetData\n\n  * Add FindFrom function to TBitArray, to allow a user to provide a start index when searching for a value.\n\n  * Added a scoped override for FMessageLog behavior\n\n    * FMessageLogScopedOverride can override the log behavior of a given named FMessageLog for the duration of the overrides lifetime, optionally suppressing output log mirroring, or promoting/demoting log categories (eg, to make errors act as warnings, or warnings act as errors).\n  * Add a control widget in Unreal Insights and Trace widget in Unreal Editor to control the local UnrealTraceServer instance.\n\n  * UScriptStruct::ImportText is now const-correct\n\n  * Added verification tests to make sure there's no unreachable objects still being referenced by reachable objects after garbage collector's reachability analysis has completed (enabled with gc.VerifyNoUnreachable console variable)\n\n  * Added StrCast as a long-term replacement for StringCast, because of the latter's behavior with regards to mid-string zeros, and used it to fix FString serialization when it contains a trailing zero.\n\n  * Add floating point append operators to FStringBuilderBase. Uses the same format specifiers as LexToString does (via TFormatSpecifier in UnrealTypeTraits.h)\n\n  * Add an overload to the FindRef method of TMap and TSortedMap that take a fallback default value\n\n  * Improve LinkerLoad instancing context population to catch object in external package outered to object in instanced packages\n\n  * Add overload of TryConvertFilenameToLongPackageName using FStringView and FStringBuilderBase\n\n  * StaticDuplicateObject now uses unversioned property serialization, improving the performance of object duplication\n\n  * Reduced book keeping memory in FMallocBinned3\n\n  * Serialize complete property type names with tagged property serialization to support more robust asset loading when the type schema changes.\n\n  * UObject::GetAssetRegistryTags changed its function prototype to take a Context object that reports whether the call is coming from SavePackage (and should calculate everything) or load (and should skip expensive tags). This new Context object allows Engine classes and Licensee classes to report different tags for the three scenarios of editorsaves, cooksaves, and dynamic on-load updates.\n\n  * Added support for up to 128 bytes alignment in the FMallocBinned2 for small bins allocations. Previously allocations with alignment higher than 16 would be treated as OS allocations and would be multiple of a memory page size (4KB)\n\n  * Added FThreadManager::ForEachThreadStackBackTrace for retrieving callstacks without incurring additional allocations (which will be used to avoid failing to allocate memory while crashing out of memory).\n\n  * LLM: Added \"-Assets\" and \"-AssetClasses\" params for the \"DumpLLM\" console command. This will dump the respective tag sets (instead of default tag set). Requires LLM_ALLOW_ASSETS_TAGS and game/editor to be started with \"-llm -llmtagsets=Assets,AssetClasses\" in command line.\n\n  * Make AssetFails, AssetWarning and AssetPasses functions use const object parameters\n\n  * Added an option to replace a hash map in the ClassToObjectListMap (a part of UObjectHash) with an array. This will improve lookups and reduce memory footprint.\n\n  * Add CVar, core.EnsureAlwaysEnabled, to allow disabling of ensureAlways and treat them as regular ensure instead\n\n  * Load additional BuildConfiguration.xml files from ProgramData & LocalAppData\n\n  * Add TBitArray range-based for loop support\n\n  * Added multi-process support to the saving of Derived Data Cache (DDC) replays\n\n  * Adds missing GetId() member from TSet::TBaseKeyIterator. Without this implementation, it's not possible to use GetId() on TMap::TKeyIterators/TConstKeyIterators This missing implementation is specifically helpful for cases where you'd like to find the KV Pair ElementType for a given KeyArgumentType in cases where you may have collisions between keys and the actual KeyArgumentType value is important. Example case is when dealing with FNames in Editor since they compare on case-insensitive CompareIds but have unique DisplayIds for different casing. If you want to know the casing used when inserted into a map, you can now do the following: TMap<FName, FAssetPackageData*>::TConstKeyIterator It = CachedPackageData.CreateConstKeyIterator(PackageFNameOfAnyCase); FSetElementId Id = It.GetId(); if (!Id.IsValidId()) { return nullptr; } const TPair<FName, FAssetPackageData*> KVPair = CachedPackageData.Get(Id); FName PackageNameWithCasingUsedUponInsertion = KVPair.Key; return KVPair.Value;\n\n  * Removed some unused includes in coreminimal.h and color.h from stat.h.\n\n  * Make Linux/Mac use editor version of crash reporter when compiled with WITH_EDITOR.\n\n  * Added support for multi-line entries on config set properties. Existing config values for set properties should continue to be loaded the same way as before. Example syntax: SetProperty=(\"Value1\", \"Value2\") +SetProperty=\"Value3\" +SetProperty=(\"Value4\", \"Value5\")\n\n  * Oodle Data, Network and Texture updated to 2.9.12\n\n  * Add GetFNameSafe functions for UObject and FField. These complement the existing GetNameSafe functions.\n\n  * Update FInterpCurve::FindNearestOnSegment to avoid allocating TFunctions.\n\n  * Added a constructor to FMutex to acquire the lock upon construction\n\n  * Set UE_VALIDATE_INTERNAL_API to control the define UE_INTERNAL which will be set to an empty macro for Engine modules and [[deprecated]] for non-engine modules\n\n  * Allowed casting functions like MoveTemp and Forward to be elided and replaced with direct casts.\n\n  * Add support for /PDBSTRIPPED msvc symbols with -StripPrivateSymbols\n\n  * Add new IsTemplateForSubobjects function that correctly handles querying for all types of subobject templates and improve related comments\n\n  * Cooker: SkipOnlyEditorOnly. This flag is now on by default, and not using it will eventually be deprecated. Packages that are loaded during the cook for editoronly reasons are no longer automatically added to the cook output; they will only be added to the cook if referenced from a cooked package, or via a few other possible methods. *If SkipOnlyEditorOnly causes a problem, and it is not obvious how to fix it, turn it back off again by editing DefaultEditor.ini:[CookSettings]:bSkipOnlyEditorOnly=false, and please send a UDN asking for help in fixing the issue.\n\n  * Assigning a value or copy-constructing TObjectPtr will now run garbage collector write barrier when incremental reachability analysis (garbage collection) is in progress. This means TObjectPtr is no longer trivially constructible and assignable.\n\n  * Scheduler improvements and bug fixes\n\n  * FHarvestedRealm::NameExists changed to consume const FName& rather than FNameEntryId as it leaked the internal storage details for export names of the realm into the API. Since we only store display names in the realm, we can directly compare FNames using display names when verifying we saved correctly. 114ms -> 3ms for SaveContext_NameExists over 71,680 calls\n\n  * Memory-optimized custom IOStore hash map - 65.7 -> 25.9MB for internal project on Gen5 console\n\n  * Replaced many UE traits with standard traits and metaprogramming constructs with simpler and faster-to-compile constructs.\n\n  * Add support to set NTDDI_VERSION with WindowsPlatform.TargetWindowsMinorVersion\n\n  * Added nodiscard to the constructors of TGuardValue, TOptionalGuardValue, TGuardValue_Bitfield_Cleanup and TScopeCounter.\n\n  * PR #11383: Project Generator for Visual Studio Workspace support #contrib 11383\n\n  * Added fallback to standard stack walking for memory tracing for Windows. In some cases our unwinding tables approach didn't work (e.g. when compiled with clang). In those cases fall back to the standard stack walking methods.\n\n  * Add msvc 14.39.x to preferred msvc toolchains\n\n  * UnrealPak: Replace check with warning for missing import Script Object in IoStore describe\n\n  * Version 1.20 of UnrealTraceServer for Windows, Linux and macOS.\n\n  * Added support for incremental Gather Unreachable Objects (post reachability analysis phase of garbage collection). It's now possible to split this phase into multiple frames to avoid hitches on slow or single-threaded platforms.\n\n  * Significantly improved performance of marking objects as unreachable (initial phase of garbage collection) when running in single-threaded environments.\n\n  * Add support for universal binaries for UnrealTraceServer.\n\n  * Added experimental support for incremental reachability analysis (a phase of garbage collection that determines which objects are to be destroyed). It's now possible to split reachability analysis into multiple frames with the specified per-frame soft time limit.\n\n  * Exposed metadata more extensively in the Derived Data Build API\n\n  * Bump preferred MSVC compiler to 14.38.33130 - VS2022 17.8\n\n  * Allow applications to limit the total number of worker threads used by TaskGraph at compile time using UE_TASKGRAPH_THREAD_LIMIT.\n\n  * UPackage->Guid deprecated and replaced by UPackage->GetSavedHash.\n\n    * FPackageSummary::Guid deprecated and replaced by FPackageSummary::GetSavedHash. FAssetPackageData::PackageGuid deprecated and replaced by GetPackageSavedHash. UPackage->Guid has been marked deprecated for a while; we will remove it in 5.5. The new SavedHash API is only available in the editor; in the cooked game we are removing UPackage->Guid with no replacement because it is unnecessary and costs memory. GetSavedHash currently just returns the old deprecated Guid, but in 5.5 it will change to instead return a hash of the package's bytes that were saved to disk.\n  * The content browser tool tip property \"Has Virtualized Data\" is now only displayed if a project has enabled virtualized assets.\n\n  * PR #11565: Added a new format of the analyzer report #contrib 11565\n\n  * Add a few commands to the command console autocomplete list: obj gc, obj dump, debug crash, debug rendercrash and extended obj refs\n\n  * Moved some FString default arguments out of some headers to allow them to be compiled with only a forward-declaration of FString.\n\n  * Removed NetworkVersion.h from Vector2D.h.\n\n  * Save and ResetLoaders only flush loading requests specific to the package when there's already pending async requests\n\nBug Fix:\n\n  * PR #10682: When linking msvc platforms with clang pass -gcodeview-ghash with -Xclang #contrib 10682\n\n  * Ensured that the primary TIsContiguousContainer trait isn't instantiated with an incomplete type and so memoized into a bad state. Added a specialization for unbounded array types, which are not regarded as contiguous containers because they don't have an determinable end.\n\n  * PR #11411: Fixes for Rider project file generator #contrib 11411\n\n  * Made UE_DEPRECATED_MACRO emit errors in MSVC when bWarningsAsErrors=true.\n\n  * Fix warning \"Failed to find object 'Object None.None'\" when deserializing FObjectAndNameAsStringProxyArchive. This should also speed up loading a buffer with a lot of NULL objects considerably\n\n  * PR #11261: Fixed missing toolchain include paths on Linux #contrib 11261\n\n  * PR #10515: Add architecture info to Rider project files #contrib 10515\n\n  * PR #11163: Expose additional project properties from UBT to Rider #contrib 11163\n\n  * Move clearing of dirty flag and file size update out of InnerSave This allows delegate broadcast for dirty state update to happen out \"IsSavingPackage\" scope\n\n  * Support UE versionning in FMovieSceneEventParameters\n\n  * Add setting to control disabling some debug info optimizations when compiling msvc platforms with clang that can in some cases cause missing debug information\n\n  * Added checks to ensure that users cannot emplace intrusive unset values into TOptionals.\n\n  * PR #10511: Fix rsca for toolbox 2 0 #contrib 10511\n\n  * Fix trace in \"no logging\" configurations\n\n  * PR #10594: Add list of subrules files to generated Rider project files. #contrib 10594\n\n  * PR #11227: Fixed missing system include paths on macOS #contrib 11227\n\n  * Improve comments related to Interfaces to match the actual behavior for blueprint-implemented interfaces. The public documentation for Interfaces has also been improved to explain that blueprint-implemented interfaces do not actually exist in the C++ representation of an object\n\n  * Ensure UnrealBuildTool.dll exists when cleaning projects in installed builds\n\n  * Invalidate makefile if a header only directory is added or removed\n\n  * Fixed TreatWarningsAsErrors not affecting the verbosity of the underlying log, and added TreatErrorsAsWarnings\n\n  * Properties that aren't going to be serialized are no longer considered when determining whether Sparse Class Data should be written out\n\n  * Fix socket keep alive in UnrealTraceServer for Mac/Linux.\n\n  * Cooker: Improve error message: Change \"was never saved as an export\" message into clearer text \"content is missing from cook\", and add feedback for why it is missing from the cook.\n\n  * Allow _DEPRECATED properties in sparse class data to not be marked as VisibleDefaultsOnly or EditDefaultsOnly\n\n  * Fixed the root node's children not being properly unset during TOctree2::ApplyOffset.\n\n  * PR #10946: [Rider] Fix IntelliSense by adding include order deprecation defines #contrib 10946\n\n  * BootstrapPackagedGame: Allow skipping the prereq installer if the required dependencies are bundled with the application\n\n  * Enable tracing of \"CustomTag\" when FName based tags are disabled.\n\n  * Fixed assert firing in the destructor of FArchiveFromStructuredArchiveImpl caused by FMulticastSparseDelegateProperty::SerializeItem() not closing an archive adapter.\n\n  * Fix issue with C# JsonWriter to support characters the should be escaped in a value name.\n\n  * Fixed move semantics in TFrameValue.\n\n  * PR #10731: UnrealBuildTool: fix GenerateClangDatabase #contrib 10731\n\n  * PR #11345: Fix for rebuilding whole Unreal Engine sources in Rider #contrib 11345\n\n  * Filter unmounted packages when querying a cooked asset registry in the editor\n\n    * This provides a consistent experience between the cooked and uncooked asset registry\n  * Fixing a crash when an empty string is passed to CompareWithNumericSuffix\n\n  * Cooker: AdditionalPluginDirectories: Fix staging to look in the RemappedPlugins directory when cooking DLC plugins that are in AdditionalPluginDirectories. Fix cooker to store all metadata in the RemappedPlugins. Fix cooker for even normal DLCs to store all metadata in the DLC's directory rather than the project's directory.\n\n  * Make sure objects preloaded during the async deferred post load step of the legacy loader adds them to the list of objects it tracked\n\n  * Fixed some TArrays of C arrays, which was never supported and only partially worked.\n\n  * Added a fatal error if the DDC is not readable or writable\n\n  * Ensure FileInlineGenCPPMap is set for the module compile environment\n\n  * Updated NoExportTypes.h to add missing entries to EUnit, and to correct the order of units that were already there. This fixes some serialization issues.\n\n  * Exit the game in PreInit on Windows when an unsupported CPU is found rather than wait for an unsupported instruction exception.\n\n  * Fixed creation of DDC stats when using a throttle node\n\n  * CborStructSerialalizerBackend fixes for FSoftClassProperty. Serialize it like FSoftObjectProperty, where the path can be valid even if the object reference isn't.\n\n  * ConcurrentLinearAllocator: Allow not FastPath platforms to allocate blocks with supported alignment. Currently Malloc will fail on such platforms, because not all platforms support 64kb alignment.\n\n  * Correctly add project source dir to include path when building a generic target (UnrealEditor, UnrealGame) with a -Project\n\n  * Fix not selecting the preferred WindowsSDK if it is available when a supported version min or max is also requested\n\n  * Remove some redundant check()s from TArrayView constructors, in particular when copying from other TArrayViews.\n\n  * Fix TMatrix2x2 rotation constructor. Use TQuat2 instead of FQuat2D.\n\n  * Fix to ArchiveCrc32 operator<<(FArchive&) template generalization for structs to only apply for direct serialization to ArchiveCrc32 and if there is no better conversion available.\n\n  * Fixed AsArray and AsObject in CompactBinary to store type errors\n\n  * Fixed TBitsToSizeType's static assert, which would only fire if passed zero.\n\n  * Fixed TScriptInterface's implicit conversions.\n\n  * Fixed reporting of container property names when logging references to objects.\n\n  * Fix a bug where loading a bulkdata payload from a cooked package mounted in the IoStore could end up loading more data off disk than required.\n\n  * Replaced explicit memmoves with RelocateConstructItems inside TArray. Optimized some repeated rereads of unchanged data mid-loop.\n\n  * Workaround for a VC bug: When inlining, VC works to avoid the load->store forwarding stall but loses track of things and inadvertently ends up requiring alignment on temps it creates causing semi random crashes depending on whether the allocator/stack decided to align them. The fix is to switch to directly setting the values.\n\n  * Fixed TSparseArray::operator() indexing usage in its TConstSubsetIterator.\n\n  * Made the JsonArchive structured formatters non-copyable so that their useless copy and move consturctors don't show up in IntelliSense.\n\n  * PR #10620: Make sure BuildU[A|B]T.bat explicitly call the Windows find.exe utility #contrib 10620\n\n  * Fixed an issue where the engine might query the asset registry before the premade asset registry had finished loading.\n\n  * Fix for FString::ParseIntoArray when string to parse has a length of 0, but still has backing memory\n\n  * Fixed FLinkerInstancedPackageMap::BuildPackageMapping to be case insensitive - Added optional SearchCase parameter to TStringView<>::Contains and TStringView<>::Find defaulted to ESearchCase::CaseSensitive for backward compatibility\n\n  * FStructUtils::AreSameLayout now returns true for nullptr, nullptr - importantly this fixes comparison of class layouts when the class does not have any sparse class data\n\n  * Support Intel compiler 2024.1\n\n  * Fixed default initialization of TLS slots to 0 across the engine. 0 is a valid TLS slot and some slots could have been tested against 0 to detect their validity leading to a TLS slot leak at best\n\n  * Fixed some unreachable code errors.\n\n  * Fixing single entry set properties not being saved correctly in some cases. Making UObject::SaveConfig fall back to the default non-specialized behavior if a set property has one or fewer elements to match the load behavior\n\n  * Enables SymsLib resolver in TraceAnalysis for Mac and Linux.\n\n  * PR #11563: UnrealVS: Prefix encrypted Perforce server port address with \"ssl:\" #contrib 11563\n\n  * Added FArchiveFromStructuredArchiveImpl::operator<< overload for FObjectPtr which fixes a crash when serializing TSubclassOf.\n\n  * Fixed TStaticBitArray::operator== const incorrectness and implicit conversions, which caused operator!= not to used but to construct a temporary and compare that instead. Added TStaticBitArray::HasAnyBitsSet().\n\n  * MpscQueue - Fix for dequeuing move only types.\n\n  * Fix double redirector not properly resolving themselves in some loading order edge case\n\n  * Fix compile single file for external projects & show additional target.cs files\n\n  * Fix UnrealTraceServer timestamps on Linux.\n\n  * EX_Let handles attempted assignments to null objects when the property has a setter\n\n  * Fixed uninitialized variable in FInterpCurve::FindNearestOnSegment() when BreakBeforeEvaluate() returns true on the first iteration.\n\n  * Account for complete trace event fitting in the buffer for scoped events. Previously Header and event body could end up in different buffers, causing incorrect data.\n\n  * Fix compile error caused by an uninitialised const \"Unit\" member in FNumericUnit when initialising from another unit type.\n\n  * MB2 Allocator optimizations. - Removed extra page allocation for VMA pool header. - Added VMA pool stats reporting. - Removed extra lock per pool (was not used). - Scale factor parameter is configurable via compile-time definition.\n\n  * Removed FAnsiStringView overload for HexToBytes, because it's already handled by the UTF-8 overload and causes ambiguous overload resolution.\n\n  * Fix HTML formatting for FPSChart\n\n  * Fixed a potential race condition in the object annotation system\n\n  * Allow traced log messages to be longer than 1500 characters.\n\n  * Fixed a crash when a boot cache is present in the DDC configuration\n\n  * Prevent unnecessary rebuilds of windows resource files for development builds to reduce how often binaries relink Only embed info from Build.version in exes and dlls for precompiled or shipping targets. Set default windows resource ProductVersion to ENGINE_VERSION_STRING if BUILD_VERSION is not defined\n\n  * Fixed a crash caused by trying to re-construct a template on top of itself when creating non-nullable object property default value.\n\n  * Fixed undefined behavior in ManualResetEvent\n\n  * PR #11342: Use integrated terminal for VSCode #contrib 11342\n\n  * PR #11012: Makefile generator is now platform agnostic #contrib 11012\n\n  * Fix UnrealTraceServer directory listening for Linux. The file notification api was not told to listen to renames.\n\n  * Don't allow using a separate UnrealIntermediateEnvironment folder for installed engine as the intermediate path needs to always match\n\n  * PR #10781: Apply buildconfiguration.xml to SNDBS class #contrib 10781\n\n  * Renamed TArrayView's private namespace to match standards.\n\n  * Fixed TWeakFieldPtr asserting with \"const T\" template parameters.\n\n  * Fix broken file extension filter in FWindowsPlatformProcess::AddDllDirectory to restore the Windows dll directory cache optimization that helps with boot times on Windows.\n\n  * PR #10683: Fix linking Shipping msvc platforms with lld-link #contrib 10683\n\n  * -Mode=GenerateClangDatabase should use clang by default as the compiler\n\nDeprecated:\n\n  * Deprecated TChooseClass.\n\n  * Deprecate GetCurrentTag/InvalidateTag and remove all calls as the feature was unreliable and is no longer used by TSoftObjectPtr\n\n  * Added EAllowShrinking as a better replacement for bAllowShrinking parameters on containers, and deprecated the bool overloads.\n\n  * Remove Visual Studio 2019 support\n\n  * Removed PLATFORM_COMPILER_HAS_IF_CONSTEXPR. Deprecated CONSTEXPR, PLATFORM_COMPILER_HAS_DECLTYPE_AUTO, PLATFORM_COMPILER_HAS_FOLD_EXPRESSIONS and UE_NORETURN.\n\n  * Removed the UE_LOG_JSON global mutex on Windows that enabled structured debug output. Integration with other tools can rely on the -JsonDebugOutput command line argument.\n\n  * Remove defunct HybridExecutor\n\n  * Deprecated GET_VARARGS macros and replaced them with GET_TYPED_VARARGS.\n\n#### Dev Tools\n\nNew:\n\n  * Allow enabling/disabling LiveCoding via command line switch -LiveCoding=true|false\n\n  * Removed the more trivial C++ UHT compatibility shims in the code generator.\n\n  * Configure multiple MemReport profiles with ini sections. Use \"File\" command array which outputs each command into separate file.\n\n  * Cleaned up code generated by UHT. This includes general formatting issues and organization.\n\n  * A define ENABLE_ARRAY_SLACK_TRACKING was added to ContainerAllocationPolicies.h, which enables a SlackReport console command which generates a detailed report on array slack (unused elements in TArray containers). Useful when looking for memory savings where arrays can be more accurately sized or trimmed to size.\n\n    * Reports are generated as TSV (tab separated value) files in Shared/Logs/SlackReport, which can be loaded into a spreadsheet program. A filename can be specified, or a default one with an incrementing index will be used. Parameter -Stack=N (maximum 9) allows adjusting the stack frame depth -- setting a lower value can coalesce instances of the same allocation from slightly different call stacks.\n  * MemReport now can write command's output into separate csv files for commands specified in Engine.ini in [MemReportCsvCommands] section.\n\n  * UHT data in generated code now uses constexpr where possible.\n\n  * Removed the MODULENAME_API from the private copy constructor definition generated by UHT.\n\n  * CsvProfiler - Add end capture timestamp to the csv metadata. This allows easily calculating capture duration by checking the delta between StartTimestamp and the new EndTimestamp. This is much faster than trying to calculate the duration by looking at all the frame times.\n\n  * PluginReferenceViewer - Added a context menu item that launches the asset reference viewer showing the asset references across plugins.\n\n  * Added more auxilary information to some trace scopes:\n\n    * AsyncLoading package names when LoadTime channel is activated.\n    * GameFeaturePlugin statemachine name during transitions.\n    * Scope GC incremental analysis and purge destroyed under one trace region\n  * [MemoryTrace] Covered more allocations with asset metadata scopes - Added package/object/class metadata for Iris network spawned actors - Added asset metadata for ConfigFiles - Added package metadata for allocations coming from LinkerLoadPackageSummary - Added metadata for Object::Serialize allocations - Added metadata for UI/Slate and UI/UMG. - Removed metadata scope for UObjectHash/UObjectIndex global buffers realloc.\n\n  * Add option disable/enable running after steps in LowLevelTests.xml.\n\n  * [UE] Improve GameplayTags.DumpTagList Added an output for Sources and References for each GameplayTag Added Columns for showing if tag has Native or DefaultIni source\n\n  * Improved error message with TObjectPtr appearing in function signatures.\n\n  * [LLM] Disable hitchdetector when LLM is enabled It is expected that LLM capture adds CPU overhead during captures, hang/hitch detection made things just worse by spamming logs with unhelpful info.\n\n  * Added the limited ability to add C++ attribute specifiers at the start of a UFUNCTION declaration.\n\n  * Adding support for more complex #define scopes in UHT.\n\n  * Adding new P4VUtil \"Combine Shelves\", which creates a new shelf combining multiple selected CLs, and works with both shelved and unshelved CLs.\n\n  * Added client-side CSV stat for active replicated object count\n\n  * Added RedirectToFile dev command - Usage: RedirectToFile [COMMAND_OPTIONS]... - It allows output the result of the COMMAND to the file specified by FILEPATH - For security purposes FILE_PATH is sandboxed: Only subdirectories inside Project/Saved directory are allowed - Command will create required directory structure before creating of the file - RedirectToFile does not work for DEFER commands and has no effect for MEMREPORT\n\nBug Fix:\n\n  * Fixed UHT issue with parsing LAYOUT_FIELD_INITITALIZED\n\n  * Fixing issue introduced into UHT that allowed unsized enumerations to be used as blueprint types. Will once again be limited to uint8.\n\n  * Mark more SceneRender reallocations with correct LLM tag instead of EngineMisc\n\n  * Make the XML parser preserve newlines\n\n  * Removed usage of include file macros from Live Coding source since it was causing issues with SN-DBS\n\n  * Fix linker issues when declaring types outside of \"FunctionalTesting\" that inherit from \"FFunctionalTestBase\"\n\n#### Horde\n\nNew:\n\n  * Add idle settings to ProgramData\\HordeTrayApp\\Settings.json which allow setting critical processes that should stop the local agent from processing tasks\n\n#### Insights\n\nAPI Change:\n\n  * FCpuProfilerTrace::OutputEventType() and FCpuProfilerTrace::OutputBeginDynamicEvent() needs to be called only if the CpuChannel is enabled, otherwise the \"spec\" trace event is not emitted, so it will result in \"\" cpu timers.\n\n  * FCpuProfilerTrace::OutputEventType and FCpuProfilerTrace::OutputBeginDynamicEvent needs to be called only if CpuChannel is enabled, otherwise the \"spec\" trace event is not emitted, so it will result in cpu timers. Also fixed code that matches OutputBeginEvent with OutputEndEvent.\n\nNew:\n\n  * Unreal Insights now displays the priority in package summaries to help understand the order in which packages are loaded and if package priorities are being respected.\n\n  * Unreal Insights : delete trace is now allowed as soon as at least one deletable (i.e. not-LIVE) trace is selected so that a user can \"select all\" and then delete all non-LIVE traces\n\n  * Some channels are marked read-only (e.g. memory tracing channels) and cannot be toggled while the application is running. However there was no feedback when users tried to enable those channels using console commands for example or using the public API. With this change a logging channel argument is added to several internal methods in order to output information correctly, to console feedback when needed.\n\n  * Added memory tracing for FMemory::SystemMalloc and FMemory::SystemFree.\n\n  * CsvProfiler: Added named events (and trace cpu timing events) also for Csv stats identified by FName.\n\n  * Added an insights preset designed for analyzing load times that can be used by adding -trace=loading to the command line\n\n  * Added LLM tag for untagged video mem allocation in PhysicsField.\n\n  * Added the Windows error message to the log warning when the \"UnrealTraceServer.exe\" process fails to start. Also updated log messages re UTS launch.\n\n  * Add Trace Pause/Resume menu entry to the Trace Editor Widget.\n\n  * CONTROL_FLOW_PERF_TRACE_STEP. Adding support in FControlFlow and TRACE_CPUPROFILE macros to allow you to begin an event in a control flow node implementation and have it automatically terminated by FControlFlow whenever/however that node completes. This ensures that in a profile trace sequential steps show up sequentially rather than appearing nested (despite the technical fact that they are actually invoked as nested functions). ControlFlow is still an experimental plugin.\n\nBug Fix:\n\n  * Removed leading spaces in name of PlayerController cycle stats.\n\n  * D3D12RHI: Fixed CreateDiagnosticBuffer to use MEM_COMMIT | MEM_RESERVE (instead of just MEM_COMMIT) with VirtualAlloc in order for memory tracing to correctly track these buffers.\n\n  * Fixed memory tracing and stats for a reallocation in GPUDefragAllocator.\n\n  * Fixed CpuProfiler to flush the trace thread buffer (if not already empty) when the thread ends.\n\n  * Fixed usage of TRACE_CPUPROFILER_EVENT_SCOPE macros in various engine files and in engine plugins.\n\n  * Trace: Improved trace data writer to drain only the buffers available when we start draining buffers of a thread. This avoids cases where a thread floods the writer with new buffers.\n\n  * Fix StartTraceSendTo blueprint\n\n  * Fixed memory tracing to report correctly the name of the wrapped allocator.\n\n  * Fixed usage of CpuProfiler trace in TaskTrace.\n\n  * Fixed usage of CpuProfiler trace in BlueprintActionFilter (when ENABLE_BLUEPRINT_ACTION_FILTER_PROFILING is enabled).\n\n  * Fixed asset metadata association with mem allocations to match LLM.\n\n  * Fixed memory tracing for OnDllUnloaded.\n\n  * Fixed missing ProgramSize allocations for Unix platform.\n\n  * Fixed \"Frame\" CPU timing events for the Render thread to not be added when the \"RenderCommands\" trace channel is on. This is because the \"BeginFrame\" and \"EndFrame\" commands will define CPU scopes (when \"RenderCommands\" channel is on) and will overlap with the \"Frame\" timing event (resulting in incorrect timestamps for both \"BeginFrame\" and \"Frame\" timing events). Also renamed \"Frame\" to \"RenderingFrame\" for the timer to not be merged with one used in the Game thread.\n\n  * Renamed the \"LoadObject\" named event (defined by SCOPED_NAMED_EVENT) as \"StaticLoadObjectInternal\" (measures time in StaticLoadObjectInternal() function) because there is another \"LoadObject\" cpu scope (defined using the UE_TRACE_LOG_SCOPED_T macro; the one with metadata) which measures same function.\n\n  * Fixed tracing for stats counters (-trace=stats). For each thread, the additional buffers (after the initial buffer is flushed) had incorrect initial timestamps.\n\n  * In certain situations thread starving can occur due to thread starving between TraceLog worker thread and tracing threads.\n\n  * Fixed memory tracing for virtual allocs to track allocations also when just MEM_COMMIT is used (with a nullptr address).\n\n### Framework\n\nAPI Change:\n\n  * Derived classes of LocalFogVolumeComponent that need tick functionality will have to override PrimaryActorTick.bCanEverTick in their constructor.\n\nNew:\n\n  * Reworked Electra media player's DX12 support to allow for more optimized data delivery from the decoders. Also adds further optimizations if using Windows SDk 22621 or newer.\n\n  * Fixed various issues with MediaFramework, ImgMedia, WmfMedia and Electra concerning playback timing control and blocked / sycnhed playback behavior\n\n  * Added a flag to always make the actor spawned by a ChildActorComponent transient\n\n  * GameFeature Plugins will deactivate any plugin dependencies that where also activated by the referencing plugin if reference includes the property \"activate\": true\n\n  * Extended support for colorimetry information from video streams for non-standard HDR streams (e.g. allowing 8-bit HEVC data to use Rec2020 & PQ etc.)\n\n  * Removing the need to create textures on-demand on the render thread from Xbox GDK playback code in Electra, hence improving decode performance\n\n  * Added the ability to selectively activate listed plugin dependencies when a plugin is activated. The plugin reference requires the property \"Activate: true\"\n\n  * Bug fix: Fixed performance issue with LocalFogVolumeComponent. Changed PrimaryActorTick.bCanEverTick to false.\n\n  * Optional plugin dependencies need to be compiled enabled or command line enabled otherwise they are ignored during startup when the plugin manager enumerates a plugins dependency list for enabling.\n\n  * Allowing attenuation settings to be live updated while in the editor.\n\n  * Reworkied WmfMedia's state handling of WMF to correct playback timing and sample handling shortcomings\n\n  * Fix reinstantiation of subobjects in CDOs and reused the same logic on instances to fix thier subobjects as well.\n\n  * Added support for Enhanced Input show debug command to use debug target, fixing issue where show debug menu always only showed input information of first local player in a game instance even if debug target selected others.\n\n  * Disallowed plugin entries can now contain a developer comment. Changed data type from a string to a struct. Backwards compatibility retained\n\n  * Add support for writing JSONs with original property name casings\n\n  * Added world name to UWorld::CleanupWorld warning to help diagnose related issues faster\n\n  * Applied same CDO subobject fix to Archetypes\n\nBug Fix:\n\n  * Fixing up some GPU state management for Electra's AVF texture sample code to fix glitchy video playback on some Apple devices\n\n  * Fixed up SRV support for PC DX12 P010 format: plane selection code was missing\n\n  * Fixing up texture sample setup from colorimetry information returned by Electra decoders to correctly reflect encoding vs. mastering display information\n\n  * Fixed an issue with plugin templates where package names would fail to fix up after a new plugin is created. This can occur if two template files have the same filename but the extensions are different (.csv, .uasset). Only need to create redirectors for unmodified file types\n\n  * PR #10885: Fix IsValidLandingSpot for Large World Coordinates #contrib 10885\n\n  * Added ENGINE_API to ALight::PostLoad. Follow-up fix to a linker error from CL 27595673 that was reported by a licensee. If you created a custom class derived from ALight, there would be a linker error reporting a missing definition of ALight::PostLoad. The vtable of a derived class needs to call PostLoad, which requires that the symbol has been exported.\n\n#### AI\n\nNew:\n\n  * Learning Agents 0.2\n\n    * Completely overhauled the LearningAgentsInteractor to allow for more sophisticated observation and action structures.\n    * LearningAgentsComponent classes were reparented from ActorComponents to UObjects. Introduced new \"make\" functions on the LearningAgentsManager.\n    * All blueprints need to be be rebuilt from scratch.\n  * AI Path Following: Add an option to test reachability prior to updating the destination to an Actor's position\n\n  * Added new simple NNE runtime NNERuntimeBasicCpu.\n\n#### AI Behavior Trees\n\nNew:\n\n  * PR #9497: fixed mismatch in BT component description format\n\n  * Add ability to override default blackboard key value for most types. Prevent child blackboards from being able to modify the key type of inherited key.\n\n  * Create helper function InitializeNodeMemory & CleanupNodeMemory in BTNode to handle creation and clean up of node instance memory Update bt nodes that use instanced memory to use the new helper to create and destroy their instance memory\n\n  * [Behavior Tree] Add support for node-specific error reporting\n\n  * UBTTask_FindAndUseGameplayBehaviorSmartObject now reaches slot location before using object\n\n  * Added more logs to auxiliary node and converted some EQS log to vlog\n\nBug Fix:\n\n  * Fixed TimeLimit decorator when used in composite decorators Problems was that the decorator was returning a failure after requesting execution which could be the case in a composite decorator using operand Or\n\n  * ForceSuccess decorator effect should not be limited during the search\n\n  * Fix Behavior Tree Composite Decorator had an erroneous tooltip (\"Class not found, make sure it's saved!\")\n\n  * [Behavior Tree] Fix re-opening BT assets on project start-up opens up the BB instead\n\n  * Fixed potential access to an invalid FindInBTResult pointer in BehaviorTreeEditor\n\n  * BTService to RunEQS should not be allowed to tick on search start to ensure proper query management.\n\n  * Updated TimeLimit Decorator to not get get ticked again in case it is still active after requesting execution (e.g. latent abort)\n  * An execution is now scheduled when a task completes and there is a pending execution.\n\n  * Fixed delta time for tasks using tick intervals Problem was that a new task to execute using tick intervals could be ticked using the accumulated delta time from the previous task.\n\n  * Converted OnBlackboardKeyChanged delegate to a global multicast delegate so every BehaviorTreeBlackboardView linked to the modified asset can refresh their actions.\n\n  * Fixed crash in BT that could occur if the tree was stopped the same frame one of its EQS queries finished.\n\n  * Fix BT decorator and service lists (and also some custom licensee graph implementations) put the first and second level category on the same level\n\n  * Fix issue where BT cooldown decorators would return false due to the last used time being 0. The cooldown calculation was also changed to prevent possible undefined behavior arithmetic.\n\n  * Prevent ForceSuccess decorator from affecting node results from unrelated nodes. Should only modify result if associated task or composite node fails.\n\n#### AI Debugging\n\nAPI Change:\n\n  * Deprecating old FVisualLogger::GetEntryToWrite in favor of a new, static FVisualLogger::GetEntryToWrite for consistent Engine Timestamps in Editor.\n\n  *     * Deprecated the overload-based FVisualLogger::GeometryShapeLogf / FVisualLogEntry::AddElement API\n\nNew:\n\n  * Encouraged Engine Timestamps by deprecating FVisualLogger::GetEntryToWrite.\n\n  * Gameplay Debugger now selects the local Actor on start-up if no other suitable Pawns are found. Use shift-' to force select the local Actor.\n\n  * PR #9729: Fix Visual Logger Capsule first param to match cpp\n\n  * GameplayDebugger\n\n    * adds key modifier 'Shift' support for local player selection\n    * : Toggle debugger ON + Single best pawn candidate selection (closest to reticle) | Toggle debugger OFF\n    * Hold : Toggle debugger ON (if not already opened) + Continuous best pawn candidate selection (closest to reticle)\n    * Shift + : Toggle debugger ON + Local player selection | Toggle debugger OFF\n    * Hold Shift + : Toggle debugger ON (if not already opened) + Local player selection\n  * Improve behavior tree debugging - Add a warning to the bottom left of the debug window when the behavior tree being debugged is paused. - Gather runtime values from instanced nodes when needed so the correct values are displayed when debugging. - Make double clicking on a dynamic subtree node open the running subtree\n\n  * [VisLog] Improving multiple PIE session VisLog capabilities. The TimeStamp used is now a global Engine TimeStamp. The WorldTimeStamp is also recorded separately for ease of debugging. By using this Engine TimeStamp during PIE sesions, we can correctly record the time for client & server events, allowing us to see the effects of replicated data more clearly on the timeline.\n\n  * Visual logger improvements : Added sphere visual logs Added \"wire\" variant of various visual logs (box, OO box, cone, cylinder, capsule, sphere) Added blueprint versions of most visual logs (box, OO box, cone, cylinder, capsule, sphere, arrow, circle) Take into account the log's color's alpha value when drawing visual logs (multiplied by the scene proxy's own alpha), except for text, as is tends to become unreadable Fixed oriented box debug renders, which didn't support rotations appropriately (they wouldn't match the wireframe version) Fixed cylinder debug renders which were always vertical * Skip visual logs with empty text in the visual logger window's tooltip\n\nBug Fix:\n\n  * Quitting the game (e.g. ending PIE) while the Gameplay Debugger was active would prevent further messages from being logged to the screen in subsequent plays.\n\n#### AI Navigation\n\nNew:\n\n  * [Navmesh] Building actors spawned from instance actors don't dirty areas anymore (navmesh is expected to be already up to date from the instance actor being replaced).\n\n  * Removied heavy include dependencies in NavRelevantInterface.h.\n\n  * [Navigation] Addition of a boolean to control navigation relevancy in UGeometryCollectionComponent.\n\n  * Removed NavigationTypes.h from NavRelevantInterface.h, StaticMeshActor.h and AITypes.h.\n\n  * Removed NavigationSystemConfig.h and NavLinkDefinition.h from NavigationSystemTypes.h.\n\n  * [Navoctree] Objects with empty bounds are not added to the navigation octree anymore.\n\n  * PR #11080: Change bit-field type from int32 to uint32 in FRecastDebugGeometry #contrib 11080\n\n  * Added cheat command 'ai.debug.nav.DirtyAreaAroundPlayer' that can be used with dynamic navmesh to dirty tiles in a square area around the local player using provided value as extent (in cm) or 10 meters if not specified.\n\n  * Added an optional ReachCheck on NavLinkCustomInterface to allow navlinks to override the basic reach test done by the PathFollowingComponent. Improved the path ReachCheck for existing custom links.\n\n  * Optimization to RemoveTiles and addition of profile tags to UpdateActiveTiles().\n\n  * Addition of a warning in UGeometryCollectionComponent to catch GC that might be using bStripOnCook without bUseRootProxyForNavigation (resulting in exporting nothing).\n\n  * Removed Actor.h from NavigationTypes.h.\n\n  * Removed NavigationQueryFilter.h when unnecessary in headers.\n\n  * Log invoker priority as string instead of the enum value.\n\n  * [NavMesh] Add a NaN check to dirty area bounds.\n\n  * [NavMesh] Added early warning for invalid bounds when creating FNavigationDirtyArea.\n\n  * Added a new type of NavModifierComponent, that is, SplineNavModifierComponent which assigns a given nav area to all parts of the nav mesh in the vicinity of a spline.\n\n  * [Navlink] Added custom link owner's name to link ID warning to allow identifying the problematic actor when ID clashes.\n\n  * [Navmesh] Fixed AgentStepHeight not set in NavDataConfig.\n\n  * NavigationRelevant:\n\n    * Added flag in FNavigationRelevantData to indicates elements that want to skip dirty areas when added/removed from the NavigationOctree.\n    * Method ShouldSkipDirtyAreaOnAddOrRemove has been added to INavRelevantInterface to control the flag.\n    * UpdateNavOctreeElementBounds now takes a list of dirty areas instead of a single area to allow batched modifications.\n  * UInstancedStaticMeshComponent updates:\n\n    * Added a cache for navigation bounds\n    * Implements ShouldSkipDirtyAreaOnAddOrRemove so we don't dirty the whole area covered by the instances on registration but only a list of explicit areas using the instances.\n    * Added PartialNavigationUpdates for batched modifications\n    * Fixed partial update not sending the right area for the original position\n  * Added console command \"ai.debug.nav.DrawDistance\" to tweak navmesh draw distance at runtime.\n  * Added labels indicating the number of elements in each node if octree details are enabled.\n\n  * Fix UInstancedStaticMeshComponent::GetNavigationPerInstanceTransforms to return only the instance transforms in the provided area box as expected. This represents a significant performance improvement when using multiple instances ISM with AI navigation.\n\n  * ANavigationTestingActor\n\n    * Addition of a query to display if navigation data is ready (has been generated) within a given radius.\n  * Addition of NavigationBuildDetailed CSV profile tags in the NavigationSystem tick.\n\n  * [NavMesh] Added more information to the error message and warning messages related to the tile limits.\n\n  * [NavMesh] Added more information when reporting the error message related to the TileNumberHardLimit. [NavMesh] Added more information when reporting the warning message related to the tile pool size.\n\n  * ISM support for partial navigation update.\n\n  * Replaced requirement of PrimitiveComponent by INavRelevantInterface + UObject for registration to the NavigationSystem.\n  * Added dedicated delegates in the NavigationSystem for UObject based registration and update.\n\n  * Fix navmesh rasterization issue when generating navmesh high above 0.\n\n  * Removed Actor.h from AITypes.h.\n\n  * Removed usage of CoreMinimal.h from navigation modules.\n\n  * Updating dirty tiles:\n\n    * Optimizations when marking dirty tiles:\n    * Extracted finding the seeds and building sub areas to do it once for all NavData ActiveTiles now use a set instead of an array\n    * When using active tiles, don't try to mark dirtytiles if there is no ActiveTiles\n    * Added profile tags Fixed warning message for oversized dirtyarea to use the AdjustedAreaSize\n  * NavInvokers\n\n    * When updating invokers, use 3D invoker seed locations to compare against the maximum seed distance.\n    * Update InvokersSeedBounds with the vertical limits as well.\n  * [Dirty area] Using VeryVerbose verbosity, LogNavigationDirtyArea now logs purple boxes showing dirty areas that will dirty tiles.\n  * Validating AgentMaxStepHeight in relation to AgentMaxSlope and CellSize.\n\n  * Improve FRecastNavMeshGenerator::MarkDirtyTiles speed by prefiltering dirty area bounds using the bounds of invokers seeds.\n\n  * Added some profile tags in MarkDirtyTiles.\n\n  * Added extra logs when Navigation DirtyAreas are being reset.\n\n  * Replaced custom NavLink static registration queue by a new world subsystem that will also store NavRelevant objects that are not AActor/UActorComponent based. This allows new NavigationSystem created after initial map load (e.g. ANavSystemConfigOverride) to properly recreate its custom nav link mappings and octree.\n\n  * StaticMeshComponent is no longer relevant to navigation until compilation of the associated mesh is completed. This approach replaces the previous one consisting in returning either the render bounds or invalid bounds which could produce log spam when loading level and compiling multiple meshes.\n\n  * Added bounds to NavCollision since geometry can differ from StaticMesh\n\n    * Bumped the DDC version of the NavCollision\n    * Updated StaticMeshComponent to return bounds from the NavCollision when possible\n    * Fixed InstancedStaticMeshComponent not using the additional geometry of the NavCollision when exporting the custom navigable geomerty\n    * Updated InstancedStaticMeshComponent to compute bounds using the NavCollision for GetNavigationBounds, PartialNavigationUpdate and when gathering per instance transforms for navigation\n    * Updated UHierarchicalInstancedStaticMeshComponent to use bounds from the NavCollision for PartialNavigationUpdate\n  * Use partial update when creating and destroying physics state of ISMC instead of doing a full navigation update. That prevents huge amount of tile dirtiness.\n\n  * [Navmesh] Fix navmesh sinking too far below surfaces causing navigation issues.\n\n    * Addition of a MaxVerticalMergeError and a SimplificationElevationRatio to ARecastNavMesh to allow navmesh to adapt more precisely to vertical collision variances.\n  * Addition of InvokersMaximumDistanceFromSeed allowing to restrict invokers updating far from seed points (player positions by default).\n\n  * Removed World.h include from NavLinkCustomInterface.h.\n\n  * NavigationTestingActor: Don't reset ShowStepIndex for every request and allow to save it's value (not transient anymore).\n\n  * [Navmesh] Improved navmesh generation on steep slope:\n\n    * Fixed navmesh being generated at locations too steep and above the step height threshold.\n    * Addition of LedgeFilterMode on RecastNavMesh to select the desired ledge slope filter mode.\n    * Addition of a new filter mode that takes into account the maximum walkable slope when filtering voxels.\n  * [Navmesh] Tile generation debug improvements:\n\n    * addition of an options to skip contour simplification and display raw contours;\n    * addition of text labels to FRecastInternalDebugData;\n    * addition of indexes and coordinates to contour debug edges, allowing to identify them individually.\n  * Add camera location to invoker seed locations when the pawn is null so nav mesh is not removed in cases where the player camera is near the invoker but the player pawn has been destroyed.\n\n  * [Navmesh] When using a SimplificationElevationRatio > 0, navmesh contour now tessellates between regions to improve navmesh height precision.\n\n  * [Navmesh] Raw contour improvements:\n\n    * Allow merging the first contour points with the next and the last to remove differences with contours from other regions.\n    * When walking contours get max of neighbors height.\n  * Exposed RequireNavigableEndLocation to MoveToLocationOrActor BP function.\n\n  * Addition of the average tile generation count per second in LogNavigationHistory.\n\n  * In UGeometryCollectionComponent, addition of a boolean to control navigation relevancy.\n\n  * [Navmesh] Update navmesh display lines to better distinguish edges borders and polygons borders.\n\n  * [Navmesh] Cancel async building tasks when navmesh generator is destroyed to prevent leaking any build tasks.\n\n  * Only do navigation updates for the required instances in UMassVisualizationComponent::HandleChangesWithExternalIDTracking (instead of dirtying the whole component size).\n\n  * [Navigation] Only update navigation for actor instances when initially populating the ISMC to prevent unnecessary dirtiness.\n\n  * Added linear extrapolation support in SplineMeshComponent\n\n    * added support to distort bounds that could exceed the mesh bounds used to define the spline local range [0, 1]\n    * in case point on spline is outside default range we use linear extrapolation for position or bounds\n    * this change also improves positioning of objects attached to sockets outside the mesh bounds\n    * navigation bounds are now computed and cached to match distorted navcollsion\n\nBug Fix:\n\n  * Fixed possible memory corruption in SimpleCellGrid::Serialize() due to missing bounds check and integer overflow.\n\n  * Fix voxel filtering issue when using high AgentMaxSlope values in combination with high CellSize values.\n\n  * ISMC support for obstacles and nav areas: fix ISMC not exporting as obstacles.\n\n  * OnNavigationBoundsUpdated, make a removal request if the bounds are invalid. This avoids having invalid RegisteredNavBounds when undoing the addtion of a NavMeshBoundVolume.\n\n  * Fix usage of SHOW_NAV_EXPORT_PREVIEW define.\n\n  * [Navmesh] Fix navmesh tiles being removed and not generating for some modifiers when navmesh is in DynamicModifierOnly mode. (Before the change, if we were DynamicModifierOnly mode and a resolution was set, it would set the Geometry flag as well as the DynamicModifier flag, resulting in the touched tile being flushed but not fully rebuilt.)\n  * [Navmesh] Fixed an issue with bFillCollisionUnderneathForNavmesh.\n\n  * ISM\n\n    * Fixed partial navigation update not using up to date navigation bounds when updating a single instance\n  * HISM\n\n    * Fixed missing scale support for filters used in overlapping queries\n    * Fixed tree marked as out of date when performing in place update (i.e. updating rotation or scale) resulting in accumulated navigation dirty areas until next rebuild. To minimize change on this fading out component we rebuild the tree instead for operations performed in non game worlds (where we expected most of this manipulations to be made).\n  * Fixed issues that for both editor time and runtime, in some settings, when placing new StaticMeshFoliage or HierarchicalStaticMeshComponent in the level or changing their transform data, the Navmesh generation on them would be incorrect.\n\n  * [Navmesh] Properly checking for extents in navmesh findNearestPoly queries.\n\n  * [Navmesh] Fixed DynamicModifierOnly navmesh missing tiles when using nav modifiers.\n\n    * When using navmesh resolution, Area modifiers are not added to ANavModifierVolume anymore.\n    * When adding dirty areas make sure to prevent bRebuildGeometry for game world with static navmeshes.\n  * Fixed navmesh dirty area logs to display bound sizes as indicated and improved log readability.\n\n  * [World Partition Navmesh] Fixed WP navmesh generation by setting GridSize for ANavigationDataChunkActor (needed since the addition of FPartitionActorDesc::GetEditorBounds()).\n\n  * Fixed partial navigation updates for Editor manipulations of InstancedStaticMesh component\n\n    * added partial update on component registration/unregistration\n    * skip updates when adding/removing instances when component is not registered\n    * added list of dirty areas to pending dirty element so they could be applied when udpate info is successfully processed\n    * added some missing updates when not using partial updates\n  * [Navigation] Added support for obstacles and nav areas with Instance actors by adding bOverrideNavigationExport and bForceNavigationObstacle properties to FISMComponentDescriptor.\n\n  * Fixed \"Looking for NavData using invalid FNavAgentProperties.\" warning spam.\n\n  * [Navmesh] Fix navmesh generation issue where polygon would wrongly connect to a different height, resulting in a broken navmesh surface.\n\n  * NavModifierVolume actors getting their position updated via their parent Instanced Level Actor in the Editor now update their navigation data.\n\n  * Added specifiers to property PerPointLaneProfile in ZoneGraph so it is properly handled by the component instance data when a BP actor is reconstructed.\n\n  * Fix invalid memory access (use-after-free) in FGraphAStar::FindPath.\n\n  * Added navigation update in StaticMeshComponent when associated mesh gets compiled. This will invalidate any pending add to the octree and dirty tiles since the component is no longer relevant until compilation completes.\n\n  * Prevent ANavSystemConfigOverride from using the world if it's in the process of being destroyed in PostUnregisterAllComponents (else it will try to recreated the original navsystem in the world currently being destroyed).\n\n  * [World Partition Navmesh] Fixed for ANavigationDataChunkActor having wrong actor location caused by missing RootComponent.\n\n  * Fix ZoneShape visualization when re-selecting the shape or undoing actions.\n\n  * Fixes potential crashes when invalid parameters are provided to the NavLocalGridManager\n\n  * [Navmesh] Fixed crash in DetourTileCacheBuilder canRemoveVertex.\n\n  * Fixed codepath in StaticMeshComponent for navigation update when associated mesh gets compiled.\n\n  * GeometryCollectionComponent: using root proxy to take into account root particle position when computing bounds.\n\n  * [Navmesh] Fix debug display issue in duDebugDrawHeightfieldLayer.\n\n  * [Navmesh] Navmesh resolution from modifiers is now correctly read when used with in async tile generation combined with lazy modifier gathering.\n\n  * Fill Collision Underneath for Navmesh on an ISM now applies to each instance.\n\n  * Fixed UpdateActorAndComponentsInNavOctree to properly update attached actors\n\n#### AI Smart Objects\n\nNew:\n\n  * SmartObjects on actor instances:\n\n    * mass tag, fragments to create/destroy smart objects for Mass entities\n  * Add Find Smart Object functions that take in AActor's and avoid using the normal QueryBox. This is more friendly to the UE Gameplay Framework and lets you pass in specific actor's that you case about. If you had to use a spatial query, then you may get results from objects that you don't explicitly want if they are overlapping objects.\n\n  * Removed dependency on MassEntity to store slots\n\n  * Added option to toggle smart object annotations in GameplayDebugger\n\n  * Added option \"Slot Details\" to the Gameplay Debugger to be able to reduce the amount of replicated data for worlds with large amount of SmartObjects.\n\n    * This option is required to display annotations (i.e. turning it off will disable annotations and turning on Annotations will turn this one on)\n    * When turned off, a single shape will represent the SmartObject in the world\n  * Add two Smart Object Request Filter options to return claimed and/or disabled slots too\n\n  * Expose some smart object component, definition, and runtime options to blueprints to make it possible to have some very basic interactions with them inside a blueprint.\n\n  * Provide owner actor to FindSmartObject in EQS query generator\n\n  * Added reasons to control the enabled states of smart objects:\n\n    * Gameplay tags are used to identify a reason\n    * Default reason \"SmartObject.EnabledReason.Gameplay\" is a tag (UE::SmartObject::EnabledReason::Gameplay) provided by the plugin and used by default if no other reason is specified\n    * Tags are converted to bit masks and stored as disable flags in runtime instance\n    * External systems can declare new Gameplay Tags for the specific needs. System currently allows 16 different reasons (1 default + 15 custom)\n    * A Smart Object instance is considered disabled as soon as at least one reason is set\n  * Add a \"Find Smart Object from Targeting System\" request to smart objects. The targeting system is often used for player interactions to determine what the player is \"targeting\", so being able to find the smart objects that a player is looking at will make using smart objects for player interaction easier!\n\n  * Add some Blueprint Functionality to the Smart Object system. - BP functions for checking if slot handles are equal or not - to string functions for slots and handles - is valid functions for slot handles\n\n  * Added config to clear world preconditions for client builds\n\n    * [/Script/SmartObjectsModule.SmartObjectSettings] bShouldExcludePreConditionsOnDedicatedClient=true\n  * Allow smart object creation from definition, transform and owner descriptor struct that will use dynamic ids\n  * Replaced registration type WithCollection by BindToExistingInstance in USmartObjectComponent since it can also be used for objects not tied to a component lifetime created from CreateSmartObject\n  * Allow subsystem component accessor to force hydrate the actor associated to a smart object.\n\nBug Fix:\n\n  * Mark the test smart object test types (USmartObjectTestSubsystem, USmartObjectTestBehaviorDefinition, and ASmartObjectTestCollection) as a NotBlueprintType. This prevents it from coming up in the BP context menu when using a regular runtime blueprint.\n\n  * Display options in the GameplayDebugger are now replicated to properly display their status on the client\n\n  * Fixed slot condition activation\n\n  * Fix slot condition that could get activated multiple times\n\n#### AI State Tree\n\nNew:\n\n  * StateTreeDebugger\n\n    * enabled by default in the StateTreeEditor\n    * traces can be automatically started on non-editor targets by setting 'bAutoStartDebuggerTracesOnNonEditorTargets = true in StateTreeSettings or' under [/Script/StateTreeModule.StateTreeSettings] in the .ini config file.\n    * traces can be manually started/stopped using statetree.startdebuggertraces and statetree.stopdebuggertraces from the console\n  * Create BTTask_RunStateTree and BTTask_RunDynamicStateTree that allows the execution of state tree in a behavior tree\n\n  * StateTreeDebugger\n\n    * added option to disable state transitions\n    * added state transition breakpoints\n    * added console variable statetree.displayitemids to display states, tasks and transitions Ids in the StateTreeEditor (details view and state treeview)\n  * Create StateTreeMoveToTask wrapping a UAITask_MoveTo allowing state tree to move AI using the same framework as BehaviorTree Create the FStateTreeAITaskBase & FStateTreeAIActionTaskBase state tree task namespace for AI focused ST task\n\n  * StateTreeDebugger\n\n    * created a dedicated option to auto-scroll and converted debugger pause to control event processing\n    * clear tracks when selecting new valid session\n    * scrub buttons can now be used as soon as analysis is pause of auto-scroll disabled\n    * added new button to the DebuggerView to control the session analysis state (pause or not). Mainly required when performing a remove analysis of non editor target.\n    * added new button to the DebuggerView to toggle auto-scroll. Manual selection in the timeline will turn it off so it can now be turned back on.\n  * StateTreeDebugger breakpoint improvements\n\n    * added support for breakpoint when exiting state (was only when entering)\n    * added support for breakpoint when entering or exiting a task\n    * state breakpoints can be added from contextual menu in the TreeView or from the Debug options in the details panel\n    * task breakpoints can be added from the Debug options in the details panel\n    * added feedback labels in the details panel for states and tasks with breakpoints\n  * StateTreeDebugger can auto start analysis of traces started from console command\n\n  * Added deferred stop and validation for reentrant calls to Start/Stop/Tick.\n\n  * Add an option to retain property values when the class of a node changes\n\n  * Create IStateTreeSchemaProvider that allows a derived class to override the schema used by a parent property. Create StateTreeAIComponent & StateTreeAIComponentSchema derived from StateTreeComponent but guaranteed to have a AIController\n\nBug Fix:\n\n  * PR #11008: Fix nullptr error for invalid StateTreeRef #contrib 11008\n\n  * Fixed a bug where keyboard focus are not properly routed to WebBrowser before user interacts with the browser content.\n\n#### API\n\nNew:\n\n  * Streaming improvements for fast response assets\n\n    * Fixed RequestedMips condition in FRenderAssetStreamingManager::TickFastResponseAssets()\n    * Call ProcessAddedRenderAssets() after Async work is complete so newly loaded meshes can be set as fast response assets. Can be disabled by setting r.Streaming.ProcessAddedRenderAssetsAfterAsyncWork=0 Streaming API additions\n    * Added UMeshComponent::PrestreamMeshLODs() to request the streaming system starts streaming in all LODs for the mesh; analogous to PrestreamTextures()\n    * Added UStaticMeshComponent::RegisterLODStreamingCallback() to match USkinnedMeshComponent\n    * FastForceFullyResident() returns true if the asset meets the conditions to be fast fully resident, and false otherwise\n    * Passing -1 for the LOD in RegisterLODStreamingCallback() asks for a callback when the maximum available LOD is streamed in.\n\n#### Audio\n\nAPI Change:\n\n  * Audio decode size reduced to 4800 (100ms of 48k) down from 8k to allow for prebuffers to not stall playback. Some hardware decoders needed a subsequent fixes as were dependent on power of 2 sizes buffers.\n\n  * The function AudioModulation::GetOrRegisterParameter was updated to take the modulator name and class name directly instead of a breadcrumb with both. So if you ever call this function, you'll need to update your callsites. You can see an example in SoundControlBus.cpp.\n  * The type of the TModulatorBase's Name variable was changed from an FString to an FName, so if you use that value you may need to update callsites to call the ToString method.\n\n  * Added a CVar\n\nNew:\n\n  * Harmonix music system tools are now available as an experimental engine plugin! Design procedural music systems with the included suite of MetaSound nodes for MIDI generation and processing. Create rich, layered sounds with the powerful Fusion sampler. Manipulate sound in time with music using clock-synced modulation and effects. Synchronize gameplay and visuals with music using the Music Clock Component and MetaSound nodes for audio analysis.\n\n  * Dynamic Submixes. Blueprint API to connect/disconnect submixes at runtime.\n\n  * Added Quality settings to Metasounds and add logic to auto name them.\n\n  * MetaSounds is now production-ready and out of Beta.\n\n  * Libsndfile upgrade to 1.2.2 and add support for linux/mac. Added support for mp3/flac/opus/vorbis imports on all editor platforms.\n\n  * Remove unneeded input binding in MetaSounds for perf\n\n  * Added experimental MetaSound operator precaching mechanism / subsystem.\n\n  * Tag loading behavior of soundwave using Soundclasses hierarchies. Allowing for cooked and inlined initial audio chunks.\n\n  * Allow MetaSound Time data be used as a MetaSound Output\n\n  * Fix quality settings named \"None\" causing issues with Defaults.\n\n  * Modulation: New Blueprint Function: Is Control Bus Mix Active. Returns true whenever the given CBM is active.\n\n  * Optimized memory allocations in DSP objects for recycled metasounds (operator cache).\n\n  * [Metasound] NodeTestGraphBuilder: Add method for adding a constructor input which has a type that is not directly supported by FLiteral\n\n  * Adding constructor pin to grain delay node for max delay.\n\n  * Refactor to move all Engine (codecs) Decoders into their own modules.\n\n  * [Metasound] Enable pin on envelope follower node\n\n  * Added an experimental CVAR to amortize dynamic operator updates.\n\n  * Increase streaming priority for audio stream cache reads to \"normal\" from \"below normal\".\n\n  * Allow Quartz Subsystem to (optionally) tick when game is paused\n\n  * Fixing ADSR discontinuity on envelope release.\n\n  * [Metasound] Refactor UMetasoundGeneratorHandle to work with Live Update\n\n  * [Metasound] Add Blueprint API to create FMetasoundFrontendLiteral instances of supported types\n\n  * [Metasound] Use a map for faster generator handle output lookup. This results in a ~70% CPU time improvement.\n\n  * Optimizations to FAudioParameter::Merge and related functions.\n\n  * [Metasound] Use FindClassOutputWithName instead of GetOutputNodeWithName to get output metadata in FMetasoundGeneratorHandle::WatchOutputs This results in a 98% improvement in CPU time.\n\n  * Added new MetaSound WaveTable Bank Evaluate Node to optimize against requiring memory copy of a WaveTable when interpolation between bank tables is not desired.\n\n  * Added experimental CVAR to allow MetaSoundSourcePresets to use their parent graph instead of themselves when utilizing the operator cache.\n\n  * Make Submix Sends UX consistent between attenuation + soundbase\n\n  * Allow MetaSound member default literal values and read only member fields to be copy/pasted in the details panel\n\n  * Change to using soundwave GUID as stream cache key, which should give more hits for reloads.\n\n  * Allow XMA2 to deal with buffers that are not divisible by 256*Channels.\n\n  * Avoid registering unused MetaSound send/receive nodes\n\n  * String format optimization in MetaSounds\n\n  * Making space bar preview a MetaSound in the content browser.\n\n  * Move some MetaSound graph processing from runtime to cook for improved performance\n\n  * Metasound per platform blockrate and samplerate.\n\n  * [Metasound] Notify listeners only once per render block when a dynamic generator's vertex interface changes.\n\n  * Show Source or MetaSound settings by default in MetaSound details panel, autoexpand graph member menu by default\n\n  * [Metasound] Notify users when a generator's I/O changes\n\n  * New Modulation Parameter: Additive. This parameter maps a given range to 0-1, and the values are mixed together by adding them and clamping the value.\n\n  * Latch an error state in the case where the decoder returns negative samples\n\n  * Added new USoundModulationDestination which allows users to enable modulation destinations via gameplay code or Blueprint and easily get the value on the Game Thread.\n\n  * Add Find tab for searching within a MetaSound\n\n  * Several small changes were made to user interfaces in Audio Modulation to improve usability.\n\n    * Modulation Patches: changed the order of parameters on Modulation Patches to put the most used settings at the top of each input, set Bypass to false by default for new Patches, and changed the name of Shared curve assets in the curve selection dropdown to \"Custom.\"\n    * Control Buses: Moved the Address settings and list of Generators to an Advanced category, and added a comment to the Parameter variable that explains what it does, as it's very important.\n  * Added APIs to get total number of frames in a FSoundSource\n\n  * Audio can be now optionally inlined for Load on Demand.\n\nBug Fix:\n\n  * Fix attenuation override not being respected within the audio interface update #contrib 11149\n\n  * Fix MetaSound trace debug print name for graph nodes\n\n  * Fix for DynamicSubmix's attaching to Master by accident and also submixes Auto registering AudioDevice Creation\n\n  * BaseDefaultSubmix was not working in all situations\n\n  * Fix MetaSound trigger parameter being retriggered on realizing virtualized sounds and unneeded parameter updates being cached while virtualized\n\n  * Fix race condition with MetaSound async registration\n\n  * Fix non-cooked quality settings by adding a cook stage the MetasoundSource to correctly save them out per platform. Previously the PerPlatformSettings was added to the MetasoundSettings, however as this is not a true asset they weren't being correctly cooked. The code previously pulled the global settings, then allowed overrides upon this. This decision is now made during cook.\n\n  * Fix MetaSound reset to default arrow still showing even after literal has been set to default\n\n  * Fixing ADSR invalid memory access.\n\n  * Fix for a rare Audio Hang on Shutdown\n\n  * Fix editor crash for invalid MetaSound graph connection view when previewing sound\n\n  * Improved performance when querying Control Bus Mix Values\n\n  * Fix Audio Synesthesia NRT editor crash when settings object is invalid\n\n  * Fix for Metasounds not using device rate when Quality Settings are disabled\n\n  * Fix for submix cook warning on mac/linux\n\n  * Handle bad ADPCM decodes\n\n  * Disable adding comment nodes in non editable MetaSound graphs like presets\n\n  * AT9 Fix to handle non power of 2 decodes.\n\n  * Rollback fixes around handling large truncated files, as they caused bugs with seeking for adpcm.\n\n  * Make the Metasound CVARs a global override instead of just the defaults\n\n  * Fix for Quality settings overriding defaults in the \"0\" case.\n\n  * Several small changes were made to improve the stability of Audio Modulation during engine shutdown/PIE exit.\n\n  * Fixed a crash when CacheSizeKB=0 was set in the ini config.\n\n  * Fix crash caused by race condition when building MetaSound graph operators\n\n  * Make Trim print correctly handle the uint64s\n\n  * Fix nullptr deref after bad cast in submix register\n\n  * Fixing tooltip typo #rd trivial\n\n  * Fix erroneous MetaSound warning for external node classes\n\n  * Fixed TriggerDelay node to only fire after the most recent execution of the input trigger\n\n  * Fix for Google resonance Spatialization being incompatible w/ multi-pie.\n\n  * Fixed an invalid read crash on Audio Mixer Shutdown.\n\n  * [Metasound] Guard against unbounded growth of MetasoundGeneratorHandle output queues\n\n  * Disable audio synesthesia NRT analysis for procedural soundwaves including MetaSounds\n\n  * Fix bug in audio resampling.\n\n  * Fixed rare crash in editor caused by Global Modulation Buses when shutting down PIE.\n\n  * Fixed issue where FloatADSREnvelope node would drop to 0 for one cycle on trigger release if the trigger is not at the top of a block\n\n  * Fix MetaSound Array Random node shared state not applied when No Repeats is connected to a dynamic value that changes before the Next trigger is called\n\n  * Fix losing namespace when select click renaming MetaSound graph members\n\n  * Fix MetaSounds not playing within Sound Cues with certain Sound Cue quality settings\n\n  * Fixed a bug where binaural sounds would ignore submix modulation when using an external spatializer (eg. Resonance).\n\n  * Dynamic Submixes. Fix unregistering submix on disconnect and Fix debug command to correctly view graph\n\n  * Fixed a crash when importing ADPCM audio files.\n\n  * Fixed an issue where FAudioCapture objects were incorrectly being instantiated when sound was disabled.\n\n  * MetaSounds: Clamp RandomGet node's NoRepeats value immediately instead of waiting until it's saved to the RandomGets map. This fixes an issue where Shared State wouldn't work if No Repeat value was being clamped since the comparison would always indicate it needs to be stomped.\n\n  * Fixed a crash when undoing and redoing the creation of a Metasound Source on an Audio Track in Sequencer\n\nDeprecated:\n\n  * MetaSound FCreateOperatorParams; Use FBuilderOperatorParams instead\n\n  * Delete deprecated usage of GetRuntimeFormat and CreateCompressedInfo which we deprecated in 5.2\n\n  * Remove deprecated submix code that was deprecated in 5.2\n\n#### Blueprint\n\nNew:\n\n  * Add blueprint array sort functions for native types. Adds in-place sort functions. Supports options for stable sort and ascending/descending.\n\n  * Improved Unreal Insights instrumentation for profiling blueprint loading compilation in the editor\n\n  * PR #10237: Convenience IsInterfaceValid() blueprint node\n\n  * Add custom styleset support for K2Nodes\n\n  * Animation blueprint context menu construction time has been optimized - noticeable on large projects\n\n  * Make ENetRole available to Blueprints PR #10411: Update EngineTypes.h - ENetRole to BlueprintType #contrib 10411\n\n  * Added Blueprint util to test whether a given class implements a given interface\n\nBug Fix:\n\n  * Deferred initialization on editor load when a non-native default subobject type override has a circular load dependency with the outer object's underlying non-native type.\n\n  * Preserve the outer package dirty state after reinstancing a Blueprint object containing one or more subobjects that are no longer load-compatible with the original's serialized data.\n\n    * Example: This can occur after reparenting into a new hierarchy with matching subobjects having incompatible/downcast types. In that case, if data was previously saved using the old type, it cannot be loaded against the new type without re-saving the outermost package to update its serialized instance data.\n  * PR #11332: Blueprint MemberReference now also looks for DeprecatedProperty metadata\n\n  * Fixed redundant delegate registrations on BPGC load/compile (regression).\n\n  * Added a way to treat composite members as complete values when generating the custom property list for the Blueprint instance post-construct initialization fast path.\n\n  * Fixed several bugs related to inheritance of subobject data inside blueprint default objects. This fixes several sources of data corruption, but there are still some known issues with trying to use arbitrary subobjects (other than ActorComponents) inside blueprints that use inheritance\n\n  * Fix a bug where UBlueprintEditorLibrary::RemoveUnusedVariables would still remove variables even if they had events bound to them in the graph.\n\n  * Fixing reinstancing issue with nested subobjects and transaction buffer not collecting all subobject info\n\n  * We now clean up constructed components when using the Actor replacement workflow.\n\nDeprecated:\n\n  * Removed blueprint code and properties for systems like nativization that were first deprecated in 5.0\n\n#### Blueprint Compiler\n\nNew:\n\n  * Improved error message when a blueprint attempts to compile while other blueprints are compiling\n\n  * Added Archetype reinstantiation sorting and compute the right template object for creation\n\n  * Add interface to add tags to BlueprintGeneratedClasses so BlueprintGeneratedClass assets can effectively replace BP assets.\n\nBug Fix:\n\n  * AnimGraphNode_AssetPlayerBase now properly preloads animation assets that are transitively included in its graph\n\n  * Fixed crash when loading anim blueprint with split pins\n\n  * Fix crash when loading blueprints during asynchronous level streaming while using Play in Editor\n\n  * PR #10869: Fixed BP compilation with deprecated event dispatchers (multicast delegates)\n\n  * Fixed crash after recompiling a blueprint class based on a native class that has SparseClassData\n\n  * Update UFunction::SuperStruct values in skeleton classes when relinking them during compilation. This prevents them from going stale and referencing UFunctions in a TRASHCLASS\n\n  * Avoid potential collisions with existing non-transient objects when creating transient event stub graph artifacts during Blueprint ubergraph compilation.\n\n  * Fixed phantom compilation error when loading a blueprint after a parent blueprint has removed a function\n\n  * Fixed a crash involving skeleton classes after compiling complicated blueprints\n\n  * Ensure that default values are preloaded during class regeneration. Blueprint compilation expects all of its dependencies to be preloaded. Normally, RegenerateClass handles this, but we were still missing a few cases. If we don't correctly preload dependent exports, we can run into scenarios where postloading can occur prior to preloading. This typically occurs when we duplicate various objects during compilation. We can leverage FReferenceFinder to recursively find dependent exports on the class default object to preload. Note that this only covers native export dependencies. Preloading Blueprint-generated classes (and any instances of one) can get pretty thorny during this phase, so we intentionally skip those.\n\nDeprecated:\n\n  * Deprecated and removed broken blueprint performance tracking code that has not worked in several versions, Unreal Insights should be used for profiling blueprint editor loading\n\n#### Blueprint Editor\n\nNew:\n\n  * It is now possible to modify Class Settings in the Blueprint editor's defaults-only (DOBP) mode.\n\n  * Improved memory usage and performance of Find in Blueprint search data\n\n  * Loading progress for blueprint function and macro libraries is now reported more accurately\n\n  * Implement GetOptions for UPARAM and add it for ByProfile traces\n\n  * Macro Libraries that derive from UObject can now use functions that require a world context. The input pin for the WorldContext can be manually provided by the user by dragging the right reference and passing that into the Macro, but the Macro will also just automatically grab the world context from the caller if they have a valid world context. if they do not have a valid world context, then an error will be shown in the called at compile time.\n\n  * Add an option to convert a comparison operator node to another comparison, like == to !=. Add the symbol to the user facing operator name for comparison operators for a nicer menu\n\n  * Add support for units for blueprint variables (integers and floats)\n\nBug Fix:\n\n  * Fix the comment bubble borders in blueprints.\n\n  * Fixed a crash that occurs when you added a ComputeGraphComponent to a Character.\n\n  * The blueprint editor's pin type selector has been optimized for large projects\n\n  * Fixed an editor crash after editing Math Expression node titles while hovered over the content area.\n\n  * Allow you to delete functions/variables in the \"My Blueprint\" window with backspace as well as the delete key. This makes it more consistent with the rest of the editor on all platforms\n\n  * Fixed crash after renaming a component that was inherited from another blueprint\n\n  * Fixed a regression that could prevent widgets from being destroyed after closing an editor window containing a graph panel.\n\n  * Fixed up \"development mode\" for graph nodes to check more specifically for cook context.\n\n  * Fixed a potential restricted mode editor crash in shipping builds.\n\n  * PR #10747: Fix issue where graph pin hovered state becomes stuck after drag event #contrib 10747\n\n  * Components that are placed in unexpected objects are now reported in the blueprint diff tool\n\n  * Removed Blueprint asset sanitization from the save path to avoid invalidating harvested exports in a restricted editor mode, as well as alleviate BP compile/GC cost when multiple assets are involved.\n\n  * Fixed superfluous warnings about new blueprints being \"updated to fix issues detected on load.\"\n\n  * Disable editing of the replication property in the BP details panel for Event Dispatchers. Event Dispatchers do not actually support replication.\n\n  * Fix logic detecting blueprint subclasses in the diff panel, this re-enables logic to show differences in widget blueprints\n\n  * Fix an incorrect tooltip on the Default Scene Root component in the subobject editor. It incorrectly said that \"it cannot be copied\", but it is perfectly valid to copy the scene root component and paste it somewhere else in the subobject hierarchy.\n\n  * Fixed crash duplicating blueprint with sparse class data\n\n  * PR #11097: Allow listener delegates to potentially mutate the managed set while iterating.\n\n  * Fixed crash when diffing virtual revision\n\n  * Find References: Finding references of a function call node will now do a quoted search by the function's native name rather than an unquoted search by node title. The new constructed search term makes finding function references more consistent, where it would previously fail on node titles that contain special characters or prefixes like Parent, Event.\n\n  * Fix composite graphs not being displayed when diffing\n\n  * Reduced some added string cost for Blueprint class assets (regression).\n\n  * Guard against an unexpected NULL reference during explicit implemented interface removal in the Blueprint class editor.\n\n  * Deferred validation of user-defined struct types in the pin type selector list until selection time for the member variable type widget in the user-defined struct asset editor.\n\n  * Fixed the root cause of an assertion on Actor spawn that leads to an editor crash after undoing certain property changes that precede a Blueprint compile.\n\n  * Fixed an editor crash that could result during propagation of a PostEditChange() event after modifying a nested struct member field on an archetype.\n\n  * Fix GetSubsystem blueprint node to correctly handle when ShowWorldContextPin is set on a subsystem's parent class\n\n  * Level/OFPA actor packages are no longer always being marked dirty after propagating subobject defaults in the Blueprint editor.\n\n  * Fixed an editor crash when changing the title content on a math expression graph node.\n\n  * Fixed the EditorUtilityWidget Blueprint asset definition to match what the Widget Blueprint asset definition does on open for edit.\n\n  * Fixed an ensure when ctrl dragging a Vector Array pin from a blueprint function input\n\n  * Fix ConformRemovedNativeComponents to handle components that have changed type, this prevents ConformRemovedNativeComponents from trying to destroy components that have been inherited from a native class, but some non-native class has overridden the type of the inherited component. In this case a child of that type would attempt to destroy its inherited component if it was trying to match the native parent that declared the component instead of the blueprint that overrode the component type.\n\n  * Silenced warning when a subobject is forcibly deleted.\n\n  * Do not show the \"breakpoints\" category in the right click context menu for K2Nodes if they cannot place a breakpoint. This prevents a useless empty category from being added.\n\n  * Kick the async task queue while waiting to yield an in-progress Find-in-Blueprint global search to a GC pass on the main thread in order to avoid a potential deadlock scenario.\n\n  * We now avoid unnecessary serialization of editor-only references at cook time when analyzing Blueprint assets for external imports.\n\n  * PR #10335: Removed restrictions for call-in-editor Blutility functions\n\n#### Blueprint Runtime\n\nBug Fix:\n\n  * Optimized UUserDefinedStruct::InitializeStruct by avoiding redundant operations for STRUCT_IsPlainOldData instances\n\n  * Fixed one cause of \"Reachable garbage object\" for blueprint subobjects\n\n#### Gameplay\n\nAPI Change:\n\n  * UPlayerMappableInputConfig is now deprecated, you should instead use Player Mappable Key Settings on your Input Action and Input Mapping Context assets to provide the \"name\" of your key mapping. See Lyra for an example!\n\n  * You can enable this check by setting EnhancedInput.Mappings.bCheckForEmptyKeyMappingsDuringValidation to true.\n\n  * XInput 1.4 is available as a system library in Windows 10+ (the min spec for UE5), so we will now use that instead of using the older XInput 1.3 lib that is included with DirectX in the engine.\n\n  * Use CreateDefaultSubObjects for GEComponents in the Constructor, configure them, then add them to GEComponents array. You may get ensures at runtime (with hints on how to fix) if something is wrong.\n\n  * Added UAbilitySystemComponent::OnGameplayEffectInhibitionChangedDelegate.\n\n  * Introduced FindAbilitySpecsFromGEHandle.\n\n  * Introduced optional parameter to FindAbilitySpecFromHandle to handle pending adds/removes.\n\n  * Introduced some debug functionality that will attempt to catch these extremely hard to find cases where an FPredictionKey could be created and never acknowledged.\n\n    * Added console variables at the top of GameplayPrediction.h to help your upgrade path.\n  * Deprecated GetSingleTagContainer on UGameplayTagsManager because it returns a raw pointer that could crash when called from multiple threads\n\n  * Change your UGameplayEffectComponent::OnGameplayEffectChanged to use the non-const override.\n\n  * If you have a type that inherits from CineCameraComponent and requires ticking, just set PrimaryComponentTick.bCanEverTick to true in the constructor.\n\n  * Improve comments on IsRunningDedicatedServer and similar functions to clearly indicate they are meant to be used for data loading and not gameplay purposes\n\nNew:\n\n  * [GAS] Improving Gameplay Ability System Debuggers. Ability System Debug Commands have now been moved to a CheatManagerExtension. This allows multiple clients to use the debug commands and they will be applied to the correct client. Adding more comments and logging around why things can be rejected or work a certain way (e.g. AbilitySystem.Ability.Activate). GameplayCueManager now attempts to display the Gameplay Cues in non-overlapping fashion, so it's easier to see when multiple events occur for the same GameplayCue.\n\nAbilitySystem debug commands are prefixed with AbilitySystem.Ability or\nAbilitySystem.Effect depending on if you're targeting Gameplay Abilities or\nGameplay Effects.\n\n  * [GAS] Improving VisLogging Capabilities of the Gameplay Ability System. Using the VisLog is now viable for figuring out complex interactions between Gameplay Abilities, Effects, and Attributes.\n\n  * [GAS] Improving the debug facilities. Use shift-' to bring it up for the local player.\n\n    * Gameplay Tags now show state differences between Client & Server\n    * Gameplay Effects now show state differences between Client & Server\n    * Attributes can now be debugged in the Gameplay Debugger (and show important replication state)\n    * Layout and color coding have been improved\n  * Deprecate UPlayerMappableInputConfig in favor of the new UEnhancedInputUserSettings with 5.3.\n\n  * AggregateGeom (more accessors); Adding ways to get a shape by the name and get the shape index by name. -- Code -- AggregateGeom: GetElementByName() - Goes through shape arrays and returns the first found element that has the passed in name. GetElementIndexByName() - Goes through the shape arrays and returns the first found index for the element that has the passed in name. GetElementByName() - Templated version to reduce shared code. GetElementIndexByName() - Templated version to reduce shared code.\n\n  * [GAS] Exposing Gameplay Effect's GetAssetTags / GetGrantedTags to Blueprints\n\n  * Add a cvar to check to enable checking for keys mapped to EKeys::Invalid, which will allow for some better content validation if desired.\n\n  * Added a way to temporarily defer rebuilds of the GameplayTag tree managed by the GameplayTagsManager, along with a means for manually rebuilding the GameplayTag tree.\n\n  * Update to XInput version 1.4. Instead of requiring the XInput 1.3 dll from DirectX, we can just add a system dependency and it'll work. 1.4 brings some small improvements and bug fixes and is the default that is shipped with Windows 10.\n\n  * Add a flag on Default Mapping Contexts for Enhanced Input to register with the User Input settings by default.\n\n  * [GAS] Adding more data in the Gameplay Ability Audit\n\n  * Added new Blueprint functions for converting multidimensional array indices. Specifically, this adds conversion functions for 1D -> 2D, 1D -> 3D, 2D -> 1D, and 3D -> 1D indices. For example, in a 3x2 array, converting the 1D index 4 to a 2D dimensional index would yield (1,1). Tests were also added, which demonstrate usage and expected output. #virtualized\n\n  * [GAS] PR #10717: Optional parameter to GameplayTagCountContainer::Reset allows a user to empty the container while keeping all of the registered tag count change callbacks.\n\n  * [GAS] It is now easier to implement native GameplayEffects properly.\n\n  * [GAS] PR #11505: Add on gameplay effect inhibition changed delegate #contrib 11505\n\n  * [GAS] Gameplay Debugger now reconciles Server vs. Client state for Gameplay Effects, similar to how Tags and Attributes work.\n\n  * Added a non-const getter to allow classes running in editor to modify the Actions list in GameFeatureData\n\n  * SpeedMultiplier property on InterpToMovementComponent so the timing of its movement can be changed even after it has started its move.\n\n  * [GAS] Made it clear that we currently do not support replication when using InstancedPerExecution GameplayAbilities.\n\n  * Add the ability to bind lambda expressions to the Enhanced Input component outright. Also mark the delegate handles as protected instead of private so that users can more easily extend upon the Enhanced Input component and add more binding options to it if they want.\n\n  * [GAS] Changed the friendly DisplayNames of the GameplayEffectComponents to make them easier to comprehend. Inspired by PR #11357.\n\n  * Gameplay Ability System: Added a serialization operator<< implementation for FGameplayAbilitySpecHandle so users can invoke serialization on a FGameplayAbilitySpecHandle if needed. This allows FGameplayAbilitySpecHandle to be a member of structs that override NetSerialize().\n\n  * Added a new Preload In Commandlets option to the 'Add Data Registry' Game Feature Action. When enabled, the specified data registries will be preloaded when running editor commandlets. Useful for commandlet automation of editor operations that rely on Preload In Editor (which does not itself cause preloading of data in Commandlets)\n\n  * Add FBox Blueprint callable utility functions.\n\n  * Adjusting Data Registry Register Asset Result changes to be more informative for how to upgrade to the new Engine version.\n\n  * Target Selection Task: Added the ability to perform target traces using capsules and boxes in addition to the existing line and sphere traces.\n\n  * [GAS] PR #10711: Create FGameplayTagCountContainer::GetExplicitTagCount.\n\n  * Adds functionality to allow a character to stay based while jumping on a base, as long as the base is under the character.\n\n  * Added a way to temporarily override how the GameplayTagsManager handles unloading of GameplayTags in response to removing INI search paths.\n\n  * Added option to ProjectileMovementComponent to use scoped movement updates during simulation for cheaper movement/transform updates when processing multiple movements (sub-stepping or deflections). New flag: bSimulationUseScopedMovement (default false, as the delayed impact events could change behavior, use with care).\n\n  * Gameplay Tag Manager: Adjusted the loop in \"UGameplayTagsManager::StaticGetCategoriesMetaFromPropertyHandle\" to break early if the outer base class of a child property and its parent are of a different type. This helps us avoid situations where a suboject's gameplay tag property may inherit meta categories from a different class it didn't expect and cause unintented restrictions on the child tag property. [FYI] parker.linn, luciano.ferraro, natalia.miekina, bill.colby\n\n  * Targeting System / Sort By Distance: Added option for more accurate distance calculation based off of nearest collision surface instead of actor location.\n\n  * Add WaitGameplayTagChanged async tasks (ability and actor versions). This task allows reacting to all tag count changes as opposed to just Add and Remove.\n\n  * Added a non-const getter to allow classes running in editor to modify the Actions list in GameFeatureData\n\n  * [GAS] Instant and Periodic GameplayEffects now respect Modifier tag requirements\n\n  * Added an option for ProjectileMovementComponent to avoid interpolation transform updates on some frames when an object isn't as relevant. Default version is based on not recently rendered but this can be extended.\n\n  * Added new Input Modifier - Smooth Delta. It provides a normalized smoothed difference between the current and last input value, which options on how the value is calculated for different behavior. For boolean Input Values, it just returns the boolean as is.\n\n  * [GAS] Gameplay Cue Unit Tests\n\n  * Added a OnSubsystemInitialized callback to UDataRegistrySubsystem, notifying when all known data registries have been scanned and initialized.\n\n  * Add an IsDebugCameraActive method to Cheat Manager\n\n  * PR #9012: Ensure only plugins in the GameFeatures/ folder are considered as GameFeatures.\n\n  * [GAS] PR #11483: Adding Debug support for GameplayAbilityTargetActor_Radius\n\n  * Update FilterArray's result be auto-cast to the filter type\n\n  * [GAS] Added a first pass of Gameplay Ability System plug-in documentation markdown. Accepting PR's!\n\n  * Update the comments on bIgnoreAllPressedKeysUntilRelease to be clear and provide some examples.\n\n  * Optimize UGameplayTagsManager::GameplayTagsMatchDepth to remove excess allocations.\n\n  * Allow cheat manager extensions to respond to adding/removing from cheat manager in native code.\n\n  * Update the comments on the Enhanced Action Key Mapping and the Input Action asset to be very explict about the order of which modifiers are applied.\n\n  * [GAS] Introduced UGameplayEffectComponent::OnGameplayEffectApplied which corrects the rules for applying stacked GameplayEffects. The rules are simpler for Applied, but the other functions (Executed, AddedToContainer) still exist due to the complex rules.\n\n  * Added a new \"Max Once Per Frame\" parameter to TimerManager timers to allow opting out of \"catch-up\" behaviour where the timer callback will run as many times as would fit in the current frame delta. For example, a looping timer with interval 0.001s would run 9-10 times in a frame with delta 0.01s.\n\n  * Add GetOwnedGameplayTags and GetBlockedAbilityTags that return a const-ref to avoid allocating and copying\n\nBug Fix:\n\n  * [GAS] Fixed an issue where AbilitiesGameplayEffectComponent could fail to grant and remove abilities if those abilities were granted/removed during the same scope lock (due to the PendingAdds/PendingRemoves).\n\n  * Fix DataRegistry issue where an invalid table source would break the cache for other sources, and add extra validation for invalid sources\n\n  * Gameplay Tags: The native method for resolving a gameplay tag, FGameplayTag::RequestGameplayTag(), now applies tag redirectors.\n\n  * Fix for a crash when changing the class or a subobject marked as \"Within\" to a BP subclass instead.\n\n  * Gameplay Ability System: AbilitySystemComponent will now correctly perform cleanup in DestroyActiveState after leaving, re-entering and leaving play again via level streaming (including world partition) and seamless travel.\n\n  * Fixed GameFeaturePlugin config inis not applying config values to blueprint classes.\n\n  * [GAS] Various FPredictionKey Fixes.\n\n  * [GAS] Skip the check for unmapped references when receiving the replicated Server Initiated Gameplay Effects. This ensures the Gameplay Cues will always fire properly.\n\n  * [GAS] Handle 0.0f and negative time input values on GameplayTask_WaitDelay as finishing on the next tick. inspired by #contrib 11079\n\n  * UE-143412 - Using Collapse to Function inside of a thread safe graph does not mark the resulting function as thread safe Since the nodes in a threadsafe function are threadsafe, it follows that the collapsed graph is also threadsafe. Not doing so creates a clumsy workflow: the Blueprint will fail to compile until the user manually marks the collapsed function as threadsafe.\n\n  * Fixed root motion replication to proxies when finishing root motion to ensure the replicated shadowed state is correct on the frame that root motion finishes.\n\n  * [GAS] PR #7531: GAS stops search for PC only if valid PC is found\n\n  * [GAS] Ability System Debug HUD now uses the correct source for CanActivateAbility.\n\n  * Fixed issue where loading Gameplay Tag Containers before the tags were registered would cause non-exact matches to randomly fail\n\n  * [GAS] Gameplay Effects could previously hold on to old GameplayTags (they were stored in deprecated variables)\n\n  * [GAS] PR #10922: fix removing gameplay effect delegate handle\n\n  * Common Conversation Plugin: Changing ExitTag generation when compiling conversation graph assets to use AddTag instead of AddLeafTag. Using the leaf version was causing issues for conversation graphs that used both a a child and a parent tag for two different exit points. The result was the parent tag exit point getting ignored and thus that exit point not counting as a dependency for the given conversation asset, which could butterfly effect into sync loads because the given graph is not pre-loaded properly when readying a conversation component. - Affected Conversation Graphs will need to be re-saved for the fix to take effect. [FYI] bill.colby\n\n  * [GAS] UGameplayEffectComponent::OnGameplayEffectChanged has been changed to non-const to allow the proper flow of updating its values on Post Blueprint Compilation.\n\n  * [GAS] Ensured all FScopedServerAbilityRPCBatcher prediction keys generated in its batch are dependent.\n\n  * [GAS] Gameplay Cue Notify Actors are now removed properly on Listen Server instances.\n\n  * [GAS] FActiveGameplayEffect::GrantedAbilities was not handled property in copy/move constructor/operators.\n\n  * [GAS] AbilitySystemComponent::NotifyAbilityEnded was marking Gameplay Abilities as Garbage, but they could still be used in later functions.\n\n  * [GAS] PR #11117: Fixed typos and wrong parameter name in comments in the AbilitySystemComponent header file\n\n  * Added scoped movement update for character mesh to avoid redundant movement of mesh children during multiple scoped moves within CharacterMovementComponent. Also cleaned up previous scoped update into it's own wrapper struct to make it easier to use and find uses of that versus other scoped moves.\n\n  * Gameplay Tags: Fixed FGameplayTag and FGameplayTagContainer pin value modifications not being undoable/redoable. Now properly creates a transaction in Undo history. Additionally, the pin \"Reset to Default Value\" action now also creates an undoable transaction.\n\n  * GitHub 11226 : Fix newline escaping in DEFINE_TARGETING_DATA_STORE A backslash shouldn't appear on the last line of a macro definition. The continuation of the newline can potentially yield compilation errors on some platforms. #contrib 11226\n\n  * Fixed handling of character movement timestamp resets that arrive during ForcePositionUpdate, so they correctly trigger timestamp reset callbacks and sync the time correctly. Fixed APlayerController::TickActor() not resetting forced update state once good new moves had been received, it was waiting on the max timeout period first.\n\n  * [GAS] PR #7661: Mark functions as virtual in AbilityTask_WaitTargetData.\n\n  * UCharacterMovementComponent::RoundAcceleration() changed to match the same rounding and clamping that is used by replication of FVector_NetQuantize10.\n\n  * [GAS] Removing a GameplayEffect that uninhibits while being removed would previously cause an ensure to happen. This is actually a valid use case.\n\n  * [GAS] Fix TryActivateAbilitiesByTag crash due to iterating on pointers on a mutable (resizable) array of ActivatableAbilities.\n\n  * [GAS] Fixes for GameplayCueNotify OnActive executed twice for Duration GEs on Standalone + ListenServer in Mixed/Minimal Replication Mode.\n\n  * Avoiding potential double registration of static mesh proxies after moving an actor, this fixes one cause of \"Assertion failed: !Primitive->SceneProxy\"\n\n  * [GAS] GameplayEffect's GrantedAbilities were not auto-upgrading properly. Removing GrantedAbilities in a child GE would previously not be respected upon upgrading.\n\n  * [GAS] Fix for newly created Gameplay Effects not getting their proper version number set to latest (and therefore not working correctly until an Editor restart).\n\n  * Character movement should attempt to base on cluster unions - not the underlying geometry collection.\n\n  * Gameplay Abilities System: Fixed a client-side crash when an Attribute Set is removed server-side prior to or at the same time as a Gameplay Effect is removed that modifies an attribute from that set.\n\n  * [GAS] Moving the GameplayEffects logs from LogAbilitySystem to LogGameplayEffect. Enhancing the locations of the logs to provide better context to what is happening.\n\n  * [GAS] Fixing a regression where Gameplay Cues may receive two OnActive calls when executed by a non-instant Gameplay Effect.\n\n  * [GAS] Fixed AbilitySystemGlobals resetting the FActiveGameplayEffect Handle Cache too early (during a map change).\n\n  * UE-203565 - OnBrowseSocket BP Menu failing to open when the SubobjectEditor list is docked to the side panel or closed. When a window is docked in the Blueprint editor, it gets added to the STabSidebar, which is created by the toolkit host. If we use the current SSubobjectEditor as the widget path, we won't actually find a window, because it now lives under the STabSidebar. As a result, the drop down menu for mesh sockets would fail to open. The easiest fix is to simply use the toolkit host's parent widget, which finds the correct widget path in the docked and undocked cases.\n\n  * Gameplay Abilities System: Fixed a client-side crash that happened when showing a GameplayAttribute debug view with the console command AbilitySystem.DebugAttribute when the server has applied runtime constructed GameplayEffects, due to those being replicated with null Spec.Defs.\n\n  * Fixing a non-deterministic replay crash caused by level streaming not always completing during replay playback by the same frame it completed when recording the replay. This could result in dropping dependent packets or delivering them out of order in a way that the client isn't expecting to handle. Created a new cvar demo.DoNotDropPackets which will prefer to pause the playback until the prerequisites are satisfied. Gating behind a cvar to ensure backward compatibility and because dropping packets is required to ensure consistent framerate (at the cost of further reducing determinism).\n\n  * Fixed a performance regression of USceneComponent::GetChildComponent() from unnecessary implicit TObjectPtr conversion.\n\n  * Added an explanatory message to !IsUnreachable() assertion failure in UObject::ProcessEvent().\n\n  * Fixed CineCameraComponent registering for tick in builds where it won't do anything useful.\n\n  * Data Driven CVars now show their tooltip as hint text in the in-game console when suggested by auto-complete.\n\n  * Do not attempt to load the project default IMC assets on the CDO of UEnhancedPlayerInput. Doing so will result in any subobjects of the IMC (triggers, modifiers, player mappable key settings) being null at the time of loading if they are outside the Enhanced Input module. We can't guarantee that the load order of these modules such that they would be available before the EI module is being loaded, so we can just skip them here.\n\n  * Making sure FGameplayTag meta properties of Categories and GameplayTagFilter are interchangeable and case insensitive\n\n  * ChildActorComponent no longer holds onto its ChildActor if it has already been destroyed - this prevents a 'reachable garbage object' warning related to ChildActor objects.\n\n  * Gameplay Ability Montage / Bug Fix: Fixed montages not replicating what section to play on simulated clients when the AbilitySystemComponent is set to only replicate the current montage section instead of the percise montage position. The current montage section would only be replicated when jumping to a section, and not when naturally transitioning from one section to the next. This has been fixed by ensuring SectionIdToPlay is updated in AnimMontage_UpdateReplicatedData. NextSectionID is now also utilized when only replicating section to improve the transition between sections.\n\n  * [GAS] Allow Gameplay Abilities to use Blueprintable Replicated Variables.\n\n  * Fix a bug where the \"OnForceFeedbackFinished\" on Force Feedback component would never be called.\n\n  * Fixed cases where mid-tick changes in movement mode could continue movement with the old mode's Phys** function in a customized CharacterMovementComponent\n\n  * UE-203280 - Blueprints from UE4 with dangling delegate reroute node crashes on UE5 load GetLinkedDelegateSignature has a fairly aggressive assert. It's entirely possible that a knot (reroute) node doesn't have an output linked. In those cases, we can safely break out of the loop, since there won't be a linked delegate signature.\n\n  * Fix an error error when overriding vector axis key bindings on an input component.\n\n  * Shorten GFP plugin identifier to just be the leaf file name. This avoids issues with non-normalized paths.\n\n  * Fix crash when trying to delete an in-use DataRegistry source in the editor\n\n  * Prevent a crash on the player controller when attempting to restart the player if the game mode was null. So far the only known case of this happening is if you delete everything from an active PIE session and then attempt to respawn the pawn. Now instead of crashing, we wil log that it is happening and early exit.\n\n  * Fixed issue in CharacterMovementComponent where a delayed movement adjustment would have the adjusted movement mode overwritten with the current mode, sometimes resulting in a mismatch and further corrections\n\n  * Fixed issue where a character could intend to stay vertical (aligned with gravity) but unable to change pitch or roll to get there.\n\n  * [GAS] Properly dirtying the ActiveGampelayEffects array when granting a new Gameplay Ability Spec Handle.\n\n  * UE-194830 - The Blueprint compiler is not consistent with UHT when generating DefaultToInstanced variables Object properties that reference a DefaultToInstanced class also need to set the \"EditInline\" metadata to true. Otherwise, this property can't be instanced in the editor. This mimics UHT's behavior for UhtObjectProperty.\n\n  * Fixed a few different crashes that were a result of a replicated LevelSequenceActor being recreated on client, but using a SequencePlayer from a previous, destroyed copy of that actor that hadn't been garbage-collected yet.\n\n  * [GAS] Ensure that UAbilitySystemGlobals::InitGlobalData is called if the Ability System is in use. Previously if the user did not call it, GAS did not function correctly.\n\n  * Gameplay Ability System: Fixed a crash that happened when a GameplayAbility destroys its owning actor on ability activation, due to actor destruction attempting to clear the ability list while in an ABILITY_SCOPE_LOCK. Calling ClearingAllAbilities() while in a scope lock will now defer the action until the end of the scope. Abilities are now allowed to destroy their owning actor on ability activation.\n\n  * Gameplay Ability System: Fixed a crash that happened when an AbilitySystemComponent has pending TimerManager callbacks from GameplayEffects with durations when it's unloaded as part of a sublevel. ASC now correctly clears pending TimerManager callbacks on removal from world.\n\n  * Fix route gamepad to second window. Gamepad input was never being routed to the next viewport client during a PIE session with multiple viewports.\n\n  * Make the Enhanced Input BP node module PreDefault instead of Default. This fixes a bug where enhanced input nodes would sometimes not be loaded in template C++ projects.\n\n  * [GAS] Ensured FPredictionKeys only attempt to \"catch-up\" if they were locally generated.\n\n  * Fixed it so actors that are spawned during world initialization will not call PostRegisterAllComponents (and related functions) twice. s.OptimizeActorRegistration can be used to restore the old behavior or add additional error logging\n\n  * Optimize TQuat::Slerp_NotNormalized(). Removes 1 branch, based on negative angle identity for Sine function. Added startup tests to validate old versus new function and also test both versions for both positive and negative 'RawCosom' values (not previously tested).\n\n  * Fix GameFeatureAction_AddAttributeDefaults not cleaning up references to objects when unregistered\n\n  * [GAS] Fixing up a case where OnRemoveAbility would not EndAbility on a non-instanced Ability that was still Active.\n\n  * [GAS] PR #10474: Update GetAbilitySystemComponent to default parameter to Self\n\n  * Fixed inconsistent tooltip for Blueprint config variables. GetConfigName doesn't always return the base name of an .ini file, which is what we want. For example, if the class uses DefaultEngine.ini for its config values, GetConfigName will return the base name, \"Engine\". However, if the class uses DefaultEditor.ini, GetConfigName returns the path to the merged .ini file that's located under the game's \"Saved/Config\" directory. Since ClassConfigName corresponds to the base name of a config file, we can just use that for the tooltip.\n\n  * [GAS] PR #11119: GameplayEffect ApplicationRequirements Upgrade Fix\n\n  * Expand the use of UProperty's ForceRebuildProperty to include properties inside nested properties such as UStructs.\n\n  * Add location to HitResults from Targeting Selection Task AOE\n\n  * Fixed issue where transient DataRegistry data sources were not being correctly removed from the RuntimeChildren array when a registry was Deinitialized\n\n  * [GAS] PR #6354 : Fix ability montages stopping abruptly on simulated proxy\n\n  * [GAS] PR #10990: GAS Montage Section Crash Fix\n\n  * [GAS] When using ForceReplication on the AbilitySystemComponent, also call ForceReplication if using a ReplicationProxy Actor to ensure the prompt delivery of GameplayCues and GameplayTags.\n\n  * [GAS] PR #8063: FGameplayEffectContextHandle : Check is data valid before retrieve \"Actors\"\n\n  * Fixed for GameplayAbilities not always being removed from the ReplicatedSubObjectsList prior to being marked as garbage\n\n  * [GAS] PR #7542 : Retain rotation for GAS Target Data LocationInfo\n\nDeprecated:\n\n  * [GAS] Cleaning up some misconceptions (and bugs) about dependent FPredictionKeys inside the Ability System. We no longer replicate FPredictionKey::Base because it's never used. Inspired by #contrib 11151\n\n  * The FPlatformNamedChunkInstallDelegate has been deprecated in favor of the more extendable FPlatformNamedChunkCompleteDelegate.\n\n  * [GAS] InhibitActiveGameplayEffect was reusing an ActiveGE which could have been invalidated. Deprecating that function in favor of SetActiveGameplayEffectInhibit to make it clear to users this can happen.\n\n#### Mass\n\nAPI Change:\n\n  * Where before INDEX_NONE was previously used to denote an 'invalid' StaticMeshDescIndex (e.g in FMassRepresentationFragment), we now use FStaticMeshInstanceVisualizationDescHandle::InvalidIndex to denote invalid Mass static mesh instance visualizations.\n\n    * FStaticMeshInstanceVisualizationDescHandle itself does have special case handling to internally convert INDEX_NONE to the new InvalidIndex value on construction, which should catch most cases automatically, however it's recommended for any comparisons of StaticMeshDescIndex against INDEX_NONE to be explicitly converted to the new InvalidIndex value. To ensure comparisons aren't silently mismatching against the old INDEX_NONE, StaticMeshDescIndex has been renamed to StaticMeshDescHandle in FMassRepresentationFragment to force the breaking change.\n\nNew:\n\n  * MassAI - Added gdt.mass.ToggleDebugLocalEntityManager console command to toggle between local / remote entity manager debugging in the Mass gameplay debugger category. Useful if your game is overriding the default shortcut (Shift + L).\n\n  * Made UMassActorSpawnerSubsystem::ReleaseActorToPool a virtual method to allow subclasses to customize actor pooling behavior.\n\n  * PR #9620: Fix typo in MassEntityZoneGraphSpawnPointsGenerator.h\n\n  * Added support for all owned queries for processors inheriting from UMassSignalProcessorBase\n\n  * Added GetNumMatchingEntities overload to FMassEntityQuery for calculating the number of matching entities in an FMassArchetypeEntityCollection array.\n\n  * Added mass.debug.Representation CVar similar to mass.debug.RepresentationLOD to debug draw representation states for entities. Also added the ability to set both mass.debug.Representation and mass.debug.RepresentationLOD to 2 to VisLog states instead, or 3 for both VisLog and debug draw.\n\n  * Added UPROPERTY markup to various fragment struct members for text export. This allows them to appear in the Mass category of the AI gameplay debugger when inspecting fragment values on a debugged entity.\n\n  * PR #9351: Fix typo in MassVisualizationComponent.cpp error message\n\n  * Mass Visualization - Switched signed int16 StaticMeshDescIndex handles to new explicitly typed FStaticMeshInstanceVisualizationDescHandle which uses unsigned uint16 internally, to double the number of possible ISMC visualization registrations.\n\n  * Added mass.debug.Representation.MaxSignificance and mass.debug.RepresentationLOD.MaxSignificance CVars to limit debug drawing for performance and readability with large agent counts.\n\n  * Added const and non-const shared fragment accessor methods to FMassEntityManager.\n\n  * Replaced FMassTagBitSet with FMassArchetypeCompositionDescriptor in the MassExecutionContext. This follows the addition of DoesArchetypeHaveFragment which originally used the fragment view, making the lookup more expensive than it needed to be. This change gives access to the full bitsets used by an archetype to provide a more efficient lookup as well as room to expand in the future for other types of fragments.\n\n  * MassVisualizer actors are no longer visible in the outliner so user can't delete them.\n\n  * PR #9326: Fix typos in comment in MassAgentComponent.h\n\nBug Fix:\n\n  * Updated some processors that shouldn't run in Editor\n\n  * Fragment data is now always applied before notifying observers when adding new fragments instances\n\n  * PR #10931: Fix MassRepresentationAccessMode Made an additional fix to another query detected by checkSlow #contrib 10931\n\n  * Fix false positive error log for reaching the loop maximum when flushing Mass command buffers.\n\n  * MassRepresentation processor dependency ordering fixes: Added UE::Mass::ProcessorGroupNames::LOD to ExecuteAfter dependencies for UMassRepresentationProcessor by default, to ensure LOD computation occurs before MassRepresentationProcessor tries to enact the requested LOD's representation changes. Also put UMassStationaryISMSwitcherProcessor.cpp in the Representation processor group, still keeping it's explicit ExecuteAfter of UMassVisualizationProcessor within the group.\n\n#### Networking\n\nAPI Change:\n\n  * When running with Iris enabled, the following CSV stats will no longer output a value (previously would just output 0):\n\n    * GatherPrioritizeTimeMS, NumOpenChannels, NumSkippedObjectEmptyUpdates, NumTickingChannels, ReplicateActorTimeMS, SharedSerializationPropertyHit, SharedSerializationPropertyMiss, SharedSerializationRPCHit, SharedSerializationRPCMiss\n  * Changed UNetDriver::ERemoteFunctionSendPolicy from an enum to an enum class so you may have to fully scope it if you were using it in your code.\n\n  * When running with Iris enabled, the CSV files will now include metrics for:\n\n    * ReplicationBridge_PreUpdate, ReplicationBridge_PollAndCopy, ReplicationSystem_UpdatePrioritization\n\nNew:\n\n  * Iris - Added filter inclusion group feature. Filter inclusion groups are processed after dynamic filtering, filters implemented via UNetObjectFilter implementations, and their only purpose is to optionally enable replication of objects that were filtered out. This allows for example an object to be spatially filtered out but then enabled by a team or view target group for example. No such groups are implemented by default, it's up to the user to implement the relevant game logic to create, update and destroy such groups. Only root objects may be added to filter inclusion groups, subobjects will be filtered like the root object.\n\n  * Add some replication testing utilities & a test case for renaming dynamic actors on servers. UE::Net::FTestWorldInstance and and UE::Net::FTestWorlds enable writing synchronous test cases within the scope of one function that create full UWorlds and utilize the whole networking & replication path. Useful for testing features that rely on worlds, actors, streaming levels, etc. The worlds created are PIE worlds and they currently only work in the editor.\n\n  * Added console command to set nettrace verbosity at runtime - NetTrace.SetTraceVerbosity [verbositylevel]\n\n  * Added log in NetDriver initialization telling what replication mode its set to.\n\n  * Deprecated FFastArraySerializer::FPostReplicatedReceiveParameters::bHasMoreUnmappedReferences as its behavior is inconsistent and code should not rely on it.\n\n  * Added cvar net.SerializeNewActorOverrideLevel to optionally bring back the functionality of not serializing a replicated, spawned actor's level, which will cause it to spawn in the persistent level on clients, regardless of its level on the server.\n\n  * Iris - Implemented support for Apply in FNetSerializer. If implemented it will be called when pushing received state to the target state. FRepMovementNetSerializer makes use of the new functionality to avoid overwriting quantization levels.\n\n  * Iris - Add concept of Ordered RPCs. Unicast RPCs are now ordered with respect to reliable RPCs and other unicast RPCs targeting the same actor. From client to server all reliable and unicast RPCs are ordered with respect to eachother, regardless of target actor.\n\n  * NetDriver * Added exclusive csv cpu scope to FlushNet call to track time spent inside NetworkHandlerComponent (compression, encryption, socket send, etc.)\n\n  * Net.DebugDraw 1 now showing NetGUIDs\n\n  * Added some optional handling of replicated actor outer changes on servers.\n\n    * Only supports dynamically spawned actors, not placed actors\n    * ReplicationGraph support added and toggled with the cvar Net.RepGraph.HandleDynamicActorRename\n    * Cvar net.CleanUpRenamedDynamicActors will tell clients to destroy an actor if the server moves it to a level that's not currently visible on the client (disabled by default to preserve current behavior)\n  * Stripping non-iris CSV net metrics when running Iris NetDrivers. Previously all these were set to 0 and output every frame, so this should reduce raw csv size quite a bit. You can now also define these in BaseEngine.ini\n\n  * Iris - EndReplication now handles ending replication for objects marked as garbage. - Fixed ensure when executing DestructionInfos for objects with SubObjects\n\n  * Added optional cvar net.ClientIncomingBunchFrameTimeLimitMS to amortize incoming network processing over multiple frames, as an option to trade off some latency for frame time. Disabled by default.\n\n  * NetDriver: Added engine crash context \"ReplicationDriver\" * Set to Generic, Iris or the class name of the replication driver\n\n  * Iris: Added ability to prefer a Replication System via the GameMode class. When a game mode selects a specific replication system, the server will create its GameNetDriver using that mode if compatible. Note that the clients are NOT able to ask the game mode for the proper repsystem, so use this only when you can correctly predict the proper mode before connecting on the server. Otherwise the clients may disconnect due to incompatible netdrivers. PIE clients started inside a single process will use the correct repsystem of the dedicated server. Setting -UseIrisReplication=0/1 on the cmdline will override the GameMode's requested system.\n\n  * Changed UNetDriver::ERemoteFunctionSendPolicy from an enum to an enum class\n\n  * Iris: The GameInstance can now request a replication system via GetDesiredReplicationSystem\n\n  * Network: Improved handling of ack history overruns which will no longer cause false negatives, if we overshoot ackhistorybuffer client will now flush the sequence history before accepting new data packets.\n\n  * NetDriver:\n\n    * Added tracking stats to NetConnection that track number of rpcs delayed by unmapped guids and how many frames they were delayed by.\n    * Added tracking stats to NetDriver that track number of reliable bunches.\n    * Added console cheats to force only unreliable RPCs to be dropped. This can be used to better simulate a scenario where specific unreliable RPCs get dropped and not resent but not the adjacent property data sampled the same frame. Useful to test gameplay code using unreliable RPCs.\n    * NetEmulation.DropAnyUnreliable : drops a % of all unreliables sent\n    * NetEmulation.DropUnreliableOfActorClass: drops a % of all unreliables sent by a specific class\n    * NetEmulation.DropUnreliableOfSubObjectClass: drops a % of all unreliables sent by a specific class\n    * NetEmulation.DropUnreliableRPC: drops a % of all unreliables of the passed function name.\n    * NetEmulation.DropNothing: stops dropping unreliable rpcs\n  * Adding CSV stats for Iris PreUpdate, Polling and Prioritization\n\n  * NetDriver: Now collecting the amount of packets sent & received by each connection each frame. Outputting in csv profiler the average and max per-connection packets received and sent every frame. Added net.ForceOnePacketPerBunch cheat to force every packet to contain a single bunch. This can be used to debug rare ordering issues when two actors are dependant but should not.\n\n  * Added logging of actor & property name for more cases of replication serialization errors.\n\n  * Increased the reliable buffer for replicated bunches to 512.\n\n  * Added LogNetTraffic error that tells which RPC failed to send when the reliable buffer overflows.\n\n  * Iris: Added support for sending attachments flagged as SendImmediate from PostDispatchTick\n\n  * Added ValidateActorReferences to RepGraph and RepGraphNode types * Iterates over all nodes in the RepGraph and checks for potentially stale actor references\n\nBug Fix:\n\n  * DemoRecording: Fix CanSkipUpdate when demorecording is enabled alongside an Iris netdriver PushModel is not enabled to generic NetDrivers when Iris is enabled in another net driver.\n\n  * Fixed issue where some exports was not properly exported with recorded demo frame if exported by checkpoint causing bunch errors due to not all must be mapped exports being registered.\n\n  * Add P_GET_WEAKOBJECT_NO_PTR and P_GET_WEAKOBJECT_REF_NO_PTR script macros to avoid issues with repnotify functions for TWeakObjectPtrs that pass in the old value.\n\n  * Fix crash with GameplayDebuggerCategoryReplicator when its held by ReplicationGraph. Setting it bReplicateToOwner should only have been done when Iris is actually running.\n\n  * Iris - Fixed issue where object could get stuck in state waitforcreateconfirmation, if cancelling creation, and then cancelling destroy.\n\n  * Networking: Replicated components added in the ConstructionScript of a blueprint class will now be considered netaddressable and properly mapped on the client instead of instantiated twice. * Now ensuring when we start replicating a dynamic UserConstructionScript component that is built from an archetype different from the class CDO. The client version of such components were always initialized using the class CDO and probably initialized wrong.\n\n  * Iris: Fixed disconnect issue on clients due to server sending more data to not yet acked hugeobjects.\n\n  * PushModel: Fix RemoteRole not synced correctly when push model is enabled * Calling ForceCompare() will now force push model properties to be evaluated even if they are not flagged dirty.\n\n  * Fixed an issue where replicated actors may not replicate correctly if they're dormant and have dormancy flushed while a client doesn't have the actor's level loaded. Controlled by cvar net.FlushDormancyUseDefaultStateForUnloadedLevels.\n\n  * Iris: Keep reliability as is when splitting a NetBlob. Split unreliable multicast RPCs will now also keep their normal execution order.\n\n  * Fix actor component created post-beginplay that were getting added to the replicated subobject list despite IsReplicated being false\n\n  * Fixed an issue where replicated object pointers to subobjects that are net-addressable/stably-named may not replicate or map properly. Controlled by cvar net.RemapStableSubobjects.\n\n  * ChildActorComponent: Fix simulated actors using the wrong template to spawn the actor if the CAC template instance is of the wrong type.\n\n  * Fixed replication of object references in UNetworkPhysicsComponent's rewind data.\n\n  * Iris: Properly manage partially resolved refererences to only include them in applied state when they are resolved.\n\n  * Fixed shutdown crash in FNetGuidCache and FObjectReferenceCache\n\n  * Fixed a bug in Replication Graph where an actor having its dormancy state set to awake may have been treated as always net relevant unintentionally.\n\n  * Iris: Fixed issue where subobjects of objects pending dormant all would not always be polled as they should\n\n  * Network insights: Fixed aggregate display in PacketView\n\n  * Iris: Fixed BitStream corruptions due to sending unexpected data to not yet confirmed objects - Fixed issue where PendingFlush would not properly flush attachments if posted on the same frame as the object was destroyed if it was waiting for creation confirmation.\n\n  * Iris: Fixed ensure when client destroys actor marked as bNetTemporary.\n\n  * ReplicationGraph: Ensure when an actor is replicated with bNetTemporary set\n\n  * NetDriver: Fix for Push Model may prevent actors from going dormant * Now testing changelist history in CanSkipUpdate\n\n  * Iris: Fix issue where state changes accrued while going out of scope and later readded to scope was not dirtied correctly\n\n  * Fixed an issue in Replication Graph when Net.RepGraph.DormantDynamicActorsDestruction is enabled where dormant actors may fail to replicate correctly if they have dormancy flushed while a client is outside of their network relevancy range.\n\n  * Iris: Added code to trap cases where we call EndReplication from client code where it shouldnt be called - Fixed issue with client calling EndReplication on components when it should not.\n\n  * SubObject Replication: Make sure new subobject bunches are always reliable even if the subobject created an object replicator earlier than expected. PR #9850: Fixed an issue where Object requested an unreliable RPC before the ObjectReplicator was sent for the first time\n\n  * Iris: Fixed floating point precistoin bug with really high priorities which caused issues with scheduling of dependent objects\n\n  * Fixed a bug in network replays/the DemoNetDriver where if a recording time limit was set via the SetMaxDesiredRecordTimeMS function, some actor destruction wouldn't be properly recorded in the replay.\n\n  * Fixed issue where FNetBitArray::FindLastZero would return index out of bounds for array sizes not aligned with the size of the storage.\n\n  * Fixed an issue where replicated fast arrays in replicated subobjects may get redundant change notifications when flushing dormancy. Controlled by cvars net.EnableFlushDormantSubObjects and net.EnableFlushDormantSubObjectsCheckConditions.\n\n  * Iris - Added explicit configuration of splitsizes for unreliable attachments from server and client - Fix issue with old moves being delivered from client if split and packet dropped.\n\n  * Fix an issue in multiplayer PIE where some actors in world partition levels wouldn't replicate properly.\n\n  * Iris: Changed Iris FastArraySerializer implementation to not rely on ItemMap when issueing FastArraySerialzierCallbacks as the itemmap was reset from callbacks\n\n  * Ensure that DormantConnections and RecentlyDormantConnections are cleared for seamlessly travelling Actors, to prevent issues with replicating dormant actors that were persisted through a seamless travel\n\n  * Iris: Fixed issue with posting rpcs to out of scope subobjects being scheduled with internal index and transmitted with invalid object.\n\n### Content Samples\n\nNew:\n\n  * Archvis template has an updated GPU Lightmass map\n\n  * Archvis SunSky Reverted Indirect lighting intensity setting from 2 to default 1\n\n### Level Design and Art Tools\n\nBug Fix:\n\n  * Fixed an issue with the mesh painting tools loosing its texture override on an material intstance when an static permutation is enbabled.\n\n  * Fix Pilot Actor not creating a transaction.\n\n#### Geometry Core\n\nNew:\n\n  * Updated TQuaternion::EpsilonEqual to recognize that the negative of a quaternion is also equal, and added an IsIdentity() method.\n\n  * FDynamicMesh: add a CanCollapseEdge function to check if an edge collapse might fail before actually trying it\n\n  * Exposed a new property bIsEditable on UDynamicMeshComponent to allow them to block any modifications done through EditMesh/SetMesh. Additionally, when this flag is set to false, the UDynamicMeshToolTarget is blocked from being created for the dynamic mesh component so modeling tools can't edit the mesh either.\n\n  * The Convex Decomposition merge algorithm now supports callbacks to optionally track or prevent merges, allowing the algorithm to be used with more fine-grained control, and in new contexts.\n\n  * Added a new polygon-based simplification method to ConvexHull3, and a tolerance for the initial hull build, to support use cases where we do not need an exact hull and can prioritize using fewer plane + avoiding near-degenerate planes in the output. This simplification is especially effective for cases where a large number of near-coplanar faces would exist in the exact-hull output.\n\n  * Added cbrt (cube root) function to mathutil\n\n  * Added support for inverting Transform Sequences, appending inverses of transforms to Transform Sequences, and for testing if a TTransformSRT3 can represent its own inverse (to help efficiently represent Transform Sequence inverses)\n\n  * Added a static helper to the convex hull class to compute the convex hull volume for an array of points\n\n  * Added a normal-based clustering algorithm, which groups connected triangle groups based on the current average normal of the group.\n\nBug Fix:\n\n  * Fixed an issue where the convex decomposition proximity graph could be incorrectly generated, leading to suboptimal results.\n\n  * Improved robustness of the edge bevel operation\n\n  * Fixed a race condition in the sparse dynamic point octree sampling method, which could cause a crash in the ComputePoissonSampling method\n\n  * Fixed Polygon2::Simplify's handling of case when initial close-point-removal reduces polygon to two points\n\n  * Fixed crash in convex hull generation when tolerance-based point discarding is enabled.\n\n  * Fixed a bug where polygon offsetting could crash or use excessive points when the output is an ellipse.\n\n  * Fixed an issue where the mesh simplification and remeshing code could skip considering some edges for simplification/remeshing.\n\n  * Fixed an issue where the convex decomposition algorithm could fail to respect requested negative space in some cases\n\n  * Added the option to StaticMeshOperations::TransformMesh to correctly transform the normals and tangents. Default to the current behavior, which instead matches UE renderer. Add comments explaining both paths.\n\n  * Made the MergeCoincidentMeshEdges operation not ensure on inputs with near-zero bounding box size\n\n  * Improved robustness of the FGeomTools2D::TriangulatePoly method, making it more likely to successfully create a triangulation\n\nDeprecated:\n\n  * Removed the deprecated FTransformSRT3's Inverse and legacy ExactPredicates methods from GeometryCore\n\n#### Geometry Script\n\nNew:\n\n  * Added a geometry script function to transform simple collision shapes.\n\n  * Updated the display names of Geometry Script methods for setting per vertex normals, to clarify which computes new normals and which copies them from an input list.\n\n  * Added a 3D polygon triangulation Geometry Script method, using ear clipping.\n\n  * New DynamicMeshComponents now default to using externally-provided tangents, and have UI-exposed settings to change how their tangents are determined.\n\n  * Geometry Script's CopyMeshFromComponent method can now optionally read instance colors from Static Mesh RenderData LODs.\n\n  * Added a new method for Geometry Script to approximate convex hulls with spheres or boxes, if the shape is similar enough.\n\n  * Added new geometry script functions to copy and transfer simple collision shapes from dynamic and static mesh components\n\n  * Added additional spline->polypath conversion functions to support converting subsections of splines within a specified time or distance range, and to also get distance values associated with each point.\n\n  * Added support for Geometry Script to convert Geometry Collections to Dynamic Meshes, via the CopyMeshFromComponent method\n\n  * Added new point set functions to Geometry Script, including methods for for k-means clustering, computing bounding boxes, and converting between arrays of transforms vs arrays of points\n\n  * Added a level set option to the geometry script 'Collision From Mesh' method\n\n  * Added Geometry Script methods for directly manipulating sphere coverings, which can be used to control convex decomposition and convex hull merging algorithms.\n\n  * Added a MergeSimpleCollisionShapes function to Geometry Script, which can reduce the number of simple collision shapes by merging them. This works via convex hull merging, so merged shapes will always be convex hulls, but shapes that are not merged will be left with their original type.\n\n  * Added an 'AppendSimpleCollisionShapes' Geometry Script function, which constructs mesh representations of simple collision shapes\n\n  * Added new properties to control the sample range for the Geometry Script spline->polypath and spline->transform array functions\n\n  * Added support for a min thickness parameter in Geometry Script collision shape merging\n\n  * Dynamic Mesh Component's complex collision mesh now supports physics materials\n\n  * Added convex hull simplification to the geometry script collision functions\n\n  * Added support for generating and visualizing sets of spheres that define important negative space around a shape, and for generating collision shapes which do not overlap those spheres.\n\n  * Geometry Script methods to set collision on static mesh can now control whether the static mesh collision is marked as customized. This is useful for example to distinguish manually-modified collision from collision that was set by Geometry Script as part of an import pipeline.\n\n  * Dynamic Mesh Component can now show collision in the editor view\n\n  * We now optionally allow empty results for Geometry Script mesh Boolean operations\n\n  * Added a Geometry Script function to combine simple collision shapes, by adding the shapes from the second to the first.\n\n  * Added more point set functions for Geometry Script: 1. OffsetTransforms to offset the location of all transforms in an array, e.g. to move them all along their local Z if you want to move mesh samples along their normal 2. DownsamplePoints to downsample points to a fixed number of samples, optionally with priority weighting and approximate uniform spacing\n\n  * Added a DetermineMeshOcclusion method to detect mesh instances that are fully occluded in a scene.\n\n  * Added a method to remove unused vertices from a dynamic mesh\n\nBug Fix:\n\n  * Fixed a crash on appending to an empty polygon list\n\n    * Made the polygon path offset functions properly update their success flag output, and respect the 'copy input on failure' setting.\n  * Made Geometry Script's methods to copy from/to static mesh properly respect the static mesh build scale.\n\n  * Fix geometry script's ray plane intersection function\n\n  * Made USplineComponent's public, recursive spline sampling functions work correctly for arbitrary curve ranges; previously they only sampled the spline accurately for short ranges (half a spline segment).\n\n  * Guarded against the runtime StaticMesh -> DynamicMesh conversion functions crashing when CPU access to render data is not available; they should now instead ensure with a message explaining that CPU access is required\n\n  * The Geometry Script 'Recompute Normals' method now logs a warning if it is called on a mesh with no attributes or no overlay normals, and defaults to a per-vertex overlay in that case.\n\n#### Modeling Tools\n\nNew:\n\n  * Made the modeling mode physics inspector automatically update its visualization when collisions are updated by external actions\n\n  * Selectable mesh elements are now highlighted when Mesh Element Selection is enabled.\n\n  * Added Bridge action to TriEdit.\n\n  * Level Sets can now be more accurately visualized by the modeling tools, using their surface instead of a grid of cubes.\n\n  * Changed: Changed Tool Presets flyout dialog in the New Preset window to use a list presentation instead of a tile presentation, allowing for more clarity in reading names on long preset collection labels.\n\n  * Added the option for the Mesh Inspector to draw edges without depth testing, so it is easier to see all the holes or other potential issues in a mesh\n\n  * BakeVertex improvements to per channel bakes\n\n    * BakeVertex per channel bakes will now only write over the specified channels.\n    * BakeVertex can now specify One/Zero evaluators for per channel bakes to flood a channel with the respective value.\n  * Added an offset parameter to the Spline Tool, to support drawing splines that are not directly on the clicked surfaces\n\n  * Added support for deleting polygroup edges.\n\n  * Added collision shape merging to the 'mesh to collision' tool\n\n  * Made the Mesh to Collision tool support its Min Thickness option for more collision shape types, and disable the option when it is not supported.\n\n  * Added new space protection settings to the Mesh to Collision tool's convex decomposition method.\n\n  * Added an 'At Origin' option for the desired Target Position in the Add Primitive Tool\n\n  * Add a method for IModelingModeToolExtensions to provide tool target factories so that plugins can extend the interface with new ToolTargets.\n\n  * The Mesh to Collision and Inspect Collision tools can now optionally show solid renderings of the collision shapes, in addition to wireframes.\n\n  * Remesher: add an optional edge length scale function that can be used for adaptive-density remeshing\n\n  * Made the Convert tool support a larger range of scene component sources, including Geometry Collection.\n\n  * PDI thick line rendering now uses fewer triangles per line and is faster, improving responsiveness of preview wireframe rendering for some tools\n\n  * Made modeling mode tools that do not affect selection auto-restore the previous selection after use.\n\n  * Add support for copying simple collision shapes in more tools, including Merge, Boolean, and some Voxel tools.\n\n  * Scene snapping now works in the DrawPolygonTool when the mouse is not hovering over the tool plane. This allows the user to be positioned between the tool plane and the objects being snapped to in the scene.\n\n  * Adds 'Local Frame Mode' toggle in the Mesh Element Selection Toolbar Settings so users can edit with the gizmo frame based either on the selected geometry only or on the entire object\n\n  * The ScriptableTools plug-in is now moved from Experimental to Beta.\n\nBug Fix:\n\n  * Fixed confusing comment leaking into editor tooltips for Y axis of FVector/FVector4/FQuat properties\n\n  * Fixed undo for the AutoLOD tool when modifying an existing static mesh.\n\n  * Improved Mesh to Collision tool capsule auto-detection, to prevent cones and cylinders-with-open-ends from being detected as capsules\n\n  * Changed the hotkey for 'Lock Rotation' from 'Q' to 'Ctrl+R' in Polygroup Edit, allowing the 'Q' hotkey to enable selection as expected\n\n  * Updated LOD Manager's preview of nanite triangle percent to the newer/more-prominent Keep Triangle Percent\n\n  * Fixed an issue where that caused the mouse to spuriously jump to origin in some cases when modifier keys were pressed\n\n  * The Static Mesh Editor now properly handles level sets in the same way as other simple collision shape types.\n\n  * GroomToMesh tool: update the default value for RadiusScale to account for hair radii values no longer being normalized\n\n  * The Simple Collision Editor tool now only run on targets that support writing collision. This fixes an issue where it would previously appear to allow editing the auto-generated collision for volumes, but discard the result.\n\n  * Fixed an issue where the primitive tools (Add Box, Sphere, etc) could place the primitive behind the camera in some cases.\n\n  * Fixed an issue where the Generate PolyGroups algorithm would randomly create very large, oddly-shaped regions in cases where the settings would normally generate many single-triangle regions.\n\n  * Made the modeling tools correctly handle static mesh build scale.\n\n  * Fixed the 'mesh to collision' tool not properly updating dynamic mesh component collision settings\n\n  * Fixed the coordinate frame used when applying scaling in the Lattice tool\n\n  * Fixed undo for simple collision shape updates for Dynamic Mesh components in some modeling tools\n\n  * Fixed an issue with the Mesh Splines tool where best fit planes for separate splines would all still use the same plane origin, so adjusting one spline could affect the triangulation of another.\n\n  * Scene snapping used when placing new primitives in the modeling tools now filters shape components in the same way as volumes, so that e.g. a trigger box is filtered (or not) in the same way as a trigger volume.\n\n  * Fixed an ensure in the PolyEdit's tool's edge loop selection\n\n  * Fixed a crash in the Draw Spline tool if an unusable blueprint class is requested.\n\n  * Fixed a crash on interacting with sockets in the static mesh editor when the sockets window was not open.\n\n  * Fix an issue where cancelled mouse-drag actions would be incorrectly handled as successful mouse-drag actions for some modeling tools.\n\n  * The Mesh to Collision tool now respects the weld edges setting, instead of always welding mesh edges.\n\n  * Fixed an issue where the Boolean and Merge tools would set updated materials on the asset but not the component, and so could show incorrect materials on an updated actor.\n\n  * Fixed an issue that could occur in dynamic sculpting and other tools on an undo in the middle of a click-drag action.\n\n  * Fixed an issue where some edges and vertices could not be moved with the mesh element selection system\n\n  * Geometry Tools: Mesh LOD Toolset - fix bug in LODManager that could leave the mesh hidden after deleting the highres mesh. Also made sure the displayed information was correctly updated after undo in the tool\n\n  * Improved gizmo placement for polygroup edges that form closed loops.\n\n  * Made the Mesh to Collision tool's box auto-detection more robust, so it no longer detects staircases as boxes.\n\n  * Added a filter to skip degenerate triangles when converting a mesh to a volume, so volumes created by the modeling tools are more often valid. This fixes collision for the modeling mode cone and arrow primitives when they are created as blocking volumes.\n\n  * Fixed a bug which previously did not allow PolyGroup preview to be displayed in the viewport when using the Generate PolyGroups Tool\n\n  * Fixed an issue where the initial preview of the merge mesh tool would appear in the incorrect location.\n\n  * Fixed a bug with 'Clean Materials' in the LOD Manager Tool which was removing the incorrect material\n\n  * For Mesh to Collision tool, improve auto-detection of spheres, so that e.g. low-poly cone shapes are not recognized as spheres.\n\n  * Changed display name for Draw Spline's 'World' mode to 'World Objects' to try to make it clearer that it's raycasting to objects in the world\n\n  * Fixed an issue where some of the modeling mode collision tools handled non-uniform actor scale incorrectly.\n\n  * Fixed an ensure on trying to place a new modeling tools primitive mesh in a level when a volume is in the level and volume snapping is enabled\n\n  * Fixed an issue the Simple Collision Editor and Mesh To Collision tools would not correctly undo for Dynamic Mesh components.\n\n  * Changed LOD manager's \"Show Seams\" option to \"Show Borders\" and disabled it when the default LOD is showing\n\n  * Fixed an issue where the Collision to Mesh tool would set incorrect transforms on simple collision shapes when Output Separate Meshes was enabled.\n\n  * The Bake Transform and Edit Pivot tools no longer create two transactions when editing meshes with convex collision shapes, as the bug that required this workaround has been fixed.\n\n  * Fixed a crash in the Draw Spline tool when the referenced blueprint is recompiled while the tool is in use.\n\n  * Fixed an issue where vertex colors were used to render the modeling mode selection material.\n\n  * Fixed a crash when inspect tool properties are modified after tool shutdown\n\n  * Fixed an issue where the source mesh would be invisible if the Plane Cut tool was started with Show Preview unchecked\n\n  * Made usability fixes to the Mesh to Collision tool: Added tooltips, removed the non-functional Simplify Polygon property, and made the Simplify Hulls toggle no longer affect the Swept Hull polygon.\n\n  * Geometry Tools: TransfromUVs, fixing undo within the tool. GeometryFramework: Adding primary UVs to FVertexChange data.\n\n  * Fixed a bug in the Mirror Tool which previously ignored scale transforms when writing to new objects\n\n  * Bug Fix: Updated missing and incorrect icons for mesh selection mode.\n\n  * When manually updating Brush Size in Group Paint Tool, the new size is now reflected in viewport immediately, without having to click in viewport to see updated size\n\n  * Fixed an issue where non-uniform scaling of a selection in modeling mode could be incorrectly disabled or use the wrong coordinate frame.\n\n  * Clamped Poly Edit's bevel distance ranges to avoid weird results for negative, zero, and very large bevel distances.\n\n  * Preview mesh now properly updates when toggling Shells to Solids in the PolyEdit extrude activity.\n\n  * Fixed an issue where some brush properties were shared across vertex painting tools that did not expose those properties in the UI, which could leave those tools stuck in an unexpected state.\n\n  * Fixed an ensure in the Hole Fill tool for meshes complicated open boundaries\n\n  * In the Mesh Element Selection Toolbar, when the Local Frame Mode is set to 'From Object,' the gizmo is now placed at the selected geometry's pivot, rather than the object's pivot\n\n  * Made ctrl+click to position custom plane work more consistently in the Draw Spline tool\n\n  * Fixed an ensure in the Auto UV tool when processing meshes with no colliding components.\n\n  * Fixed an issue in the BakeTextures tool where MaterialID bakes resulted in gaps in the gutter pixels.\n\n  * Fixed incorrect positioning of the extent gizmo in the pattern tool on undo/redo.\n\n  * Fixed a crash in the AutoLOD tool when running on invalid StaticMesh assets.\n\n  * Fixed an issue where the UV Layout tool would incorrectly continue to show a preview wireframe after the preview was toggled off.\n\nDeprecated:\n\n  * Deprecated the FGenericMeshSelection struct, which is a now-unused part of a previous version of the modeling mode's selection system.\n\n#### Procedural\n\nAPI Change:\n\n  * AttributePartition and AttributeGenericPartition C++ API Extended in PCGMetadataPartitionCommon.h to support a TArrayView of selectors\n  * Modified MetadataPartition node to support multiple partitioning of attributes\n\n  * The BP library for setting and getting graph parameters has been updated to receive a graph interface, which now includes both graphs and instances.\n\nNew:\n\n  * Added support for Named Reroutes in the PCG Editor.\n\n  * Added support for feedback loops where some results can be passed from one itheration to the next. Improved UI and pin properties to support this.\n\n*Added a Get Loop Index node.\n\n  * [PCG] Added a node that creates point data\n\n  * [PCG] Nativation of CombinePoints Node, which combines each point to share a singular bound extent.\n\n  * [PCG] Enabled Force Generation for PCG Component\n\n  * [PCG] Nativized SplitPoint node, which splits each point into two separate points, and sets bounds based on the position and axis of the cut\n\n  * Subgraph nodes now support recursion and will continue executing until there are no inputs left.\n\n  * [PCG] Created a context menu which creates a subgraph node or loop node when dropping graph assets in graph\n\n  * [PCG] Nativized DuplicatePoint node, which creates duplicates of each point with optional transform offsets.\n\n  * [PCG] Add Replace Tag node for data tags\n\n  * [PCG] Added a node that sorts points based on attribute\n\n  * [PCG] Nativized DistanceToNeighbors node, now named Point Neighborhood\n\n  * [PCG] Added a node that adds tags from the output pin to the next node.\n\n  * [PCG] Added a node that creates points in a 2d or 3d grid\n\n  * [PCG] Included support for partitioning (including CreatePoints)\n\n  * Added new mode of generation for PCG Components called 'Runtime Generation', used for efficiently scheduling components for generation and cleanup based on proximity to 'Generation Sources' such as the player.\n\n  * Added visual edge feedback when debugging (e.g. fat edges) and editor settings to control the appropriate values. Enabled inspection on reroutes and named reroutes.\n\n  * [PCG] Nativized ApplyScaleToBounds and EditPointCenter blueprint nodes\n\n  * [PCG] Added ApplyScaleToBounds which converts scale of a point into the bounds\n\n  * [PCG] Added EditPointPivot - (renamed from ResetPointCenter)- which sets a new center point for the point, adjusting the bounds\n\n  * Added PCGWaterInterop plugin with a 'Get Water Spline Data' node for getting 'Water Spline Components' in the level. Provides read-only access to Water Spline Metadata from PCG graphs.\n\n  * [PCG] Added a node that applies a new random seed from point input using its position and user seed input.\n\n  * [PCG] Create Sample Texture node, which samples the color of a texture at each point\n\n  * [PCG] Added context menu to debug object tree, enabling jumping to a specific node/graph by right clicking the object in the debug tree\n\n  * Added 'Preview' and 'Load-as-Preview' modes on the PCG component which allow changes on the component without dirtying while retaining ability to save pregenerated data and keep regeneration working.\n\n  * Made the 'keep zero density points' option available in non-editor builds and non-transient where it makes sense (in data operations, not filtering elements)\n\n  * Created new Visualize Attribute node, which currently prints an attribute's value to string with an offset for each point input\n\n  * Added Runtime Quality Branch and Runtime Quality Select nodes. Added 'pcg.Quality' console variable ranging from 0 to 4 (Low, Medium, High, Epic, Cinematic).\n\n  * Made the search recursive in the PCG Editor so we can easily find things in subgraphs as well\n\n  * Added multiple details view and multiple attribute list views in PCG Editor with locking mechanisms.\n\n  * Add actor property overrides to spawner nodes.\n\n  * Added options to the get landscape data node to be able to retrieve physical material, component key, proxy touched.\n\n  * Added support for compressed texture formats with PCG 'Get Texture Data' node.\n\n  * Support Texture2DArrays in Texture Sampler\n\n  * Added some flexibility around how we serialize and build the landscape cache (never, always, only on cook). Set on the Landscape Cache object on the PCG World actor.\n\n  * [PCG] Reduced the cost of target calls, added ShouldComputeFullOutputDataCrc() for performance\n\n  * Added a dependency only pin on the Gather node so that execution can be sequenced without requiring to filter data.\n\n  * Added wire thickness settings in PCG editor.\n\n  * Added a new Filter node, \"Filter Data By Index\", which will filter a data collection by user selected indices\n\n  * Added 'Get PCG Component Data' node for getting generated graph outputs from other PCG Components in the level.\n\n  * [PCG] Added support for CopyPoints node to allow multiple sources and targets\n\n  * Add 'Apply On Actor' node. Applies property overrides and executes provided functions on a target actor.\n\n  * Added native and blueprint element templated pins to the Proxy node\n\n  * Add post-process functions on Spawner nodes ('Static Mesh Spawner', 'Spawn Actor', 'Create Target Actor', and 'Create Spline') that allow calling functions on the relevant target actor.\n\n  * Added Attribute Set to Points and Points To Attribute Set nodes.\n\n  * Updated the Volume Sampler to the new Time Slice Context\n\n  * Added 'Number of Samples' mode to the 'Spline Sampler' node that samples a given number of evenly spaced points along the spline.\n\n  * Add 'Create Surface From Spline' node for creating an implicit surface from a closed spline.\n\n  * Created a new \"Time Slice\" context to make time-sliced node authoring simpler and consistent\n\n  * Updated the Surface Sampler to the new context\n\n  * Added Filter Data By Attribute node that verifies if data has some attribute or not. All filter data nodes now have both an in filter & out filter pins to allow easier manipulation.\n\n  * Updated C++ API in PCGMetadataPartitionCommon.h to support partitioning on multiple attributes\n\n  * Provide option on 'Spline Sampler' to have segment index as a metadata attribute. Provide boolean on 'Spline Sampler' to know if a point is a control point (Subdivision Mode only). Provide option on 'Spline Sampler' to have control point tangents as metadata attributes.\n\n  * Added overriding properties in the Static Mesh Spawner when spawning By Attribute, which will partition points based on the overrides and create one ISM per customization.\n\n  * Added match to nearest (& threshold distance) on the Match & Set.\n\n  * Added a new Control Flow node, \"Select (multi)\" which operates on int, string, and enum values\n\n  * Created a native PCG data asset class and an accompanying level-to-data-asset menu action. Replaces the editor utility blueprint that we had before. Also update the Alembic-to-PCG importer. #contrib 11380\n\n  * Added Delete Tags node\n\n  * Added \"Sum\" mode in the reduce node.\n\n  * Added a new node called \"Print String\" which will emit a log/warning/error to the log, and optionally the graph and screen as well.\n\n  * Refactored Graph Parameters to operate with PCG Graphs directly\n\n  * PCG Biome Core experimental plugin added. The Biome Core is a data-driven PCG biome creation tool example. #virtualized\n\n  * Added a Color Projection Mode to the Projection Element to include Source, Target, and common Blend modes (Add, Subtract, Multiply)\n\n  * Added option to get both the single point and the data from the generation at the same time on the Get Actor Data node.\n\n  * Replaced C++ API PCGPointProcessingElement with new PCGPointOperationElement to simplify authoring point operation elements and benefitting from Time Slicing.\n\n  * Four new dynamic events are now available to bind to on the PCG Component\n\n    * OnPCGGraphStartGenerating\n    * OnPCGGraphCancelled\n    * OnPCGGraphGenerated\n    * OnPCGGraphCleaned\n  * Add double-clicking rows in the 'Debug Object Tree View' to auto-expand and select the first entry as the debug object.\n\n  * Added the Proxy node that can execute other nodes (including dynamically selected values). Update the Load Data Table to allow outputting an Attribute Set Table instead. Added the Get Attribute Set By Index akin to the Point version.\n\n  * Add editor command to rename nodes in PCG Graphs. Hit 'F2' or right-click the node and select 'Rename'. Double clicking node title no longer begins editing the title for nodes in PCG Graphs.\n\n  * Added iterative relative transformation in the DuplicatePoint node.\n\n  * Added the Match And Set node that allows to copy all attributes from a given Attribute Set Table entry when there is a match against a given attribute (similar to a join). Also supports additional selection by weight.\n\n  * Add EPCGTextureFilter for Point and Bilinear filtering on 'Get Texture Data' node.\n\n  * Add option to compute alpha and distance along curve as attributes in PCGSplineSampler. Alpha is a value in [0,1] along the curve where each segment of the curve represents the same interval. For example, if the curve has three segments, points on those segments would lie in [0,0.333], [0.333, 0.666], [0.666, 1] respectively, and interpolate across those intervals using the spline's interpolation. Distance is the total cumulative distance along the spline to reach a given sample point\n\n  * Added support for actor post-process functions that take Point + Metadata as parameters on the 'Spawn Actor' node.\n\n  * Added merge attribute set node\n\n  * Provide flag 'bForceEditorOnlyCPUSampling' on 'Get Texture Data' node to force creation of a CPU-accessible duplicate of the texture. Avoids GPU compression artifacts and allows for more accurate sampling.\n\n  * Updated the Attribute (metadata) operations to support multiple inputs in cases where it would make sense. Now accepts N:1, N:N operations on input pins.\n\n  * Support sampling textures marked as 'CPU-accessible' in PCG Texture Data.\n\n  * Added ability to copy all attributes in the Copy Attribute node.\n\n  * Replaced the Intersection node with a new Intersection node, which supports dynamic source inputs. Primary inputs will be iterated on and secondary inputs will be implicitly merged. The previous Intersection still exists, but has been renamed \"Inner Intersection\"\n\n  * Added some abnormal state logging that will iterate over everything from the PCG menu.\n\n  * Added a new Control Flow node, \"Switch\", which operates on int, string, and enum values\n\n  * Added the option to tag some graphs as editor-only to prevent some data validation issues. This is a transitive property (through subgraphs) and is propagated to PCG components as well.\n\n  * Added mode to spawn actors selected by attribute in the Spawn Actor node.\n\nBug Fix:\n\n  * Fixed culling in CreatePoints and CreatePointsGrid nodes where it wasn't working properly for local components.\n\n  * Fixed a bug where in the Static Mesh Spawner, the ISM Body Instance Customization was displaying default channels after reloading the Editor\n\n  * [PCG] Fixed issue with AddTags node outputting overrides\n\n  * Fixed profiling issues that were corrupting profiling data (in the PCG Profiling window) especially in loops & dynamic subgraphs.\n\n  * Subgraph nodes with no selected subgraph (& no dynamic graph provided) now act as passthrough nodes.\n\n  * Fixed a bug causing the Volume Sampler to sample the last column in X, Y, Z incorrectly\n\n  * Two console variables 'pcg.CheckSamplerMemory' and 'pcg.SamplerMemoryThreshold' have been added to help alleviate an Out of Memory crash when unintentionally sampling too many points.\n\n  * [PCG] All native nodes now forward tags\n\n  * [PCG] Fixed issue where multiple debug object tree objects could be selected\n\n  * Fixed a bug where the PCG Volume did not properly follow surface normals in the Editor.\n\n  * Improved support of PCG inside of level instances.\n\n  * PCG static mesh spawner now respects the ISM component type decision and applies a change only in HISM+Nanite cases\n\n  * Bug Fix: [PCG] Fixed attribute selectors that were not overridable\n\nDeprecated:\n\n  * Removed the per-node tag filtering and tagging as this was marked deprecated already in previous versions.\n\n    * Nodes that were using the Add Tags On Output and had downstream nodes will have new nodes adding tags added automatically. Removed the 'remove duplicates' option on the debug settings since it served no real purpose and was transient.\n  * Removed deprecated pins by default on input node. Existing pins will continue working and feed in the data the right way but future work should use the appropriate Get...Data nodes.\n\n#### UV Editor\n\nNew:\n\n  * Added a new UV Editor tool, Texel Density, which supports manipulations of texel density for UV Islands. The new tool supports a sampling mode, to read and apply texel density from one region of a mesh to other regions or meshes.\n\nBug Fix:\n\n  * Added missing localization text for Transform Tool's property categories.\n\n  * Fixed issue where unwrap material was set with a depth offset multiplier that rendered mesh lines difficult to see in the unwrap view of the editor.\n\n#### World Building\n\nNew:\n\n  * Branch culling to avoid executing inactive nodes downstream of Branch and Switch nodes.\n\n    * Required pins added to native nodes which must be wired for node to be compiled and executed.\n    * Requiewd Unified visualization of culled state in editor (covering both compilation-time and execution-time culling).\n    * CanCullTaskIfUnwired added to node settings API to always execute some nodes, even if unwired.\n  * PCG - first pass of world builder added to generate PCG components in a level.\n\n  * Display grid size label on nodes when inspecting hierarchical generation.\n\n  * World Partition Editor QoL Make sure we can only play with the Loaded Regions & related streaming features when the streaming is enabled. Hide the loaded regions when we toggle the Streaming enable so we keep them. When converting a Loaded Region to LocationVolume, make sure we have an incremental label for the user. Make sure the scaling gizmo would be intuitive on the Location Volume (after converting a loaded region) by scaling the brush instead of the actor. Fixed : Converting a loaded region into an asset does not count as a transaction on the undo history, but deleting it from the viewport or the outliner does.\n\n  * Greatly optimized FActorFolders in PIE (now has no impact of PIE performance) - Outliner automatically hides empty folders in PIE\n\n  * InstancedStaticMesh Serialization Optim+Fix when bEditableWhenInherited == false (PackedLevelActors) - Avoid persisting PerInstanceSMData, PerInstanceSMCustomData in this case and copy values from Archetype - Also assign NumCustomDataFloats from Archetype in this case to fix warning (issue was with PerInstanceSMCustomData being always serialized and NumCustomDataFloats being delta serialized causing warnings before ReRunConstructionScript got to run)\n\n  * PCG Replace \"Can Be Multithreaded\" option on PCG Blueprint nodes with clearer \"Requires Game Thread\"\n\n  * PCG - multi-line node titles supported with sub-lines giving task information\n\n  * WorldPartition: Added Blueprint function UDataLayerManager::GetDataLayerInstances and exposed to BP UDataLayerInstance GetDataLayerShortName, GetDataLayerFullName and GetAsset.\n\n  * Allow Get Actor Data to trigger generation when querying data from Preview components that are not already generated.\n\n  * Added builder support for generating Preview components.\n\n  * PCG - Add Make Concrete conversion type for wiring to Concrete pins, performs a collapse of non-concrete Spatial data.\n\n  * World Partition: Expose Per User Settings into Editor Preferences (under World Partition (Local) section)\n\n  * PCG- Added new Get Bounds node to compute bounds of input Spatial data\n\n  * World Partition Editor: Add option (slider) to play with the unloaded region opacity (default is now ~10% brighter). Tweak clamp between good values with the rest of the features such as highligting regions, loaded regions. Value is saved in PerProjectUserSettings.\n\n  * Avoid unnecessary graph executions when switching between debug objects one component\n\n  * World Partition * Add an editor preference to log the generate streaming in PIE (default true).\n\n  * Modified WorldGridPreviewMaterial to preview streaming with both 2d and 3d components when using the new Runtime Hash. - Added a hatched grid pattern to display 2D cells within 2D range - Replaced the 3d streaming spherical radius display with 2D circle instead - Full semi-opaque cells without the hatched pattern represents the actual 3D loaded cells using the spherical test. #changelist validated\n\n  * Remove debug object dropdown from PCG graph editor, functionality replaced with Debug Object Tree window\n\n  * PCG - Added warning/error status icons to Debug Object Tree with summary tooltip\n\n  * World Partition Editor Hide Options menu when no option are available (mostly for UEFN). Use UToolMenu for the Contextual Menu. This way Licensees and FN could extend it. Re-org the Contextual options for clarity. * Make Load From Here a user create region to be consistent with the editor and remove No loaded region tip.\n\n  * ReplaceActors: Selection optimization (costing > 40seconds for about 500 selected actors). Avoid notifying for every selection change since it is already inside a batch operation.\n\n  * Add an option to place actors under a subfolder instead of the root when breaking a Level Instance. If this option is enabled, the actors will be placed inside the folder the LI is inside of, under a subfolder with the name of the Level Instance, and also keeping their original folder structure. So if i.e. the Level Instance Actor is called \"Desert/LI_House2\", and an actor inside is named \"Lights/Light_Sun\", the actor will be moved to \"Desert/LI_House2/Lights/Light_Sun\" in the outer level.\n\n  * UDataLayerEditorSubsystem now exposes to Blueprint functions to Add/Remove Data Layers to the Actor Editor Context.\n\n  * PCG - Add actor volume output to grid size node, and add Cull Points Outside Actor Bounds node, for convenient culling of data outside of the current grid cell.\n\n  * Sanitize attribute names when creating from component/actor tags. Replaces invalid characters with underscores.\n\n  * [PCG] Avoid unnecessary graph re-executions when trivial changes are made to a graph such as adding a new unwired node which will be culled during compilation.\n\n  * External Data Layer V1 - Allows for plugins to inject/remove content (actors) in a partitioned world - Serves as a replacement for the experimental 'Content Bundle' feature - Added new External Data Layer (EDL) Asset - Added new Game Feature Action 'AddWorldPartitionContent' to control activation of an EDL asset - Supports Data Layers inside a plugin (child of an EDL) - Added builder to convert content bundles to EDL (UGameFeatureActionConvertContentBundleWorldPartitionBuilder) - Feature is temporarily disabled by default and can be turned on using Editor Experimental Settings 'Enable World Partition External Data Layers' flag\n\n  * Packed Level Actor: Avoid updating blueprints if packing result is unchanged\n\n  * Exposed UDataLayerLoadingPolicy and FWorldPartitionActorViewProxy to plugins via ENGINE_API\n\n  * PCG - when inspecting a node, debug objects for which this node produced output data are highlighted in the Debug Object Tree.\n\n  * PCG - Projection node defaults to automatically collapsing point projections to point output data.\n\n  * [SceneOutliner] Using Load and Unload selected volumes context menu options for LocationVolume in the Outliner does not grey out these options.\n\n  * [PCG] Disable warnings on grid size nodes if higen disabled or if component is not partitioned, so that graphs are portable across different execution setups.\n\n  * Finer-grained change propagation during graph execution - CRC computed per node output pin rather than for the whole output data collection.\n\n  * Get Actor Data element (and other typed getters) default to performing a full data CRC on point data which can also avoid unnecessary re-execution.\n\n  * Implemented dormancy for AWorldDataLayers which reduces actor replication to the minimum (i.e. replicates only when necessary).\n\n  * WorldPartition: Added option in WorldDataLayers actor to save each DataLayerInstances in their own file (disabled by default)\n\n  * PCG - Disable Hierarchical Generation when a graph is executed as a subgraph, to avoid conflicts in grid level designations between this graph and the parent graph.\n\n  * World Partition Editor Upgrade overall UX (new icons, new menus, new toolbar, new layout) Now possible for licensees to extent options in our menus. * Add same LevelViewport actions in the WP Editor (Build Hlods, build minimap, etc.) via new Build menu.\n\nBug Fix:\n\n  * Refactored UWorldPartitionLevelStreamingDynamic to go through ULevel::CleanupLevel for trashing packages and clearing standalone flag.\n\n  * PR #10872: Fix crash in data layer editor when streaming-out a partitioned level with runtime data layers #contrib 10872\n\n  * PR #10609: Nullify World->ContentBundleManager if World Partition is disabled. * Could happens when switching from non WP world to WP world. #contrib 10609\n\n  * Fixed ULevelStreamingLevelInstance::LoadInstance to properly handle a streaming level load while the underlying streaming level already exists but has not executed/completed. Added bAllowReuseExitingLevelStreaming to FLoadLevelInstanceParams to allow reusing an existing streaming level (defaulted to false).\n\n  * FAsyncPackage and FAsyncLoadingThread2 CallCompletionCallbacks now properly sets GPlayInEditorID with associated package request PIEInstanceID using FPlayInEditorLoadingScope.\n\n  * Fixed UWorldPartitionLevelStreamingDynamic::RequestLevel which didn't properly handle requesting a WorldAsset already requeted by another streaming level in the world (affects PIE). Refactored ULevelStreaming to share code with child classes.\n\n  * LevelInstanceSubystem: Handle OnCleanupWorld to properly cleanup currently loaded LevelInstances as CleanupWorld doesn't do proper streaming out of levels Reported through UDN : This is an issue with UWorld::ReInitWorld() (which is called on \"Rebuild All\"), it calls CleanupWorld / InitWorld which was leaving the LevelInstances in a bad state.\n\n  * Fixed the server not respecting the runtime Data Layers logic operator.\n\n  * ApplyCVars Fix: Move Effective values from globals (which could change between cook and runtime) to per SpatialHash values that are initialized only when GenerateStreaming is called This also fixes ApplyCVars being called mulitple times in PIE when using Level Instances which could lead to different results if Level Instances were using different settings than main world\n\n  * Choose File To Save: Fix issue where Saving a map would save it's dirty actors even if they werent selected by the user\n\n  * Fixed regression in APlayerController::ClientFlushLevelStreaming_Implementation introduced by 1730015 (inverted logic). ClientFlushLevelStreaming was not flusing which was causing replication issues when a client joins a server which previously streamed sublevels.\n\n  * Fixed PIE crash when client tries to connect to the server: loaded world package PIEInstanceID was not set and package name had no preflix UEDPIE. This change is basically a revert of an old CL 1810531, which doesn't really go into the details on the change outside of mentioning that it's was a temp fix. Loading a PIE World without its package PIEInstanceID nor properly fixing up for PIE is not a supported code path.\n\n  * PCG - Fix bug where projected splines do not work when fed to a Difference node.\n\n  * Fixed world partition streaming generation not properly handling dirty actors of a newly created level based on a template partition map.\n\n  * WorldPartition Server streaming : Make sure the server streaming always loads a bit more than the client. This is necessary to avoid making the client wait indefinitly for the server to finish loading cells that are not even requested by the server because of a slight difference between client and server streaming source locations. Network quantization and world partition location/rotation quantization can contribute to this difference. - Added wp.Runtime.ServerStreamingSourceMinimumExtraRadius to control the minimum extra radius applied on server streaming sources. - Added wp.Runtime.ServerStreamingSourceMinimumExtraAngle to control the minimum extra angle applied on server streaming source shapes.\n\n  * Fixed cooking indeterminism caused by code assuming that IAssetRegistry::GetAssets returns a deterministic ordered list (which is not true).\n\n  * WorldPartition: wp.Runtime.UpdateStreamingStateTimeLimit is now ignored if world is HighPriorityLoading or is in SeamlessTravel or if is inside a BlockTillLevelStreamingCompleted or if match hasn't started. [FYI] tyler.staples\n\n  * Fix crash when wiring nodes.\n\n  * Added virtual UWorldPartitionRuntimeCell::ShouldServerWaitForClientLevelVisibility which can be overriden to allow for a server cell to ignore client level visibility before unloading the cell. - WorldPartitionStreamingPolicy keeps UPROPERTY references for activated/loaded cells to avoid any deinjected cells to be GC'ed. - Deprecated IsAddedToWorld and CanAddToWorld in UWorldPartitionRuntimeCell as they are no longer used - Removed unused SortedAddToWorldCells in UWorldPartitionStreamingPolicy\n\n  * Fix some data CRC issues where graph was not re-executed correctly when an attribute name is changed.\n\n  * Delete Actor: Avoid warning about Soft/Hard references if that reference is also being deleted\n\n  * Defer FWorldPartitionRuntimeSpatialHashGridPreviewer material initialization (loading) to avoid calling LoadObject during async load.\n\n  * Fixed removal of leaf data layer instance (when using data layer parenting) that was not properly updating parent. Fixed removal of a data layer instance which could trigger an infinite loop when reparenting children of the removed data layer instance.\n\n### Online\n\nNew:\n\n  * Added new plugin EOSOverlayInputProvider to forward input to the EOSSDK Overlay and stop transmitting input to the game when it is open.\n\n  * Added bugfixes and missing logic to ensure Dedicated Server Sessions work in Lyra when using OSS EOS.\n\n  * Add OnlineRequiresSecondLogin console variable to OSS Null for testing the use case of a system being offline when it is first launched\n\nBug Fix:\n\n  * Fix Icmp ping posix implementation and enable it for iOS\n\n  * OnlineBeaconClient now cleans up properly if the beacon's NetDriver is pending destruction.\n\n#### Hotfix System\n\nNew:\n\n  * Added UCurveTable modification callback deferral in OnlineHotfixManager, significantly saving the number of callbacks if performing a large number of row updates.\n\n#### HTTP\n\nNew:\n\n  * Enable event loop by default on most of the platforms.\n\n  * Add http request progress delegate 64 bit support.\n\n  * Improve default HTTP retry behavior when services do not indicate how long to wait for retries - Retry period changed from linear to exponential; - Adds random jitter multiplication to computed backoff. Final default retry lockout period formula looks like this: RandRange(JitterMin, JitterMax) * Pow(Base, RetryNumber + 1 + Bias) where RetryNumber is 0, 1, 2, 3... Defaults: JitterMin = 0.5 JitterMax = 1.0 Base = 2.0 Bias = 1.0\n\n  * Deperecate the FGenericPlatformHttp::UsesThreadedHttp interface and remove corresponding impls, now all platforms are using threaded http requests.\n\n  * Deprecated HttpTimeout config, use HttpActivityTimeout or HttpTotalTimeout instead; Deprecated HttpReceiveTimeout and HttpSendTimeout config, only use HttpActivityTimeout; Made HttpActivityTimeout work on all platforms, not only CurlHttp.\n\n  * Update RapidJson to latest code at commit 3f73eda.\n\n  * Added http fail reason interface in http request and response, instead of using the status to check if it's connection failure or any other reason.\n\n  * Make sure don't pass received data to stream interface after cancelling the http request or after shutdowning http module.\n\n  * Switched to use thread-safe delegates for http requests.\n\n  * Added the support to make http retry system don't rely on Tick from game thread.\n\n  * Added status code received callback for early access before downloading request complete.\n\n  * Add third party library RapidJSON_v1.1.0.\n\n  * Removed the dependency of http request from http response; Make http requests use GET by default if verb is not set.\n\n  * PR #10520: Fix issues with non blocking sockets in SocketBSD preventing http server from serving large files on linux\n\n  * Extract the Response from http request implementions into HttpRequestCommon; Fix the issue the response in request is not cleared on some platforms when retrying.\n\n  * Added GetEffectiveURL interface to get the effective url after redirection.\n\n  * Changed default send/receive timeout(HttpActivityTimeout) to 30s.\n\n  * Change the default connection timeout to 30s.\n\n  * Made all http impls respect the connect timeout set in http module.\n\n  * Added runtime args for enabling/disabling http event loop.\n\n  * Fixed the potential HTTP dead lock when Flush while canceling request; Add the ProcessRequestUntilComplete sync call to IHttpRequest.\n\n  * Added optional, separated retry limit support for connection error in http retry system.\n\nBug Fix:\n\n  * Fix the issue on certain CPU, the http thread hang forever because of the incorrectly calculated elapsed time.\n\n  * Fix dependency chain on \"Chaos\" plugin in WebTest to depend on \"JSON\" instead\n\n  * Fixed a potential crash in http curl impl when destroy http requests.\n\n  * Make sure to re-open the file when retry http request with streaming upload request.\n\n#### Online Subsystem\n\nNew:\n\n  * OnlineSubsystemEOS: Add \"-EpicSandboxIdOverride\" command line argument, which takes precedence over the \"-EpicSandboxId\" argument passed by Epic Games Launcher.\n\n  * EOSShared: Add IEOSPlatformHandle::GetConfigName to expose the config used to create the platform instance. OnlineServicesEOS: Modify OnlineServicesEOS*::GetEOSPlatformHandle to return IEOSPlatformHandlePtr, so the config name etc is accessible.\n\n  * Update the CreateSession BP node to include a \"Use Lobbies If Available\" boolean.\n\n  * Add the ability to specify Steam OSS server names via config files\n\n  * OnlineSubsystemEOS: Removed bShouldEnforceBeingLaunchedByEGS config variable. Licensees using this mechanism should migrate to using the \"LauncherChecks\" mechanism (see bUseLauncherChecks in TargetRules.cs)\n\n  * Added logic to test OSS EOS Leaderboards Interface methods via console commands.\n\n  * Updated Google SignIn implementation in OSSGoogle Android to use latest dependencies. Added silent sign in and support for offline access\n\n  * OSSEOS - Added IUniqueNetIdEOSPlus interface, to expose getters for the underlying Base and EOS NetIds. Simply cast your EOSPlus FUniqueNetId to IUniqueNetIdEOSPlus. Note this is only safe if FUniqueNetId::GetType() returns \"EOSPlus\".\n\n  * Added purchasing and store interfaces to Steam. Purchased apps connected to your main apps will now automatically show up as a receipt in the purchasing interface. For more complex microtransaction support, a new steam purchasing link has been added that allows you to maintain the same Online Subsystem interface purchasing flow as you do for your other platforms but interweave in the Steam-required server implementation for microtransactions.\n\n  * Update GooglePlayBillingLibrary to v6.0.0\n\n  * Full integration of EOSSDK 1.16.1 binaries, headers and libraries.\n\n  * Update Steamworks SDK to 1.57 Expose Steam's GetAuthTicketForWebApi via IOnlineIdentity::GetLinkedAccountAuthToken\n\n  * Update GoogleSigniIn SDK to 7.0.0 on iOS\n\n  * OnlineServicesCommon - Add MakeExecHandler helpers\n\n  * OnlineError OSSv2 logging changes- Fixed ToLogString discarding the prefix even if the option is set to true. The new format looks something like this- [1.1.5-3.1.17] NotImplemented (EOS_MissingInterface) ToLogString now logs the human readable ID instead of the binary ID (i.e. [1.1.5-3.1.17] instead of the binary representation of that)\n\n  * Return the result of show login UI so game can distinguish between console login failure and cancellation.\n\n  * EOSSDK - Delete NDA platform documentation, this is available on the EOS docs site now.\n\n  * Lyra now has a simple sessions-based presence plugin that uploads data of the running session (or main menu status) to the online subsystem\n\n  * Add some config vars for Steam OSS timeouts\n\n  * Added built in support for SteamChat's rich presence keys and friend grouping keys\n\n  * Added logic to prefer AccountPortal + PersistentAuth login when using OSS EOS on Switch with bUseEAS enabled Added logic to save, load and delete AccountPortal auth token and token expiration locally using ISaveGameSystem\n\n  * Add EOS Integrated Platform support for Steam using the -CustomConfig=SteamEOS command line option. This also includes the SteamEOS option to enable this in Lyra, but full Steam integrated platform support in Lyra is still a WIP (Lyra does not support the adapter at the moment)\n\n  * Add a fatal log message and message box when EOSSDK fails to be loaded. This is disabled by default, but can be enabled by setting the following config in Engine.ini hierarchy:\n\n    * [EOSSDK] bDllLoadFailureIsFatal=true\n\nBug Fix:\n\n  * The -nosteam command line option now entirely prevents Steam modules from being loaded entirely\n\n  * Changed how OSS EOS Sessions responds to a EOS_ELobbyMemberStatus::EOS_LMS_CLOSED notification, destroying the related lobby instead of just removing the lobby member.\n\n  * Fixed an issue with the Friends interface in the Steam OSS not properly polling and retaining presence data.\n\n  * Do not disable the sandbox in the Steam online subsystem because it causes async file operations to randomly fail\n\n  * Added missing delegate trigger for OnPresenceReceived in UserManagerEOS\n\n  * Fix crash in FOnlineSessionIOS::StartSession when creating sessions\n\n  * Fix GetFriendPersonaName in Steam OSS to use 64-bit ID\n\n  * OnlineSubsystemEOS: Fix FUserManagerEOS::QueryExternalIdMappings not correctly breaking up large queries into sub queries.\n\n  * Fixed issue where the EOS overlay was disabled when WITH_EDITOR was true\n\n  * Fixed an issue causing SteamSockets to fail to match session and connection IDs with the host\n\n  * OnlineSubsystemEOS now logs into Steam via the Session ticket instead of the app ticket\n\n  * Fixes for Steam's LeftLobby and IsMemberOfLobby, community contributed. Use a manual array search instead of built-in TArray functions since they behave incorrectly with shared refs\n\n  * OnlineSubsystemEOS: Fix issue where Checkout was succeeding, but was failing to return a valid receipt.\n\n  * Fix null ConnectHandle when registering EOS auth handlers\n\n  * Addition of logic to transmit EOS Overlay session join as an OnSessionUserInviteAccepted delegate. Addition of support for OnSessionInviteReceived delegate.\n\nDeprecated:\n\n  * EOSSDK - Moved the \"project binary\" mechanism from GlobalDefinitions set on each .Target.cs, to config variables, so it is configured project wide in one place and does not need defining on every target in a project. The old GlobalDefinitions mechanism is maintained for backwards compatibility, but is deprecated and licensees should migrate.\n\n#### Pixel Streaming\n\nNew:\n\n  * Added AV1 support to Pixel Streaming and AVCodecs\n\n  * Added support for the Virtual Camera's \"Pixel Streaming Output Provider\" on Mac\n\n  * Re-shipped Pixel Streaming Player that was non-functional in 5.3 and 5.2. The player now supports hardware accelerated decode where the hardware supports.\n\n  * Added a Pixel Streaming Stats interface to enable you to graph your own Pixel Streaming related stats\n\n  * Added support for Pixel Streaming on Mac. NOTE: This functionality is only available for M1 Macs and later. Intel based Macs are not supported.\n\n  * Added editor notification when using Editor Pixel Streaming to inform the user that the plugin is going to disable the editor setting \"Use Less CPU when in Background\".\n\n  * Added OnPlayerRequestsBitrate to the Signalling Observer interface. Allows the user to respond to custom bit rate requests.\n\n  * Adding elevated checks so that certain data channel messages can be limited to specific users.This means that only the peer controller should be able to control things like resolution, bit rate etc.\n\n  * Updated Pixel Streaming to use version 1.13.1 of libVpx and version 5414 of WebRTC\n\n  * Added a pair of settings to specify a port range for WebRTC. You can specify a minimum port by launching your application with \"-PixelStreamingWebRTCMinPort=xxx\" (or using the \"PixelStreaming.WebRTC.MinPort\" console variable). Additionally, you can specify a maximum port by launching your application with \"-PixelStreamingWebRTCMaxPort=xxx\" (or using the \"PixelStreaming.WebRTC.MaxPort\" console variable).\n\n  * Added the FPixelStreamingVideoSink class which allows you to extract decoded frames from a WebRTC stream\n\n  * Exposed three new PixelStreaming/WebRTC settings to mitigate frame drops in LAN scenarios.\n  * PixelStreamingWebRTCDisableFrameDropper=true, where true disables frame dropping inside UE's WebRTC.\n  * PixelStreamingWebRTCVideoPacingFactor=N, where N is a multiplier for how lenient we are on pacing large bitrates (e.g. a value of 100 is quite lenient).\n  * PixelStreamingWebRTCVideoPacingMaxDelay=M, where M sets the max packet pacing delay (ms). The combination of these settings allows sending large fixed bitrates without frames being dropped on the UE side - this is useful for LAN streaming scenarios, but will cause stutters, lags, and congestion as packets are lost or unable to transmitted fast enough over the actual internet.\n\n  * Allow the passing of a custom websocket to the signalling server connection\n\n  * Allowing bit rates to be set on initial connection. The settings panel parameters from the front end should now apply properly when connecting.\n\n  * Defaulted Pixel Streaming Player connection URL to port 80\n\n  * Improved websocket disconnect messages in the Pixel Streaming plugin. Previously all disconnects on the UE side were reported with no disconnect message.\n\nBug Fix:\n\n  * Fixed the editor becoming locked if an editor stream was stopped from the browser\n\n  * Fixed a memory leak in FVideoResourceCUDA that was affecting pixel streaming users on all platforms\n\n  * Fixed small stream stutter when new players connected\n\n  * Fixed Virtual Cameras not streaming on Windows when running with Vulkan\n\n  * Fix crash when pixel streaming shutting down. The cause was the thread object (FrameThread) being destroyed while the thread was still running.\n\n  * Fixed a frame skip issue in Pixel Streaming VCam that was caused by MediaIO capture being informed of an irrelevant resolution change.\n\n  * Fixed a memory leak in TVideoEncoder\n\n  * Fixed EditText button doesn't show when tapping an editable text widget\n\n  * Fixed EditableText widgets not respecting ReadOnly property and being able to be edited by a pixel stream\n\n  * Fixed data channel only streams being non-functional. A data channel only stream can now be started by launching an application with \"-PixelStreamingWebRTCDisableTransmitVideo\" and \"-PixelStreamingWebRTCDisableTransmitAudio\"\n\n  * Fix peers not getting any frames when stream sharing without a quality controlling peer.\n\n  * Configure PixelStreaming VCam for lowest latency experience.\n\n    * Disable sending keyframes on an interval to have a smoother decoding/bitrate profile.\n    * Set a fixed video encoding bitrate ignoring WebRTC (as we know we are on LAN)\n    * Enable filler data during video encoding (while wasteful this ensure stable bitrate which helps with latency estimations)\n    * Disable the frame dropper so we can stream as very consistent FPS.\n    * Set video pacing factor to make more lenient to large bitrates\n  * Fixed NVDEC hardware decoding being non-functional. This allows the Pixel Streaming Player to leverage hardware accelerated decoding with NVIDIA GPUs\n\n  * Fixed Play In Editor (PIE) audio not being streamed when editor streaming\n\n  * Fixed error log caused by passing wrong size texture into the MediaIO capture pipeline when doing VCam Pixel Streaming.\n\n  * Fixed OnTextCommitted not being called when a text update is triggered by the LiveLink app\n\n  * Improved end to end latency between Unreal Engine VCam Pixel Streaming and the LiveLinkVCam app by capturing frames using the UMediaCapture anythread mode. This greatly improves the consistency of the frame capture time and therefore allows for a much more stable (and less buffered) WebRTC video stream.\n\n  * Unlocked 60fps streaming in LiveLink VCam app by configuring the default rendering rate of WebRTC's MetalKit video stream to be 60fps instead of 30fps.\n\n  * In VCam Pixel Streaming coupled render rate and stream rate for better frame synchronization (latency) between UE and the LiveLink app.\n\nDeprecated:\n\n  * Deprecating kick player functionality. This behavior still works but is marked for removal in later versions.\n\n#### Voice\n\nDeprecated:\n\n  * Deprecate old IVoiceChat::Set3DPosition API, and add default no-op implementation - Add new simplified IVoiceChat::Set3DPosition API, and add default no-op implementation so third party implementations of IVoiceChat keep compiling.\n\n#### Websockets\n\nNew:\n\n  * Added helper methods for retreiving URL parameters from websocket connections\n\n#### XboxLive\n\nBug Fix:\n\n  * Fix a failure to join from invitation without session info.\n\n#### XMPP\n\nBug Fix:\n\n  * Fix crash in libstrophe when a specially crafted xmpp message hits a codepath that only partially resets some internal state leading to a null pointer dereference\n\n### Platform\n\nNew:\n\n  * Add warning on all critical sections about double unlock potentially causing deadlocks\n\n  * First part of TargetPlatform(TP) refactor into TargetPlatformSettings(TPS) and TargetPlatformControls(TPC) TPS doesn't need SDK and will be used to get info about the platform TPC requires SDK AndroidTP has been converted to the new system\n\n  * Added new PerPlatformConfig class flag indicating the config properties can be overridden in a Platform/PlatformEngine.ini file. When a class is marked PerPlatformConfig, in the editor the class will be loaded from the platform inis of the current PreviewPlatform on load, and when the PreviewPlatform is changed, LoadConfig will be called to reload the settings from the platform ini file.\n\n  * Validate Cast at compile time - Casts between unrelated subclasses of UObject will produce a static warning (and an error when treat warning as error is true) - Trivial casts will be resolved at compile time without calling IsA<> This can be disabled with UE_ENABLE_UNRELATED_CAST_WARNINGS = 0\n\n  * Bump windows version from 18362 to 19041 to meet the minimum spec for GameInput API\n\n  * Cast, ExactCast and CastChecked with TObjectPtr are const correct\n\nBug Fix:\n\n  * Disable passing /Os and pass /Ob0 when using clang-cl in debug builds by default since otherwise it interferes with debugging clang-cl-generated executables in Visual Studio.\n\n  * Fixes our Clang database generation to produce a compilation database that doesn't trip up against our checks in platform headers, so that it can actually be used properly.\n\n  * Fix bug in D3D12 RHI that could cause corruption of texture cube resources due to missing resource transitions, e.g. during mip downsample for reflection captures.\n\n#### Desktop\n\nNew:\n\n  * Added SecuritySandbox experimental engine plugin which allows a game client to restrict its own access rights on Windows to better follow the principle of least privilege.\n\n#### Linux\n\nNew:\n\n  * Enable preliminary Linux support for sparse volume textures and OpenVDB\n\n  * Refactor FGenericPlatformOutputDevices::SetupOutputDevices code just a little so that we don't have to suffer code rot in a custom linux implementation\n\nBug Fix:\n\n  * BugFix: Fixed fix linux compile issue with include upper case lower case name.\n\n  * Replaced use an incorrect use of sa_handler with sa_sigaction\n\n  * Fix invalid directory separator in GeoReferencing plugin so that Linux properly packages it\n\n  * Fix OpenColorIO build script for Linux\n\n  * Implement GetPhysicalProcessorCount for Linux so that PGO builds can work properly\n\n  * Reduce repeating monitor DPI log event spew to only print on the first occurrence\n\n#### Mac\n\nAPI Change:\n\n  * There is no behavioral change here, but it provides the option to change what it is and supports more platforms then just Mac.\n\nNew:\n\n  * UBA: Add Mac Menubar App for UbaAgent\n\n  * Add Mac support for showing additional content on the right side of the title bar.\n\n  * Added support for Privacy Manifest handling for iOS and Mac\n\n  * Move source files from editor xcode projects to game xcode projects\n\n  * Apple: Update runtime to macos 11 and clean up warnings from doing that.\n\n  * Switched to Apple's Metal CPP for Metal implementation\n\n  * Improve source code lookup feature, using dsym if exists.\n\n  * Move the macOS main menu into the editor window.\n\nBug Fix:\n\n  * Fix Tools -> Open Xcode not working with modern Xcode\n\n  * Use ProjectDisplayedTitle as AppName on Mac if set\n\n  * Add a toggle for the behavior of EKeys::Platform_Delete on Mac. On a Mac keyboard pressing just \"delete\" will act as a \"backspace\" on windows or linux, and pressing \"function+delete\" will act as \"delete\" on windows or linux.\n\n  * Fix archive fail when packaging a Blueprint only project for distribution\n\n  * Fixing NavigateToFunctionSource crashes and errors.\n\n  * Fix multiple controllers not supported on Mac\n\n#### Online\n\nAPI Change:\n\n  * Previous usage of DisplayName now use a sanitized version.\n\nNew:\n\n  * [OnlineSubsystem] Implement a content restriction interface that supported platforms can leverage for age verification information\n\n  * Added support for new EOSSDK 1.16.1 BestDisplayName methods to OnlineSubsystem and OnlineServices\n\n  * EOSShared has added option to compile against targets without Engine dependencies\n\n#### XR\n\nAPI Change:\n\n  * Improved the extensibility of the IOpenXRExtensionPlugin interface by adding new overrideable callbacks: OnSuggestBindings, OnCreateActionSet, PostCreateActionSet, OnCreateAction, PostCreateAction, and OnActionSetAttach.\n\n  * It may be necessary to change from using FOpenXRHMD to using IOpenXRHMD.\n\n  * It may be possible to remove workarounds that were previously necessary because PreInitHMDDevice was called so early.\n\n  * Some include paths have changed. Users of private headers may need to refactor as well.\n\nNew:\n\n  * OpenXR: Need ability to add subaction paths to action. -Added SubactionPath parameter to IOpenXRHMD::AddTrackedDevice and FOpenXRHMD::FDevice so we can create actions with a SubactionPath specifed.\n\n  * Added unsupported message to distorted mode in default spectator screen controller.\n\n  * VR PIE: bOneHeadsetEachProcess option allowing each separate process PIE instance to own an HMD or HMD simulator. -New setting bOneHeadsetEachProcess which when true will allow PIE separate-process instances to run without -nohmd and with -HMDSimulator which an xr plugin may consume to do special vr device simulation. Even if that does not happen if we are running with OpenXR we will attempt to create an additional OpenXR instance to connect to an hmd and an OpenXR runtime may allow us some kind of connection, these pie instances might also not run correctly. #contrib 11314\n\n  * Added system to add additional flags to stereo layers.\n\n  * AppleARKitFaceSupport & AppleARKitPoseTrackingLiveLink reference the Private folder of the AppleARKit module -Removed private folder access along with the includes, which are unneeded.\n\n  * OpenXRViveTracker references the Private folder of the OpenXRHMD module -Created IOpenXRHMD interface so that other plugins can do OpenXR specific things with the OpenXRHMD implementation, rather than accessing FOpenXRHMD\n\n  * Destroy xrInstance in PreInit to yield other plugins to create xrInstance -Destroy any openxr instance created during preinit becasue we do not yet know if openxrhmd will be the chosen xrsystem and another xrsystem may try to create instance (ie the oculus vr plugin) and then fail because the runtime only supports one instance. -CVar xr.RetainPreInitInstance can be set to true to disable this behavior. #contrib 11029\n\n  * Add a new Platform VisionOS Project Settings panel to enable/disable VisionOS's full immersion vs window mode\n\n  * Experimental support for VisionOS Fully Immersive -First phase of VisionOS running on device. VRTemplate will run on device. -Mobile forward renderer runs if MobileMultiView is disabled at reasonable framerate, however depth is currently incorrect (we are just writing scene color to it, depth information exists but is not yet connected). The blocky black shadow artifact is related to this. -Deferred rendering runs with a proper depth buffer.\n\n  * VisionOS: hand tracking\n\n    * Hand tracking supported via OpenXRHandTracking plugin.\n  * xr.DisableOpenXROnAndroidWithoutOculus evaluated too late to modify via INI -Move PreInitHMDDevice to a point quite a bit later in PreInitPreStartupScreen so that more unreal engine systems are setup when we call it, including ini reading, cvars, fplatform memory, etc.\n\n  * OpenXR related private header access cleanup. -Refactoring to move some cross-module included Private header files into Internal. Eliminating some includes by refactoring. Eliminating some simply unnecessary includes.\n\n  * OpenXRAR, OpenXRInput reference the Private folder of the OpenXRHMD module -Refactored to use IXRTrackingSystem and IOpenXRHMD instead of FOpenXRHMD.\n\n  * Added Quest 3 to list of Meta supported devices.\n\n  * Removed deprecated motion controller component code.\n\n  * OpenXRVisionOS non-plugin support files -The changes required for VisionOS Immersive mode that are not within the OpenXRVisionOS plugin. -Enables SimpleHMD for VisionOS (stereo rendering without a hmd)\n\n  * OpenXR XrSystem loss/change handling. -Removed unnecessary xrGetSystem call in the FOpenXRHMD constructor. It is overwritten (for example in OnStereoStartup()) without being used.\n\n  * Enable SwiftUI by default in VisionOS mode\n\n  * XRDeviceVisualizationComponent now works in VREditor.\n\n  * Added Vulkan custom resolve + tonemap subpass to support mobile hdr on Meta quest devices.\n\n  * AppleARKitFaceSupport & AppleARKitPoseTrackingLiveLink reference the Private folder of the AppleARKit module -Removed unused include and its private include path.\n\n  * Removed the Plugins -> OpenXR Input project settings page. OpenXR now uses the list under Project Settings -> Engine -> Enhanced Input for its Input Mapping Contexts, and passes on their priority values when generating OpenXR action sets.\n\n  * OpenXR: vive hand tracking layer breaks oculus runtime -Added a ProblematicOpenXRApiLayerInfos ini setting that defines specific ApiLayer versions that are behaving badly with regard to an extension. -Attempt to create the openxr instance by repeatedly calling xrCreateInstance with progressively more of the potentially problematic extensions not enabled. We will either find a combination that works or never find a combination that works. -This Cl also provides a structure for implementing further problematic openxr api layer handling, should a project need further workarounds similar to this.\n\n  * IOpenXRExtensionPlugin: Add a new function for adding suggested bindings -Allow IOpenXRExtensionPlugins to add suggested bindings #contrib 10966\n\n  * Changed default behavior to no longer automatically perform application-side HMD recentering when we receive the event XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING from the OpenXR runtime. FCoreDelegates::VRHeadsetRecenter is now triggered whenever we receive that event, whether we're in Stage or Local space. Most primary OpenXR runtimes now only recenter LOCAL space when performing a runtime-side recentering (this recentering is transparent to UE aside from the XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING event, and can often be triggered by e.g. holding down a system button). In order to give developers more control over application behavior, they now have the option of when and whether to perform application-side recentering. This can be done in blueprints by binding an event to HMDRecenteredDelegate, which is triggered by FCoreDelegates::VRHeadsetRecenter.\n\n  * VisionOS OpenXR wrapper -Wrap the VisionOS immersive mode api in and OpenXR layer so we can run VisionOS immersive mode through OpenXRHMD. -Simulator renders in stereo and tracks the head correctly. No on-device testing has been done and the simulator only provides one eye view, so we can't be sure it will display the second eye correctly, but I tried to set it up so it would. -Very experimental. -Known problems: Using the intermediate back buffer. No features beyond basic head tracking and stereo rendering. Lots of unused code for features that needs to be updated or deleted.\n\n  * OpenXR Supported XR_EXT_local_floor Extension. -Adds support for XR_EXT_local_floor as an optional extension. -Change tracking origin enum field names from 'Eye' to 'Local' to better fix openxr, and because 'Eye' wasn't a good description. Added 'View' to represent actual hmd centered space. View can be used for queries but cannot be used as the tracking origin. #contrib 10836\n\n  * Added support for the XR_KHR_composition_layer_color_scale_bias OpenXR extension. On platforms that support the extension, it can be used to apply a color multiplier and offset to the main OpenXR composition layer using the UHeadMountedDisplayFunctionLibrary::SetColorScaleAndBias() blueprint node.\n\n  * Added support for changing foveation parameters at runtime.\n\nBug Fix:\n\n  * Fixed VRPIE crashing when mobile multi view is enabled and editor window is not minimized.\n\n  * GetMotionControllerData can fail in PIE because it gets a motioncontroller from the editor. -Comparing the motion controller's world to the WorldContext parameter of GetMotionControllerData to ignore motion controllers that are not part of the correct world. -Added a comment related to an ensure that can hit if VivePort openxr layers are conflicting with the meta openxr runtime.\n\n  * Fixed an issue where XRScribe would crash when decoding a capture with an xrBeginFrame call that returned XR_FRAME_DISCARDED, which is considered a success return and should not impact emulation.\n\n  * Fixed an issue where frustum culled primitives not visible in the primary instanced view would be incorrectly culled in secondary instanced views.\n\n  * Assert due to NaN passed in from Oculus OpenXR runtime with valid bit set -Added an additional openxr function call failure handling branch. The runtime should be setting the flags invalid if it entirely fails, but at least one runtime in the past did not do that so we may as well handle call failure eplicitly.\n\n  * Fixed modulated shadows in mobile multi view.\n\n  * VisionOS: View lagging behind head motion.Fixed problem where we were doing the copy of the swap chain render target into the compositor services drawable BEFORE rendering to the render target instead of after, resulted in displaying pixels from swapchainlength-1 in the past. Now we are encoding the blits and the compositer services present into the main frame command buffer. -Fixed problem where we were caching the device positions for late update before we update them in the render thread.\n\n  * OpenXR LoadMap causes lag of presented frame vs hmd -The two additional render thread pumps from RedrawViewports in LoadMap resulted in one xrWaitFrame on the game thread followed by three xrBeginFrame on the render thread. This violates the OpenXR spec and put us into a bad state with the SteamVR runtime (and perhaps other runtimes). -Fixed by adding a counter to the pipelined frame state so that we can tell if the xrWaitFrame that an xrBeginFrame is consuming has already been used, and early out. A cvar exists to disable this behavior, xr.OpenXRUseWaitCountToAvoidExtraXrBeginFrameCalls, which is true by default can be set to false at startup to disable it.\n\n  * Fixed directional light shadow rendering incorrectly in editor with android vulkan preview and mobile multi view.\n\n  * VisionOS: problem with view transforms -Fixed bug where hmd offset was applied twice. -Fixed bug where eye offsets were never applied.\n\n  * Fixed an issue where XR would incorrectly use the \"Screen Percentage Mode for Desktop renderer\" rather than the \"Screen Percentage Mode for VR\" setting for its Default Screen Percentage.\n\n  * Fixed OpenXRViveTracker crashing when no HMD is connected.\n\n  * XRMotionController component when set to HMD produces log spam -Do the special case code for the hmd before trying the more generic code for controller poses because we log an error if we try the controller code with the HMD motion source. -Added \"Head\" to the motion sources provided by OpenXR, so it shows up in the motion controller dropdown. Made \"Head\" and \"HMD\" function identically, \"HMD\" is the legacy term, \"Head\" the more modern.\n\n  * Fixes to mobile multi view with mobile hdr.\n\nDeprecated:\n\n  * Delete OpenVR from Engine\\Source\\ThirdParty, it has not been used in some time. -OpenVR has been essentially replaced by OpenXR at this point and this third party source is no longer in use.\n\n  * AzureSpatialAnchors service retirement deprecation. -Marking the plugins as deprecated and logging a warning.\n\n  * XRGestureConfig.h can be deleted in 5.4. -Deleted it, and the function that used it, and three more long deprecated blueprint functions.\n\n### Platform Mobile\n\nAPI Change:\n\n  * For example, to enable VT only for iOS, add r.Mobile.VirtualTextures=1 under [/Script/Engine.RendererSettings] category inside your project IOSEngine.ini file.\n\nNew:\n\n  * Enabled ShaderPrint and GPUScene debugger on the mobile renderer.\n\n  * Integrate NdoL in the MergeLocalLight when done inline in the basepass\n\n  * Clean unused shader permutation of the BuildInstanceIdBufferAndCommandsFromPrimitiveIdsCs\n\n  * Rework GPUScene support on mobile platforms. Platforms that do support uniform buffer objects can now provide batched primitive data through UBO. There is a limit UBO range that can be accessed in shaders, so we group instances into batches that fit into this limit. Android uses 16KB views, some other platforms up to 64KB views. Mobile platforms that do not support UBO will use a desktop version of GPUScene.\n\n  * Merge the Local Lights in Basepass for translucent objects when r.Mobile.Forward.EnableLocalLights == 2 #localization none\n\n  * Expose bOverride_CastDynamicShadowAsMasked in MaterialInstance Editor.\n\n  * Store the SpecularScale in the alpha channel of the MobileLocalLightTextureB of the MobileLocalLight pass MobileLocalLightTextureB is RGBA8 now from RGB10A2 Direction is stored in RGB8 using oct24 packed as 888\n\n  * Add ability to enable support for Virtual Textures only on specific mobile platforms\n\n  * Fix Local lights for some mobile devices drivers Change UAV of LocalLightBuffer from SINT to UINT\n\n  * Added logging for cases where all mesh draw commands (MDC) are forced to re-cache. Re-caching all MDC is an expensive operation and this logging will help to identify when and why it happens\n\nBug Fix:\n\n  * Fix a bug of black screen on Mac mobile preview with mobile deferred.\n\n  * Fix a bug that the bloom luminance is not scaled by Exposure.\n\n  * Fixed rendering of debug primitives on mobile when MobileHDR is disabled\n\n  * Changed Depth and CustomDepth in a FGBufferData from half float to a full float. Half precision for depth was causing rendering artifacts in some cases\n\n  * Fix RenderGraphValidation for localight prepass On mobile there is a separate FMobileDirectionalLightShaderParameters UB which holds all directional light data.\n\n  * Fix a bug that the IndirectIrradiance applied AO twice on mobile deferred, it has applied AO in the base pass.\n\n  * Fixed occlusion feedback (r.OcclusionFeedback.Enable) interaction with sub-queries\n\n  * Fix indirect lighting of dynamic skylight on mobile\n\n  * Fix r.Water.WaterInfo.RenderMethod on mobile devices\n\n  * Fixed: Case where mobile deferred shading renderer was applying movable SkyLight contribution twice, once in BasePass and then in a shading pass\n\n  * Reworked a loop for shadow cascade selection in mobile base pass shaders to avoid rendering artifacts on Adreno 7xx GPUs\n\n  * Make sure \"Memoryless\" textures are discarded by RDG at the end of the pass\n\n  * Clamp NumLocalLights to MaxCulledLightsPerCell in MobileLocalLightBuffer when Linked List Cull is disabled\n\n  *     1. Sort depth pass instead of base pass if full depth pre-pass is enabled. 2. Disable auto instancing for the translucent passes on mobile\n  * Require Mobile HDR when using Mobile Deferred Shading in Project Settings.\n\n  * Fix pixelated sun with light shaft bloom enabled on mobile.\n\n  * Fix a crash bug of missing MobileSceneTexture uniform buffer when rendering custom depth with TAA enabled on mobile.\n\n  * Correctly disable GBuffer output for unlit opaque materials in a mobile rendering\n\n  * Fixed wrong stencil settings for a sky mesh in a mobile rendering. This speeds up fog shading by excluding sky pixels from it #11106 #contrib 11106\n\n  * Fixed float overflow in a mobile bloom shaders. This was causing rendering artifacts in a scenes with very bright lights\n\n  * Clamp number of active scene captures for mobile Deprecate calling GMaxNumReflectionCaptures and GMobileMaxNumReflectionCaptures directly to avoid errors in the future\n\n  * Fix sharp edges of spotlights when using mobile local lights buffer\n\n  * Fix a bug that primitives use a light channel will lose sky lighting on mobile deferred.\n\n  * Change MobileLocalLightBuffer limit from (MaxCulledLightsPerCell - 1) to the correct MaxCulledLightsPerCell when LinkedListCulling is off\n\n#### Android\n\nAPI Change:\n\n  * For example, add GlobalDefinitions.Add(\"USE_STATIC_FEATURE_LEVEL_ENUMS=1\"); into MyGame.Target.cs for Android platform to compile mobile rendering only binary.\n\nNew:\n\n  * Add support for HWAsan in NDK 26, which is available on all phones running Android >=14.\n\n  * Update GooglePlay dependencies to use play-services-games-v2 version 19.0.0. Added support for offline access to OSSGooglePlay\n\n  * Enable memory tracing on Android. In addition to -trace=memory requires package_intdir/files/UEEnableMemoryTracing.txt token file to exist to activate it as of now.\n\n  * Added bDontBundleLibrariesInAPK setting to significantly improving code iteration times by not bundling libUnreal.so in the .apk and instead pushing it separately. Opt-in and experimental as of 5.4.\n\n  * Added UAT \"-ScudoMemoryTracing\" option to hook libc.so malloc/free/etc into memory tracer on Android.\n\n  * Added option to request microphone permission for AndroidVoice module at startup (SplashActivity) to Android project settings\n\n  * Enable Android Turnkey for launcher builds by default\n\n  * Minor: Merge from FN-29 Do cleanup in LaunchAndroid.cpp and remove any logic that was experimental Minor: Cleanup runOnUiThread in SimpleContextWrapper.java BugFix: possible fix for FORT-699059\n\n  * Enabling Vulkan Validation Layers on Android\n\n  * Added device profiles for Android Emulator choosing selecting Vulkan.\n\n    * Fixed Android device detection on the Android Emulator by falling back to an ES2 context.\n  * Added Android static feature level and static platform information. This can be used to compile out rendering code that is irrelevant to mobile rendering only binary\n\n  * [Android] Changed loaded SPIR-V compression algorithm\n\n  * New: Adding AndroidSingleInstanceService plugin and engine code changes, Tested on Android with Lyra and also preflight checks.\n\n  * New: Update AndroidSingleInstanceService plugin to properly generate ASISProject\n\n  * Force Lowerst Lod for Sky Capture on Android\n\n  * Support devices without lz4 compression for bDontBundleLibrariesInAPK\n\n  * Adding support for >=2 Android devices in VS+AGDE when pushing libUnreal.so outside of .apk. Implements support for patching .vcxproj.user files.\n\n  * PR #11247 : Add launch image for Quest devices\n\n  * Added Android x86_64 architecture prebuilt files to launcher build\n\n  * Enable using NDK 26.2.x\n\n  * Report gl version string together with vulkan API version string on Android\n\n  * Added Android SM5 device profiles for Adreno, Mali and Xclipse devices\n\n  * Introduce short names for both AndroidTargetPlatformControls and AndroidTargetPlatformSettings, which are causing certain built targets to run afoul of the MAX_PATH limit we impose on UBT file path lengths.\n\n  * Enable support for non-4k virtual page sizes on Android\n\n  * Update Android Background Services dependencies to fix support for Android targetSDK 33\n\n    * New library versions: androidx.appcompat:appcompat:1.6.1 androidx.work:work-runtime:2.8.1\n  * Improving iteration times by using llvm-strip output file argument instead of copying libUnreal.so.\n\n  * Update cmake to 3.22.1\n\nBug Fix:\n\n  * Fix a sky capture issue in OpenGL that occurred when binding a mipmap as a RenderTarget and sampling from a different mipmap. Fix a artifacts caused by half precision in Pixel Shader on GL.\n\n  * PR #11428: Create separate arm64 and x64 target platforms for use with AGDE\n\n  * Added null clipboard item check for text input\n\n  * Kill java,exe before clean step on Windows to fix locked files issue that sometimes occurs with minifyReleaseWithR8\n\n  * Only add Android architectures to VS project enabled in project settings\n\n  * Kill java.exe runtime before clean step on Windows to fix locked files issue that sometimes occurs with minifyReleaseWithR8\n\n  * Mali read-only driver bug workaround\n\n  * Fixed an issue with EMDoneTrigger timeout failure in SuspendApp_EventThread() Bug Fix: Fixed an issue introduced recently regarding swapping W/H in portrait mode.\n\n  * Add back new/delete operator global visibility for Android shipping builds\n\n  * Added Xclipse 940 chipset and GPU (5xx supported and falls through to low) device profiles\n\n  * Fix FAndroidMisc::GetCellularPreference (was always returning 0)\n\n  * Updated Android styles to more modern base theme\n\n  * Leave only immutable texture path for GL(only use glTexStorage2D), don't set GL_TEXTURE_MAX_LEVEL as it isn't needed anymore\n\n  * Fixed issue with Android env vars not always set on Mac\n\n  * Fixed an issue by Restore how app_cmd_init and restore is handled (remove ASIS STANDALONE ifdefs that are no longer needed)\n\n  * FSceneCapturePS has highp floats forced now to fix a driver bug FullPrecisionInPS can now be enabled on a per global shader basis and not just globally controlled by r.Mobile.FloatPrecisionMode\n\n  * Check directory exists before adding to dependency check\n\n  * Filter out VR manifest changes from AFS project APK (uses __ExcludeFromAFS=\"true\" attribute tag)\n\n  * Refactoring onCreate for GameActivity and switching nativemain to use AndroidMain,\n  * Updating ASISStub to properly handle activity change and theme change. New: Also added gradle build files for ASISStub to make it easier to use the sample android app to test Android\n\n  * Fixed crashes due to to guarding against isStandalone in GameActivity.java.template. this fixes some AndroidSingleInstanceService crashes and activity switching.\n  * Also updated ASISStub and output ASISProject\n\n  * Fix the Safezone updated incorrectly issue, the SafeFrameChangeEvent needs to be triggered after the orientation changed. Fix the Gyro broken issue.\n\n  * Improved checking .so files to see if we need to rebuild the .apk\n\n  * PR #8385: Do not shutdown voice module on app stop event\n\n  * PR #11394: Fix Android Studio path detection for installs from JetBrains Toolbox\n\n  * Fix Zen store connection on Android if multiple ip addresses available.\n\n  * PR #11280: Fix missing dash symbol in ShortArchNames\n\n  * Optimized GetNetworkConnection\n\n  * Fixed Android Single Instance Service missing files for packaging and short name used in plugin's build.cs\n\n  * Fixed fix missing include\n\n  * AndroidSingleInstanceService fixes to address crash and activity/surface binding issues. known issues remaining: have to pause before switching surface binding (should be handled internally eventually) need to finish up the changes for compiling reference ASIS android studio project samlple. This will be in another submit.\n\n  * Improved startup sequence for AFS server with updated UnrealAndroidFileTool executables (added pulldir command)\n\n  * Fixed a crash when using Android Vulkan Mobile preview platform with Mobile Multiview enabled.\n\n  * Added protection to InputDevice check for gamepads\n\nDeprecated:\n\n  * Deprecated: changed logic so **STANDALONE_DEBUG_LOG messages in non standalone builds for android are only output in debug builds.\n\n  * Deprecated: **remove AndroidSingleInstanceService from engine plugins.\n\n#### iOS, tvOS, and iPadOS\n\nNew:\n\n  * iOS15+ now requires an entitlement key to enable GameCenter.\n\n  * Initial Privacy Manifest files for iOS and Mac\n\nBug Fix:\n\n  * Fix a bug that the loadValuesAsynchronouslyForKeys could be invoked after PlayerItem is released in AvfMediaPlayer 2. Fix a bug that the seekToTime could be invoked after MediaPlayer is released in AvfMediaPlayer 3. Fix a bug that the loading task is still running after the MediaResourceLoader is released in AvfMediaPlayer\n\n### RAD\n\nNew:\n\n  * Adding the RAD Audio Codec. This is a perceptual audio codec that compresses better than Bink Audio with better quality and comparable speed / memory. It is available on all UE supported platforms.\n\n  * TextureFormatOodle make all the versioned DLLs load on demand rather than loading all up front. Add config option to force use of latest Oodle Texture version rather than the sticky version on each texture.\n\n  * Latest Bink tools.\n\nBug Fix:\n\n  * Fixed a rare race condition on Bink Audio decoder startup.\n\n### Rendering\n\nAPI Change:\n\n  * CVARs that can be converted into compile time constants can be found in ReadOnlyCVARCache.h Associated defines should be added into MyGame.Target.cs.\n\nNew:\n\n  * Added the DoubleFloat math library and refactored the majority of GPU systems to use it. This is a floating point format for performing double-precision math on GPU, that offers more precision and better reliability than the tile-offset system that was previously introduced in 5.0.\n\n  * Add ray tracing support to Cable with WPO support.\n\n  * Added r.ShaderPrint.DrawOccludedLines (by default set to 1), which allows to disable drawing lines behind geometry on demand. Useful for complex visualizations, where drawing occluded lines makes it too messy and hard to understand.\n\n  * Implemented support for virtual texture feedback in ray tracing hit shaders.\n\n  * Improved performance of the manual hair skin cache and enabled it by default. This removes the need to enable skin cache for a given project. This works properly only for regular skinning (no morph target).\n\n  * Added a new project setting configuration for the renderer (MorphTargetMaxBlendWeight), to allow configuring per project morph targets maximum blend weights. This setting can be tested with in editor using the console command r.MorphTarget.MaxBlendWeight N (where N is the maximum value we want to test). The CVar value is reset when the editor starts to the configured renderer value.\n\n  * Added bCastHiddenShadow property to FISMComponentDescriptor so hidden shadow casting state is copied from mesh components to ISMC's\n\n  * Fix hair deep shadow in VR.\n\n  * Add support for additional texture layout for groom cards/meshes. This allows more compact & effecient texture layout.\n\n  * Moved GPU-Scene update to the end of UpdateAllPrimitiveSceneInfos (now FScene::Update) to enable more efficient and consistent scene updates for sub-systems that interact with GPU-scene.\n\n  * Initial; implementation of per-instance occlusion query based culling Perform occlusion test per instance using HZB, followed by per-pixel test for instances that were visible Use the full depth buffer for per-pixel test with feedback from pixel shader through UAV buffer (one buffer slot per instance) Feed occlusion query results from current frame into instance culling pass for the next frame Gives an average ~20% reduction in number of drawn primitives for depth and base pass, improving performance in vertex-limited scenes Add CVar r.InstanceCulling.OcclusionQueries (default: 0) Known limitations for v1: No multi-view support (though groundwork is prepared for it) No support for large number of instances in GPU scene (limited by 1D compute dispatch size, implementation planned) No support for no-cull distance (needs to be generally implemented in the main instance culling code too)\n\n  * Apply random color to instances when visualizing mesh distance fields.\n\n  * Add OIT permutation to base pass shaders in order to handle runtime toggle. Add RHI ROV feature to know if the runtime RHI supports ROVs. OIT permutation is only compiled when the OIT project settings is enabled. OIT permutation allows to handle case where a platform supports ROV, but the actual RHI doesn't. This also allow to toggle OIT support at runtime (through quality settings for instance).\n\n  * Added ability to turn some of the rendering read-only CVARs into compile time constants\n\n  * Add Point/Curve trimming report into groom editor and remove warning report during building. This information is now only displayed at import time and within groom editor.\n\n  * Fixed stats instance counting issue for hierarchical instance culling that led to underreporting the work\n\n  * Add Vertex Factory controlled VSM constant bias that applies to Non-Nanite geometry\n\n  * Add debug visualization for instance culling occlusion query renderer Enabled using ShowFlag.VisualizeInstanceOcclusionQueries=1 Modified FMobileSceneRenderer::ShouldRenderHZB() to take instance occlusion culling into account\n\n  * Exposed rect light sampling on translucent to the render setting panel.\n\n  * Add hair cards/meshes binding & deformation support for mobile renderer.\n\n  * Reduced memory usage of Distance Field Scene.\n\n  * Change GPU-Scene to use persistent primitive ID instead of the packed index to reduce change frequency.\n\n  * Improve determinism of CitySample performance testing (when -Deterministic is used).\n\n  * GPUScene upload optimizations - Removed some primitive setup work from the new InstanceSceneDataBuffers path (that is no longer needed) - Removed copy step for FPrimitiveSceneShaderData instead writing directly to the upload buffer. - Inlined FInstanceSceneShaderData build & cleaned up includes of InstanceUniformShaderParameters.h to reduce rebuilding - Cleaned up the FPrimitiveSceneShaderData a bit - Removed dummy identity transform and needless matrix work for single-instance primitives.\n\n  * Moved VSM distant light invalidation logic before init dynamic shadows such that we can skip (non-nanite) mesh setup for fully cached lights.\n\n  * enable lens flare pass in mobile platform\n\n  * Added a cvar to force skylight cubemap blending per platform for forward shading.\n\n  * Improvements to RHI performance when using raytracing hit shaders.\n\n  * Improve noise on hair transmittance and shadow by replacing jitter noise with a blue noise function which removes structural noise.\n\n  * Optimized Hierarchical Instance Culling update mainly by separating static and dynamic primitives along with some further low-level optimizations.\n\n  * Added cook-time precomputed spatial hash for hierarchical instance culling, controlled via r.SceneCulling.Precomputed (default enabled).\n\n  * Reduce cooked Groom size by 45%.\n\n  * Avoid to build invalid groom bindings and add clearer error message when groom binding is invalid\n\n  * Add holdout support for grooms.\n\n  * HairCardsVF now supports PrimitiveID & GPUScene on mobile platform.\n\n  * Added support for directional light in scattering for mobile volumetricfog.\n\n  * Add r.HDR.Aces.GamutCompression (disabled by default) for HDR output so that we get a similar behaviour to the BlueCorrection parameter. https://docs.acescentral.com/specifications/rgc contains more details about gamut compression\n\n  * Avoid re-creating whole rendering state for a primitive when MaxDrawDistance or InstanceCullDistance has changed. HLOD system often updates MaxDrawDistance and InstanceCullDistance for a big number of primitives which can cause performance issues on a weaker platforms\n\n  * Added SkyAtmosphereLightIlluminanceOnGround node.\n\n  * Add groom AutoLOD mode. This automatically scale grooms' curve count based on screen coverage and adapt the hair coverage to preserve the look in distance. AutoLOD can be enabled/disabled per project. Groom asset will use project setting, but can override it per asset (Default, Manual, Auto). AutoLOD is enabled by default which improves hair performance overall.\n\n  * Removed r.OptimizedWPO as it is no longer useful and causes confusion as we default bEvaluateWorldPositionOffset to true for primitives.\n\n  * Remove point to root index indirection as now interpolation already contains this data. This avoids an indirect fetch. This also fixed what looks like a long standing issue where the curve index was reinterpreted as the point root index.\n\n  * Add Depth of Field Use hair depth property on PostProcessVolume.\n\n  * Enable anisotropy on cards texture samplers.\n\n  * Fixed bug in hierarchical instance culling that caused the footprint-based test to never be selected.\n\n  * Add possibility to use strands guide as card guides for card groom having non-conforming topology (i.e. triangles strip).\n\n  * Fixed incorrect implementation of parallel prefix-max operation in the instance culling load balancer. New version is also rather more efficient.\n\n  * Deprecated UInstancedStaticMeshComponent public functions & data that concern a loosely supported ID mapping. This will be removed in favor of new ID based functions.\n\n  * Optimize hair lighting for local lights by adding OnePass VSM ShadowMaskBit & OnePassHairTransmittance support for DeferredLightPS.\n\n  * Batch groom LOD selection, groom interpolation, groom simulation to improve performance.\n\n  * Move ray tracing instance culling completely to the GPU.\n\n  * Added path to make instance culling context pull the instance count from the Scene and bypass Mesh Draw Command re-caching (new behavior can be disabled using the cvar r.InstancedStaticMeshes.FetchInstanceCountFromScene).\n\n  * Added VSMResolutionLodBias to light scene proxy. Controls the resolution of the shadow map on a per-light basis\n\n  * Made SceneUniformBuffer publicly accessible, allowing plugins to add their own data without modifying engine code. This buffer is included in many render passes.\n\n  * Help compiler to compile out unused \"Shading Path\" renderer code on platforms with a static feature level. (This cuts ~2.5MB from a mobile only binary size)\n\n  * Added cvar ('r.InstancedStaticMeshes.AllowCreateEmpty', off by default) to make it possible to create ISMs with zero instances.\n\n  * Improved Render Thread performance in Ray Tracing code paths.\n\n  * Added new SupportsLandscape() vertex factory flag, and removed hardcoded VF string checks determining if a landscape material should compile with a given VF.\n\n  * Optimize groom asset & groom binding asset building (~4x speedup).\n\n  * Improvements to deferred decal CPU performance.\n\n  * Add TriStrip geometry support for hair strands and add project settings for hair tristrip geometry as not all project are compatible with this (e.g., 2 CVs short hair).\n\n  * Add option to force velocity output for grooms.\n\n  * SkyAtmosphere - added multiple scattering support on the directional second light for parity.\n\nBug Fix:\n\n  * Fix global distance field not being built in some situations even though materials in the level require it.\n\n  * Depth-of-field stays consistent when adjusting the Squeeze ratio on the cine camera.\n\n  * Fix for HDR viewports not rendering properly when Slate.EnableGlobalInvalidation=1\n\n  * Fix GPU crash when using OIT pixel sorting.\n\n  * Fixed thick lines being clipped with ortho views because near clip distance is set to 1 then. This fixes the water landscape brush which relies on canvas draws for updating curves render target (!)\n\n  * Fixed crash when using r.RayTracing.Geometry.MaxBuiltPrimitivesPerFrame to limit number of BLAS built per frame and Nanite is enabled.\n\n  * Fixed volumetric fog extinction being affected by exposure.\n\n  * Removed quadratic memory usage of detecting overlapping vertices when cooking skeletal meshes\n\n  * Fix memory leak when the level editor viewport is set to realtime but it's not visible, e.g. if another editor is docked and active in the main window.\n\n  * Fixed an issue where debug traces would fail to draw correctly in offset stereo views.\n\n  * Fixed memory reporting for 2D array texture resident mips\n\n  * Fixed some spline mesh rendering bugs on mobile platforms with GPU Scene enabled.\n\n  * Fix crash in hair voxelization buffer allocation when having 16 macro groups or more, with large bounding boxes.\n\n  * Changed contact shadows UI to be disabled if \"Cast Dynamic Shadows\" is off as this means contact shadows are disabled too.\n\n  * Fixed incorrect colors in HDR screenshots.\n\n  * Fix uninitialized Groom deformer OutputMask value causing the output position to not being updated consistently.\n\n  * Fixed volumetric cloud not receiving high quality aerial perspective in the secondary far traced cloud buffer.\n\n  * Fix missing cards data on multi-group /multi-geometry type grooms. For LOD0/LOD1, grooms have both strands & cards data. The LOD settings are set to strands geometry type for LOD0/LOD1 . When building the groom data, the cards data were discarded due to the mismatch of geometry type. It works for group0 as a matter of facts but all groups >0 would have not data being built.\n\n  * Fix hair instance streaming sharing same asset.\n\n  * Fix missing screen shadow casting on non-shadowed light for hair strands samples.\n\n  * Fix incorrect groom shadow casting not respecting hidden in game / hidden shadow casting flags on instance.\n\n  * Fixed a case where volumetric fog ambient would not be lit correctly due wrong ambient sampling source.\n\n  * Fix hair flickering when LOD transit between strands and cards LOD.\n\n  * [Custom Primitive Data] Fix crash when adding elements on a BP instance placed in the scene\n\n  * Enable separate translucency depth upsampling on SM5 platforms instead of only d3d\n\n  * Fix ResolvedView not resolve before using on MobileHQDof Setup Pass. Fix ScreenSpacePos caculate bug on MobileHQDof Setup Pass.\n\n  * Fixed incorrect Distance Field / Card Representation when multiple mesh sections with different settings point to the same material slot.\n\n  * Reenable depth bound test when computing shadow mask for hair shadow. This improves hair lighting cost.\n\n  * [Custom Primitive Data] Fixing detail customization where the color picker would previously only commit the first channel.\n\n  * [Custom Primitive Data] Prevent Colorpicker from closing when picking a color\n\n  * Fix groom binding asset being rebuilt while being already cached. The logic for filling the DDC key, used later for warming local DDC, as incorrectly run too early. This causes the logic to check if data are available to fail, and forcing the data to be rebuilt.\n\n  * Only include draw commands with HasPrimitiveIdStreamIndex flag in occlusion query instance culling list\n\n  * Split hair binding root bulk/resources into seprate data/resources per LOD to fix crash when concurrent mesh LOD are streamed-in.\n\n  * Fix reversed green and blue conditions for SetMeshConstantVertexColor\n\n  * Fixed missing landscape geometry at the edges of the screen related to GPU culling that may happen at a certain landscape configurations\n\n  * Fix incorrect local bound when creating dynamic instance uniform buffer. The local bound and (overriden) local to world transform were not expressed in the same space (original vs. overridden)\n\n  * Fix for out of bounds GPU memory accesses (on some platforms) in ThreadGroupPrefixSum and VSM directional projection (Short circuit VSM page table lookup with out of range clipmap levels, avoids an out of bounds access on some platforms)\n\n  * Fix missing bound scale on groom component.\n\n  * Made ShadowCacheInvalidationBehavior override HasDeformableMesh such that it can suppress that behavior if needed.\n\n  * Fix hair/groom view mode in cook build.\n\n  * Fix cached raytracing instances not being updated when mesh LODs are streamed in/out causing incorrect LODs to be used in ray tracing.\n\n  * Fixed crashes caused by Spline Mesh and Hierarchical Instanced Static Mesh components creating scene proxies while their mesh has LODs that are not streamed in.\n\n  * Fixed incorrect ray tracing culling of ray tracing instances using WPO.\n\n  * Fix hair cards/meshes reloading when changing assets properties.\n\n  * Fix a bug of CSM caching that the static primitves are renderred twice.\n\n  * Fixed an issue with D3D12 where failing to allocate a resource might not report to the user that it is out of memory.\n\n  * ShouldPrepareDistanceFieldScene should return true when VisualizeMeshDistanceFields or VisualizeGlobalDistanceField is active\n\n  * fix .exr/.pngs sequence alpha channel corrupted with MRQ on some platforms.\n\n  * Fixed case where StaticMesh will not be rendered if component overridden MinLOD is less than StaticMesh MinLOD\n\n  * Fixed: missing Texture2DArray information in a 'listtextures' command dump\n\n  * [Custom Primitive Data] Fix issue where editing the Custom Primitive Data fields on a BP instance in the world didn't stick.\n\n  * Add coverage/tangent fallback on card groom when no texture are provided.\n\n  * Fix ensure when accessing the default material during water PSO collection from the game thread\n\n  * Only pass PerInstanceRandom parameter from VS through interpolators only if PS uses it. Also fixed broken PerInstanceRandom for cases where GPUScene is disabled\n\n  * Fix incorrect group names when groom does not have group ID mapping.\n\n  * Fix missing group name on groom asset once imported.\n\n  * Fixed inaccurate luminance/illuminance meter values in Visualize HDR mode.\n\n  * Fix for VRS getting disabled on projects using film grain (i.e. CitySample)\n\n  * Fix for leaking render objects on app exit caused by EngineLoop not processing the last set of pending cleanup objects it acquired\n\n  * Request full garbage collection when FPreviewScene is destroyed to ensure that the PreviewWorld is destroyed immediately, together with any GPU resources it might still hold through FScene. The preview world is a heavy-weight object and may hold a significant amount of resources, including various GPU render targets and buffers required for rendering the scene. Since UWorld is garbage-collected, this memory may not be cleaned for an indeterminate amount of time. By forcing garbage collection explicitly, we allow memory to be reused immediately.\n\n  * Fix CoordU channel not being correctly generated during hair strands texture generation.\n\n  * Fix OIT sorted triangle index buffer crashing on creation due to data not being streamed-in at creation time. When the data are not ready yet, this CL postpone sorted index buffer initialization later, until the data are ready.\n\n  * Fixed an issue where Contrast Adaptive Shading (Tier 2 VRS) would not be applied correctly to views with constrained aspect ratios (black bars).\n\nDeprecated:\n\n  * Deprecated IPersistentViewUniformBufferExtension.\n\n#### Architecture\n\nAPI Change:\n\n  * Changes to custom render pass API :\n\n    * Made all class members protected/public in order to help with eventual deprecation Added utility to have a custom render pass perform a render capture operation (full capture, begin capture, end capture) when it runs Added BeginPass / EndPass functions, that run right before/after PreRender/PostRender, which are only really useful for properly scoping the render capture operations described above BeginPass/PreRender/PostRender/EndPass are now non-virtual. Child classes now have to implement the virtual On[...] version of them Added proper class for custom render pass user data (same lifetime as the render pass) and allowed multiple user data to be attached to a custom render pass, identified by a FName, which allows custom render data to be retrieved in a safe way by any module. Currently, the system was only used by landscape so it was working, but really, any render pass could hold any kind of user data so this would have crashed * Added bare-bones RTTI system to both render passes and render pass user data (GetTypeName). Use IMPLEMENT_CUSTOM_RENDER_PASS (and IMPLEMENT_CUSTOM_RENDER_PASS_USER_DATA, respectively) to implement it\n  * You can use the new SetMeshDrawCommandStatsCategory() on primitive components to set category types for the new stats.\n\n  * We still need to maintain old SoftObjectPtr reference (and sync load) for backwards compatibility. Also note that the new system depends on the AssetManager seeing the EditorOnly reference. So existing content will need a resave to take advantage of the new system.\n\n  * Added GetShaderResourceTexture() to FRenderTarget that returns the RT's RHI texture resource by default but can be overridden to return another one, for classes where the shader resource RHI may differ from the render target resource RHI (FTextureRenderTargetResource and its child classes : e.g. FTextureRenderTargetCubeResource)\n\nNew:\n\n  * Optimized compute pipeline state creation/management to use a thread local cache like graphics already does, avoiding significant write lock performance problems in ExecuteSetComputePipelineState.\n\n  *     * Changes to custom render pass API\n\n      * Fixed water info render captures (r.Water.WaterInfo.RenderCaptureNextWaterInfoDraws) when running with custom render passes (r.Water.WaterInfo.RenderMethod 2)\n  * Add mesh draw command stats collection. This collects information about each draw call in each pass used during mesh draw command rendering. It reads back indirect args to get the correct final rendered instance and primitive counts after GPU culling. Use \"r.MeshDrawCommands.Stats\" to show the new stats on screen.\n\n  * Fix PreskinnedNormal of skeletal mesh when skin cache is on\n\n  * Added a VulkanRHI vkTrimCommandPool call between map loads to free up extra memory reserved for command buffers\n\n  * Added support for per instance LOD on InstancedStaticMeshComponents. This improves on the old behavior which would select a single LOD for all instances based on the full ISM bounds. LOD is handled by the GPU instance culling system.\n\n    * The new approach is used if GPUScene is enabled and instance culling is enabled and bUseGpuLodSelection is true on the component. Also the consolevariable \"r.InstancedStaticMeshes.GpuLod\" can be used to turn the system on and off.\n  * Break apart FD3D12DescriptorCache SetSRVs, SetUAVs, and SetSamplers so you can allocate and copy GPU descriptors and retrieve the handles without actually setting descriptor tables (needed for an upcoming GPU feature).\n\n  * Added an option for InstancedStaticMeshComponents to use conservative bounds.This will not iterate over all instances to recalculate the bounds on every instance add/remove/transform update. But instead will maintain a conservative bounds that can only grow. This is an optimization for the case where we might have very high instance counts causing the bounds calculation to become very expensive. The behavior is off by default, and controlled by SetUseConservativeBounds(). Even when the option is turned on for an ISM, we keep the existing behavior whenever the number of instances is below \"r.InstancedStaticMeshes.ConservativeBounds.Threshold\".\n\n  * Implementation of Custom Render Pass - Supports rendering depth prepass and base pass, output scene color and depth - Replacing the underline implementation of rendering scene capture depth as additional scene view - Added water plugin support\n\n  * Reduce default file cache size used by virtual texturing. Add profiling to track file cache usage.\n\n  * Refactored D3D12 ray tracing descriptor heap/cache functionality into a more generic utility usable outside of ray tracing when explicitly managed descriptor tables are necessary (includes renaming FD3D12RayTracingDescriptorHeapCache -> FD3D12ExplicitDescriptorHeapCache, FD3D12RayTracingDescriptorHeap -> FD3D12ExplicitDescriptorHeap, FD3D12RayTracingDescriptorCache -> FD3D12ExplicitDescriptorCache)\n\n  * The material NaniteMaterialOverride no longer uses a SoftObjectPtr to hide from the cook. Instead we take advantage of new SkipOnlyEditorOnly cooking and use an EditorOnly ObjectPtr instead. This avoids issues with sync loading during PostLoad().\n\nBug Fix:\n\n  * Fix D3D12 TerminateOnOutOfMemory to not pop up a message box when running -unattended, causing build machine jobs to spin for 30m until timeout instead of crashing in just a couple minutes.\n\n  * Add GPU instance culling to decal passes. This fixes an issue where HierarchicalInstancedStaticMeshComponents containing decals would only show a single instance.\n\n  * Add custom depth support to nanite geometry collection.\n\n  * Fixed RDG validation with indirect args being accessed in a debug shader as a structured buffer while indirect args are actually plain buffers\n\n  * PR #10647: Fix RoundUpToVSyncError value in FDynamicResolutionHeuristicProxy::RefreshCurrentFrameResolutionFraction_RenderThread() #contrib 10647\n\n  * Fixed synchronous read back functions for cube textures\n\n  * Fix follower component lagging behind lead component. Dynamic data updates for skinned mesh components happen in parallel, i.e. follower component can update before lead component. As follower component relies on lead component's current revision number, updating the revision number in dynamic data updates create race condition. So change back to updating current frame revision number immediately when animation updates, and add a previous revision number variable to help calculate current revision number.\n\nDeprecated:\n\n  * Removed RenderTargetTemp.h, which isn't used anywhere anymore\n\n#### Lighting\n\nNew:\n\n  * Fix alpha channel in Ray Traced translucency and add Holdout support The alpha channel is now tracked like in other passes (it was not working consistently before). This applies both to RT translucency and the RayTracing Primary Ray debug view.\n\n  * Remove deprecated RTGI indirect lighting technique Lumen is a superior alternative in all cases and is the supported system going forward.\n\n  * RayTracing: Implement a new light grid used in raytracing passes (Translucency and Lumen Hit Lighting) based on the method used in the Path Tracer The new light grid can localize the influence of each light better than the previous system, reducing the number of lights that light loops need to process. This refactor also allows more than 256 lights (no code was actively depending on this limit anymore). However there is still a fixed number of lights available per grid cell. Using the \"Light Grid Occupancy\" Ray Tracing Debug mode can help visualize where this might be occurring. The following cvars can be used to control memory usage and performance: r.RayTracing.LightGridResolution: Resolution of the 2D grid which holds lights r.RayTracing.LightGridMaxCount: Maximum number of lights per grid cell (if there are fewer lights than this in the scene, that number will be used instead)\n\n  * Added cvar to mark only even/odd mips from local lights. This can be used to cut down on instance duplication, which can be a New performance cost especially for higher poly/larger non-nanite meshes. r.Shadow.Virtual.MarkPixelPagesMipModeLocal Even mips mode (1) cuts down on instances but can increase the resolution vs. the default mode for some pages. i.e. fewer instances/vertices, but more pixels. Generally a performance win for non-Nanite geometry, but a potential performance loss for Nanite geometry. Odd mips mode (2) cuts down on instances and resolution so has a higher performance benefit, but can be a noticeable loss in resolution. From Pari at The Coalition\n\n  * Removed \"Draw only VSM invalidating objects\" and associated code. This had been broken for a long while and there are different visualizations available now.\n\n  * Support nanite overdraw visualization in VSMs. This is preliminary and subject to change but lays the groundwork for more nanite-related VSM visualizations.\n\n  * Respect bCastShadows and bCastRayTracedShadows in Lumen / Many Lights HWRT.\n\n  * Only Destroy/Add Light Primitive Interactions when needed on light transform update On mobile this means we only invalidate MDC's when needed\n\n  * Add support for rect light texture to volumetric fog.\n\n  * Added VSMTexelDitherScale to the light scene proxy, analogous to r.Shadow.Virtual.SMRT.TexelDitherScale. Controls the amount of temporal dither filtering applied to shadows on a per-light basis.\n\n  * Add virtual shadow map \"dynamic resolution\" controls that can decrease the global resolution LOD bias based on page pool pressure to avoid page pool overflows.\n\n    * Relevant new cvars: r.Shadow.Virtual.DynamicRes.MaxResolutionLodBias (maximum amount it is allowed to modify, default 2) r.Shadow.Virtual.DynamicRes.MaxPagePoolLoadFactor (page pool filled factor beyond which the bias will begin to apply, default 0.85)\n  * Improve sampling of specular highlights at high roughness to minimize the number of wasted rays\n\n  * PR #11174: Add LowerHemisphereColor to fast path for updating skylight scene proxy #contrib 11174 #11174\n\n  * Allocate VSM shadow mask slots based on pruned light grid rather than relying on sorted light order. This avoids issues with simple lights getting sorted to the front of the list (required for some other passes) and wasting slots, and makes the allocation more robust against light ordering..\n\n  * Add light channel support for cluster shading. This allows to batch more lights through the cluster shading path.\n\n  * Added lighting channels support for VSM.\n\n  * Add rect light support for cluster shading.\n\n  * Added EditCondition to light transmission to force user to set the light to moveable prior to activate light transmission.\n\n  * Add IES Atlas support for translucent surface.\n\n  * Change default VSM page marking to 2x2 stride. This lowers the overhead of the page marking pass and to date has not produced any artifacts.\n\n  * Skip unnecessary page marking and SMRT work for shadow receiver pixels behind rect lights From Pari at The Coalition\n\n  * Fix incorrect ref counting decrement when texture are removed from rect. light texture manager.\n\n  * Integrated Bend Screen Space Shadows in Mobile Renderer.\n\n  * Add support for IES profile in cluster shading pass.\n\n  * Changed the default value r.Shadow.Virtual.ForceOnlyVirtualShadowMaps to 1. Primitives that are incompatible with VSM will not be rendered, but performance and memory is improved.\n\nBug Fix:\n\n  * Fix issue with r.SceneCulling 1 where instance culling was not respecting the detail geometry flag (and thus rendering all the small stuff into coarse pages)\n\n    * Make clipmap visualization colors based on absolute level so they are consistent with the clipmap virtual address space visualization\n    * Add a cvar to scale the size of the nanite occluded instances buffer. This is not really a proper fix for overflows, but the cvar allows testing if flicker/shadow issues are due to this.\n  * Add support for directional light's ShadowAmount for hair mask shadow and fix incorrect shadow mask channel writting in hair mask shadow.\n\n  * Fix rect light filtering border with non power of two texture. This fix invalid colored at texture border which could happen since the atlas is never cleared.\n\n  * Fix the screen space denoiser causing ray traced transmission leakage. Add another bilateral filtering weights specific to transmission for Screen space ray traced shadow denoising. So shadows on subsurface profile will behave the same to other material, and the transmission will be filtered separately. The spatial filtering weight will be set to 0 if the reference and the neighbor pixels are not all subsurface profile. Suggest: Increase r.Shadow.Denoiser.PreConvolution to 2 to remove the border line neglectable transmission artifact due to temporal accumulation if needed.\n\n  * Fix distance field shadow on SLW.\n\n  * Fix Reflection capture removal causes the primitive GPU state become dirty.\n\n  * Fixed per-object / modulated shadows in mobile forward renderer.\n\n  * Fixed some bugs causing incorrect results in DFAO.\n\n  * Fixed an issue where non-VSM shadows were missing for Nanite geometry if there was no static shadow map. Nanite primitives are now included in static, non-static and uncached shadow maps instead of static only, and use Nanite primitive filtering to select the primitives with the matching mobility on GPU.\n\n  * Fixed issue where distance field shadows and far shadow culling would not work correctly when r.Shadow.Virtual.ForceOnlyVirtualShadowMaps=1\n\n  * Fixed popping in distance field shadows when new distance field mips are streamed in.\n\n  * Fix hash collisions in raytracing auto-instanced mesh batches\n\n    * In some rare cases different materials could be detected as identical by the ray tracing auto-instancing code, leading to incorrect appearance. This was most noticeable with path tracing which uses ray tracing for primary rays, but could happen in any ray-tracing based pass as well.\n  * Fixed incorrect upsampling in distance field shadows that caused minor artifacts.\n\n  * Fix incorrect rect lighting on translucent light grid.\n\n  * Fix overflow when computing rect light texture MIP causing incorrect atlas packing.\n\n  * Fixed bug where downsampling capsule shadows would cause a crash in rare cases due to a groupsize of 0\n\n  * Fixed issue in distance field shadows when using r.HeightfieldShadowing.\n\n  * Solve OOB access of FLocalLightData when LinkedListCulling is off. Add GetMaxLightsPerCell that returns GMaxCulledLightsPerCell when LinkedListCulling is off and NumLocalLightsFinal when it is on Replace calls of GetNumLocalLights with the GetMaxLightsPerCell where it would cause an OOB if used with LinkedListCulling off\n\n#### Lumen\n\nNew:\n\n  * Added multi-bounce reflection support for standalone Lumen reflections.\n\n  * Added performance overview view mode to Lumen. It visualizes pixels requiring dedicated reflection rays and is useful for reflection performance optimization. Accessible either from the Editor UI or from console (r.Lumen.Visualize 2).\n\n  * Implemented wave32 wave ops version for ScreenProbeConvertToIrradiance in order to make it faster on GPUs which support wave32, but don't support wave64.\n\n  * Added support for multiple scattering approximation w.r.t. project setting\n\n  * Release Lumen GPU resources when Lumen is being disabled at runtime.\n\n  * Optimized Global Distance Field update by overlapping clipmap updates and merging initial culling pass.\n\n  * Log asset name when encountering a mesh card with corrupt derived data.\n\n  * Optimized FLumenMinimalPayload size by replaced PrimitiveIndex and PrimitiveInstanceIndex with a single GPUSceneInstanceIndex.\n\n  * Added capture of translucent meshes into lumen card for ray traced lumen reflection&refraction.\n\n  * Exposed screen space trace settings in the Post Process Volume\n\n  * Add light function altas support for Lumen scene lighting. This allows all ligths with (compatible) LF to be batched during Lumen scene lighting (-0.1ms)\n\n  * Replaced float epsilon comparison in Lumen Front Layer Reflection with a float precision relative one to make reflections work the same independent from the camera distance.\n\n  * Reduced leaking caused by the World Space Radiance Cache.\n\n  * Disable RAY_FLAG_FORCE_NON_OPAQUE when it's not needed - it's only used for a short distance from the surface in order to skip back faces in some tracing methods. This speeds up Lumen with hardware ray tracing by 0.1-0.2ms on consoles.\n\n  * Turn noise into less noticeable structured error by constraining random ray directions to a smaller subset which can be handled by a temporal accumulation.\n\n  * Don't build the ray tracing light grid when it isn't used. This saves ~0.12ms on consoles when hardware ray tracing is enabled.\n\n  * Improve Lumen card add/remove. Change most of the tracking logic to use bitfield for fast indexing (2x/3x improvements).\n\n  * Change Lumen scene lighting to batch light with IES profiles since IES profile are now atlased and can be dispatched in one pass. Save 0.1ms during LumenSceneLighting with 100 scattered IES lights.\n\n  * Exposed \"Max Roughness To Trace Reflections\" the in Post Process Volume. New CVar r.Lumen.Reflections.MaxRoughnessToTraceClamp can be used to clamp it for scalability purposes.\n\n  * Fixed light function to be clamped, avoiding making shadow area too bright.\n\n  * Merge Lumen mesh cards requests allocation to remove array growing cost. This reduces UpdateSurfaceCacheMeshCards from worst 54ms -> 14ms avg: 28 -> 5ms.\n\nBug Fix:\n\n  * Fix race condition between Lumen scene lighting, and atmosphere transmittance update. This could cause some flickering when the directional light parameters are animated (which would reset the directional light transmittance value).\n\n  * Don't require DFAO to be enabled in order to compose Landscape into the Global Distance Field, as other systems like Lumen may also be using it independently.\n\n  * Fixed \"r.Lumen.ScreenProbeGather.Temporal.RejectBasedOnNormal 1\" causing artifacts due to mismatching history scene normal (overwritten by water) causing constant temporal history rejection.\n\n  * Fixed cloud shadow support\n\n  * Fixed crash when using SM5 shaders with hit lighting. Hit lighting uses wave ops inside ComputeDirectLighting, which are not supported on SM5.\n\n  * Fixed crash when only Lumen translucency volume is using hardware ray tracing\n\n  * Fixed stale indirect lighting bug when switching scalability levels or switching GI quality through the Post Process Volume.\n\n  * Fix missing normal bias for screen space reflection tracing.\n\n  * Fixed Lumen Screen Probe Gather when tile tile classification is disabled.\n\n  * Fixed Lumen cards for landscape : those require the landscape fixed grid vertex factory now (this was working in the editor because of an unrelated bug) * Included those shaders in PSO precaching as well\n\n#### Materials and Shaders\n\nNew:\n\n  * [Shaders] - Implement recompile shaders on file save functionality for the editor. - Adds a directory watcher to watch for changes in //Engine/Shaders/... for usf/ush/h files. - When a file changes issue a recompileshaders /Engine/Shaders/Private/PostProcessGBufferHints.usfcommand. - This code should be WITH_EDITOR only. - This is opt-in behavior and can be turned on with r.ShaderCompiler.RecompileShadersOnSave=1\n\n  * Modify Cvar r.Shaders.WarningsAsErrors to only apply to global shaders when value is 1 (and all shaders only when value is 2 or more) The default value is still 0 (off), but this gives a better mechanism to investigate shader warnings on global shaders.\n\n  * [Shaders][Optimization][EditorInitiative] - Instead of calculating the Material DebugGroupName for every shader we draw with, calculate it once per material and cache it. - TryGetShaders submits shader jobs for missing shaders. If a shader was missing it would calculate a DebugGroupName for the material for each shader. - Instead we now cache this once and store on the FMaterial. In my test scenario I saw large speedups on the Render Thread: - ~7x speedup to the average render frames that were heavy w/ draw command building after opening a map. - ~4x speedup to the worst case render frames.\n\n  * Holdouts: Implement the holdout flag for the deferred renderer When the holdout flag is enabled, the object will render black with an alpha matching the background. This is implemented with an extra condition in the basepass. The logic is only added to the base pass pixel shader when the project is configured to have post processing of the alpha channel to minimize the impact on games.\n\n  * Allow warnings as errors cvar to be set per platform\n\n  * [Shaders][Material Editor] - Add generic, data driven key, value shader statistics. - Shader stats are simply key (FName) and value (POD types) that are stored per-shader. - A Shader Statistic is a variant that can take on the following POD types: bool, float, int32, uint32 - Currently don't support strings since those weren't as trivial to implement (needed conversion and special case code to support serializing these to the memory images required by shader maps) - Adds another shader statistics row in the Material Editor that will show the platform specific stats. - The platform statistics are turned into a comma and newline separated string that is displayed to the user. - Bump the shader output worker version since I'm changing the output file format (to contain the stats). - The shader compiler output stores the stats as a TMap<FString, FShaderStatVariant>. Serializing across FNames between Shader Compiler Worker and the main process wasn't working (different name tables). - When storing and serializing the stats to the shader map we convert them to FNames. (see FShader::FShader())\n\n  * [Shaders] - Discard non-stripped, original shader source to save on memory. Saves ~2x of the memory tracked by the LLM tag ShaderCompiler in small projects. For Lyra this saved ~600MB during a cook. - If we need the shader source (i.e. material stats in the editor) we still keep the data around. The editor compiles shaders on demand and doesn't try to load these from the DDC so we don't have to worry about cache pollution. - Shader Debug Info also needs this information so we keep it around if developers are running with this enabled. - Added a helper function to the job input which determines if we need to store the original source code. NeedsOriginalShaderSource() [FYI] sebastian.schoner, Graeme.Thornton\n\n  * [Shaders][ODSC] - Implement on demand shader compilation when recompile all materials after saving a material function. - Reduces shaders compiled from 13,000 to 300 in my test case - ~4 seconds saved in UMaterialFunctionInterface::ForceRecompileForRendering due to not having to build and submit shader jobs.\n\n  * Add prioritization to the categories on UMaterials The order is the following organized by most important and grouping similar areas together: - Material - Nanite - Translucency - Translucency Self Shadowing - Refraction - World Position Offset - Post Process Material - Mobile - Forward Shading - Physical Material - Physical Material Mask - Usage - Lightmass - Previewing - Import Settings\n\n  * Transformed MaterialTemplate.ush to use named parameters %{num_tex_coords} instead of %s positional parameters.\n\n  * Introduced Material Translation DDC caching.\n\n    * This update introduces a caching system for material translation outputs. Now, after a material is translated, the intermediate results are saved in the Derived Data Cache (DDC) for later use. When a translation for a material is needed, the system first queries the DDC for the existing combination of the base material, parameter sets, and platform-specific information. If this data exists, the stored results are retrieved, bypassing the need for a costly translation process and separating material translation from shader generation. The key benefit of this update is that updates to the material template source file or any dependent shader files no longer require the material to be retranslated. The material shader can still be generated accurately using the cached translation results. This ensures that the material string generation consistently uses the most current input shader files.\n  * Add dynamic ray traced translucent shadows (off by default). It is available to high end PC. 1. Change the default to not trace translucent materials for shadow to align well with Lumen where translucent material does not cast shadow. 2. Use 'r.RayTracing.Shadows.Translucency 1' to turn on the dynamic ray traced translucent shadow. The shadow term is the accumulated visibility based on opacity.\n\n  * With UE 5.4 we have done a fairly significant overhaul of how shader compilation jobs are queued, where shader compilation-related work in the cook process is executed (significantly improving parallelization), and how we identify and cache potential duplicate shader jobs. Significant effort has also been invested in optimizing all parts of this pipeline. The results of this work:\n\n    * Approximately 30% fewer shaders compiled due to improved deduplication (numbers from internal projects, your mileage may vary)\n    * Significantly less game thread overhead when submitting and processing shader compilation work\n    * Significantly faster shader preprocessing\n  * All of the above have contributed to a drastic improvement in project cook times, particularly when shader invalidations occur.A quick overview of what we're doing differently under the hood:\n\n    * Shader preprocessing and deadstripping is now executed in the cooker/editor process as part of job submission, rather than being the first step of the compile process.\n    * Cache keys for individual shaders (used for the existing in-process job cache, and for per-shader DDC entries) are constructed based on this preprocessed & dead stripped source.\n  * As a result of the above, when per-shader DDC queries are enabled this can drastically reduce the amount of shader compilation work that is needed when a shadermap is invalidated, since results for individual jobs may already be available in the cache. Even without per-shader DDC, however, this still provides an improvement due to improved deduplication of jobs via the existing in-memory job caching mechanism. Note that as of 5.4, per-shader DDC is still only enabled by default for the editor on-demand shader compilation usage; however as an experimental feature for 5.4, we've added the ability to cache individual shader compilation results via DDC during cooks. When used in conjunction with a shared DDC via ZenServer, this reduced impact of shadermap invalidation extends to the cook process - in usage in internal projects this has reduced the frequency of cooks which compile a large number of shaders by an order of magnitude. If you'd like to experiment with this feature you can enable the following cvars: r.ShaderCompiler.PerShaderDDCCook=true r.ShaderCompiler.JobCacheDDCEnableRemotePolicy=trueWe expect to enable these by default for UE 5.5. Note that it is not recommended to use this feature in conjunction with a file share based shared DDC; the overhead of pushing/pulling data from the fileshare outweighs the benefit (shared Zen server is much more performant).Note there are a couple of caveats to be aware of with the preprocessed shader job caching feature:\n\n    * When per-shader DDC is enabled (via ODSC or otherwise) it's no longer a guarantee that any change to a shader source file will trigger compilation; whitespace, comments, and dead code will all no longer result in mutation of the key used to identify a particular shader compile job. To force a shader invalidation you must now use a new mechanism based on #pragmas, see ShaderVersion.ush for an example of usage. This file as such can still be used to force recompilation of all shaders - however all such pragmas found during preprocessing will be automatically included in the hash we use as the cache key for shader jobs, so it's possible also to perform more granular/targeted invalidations with this mechanism.\n    * The shader source passed to the compiler is now stripped of all comments, line directives and blank lines. As a result when debug information is generated for shaders, filename associations will not be available when inspecting via debugging tools (RenderDoc and friends). If this is problematic, the feature which controls this has a cvar toggle and can be disabled locally via: r.ShaderCompiler.PreprocessedJobCache=false\n  * CookShadersCommandlet for generating a subset of shader symbol files based upon input params Can filter from a ShaderSymbols.info file, or by material name directly\n\n  * Expose virtual texture physical pool settings in the project engine settings UI. Enable live edit of the settings, with physical pools being recreated on changes. Add config option to auto grow physical pools whenever a pool is oversubscribed. The config option applies in editor only. There is an additional consolevariable \"r.VT.PoolAutoGrow\" that does the same thing in cooked builds.\n\n  * Added logging of total shader compile worker memory usage in out-of-memory conditions\n\n  * Do not compile Raytraced input on a RayTracingQualitySwitch material node for platforms that do not support ray-tracing\n\n  * Change D3D diagnostic buffer to output readable assert message (file/line/condition/message). Use with check() / checkf()\n\n  * DirectXShaderCompiler (DXC) has been enabled by default for all remaining SPIR-V shader backends.\n\n  * Added a 'default' overlay material option to a skeletal mesh asset. When assigned this overlay material will be used if component does not override it\n\n  * Properly aggregate material stats when performing multi process cook. These stats will be reported when we report shader stats: === Material stats (aggregated across all cook processes) === Materials Cooked: 1583 Materials Translated: 1275 Material Translate Time: 1.70 s - Materials Cooked, Materials Translated, and Material Translate time are the stats that are aggregated and reported to analytics. - Piggyback the material counters aggregation in the existing shader stat aggregation for simplicity. - Removed outdated, or not impactful material cook stats. In most cases these values are extremely low and don't matter for a cook.\n\n  * Added new runtime virtual texture \"Displacement\" format intended for use with Nanite displacement. This uses a 16bit UNORM texture, or when set to compressed will use BC4.\n\n  * [Shaders] - Add LLM markers to track memory of shader compilation to help diagnose out of memory issues. - Instruments: (FShaderCompilingManager::SubmitJobs, FShaderCompilingManager::ProcessAsyncResults, GlobalBeginCompileShader, FShaderJobCache::FindOrAdd)\n\n  * Add a toggle r.AreShaderErrorsFatal which controls whether or not DefaultMaterial and global shader errors are fatal. - This defaults to True, which is the current behavior. - The idea is to turn off Fatal errors (and just Error) in situations where we want to see all shader compile errors and not simply just stop when Default Material or global shaders fails.\n\n  * [Shaders] - If shader dev mode is on assume that any shader errors from materials are due to source code (and not the material graph). - This way shader retry on error works for material shaders (right now it only works for global shaders and the default material). todo: Fix a bug that causes the retry on compilation to still report the errors even after they are fixed. [FYI] chris.kulla\n\n  * This change modifies the chain of shader preprocessing to avoid back-and-forth conversions between wide and ANSI characters, providing a significant performance boost to shader preprocessing time.\n\n  * Make support for virtual texture 16bit page tables configurable using the consolevariable \"r.VT.Support16BitPageTable\". Defaults to on which is the existing behavior.\n\n  * Added support for a writing fixed color when baking the low resolution streaming mips for a runtime virtual texture. This replaces the fixed \"debug\" color and allows us to use the feature outside of debug usage. Added r.VT.RVT.MipColors consolevariable which uses the fixed color support to generate runtime virtual texture pages using debug mip colors. This is useful for debugging issues with materials sampling higher resolution mips than expected. Added support for custom expansion distance for runtime virtual texture volume bounds.\n\n  * Modified the code that adds comments to all shaders containing all define names and values such that this is only added to the debug USF file rather than being included in the shader source passed to the compiler.\n\n  * Significantly refactored the shader preprocessing code such that all shader formats now execute a common function for the bulk of preprocessing, and those that have their own implementation only deviate in minor ways from the common path (typically by setting additional defines that are not known at job creation time).\n\n  * Add a command line option to the cooking server to skip cooking unsolicted packages. - This adds -odsc which for now just skips unsolicted packages. - This would only be used when you are launching the cooking server to just process ODSC recompileshader requests and not cooked packages.\n\n  * Do not compute per-instance parameters (fade amount, show/hide, dither) in a vertex shader if material does not use them\n\n  * ShaderMinifier - Use memstack for various temporary allocations\n\n  * Added translated world space (camera-relative) options to several material expressions with a worldspace input or output. Using translated worldspace is more performant and more precise than absolute world position.\n\n  * ShaderMinifier - Optimize BuildLineBreakMap, SkipUntilNonIdentifierCharacter, ExtractIdentifiers and few other bits Generate line directive map during parsing Use xxhash instead of cityhash Avoid FStringView operator [] in ExtractIdentifiers Use TArray Reset instead of Empty where appropriate Vectorize SkipUntilNonIdentifierCharacter Vectorize ExtractBlock Vectorize line ending search Use FString directly instead of FStringBuilderBase for the final output to avoid a copy\n\n  * Added a new \"Always Evaluate World Position Offset\" material property to force World Position Offset to be always evaluated, meaning that it cannot be disabled by \"Evaluate World Position Offset\" or \"World Position Offset Disable Distance\" on the component.\n\n  * Added an API to get approximate committed memory usage for local shader compile workers\n\n  * Remove non-WPO position from interpolators if pixel shader does not need it\n\n  * Report the number of shader type and vertex factory type permutations to cook analytics. - Aggregate all the shader type permutations and report them as Shaders_NumShaderTypePermutations - Aggregate all vertex factory type permutations and report them as Shaders_NumVertexFactoryTypePermutations\n\n  * Implement recompileshaders listtypes command. - This dumps a list of all shader types and vertex factory types in the engine. It is dumped in csv format and includes class name and shader file name. - This list is useful in combination with other recompileshaders commands to compile a single shader (where you need the file name). - Minor formatting and whitespace fixing. Example: Cmd: recompileshaders listtypes ShaderTypeName, Filename FHardwareVideoDecodingYCoCgAlphaPS, /Plugin/WmfMedia/Private/MediaHardwareVideoDecoding.usf FHardwareVideoDecodingYCoCgPS, /Plugin/WmfMedia/Private/MediaHardwareVideoDecoding.usf FHardwareVideoDecodingY416PS, /Plugin/WmfMedia/Private/MediaHardwareVideoDecoding.usf ... VertexFactoryTypeName, Filename TWaterVertexFactory< true>, /Plugin/Water/Private/WaterMeshVertexFactory.ush TWaterVertexFactory< false>, /Plugin/Water/Private/WaterMeshVertexFactory.ush FNiagaraSpriteVertexFactory, /Plugin/FX/Niagara/Private/NiagaraSpriteVertexFactory.ush FNiagaraRibbonVertexFactory, /Plugin/FX/Niagara/Private/NiagaraRibbonVertexFactory.ush FNiagaraMeshVertexFactory, /Plugin/FX/Niagara/Private/NiagaraMeshVertexFactory.ush FVectorFieldVisualizationVertexFactory, /Engine/Private/VectorFieldVisualizationVertexFactory.ush\n\n  * Display human readable DDC key for the DefaultMaterial. - This is to help debug and diagnose missmatched DDC issues between streams.\n\n  * Add tile support to default SSR without clear. 1. Use r.SSR.TiledComposite 1 to enable tiled SSR (off by default). 2. Use r.SSR.TiledComposite.Visualize 1 to visualize the current tiled SSR when SSR is enabled\n\n  * Improved volume texture visualization material creation to use a MaterialExpressionBounds node instead of a custom HLSL node. [FYI] mihnea.balta\n\n  * Add strongly typed EShaderOptionalDataKey to access shader optional data instead of adhoc characters\n\n  * Improved error reporting for global shader compilation failures; now the shader type, permutation, and debug info paths will be included in error messages printed when such failures occur.\n\n  * Adds r.Shaders.SymbolsInfo option which generates a singular ShaderSymbols.info in lieu of full PDB info. Useful when full shader PDBs are impractically large, but some PDB information is desired.\n\n  * Added new \"Bounds\" material expression to expose object local, instance local and pre-skinned local bounding boxes info with a single node.\n\n  * Add support for not unmapping all pages when invalidating a runtime virtual texture. Previously the behavior was to only keep locked root pages mapped and produce them in the current frame. Unmapping all other pages caused flickering, because it will take a couple of frames to get GPU feedback requesting them for remap. This change adds the consolevariable \"r.VT.RVT.DirtyPagesKeptMappedFrames\" and defaults it to 8. Pages that had GPU feedback in the previous number of frames set by this are kept mapped but queued for update. Setting the to 0 should give the old behavior. The behavior of the pages queued for mapped update is also changed so that it is no longer handled in the current frame but time-sliced along with other unmapped updates.\n\n  * Only log shader compile stats if we've compiled more shaders since we last tried to log stats. - Printing still happens on an interval (controlled by CVarShaderCompilerStatsPrintoutInterval) - If we have hit our interval, and the number of shaders compiled is different since last time, we print. [FYI] Yuriy.ODonnell\n\n  * Do not compile Nanite input in \"Nanite Pass\" material expression for platforms that do not support Nanite\n\n  * Introduced material translation logging to MaterialTranslationLog.txt, containing the list of all translated materials since startup and their translation time.\n\n  * Source shader filename is propagated to to dxc instead of using a placeholder\n\n    * This improves readability when using third party profilers\n  * Runtime virtual texture volume can now be enabled per platform. This removes overhead of physical pool allocations that aren't needed when materials disable runtime virtual texture sampling per platform. Runtime virtual texture volume can now be enabled only if Nanite is turned on. This is useful for the new Nanite only use case of Nanite landscape displacement.\n\n  * Added an \"Allow Variable Rate Shading\" checkbox to material details under Materials -> Advanced. This setting is checked by default.\n\n    * When unchecked, the material will be opted-out of all Variable Rate Shading, both per-draw (Tier 1) and screen-space (Tier 2).\n    * Materials using the Masked Blend Mode are opted-out by default\n  * Only allocate virtual texture physical texture pools when there are allocated virtual textures using the physical space. This removes a common case of unnecessary memory allocation when a streaming virtual texture has been loaded but is unused.\n\nBug Fix:\n\n  * Fix Subsurface Profile material in scene capture with r.SubsurfaceScattering set to 0 causes wrong value in alpha channel.\n\n  * Fix threading race condition in virtual texture release that could lead to intermittent crashes during very heavy streaming.\n\n  * Improved the way we handle null expression in MaterialFunction expression collection. Made GUID invalidation when null expressions are detected on MaterialFunction::PostLoad() deterministc so not to bloat the DDC with new shadermaps. Added a message box on MaterialFunction save that informs the user their function is corrupted and needs to be checked-resaved.\n\n  * Nullptr check to prevent CanPasteHere from crashing.\n\n  * Make FTargetPlatformManagerModule::ShaderFormatVersion thread safe\n\n  * Fix incorrect mips streaming and assert firing when a runtime virtual texture has both low mips removed and a low resolution mip streaming texture.\n\n  * Fix Subsurface Profile has artifacts if it is behind a translucent material that uses its basecolor\n\n  * Fixed the shader debugging \"direct compile\" mode; debug USF files dumped with other shader debug info now contain a serialized form of the environment instead of relying on fragile commandline parameters to set this up correctly.\n\n  * This change reworks how shader parameter metadata influences DDC keys by constructing a strong hash of the parameter layout for all parameter structs once on engine startup. This should resolve once and for all any bugs with shaders not being properly invalidated when shader parameter structs are changed in code (specifically when no related changes are made to the HLSL code at the same time).\n\n  * Fixed an issue where materials using the Masked Blend Mode could become invisible when using MSAA with a 1x MSAA count.\n\n  * Handle line directives in ShaderMinifier ExtractBlock() * Fix reporting line numbers in shader compile errors/warnings\n\n  * Fixed a bug resulting from global shader jobs colliding when preview platforms are enabled; this was causing missing global shader permutations when previewing.\n\n  * Fix the r.VT.PoolSizeScale console variable so that it can be changed at runtime and pools will immediately adjust.\n\n  * Fixed an issue where overriding \"Has Pixel Animation\" in a material instance might not have any effect.\n\n  * Fixed custom material expressions changes not updating cached materials.\n\n  * Fixed the shader BRDF header files generated in code so that this occurs prior to loading and caching shader source file information. This occurring in the opposite order was resulting in these headers potentially being out of date when compile jobs were submitted.\n\n  * Fixed crash occurring in FMaterialEditorUtilities::GetVisibleMaterialParametersFromExpression when a function input isn't found.\n\n  * Refactored CompileDebugViewModeShaders() to include material shader error checking solving an Editor hang situation.\n\n  * Correctly disable rendering of overlay material if Max draw distance set to a negative value\n\n  * Add null pointer check to FindInputdByName().\n\n  * Fixed ShouldCache call being bypassed when getting shaders, which could lead to missing shader types on cooked build while ODSC would instead let them build if requested. Now ShouldCache should be respected in all cases : if it returns false, the shader will be missing both with and without ODSC.\n\n  * Fix the runtime virtual texture format \"Base Color, Normal, Roughness\" giving a washed out appearance. This was because the BaseColor texture wasn't set to sRGB.\n\n  * Fix to UMaterialExpressionNamedRerouteUsage::CompilePreview crashing when opening a material.\n\n  * Fixed batch files output for PC DXC shaders when debug info is enabled (these batch files can be used to execute DXC shader compilation directly rather than via ShaderCompileWorker).\n\n  * Fix for crash occurring when linking a node to the UV input of a Texture Sample.\n\n  * Fixed a bug where hair strands would be cooked out on Windows if the project had ES31 shaders as an option, even though they would be usable at runtime when rendering with SM5/6 shaders\n\n  * Fix verbose logging of shader hashes to be deterministic - parts of the FSHA1 struct are seemingly intentionally uninitialized, but further hashing this struct itself doesn't really make sense. We now instead copy the incremental state and generate a \"final\" hash after each file; this isn't the hash of just that file but rather the hash of all files up to the point of that file, which is not perfect but good enough to track down real nondeterminism issues.\n\n  * Added null check to FHLSLMaterialTranslator::GetMaterialEnvironment() to avoid crashing when a referenced Parameter Collectino fails to load (e.g. no longer exists).\n\n  * Fixed crash occurring when linking a node to the UV input of a Texture Sample.\n\n#### Nanite\n\nNew:\n\n  * Nanite Tessellation: Can now enable dynamic view dependent tessellation on materials that are applied to Nanite meshes. With Nanite Tessellation enabled you can dynamically displace the surface through the new Displacement output pin in the material.\n\n  * Implemented RDNA 1 & 2 ISA parser to optionally detect if a compute shader has any need for implicit derivatives (image sample, ddx, ddy, etc.). Certain shaders can be marked with CFLAG_ExplicitDerivatives, indicating the shaders prefer to handle derivatives explicitly, and this instructs the shader compiler - on supporting platforms - to parse the compiled ISA and look if any instructions requiring implicit derivatives are present. If none are found, the shader is decorated with NoImplicitDerivatives, indicating it is safe to ignore shading quads, etc..\n\n  * Massive CPU optimizations to Nanite CS materials (add to scene, and also per-frame dispatch). Also includes optimizations to cache coherency, memory reductions, much more maintainable code, and also includes an important fix to hash the shader bindings (dynamic instancing hash) instead of explicitly hashing things like the FLightCacheInterface* and lighting policy. The previous logic would explode the # of shading bins (2-3x) when features like static lighting were enabled, even when most of the LCI's ended up pointing to the same light map resources/constants. This change also parallelizes the bulk of BuildShadingCommands, and removes the front loaded TPimplPtr from FNaniteShadingCommand and instead put it around the pass specific members to keep the important data on contiguous cache lines.\n\n  * Heavily optimized InitViews and ComputeRelevancy for Nanite scenes (up to 8x faster on the render thread in CitySample) - requires Nanite compute materials to be enabled. == Off by default pending extensive testing (r.Visibility.SkipAlwaysVisible=1 to enable) Now all the primitive arrays are kept sorted into a \"tested\" vs \"always visible\" partition, which are then internally sorted by proxy type for cache coherency, using the primitive component ID as a tie breaker and to improve determinism (new implementation of FPrimitiveArraySortKey) The partition split location for \"tested\" vs. \"always visible\" is very efficiently calculated from the TypeOffsetTable using only a few loop iterations (as opposed to scanning the array), stored in Scene.PrimitivesAlwaysVisibleOffset (~0u if no always visible partition, or if optimization is disabled) The partition split location is aligned up to the next full dword - this is to avoid having a single dword spanning \"tested\" and \"always visible\" primitives making the lockless parallel calculations much more efficient. This will push a few (<32) primitives from always visible into the tested path, but this is not a big deal. FPrimitiveSceneProxy has a bIsAlwaysVisible flag (default false) that determines which partition it gets sorted into. Nanite determines this value with Nanite::FSceneProxyBase::SupportsAlwaysVisible() Countless places now only iterate from 0...StartOfAlwaysVisible range instead of 0...NumPrimitives, dropping the tested primitive count by orders of magnitude. r.Nanite.OptimizedRelevance=1 has been in place for a few years now, so this optimization now enforces optimized relevance in !WITH_EDITOR builds, and relies on assumptions from this (r.Nanite.OptimizedRelevance has been baked down and cvar removed) Nanite forces off IsUsingDistanceCullFade now so that any Nanite proxies going through FrustumCull will no longer test for fade distances (which are not even supported by Nanite) A new UpdateAlwaysVisible tasks is launched prior to FrustumCull (which waits on ray tracing if needed), and then FrustumCull waits on this new task. This task is responsible for filling the PrimitiveVisibilityMap for always visible primitives, and also for testing ray tracing culling per primitive for the TLAS stat initviews now contains an additional \"Always Visible\" timer that shows the thread time spent on processing the always visible primitives (primarily ray tracing cull tests for the TLAS) - this is not a measure of wall time though, as it's largely async Renamed (to match other methods like prepass) FDeferredShadingSceneRenderer::IsNaniteEnabled() -> ShouldRenderNanite() and moved it to the base FSceneRenderer under a virtual that can be checked in the FComputeAndMarkRelevance task Deleted legacy and broken r.Visibility.PrimitiveCull.SkipNanite cvar and logic FPrimitiveSceneInfo::CacheNaniteMaterialBins now calculates material relevance across all shading pipelines, and merges them into a combined primitive view relevance struct (without any view dependent bits, as Nanite does not have any per-view relevance tests that are respected) The combined Nanite relevance is now merged into FViewInfo at the end of FComputeAndMarkRelevance::Finalize(), after waiting for the CacheNaniteMaterialBins task to finish (which computes the combined relevance) Switched FrustumCull and UpdateAlwaysVisible tasks to use RESTRICT instead of GetData() to allow the compiler to perform additional optimizations Nanite \"tested\" primitives no longer create mesh draw commands when going through FDrawCommandRelevancePacket::AddCommandsForMesh FRelevancePacket::Finalize() now completely skips creating visible cached mesh draw commands for the NaniteMeshPass Optimizing the relevance code was critical after pushing 60k+ primitives (in CitySample) down the always visible pass, because now there were ~124k static mesh relevances to process, which would previously rely on accurate visibility. It was an insane amount of overhead to compute something that is effectively not a per-primitive or per-mesh decision in Nanite. Nanite Proxies using features like custom depth, lighting channels, or static lighting will be forced down the \"tested\" path. Additionally, the editor will disable the \"always visible\" optimization due to various features like hit proxies or debug view modes relying on dynamic relevance (this will hopefully be addressed in the future).\n\n  * Nanite rasterizer scheduling rewrite - massive CPU/GPU/Memory optimizations (avoiding 2-4x redundant work in most cases, overlapping passes to fill bubbles, reuse rasterizer pass results between main vs post and !tessellated vs tessellated). Also makes it very flexible to support multiple rasterizer passes efficiently, and try different overlapping schemes\n\n  * Initial Nanite support for RHI shader bundle dispatch functionality (exclusively in CS material path)\n\n  * Implemented graphics pipeline support for shader root constants\n\n  * Improved culling effectiveness by adding explicit instance hierarchy cell bounds (r.SceneCulling.ExplicitCellBounds), as well as debug rendering of cells (r.SceneCulling.DebugRenderMode).\n\n  * Initial support for Nanite displacement scaling to work for MICs (upload and fetch via UB instead of baking into base material template)\n\n  * Refactor of Nanite fixed function rasterizer binning fallback ** - Fixes race condition with FixedFunctionBin where it would usually not be set by the setup task prior to shading binning RDG pass running - Fixes issue where even if FixedFunctionBin wasn't racing, a scene with no fixed function materials would have no fixed function bin to search for - Fixes cases where spline meshes and/or two sided would fall back to a fixed function bin that wasn't capable of rendering correctly - Simplifies the 100% disable case by only having a single codepath - Now supports raster binning shader selectively choosing which raster bins remap to fixed function (i.e. supporting by distance or other criteria)\n\n  * Updated the Variable Rate Shading manager, Contrast Adaptive Shading generator, and Foveated Shading generator to allow generating a shading rate image with a 2x2 pixel tile size, smaller than that supported by hardware VRS. This \"software VRS image\" can be generated on its own by toggling on r.VRS.EnableSoftware 1 (even on platforms that do not support VRS) or alongside a typical hardware image, and can be requested by rendering passes designed to use it in their compute shaders (currently only Nanite base pass).\n\n  * Implemented Nanite mesh shader support for VK_NV_mesh_shader extension, and re-enable VSM mesh shader rasterization now that the the arg wrapping is implemented and we're D3D12 mesh shader spec compliant.\n\n  * Shader root constants support (initially) for DX12 - shader bundles now have a very fast path that pushes record index and 3 arbitrary pass data parms into root constants without the need for a global uniform buffer.\n\n  * Optimized Nanite CS material sort key, saves ~0.16ms in CitySample Nanite BasePass without bundles (4.79ms -> 4.63ms) The general idea now is: First group all shaders with the same bound target mask (UAV exports) Then group up all shading bins using same shader but different bindings * Sort indirect arg memory location in ascending order to help minimize cache misses on the indirect args\n\n  * Lightmap support for Nanite CS materials\n\n  * Updated Nanite texture coordinate encoding so that it is always crack-free and better handles texture coordinates with very high repeat counts.\n\n  * Enabled hierarchical instance culling & precomputation by default (r.SceneCulling). This improves instance culling performance for dense scenes like CitySample significantly, in particular when there are many local lights.\n\n  * Optimized Nanite combined material relevance with always visible path\n\n  * Added a new \"Enable Tessellation\" option to materials to explicitly enable or disable tessellation (and therefore displacement) in materials and material instances.\n\n  * Enable r.Visibility.SkipAlwaysVisible by default now\n\n  * Fully disable the \"skip always visible\" optimization under WITH_EDITOR for now (only cooked builds will run it)\n\n  * Implemented Nanite tessellation visualize modes (patches, (micro)triangles, and tessellation)\n\n  * RDNA disassembler fixes: Support for DS instructions, Fixed DS microcode format, and Added missing instructions\n\n  * Added a new Nanite Visualization mode for pixel-programmable rasterization.\n\n  * Optimized Nanite transcode pass to run faster on Intel ARC GPUs.\n\n  * Added \"Max Edge Length Factor\" to the Nanite Settings of Static Mesh to mitigate oversimplification of Nanite meshes that are intended to be deformed (e.g. via World Position Offset or Spline Mesh Component).\n\n  * Added CFLAG_ShaderBundle and decorated Nanite CS materials with it (some platforms can use this to build relevant data structures for internal bundle implementations).\n\n  * Cleaned up shader bundle public API to remove unused buffer arguments, changed record index and platform data over to root constants, and fixed some flow control issues on some platforms.\n\n  * Enable Nanite shader bundles by default\n\n  * Added LerpUVs property to Nanite static mesh settings. Enabled by default. When disabled UVs are not lerped in the simplifier. This is useful when data stored in UVs isn't valid to interpolate, for example indexes. Allows the AnimToTexture plugin to be used on Nanite meshes without rendering artifacts.\n\n  * Updated Nanite DispatchBasePass to new shader bundle dispatch API\n\n  * Hooked up Nanite CS materials to CPU visibility culling results, and also significantly optimized CS material PSO retrieval.\n\n  * Improvements to RDNA ISA logic\n\n  * Implemented Nanite material visibility support for CS materials, significantly dropping CPU overhead in certain scenes (matching what PS materials already supports)\n\n  * Implemented new work in progress shader bundle dispatch API, that can take an aggregation of compute shaders / pipelines, a GPU generated dispatch XYZ count buffer, and launch a platform specific method of compacting/removing the zero sized dispatches from the aggregation, while also doing as little work on the CPU as possible.\n\n  * Implemented Nanite tessellation stats\n\n  * Improved Nanite disk encoding that is typically ~10% smaller after compression at the same quality.\n\n  * Significant improvements to Nanite rasterization performance for pixel programmable materials (Masked/PDO) on the order of 30-50%.\n\n  * Reduced the footprint of an internal Nanite buffer, saving some persistent VRAM with Nanite.\n\n  * Added proper mip sampling of displacement maps in materials with Nanite tessellation.\n\nBug Fix:\n\n  * Fixed an issue where Nanite tessellation would crash on Vulkan when using NVIDIA graphics cards\n\n  * Fixed the selection of Nanite collision meshes in Player Collision view.\n\n  * Fix a bug where the substrate outputs get mixed up in Nanite CS materials when \"Velocity Pass\" in Project Settings is set to \"Depth Pass\".\n\n  * Sampling an out of bounds UV set with Nanite now clamps to the highest available UV set instead of returning zero, which is consistent with the non-Nanite behavior.\n\n  * Fixed an crash when clearing the Cached Cooked Platform Data on a nanite displaced mesh. The Cache Tasks where not canceled and would sometime crash when destroyed.\n\n  * Fixed issue where the Nanite builder would crash on meshes with extremely large position coordinates.\n\n  * Race condition fix for Nanite CS materials using parallel cmd list submission (bundles disabled). Lifetime of visibility data was tied to RDG, but the parallel cmd lists can outlive RDG since they are not waited on until dispatched much later.\n\n  * Don't warn about using legacy IO path for Nanite if the game is not packaged with pak files\n\n  * Fixed a bug where some Nanite clusters would not be culled by the global clip plane, causing visual artifacts in things like planar reflections and portal rendering.\n\n  * Fix bugs with motion vectors on Nanite objects that have both materials with and without WPO when the project setting for \"Velocity Pass\" is set to \"Depth Pass\"\n\n  * Fixed a bug where Nanite materials would get mixed up when enabling/disabling sky lights in the scene.\n\n  * Improved (and correct) implementation of Nanite fast tile clear optimization. This new version fixes issues where even fully Nanite shaded tiles would not write through all/any of the gbuffer, but we would still unset the metadata (resulting in uncleared gbuffer / hall of mirrors). New implementation builds a per material bound target mask (based on shader reflection), masks that against possible bound targets suitable for the optimization, and then the clear shader determines which tiles are safe to optimize the meta data, and the rest are cleared by the regular hardware path.\n\n  * Fix a bug where all Nanite will render for a scene capture with \"ShowOnly\" actors enabled, but has an empty list.\n\n  * Fixed an issue where recently disoccluded Nanite objects would not render properly in non-instanced secondary stereo views, such as splitscreen views.\n\n  * Fixed issues with Nanite spline meshes calculating an incorrect tangent frame.\n\n  * Fixed issues that prevented tessellation from working with Nanite spline meshes.\n\n  * Race condition fix for CS materials with split screen, where View0 and View1 were sharing the same batched parameters memory, and trampling on each other during parallel command list recording.\n\n  * Fixed issue where Nanite Tessellation would crash on Intel ARC GPUs\n\n  * Fixed Nanite custom depth rendering to render correctly with r.CustomDepthTemporalAAJitter=0.\n\n  * Fixed an issue with missing Nanite Landscape rasterization shaders in cooked builds.\n\n  * Fixed some bugs with ray tracing Nanite spline meshes (still only ray traces the fallback mesh).\n\n  * Fix some race conditions in new Nanite raster scheduling (do not use the DispatchContext indirection lists on the render thread as the setup task may not have completed yet). Also fixed a GPU sync issue during patch splitting (pre-existing bug) where the indirect args were not present in the pass parameters, so RDG would not issue barriers for it.\n\n  * Fixes to Nanite fast tile clear on some platforms where the sub tile mode can be different than morton order\n\n  * Temporarily disable Nanite CS materials for Vulkan until there is support for CS explicit derivatives and implicit LOD\n\n  * Fixed a bug where negative scale in Nanite spline mesh parameters would cause the faces to be flipped.\n\n  * Fixed issue where cooking multiple platforms at once could cause some of them to be missing Nanite streaming data.\n\n  * Fixed an issue where a random Nanite object could appear selected in wireframe view when no objects are selected in the editor.\n\n  * Fixed custom depth rendering in right eye when Instanced Stereo is enabled with Nanite objects in view.\n\n  * Fixed Issue where Nanite imposter rendering would output incorrect depth values\n\n  * Fixed issue where rasterization of extremely long and thin triangles would not be watertight on some hardware.\n\n  * Fixed a bug with Nanite spline meshes where spline deformation might be randomly disabled on the mesh, due to using the wrong rasterization shaders.\n\n  * Fix for Nanite raster bin recompile shader crashes\n\n  * Fixed a rare crash caused by the Nanite builder simplifying a cluster to 0 triangles.\n\n  * Fixed Nanite picking visualizer from crashing on some platforms during GPU buffer readback, and improved the overall code\n\n  * Fix for issue where Nanite builder would not handle empty submeshes correctly.\n\n  * Correctly clamped rough VRS shading rates to 2x2 max for Nanite Software VRS. Software VRS is no longer disabled in areas using 2x4, 4x2, or 4x4 rates.\n\n  * Hardware ray tracing now respect the Minimum LOD index property for Nanite geometry.\n\n  * Fixed incorrect == operator for FVirtualPage in Nanite streaming manager, caught by static analysis\n\n  * Fix race conditions / lifetime with parallel cmd list recording and Nanite shading commands. Reactivate Nanite parallel base pass recording\n\n#### Niagara\n\nNew:\n\n  * Heterogeneous Volumes: Shadow-casting support and integration with translucency pass.\n\n    * Enabled via Heterogeneous Volumes category of Heterogeneous Volumes.\n  * The new Niagara Asset Browser revamps the menus when creating Niagara Emitters and Niagara Systems, as well as adding Emitters to existing Systems. It is similar to the Content Browser, and offers tagging functionality to organize your assets.\n\n  * Niagara per particle mesh LODs - This is disabled if we can not run the sort / cull process (i.e. OpenGL RHI) as we don't have a CPU LOD path currently\n\n  * Modify sim cache buffer data to be packed into a single array - Add optional BulkData serialization, controlled with bAllowSerializeLargeCache - Large caches (BulkData) can grow beyond 2GB and are considerably faster to serialize in the editor - Small caches will use TArray serialization and are not optimal. These are useful when sending data as text across the network for debugging for example as BulkData serialization is not supported by all FArchieve types - Clean up sim cache includes to reduce compiles - Update existing SimCache tests #virtualized\n\n  * Validation rule for user data interfaces [FYI] shaun.kime\n\n  * Add InsideVolume output to RVT sample - Change user parameter binding to be a UObject rather than exposing URuntimeVirtualTexture to Niagara\n\n  * Filter out attributes (for linked inputs) that are not allowed in the current usage context.\n\n  * Static mesh DI add socket sampling to safe CPU access functions\n\n  * Make Niagara Data Channel assets a BP Type so BPs can reference them.\n\n  * Change default for NDC DIs overriding spawn group when spawning particles. Preferred method is to now use the GetNDCSpawnData function.\n\n  * Add option to select particle mesh LOD based on component bounds - All particles will render at this LOD\n\n  * Remove \"experimental\" tag from Niagara sim caching plugin and enable by default\n\n  * Add platform set to Niagara System to allow systems to be culled for specific platforms / quality levels\n\n  * Add option for ribbon plane normals to follow the geometry rather than face screen / custom facing vector - This is now the new default as it matches the other ribbon shape modes - Existing content will use the previous mode\n\n  * Double-clicking a data interface function in the graph will now open the c++ source file\n\n  * Add cache comparison functionality to arrays\n\n  * Add optional CSV memory usage output for FX, mode is controlled with fx.DetailedCSVStats.MemoryMode and disabled by default as it impacts performance - Implement GetApproxMemoryUsage for Niagara and use this function in the debug HUD so we display Cascade memory usage\n\n  * Typing '/' in Niagara Script graph's action menu will now prioritize the 'Divide' action\n\n  * Added a new module to play looping audio\n\n  * Applying HeightFog and VolumetricFog in-scattering and attenuation to Heterogeneous Volumes.\n\n  *     * Added initial parameter support to the audio data interface * Reworked the existing audio modules a bit with better default values + added a module to initialize parameters\n  * Static variables can now be linked to non-static inputs of the same underlying type\n\n  * Add a pool for RDG texture / buffers - On some platforms artifical barriers were being added (i.e. d3d12) which resulted in slowdown - In my test for 400 dispatches with a neghbor grid it went from 3.6ms of GPU to 0.33ms\n\n  * Add platform set to sorting rules\n\n  * New Blueprint API to read/write data channels added new nodes that automatically generate matching pins for the data channel used added versioning information to data channel assets, so dependent assets can pick up on changes\n\n  * Heterogeneous Volume Component: Add ability to set VolumeResolution within a blue print\n\n  * Add ability to append to an existing simulation cache - Frames that are before the current simulation age / tick count will be culled - BeginAppend can be called vs BeginWrite and it will handle the initial setup if the cache is invalid - Update capture library with a new call so that we can specify all the parameters, such are removing timeouts, should we append, etc.\n\n  * Expose FFT solver for 2D gases\n\n  * Add SourceMode to object reader, allows you to easily read from the attached actor - Add support for invoking BP get functions to read properties - Fix issue with alignment on FVector4's\n\n  * Add auto attachment information to the HUD\n\n  * Show compilation error when writing to attributes from the wrong namespace (e.g. particle script writing to system namespace). This will be just a warning for 5.4, so old content can be fixed up (configurable via project settings).\n\n  * Add support for specular scale with the simple lights. Includes support for Niagara to set the attribute per light through the light renderer. #virtualized\n\n  * Optimizations to activation saves ~10% - 20% depending on system\n\n  * Added details panel support to data channel BP node, so users can exclude pins from being written to\n\n  * Enable GPU particles & sorting for Quest 2/3\n\n  * Niagara task priorities can be set per tick group - This helps to reduce wait times if we execute a simulation later and allows us to fit around physics tasks\n\n  * Set display name of Niagara double type to \"float\", as that's what is used internally for simulations and is also similar to the way Blueprint handles double types (which still display as float in the ui)\n\n  * Add GetTriangleIndices to skel mesh DI (This mirrors the functionality from static mesh DI) - Add Interpolated methods to get skinned vertex data to match triangle / bone\n\n  * Added a validation rule to make sure some modules are only used once per script\n\n  * Add warning to Niagara compile results if the constant table contains a NaN\n\n  * Niagara action menus: Removed parameter action favoring and halved NPC parameter search score. This should result in somewhat more accurate search results.\n\n  * Debug HUD add performance unit selection (millisecond / microsecond) - Add an auto mode to the perf graph for the unit scale\n\n  * Enable quick release of particle memory\n\n  * Added integer-based equal/not equal ops for enum graph pins\n\n  * Added Spawn Count Scale UI to emitter nodes\n  * Changed the scalability indicator to function as a toggle button to enter & exit scalability mode\n\n  * Allow newly spawned systems to avoid adding to concurrently running simulations - Situations can occur where we execute the simulations in a TG and then attempt in a subsequent TG or an async task on the GT to add to the concurrently running simulation - The new path will push the instance into an existing simulation that is not running concurrently or a new system simulation - This also fixes a potential issue with TG transfers where we might of added to the wrong simulation - The CVar fx.Niagara.WorldManager.AvoidAddingToExecutingSims can be used to flip between old and new behavior\n\n  * Simple tick group based exec ordering for systems reading from NDCs. We define a tick group which reads must be ordered after. Reads before, or writes after this TG emit a warning.\n\n  * Use explicit pin types on op nodes for type casting of connected inputs\n\n  * Test execution state before performing the LWC tile boundary test - This fixes an issue where crossing tile boundaries while deactivating could bring the instance back to active\n\n  * Add cast shadows option to sprite / mesh / ribbon renderers\n\n  * Add LOD mode to Mesh Renderer - Allows you to specify a LOD level to use or a LOD bias based on Min LOD - If the LOD level is not available it will fallback to the next available lower level\n\n  * Add support for reading the Skin Cache to Niagara Skel Mesh DI - Add a project setting (enabled by default) to control if this is enabled as some lower end platforms could have issues with the additional Buffer's\n\n  * Validation rule to check if sorting is enabled on sprite / mesh renderers\n\n  * Default SubUV blending to enabled on mesh / sprite renderers\n\n  * Added a hlsl function to generate unique random numbers picked from a given range (FastUniqueRandom)\n\n  * Added visualizations for volume textures stored in sim caches\n\n  * Niagara Notes have been refactored:\n\n    * Works with (almost) all kinds of stack rows now (inputs, properties etc., not just entire modules)\n    * Supports editing of notes after submitting them\n    * 'Full Display Notes' can now be converted to 'Inline Notes' by clicking on the note icon\n    * UI access via right click menu or on-screen widgets.\n  * Couple of optimizations to HLSLcc, replaces the use of a hash table to store referenced variable information with an std::multimap and optimizes the amount of data that needs to be copied as scope changes (if/loop/function) based on the instructions in the body of the scope rather than the entire outer scope. Validated against all shaders to produce the same result. In the case of Niagara VM shaders a particularly expensive system update script's compile time was brought from 16s down to 6s.\n\n  * Add support for SetEmitterEnabled in Niagara - Similar to Cascade this will halt all spawning, but won't naturally complete the emitter this will follow how emitter state is setup\n\n  * Support Spawning into any emitter from one shared DI. New value Engine.Emitter.ID available in the Map Get node. This is the current emitter's ID.\n\n    * Several NDC Data Interface functions now require an emitter ID if they interact with a specific emitter. For example when spawning via SpawnConditional.\n  * Debug draw for Position Array Data Interface\n\n  * Niagara template for painting 2d coordinates to a Render Target using Simulation Stages.\n\n  * Enable Niagara Debugger in UEFN Editor.\n\n  * Removed category from asset options in favor of the new Asset Tags\n\n  * Path tracing updates for Heterogeneous Volumes.\n\n    * Prevent per-frame grid build once simulation completes. Remove r.PathTracing.HeterogeneousVolumes variable, inheriting system default behavior.\n  * Fixed delete icon in Niagara parameter collection editor Fixed deleting an entry in a parameter collection via hotkey (instead of using the button) Fixed top level area expansion state\n\n  * DisableAdvancedFeatures in Niagara Preview Viewport - This saves a lot of memory per Niagara VP that is created by disabling things like Lumen\n\n  * Added Orbit Mode option to Sim Cache Editor Viewport. Orbit Mode defaults to enabled to match parity with the Niagara Editor Viewport.\n\n  * Optionally construct velocity buffer for heterogeneous volumes\n\n    * r.HeterogeneousVolumes.Velocity (Default = 0)\n  * Updated Overview Node UI for collapsed Emitter nodes Features:\n\n    * a thumbnail image that has to be manually taken by clicking on the Thumbnail button in the collapsed Emitter node.\n    * toggles for 'Determinism', 'World/Local Space' and 'CPU/GPU'\n    * When clicking on the node, summary view is displayed\n  * Show restricted content stack errors for scratch pads that use things like custom hlsl nodes\n\n  * Fix Blueprintcallable vs DLL exposed inconsistencies\n\n  * GDME Niagara shadow opts - Early out if all views can never create a mesh batch & improve per view early out for shadow passes - With 30 instances of a test asset this was ~3.0ms -> ~1.8ms for GDME. We still had a couple of renderers casting shadows but the majority do not.\n\n  * Changed Lerp C pin's friendly name to 'Alpha'\n\n  * Added analytics for system data, cascade conversion and sim caches\n\n  * Hierarchy Editor: Visuals are a bit more consistent with the rest of the engine - Changed the layout from a horizontalbox to a splitter. Allows resizing of the the three columns\n\n  * Niagara renderer can now provide a streaming scale for materials - This fixes an issue with sub image streaming for sprite renderers where the calculation did not take into account that the UVs would be scaled\n\n  * Engine.Owner.Velocity will read the owner actors velocity for the initial frame rather than defaulting to zero - This fixes an issue where reading this attribute in emitter / system spawn scripts or a burst on the first frame would always have zero velocity\n\n  * Add an optional name to validation rules - This makes it easier to know what you are breaking #changelist validated #virtualized\n\n  * Change IsVisible for pooled components to only check the attached components level collection rather than the attached component - This mirrors what Cascade does and fixes an issue with gameplay cues that are attached as they are sometimes attached to hidden components but we don't actually want to hide our component\n\n  * Console Variable Niagara Data Interface\n\n  * Rigid Mesh DI / SM DI move from RequiresDistanceFieldData to RequiresEarlyViewData as mesh distance fields are ready once we have a view to read the data - Rename RequiresDistanceFieldData to RequiresGlobalDistanceField to be more explicit\n\n  * Improved sequencer sim caching:\n\n    * allow scalability override per cache track\n    * allow locking of cache tracks to prevent unintentionally overriding a cache asset\n    * display system name inside cache assets\n    * disable sequencer looping when recording\n  * Heterogeneous Volumes: Basic stereo rendering support (non-ISR)\n\n  * Action menu now autmatically selects an action if only one action is contained. Useful for Niagara Math nodes that have add menus that will only list \"Numeric\" as addable type\n\n  * Display water body information on Debug HUD - Remove warning that would spam per instance about water body\n\n  * Display Shader Statistics in Niagara Script Stats\n\n  * Allow ribbons to share generated data where possible - CPU will share the generated data across views (i.e. split screen) when opaque or not using multi ribbons - GPU will share across view families in the same frame (i.e. split screen / shadow passes), this is because we don't support multi ribbon sorting on the GPU - Niagara.Ribbon.ShareGeneratedData can be used to enable / disable the optimization\n\n  * Validation rule for ribbon renderer - Allows validation information for using GPU / GPU init as it may not be valid for all platforms\n\n  * Add GPU usage information to ribbon renderer output\n\n  * Correctly support negative UV Scale with SubUV\n\n  * Allow enum inputs in the stack to be displayed as button grid\n\n  * caching 2D render targets #virtualized\n\n  * Mesh Renderer GDME optimization when using MeshIndex / Renderer Vis - While below the cvar controlled instance count look over the mesh index & renderer vis information to determine what meshes are relevant - Because the information is generally hot in cache from copying to GPU buffers, the cost for this is negligible, but can save an entire mesh submit\n\n  * 2d cubic interpolation #virtualized\n\n  * Allow Kill Volume Position to be bound to something other than Particles.Position #virtualized\n\n  * Add FNiagaraSimCacheCompare which can be used to compare simulation caches - New comparison allows us to exclude attributes and supply a custom tolerance when comparing caches - Removed the old comparison method from the UNiagaraSimCache\n\n  * Take into account scalability spawn count scaling for Spawn Per Unit #virtualized\n\n  * Heterogeneous Volumes: Apply bounds culling to trim active voxels when computing the lighting cache. #changelist validated #virtualized\n\n  * Heterogeneous Volumes: Accelerating rendering with continuous level-of-detail by applying LODFactor to voxel factors, lighting cache, and volumetric shadow map resolutions. r.HeterogeneousVolumes.CLOD (Default = 1) r.HeterogeneousVolumes.CLOD.Bias (Default = 0)\n\n  * Scripts that have Debug Draw functionality can now additionally define a Debug Draw message that will appear as a tooltip on the Debug Draw toggle on the module.\n\n  * Add FlushComputeAndDeferredQueues to world manager - This wraps some duplicated functionality when manually ticking worlds, like in the baker, etc. - It will flush the compute disatpch queue, optionally wait for GPU to complete, then execute any deferred callbacks\n\n  * 'Emitter Properties' are now an item available for Summary View\n\n  * Improved data channel ux:\n\n    * improved display of variables in asset\n    * enforce unique variable names in asset\n    * improved property naming and tooltips in various places\n    * fixed asset color\n    * added hyperlink to docs\n  * Add a simple object pool & object referencer for Niagara to the World Manager - Users of this pool & referencer are expected to handle recycling / unregistering correctly - Allow clusters to be built for render target data interfaces by moving object referencing into the world manager - Use object pool for render targets so that we can avoid waiting on GC before resources are collected - This reduces a lot of memory usage when scrubbing in the editor / sequencer timelines\n\n  * Add Default Mesh to Skeletal Mesh Data Interface - Unlike the preview mesh the default mesh is not cooked out and can be used in PIE.\n\n  * Heterogeneous Volumes: Prevent SVT streaming request when component is not actively being rendered.\n\n  * Cache GDF information and use when tick flushing - This fixes issues like scrubbing backwards in sequencer with distance field collisions enabled\n\n  * Overload RequiresGameThreadEndOfFrameRecreate for Niagara as we are safe to run async\n\n  * Added parent emitter path to the open parent emitter tooltip on an Emitter node\n\n  * Added sim cache support for data channel writes (the writer data interface calls are persisted in the sim cache and played back when a frame is read).\n\n  * SimCache storage & visualizer for Niagara Arrays\n\n  * Enable high pri cvar for some projects - Clean up the high pri cvar related code\n\n  * Add option to adjust the anim notify progress information based on rate scale, this is disabled for existing content and enabled by default for new content - Add option to apply time dilation to spawned niagara components based on rate scale, disabled by default\n\n  * Niagara MovieRenderQueue plugin - Contains a data interface for inspecting MRQ information\n\n  * Add an option to control occlusion queries for Niagara - Currently it's hard coded to look for custom depth enabled or not, but sometimes you still want occlusion queries to run even though custom depth is enabled\n\n  * Changed default Niagara note contents text to \"Title\" & \"Text\" respectively\n\n  * Memory Buffer Data Interface - Allows user to allocate a block of memory to load / store floats & ints however they want\n\n  * New method for allowing particles spawned from NDC to access the NDC element that generated them. New function GetNDCSpawnData(). Returns the NDC index for a particle as well as the total count for that NDC and the spawn index for the current particle inside that NDC spawn. i.e. NDC local Execution Index. Previous SpawnGroup based method still works as a backup where needed. There may be cases where the new method cannot work. For example if a proper Execution Index per NDC is needed.\n\n  * Methods to get the vertex data for a skinned triangle - This is to reduce VVM calls by bundling all data in one function\n\n  * HeterogeneousVolumes: Add option to change compositing order r.HeterogeneousVolumes.Composition Change the order of Heterogeneous Volumes composition (Default = 0) 0: Before Translucency 1: After Translucency\n\n  * Heterogeneous Volumes: Add partial final step to address harsh boundary when intersecting hard surfaces\n\n  * Enable lightweight memory capture by default\n\n  * 2 way Coupling supports ellipsoidal shapes add new coupling template #virtualized\n\n  * Basic Niagara Component leak detector - Looks for constant growth in component counts / active components - This will be refined over time and is likely to not catch all cases / produce false positives in some cases\n\n  * Simple Counter SimCache Support - Change test to use sim cache #virtualized\n\n  * Modify visibility display for debug hud to call IsVisible and that can include things like the owner's level collection visibility - Show any active SimCache information on HUD also\n\n  * Allow users to select ribbon material back facing culling vs shape mode\n\n  * Support custom visualizations for data interfaces stored in sim caches * Added visualization for cached data channels\n\n  * SimCache to Json support\n\n  * Emitter & Renderer Count Validation Rules\n\n  * Optional data interface comparison for sim cache compare\n\nBug Fix:\n\n  * Fix for cull proxies and used materials - We need to gather the list from the cull proxy not our controller as it could be different with regards to MIDs, etc - Note: This change does not fix the fact the cull proxies do not map to MIDs correctly\n\n  * Fix for Engine.Emitter.NumParticles & Engine.System.NumParticles not working with GPU emitters - Engine.Emitter.NumParticles will be the GPU count no the GPU count so will be latent\n\n  * Fix for ParticleSubUv material expression working on non-vertex fetch shader profiles when used with Niagara mesh rendererer. The default UV coordinate needs to be reserved on the material in order for the VF to connect the data for rendering\n\n  * When resetting systems be sure to also invalidate the compilation results for child scripts. This ensures deterministic behavior when cooking for platforms that don't require AV data, and makes sure that the resulting editor only data isn't bloated with things like HLSL source code when the data is never going to be used.\n\n  * Made Niagara note header wrappable & reduced max width for note tooltip as it was just too wide\n\n  * Don't detach components when inside non game worlds - Don't call Modify on the attach parent when we detach a Cascade / Niagara component due to system completion - This fixes an issue where levels are being marked dirty if they have one shot FX inside them that play on level load\n\n  * Fix for NPC data interfaces not working - Because NPC DIs do not resolve they were assumed to be internal, this meant they did not flow through the parameter stores correctly.\n\n  * Clean up unnecessary data out of the NiagaraShaderMap DDC payload. Most significantly this removes the FriendlyName as the DDC data can be generated from multiple distinct NiagaraSystems, the name is non-determininistic.\n\n  * Don't allow particle read DI to be a user parameter - It doesn't function, as in you can not change the target emitter\n\n  * Move RapidIterationParameter::DebugName to transient to prevent stale debug names\n\n  * Fix landscape DI for LWC. Supplies tile information for sampling the VT and cached heights as well as corrects the cached height acquisition for large worlds.\n\n  * Fixed average perf stats being wrong when multiple systems are active at the same time\n\n  * Attempt to sanitize symbol name when creating a pin for a customhlsl node\n\n  * Change Neighbor grid to use pixel format capabilities vs volume atomics\n\n  * While active always include the calculated bounds when using auto attachments - This fixes an issue where the effect would no longer be visible due to incorrect bounds if we are attached, become detached (potentially forced via BP) and wish the effect to continue playing\n\n  * Fixed a bug where clicking during a cache recording could cause dropped frames from Slate throttling\n\n  * Fix a crash with main pass scene captures mesh renderers with low latency - Don't build translucent batches for scene captures which perform opaque only draws\n\n  * Fixed missing tooltip for set attributes node when linked to a parameter definition asset * Fixed ui bug in param definition editor\n\n  * Fix for circle occlusion and screen percent changes\n\n  * Fix potential nullptr access in data channel BP node\n\n  * Disabled bHasDeformableMesh for FNiagaraSceneProxy to avoid continuous Virtual Shadow Map invalidation from the primitive bounds.\n\n  * Optimize UNiagaraScript::ComputeVMCompilationId()\n\n  * Fixed issue that preventing pre-culling in some cases when using Auto Attachment.\n\n  * Add braces to the list of characters that are treated as separation tokens for niagara's custom hlsl node processing\n\n  * Fix for GPU ribbons max using the maximum ever allowed vs maximum estimate - This saved a simple GPU ribbon test ~15mb of memory\n\n  * Fixed a bug where renaming a parameter in a module script would in some edge cases not correctly propagate to existing usages\n\n  * Fix fx.NiagaraReleaseBuffersOnReset to allow releasing memory on reset - Currently only GPU buffers will be released on reset, not CPU - Releasing CPU memory reduces component pool usage - In one test run we went from ~4mb -> 1.4mb of particle buffer memory by enabling the early release.\n\n  * Cleaned up logging when exceeding primitive counts with the NiagaraDataInterfaceRigidMeshCollisionQuery\n\n  * Fix transitions for array & simple counter - Cleanup some old code to remove casting\n\n  * Fix for UniqueID being shared incorrectly between spawn groups on the GPU\n\n  * Reset OverrideFormat on return to the pool as some will use RenderTargetFormat vs OverrideFormat\n\n  * ExternalParameter cbuffer is now packed and padded explicitly by the translator to ensure compatibility across all shader platforms.\n\n  * Disable low latency on none surface domain materials - This fixes an issue with volume fog sprites which is rendered before simulations are enabled if they use things like depth buffer reads\n\n  * When converting Color Over Life from Cascade to Niagara, we now correctly select between scaling Particles.Initial.Color and Particles.Color\n\n  * Fixed a bug where new parameter collections were only visible in Niagara systems after an editor restart\n\n  * Fix Niagara landscape DI sampling of RVT to use SRV so that we can properly handle the different texture formats that the data may be stored in (i.e. BC3_UNORM vs BC3_SRGB)\n\n  * Fix for niagara attribute trimmer edge case where we would miss dependencies for the first read of a variable within a stage (in very specific circumstances).\n\n  * LWC fix for sampling SM / SKM without a component - The LWC tile offset was incorrectly applied to the component transform\n\n  * Fixed a bug that prevented users to edit any complex structs in user parameters (e.g. matrices)\n\n  * Fixed an issue with relevance in Niagara where the default material relevance forced us to always render in the depth pass\n\n  * Fix SetEmitterEnabled for GPU & Event Spawns\n\n  * Fixes for rigid mesh DI not correctly setting the MeshScale of Sphere/Capsule bodies\n\n  * Fixed a bug where the context menu in module scripts would show invalid conversion operations for primitive types\n\n  * Fix for Niagara landscape sampling with collision geometry not being properly initialized in game\n\n  * Disable parallel scene proxy creates in Editor - Various other UObjects we might query are unable to run wide during EOF updates because they might invalidate render state\n\n  * Fixes for non-determinism for Niagara scripts. Handles differences between getting the results from an actual compile and pulling hte results from the DDC. In particular -exposed variables are properly applied from the DDC -rapid iteration parameters (including static variables) are now applied all together before SetVMCompilationResults is invoked since it ends pulling data from depenedent scripts -non compilable scripts will now have their rapid iteration parameters (including static variables) to/from the DDC\n\n  * Prevent PostEditChangeProperty from impacting a niagara graph when it's intended for compilation\n\n  * Cleanup source of the referenced compile hashes for Niagara's compilation Id. Because of reordering and non-uniqueness the source strings would be lost and are generally not needed unless someone is using one of the debug options.\n\n  * Couple of fixes for Niagara script compilation -make sure that static variable collection is run nested for emitters -handle shader compilation when threading isn't supported -forward VM backend compiler warnings (typically div/0) back to the log\n\n  * Fixed a bug where recording tracks in subsequences with offset start positions would not play back the correct timeframe.\n\n  * Fixed enum read/write for data channel BP nodes\n\n  * Fix for cleaning up inactive solo systems when they are still holding onto a simulation and the simulation is being changed\n\n  * Set RDG internal access mode on RTs - This fixes an issue when an external RT is used in one pass, set to external access, then used again in another pass\n\n  * Fix for verbose debug rendering of the rigid body DI\n\n  * Change OnSystemComplete delegate to be DuplicateTransient\n\n  * Fix for not generating cutout information on SubImageSize change\n\n  * UE package version incorporated into the DDC data for niagara scripts as we use standard struct/object serialization for the data\n\n  * Make newly created emitter assets inheritable by default\n\n  * Added a fix for inaccurate quaternion interpolation in particle spawn scripts\n\n  * Skel Mesh DI handle the various combinations of 16 bit bones / 16 bit weight & different bone modes\n\n  * Make sure that we only return NPC when we have an initialized world\n\n  * When pulling results from the DDC make sure we properly handle user variables with SWC structs (need to convert them to LWC) in order to mirror what we would have found with a precompile.\n\n  * Speculative fix for crash with nullptr data in async task - Adjust wait code to check for batch task completion at the end of the function to avoid pointer caching - Ensure change to tasks are visible to the game thread\n\n  * Removes ensures from getting triggered when typical graph errors suffice for pushing the informaiton to the user (rather than a potentially long hitch processing the ensure)\n\n  * Provides a fallback path to the parameter map traversal to ensure that we get accurate aliased variables in the history. Without the aliases in place we can miss resetting the chunk cache in the translator which leads to variables leaking between emitters and between the emitter and the system scripts. This was typically seen using a dynamic input in both system and update scripts (Multiply Float).\n\n  * Fix for name collision in the script context for Cascade to Niagara converter. Previously parameters outside the module's namespace could be used instead of the module variable. This allows modules to have input parameters with the same name as parameters in different namespaces.\n\n  * Fixed multiple undo/redo related issues around scratch pad renaming\n\n  * Disable GPU emitters that use FP16 if we do not support typed UAV store / load - fx.Niagara.GpuEmitterCheckFloat16Support can be used to disable this check - Also ensure we flush any pending setting updates each frame\n\n  * Fix for converting Init Mesh Rotation module from Cascade to Niagara, using a new conversion module that takes an Euler rotation, and converts it to a quaternion, and sets particles.rotation.\n\n  * PR #11396: [Niagara] Fixed the problem of repeated recycling of the Resource List #contrib 11396\n\n  * Fixed a crash when using a Data Channel asset without a type set\n\n  * Reset sequencer speed when recording a cache and it's in reverse mode\n\n  * Fix for island type data channel systems being deactivated despite still being used\n\n  * Fix for BP array SetValue calls not updating the GPU copy - Fix various poiints in the array code where we might overwrite the GPU sync incorrectly\n\n  * Update normal extraction from (non VT) landscape with Niagara DI. Not all platforms seem to handle SampleLevel with an explicit index offset, so stole the implementation from the landscape PS using a pair of gathers instead. #virtualized\n\n  * Attribute trimming fix for impure functions not finding all variables that need to be preserved because of Module namespace shenanigans\n\n  * Update constant resolver to include emitter information when stepping through the emitter node to it's subgraph.\n\n  * Fix for ambiguously typed clamp in GetSkinnedTriangleVertexDataHelper\n\n  * PR #9888: Fix use after free in Niagara data interface details\n\n  * Fixed an issue where inputs would not apply entered math expressions correctly\n\n  * Fix an issue where caching Niagara particle in a subsequence would close the root sequence and open the subsequence in isolation\n\n  * Fixed a bug where scratch pads didn't always enable the apply button after a change\n\n  * Fix for Niagara landscape sampling getting the sufficient components when overlapping the system bounds on the landscape\n\n  * Make sure to PostLoad the RendererBindings so that they can be sorted & searchable in cooked builds. Addresses some sporadic issues where static bools used for bindings might not be found and assumed to be false.\n\n  * Fix issue causing changes to an Island NDC's systems to not be applied correctly until editor restart.\n\n  * Reset SKM data interface if the source component is unregistered - Reading from an unregistered skeletal mesh will have no ComponentSpaceTransforms and hit an ensure\n\n  * Saturate the lerp in flight controls - This fixes a potential !finite issue if the lerp could go over 1 and ever increase the float value to be invalid [FYI] wyeth.johnson\n\n  * Fix buffer underrun from EVVM - If we output < 4 instance we are writing to memory before the allocation - Data buffers are allocated 16 byte aligned and each component is aligned to 16 bytes so we can therefore just loop until all components are written\n\n  * Fix for invalidating asset when create a new exposed curve texture\n\n  * Fixed issue in which NDCs would not function correctly if used on the same frame they were loaded.\n\n  * Fix for static mesh DI not picking up the right SM when using child blueprints - Add support for mesh parameter binding to SM DI\n\n  * Made several properties on the cached Niagara Script data Transient. This prevents conflicts with deterministic DDC results (DDC-Verify) and reduces the size of our DDC payload substantially (about 50% smaller).\n\n  * Fix for disabling an override from an NPC Instance not being reflected immediately\n\n  * Emitter binding changed to be case insensitive - The unique emitter name is an FString and binding is an FName, the FName can be impacted by the first user so case is not guaranteed\n\n  * Fix race between game / render threads when deciding if rendering was enabled - The render thread was reading from the renderer GT array to determine if rendering was enabled, on proxy recreates this could lead to a race and the system would not render for a frame\n\n  * Pixel Coverage for translucent now uses A rather than RGB - This fixes an issue with particle darkening as pixel coverage kicks in rather than fading out\n\n  * Fix low latency meshes not rendering in shader complexity view modes\n\n  * Update Niagara landscape DI to collect texture resources during a render command from PerInstanceTick instead of during SetShaderParameters and moves SRV parameters over to textures to clean up resource lifetime issues.\n\n  * Disable Niagara ribbons for RayTracing - This is not supported currently as the index buffer can potentially be packed and will cause a GPU hang when used with RT\n\n  * Fixed a crash when editing a data channel asset and compiling a BP with dynamic read/write nodes in it\n\n  * Fix for linking up function inputs when types differ because of SWC/LWC custom structs\n\n  * Fix override parameters not working with cache playback\n\n  * Remove debug only data from Niagara scripts during cook to reduce the size\n\n  * Fix for mesh renderer MeshBoundsScale being unused - Fix for incorrect bounds scaling, it was assuming centered bounds\n\n  * Fix for bad normals on some mesh renderers - Remove normalize from CalcTangentToWorld in mesh particle renderer. This is causing issue with some data from meshes which is invalid (i.e. 0,0,0) and matches what the local vertex factory does. The per particle matrix we transform by is already no scale so the normalize is superfluous\n\n  * Improve attribute trimming when dealing with impure functions in non-expressions\n\n  * Disable auto-save when caching tracks from sequencer\n\n  * Add an option for NiagaraLandscape DI to disable use of VT\n\n  * Early out of updating merged scripts if we're not allowed to compile any shaders. Avoids problems with trying to generate compile ids because we can't access the shader files for hashing\n\n  * Only log lwc reset warning when the system already ticked\n\n  *     * Fix cache playback not respecting dataset limit\n  * Fixed small issues with the sim cache asset editor\n\n  * Fix for \"FX.AllowGPUParticles 0\" causing crashes\n\n  * PR #11182: [GAS] Removed ensure that is triggered when a cue plays a particle system that gets preculled #contrib 11182\n\n  * Fix Niagara type registry crash in packaged builds\n\n  * Fix for rare crash with stack footer accessing null StackEditorData\n\n  * Fixed missing comment toggle on new compact style Niagara nodes\n\n  * Fixed issue preventing the Niagara Debug HUD perf graph from displaying GPU performance data. Simple fix. At some point it was just left out of a check to enable the underlying GPUProfiler that generates the stats.\n\n  * Fixed landscape DI function pin to use correct position type (the shader already treated it as lwc position, so just a cosmetic change).\n\n  *     * Fix for use after free - Resource names for Niagara must be character arrays not other types of strings, as the internal pool may hold a reference beyond the lifetime of the Niagara data\n  * Add bFilterByObjectType option to the RigidMeshCollisionQuery DI to allow people to try what seems to be a more reliable mechanism for controlling which rigid bodies get added to the query.\n\n  * Fix for some attribute bindings not getting renamed properly with emitter merging\n\n  * Handle null rate scale distribution in Cascade converter\n\n  * Fix for baker not capturing anything if the system was already complete\n\n  * Fix for emitter mode approximate motion vectors being incorrect\n\n  * Fix for ParticlePosition previous value being incorrect - To mitigate cost & interpolators we only provide the value for vertex shaders, not pixel shaders - Previous data is also not generated in all cases, it falls back to how it is currently which is previous equals current - Niagara Sprite & Mesh renderers will generate accurate data when motion vectors are set to accurate - Without accurate the results from uising velocity are somewhat mixed\n\n  * LWC fix for Niagara sorting & culling\n\n  * Fix for not updating the GPU sync mode for packaged builds\n\n  * Fix for uniqueness of NPC namespaces\n\n  * Request a compile of the system when handling a change to a user parameter name. Avoids a crash that can happen because of a mismatch between the compiled constant table layouts and the parameter stores.\n\n  * Fix Niagara vector field sampling via ispc supporting masked output (if some of the channels are unused)\n\n  * Cascade to Niagara converter handle nullptr distributions\n\n  * Fixed a bug where undo wouldn't work when deleting a parameter from a module script\n\n  * Fix for emitter sourced mesh rendering using MeshIndex binding\n\n  * Fix array remove on GPU when 0 or max elements\n\n  * Fix NaN's poisoning the VVM constant table - Comparing A==B will return true for NaN depending on the FP mode, so we now compare if both values are finite before comparing for equality. - This does not fix the source of the error, but will stop all subsequent float values being set to NaN\n\nDeprecated:\n\n  * Deprecated vortex velocity module\n\n#### Path Tracer\n\nNew:\n\n  * Implement Holdout flags for Atmosphere and Exponential Height Fog. This can be used to isolate the contribution of these elements in layered renders.\n\n  * Path Tracer: Build RTPSO for the path tracer during startup to avoid lengthy compilation times the first time the path tracer is selected in the UI\n\n  * Optimize shadow tracing in the path tracer\n\n  * Path Tracer: Implement support for virtual texture feedback\n\n  * Reduce performance impact of decals and volumetrics\n\n  * Skip Distance Field tasks when the path tracer is active\n\n  * Optimize storage of volume intervals in the path tracer\n\n  * Added experimental neural denoising platform (NNEDenoiser) for the Unreal Path Tracer based on the Neural Network Engine (NNE).\n\n  * Path Tracing: Change Indirect Emissive Lighting Component back to its original name. Including this flag as part of the Lighting Components led to some confusion with users as it does not behave quite like the other Lighting Component entries. The original name \"Emissive Materials\" represents what this setting does more accurately (enable emissive materials to cast indirect lighting into the scene).\n\nBug Fix:\n\n  * Fixed incorrect rendering of materials that require global distance field when using Path Tracing.\n\n  * SvPosition was not set correctly, leading to inconsistent output from the ScreenPosition material node\n\n  * Avoid path tracer invalidation when a camera is selected in the editor\n\n  * Path Tracer: Fix light functions on directional lights\n\n  * Avoid path tracer invalidation when a DecalActor is selected\n\n  * Hide Path Tracing menu entry on platforms (such as Vulkan) which support raytracing but cannot yet run the path tracer\n\n  * Skip Planar Reflections when path tracing is active\n\n  * Remove passes from Deferred Renderer that are not needed while the path tracer is active\n\n  * Tweak the default ray bias to avoid artifacts in larger scenes\n\n  * Path Tracer: Fix possible NaNs in specular highlights when Anisotropy is set but Tangent is not\n\n  * Avoid cooking errors in decal shaders on platforms which do not support the path tracer\n\n#### Postprocessing\n\nNew:\n\n  * Add tile overlap support to texture indexing mode for neural post processing. Add Auto mode to Tile size to directly tile the screen image without scaling Add Border Overlaps controls between each tile to deal with discountinuity. * Add Overlap Resolve Type: 1. Ignore. Overlapped regions are ignored when concatenating tiles. 2. Featherng. Overlapped regions are combined bilinearly\n\n  * Add neural post processing (experimental).\n\n    * Add neural profile to config which neural network to use. Texture index is used by default where [-1,3,H,W] is supported. Use Buffer index to support [-1,C,H,W]. Need to config the batch size override or the tile size correspondingly.\n    * Config in the post process material of which neural profile to use and enable used with neural network.\n    * Use neural input/output to control the input and output of the neural network. For neural input, [B,C, U, V] is the index, input0 takes 3 effective channels, mask determines if we should use it as input to the network. Only one node can be used per material; Multiple neural outputs can be used. For texture indexing, automatic bilinear downscaling and upscaling is applied. For Buffer indexing, the user has full control to access the value ( user needs to perform their own filtering).\n  * Added support for controlling which regions are considered highlights and shadows using thresholds in Local Exposure.\n\n  * Add support for mobile SSAO at half resolution. This works with SSAO only, and not GTAO. Use \"r.Mobile.AmbientOcclusionHalfResolution\" to enable.\n\n  * Add NNERuntimeRDGHlsl runtime inference support for neural post processing, and catch more errors into log.\n\nBug Fix:\n\n  * Fixed bloom when local exposure is enabled but bloom threshold is not used.\n\n  * Fix post process ambient occlusion border filtering out of range. Clamp the sampling UV to ViewportMin/Max bounds. Mobile ignores this clamp as it does not use half resolution normals and Downsampled AO created in the setup.\n\n  * Fixed bugs with Post-Process materials that use stencil test when Nanite meshes that render custom depth are visible.\n\n  * Removed clamp from Bloom setup pass which reduced bloom intensity on very bright pixels.\n\n  * Fixed an issue where Variable Rate Shading could crash or behave incorrectly when one split-screen view was within a post-process volume with an after tonemapping post process material, and another was not.\n\n  * Fixed an issue where artifacts would appear in secondary views when using LocalExposure.\n\n  * Fixed artifacts when using Local Exposure.\n\n#### RHI\n\nNew:\n\n  * Enabled support for screen-space (Tier 2) Variable Rate Shading on Xbox Series X.\n\n  * Remove BUF_ImmediateCommit in favor of only having an explicit buffer commit operation\n\n  * Implement support for shrinking reserved resource memory allocations in D3D12 RHI Release backing heaps when they become unreferenced (contain no committed tiles) Use available slack space in the backing heaps before allocating new heaps Track committed / free memory in ReservedResourceData in terms of tiles instead of bytes Add unit test to cover the basic functionality and a few edge cases Perform AddRef() on the heap directly in FD3D12Heap::DeferDelete() instead of requiring caller beforehand Add RHI stat counter for physical memory used by reserved resources\n\n  * Extend D3DX12Residency library to allow making a set of resources resident independently of command list execution * Issue an explicit residency request when updating tile mappings for reserved resources\n\n  * Enhanced the D3D12 RHI to handle up to 32 samplers.\n  * Added a 'RequiredSamplersSwitch' material editor node, allowing branching based on a shader platform's maximum sampler count.\n  * Added support for previewing platforms with support for more than 16 samplers. On editor platforms without Dxc and SM6.0 support the preview menu options are disabled.\n\n  * Added MSAA sample count support to canvas render targets.\n\n  * Perform tile mapping updates on the direct queue when the current queue does not support the operation\n\n  * Extend RHI unit tests to cover basic direct and indirect drawing with instance and vertex offsets\n\n  * Implement basic support for D3D12 Reserved Buffers - Add BUF_ReservedResource and BUF_ImmediateCommit, similar to corresponding TexCreate flags - Add GRHIGlobals.ReservedResources.TileSizeInBytes to indicate minimum unit of physical memory that can be mapped to a reserved resource - Add few basic RHI unit tests to exercise new code paths\n\n  * Refactor D3D12 resource residency tracking to allow multiple residency handles per resource. Add reserved resource backing heaps to the residency tracking system.\n\n  * Add bSupportsVertexShaderSRVs to DataDrivenShaderPlatformInfo which drives PLATFORM_SUPPORTS_VERTEX_SHADER_SRVS shader * This should be used to guard any features that require explicitly accessing buffer or textures SRVs in vertex shaders\n\n  * Added support for point list primitive type on PS4\n\n  * Enabled Vulkan LLM in Test configuration\n\n  * Initial implementation of explicit D3D12 reserved buffer commit / resize First pass implementation only supports growing Commit is implemented as a resource transition to allow asynchronous memory mapping operations in the future\n\n  * VulkanRHI: Update to Vulkan SDK 1.3.250.0\n\n  * Add support for reserved buffer commit operation to RDG Add QueueCommitReservedBuffer() to FRDGBuilder Add GetCommittedSize() to FRDGPooledBuffer, to query the physical size of the buffer Change ResizeBufferIfNeeded() to issue a commit operation instead of copying when possible Add r.Nanite.Streaming.ReservedResources CVar (default: false) to allocate Nanite ClusterPageData.DataBuffer as a reserved resource of maximum size, which is committed in ResizeBufferIfNeeded() Based on implementation by Zach Bethel.\n\nBug Fix:\n\n  * Fix HDR on D3D12 for Intel GPUs\n\n  * Wait on GPUFence if provided in RHIMapStagingSurface implementation\n\n  * Fix vulkan validation layers not being included in installed engine builds\n\n  * VulkanRHI: Vulkan fixes for world normals in path tracing and nanite double-sided materials.\n\n  * Fixed memory leak when standalone games are minimized & videos or other apps are creativing active GPU activity.\n\n  * Completely turn off FSR or FDM when the other is available to avoid vulkan validation layers warnings.\n\n  * Fix logic mismatch between FD3D12Adapter::CreateCommittedResource() which calls StartTrackingForResidency() and initialization of bRequiresResidencyTracking in FD3D12Resource()\n\n  * VulkanRHI: Allow the use of AMDBufferMarkers and NVCheckpoints simultaneously (fix crash on drivers that support both).\n\nDeprecated:\n\n  * Deprecate DrawIndexedIndirect, since it's just a more confusing version of DrawIndexedPrimitiveIndirect.\n\n#### Substrate\n\nNew:\n\n  * Rename r.Substrate.TileOverflowFromMaterial -> r.Substrate.UseClosureCountFromMaterial and also remove r.Substrate.TileOverflow, as layer count will now be driven by r.Substrate.ClosuresPerPixel when r.Substrate.UseClosureCountFromMaterial=0\n\n  * Make Glint/SpecularLUT/SheenQuality be set per platform.\n\n  * Add Substrate support for Lumen reflection downsample tracing.\n\n  * Added material topology preview on material graph node, colored pin & wire for Substrate data.\n\n  * Expose Substrate MP_FrontMaterial material attribute to make it accessible from Python scripting.\n\n  * Add GBuffer data value picking/visualization.\n\n  * Add Substrate SubstrateConvertMaterialAttributes to ease material attributes setup & manipulation with Subtrate data.\n\n  * Add analytical derivative support for PT and fix Glint support for PT.\n\n  * Change how Lumen integration work with Substrate. This improves Lumen shading reliability with multi BSDF and improves performance.\n\n  * Fix missing specular lighting with rect light when slab having anistropy. Proper GGX anisotropy lighting with rect light is not supported at the moment. In such a case we fallback onto isotropic case.\n\nBug Fix:\n\n  * Fix NaN when using light transmission with SSS MFP with MFP=0 for certain channel.\n\n  * Fix incorrect specular/diffuse contribution in LumenCards with Substrate. The original code used EnvApprox, which bypass a lot of specular code (e.g., SpecularProfile) and does not respect the diffuse/specular contribution weight. This leads to incorrect hue/appearance in reflection.\n\n  * Fix Substrate env. lighting on mobile renderer.\n\n  * Fix MediaImage / MediaPlate pre-visualization with Substrate.\n\n  * Fix missing SpecularProfile weighting on secondary specular lobe for env. evaluation.\n\n  * Fix complex special tile not being rendered with local light because stencil value was cleared during the stencil based shadow mask computation.\n\n  * Fix fuzz cancelling SSS on material having a single slab.\n\n  * Fix missing SpecularProfile in Lumen reflection.\n\n  * Fix raytraced translucent shadow with Substrate\n\n  * Fix missing contact shadow casting on hair with Substrate.\n\n  * Fix missing subsurface (Profile/Wrap) in Lumen reflection with hit lighting.\n\n  * Fix nDisplay InCameraVFX rendering with Substrate.\n\n  * Fix Lumen Multi-Bounce AO with Substrate.\n\n  * Fix incorrect break, causing complex materials with fuzz to have incorrect transmittance.\n\n  * Fix Substrate with Lumen Reflection only (i.e. without ScreenProbeGather.)\n\n### Simulation\n\n#### Physics\n\nAPI Change:\n\n  * Rotations and velocities in physics particles are now stored in single precision. It was stored previously in double precision. All the API using a returned reference to edit those values are no longer supported. The following functions should used the new API Set_Value_() instead\n\n    * TRotation& R()\n    * TRotation& Q()\n    * TVector& V()\n    * TVector& W()\n    * TVector& PreV()\n    * TVector& PreW()\n  * In FTransformDynamicCollection in GeometryCollectionProxyData.h all attributes were public, then now are private. Use the new API to access them.\n\n  * The Chaos Cache Manager track compression feature is controlled by a console variable and enabled by default (p.Chaos.Cache.CompressTracksAfterRecording)\n\nNew:\n\n  * [NetPhysics] Added NetworkPhysicsSettingsComponent as an ActorComponent as a way to set individual settings for networked physics per actor. Currently implements a limited amount of settings for physics replication through Predictive Interpolation and physics Resimulation.\n\n  * Mac: Change the default of Slate.MacMainMenuInsideUnrealWindow to true\n\n  * Chaos Cloth Asset - Added USD Import node.\n\n  * Geometry Collection: Enabled rendering of root proxy meshes when available ( in both editor and game )\n\n  * Cloth Editor Remesher: better handling of open meshes in the Render mesh. Add the option to detect connected boundary vertices that are coincident with another connected set of boundary vertices on another boundary elsewhere. We can then explicitly remesh these \"seams\" while maintaining a vertex pairing, before then going on to remesh the interior of the mesh islands.\n\n  * Chaos Cloth Asset: - Added a new Cloth Component property to enable the Cloth Asset simulation in editor. - Added simulation controls to the Cloth Component Details panel. - Added a new Cloth Sim section filter at the top of the Cloth Component UI. - Tidied up the Cloth Component categories.\n\n  * Geometry Collection: Optimize data marshalling between physics thread and game thread for geometry collection proxy. This reduces the size of the data to be marshalled as well as the time to process it\n\n  * Add grow, shrink, and flood buttons to the Selection tool\n\n  * Added a Geometry Collection dataflow node for magnet clustering\n\n  * Chaos Cloth Asset - Added a new Proxy Deformer node to the Cloth Asset Dataflow nodes.\n\n  * Added a new cvar (p.Chaos.Convex.UseSimplifierForTConvexHull3Builder) to use a new ConvexHull3-based simplifier in the chaos convex builder, instead of the default simplification; this may give better results in some cases.\n\n  * Added a Geometry Collection dataflow node to create containing cluster nodes for collections w/ isolated root nodes w/ no other transforms.\n\n  * Cloth Editor: focus on tool-defined selection box when user hits 'F', not the entire cloth object\n\n  * [NetPhysics] Implement runtime correction for actors using resimulation while within threshold of not triggering a physics resimulation.\n\n  * Dynamically scale down memory allocation for rewind caching when cache shrinks.\n\n  * [NetPhysics] Allow NetworkPhysicsComponent for physics resimulation to be implemented on AActors instead of only on APawns.\n\n  * Added a warning and progress bar when user attempts to convert a large mesh (>1M tris) to geometry collection\n\n  * Added a dataflow node to get the number of spheres in a sphere covering, to help analyze fracture collision shape generation.\n\n  * Cloth Asset Editor - Removed saving from Dataflow asset creation to match the cloth asset behavior.\n\n  * Implement various physical properties accessor functions on the primitive component in terms of the underlying physics object handle (UPrimitiveComponent::GetPhysicsLinearVelocity, UPrimitiveComponent::GetPhysicsLinearVelocityAtPoint, UPrimitiveComponent::GetAngularVelocityInRadians, and UPrimitiveComponent::GetCenterOfMass).\n\n  * Expose ForceRebuildGTParticleGeometry on cluster unions publicly to allow AddComponentToCluster to optionally not call it immediately so the call can be bulked.\n\n  * Added HashTable implementation for AABBTree payload tracking to reduce memory costs of AABB trees in when used as a local sub-acceleration.\n\n  * Cloth Editor: move Tool buttons to the top toolbar\n\n  * [NetPhysics] Physics replication improvements - Enable time-dilation without using resim to keep client and server physics aligned for better physics replication. - Allow larger replication target alignment, since it will be kept in check via time-dilation. - Allow early out while target has velocity and extrapolate target correctly while performing early-out. - Take receive rate into account for Position and Rotation correction. - Don't send RepMovement from server if using ReplicationCache and the async physics thread has not ticked.\n\n  * Add p.Chaos.DebugDraw.ColorShapesByClusterUnion to be able to differentiate between cluster unions when drawing internal clusters.\n\n  * Geometry collections now set debug name on their GT particles.\n\n  * Cloth Editor layout changes: - Dataflow Graph Editor extends to the left of the editor window - Dataflow Node Details tab is horizontally aligned with the Asset Details and PreviewScene Details - Outliner is in the same tab stack as Dataflow Graph Editor\n\n  * ClothingMeshUtils: if we encounter degenerate triangles during skinning, only do a Slate notification once rather than for each vertex. Multiple slate pop-ups can cause the Editor to become temporarily unusable.\n\n  * Update Chaos::TEventContainer to use a map for storing handlers to optimize unregister calls. When the container has several thousand handlers the linear search is very slow (several MS). Switching to a map increases this significantly. We do lose a bit of speed in DispatchConsumerData as we need to iterate over all the events, but this didn't seem to cause a noticeable regression when profiling.\n\n  * Turn on acceleration structures for cluster union queries.\n\n  * When creating a geometry collection from the fracture editor, suggested name now uses a \"GC_\" prefix instead of the \"_GeometryCollection\" postfix to better match Unreal asset naming convention\n\n  * Make FRigidClustering::RemoveParticlesFromCluster and FRigidClustering::AddParticlesToCluster do incremental updates (as much as possible) to the cluster particle's internal strain, cluster group, and physics proxy set instead of needing to re-build these properties from all its children.\n\n  * Add a \"secondary selection set\" to the Selection Node, Tool, and Facade. This is an optional second set of mesh elements for a given Selection. The intended use case is for operations where the user wants to associate one selection set with another -- for example pairing up Sim Faces and Render Verts for wrap deformer binding.\n\n  * [NetPhysics] Predictive Interpolation improvements:\n\n    * Perform soft-snap if replication starts going out of sync\n    * Improved early-out logic\n  * Cloth Editor: visualization of seams in 2D and 3D sim views\n\n  * Cluster unions no longer manage their child components' owners' dormancy.\n\n  * Add cvar (p.Chaos.OnlyUseInterclusterEdgesAttachedToMainParticles, default false) to only allow particles directly connected to a cluster union via an intercluster edge to be added/kept in a cluster union.\n\n  * Cloth Editor: when creating a new Dataflow asset, add a Terminal Node by default\n\n  * Geometry collections now emit an event when their particles are fully decayed.\n\n  * Cluster unions will now export their navmesh geometry from their child components.\n\n  * Chaos Cloth Asset: - Fixed missing Cloth Asset package dirty flag whenever the asset is re-updated. - Added a refresh button to the Terminal Node UI to force regenerating the asset when the code but not the data has changed. [FYI] Dave.Dixon\n\n  * Expose fully decayed flag on geometry collection components to game systems\n\n  * Chaos Cloth Asset: - Added remap function to the AddWeightMap node. - Fixed property detail view refresh when the node's connections changed. - Deactivate the active tool when a node is invalidated.\n\n  * Geometry Collection: Improved use of cached component space bounds to avoid unnecessary computation\n\n  * [NetPhysics] Various fixes for physics resimulation. - Make sure RewindData is setup before UNetworkPhysicsComponent::CreateDatasHistory is processed. - Use the same history size in UNetworkPhysicsComponent as in RewindData. - Make \"Project Settings > Physics > Enable Resimulation\" setup RewindData. - Fix issue with time dilation RPC not getting applied on the client. - Fix issue with FPhysicsReplicationAsync::ResimulationReplication not triggering a resimulation due to target TickCount not always being 0 for resimulation targets. - Stop warning logs of \"out of rewind data bounds\" from printing before the rewind data is populated fully. - Remove / fix various asserts that could trigger during a resimulation due to objects having changed between cached history and current state, for example an object existing currently but not in history which is intended. - Don't allow duplicate or out of order physics replication targets.\n\n  * Deprecateed an unused flag from FLinearDriveConstraint.\n\n    * Added SetDriveParams to ConstraintInstance to allow the most common changes to be made without needing to make multiple calls and locks. Renamed the FPBDJointConstraintHandle version of this so it matches.\n  * Added an AssignPhysicsAsset node to the skel mesh editor subsystem to handle editor scripting of modifying the physics asset for a mesh.\n\n  * Implement shallow copying for Chaos geometry speeding up modifications to geometry and shape arrays on particles.\n\n  * Cloth Weight Map Paint Tool/Node: allow weight map painting on Render vertices. The AddWeightMapNode now stores two sets of vertex weights: one for sim vertices and one for rendering. Changing the view mode while the paint tool is active will load the appropriate weight map from the node. There is also a drop-down selector for choosing which of the two vertex weights should be saved into the ClothCollection (or both.)\n\n  * Improve help text for functions moving actors etc, giving more info about the behaviour when teleport is/isn't used.\n\n  * Updated _ChaosDebugDrawComponent _to render in the Editor world\n\n  * Geometry Collection: Optimized ticking logic on the geometry collection component. Now the component only ticks when there are pieces actively being removed\n\n  * Cloth Editor paint tool: allow brush to get super small. Also fix brush circle not updating after manually setting the brush size property\n\n  * Chaos Cloth Asset Editor: - Added node evaluation progress bars.\n\n  * Cloth Editor: adding two ways to hide/show triangles in the paint tool: - A new HideTriangles brush mode that will hide triangles that are brushed - A new tool property that is a list of Patterns and whether each one is visible or not Limitations: - Hide/show information does not come along when switching between 2D/3D modes - Checkbox interface for selecting which patterns to show is clunky - Manually hiding triangles via brush then unchecking all patterns will clear the manually hidden triangles Also adding an optional white-red mode to visualize the weight map. Painting an all black object in 3D with a dark grey background is pretty annoying.\n\n  * Cloth Editor weight map paint tool: change from triangle painting to vertex painting\n\n  * Expose GetGeometry in the physics object interface.\n\n  * Added the option for Fracture Mode's Autoclustering tool to favor clusters with more convex shapes.\n\n  * Store velocities and rotations in single precision in Physics particles This is saving 80 bytes per particle\n\n  * Added SetCurrentTime blueprint function to Chaos Cache manager/player\n\n  * Geometry collections now track their previously set world transform external so the GT can compute the difference between the two if needed (e.g. if it needs to query the difference prior to the PT->GT sync).\n\n  * Cloth Editor: optional information in the Construction viewport - Numeric mesh stats (so far just triangle/vertex count) - Color-coded cloth patterns\n\n  * Cloth Editor: refresh the Construction view after the Dataflow graph executes. Also rename a member variable from the too-generic \"DataflowNode\" to \"SelectedDataflowNode\"\n\n  * Chaos Cloth Asset - Disable the Cloth Asset properties that must be set within the Dataflow graph, to prevent these properties from being accidentally edited inside the Cloth Asset Details panel.\n\n  * Cloth mesh-to-mesh skinning: check that the area of a normal-offset triangle is non-zero before trying to compute barycentric coordinates for it\n\n  * Added a geometry column mode to fracture hierarchy view, which shows triangle and vertex counts, including cumulative counts for cluster nodes\n\n  * Exposed SetUpdateKinematicFromSimulation on Primitive Components to Blueprint\n\n  * FPhysScene_Chaos::HandleGlobalCollisionEvent nonw bubbles up the collision ShapeIndex in cases where we collide against a cluster union\n\n  * Added an option to show in PhAT when a pose violates the joint limits\n\n  * Cloth Editor Weight Map paint tool changes - set default Strength to 1.0 - hook up Q/A hotkeys to cycle through brush modes - hook up W/E hotkeys to adjust Value property\n\n  * Expose enable/disable collision functionality (etc) in the Simulation. Using this provides more reliable collision interactions with the ImmediatePhysics simulation (affects RigidBody and RigidBodyWithControl animation graph nodes).\n\n  * Expose UGeometryCollectionComponent::IsRootBroken publicly.\n\n  * Cloth Selection Tool: add a flood fill deselect action: shift+ctrl+click will deselect all connected mesh elements\n\n  * ClothingMeshUtils: use the same error format for degenerate triangles in both the single-influence and multiple-influence code path\n\n  * Cloth Editor: move the Simulation Visualization panel from drop down menu to its own tab\n\n  * Move cloth editor tool headers to private. Rename ClothEditorToolBuilder to ClothEditorToolBuilders and centralize ToolBuilder classes for the cloth editor\n\n  * Cloth paint tool: add an Invert action to flip paint values. Also, when painting in 2D update any additional 2D vertices that are mapped to the same 3D vertex via welding.\n\n  * Dataflow: highlight \"Deprecated\" or \"Experimental\" nodes\n\n  * Geometry Collection are now using a optimized replication logic\n\n  * Cloth selection tool: fix back face material checkerboard\n\n  * Dataflow: Add StaticMeshToCollection node\n\n  * Chaos Debug Draw: Added mass display for kinematic and dynamic particles (p.Chaos.Solver.DebugDrawMass)\n\n  * [NetPhysics] Implement physics resimulation error correction through render interpolation for Cluster Unions and Geometry Collections.\n\n  * [NetPhysics] Resim improvements:\n\n    * Render interpolation bug fixed as a result of PullData being properly updated in all cases.\n    * Reduce redundant inputs in each network sync to 3, same default value as the server input buffer.\n    * Implement resim runtime correction for velocity and angular velocity, guarded by CVar that is disabled by default for now, also implemented as an option int the NetworkPhysicsSettingsComponent\n    * Implemented replication particle correction that recalculate friction points after an XR correction to make corrections overcome friction.\n  * Reduced memory usage of geometry collections.\n\n  * Cloth Editor: make the SkeletalMesh and Animation properties of the Preview Scene persist between editor sessions\n\n  * Cloth Editor: add a \"ping pong\" mode to the skeletal mesh preview animation playback\n\n  * Cloth Editor Remesh Node: regenerate long-range attachments and self-collision spheres after remeshing. Also remove any other Selections if we remesh.\n\n  * Geometry collections now return false for CanEditSimulatePhysics if no rest collection is set.\n\n  * Add a Remesh node for Cloth. For the sim mesh, the node operates on the 2D representation by first remeshing the seam and boundary edges, then remeshing the entire mesh while constraining those edges. Finally it (un)projects the 2D mesh to 3D using the input 2D/3D mesh representations. For the render mesh, it remeshes the boundaries first, then the interiors in 3D since there are no seams. (Render Mesh LOD generation is likely to be replaced with something more user-controllable in the future, this is kind of a placeholder.) Still TODO: additional constraints for other sim needs\n\n  * [NetPhysics] Resim improvements:\n\n    * Allow applying closest state on rewind if there is no state for the rewind frame.\n    * Cache incoming inputs for local player so that the server can alter inputs and have them applied on autonomous proxies during physics resimulation.\n    * Set a Prediction Interpolation object to resimulation while it interacts with a resim object.\n  * [NetPhysics] Functionality for input decay during physics resimulation when there are no more valid inputs.\n\n  * [NetPhysics] Resim and replication improvements:\n\n    * Implement functionality to find a valid resim frame where all particles in a resim island have a valid target to rewind to.\n    * Deactivate predictive interpolation logic while particle is in the same island as a resim particle.\n  * Chaos Cache Manager: Made observed component component ref accessible from blueprints\n\n  * Chaos Cloth Asset: Added a default template Dataflow asset that appears on all newly created Cloth Assets.\n\n  * Geometry Collection: Added bDensityFromPhysicsMaterial to the geometry collection component\n\n    * When on, the density set in the rest collection asset will be ignored and the one from the assigned physics material will be used\n  * Added an optional transform selection to the Geometry Collection dataflow Flatten node\n\n  * Added a Geometry Collection Dataflow node to clear convex hulls from a selection of bones\n\n  * Cloth Editor preview scene: add a toggle to enable/disable PostProcess Blueprints on the SkeletalMeshComponent\n\n  * Made the Fracture Mode Flatten tool and the corresponding Geometry Collection Dataflow node skip all non-clusters in the selection, rather than converting them to select the parent cluster. This allows one to e.g. select all level 1 nodes and flatten without risk of flattening level 0 if there are leaves on level 1.\n\n  * Geometry Collection: Optimized dynamic collection memory\n\n    * The immutable MassToLocal attributes have been removed and are now read directly from the asset rest collection This saves 2x96 bytes per bone per geometry collection component instance\n  * Adding the ability for Geometry Collections to specify the use of the potentially more expensive collision geometry from the source Static Meshes on the game thread instead of the combined GC collision, when precision is more important than the possible improved performance of the combined GC collision\n\n  * Geometry Collection: Optimized computation of component space transforms ( they are now computed on demand )\n\n  * Made the Fracture Mode's Reset tool into a modal tool, and made \"Reset Materials\" an option on the tool (rather than trying to guess whether we should reset materials based on material counts)\n\n  * Cluster union initialization now initializes the cluster particle to the component's initial transform and all added particles now have its child to parent set based on their location relative to the cluster union component transform at the time of the addition on the GT.\n\n  * Added additional safeguards to protect against the scenario where the cluster union actor/simulating component replicates after the UClusterUnionReplicatedProxyComponent.\n\n  * [NetPhysics] - Predictive Interpolation replication fixes and improvements - Average out receive rate so that fluctuating send-rate and network conditions doesn't affect replication. - Redesign the angular velocity replication to adjust the target angular velocity based on the angular diff.\n\n  * Geometry Collection: Optimized dynamic collections memory usage by removing deprecated collision related attributes This saves 6 x 4 bytes per bone per geometry collection component instance\n\n  * [NetPhysics] Enable physics rewind data capture at runtime if resimulation is used and Project Settings -> Physics -> Physics Prediction is enabled.\n\n    * RewindData starts getting captured if either using NetworkPhysicsComponent, EPhysicsReplicationMode::Resimulation on an actor or if manually toggling it by calling FPBDRigidsSolver::EnableRewindCapture().\n  * Clarified the Dataflow selection set operations and added a non-symmetric difference op\n\n  * Geometry Collection : Added a \"use material damage modifier\" option to the GC component. When on, all damage thresholds are multiplied by the damage multiplier property set in the physics material assigned to the component\n\n  * Implement GetComponentVelocity for cluster unions.\n\n  * Add a bReplaceHitWithSubComponents option to collision query params that will let us determine whether or not we hit a cluster union by subtracing into the cluster union but only return the cluster union if it hit\n\n  * Chaos: Add global limit \"p.Chaos.Clustering.PerAdvanceBreaksAllowed\" to number of processed breaks in BreakingModel for strained particles.\n\n  * Chaos Cloth: - Added a p.ChaosCloth.Solver.MaxVelocity console variable to clamp the relative particles' velocity to the skinned cloth mesh velocity. - Added a p.Chaos.VelocityField.MaxVelocity console variable to clamp the relative particles' velocity to the aerodynamics velocity field. - Added a p.Cloth.MaxVelocityScale console variable to clamp the maximum velocity scale values allowed on all cloth simulations.\n\n  * Cloth - Added a skeletal mesh component velocity scale property to reduce the component induced velocities on all its cloths. This also replaces the bLocalSpaceSimulation property that was used with Chaos Cloth and had been deprecated.\n\n  * Add UClusterUnionComponent::FindChildPhysicsObjectGivenShapeIndex which allows users to query a cluster union to get the underlying physics object given the shape index.\n\n  * Geometry Collection: Added an option to allow Geometry Collection Component transform to follow its root bone (when dynamic)\n\n  * Chaos Cloth: Added simple Self Collision Spheres constraint which is much cheaper than the existing vertex-face self collisions.\n\n  * Cloth Editor Remesh Node: Add a Simplify option for Render mesh decimation. When enabled, this will use FSimplifyMeshOp rather than FRemeshMeshOp. The Simplifier uses QEM to prioritize removing vertices in flat areas to preserve curvature. The result is typically a lower poly count but less uniform mesh than FRemeshOp produces. Because of this, it's only enabled for the Render mesh.\n\n  * Chaos Cloth - Added a global gravity multiplier console variable p.ChaosCloth.GravityMultiplier (default to 1).\n\n  * Add ability for cluster unions to either set or inherit their childrens' gravity group index.\n\n  * Reduce memory usage in Geometry Collection Relative Transform in Dynamic Collection are now in single precision. This change implicates an API change. The Managed Array of transforms being in public, and being changed make some backward compatibility breakage. This array shouldn't have been used much.\n\n  * Geometry Collection: Optimized computation of bounds when the geometry collection is not yet broken\n\n  * Optimized the removal of pending async commands\n\n  * Incremental addition to/removal from cluster union implicit object geometry on both the GT and PT to improve performance.\n\n  * Added simple track compression to Chaos Cache Manager. After recording the track will be compressed using a simple (and fast) compression logic aggregating similar contiguous keys\n\n  * [NetPhysics] Physics replication stuttering fixes when receiving replicated states at unexpected intervals.\n\n  * [NetPhysics] Resimulation Improvements - Runtime correction for rotation improved, faulty calculation fixed and correction not done with pre-resim data. - Don't apply replicated targets during resimulation, only on rewind. - Implemented flow to compare predicted states and inputs with the received server states and inputs to trigger resimulation from discrepancies through NetworkPhysicsComponent.\n\n  * ChaosFlesh: Add Gauss Seidel master constraint\n\n  * Geometry Collection: Add support for masked materials when using Nanite\n\n  * Added a new Cluster Merge to Neighbors dataflow node, allowing selected bones to be independently merged to their nearest or largest neighboring bones/clusters\n\n  * Geometry Collection: reduced memory usage of geometry collection components\n\n  * Geometry collections can now specify a collision profile per particle/level that loads the default asset collision profile.\n\nBug Fix:\n\n  * [NetPhysics] Fix issues with replication target alignment. The fix ensures that SendInterval and ReceiveInterval is calculated and used correctly to align replication targets with and that we start target alignment first after the 3rd valid state is received.\n\n  * Geometry Collection: Fixed issue where collision with a transform were ignored when importing collisions from source\n\n  * Fix crash when deleting selection node while selection tool is active\n\n  * Limit cluster children GT sync to children of dynamic clusters. Kinematic clusters aren't updating non-dynamic children and do not need to force a transform update.\n\n  * Non-GT frozen sim callbacks now also have their SimTime and DeltaTime set properly.\n\n  * Cluster unions should only add themselves into the SQ if they are non-empty (i.e. have a non-zero # of shapes and the shape in the shapes array isn't because of a shape created by an FImplicitObjectUnionClustered).\n\n  * [NetPhysics] Create fake target for predictive interpolation replication on Awake event to stop client from desyncing from server by waking up and simulating freely.\n\n  * Cloth Asset Builder: don't assert if there is not one material per render pattern in the asset, just log a warning. Even though each pattern has a material in the ClothCollection, the user can still remove materials from the asset after the graph evaluates, which can cause this assert to fire when the asset is subsequently loaded.\n\n  * Properly separate geometry collection bone names with \"_\" between levels to ensure bone names are unique per GC when using auto-clustering.\n\n  * [NetPhysics] Predictive Interpolation replication improvement, align the angular replication timeline with the linear replication timeline. Better replication of off-center rotations.\n\n  * Fix use-after-free in the cluster union manager and ensure that the ImplicitUnion remains valid if the geometry is updated in FClusterUnionManager::FlushIncrementalGeometryOperation.\n\n  * Chaos Cloth Asset - Fixed missing bones when the Cloth Component is used with a higher LOD Skeletal Mesh Component that runs a simplified bone hierarchy.\n\n  * Chaos Cloth Asset - Fixed crash in welding when two consecutive stiches have one end point in common.\n\n  * Cloth Editor: fix for clicking on the same node twice making the sim mesh disappear\n\n  * Fix an issue where clustered particles may not be removed from the StaticClusteredMapArray and KinematicClusteredMapArray arrays when destroyed.\n\n  * Cloth Editor Toolkit: deactivate ClothEditorMode in response to OnClose(), not OnRequestClose(), since editor shutdown can be cancelled after OnRequestClose() is called\n\n  * Server crash on executing async physics command\n\n  * Dataflow: made loop detection more robust when connecting nodes in dataflow\n\n  * Geometry collections no longer set themselves dormant to avoid client/server desync\n\n  * Geometry Collection : Fix inertia tensor and mass computation to support mirroring ( by using a negative scale on one axis )\n\n  * Geometry collection physics proxy now properly sync the particle transform into the dynamic collection.\n\n  * Cloth Editor: don't start the preview animation any time anything changes in the graph\n\n  * Chaos Cloth Asset - Fixed crash when removing a LOD from the Cloth Editor Dataflow while visualizing it.\n\n  * The GC proxy sync is now prevented from doing work if its parent GC component is removed from the scene.\n\n  * UGeometryCollectionComponent::SetSimulatePhysics now goes through the route of recreating the physics state to ensure that the physics state gets destroyed when the component is destroyed.\n\n  * Updates to the geometry collection's particles' shapes collision data on the PT now propagates the information to the cluster union.\n\n  * Fixed an infinite clustering bug in geometry collection's merge neighboring clusters algorithm\n\n  * Fixes for using a fixed timestep with immediate physics (affecting the RigidBody and RigidBodyWithControl animation graph nodes). This is useful for when the frame times can be small (i.e. high frame rates), and adds an option to allow velocities to be rewound along with positions - this ensures that controls/constraints are essentially independent of frame rate when using fixed timesteps.\n\n  * Geometry Collection : Fixed potential crash in FillAutoInstanceMeshesInstancesIfNeeded if the index attribute is not found but the asset has auto instance meshes assigned\n\n  * Chaos Cloth Asset - Fixed the TransferSkinWeight node's weight map name override UI mechanism that wasn't showing the input weight map name when connected.\n\n  * Geometry collections now compute its component space transforms even on the server to prevent desync issues between client/server for character basing.\n\n  * Cloth Editor Preview Scene: manually register skeletal and cloth components instead of calling RegisterAllComponents\n\n  * Geometry Collection : Fixed assert when using nanite masked material\n\n  * Geometry collections now reset their dirty index after calling PushStateOnGameThread or else dirtying that proxy will never cause a GT->PT sync ever again.\n\n  * Chaos Cloth Asset - Fixed crash when evaluating Name output of the AddWeightMap and SelectionToWeightMapNode nodes without evaluating their collection.\n\n  * FPhysScene_Chaos::HandleGlobalCollisionEvent should not try to grab the proxy's body instance if its owning component is no longer valid.\n\n  * Cluster union child to parent update now store which cluster union the update is for to prevent the case where an update forces the particle to go to the wrong location since the child to parent update was for a cluster union it is no longer in.\n\n  * Dataflow - Enable the comment node in the property editor so that the comments' text size and color can now be changed.\n\n  * Strain modifications now happen on all the particles we want to process and not just the top level strained particles.\n\n  * Fix an issue where UWorld::ComponentSweepMulti would return whether there was any hit rather than if there was a blocking hit.\n\n  * Cloth Editor: don't refocus when pressing 'F' if the viewport is empty\n\n  * Fixed a crash in the Fracture Mode's outliner system\n\n  * Geometry collection particles no longer increment sleep/break timers while in a cluster union.\n\n  * Chaos Cloth Editor: fix crash when selecting Comment nodes\n\n  * Cloth Editor Selection Tool: request graph evaluation when leaving selection tool\n\n  * Chaos Cloth Asset - Fixed the module name in ChaosClothAssetToolsModule (was ChaosClothAssetEditor instead of ChaosClothAssetToolsModule).\n\n  * Fix material index mapping when turning multiple cloth collections into LODs for one asset\n\n  * Geometry Collection : Fixed dynamic data replication where root bone position and velocity would be ignored if not part of a cluster union\n\n  * The owner property on per-component data for cluster unions is now set properly.\n\n  * Updating a particle's child to parent in a cluster union now properly propagates that change to the implicit object transform.\n\n  * Geometry collection: Fixed bug where anchored bones were not breaking under strain\n\n  * Fixed event buffer growing unbounded when running in single-threaded modes.\n\n  * Server crash on GeometryCollection when updating RepData due to accessing uninitialized world.\n\n  * Cluster union : when processing damage from contact, find the actual child particle in contact instead of using the one that has the closest center of mass\n\n  * Fix for potentially passing a zero-length normal FindGeometryOpposingNormal in SweepQuery.\n\n  * Fix crash when right clicking a comment node in DataflowGraphEditor\n\n  * Dataflow - Removed ensures that caused errors to nodes whose inputs/outputs had been deprecated and removed, and replaced them with a log message instead.\n\n  * Added mitigation for cases where geometry collections receive out of bounds replication requests for the particle array\n\n  * Cloth - Fixed crash when undoing paint on an unbound clothing data.\n\n  * Fix issue where adding a particle with an existing parent into a cluster union would cause that particle to snap to a different position due to ChildToParent being set too early.\n\n  * Geometry Collection : Fixed race condition when setting some of the geometry collection proxy properties at runtime\n\n  * Alter material fetch during destruction cluster creation to not call GetMaterialData directly as that causes a material array to be allocated.\n\n  * Stopped geometry collection components from spending time updating their body instance inherited from primitive component when updating transforms.\n\n  * Chaos Cloth Asset - Set default MaxDistance weight map to 1 when MaxDistance properties have been set.\n\n  * Fix crash in the AABBTree when potentially accessing a particle with a nullptr debugname.\n\n  * Introduced better cleanup of geometry collections to ensure that they are removed from cluster unions and that they aren't considered for being added into cluster unions in the breaking model.\n\n  * Cluster union syncing now better handles cases where the GC proxy pointer can be almost immediately re-used.\n\n  * Cluster unions now set BodyInstance.OwnerComponent so that it can be registered for collision events.\n\n  * Cloth - Fixed broken camera movement when exiting the cloth painting mode.\n\n  * Geometry Collection : Fixed rest transforms not properly reflected in the viewport when set in a construction script\n\n  * Introduce better particle state management for cluster unions so that it no longer relies on needing to pass Chaos::FPhysicsObjectHandles back and forth from the GT to the PT which would result in the possibility of dead particles still being bookkept by the cluster union\n\n  * Added proper cleanup the cluster union manager's PendingChildToParentUpdates and PendingParticlesToUndoChildToParentLock containers so we don't have garbage pointers lying around in containers that continue to grow uncontrolled\n\n  * Minor optimizations to chaos collision event handling.\n\n  * Cloth Editor: fix crash when reloading Dataflow asset\n\n  * Fix issues where pulling data for the geometry collection from to the PT back to the GT reads old data instead of the latest data.\n\n  * Remove calls to ResetDirtyIdx on the PT to prevent a possible race condition.\n\n  * Cloth Selection Node: check that selection indices are valid for the associated group before adding to the collection\n\n  * Cluster unions now properly reset their geometry to an FImplicitObjectUnionClustered in RemoveParticlesFromClusterUnionGeometry if it ends up empty.\n\n  * Geometry Collection : fixed broken pieces failing to shrink when removal feature was enabled\n\n  * Geometry collections and cluster unions now initialize their kinematic state on the GT if needed.\n\n  * Chaos Cloth Asset - Fixed the bone transforms update when the Cloth Asset's Leader LOD isn't available on the Cloth Asset.\n\n  * Geometry Collection: Physics material will now be properly set if the physics state has been already created\n\n  * Cluster union manager now only prevent adding a particle into a cluster union only if the particle itself is in the cluster union - not caring if the new particle's parents are in the cluster union.\n\n  * Geometry collections now reset their rest transforms just in case they were stored accidentally.\n\n  * Chaos Cache Manager: Fixed potential crash when recording using spawnable\n\n  * [NetPhysics] Physics replication, Predictive Interpolation, to make sure the object goes to sleep and is asleep before stopping the replication else another simulated object can keep the object awake and make it desync from the server.\n\n  * Code specifies TeleportPhysics when moving components through physics replication. This avoids warnings that can appear in USkeletalMeshComponent::MoveComponentImpl when using the default movement method.\n\n  * Chaos - Ensure that collisions disabled using the FMidPhaseModifier are reset to enabled the next frame\n\n  * Geometry collections now reload their collision profiles when the primitive component body instance collision settings change.\n\n  * Reduced memory usage in chaos RewindData.\n\n  * Fix issue where replicated cluster union particles would not accurately account for particles that were removed from the cluster union.\n\n  * Per-particle collision profiles for geometry collections now load correctly on the PT even when there are nullptr particles.\n\n  * Geometry Collection : Fix memory leak when setting the rest state when the scene proxy is not created\n\n  * PR #10735: Fix the order of multiplication of quaternions in ApplyDeltaToAllPhysicsTransforms in the Skeletal Mesh Component. This affects movement applied to the character through the character movement component. #contrib 10735\n\n  * [NetPhysics] Physics resimulation improvements to rewinding physics when multiple dynamic objects are in contact.\n\n  * Fix potential array out-of-bounds in FClusterUnionManager::HandleRemoveOperation due to duplicate particles in the array of particles to remove.\n\n  * Cluster unions should be unbreakable on the client to help prevent server-client desync.\n\n  * Fixed a failing check when AutoCluster is run but requests zero clusters.\n\n  * Fixed an issue where a geometry collection source would lose its last material.\n\n  * Breaking a geometry collection will now automatically remove from the parent cluster union.\n\n  * [NetPhysics] Fix issue where physics resimulation could get blocked indefinitely\n\n  * Chaos Cloth Asset Editor - Fixed scale reset to 1 on the skin weight transfer tool.\n\n  * Non-blocking traces/overlaps now also trace into cluster unions.\n\n  * Fixed an issue where the Fracture Mode's AutoCluster tool would not cluster when using the ByGrid clustering option.\n\n  * Made the cluster union child to parent replication via the proxy component authoritative so that other sources (e.g. the GC proxy world transform update) don't try to fight that.\n\n  * Improved robustness and behavior of fracture mode when a selected geometry collection is changed by something other than the fracture mode's tools (e.g., by a dataflow graph)\n\n  * Cluster unions now properly remove from the ActorToComponents map even if the actor is no longer valid because it's pending kill.\n\n  * Mac: Fixes to enable groom on M2+ devices. Addresses a hang that was occuring. This is leads to a reduction in hairless nightmare fuel.\n\n  * Handle geometry collection particles being decayed immediately on the physics thread and fix immediately decayed internal geometry collection clusters reporting their children as active.\n\n  * Fixed physics scene pending tasks causing hangs when dispatched during world shutdown\n\n  * Fix handling of kinematics with the write-back from simulation, in particular when using the cvar SyncKinematicOnGameThread\n\n  * Fixed incorrect options in the Fracture Mode 'Set Initial Dynamic State' menus: Added the missing Static options, and removed the Sleeping option.\n\n  * Fixed a crash on redo of any transaction that updated both a Static Mesh's Mesh Description and its convex collision shapes.\n\nDeprecated:\n\n  * PhysXIncludes.h and NvClothIncludes.h will now report a deprecation message if included unncessarily.\n\n  * Deprecated COPY_ON_WRITE_ATTRIBUTE and Indirect TManagedArray (use the RestCollection to access those attributes instead)\n  * Removed CopyOnWriteAttributeList\n\n### UI\n\nNew:\n\n  * Improved text quality by preventing aliasing on glyph quad edges. The difference won't be noticeable in simple cases, but as soon as non axis aligned rotation, scaling, or sub pixel scrolling will occur, the glyphs with content along the edges will look better.\n\nBug Fix:\n\n  * Add an InitalizeDependency to Enhanced input on the common input subsystem. Since we bind to a delegate on the EI subsystem on Initalize, we need to specify it as a dependency or else it may not be available in a packaged game.\n\n  * Fixed FNullWindow forcing windows to be zero-sized before it was properly initialized\n\n  * Fixed wrong vertical offset on distance field fonts imported as offline on Linux or Mac.\n\n  * -Fixed a possible infinite loop when importing TTF with a specific glyph ranges. -Fixed issue with the FontEditor not refreshing the details view when changing the font cache type.\n\n#### Slate\n\nAPI Change:\n\n  * SRetainerWidget's Slate argument \"RenderWithLocalTransform\", as well as cvar Slate.EnableRetainedRenderingWithLocalTransform are deprecated and will be ignored, as they ares no longer necessary (it was a workaround for now fixed transformation issues).\n\nNew:\n\n  * Added text block property ApplyLineHeightToBottomLine\n\n  * Adding support for getting and setting the SFilterSearchBox search history text\n\n  * Updated AssetPicker: Filter UI combo button is now created using a common helper method. This fixes the lack of the red dot overlay when filters are active & unifies it with how the Content Browser works - Filter UI combo button placement is now configurable. Maintains old behavior of being placed on the right to the search bar, but can also be placed on the left like the content browser no\n\n  * Added ability for NavigationConfig to modify EUINavigationAction rules\n\n  * Optimization for Slate texture atlas look-ups, resulting in roughly 4x speed-up.\n\n  * Remove check for unscaled view rect non negative, assumption is not correct when accounting for PIE scene view offset.\n\n  * Slat WrapBox now support flow direction.\n\n  * Emit material names for GPU frame captures when drawing in Slate.\n\n  * Added slate argument to SGraphActionMenu to automatically proceed when only one action exists. Defaults to off to save perf. Useful for some Niagara cases.\n\n  * Graph Nodes now have a configurable title border margin; accessible via protected member\n\n  * Added a new text overflow policy: MultilineEllipsis. It behaves similarly to Ellipsis on single line text, but it will ensure that if a line is partially clipped on the vertical axis, it will completely be removed, and the \"...\" will be shown at the end of the last visible line. It avoids possible issue occurring with multiline text and the Ellipsis mode where the \"...\" could be invisible because they were displayed in the lower clipped part of the text. #virtualized\n\n  * Added a new option in the Composite Font to enable or disable usage of the Font Face ascent/descent override.\n\n  * Fix slate texture resource crashes on null textures\n\n  * Graph Nodes can now specify what overflow policy to use for the node title\n\n  * Fixed expensive sub-class iteration in UWidget::FindBinderClassForDestination; this method will likely be deprecated in the future.\n\nBug Fix:\n\n  * Fix ScreenResolution not mapping to viewport in PIE for UI materials / widgets.\n\n  * Update the widget event log to automatically scroll to the bottom, since scrolling it manually will often result in more events being created\n\n  * Fix AnalogCursor mouse move events not properly passing Cursor Index causing issue with mouse capture when using multiple cursors.\n\n  * SSuggestionTextBox now presents the suggestions from the top of the list.\n\n  * PR #10934: Fix RoundedBox SlateBrushes defaulting with an outline radius of (0, 0, 0, 1) #contrib 10934\n\n  * Fix Slate Insights not working due to untracked widget names when using Trace Start / Stop.\n\n  * Fix Slate Frame View not working when opened after insights timeline\n\n  * Fixed issue where cursor lock position would be misaligned after moving window with global invalidation enabled\n\n  * [Retainer] Fixed retainer widget rendering and input issues. Previously, there was a cvar \"Slate.EnableRetainedRenderingWithLocalTransform\" allowing to choose between 2 render paths, both with different transformation issues. Now there is a single path fixing all transformation problems, and the cvar is deprecated.\n\n  * Fixed SlateTextureAtlas creating free nodes in the empty slot list that have dimensions smaller than what we feasibly expect can be used by glyphs.\n\n  * PR #11088: Slate: Fix custom element shader missing for StandaloneRenderer #contrib 11088\n\n  * Fix New LWCData not populated in slate vertex shaders\n\n  * Fixed an issue when using Preserve Aspect Ratio on an SWindow where the window would change aspect ratio the first time it was resized if it didn't have an OS border/titlebar\n\n  * Fixed slider only moving by one step when bMouseUsesStep is enabled\n\n  * Fixed issue where cvar Slate.ShouldFollowCultureByDefault was ignored.\n\n  * Update Slider widget to use current cursor position instead of previous position\n\n#### UMG\n\nNew:\n\n  * Add framework for processing slate scenebuffer copies --- To create a new slate post buffer processor, inherit from 'USlateRHIPostBufferProcessor' & implement 'PostProcess' To use in game, create a BP that derives from your buffer processor, ex 'USlatePostBufferBlur'. Set default values on that BP, then connect the processor to a buffer in 'SlateRendererSettings'. [REVIEW] patrick.boutot\n\n  * Expose scenebuffers to UMG --- Feature guarded by 'Slate.CopyBackbufferToSlatePostRenderTargets' disabled by default in initial commit. To use simply call GetSlatePost0 material function after enabling CVar. No overhead unless a widget is rendered using the material function, overhead is minimal (Single-copy 0.003 ms). GetSlatePost1-4 require enabling via project settings. [REVIEW] yohann.dossantos jason.nadro #virtualized\n\n  * Add support for layered Slate Post RT processing --- Add PostBufferUpdate widget which can be used to trigger an update to the Slate Post RT when it \"draws\" Updated Post RT will contain Scene + All UI drawn at that time & also be processed by provided processor. Updated ICustomSlateElement interface to support draw context params.\n\n  * PR #10734: Make CommonUI nicer to use for mouse-based strategy games. #contrib 10734\n\n  * Added BlueprintCallable function AddWidgets to UCommonWidgetGroupBase.\n\n  * PR #11152: [Common UI] Add some root management functions to UCommonUIActionRouterBase #contrib 11152\n\n  * PR #11183: [Common UI] Add the bClearFocusRestorationTargetOfDeactivatedWidgets setting to UCommonActivatableWidgetSwitcher #contrib 11183\n\n  * PR #11150: [Common UI] Add the ability to disable automatic gamepad type detection #contrib 11150\n\n  * PR #11133: Make UCommonActionWidget::UpdateActionWidget virtual PR #11134: CommonUI: Split logic that determines whether the Icon will update in UCommonActionWidget::UpdateActionWidget into its own virtual function PR #11147: Make OnActionProgress and OnActionComplete in UCommonActionWidget virtual #contrib 11133 #contrib 11134 #contrib 11147\n\n  * Updated display names for UCommonButtonBase events:\n\n    * OnSelectedChangedBase - \"On Selected Changed\" OnButtonBaseClicked - \"On Clicked\" OnButtonBaseDoubleClicked - \"On Double Clicked\" OnButtonBaseHovered - \"On Hovered\" OnButtonBaseUnhovered - \"On Unhovered\"\n  * Add method to Activatable Widget to clear Focus Restoration Target.\n\n  * Add QueueAnimation methods, which perform better when multiple animation transitions occur in one frame. [FYI] Andrew.Rodham\n\n  * PR #11192: CommonUI: Add virtual method to CommonAnalogCusor to allow customizing when Left Click should be simulated by Virtual Accept events #contrib 11192\n\n  * PR #10853: CommonUI: Add support for size matching CommonVideoPlayer to media #contrib 10853\n\n  * PR #11209: CommonUI: Make public UCommonUserWidget::(Un)RegisterScrollRecipient functions and expose them to blueprint PR #11212: CommonUI: Fix ScrollRecipients not working if they were registered before the owning widget was constructed PR #11153: [Common UI] Expose FUIActionBindingHandle to blueprints #contrib 11209 #contrib 11212 #contrib 11153\n\n  * PR #10770: Fix CommonBoundActionBar Binding filter not using ignore duplicates #contrib 10770\n\n  * FUIActionBindingHandle: - Added GetDisplayInActionBar and SetDisplayInActionBar functions.\n\n  * PR #10686: Add bIgnoreMoveInput and bIgnoreLookInput to FUIInputConfig equality #contrib 10686 [FYI] [at]saad.nader [at]jc.authier\n\n  * UCommonVisibilitySwitcher: - Added bCurrentlySwitching flag, set to true in SetActiveWidgetIndex_Internal. - Added BlueprintPure IsCurrentlySwitching getter.\n\n  * UTextLayoutWidget now properly updates when any of its properties are set directly\n\n  * PR #10596: Expose CommonWidgetCarousel MoveSpeed #contrib 10596\n\nBug Fix:\n\n  * Fix to SetAllowRightClickDragScrolling and IsAllowRightClickDragScrolling to return the right value.\n\n  * Fix CommonUI actions not updating. FActivatableTreeNode::HandleWidgetActivated: - If the path doesn't support activation focus, manually broadcast UCommonUIActionRouterBase::OnBoundActionsUpdated delegate. UCommonUIActionRouterBase::HandleRootNodeActivated: - Still broadcast OnBoundActionsUpdated delegate even if activated root doesn't support activation focus.\n\n  * Correction to CommonUI's GetDesiredFocusTarget to properly used DesiredFocusWidget property correctly when set on the UserWidget.\n\n  * Fix CommonUI actions not updating when widget deactivated. FActivatableTreeNode::HandleWidgetDeactivated: - If the path doesn't support activation focus, manually broadcast UCommonUIActionRouterBase::OnBoundActionsUpdated delegate.\n\n  * Fixed CommonTabListWidgetBase tab registration on design time [FYI] Saad.Nader\n\n  * PR #10817: Fix UCommonActivatableWidgetSwitcher activating the first tab when changing tabs first time #contrib 10817\n\n  * [Retainer] Fixed clipping not working properly if \"Stencil\" clipping was used on elements inside a retainer (stencil clipping is used when shear or non axis aligned rotation are applied).\n\n  * Fixed a crash in the UMG Designer that could occur when placing widgets in inherited WidgetTrees (when using NamedSlot).\n\n  * Fix rounded border not cropping with translucent materials\n\n  * PR #11238: CommonUI: Fix UCommonGameViewportClient::HandleRerouteTouch not getting called #contrib 11238\n\n  * PR #10852: Fix bMatchSize for lazy textures in image widgets in editor #contrib 10852\n\n  * Fixed ImageSize properties not updating correctly when changing Slate Brushes to a texture resource that was currently being streamed in\n\n  * Fixed DataValidator crashing when run on an abstract Blueprint.\n\n  * Fix NamedSlot failing to compile if parent widgets has any BindWidget\n\n  * [CommonUI] Button object now remains consistent after changing sound override properties directly\n\n  * PR #10824: Fix not being able to block input with multiple reasons with UCommonInputSubsystem::SetInputTypeFilter #contrib 10824\n\n  * PR #10838: Deselect buttons when removing them from a UCommonButtonGroupBase #contrib 10838\n\n  * Editor Utility Widgets: Fix to potential crash when trying to open the same Editor Utility Widget more than once using Spawn and Register and Get ID function.\n\n  * UMG: Correction to PanelWidget to prevent a null widget to be added to the panel which could cause a crash in many situation.\n\n  * Improved width calculation in case of multiple leading tabs in text.\n\n  * Common UI: Fix sorting of widgets in the same CommonUI domain.\n\n  * PR #11091: Don't pixel snap screen-space widget components in SWorldWidgetScreenLayer if the root widget has snapping disabled #contrib 11091\n\n  * PR #10900: Fix not being able to click Common Text widgets in the widget designer when bAutoCollapseWithEmptyText is set to true #contrib 10900\n\n  * Fix brush styles not applying on EUW due to SVG leftover data.\n\n### Virtual Production\n\nNew:\n\n  * DMX Output Conflict Monitor: Added a conflict monitor for systems that send DMX from engine\n\n  * DMX Pixel Mapping: Added rotation for pixel mapping components\n\n  * DMX Pixel Mapping: Added support for HDR rendering. Select the source and set the Pixel Format to High Precision to enable HDR support\n\n  * DMX Pixel Mapping: Added an option to source to let children follow texture size\n\n  * Experimental support for level instances between -game and editor instances has been added to Multi-user.\n\n  * Enabled editor outlines for Virtual Scouting tools. Editor outlines will now appear around selected objects in the HMD.\n\n  * DMX Pixel Mapping: Added grid snapping\n\n  * Added bPlay property on CineCameraRigRail to toggle play/pause in drive mode\n\n  * DMX Pixel Mapping: Reworked the Layout Menu to reside within the designer\n\n  * DMX Pixel Mapping: Added a context menu to the designer\n\n  * Added bReverse property on CineCameraRigRail to control drive mode direction\n\n  * Add support for meshing networks. When enabled, the a newly discovered node will be shared with existing nodes connected to the UDP layer. This feature has to be enabled via a setting and designed for Multi-user networks where some topology information is pre-shared on switchboard launch. The Switchboard application automatically enables this flag.To manually enable, use the bShareKnownNodesWithActiveConnections setting on the UdpMessaging module. This initial sharing will allow editors to completely mesh together without having to know the editor endpoint id.\n\n  * Only support UE_ADDITIONAL_PLUGIN_PATHS environment variable in editor builds. Game and server builds will not use this variable to lookup additional plugin paths.\n\n  * Added a new Control Rig node to access basic property values by LiveLink subject and property name from any LiveLink Role\n\n  * DMX Pixel Mapping: Added an option to use the patch color as the component color\n\n  * DMX Pixel Mapping: Added an option to flip components of fixture groups horizontally or verically\n\n  * DMX Pixel Mapping: New components now find a reasonable size when first added\n\nBug Fix:\n\n  * DMX Protocol: Fixed possible race condition when stopping output port threads\n\n  * DMX Pixel Mapping: Fixed matrices do not update when fixture type or patch changed\n\n  * DMX Pixel Mapping: Fixed matrix cells cannot be dragged when not locked in designer\n\n  * DMX Fixtures: Fixed DMX Fixture Component Double to applie its value range correctly when Push Normalized Values Per Attribute is called.\n\n#### Media IO\n\nNew:\n\n  * Added media texture support for overlay materials on media plates.\n\n  * Added depth-aware overlay composite convenience to the media plate contextual menu for minimizing TSR artifacts.\n\n  * LiveLink: Added ability to genlock the engine to a live link subject. This is useful when live link is the primary driver of the animation (such as mocap), but needs to be separate from the timecode source.\n\nBug Fix:\n\n  * Fix color flashes when changing OCIO config on a blackmagic media source\n\n  * Allow initializing LTC Channel with same Framerate family without multi format mode.\n\n  * Fix stage monitor hitching when receiving data from provider with invalid timecode\n\n  * Improved image media thread safety for shared frames in the global cache.\n\n  * Fixed mip level estimation for media drawn in overlay materials at the post-upscale resolution.\n\n  * Fixed spherical pole artifacts for large tiled EXR sequences.\n\n  * Prevented media thumbnail renderer from filling up the global cache with image media.\n\n  * Fix Media Source OCIO not working with media profiles\n\n  * Fixed crash playing an image sequence with inconsistent resolution.\n\n  * Fix GPU Direct not working with Aja Key&Fill Fix Multiformat 1080p/4k not working, was caused by overlap between the frame buffers. We now index the frames using the biggest gaps possible in case 4K frames are used.\n\n  * MediaIO: Increased default number of buffers from 3 to 4 to avoid starvation. Starvation may happen when anythread scheduling is disabled.\n\n  * Fix media bundle not being able to be placed in level\n\n  * Fixed image media global cache issue where cached empty frames could break playback.\n\n  * Fix MediaIO audio/captions/subtitles not working if source was in JITR mode\n\n  * Rmax: Changed default rate multiplier from 1.05 to 1.00, since the multiplier was upsetting the receiver, and it is not needed anymore.\n\n  * Allow setting aja genlock channel to same output as video\n\n#### nDisplay\n\nNew:\n\n  * Added a new feature to the ICVFX camera component that allows the virtual depth of field rendered to a stage wall to be offset by an amount intended to compensate for the added depth of field from the real world camera when filming the wall. This feature can be enabled through the new Enable Depth of Field Compensation property on the ICVFX camera component. When enabled, the depth of field in the ICVFX image rendered to the stage wall will be offset by a dynamic amount depending on the camera's focus distance, its distance from the wall, and the virtual object's distance from the camera, attempting to compensate for the real world camera's depth of field as much as physically possible\n\n  * Added frustum fitting warp policy and in frustum fit view origin component, which will fit a stage's geometry into either the active engine camera, or an external cine camera if specified, by fitting the projection of the stage geometry onto the camera's projection plane. In addition, users can preview the frustum fit in editor, which will display a preview version of the stage geometry, scaled appropriately, within the camera's frustum in the level\n\n  * Added DC.Stats.Frame console variable to easily display frame number and timecode.\n\n  * nDisplay: Added option to disable overriding transforms (xform, camera, screens) from external config (.ndisplay). Users are encountering two problems: Unexpected behavior when they launch the cluster and the projection is different than expected, and seemingly gets \"fixed\" when wiggling the NDC via multi-user. Difficulty in sharing the same NDC archetype in multiple levels that have NDC instances with transform overrides in them. Default to disable overrides, because it is the common desired case in VP. Users that dynamically create or modify the .ndisplay and wish those changes to override, should set this new option to true.\n\n  * Switchboard: Sound disabled by default when launching nDisplay Sound is typically not used, and can add unnecessary overhead.\n\n  * Switchboard: Always pick a primary node when launching the cluster. We've seen a common situation where the user launches a subset of the cluster but forgets to assign a primary node. This results in a failed launch but it is not immediately evident why. With this change, this situation should never happen again.\n\n  * nDisplay: Detect when the exported config in the nDisplay asset is out of date. This can happen in child blueprints when their parent changes. It can also happen when there are updates to the export logic.\n\n  * SharedMemoryMedia: Added ability to have multiple simultaneous receivers. Currently limited to 4.\n\n  * Added a new toolbar button to the nDisplay Config Editor to import an MPCDI config into an nDisplay config blueprint, which will add all necessary cluster nodes and viewports, and configure them correctly, as well as adding screen components to match if the MPCDI config is a 2D config.\n\n  * nDisplay: Display device exposure property now affects all materials and not just the techvis material. The property can also be useful to brighten or darken the in-editor preview, especially when preview post process is enabled. Also added a Gamma property, which can be useful when receiving a texture that needs such conversion.\n\n  * SharedMemoryMedia: Added single GPU option so that it can be faster in those cases.\n\n  * nDisplay: Added node name to barrier trace names. Should make it easier to debug. W/o this, one has to look up which node has the ip address that is put in the session name, reducing debugging efficiency, particularly with large clusters.\n\n  * Added a mesh component to the DCRA that stores a 3D version of the stage's geometry map that line traces can be run against to compute distances to the stage's geometry from any point. This mesh can be make visible in the editor using a new property in the stage's Editor Preview properties to allow debugging of the stage's generated geometry map\n\nBug Fix:\n\n  * nDisplay: Work around annoying LogHAL warning when checking if a named mapped memory already exists.\n\n  * Fixed issue where stage components weren't being outlined when selected in the nDisplay config editor.\n\n  * GpuProfiler: Support gpu trace events named with the _N pattern, where N is some integer. Before this fix, Gpu trace events with said naming pattern would all appear with the same name, which would correspond to the first one. e.g. VP_0, VP_1, VP_2 would all appear as VP_0 in Unreal Insights.\n\n  * nDislplay: Fix inner resolution math when buffer ratio < 1\\. Issue is that FIntPoint float decays to FIntPoint IntType. So the resolution ended up as zero and media capture start would fail since zero resolution makes it fail.\n\n  * Exposed the \"Exposure compensation\" property on post process volumes to the ICVFX color grading drawer's property panel\n\n  * SharedMemoryMedia: Fixed inverted alpha when viewing in player. It will invert alpha by default but there is a new option in the Media Output to not invert. Note: GPU time increased up to 100us when alpha inversion is selected on Quadro RTX A6000, for a 4K texture.\n\n  * Fixed issues with light card colors and blending caused by inconsistent gamma encoding for 3D and UV light cards with and without OCIO. Now, all light cards are gamma encoded with gamma 2.2 when rendered, and will be decoded if needed during the final composite pass when blending occurs.\n\n  * nDisplay: Avoid HasFocus related stalls when running the cluster.\n\n  * Added check for IsAlwaysFlushToWall when moving light cards in ICVFX panel, so that they will not be set flush to wall when Flush to Wall is disabled in their properties.\n\n  * Switchboard: Don't include project path in command line when launching cooked nDisplay builds, which was causing it to fail launching.\n\n  * nDisplay: Fixed icvfx camera activation logic when it has media i/o assigned.\n\n  * Fixed issue where light cards moved through DMX were not updated in the ICVFX panel to match their new position\n\n#### Rendering\n\nNew:\n\n  * Added new VP utility post-process volume class, which sets all required settings for pass-through by default.\n\n  * Added a convenience engine material function for color transformations from the sRGB/Rec709 color space to the working color space.\n\n  * Exposed CPU OpenColorIO transformation to color types, and not only images.\n\n  * Allowed OpenColorIO library use in non-editor modes.\n\n  * Updated the OpenColorIO to 2.3.1.\n\n  * Exposed OpenColorIO context on the configuration asset.\n\nBug Fix:\n\n  * Fixed OpenColorIO scene view extension active references which could prevent its destruction.\n\n  * OpenColorIO transforms are now disabled by default, and avoid skipping rendering on invalid settings.\n\n  * Fixed potential use-after-free in OpenColorIO enqueued render commands.\n\n  * Fixed OpenColorIO reload and rebuild functionality not forcing the operation due to an equivalent cache hash.\n\n  * PanoramicCapture: Fix e.g. C: not recognized as a valid path.\n\n  * Fixed OpenColorIO cache id crash on invalid configs.\n\n#### Tools\n\nAPI Change:\n\n  * Users launching custom processes via SwitchboardListener may find that, as a result of SwitchboardListener changing from a console subsystem application to a GUI subsystem application on Windows, they now need to explicitly opt into suppressing the console window for child processes, either by passing the newly-added hide=True argument when calling message_protocol.create_start_process_message, or equivalently by setting \"bHide\": true in the corresponding JSON message.\n\nNew:\n\n  * [Switchboard] Traffic between Switchboard and SwitchboardListener now utilizes QUIC for transport encryption, and connections to SwitchboardListener require a password (SwitchboardListener 3.0).\n\n  * [Virtual Scouting] The overhauled Virtual Scouting toolset, based on the new XR Creative Framework, is now available as an experimental plugin.\n\n  * [SwitchboardListener] SwitchboardListener is now a Slate application. This provides a more user-friendly workflow for first time setup, and enables users to easily change the authentication password. A separate SwitchboardListenerCmd target is now available for users who still need to build SwitchboardListener as a console application.\n\n  * [Switchboard] Because SwitchboardListener changed from a console application to a GUI application, we now need to set a flag to explicitly hide the console windows of Perforce/UnrealBuildTool child processes that were previously implicitly hidden.\n\n  * [Switchboard] Added a context menu option to exclude individual devices from Unreal Insights tracing.\n\n  * [Switchboard] Simultaneous multithreading (AKA Hyper-Threading) being enabled is now flagged as a warning in the CpuUtilization column of the nDisplay Monitor. These features are known to potentially cause performance hitching with nDisplay workloads.\n\n  * Added support for calibrating lens distortion using aruco patterns to the LensFile editor.\n\n  * [Switchboard] If the user includes the .uproject filename + extension when setting the P4 project path, it will be automatically removed, helping to eliminate a common setup mistake that would otherwise cause Perforce errors that can be difficult to diagnose.\n\n  * Blueprint users can send custom Multi-user RPC events using a new BP API. Blueprint structs can be sent as a custom event and received on a remote client.\n\n  * [XR Creative Framework] The InteractiveToolsFramework SelectionInteraction now ignores any actors/components that the PointerComponent has been configured to ignore.\n\n  * [Switchboard] OSC slate change messages are only sent when text edit loses focus, rather than with each keystroke.\n\n  * [XR Creative Framework] Added blueprint OnUndo / OnRedo delegates to UXRCreativeITFComponent.\n\n  * Made lens distortion solves in the LensFile editor asynchronous, supporting progress messages and a user option to cancel the job before it has finished.\n\n  * [Switchboard] The Switchboard editor settings page now allows access to the \"Reinstall Dependencies\" option even when the user has not created desktop/start menu shortcuts.\n\n  * Switchboard: Added local cache that can be shared between configs. It caches: Maps in a project Asset types of interest (LiveLink presets, media profiles, nDisplay configs) Also added a progress dialog when finding the maps of a project, and an additional dialog when finding the assets of interest to parse.\n\n  * Bug Fix: [Switchboard] Authentication now works on Linux.\n\n  * A new Live Link Input device plugin has been created to allow users to use gamepad input as a Live Link subject. This feature is only supported on Windows.\n\n  * UPD Messaging module has improved detection of bad socket connections and will automatically filter those connections out from communication. The UDP Messaging module also has additional support for wildcard based IP address filtering to prevent the editor from communicating with designated endpoints.\n\n  * [Concert] Fixed a crash when transacting level instance actor filters.\n\n  * Virtual Production utilities - All properties in the project settings relating to the Legacy Virtual Scouting tools have been placed into the category \"Legacy Virtual Scouting\".\n\n  * Added a reference implementation to demonstrate one method for writing a lens distortion solver using pytorch and neural networks.\n\nBug Fix:\n\n  * [Switchboard] Fixed a race condition where FThreadStats could cause a crash on exit.\n\n  * SwitchboardListener: Fix bug where reception is not always disabled until current message is processed.\n\n  * When launching a Multi-user server from the Swithchboard app. The server name is given a unique name based on the primary address for the switchboard config. This provides Multi-user server conflicts when multiple operator stations open the same config.\n\n  * Object Mixer: -Fix: Engine Hitch/Delay when opening Light Mixer\n\n  * Console Variables Editor: -Fix: \"Show\" Filters Do Not Update Cvar List\n\n  * Switchboard: Fix not selecting the map when creating a new config from Unreal. The issue is that the list of maps being internally listed with the pattern /Game/MyFolder/MyMap.umap/MyMap, instead of just /Game/MyFolder/MyMap, so it never found the entry from the script and was falling back to the default map.\n\n  * Console Variables Editor: -Check for session before sending/receiving MU cvar change\n\n  * Object Mixer -Fix: Removing a Light from a Light Collection does Not Immediately Update UI\n\n  * Level Snapshots: -Fix: Crash when Expanding Media Plates modifications if parameters \"AutoPlay, Enable Audio, Play Only when Visible\" are changed\n\n  * Object Mixer: -Fix: Blueprint Lights Parameters Switch To \"Multiple Values\" When Transformed\n\n  * Level Snapshots: -Fix: Crash after restoring Media Plate properties in Level Snapshots when in Multi-User -Fix: Level Snapshots > Crash in results editor UI when expanding VCam actor\n\n  * Console Variables Editor: -Fix: Console Variables Editor does not Execute \"HighResShot\" more than once when the Execute button is selected.\n\n## Upgrade Notes\n\n### Animation\n\n#### Movie Render Queue\n\nUpgrade Notes:\n\n  * Because the format string tokens for date, time, etc. are now provided in local time instead of UTC time, rendering workflows reliant on UTC will instead need to set it via a scripting pipeline by calling UMoviePipeline::SetInitializationTime with a UTC time.\n\nNew:\n\n  * The format string tokens for date, time, etc. are now provided in user system (local) time instead of UTC time.\n\n#### Rigging\n\nUpgrade Notes:\n\n  * Older project can still use USkeletalMesh::LoadLODImportedData and SaveLODImportedData. The data will be converted from/to FMeshDescription into the older format. It is recommended to use the newer functions instead, which are modeled on the UStaticMesh API: CommitMeshDescription, GetMeshDescription, etc.\n\n    * To construct a FMeshDescription compatible with skeletal meshes, there are helper functions found for this in SkeletalMeshAttributes.h to register attributes for this purpose on a newly created FMeshDescription object.\n\nNew:\n\n  * Skeletal Mesh LOD import/editable data is now stored using FMeshDescription rather than FSkeletalMeshImportData.\n\nBug Fix:\n\n  * ControlRigXRayMaterial - Updated Xray shader to include eye adaptation so controls don't glow in specific lighting conditions.\n\n#### Sequencer\n\nUpgrade Notes:\n\n  * Movie Render Queue now uses local time for the time related tokens, instead of UTC time. For render farm implementations you can restore the previous UTC behavior by calling UMoviePipeline::SetInitializationTime(FDateTime::UtcNow()) after initializing the pipeline object.\n\nNew:\n\n  * Movie Render Queue now uses local time for the time related tokens, instead of UTC time.\n\n#### Synthesis\n\nUpgrade Notes:\n\n  * Physics Control Component changes will likely require manual fixups to existing assets, since this is still an experimental plugin.\n\n  * Physics Control Component changes will likely require manual fixups to existing assets, since this is still an experimental plugin.\n\n  * Physics Control Component changes will likely require manual fixups to existing assets, since this is still an experimental plugin.\n\n  * Physics Control Component changes will likely require manual fixups to existing assets, since this is still an experimental plugin.\n\nNew:\n\n  * Re-organise the PhysicsControlComponent to remove the private implementation and make it more amenable to extension. Handle missing skeletal mesh component. Fully disable the controls/constraints when strength and damping are zero. Make it possible to set the physics asset in RigidBodyWithControl whilst it is running. Report attempts to use invalid controls etc as warnings (option in the Physics Control Component to enable/disable this). Move ControlSettings into the ControlData struct\n\n  * Removed support for auto-deactivation of physics control component\n\n  * Implemented Physics Control Profiles, which can be used in both PhysicsControlComponent and RigidBodyWithControl.\n\n  * PhysicsControl - support body modifier \"default\" movement type, so it doesn't force a change to the movement. This fixes problems initialising physics assets that have kinematic bodies.\n\n### Editor\n\nUpgrade Notes:\n\n  * The default Add Spline Point keyboard shortcut binding has been removed (Previously A-Key). You can re-assign this action in Editor Preferences -> Keyboard\n\nBug Fix:\n\n  * Spline Points will no longer mistakenly be added when moving camera with WASD\n\n### Foundation\n\nUpgrade Notes:\n\n  * Called when entering and leaving test section.\n\n    * ie: For a test named MyTest.Log.Validation.TestTrue These will be called through OnEnteringTestSectionEvent before any test of the corresponding section is executed: - MyTest - MyTest.Log - MyTest.Log.Validation And the corresponding one when leaving the section after execution. One can register a callback this way: FAutomationTestFramework::Get().GetOnEnteringTestSection(TEXT(\"MyTest.Log\")).AddRaw(this, &FMyModule::MySectionCallback); As first argument the name of the section is passed.\n\nNew:\n\n  * Introduce FAutomationTestFramework::OnEnteringTestSectionEvent, FAutomationTestFramework::OnLeavingTestSectionEvent\n\n#### Build\n\nUpgrade Notes:\n\n  * Remove unacceptable words. \"MasterEnable\" has been renamed to \"Enable\" for MemoryMappedFiles configuration setting.\n\n  * Project Packaging \"MovieBlacklist\" has been renamed to \"MovieDenyList\"\n\nNew:\n\n  * Remove unacceptable words. \"MasterEnable\" has been renamed to \"Enable\" for MemoryMappedFiles configuration setting.\n\n  * Remove unacceptable words. Project Packaging \"MovieBlacklist\" has been renamed to \"MovieDenyList\"\n\n#### Core\n\nUpgrade Notes:\n\n  * If a project has previously relied on modifying Engine/Programs/CrashReportClient/Config/DefaultEngine.ini to set a custom reporting endpoint, this can now be achieved using [Project]/Config/DefaultEngine.ini.\n\n  * CSV Profile output will contain additional data, but overall format remains the same\n\n  * Loading and compiling Blueprint assets in the editor tends to be a bit flimsy. This change should help address assorted issues that we've seen in the past when it comes to preloading Blueprints and their dependencies. If you suspect there's a load-related issue with change, try disabling \"linker.EnableFullBlueprintPreloading\", and then report the issue on UDN.\n\n  * CSV Profile output will contain additional data, but overall format remains the same\n\nNew:\n\n  * Add support for project overrides in crash report client\n\n    * Introduces a few changes that enables CrashReportClient to read various settings from project configuration. Also adds compile time defined fallback for report url. This makes it easier to setup third party crash report providers without modifying engine configuration files.\n    * Some additions to the user interface was also added, for example being able to set company name in some user interface text.\n    * Finally we also improved memory usage for CrashReportClient on many core machines.\n  * Adding 'iris' CSV metadata tag so we can track which builds had it enabled for when we extend playtests outside of dedicated Iris playtests. Flag is set to '1' if the GameNetDriver has \"IsUsingIrisReplication\" set to true. This logic is done in UNetDriver::PostCreation because doing it inside InitBase is too early on clients, as the PendingNetDriver will not have been set to use Iris yet.\n\n  * Fix loader assumptions for BP objects Added forced flushing of exports for Blueprint classes. Toggle with the \"linker.EnableFullBlueprintPreloading\" cvar in case any issues arise. When Blueprints and their corresponding classes are compiled, they often need to reference other exports in the package. The expectation is that these exports are fully preloaded prior to compilation, though that's often not the case. Both RegenerateBlueprintClass and RegenerateClass have incomplete logic for preloading the exports, and often miss several, such as portions of the widget tree in a widget Blueprint. Instead of attempting to fix FPreloadMembersHelper to find all dependencies correctly, we can just exploit the fact that nearly all of the exports in a given Blueprint package will be referenced by either the Blueprint or its class. We can just force all of the exports to preload, and avoid having to traipse through object property references to figure out exactly what they reference. While the previous behavior was incorrect, it didn't expose any obvious errors. However, we're trying to ensure that objects are always preloaded prior to postloading, which was often violated during Blueprint compilation.\n\n  * Adding flags to CSV metadata for LTO and PG_Instrumentation so that we know if either feature was turned on during the capture\n\n### Framework\n\n#### Audio\n\nUpgrade Notes:\n\n  * Previously the ability to reverse a FMetasoundGeneratorHandle::WatchOutput was not possible.\n\n  * To use Oculus Audio plugin, retrieve the latest plugin versions directly from the plugin vendor.\n\n  * When you look at your source effects, they will display a warning about having mismatched parameters on your control buses. You'll need to update those Control Buses to use a Volume parameter instead, but even without doing so, they should still function properly.\n\nNew:\n\n  * [MetasoundEngine] Provide UnwatchOutput API as inverse of WatchOutput operation.\n\n  * Removed Oculus Audio plugin.\n\nBug Fix:\n\n  * Changed the Chorus Source Effect's Wet/Dry Modulation Parameters to volume (for parity with submix modulators).\n\n#### Blueprint\n\nUpgrade Notes:\n\n  * This will patch those members back to reference the instance that was created at CDO construction time so that the asset functions correctly in the editor, but it will not restore any non-default values that may have been set prior to when the asset is/was last saved.\n\n  * Re-saving the asset will return the asset to a working state and dismiss the warning on load. If you happen to see it during a save, this is indicative of a problem that will cause data loss.\n\nBug Fix:\n\n  * Added a warning on load/save when Blueprint CDOs contain serialized NULL members that should otherwise be referencing a default subobject instance assigned by the closest native parent class's C++ constructor.\n\n#### Blueprint Editor\n\nUpgrade Notes:\n\n  * The blueprint search metadata schema has been modified so that the exact search can reliably find blueprint function library calls, parent calls and function graphs that override a parent class's function or implement an interface. Currently blueprint search metadata is stored as part of the blueprint asset, so blueprint assets should be loaded and resaved to fully benefit from the updated searchability. Resaving all blueprint assets is not required. The searchability of the asset is then as follows:\n\n    * Loaded assets: Fully searchable\n    * Unloaded and resaved in UE 5.4: Fully searchable\n    * Unloaded and not resaved: Results may be missing for function library calls, parent function calls, interface implementations and function overriding graphs. Most function call-sites can still be found if it's not from a function library.\n  * When a project-wide search is performed the Find-in-Blueprints window will show a message when assets were parsed that contain outdated metadata. Options are shown to export the affected asset list or to load all those assets in memory so that they benefit from full searchability. All bulk operations triggered from the Find-in-Blueprints window show a warning message so that the user must confirm the action.The aforementioned option to load all assets with outdated metadata may be unwise when the project is large or if for any reason an asset crashes the editor when loaded. Alternatively, for a small project you may want to bulk resave affected assets. A setting 'Allow Index All Blueprints' has been added under 'Editor Preferences > Blueprint Editor Settings' to disable or enable bulk operations:\n\n    * None: Does not allow any bulk load or save operations from the Find-in-Blueprints window.\n    * Load Only (default): Allows bulk load of assets with outdated metadata.\n    * Checkout and Save: Allows mass checkout, load and resave of assets with outdated metadata. Setting it via the Editor UI applies it to the current user. The 'Allow Index All Blueprints' can also be set project-wide for all users by creating or modifying the Config/DefaultEditorPerProjectUserSettings.ini file and adding the section:[/Script/BlueprintGraph.BlueprintEditorSettings]AllowIndexAllBlueprints=None | LoadOnly | CheckoutAndResave\n\nNew:\n\n  * Find References: Added an exact function search that incorporates the function's class. Previously, Find References on functions would do a raw search by name, yielding irrelevant results like same named functions from other classes and any node that contains the function name as substring. The exact search only finds function call-sites and implementations from the relevant class or interface, including blueprint libraries.\n\n  * Find References for function-related and variable nodes is now a submenu that provides both methods of searching: By Name and By Class Member (new). The keyboard shortcut behaves as before: searching by name for functions and doing an exact search for variables. Note that searching by name is faster than the exact search. The exact search is recommended primarily when searching by name yields many irrelevant results.\n\n#### Gameplay\n\nAPI Change:\n\n  * This requires access to the GDK to use.\n\n  * This plugin requires access to the GDK.\n\n  * This means that if you for some reason modified the engine to make XInputInterface.h a publicly available include, you need to add the XInputDevice module as a dependency. This should not be the case for anyone, unless they have customized the engine to extend on XInput and make it public in the first place (It was in a private module folder and not exposed with an API, so we can't really do anything about it if it was modified).\n\n  * Please change the return type of your implementation of RegisterSpecificAsset to return an EDataRegistryRegisterAssetResult.\n\nUpgrade Notes:\n\n  * If you want to process traditional gamepads, you may want to disable XInput to avoid \"double reporting\" input events.\n\n  * To use this you can simply enable the plugin for your project. To change settings and enable the the processing of devices you can modify your Project Settings.\n\n  * This plugin is defaulted on, so no action should be needed.\n\n  * Please change the return type of your implementation of RegisterSpecificAsset to return an EDataRegistryRegisterAssetResult.\n\n  * No action should be needed, but there are two different virtual functions that you override on UPlayerInput, EvaluateKeyMapState and EvaluateInputDelegates, which may prove helpful if you are extending the existing input system.\n\n  * Because the GameFeatures plugin was moved to Runtime, any PluginTemplates references in the GameFeaturesEditorSettings section of a project's DefaultEditor.ini may need to be updated\n\n  * Added support to set destination reached distance to UAbilityTask_ApplyRootMotionMoveToActorForce.\n\n  * Added support to AbilityTask_ApplyRootMotionMoveToActorForce to target a component with a relative location.\n\n  * Previously, removing a GameplayCue would cause a single EGameplayTagEventType::AnyCountChange callback with its Tag and Count, even though all equivalent Cues would receive an OnRemove. So previously: 15 GC Tags would be a single callback and now it will be 15 callbacks. This will change behavior if you're using something like AbilityTask_WaitGameplayTagCountChanged on the GameplayCue Tag (that callback would fire 15x now, and just once previously). The CVar to toggle this functionality is GameplayCue.Fix.UseEqualTagCountAndRemovalCallbacks (it is now defaulted to true)\n\n  * Previously, it was possible to get Multicast RPC's for Gameplay Abilities on Simulated Proxies (even though none of the data would have been replicated correctly). That's no longer the case -- Simulated Proxies will no longer have Gameplay Abilities replicated to them.\n\n  * This was broken because we did not actually update the InputDeviceId on the input event, only the ControllerId. The fix is to create a new \"fake\" input device ID and map it to the next available local player if needed for any gamepad events. This has the resulting behavior of te Keyboard and Mouse controlling LocalPlayer[0], and the gamepad controlling LocalPlayer[1], instead of both devices controlling LocalPlayer[0]. In case this somehow caues issues unforeseen issues with split screen games, it can be disabled with the cvar 'input.bRemapDeviceIdForOffsetPlayerGamepadIds'.\n\n  * UCharacterMovementComponent::MoveAutonomous() method got updated and its replication behavior changed, to get previous behavior disabled the EnableQueuedAnimEventsOnServer CVar. Note that now the EnableQueuedAnimEventsOnServer CVar is enabled by default after this change. Older projects that had this CVar disabled will need be enable it to get the new behavior.\n\nNew:\n\n  * Game Input Windows experimental plugin.Game Input for Windows is a next-generation input API that exposes input devices of all kinds through a single consistent interface. The goal of Game Input in Unreal Engine is to provide support for as many input devices as possible by default in the engine. This will hopefully enable you as the developer to create some really awesome controls for your game, improving player experience and accessibility \"out of the box\". Game Input makes supporting \"special\" input devices such as racing wheels, flight sticks, and instruments easier than it has been in the past in Unreal with solutions like Raw Input. Game Input can also process \"traditional\" gamepads. For this experimental release the goal of the Game Input Plugin is to have feature parity with the of the existing XInput and Raw Input plugins. This means that you can use it to process gamepads as well as any custom configurations of hardware based on Vendor and Product ID.\n\n  * Add the experimental \"Windows Game Input\" Plugin. This plugin will allow for the new Game Input library from the GDK to be used on Win64 and WinGDK build targets. In the future, this should allow for improved overall input device support for \"special\" devices in the future such as racing wheels, flight sticks, etc. Right now, the plugin will essentially have parity with the existing behaviors of Raw Input and XInput on windows.\n\n  * Break XInput out into it's own Input Device module instead of being created as a part of the Windows Application. This will pave the way for us to enable GameInput as the default input device in the future, and make it much easier to just turn off XInput via the plugin system instead of needing to add a bunch of checks to the WindowsApplication.cpp\n\n  * Adding an Enum return value to Register Specific Asset, because if the asset is already registered then we should not log out a warning, which causes Tools to trigger warnings.\n\n  * Refactor the UPlayerInput::ProcessInputStack function to separate out the evaluation of the key map fromt he broadcasting of delegates. This will allow us to change the consumption state of Keys or Delegate bindings from subclasses such as Enhanced Input, which means that we can mark Input Actions to explictly block any legacy key mappings, gameplay debugger keybindings, etc.\n\n  * Move the GameFeatures and ModularGameplay plugins out of Experimental and put them in Runtime. The plugins were changed to Beta in 5.2 but they were not moved at the time\n\n  * Added support to set destination reached distance to UAbilityTask_ApplyRootMotionMoveToActorForce.\n\n  * Added support to AbilityTask_ApplyRootMotionMoveToActorForce to target a component with a relative location.\n\n  * [GAS] PR #11156: Fixed bugs caused by gameplay cue getting removed after OnRemove is sent to the cue\n\nBug Fix:\n\n  * [GAS] Fixing a longstanding bug that replicated Gameplay Abilities are being replicated to Simulated Proxies (but we expect them to only be replicated to the Owning Client -- Autonomous Proxies).\n\n  * Fix for bSkipAssigningGamepadToFirstPlayer in the GameViewportClient.\n\n  * Fixed issue in CharacterMovementComponent where queued animation notifies were not being fired when running a full animation graph update on server\n\n#### Networking\n\nUpgrade Notes:\n\n  * UNetConnection::ClientHasInitializedLevelFor is now deprecated and UNetConnection::ClientHasInitializedLevel should be used/overridden instead.\n\nNew:\n\n  * Allow querying whether a client has initialized a level via the ULevel\n\n### Learning Resources\n\n#### Sample Content\n\nUpgrade Notes:\n\n  * Levels using BP_SunSky will need to have the VolumetricCloud Actor removed, or the VolumetricCloud component in BP_SunSky disabled, depending on preference.\n\nNew:\n\n  * Updated SunPosition plugin to add VolumetricCloud component with an updated simple to use and art directable cloud material.\n\n### Level Design and Art Tools\n\n#### Geometry Core\n\nUpgrade Notes:\n\n  * New: Provided a new CVar, modeling.DisableAutoUVAreaDensitySampling, which when set, returns the behavior to the original algorithm for UV generation in Patchbuilder, in case there are legacy reasons to maintain that behavior.\n\nNew:\n\n  * Changed: Improved the UV generation scheme PatchBuilder via a change to the polygroup generation stage, providing area aware sampling of the mesh surface and reducing the overcompensation effects that small, disconnected regions in the mesh were having on the overall segmentation.\n\n#### Procedural\n\nAPI Change:\n\n  * Added 'abort' capabilities on IPCGElement which allow special behavior when a task is not fully completed before being cancelled.\n\nUpgrade Notes:\n\n  * Any levels with existing, unloaded PCG Partition Actors should be fully loaded and the PCG World Actor should be saved. This will perform a deprecation step that avoids creating duplicate PCG Partition Actors in unloaded grid cells. It is safe to unload the PCG Partition Actors at this point. If these steps were not taken and you have duplicate PCG Partition Actors in some grid cells, you can recover the data by deleting all serialized PCG Partition Actors (Tools -> PCG Framework -> Delete all PCG partition actors), and then regenerating your original PCG components.\n\n  * Previous deprecated nodes will have a Union node emplaced before the Source to respect old behavior\n\n  * The \"CancelExecutionOnEmpty\" property on PCG Data Collection is deprecated and doesn't do anything anymore.\n\nNew:\n\n  * Add support for creating PCG Partition Actors on demand outside of editor, and outside of World Partition levels.\n\n  * Refactored the Difference Node to follow new pattern of looping on the Source pin with an implicit union on the Difference pin.\n\nBug Fix:\n\n  * Improved cancellation behavior, especially in the presence of graph dependencies. Removed the CancelExecutionOnEmpty feature, this was causing problems and is superseded by node culling\n\n#### UV Editor\n\nUpgrade Notes:\n\n  * Added CVAR modeling.UVEditor.EnableLivePreviewArrangement - Enables or Disables the auto arrangement feature when selecting from the Content Browser. This exists to support legacy behavior where users might want the object's baked in transform to position objects in the UVEditor.\n\n  * Added CVAR modeling.UVEditor.LivePreviewArrangementMode - Selects the mode of the auto arrangement. 0 indicates a line formation. 1 indicates an adaptive circular arrangement.\n\nNew:\n\n  * Changed: Improved handling of multiple object loading in the UVEditor's 3D viewport. When opening multiple assets from the viewport, relative transforms are preserved. When opening multiple assets from the content browser, automatic arrangement is applied.\n\n#### World Building\n\nUpgrade Notes:\n\n  * In the unlikely event there is C++ code in your project that directly utilizes FWorldPartitionResolveData, please update the code to use FTopLevelAssetPath overloads for improved performance\n\nNew:\n\n  * Change World Parition Resolve Helper to use FTopLevelAssetPath to avoid unnecessary string manipulation\n\n### Localization\n\nUpgrade Notes:\n\n  * Don't mount localization data for explicitly loaded plugins by default\n\n    * Anything that was calling one of the MountExplicitlyLoadedPlugin functions to load a plugin, will now need to also call MountExplicitlyLoadedPluginLocalizationData if it wants to also mount the localization data.\n\nNew:\n\n  * Don't mount localization data for explicitly loaded plugins by default\n\n    * This allows them to separate their mounting and content loading into two phases, such as allowing a GFP to mount the plugin when 'mounting' and defer mounting the localization data until 'loading'.\n    * For GFPs specifically, the \"GameFeaturePlugin.DeferLocalizationDataLoad\" CVar to control whether GFP localization loading has the old (5.3) or new (5.4) behavior.\n\n### Online\n\n#### HTTP\n\nUpgrade Notes:\n\n  * This change requires existing holder of FHttpRetrySystem::FManager be converted to shared ptr.\n\nNew:\n\n  * Make sure it's safe to retry http request in http thread, by keep the shared ptr of retry manager in the request.\n\n### Rendering\n\nUpgrade Notes:\n\n  * Use r.RayTracing.RequireSM6 to restore previous behavior.\n\nNew:\n\n  * Disable ray tracing for shader model 5.\n\n#### Lighting\n\nUpgrade Notes:\n\n  * If the previous behavior for clipmap level selection is desired, set r.Shadow.Virtual.Clipmap.GreedyLevelSelection 1. Adjusting r.Shadow.Virtual.Clipmap.WPODisableDistance.LodBias can provide a tradeoff between performance and visual artifacts in scenes with lots of foliage animated with WPO. Note that WPO disable distances must be set on the primitives for it to have any effect.\n\n  * This change brings pages from scene captures and similar systems back into the main VSM physical page pool, so it may be necessary in some of these cases to increase the page pool size to avoid cache thrashing.\n\n  * Old projects that relied on the old behavior can either set the distance scale to a very high value to call no lights to be culled (as before). Alternatively 0 is now a meaningful value if the desire is to cull all lights (with cull distances) at a given scalability setting.\n\nNew:\n\n  * Implemented a new system to determine static/dynamic caching per instance for virtual shadow maps based on previous invalidations and WPO behavior. This improves various situations around instanced geometry (commonly foliage) getting transitioned to dynamic caching and never going back.\n\n  * Support disabling WPO animation in clipmaps past a certain point (based on the WPO disable distance). This works even when caching/static caching is disabled as it can still be a good performance tool. Related cvars:\n\n    * r.Shadow.Virtual.Clipmap.WPODisableDistance: When enabled, disables WPO animation in clipmap levels based on a primitive's WPO disable distance and r.Shadow.Virtual.Clipmap.WPODisableDistance.LodBias setting. Default 1 (enabled).\n    * r.Shadow.Virtual.Clipmap.WPODisableDistance.LodBias: The number of clipmap levels further than the distance that an instance would be animated to allow shadow animation. Typically 2-4 works well but may need to be adjusted for very low light angles with significant WPO movement. Default: 3.\n    * Add cvar to control greedy clipmap level selection (r.Shadow.Virtual.Clipmap.GreedyLevelSelection); disabled by default. This addresses some old issues around coarse pages getting greedily chosen at certain angles, and also makes the behavior around the new WPO distance disable more predictable.Invalidate instances when the evaluate WPO/WPO distance changes.\n  * Make virtual shadow map cache more persistent and robust against multiple renders in a single \"frame\" (scene captures, etc).\n\nBug Fix:\n\n  * Fix bug where setting r.LightMaxDrawDistanceScale to 0 (as is done on Low) would cause local light max draw distance to be ignored. Setting this to 0 now results in all local lights with non-zero cull distances being culled. Adjusted r.LightMaxDrawDistanceScale on default Low scalability to be the same as Medium (0.5). #contrib 10947\n\n#### Materials and Shaders\n\nUpgrade Notes:\n\n  * No changes necessary, but titles for which anti-ghosting is important, consider experimenting with mode 3, to either improve image quality compared to mode 1, or improve performance over mode 2.\n\nNew:\n\n  * A new TAA mode has been added to r.TemporalAA.Quality, mode 3. This mode has the antialiasing quality of mode 1 coupled with the anti-ghosting of mode 2. The performance is slightly slower than mode 1, but much faster than mode 2, providing a compromise for titles which need the anti-ghosting of mode 2 but with improved performance.\n\n    * Existing modes 0, 1, 2 are unchanged.\n\n#### Nanite\n\nUpgrade Notes:\n\n  * Nanite rendering of SplineMeshComponent is now functional and enabled by default. In Unreal Engine 5.3, spline meshes that used a mesh with Nanite enabled would render as non-Nanite using the fallback static mesh. in Unreal Engine 5.4, visual differences may occur with these components. To roll back to previous behavior, configure r.SplineMesh.RenderNanite=0.\n\nNew:\n\n  * Nanite Spline Meshes\n\n  * Added an optimization to bake spline calculations into a look up texture for speed of access.\n\n  * Various Nanite spline mesh cluster culling and rasterization optimizations.\n\n  * Nanite spline meshes are now production-ready and enabled by default.\n\n#### Niagara\n\nUpgrade Notes:\n\n  * Note that this will change the behavior of existing graphs. Moving back to the original implementation would involve a piecewise compare of the elements.\n\nNew:\n\n  * Fix for vector version of the != operator in Niagara graphs. Previously was returning true only if all components of the vector differed rather than the conventional result of true if any of the vector components differed.\n\n### Simulation\n\n#### Physics\n\nUpgrade Notes:\n\n  * Existing skeletal mesh clothing assets will be upgraded to retain existing behavior by multiplying Fictitious Angular Scale by Subdivision Count, but it will still respect the clamp of [0,2], so it's possible some assets will still change behavior. Chaos Cloth Assets will not be upgraded.\n\n  * Early in UE 5, a bug was introduced that detached skeletal mesh components automatically from their actor when their root body was set to simulate. This change fixes that, so skeletal mesh components will remain attached to their owning actor when parts are set to simulate. It may now be necessary for projects to explicitly detach components rather than just setting them to simulate (for example, when dropping objects that have been picked up). Note that if components are simulating but not detached, then they may \"inherit\" the movement of the owning actor.\n\nBug Fix:\n\n  * Chaos Cloth: Fixed Fictitious Angular forces to use the correct scaling with multiple subframes (Subdivision Count).\n\n  * Fixes problems associated with the skeletal mesh component becoming detached from its actor when bodies are set to simulate. This detachment had been introduced early in UE 5, so care should be taken that the fix doesn't cause a regression in projects that were relying on this.\n\nAsk questions and help your peers Developer Forums\n\nWrite your own tutorials or read those from others Learning Library\n\nOn this page\n\n  * What's New?\n  * Character and Animation\n  * Extensibility for Animation Authoring Tools\n  * Layered Control Rigs\n  * Animation Authoring\n  * New Gizmos\n  * Constraints 2.0\n  * Anim Details 2.0 / Channel Box (mockup)\n  * Post Retarget Phase\n  * Sequencer Readability\n  * Expansion of Animating Materials in Sequencer\n  * Binding Lifetime Track\n  * Modular Control Rig (Experimental)\n  * Tools to Rig with Modules\n  * Tools to Author Modules:\n  * Deformer Graph Libraries (Beta)\n  * Skeletal Editor (Beta)\n  * Control Rig Direct Manipulation\n  * Automatic Animation Retargeting for Bipedal Characters\n  * Choosers and Proxy Tables (Beta)\n  * Motion Matching\n  * Rendering\n  * Neural Network Engine\n  * Nanite - Tessellation (Experimental)\n  * Nanite - Optimized Shading\n  * Nanite - Spline Mesh\n  * Orthographic Camera Rendering (Beta)\n  * Temporal Super Resolution\n  * Heterogeneous Volumes - Deferred Rendering (Experimental)\n  * Optimize Shader Cook Time\n  * RHI - Render Parallelization\n  * RHI - Bindless Rendering (Experimental)\n  * Vulkan - Ray Tracing (Experimental)\n  * Programmatic PSO Precaching\n  * Hardware Ray Tracing\n  * Large World Coordinates on GPU\n  * Developer Iteration\n  * Unreal Zen Storage as Local DDC\n  * Unreal Cloud DDC\n  * Multi-Process Cook\n  * Unreal Horde - Continuous Integration (Beta)\n  * Unreal Build Accelerator (Beta)\n  * Unreal Zen Storage as Shared DDC (Experimental)\n  * Motion Graphics\n  * Motion Graphics Mode\n  * Viewport: Rulers and Guides\n  * Motion Design Viewport Features\n  * Cloners and Effectors\n  * Cloners\n  * Effectors\n  * Effector Forces\n  * Material Designer\n  * Material Designer FX Layers\n  * Actor Alignment Tools\n  * 2D and 3D Primitives\n  * Geometry Modifiers\n  * SVG Importer\n  * Text 3D Improvements\n  * Features\n  * Outliner Enhancements\n  * Renaming Tool\n  * Animation Modifier System\n  * Transition Logic\n  * Broadcast Rundown\n  * Stagger Animations\n  * Masking Modifiers\n  * Grid Arrange Modifier\n  * Virtual Production\n  * Multi-Process Inner Frustum\n  * Depth of Field Estimation\n  * Virtual Scouting Toolset (Experimental)\n  * XR Creative Framework\n  * Live Link VCam for Android\n  * Virtual Camera for Mac\n  * LiveLink Hub\n  * nDisplay Cine Camera Frustum Fit\n  * Simulation and VFX\n  * Niagara Asset Browser\n  * Niagara Data Channels (Experimental)\n  * Niagara Lightweight Emitters (Experimental)\n  * Niagara - CPU VectorVM (Experimental)\n  * Chaos Panel/Pattern Cloth Editor (Beta)\n  * Chaos Visual Debugger (Beta)\n  * Physics Based Character Movement (Experimental)\n  * Niagara Fluids (Beta)\n  * Chaos Destruction\n  * ML Clothing (Beta)\n  * Networked Physics (Beta)\n  * Worldbuilding\n  * World Partition Runtime Hash with 3D Grid\n  * HLOD in Editor\n  * Level Instances Soft Object References\n  * Server Streaming\n  * Sub World Partitions (Experimental)\n  * Runtime Data Layer Logic Operator\n  * Landscape Nanite Automatic Async Build\n  * Water Scalability\n  * Procedural Content Generation (PCG)\n  * Runtime Hierarchical Generation\n  * Node Graph UX\n  * Nodes and Operators\n  * Attribute Set Tables\n  * Feedback Loops\n  * Recursive Subgraphs\n  * Biome Core Plugin (Experimental)\n  * Native Level To PCG Data Asset\n  * Dynamic Attribute Tracking\n  * Branch Execution Culling\n  * Dynamic Subgraphs\n  * Proxy Node\n  * Transient Preview Mode\n  * PCG Offline Builder\n  * Multi-Data Attribute Ops\n  * Water Spline Interop\n  * Platform\n  * Mobile Renderer\n  * Android Platform\n  * Lumen on Mobile (Experimental)\n  * Apple Vision Pro Support (Experimental)\n  * Pixel Streaming on Mac\n  * Audio\n  * MetaSounds\n  * Sound Attenuation In-Editor Live-Update\n  * Dynamic Submixes\n  * Audio Insight (Experimental)\n  * Harmonix Plugin (Experimental)\n  * RAD Audio Codec (Experimental)\n  * Modeling\n  * UV Tools Improvements (Beta)\n  * Modeling Tools (Beta)\n  * Modeling Workflows (Beta)\n  * Geometry Scripting (Beta)\n  * Texturing Tools (Experimental)\n  * Content Pipeline\n  * Interchange Framework UX\n  * FBX Import Customization (Beta)\n  * USD Specification Coverage\n  * USD Export Extensions\n  * glTF Export/Import Roundtrip\n  * MaterialX - Substrate & OpenPBR (Experimental)\n  * Framework\n  * Character Mover 2.0 (Experimental)\n  * Gameplay Interactions Plugin (Experimental)\n  * External State Tree Sub-Tree (Experimental)\n  * Large World Coordinates Networking Support (Beta)\n  * GAS Debugging Improvements\n  * Data-Only Blueprint Merging (Beta)\n  * Windows GameInput API (Beta)\n  * Iris Replication (Beta)\n  * Navmesh Generation for Large Worlds (Experimental)\n  * Editor\n  * Multi User Actor Replication\n  * Multi User Remote Function Call\n  * Editor Accessibility: Application Scale (Experimental)\n  * UI Systems\n  * Slate PostBuffer (Experimental)\n  * UMG Viewmodel (Beta)\n  * Media\n  * Medio IO Realtime MIP Generation\n  * Media IO EXR Latlong Pole Mips Offset\n  * Media IO Minimize TSR/TAA Artifacts\n  * Production Rendering Pipeline\n  * Render Layers\n  * Movie Render Graph\n  * Protocols\n  * DMX Control Console\n  * DMX Pixel Mapping\n  * DMX Data Conflict Monitoring\n  * Platform SDK Upgrades\n  * Release Notes\n  * Animation\n  * Gameplay\n  * Movie Render Queue\n  * Rigging\n  * Runtime\n  * Sequencer\n  * Synthesis\n  * Editor\n  * Content Pipeline\n  * Datasmith\n  * Framework\n  * Landscape\n  * Scripting\n  * UI\n  * UX\n  * Foundation\n  * Build\n  * Compile Time Improvements\n  * Core\n  * Dev Tools\n  * Horde\n  * Insights\n  * Framework\n  * AI\n  * AI Behavior Trees\n  * AI Debugging\n  * AI Navigation\n  * AI Smart Objects\n  * AI State Tree\n  * API\n  * Audio\n  * Blueprint\n  * Blueprint Compiler\n  * Blueprint Editor\n  * Blueprint Runtime\n  * Gameplay\n  * Mass\n  * Networking\n  * Content Samples\n  * Level Design and Art Tools\n  * Geometry Core\n  * Geometry Script\n  * Modeling Tools\n  * Procedural\n  * UV Editor\n  * World Building\n  * Online\n  * Hotfix System\n  * HTTP\n  * Online Subsystem\n  * Pixel Streaming\n  * Voice\n  * Websockets\n  * XboxLive\n  * XMPP\n  * Platform\n  * Desktop\n  * Linux\n  * Mac\n  * Online\n  * XR\n  * Platform Mobile\n  * Android\n  * iOS, tvOS, and iPadOS\n  * RAD\n  * Rendering\n  * Architecture\n  * Lighting\n  * Lumen\n  * Materials and Shaders\n  * Nanite\n  * Niagara\n  * Path Tracer\n  * Postprocessing\n  * RHI\n  * Substrate\n  * Simulation\n  * Physics\n  * UI\n  * Slate\n  * UMG\n  * Virtual Production\n  * Media IO\n  * nDisplay\n  * Rendering\n  * Tools\n  * Upgrade Notes\n  * Animation\n  * Movie Render Queue\n  * Rigging\n  * Sequencer\n  * Synthesis\n  * Editor\n  * Foundation\n  * Build\n  * Core\n  * Framework\n  * Audio\n  * Blueprint\n  * Blueprint Editor\n  * Gameplay\n  * Networking\n  * Learning Resources\n  * Sample Content\n  * Level Design and Art Tools\n  * Geometry Core\n  * Procedural\n  * UV Editor\n  * World Building\n  * Localization\n  * Online\n  * HTTP\n  * Rendering\n  * Lighting\n  * Materials and Shaders\n  * Nanite\n  * Niagara\n  * Simulation\n  * Physics\n\nBack to top\n\nGames\n\n  * Fortnite\n  * Fall Guys\n  * Rocket League\n  * Unreal Tournament\n  * Infinity Blade\n  * Shadow Complex\n  * Robo Recall\n\nMarketplaces\n\n  * Epic Games Store\n  * Fab\n  * ArtStation\n  * Store Refund Policy\n  * Store EULA\n\nTools\n\n  * Unreal Engine\n  * UEFN\n  * MetaHuman\n  * Twinmotion\n  * Megascans\n  * RealityScan\n  * Rad Game Tools\n\nOnline Services\n\n  * Epic Online Services\n  * Kids Web Services\n  * Services Agreement\n  * Acceptable Use Policy\n  * Trust Statement\n  * Subprocessor List\n\nResources\n\n  * Dev Community\n  * Megagrants\n  * Support-A-Creator\n  * Creator Agreement\n  * Distribute on Epic Games\n  * Unreal Engine Branding Guidelines\n  * Fan Art Policy\n  * Community Rules\n  * EU Digital Services Act Inquiries\n\nCompany\n\n  * Fortnite Creative\n  * About\n  * Newsroom\n  * Careers\n  * Students\n  * UX Research\n\n\u00a9 2004-2024, Epic Games, Inc. All rights reserved. Unreal and its logo are\nEpic\u2019s trademarks or registered trademarks in the US and elsewhere.\n\n  * Terms of service\n  * Privacy policy\n  * Community Guidelines\n\n## Privacy Preference Center\n\n### Your Privacy\n\n### Your Privacy\n\nWhen you visit any website, it may store or retrieve information on your\nbrowser, mostly in the form of cookies. This information might be about you,\nyour preferences or your device and is mostly used to make the site work as\nyou expect it to. The information does not usually directly identify you, but\nit can give you a more personalized web experience. Because we respect your\nright to privacy, you can choose not to allow some types of cookies. Click on\nthe different category headings to find out more and change our default\nsettings. However, blocking some types of cookies may impact your experience\nof the site and the services we are able to offer. More information\n\n  * ### Strictly Necessary Cookies\n\n### Strictly Necessary Cookies\n\nAlways Active\n\nThese cookies are necessary for the website to function and cannot be switched\noff in our systems. They are usually only set in response to actions made by\nyou which amount to a request for services, such as setting your privacy\npreferences, logging in or filling in forms. You can set your browser to block\nor alert you about these cookies, but some parts of the site will not then\nwork. These cookies do not store any personally identifiable information.\n\nCookies Details\n\n  * ### Performance Cookies\n\n### Performance Cookies\n\nThese cookies allow us to count visits and traffic sources so we can measure\nand improve the performance of our site. They help us to know which pages are\nthe most and least popular and see how visitors move around the site. If you\ndo not allow these cookies we will not know when you have visited our site,\nand will not be able to monitor its performance.\n\nCookies Details\n\n  * ### Functional Cookies\n\n### Functional Cookies\n\nThese cookies enable the website to provide enhanced functionality and\npersonalization. They may be set by us or by third party providers whose\nservices we have added to our pages. If you do not allow these cookies then\nsome or all of these services may not function properly.\n\nCookies Details\n\nConsent Leg.Interest\n\nSelect All\n\n  * ### 33Across\n\n#### 33Across\n\nView Third Party Cookies\n\n    * Name\n\ncookie name\n\n  * ### 33Across\n\n3 Purposes\n\nView Privacy Notice\n\n### 33Across\n\n3 Purposes\n\nView Privacy Notice\n\nConsent Purposes\n\nLocation Based Ads\n\nConsent Allowed\n\nLegitimate Interest Purposes\n\nPersonalize\n\nRequire Opt-Out\n\nSpecial Purposes\n\nLocation Based Ads\n\nFeatures\n\nLocation Based Ads\n\nSpecial Features\n\nLocation Based Ads\n\nClear Filters\n\nBy clicking \u201cAccept All Cookies\u201d, you agree to the storing of cookies on your\ndevice to enhance site navigation, analyze site usage, and personalize\ncontent.Privacy Policy\n\n", "frontpage": false}
