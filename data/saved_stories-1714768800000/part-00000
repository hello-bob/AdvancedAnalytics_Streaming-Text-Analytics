{"aid": "40246794", "title": "Do you ever outgrow GitHub?", "url": "https://graphite.dev/blog/do-you-ever-outgrow-github", "domain": "graphite.dev", "votes": 1, "user": "fosterfriends", "posted_at": "2024-05-03 12:15:09", "comments": 2, "source_title": "Do you ever outgrow GitHub?", "source_text": "Do you ever outgrow GitHub?\n\nHomeFeaturesPricingDocsBlogLog inSign up\n\n\u00a9 2024 Graphite, All rights reserved.\n\n#Learning\n\n# Do you ever outgrow GitHub?\n\nMay 2, 2024\n\nWritten by\n\nNicholas Yan\n\nIn this post\n\nDashboards\n\nDiff Pages\n\nAttention sets and turns\n\nStay unblocked. Ship faster.\n\nExperience the new developer workflow - create, review, and merge code\ncontinuously. Get started with one command.\n\nGet started\n\nAt a certain point, all companies seem to outgrow their technologies, wrap\nthem, and then replace them with an homegrown variant. When I was at Meta, PHP\nslowly became Hack. On the Instagram side, what was once raw Django slowly got\nobscured by layers of in-house wrappers.\n\nYet despite its age and ubiquity, GitHub has so far remained un-wrapped.\n\nSure some companies choose to self-host their GitHub instances, but by and\nlarge, the GitHub that large companies use (say the Airbnbs and Stripes of the\nworld) looks recognizable to the college student on the free tier of\ngithub.com. It\u2019s only once we reach the largest company sizes \u2014 the\nGoogle/Meta/Amazon level \u2014 that we start to see meaningful differentiation and\ninvestment.\n\nEven then, that isn\u2019t really a fair comparison. In 2005 at Google, Guido van\nRossum \u2014 that same Guido that created Python \u2014 started working on the\ncompany\u2019s first web-based code review tool called Mondrian. Evan Priestly at\nFacebook\u2019s started hacking on its first web-based code review tool,\nPhabricator, in 2007. GitHub, for its part, was only founded in 2008. The fact\nthat these companies don\u2019t use GitHub today isn\u2019t because they graduated out\nof it; they were already on custom-built alternatives.\n\nBut it\u2019s an interesting counterfactual: with all of the not-invented-here that\ntends to exist at the largest tech companies, had GitHub existed, would they\nhave outgrown it and replaced it?\n\n# Critique and Gerrit\n\nOne naive way of reaching a conclusion here is to take a look at their modern\ntooling and use that as a spec. Would these companies have been able to re-\ncreate this atop GitHub?\n\nGoogle is the company that has shared the most about its setup over the years\nand the one we\u2019ll focus on here. We even have screenshots of some of its\ntooling, albeit a few years old. (I\u2019m told that the tools in these screenshots\nhave gone through a large facelift since.)\n\nGoogle has two internal code review tools: Critique, which is used by the\nmajority of engineers, and Gerrit, which is open-sourced and continues to be\nused by public-facing projects. You can actually play with Gerrit yourselves\nhere in the Chromium and Android open-source repos.\n\n\ud83d\udca1 That Mondrian tool we mentioned Guido created earlier? It was later open-\nsourced by Guido as \u201cRietveld,\u201d named after an architect he liked named\n\u201cGerrit Rietveld.\u201d Gerrit would be forked from Rietveld to later add access\ncontrol.\n\n(The Wikipedia page takes more creative license here than the official Gerrit\nhistory and states: \u201cGerrit is a fork of Rietveld started because ACL patches\nwould not get integrated into Rietveld.\u201d)\n\nLet\u2019s take a look at some of their features.\n\n## Dashboards\n\nWhen engineers sign in in the morning, or take a break to review PRs \u2014\ninternally known as change lists or CLs \u2014 both Critique and Gerrit provide\ndashboards where its easy to see all of the in-flight changes at a glance\n(think a more sophisticated and information-dense version of the GitHub\nrepository pull request view).\n\nGerrit\u2019s dashboard (below) is backed by a singular search and pulls out\ninformation including the size of the change and a more detailed look at the\nstatus of the CL (the three columns to the right) to the top-level.\n\nIn Critique \u2014 which came later \u2014 the dashboard introduced multiple sections\nallowing authors to highlight different groups of CLs (most commonly those\nthat you\u2019ve authored and haven\u2019t merged, and those that need your review).\n\n\ud83d\udca1 One weird quirk of Critique: the \u201cSwitch user\u201d button on the top toolbar. It\nallows you to view the sections of another user, e.g. if you want to make sure\nthat your CL is actually on their radar.\n\n## Diff Pages\n\nClicking into a CL itself, the view is quite jarring. All of the elements we\nhave on GitHub are present \u2014 just in different locations.\n\nA few items get more prominent treatment than GitHub gives them; for example,\nnext to the list of files in Gerrit, code coverage (and change in code\ncoverage) is explicitly called out.\n\nAlso, the commit message for the CL appears as a first-class, reviewable\nentity, located right next to the actual changed files in the diff section.\n\nThe greatest departure from GitHub that Critique and Gerrit make is how they\ndecide (at least internally at Google) when a CL is ready to be merged.\n\n\ud83d\udca1 In GitHub parlance, we say a PR is ready to be \u201cmerged.\u201d Inside Google\nthough, you\u2019d say that the CL is ready to be \u201csubmitted.\u201d That\u2019s why you\u2019ll\nnotice in the screenshots above there are \u201cSubmit Requirements.\u201d\n\nAll changes at Google require three levels of mandatory approvals:\n\n  1. LGTM (\u201dlooks good to me\u201d)\n\n  2. Code owners\n\n  3. Readability\n\nThe first two of these \u2014 LGTM and code owners \u2014 will be familiar to an\nengineer using GitHub. Anyone can give an LGTM which signifies that the core\nbusiness logic of the CL checks out (equivalent to a regular approving GitHub\nPR review). Code owners maps cleanly to the GitHub equivalent concept: when\nyou make a change in a given file, you need to approval of whoever is listed\nas the owner for the file or containing directory. (If you are the author and\nare an owner yourself, you automatically pass.)\n\n\ud83d\udca1 In fact GitHub lifted the concept of code owners directly from Google; when\nGitHub added code owners support in 2017, it included a small footnote at the\nbottom: \u201cThe code owners feature was inspired by Chromium\u2019s use of OWNERS\nfiles.\u201d)\n\nReadability, however, is new and unique to Google.\n\nFrom Software Engineering at Google:\n\n> In Google\u2019s early days, Craig Silverstein (employee ID #3) would sit down in\n> person with every new hire and do a line-by-line \u201creadability review\u201d of\n> their first major code commit. It was a nitpicky review that covered\n> everything from ways the code could be improved to whitespace conventions.\n> This gave Google\u2019s codebase a uniform appearance but, more important, it\n> taught best practices, highlighted what shared infrastructure was available,\n> and showed new hires what it\u2019s like to write code at Google. The readability\n> program remains in place today with the intention of continuing to uphold\n> this standard across the tens of thousands of developers that merge tens of\n> thousands of changes in each day.\n\nThe idea here is that it\u2019s not just enough to have someone double-check and\nunderstand your functionality. With tens of thousands of developers committing\ncode, you want to make sure that everyone is committing code that matches the\nlengthy language standards and is using the recommended patterns and libraries\n\u2014 so you add an additional reviewer for that.\n\n(Like code owners, if you as the author are yourself a \u201creadability expert\u201d in\nthe language you wrote the CL in, you\u2019re automatically good to go here.)\n\n## Attention sets and turns\n\nWith multiple possible sets of reviewers per CL \u2014 working in another team\u2019s\ncodebase you may find yourself needing an LGTM from your teammate (who best\nknows the change you\u2019re trying to make for your own product) and a code owner\napproval and readability review from others \u2014 it can become easy to lose track\nof whose action is needed to unblock a particular change.\n\nGerrit and Critique introduce a first-class treatment for this.\n\nIn the earlier Gerrit screenshot, you\u2019ll notice that a gray arrow sometimes\nappears next to the name of an author or reviewer.\n\nAnd in Critique, certain names can appear bolded.\n\nThese markers signify that it\u2019s somebody\u2019s \u201cturn\u201d to action on the given CL.\nHover over the indicator and Gerrit or Critique will also tell you why it\nthinks it\u2019s your turn to take action (e.g. your review was just requested or\nan author responded to your comment). At any given moment, the set of all the\nindividuals whose turn it is create the overall \u201cattention set.\u201d\n\nOn any given CL, a reviewer can also mark themselves as \u201cnot my turn,\u201d\nremoving themselves from the attention set and clarifying to the author \u2014 and\nthe others remaining in the attention set \u2014 who really needs to take action.\nThis might be because their teammate is a better reviewer or because they need\nanother reviewer to take action first; culturally, Google CLs are typically\nreviewed by the LGTM reviewer first, then the code owner and readability\nexpert second.\n\n# Not invented here\n\nWhere does all of this put our GitHub counterfactual?\n\nWould a version of Google already on GitHub \u2014 but with the desire for\ncustomizable dashboards, custom approval logic, and turns/attention sets \u2014\nhave eventually given up on GitHub and sunk in the effort to create their own\nalternative from scratch?\n\nFrom our earlier feature perspective, despite how unique Critique and Gerrit\nfeatures seem at first blush, I come out bullish on the side of GitHub.\nGitHub\u2019s platform and API offering is surprisingly powerful; bots posting\ncomments or managing PR state (e.g. assignees) could create an approximate\nimitation here. The UI would be far uglier and the overall experience would\nfeel far more homegrown and hacky, but I could easily see a company concluding\nthat the results of creating a tool from scratch would be too much effort in\nlight of this much cheaper possibility.\n\nThis is where I predict most of the largest name-brand companies on GitHub\ntoday \u2014 Airbnb, Stripe \u2014 are.\n\nAnother way of looking at this situation though is through the lens of\nintegration with the rest of the companies tools. At Google and Meta scale, a\nstrong \u201cnot invented here\u201d syndrome pervades and all tools are built in-house,\njustified by complete control over the tool (if we want a feature, we can\neasily build it) and seamless integration with other existing tooling (we can\nguarantee that the code review tool can always speak directly to the task\ntool). An API is nice but you\u2019re still at the whim of an external company;\nit\u2019d be far better to be in control of your own destiny.\n\nDuring my time at Meta, I saw countless spirited debates about this attitude.\nA new hire would join the company and ask why we needed to have our own custom\neverything. What did we need to rebuild our own version of a basic task tool\nfrom scratch? Hundreds of threaded comments later the debate would go nowhere\nand the consensus \u2014 that we need everything custom-built or we would lose our\nedge \u2014 wouldn\u2019t budge.\n\nFrom this perspective, even with a GitHub with complete feature parity, it\nseems doubtful that a Google or Meta would want to turn over control.\n\nThis is the most interesting part of the counterfactual to me: when does a\ncompany grow to the size where \u201cnot invented here\u201d fully take over? The\nhistory would seem to indicate that it\u2019s somewhere between a Stripe and a\nMeta, somewhere between a few thousand engineers and tens of thousands.\n\nBut another thing bugs me: these companies have grown up in different eras.\nAirbnb and Stripe have come to age in an era where the range of SaaS offerings\nis deeper than ever before and they\u2019ve leveraged this. Their infrastructure is\nwith cloud providers; they\u2019re more comfortable using outside tools (like\nGitHub). Is the big company \u201cnot invented here\u201d an inevitable product of plain\ncompany size? Or is it a byproduct of the era and ecosystem in which a company\nwas founded?\n\nIf you grow up using outside tools, do you one day reach the scale where you\nnecessarily have to stop? Or is it that you don\u2019t use outside tools \u2014 not\nbecause of scale and leverage and impact \u2014 but because you never have?\n\nAs the earliest startups on GitHub grow larger and larger it\u2019ll be fascinating\nto see what they choose.\n\nRelated posts\n\n#Learning\n\nThe ancient origins of code review\n\nMarch 2, 2023\n\nGreg Foster\n\n#Learning\n\nThe practical and philosophical challenges of AI code review\n\nJanuary 4, 2024\n\nGreg Foster\n\n#Learning#Stacking\n\nWhy Facebook doesn\u2019t use Git\n\nMarch 7, 2024\n\nGreg Foster\n\n## Give your PR workflow an upgrade today\n\nStack easier | Ship smaller | Review quicker\n\nOr install our CLI.\n\n\u00a9 2024\n\nProduct\n\nFeaturesPricingDocsCustomers\n\nCompany\n\nBlogCareersContact us\n\nResources\n\nCommunityPrivacy & securityTerms of serviceStacking workflow\n\nDevelopers\n\nStatusGitHub\n\n", "frontpage": false}
