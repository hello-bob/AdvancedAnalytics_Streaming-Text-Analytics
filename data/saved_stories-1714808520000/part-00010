{"aid": "40252437", "title": "What Is the Raft Consensus Algorithm?", "url": "https://www.yugabyte.com/tech/raft-consensus-algorithm/", "domain": "yugabyte.com", "votes": 1, "user": "fzliu", "posted_at": "2024-05-03 21:10:51", "comments": 0, "source_title": "Raft Protocol: What is the Raft Consensus Algorithm?", "source_text": "Raft Protocol: What is the Raft Consensus Algorithm?\n\nSkip to content\n\n  * Sign In\n  * Get Started\n\n    * Try YugabyteDB Managed FreeCloud database managed by us\n    * Download YugabyteDBFree open source database\n    * Book a DemoPersonalized demo\n\n### Related Terms\n\n  * What is Database Sharding?\n  * Database Geo-Distribution\n  * Raft Consensus Algorithm\n\nKey Concepts\n\n# What is the Raft Consensus Algorithm?\n\n    \n    \n    Achieve high read performance with single-key linearizability and leader leases\n\nRaft is a consensus algorithm. It allows the members of a distributed system\nto agree on a sequence of values in the presence of failures. More\nspecifically, it has become the protocol of choice for building resilient,\nstrongly-consistent distributed systems.\n\nA distributed SQL database uses the Raft consensus algorithm for both leader\nelection and data replication. Instead of having a single Raft group for the\nentire dataset in the cluster, a distributed SQL database applies Raft\nreplication at an individual shard level where each shard has a Raft group of\nits own.\n\nThe below illustration shows the Raft consensus algorithm in action.\n\n## Why the Raft Consensus Algorithm?\n\nA distributed SQL database cannot compromise on correctness. There are\ndifferent levels of this intuitive correctness, represented by different\nconsistency models.\n\nLinearizability is one of the strongest single-key consistency models. It\nimplies that every operation appears to take place atomically and in some\ntotal linear order. This means it\u2019s consistent with the real-time ordering of\nthose operations. In other words, the following should be true of operations\non a single key:\n\n  * Operations can execute concurrently, but the state of the database at any point in time must appear to be the result of some ordered, sequential execution of operations.\n  * If operation A completes before operation B begins, then B should logically take effect after A.\n\nThe Raft consensus algorithm solves the problem described above. Raft is easy\nto understand and offers some additional features such as the ability to\ndynamically change membership.\n\n## Understanding Consensus\n\nConsensus involves multiple servers agreeing on values. It is a fundamental\nproblem in fault-tolerant, distributed systems. But once the servers agree on\na value, that agreement is final.\n\nTypical consensus algorithms accept write requests when any majority (i.e.,\nquorum) of their servers is available. Examples of applications of consensus\ninclude:\n\n  * Whether to commit a transaction to a database\n  * Agreeing on the identity of a leader\n  * State machine replication\n  * Atomic broadcasts\n\nConsensus protocols can be broadly classified into two categories: leader-\nbased and leaderless. The Raft consensus algorithm is a commonly used leader-\nbased consensus protocol where a \u201cleader\u201d handles the task of data updates and\nreplication. Strongly-consistent distributed databases have standardized onto\nthis protocol.\n\nLeaderless consensus protocols are harder to implement but have higher\navailability than leader-based protocols. Application of leaderless protocols\ncan be found in blockchain distributed ledgers.\n\n## Benefits of Raft-Based Replication\n\nThe Raft consensus algorithm is more understandable by means of its separation\nof logic. The separation of logic stems from Raft making leader election a\nseparate and mandatory step before the leader can get the data replicated.\nSeparating leader election allows dynamic membership changes with ease \u2014 re-\nrunning leader election handles server additions and removals.\n\nAdditionally, in the absence of any unplanned failures or planned membership\nchanges, the leader election step can be skipped. But note that the leader\nelection step is automatic whenever such changes happen, even if no new writes\nare coming into the system.\n\nFinally, the Raft consensus algorithm imposes the restriction that only the\nservers with the most up-to-date data can become leaders. These optimizations\nradically simplify edge use cases.\n\nWith approximately 100 open source implementations (and growing), Raft is the\nde-facto standard today for achieving consistency in modern distributed\nsystems. Popular implementations include those from etcd and consul.\n\n## Ensure Consistent Database Replication and Performance\n\nConsensus-based replication has become key to building resilient, strongly-\nconsistent distributed systems. The Raft consensus algorithm has emerged as\nthe leading option given its focus on understandability without sacrificing\ncorrectness and performance.\n\nFinally, YugabyteDB uses the Raft consensus algorithm for its leader election\nand data replication. Learn more about this powerful, open source database\ntoday through our free, self-paced courses: Introduction to Distributed SQL\nand Introduction to YugabyteDB. And join the YugabyteDB community to answer\nany and all of your distributed SQL questions.\n\nRequest Demo Join the YugabyteDB Community\n\n  *     * Product\n\n      * YugabyteDB\n      * YugabyteDB Voyager\n      * Deployment Options\n      * Pricing\n    * Company\n\n      * About Yugabyte\n      * Press\n      * Careers\n      * Trust Center\n      * Contact\n      * Legal\n  *     * Solutions\n\n      * BY USE CASE\n\n        * Database Modernization\n        * Cloud Native Apps\n        * Edge and Streaming Apps\n      * BY INDUSTRY\n\n        * Financial Services\n        * Retail and eCommerce\n        * Telecommunications\n      * BY CLOUD\n\n        * AWS\n        * Google Cloud\n        * Microsoft Azure\n  *     * Community\n\n      * Get Involved\n      * Events\n      * YugabyteDB Friday Tech Talks\n      * Distributed SQL Summit\n      * Slack\n      * GitHub\n    * Resources\n\n      * Developer Hub\n      * Docs\n      * Yugabyte University\n      * Key Concepts\n      * Support\n      * Forum\n      * Success Stories\n      * Blog\n      * Content Library\n      * FAQ\n\n\u00a9 2024 YUGABYTE, INC. All rights reserved.\n\nTerms of Service Privacy Policy Cookie Policy Your California Privacy Choices\n\n", "frontpage": false}
