{"aid": "40283474", "title": "An Operating System for the Web", "url": "https://jasongullickson.com/an-operating-system-for-the-web.html", "domain": "jasongullickson.com", "votes": 1, "user": "MaysonL", "posted_at": "2024-05-07 08:27:56", "comments": 0, "source_title": "An Operating System for the Web", "source_text": "An Operating System for the Web\n\n# Sun, 5 May 2024 23:46:13 -0500An Operating System for the Web\n\n## mr's Preposter.us Blog\n\nWhen I started working on JSFS the objective was simple: to provide a\npersistent file store for web application. I was writing web apps in pure\nclient-side code (HTML+CSS+Javascript) and I could do pretty much everything I\nneeded to do except store data permanently.\n\nThis was before things like local storage, etc. were available in browsers.\n\nSo I set out to build the simplest thing that could provide this functionality\nfor the type of applications I was writing. The interface, HTTP with REST\nconventions was chosen primarily out of necessity as it was easy to get data\nout and back into the browser this way.\n\nI didn\u2019t realize it at the time, but I was beginning to write a filesystem, an\nessential part of creating an operating system. You could forgive my\nobliviousness to this if not for the fact that had spent decades studying and\nmade several attempts at building my own operating systems in the years\nleading up to this point.\n\nWithin a few days of starting the project it worked well enough to fulfill its\nobjective and I started to realize that it had the potential to do more, to\ntake the next step toward becoming an operating system by providing an\nstandardized abstraction of the underlying hardware. This could be\naccomplished by combining it with another earlier project of mine RESTduino.\nLater I considered adding server-side code execution to JSFS, which would fill\nin the last piece of the operating system puzzle: the scheduling and execution\nof programs.\n\nBefore I could get too far on these other things I found an application for\nthe JSFS filesystem that allowed me to work on that more-or-less full-time.\nThis allowed me to turn JSFS into a high-performance filesystem with a range\nof powerful features, but it also meant that the other components were pushed-\naside. In the following years I never got a chance to spend much time on them,\nand web application development turned-away from the sort of HTML & JavaScript\napproach I used and instead revolved around frameworks and such.\n\nRecently I\u2019ve been revisiting these ideas and as I find scraps of time to work\non them I realized that by combining these three components the result could\nbe an operating system for the web. We think of operating systems as large,\ncomplex systems that include everything from the kernel to the desktop\nenvironment (or even the web browser), but what I have in mind is a more\nfundamental operating system that provides an interface to the hardware, a\nfilesystem and the ability to schedule and run programs.\n\nObviously, other operating systems can run web applications, but this\noperating system runs them natively. The fundamental system programming\ninterface is HTTP itself, the opcodes are GET, POST, etc. The standard I/O is\nan HTTP request and response, and the systems programming language is\nJavaScript.\n\nBy extending JSFS to not only store files but execute them, we create a\nsimple, portable programming environment that will feel familiar to any web\ndeveloper. By exposing hardware resources at standardized JSFS namespaces (a\nURL-compatible internal representation of the resources a JSFS instance\nmanages) any imaginable device could be utilized by web-based applications.\n\nIt\u2019s hard for me to capture in a single post (and a single writing session)\nwhy this is so powerful and in turn why I\u2019m so excited about it. It is both an\nold and new way to write applications for the web, and I think it\u2019s unique in\nthat it may be the first operating system to treat web applications as the\nprimary, native software for the system. Coupled with other JSFS features like\nthe universal URL-compatible namespace (which could eliminate the need for\nDNS), deduplication, federation and distributed processing and operating\nsystem like this could solve a lot of long-standing challenges in web\napplication development in addition to making web development fun and\naccessible to people who are not served well by contemporary web development.\n\nI will try to follow this post with more detailed and specific examples of how\nthis new OS, which I refer to as JS/OS, works and how it can be used to do all\nthe things I mention above. Hopefully over time it will become more clear as\nit becomes more real.\n\n", "frontpage": false}
