{"aid": "40271525", "title": "Show HN: PromptML, a new markup language for writing structured AI prompts", "url": "https://github.com/narenaryan/promptml", "domain": "github.com/narenaryan", "votes": 1, "user": "nyell", "posted_at": "2024-05-06 05:52:21", "comments": 0, "source_title": "GitHub - narenaryan/promptml: Prompt markup language (A.K.A PromptML) is specially built for AI systems - from Vidura AI", "source_text": "GitHub - narenaryan/promptml: Prompt markup language (A.K.A PromptML) is\nspecially built for AI systems - from Vidura AI\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nnarenaryan / promptml Public\n\n  * Notifications\n  * Fork 0\n  * Star 8\n\nPrompt markup language (A.K.A PromptML) is specially built for AI systems -\nfrom Vidura AI\n\nvidura.ai\n\n### License\n\nMIT license\n\n8 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# narenaryan/promptml\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n2 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nnarenaryanMerge pull request #9 from narenaryan/fix/bump-versionMay 6,\n20246b8f3f0 \u00b7 May 6, 2024May 6, 2024\n\n## History\n\n43 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| add category and move difficulty| May 6, 2024  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| feat: add initial version| Apr 27, 2024  \n  \n### examples\n\n|\n\n### examples\n\n| update example README files| May 6, 2024  \n  \n### src/promptml\n\n|\n\n### src/promptml\n\n| update examples and version of package| May 6, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| add category and move difficulty| May 6, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial commit| Apr 27, 2024  \n  \n### BUILD.md\n\n|\n\n### BUILD.md\n\n| feat: add sample calculator app that uses prompt parser| Apr 28, 2024  \n  \n### CODE_OF_CONDUCT.md\n\n|\n\n### CODE_OF_CONDUCT.md\n\n| docs: add code of conduct| Apr 28, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| docs: update readme with an example| Apr 27, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| add category and move difficulty| May 6, 2024  \n  \n### prompt-github.png\n\n|\n\n### prompt-github.png\n\n| docs: add feature image and core tenets to doc| Apr 28, 2024  \n  \n### prompt.pml\n\n|\n\n### prompt.pml\n\n| add category and move difficulty| May 6, 2024  \n  \n### promptml.jpeg\n\n|\n\n### promptml.jpeg\n\n| docs: add logo for promptml| May 5, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| ci: add build system for packages| Apr 27, 2024  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| ci: add build system for packages| Apr 27, 2024  \n  \n### requirements_dev.txt\n\n|\n\n### requirements_dev.txt\n\n| feat: add working LARK parser| Apr 27, 2024  \n  \n## Repository files navigation\n\n# PromptML (Prompt Markup Language)\n\nA simple, yet elegant markup language for defining AI Prompts as Code (APaC).\nBuilt to be used by AI agents to automatically prompt for other AI systems.\n\nThe architecture is shown as below. A PromptML prompt can be version\ncontrolled like any other code file. Using promptml parser package, one can\neasily generate a natural language prompt, and execute it against a LLM. See\nexamples for using promptml library package: open examples\n\n## Why PromptML ?\n\nPromptML is built to provide a way for prompt engineers to define the AI\nprompts in a deterministic way. This is a Domain Specific Language (DSL) which\ndefines characteristics of a prompt including context, objective, instructions\nand it's metadata. A regular prompt is an amalgamation of all these aspects\ninto one entity. PromptML splits it into multiple sections and makes the\ninformation explicit.\n\nThe language grammar can be found here: grammar.lark\n\n## How PromptML looks ?\n\nThe language is simple. You start blocks with @ section annotation. A section\nends with @end marker. Comments are started with # key. The prompt files ends\nwith .pml extension.\n\n    \n    \n    @prompt # Add task context @context @end # Add task objective @objective # This is the final question or ask @end # Add one or more instructions to execute the prompt @instructions @step @end @end # Add one or more examples @examples @example @input # Add your example input @end @output # Add your example output @end @end @end # Add task constraints @constraints @length min: 1 max: 10 @end @end # Add prompt category @category @end # Add custom metadata @metadata @end @end\n\nSee prompt.pml to see for complete syntax.\n\n## Design\n\nRegular text prompts are very abstract in nature. Natural languages are very\nflexible but provides least reliability. How to provide context for an AI\nsystem and ask something ? Shouldn't we specify that explicitly. PromptML is\nan attempt to make contents of a prompt explicit with a simple language.\n\n## Core tenets of PromptML\n\nBelow are the qualities PromptML brings to prompt engineering domain:\n\n  1. Standardization instead of fragmentation\n  2. Collaboration instead of confusion\n  3. Enabling version control-ability\n  4. Promoting verbosity for better results\n\n## Why not use XML, YAML, or JSON for PromptML ?\n\nFirst, XML, JSON, and YAML are not DSL languages. They are data formats that\ncan represent any form of data. Second, generative AI needs a strict, yet\nflexible data language with fixed constraints which evolve along with the\ndomain.\n\nPromptML is built exactly to solve those two issues.\n\nLanguage grammar is influenced by XML & Ruby, so if you know any one of them,\nyou will feel very comfortable writing prompts in PromptML.\n\n## Usage\n\n  1. Install Python requirements\n\n    \n    \n    pip install -r requirements.txt\n\n  2. import the parser and parse a promptML file\n\n    \n    \n    from promptml.parser import PromptParser promptml_code = ''' @prompt @context This is the context section. @end @objective This is the objective section. @end @instructions @step Step 1 @end @end @examples @example @input Input example 1 @end @output Output example 1 @end @end @end @category Prompt Management @end @constraints @length min: 1 max: 10 @end @end @metadata top_p: 0.9 n: 1 team: promptml @end @end ''' parser = PromptParser(promptml_code) prompt = parser.parse() print(prompt) # Output: { # 'context': 'This is the context section.', # 'objective': 'This is the objective section.', # 'category': 'Prompt Management', # 'instructions': ['Step 1'], # 'examples': [ # {'input': 'Input example 1', 'output': 'Output example 1'} # ], # 'constraints': {'length': {'min': 1, 'max': 10}}, # 'metadata': {'top_p': 0.9, 'n': 1, 'team': 'promptml'} # }\n\n## Defining variables\n\nYou can define variables in the promptML file and use them in the prompt\ncontext and objective. The variables are defined in the @vars section and\nreferenced using $var syntax in either context or objective sections.\n\n    \n    \n    @vars name = \"John Doe\" @end @prompt @context You are a name changing expert. @end @objective You have to change the name: $name to an ancient name. @end @end\n\n## TODO\n\nWe are currently working on:\n\n  1. Supporting more annotations (Ex: temperature, top_p)\n  2. VSCode syntax highlighting support\n  3. Publishing promptml package to PyPi\n  4. Add more unit tests\n  5. Add support for XML & YAML serialization\n\n## About\n\nPrompt markup language (A.K.A PromptML) is specially built for AI systems -\nfrom Vidura AI\n\nvidura.ai\n\n### Topics\n\nmachine-learning ai prompt-engineering generative-ai\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Code of conduct\n\nCode of conduct\n\nActivity\n\n### Stars\n\n8 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 2\n\nNew `@var` annotation and support for defining variables Latest\n\nMay 6, 2024\n\n\\+ 1 release\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Python 76.4%\n  * Promela 23.6%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
