{"aid": "40082173", "title": "The Minimally-Nice Open Source Software Maintainer (2017)", "url": "https://brson.github.io/2017/04/05/minimally-nice-maintainer", "domain": "brson.github.io", "votes": 1, "user": "tagawa", "posted_at": "2024-04-19 00:26:25", "comments": 0, "source_title": "The Minimally-nice Open Source Software Maintainer", "source_text": "The Minimally-nice Open Source Software Maintainer\n\n# The Minimally-nice Open Source Software Maintainer\n\n2017-04-05\n\nBeing involved in open source software is rewarding, yeah? You start off\ncontributing to your favorite project, and it feels so heartwarming when that\nproject\u2019s maintainers recognize your effort. Then a few years later you\nsomehow end up responsible for that project, and maybe some satellite\nprojects, and people are clamoring for your attention, and your inbox is never\nempty, and it\u2019s exhausting and terrifying, and the skills necessary to cope\nwith all the personalities involved are entirely different from the skills you\nused to get your foot in the door in the first place.\n\nI love creating cool things, and releasing cool things, and receiving praise\nfor cool things. To create ever cooler things though one needs to multiply\ntheir manpower, get help from others - to collaborate. Ugh. For me\ncommunicating with others is frightening, stressful, unpleasant, demoralizing,\ndepressing. As the maintainer of a number of projects related to the Rust\nprogramming language, I want to see my software grow and thrive, so must\ncontinually redouble my efforts to productively engage with their users and\ncontributors.\n\nAny day where I am actively maintaining my software I might respond to dozens\nof messages online. It\u2019s so much effort. But amidst all that work, it actually\nonly takes a small amount of consistent effort to nurture a cooperative\nenvironment, one that makes participants feel appreciated, builds support from\nyour userbase, encourages contributions, and reinforces a positive culture.\nStill, even though it\u2019s quite simple to treat others right, it\u2019s not simple to\ndo it consistently: it requires discipline to build good habits. For me it\u2019s a\nstruggle.\n\nHere I\u2019m going to describe a few guidelines on how to respond to people on bug\nreports, pull requests, and other forums. I don\u2019t consider myself to be good\nat this; I definitely don\u2019t follow my own advice consistently. But what I\u2019ve\nscribbled down here reflects my basic gameplan for dealing with people, and\nhaving a clear gameplan makes it easier to rip through your responses to both\nthe pleasant and the horrifying, quickly and correctly. My understanding of\nthis subject is always evolving, but this is what\u2019s near the top of my mind as\nof mid-2017.\n\nThis simple advice might sound patronizing. And you might have different\nopinions about what it means to be nice to people. That\u2019s fine. Perhaps\nconsider whether you are following your own gameplan consistently, and how you\nmight improve it.\n\nThis is divided into two sections:\n\n  * A case study. My lamentations at being a heartless jerkwad.\n  * The techniques. Common techniques for dealing with people, as applied to open source software.\n\nIf you just want a TL;DR for seven techniques of the minimally-nice open\nsource software maintainer, then jump straight to the summary.\n\n# A case study\n\nThe impetus for writing this was a comment I made on a recent Rust RFC. As\nusual, this was one of many threads I responded to that day. And as happens\nwith some alarming frequency, I spent a large portion of the night regretting\nsome of the things I said, and thinking about what I should have said\ndifferently. I\u2019ll reproduce it here so you don\u2019t need to click the link:\n\n> I like the direction of this RFC generally.\n\n> \\--explain is a stable compiler interface. How can we change it? I agree\n> that --explain is a sweet name for this functionality, but I think we need\n> to use a different one.\n\n> It\u2019s not clear to me what the fate of error codes is here. My impression is\n> that you are proposing to remove them, but your images contain the current\n> \u2013explain E0002. Can you make this more clear, and if you are removing error\n> codes can you remove them from the graphics?\n\n> > \u201cFamous programmers like John Carmack have praised the Elm error format.\u201d\n\n> John Carmack\u2019s fame doesn\u2019t really have any bearing on the validity of the\n> proposal.\n\n> Also, I don\u2019t think RFCs should be giving props to other contributors in the\n> summary. When creating the RFC process we made an explicit decision not to\n> include author information, to avoid making RFC authorship itself an\n> incentive (I think). If authorship is something that should be included in\n> RFCs then the process itself should be modified to include that metadata,\n> including crediting the actual author, not just their collaborators. If\n> giving credit in the RFC text is something we want to encourage, then I\n> don\u2019t know that the summary is the place for it. The summary is for\n> summarizing the content of the RFC.\n\nI\u2019ve emphasized the part that haunted me most.\n\nI wrote this at the end of the day, in a hurry, between meetings. This was a\nproposal that I had opinions about, and I wanted to make sure they were heard.\nBut it has to be done in the right way.\n\nReally, this comment wasn\u2019t horrible. You\u2019ve seen much worse I hope. But it\nbothered me. A lot. I didn\u2019t follow my gameplan. I knew I had made a mistake\nwhen the author of the RFC messaged me privately, saying, more-or-less:\n\n> jonathandturner: :( why don\u2019t you want to credit people for their work?\n\nMy comment on the thread sounded like I wanted to deny the contributors credit\nfor the RFC. Is that really what I wanted? Well, honestly I am an overflowing\nflagon of resentment and spite, so perhaps this comment in the moment was a\ntrue reflection of my blackened heart, but after some back and forth with\n@jonathandturner, and some further reflection, I understood this was a dumb\nposition to hold - being extremely generous with credit is one of the easiest\nand most powerful techniques for building community. Outright suggesting we\ndeny credit looks petty and hostile.\n\nLet me go through my comment line by line and excoriate it.\n\n> I like the direction of this RFC generally.\n\nI\u2019m relieved that I started the comment this way, considering how negative the\ncomment ended. This isn\u2019t a fantastic opener, but at least it\u2019s positive.\nShowing others appreciation is one of the simplest techniques for dealing with\npeople. What I wrote here is just about the minimum appreciation I can\nexpress. It\u2019s saying I like what they are thinking. It\u2019s obviously setting the\nstage for less positive feedback later, but we don\u2019t need to worry too much\nabout that - even the slightest effort at showing appreciation tends to help\nsoften interactions, though there is a risk of being seen as patronizing,\nparticularly if all your praise is as curt as this.\n\nSo this could have been better in an obvious way, just by expanding on what I\nliked about it. There were a lot of great facets to this RFC: the beauty and\nclarity of the proposed error messages; showing images of the proposed errors,\netc. It\u2019s a good RFC - I could dig out lots of little things to say positively\nabout it. But doing so takes time and effort. I was in a hurry here to say the\nthings I wanted to say, and didn\u2019t take the time, but perhaps I should have.\nThe more negative your main points are, the more worthwhile it is to soften\nthem with positivity. And it\u2019s prudent to show that positivity sometimes to\navoid being a complete jerk.\n\nAnother simple thing I could have done is thanked him for his work. When you\nwork hard on something and then finally unveil it, it\u2019s super satisfying when\nsomebody thanks you, recognizing that work. We all long to feel appreciated. I\nmight instead have opened with\n\n> Thanks @jonathandturner! I\u2019m glad to see some movement in this area. This is\n> a super important proposal, the design looks well thought out, and I love\n> how well composed it is. It\u2019s obvious you\u2019ve put a lot of effort into it.\n\n> I like the direction of this RFC generally. The error messages are a huge\n> improvement over what we have today. The way you are using colors to\n> emphasize the different focal points of the errors makes things a lot more\n> readable. And good idea including the images of your proposed messages in\n> the RFC - that makes it simple to evaluate.\n\nOK, that\u2019s really loading up the praise. And it\u2019s all true. The above took me\na few minutes to come up with, which is a fair bit of work just to grease the\nwheels. One might do more or less depending on the situation. Now that we\u2019ve\npumped him up we\u2019re ready to crush his hopes - er, offer gentle, constructive\ncriticism.\n\nSo back in reality, I didn\u2019t actually write all that - I wrote the impulsive\nthing, then tossed and turned all night regretting it. To make up for it the\nnext day I posted this followup, reproduced here:\n\n> @jonathandturner my comments could have been more constructive. Let me\n> respond to myself.\n\n> > > \u201cFamous programmers like John Carmack have praised the Elm error\n> format.\u201d\n\n> > John Carmack\u2019s fame doesn\u2019t really have any bearing on the validity of the\n> proposal.\n\n> Maybe just change \u2018fame\u2019 to something more relevant, like \u2018well-respected\u2019,\n> something that better indicates why his opinion is important.\n\n> > Also, I don\u2019t think RFCs should be giving props to other contributors in\n> the summary. When creating the RFC process we made an explicit decision not\n> to include author information, to avoid making RFC authorship itself an\n> incentive (I think). If authorship is something that should be included in\n> RFCs then the process itself should be modified to include that metadata,\n> including crediting the actual author, not just their collaborators. If\n> giving credit in the RFC text is something we want to encourage, then I\n> don\u2019t know that the summary is the place for it. The summary is for\n> summarizing the content of the RFC.\n\n> I phrased this too strongly. I just had a sudden observation that we\u2019ve\n> developed ad-hoc ways to credit people that doesn\u2019t fit into the process as\n> implemented. I should have phrased this more like \u2018maybe we should\n> reconsider how to give credit in RFCs\u2019. RFC process is organic so it may be\n> perfectly fine to do it like this (author credit in the commit log,\n> additional credits in the summary), but it is awkward. And I do believe we\n> made an intentional decision not to credit people, and if that is changing\n> it is important to acknowledge it.\n\nThat was ... ok, I\u2019m still not particularly happy with it. It still appears a\nbit defensive of my dumb position. I wish I could do it again. I\u2019ll never be\nhappy. I\u2019ll never, ever be happy.\n\nBut the point is that it\u2019s best to admit your mistakes, to yourself and\nothers: Dale Carnegie recommends that \u201cif you\u2019re wrong, admit it quickly and\nemphatically\u201d. People love to be right, so if you can admit that you are wrong\nand they are right, that can inspire great cooperation. And it usually doesn\u2019t\nrequire any sacrifice at all to admit you are wrong besides getting over your\nown pride.\n\n# The techniques\n\nSo this relatively minor episode caused me to reevaluate how I communicate\nonline. It\u2019s not like I don\u2019t know how to be nice. I believe that I do, but\nsometimes I forget momentarily. So here, to reinforce my own good behavior,\nand hopefully for your benefit, I\u2019ve traced through my basic gameplan for\nresponding to people online. When I stick to this plan things mostly go well,\nthe people I encounter feel good about Rust and their association with it, and\nI feel relatively ok-ish about myself.\n\nThe techniques here apply to any open source venues, like pull requests, issue\ntrackers, mailing lists and forums.\n\n## Respond quickly\n\nImmediately after users and contributors reach out to you is when they are\nmost motivated to help you. Simply getting a quick response can make a\nfrustrated user\u2019s day. As a maintainer I\u2019ve frequently seen expectant users\nexpress their appreciation: \u2018thanks for the quick response!\u2019. We know that\nother people\u2019s time is valuable because our own time is valuable. By\nresponding to an inquiry quickly we demonstrate that we respect the time they\nput into e.g. filing a bug report, and that we are sacrificing our time to\nhelp them. Even if I can\u2019t think about a particular issue right now, and\nparticularly if I know I\u2019m not going to get to it any time soon, I will\nsometimes post a quick acknowledgement and validation of their concerns, like\n\u201cthanks for the report. This does look troubling. I\u2019m afraid I won\u2019t be able\nto look into this soon, but help is appreciated\u201d, etc.\n\nThe longer you wait to respond to a contributor the less likely they are to\nstay engaged: only the most hearty contributors will return to the table after\nbeing ignored for a year. Sadly, it\u2019s all too common that I come across an\nissue where the most recent comment is from someone seeking advice, long, long\nago. Those contributors are lost forever, and their potential contributions\nwith them.\n\nFor me this is one of the hardest habits to maintain. The neverending crush of\nissues and threads in Rust is entirely overwhelming. I\u2019d much rather I didn\u2019t\nhave to face other people\u2019s problems constantly - I have so many of my own.\nIt\u2019s impossible to follow everything going on in Rust, so in practice I tend\nto restrict the threads I follow to specific areas, and to those people who\nare pinging me directly. There are long stretches where I just can\u2019t face the\nendless tide of other people needing assistance, where I will just willfully\nignore my inbox. I don\u2019t recommend that. Better to be responsive.\n\nHow quick is quick enough? 3 days. How scientific is this number? It\u2019s not.\nYou should respond as quick as you can, but reasonable people will give you a\nweekend without getting bent about it.\n\n## Give thanks\n\nPeople like to feel appreciated. It\u2019s a universal desire. And appreciation is\nsomething it costs us little to give, to spread about like parade candy. If\nyou put just a moment\u2019s thought to it, I know you can see something good in\nevery person and every situation.\n\nThe mere act of submitting a patch is awe-inspiring: another person cares\nenough about our project that they took the time to understand how it works,\nfix our problem, package it up, and submit their work for public criticism.\nThat\u2019s amazing. Do you remember the first patch you ever submitted upstream? I\nbet you were apprehensive. It\u2019s a crucial moment that can determine the future\nrelationship between the contributor and the project.\n\nSo the first thing to do before mounting a response is to dig deep into your\nreserves of universal love, kindness, and compassion, and seek something to be\nthankful for. The more specific you can be the more it shows you care. Did\nthey provide a reproducible test case in the issue report? Damn, that took\nsome effort! Did they write tests for their patch? Noway! Usually I have to\nask for those! If you keep thinking about it you\u2019ll discover there\u2019s a great\ndeal to say thanks for: \u201cThanks @AHumanWithFeelings! I\u2019ve been wanting to fix\nthis issue for so long. I\u2019m glad somebody finally stepped up to write a patch.\nThis looks lovely!\u201d\n\nOf course, not every encounter demands laying it on thick, but do say\n\u201cthanks\u201d. Even trivial patches that can merge without any feedback deserve\nsome comment: just hit the merge button and write, \u201cthanks!\u201d, and they\u2019ll feel\ngood about the small part they played in your project\u2019s ongoing success.\n\n## Pay a compliment\n\nOne of the primary duties of a software maintainer is to review others\u2019 work.\nEvery day, burning down the endless patch queue. And the bigger the project\nthe more gruelling the work. Review is where everything comes together; it is\nthe make-or-break point for contributors, their work, and their motivation to\nkeep coming back.\n\nUnder the exhausting crush of review responsibilities it\u2019s easy to get tunnel\nvision; to bee-line for the shortest route to the end, zeroing in on the\nproblems to be fixed, and moving on to the next patch.\n\nWhen you do this though you risk discouraging your contributor. The more work\na patch needs the more the critiques pile up, and it can easily, and\nunintentionally, result in an avalanche of negativity. This is particularly\nlikely to affect new contributors, who are least likely to understand project\nnorms, and most likely to need guidance.\n\nA well-known technique to soften the weight of criticism is to pair it with\npraise. You\u2019ve probably heard of the \u201ccompliment sandwich\u201d: surrounding the\ncriticism - the meat of your response - with a soft and squishy bun of praise.\nThe compliment sandwich is considered so delectable because it is simple and\neffective. Before you launch into what you really want to say, try to look for\nsomething positive to point out first.\n\nWhen I review a patch I usually do it in two passes: first I skim through it\nwith an open mind, with no preconceptions of what I expect to see. I\u2019m trying\nto get in their head and see the solution from their point of view; and in\nparticular trying to find things to like about their solution. Does the patch\ndisplay good intuition even while getting the details wrong? That\u2019s a good\nstarting point. Did they do something clever that you hadn\u2019t considered? Does\ntheir work demonstrate they\u2019ve read the project\u2019s contribution guidelines in a\nway most contributors don\u2019t? You probably have a host of things you look for\nto indicate quality, as specific to your project. Make note of them as you\nread the patch, and say them first thing in your response. Myself, I always\nappreciate when a contributor writes any tests at all, and I adore\ncontributors who write excellent tests. And I say so. To take this technique\nto the next level, be on the lookout for indicators of the contributor\u2019s own\nvalues, and compliment them on things they are likely to take special pride\nin.\n\nBy reading the whole text once I additionally reduce the chance of coming to\nmistaken conclusions, or leaving comments based on incomplete information.\nOften I\u2019ve not considered a work as a whole and left a comment, then moments\nlater realized that comment was mistaken and had to correct myself. Likewise,\nI find it frustrating when reading inline comments about my own work based on\nincorrect assumptions, and which I felt I had made clear if the respondent had\nonly read further.\n\nSo after I\u2019ve done the first pass in a spirit of expansive generosity, and\nbegun composing my review with praise, then I go back for the second pass and\ndo the detailed review. Even here though I try to note positive things as well\nas things that need to be changed, etc.\n\nI\u2019ve focused on reviews here, but the same applies to all correspondence. Bug\nreport includes a reduced test case? Awesome. Forum post is well thought out\nand polite? Halleluja. Always be looking out for nice things to say about your\npeers and their work.\n\n## Say \u201cyes\u201d\n\nIn the midst of an internet argument it\u2019s easy to lose sight of the humanity\nof the individual on the other side of the computer monitor. Your pulse\nquickens, your temperature rises, mind races. You know you are right,\ntechnically, morally. Whatever, you are right; they are wrong. Wrong, wrong,\nwrong, and you are going to prove it right now.\n\nBut before you fly off the chain, prove your undeniable superiority, and prove\nthat they are wrong, let me suggest instead that you do something better, that\nyou do the opposite: that you prove they are right.\n\nImagine the most exciting brainstorming session you ever had: you spit out a\nbrilliant idea - your partner loves it! They respond enthusiastically by\nbuilding on your idea. The conversation spirals ever upward in joyous rapture.\nIt\u2019s an amazing feeling, being on the same wavelength. By the end up the night\nyou feel thrilled and intoxicated. That\u2019s the power of positivity.\n\nIt\u2019s so rare. When it happens we want to capture that moment and save its\nprecious essence forever. That\u2019s the kind of magic you want your contributors\nto feel every time they file an issue.\n\nThe opposite though is far more common, and it\u2019s the death of useful\ndiscourse: \u201cyou\u2019re wrong\u201d, \u201cthat\u2019s a bad idea\u201d, \u201cI call bs\u201d, \u201cmeh\u201d, \u201cfalse\u201d,\netc. They all amount to a big fat \u201cno\u201d, and they all make the recipient feel\ndisrespected and generate ill will. Bad vibes. This is the worst way to open a\nproductive conversation, and people do it all the time. It\u2019s shocking how\ntactless smart people can be. Such direct negativity erects a brick wall\nfortified with turrets and kettles of boiling oil in the middle of a\nconversation.\n\n\u201cNo\u201d is a cardinal sin of persuasive argumentation. Don\u2019t do it. Don\u2019t do it.\nDon\u2019t do it. No, no, no!\n\nInstead, say \u201cyes\u201d as fast as you can, and in every way you can. Literally\njust say \u201cyes\u201d first thing, then figure out what useful affirmation you can\nfollow with to support that \u201cyes\u201d. If \u201cyes\u201d is too on-the-nose for your taste\nthen there are a billion ways to paraphrase. \u201cYeah\u201d is a great casual option,\nand my favorite. Follow that with a comma, \u201cyeah, it\u2019s true that ...\u201d, but\nthere are so many other more subtle ways to drop a huge positivity bomb at the\noutset of your response: \u201ctotally\u201d, \u201cyou\u2019re right about ...\u201d, \u201cindeed!\u201d. If\nyou put your mind to it you can spend a whole paragraph just saying \u201cyes\u201d.\n\nIn the end, even if the solution is much different than their original\nproposal, by chaining your good ideas to their good ideas, they will feel\nsuccessful. Per master thinker Blaise Pascal, \u201cpeople are generally better\npersuaded by the reasons which they have themselves discovered than by those\nwhich have come into the mind of others.\u201d\n\nAffirmation: it\u2019s the secret weapon against belligerent jerkwads.\n\n## Be clear about what you expect\n\nFor contributors to stay engaged they need to know what\u2019s next, what is\nexpected of them. This applies to every level of the project, from bug reports\nto pull requests. If you want something, say so directly! And if you don\u2019t\nwant something, suggest concrete and viable alternatives. For the most part,\nif you are in a position of authority, contributors are desperate for you to\ngive them direction. Leaving your desires ambiguous is one of the easiest ways\nto destroy contributors\u2019 motivation and lose their manpower.\n\nThis applies especially in two places: on the bug tracker, and during reviews.\nIn both cases there is frequently a critical moment when you have the\nopportunity to provide clear direction, and though it requires some effort,\nfailing to do so leaves a vacuum, and thus leaves potential precious manpower\non the table.\n\nYour issue tracker, if it\u2019s like Rust\u2019s, is filled with bugs and feature\nrequests that you would love to fulfill; but you will never, ever get to them\nyourself, not even if you live forever. These bugs frequently persist in a\nstate of unknowing, where the solution is unclear, for weeks, months, years,\naccumulating debate and discussion about how to move forward. But eventually\nsomething clicks into place, and an acceptable solution becomes known to you.\nFor simple bugs this moment can be immediately when it is filed; for more\nnuanced bugs it can take a long time. But when it happens, you have the\nopportunity to clear the way for contributors.\n\nOn any bug where there is an acceptable solution, make it crystal clear what\nthat solution is, and that help is wanted. Contributors are sometimes just\nwaiting for a signal indicating how they can help. The more detail you can\nprovide the better. Bugs with clear direction have 100% better chance of\ndrawing contributions than those without. The larger your project, and the\nlarger your contributor base, the more important it is that you consistently\nprovide direction, and that contributors have a way to find the bugs that have\nreached this inflection point.\n\n## Admit your mistakes\n\nLike variable bindings in a great many programming languages, our reality is\nsupremely mutable. Conditions change, facts change, and so does our perception\nand understanding. Being wedded to past understanding and past resolutions is\ndogma. On the other hand, confronting change honestly and efficiently is a\ncommon trait of successful individuals and organizations. The agility to let\nold opinions go and steer a new course helps organizations stay relevant in\nthe face of shifting fortunes, and helps us navigate difficult social\nsituations in our daily lives.\n\nDifferences of opinion are the root of many arguments. People make up their\nminds, assert themselves, refuse to listen to counterpoints, become angry,\ndevelop personal animosity toward those that don\u2019t agree, and the conversation\neither reaches an ugly standstill, or devolves into a passionate feud. It\u2019s a\ncommon failure mode, and we want to prevent it from happening as early as we\ncan.\n\nJust like we want to say \u201cyes\u201d, and acknowledge others\u2019 great ideas, it\u2019s\nbeneficial to look for situations where we can let go of our own ideas, our\nown dogma. It\u2019s a hard thing to do: it\u2019s so tempting to stick to what is\ncomfortable; to force those difficult decisions that have already been decided\nto stay in the past; to never let go of our pride and admit we were wrong, or\nmade mistakes.\n\nBut it gets easier with practice, and you might even come to find that\nadmitting your mistakes brings relief - it feels liberating to let things go,\nto get that weight off your mind.\n\nI find that there are very few designs and opinions that, when I look closely,\nI am deeply wedded to, and most often when somebody is angry at something I\nhave done or some decision I have made, it is trivially true that I\u2019ve made a\nmistake. Sometimes these are technical mistakes, and I can let them go by\nsaying \u201cyes, I see what you mean now. That was the wrong call. Are you\ninterested in submitting a patch to fix it?\u201d. Sometimes it\u2019s more of a social\nor political mistake, that I haven\u2019t expressed my motivations or intentions\nclearly and the other person is surprised and disappointed that some outcome\nis not what they expected. In these situations I try to acknowledge that the\nresult has the downsides they\u2019ve identified, and apologize that it doesn\u2019t\nsuit them, and move on. Note though that it\u2019s best to avoid the sorts of\nbackhanded non-apologies we often see from politicians (e.g. \u201cI\u2019m sorry you\nare angry\u201d). Everybody sees through bullshit, and it\u2019s more useful to focus on\nyour own thoughts and feelings instead of mindreading others\u2019.\n\n## Be effusive\n\nThis is another trick that is super-effective! A unique technique of the\ninternet age, I\u2019ve only begun to acknowledge its power recently.\n\nDon\u2019t hesitate to go overboard with superlatives and punctuation: exclamation\nmarks where they shouldn\u2019t be, over-the-top adjectives, cute emoticon and\nemoji. I know that it took me a long time to come around to this point of\nview. It\u2019s just bad writing to throw in exclamation marks and superfluous\nwords, right? And emoji aren\u2019t even words...\n\n\u201cOh, wow, thank you so much! \ud83d\udc96\u201d\n\nTruth is that on the internet this is not bad writing, at least for one-on-one\ncommunication. It is effective writing. It\u2019s well understood that conveying\ntone on the internet is hard:\n\n\u201cThanks.\u201d\n\nWhat does that period mean? It looks so gruff. Are they pissed at me?! Are\nthey having a bad day? On the internet the simple period can appear sarcastic,\nor angry. It\u2019s so neutral that people will project whatever emotions they want\non it. One must go out of their way to not only get their meaning across but\nalso the tone - and for our purposes the tone we want is almost always one of\nabundant positivity and enthusiasm.\n\nTo help you kickstart this habit, here\u2019s a list of some of my favorite\nsuperlatives, emoticon, and emoji, when applied to technical communication in\nopen source software communities:\n\n  * \u201d!\u201d (exclamation mark)\n  * \u201csuper-\u201c\n  * \u201ctotally\u201d\n  * \u201camazing\u201d\n  * \u201cawesome\u201d\n  * \u201creally\u201d\n  * <3 (heart)\n  * <3 <3 <3 (triple-heart!)\n  * :-D (big-ol\u2019 grin)\n  * \ud83d\ude01 (grinning face with smiling eyes)\n  * \ud83d\ude0d (smiling face with heart-shaped eyes)\n  * \ud83d\udc96 (sparkling heart)\n\nThese are just the ones in my own toolbag. There are so many others, and\nthere\u2019s lots of room for creative expression here. The younger you are the\nmore of these weapons you probably have in your arsenal, what with all the\ntexting and instagramming and tweeting. Deploy them without hesitation.\n\nThere are limits to good taste here, but you probably have to decide them for\nyourself. Personally, I never use more than one exclamation point; two\nexclamation points is the epitome of tackiness \ud83d\ude1c. And as a child of the 90\u2019s\nI\u2019m consistently tempted to sneak in a few \u201cradical\u201ds and \u201cbodacious\u201des, to\nembody my life-long wish to become a Ninja Turtle, but sadly those adjectives\nseem to be out of style for the present moment. The time will come though.\n\nJust as a big smile can brighten someone\u2019s day in the physical world, a little\nbit of \ud83d\ude0d goes a long way in the virtual world.\n\n# Summary\n\nSo that\u2019s all you need to make everybody happy, and make everybody love you!\nNow you know the secret and you will never fail again.\n\nHa, ha, no. No, not really. Not everything goes smoothly just by being nice.\nSome people are deeply broken. So many messed up people (maybe I\u2019m one of them\n- maybe you are too). Typical social wheel-greasing doesn\u2019t always work with\nthem; they are hell-bent on sowing chaos, even if they don\u2019t know it. The\nguidelines here are still applicable to these cases, because at least other,\nmore reasonable, people will see that you are doing your best, but truly\ndealing with them effectively is a complex and uncertain matter. For another\nday.\n\nSome of what I\u2019ve said here may have sounded sarcastic, I know. That\u2019s me. I\u2019m\na deeply cynical individual, but I\u2019m working on it. Effective communication\nthough needs to be genuine, empathetic, and respectful. Everybody sees right\nthrough bullshit. Work on your empathy, work on being genuinely nice, but\nuntil then, fake it \u2018till you make it. If I practice good communication habits\nconsistently, presumably at some point I will become a good person. That\u2019s how\nit works, right? I so want to be a good person.\n\nIn summary, do these things if you want to appear to be nice, and also if you\nwant to actually be an effective open source software maintainer:\n\n  * Respond quickly\n  * Give thanks\n  * Pay a compliment\n  * Say \u201cyes\u201d\n  * Be clear about what you expect\n  * Admit your mistakes\n  * Be effusive\n\nBy consistently exhibiting a few simple behaviors, one can at least look like\na kind and decent person. Maybe someday we all actually will be.\n\nWith respects to Dale Carnegie\u2019s How to Win Friends and Influence People. Read\nthat.\n\n", "frontpage": false}
