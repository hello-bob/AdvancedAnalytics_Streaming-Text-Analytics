{"aid": "40092417", "title": "OpenSSF and OpenJS Issue Alert for Takeovers of Open Source Projects", "url": "https://openjsf.org/blog/openssf-openjs-alert-social-engineering-takeovers", "domain": "openjsf.org", "votes": 1, "user": "dredmorbius", "posted_at": "2024-04-19 22:03:40", "comments": 2, "source_title": "Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects | OpenJS Foundation", "source_text": "Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects | OpenJS Foundation\n\nCommunity\n\n## Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for\nSocial Engineering Takeovers of Open Source Projects\n\nXZ Utils cyberattack likely not an isolated incident\n\nBy: Robin Bender Ginn, Executive Director, OpenJS Foundation; and Omkhar\nArasaratnam, General Manager, Open Source Security Foundation\n\nThe recent attempted XZ Utils backdoor (CVE-2024-3094) may not be an isolated\nincident as evidenced by a similar credible takeover attempt intercepted by\nthe OpenJS Foundation, home to JavaScript projects used by billions of\nwebsites worldwide. The Open Source Security (OpenSSF) and OpenJS Foundations\nare calling all open source maintainers to be alert for social engineering\ntakeover attempts, to recognize the early threat patterns emerging, and to\ntake steps to protect their open source projects.\n\n### Failed Credible Takeover Attempt\n\nThe OpenJS Foundation Cross Project Council received a suspicious series of\nemails with similar messages, bearing different names and overlapping GitHub-\nassociated emails. These emails implored OpenJS to take action to update one\nof its popular JavaScript projects to \u201caddress any critical vulnerabilities,\u201d\nyet cited no specifics. The email author(s) wanted OpenJS to designate them as\na new maintainer of the project despite having little prior involvement. This\napproach bears strong resemblance to the manner in which \u201cJia Tan\u201d positioned\nthemselves in the XZ/liblzma backdoor.\n\nNone of these individuals have been given privileged access to the OpenJS-\nhosted project. The project has security policies in place, including those\noutlined by the Foundation\u2019s security working group.\n\nThe OpenJS team also recognized a similar suspicious pattern in two other\npopular JavaScript projects not hosted by its Foundation, and immediately\nflagged the potential security concerns to respective OpenJS leaders, and the\nCybersecurity and Infrastructure Security Agency (CISA) within the United\nStates Department of Homeland Security (DHS).\n\nOpen source projects always welcome contributions from anyone, anywhere, yet\ngranting someone administrative access to the source code as a maintainer\nrequires a higher level of earned trust, and it is not given away as a \u201cquick\nfix\u201d to any problem.\n\nTogether with the Linux Foundation, we want to raise awareness of this ongoing\nthreat to all open source maintainers, and offer practical guidance and\nresources from our broad community of experts in security and open source.\n\n### Suspicious patterns in social engineering takeovers\n\n  * Friendly yet aggressive and persistent pursuit of maintainer or their hosted entity (foundation or company) by relatively unknown members of the community.\n  * Request to be elevated to maintainer status by new or unknown persons.\n  * Endorsement coming from other unknown members of the community who may also be using false identities, also known as \u201csock puppets.\u201d\n  * PRs containing blobs as artifacts.\n  * For example, the XZ backdoor was a cleverly crafted file as part of the test suite that wasn't human readable, as opposed to source code.\n  * Intentionally obfuscated or difficult to understand source code.\n  * Gradually escalating security issues.\n  * For example, the XZ issue started off with a relatively innocuous replacement of safe_fprintf() with fprintf() to see who would notice.\n  * Deviation from typical project compile, build, and deployment practices that could allow the insertion of external malicious payloads into blobs, zips, or other binary artifacts.\n  * A false sense of urgency, especially if the implied urgency forces a maintainer to reduce the thoroughness of a review or bypass a control.\n\nThese social engineering attacks are exploiting the sense of duty that\nmaintainers have with their project and community in order to manipulate them.\nPay attention to how interactions make you feel. Interactions that create\nself-doubt, feelings of inadequacy, of not doing enough for the project, etc.\nmight be part of a social engineering attack.\n\nSocial engineering attacks like the ones we have witnessed with XZ/liblzma\nwere successfully averted by the OpenJS community. These types of attacks are\ndifficult to detect or protect against programmatically as they prey on a\nviolation of trust through social engineering. In the short term, clearly and\ntransparently sharing suspicious activity like those we mentioned above will\nhelp other communities stay vigilant. Ensuring our maintainers are well\nsupported is the primary deterrent we have against these social engineering\nattacks.\n\n### Steps to help secure your open source project\n\nIn addition to these recommendations, there are a number of security best\npractices that can improve the security properties of our projects. While\nthese recommendations will not thwart a persistent social engineering attack,\nthey may help improve your overall security posture of your project.\n\n  * Consider following industry-standard security best practices such as OpenSSF Guides.\n  * Use strong authentication.\n  * Enable two-factor authentication (2FA) or Multifactor Authentication (MFA).\n  * Use a secure password manager.\n  * Preserve your recovery codes in a safe, preferably offline place.\n  * Do not reuse credentials/passwords across different services.\n  * Have a security policy including a \"coordinated disclosure\" process for reports.\n  * Use best practices for merging new code.\n  * Enable branch protections and signed commits.\n  * If possible, have a second developer conduct code reviews before merging, even when the PR comes from a maintainer.\n  * Enforce readability requirements to ensure new PRs are not obfuscated, and use of opaque binaries is minimized.\n  * Limit who has npm publish rights.\n  * Know your committers and maintainers, and do a periodic review. Have you seen them in your working group meetings or met them at events, for example?\n  * If you run an open source package repository, consider adopting Principles for Package Repository Security.\n\nReview \u201cAvoiding social engineering and phishing attacks\u201d from CISA and/or\n\u201cWhat is \u2018Social Engineering\u2019\u201d from ENISA.\n\n### Steps for industry and government to help secure critical open source\ninfrastructure\n\nThe pressure to sustain a stable and secure open source project creates\npressure on maintainers. For example, many projects in the JavaScript\necosystem are maintained by small teams or single developers who are\noverwhelmed by commercial companies who depend on these community-led projects\nyet contribute very little back.\n\nTo solve a problem of this scale, we need vast resources and public/private\ninternational coordination. There is already great work underway by the\nfollowing organizations:\n\nOpen source foundations: The Linux Foundation family of foundations and other\nsimilar organizations like ours can help provide a safety net for open source\nprojects. Maintainers often lack the time, people and expertise in areas such\nas security. Neutral foundations help support the business, marketing, legal\nand operations behind hundreds of open source projects that so many rely upon.\nOur goal is to remove any friction outside of coding to support our\nmaintainers and help their projects grow. As vendor-neutral nonprofits, we are\nuniquely positioned to offer expertise garnered from multiple stakeholders\nrepresented in our organizations.\n\nOn security, our open source foundations have found that an effective best\napproach is to provide technical assistance and direct support to open source\nprojects.\n\nAlpha-Omega is an associated project of the OpenSSF, funded by Microsoft,\nGoogle, and Amazon, funds critical projects and ecosystems. The project aims\nto build a world where critical open source projects are secure and where\nsecurity vulnerabilities are found and fixed quickly. The OpenJS Foundation\nhas experienced how funding developers for security has had a proven impact\nthrough Alpha-Omega investments in Node.js and jQuery.\n\nSovereign Tech Fund: The Sovereign Tech Fund, financed by the German Federal\nMinistry for Economic Affairs and Climate Action, is providing the OpenJS\nFoundation and more open source organizations significant funding to\nstrengthen infrastructure and security.\n\nThey have built a model with detailed reporting and accountability of\nresources, yet at the same time, have technical expertise on staff to\ncustomize security proposals for the variety of open source projects they\nfund.\n\nIt\u2019s encouraging to see the German government taking this initiative to\nimprove the lives of citizens by investing in critical open source\ninfrastructure through the Sovereign Tech Fund.\n\nWe are advocating for more global public investment in initiatives like\nSovereign Tech Fund to invest in open source global that society depends on,\ncomplimentary to the private funding. We recommend that public institutions\nlearn from, adapt and coordinate with Germany\u2019s Sovereign Tech Fund to support\nour interconnected open source projects and shared digital economies.\n\nAbout OpenJS Foundation\n\nThe OpenJS Foundation is committed to supporting the healthy growth of the\nJavaScript ecosystem and web technologies by providing a neutral organization\nto host and sustain projects, as well as collaboratively fund activities for\nthe benefit of the community at large. The OpenJS Foundation is made up of 35\nopen source JavaScript projects including Appium, Electron, Jest, jQuery,\nNode.js, and webpack and is supported by corporate and end-user members,\nincluding GoDaddy, Google, HeroDevs, IBM, Joyent, Microsoft, and the Sovereign\nTech Fund. These members recognize the interconnected nature of the JavaScript\necosystem and the importance of providing a central home for projects which\nrepresent significant shared value.\n\nAbout the OpenSSF\n\nThe Open Source Security Foundation (OpenSSF) is a cross-industry initiative\nby the Linux Foundation that brings together the industry\u2019s most important\nopen source security initiatives and the individuals and companies that\nsupport them. The OpenSSF is committed to collaboration and working both\nupstream and with existing communities to advance open source security for\nall. For more information, please visit us at openssf.org.\n\n### About the Authors\n\nRobin Bender Ginn\n\nRobin Bender Ginn is the Executive Director of the OpenJS Foundation, the\nneutral home to drive broad adoption and ongoing development of key JavaScript\nand web technologies. She also serves on the leadership team at the Linux\nFoundation. Robin has led major initiatives advancing open source\ntechnologies, community development, and open standards. Previously, Robin\nspent more than 10 years at Microsoft where she was at the forefront of the\ncompany\u2019s shift to openness.\n\nOmkhar Arasaratnam\n\nOmkhar Arasaratnam is the General Manager of the Open Source Security\nFoundation (OpenSSF). He is a veteran cybersecurity and technical risk\nmanagement executive with more than 25 years of experience leading global\norganizations. Omkhar began his career as a strong supporter of open source\nsoftware as a PPC64 maintainer for Gentoo and contributor to the Linux kernel,\nand that enthusiasm for OSS continues today. Before joining the OpenSSF, he\nled security and engineering organizations at financial and technology\ninstitutions, such as Google, JPMorgan Chase, Credit Suisse, Deutsche Bank, TD\nBank Group, and IBM. As a seasoned technology leader, he has revolutionized\nthe effectiveness of secure software engineering, compliance, and\ncybersecurity controls. He is also an accomplished author and has led\ncontributions to many international standards. Omkhar is also a NYU Cyber\nFellow Advisory Council member and a Senior Fellow with the NYU Center for\nCybersecurity where he guest lectures Applied Cryptography.\n\n## Footer\n\nOpenJS Foundation\n\n### About\n\n  * Overview\n  * Members\n  * Leadership\n  * Governance\n  * Projects\n  * Contact Us\n  * Join\n\n### Community\n\n  * Collaboration\n  * JavaScriptLandia\n  * Open Visualization\n  * Sovereign Tech Fund\n  * OpenJS World 2021\n  * OpenJS World 2022\n  * OpenJS World 2023\n\n### Legal\n\n  * Privacy\n  * Terms\n  * CLA\n  * Export\n  * Code of Conduct\n\n### Explore\n\n  * Training\n  * Blog\n\n### Connect with us!\n\nStay up to date with the latest news and updates from the OpenJS.\n\nTwitterGitHubYouTube\n\nCopyright \u00a9 OpenJS Foundation. All rights reserved. The OpenJS Foundation has\nregistered trademarks and uses trademarks. For a list of trademarks of the\nOpenJS Foundation, please see our Trademark Policy and Trademark List.\nTrademarks and logos not indicated on the list of OpenJS Foundation trademarks\nare trademarksTM or registered\u00ae trademarks of their respective holders. Use of\nthem does not imply any affiliation with or endorsement by them.\n\nOpenJS Foundation | Terms of Use | Privacy Policy | Bylaws | Code of Conduct | Trademark Policy | Trademark List | Cookie Policy\n\n", "frontpage": false}
