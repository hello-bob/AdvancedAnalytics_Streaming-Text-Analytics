{"aid": "40247062", "title": "Building a social network from scratch on a whiteboard", "url": "https://xeiaso.net/talks/2024/shashin/", "domain": "xeiaso.net", "votes": 2, "user": "mfrw", "posted_at": "2024-05-03 12:45:17", "comments": 0, "source_title": "Building a social network from scratch on a whiteboard - Xe Iaso", "source_text": "Building a social network from scratch on a whiteboard - Xe Iaso\n\n# Building a social network from scratch on a whiteboard\n\nFri May 03 2024\n\n<Cadey>\n\n<shill>Click here to get $50 in Fly.io credits! That's enough to run projects\nlike Ars\u00e8ne for 2-3 months. If enough of you readers convert into Fly.io\nusers, this justifies the hilarious amount of time and expense I put into\nmaking these conference talks shine to the bean counters. It's like my\nsoundcloud except not full of terrible space jam and gangnam style\nmashups.</shill> Offer not valid if you have used a DevRel coupon before\n\n## The Video\n\nWant to watch this in your video player of choice? Take this:\nhttps://cdn.xeiaso.net/file/christine-static/talks/2024/shashin/vod/index.m3u8\n\n## The Talk\n\n<Cadey>\n\nThis is a transcription of a conference talk. This is not written in the same\nway that I write technical articles. This is written in the way that I speak.\n\nThe title slide of the talk. It shows the speaker name and the title. Art by\nAnnie Rugyt.\n\nGood morning all. I'm Xe Iaso and today I'm going to tell you a story about\nhow a company scaled from a humble hackathon project to a globe-spanning\nabomination that no human can hope to understand.\n\nOne of the biggest memes in the industry is the idea of scalability. A lot of\nthe time when you hear people talk about scalability, you end up with diagrams\nlike this:\n\nThe AWS reference architecture for an IOT Tamagotchi. It is a mess of\nconfusion and sadness.\n\nThis is the AWS reference architecture for an internet-of-things Tamagotchi.\n\nThe big problem with diagrams like this is that they tell you the end state\nand not the story that was taken to get there. A story isn't fun if you only\nhear the end.\n\nThis leads to one of my least favourite interview questions ever. \"How did we\nget here?\" \"How did things get this complicated in the first place?\" The last\ntime I remember doing this question in a job interview, it was on a whiteboard\nand took about three hours to start from a single server and recreated\nproduction. The interviewer sat there, almost trolling me by throwing\ncircumstance after circumstance at me to make me independently come up with\nthe same decisions that led to production existing as it did that day. If\nyou've never had this interview before, it can feel a bit like ritualistic\nhazing.\n\nToday I'm going to tell you the story of a startup called Shashin. Think of\nShashin as Instagram, but not.\n\nBut before we get into that, I'd like to introduce who I am and my background.\nI'm Xe Iaso. I am the Senior Technophilosopher at fly.io, where I lead the\ndeveloper relations team. I blog a lot. However I'm not actually a technical\nwriter by nature. I'm more of a fiction writer.\n\nAn agenda slide with a person looking to bridge from the known to the unknown.\n\nToday I'm going to be explaining that \"how did we get here?\" question without\nbreaking any NDAs.\n\nI've split this story into a few eras that help exemplify the stages of a\nwebsite's development. I start with the hackathon entry. I describe the small\nscale implementation on AWS. And then I'm going to explain how and why things\nget so complicated as you span continents.\n\nOnce we get to the end, I'm going to talk about the ways that I would design\nsomething like Shashin with tools you can use today.\n\nJust so that we are absurdly clear here:\n\n>\n\nThis story is a work of fiction. Any names, characters, businesses, places,\nevents, and incidents in this story are either the project of my imagination\nor are used in a fictitious manner. Any resemblance to actual persons, living\nor dead, or actual events in your observable reality are purely coincidental.\n\nWhen I tell this story, a lot of the irrelevant technical bits, company names,\nand stacks will be replaced so you don't think about them too much (Android\nbecomes Actroid, etc.). If you recognize what one of those fake names is\nsupposed to be during the story, please raise your hand.\n\nWhen I say the word you in this story, I'm referring to you as the audience,\nbut I'm also referring to a character.\n\nA very Canadian person lazing back on a chair talking on a cell phone with an\naxe to his side. Photo credit: CIRA stock photos.\n\nJust imagine that the character is someone like this, a startup founder of the\nera who stumbled his way into success.\n\nOh, by the way, this story's going to contain some funny things, so if you\nfeel the urge to laugh, just laugh openly. It helps everyone have a good time.\n\n## Humble Beginnings\n\nThe year is 2009. You and one of your best friends have decided to go to a\nhackathon. Hackathons only recently started up, and this one was powered by\nZed Combinator and Techaro with a $5000 cash prize.\n\nYour friend has been playing with this new mobile phone OS called Actroid. You\nboth have a background in photography and you decide that you want to make\nsomething involving photography for this competition. Every Actroid device is\nequipped with a high-power camera. Every Actroid app has to be written in\nEspresso. However, that doesn't mean that you have to have your back end\nwritten in Espresso. Espresso has a reputation for being overy verbose and\ncomplicated to develop \"simple\" things, and you just want to hack something up\nquick.\n\nPicking almost arbitrarily, you decided to use Python for the back end because\nyou liked the people at the meetup. One of the big advantages of Python is\nthat it has SQLite right in the standard library. This makes hacking easier.\nHowever, this may come back to haunt you.\n\nSo you and your friend hack it up and make it work. It's time to show it off.\nYou pull out your phone. You take a picture, you upload it. Your friend\nrefreshes the view in the Actroid emulator. The crowd shows up on the\nprojector. The room erupts into cheering. You win the hackathon and sooner\nthan you can imagine, you've got a business being founded and investors want\nto talk.\n\nAt this point, the entire backend runs on one developer's laptop. This is\ngreat from a development standpoint because it makes it really easy to hack\non. If that developer's laptop were hit by a meteor, you would have to start\nover from scratch.\n\nThere's also an app written in Espresso for Actroid. The IP address and port\nfor the backend laptop is are hard-coded into the Espresso source code. It\nbarely works on a good day.\n\nHowever, this doesn't matter. You won! Relish in the peace of the victory. It\nwill be some of the last peace you will have for a long while.\n\nBorat holding two thumbs up with the caption 'Great success'. The words\n'Capital obtained' are overlaid on top of the image like in Dark Souls when\nyou kill a boss or something.\n\nHowever, this doesn't matter. You won! Relish in the peace of the victory. It\nwill be some of the last peace you will have for a long while.\n\n## Small scale\n\nThings are getting serious. With great investment money comes great\nresponsibility for your users. So you go out and survey the options for\nrunning this thing somewhere reliably. But let's face it, it's 2009. You're\ngoing to choose AWS. AWS lets you pay for what you actually use. For 2009,\nthis is really innovative.\n\nOne of your investors suggests that you use Postgres for your database instead\nof SQLite, because they read the Heroku blog once and they said something that\ncould be interpreted as Postgres being better than MySQL.\n\nAs you work and get advice from different advisors and investors, you end up\nwith something that looks like this. This is the kind of infrastructure you\nend up seeing over and over in basically everything on the planet. Servers are\nbroken into three tiers: Routing, application, and storage.\n\nYour routing servers take requests in from the outside world and route them to\nyour application servers. Application servers turn requests from the routing\nservers into responses. When processing requests, application servers will\nlikely need to talk to the storage servers.\n\nSo, here's what the diagram of the back end looks like now:\n\n  * The Actroid app is how users look at and upload photos.\n  * Whenever the app needs to make a request, it will send the request to the routing servers. One routing server will be picked at random and the request will be processed and sent to an application server.\n  * That application server will poke Postgres or something and then return a response.\n  * If a client is requesting an image from the service, it will automatically skip going through the application server and go directly to the image storage server. This entire app is made to share images, so it's very likely that any random request is going to be requesting an image.\n\nAt the time the Actroid app was implemented, it didn't have the ability to\nwrite the new photos to the camera roll. The file storage server has the only\ncopy of a lot of images.\n\nBut AWS is robust, right? It wouldn't just go down randomly, would it?\n\n<Numa>\n\nWould it?\n\nA pager with a very exasperated pink-haired orcadragon chugging down coffee.\n\nWrong! It's 4am and you wake up because everything is down. Raise your hand if\nthis is relatable.\n\nA man scolding a router with the caption '502 Bad Gateway'\n\nThis time in the pager zone everything is down and when people go to the\nwebsite as a fallback, they see this image. Your app is breaking amazingly and\nthat is the only image anyone sees.\n\nUsers are complaining on a service originally made for commenting on podcasts\nover SMS.\n\n<Numa>\n\nI think they call it Y now?\n\nA heroic effort ensues and the application is brought back online. However, in\nthe wake of this, you realize that some images are corrupted. Luckily, it's\nonly the last few images that were uploaded before everything went down. But\nthis corruption scares you. The image storage server literally died under the\nweight of all of the uploads at the last minute.\n\nIn your post-mortem analysis, you realize that all of production resting on a\nsingle server is probably a bad idea. For some reason, your backend goes down\nif the file storage server is down. This is not good for uptime.\n\nAn investor suggests that you should use this thing called Simple Storage\nService for uploads instead of a server with a bunch of files on it like\nyou're used to. S3 allows you to put bytes into the cloud with a name and then\nuse the name to get the bytes back.\n\nS3 saved the day. With this, you're more easily able to trust that one server\ngoing down won't destroy your user data. However, at the time, AWS is the only\nplatform with something like S3. If you ever wanted to move off of AWS for\nsome reason, S3 would keep you locked there. With terabytes of data.\n\n## Series A\n\nAt the time, the team is about 16 people, including you, the CEO, and the rest\nof the team. This is still small enough that everybody can have everything in\ntheir head and understand the entire stack at once. However, something big is\nabout to change this.\n\nThe big pile of money has slowly started to run out. In order to keep the\ncompany online, you need more money. You pass the great filter with a Series A\nround.\n\nAnd just after you announce everything and you get more users...the pager goes\noff. Multiple times. People can't upload new photos, but they can sometimes\nview existing ones. The database server is falling over. Every additional user\nyou get makes the problem worse.\n\nHowever, in the postmortem analysis, someone realizes the app makes a lot of\nrepeated requests to the database. If it could somehow save the results of\nthose queries for a short time, it would make fewer requests.\n\nSo you ask an investor for advice and you hear about this program called\nValkey. You can use it to put database results there for a bit instead of\nhaving to run the same queries again and again. This buys time to figure out\nwhat you need to do with your database server.\n\nAs a result, Valkey is now a permanent part of your tech stack. It works\ngreat, and you're really happy with it.\n\nAnd then the pager goes off at 4 am again. You shake off the grogginess and\nthen you realize the horror of what has happened. The Valkey server crashed.\nAll the cache is gone. Clients were constantly trying to remake requests in\norder to hide downtime. Because the cache was empty, everything had to hit the\ndatabase. A thundering herd of users had assaulted your poor database server\ninto submission.\n\nYesterday you had enough time to experiment with setting up a read replica.\nThinking quickly, you decide to make the read requests go randomly between the\nprimary and that replica. It fixes the issue. The app goes back up.\n\nThis event soured the taste of Valkey in your mouth. Thundering herd problems\nsuck in general, because they are easy to make by pure accident and only find\nout 3 months down the line.\n\nAt this point you've realized that the back end is getting a bit more\ncomplicated. Your experiments are now permanently welded to production. And\nmore critically, you're soon to hit the limits of your existing Postgres\nsetup. Your new database replica is on its last legs. You're going to need to\nspin up more replicas, and fast. You've gone viral.\n\nSomeone tells you about a configuration management tool called Aerodactyl that\ncan help. You create a database server by hand, fossilize that into\nAerodactyl, and then create seven more. Everything works the first time. You\nadopt Aerodactyl across the fleet.\n\nCoincidentally, as this happens, your company is about to transition from a\nbig small team to a small big team. People are starting to specialize in\nsmaller aspects of the app. This is the point where you usually see teams form\naround those aspects.\n\n## Microservices\n\nThen you run into problems with your version control system, Ruffian. When\nmultiple people are modifying the same files in Ruffian in different yoink\nrequests, you get merge conflicts. This was interesting the first time, but it\nquickly became a headache. Forward progress was impossible. Switching away was\neven more impossible.\n\nAnd these kind of conflicts is how you end up with the microservices pattern.\nYour backend gets carved up into parts maintained by different teams. In an\nideal spherical cow reading of microservices, every microservice has a well-\ndefined API that it uses to communicate with other services to help a user\nrequest turn into a response.\n\n<Numa>\n\nDoes this happen? Scholars continue to debate to this day.\n\nThe image uploading team was Patient zero. They were having reliability issues\nwhen uploading images through the main monolith. The reliability of image\nuploads depended on the reliability of other parts of the monolith, and the\nmonolith had a spate of segmentation faults at the worst possible time. At a\ncertain point, push came to shove and the image upload team created a new\nservice just to handle image uploading. It worked.\n\nAs other teams started to run into Ruffian merge conflict issues, they ended\nup writing their own microservices too.\n\n> Microservices are not a panacea\n\nIt's worth mentioning that microservices are not a cure-all. It's a tradeoff.\nMicroservices can make things more robust, but can make failure harder to\ndetect. The image uploader can be down and everything can still work. You're\nnot easily able to tell when things are actually broken.\n\nAnd this is how that diagram of backends get really complicated. So the main\nmonolith handles looking up all of the photos that a user posted, comments,\nand authentication. All of the other functionality was carved out into other\nparts so the other teams to work on individually.\n\n## Globe-spanning\n\nAs you grow over the years, you're running into a fundamental problem that you\ncan't really change without a lot of work you've been trying to put off.\nYou're running into the speed of light. Computers are very fast, but the speed\nof light is about 100 milliseconds from Northern Virginia to Europe. You need\nto expand into multiple regions.\n\nThis is the real great filter for these kinds of applications. Making a true\ndistributed system like this comes with a lot of problems that you get nowhere\nelse.\n\nHowever, due to the design of the rest of your stack, you got really lucky.\nThe majority of things that are slow involve reading data. Statistically most\nrequests are to read data. This means that every region only really needs to\nhave a read replica of the databases and a caching server or two. Your\napplication will just poke the main database over a VPN or something whenever\nanything needs to change. This makes it relatively trivial.\n\n<Cadey>\n\nWell, as trivially as globally distributed systems can get.\n\nHowever, once you go past this point, you run into a huge problem where nobody\nis able to understand what's going on anymore. You don't just have a back end\nat this point; you have an ecosystem of various tools that interact with each\nother in ways that you aren't really sure about.\n\n>\n\nKubernetes and its consequences have been a disaster for the human race\n\nThis is probably the point where having something like Kubernetes is useful.\nAt anything below this scale, it's probably not the best use of your time.\n\nHowever, you have a bigger problem. Your cash is finally starting to run out\nafter and it's looking like your only exits are to go public or sell. However,\neither way means that you get to retire. After entertaining a couple offers in\nthe private market, you decide to sell out to Hieroglyph.\n\nBorat holding two thumbs up with the caption 'Great success'. The words\n'Company acquired' are overlaid on top of the image like in Dark Souls when\nyou kill a boss or something.\n\nYou get to retire at 45. You win.\n\n## How I'd Shashin\n\nAs I promised, I'm going to tell you how I would design something like this in\nthe real world for that relatively simple small to medium scale.\n\nRealistically, I'd probably end up using a chord of Fly.io, Supabase, and\nTigris to build up the infrastructure I need. Note my bias as that the success\nof these companies means that I personally succeed. But realistically, these\nare the building blocks that you'd need.\n\nThe overall back end diagram would look something like this:\n\nThe main monolith would handle everything. The only main exception would be\nimage uploading because I would split that out into a separate component.\nImage file format conversion is one of those worst case scenarios where it's\nboth memory and CPU intensive. So I definitely want to dynamically spin up and\ndown more image conversion workers as reality dictates.\n\nAll of the images would be stored in Tigris, S3 and a CDN in a box. Having the\nuploader service work in every region means that all of the images would be by\nthe users by default.\n\nIf you are in Seattle, why should you have to upload your image to Northern\nVirginia to share it with someone else in Seattle?\n\nIf you have any questions about this setup, please ask me in the hallway\ntrack. Just look for my hoodie, you can probably see this thing from orbit.\n\n## Conclusion\n\nIn conclusion, there's a couple things that I want you to take away from this\ntalk:\n\n  * The complexity that you see in various backends happens for a reason. Every diagram has a story.\n  * Unless you're at the stage of a globe-spanning abomination, you probably don't need Kubernetes. Even then, you probably don't.\n  * And finally, storage is one of the most annoying things that you will ever work with.\n\nA list of the people responsible for helping enable the writing of this talk\nin some way or another.\n\nBefore I finish this up, I just want to thank everybody on this list for\nhelping me make this talk shine. Your efforts have been noticed, and you are\nloved.\n\n(Pause)\n\nThe final slide showing information about Xe Iaso, a link to this page, and an\nemail address for questions.\n\nAnd thank you for listening. I've been Xe Iaso and I'm going to be walking\naround the hallway track in case you have any questions because we are totally\nout of time. If you want stickers, I have them. Have a good day, everyone!\n\nFacts and circumstances may have changed since publication. Please contact me\nbefore jumping to conclusions if something seems wrong or unclear.\n\nTags:\n\nView slides\n\nCopyright 2012-2024 Xe Iaso (Christine Dodrill). Any and all opinions listed\nhere are my own and not representative of any of my employers, past, future,\nand/or present.\n\nLike what you see? Donate on Patreon like these awesome people!\n\nServed by xesite v4 (/nix/store/k97rlywj5qw9c7w69jl42gm1afw8vxnz-\nxesite_v4-20240224/bin/xesite) with site version eb35b95c , source code\navailable here.\n\n", "frontpage": false}
