{"aid": "40247868", "title": "Getting Started with the Signaloid C0-MicroSD FPGA Platform \u2013 Hackster.io", "url": "https://www.hackster.io/gatoninja236/getting-started-with-the-signaloid-c0-microsd-fpga-platform-092f23", "domain": "hackster.io", "votes": 1, "user": "rbanffy", "posted_at": "2024-05-03 14:11:18", "comments": 0, "source_title": "Getting Started with the Signaloid C0-microSD FPGA Platform", "source_text": "Getting Started with the Signaloid C0-microSD FPGA Platform - Hackster.io\n\nWelcome to Hackster!\n\nHackster is a community dedicated to learning hardware, from beginner to pro.\nJoin us, it's free!\n\n### Embed the widget on your own site\n\nAdd the following snippet to your HTML:\n\nLearn how to configure and load bitstreams onto the C0-microSD's iCE40 FPGA\nacross two example projects.\n\nRead up about this project on\n\n#### Getting Started with the Signaloid C0-microSD FPGA Platform\n\nEvan Rust\n\n2 1,246\n\n  * Overview\n  * Things\n  * Story\n    * About Signaloid and the C0-microSD\n    * Specifications\n    * The SD-Dev carrier board\n    * Operating modes\n    * Blink an LED\n    * Breathing LEDs with PWM and button input\n    * Going further\n  * Schematics\n  * Code\n  * Credits\n  * Comments(0)\n\nEvan Rust\n\nPublished May 2, 2024 \u00a9 GPL3+\n\n# Getting Started with the Signaloid C0-microSD FPGA Platform\n\nLearn how to configure and load bitstreams onto the C0-microSD's iCE40 FPGA\nacross two example projects.\n\nIntermediateProtip2 hours1,379\n\nAd\n\n## Things used in this project\n\n### Hardware components  \n  \n---  \n| Signaloid C0-microSD  \n---  \n\u00d7| 1  \n| Signaloid SD-Dev  \n---  \n\u00d7| 1  \n  \n### Software apps and online services  \n  \n| Microsoft VS Code  \n---  \n  \n## Story\n\n###\n\nAbout Signaloid and the C0-microSD\n\nWhen it comes to capturing data and ensuring our applications/devices are\ngetting the most accurate values, they often fall short because of how we tend\nto use averages to correct for drift and the inherent inaccuracies in our\nsensors. As an alternative to this approach, Signaloid's platform of both\ncloud and hardware-level integrations aims to track these uncertainties at the\nCPU architecture-level rather than as an external set of application\nlibraries. Their C0-microSD FPGA board is able to perform these functions in\nthe form of a coprocessor to a traditional microcontroller. And beyond\nuncertainty tracking, the board allows for custom bitstreams to be loaded onto\nthe iCE40 FPGA from a host computer's SD card slot thanks to its bootloader.\n\n###\n\nSpecifications\n\nOne of the biggest strengths of the C0-microSD is its ultra-compact micro SD\nform-factor which can interface directly with host devices, the carrier board,\nor even GPIO pins connected to a micro SD breakout module. The card itself\ncontains a Lattice iCE40UP5K FPGA featuring 5280 logic cells, 120Kb of dual-\nport Block RAM, and 1Mb of single-port RAM. Non-volatile data can be stored in\nthe on-board 128Mb (16MB) flash IC courtesy of a Renesas AT25QL128A IC.\n\nLastly, there are two LEDs for indicating status, six GPIO pins that are\naccessible from the micro SD card's contacts, and an additional five pins\navailable from the test pads.\n\n###\n\nThe SD-Dev carrier board\n\nIn addition to the C0-microSD, Signaloid has produced a carrier board called\nthe SD-Dev which is a compact way to access all of the available I/O over a\nplethora of connectors. The carrier has a connector underneath for attaching a\nRaspberry Pi Compute Module 4 for easy, direct communication with the\nC0-microSD. It features a total of four USB-C ports, with two for downstream\nconnections, one solely for power, and the last one that carries both data and\npower from a host device. The SD-Dev also includes ports for Micro HDMI, I2C,\nand SPI, as well as both full-size and micro SD card slots.\n\n###\n\nOperating modes\n\nAlthough the C0-microSD comes preloaded with Signaloid's RISC-V processor core\nbitstream, it can also act as a standalone device with the full capabilities\nof the iCE40UP5K FPGA. When slotted into a host computer as a micro SD card,\nthe board will present itself as an unformatted drive, thus allowing other\napplications to upload custom bitstreams to what appears as a mounted disk.\nWhen powered externally and without an SD host present, the C0-microSD's\nbuilt-in bootloader will attempt to load the latest bitstream from storage\ninto the FPGA automatically.\n\n###\n\nBlink an LED\n\nTo get started with the C0-microSD as an FPGA (not using the C0 Processor\nRISC-V core yet), we first need to install a toolchain for compiling and\nloading bitstreams. Head to the OSS CAD Suite repository from YosysHQ,\nnavigate to the releases page, and follow the installation instructions for\nyour host device's operating system/architecture. In the end, there should be\na bin folder accessible from the current user's path.\n\nThe code for this project is found in this repository. Clone it before\nnavigating to the inner /verilog/blink directory where you'll find a Makefile,\npin constraints, and a verilog file that specifies the circuit being\nconfigured. In this case, it specifies the two status LEDs, a clock, and a\ncounter that helps to periodically flip the LEDs' states. Compile the\nbitstream binary by running make.\n\nPlugging in the C0-microSD opens a new disk dialog, and after dismissing\nwithout formatting the drive, its path can be verified by running lsblk on\nLinux and ensuring the disk appears with a 20.2MB capacity. Lastly, run:\n\nmake program DEVICE=<path>\n\nto load the new bitstream into the C0-microSD. Unplug the board, give it\nexternal power, and watch as the red and green LEDs enter into an alternating\nblink pattern.\n\n1 / 2\n\n###\n\nBreathing LEDs with PWM and button input\n\nBuilding off the previous example, this demonstration showcases how the\nC0-microSD's I/O can be directly accessed through its exposed contacts for\nboth LED outputs and button inputs. Simply connect one pushbutton switch\nbetween SD_DATA2/GND and another between SD_DATA3/GND. Then compile and upload\nthe bitstream using the same method as the previous section from inside the\nverilog/breathe-button directory. The red and green LEDs at the top of the\nC0-microSD should begin to breathe in an alternating pattern while allowing\nfor the breathing rate to be adjusted via the pair of buttons.\n\nThe verilog file starts by declaring a clock source and several registers for\nstoring the iCE40's built-in LED controller's configuration. Unlike a typical\nARM CPU core which would require setting a timer, interrupts, and a counter\nfor controlling the duty cycle of an output pin, the LED driver allows the\nsetting of delays, breathing ramp times, and brightness levels through its\naddressable registers, which in turn, can drive external pins.\n\n1 / 2\n\nThe LED breathing speed can be continuously adjusted via the two buttons\nconnected to the SD DATA2 and SD DATA3 pins that have been pulled high\ninternally. When started, the system enters into a finite-state machine (FSM)\nthat initializes the LED driver and begins breathing the LEDs. From here, it\nwaits until a debounced button press has been detected, and depending on which\none, will either increment or decrement the breathing rate by modifying the\ndriver's Breathe On and Breathe Off control registers.\n\n###\n\nGoing further\n\nGiven its compact size, ease-of-use, and open-source nature, the C0-microSD is\na great platform for developing and deploying custom bitstreams to its iCE40\nFPGA over the SD protocol. The source code for both example projects and\nadditional documentation can be found in this repository from Signaloid.\n\nRead more\n\n## Schematics\n\n### Breadboard circuit for breathing LEDs\n\n## Code\n\n### C0-microSD\n\n## Credits\n\n### Evan Rust\n\n121 projects \u2022 1055 followers\n\nIoT, web, and embedded systems enthusiast. Contact me for product reviews or\ncustom project requests.\n\nContactContact\n\n## Comments\n\nPlease log in or sign up to comment.\n\nAd\n\n##### Related channels and tags\n\n  * fpga\n  * led\n  * sd card\n\n##### Related projects\n\nGetting Started with the MiniZed FPGA SoC\n\nMassive IO with FPGA Expander Platform\n\nOptimizing an FPGA HLS Design with FPGA Tool Settings\n\nProgramming Digilent FPGA Boards with Multisim\n\nGetting started with Opensource FPGA tool-chain (APIO, Yosys)\n\nView more related projects\n\n1\n\n2\n\n3\n\nHey stranger! Sign up to access unlimited projects featuring Signaloid and\nmore \u2013 it's free.\n\nNot now\n\n##### Next project\n\nGetting Started with the MiniZed FPGA SoC\n\n  * ### About Us\n\n  * Hackster Overview\n  * Hackster for Business\n  * Help Articles\n  * Brand Resources\n  * Sitemap\n\n  * ### Legal Thingies\n\n  * Terms of Service\n  * Code of Conduct\n  * Privacy Policy\n  * Privacy Policy for California Residents\n  * Cookie Policy\n\n  * ### Find Us On Social\n\n  * Facebook\n  * Instagram\n  * LinkedIn\n  * X\n  * YouTube\n\n  * ### Visit Our Avnet Family\n\n  * Avnet\n  * Premier Farnell\n  * element14\n  * Newark\n\nHackster.io, an Avnet Community \u00a9 2024\n\n", "frontpage": false}
