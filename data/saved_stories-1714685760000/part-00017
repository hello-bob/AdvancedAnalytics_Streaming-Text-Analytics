{"aid": "40234530", "title": "Coding interviews are stupid (ish)", "url": "https://darrenkopp.com/posts/2024/05/01/coding-interviews-are-stupid", "domain": "darrenkopp.com", "votes": 2, "user": "darrenkopp", "posted_at": "2024-05-02 10:18:25", "comments": 0, "source_title": "Coding interviews are stupid (ish)", "source_text": "Coding interviews are stupid (ish)\n\n# Darren Kopp\n\n## Navigating through software, line by line\n\n  * @darrenkopp\n  * GitHub\n  * rss\n  * Chat\n\n## Coding interviews are stupid (ish)\n\n  * May 01, 2024\n  * Darren Kopp\n\nI have, once again, failed an interview (probably). I don\u2019t actually know yet\nbut if I were the interviewer I probably wouldn\u2019t recommend moving the\ncandidate forward. Based on the hyperbolic title, you are probably guessing\nthat I\u2019m pretty salty about failing, but I\u2019m not. I write one of these\nreflection blog posts each time I fail an interview I care about (fun fact:\nboth were about the same company, enjoy the bonus round at the end). Now I\u2019m\nwriting one after experiencing a few years at a company that didn\u2019t have any\ncoding interviews (fun fact: I almost didn\u2019t pass their interview process\neither).\n\nNow, I\u2019m just as guilty about being on the coding interview bandwagon as\neveryone else. I\u2019ve given probably about a hundred of the same formulaic^1\ninterview that I just took. I\u2019ve passed on most of those candidates and I\nwould have passed on me. I\u2019ve also spent hours fixing code that had issues\ndirectly stemming from not using the correct data structure/algorithm that I\nmay not have had to if we had been better at screening the employees during\nthe interview process.\n\nSo which one works better? From my small sample size and general mediocre\nstatistics abilities, I\u2019d say they are about the same. What I do know,\nhowever, is that for every 1-hour interview where I evaluated if someone knew\ntheir data structures, I could have just taught them. Maybe they did know them\nalready and just forgot because they haven\u2019t used them recently. Math was one\nof my strongest subjects in school but if you asked me right now to take a\nderivative of something I wouldn\u2019t be able to.\n\nFor some reason we think that someone needs to be able to whip out the\nsolution to any random problem that is space and time optimal within 40\nminutes. Ok, that\u2019s not necessarily fair (more hyperbole, I know). I\u2019m well\naware that it\u2019s often said that what\u2019s more important is how you solve the\nproblem, not that you solve the problem, but in practice human biases will\nwork against you if you don\u2019t get close to it working.\n\nIf you\u2019ve stuck around this far, you are probably curious about the question.\nHonestly, the question is not interesting at all and I thought it to be\nperfectly reasonable (and was probably the first of two). The reason I\u2019m\nwriting about all of this is because I woke up to the epiphany that the\nproblem I failed was a problem I solved a year ago.\n\n> Q: Assume that you have an infinite stream of data that is coming in from\n> multiple threads in an unordered fashion. Write the stream items to the\n> console in order.\n\nMy actual problem, which took about a month, was that I needed to ingest all\nof the changes from one or more tables in SQL Server as fast as possible. What\nI chose to do was hook into the Change Data Capture functionality and\nsimultaneously stream the data from CDC while scanning the table for snapshots\nof the data. Now, while each of those go in sequential order, we need to\nreconcile the two together depending on which we read first (ie if we get\nupdates before snapshot, we need to store them until we get the full row data\nand then send them). On top of that I then built an in-memory transaction\nlayer sitting on top of SQLite to optimize memory/disk usage to hit the\nperformance benchmarks I wanted.\n\nThis literally checked off every box they were looking for (even the ones I\nmissed) in the interview question. Thread safety: check. Lock primitives:\ncheck. Optimal Concurrency: check. Producer-consumer: check. Fault tolerant:\ncheck. Hashing: check. The code I wrote is ok at best, honestly. The greatest\nlie we have ever told ourselves is that we want greenfield projects because we\nwon\u2019t have to deal with legacy code, but legacy code is just greenfield code\nthat is written under the duress of trying to solve the problem at the same\ntime.\n\nSo now, just as when I\u2019m in an interview, I\u2019m at a loss for the answer to the\nquestion at hand: what should we do instead? I honestly don\u2019t know but I do\nfeel like we are stuck in a cargo-cult mentality where we are just doing\nthings becaues that\u2019s what the big companies do, and if it works for them it\nmust be what we need to do. I understand the problems associated with hiring\nthe wrong people as well, which may well be the actual reason we are\nrightfully stuck with such fearful/timid hiring practices.\n\nFor now, I\u2019ll just keep practicing for interviews until I successfully trick\nsomeone into thinking that I know how to code and then secretely become one of\nthe best employees they have ever had.\n\nBonus round! I guess enough time has gone by (11 years!) that I can say that\nboth of my failed interview posts were from when I applied to StackOverflow.\nThe first time I bombed out just as hard as this interview. The second time,\nhowever, I went through 2 - 3 coding interviews (which I believe that I\npassed), 1 interview with the product manager, and then finally an interview\nwith David Fullerton and Joel Spolsky. I completely bombed the interview with\nDavid Fullerton and I\u2019m pretty sure that\u2019s what killed my application (but I\ncan\u2019t say one way or another).\n\nThat interview, however, is the only interview that actually bothers me to\nthis day. The question, which I\u2019ve heard is a Facebook favorite, was \u201cconvert\na decimal number to base negative 2\u201d. This question, which is possible/doable\nin 40 minutes and more about the problem solving process than anything, is the\ndumbest fucking question I have ever had and I don\u2019t care what anybody else\nthinks. Every other question I\u2019ve had I\u2019ve never had problems with because,\nlike I\u2019ve shown in this post, most everything you\u2019ll actually run into at some\npoint. And yes converting numbers to other things (roman numerals, etc) is a\nvalid thing, but fuck that question and just waiting for you to eventually\narrive at the little trick to make it work.\n\nBecause of my schedule, the interviews were stacked back-to-back, where they\nnormally would not be and I wouldn\u2019t have actually ended up having the\ninterview with Joel, which was so awkward because he was a little late and so\nI was just sitting there on a spinning google hangouts waiting while my head\nwas still trying to process the question while knowing that I had completely\nbombed that interview and the next interview didn\u2019t matter, not actually\nknowing if it would happen or not.\n\nNo hostility to any of those involved, but to this day I hate that question\nand it\u2019s the only question I\u2019ve received that I would actually categorize as\n\u201cgimicky.\u201d RIP StackOverflow Careers.\n\n  1. 5 minutes on introductions, 40 minutes on the question, 10-15 minutes for questions. \u21a9\n\n", "frontpage": false}
