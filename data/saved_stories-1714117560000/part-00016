{"aid": "40164289", "title": "I've heard of Quantum Computing, now what's Probabilistic Computing?", "url": "https://www.purdue.edu/p-bit/blog.html", "domain": "purdue.edu", "votes": 1, "user": "smj-edison", "posted_at": "2024-04-25 23:23:18", "comments": 0, "source_title": "Blog - Purdue-P - An Exploration into Probabilistic Spin Logic (p-bits)", "source_text": "Blog - Purdue-P - An Exploration into Probabilistic Spin Logic (p-bits)\n\nBlog\n\n  * Home\n\nI've heard of Quantum Computing, now what's Probabilistic Computing?\n\n10/04/19 - Lakshmi A. Ghantasala\n\nWith Moore\u2019s law coming to an end within the next decade, beyond CMOS\ntechnology is being studied with greater intent than ever before. Among the\nmost popular of these alternative computing methods is quantum computing.\nGoogle\u2019s recent claim of quantum supremacy has put this computing paradigm in\nthe spotlight as the future of computing. While quantum may well be the\nfuture, this technology is still decades from maturing to a scale that can\nrival today\u2019s CMOS technology. How then can we continue to progress over the\nnext 20 or 30 years?\n\nProbabilistic spin logic is a computing paradigm that may just have the\nnecessary qualities to fit this requirement. A probabilistic computer was even\nhinted at by Feynman in his famous \u201cSimulating Physics with Computers\u201d paper\nback in 1982; he talks about how a probabilistic nature could be simulated\nsimply by \u201ca \u201ccomputer that itself is probabilistic\u201d. Fast forward to 2019,\nand an 8-bit probabilistic computer that can factorize integers has been\ndemonstrated, which you can read about here. To be clear, we could model a\nprobabilistic computer with existing CMOS technology for years, but a real\nprobabilistic computer had yet to be built.\n\nA couple of key differences from quantum computers makes this new\nprobabilistic paradigm more appealing for the immediate future. One, p-bits\ncan operate at room temperature, while qubits require extensive engineering to\nkeep temperatures close to sub-zero. Second, p-bits are entirely classical by\nnature. There are no decoherence issues that limit distance or strength of\nconnections. This allows p-computers to follow the same rules that affect\ntransistor technology. Luckily, we have a half-century of experience already\nin place. Probabilistic spin logic is a name given to the study of these\nnetworks of p-bits, and bringing them together to build p-computers.\n\nWith the rest of this post, I hope to explain some of the driving principles\nbehind Probabilistic Spin Logic. This is by no means a comprehensive guide;\nrather it should help give an idea of how p-bits solve problems.\n\n## The p-bit is at the heart of a p-computer\n\nA p-bit can be broken down into two behavioural components. First, the\nneuron\u2019s behaviour, and second, the input bias. The neuron\u2019s behaviour can be\nsummarized by the following equation.\n\nmi=sgn[tanh(Ii)\u2212r]\n\nA p-bit outputs the sign of the input minus a random number over the range of\nthat input. Simply put, if the bias into a p-bit is high, then it will likely\noccupy a state of 1. If the input bias is small, it will likely occupy a state\nof -1. At a 50% input bias, the p-bit occupies a random state at any time,\nswitching rapidly between + and - 1. The second component is the input to the\np-bit. This input is generated according to the following equation.\n\nIi = \u2211jWijmj\n\nThe input to p-bit i is simply the sum of all the weights connected to p-bit i\nmultiplied by their respective source p-bits. These two simple rules govern\nthe behaviour of a probabilistic computer.\n\n## Putting Problems on a Probabilistic Computer\n\nIn order to take advantage of a probabilistic computer, problems must be\nphrased in a way that the p-computer understands. The way we phrase these\nproblems is in the form of a set of weights. Weights can be intelligently\ndesigned to capture the constraints of some problem; the solution to the\nproblem we want to solve is hidden in those weights. The p-bits of the\np-computer, when connected to each other by that set of weights, will\nfluctuate until they satisfy those constraints the best they can. At that\nstage, the p-bits have reached some low energy state, and they tend to settle\nin. Though they will continue to fluctuate, as a whole, they won\u2019t fluctuate\ntoo far from that low energy state. We can encourage the p-bits to find the\nlowest energy state rather than some sub-optimal low state by starting the\nnetwork at a high temperature, and slowly cooling the network until the p-bits\nsettle in to their preferred states. There exist many annealing patterns or\nschedules we can follow to enhance the p-computer\u2019s ability to find the lowest\nenergy ground state.\n\n## Multi-p-bit gates\n\np-bits emulating a multiply (and) gate.\n\nProbabilistic algorithms have been developed that allow us to model logic\ngates on a p-computer. For example, let\u2019s imagine a multiply gate. This is a\n3-p-bit gate in which p-bit A multiplies with p-bit B to get p-bit C.\nImmediately, the states which satisfy this gate are clear to us. For instance,\n0 and 0 multiply to get 0.Likewise, 0 x 1 = 0, 1 x 0 = 0, and 1 x 1 = 1. There\nare 4 states that these p-bits can occupy that hold true to a multiply gate.\nLeft to its own devices, a 3-p-bit network encoded with \u201cmultiply gate\nweights\u201d will probabilistically occupy these 4 states over all the others. Try\nthis problem out in the Purdue-P web simulator!\n\nA Simple Guide to J and h\n\n9/25/19 - Lakshmi A. Ghantasala\n\nJ and h are all you really need to describe some unique p-circuit. They encode\nthe constraints of the problem, and will lead a p-circuit to a ground state\nthat solves that problem.\n\nPurdue-P Word Cloud\n\n7/30/19 - Kerem Camsari\n\nThe contents of https://www.purdue.edu/p-bit were pulled and a word cloud was\nmade in mathematica. The following line of code made this possible. The\nattached version of the p is a specialized version, where names and pronouns\nwere manually removed.\n\n  * Home\n\n", "frontpage": false}
