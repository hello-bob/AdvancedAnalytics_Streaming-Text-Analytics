{"aid": "40090622", "title": "How We Built the World Wide Web in Five Days (2019)", "url": "https://adactio.com/articles/15975", "domain": "adactio.com", "votes": 1, "user": "tie-in", "posted_at": "2024-04-19 18:49:00", "comments": 0, "source_title": "How We Built The World Wide Web In Five Days", "source_text": "Adactio: Articles\u2014How We Built The World Wide Web In Five Days\n\nadactio\n\n# How We Built The World Wide Web In Five Days\n\n## October 16th, 2019\n\nThis talk about recreating the first ever web browser was a joint presentation\nwith Remy Sharp, delivered at the Fronteers conference in Amsterdam in October\n2019.\n\n  * Listen to the audio\n  * Watch the video\n  * Download the slides\n\n## Jeremy\n\nOur story begins with the Big Bang.\n\n### 13.8 billion years ago\n\nThis sets a chain of events in motion that gives us elementary particles, then\nmore complex particles like atoms, which form stars and planets, including our\nown, on which life evolves, which brings us to the recent past when this whole\nprocess results in the universe generating a way of looking at itself:\nphysicists.\n\n> A physicist is the atom\u2019s way of knowing about atoms.\n\n\u2014George Wald\n\nBy the end of World War Two, physicists in Europe were in short supply. If\nthey hadn\u2019t already fled during Hitler\u2019s rise to power, they were now being\nactively wooed away to the United States.\n\n### 64 years ago\n\nTo counteract this brain drain, a coalition of countries forms the European\nOrganization for Nuclear Research, or to use its French acronym, CERN.\n\nThey get some land in a suburb of Geneva on the border between Switzerland and\nFrance, where they set about smashing particles together and recreating the\nconditions that existed at the birth of the universe.\n\nEvery year, CERN is host to thousands of scientists who come to run their\nexperiments.\n\n## Remy\n\nFast forward to February 2019, a group of 9 of us were invited to CERN as an\nelite group of hackers to recreate a different experiment.\n\nWe are there to recreate a piece of software first published 30 years ago.\nGiven this goal, we need to answer some important questions first:\n\n  * How does this software look and feel?\n  * How does it work?\n  * How you interact with it?\n  * How does it behave?\n\nThe software is so old that it doesn\u2019t run on any modern machines, so we have\na NeXT machine specially shipped from the nearby museum. This is no ordinary\nmachine. It was one of the only two NeXT machines that existed at CERN in the\nlate 80s.\n\nNow we have the machine to run this special software.\n\nBy some fluke the good people of the web have captured several different\nversions of this software and published them on Github.\n\nSo we selected the oldest version we could find. We download it from Github to\nour computers. Now we have to transfer it to the NeXT machine.\n\nExcept there\u2019s no USB drive. It didn\u2019t exist. CD ROM? Floppy drive? The NeXT\ncomputer had a \u201cfloptical drive\u201d\u2014bespoke to NeXT computers\u2014all very well, but\nin 2019 we don\u2019t have those drives.\n\nTo transfer the software from our machine, to the NEXT machine, we needed to\nuse the network.\n\n## Jeremy\n\n### 62 years ago\n\nIn 1957, J.C.R. Licklider was the first person to publicly demonstrate the\nidea of time sharing: linking one computer to another.\n\n### 56 years ago\n\nSix years later, he expanded on the idea in a memo that described an\nIntergalactic Computer Network.\n\nBy this time, he was working at ARPA: the department of Defense\u2019s Advanced\nResearch Projects Agency. They were very interested in the idea of linking\ncomputers together, for very practical reasons.\n\nAmerica\u2019s military communications had a top-down command-and-control\nstructure. That was a single point of failure. One pre-emptive strike and it\u2019s\ngame over.\n\nThe solution was to create a decentralised network of computers that used Paul\nBaran\u2019s brilliant idea of packet switching to move information around the\nnetwork without any central authority.\n\nThis idea led to the creation of the ARPANET. Initially it connected a few\nuniversities. The ARPANET grew until it wasn\u2019t just computers at each\nendpoint; it was entire networks. It was turning into a network of networks\n...an internetwork, or internet, for short. In order for these networks to\nplay nicely with one another, they needed to agree on using the same set of\nprotocols for packet switching.\n\nBob Kahn and Vint Cerf crafted the simplest possible set of low-level\nprotocols: the Transmission Control Protocol and the Internet Protocol.\nTCP/IP.\n\nTCP/IP is deliberately dumb. It doesn\u2019t care about the contents of the packets\nof data being passed around the internet. People were then free to create more\ntask-specific protocols to sit on top of TCP/IP.\n\nThere are protocols specifically for email, for example. Gopher is another\nexample of a bespoke protocol. And there\u2019s the File Transfer Protocol, or FTP.\n\n## Remy\n\nBack in our war room in 2019, we finally work out that can use FTP to get the\nsoftware across. FTP is an arcane protocol, but we can agree that it will work\nacross the two eras.\n\nAlthough we have to manually install FTP servers onto our machines. FTP\ndoesn\u2019t ship with new machines because it\u2019s generally considered insecure.\n\nNow we finally have the software installed on the NeXT computer and we\u2019re able\nto run the application.\n\nWe double click the shading looking, partly hand drawn icon with a lightning\nbolt on it, and we wait...\n\nOnce the software\u2019s finally running, we\u2019re able to see that it looks a bit\nlike an ancient word processor. We can read, edit and open documents. There\u2019s\nsome basic styles lots of heavy margins. There\u2019s a super weird menu navigation\nin place.\n\nBut there\u2019s something different about this software. Something that makes this\nmore than just a word processor.\n\nThese documents, they have links...\n\n## Jeremy\n\nTed Nelson is fond of coining neologisms. You can thank him for words like\n\u201cintertwingled\u201d and \u201cteledildonics\u201d.\n\n### 56 years ago\n\nHe also coined the word \u201chypertext\u201d in 1963. It is defined by what it is not.\n\n> Hypertext is text which is not constrained to be linear.\n\nEver played a \u201cchoose your own adventure\u201d book? That\u2019s hypertext. You can jump\nfrom one point in the book to a different point that has its own unique\nidentifier.\n\nThe idea of hypertext predates the word. In 1945, Vannevar Bush published a\nvisionary article in The Atlantic Monthly called As We May Think.\n\nHe imagines a mechanical device built into a desk that can summon reams of\ninformation stored on microfilm, allowing the user to create \u201cassociative\ntrails\u201d as they make connections between different concepts. He calls it the\nMemex.\n\nAlso in 1945, a young American named Douglas Engelbart has been drafted into\nthe navy and is shipping out to the Pacific to fight against Japan. Literally\nas the ship is leaving the harbour, word comes through that the war is over.\nHe still gets shipped out to the Philippines, but now he\u2019s spending his time\nlounging in a hut reading magazines. That\u2019s how he comes to read Vannevar\nBush\u2019s Memex article, which lodges in his brain.\n\n### 51 years ago\n\nDouglas Engelbart decides to dedicate his life to building the computer\nequivalent of the Memex.\n\nOn December 9th, 1968, he unveils his oNLine System\u2014NLS\u2014in a public\ndemonstration. Not only does he have a working implementation of hypertext, he\nalso shows collaborative real-time editing, windows, graphics, and oh yeah\u2014for\nthis demo, he invents the mouse.\n\nIt truly is The Mother of All Demos.\n\n### 39 years ago\n\nThere were a number of other attempts at creating hypertext systems. In 1980,\na young computer scientist named Tim Berners-Lee found himself working at\nCERN, where scientists were having a heck of time just keeping track of\ninformation.\n\nHe created a system somewhat like Apple\u2019s Hypercard, but with clickable links.\nHe named it ENQUIRE, after a Victorian book of manners called Enquire Within\nUpon Everything.\n\nENQUIRE didn\u2019t work out, but Tim Berners-Lee didn\u2019t give up on the problem of\nmanaging information at CERN. He thinks about all the work done before:\nVannevar Bush\u2019s Memex; Ted Nelson\u2019s Xanadu project; Douglas Engelbart\u2019s oNLine\nSystem.\n\nA lot of hypertext ideas really are similar to a choose-your-own-adventure:\njumping around from point to point within a book. But what if, instead of\nimagining a hypertext book, we could have a hypertext library? Then you could\njump from one point in a book to a different point in a different book in a\ncompletely different part of the library.\n\nIn other words, what if you took the world of hypertext and the world of\nnetworks, and you smashed them together?\n\n### 30 years ago\n\nOn the 12th of March, 1989, Tim Berners-Lee circulates the first draft of a\ndocument titled Information Management: A Proposal.\n\nThe diagrams are incomprehensible. But his supervisor at CERN, Mike Sendall,\nsees the potential. He reads the proposal and scrawls these words across the\ntop: \u201cvague, but exciting.\u201d\n\nTim Berners-Lee gets the go-ahead to spend some time on this project. And he\ngets the budget for a nice shiny NeXT machine. With the support of his\ncolleague Robert Cailliau, Berners-Lee sets about making his theoretical\nproject a reality. They kick around a few ideas for the name.\n\nThey thought of calling it The Mesh. They thought of calling it The\nInformation Mine, but Tim rejected that, knowing that whatever they called it,\nthe words would be abbreviated to letters, and The Information Mine would\u2019ve\nseemed quite egotistical.\n\nSo, even though it\u2019s only going to exist on one single computer to begin with,\nand even though the letters of the abbreviation take longer to say than the\nwords being abbreviated, they call it ...the World Wide Web.\n\nAs Robert Cailliau told us, they were thinking \u201cWell, we can always change it\nlater.\u201d\n\nTim Berners-Lee brainstorms a new protocol for hypertext called the HyperText\nTransfer Protocol\u2014HTTP.\n\nHe thinks about a format for hypertext called the Hypertext Markup\nLanguage\u2014HTML.\n\nHe comes up with an addressing scheme that uses Unique Document\nIdentifiers\u2014UDIs, later renamed to URIs, and later renamed again to URLs.\n\nBut he needs to put it all together into running code. And so Tim Berners-Lee\nsets about writing a piece of software...\n\n## Remy\n\nTim Berners-Lee\u2019s document is a proposal at that stage 30 years ago. It\u2019s just\ntheory. So he needs to build a prototype to actually demonstrate how the World\nWide Web would work.\n\nThe NeXT computer is the perfect ground for rapid software development because\nthe NeXT operating system ships with a program called NSBuilder.\n\nNSBuilder is software to build software. In fact, the \u201cNS\u201d (meaning NeXTSTEP)\ncan be found in existing software today - you\u2019ll find references to NSText in\nSafari and Mac developer documentation.\n\nTim Berners-Lee, using NSBuilder was able to create a working prototype of\nthis software in just 6 weeks\n\nHe called it: WorldWideWeb.\n\nWe finally have the software working the way it ran 30 years ago.\n\nBut our project is to replicate this browser so that you can try it out, and\nsee how web pages look through the lens of 1990.\n\nSo we enter some of our blog urls. https://remysharp.com, https://adactio.com\n\nBut HTTPS doesn\u2019t work. There was no HTTPS. There\u2019s no HTTP2. HTTP1.0 hadn\u2019t\neven been invented.\n\nSo I make a proxy. Effectively a monster-in-the-middle attack on all web\nrequests, stripping the SSL layer and then returning the HTML over the HTTP\n0.9 protocol.\n\nAnd finally, we see...\n\nWe see junk.\n\nWe can see the text content of the website, but there\u2019s a lot of HTML junk\ntags being spat out onto the screen, particularly at the start of the\ndocument.\n\n## Jeremy\n\n    \n    \n    <h1> <h2> <h3> <h4> <h5> <h6> <ol> <ul> <li> <p>\n\nThese tags are probably very familiar to you. You recognise this language,\nright?\n\nThat\u2019s right. It\u2019s SGML.\n\nSGML is the successor to GML, which supposedly stands for Generalised Markup\nLanguage. But that may well be a backronym. The format was created by\nGoldfarb, Mosher, and Lorie: G, M, L.\n\nSGML is supposed to be short for Standard Generalised Markup Language.\n\nA flavour of SGML was already being used at CERN when Tim Berners-Lee was\nworking on his World Wide Web project. Rather than create a whole new format\nfrom scratch, he repurposed what people were already familiar with. This was\nhis HyperText Markup Language, HTML.\n\nOne thing he did add was a tag called A for anchor.\n\nIts href attribute is short for \u201chypertext reference\u201d. Plop a URL in there and\nyou\u2019ve got a link.\n\nThe hypertext community thought this was a terrible way to make links.\n\nThey believed that two-way linking was vital. With two-way linking, the linked\nresource connects back to where the link originates. So if the linked resource\nmoved, the link would stay intact.\n\nThat\u2019s not the case with the World Wide Web. If the linked resource moves, the\nlink is broken.\n\nPerhaps you\u2019ve experienced broken links?\n\nWhen Tim Berners-Lee wrote the code for his WorldWideWeb browser, there was a\ngrand total of 26 tags in HTML. I know that we\u2019d refer to them as elements\ntoday, but that term wasn\u2019t being used back then.\n\nNow there are well over 100 elements in HTML. The reason why the language has\nbeen able to expand so much is down to the way web browsers today treat\nunknown elements: ignore any opening and closing tags you don\u2019t recognise and\nonly render the text in between them.\n\n## Remy\n\nThe parsing algorithm was brittle (when compared to modern parsers). There\u2019s\nno DOM tree being built up. Indeed, the DOM didn\u2019t exist.\n\nRemember that the WorldWideWeb was a browser that effectively smooshed\ntogether a word processor and network requests, the styling method was based\n(mostly) around adding margins as the tags were parsed.\n\nKimberly Blessing was digging through the original 7344 lines of code for the\nWorldWideWeb source. She found the code that could explain why we were seeing\njunk.\n\n    \n    \n    <link rel=\"...\"\n\nIn this case, when the parser encountered <link rel=\"...\" it would see the <.\n\n    \n    \n    <\n\n\u201cYes, a tag; let\u2019s slurp it up\u201d.\n\n    \n    \n    <li\n\nThen it reads li and the parser is thinking, \u201cThis looks like a list item,\ngood stuff.\u201d\n\n    \n    \n    <lin\n\nThen encounters the n (of link) and, excusing the paring algorithm because it\nwas the first, would then abort the style it was about to apply and promptly\nspit out the rest of the content on screen, having already swallowed up the\nfirst four characters: <lin.\n\n    \n    \n    k rel=\"stylesheet\" href=\"...\">\n\nWith that, we decided to make the executive design decision that we would\nstrip out any elements that were unknown to the original WorldWideWeb browser\n\u2014 link, script, video and img \u2014 which of course there was no image support in\nthe world\u2019s first browser.\n\nThis is the first little cheat we applied, so that the page would be more\npleasing to you, the visitor of our emulator. Otherwise you\u2019d be presented\nwith a lot of scary looking junk.\n\nSo now we have all the reference we need to be able to replicate this browser:\n\n  * The machine running the original operating system, which gives us colours, fonts, menus and so on.\n  * The browser itself, how windows behave, what\u2019s in the menus, what makes the experience unique to that period of time.\n  * And finally how it looks when we visit URLs.\n\nSo off we go.\n\n## Jeremy\n\nWhile Remy sets about recreating the functionality of the WorldWideWeb\nbrowser, Angela was recreating the user interface using CSS.\n\nInputs. Buttons. Icons. Menus. All with the exact borders, highlights and\nshadows used in the UI of the NeXT operating system, including having the\nscrollbar on the left side of windows.\n\nMeanwhile the rest of us were putting together an explanatory website to give\nsome backstory to what we were doing. I spent most of my time working on a\ntimeline showing thirty years before and thirty years after the original\nproposal for the web.\n\nThe WorldWideWeb browser inherited fonts from the NeXTSTEP operating system.\nIt mostly used Helvetica and a font called Ohlfs (created by Keith Ohlfs).\nHelvetica is ubiquitous but Ohlfs was never seen outside of a NeXT machine.\n\nOur teammates Mark and Brian were obsessed with accurately recreating the\ntypography. We couldn\u2019t use modern fonts which are vector based. We need\npixeliness.\n\nSo Mark and Brian took a screenshot of the NeXT machine\u2019s alphabet. With help\nfrom afar from font designer David Jonathan Ross, they traced each square\npixel in a vector program and then exported that as a web font. Now we\u2019ve got\na web font that deliberately isn\u2019t anti-aliased. It\u2019s a vector format that\nrecreates the look of a bitmap.\n\nPut the pixelly font together with the CSS interface elements and you\u2019ve got\nsomething that really looks like the old WorldWideWeb programme.\n\n## Remy\n\nThis is the final product of our work at CERN that week. A fully working\nWorldWideWeb emulator giving a reasonable close experience of what it was like\nto surf the web as if it were 30 years ago.\n\nThis is entirely in the browser and was written using:\n\n  * React,\n  * React Draggable for the windows and menus,\n  * React Hotkeys for keyboard combo shortcuts (we replicated the original OS as much as we could),\n  * idb-keyval for some local storage,\n  * Parcel for bundling.\n\nThese tools weren\u2019t chosen particular because they were the best tools for the\njob, but rather because they were the tools I knew that well enough that would\nhelp speed up my development process.\n\nWe worked hard to replicate the look and feel as much as we could. We even\nreplicated typos found throughout the WorldWideWeb app:\n\n> An excercise in global information availability\n\nWhy don\u2019t we see how it looks...\n\n## Jeremy\n\nThere\u2019s kind of irony in this in that it relies heavily on JavaScript. In\nfact, there\u2019s nothing there other than JavaScript. But of course the\nWorldWideWeb browser couldn\u2019t deal with JavaScript\u2014JavaScript hadn\u2019t been\ninvented yet. So the one URL that definitely wouldn\u2019t work in this emulator is\n...the emulator itself.\n\n## Remy\n\n(Which Jeremy was blaming me for.)\n\nThis is what you see when you visit the WorldWideWeb browser for the first\ntime. We can see we are welcomed by the universe of hypertext. We\u2019ve got these\nmenus over here that you can drag off and open panels (I always thought this\nwas an ordering bug but the operating system actually works like this).\n\nWe\u2019ll go ahead and open the Fronteers website. I go to \u201cDocument\u201d and then I\ngo to \u201cOpen from full document reference\u201d (because the word URL didn\u2019t exist).\nI\u2019m going to pop the Fronteers URL in here. And there it is. We\u2019ve got the\nFronteers website. Looks pretty good. (One of my favourite UI bits is this\nscrollbar on the left hand side instead of the right.)\n\nWe can follow the links. Actually one of my favourite features that was in\nthis original browser that we replicated was this \u201cNavigate\u201d menu. I\u2019ve just\nopened the first link in the document, but I can click on \u201cNext\u201d, and \u201cNext\u201d a\nbunch of times and it will cycle through each one of the links on the page\nthat I launched from and let me read all the pages that the Fronteers site\nlinks to (which I really like). I can go backwards and forwards, and so on.\n\nOne thing you might have already noticed is that there are no URLs here. And\nin fact, to view source, it was considered a kind of diagnostic option and it\nwas very very tucked away. The reason for this is that URLs\u2014and the source\nHTML or SGML\u2014was considered ugly and potentially a bad user experience.\n\nBut there\u2019s one thing about navigating here that\u2019s different. To open this\nlink, I had to double-click.\n\n## Jeremy\n\nThe WorldWideBrowser was more of a prototype than anything else. It\ndemonstrated the potential of the World Wide Web project, but it only worked\non NeXT machines.\n\nTo show how the World Wide Web could work on any computer, the second ever web\nbrowser was the Line Mode Browser, coded by Nicola Pellow. It had a very basic\ntext interface\u2014no clicking on links\u2014but it could be installed anywhere.\n\nLots of other geeks and nerds were working on their own web browsers, but it\nwas Marc Andreesen\u2019s Mosaic browser that really blew the doors open for the\nweb. It had a nice usable interface, and it (unilaterrally) introduced the\ninnovation of images on the web.\n\nAndreesen went on to found Netscape. The World Wide Web took off at an\nunprecedented rate. Microsoft brought out their Internet Explorer browser and\nstarted trying to catch up with Netscape. We had the browser wars. Later we\ngot even more browsers, like Safari and Chrome, while Netscape morphed into\nFirefox and Internet Explorer morphed into Edge. And the rest is history.\n\nBut all of these browsers were missing something that was in the original\nWorldWideWeb browser.\n\n## Remy\n\nThe reason I have to double-click on these links is that, when I do a single\nclick, it actually places the cursor. The cursor is blinking there on\n\u201cFronteers.\u201d And the reason I can place the cursor is because I can edit the\ndocument.\n\nI see Fronteers here is missing a heading. We want to welcome you all:\n\n> Welkom\n\nWe want to make that a heading. Let\u2019s style that. It\u2019s a heading.\n\nSo the browser was meant to edit documents. Let\u2019s put a bit of text here:\n\n> Great talks from Remy and Jeremy\n\n(forget about everyone else). Now if I want to create a link, I\u2019ll go ahead\nand navigate to Jeremy\u2019s site, https://adactio.com. I\u2019m going to do \u201cLink\u201d,\nthen \u201cMark all\u201d, which is a way of copying the URL to that window. Then I go\nback to the Fronteers website, select \u201cJeremy\u201d, and then do \u201cLink to marked.\u201d\nI can double-click on Jeremy\u2019s name it will open up his website.\n\nI can save this document as well. I\u2019m going to call it fronteers.html.\n\nLet\u2019s do a hard reboot\u2014a browser refresh. I come back to my machine a couple\nof days later, \u201cAh, the Fronteers page!\u201d. I\u2019m going to open that again, and it\nlinked to that really handsome guy in the sprite shirt. And yes, the links\nstill work.\n\nIn fact, this documentation that you see when the WorldWideWeb browser\nlaunches was written, styled, and linked using the WorldWideWeb browser. The\nWorldWideWeb browser was for a web that you could read and write.\n\nBut this didn\u2019t survive. It was a hurdle that was too tricky to propose or\nimplement across the different types servers that existed and for the upcoming\nbrowsers that were on the horizon.\n\nAnd so it wasn\u2019t standardised and doesn\u2019t exist today.\n\nBut this is an important lesson from the time: reducing complexity increases\nthe chances of mass adoption.\n\nIn the end, simplicity wins.\n\n## Jeremy\n\nI think that\u2019s a pattern we see over and over again, not just in the history\nof the web, but before the web. Simplicity wins.\n\nTed Nelson famously to this day thinks that the World Wide Web is weak sauce.\nIt didn\u2019t try to solve complex right out of the gate, like handling micro-\npayments.\n\nAs we saw, the hypertext community that one-way linking was ridiculous. But\nsimplicity does win out.\n\nUnfortunately that\u2019s why browsers ended up just being browsers. We got some of\nthe functionality back with wikis, content management systems, and social\nmedia to a certain extent. But I think it\u2019s still a bit of a shame that when I\nwant to browse a web page, I\u2019m using one piece of software\u2014the browser\u2014but\nwhen I want to make a web page, I\u2019m using another piece of software (or\nmultiple pieces of software) to get something on to the web.\n\nI feel like we lost something.\n\n## Remy\n\nWe head home after a week of hacking.\n\nWe were all invited back in March earlier this year for the Web@30 event that\nwas taking place to celebrate the web but also Sir Tim Berners-Lee.\n\nA few of us, Jeremy, Martin, and myself, went back to CERN for the the first\nleg of the event. There was even a video showing off our work as part of the\nmain conference. Jeremy and I even chased Tim Berners-Lee back to London at\nthe science museum like obsessive web fanboys. It was a lot of fun!\n\nThe night before I got a message from Jean-Fran\u00e7ois Groff, pictured here on\nthe right. JF Groff joined Tim Berners-Lee 30 years ago and created libwww (a\nprecursor to libcurl).\n\nThe message read:\n\n> Sitting with Tim right now. He loves your browser!\n\nCrushed it.\n\nIt\u2019s amazing that we were able to pull this off in a week just with text\neditors and information that\u2019s freely available. It\u2019s mind boggling how much\nwe can do today and how far it can reach. And it all started on that NeXTSTEP\nmachine 30 years ago.\n\nWhat I really loved about this project was working with this brilliantly old\ntechnology, digging around at the birth of browsers and the web.\n\nI wouldn\u2019t be stood here today, if it weren\u2019t for the web.\n\nI wouldn\u2019t even know Jeremy, if it weren\u2019t for the web.\n\nI wouldn\u2019t have a career, if it weren\u2019t for the web.\n\nI loved seeing how such old technology, the original WorldWideWeb browser was\nstill able to render my blog. Because I put content first, delivered markup\nfrom the server. The page rendered because HTML really is backward compatible.\n\nHTML and HTTP are just text. Nothing terribly fancy. Dare I say, beautifully\nsimple, and as we said before, simplicity wins the day.\n\nThis same simplicity is what allows us all to have the chance for an equal\nvoice. The web allows us to freely publish our thoughts and experiences. We\nhave to fight to protect that kind of web.\n\nAnd we\u2019ve got to work at keeping it simple.\n\n## Jeremy\n\nWhen we returned to CERN for the 30th anniversary celebrations, one of the\nother people there was the journalist Zeynep Tefepk\u00e7i.\n\nShe was on a panel along with Tim Berners-Lee, Robert Caillau, Jean-Fran\u00e7ois\nGroff, and Lou Montoulli. At the end of the panel discussion, she was asked:\n\n> What would you tell the next generation about how to use this wonderful\n> tool?\n\nShe replied:\n\n> If you have something wonderful, if you do not defend it, you will lose it.\n>\n> If you do not defend the magic and the things that make it wonderful, it\u2019s\n> just not going to stay magical by itself.\n\nDefend the simplicity and resilience that\u2019s so central to the web.\n\nI don\u2019t know about you, but I often feel that just trying to make a web page\nhas become far too complicated. But this is complexity that we have chosen\nwith our tools, processes, and assumptions. We\u2019ve buried the magic. The magic\nof linking web pages together. The magic of a working global hypertext system,\nwhere nobody needs to ask for permission to publish.\n\nTim Berners-Lee prototyped the first web browser, but the subsequent world\nwide web wasn\u2019t created by any one person. It was created by everyone. That.\nIs. Magical.\n\nI don\u2019t want the web to become a place where only an elite priesthood get to\nexperience the magic of creation. I\u2019m going to fight to defend the openness of\nthe world wide web. This is for everyone. Not just for everyone to use; it\u2019s\nfor everyone to create.\n\nOctober 16th, 2019\n\nAlso on Medium\n\nOlder \u00bb\n\n## Responses\n\n### Adactio Articles\n\nHow We Built The World Wide Web In Five Days adactio.com/articles/15975\n\n# Posted by Adactio Articles on Wednesday, October 16th, 2019 at 3:55pm\n\n### Andy\n\nJeremy Keith: Building the World Wide Web in Five Days \u2013 recreating the\noriginal CERN web browser using modern web technology.\n\n# Posted by Andy on Monday, October 21st, 2019 at 12:22am\n\n### Hidde\n\n\u201cHow We Built The World Wide Web In Five Days\u201d, the transcript, audio, video,\nslides, captions, everything, from @adactio and @rem\u2019s awesome @FronteersConf\ntalk adactio.com/articles/15975\n\n# Posted by Hidde on Monday, October 21st, 2019 at 6:44pm\n\n### Johan Bov\u00e9\n\nAmazing story! I found a typo in the article. In the sentence \u201cBack in our war\nroom in 2019, we finally work out that can use FTP to get the software\nacross.\u201d, there is a \u201cwe\u201d missing after \u201cwe finally work out that {we} can use\nFTP...\u201d.\n\n# Posted by Johan Bov\u00e9 on Monday, October 21st, 2019 at 7:07pm\n\n### Lobsters\n\nHow We Built The World Wide Web In Five Days via @loginn lobste.rs/s/v4cltj\n#programming adactio.com/articles/15975\n\n# Posted by Lobsters on Tuesday, October 22nd, 2019 at 12:40am\n\n### Andrea De Carolis\n\nQuesta pagina dovrebbe essere letta da ogni studente del mondo moderno.\nadactio.com/articles/15975\n\n# Posted by Andrea De Carolis on Tuesday, October 22nd, 2019 at 10:31am\n\n### About this site\n\nAdactio is the online home of Jeremy Keith, a web developer and author living\nand working in Brighton, England.\n\nGet in touch\n\n### Customise\n\nThis is the plain vanilla look.\n\n### Search\n\n### Subscribe\n\nYou can subscribe to the RSS feed of articles.\n\n### Videos\n\nCollections of conference talks on:\n\n  * Vimeo\n  * YouTube\n\n### Slides\n\nYou can view recent presentations.\n\nDownload PDF versions of the slides I've used to accompany presentations.\nBeware: they won't wont make much sense outside the context of the talks.\n\n  * Of Time And The Web\n  * \u201cWeb3\u201d and \u201cAI\u201d\n  * In And Out Of Style\n  * The State Of The Web\n  * Sci-fi & Me\n  * Design Principles For The Web\n  * Building\n  * The Layers Of The Web\n  * How We Built The World Wide Web In Five Days\n  * The Web Is Agreement\n  * Taking Back The Web\n  * Evaluating Technology\n  * Resilience\n  * <A>\n  * Enhance\n  * The Long Web\n  * Time\n  * The Power Of Simplicity\n  * Beyond Tellerrand\n  * There Is No Mobile Web\n  * Get Excited And Make Things With Science\n  * Of Time And The Network\n  * Paranormal Interactivity\n  * All Our Yesterdays\n  * One Web\n  * The Design of HTML5\n  * The System Of The World\n  * Creating Portable Social Networks with Microformats\n  * Soul\n  * In Praise of the Hyperlink\n  * Ajax Kung Fu\n\n### Elsewhere\n\n  * Get to Know Jeremy Keith (A Book Apart)\n  * Discovering Resilient Web Design with Jeremy Keith\n  * Jeremy Keith on the importance of creating products that last\n  * The Contributions of Others: A Session with Jeremy Keith\n  * Bouzoukis, Brighton and the Bigger Picture: Jeremy Keith Takes the Long View\n  * The Industry: An Interview with Jeremy Keith\n  * 10 questions about web performance \u2014 Jeremy Keith at Clearleft\n  * Web Standardistas: A Dozen Questions for Mr Keith\n  * Web Standards Group: Ten questions for Jeremy Keith\n\n\u00a9 1998 - 2024 Jeremy Keith.\n\n", "frontpage": false}
