{"aid": "40273526", "title": "How to work full-time without a salary, a.k.a. do FOSS", "url": "https://blog.vaxry.net/articles/2023-workingFullTime", "domain": "vaxry.net", "votes": 1, "user": "smartmic", "posted_at": "2024-05-06 11:52:49", "comments": 0, "source_title": "Vaxry's Blog", "source_text": "Vaxry's Blog\n\nVaxry's blog\n\nassembly?\n\nHow to work full-time without a salary, aka do FOSS.\n\n13 XII 2023\n\n4.3k\n\nAs much as I'd love to give advice on how to not work like me, I unfortunately\ndon't have much experience in that. So, instead, I can give you tips on how to\nwrite code full-time for (almost) free. Or, in other words, how to not go\ninsane from working in FOSS without an actual job paying you to do so.\n\n## FOSS does not pay\n\nUnless you are employed by a company to develop foss, or are an important\nmember of a group or foundation that is getting enough sponsorships from other\ncompanies, you are not going to get a stable income, or, more often than not,\nany.\n\nHowever, it's worth noting that I, amongst a few other people, believe that\nwriting FOSS with the goal of making money is a terrible mistake from the get-\ngo.\n\nMost FOSS projects get started because the author is bored, passionate about\ncoding, sees the lack of a tool they'd like, a masochist, an idiot, or all of\nthe above like I was with hyprland.\n\n## Starting your project\n\nBefore you begin writing code, you need to ask yourself: what do I want to\nwrite? Do you want to write something to learn to code? Have you found\nsomething underdeveloped and want to make a better alternative? Or maybe\nsomething completely new?\n\nThe most common reason is the first one, and that one usually makes beginner\nprogrammers the most confused, as they can't decide on what to write. Annoying\npeople might ask around \"what should I write to get to company XYZ?\". A bit\nless annoying people might ask \"what should I write to learn language XYZ?\".\nThe reality is, anything, really.\n\nWhat I usually recommend such people is to write a clone of something simple\nthey have used / use daily. Painting app, calculator, tetris, hentai reader,\nwhatever.\n\nSuch apps have a bunch of unique challenges that will teach you different\nareas and skills. Even better, many have a lot of room for improvement.\nCalculator done? Add expression parsing. Add equality solvers. Add more\nfunctions. Add graphs. Tons of shit to be done, really.\n\nWant to improve further? Write 3 different apps. Review the code of each. Find\nyour mistakes. Fix them. Rewrite shit better. Read others' code. Don't read\nboring books.\n\nWhen it comes to projects to fill a gap or improve something, I usually\nrecommend people to have a more-or-less good understanding of programming and\nthe language they are writing in. Many people try to write the next Windows\nafter just learning what a variable is. You will fail. And even if it will\n\"work\", it most likely will still be an utter technical failure with garbage\ncode, terrible performance and tons of fundamental design mistakes. (I mean,\nsee my old projects like Mosaic)\n\n## Early stages\n\nPlease, please, please. DESIGN first. So many development issues arise from\nlack of forethought in the design. Some poor decisions in Hyprland took a good\nfew days to fix and sizeable code reworks, while adding some new bugs that\nneeded to be ironed out. Some still remain. However, my experience with Hypr\nhas given me a few good lessons on what I did very poorly and fortunately at\nleast those didn't creep into Hyprland.\n\nIt's not about writing out every class and every struct and their members, but\nabout sketching out \"modules\" of your code and how they should interact. Think\nabout what you might want to exchange, how things might work with each other,\netc.\n\n## Later stages\n\nOnce your project takes off, if it does at all, you will have to manage a form\nof a community. Whether it will be on github, discord, myspace or whatever\nelse you might use, you will have to deal with the hell that is humans.\n\nWe, as programmers, are known to often have social skills comparable to a dead\nrat's. In such cases, we might be easily annoyed, swayed into poor decisions,\netc. However, you must remember that for your project, the most important\nthing is purely the code.\n\nYes, publicity, documentation, etc. are all important too, but ultimately,\nit's the code that people use.\n\nIn order of importance, code first, then documentation, then publicity.\n\nWhat I always tell people is if your program doesn't work on the first boot on\nthe user's computer, it's already failed in most cases. Obviously, sometimes\nyou can't do much (thanks nvidia) but you should strive to keep the defaults\njust working.\n\nAnother thing I found very helpful is assertiveness. DO NOT get swayed by what\npeople want. It's obviously important to consider how people are using your\nsoftware, but it's also worth noting that 99.9% of users reporting issues /\nrequesting features do not know shit about your code. In many cases, their\nidea might be a stupid one and you could make something different that would\nalso fit their needs. (or, well, tell them to adjust to a better workflow and\nstop being cringe)\n\nI also always advocate for staying off politics non-related to foss/your code.\nNo point in sharing your opinions on societal / geopolitical / religious\nissues on accounts that are tied to your code. You will only antagonize people\nwho disagree with you. If people try to get those opinions out of you\nforcefully, (unfortunately happens to me a fair bunch, and probably will to\nyou too if you get popular) simply continue to deny doing so. Those people are\njust seeking attention and drama.\n\n## Time management\n\nCode when you have free time and feel like it. Really. Some issues are\n5-minute fixes that you can code while you are in between playing cs2 matches\nwith your friends.\n\nI'd not recommend prioritizing FOSS over your personal stuff, though. You're\nworking for (almost) free, after all, and nobody is entitled to your support\nor labor, even if some assholes might act like they are.\n\nFix 1-2 5-minute bugs a day and you can also be called a \"responsive and\nactive developer\" :)\n\nThis might be a little secret of mine, but sometimes when I commit 7 times in\none day I spent like 25 minutes total coding that day. Some days I spend 5\nminutes on Hyprland, some I spend 5 hours. And people still believe I work all\nday all night! :P\n\n## Not burning out\n\nHonestly, I do not know how I have been coding hyprland daily for like... 1.5\nyears straight by now, without any days off. Maybe I am too much of a\nmasochist.\n\nAfter a while, it'll just become a routine. You check out what happens in your\nnotifications daily, you read them, respond, commit a change or two. If you\nfeel like it, you'll solve 10. If you don't, you'll solve a half of one.\n\nI think you either have to be a masochist or just love programming. Or both.\n\nSo, general advice, \"good luck\"\n\n## Closing thoughts\n\nFOSS is definitely not a place where you can become the next Mark the\nReptilian Zuckerberg or Elongated Muskrat. However, with some self-discipline\nand masochism / passion, you can make it more or less fun while your project\ngives you joy in the form of being enjoyed by users.\n\nAnd no, I am not planning on dropping Hyprland any time soon, I need to\nsurpass GNOME in popularity first. :)\n\nQuestions, comments, mistakes? Ping me a mail at vaxry [at] vaxry.net and I'll\nget back to ya.\n\nMade with literal caveman technology by vaxry, 2024.\n\n", "frontpage": false}
