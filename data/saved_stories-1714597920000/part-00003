{"aid": "40224394", "title": "Kmyth is a simple API for encrypting with the TPM", "url": "https://github.com/NationalSecurityAgency/kmyth", "domain": "github.com/nationalsecurityagency", "votes": 1, "user": "keepamovin", "posted_at": "2024-05-01 15:10:45", "comments": 0, "source_title": "GitHub - NationalSecurityAgency/kmyth", "source_text": "GitHub - NationalSecurityAgency/kmyth\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nNationalSecurityAgency / kmyth Public\n\n  * Notifications\n  * Fork 50\n  * Star 81\n\n### License\n\nApache-2.0 license\n\n81 stars 50 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# NationalSecurityAgency/kmyth\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nbit-benderAddressed Compiler Warnings for deprecated OpenSSL calls in SGX code\n(#...Mar 17, 202444f49d5 \u00b7 Mar 17, 2024Mar 17, 2024\n\n## History\n\n171 Commits  \n  \n### include\n\n|\n\n### include\n\n| Fix Compiler Warnings for use of Deprecated OpenSSL HMAC API (#193)| Mar 17,\n2024  \n  \n### logger\n\n|\n\n### logger\n\n| Refactor PCR-based policy-OR functionality (#187)| Dec 16, 2023  \n  \n### sgx\n\n|\n\n### sgx\n\n| Addressed Compiler Warnings for deprecated OpenSSL calls in SGX code (#...|\nMar 17, 2024  \n  \n### src\n\n|\n\n### src\n\n| Fix Compiler Warnings for use of Deprecated OpenSSL HMAC API (#193)| Mar 17,\n2024  \n  \n### test\n\n|\n\n### test\n\n| updated parse_exp_policy_string_pairs() and its tests (#191)| Feb 6, 2024  \n  \n### utils\n\n|\n\n### utils\n\n| updated parse_exp_policy_string_pairs() and its tests (#191)| Feb 6, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Improved 'Retrieve Key' into enclave protocol / Updated demonstration (...|\nNov 8, 2022  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Initial commit| Dec 2, 2019  \n  \n### Doxyfile\n\n|\n\n### Doxyfile\n\n| Moved files and deleted unnecessary sgx files (#120)| Jul 19, 2021  \n  \n### INSTALL.md\n\n|\n\n### INSTALL.md\n\n| removed indent (#155)| Jan 27, 2022  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Dec 2, 2019  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Fix Missing Installation of TPM Utility Headers (#192)| Mar 7, 2024  \n  \n### NOTICE\n\n|\n\n### NOTICE\n\n| Initial commit| Dec 2, 2019  \n  \n### README.md\n\n|\n\n### README.md\n\n| Feature/add policy or for authorization (#166)| Nov 21, 2022  \n  \n## Repository files navigation\n\n# Kmyth\n\nKmyth provides a simple mechanism for interacting with the TPM. The three core\ncomponents are:\n\n  * kmyth-seal: A tool that encrypts a file and protects the encryption key by sealing it to the TPM\n  * kmyth-unseal: A tool that reads a file (.ski) that has been kmyth-sealed and produces the original content\n  * kmyth-getkey: A tool that demonstrates the programatic api of kmyth-seal and kmyth-unseal by protecting a certificate private key used in a TLS connection\n\nIn addition Kmyth provides a simple API which allows developers to use the TPM\nwithout having to become experts in the underlying TPM libraries.\n\nTable of Contents\n\n  * Building and Installation\n\n  * Usage\n\n  * TPM-Tips and Notes\n\n  * Random-Sources\n\n## Building and Installation\n\nFor build and installation instructions see the INSTALL file.\n\n## Usage\n\n### kmyth-seal / kmyth-reseal\n\nThis tool will kmyth-seal a file using the TPM 2.0. In TPM parlance, 'sealing'\ntypically refers to encrypting the file using a key known only to that TPM\n(i.e., binding that data to a specific TPM) and imposing system state criteria\n(i.e., Platform Configuration Register or PCR constraints) on the decryption\nof that data. While kmyth-seal utilizes the TPM's capability to 'seal' and/or\n'bind' under the hood, it references the entire process used to create a .ski\nfile result. This includes:\n\n  * generation and use of a wrapping key to symmetrically encrypt the input data\n  * use of the TPM to derive the Kmyth SRK as a primary key\n  * use of the TPM to create a Kmyth SK that is sealed to the SRK with an authorization policy\n  * use of the TPM to seal the symmetric wrapping key to the SK and an authorization policy\n  * compilation of the encrypted secret being protected (e.g., CAPK), TPM sealed storage key, TPM sealed symmetric key, and the symmetric cipher specification into a .ski file to facilitate the ability to later kmyth-unseal it\n\n##### WARNING:\n\nBecause the TPM is used to encrypt the symmetric key that encrypts your data,\nthe encrypted data can only be decrypted using the same machine (and the same\nTPM) with which it was encrypted. If the data is moved to a different machine,\nif the PCRs used to encrypt it change, or if the TPM is reset, the data will\nbe permanently lost.\n\n    \n    \n    usage: ./bin/kmyth-seal [options] : ./bin/kmyth-reseal [options] options are: -a or --auth_string String used to create 'authVal' digest. Defaults to empty string (all-zero digest). -i or --input Path to file containing the data to be sealed. -o or --output Destination path for the sealed file. Defaults to <filename>.ski in the CWD. -f or --force Force the overwrite of an existing .ski file when using default output. -p or --pcrs_list List of TPM platform configuration registers (PCRs) to apply to authorization policy. Defaults to no PCRs specified. Encapsulate in quotes (e.g. \"0, 1, 2\"). -c or --cipher Specifies the cipher type to use. Defaults to 'AES/GCM/NoPadding/256' -g or --get_exp_policy Retrieves the PolicyPCR digest associated with the current value of pcr registers -e or --expected_policy Specifies an alternative digest value that can satisfy the authorization policy. -l or --list_ciphers Lists all valid ciphers and exits. -w or --owner_auth TPM 2.0 storage (owner) hierarchy authorization. Defaults to emptyAuth to match TPM default. -v or --verbose Enable detailed logging. -h or --help Help (displays this usage).\n\n*kmyth-reseal is a specialization of kmyth-seal where the -g / --get_exp_policy option is forced but otherwise all the options are available. One may think of 'kmyth-reseal ..' as identical functionality as 'kmyth-seal -g ..'. Use of the -g flag within kmyth-reseal while allowed, is superfluous.\n\n### kmyth-unseal\n\nThis tool will kmyth-unseal a file using the TPM 2.0. In TPM parlance,\n'unsealing' typically refers to decrypting 'sealed' input data using a key\nknown only to that TPM (i.e., the encrypted input is 'bound' to a specific\nTPM) while imposing system state criteria (i.e., Platform Configuration\nRegister or PCR constraints) on the ability to decrypt. While kmyth-unseal\nutilizes the TPM's capability to 'unseal' under the hood, it references the\nentire process used to recover Kmyth protected secret data (e.g., a CAPK) from\na .ski file input. This includes:\n\n  * recovery of data contained in the input .ski file\n  * use of the TPM and its Kmyth SRK to recover the Kmyth SK\n  * loading the recovered Kmyth SK into the TPM\n  * use of the TPM and loaded Kmyth SK to recover the symmetric wrapping key\n  * use of the symmetric wrapping key and the cipher specification to recover the 'kmyth-sealed' secret\n  * providing the recovered result to the user in the required format (e.g., a file)\n\n    \n    \n    usage: ./bin/kmyth-unseal [options] options are: -a or --auth_string String used to create 'authVal' digest. Defaults to empty string (all-zero digest). -i or --input Path to file containing data the to be unsealed -o or --output Destination path for unsealed file. This or -s must be specified. Will not overwrite any existing files unless the 'force' option is selected. -s or --stdout Output unencrypted result to stdout instead of file. -w or --owner_auth TPM 2.0 storage (owner) hierarchy authorization. Defaults to emptyAuth to match TPM default. -v or --verbose Enable detailed logging. -h or --help Help (displays this usage).\n\n### kmyth-getkey\n\nThis tool is used specifically for obtaining a key from a remote server.\n\n#### Preliminaries\n\nIn order to use kmyth-getkey some preliminary setup is required.\n\n  * You must have a key server listening for connections.\n\n  * The client running kmyth-getkey must have a private key sealed using kmyth-seal along with a corresponding certificate.\n\n  * The key server must be able to authenticate the client's certificate.\n\n    \n    \n    usage: ./bin/kmyth-getkey [options] options are: Client Information -- -i or --input Path to file containing the kmyth-sealed client's certificate private key. -l or --client Path to file containing the client's certificate. Server Information -- -t or --type Type of key server backend (e.g., 'kmip', 'simple'). -s or --server Path to file containing the certificate for the CA that issued the server cert. -c or --conn_addr The ip_address:port for the TLS connection. -m or --message An optional message to send the key server. Output Parameters -- -o or --output Output file path to write the key. If none is selected, key will be sent to stdout. Sealed Key Parameters -- -a or --auth_string String used to create 'authVal' digest. Defaults to empty string (all-zero digest) -w or --owner_auth TPM 2.0 storage (owner) hierarchy authorization. Defaults to emptyAuth to match TPM default. Misc -- -v or --verbose Detailed logging mode to help with debugging. -h or --help Help (displays this usage).\n\n## Notes\n\n### General TPM 2.0\n\n  * TPM 2.0 Software Stack (TSS2)\n\n    * The Feature API (FAPI) provides the highest-level of abstraction and was the last layer implemented (tss2-fapi).\n\n    * The Enhanced System API (ESAPI) is the next layer down. While less abstract than the FAPI, it hides much of the session management overhead and provides cryptographic function support. Our development efforts preceded the initial release of an implementation of this layer (tss2-esys).\n\n    * The System API (SAPI) provides the developer functionality that maps to the TPM 2.0 commands. The Kmyth TPM 2.0 code is currently based primarily on this layer (tss2-sys) of the TSS2 library.\n\n    * The TPM Command Transmission Interface (TCTI) represents the layer where the actual TPM commands and responses are exchanged. In the TSS2 library, this layer is implemented by the tss2-tcti component.\n\n    * TSS 2.0 Marshalling/Unmarshalling functionality is used to convert back and forth between C structures in the SAPI layer and the canonicalized commands/responses found in the TCTI layer. In the TSS2 library, these features are implemented by the tss2-mu component.\n\n    * The TPM Access Broker (TAB) layer controls multi-process synchronization for the TPM. The Resource Manager (RM) swaps TPM sessions and objects in and out of very limited TPM memory, as needed. An open source implementation of these two layers is provided by the TPM2 Access Broker & Resource Manager Daemon (tss2-abrmd).\n\n    * At the bottom of the software stack, the TPM device driver handles the physical transmission of data to and from the TPM. This is totally abstracted from our Kmyth code, however.\n\n### TPM 2.0 Simulator\n\n  * IBM's Software TPM 2.0 is \"an implementation of the TCG TPM 2.0 specification. It is based on the TPM specification Parts 3 and 4 source code donated by Microsoft, with additional files to complete the implementation.\"\n\n  * Microsoft provides the official TCG reference implementation of the TPM 2.0 Specification that includes a TPM 2.0 Simulator. The project provides Windows (Visual Studio) and Linux (autotools) build scripts.\n\n#### Default (typical) TPM 2.0 simulator settings:\n\n  * hostname : 127.0.0.1 (localhost)\n\n  * port : 2321 (TPM command)\n\n### TPM 2.0 Tools (Intel)\n\n  * the tpm2-abrmd binary is used to start the TPM Access Broker (TAB) and Resource Manager (RM) daemon.\n\n  * The tpm2_takeownership binary can be used to set (change) the TPM's owner (storage) and endorsement hierarchy passwords (empty string by default), as well as the lockout authorization value.\n\n### TPM 2.0 Resource Manager (Intel)\n\n  * Can be run on either emulator or device.\n\n  * Must be run in root if running on device.\n\n  * Must be in white list group or root to run.\n\n  * To white list a group do the following:\n\n    * In /etc/dbus-1/system.d/tpm2-abrmd.conf add:\n    \n        <policy group=\"[insert name of group here]\"> <allow own=\"com.intel.tss2.Tabrmd\"> </policy>\n\n    * Then reset connection (e.g., dzdo pkill -HUP dbus-daemon)\n  * Valgrind gives glib errors when connecting to resource manager. These are known errors present in the glib code. To supress only these errors do the following:\n\n    * Create a file, say libgio.supp, with the following text:\n    \n        { ignore_libglib_stuff Memcheck:Leak ... obj:*/libglib-2.0.so.* } { ignore_lib_gobject_stuff Memcheck:Leak ... obj:*/libgobject-2.0.so.* }\n\n    * Then run valgrind with option --suppressions=libgio.supp\n\n### TPM_SU options:\n\n#### TPM_SU_CLEAR:\n\n  * On TPM2_Shutdown() it indicates that the TPM should prepare for loss of power and save state required for an orderly startup TPM Reset.\n\n  * On TPM2_Startup() it indicates that the TPM should perform Reset or Restart.\n\n#### TPM_SU_STATE:\n\n  * On TPM2_Shutdown(), it indicates that the TPM should prepare for loss of power and save state required for an orderly startup (TPM Restart or Resume).\n\n  * On TPM2_Startup(), it indicates that the TPM should restore the state saved by the last TPM2_Shutdown().\n\n### TPM 2.0 Key Handles:\n\n  * 0x80XXXXXX - Transient Objects that will not stay loaded between boots.\n\n  * 0x81XXXXXX - Persistent Objects that should stay loaded if you reboot. the machine.\n\n### TPM 2.0 Keys:\n\n  * A key hierarchy is created in TPM 2.0 by deriving a primary key using the TPM2_CreatePrimary() command.\n\n    * A primary key has a \"type\" (e.g., must use one of the algorithms supported by the TPM.\n\n    * The unique parameter in the inPublic struct passed to TPM2_CreatePrimary() provides a mechanism for the caller to generate (derive) different primary keys for the same algorithm within the same TPM hierarchy.\n\n    * The outsideInfo parameter passed to TPM2_CreatePrimary() is a label for the primary key's creationData.\n\n    * \"TPM2.0 in Context\" (Proudler, Chen, and Dalton) quote:\n\n> > \"Other input fields in TPM2_CreatePrimary are there to enable production\n> of a 'creation' credential that is returned by the TPM2 with the SRK. The\n> creation credential describes the circumstances in which the SRK was\n> created: the current values of the selected PCRs (\"creationPCR\"), the name\n> of the parent key (the reserved handle of the SPS), plus an arbitrary label\n> (\"outsideInfo\") describing the SRK. Just like the SRK itself, this\n> credential can be recreated at any time by repeating the TPM2_CreatePrimary\n> command with the same parameters, as long as the SPS hasn't changed.\"\n\n  * A key hierarchy is populated (e.g., Kmyth creates storage keys and sealed data objects) by using the TPM2_Create() command. Non-primary key and data objects have the following objectAttributes:\n\n  * fixedTPM: SET prevents the key from being duplicated\n\n  * stClear: SET clears object if platform properly switched off\n\n  * fixedParent: SET only allows duplication with the parent (parent must also be duplicable).\n\n  * sensitiveDataOrigin: SET indicates privKey generated by TPM\n\n  * userWithAuth: CLEAR forces policy authorization for USER role\n\n  * adminWithPolicy: SET forces policy authorization for ADMIN role\n\n  * noDA: CLEAR enables dictionary attack protections\n\n  * encryptedDuplication: SET forces encryption of sensitive portion of an object when duplicated.\n\n  * restricted: SET means that key will refuse to operate on external data that mimics TPM-generated data. Storage keys (keys that are parents of other keys) must be restricted.\n\n  * decrypt: SET means key can be used for decryption\n\n  * sign: SET means key can be used for signatures\n\n## Security Guidance\n\n### Random-Sources\n\nThe most reliable and available source of random on a commercial machine is\nthe kernel entropy accumulator. On modern UNIX/Linux machine this takes the\nform of /dev/random and /dev/urandom. These random sources have the advantage\nof being able to collect entropy from a variety of sources only available to\nthe kernel. If correctly configured, they can carry entropy across a reboot\ncycle.\n\nWe use OpenSSL's RAND_bytes to generate our wrapping key. It seeds from\n/dev/urandom.\n\nThe user should be aware of the slow start issue present in kernel entropy\naccumulators. When a random number generator (RNG) is first configured, it has\nvery little information available which cannot be guessed. Various mitigations\nfor this problem are available, among them, writing a fresh random seed from\nsome known good source to the entropy accumulator by writing to /dev/random.\nAs the RNG continues to run, and more system input is fed in (interrupt\ntimings, packet data, keyboard activity,...), anyone who is not in a position\nto see all of the input will eventually lose track of the internal state of\nthe RNG.\n\n### Local Storage of Sensitive Material\n\nFor some applications, sensitive material must be available through the\noperating system's file IO interface; for example, one may need operational\nkey accesible to processes that expect to read key material from a file. One\noption for limiting the exposure of sensitive material is to store it in a\nfile in the ramfs RAM file system. We do not recommend the tmpfs RAM file\nsystem, because tmpfs may use swap space.\n\n## About\n\nNo description, website, or topics provided.\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\nCustom properties\n\n### Stars\n\n81 stars\n\n### Watchers\n\n11 watching\n\n### Forks\n\n50 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 14\n\n## Languages\n\n  * C 94.3%\n  * Makefile 4.3%\n  * C++ 1.2%\n  * Shell 0.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
