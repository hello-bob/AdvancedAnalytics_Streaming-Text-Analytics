{"aid": "40279922", "title": "Burpscript \u2013 Python3/JavaScript scripting support for Burp", "url": "https://github.com/ivision-research/burpscript", "domain": "github.com/ivision-research", "votes": 1, "user": "fbcd84f4335e568", "posted_at": "2024-05-06 21:51:51", "comments": 0, "source_title": "GitHub - ivision-research/burpscript", "source_text": "GitHub - ivision-research/burpscript\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nivision-research / burpscript Public\n\n  * Notifications\n  * Fork 0\n  * Star 3\n\n### License\n\nMPL-2.0 license\n\n3 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# ivision-research/burpscript\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndrosseau-carveAdd beta noticeMay 6, 2024f544007 \u00b7 May 6, 2024May 6, 2024\n\n## History\n\n5 Commits  \n  \n### examples\n\n|\n\n### examples\n\n| burpscript| May 3, 2024  \n  \n### src\n\n|\n\n### src\n\n| burpscript| May 3, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| burpscript| May 3, 2024  \n  \n### FILTER_EXPRESSIONS.md\n\n|\n\n### FILTER_EXPRESSIONS.md\n\n| Fix FILTER_EXPRESSIONS.md| May 6, 2024  \n  \n### LICENSE.txt\n\n|\n\n### LICENSE.txt\n\n| burpscript| May 3, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Add beta notice| May 6, 2024  \n  \n### build.gradle.kts\n\n|\n\n### build.gradle.kts\n\n| burpscript| May 3, 2024  \n  \n### build.sh\n\n|\n\n### build.sh\n\n| Fix build relying on nonexistent gradlew| May 6, 2024  \n  \n### flake.lock\n\n|\n\n### flake.lock\n\n| burpscript| May 3, 2024  \n  \n### flake.nix\n\n|\n\n### flake.nix\n\n| burpscript| May 3, 2024  \n  \n### settings.gradle.kts\n\n|\n\n### settings.gradle.kts\n\n| burpscript| May 3, 2024  \n  \n## Repository files navigation\n\n# Burpscript\n\nBurpscript adds dynamic scripting abilities to Burp Suite, allowing you to\nwrite scripts in Python or Javascript to manipulate HTTP requests and\nresponses.\n\nFeatures:\n\n  * Python 3 and JavaScript support\n  * Manipulate requests and responses from the Proxy or other tools such as the Repeater\n  * Conditionally drop requests & responses, or send them to the Intercept tab for manual inspection\n  * Hot reloading of scripts on file change\n  * Quickly enable/disable scripts\n  * Built-in cryptographic utilities\n  * Filter DSL for easily determining if the plugin's registered handlers should handle a request or response\n\n## Beta Notice\n\nPlease note that, while we use this tool internally, it is still beta software\nand there may be bugs. Please file issues if/when you encounter a bug!\n\n## Installation\n\nThe best way to build this project is to enter the nix development environment\nand then use the build script.\n\n    \n    \n    $ nix develop # Build with Python support $ ./build.sh # Build with both Python and JavaScript Support $ ./build.sh --js --python\n\nThe resulting jar file will be in build/libs/burpscript-plugin-<version>.jar,\nwhich you can then install into Burp Suite through the Extensions -> Add\nwindow. For more information, see Managing extensions.\n\nTo use this plugin, you'll need to launch burp with the\n-Dpolyglotimpl.DisableClassPathIsolation=true JVM arg (see below for an\nexample). Sadly this also disables optimizations (oracle/graaljs#764)\n\n### Linux\n\nFor a typical Burp installation at /path/to/burp/, add\n-Dpolyglotimpl.DisableClassPathIsolation=true on its own line to the\n/path/to/burp/BurpSuitePro.vmoptions file.\n\n### MacOS\n\nAdd -Dpolyglotimpl.DisableClassPathIsolation=true on its own line to\n/Applications/Burp Suite Professional.app/Contents/vmoptions.txt.\n\n## Usage\n\nBurpscript supports writing scripts in JavaScript or Python. When a script is\nadded, Burpscript will call specially named handler functions defined in the\nscript when a request or response is received, allowing scripts an opportunity\nto manipulate them as they pass through the proxy. Scripts can also define\nfilter expressions using a Lisp-like DSL to determine which requests and\nresponses they should be applied to.\n\nReferences\n\n  * The examples directory\n  * The ScriptHttpRequest and ScriptHttpResponse classes. These define the API that scripts can use to modify requests and responses.\n  * Burp Montoya API Javadoc. In particular, HttpRequestToBeSent and HttpResponseReceived.\n\n### Python\n\nPython scripts look like this. Examples can be found in the examples\ndirectory, and for more information about how Python behaves when interacting\nwith Java, see the GraalVM interop reference.\n\n    \n    \n    REQ_FILTER = \"\"\"...\"\"\" RES_FILTER = \"\"\"...\"\"\" def initialize(): print(\"Initialized Python script\") def cleanup(): print(\"Cleaning up Python script\") def on_request(req): print(f\"{req.method()} - {req.url()}\") return req.withBody(\"Modified\") def on_response(res): print(f\"{res.statusCode()} - {res.reasonPhrase()}\")\n\n### JavaScript\n\nScripts can be written as either ES6 or CommonJS style modules. Examples can\nbe found in the examples directory, and for more information about how\nJavaScript behaves when interacting with Java, see the GraalVM interop\nreference.\n\nScripts with the file extension .mjs, are treated as ES6 modules, where\nexported handlers look like this:\n\n    \n    \n    export const RES_FILTER = \"...\" export const REQ_FILTER = \"...\" export function initialize() { console.log(\"Initialized the JavaScript module\"); } export function cleanup() { console.log(\"Cleaning up JavaScript\"); } export function onRequest(req) { console.log(`${req.method()} - ${req.url()}`) return req.withBody(\"Modified\") } export function onResponse(res) { console.log(`${res.statusCode()} - ${res.reasonPhrase()}`); return res; }\n\nScripts with the extension.js, are treated as CommonJS modules, where handlers\nare exported with module.exports:\n\n    \n    \n    module.exports = { RES_FILTER: \"...\", REQ_FILTER: \"...\", initialize: function() { ... }, cleanup: function() { ... }, onRequest: function(req) { ... }, onResponse: function(res) { ... } }\n\n### Addons\n\nScripts may also define handlers using an \"Addon\" style, similar to Mitmproxy.\nEach addon can define their own filter expressions and handlers. This is\nuseful for organizing complex scripts or sharing addons between different\nscripts.\n\nPython\n\n    \n    \n    class AddonOne: REQ_FILTER = \"...\" def on_request(self, req): ... class AddonTwo: RES_FILTER = \"...\" def on_response(self, res): ... addons = [AddonOne(), AddonTwo()]\n\nJavaScript\n\n    \n    \n    class AddonOne { // The methods must be declared this way onRequest = function(req) { ... } } class AddonTwo { RES_FILTER = \"...\" onResponse = function(res) { ... } } export const addons = [new AddonOne(), new AddonTwo()]\n\n### Script Globals\n\nScripts have the following global parameters available:\n\n  * api - a MontoyaApi instance\n  * helpers - an instance of ScriptHelpers\n  * log - an instance of ScriptLogger\n\n### Printing\n\nScripts can print messages to the Burpscript Extension tab using the log\nobject, or with console.log in JavaScript, and print in Python. Regular\nmessages go to the Output tab, and errors and exceptions go to the Errors tab\n(see Managing extensions)\n\nPython\n\n    \n    \n    log.info(\"This is an info message\") log.error(\"This is an error message\", Exception(\"Oh no!\")) # Goes to Errors tab print(\"This is an info message\")\n\nJavaScript\n\n    \n    \n    log.info(\"This is an info message\"); log.error(\"This is an exception\", new Error(\"On no!\")); // Goes to Errors tab console.log(\"This is an info message\"); console.error(\"This is an error message\"); // Goes to Errors tab\n\n### Using Java\n\nJava classes can also be imported and used directly from scripts. In python\nthe java module can be imported. In JavaScript, the Java global object is\navailable. These can be used to import Java types and use them in scripts.\n\nPython\n\n    \n    \n    import java HttpParameter = java.type(\"burp.api.montoya.http.message.params.HttpParameter\") HttpParameterType = java.type(\"burp.api.montoya.http.message.params.HttpParameterType\") def on_request(req): return req.withParameter( HttpParameter.parameter(\"__carve\", \"injected\", HttpParameterType.URL) )\n\nJavaScript\n\n    \n    \n    const HttpParameter = Java.type(\"burp.api.montoya.http.message.params.HttpParameter\") const HttpParameterType = Java.type(\"burp.api.montoya.http.message.params.HttpParameterType\") export function onRequest(req) { return req.withParameter( HttpParameter.parameter(\"__carve\", \"injected\", HttpParameterType.URL) ) }\n\n### Importing\n\nScripts can import other modules that reside in the same directory.\n\nPython\n\n    \n    \n    # common.py def do_something(): ...\n    \n    \n    # script.py from common import do_something\n\nJavaScript (ES6)\n\n    \n    \n    // common.mjs export function doSomething() { ... }\n    \n    \n    // script.mjs import { doSomething } from './common.mjs'\n\n### Limitations\n\nThere are some limitations with the polyglot API and how values are handled\nbetween the script and JVM. If you run into issues with this, it may be\ndifficult to debug exactly what has gone wrong. We're working on helper\nfunctions to make these issues easier to deal with. Also, sometimes import\nstatements in Python don't work. If you run into such issues, sometimes it may\nbe easier to use helpers.exec(...) or helpers.execStdin(...).\n\n## Filter Expressions\n\nFilter expressions are a Lisp-like DSL for selecting requests/responses that\nshould be forwarded on to a script. See FILTER_EXPRESSIONS.md for\ndocumentation.\n\n## Configuration\n\nConfiguration is available via the\n${XDG_CONFIG_HOME:-$HOME/.config}/burpscript/conf.json file. An example config\nis shown in the examples dir.\n\n## About\n\nNo description, website, or topics provided.\n\n### Resources\n\nReadme\n\n### License\n\nMPL-2.0 license\n\nActivity\n\nCustom properties\n\n### Stars\n\n3 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * drosseau-carve Danny Rosseau (Carve Systems)\n  * matt-carve Matthew Waddell (ivision)\n\n## Languages\n\n  * Kotlin 98.9%\n  * Other 1.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
