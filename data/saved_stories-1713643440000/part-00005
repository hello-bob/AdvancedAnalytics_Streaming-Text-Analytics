{"aid": "40095869", "title": "GoFetch: Will People Ever Learn?", "url": "https://microkerneldude.org/2024/04/18/gofetch-will-people-ever-learn/", "domain": "microkerneldude.org", "votes": 1, "user": "vimes656", "posted_at": "2024-04-20 08:54:23", "comments": 0, "source_title": "GoFetch: Will people ever learn?", "source_text": "GoFetch: Will people ever learn? | microkerneldude\n\nSkip to content\n\nFollow:\n\n    RSS\n    Twitter\n\nmicrokerneldude\n\nRandom rants and pontifications by Gernot Heiser\n\n  * Home\n  * About\n  * academia\n  * CSIRO\n  * embedded systems\n  * Open Kernel Labs\n  * operating systems and virtualization\n  * politics and society\n  * safety and security\n  * seL4\n  * Trustworthy Systems\n\nTags\n\ncybersecurity, security, time protection\n\n# GoFetch: Will people ever learn?\n\n2024/04/18\n\nLast month researchers reported that the data memory-dependent prefetcher\n(DMP) on Apple M1 chips can be used to break encryption. (And there are\nindications that similar attacks might be possible on Intel silicon.)\n\nTriggering the prefetcher results in greatly reduced access latency, i.e. a\nleak (from the GoFetch paper).\n\nThe researchers observe that any (64-bit) aligned data word, whose value\nmatches bits [53:32] of its own address, is considered a pointer by the DMP.\nThe DMP then speculatively dereferences this putative pointer and loads the\ntarget word into the (shared) L2 cache. The attack, dubbed GoFetch, is pretty\ningenious: By feeding specific data (as cleartext) to an encryption process,\nand using prime&probe for observing the L2 state (as indicated in the figure),\nthey can determine bits of the secret key, based on whether the DMP\nprefetches.\n\nThere are a number of interesting (in the Chinese sense?) observations to make\nhere.\n\n## The mechanism was known to pose security problems\n\n... but that problem didn\u2019t seem to be taken seriously, presumably because no\nrealistic attack was demonstrated. Specifically, the Augury work, published\ntwo years earlier, showed that DMPs could lead to disclosing memory contents,\nbut the responsible people (in this case, Apple) didn\u2019t seem to care.\n\nUnfortunately that\u2019s a consistent pattern of denial that ranges across the\ncommunity and industry: Some academics point out that there\u2019s a problem, but\nyeah, my system hasn\u2019t actually been hacked, so I\u2019ll just ignore it.\n\nI\u2019ve been through this myself. I\u2019ve long been worried about exploiting\nmicroarchitecture for covert channels, and demonstrated how they could be\nsystematically prevented, the approach we ended up calling time protection.\nOur argument was that if there\u2019s a covert channel (allowing a Trojan to\nintentionally leak data) then that\u2019s a problem. Because most systems execute\nplenty of untrusted code that must be assumed to contain such a Trojan, or\ncould be highjacked into serving as a Trojan. (And, besides, any covert-\nchannel mechanism has a high risk that someone will find a side channel, i.e.\nunintentional leakage, based on the same underlying mechanism.)\n\nThis only changed with the Spectre attacks: Spectre uses speculative execution\nto construct a Trojan from gadgets in innocent code, which then uses the\ncovert channel to extract information. (And most people falsely talk about\nSpectre using a side channel, which doesn\u2019t help raising awareness of this\nproblem.)\n\nObviously, taking security seriously means dealing with problems proactively,\nnot only when the horse has bolted. But that\u2019s not how industry and our\ndiscipline seems to operate.\n\n## Time protection defeats the GoFetch attack (and many others)\n\nTime protection (here colouring the L2 cache) is effective in closing\nchannels. Top is the unmitigated channel, bottom with time protection applied.\nThese are channel matrices, any fluctuation along a horizontal cut indicates a\nchannel.\n\nThe core idea of time protection is to spatially or temporally partition any\ncontented microarchitectural resource between security domains. In the case of\nthe L2 cache (used in the GoFetch exploit) this means partitioning between\nconcurrent processes (eg. by cache colouring). This means that the attacker\ncan only influence the state of its own cache partition (same holds for the\nvictim, i.e. the encryption process in the case of GoFetch) and the\nprime&probe attack fails.\n\nThere will, no doubt, appear variants of GoFetch exploiting different parts of\nthe microarchitecture (as there are by now several variants of Spectre), but\ntime protection will stop them all, as it is a principled approach that\ncompletely prevents any microarchitectural timing channels between security\ndomains.\n\nNote that we also found that complete time protection is not possible on\ncontemporary processors, as they lack a mechanism for resetting all\nmicroarchitectural state that cannot be spatially partitoned (that includes\nall on-core state). However, our collaborators at ETH Zurich demonstrated\n(constructively, by implementing it as a new instruction, fence.t, in an open-\nsource RISC-V processor core) that adding such a mechanism is easy and cheap.\nSo, why not just do it?\n\n## ... But people keep inventing ad-hoc point solutions\n\nWhile time protection is a principled approach to completely prevent\nmicroarchitectural leakage, and thus defeats the whole class of attacks that\ndepend on them (which includes Spectre, GoFetch and many others, but also any\nTrojan in untrustworthy code), people keep inventing ad-hoc band-aids for\nspecific attacks, which end up making hardware more complex (and thus error-\nprone) and only end up shifting the attackers\u2019 efforts to the next\nbattlefield. A great example of this is speculation-taint tracking, which\nmassively complicates hardware, but won\u2019t prevent new attacks (eg is unlikely\nto stop GoFetch).\n\nIt\u2019s disheartening that the authors of the GoFetch paper fall in the same\ntrap. They write:\n\n> Longer term, we view the right solution to be to broaden the hardware-\n> software contract to account for the DMP. At a minimum, hardware should\n> expose to software a way to selectively disable the DMP when running\n> security-critical applications.\n\nIn other words, expose DMP at the HW-SW interface, making it (and software\nbased on it) massively more complex, just for dealing with one specific attack\nvector.\n\nI\u2019m all in favour of improving the HW-SW contract. In fact, we have argued for\nyears that this is needed!\n\nBut rather than exposing more implementation details that limit the\nflexibility of hardware designers, the extension should be minimal and high-\nlevel, as we have proposed: Identify which resources can be spatially\npartitioned (and how), and providing a mechanism for resetting all\nmicroarchitectural resources that cannot be spatially partitioned. The latter\nis exactly that fence.t is \u2013 a simple, principled mechanism that can be used\nto knock out a whole class of attacks.\n\n## And some shocking revelations by the OpenSSL maintainers\n\nMuch of the above is what I\u2019ve come to expect. Annoying, but unsurprising.\n\nWhat actually shocked me was this quote from the Disclosure section of the\nGoFetch paper:\n\n> OpenSSL reported that local side-channel attacks (i.e., ones where an\n> attacker process runs on the same machine) fall outside of their threat\n> model.\n\nRead this again...\n\nTaken at face value, this means that OpenSSL is not fit for purpose if you\nhave any untrusted code on your machine, i.e. any code that you cannot be sure\nnot to be malicious. This includes any third-party code that could contain a\nTrojan, or any code that has a bug that allows it to be highjacked.\n\nThink about it. This means that OpenSSL is not fit for purpose on:\n\n  * a cloud hosting service that co-locates VMs/services from different users on the same physical machine (i.e. almost all of them)\n  * your phone that almost certainly runs apps that come from developers you cannot trust to produce bug-free code\n  * your laptop that almost certainly runs programs that come from developers you cannot trust to produce bug-free code\n  * most likely your car\n\nThe mind boggles.\n\n## Houston, we have a problem\n\nDoes anyone care?\n\n### Share this:\n\n  * Twitter\n  * Facebook\n\nLike Loading...\n\nFrom \u2192 safety and security\n\nLeave a Comment\n\n### Leave a comment Cancel reply\n\nML accelerates the cyber arms race \u2014 we need real security more than ever \u00bb\n\n  * ## Recent Posts\n\n    * GoFetch: Will people ever learn?\n    * ML accelerates the cyber arms race \u2014 we need real security more than ever\n    * TS in 2022: We\u2019re Back!\n    * A Story of Betrayal: CSIRO\u2019s War On TS\n    * Dishonest and Contradictory: Fact-Checking CSIRO\u2019s Communications about the Trustworthy Systems Group\n    * Where is seL4 Heading?\n    * seL4 Integrity Enforcement Proved for RISC-V\n    * There\u2019s more to it, Dr Marshall!\n    * \u201cTrustworthy Systems Research is Done\u201d \u2013 Are You Kidding, CSIRO?\n    * seL4 on RISC-V Verified to Binary Code\n  * ## Categories\n\n    * academia\n    * CSIRO\n    * embedded systems\n    * Open Kernel Labs\n    * operating systems and virtualization\n    * politics and society\n    * safety and security\n    * seL4\n    * Trustworthy Systems\n  * ## Archives\n\n    * April 2024\n    * November 2022\n    * March 2022\n    * February 2022\n    * November 2021\n    * September 2021\n    * August 2021\n    * July 2021\n    * May 2021\n    * November 2020\n    * June 2020\n    * April 2020\n    * March 2020\n    * December 2019\n    * November 2019\n    * August 2019\n    * March 2019\n    * August 2018\n    * February 2018\n    * June 2016\n    * April 2016\n    * April 2015\n    * February 2015\n    * December 2014\n    * November 2014\n    * October 2014\n    * September 2014\n    * August 2014\n    * July 2014\n    * May 2013\n    * April 2013\n    * March 2013\n    * October 2012\n    * September 2012\n    * June 2012\n    * February 2012\n    * January 2012\n    * September 2011\n    * November 2010\n    * October 2010\n    * August 2009\n    * July 2009\n    * April 2009\n    * March 2009\n    * February 2009\n    * July 2008\n    * April 2008\n    * March 2008\n    * February 2008\n    * January 2008\n\nBlog at WordPress.com.\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * microkerneldude\n    * Already have a WordPress.com account? Log in now.\n\n  * Privacy\n  *     * microkerneldude\n    * Customize\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\nLoading Comments...\n\n%d\n\n", "frontpage": false}
