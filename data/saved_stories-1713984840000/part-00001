{"aid": "40142643", "title": "Build standalone PHP binary including PHP project code", "url": "https://github.com/crazywhalecc/static-php-cli", "domain": "github.com/crazywhalecc", "votes": 1, "user": "vincent_s", "posted_at": "2024-04-24 10:26:38", "comments": 0, "source_title": "GitHub - crazywhalecc/static-php-cli: Build standalone PHP binary on Linux, macOS, FreeBSD, Windows, with PHP project together, with popular extensions included.", "source_text": "GitHub - crazywhalecc/static-php-cli: Build standalone PHP binary on Linux,\nmacOS, FreeBSD, Windows, with PHP project together, with popular extensions\nincluded.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ncrazywhalecc / static-php-cli Public\n\n  * Notifications\n  * Fork 161\n  * Star 1.1k\n\nBuild standalone PHP binary on Linux, macOS, FreeBSD, Windows, with PHP\nproject together, with popular extensions included.\n\nstatic-php.dev\n\n### License\n\nMIT license\n\n1.1k stars 161 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# crazywhalecc/static-php-cli\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n13 Branches\n\n28 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndunglasandcrazywhaleccfix: use C++ 17 compiler for ICU (#414)Apr 22,\n20246b96feb \u00b7 Apr 22, 2024Apr 22, 2024\n\n## History\n\n1,048 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| fix: use C++ 17 compiler for ICU (#414)| Apr 22, 2024  \n  \n### bin\n\n|\n\n### bin\n\n| Fix windows curl build (#368)| Mar 5, 2024  \n  \n### config\n\n|\n\n### config\n\n| Fix libuuid build source (#411)| Apr 12, 2024  \n  \n### src\n\n|\n\n### src\n\n| fix: use C++ 17 compiler for ICU (#414)| Apr 22, 2024  \n  \n### tests/SPC\n\n|\n\n### tests/SPC\n\n| add dependency util tests| Feb 16, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Add package management| Feb 18, 2024  \n  \n### .php-cs-fixer.php\n\n|\n\n### .php-cs-fixer.php\n\n| fix #307 (#308)| Jan 5, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| update LICENSE| Mar 18, 2023  \n  \n### README-en.md\n\n|\n\n### README-en.md\n\n| Decided to change README default language to English| Oct 26, 2023  \n  \n### README-zh.md\n\n|\n\n### README-zh.md\n\n| Add curl and ssh2 support for windows (#348)| Feb 22, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Add curl and ssh2 support for windows (#348)| Feb 22, 2024  \n  \n### box.json\n\n|\n\n### box.json\n\n| update composer.lock| Feb 16, 2024  \n  \n### captainhook.json\n\n|\n\n### captainhook.json\n\n| update composer and readme| Mar 18, 2023  \n  \n### composer.json\n\n|\n\n### composer.json\n\n| Fix latest libsodium compatibility (#388)| Mar 16, 2024  \n  \n### composer.lock\n\n|\n\n### composer.lock\n\n| update composer| Feb 16, 2024  \n  \n### ext-support.md\n\n|\n\n### ext-support.md\n\n| change all related url to static-php.dev| Sep 26, 2023  \n  \n### phpstan.neon\n\n|\n\n### phpstan.neon\n\n| fix phpstan| Jan 11, 2024  \n  \n## Repository files navigation\n\n# static-php-cli\n\nstatic-php-cli is a powerful tool designed for building static, standalone PHP\nruntime with popular extensions.\n\nStatic PHP built by static-php-cli supports cli, fpm, embed and micro SAPI.\n\nstatic-php-cli also has the ability to package PHP projects along with the PHP\ninterpreter into one single executable file.\n\n## Features\n\nstatic-php-cli (you can call it spc) has a lot of features:\n\n  * \ud83d\udc5c Build single-file php executable, without any dependencies\n  * \ud83c\udf54 Build phpmicro self-extracted executable (glue php binary and php source code into one file)\n  * \ud83d\udc8a Automatic build environment checker (Doctor module)\n  * \u26a1 Linux, macOS, FreeBSD, Windows support\n  * \ud83d\udd27 Configurable source code patches\n  * \ud83d\udcda Build dependency management\n  * \ud83d\udce6 Provide spc own standalone executable (built by spc and box)\n  * \ud83d\udd25 Support many popular extensions\n  * \ud83d\udcbe UPX integration (significantly reduces binary size)\n\nSingle-file standalone php-cli:\n\nCombine PHP code with PHP interpreter using phpmicro:\n\n## Documentation\n\nThe current README contains basic usage. For all the features of static-php-\ncli, see https://static-php.dev .\n\n## Direct Download\n\nIf you don't want to build or want to test first, you can download example\npre-compiled artifact from Actions, or from self-hosted server.\n\nBelow are several precompiled static-php binaries with different extension\ncombinations, which can be downloaded directly according to your needs.\n\n  * Extension-Combination - common: common contains about 30+ commonly used extensions, and the size is about 22MB.\n  * Extension-Combination - bulk: bulk contains 50+ extensions and is about 70MB in size.\n  * Extension-Combination - minimal: minimal contains 5 extensions and is about 6MB in size.\n\nFor Windows systems, there are currently fewer extensions supported, so only\ncli and micro that run the minimum extension combination of SPC itself are\nprovided: Extension-Combination - spc-min.\n\n## Build\n\n### Compilation Requirements\n\nYou can say I made a PHP builder written in PHP, pretty funny. But static-php-\ncli runtime only requires an environment above PHP 8.1 and extensions\nmentioned below.\n\n  * PHP >= 8.1 (This is the version required by spc itself, not the build version)\n  * Extension: mbstring,tokenizer,phar\n  * Supported OS with curl and git installed\n\nHere is the supported OS and arch, where represents support for GitHub Action\nbuilds, \ud83d\udcbb represents support for local manual builds, and blank represents not\ncurrently supported.\n\nx86_64| aarch64  \n---|---  \nmacOS| \ud83d\udcbb| \ud83d\udcbb  \nLinux| \ud83d\udcbb| \ud83d\udcbb  \nWindows| \ud83d\udcbb  \nFreeBSD| \ud83d\udcbb| \ud83d\udcbb  \n  \nCurrently supported PHP versions for compilation:\n\n> \u26a0\ufe0f supported but not maintained\n>\n> \u2714\ufe0f supported\n>\n> \u274c not supported\n\nPHP Version| Status| Comment  \n---|---|---  \n7.2| \u274c  \n7.3| \u26a0\ufe0f| phpmicro and some extensions not supported on 7.x  \n7.4| \u26a0\ufe0f| phpmicro and some extensions not supported on 7.x  \n8.0| \u2714\ufe0f| PHP official has stopped maintenance of 8.0  \n8.1| \u2714\ufe0f  \n8.2| \u2714\ufe0f  \n8.3| \u2714\ufe0f  \n  \n### Supported Extensions\n\nPlease first select the extension you want to compile based on the extension\nlist below.\n\n  * Supported Extension List\n  * Command Generator\n\n> If an extension you need is missing, you can submit an issue.\n\nHere is the current planned roadmap for extension support: #152 .\n\n### Build Online (using GitHub Actions)\n\nUse GitHub Action to easily build a statically compiled PHP, and at the same\ntime define the extensions to be compiled by yourself.\n\n  1. Fork me.\n  2. Go to the Actions of the project and select CI.\n  3. Select Run workflow, fill in the PHP version you want to compile, the target type, and the list of extensions. (extensions comma separated, e.g. bcmath,curl,mbstring)\n  4. After waiting for about a period of time, enter the corresponding task and get Artifacts.\n\nIf you enable debug, all logs will be output at build time, including compiled\nlogs, for troubleshooting.\n\n### Build Locally (using SPC binary)\n\nThis project provides a binary file of static-php-cli: spc. You can use spc\nbinary instead of installing any runtime like golang app. Currently, the\nplatforms supported by spc binary are Linux and macOS.\n\nDownload from self-hosted nightly builds using commands below:\n\n    \n    \n    # Download from self-hosted nightly builds (sync with main branch) # For Linux x86_64 curl -o spc https://dl.static-php.dev/static-php-cli/spc-bin/nightly/spc-linux-x86_64 # For Linux aarch64 curl -o spc https://dl.static-php.dev/static-php-cli/spc-bin/nightly/spc-linux-aarch64 # macOS x86_64 (Intel) curl -o spc https://dl.static-php.dev/static-php-cli/spc-bin/nightly/spc-macos-x86_64 # macOS aarch64 (Apple) curl -o spc https://dl.static-php.dev/static-php-cli/spc-bin/nightly/spc-macos-aarch64 # Windows (x86_64, win10 build 17063 or later) curl.exe -o spc.exe https://dl.static-php.dev/static-php-cli/spc-bin/nightly/spc-windows-x64.exe # Add execute perm (Linux and macOS only) chmod +x ./spc # Run (Linux and macOS) ./spc --version # Run (Windows powershell) .\\spc.exe --version\n\nSelf-hosted spc is built by GitHub Actions, you can also download from Actions\nartifacts here.\n\n### Build Locally (using git source)\n\n    \n    \n    # just clone me! git clone https://github.com/crazywhalecc/static-php-cli.git\n\nIf you have not installed php on your system, we recommend that you use the\nbuilt-in setup-runtime to install PHP and Composer automatically.\n\n    \n    \n    cd static-php-cli chmod +x bin/setup-runtime # it will download static php (from self-hosted server) and composer (from getcomposer) bin/setup-runtime # initialize composer deps bin/composer install # chmod chmod +x bin/spc bin/spc --version\n\n### Start Building PHP\n\nBasic usage for building php with some extensions:\n\n> If you are using the packaged standalone spc binary, you need to replace\n> bin/spc with ./spc or .\\spc.exe in the following commands.\n    \n    \n    # Check system tool dependencies, auto-fix them if possible ./bin/spc doctor --auto-fix # fetch all libraries ./bin/spc download --all # only fetch necessary sources by needed extensions (recommended) ./bin/spc download --for-extensions=\"openssl,pcntl,mbstring,pdo_sqlite\" # download different PHP version (--with-php=x.y, recommend 7.3 ~ 8.3) ./bin/spc download --for-extensions=\"openssl,curl,mbstring\" --with-php=8.1 # with bcmath,openssl,tokenizer,sqlite3,pdo_sqlite,ftp,curl extension, build both CLI and phpmicro SAPI ./bin/spc build \"bcmath,openssl,tokenizer,sqlite3,pdo_sqlite,ftp,curl\" --build-cli --build-micro # build thread-safe (ZTS) version (--enable-zts) ./bin/spc build \"curl,phar\" --enable-zts --build-cli # build, pack executable with UPX (--with-upx-pack) (reduce binary size for 30~50%) ./bin/spc build \"curl,phar\" --enable-zts --build-cli --with-upx-pack\n\nNow we support cli, micro, fpm and embed SAPI. You can use one or more of the\nfollowing parameters to specify the compiled SAPI:\n\n  * \\--build-cli: build static cli executable\n  * \\--build-micro: build static phpmicro self-extracted executable\n  * \\--build-fpm: build static fpm binary\n  * \\--build-embed: build embed (libphp)\n  * \\--build-all: build all\n\nIf anything goes wrong, use --debug option to display full terminal output:\n\n    \n    \n    ./bin/spc build \"openssl,pcntl,mbstring\" --debug --build-all ./bin/spc download --all --debug\n\n## Different SAPI Usage\n\n### Use cli\n\n> php-cli is a single static binary, you can use it like normal php installed\n> on your system.\n\nWhen using the parameter --build-cli or --build-all, the final compilation\nresult will output a binary file named ./php, which can be distributed and\nused directly. This file will be located in the directory buildroot/bin/, copy\nit out for use.\n\n    \n    \n    cd buildroot/bin/ ./php -v # check version ./php -m # check extensions ./php your_code.php # run your php code ./php your_project.phar # run your phar (project archive)\n\n### Use micro\n\n> phpmicro is a SelF-extracted eXecutable SAPI module, provided by phpmicro\n> project. But this project is using a fork of phpmicro, because we need to\n> add some features to it. It can put php runtime and your source code\n> together.\n\nWhen using the parameter --build-all or --build-micro, the final compilation\nresult will output a file named ./micro.sfx, which needs to be used with your\nPHP source code like code.php. This file will be located in the path\nbuildroot/bin/micro.sfx, simply copy it out for use.\n\nPrepare your project source code, which can be a single PHP file or a Phar\nfile, for use.\n\n    \n    \n    echo \"<?php echo 'Hello world' . PHP_EOL;\" > code.php cat micro.sfx code.php > single-app && chmod +x single-app ./single-app\n\nIf you package a PHAR file, just replace code.php with the phar file path. You\ncan use box-project/box to package your CLI project as Phar, It is then\ncombined with phpmicro to produce a standalone executable binary.\n\n    \n    \n    # Use the micro.sfx generated by static-php-cli to combine, bin/spc micro:combine my-app.phar # or you can directly use the cat command to combine them. cat buildroot/bin/micro.sfx my-app.phar > my-app && chmod +x my-app # Use micro:combine combination to inject INI options into the binary. bin/spc micro:combine my-app.phar -I \"memory_limit=4G\" -I \"disable_functions=system\" --output my-app-2\n\n> In some cases, PHAR files may not run in a micro environment. Overall, micro\n> is not production ready.\n\n### Use fpm\n\nWhen using the parameter --build-all or --build-fpm, the final compilation\nresult will output a file named ./php-fpm, This file will be located in the\npath buildroot/bin/, simply copy it out for use.\n\nIn common Linux distributions and macOS systems, the package manager will\nautomatically generate a default fpm configuration file after installing php-\nfpm. Because php-fpm must specify a configuration file before running, the\nphp-fpm compiled by this project will not have any configuration files, so you\nneed to write php-fpm.conf and pool.conf configuration files yourself.\n\nSpecifying php-fpm.conf can use the command parameter -y, for example: ./php-\nfpm -y php-fpm.conf.\n\n### Use embed\n\nWhen using the project parameters --build-embed or --build-all, the final\ncompilation result will output a libphp.a, php-config and a series of header\nfiles, stored in buildroot/. You can introduce them in your other projects.\n\nIf you know embed SAPI, you should know how to use it. You may require the\nintroduction of other libraries during compilation, you can use\nbuildroot/bin/php-config to obtain the compile-time configuration.\n\nFor an advanced example of how to use this feature, take a look at how to use\nit to build a static version of FrankenPHP.\n\n## Contribution\n\nIf the extension you need is missing, you can create an issue. If you are\nfamiliar with this project, you are also welcome to initiate a pull request.\n\nIf you want to contribute documentation, please go to static-php/static-php-\ncli-docs.\n\nNow there is a static-php organization, which is used to store the repo\nrelated to the project.\n\n## Sponsor this project\n\nYou can sponsor my project on this page. A portion of your donation will be\nused to maintain the static-php.dev server.\n\n## Open-Source License\n\nThis project itself is based on MIT License, some newly added extensions and\ndependencies may originate from the the other projects, and the headers of\nthese code files will also be given additional instructions LICENSE and\nAUTHOR.\n\nThese are similar projects:\n\n  * dixyes/lwmbs\n  * swoole/swoole-cli\n\nThe project uses some code from dixyes/lwmbs, such as windows static build\ntarget and libiconv support. lwmbs is licensed under the Mulan PSL 2.\n\nDue to the special nature of this project, many other open source projects\nsuch as curl and protobuf will be used during the project compilation process,\nand they all have their own open source licenses.\n\nPlease use the bin/spc dump-license command to export the open source licenses\nused in the project after compilation, and comply with the corresponding\nproject's LICENSE.\n\n## About\n\nBuild standalone PHP binary on Linux, macOS, FreeBSD, Windows, with PHP\nproject together, with popular extensions included.\n\nstatic-php.dev\n\n### Topics\n\nphp binary alpine static swoole workerman php-cli php-src php8 static-link-\nbinary\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n1.1k stars\n\n### Watchers\n\n18 watching\n\n### Forks\n\n161 forks\n\nReport repository\n\n## Releases 23\n\n2.1.7 Latest\n\nApr 12, 2024\n\n\\+ 22 releases\n\n## Sponsor this project\n\n  * buymeacoffee.com/crazywhalecc\n  * https://github.com/crazywhalecc/crazywhalecc/blob/master/FUNDING.md\n\n## Packages 0\n\nNo packages published\n\n## Contributors 14\n\n## Languages\n\n  * PHP 98.0%\n  * Other 2.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
