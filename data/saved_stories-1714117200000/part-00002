{"aid": "40162880", "title": "Back up your precious files on ordinary paper", "url": "https://ollydbg.de/Paperbak/", "domain": "ollydbg.de", "votes": 4, "user": "thunderbong", "posted_at": "2024-04-25 20:53:47", "comments": 0, "source_title": "PaperBack", "source_text": "PaperBack\n\nOlly, the author of OllyDbg, presents his new open source joke:\n\nPAPERBACK v1.10\n\nUpdated by Michael Mohr\n\nDownload PaperBack v1.10 Download sources v1.10\n\nPaperBack version 1.00 does not implement AES encryption properly.\nSpecifically:\n\na) The key used for (en|de)cryption in version 1.00 provides at most an\neffective key strength of less than 50 bits (and likely far less, perhaps on\nthe order of 15-25 bits, depending on password quality) instead of the\nexpected 256 bits. Version 1.10 derives the encryption key from the password\nvia key stretching, significantly improving key strength. This change causes a\nsmall delay in the encryption step.\n\nb) PaperBack version 1.0 implements ECB mode symmetric encryption. This mode\nis subject to a watermark attack and leaks information about the encrypted\ndata. Version 1.00 changes the encryption mode to CBC, which mitigates this\nattack.\n\n2) AES key length is now selectable in paperbak.h via AESKEYLEN. I suggest not\nusing AES-256, as its key schedule is known to be substandard. See Bruce\nSchneier's website for details. For the moment I've switched PaperBack to use\nAES-192.\n\n3) The included libraries are now packaged as binary .lib files. Instructions\nfor rebuilding them from source are included in README.md from the PaperBack\nsource code.\n\n(Olly: mea maxima culpa. I am no cryptanalytic, and wrote Paperback quickly\nand without much thinking about the strength of the code. Btw, can this new\nrelease read old bitmaps?)\n\nPAPERBACK v1.00\n\nDownload PaperBack v1.00 Download sources v1.00 Read GNU GPL\n\n1\\. What is PaperBack? 2. Installation. 3. Setup. 4. Printing data to paper.\n5. Data restoration. 6. History. 7. Patents and IP. 8. Acknowledgements. 9.\nSource code description.\n\n1\\. What is PaperBack?\n\nPaperBack is a free application that allows you to back up your precious files\non the ordinary paper in the form of the oversized bitmaps. If you have a good\nlaser printer with the 600 dpi resolution, you can save up to 500,000 bytes of\nuncompressed data on the single A4/Letter sheet. Integrated packer allows for\nmuch better data density - up to 3,000,000+ (three megabytes) of C code per\npage.\n\nYou may ask - why? Why, for heaven's sake, do I need to make paper backups, if\nthere are so many alternative possibilities like CD-R's, DVD\u00b1R's, memory\nsticks, flash cards, hard disks, streamer tapes, ZIP drives, network storages,\nmagnetooptical cartridges, and even 8-inch double-sided floppy disks formatted\nfor DEC PDP-11? (I still have some). The answer is simple: you don't. However,\nby looking on CD or magnetic tape, you are not able to tell whether your data\nis readable or not. You must insert your medium into the drive (if you have\none!) and try to read it.\n\nPaper is different. Do you remember the punched cards? EBCDIC and all this\nstuff. For years, cards were the main storage medium for the source code. I\nagree that 100K+ programs were... unhandly, but hey, only real programmers\ndared to write applications of this size. And used cards were good as\nnotepads, too. Punched tapes were also common. And even the most weird\ncodings, like CDC or EBCDIC, were readable by humans (I mean, by real\nprogrammers).\n\nOf course, bitmaps produced by PaperBack are also human-readable (with the\nsmall help of any decent microscope). I'm joking. What you need is a scanner\nattached to PC. Actual version is for Windows only, but it's free and open\nsource, and there is nothing that prevents you from porting PaperBack to Linux\nor Mac, and the chances are good that it still will work under Windows XXXP or\nTrillenium Edition. And, of course, you can mail your printouts to the\nrecipients anywhere in the world, even if they have no Internet access or live\nin the countries where such access is restricted by the regiment.\n\nOh yes, a scanner. For 600 dpi printer you will need a scanner with at least\n900 dpi physical (let me emphasize, physical, not interpolated) resolution.\n\nHave I already mentioned that PaperBack is free? I release it under the GNU\nGeneral Public License, version 3. This means that you pay nothing for the\nprogram, that the sources are freely available, and that you are allowed - in\nfact, encouraged - to modify and improve this application.\n\n2\\. Installation.\n\nYou don't need to install PaperBack. Copy it to any directory, if possible,\nwith unrestricted write access (to allow PaperBack to save settings to the\ninitialization file), optionally create shortcut on the desktop - that's all.\n\n3\\. Setup.\n\nThis is how Options dialog looks:\n\nThe most important setting is the dot density. It determines the size of the\ndata bit on the paper and must be at least two times lower than the physical\nresolution of your printer. For example, if you are the (moderately) happy\nowner of the HP LaserJet V with 600 dpi resolution, set density to 300 dpi.\nThis allows you to draw 300x300=90,000 dots, or slightly less than 6 k bytes\nof useful data on every square inch of the paper.\n\nJet printers are not as good as laser. Maximal useful resolution is typically\nlimited to 200 dpi. Please select the best available quality, and don't forget\nto align the printing nozzles, so that points printed from left to right\ncoincide with those printed from right to left.\n\nDots must be clearly distinguishable from each other. Usually this means that\nthey must be separated by some anount of white space, determined by the\nparameter dot size. 70% is usually the best option.\n\nCompression is always good, because it reduces the size of the bitmap, unless\nyour file is already packed. Use fast compression if your computer is really,\nreally slow, and maximal compression in all other cases.\n\nRedundancy helps to recover partially damaged data. Redundancy 1:5 means that\nfor every 5 consecutive data blocks, if one block is completely unreadable,\nPaperBack will be able to restore it. To reduce damages caused by coffee pots\nand other common dangers, blocks are distributed around the page. Higher\nredundancy decreases page capacity but improves reliability.\n\nHeader and footer asks PaperBack to print useful information about the file,\nlike file name, its size, date of last modification, page and recommended\nscanner settings. This parameter influences only the printing and has no\ninfluence on the reading of the data. Border around the page improves\nautocropping with the not-so-smart TWAIN drivers.\n\nLarge files will be printed on several pages. When last page is scanned (order\nis not important) and autosave option is activated, PaperBack will ask you to\nselect location where restored file will be saved. If this option is\nunchecked, you must press Save button when recognition is finished -\nconvenient if your scanner has automatical feeder and you scan several backups\n(up to 5) at once.\n\nPaperBack uses Highly Sophisticated Unbelievably Advanced Error Correction\nTechniques (in fact, Reed-Solomon ECC) to restore unreadable pixels.\nTherefore, if data is halfway readable, it will accept it, even if recognition\nparameters are very far from optimal. This accelerates processing but leads to\nthe high amount of bad blocks reported by the program. When you backup\nimportant data and verify it afterwards, this may lead to false assumption\nthat data is unreliable. But activate Determine best quality, and PaperBack\nwill report the real data quality. Of course, this costs time.\n\nTwo last options set data encryption (FIPS-197 compliant AES is not easy to\ncrack) and whether password is displayed as the readable text while you type\nit in, or the characters are replaced by asterisks. Of course, this option\ndoes not mean that password will be printed on the paper!\n\n4\\. Printing data to paper.\n\nFirst, set page size and printer options. They may differ from one driver to\nanother, so I will not discuss them here in details. Always select the best\navailable printing quality. Turn off halftoning, dithering and image\noptimization. Don't forget to align nozzles on jet printers; if possible, turn\noff bidirectional printing. Note that only basic printer options are saved\nbetween the sessions, and you may need to re-enter them again.\n\nAfter options are set, you can print your data. Current PaperBack version is\n1.00, and it can't backup folders - only the single files, at most one per\npage. This is the very substantial drawback for the backup program. If you are\ngoing to save many small files, better first pack them into the single archive\nusing WinZip, tar or similar program.\n\nPaperBack supports drag-and-drop. If file has extention other than .bmp, it\nwill be printed. Default action for bitmaps is the recognition. To backup\nthem, use Print button. You can drop several files at once; internal queue is\nlimited to 128 entries. Again, each file will be printed on the separate\nsheet(s) of paper.\n\nFor test purposes, you can save bitmaps to the disk. This option is selectable\nfrom the main menu.\n\n5\\. Data restoration.\n\nPaperBack should support any scanner with TWAIN interface. It also accepts\nuncompressed grayscale and RGB bitmaps with 8 or 24 bits per pixel. You can\ndrag-and-drop files with extention .bmp directly into the PaperBack.\n\nIf you use scanner, select scanning source from the main menu, then press Scan\nbutton. Optimal resolution is about 3 times the dot density. B/W scans are\nusually unreadable, always select grayscale image. Color scanning is also\nacceptable, but has no advantages except for 3-fold memory use. (Another\njoke). Memory requirements are relatively high. A4 grayscale bitmap with 900\ndpi resolution requires around 80 MB.\n\nTurn off all image optimizations, like sharpening - PaperBack uses its own\noptimization techniques better suitable for this particular case.\n\nGrid should be more or less parallel to the sides of the scanner (maximal\nangle must not exceed \u00b17\u00b0), but general orientation is unimportant: portrait,\nlandscape, upside down or even, if you use transparencies, flipped.\nOrientation may change from one paper sheet to another.\n\nYou can scan up to 5 backups simultaneously. Each file will be placed into the\nseparate tab. If backup consists of several pages, the order in which they are\nscanned is absolutely unimportant. Bottom line in the tab displays list of\nunscanned or incomplete pages. If some page is unreadable, change its\nplacement, resolution and/or brightness and contrast.\n\nQuality map to the right shows distribution of errors on the last scanned page\nas a gradations of colours. Good blocks are green. The higher the number of\nerroneous bytes, the more reddish is the colour. Undeciphereble blocks with\nmore than 16 invalid bytes are black. If block is white, PaperBack was unable\nto recognize the grid. Doubleclick map to display the block as a grayscale\nimage (optionally with marked errors).\n\nAfter all pages are scanned, press on Save to write restored file to the disk.\nIf backup is encrypted, you will be asked to enter the password.\n\n6\\. History.\n\nOnce upon a time, my oldest son (he was 15 then) asked me: \"Dad, how the huge\namounts of data are saved on the small CD?\" A brief explanation from my side\nfollowed, I took a very sharp pencil and tried to draw as small points and\nlines as possible, in order to emphasize how dense the data is. Then my son\nasked: \"How much data can you place this way on the single sheet of paper?\" My\nestimation was in the order of 100 K. \"Can we make a try?\" It took me four or\nfive days to make the proof of concept, and another two weeks to integrate\npacker, encryption and user interface. Then I lost the interest and put the\nwhole project into the darkest corner of the deepest directory on my hard\ndisk. (One more joke). But why keep potentially useful code to myself? So now\nI am releasing it under GPL 3.\n\n7\\. Patents and IP.\n\nPaperBack is a \"clean-room\" implementation. I assure that my part of code is\nwritten by myself alone and is not based on any 3-rd party work.\n\nHowever, I can't guarantee that this program doesn't infringe any patents,\ntrade marks or other stuff that makes lawyers rich. If you are going to use\nPaperBack, all the burden of proof is on your side.\n\nTo make lawyers (un)happy:\n\nPaperback is free software; you can redistribute it and/or modify it under the\nterms of the GNU General Public License as published by the Free Software\nFoundation; either version 3 of the License, or (at your option) any later\nversion.\n\nPaperBack is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\nA PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with\nthis program. If not, see http://www.gnu.org/licenses/\n\n8\\. Acknowledgements.\n\nPaperBack would be not possible without the Reed-Solomon error correction. The\ncode is written by Phil Karn (C) 2002. Phil allows use of his code under the\nterms of GPL.\n\nAES encryption code is developed by Christophe Devine (C) 2001-2004. This code\nis also released under GPL.\n\nbzip2 compression engine is developed by Julian R. Seward (C) 1996-2005. See\nsources for details. To my best knowledge (IANAL), his license is compatible\nwith GPL.\n\n9\\. Source code description.\n\nThere is currently none, but the sources are commented. If you need help, read\ncomments. If you still need help, ask your friends. For more help, visit some\ndiscussion forum. If you are completely despaired, create your own forum. If\nyou are ready to commit suicide, well, drop me a mail (ollydbg at t-online\nde). Set subject to PaperBack, or you will be considered spam and filtered\nout. Allow 4 to 6 weeks for delivery.\n\nVisitors so far:\n\nThis site is Copyright (C) 2007 Oleh Yuschuk, ollydbg at t-online de. You are\nallowed to cite and mirror it in whole or in parts, provided that you always\nrefer to the original source.\n\n", "frontpage": false}
