{"aid": "40120755", "title": "Zero-Copy Apache Arrow with WebAssembly", "url": "https://observablehq.com/@kylebarron/zero-copy-apache-arrow-with-webassembly", "domain": "observablehq.com", "votes": 2, "user": "kristianp", "posted_at": "2024-04-22 21:04:45", "comments": 0, "source_title": "Zero-copy Apache Arrow with WebAssembly / Kyle Barron | Observable", "source_text": "Zero-copy Apache Arrow with WebAssembly / Kyle Barron | Observable\n\nKyle Barron\n\nPublic\n\nCloud-Native Geospatial\n\nEdited\n\nApr 17\n\n1 fork\n\n38 Likes\n\narrow = import(\"https://cdn.skypack.dev/apache-arrow@9\")\n\n// Load the parquet-wasm library\n\nparquetModule = {\n\nconst parquetModule = await import(\n\n\"https://unpkg.com/parquet-wasm@0.4.0-beta.5/esm/arrow2.js\"\n\n);\n\n// Need to await the default export first to initialize the WebAssembly code\n\nconst {memory} = await parquetModule.default();\n\nreturn [parquetModule, memory];\n\n}\n\nparquet = parquetModule[0]\n\nwasmMemory = parquetModule[1]\n\narrowTable = {\n\n// An index column with ordered integers from 0 up to 10,000 t\n\nconst indexArray = new Uint16Array(10000);\n\nfor (let i = 0; i < indexArray.length; ++i) {\n\nindexArray[i] = i;\n\n}\n\n// Random float values between 0 and 100\n\nconst valuesArray = Float32Array.from({ length: 10000 }, () =>\n\nNumber((Math.random() * 100).toFixed(1))\n\n);\n\n// Create the Arrow Table\n\nreturn arrow.tableFromArrays({\n\nindex: indexArray,\n\nvalues: valuesArray\n\n});\n\n}\n\nparquetBuffer = parquet.writeParquet(arrow.tableToIPC(arrowTable, \"file\"));\n\narrowTableFFI = parquet._readParquetFFI(parquetBuffer);\n\narrowTableFFI.schemaLength()\n\nschemaPointers = [arrowTableFFI.schemaAddr(0), arrowTableFFI.schemaAddr(1)]\n\nparseField = {\n\n/** Minimal parsing of an arrow Field from an ArrowSchema FFI struct */\n\nfunction parseField(buffer, ptr) {\n\nconst dataView = new DataView(buffer);\n\n// Parse format to an Arrow JS DataType\n\nconst format = parseFormat(dataView, ptr);\n\n// Parse name into a JS string\n\nconst namePtr = dataView.getUint32(ptr + 4, true);\n\nconst name = parseNullTerminatedString(dataView, namePtr);\n\n// Extra 4 to be 8-byte aligned\n\nconst flags = dataView.getBigInt64(ptr + 16, true);\n\nconst nullable = Boolean(flags & 0x00000001n);\n\nreturn arrow.Field.new(name, format, nullable);\n\n}\n\n/** Parse a pointer to the format struct attribute into an Arrow JS DataType\n*/\n\nfunction parseFormat(dataView, ptr) {\n\nconst formatPtr = dataView.getUint32(ptr, true);\n\nconst format = parseNullTerminatedString(dataView, formatPtr);\n\n// Strings from https://arrow.apache.org/docs/format/CDataInterface.html#data-\ntype-description-format-strings\n\n// In this minimal implementation, only include these two types\n\nconst formatMapping = {\n\nS: new arrow.Uint16(),\n\nf: new arrow.Float32()\n\n};\n\nreturn formatMapping[format];\n\n}\n\n/** Parse a C-style null-terminated string to a JS string */\n\nfunction parseNullTerminatedString(dataView, ptr) {\n\n// First find the end of the null-terminated string\n\nlet end = ptr;\n\nwhile (end < dataView.byteLength && dataView.getUint8(end) !== 0) {\n\nend += 1;\n\n}\n\n// Take a Uint8Array view of that buffer range and decode to a UTF8 string\n\nreturn new TextDecoder(\"utf-8\").decode(\n\nnew Uint8Array(dataView.buffer, ptr, end - ptr)\n\n);\n\n}\n\nreturn parseField;\n\n}\n\narrowFields = [\n\nparseField(wasmMemory.buffer, schemaPointers[0]),\n\nparseField(wasmMemory.buffer, schemaPointers[1])\n\n]\n\narrowTableFFI.chunksLength()\n\narrowTableFFI.chunkLength(0)\n\narrayPointers = [arrowTableFFI.arrayAddr(0, 0), arrowTableFFI.arrayAddr(0, 1)]\n\nparseArray = {\n\n/** Parse Array from ArrowArray FFI */\n\nreturn function parseArray(buffer, ptr, dataType) {\n\nconst dataView = new DataView(buffer);\n\n// These functions assume bigint support\n\n// Older browsers could work with each half and cast to a number\n\nconst length = dataView.getBigInt64(ptr, true);\n\nconst nullCount = dataView.getBigInt64(ptr + 8, true);\n\nconst offset = dataView.getBigInt64(ptr + 16, true);\n\nconst nBuffers = dataView.getBigInt64(ptr + 24, true);\n\nconst nChildren = dataView.getBigInt64(ptr + 32, true);\n\n// We have a pointer to an array of pointers, where each of those points to an\nactual array of data\n\nconst ptrToBuffers = dataView.getUint32(ptr + 40, true);\n\nconst bufferPtrs = [];\n\nfor (let i = 0; i < nBuffers; i++) {\n\nbufferPtrs.push(dataView.getUint32(ptrToBuffers + i * 4, true));\n\n}\n\n// For simplicity in this example, we only support primitive types\n\n// For primitive types, the first pointer is the validity and the second is\nthe data:\n\n// https://arrow.apache.org/docs/format/Columnar.html#buffer-listing-for-each-\nlayout\n\nconst validityPtr = bufferPtrs[0];\n\n// In an actual implementation you'd want to parse this validity bitmap \ud83d\ude04\n\n// https://arrow.apache.org/docs/format/Columnar.html#validity-bitmaps\n\nconst nullBitmap = validityPtr === 0 ? null : null;\n\n// Then take a view of the data\n\n// Here ArrayType is Uint16Array and Float32Array, respectively\n\nconst dataPtr = bufferPtrs[1];\n\nconst data = new dataType.ArrayType(\n\ndataView.buffer,\n\ndataPtr,\n\nNumber(length)\n\n);\n\n// Then create Arrow JS Data objects from these low-level arrays\n\nreturn arrow.makeData({\n\ntype: dataType,\n\noffset: Number(offset),\n\nlength: Number(length),\n\nnullCount: Number(nullCount),\n\nnullBitmap,\n\ndata\n\n});\n\n};\n\n}\n\narrowArrays = [\n\nparseArray(wasmMemory.buffer, arrayPointers[0], arrowFields[0].type),\n\nparseArray(wasmMemory.buffer, arrayPointers[1], arrowFields[1].type)\n\n]\n\narrowTableFromFFI = {\n\nconst schema = new arrow.Schema(arrowFields);\n\nconst recordBatch = new arrow.RecordBatch(\n\nschema,\n\narrow.makeData({ type: new arrow.Struct(), children: arrowArrays })\n\n);\n\nreturn new arrow.Table(schema, recordBatch);\n\n}\n\narraysEqual = {\n\n// https://stackoverflow.com/a/16436975\n\nreturn function arraysEqual(a, b) {\n\nif (a === b) return true;\n\nif (a == null || b == null) return false;\n\nif (a.length !== b.length) return false;\n\n// If you don't care about the order of the elements inside\n\n// the array, you should sort both arrays here.\n\n// Please note that calling sort on an array will modify that array.\n\n// you might want to clone your array first.\n\nfor (var i = 0; i < a.length; ++i) {\n\nif (a[i] !== b[i]) return false;\n\n}\n\nreturn true;\n\n}\n\n}\n\narraysEqual(\n\narrowTable.getChild(\"index\").toArray(),\n\narrowTableFromFFI.getChild(\"index\").toArray()\n\n)\n\narraysEqual(\n\narrowTable.getChild(\"values\").toArray(),\n\narrowTableFromFFI.getChild(\"values\").toArray()\n\n)\n\nMore from Observable creators\n\nView all\n\nNFL Player Comparison 2023 Week 1-4\n\nTanya Shapiro\n\nOct 2, 2023\u2022 13 1\n\nFIPS County and Place; GINS APIs\n\nZhi Keng He's Workspace\n\nApr 1\u2022 3\n\nRingers deobfuscation\n\nYaroslav Sergienko\n\nOct 5, 2023\u2022 11\n\nBlinking Faces\n\nMike Stringer\n\nSep 28, 2023\u2022 18\n\nProduct\n\n  * Security\n  * Integrations\n  * Docs\n  * Observable Framework docs\n  * Observable Plot docs\n  * D3 docs\n\nLearn\n\n  * Release notes\n  * Customer stories\n  * Blog\n\nCommunity\n\n  * Examples\n  * Community Slack\n  * Forum\n  * GitHub\n\nCompany\n\n  * About\n  * Careers\n\nPricing\n\n\u00a9 2024 Observable, Inc.PrivacyTerms of Service\n\nFork\n\nView\n\nExport\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nShow 8 comments\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\narrow\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nparquetModule\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nparquet\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nwasmMemory\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\narrowTable\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nparquetBuffer\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\narrowTableFFI\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nUnpin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nschemaPointers\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nparseField\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\narrowFields\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nUnpin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nUnpin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\narrayPointers\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nparseArray\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\narrowArrays\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\narrowTableFromFFI\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\narraysEqual\n\nUnpin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nUnpin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nUnpin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nEdit\n\nPin\n\nAdd comment\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nfootnote\n\nEdit\n\nPin\n\nAdd comment\n\nCopy import\n\nSelect\n\nDuplicate\n\nCopy link\n\nEmbed\n\nDelete\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\nJavaScript\n\nMarkdown\n\nHTML\n\n", "frontpage": false}
