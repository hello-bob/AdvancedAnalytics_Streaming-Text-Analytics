{"aid": "40050483", "title": "Elixir Streams \u2013> 2 Helpers to Keep Your Pipelines Flowing", "url": "https://www.elixirstreams.com/tips/tap-and-then-helpers", "domain": "elixirstreams.com", "votes": 1, "user": "unripe_syntax", "posted_at": "2024-04-16 10:48:14", "comments": 0, "source_title": "Elixir Streams |> 2 Helpers to Keep Your Pipelines Flowing! \ud83d\ude0e", "source_text": "Elixir Streams |> 2 Helpers to Keep Your Pipelines Flowing! \ud83d\ude0e\n\n# 2 Helpers to Keep Your Pipelines Flowing! \ud83d\ude0e\n\nElixir code tends to be pipe-friendly. But sometimes that fails. You have a\npesky break in your pipeline!\n\nHere are 2 helpers that can help you keep your pipeline flowing!\n\n## Inspecting flash assign\n\nLet\u2019s take a conn pipeline as an example. Suppose you have the following code:\n\n    \n    \n    conn |> put_flash(:info, \"User created successfully.\") |> redirect(to: ~p\"/users/#{user}\")\n\nNow, assume you want to examine the flash assign we\u2019ve just set up. In order\nto avoid inspecting all of conn (which can be quite large), we have to break\nthe pipeline:\n\n    \n    \n    conn = conn |> put_flash(:info, \"User created successfully.\") dbg(conn.assigns.flash) conn |> redirect(to: ~p\"/users/#{user}\")\n\nBut there\u2019s a better way! Or should I say, then\u2019s a better way! \ud83d\ude0f\n\n## then\n\n    \n    \n    conn |> put_flash(:info, \"User created successfully.\") |> then(fn conn -> dbg(conn.assigns.flash) conn end) |> redirect(to: ~p\"/users/#{user}\")\n\nthen is just another step of the pipeline that takes a function where the\nfirst argument will be the previous return value (in our case conn).\n\nThe trick is, since we want to keep the pipeline flowing, we have to also\nreturn conn (for redirect/2 to work).\n\nBut sometimes, as is our case, we only want to perform a side-effect. And for\nthat, we can tap in our good friend.\n\n## tap\n\n    \n    \n    conn |> put_flash(:info, \"User created successfully.\") |> tap(fn conn -> dbg(conn.assigns.flash) end) |> redirect(to: ~p\"/users/#{user}\")\n\ntap passes the value (conn) into a function and then returns the value (conn)\nthat was passed into the function. Excellent for code with side effects!\n\n\u00a9 2024 German Velasco\n\n", "frontpage": false}
