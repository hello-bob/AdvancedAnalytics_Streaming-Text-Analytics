{"aid": "40153291", "title": "JSR Is Not Another Package Manager", "url": "https://deno.com/blog/jsr-is-not-another-package-manager", "domain": "deno.com", "votes": 6, "user": "sbt567", "posted_at": "2024-04-25 04:03:00", "comments": 0, "source_title": "JSR Is Not Another Package Manager", "source_text": "JSR Is Not Another Package Manager\n\nSkip to main content\n\n# JSR Is Not Another Package Manager\n\nApril 24, 2024\n\n  * Ryan Dahl\n\n  * JSR\n\nOver the past years, new package managers like yarn and pnpm have emerged,\nenhancing how packages are downloaded. However, the npm package registry, a\ncornerstone of the JavaScript ecosystem, has barely evolved. Its last notable\nupdate was a \u201cfiles\u201d tab added years ago. The JavaScript language, known for\nits vibrant evolution, seems paradoxically mired in a distribution model that\nhasn\u2019t kept pace.\n\nBack when I created Node, there was no standard module system for JavaScript.\nAs a result, the npm registry and Node defaulted to CommonJS (require), a\nsystem with fundamental flaws that made it unworkable in browsers. So, almost\na decade ago, in 2015, the language adopted syntax for ES modules (import).\nToday, most JavaScript is written using ES modules, yet the pathways for\ndistributing these modules remain convoluted, especially when TypeScript is\ninvolved. This clear gap in the ecosystem prompted the creation of JSR, not as\nanother package manager but as a transformative registry designed to\nrevolutionize how JavaScript and TypeScript are shared across server-side\nruntimes, browsers, and various tools.\n\nJSR fundamentally improves the code distribution process by streamlining\ncomplexities that have long plagued developers. By being ESM-only and\nTypeScript-first, JSR eradicates the frustrating juggling of package.json\nconfigurations and the labyrinthine tsconfig compiler options. Through a\npackage scoring system, JSR motivates best practices in code\ndistribution\u2014higher scores are awarded to packages that include comprehensive\nJSDoc documentation on each exported symbol, akin to what the Dart community\nhas in pub.dev. As seen in other modern programming ecosystems like Go and\nRust, JSR provides automatic documentation generation right out of the box.\n\nJSR is a registry, not another client for the npm registry. But that doesn\u2019t\nmean you need to give up everything from npm, or make a hard switch to a\ndisjoint ecosystem of JavaScript modules. JSR is designed to complement the\nnpm registry, not replace it. JSR packages are allowed to depend on npm\npackages - see, for example, this package. Moreover, JSR packages can be used\nin existing npm-first software because JSR itself acts as an npm registry\n(accessible at npm.jsr.io) that distributes npm-compatible tarballs. This\nallows JSR packages to be included in any software using npm, yarn, or pnpm,\nas well as to integrate with private registries. The npm tarballs that JSR\ndistributes are optimal.\n\nAt Deno, we prioritize security as a paramount concern in JavaScript\ndevelopment. While no registry can comprehensively police all published code,\nJSR provides transparency about its publishers and secures the publishing\nprocess. By integrating OIDC tokens with GitHub Actions, JSR creates advanced,\nverifiable provenance attestations using the Supply Chain Levels for Software\nArtifacts and stores them in Sigstore. This not only ensures the authenticity\nof the code but also establishes trust and accountability in what developers\nare implementing.\n\nJavaScript is the common language of many programmers, making it both\nuniversal and accessible. The language merits a central hub\u2014a town\nsquare\u2014where developers can share their work without undue complexity. We\nbelieve JavaScript will remain central to software development for many years,\nand JSR aims to support this enduring relevance. While JSR is not a package\nmanager, it offers a new approach to how we manage and secure code, aspiring\nto be a stable, forward-looking platform that enhances and safeguards\nJavaScript development. In this way, JSR represents not just another tool in\nthe ecosystem but a fundamental shift in how we think about distributing\nJavaScript and TypeScript.\n\n> \ud83d\udea8\ufe0f Read more about JSR \ud83d\udea8\ufe0f\n>\n>   * JSR.io\n>   * JSR announcement\n>   * Intro to JSR\n>   * How we built JSR\n>\n\n## Learn\n\n  * Node's Security Problem\n  * Node's Complexity Problem\n  * Edge is the Future\n\n## Why Deno?\n\n  * TypeScript Support\n  * Web Standard APIs\n  * All-in-one Tooling\n  * Secure-by-default\n\n## Use Cases\n\n  * Scripts and CLIs\n  * API Servers\n  * Sites and Apps\n  * Modules\n  * Serverless Functions\n\n## Products\n\n  * Deno Runtime\n  * Deno Deploy\n  * Deno KV\n  * Deploy Subhosting\n  * Fresh\n  * SaaSKit\n\n## Sources\n\n  * Runtime Manual\n  * Runtime API\n  * Deploy Docs\n  * Standard Library\n  * Third-Party Modules\n  * Examples\n\n## Company\n\n  * Careers\n  * Blog\n  * Pricing\n  * News\n  * Merch\n  * Privacy Policy\n\nGitHubDiscordTwitter or X or whateverYouTubeMastodon\n\nCopyright \u00a9 2024 Deno Land Inc. All rights reserved.\n\nAll systems operational\n\n", "frontpage": true}
