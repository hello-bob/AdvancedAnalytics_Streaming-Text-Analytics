{"aid": "40157908", "title": "Someone built an LLM-powered Slay the Spire bot", "url": "https://community.aws/content/2esiarYrF0xRNOMPj0god4ikRzw/i-built-an-llm-bot-in-3-hours-to-conquer-slay-the-spire", "domain": "community.aws", "votes": 15, "user": "rickspencer3", "posted_at": "2024-04-25 14:18:20", "comments": 10, "source_title": "I Built an LLM Bot in 3 hours to Conquer Slay the Spire", "source_text": "Community | I Built an LLM Bot in 3 hours to Conquer Slay the Spire\n\n## Select your cookie preferences\n\nWe use essential cookies and similar tools that are necessary to provide our\nsite and services. We use performance cookies to collect anonymous statistics\nso we can understand how customers use our site and make improvements.\nEssential cookies cannot be deactivated, but you can click \u201cCustomize cookies\u201d\nto decline performance cookies.\n\nIf you agree, AWS and approved third parties will also use cookies to provide\nuseful site features, remember your preferences, and display relevant content,\nincluding relevant advertising. To continue without accepting these cookies,\nclick \u201cContinue without accepting.\u201d To make more detailed choices or learn\nmore, click \u201cCustomize cookies.\u201d\n\n## Customize cookie preferences\n\nWe use cookies and similar tools (collectively, \"cookies\") for the following\npurposes.\n\n### Essential\n\nEssential cookies are necessary to provide our site and services and cannot be\ndeactivated. They are usually set in response to your actions on the site,\nsuch as setting your privacy preferences, signing in, or filling in forms.\n\n### Performance\n\nPerformance cookies provide anonymous statistics about how customers navigate\nour site so we can improve site experience and performance. Approved third\nparties may perform analytics on our behalf, but they cannot use the data for\ntheir own purposes.\n\nAllowed\n\n### Functional\n\nFunctional cookies help us provide useful site features, remember your\npreferences, and display relevant content. Approved third parties may set\nthese cookies to provide certain site features. If you do not allow these\ncookies, then some or all of these services may not function properly.\n\nAllowed\n\n### Advertising\n\nAdvertising cookies may be set through our site by us or our advertising\npartners and help us deliver relevant marketing content. If you do not allow\nthese cookies, you will experience less relevant advertising.\n\nAllowed\n\nBlocking some types of cookies may impact your experience of our sites. You\nmay review and change your choices at any time by clicking Cookie preferences\nin the footer of this site. We and selected third-parties use cookies or\nsimilar technologies as specified in the AWS Cookie Notice.\n\n## Unable to save cookie preferences\n\nWe will only store essential cookies at this time, because we were unable to\nsave your cookie preferences.\n\nIf you want to change your cookie preferences, try again later using the link\nin the AWS console footer, or contact support if the problem persists.\n\nHomeTags\n\nFeatured Spaces\n\nCost Optimization\n\nDevOps\n\nGenerative AI\n\nKubernetes\n\nLivestreams\n\nResilience\n\nTraining and Certification\n\nCommunity Programs\n\nAWS Heroes\n\nAWS Community Builders\n\nAWS User Groups\n\nStudent Communities\n\n# I Built an LLM Bot in 3 hours to Conquer Slay the Spire\n\n## Learn the Methods I Used with Amazon Q to Build in Record Time\n\ngenerative-aiamazon-qamazon-bedrock\n\nBanjo Obayomi\n\nAmazon Employee\n\nPublished Apr 25, 2024\n\nComments (1)1\n\nUnderstanding the Codebase\n\nBuilding the Bot\n\nGetting the Next Action\n\nDebugging Code\n\nWhat's Next?\n\nSlay the Spire is a highly addictive roguelike deck-building game that offers\na unique challenge every time you play, with over 200 cards and 50 distinct\nencounters. As an avid player with over 160 hours logged and eagerly awaiting\nthe just announced sequel, I was fascinated by the idea of creating an AI bot\ncapable of playing through the game.\n\nWhile I discovered a promising skeleton project from 5 years ago, builders\nknow that updating and understanding an ancient codebase with little\ndocumentation is a challenge. Undeterred, I saw this as an opportunity to\nleverage Amazon Q, a generative AI powered assistant, to help me explain,\nupdate, and debug the code, ultimately enabling me to build my Slay the Spire\nLLM bot in just 3 hours.\n\n###\n\nUnderstanding the Codebase\n\nOnce I set up the environment and successfully ran a test, it was time to dive\ninto the code. As any builder would, I started my investigation with main.py.\nTo gain a high-level understanding of the code's functionality, I turned to\nAmazon Q, asking it to explain the code with a simple prompt: \"What does this\ncode do?\"\n\nIt provided a concise breakdown of the code, giving me a clear overview of its\npurpose and structure. One key insight from the explanation was:\n\n> It imports the Agent class and subclasses NnAgent and SimpleAgent from the\n> spirecomm AI module. These define different types of AI agents.\n\nThis information pointed me towards the next steps in incorporating my LLM\ninto the existing code. The guidance allowed me to quickly identify the main\nfunction's key components and determine where to focus my efforts.\n\n###\n\nBuilding the Bot\n\nSlay the Spire consists of many phases, from selecting which room to enter to\nchoosing upgrades. For my bot, I decided to focus on the main part of the\ngame: combat.\n\nI began by examining the SimpleAgent class, which uses rule-based heuristics\nto determine actions, such as playing zero-cost cards first or using block\ncards when facing significant incoming damage. My goal was to replace these\nif-then statements with an LLM call that takes the game state data as input\nand returns the next action to take.\n\nThe SimpleAgent served as a good starting point, so I investigated how the\nNeuralNetAgent class worked. To my surprise, it was completely empty, only\ncalling the super() method of the base Agent class. Instead of creating a new\nagent class from scratch, I decided to update the predefined one with my own\nlogic. However, I encountered a challenge: the game information was stored in\nclasses without functions to convert them into strings for my LLM prompt.\n\nThis is where Amazon Q truly shined. Using a simple prompt, I was able to\ngenerate the code needed to extract the relevant game state information:\n\n\"Can you create a function to parse a list of Card objects? These are the\nfields in the class that I need.\"\n\nI was able to use the provided a solution quickly, allowing me to incorporate\nthe card data into my LLM prompt. I repeated this process for other essential\ngame elements, such as monster data, relics, powers, and player information.\n\nThe ability to instantly generate tedious \"boilerplate\" code directly within\nmy IDE was a huge time saver. I\u2019m able to focus on the high-level design of my\nbot, while Amazon Q handled the mundane task of writing code to parse game\nobjects. With the game state data ready, it was now time to form a prompt for\nthe LLM.\n\n###\n\nGetting the Next Action\n\nWhile Amazon Q has been great for understanding and generating code, it's\nessential to recognize its limitations. For example, when I attempted to use\nit to design a system prompt, the results were less than satisfactory.\n\nBuilders need to understand what Amazon Q excels at. It's important to\nremember that Q in the IDE is specifically designed for writing, debugging,\nand explaining code. For tasks beyond this scope, other LLM products like my\nSystem Prompt Builder PartyRock app, may be better suited.\n\nOnce I finished crafting my prompt, it was time to test how the LLM would\nperform. I chose to start with Claude Haiku using Amazon Bedrock, as it had\nshown impressive results in my past experiments. To my delight, the bot began\ngenerating valid actions and playing the game autonomously. However, my\nexcitement was short-lived as the bot suddenly crashed due to an invalid\naction. It was time to go back into the code to see what went wrong.\n\n###\n\nDebugging Code\n\nTo begin, I inspected my action function to see if there were any obvious\nissues I had overlooked. I quickly realized that I hadn't checked for\nconditions when the model returned an invalid target for a card, causing it to\nplay an illegal action. With the issue identified, I sent the following prompt\nto Q for assistance:\n\n> Can you fix this code, so it checks if the target_index is in valid_targets,\n> and if the card_to_play.has_target == True? I was getting errors in my code\n> by not having correct error checking.\n\nQ responded with code that added ValueError exceptions to the places I wanted\nto check. While this wasn't my desired solution, as I wanted the bot to play a\ncard anyway, it provided a valuable starting point. Using the output as a\nreference, I was able to write my own business logic to handle the situation\ngracefully.\n\nThis experience highlights another important fact, despite what some may\nclaim, AI assistants cannot perfectly translate your ideas into functional\ncode 100% of the time.\n\nWhile AI assistants are excellent creative aids and can help eliminate tedious\nwork, they still require human oversight and input to validate the code meets\nthe desired specifications.\n\nThe code produced allowed me to streamline the process of adding my own\nbusiness logic, saving time and effort compared to writing everything from\nscratch. With this modification, my bot was back up and running, capable of\nhandling the occasional hallucinated move without crashing.\n\n##\n\nWhat's Next?\n\nBuilding a Slay the Spire LLM bot was a fun project made possible with the\nhelp of Amazon Q. I was able to quickly understand and update a 5-year-old\ncodebase (written by someone else! ), create tedious functions with ease, and\nefficiently debug issues as they arose, all within 3 hours.\n\nMy bot got as far as the second boss using Claude Haiku, the long term\nplanning needed to beat bosses requires picking the right cards, selecting the\nright combos, and more just isn't there with current LLMs. I can try using\nClaude Opus and improve the prompt to provide general strategies, on further\nattempts.\n\nIf you're interested in running or improving the project, all the code and\ndocumentation is available on GitHub. I encourage you to explore the code,\nexperiment with different prompts and LLMs, and share your findings with the\ncommunity.\n\nTo get started with Amazon Q check out the documentation.\n\nI look forward to seeing what you will build!\n\nAny opinions in this post are those of the individual author and may not\nreflect the opinions of AWS.\n\nComments (1)1\n\n## 1 Comment\n\nLog in to comment\n\nUnderstanding the Codebase\n\nBuilding the Bot\n\nGetting the Next Action\n\nDebugging Code\n\nWhat's Next?\n\n", "frontpage": true}
