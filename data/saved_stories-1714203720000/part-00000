{"aid": "40176328", "title": "SQLite VFS for ZSTD seekable format", "url": "https://github.com/jtarchie/sqlitezstd", "domain": "github.com/jtarchie", "votes": 1, "user": "sharinglinks123", "posted_at": "2024-04-27 01:40:43", "comments": 0, "source_title": "GitHub - jtarchie/sqlitezstd: Go sqlite VFS for using a zstd seekable compressed file.", "source_text": "GitHub - jtarchie/sqlitezstd: Go sqlite VFS for using a zstd seekable\ncompressed file.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\njtarchie / sqlitezstd Public\n\n  * Notifications\n  * Fork 1\n  * Star 27\n\nGo sqlite VFS for using a zstd seekable compressed file.\n\n### License\n\nMIT license\n\n27 stars 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# jtarchie/sqlitezstd\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\njtarchieMerge pull request #6 from\njtarchie/dependabot/go_modules/github.com/...Apr 25, 2024f29ea1c \u00b7 Apr 25,\n2024Apr 25, 2024\n\n## History\n\n32 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| fix action for v2| Apr 13, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| init| Mar 14, 2024  \n  \n### .golangci.yml\n\n|\n\n### .golangci.yml\n\n| add benchmark to have more significant size for more pages/chunks| Mar 17,\n2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Mar 14, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 14, 2024  \n  \n### Taskfile.yml\n\n|\n\n### Taskfile.yml\n\n| refactor benchmark for one build| Apr 5, 2024  \n  \n### benchmark_test.go\n\n|\n\n### benchmark_test.go\n\n| add trigram benchmark, it is slow| Apr 14, 2024  \n  \n### build.go\n\n|\n\n### build.go\n\n| init| Mar 14, 2024  \n  \n### file.go\n\n|\n\n### file.go\n\n| some cleanup for readability| Mar 16, 2024  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| Bump github.com/onsi/gomega from 1.32.0 to 1.33.0| Apr 22, 2024  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| Bump github.com/onsi/gomega from 1.32.0 to 1.33.0| Apr 22, 2024  \n  \n### sqlite_zstd_suite_test.go\n\n|\n\n### sqlite_zstd_suite_test.go\n\n| add fts5 benchmark| Apr 5, 2024  \n  \n### vfs.go\n\n|\n\n### vfs.go\n\n| Init can only run once| Apr 12, 2024  \n  \n## Repository files navigation\n\n# SQLiteZSTD: Read-Only Access to Compressed SQLite Files\n\n## Description\n\nSQLiteZSTD provides a tool for accessing SQLite databases compressed with\nZstandard seekable (zstd) in a read-only manner. Its functionality is based on\nthe SQLite3 Virtual File System (VFS) in Go.\n\nPlease note, SQLiteZSTD is specifically designed for reading data and does not\nsupport write operations.\n\n## Features\n\n  1. Read-only access to Zstd-compressed SQLite databases.\n  2. Interface through SQLite3 VFS.\n  3. The compressed database is seekable, facilitating ease of access.\n\n## Usage\n\nYour database needs to be compressed in the seekable Zstd format. I recommend\nusing this CLI tool:\n\n    \n    \n    go get -a github.com/SaveTheRbtz/zstd-seekable-format-go/... go run github.com/SaveTheRbtz/zstd-seekable-format-go/cmd/zstdseek \\ -f <dbPath> \\ -o <dbPath>.zst\n\nThe CLI provides different options for compression levels, but I do not have\nspecific recommendations for best usage patterns.\n\nBelow is an example of how to use SQLiteZSTD in a Go program:\n\n    \n    \n    import ( sqlitezstd \"github.com/jtarchie/sqlitezstd\" ) initErr := sqlitezstd.Init() if initErr != nil { panic(fmt.Sprintf(\"Failed to initialize SQLiteZSTD: %s\", initErr)) } db, err := sql.Open(\"sqlite3\", \"<path-to-your-file>?vfs=zstd\") if err != nil { panic(fmt.Sprintf(\"Failed to open database: %s\", err)) }\n\nIn this Go code example:\n\n  * The SQLiteZSTD library is initialized first with sqlitezstd.Init().\n  * An SQL connection to a compressed SQLite database is established with sql.Open().\n\nThe sql.Open() function takes as a parameter the path to the compressed SQLite\ndatabase, appended with a query string. Key query string parameters include:\n\n  * vfs=zstd: Ensures the ZSTD VFS is used.\n\n## Performance\n\nHere's a simple benchmark comparing performance between reading from an\nuncompressed vs. a compressed SQLite database, involving the insertion of 10k\nrecords and retrieval of the MAX value (without an index) and FTS5.\n\n    \n    \n    BenchmarkReadUncompressedSQLite-4 159717 7459 ns/op 473 B/op 15 allocs/op BenchmarkReadUncompressedSQLiteFTS5Porter-4 2478 471685 ns/op 450 B/op 15 allocs/op BenchmarkReadUncompressedSQLiteFTS5Trigram-4 100 10449792 ns/op 542 B/op 16 allocs/op BenchmarkReadCompressedSQLite-4 266703 3877 ns/op 2635 B/op 15 allocs/op BenchmarkReadCompressedSQLiteFTS5Porter-4 2335 487430 ns/op 33992 B/op 16 allocs/op BenchmarkReadCompressedSQLiteFTS5Trigram-4 48 21235303 ns/op 45970431 B/op 148 allocs/op BenchmarkReadCompressedHTTPSQLite-4 284820 4341 ns/op 3312 B/op 15 allocs/op\n\n## About\n\nGo sqlite VFS for using a zstd seekable compressed file.\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n27 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * jtarchie JT A.\n  * dependabot[bot]\n\n## Languages\n\n  * Go 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
