{"aid": "40142174", "title": "Show HN: Nxs-data-anonymizer \u2013 open-source tool for database dumps anonymization", "url": "https://github.com/nixys/nxs-data-anonymizer", "domain": "github.com/nixys", "votes": 2, "user": "nixys_nxs", "posted_at": "2024-04-24 09:10:01", "comments": 0, "source_title": "GitHub - nixys/nxs-data-anonymizer: A tool for anonymizing PostgreSQL and MySQL databases' dump", "source_text": "GitHub - nixys/nxs-data-anonymizer: A tool for anonymizing PostgreSQL and\nMySQL databases' dump\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nnixys / nxs-data-anonymizer Public\n\n  * Notifications\n  * Fork 6\n  * Star 75\n\nA tool for anonymizing PostgreSQL and MySQL databases' dump\n\n### License\n\nApache-2.0 license\n\n75 stars 6 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# nixys/nxs-data-anonymizer\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n11 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\n## History\n\n48 Commits  \n  \n### .docker\n\n|\n\n### .docker\n\n| build: Update golang docker image| Feb 9, 2024  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| build: Update golang docker image| Feb 9, 2024  \n  \n### ctx\n\n|\n\n### ctx\n\n| feat(#15): Field values from external commands| Apr 24, 2024  \n  \n### ds/mysql\n\n|\n\n### ds/mysql\n\n| Init| Jun 28, 2023  \n  \n### misc\n\n|\n\n### misc\n\n| feat(#15): Field values from external commands| Apr 24, 2024  \n  \n### modules\n\n|\n\n### modules\n\n| feat(#15): Field values from external commands| Apr 24, 2024  \n  \n### routines/anonymizer\n\n|\n\n### routines/anonymizer\n\n| refactor: Migrate to nxs-go-appctx v3| Nov 14, 2023  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Init| Jun 28, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Changed license| Jul 21, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| docs(#15): Update Readme| Apr 24, 2024  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| feat(#15): Field values from external commands| Apr 24, 2024  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| feat(#15): Field values from external commands| Apr 24, 2024  \n  \n### main.go\n\n|\n\n### main.go\n\n| refactor: Migrate to nxs-go-appctx v3| Nov 14, 2023  \n  \n## Repository files navigation\n\n# nxs-data-anonymizer\n\n## Introduction\n\nnxs-data-anonymizer is a tool for anonymizing PostgreSQL and\nMySQL/MariaDB/Percona databases' dump.\n\n### Features\n\n  * Supported databases and versions:\n\n    * PostgreSQL (9/10/11/12/13/14/15/all versions)\n    * MySQL/MariaDB/Percona (5.7/8.0/8.1/all versions)\n  * Flexible data faking based on Go templates and Sprig template\u2019s library like Helm. You may also use values of other columns for same row to build more flexible rules\n  * Stream data processing. It means that you can a use the tool through a pipe in command line and redirect dump from source DB directly to the destination DB with required transformations\n  * Easy to integrate into your CI/CD\n\n### Who can use the tool\n\nDevelopment and project teams which are dealing with production and\ntest/dev/stage or dynamic namespaces with databases and need to ensure\nsecurity and prevent data leaks.\n\n## Quickstart\n\nInspect your database structure and set up the nxs-data-anonymizer config in\naccordance with the sensitive data you need to anonymize.\n\nYou are able to use this tool in any way you want. Three most common ways are\ndescribed below.\n\n#### Console\n\nIn order to operate with your database anonymization via console you need to\ngo through the following steps:\n\n  * Download and untar the nxs-data-anonymizer binary\n  * Run the nxs-data-anonymizer through the command line with arguments you want to use\n\nFor example, use the following command if you need to anonymize your\nPostgreSQL database from production to dev on fly (PostgreSQL Client need to\nbe installed):\n\n    \n    \n    export PGPASSWORD=password; pg_dump -U postgres prod | /path/to/nxs-data-anonymizer -t pgsql -c /path/to/nxs-data-anonymizer.conf | psql -U postgres dev\n\n#### GitLab CI\n\nThis section describes how to integrate nxs-data-anonymizer into your GitLab\nCI. You may add jobs presented below into your .gitlab-ci.yml and adjust it\nfor yourself.\n\n##### Job: anonymize prod\n\nJob described in this section is able to perform the following tasks:\n\n  * Run when special tag for main branch is set\n  * Create a production database dump, anonymize and upload it into s3 bucket\n\nJob sample:\n\n    \n    \n    anonymize: stage: anonymize image: nixyslab/nxs-data-anonymizer:latest variables: GIT_STRATEGY: none PG_HOST: ${PG_HOST_PROD} PG_USER: ${PG_USER_PROD} PGPASSWORD: ${PG_PASS_PROD} before_script: - echo \"${S3CMD_CFG}\" > ~/.s3cmd - echo \"${NXS_DA_CFG}\" > /nxs-data-anonymizer.conf script: - pg_dump -h ${PG_HOST} -U ${PG_USER} --schema=${PG_SCHEMA} ${PG_DATABASE} | /nxs-data-anonymizer -t pgsql -c /nxs-data-anonymizer.conf | gzip | s3cmd put - s3://bucket/anondump.sql.gz only: - /^v.*$/ except: - branches - merge_requests\n\n##### Job: update stage\n\nJob described in this section deals with the following:\n\n  * Manual job for stage branch\n  * Download the anonymized dump from s3 bucket and load into stage database\n\nJob sample:\n\n    \n    \n    restore-stage: stage: restore image: nixyslab/nxs-data-anonymizer:latest variables: GIT_STRATEGY: none PG_HOST: ${PG_HOST_STAGE} PG_USER: ${PG_USER_STAGE} PGPASSWORD: ${PG_PASS_STAGE} before_script: - echo \"${S3CMD_CFG}\" > ~/.s3cmd script: - s3cmd --no-progress --quiet get s3://bucket/anondump.sql.gz - | gunzip | psql -h ${PG_HOST} -U ${PG_USER} --schema=${PG_SCHEMA} ${PG_DATABASE} only: - stage when: manual\n\n##### CI/CD variables\n\nThis section contains a description of CI/CD variables used in GitLab CI job\nsamples above.\n\n###### General\n\nVariable| Description  \n---|---  \nS3CMD_CFG| S3 storage config  \nPG_SCHEMA| PgSQL schema  \nPG_DATABASE| PgSQL database name  \n  \n###### Production\n\nVariable| Description  \n---|---  \nNXS_DA_CFG| nxs-data-anonymizer config  \nPG_HOST_PROD| PgSQL host  \nPG_USER_PROD| PgSQL user  \nPG_PASS_PROD| PgSQL password  \n  \n###### Stage\n\nVariable| Description  \n---|---  \nPG_HOST_STAGE| PgSQL host  \nPG_USER_STAGE| PgSQL user  \nPG_PASS_STAGE| PgSQL password  \n  \n#### GitHub Actions\n\nThis section describes how to integrate nxs-data-anonymizer into your GitHub\nActions. You may add jobs presented below into your .github workflows and\nadjust it for yourself.\n\n##### Job: anonymize prod\n\nJob described in this section is able to perform the following tasks:\n\n  * Run when special tag is set\n  * Create a production database dump, anonymize and upload it into s3 bucket\n\n    \n    \n    on: push: tags: - v*.* jobs: anonymize: runs-on: ubuntu-latest container: image: nixyslab/nxs-data-anonymizer:latest env: PG_HOST: ${{ secrets.PG_HOST_PROD }} PG_USER: ${{ secrets.PG_USER_PROD }} PGPASSWORD: ${{ secrets.PG_PASS_PROD }} PG_SCHEMA: ${{ secrets.PG_SCHEMA }} PG_DATABASE: ${{ secrets.PG_DATABASE }} steps: - name: Create services configs run: | echo \"${{ secrets.S3CMD_CFG }}\" > ~/.s3cmd echo \"${{ secrets.NXS_DA_CFG }}\" > /nxs-data-anonymizer.conf - name: Anonymize run: | pg_dump -h ${PG_HOST} -U ${PG_USER} --schema=${PG_SCHEMA} ${PG_DATABASE} | /nxs-data-anonymizer -t pgsql -c /nxs-data-anonymizer.conf | gzip | s3cmd put - s3://bucket/anondump.sql.gz\n\n##### Job: update stage\n\nJob described in this section deals with the following:\n\n  * Manual job\n  * Download the anonymized dump from s3 bucket and load into stage database\n\n    \n    \n    on: workflow_dispatch jobs: restore-stage: runs-on: ubuntu-latest container: image: nixyslab/nxs-data-anonymizer:latest env: PG_HOST: ${{ secrets.PG_HOST_STAGE }} PG_USER: ${{ secrets.PG_USER_STAGE }} PGPASSWORD: ${{ secrets.PG_PASS_STAGE }} PG_SCHEMA: ${{ secrets.PG_SCHEMA }} PG_DATABASE: ${{ secrets.PG_DATABASE }} steps: - name: Create services configs run: | echo \"${{ secrets.S3CMD_CFG }}\" > ~/.s3cmd - name: Restore run: | s3cmd --no-progress --quiet get s3://bucket/anondump.sql.gz - | gunzip | psql -h ${PG_HOST} -U ${PG_USER} --schema=${PG_SCHEMA} ${PG_DATABASE}\n\n##### GitHub Actions secrets\n\nThis section contains a description of secrets used in GitHub Actions job\nsamples above.\n\n###### General\n\nVariable| Description  \n---|---  \nS3CMD_CFG| S3 storage config  \nPG_SCHEMA| PgSQL schema  \nPG_DATABASE| PgSQL database name  \n  \n###### Production\n\nVariable| Description  \n---|---  \nNXS_DA_CFG| nxs-data-anonymizer config  \nPG_HOST_PROD| PgSQL host  \nPG_USER_PROD| PgSQL user  \nPG_PASS_PROD| PgSQL password  \n  \n###### Stage\n\nVariable| Description  \n---|---  \nPG_HOST_STAGE| PgSQL host  \nPG_USER_STAGE| PgSQL user  \nPG_PASS_STAGE| PgSQL password  \n  \n### Settings\n\nDefault configuration file path: /nxs-data-anonymizer.conf. The file is\nrepresented in yaml.\n\n#### Command line arguments\n\nArgument| Short| Required| Having value| Default value| Description  \n---|---|---|---|---|---  \n\\--help| -h| No| No| -| Show program help message  \n\\--version| -v| No| No| -| Show program version  \n\\--conf| -c| No| Yes| /nxs-data-anonymizer.conf| Configuration file path  \n\\--input| -i| No| Yes| -| File to read data from. If not specified stdin will\nbe used  \n\\--log-format| -l| No| Yes| json| Log file format. You are available to use\neither json or plain value  \n\\--output| -o| No| Yes| -| File to write data to. If not specified stdout will\nbe used  \n\\--type| -t| Yes| Yes| -| Database dump file type. Available values: pgsql,\nmysql  \n  \n#### General settings\n\nOption| Type| Required| Default value| Description  \n---|---|---|---|---  \nlogfile| String| No| stderr| Log file path. You may also use stdout and stderr  \nloglevel| String| No| info| Log level. Available values: debug, warn, error\nand info  \nprogress| Progress| No| -| Anonymization progress logging  \nfilters| Map of Filters| No| -| Filters set for specified tables (key as a\ntable name). Note: for PgSQL you also need to specify a scheme (e.g.\npublic.tablename)  \n  \n##### Progress settings\n\nOption| Type| Required| Default value| Description  \n---|---|---|---|---  \nrhythm| String| No| 0s| Frequency write into the log a read bytes count.\nProgress will be written to the log only when this option is specified and has\nnone-zero value. You may use a human-readable values (e.g. 30s, 5m, etc)  \nhumanize| Bool| No| false| Set this option to true if you need to write into\nthe log a read bytes count in a human-readable format. On false raw bytes\ncount will be written to the log  \n  \n##### Filters settings\n\nFilters description for specified table.\n\nOption| Type| Required| Default value| Description  \n---|---|---|---|---  \ncolumns| Map of Columns| No| -| Filter rules for specified columns of table\n(key as a column name)  \n  \n###### Columns settings\n\nOption| Type| Required| Default value| Description  \n---|---|---|---|---  \ntype| String| No| template| Type of field value: template and command are\navailable  \nvalue| String| Yes| -| The value to be used to replace at every cell in\nspecified column. In accordance with the type this value may be either Go\ntemplate or command. See below for details  \nunique| Bool| No| false| If true checks the generated value for cell is unique\nwhole the column  \n  \nGo template\n\nTo anonymize a database fields you may use a Go template with the Sprig\ntemplate library's functions. You may also use values of other columns in the\nrules for same row (with values before substitutions).\n\nAdditional filter functions:\n\n  * null: set a field value to NULL\n  * isNull: compare a field value with NULL\n\nCommand\n\nTo anonymize a database fields you may use a commands (scripts or binaries)\nwith any logic you need. The command's concept has following properties:\n\n  * The command's stdout will be used as a new value for the anonymized field\n  * Command must return zero exit code, otherwise nxs-data-anonymizer will falls with error (in this case stderr will be used as an error text)\n  * Environment variables with the row data are available within the command:\n\n    * ENVVARTABLE: contains a name of the filtered table\n    * ENVVARCURCOLUMN: contains the current column name\n    * ENVVARCOLUMN_{COLUMN_NAME}: contains values (before substitutions) for all columns for the current row\n\n#### Example\n\nImagine you have a simple table users in your production PgSQL like this:\n\nid| username| password| api_key  \n---|---|---|---  \n1| admin| ZjCX6wUxtXIMtip| epezyj0cj5rqrdtxklnzxr3f333uibtz6avek7926141t1c918  \n2| alice| tuhjLkgwwetiwf8| 2od4vfsx2irj98hgjaoi6n7wjr02dg79cvqnmet4kyuhol877z  \n3| bob| AjRzvRp3DWo6VbA| owp7hob5s3o083d5hmursxgcv9wc4foyl20cbxbrr73egj6jkx  \n  \nYou need to get a dump with fake values:\n\n  * For admin: preset fixed value for a password and API key to avoid the need to change an app settings in your dev/test/stage or local environment after downloading the dump\n  * For others: usernames in format user_N (where N it is a user ID) and unique random passwords and API keys\n\nIn accordance with these conditions, the nxs-data-anonymizer config may look\nlike this:\n\n    \n    \n    filters: public.users: columns: username: value: \"{{ if eq .Values.username \\\"admin\\\" }}{{ .Values.username }}{{ else }}user_{{ .Values.id }}{{ end }}\" password: type: command value: /path/to/script.sh unique: true api_key: value: \"{{ if eq .Values.username \\\"admin\\\" }}preset_admin_api_key{{ else }}{{- randAlphaNum 50 | nospace | lower -}}{{ end }}\" unique: true\n\nThe /path/to/script.sh script content is following:\n\n    \n    \n    #!/bin/bash # Print preset password if current user is admin if [ \"$ENVVARCOLUMN_username\" == \"admin\" ]; then echo -n \"preset_admin_password\" exit 0 fi # Generate password for other users p=$(pwgen -s 5 1 2>&1) if [ ! $? -eq 0 ]; then # On error print message to stderr and exit with non zero code echo -n \"$p\" >&2 exit 1 fi # Print generated password echo $p | tr -d '\\n' exit 0\n\nNow you may execute the following command in order to load anonymized data\ninto your dev DB:\n\n    \n    \n    pg_dump ... | ./nxs-data-anonymizer -c filters.conf | psql -h localhost -U user example\n\nAs a result:\n\nid| username| password| api_key  \n---|---|---|---  \n1| admin| preset_admin_password| preset_admin_api_key  \n2| user_2| Pp4HY| dhx4mccxyd8ux5uf1khpbqsws8qqeqs4efex1vhfltzhtjcwcu  \n3| user_3| vu5TW| lgkkq3csskuyew8fr52vfjjenjzudokmiidg3cohl2bertc93x  \n  \nIt's easy.\n\n## Roadmap\n\nFollowing features are already in backlog for our development team and will be\nreleased soon:\n\n  * Global variables with the templated values you may use through the filters for all tables and columns\n  * Ability to delete tables and rows from faked dump\n  * Ability to output into log a custom messages. It\u2019s quite useful it order to obtain some generated data like admin passwords, etc\n  * Support of a big variety of databases\n\n## Feedback\n\nFor support and feedback please contact me:\n\n  * telegram: @borisershov\n  * e-mail: b.ershov@nixys.io\n\nFor news and discussions subscribe the channels:\n\n  * Telegram community (news): @nxs_data_anonymizer\n  * Telegram community (chat): @nxs_data_anonymizer_chat\n\n## License\n\nnxs-data-anonymizer is released under the Apache License 2.0.\n\n## About\n\nA tool for anonymizing PostgreSQL and MySQL databases' dump\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\nCustom properties\n\n### Stars\n\n75 stars\n\n### Watchers\n\n11 watching\n\n### Forks\n\n6 forks\n\nReport repository\n\n## Releases 11\n\nRelease v1.4.0 Latest\n\nApr 24, 2024\n\n\\+ 10 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 3\n\n  * borisershov Boris Ershov\n  * vsokhan-nixys\n  * statkashaman Viktor\n\n## Languages\n\n  * Go 99.1%\n  * Dockerfile 0.9%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
