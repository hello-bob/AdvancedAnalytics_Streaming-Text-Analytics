{"aid": "40260895", "title": "OAuth 2.0 for First-Party Native Applications", "url": "https://www.ietf.org/archive/id/draft-parecki-oauth-first-party-native-apps-00.html", "domain": "ietf.org", "votes": 2, "user": "mooreds", "posted_at": "2024-05-04 22:41:45", "comments": 0, "source_title": "OAuth 2.0 for First-Party Native Applications", "source_text": "OAuth 2.0 for First-Party Native Applications\n\nInternet-Draft| OAuth for First-Party Native Apps| July 2023  \n---|---|---  \nParecki, et al.| Expires 8 January 2024| [Page]  \n  \nWorkgroup:\n\n    Web Authorization Protocol\nInternet-Draft:\n\n    draft-parecki-oauth-first-party-native-apps-00\nPublished:\n\n    7 July 2023\nIntended Status:\n\n    Standards Track\nExpires:\n\n    8 January 2024\nAuthors:\n\n    \n\nA. Parecki\n\nOkta\n\nG. Fletcher\n\nCapital One Financial\n\nP. Kasselman\n\nMicrosoft\n\n# OAuth 2.0 for First-Party Native Applications\n\n## Abstract\n\nThis document defines the Authorization Challenge Endpoint, which supports a\nfirst-party native client that wants to control the process of obtaining\nauthorization from the user using a native experience.\u00b6\n\nIn many cases, this can provide an entirely browserless OAuth 2.0 experience\nsuited for native applications, only delegating to the browser in unexpected,\nhigh risk, or error conditions.\u00b6\n\n## About This Document\n\nThis note is to be removed before publishing as an RFC.\u00b6\n\nThe latest revision of this draft can be found at\nhttps://aaronpk.github.io/oauth-first-party-native-apps/draft-parecki-oauth-\nfirst-party-native-apps.html. Status information for this document may be\nfound at https://datatracker.ietf.org/doc/draft-parecki-oauth-first-party-\nnative-apps/.\u00b6\n\nDiscussion of this document takes place on the Web Authorization Protocol\nWorking Group mailing list (mailto:oauth@ietf.org), which is archived at\nhttps://mailarchive.ietf.org/arch/browse/oauth/. Subscribe at\nhttps://www.ietf.org/mailman/listinfo/oauth/.\u00b6\n\nSource for this draft and an issue tracker can be found at\nhttps://github.com/aaronpk/oauth-first-party-native-apps.\u00b6\n\n## Status of This Memo\n\nThis Internet-Draft is submitted in full conformance with the provisions of\nBCP 78 and BCP 79.\u00b6\n\nInternet-Drafts are working documents of the Internet Engineering Task Force\n(IETF). Note that other groups may also distribute working documents as\nInternet-Drafts. The list of current Internet-Drafts is at\nhttps://datatracker.ietf.org/drafts/current/.\u00b6\n\nInternet-Drafts are draft documents valid for a maximum of six months and may\nbe updated, replaced, or obsoleted by other documents at any time. It is\ninappropriate to use Internet-Drafts as reference material or to cite them\nother than as \"work in progress.\"\u00b6\n\nThis Internet-Draft will expire on 8 January 2024.\u00b6\n\n## Copyright Notice\n\nCopyright (c) 2023 IETF Trust and the persons identified as the document\nauthors. All rights reserved.\u00b6\n\nThis document is subject to BCP 78 and the IETF Trust's Legal Provisions\nRelating to IETF Documents (https://trustee.ietf.org/license-info) in effect\non the date of publication of this document. Please review these documents\ncarefully, as they describe your rights and restrictions with respect to this\ndocument. Code Components extracted from this document must include Revised\nBSD License text as described in Section 4.e of the Trust Legal Provisions and\nare provided without warranty as described in the Revised BSD License.\u00b6\n\n\u25b2\n\n## Table of Contents\n\n## 1\\. Introduction\n\nThis document extends the OAuth 2.0 Authorization Framework [RFC6749] with a\nnew endpoint, authorization_challenge_endpoint, to support first-party native\napplications that want to control the process of obtaining authorization from\nthe user using a native experience.\u00b6\n\nThe client collects any initial information from the user and POSTs that\ninformation as well as information about the client's request to the\nAuthorization Challenge Endpoint, and receives either an authorization code or\nan error code in response. The error code may indicate that the client can\ncontinue to prompt the user for more information, or can indicate that the\nclient needs to launch a browser to have the user complete the flow in a\nbrowser.\u00b6\n\nThe Authorization Challenge Endpoint is used to initiate the OAuth flow in\nplace of redirecting or launching a browser to the authorization endpoint.\u00b6\n\nWhile a fully-delegated approach using the redirect-based Authorization Code\ngrant is generally preferred, this draft provides a mechanism for the client\nto directly interact with the user. This requires a high degree of trust\nbetween the authorization server and the client, as there typically is for\nfirst-party applications. It should only be considered when there are\nusability concerns with a redirect-based approach, such as for native mobile\nor desktop applications.\u00b6\n\nThis draft also extends the token response (typically for use in response to a\nrefresh token request) and resource server response to allow the authorization\nserver or resource server to indicate that the client should re-request\nauthorization from the user. This can include requesting step-up\nauthentication by including parameters defined in [I-D.ietf-oauth-step-up-\nauthn-challenge] as well.\u00b6\n\n### 1.1. Usage and Applicability\n\nThis specification MUST only be used by first-party applications, which is\nwhen the authorization server and application are operated by the same entity\nand the user understands them both as the same entity.\u00b6\n\nThis specification MUST NOT be used by third party applications, and the\nauthorization server SHOULD take measures to prevent use by third party\napplications. (e.g. only enable this grant for certain client IDs, and take\nmeasures to authenticate first-party apps when possible.)\u00b6\n\nUsing this specification in scenarios other than those described will lead to\nunintended security and privacy problems for users and service providers.\u00b6\n\nThis specification is designed to be used by native applications, which\nincludes both mobile and desktop applications.\u00b6\n\nIf you provide multiple apps and expect users to use multiple apps on the same\ndevice, there may be better ways of sharing a user's login between the apps\nother than each app implementing this specification or using an SDK that\nimplements this specification. For example, [OpenID.Native-SSO] provides a\nmechanism for one app to obtain new tokens by exchanging tokens from another\napp, without any user interaction. See Section 9.5 for more details.\u00b6\n\n### 1.2. Limitations of this specification\n\nThe scope of this specification is limited to first-party native applications.\nPlease review the entirety of Section 9, and when more than one first-party\nnative application is supported, Section 9.5.\u00b6\n\nWhile this draft provides the framework for a native OAuth experience, each\nimplementation will need to define the specific behavior that it expects from\nOAuth clients interacting with the authorization server. While this lack of\nclearly defining the details would typically lead to less interoperability, it\nis acceptable in this case since we intend this specification to be deployed\nin a tightly coupled environment since it is only applicable to first-party\napplications.\u00b6\n\n## 2\\. Conventions and Definitions\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\",\n\"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\ndocument are to be interpreted as described in BCP 14 [RFC2119] [RFC8174]\nwhen, and only when, they appear in all capitals, as shown here.\u00b6\n\n### 2.1. Terminology\n\nThis specification uses the terms \"Access Token\", \"Authorization Code\",\n\"Authorization Endpoint\", \"Authorization Server\" (AS), \"Client\", \"Client\nAuthentication\", \"Client Identifier\", \"Client Secret\", \"Grant Type\",\n\"Protected Resource\", \"Redirection URI\", \"Refresh Token\", \"Resource Owner\",\n\"Resource Server\" (RS) and \"Token Endpoint\" defined by [RFC6749].\u00b6\n\nTODO: Replace RFC6749 references with OAuth 2.1\u00b6\n\n## 3\\. Protocol Overview\n\nThere are three primary ways this specification extends various parts of an\nOAuth system.\u00b6\n\n### 3.1. Initial Authorization Request\n\n    \n    \n    +-------------------+ | Authorization | (B)Authorization | Server | +----------+ Challenge Request |+-----------------+| (A)Client+---| Native |---------------------->|| Authorization || Starts| | Client | || Challenge || Flow +-->| |<----------------------|| Endpoint || | | (C)Authorization || || | | Error Response || || | | : || || | | : || || | | (D)Authorization || || | | Challenge Request || || | |---------------------->|| || | | || || | |<----------------------|| || | | (E) Authorization |+-----------------+| | | Code Response | | | | | | | | | | | | | | | | (F) Token | | | | Request |+-----------------+| | |---------------------->|| Token || | | || Endpoint || | |<----------------------|| || | | (G) Access Token |+-----------------+| | | | | +----------+ +-------------------+\n\n\u00b6\n\nFigure: Native Client Authorization Code Request\u00b6\n\n  * (A) The native client starts the flow, by presenting the user with a \"sign in\" button, or collecting information from the user, such as their email address or username.\u00b6\n  * (B) The client initiates the authorization request by making a POST request to the Authorization Challenge Endpoint, optionally with information collected from the user (e.g. email or username)\u00b6\n  * (C) The authorization server determines whether the information provided to the Authorization Challenge Endpoint is sufficient to grant authorization, and either responds with an authorization code or responds with an error. In this example, it determines that additional information is needed and responds with an error. The error may contain additional information to guide the Client on what information to collect next. This pattern of collecting information, submitting it to the Authorization Challenge Endpoint and then receing an error or authorization code may repeat several times.\u00b6\n  * (D) The client gathers additional information (e.g. passkey, or one-time code from email) and makes a POST request to the Authorization Challenge Endpoint.\u00b6\n  * (E) The Authorization Challenge Endpoint returns an authorization code.\u00b6\n  * (F) The native client sends the authorization code received in step (E) to obtain a token from the Token Endpoint.\u00b6\n  * (G) The Authorization Server returns an Access Token from the Token Endpoint.\u00b6\n\n### 3.2. Refresh Token Request\n\nWhen the client uses a refresh token to obtain a new access token, the\nauthorization server MAY respond with an error to indicate that re-\nauthorization of the user is required.\u00b6\n\n### 3.3. Resource Request\n\nWhen making a resource request to a resource server, the resource server MAY\nrespond with an error according to OAuth 2.0 Step-Up Authentication Challenge\nProtocol [I-D.ietf-oauth-step-up-authn-challenge], indicating that re-\nauthorization of the user is required.\u00b6\n\n## 4\\. Protocol Endpoints\n\n### 4.1. Authorization Challenge Endpoint\n\nThe authorization challenge endpoint is a new endpoint defined by this\nspecification which the native application uses to obtain an authorization\ncode.\u00b6\n\nThe authorization challenge endpoint is an HTTP API at the authorization\nserver that accepts HTTP POST requests with parameters in the HTTP request\nmessage body using the application/x-www-form-urlencoded format. This format\nhas a character encoding of UTF-8, as described in Appendix B of [RFC6749].\nThe authorization challenge endpoint URL MUST use the \"https\" scheme.\u00b6\n\nAuthorization servers supporting this specification SHOULD include the URL of\ntheir authorization challenge endpoint in their authorization server metadata\ndocument [RFC8414] using the authorization_challenge_request_endpoint\nparameter as defined in Section 8.\u00b6\n\nThe endpoint accepts the authorization request parameters defined in [RFC6749]\nfor the authorization endpoint as well as all applicable extensions defined\nfor the authorization endpoint. Some examples of such extensions include Proof\nKey for Code Exchange (PKCE) [RFC7636], Resource Indicators [RFC8707], and\nOpenID Connect [OpenID]. It is important to note that some extension\nparameters have meaning in a web context but don't have meaning in a native\nmechanism (e.g. response_mode=query). It is out of scope as to what the AS\ndoes in the case that an extension defines a parameter that is has no meaning\nin this use case.\u00b6\n\nThe client initiates the authorization flow with or without information\ncollected from the user (e.g. a passkey or MFA code).\u00b6\n\nThe authorization challenge endpoint response is either an authorization code\nor an error code, and may also contain a device_session which the client uses\non subsequent requests to the authorization challenge endpoint.\u00b6\n\n### 4.2. Token endpoint\n\nThe token endpoint is used by the client to obtain an access token by\npresenting its authorization grant or refresh token, as described in Section\n3.2 of OAuth 2.0 [RFC6749].\u00b6\n\nThis specification extends the token endpoint response to allow the\nauthorization server to indicate that further authentication of the user is\nrequired.\u00b6\n\n## 5\\. Authorization Initiation\n\nA client may wish to initiate an authorization flow by first prompting the\nuser for their user identifier or other account information. The authorization\nchallenge endpoint is a new endpoint to collect this login hint and direct the\nclient with the next steps, whether that is to do an MFA flow, or perform an\nOAuth redirect-based flow.\u00b6\n\n### 5.1. Authorization Challenge Request\n\nThe client makes a request to the authorization challenge endpoint by adding\nthe following parameters, as well as parameters from any extensions, using the\napplication/x-www-form-urlencoded format with a character encoding of UTF-8 in\nthe HTTP request body:\u00b6\n\n\"client_id\":\n\n    \n\nREQUIRED if the client is not authenticating with the authorization server and\nif no device_session is included.\u00b6\n\n\"scope\":\n\n    \n\nOPTIONAL. The OAuth scope defined in [RFC6749].\u00b6\n\n\"acr_values\":\n\n    \n\nOPTIONAL. The acr_values requested by the client.\u00b6\n\n\"device_session\":\n\n    \n\nOPTIONAL. If the client has previously obtained a device session, described in\nSection 5.3.\u00b6\n\nSpecific implementations as well as extensions to this specification MAY\ndefine additional parameters to be used at this endpoint.\u00b6\n\nFor example, the client makes the following request to initiate a flow given\nthe user's phone number, line breaks shown for illustration purposes only:\u00b6\n\n    \n    \n    POST /authorize HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded login_hint=%2B1-310-123-4567&scope=profile &client_id=bb16c14c73415\n\n\u00b6\n\n### 5.2. Authorization Challenge Response\n\nThe authorization server determines whether the information provided up to\nthis point is sufficient to issue an authorization code, and responds with an\nauthorization code or an error message.\u00b6\n\n#### 5.2.1. Authorization Code Response\n\nThe authorization server issues an authorization code by creating an HTTP\nresponse content using the application/json media type as defined by [RFC8259]\nwith the following parameters and an HTTP 200 (OK) status code:\u00b6\n\n\"authorization_code\":\n\n    \n\nREQUIRED. The authorization code issued by the authorization server.\u00b6\n\nFor example,\u00b6\n\n    \n    \n    HTTP/1.1 200 OK Content-Type: application/json;charset=UTF-8 Cache-Control: no-store { \"authorization_code\": \"uY29tL2F1dGhlbnRpY\" }\n\n\u00b6\n\n#### 5.2.2. Error Response\n\nIf the request contains invalid parameters or incorrect data, the\nauthorization server responds with an HTTP 400 (Bad Request) status code\n(unless specified otherwise) and includes the following parameters with the\nresponse:\u00b6\n\n\"error\":\n\n    \n\nREQUIRED. A single ASCII [USASCII] error code from the following:\u00b6\n\n\"invalid_request\":\n\n    \n\nThe request is missing a required parameter, includes an unsupported parameter\nvalue, repeats a parameter, includes multiple credentials, utilizes more than\none mechanism for authenticating the client, or is otherwise malformed.\u00b6\n\n\"invalid_client\":\n\n    \n\nClient authentication failed (e.g., unknown client, no client authentication\nincluded, or unsupported authentication method). The authorization server MAY\nreturn an HTTP 401 (Unauthorized) status code to indicate which HTTP\nauthentication schemes are supported. If the client attempted to authenticate\nvia the Authorization request header field, the authorization server MUST\nrespond with an HTTP 401 (Unauthorized) status code and include the WWW-\nAuthenticate response header field matching the authentication scheme used by\nthe client.\u00b6\n\n\"unauthorized_client\":\n\n    \n\nThe authenticated client is not authorized to use this authorization grant\ntype.\u00b6\n\n\"invalid_scope\":\n\n    \n\nThe requested scope is invalid, unknown, malformed, or exceeds the scope\ngranted by the resource owner.\u00b6\n\nValues for the error parameter MUST NOT include characters outside the set\n%x20-21 / %x23-5B / %x5D-7E.\u00b6\n\nThe authorization server MAY extend these error codes with custom messages\nbased on the requirements of the authorization server.\u00b6\n\n\"error_description\":\n\n    \n\nOPTIONAL. Human-readable ASCII [USASCII] text providing additional\ninformation, used to assist the client developer in understanding the error\nthat occurred. Values for the error_description parameter MUST NOT include\ncharacters outside the set %x20-21 / %x23-5B / %x5D-7E.\u00b6\n\n\"error_uri\":\n\n    \n\nOPTIONAL. A URI identifying a human-readable web page with information about\nthe error, used to provide the client developer with additional information\nabout the error. Values for the error_uri parameter MUST conform to the URI-\nreference syntax and thus MUST NOT include characters outside the set %x21 /\n%x23-5B / %x5D-7E.\u00b6\n\n\"device_session\":\n\n    \n\nOPTIONAL. The device session allows the authorization server to associate\nsubsequent requests by this client with an ongoing authorization request\nsequence. The client MUST include the device_session in follow-up requests to\nthe challenge endpoint if it receives one along with the error response.\u00b6\n\nThe parameters are included in the content of the HTTP response using the\napplication/json media type as defined by [RFC7159]. The parameters are\nserialized into a JSON structure by adding each parameter at the highest\nstructure level. Parameter names and string values are included as JSON\nstrings. Numerical values are included as JSON numbers. The order of\nparameters does not matter and can vary.\u00b6\n\nThe authorization server MAY define additional parameters in the response\ndepending on the implmentation.\u00b6\n\n### 5.3. Device Session\n\nThe device session is completely opaque to the client, and as such the AS MUST\nadequately protect the value from inspection by the client, for example by\nusing a JWE if the AS is not maintaining state on the backend.\u00b6\n\nThe client MUST include the device session in future requests to the\nauthorization challenge endpoint for the particular authorization request.\u00b6\n\n## 6\\. Token Request\n\nThe client makes a request to the token endpoint using the authorization code\nit obtained from the authorization challenge endpoint.\u00b6\n\nThis specification does not define any additional parameters beyond the token\nrequest parameters defined in Section 4.1.3 of [RFC6749]. However, notably the\nredirect_uri parameter will not be included in this request, because no\nredirect_uri parameter was included in the authorization request.\u00b6\n\n### 6.1. Token Endpoint Error Response\n\nUpon any request to the token endpoint, including a request with a valid\nrefresh token, the authorization server can respond with an authorization\nchallenge instead of a successful access token response.\u00b6\n\nAn authorization challenge error response is a particular type of error\nresponse as defined in Section 5.2 of OAuth 2.0 [RFC6749] where the error code\nis set to the following value:\u00b6\n\n\"error\": \"authorization_required\":\n\n    \n\nThe authorization grant is insufficiently authorized, but another access token\nrequest may succeed if an additional authorization grant is presented.\u00b6\n\n\"device_session\":\n\n    \n\nOPTIONAL. The optional device session value allows the authorization server to\nassociate subsequent requests by this client with an ongoing authorization\nrequest sequence. The client MUST include the device_session in follow-up\nrequests to the challenge endpoint if it receives one along with the error\nresponse.\u00b6\n\nFor example:\u00b6\n\n    \n    \n    HTTP/1.1 403 Forbidden Content-Type: application/json;charset=UTF-8 Cache-Control: no-store { \"error\": \"authorization_required\", \"device_session\": \"uY29tL2F1dGhlbnRpY\" }\n\n\u00b6\n\n## 7\\. Resource Server Error Response\n\nStep-Up Authentication [I-D.ietf-oauth-step-up-authn-challenge] defines a\nmechanism for resource servers to tell the client to start a new authorization\nrequest, including acr_values and max_age, and scope from RFC6750. Upon\nreceiving this request, the client starts a new authorization request\naccording to this specification, and includes the acr_values, max_age and\nscope returned in the error response.\u00b6\n\nThis specification does not define any new parameters for the resource server\nerror response beyond those defined in [I-D.ietf-oauth-step-up-authn-\nchallenge].\u00b6\n\n## 8\\. Authorization Server Metadata\n\nThe following authorization server metadata parameters [RFC8414] are\nintroduced to signal the server's capability and policy with respect to 1st\nParty Native Applications.\u00b6\n\n\"authorization_challenge_endpoint\":\n\n    \n\nThe URL of the authorization challenge endpoint at which a client can initiate\nan authorization request and eventually obtain an authorization code.\u00b6\n\n## 9\\. Security Considerations\n\n### 9.1. First-Party Applications\n\nBecause this specification enables a client application to interact directly\nwith the end user, and the application handles sending any information\ncollected from the user to the authorization server, it is expected to be used\nonly for first-party applications when the authorization server also has a\nhigh degree of trust of the client.\u00b6\n\nFirst-party applications are applications that the user recognizes as\nbelonging to the same brand as the authorization server. For example, a bank\npublishing their own mobile application.\u00b6\n\n### 9.2. Phishing\n\nThere are two ways using this specification increases the risk of phishing.\u00b6\n\nWith this specification, the client interacts directly with the end user,\ncollecting information provided by the user and sending it to the\nauthorization server. If an attacker impersonates the client and successfully\ntricks a user into using it, they may not realize they are giving their\ncredentials to the malicious application.\u00b6\n\nIn a traditional OAuth deployment using the redirect-based authorization code\nflow, the user will only ever enter their credentials at the authorization\nserver, and it is straightforward to explain to avoid entering credentials in\nother \"fake\" websites. By introducing a new place the user is expected to\nenter their credentials using this specification, it is more complicated to\nteach users how to recognize other fake login prompts that might be attempting\nto steal their credentials.\u00b6\n\nBecause of these risks, the authorization server MAY decide to require that\nthe user go through a redirect-based flow at any stage of the process based on\nits own risk assessment.\u00b6\n\n### 9.3. Client Authentication\n\nTypically, mobile and desktop applications are considered \"public clients\" in\nOAuth, since they cannot be shipped with a statically configured set of client\ncredentials [RFC8252]. Because of this, client impersonation should be a\nconcern of anyone deploying this pattern. Without client authentication, a\nmalicious user or attacker can mimick the requests the application makes to\nthe authorization server, pretending to be the legitimate client.\u00b6\n\nBecause this specification is intended for first-party applications, it is\nlikely that the intent is to also avoid prompting the user with a consent\nscreen as recommended by [RFC6749].\u00b6\n\nImplementers SHOULD consider additional measures to limit the risk of client\nimpersonation, such as using attestation APIs available from the operating\nsystem.\u00b6\n\n### 9.4. Sender Constrained Tokens\n\nTokens issued to native apps SHOULD be sender constrained to mitigate the risk\nof token theft and replay.\u00b6\n\nProof-of-Possession techniques constrain tokens by binding them to a\ncryptographic key. Whenever the token is presented, it should be accompanied\nby a proof that the client presenting the token also controls the\ncryptographic key bound to the token. If a proof-of-possession sender\nconstrained token is presented without valid proof of possession of the\ncryptographic key, it MUST be rejected.\u00b6\n\n#### 9.4.1. Demonstrating Proof-of-Possession\n\nDPoP is an application-level mechanism for sender-constraining OAuth [RFC6749]\naccess and refresh tokens [I-D.ietf-oauth-dpop]. If DPoP is used to sender\nconstrain tokens, the native client SHOULD use DPoP for every token request to\nthe authorization Server and interaction with the Resource Server.\u00b6\n\nDPoP includes an optional capability to bind the authorization code to the\nDPoP key to enable end-to-end binding of the entire authorization flow. If an\nattacker can access the Authorization Code and PKCE code verifier as described\nin Section 11.9 of [I-D.ietf-oauth-dpop], Authorization Code binding SHOULD be\nused.\u00b6\n\nTo bind the authorization code using the Authorization Challenge Endpoint, the\nJWK Thumbprint of the DPoP key MUST be communicated to the Authorization\nServer by including the dpop_jkt parameter defined in section 10 of [I-D.ietf-\noauth-dpop] alongside other authorization request parameters in the POST body\nof the first Authorization Challenge Request. If it is included in subsequent\nAuthorization Challenge Requests, the value of this parameter must be the same\nas in the initial request. If the JWK Thumbprint in the dpop_jkt differ at any\npoint, the Authorization Server MUST reject the request. If the dpop_jkt\nparameter is not included in the first request, but added in subsequent\nrequests, the Authorization Server MUST reject the request (do we need to\ndefine a specific error code for that?).\u00b6\n\n#### 9.4.2. Other Proof of Possession Mechanisms\n\nIt may be possible to use other proof of possession mechanisms to sender\nconstrain access and refresh tokens. Defining these mechanisms are out of\nscope for this specification.\u00b6\n\n#### 9.4.3. Device Session\n\n  * PoP binding of device session parameter\u00b6\n\n### 9.5. Multiple Applications\n\nWhen there there is more than one 1st-party native applications supported by\nthe AS, then it is important to consider a number of additional risks. These\nrisks fall into two main categories: Experience Risk and Technical Risk which\nare described below.\u00b6\n\n#### 9.5.1. Experience Risk\n\nAny time a user is asked to provide the authentication credentials in user\nexperiences that differ, it has the effect of increasing the likelihood that\nthe user will fall prey to a phishing attack because they are used to entering\ncredentials in different looking experiences. When multiple native\napplications are support, the implementation MUST ensure the native experience\nis identical across all the 1st party native applications.\u00b6\n\nAnother experience risk is user confusion caused by different looking\nexperiences and behaviors. This can increase the likelihood the user will not\ncomplete the authentication experience for the 1st party native application.\u00b6\n\n#### 9.5.2. Technical Risk\n\nIn addition to the experience risks, multiple implementations in 1st party\nnative applications increases the risk of an incorrect implementation as well\nas increasing the attack surface as each implementation may expose it's own\nweaknesses.\u00b6\n\n#### 9.5.3. Mitigation\n\nTo address these risk, when multiple 1st party native applications must be\nsupported, and other methods such as [OpenID.Native-SSO] are not applicable,\nit is RECOMMENDED that a client-side SDK be used to ensure the implementation\nis consistent across the different native apps and to ensure the user\nexperience is identical for all 1st party apps.\u00b6\n\n## 10\\. IANA Considerations\n\nIANA has (TBD) registered the following values in the IANA \"OAuth\nAuthorization Server Metadata\" registry of [IANA.OAuth.Parameters] established\nby [RFC8414].\u00b6\n\nMetadata Name: authorization_challenge_endpoint\u00b6\n\nMetadata Description: URL of the authorization server's authorization\nchallenge endpoint.\u00b6\n\nChange Controller: IESG\u00b6\n\nSpecification Document: Section 4.1 of [[ this specification ]]\u00b6\n\n## 11\\. References\n\n### 11.1. Normative References\n\n[I-D.ietf-oauth-dpop]\n\n    Fett, D., Campbell, B., Bradley, J., Lodderstedt, T., Jones, M. B., and D. Waite, \"OAuth 2.0 Demonstrating Proof-of-Possession at the Application Layer (DPoP)\", Work in Progress, Internet-Draft, draft-ietf-oauth-dpop-16, 13 April 2023, <https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop-16>.\n[I-D.ietf-oauth-step-up-authn-challenge]\n\n    Bertocci, V. and B. Campbell, \"OAuth 2.0 Step-up Authentication Challenge Protocol\", Work in Progress, Internet-Draft, draft-ietf-oauth-step-up-authn-challenge-17, 26 June 2023, <https://datatracker.ietf.org/doc/html/draft-ietf-oauth-step-up-authn-challenge-17>.\n[IANA.OAuth.Parameters]\n\n    \"*** BROKEN REFERENCE ***\".\n[OpenID]\n\n    Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., and C. Mortimore, \"OpenID Connect Core 1.0\", November 2014, <https://openid.net/specs/openid-connect-core-1_0.html>.\n[OpenID.Native-SSO]\n\n    Fletcher, G., \"OpenID Connect Native SSO for Mobile Apps\", November 2022, <https://openid.net/specs/openid-connect-native-sso-1_0.html>.\n[RFC2119]\n\n    Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/rfc/rfc2119>.\n[RFC6749]\n\n    Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\", RFC 6749, DOI 10.17487/RFC6749, October 2012, <https://www.rfc-editor.org/rfc/rfc6749>.\n[RFC7159]\n\n    Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March 2014, <https://www.rfc-editor.org/rfc/rfc7159>.\n[RFC7636]\n\n    Sakimura, N., Ed., Bradley, J., and N. Agarwal, \"Proof Key for Code Exchange by OAuth Public Clients\", RFC 7636, DOI 10.17487/RFC7636, September 2015, <https://www.rfc-editor.org/rfc/rfc7636>.\n[RFC8174]\n\n    Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.\n[RFC8259]\n\n    Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data Interchange Format\", STD 90, RFC 8259, DOI 10.17487/RFC8259, December 2017, <https://www.rfc-editor.org/rfc/rfc8259>.\n[RFC8414]\n\n    Jones, M., Sakimura, N., and J. Bradley, \"OAuth 2.0 Authorization Server Metadata\", RFC 8414, DOI 10.17487/RFC8414, June 2018, <https://www.rfc-editor.org/rfc/rfc8414>.\n[RFC8707]\n\n    Campbell, B., Bradley, J., and H. Tschofenig, \"Resource Indicators for OAuth 2.0\", RFC 8707, DOI 10.17487/RFC8707, February 2020, <https://www.rfc-editor.org/rfc/rfc8707>.\n[USASCII]\n\n    Institute, A. N. S., \"Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4\", 1986.\n\n### 11.2. Informative References\n\n[RFC8252]\n\n    Denniss, W. and J. Bradley, \"OAuth 2.0 for Native Apps\", BCP 212, RFC 8252, DOI 10.17487/RFC8252, October 2017, <https://www.rfc-editor.org/rfc/rfc8252>.\n\n## Appendix A. Example User Experiences\n\nThis section provides non-normative examples of how this specification may be\nused to support specific use cases.\u00b6\n\n### A.1. Passwordless One-Time Passwork (OTP)\n\nIn a passwordless One-Time Password (OTP) scheme, the user is in possession of\na one-time password generator. This generator may be a hardware device, or\nimplemented as an app on a mobile phone. The user provides a user identifier\nand one-time password, which is verified by the Authorization Server before it\nissues an Authorization Code, which can be exchanged for an Access and Refresh\nToken.\u00b6\n\n  * The Client collects username and OTP from user.\u00b6\n  * The Client sends an Authorization Challenge Request (Section 5.1) to the Authorization Challenge Endpoint (Section 4.1) including the username and OTP.\u00b6\n  * The Authorization Server verifies the username and OTP and returns an Authorization Code.\u00b6\n  * The Client requests an Access Token and Refresh Token by issuing a Token Request (Section 6) to the Token Endpoint.\u00b6\n  * The Authorization Server verifies the Authorization Code and issues the requested tokens.\u00b6\n\n### A.2. E-Mail Confirmation Code\n\nA user may be required to provide an e-mail confirmation code as part of an\nauthentication ceremony to prove they control an e-mail address. The user\nprovides an e-mail address and is then requried to enter a verification code\nsent to the e-mail address. If the correct verification code is returned to\nthe Authorization Server, it issues Access and Refresh Tokens.\u00b6\n\n  * The Client collects an e-mail address from the user.\u00b6\n  * The Client sends the e-mail address in an Authorization Challenge Request (Section 5.1) to the Authorization Challenge Endpoint (Section 4.1).\u00b6\n  * The Authorization Server sends a verification code to the e-mail address and returns an Error Response (Section 5.2.2) including \"error\": \"authorization_required\", \"device_session\" and a custom error code indicating that an e-mail verification code must be entered.\u00b6\n  * The Client presents a user experience guiding the user to copy the e-mail verification code to the Client. Once the e-mail verification code is entered, the Client sends an Authorization Challenge Request to the Authorization Challenge Endpoint, including the e-mail verification code as well as the device_session parameter returned in the previous Error Response.\u00b6\n  * The Authorization Server uses the device_session to maintain the session and verifies the e-mail verification code before issuing an Authorization Code to the Client.\u00b6\n  * The Client sends the Authorization Code in a Token Request (Section 6) to the Token Endpoint.\u00b6\n  * The Authorization Server verifies the Authorization Code and issues the Access Token and Refresh Token.\u00b6\n\n### A.3. SMS Confirmation Code\n\nA user may be required to provide an SMS confirmation code as part of an\nauthentication ceremony to prove they control a mobile phone number. The user\nprovides a phone number and is then requried to enter a SMS confirmation code\nsent to the phone. If the correct confirmation code is returned to the\nAuthorization Server, it issues Access and Refresh Tokens.\u00b6\n\n  * The Client collects a mobile phone number from the user.\u00b6\n  * The Client sends the phone number in an Authorization Challenge Request (Section 5.1) to the Authorization Challenge Endpoint (Section 4.1).\u00b6\n  * The Authorization Server sends a confirmation code to the phone number and returns an Error Response (Section 5.2.2) including \"error\": \"authorization_required\", \"device_session\" and a custom error code indicating that a SMS confirmation code must be entered.\u00b6\n  * The Client presents a user experience guiding the user to enter the SMS confirmation code. Once the SMS verification code is entered, the Client sends an Authorization Challenge Request to the Authorization Challenge Endpoint, including the confirmation code as well as the device_session parameter returned in the previous Error Response.\u00b6\n  * The Authorization Server uses the device_session to maintain the session context and verifies the SMS code before issuing an Authorization Code to the Client.\u00b6\n  * The Client sends the Authorization Code in a Token Request (Section 6) to the Token Endpoint.\u00b6\n  * The Authorization Server verifies the Authorization Code and issues the Access Token and Refresh Token.\u00b6\n\n### A.4. Re-authenticating to an app a week later using OTP\n\nA client may be in possession of an Access and Refresh Token as the result of\na previous succesful user authentication. The user returns to the app a week\nlater and accesses the app. The Client presents the Access Token, but receives\nan error indicating the Access Token is no longer valid. The Client presents a\nRefresh Token to the Authorization Server to obtain a new Access Token. If the\nAuthorization Server requires user interaction for reasons based on its own\npolicies, it rejects the Refresh Token and the Client re-starts the user\nauthentication flow to obtain new Access and Refresh Tokens.\u00b6\n\n  * The Client has a short-lived access token and long-lived refresh token following a previous completion of an Authorization Grant Flow which included user authentication.\u00b6\n  * A week later, the user launches the app and tries to access a protected resource at the Resource Server.\u00b6\n  * The Resource Server responds with an error code indicating an invalid access token since it has expired.\u00b6\n  * The Client presents the refresh token to the Authorization Server to obtain a new access token (section 6 [RFC6749])\u00b6\n  * The Authorization Server responds with an error code indicating that an OTP from the user is required, as well as a device_session.\u00b6\n  * The Client prompts the user to enter an OTP.\u00b6\n  * The Client sends the OTP and device_session in an Authorization Challenge Request (Section 5.1) to the Authorization Challenge Endpoint (Section 4.1).\u00b6\n  * The Authorization Server verifies the device_session and OTP, and returns an Authorization Code.\u00b6\n  * The Client sends the Authorization Code in a Token Request (Section 6) to the Token Endpoint.\u00b6\n  * The Authorization Server verifies the Authorization Code and issues the requested tokens.\u00b6\n  * The Client presents the new Access Token to the Resource Server in order to access the protected resource.\u00b6\n\n### A.5. Step-up Authentication using Confirmation SMS\n\nA Client previously obtained an Access and Refresh Token after the user\nauthenticated with an OTP. When the user attempts to access a protected\nresource, the Resource Server determines that it needs an additional level of\nauthentication and triggers a step-up authentication, indicating the desired\nlevel of authentication using acr_values and max_age as defined in the Step-up\nAuthentication specification. The Client initiates an authorization request\nwith the Authorization Server indicating the acr_values and max_age\nparameters. The Authorization Server responds with error messages promptng for\nadditional authentication until the acr_values and max_age values are\nsatisfied before issuing fresh Access and Refresh Tokens.\u00b6\n\n  * The Client has a short-lived access token and long-lived refresh token following the completion of an Authorization Grant Flow which included user authentication.\u00b6\n  * When the Client presents the Access token to the Resource Server, the Resource Server determines that the acr claim in the Access Token is insufficient given the resource the user wants to access and responds with an insufficient_user_authentication error code, along with the desired acr_values and desired max_age.\u00b6\n  * The Client sends an Authorization Challenge Request (Section 5.1) to the Authorization Challenge Endpoint (Section 4.1) including the device_session, acr_values and max_age parameters.\u00b6\n  * The Authorization Server verifies the device_session and determines which authentication methods must be satisfied based on the acr_values, and responds with an Error Response (Section 5.2.2) including \"error\": \"authorization_required\" and a custom error code indicating that an OTP must be entered.\u00b6\n  * The Client prompts the user for an OTP, which the user obtains and enters.\u00b6\n  * The Client sends an Authorization Challenge Request to the Authorization Challenge Endpoint including the device_session and OTP.\u00b6\n  * The Authorization Server verifies the OTP and returns an Authorization Code.\u00b6\n  * The Client sends the Authorization Code in a Token Request (Section 6) to the Token Endpoint.\u00b6\n  * The Authorization Server verifies the Authorization Code and issues an Access Token with the updated acr value along with the Refresh Token.\u00b6\n  * The Client presents the Access Token to the Resources Server, which verifies that the acr value meets its requirements before granting access to the prtoected resource.\u00b6\n\n### A.6. Registration\n\nThis example describes how to use the mechanisms defined in this draft to\ncreate a complete user registration flow starting with an email address. In\nthis example, it is the Authorization Server's policy to allow these\nchallenges to be sent to email and phone number that were previously\nunrecognized, and creating the user account on the fly.\u00b6\n\n  * The Client collects a username from the user.\u00b6\n  * The Client sends an Authorization Challenge Request (Section 5.1) to the Authorization Challenge Endpoint (Section 4.1) including the username.\u00b6\n  * The Authorization Server returns an Error Response (Section 5.2.2) including \"error\": \"authorization_required\", \"device_session\", and a custom error code indicating that an e-mail address must be collected.\u00b6\n  * The Client collects an e-mail address from the user.\u00b6\n  * The Client sends the e-mail address as part of a second Authorization Challenge Request to the Authorization Challenge Endpoint, along with the device_session parameter.\u00b6\n  * The Authorization Server sends a verification code to the e-mail address and returns an Error Response including \"error\": \"authorization_required\", \"device_session\" and a custom error code indicating that an e-mail verification code must be entered.\u00b6\n  * The Client presents a user experience guiding the user to copy the e-mail verification code to the Client. Once the e-mail verification code is entered, the Client sends an Authorization Challenge Request to the Authorization Challenge Endpoint, including the e-mail verification code as well as the device_session parameter returned in the previous Error Response.\u00b6\n  * The Authorization Server uses the device_session to maintain the session context, and verifies the e-mail verification code. It determines that it also needs a phone number for account recovery purposes and returns an Error Response including \"error\": \"authorization_required\", \"device_session\" and a custom error code indicating that a phone number must be collected.\u00b6\n  * The Client collects a mobile phone number from the user.\u00b6\n  * The Client sends the phone number in an Authorization Challenge Request to the Authorization Challenge Endpoint, along with the device_session.\u00b6\n  * The Authorization Server uses the device_session parameter to link the previous requests. It sends a confirmation code to the phone number and returns an Error Response including \"error\": \"authorization_required\", \"device_session\" and a custom error code indicating that a SMS confirmation code must be entered.\u00b6\n  * The Client presents a user experience guiding the user to enter the SMS confirmation code. Once the SMS verification code is entered, the Client sends an Authorization Challenge Request to the Authorization Challenge Endpoint, including the confirmation code as well as the device_session parameter returned in the previous Error Response.\u00b6\n  * The Authorization Server uses the device_session to maintain the session context, and verifies the SMS verification code before issuing an Authorization Code to the Client.\u00b6\n  * The Client sends the Authorization Code in a Token Request (Section 6) to the Token Endpoint.\u00b6\n  * The Authorization Server verifies the Authorization Code and issues the requested tokens.\u00b6\n\n## Appendix B. Example Implementation\n\nIn order to successfully implement this specification, the Authorization\nServer will need to define its own specific requirements for what values\nclients are expected to send in the Authorization Challenge Request (Section\n5.1), as well as its own specific error codes in the Authorization Challenge\nResponse (Section 5.2).\u00b6\n\nBelow is an example of parameters required for a complete implementation that\nenables the user to log in with a username and OTP.\u00b6\n\n### B.1. Authorization Challenge Request Parameters\n\nIn addition to the request parameters defined in Section 5.1, the\nauthorization server defines the additional parameters below.\u00b6\n\n\"username\":\n\n    \n\nREQUIRED for the initial Authorization Challenge Request.\u00b6\n\n\"otp\":\n\n    \n\nThe OTP collected from the user. REQUIRED when re-trying an Authorization\nChallenge Request in response to the otp_required error defined below.\u00b6\n\n### B.2. Authorization Challenge Response Parameters\n\nIn addition to the response parameters defined in Section 5.2, the\nauthorization server defines the additional value for the error response\nbelow.\u00b6\n\n\"otp_required\":\n\n    \n\nThe client should collect an OTP from the user and send the OTP in a second\nrequest to the Authorization Challenge Endpoint. The HTTP response code to use\nwith this error value is 401 Unauthorized.\u00b6\n\n### B.3. Example Sequence\n\nThe client prompts the user to enter their username, and sends the username in\nan initial Authorization Challenge Request.\u00b6\n\n    \n    \n    POST /authorize HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded username=alice &scope=photos &client_id=bb16c14c73415\n\n\u00b6\n\nThe Authorization Server sends an error response indicating that an OTP is\nrequired.\u00b6\n\n    \n    \n    HTTP/1.1 401 Unauthorized Content-Type: application/json Cache-Control: no-store { \"error\": \"otp_required\", \"device_session\": \"ce6772f5e07bc8361572f\" }\n\n\u00b6\n\nThe client prompts the user for an OTP, and sends a new Authorization\nChallenge Request.\u00b6\n\n    \n    \n    POST /authorize HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded device_session=ce6772f5e07bc8361572f &otp=555121\n\n\u00b6\n\nThe Authorization Server validates the device_session to find the expected\nuser, then validates the OTP for that user, and responds with an authorization\ncode.\u00b6\n\n    \n    \n    HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store { \"authorization_code\": \"uY29tL2F1dGhlbnRpY\" }\n\n\u00b6\n\nThe client sends the authorization code to the token endpoint.\u00b6\n\n    \n    \n    POST /token HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded grant_type=authorization_code &client_id=bb16c14c73415 &code=uY29tL2F1dGhlbnRpY\n\n\u00b6\n\nThe Authorization Server responds with an access token and refresh token.\u00b6\n\n    \n    \n    HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store { \"token_type\": \"Bearer\", \"expires_in\": 3600, \"access_token\": \"d41c0692f1187fd9b326c63d\", \"refresh_token\": \"e090366ac1c448b8aed84cbc07\" }\n\n\u00b6\n\n## Acknowledgments\n\nTODO acknowledge.\u00b6\n\n## Authors' Addresses\n\nAaron Parecki\n\nOkta\n\nEmail: aaron@parecki.com\n\nGeorge Fletcher\n\nCapital One Financial\n\nEmail: george.fletcher@capitalone.com\n\nPieter Kasselman\n\nMicrosoft\n\nEmail: pieter.kasselman@microsoft.com\n\n", "frontpage": false}
