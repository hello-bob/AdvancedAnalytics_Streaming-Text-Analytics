{"aid": "40151430", "title": "WordPress Debugging Simplified with Wpdebug.sh", "url": "https://fervid.digital/articles/wordpress-debugging-simplified-with-wpdebug-sh/", "domain": "fervid.digital", "votes": 1, "user": "roymckenzie", "posted_at": "2024-04-24 23:53:55", "comments": 0, "source_title": "WordPress Debugging Simplified with wpdebug.sh - Fervid Digital", "source_text": "WordPress Debugging Simplified with wpdebug.sh - Fervid Digital\n\nSkip to content\n\n# WordPress Debugging Simplified with wpdebug.sh\n\nApril 23, 2024\n\n## Introduction\n\nWelcome to Fervid Digital\u2019s inaugural blog post! Here at Fervid Digital, we\nempathize with the frustrations often encountered when preparing a WordPress\ninstallation for debugging. That\u2019s precisely why we\u2019ve developed wpdebug.sh \u2013\na convenient shell script designed to automate common debugging tasks and\nstreamline the entire process.\n\n## Simplify Your WordPress Debugging Workflow:\n\nDebugging WordPress websites can often be a cumbersome task, requiring manual\nedits to configuration files and navigating through various settings. However,\nwith wpdebug.sh, you can say goodbye to the hassle of manually editing\nconfiguration files and navigating through complex settings. Let\u2019s walk\nthrough the steps to set up and use wpdebug.sh to enhance your WordPress\ndebugging experience.\n\n## How to Use wpdebug.sh\n\nUsing wpdebug.sh is straightforward and can be set up in just a few simple\nsteps:\n\n### 1\\. Copy the Script to the Root of Your WordPress Installation:\n\nBegin by copying the wpdebug.sh script to the root directory of your WordPress\ninstallation using scp.\n\n    \n    \n    scp wpdebug.sh host:/directory/to/wp/\n\n### 2\\. Make the Script Executable:\n\nAfter uploading the script, grant execute permissions to the script using the\nchmod +x command. This ensures that the script can be executed as a command in\nthe terminal.\n\n    \n    \n    chmod +x wpdebug.sh\n\nThis command allows the script to be executed as a command in the terminal.\n\n### 3\\. Install the Alias (optional):\n\nInstalling the alias for wpdebug.sh adds a convenient shortcut for accessing\nthe script from anywhere within the terminal. By running the ./wpdebug.sh\ninstall command, the script automatically adds an alias to your .bashrc file.\n\n    \n    \n    ./wpdebug.sh install\n\nThis command ensures that you can access wpdebug.sh by simply typing wpdebug\nin the terminal, saving you time and effort.\n\n### 4\\. Reload Your Bash Configuration (optional):\n\nReload your bash configuration using the source ~/.bashrc command to ensure\nthat the newly added alias is recognized and available for immediate use.\n\n    \n    \n    source ~/.bashrc\n\nWith the bash configuration reloaded, you\u2019re now ready to start using wpdebug\nto simplify your WordPress debugging process.\n\n## wpdebug Commands\n\nOnce installed, you can execute the script with various commands to perform\nspecific debugging actions:\n\nCommand| Description  \n---|---  \n./wpdebug.sh install| Adds an alias for wpdebug.sh, wpdebug, to your .bashrc\nfile for easy access.  \nwpdebug uninstall| Removes the alias added by the install command.  \nwpdebug enable| Enables WordPress debugging and logging in wp-config.php.  \nwpdebug disable| Disables WordPress debugging and logging in wp-config.php.  \nwpdebug tail| Tails the debug log located at wp-content/debug.log, allowing\nlive monitoring.  \nwpdebug delete| Deletes the debug log file located at wp-content/debug.log.  \nwpdebug.sh commands\n\n## Requirements and Considerations\n\nBefore using wpdebug.sh, make sure you have SSH access to your server and the\nWP-CLI installed and configured on your system. Additionally, always remember\nto back up your wp-config.php file before making any modifications with\nwpdebug.sh to avoid any unintended changes.\n\n## Get Started with wpdebug.sh\n\nReady to streamline your WordPress debugging process? Download wpdebug.sh now\nand experience the power of automation firsthand. If you think we could make\nthis script better, don\u2019t hesitate to share your thoughts or suggestions with\nus. And if you need assistance debugging your site, check out our Website Care\nplans or request a One-Time Fix.\n\nThank you for joining us on this journey! Stay tuned for more insightful blog\nposts from Fervid Digital, where we\u2019ll continue to share valuable tips,\ntricks, and resources for WordPress developers and enthusiasts alike.\n\nDownload wpdebug.sh: GitHub Gist\n\n#!/bin/bash  \n---  \n# Script Name: Script Name: wpdebug.sh  \n# Description: A script for enabling or disabling WordPress debugging mode in\nthe wp-config.php file.  \n# Author: Roy McKenzie  \n# Date: April 23, 2024  \n# Version: 1.0  \n#  \n# Usage: ./wpdebug.sh [install|uninstall|enable|disable|tail|delete]  \n#  \n# Options:  \n# install Add alias 'wpdebug' for this script in .bashrc  \n# uninstall Remove alias 'wpdebug' for this script from .bashrc  \n# enable Enable WordPress debugging by setting WP_DEBUG to true in wp-\nconfig.php  \n# tail Tail the log located at wp-content/debug.log  \n# delete Delete the log located at wp-content/debug.log  \n#  \n# Example: ./wpdebug.sh enable  \n#  \n# Notes:  \n# - This script modifies the wp-config.php file. Make sure to back up your wp-\nconfig.php file before running this script.  \n# - Requires WP-CLI to be installed and configured on your system.  \n# - this plugin should be installed in the root of your WordPress\ninstallation.  \n#  \n# Enable Debugging  \nenable_debug() {  \nwp config set WP_DEBUG true --raw  \nwp config set WP_DEBUG_LOG true --raw  \nwp config set WP_DEBUG_DISPLAY false --raw  \necho 'Debugging enabled in wp-config.php.'  \n}  \n# Disable Debugging  \ndisable_debug() {  \nwp config set WP_DEBUG false --raw  \nwp config set WP_DEBUG_LOG false --raw  \nwp config set WP_DEBUG_DISPLAY false --raw  \necho 'Debugging disabled in wp-config.php.'  \n}  \n# Install alias  \ninstall() {  \necho \"alias wpdebug=\\\"$(pwd)/wpdebug.sh\\\"\" >> ~/.bashrc  \necho \"Alias $(tput bold)wpdebug$(tput sgr0) added. Run $(tput bold)source\n~/.bashrc$(tput sgr0) to reload bash configuration and enable alias.\"  \n}  \n# Uninstall alias  \nuninstall() {  \nif [ $(uname) == 'Darwin' ]; then  \nsed -i '' '/^alias wpdebug=/d' ~/.bashrc  \nelse  \nsed -i '/^alias wpdebug=/d' ~/.bashrc  \nfi  \necho 'Alias removed.'  \n}  \n# Tail log live  \ntail_log() {  \necho 'Tailing log...'  \nclear  \ntail -f wp-content/debug.log  \n}  \n# Delete log  \ndelete_log() {  \nrm wp-content/debug.log  \necho 'Debug log deleted.'  \n}  \n# Check if WP CLI is installed  \nif ! [ -x \"$(command -v wp)\" ]; then  \necho 'Error: WP-CLI is not installed. Please install it.' >&2  \nexit 1  \nfi  \n# Check if wp-config.php exists  \nif [ ! -f \"wp-config.php\" ] && [ \"$1\" != \"install\" ] && [ \"$1\" != \"uninstall\"\n]; then  \necho 'Error: wp-config.php not found.'  \nexit 1  \nfi  \n# Check the first argument  \ncase \"$1\" in  \n\"install\")  \ninstall  \n;;  \n\"uninstall\")  \nuninstall  \n;;  \n\"enable\")  \nenable_debug  \n;;  \n\"disable\")  \ndisable_debug  \n;;  \n\"tail\")  \ntail_log  \n;;  \n\"delete\")  \ndelete_log  \n;;  \n*)  \necho \"Usage: $0 [install|uninstall|enable|disable|tail|delete]\"  \nexit 1  \n;;  \nesac  \n  \nview raw wpdebug.sh hosted with \u2764 by GitHub\n\n## Share\n\n### Leave a Comment Cancel Reply\n\n## Ready to get started?\n\nSchedule free consultation.\n\nEmail\n\nhello@fervid.digital\n\nAbout us\n\nAbout us\n\nGitHub LinkedIn X\n\n### Clients\n\n### Services\n\n### Software\n\n\u00a9 2024 Fervid Digital. A Laconic Company LLC enterprise. All Rights Reserved.\n\nPrivacy Policy | Terms of Service\n\n", "frontpage": false}
