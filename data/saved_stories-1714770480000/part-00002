{"aid": "40248514", "title": "I Spent 24 Hours with GitHub Copilot Workspaces", "url": "https://every.to/chain-of-thought/i-spent-24-hours-with-github-copilot-workspaces", "domain": "every.to/chain-of-thought", "votes": 42, "user": "dshipper", "posted_at": "2024-05-03 15:05:59", "comments": 18, "source_title": "I Spent 24 Hours With GitHub Copilot Workspaces", "source_text": "I Spent 24 Hours With GitHub Copilot Workspaces\n\nSubscribe\n\n\u2261\n\n  * About\n  * Collections\n  * Contact Us\n  * Sponsor Us\n  * Login\n\nChain of Thought\n\n# I Spent 24 Hours With GitHub Copilot Workspaces\n\nThe next popular programming language is probably English\n\nby Dan Shipper\n\nMay 3, 2024\n\n8\n\nEvery illustration/GitHub.\n\nWas this newsletter forwarded to you? Sign up to get it in your inbox.\n\nGitHub Copilot is like autocomplete for programmers.\n\nAs you type, it guesses what you\u2019re trying to accomplish and suggests the\nblock of code it thinks you\u2019re going to write. If it\u2019s right\u2014and very often it\nis\u2014you press Tab and it\u2019ll fill in the rest for you. Launched in 2021, a year\nor so before ChatGPT\u2019s arrival, Copilot was the first breakthrough generative\nAI use case for programming that really took off.\n\nIf GitHub Copilot is like autocomplete, GitHub Copilot Workspaces\u2014currently in\nlimited technical preview\u2014is like an extremely capable pair programmer who\nnever asks for coffee breaks or RSUs.\n\nIt\u2019s a tool that lets you code in plain English from start to finish without\nleaving your browser. If you give it a task to complete, Copilot Workspaces\nwill read your existing codebase, construct a step-by-step plan to build it,\nand then\u2014once you give the green light\u2014it\u2019ll implement the code while you\nwatch.\n\nPut another way, it\u2019s an agent. It\u2019s similar to Devin, the AI agent for\nprogramming whose launch announcement went viral a few months ago, and which\nwas reportedly seeking a $2 billion valuation in a new fundraising effort. I\nhaven\u2019t gotten access to that yet (shakes fist in Devin\u2019s general direction!),\nbut I do have access to Copilot Workspaces.\n\nOver the past 24 hours, I\u2019ve put Copilot Workspaces through some of its paces.\nI tried to have it build a large, complex feature on its own, but I also asked\nit to do smaller, better-defined tasks. My goal was to see what I could ask of\nit, what kinds of tasks it could handle, and when I might choose to use this\ninstead of ChatGPT.\n\nThe short answer is: This kind of product is the future of programming. The\nlong answer is below.\n\n## How Copilot Workspaces works\n\nI\u2019ve been working on an internal tool that we use at Every called Spiral. It\nallows users to build and share prompts for common AI tasks\u2014but more on that\nin a future essay. I fashioned an ugly tribal tattoo-looking logo, and I\nwanted to replace it with a new one created by Keshav, one of our talented\ndesigners.\n\nThis is one of those changes that isn\u2019t very hard to code, but it\u2019s a little\nannoying. You have to make sure the logo looks right in context and doesn\u2019t\nbreak any of the styles of the elements around it. It\u2019s one of those all-too-\nsimple tasks that I also usually procrastinate doing until I really need to.\n\nSo, I figured it was perfect for an AI. I decided to try Copilot\nWorkspaces\u2014from here, simply referred to as CW\u2014to see how it would do.\n\n#### Create a task\n\nFirst, I opened up CW and created a task. A task is a natural language\ndescription of what you want CW to build:\n\nSource: Screenshots courtesy of the author.\n\nYou\u2019ll notice that the task description I gave it has details such as the file\nI want it to modify, where I want the logo to appear, and the file name of the\nlogo image. I experimented with different prompts (and looked through the\nGitHub documentation) and learned that giving it more detail should lead to\nbetter results.\n\nOnce I inputted the task, CW processed it and created a specification: a map\nof the current state of the codebase, and a set of criteria for what success\nlooks like.\n\n#### Specifying out your idea of success\n\nCW creates a specification through a process that is sort of like what I do\nbefore I leave the house to grab coffee: I tap both of my pants pockets to\nmake sure I have my phone, AirPods, wallet, and keys. In a sense, I am asking\nmy pants, \u201cDo you contain all of the essentials I need in order to leave the\nhouse, purchase a coffee, and make sure I don\u2019t get locked out?\u201d\n\nDepending on how they reply\u2014bear with me\u2014I know whether each item is either\npresent or missing. This helps me to create a plan to gather the things I need\nto find in order to successfully complete my mission. (Note to self: Your\nwallet is always wedged in some physics-defying configuration between the\ncouch and the wall. Look there. Not there? Look again.)\n\nIn a sense, CW does this, too. Given the task you assigned it, it attempts to\nfigure out the current state of your codebase (to put it in pants terms, it\ntaps the codebase and finds the wallet and keys are missing). Then it proposes\na set of tests for what your codebase should look like when the task has been\ncompleted properly (the wallet and keys are now safely slotted in their proper\npockets).\n\nTo make it even easier, it does this in normal English:\n\nPlus, you can edit each step of this process and, if you want to, add your own\nideas in natural language. Basically, you can give CW your own test criteria\nfor what success should look like so that it will check against it as it\nwrites code.\n\nOnce you\u2019re satisfied with the specification, you move on to the plan.\n\n#### Creating your plan\n\nIf the specification stage is about figuring out what needs to be done in your\ncodebase, the planning step is how it will be done. At this stage, CW gets\ninto the nitty-gritty details of your codebase and writes out the changes it\nwill make to each file:\n\nAgain, this all happens in natural language, and you can edit or add anything\nto the plan if you think CW is missing something. Once you\u2019re satisfied, you\nhit implement\u2014and the magic begins.\n\n#### It codes!\n\nI\u2019ve been programming with AI for more than a year-and-a-half, and this part\nis still so fun to me. When you hit implement, CW will take your plan and\nwrite the corresponding code for you inside your codebase.\n\nYou can watch it work in real time, and, at the end, you can see a diff of\neach file\u2014a way to see highlights of anything that changed:\n\nNormally, when I\u2019m doing this with ChatGPT, I\u2019m constantly hopping back and\nforth between my browser and my programming environment, copy-pasting code\ninto ChatGPT and vice versa. CW\u2019s experience, by contrast, is fully integrated\ninto your codebase so you can take your fingers off the keyboard and watch.\nLook, Ma, no hands!\n\nIf you\u2019re satisfied with the changes CW makes, you can create a pull request\nand instantly have the new feature merged into your codebase. It\u2019s very cool.\n\nAnd, indeed, it did create the proper code in the proper file: It swapped out\nthe old logo for the new one\u2014no programming or copy-pasting required.\n\nThe question is: How does this kind of programming agent experience compare to\nusing ChatGPT or Claude to accomplish the same thing?\n\nSubscribe\n\n## Is GitHub Copilot Workspaces the future of programming?\n\nChatGPT is a fresh, blank notebook: There\u2019s no structure, and you can use it\nfor pretty much anything. But that means there are very few guardrails, so it\ncan be difficult to get the most out of it.\n\nCopilot Workspaces is more like a bullet journal: It follows a process to help\nyou get tasks done. It\u2019s purpose-built for programming, so it\u2019s less flexible\nthan ChatGPT, but in some situations it might be more effective.\n\nWhile working with CW, I noticed a few things. First, it was slow. I attempted\nthe same update (with the same initial prompt) to our internal Spiral app with\nCW, ChatGPT, and Claude so that I could compare them side-by-side. Both\nChatGPT and Claude returned answers within 10-20 seconds. CW took two to three\nminutes to return.\n\nI think this is because both ChatGPT and Claude just output the small snippets\nof code that I needed to change. CW, by contrast, rewrote the entire file,\nwhich took more time.\n\nOn the plus side, I found the code generation from CW to be higher quality.\nChatGPT and Claude both got the answer right, but they made some subtle, pesky\nmistakes that I would\u2019ve had to clean up by hand. CW took longer, yes, but it\ngot it right on the first go.\n\nI spent some time trying to hack CW (don\u2019t get mad at me, GitHub, it was very\nnice hacking!) with various prompt injections to get it to tell me which AI\nmodels it was using under the hood, but alas, it declined to reveal its\nsecrets:\n\nBased on my experience with the logo replacement, it\u2019s a fair assumption that\nCW would be quite good at fixing small issues or minor feature requests that\nconstantly pop up in mature codebases. It may not get everything right the\nfirst time, but it\u2019d probably be enough to get an engineer 90 percent of the\nway for minor tasks. And it\u2019s deeply integrated into GitHub, which makes it\neasy to manage and merge the changes.\n\nBut what about the holy grail: Can you let it run wild on a big feature\nrequest? I tried it out on that as well. I\u2019ve been meaning to create a team-\nsharing flow for Spiral so it\u2019s easier for Every team members to share spirals\nwith one another. This one yielded more mixed results, but the reason why\nmight surprise you.\n\nTo get started, I wrote a short paragraph for how I thought the sharing\nfeature should work, and CW built a spec for it:\n\nBut my eyes glazed over looking at the spec. Everything looked basically\nright, but it was difficult to know whether or not I should let CW proceed to\na plan and implementation, or whether I needed to back up a step.\n\nWhy? I realized I didn\u2019t have a good understanding of what the feature should\nbe. There are a bunch of different ways to do sharing, and a lot of subtle\ndecisions to be made. CW had taken my nebulous task and made those decisions\nfor me. That could be great in some situations, but it was hard for me to\ndiscern which decisions it had made and what their effects would be on the\nfinal experience.\n\nBasically, I had a vague mental model of what I wanted to be built. CW took\nthat and created a specific model of what it thought I meant. But it felt\ntaxing to try to map CW\u2019s design onto the model in my head. The task was too\nbig; I felt like I needed to visualize it somehow.\n\nSo despite not totally understanding it, I went ahead and asked it to perform\na full implementation, just to see what would happen. And when it started\ncoding, I noticed some issues in the code it was writing. It was writing the\ncode based on the plan it made, but I only saw the issues in the plan once I\nsaw the final code.\n\nI don\u2019t usually have this experience with ChatGPT. I think that\u2019s for two\nreasons.\n\nFirst, I often ask ChatGPT to ask me questions about a feature I\u2019m building so\nI can flesh out anything that\u2019s underspecified before it starts to plan how to\nbuild the feature. This helps make my thinking sharper and its plan more\nlikely to be correct. We\u2019re building a shared model of the feature together\nstep-by-step\u2014so we\u2019re both clear on what it should look like at the end.\n\nSecond, I\u2019m often working with fast feedback loops between ChatGPT, my code\neditor, and a local version of whatever app I\u2019m building. I\u2019m picking off a\nsmall chunk of a feature, building it, and then seeing the results. So I can\nquickly see the downstream effects of any code ChatGPT is creating and\niterating toward the result I want. I\u2019m not asking ChatGPT to build an entire\nfeature at once like I did with CW.\n\nThere are some easy solutions \u2014some on CW\u2019s side and some on mine. On the CW\nside, it would be awesome if, after I inputted a task, CW initiated a chat\nsession to help expand upon what I actually want before it moves on to a\nspecification. Sometimes I don\u2019t know yet! I only have a vague idea, and I\nwish it would force me to get more clear so that we build up our understanding\nof what needs to be done together.\n\nOn my end, using a tool like this effectively will involve learning to\nunderstand what kinds of tasks it can handle, how hefty an assignment it can\nhandle by itself, and then using it explicitly for that. I need to learn how\nto be a good model manager for this kind of model.\n\nIt\u2019s definitely not yet at a point where I can hand it a vague notion of a\ncomplex feature and have it be built end-to-end like I might expect a human\nprogrammer to do. But it could dramatically speed up many of the tasks\ninvolved in creating that feature, if it\u2019s used properly.\n\nCopilot Workspaces is still in technical preview, so I expect some of its\nshortcomings are growing pains that will be resolved before it\u2019s released more\nwidely.\n\nPutting those quibbles aside, though, CW is a step in the direction of the\nfuture. English is becoming a programming language. You\u2019ll still have to\nunderstand and use scripting languages like Python or Javascript, or lower-\nlevel languages like C.\n\nBut most software will probably start as sentences written into an interface\nlike CW\u2019s.\n\nIt\u2019s an exciting time to be a programmer.\n\nDan Shipper is the cofounder and CEO of Every, where he writes the Chain of\nThought column and hosts the podcast How Do You Use ChatGPT? You can follow\nhim on X at @danshipper and on LinkedIn, and Every on X at @every and on\nLinkedIn.\n\nSubscribe\n\n#### What did you think of this post?\n\nAmazing Good Meh Bad\n\n### Like this? Become a subscriber.\n\nSubscribe \u2192\n\nOr, learn more.\n\n## Read this next:\n\nChain of Thought\n\n## GPT-4 Can Use Tools Now\u2014That\u2019s a Big Deal\n\nWhat \"function calling\" is, how it works, and what it means\n\n159 3 Jun 16, 2023 by Dan Shipper\n\nChain of Thought\n\n## What I Do When I Can\u2019t Sleep\n\nAI, insomnia, and the articulation of taste\n\n195 4 Jun 23, 2023 by Dan Shipper\n\nChain of Thought\n\n## The Most Important WWDC Announcement That You Missed\n\nApple has a shot at solving the mental health crisis\n\n148 2 Jun 9, 2023 by Dan Shipper\n\nThanks for rating this post\u2014join the conversation by commenting below.\n\n## Comments\n\n## Every smart person you know is reading this newsletter\n\nGet one actionable essay a day on AI, tech, and personal development\n\nSubscribe\n\nAlready a subscriber? Login\n\nContact Us \u00b7 Sponsor Us \u00b7 Search \u00b7 Terms\n\n\u00a92024 Every Media, Inc\n\nBy continuing to browse the site, you agree to our use of cookies.\n\n", "frontpage": true}
