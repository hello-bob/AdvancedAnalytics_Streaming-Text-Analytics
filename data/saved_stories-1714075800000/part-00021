{"aid": "40156479", "title": "The significance of orgnaizational decision on developer productivity", "url": "https://www.thinkbigcodesmall.io/p/the-significance-of-organizational", "domain": "thinkbigcodesmall.io", "votes": 1, "user": "broken-wrist", "posted_at": "2024-04-25 12:09:10", "comments": 0, "source_title": "The significance of organizational decisions on engineering efficiency", "source_text": "The significance of organizational decisions on engineering efficiency\n\nShare this post\n\n#### The significance of organizational decisions on engineering efficiency\n\nwww.thinkbigcodesmall.io\n\n#### Discover more from Think Big Code Small\n\nWelcome to Think Big, Code Small - your friendly portal into the compelling\ntechnology universe. Your hosts, Daniel Horton, and Chris Westerhold, are\nseasoned technologists passionate about breaking down tech's complex language\ninto simple terms.\n\nContinue reading\n\nSign in\n\n# The significance of organizational decisions on engineering efficiency\n\nChris Westerhold\n\nApr 24, 2024\n\nShare this post\n\n#### The significance of organizational decisions on engineering efficiency\n\nwww.thinkbigcodesmall.io\n\nShare\n\n> The systems that people work in and the interactions with people may account\n> for 90 or 95 percent of performance.\n>\n> \\- W. Edwards Deming\n\nRegardless of where you look in life, there are systems that are managing just\nabout everything. Some of those systems have been well thought out while\nothers just seem to happen naturally. Everything from standing in line at the\ngrocery store, getting your dry cleaning done, or how software is developed.\n\nIn a lot of these areas, its easy to see the waste and friction but is a bit\nweird how we miss so much when it comes to the way we do things. Some of these\ncan be annoying, such as waiting for 20 minutes in the check out line. In the\nsoftware delivery lifecycle, that 20 minute wait might have hundreds of times\na month and cost thousands of hours of wait time.\n\nIn the SDLC, how is it that we see some things but completely miss others? I\nthink a lot of it has to do with how organizations are setup and the way they\ninteract with one another.\n\nIf you are really interested in improving engineering efficiencies, develop\nproductivity, or developer experience, then you will need to understand these\nfour key areas, their interaction patterns, and unique challenges.\n\nIn this article, we are going to dig some examples Organizational waste and\nfriction and how to think about resolving them. Make sure to subscribe so you\ncan get the follow up articles where we break down the rest.\n\n#\n\nOrganization / Org. Unit\n\nDecisions made at this level can have significant impact across every aspect\nof software delivery, though they don\u2019t seem to be scrutinized as much as you\nmight expect.\n\nA great examples of this could be agile methodologies, funding and\nprioritization, or security processes. These are the biggest rocks to move but\ncan have the biggest impact and should be the focus of senior leadership.\n\nLets dig into a few examples and the impact it might have on an organizations\noverall efficiency.\n\n##\n\nUsing the wrong planning methodology\n\nI absolutely hate this framework and just about everything that it stands for,\nif I am going to be honest. Lets look at the four key values in the agile\nmanifesto.\n\n  * Individuals and interactions over processes and tools.\n\n  * Working software over comprehensive documentation.\n\n  * Customer collaboration over contract negotiation.\n\n  * Responding to change over following a plan.\n\nSAFe basically breaks every one of these before lunch on the first day... but\nthis is on a post about bashing SAFe but its impact on an organization.\n\nAt its core, SAFe is all about planning, process, and improvement which sounds\ngreat on paper but how does it actually work out in the real world? Ask anyone\nwho has ever gone through Program Increment (PI) planning... and they will\ntell you all about it.\n\nSo PI planning is a 2 day (at least) event with this agenda.\n\n> \u201cFacilitated by the Release Train Engineer (RTE), this event includes all\n> members of the ART and occurs within the Innovation and Planning (IP)\n> Iteration.\u201d SAFe\n\nOh yeah... and this whole show is supposed to happen during the last sprint of\nthe quarter.\n\n> \u201cHolding the event during the IP iteration avoids affecting the scheduling\n> or capacity of other iterations in the PI.\u201d SAFe\n\nSo what really happens with this 6th sprint? It becomes the buffer for all of\nthe bad estimates that where made (based on very little evidence) from the\nlast PI planning. Instead of this being an \u201cimprovement sprint\u201d it becomes a\nmad house of rushing to \u201cnot ruin the planning for the next PI\u201d.\n\nThis is quite literally the exact opposite of really great practices like\ncontinuous discovery and dual track development. Ill cover these in another\narticle.\n\nBut lets look at the waste and friction in this process.\n\n  * We expect all team members to take two weeks a quarter to do \u201cplanning\u201d\n\n  * There is a ton of overhead in this system. Someone tell me what a Release Train Engineer actually is other than a program manager???\n\n  * There is an expectation that we actually know how to estimate the work that is being planned\n\n  * That we can actually know what the needs of the business are for the next quarter and can plan appropriately\n\nIn a perfect world these things would all just work out and you go an execute\nthe PI plan and everything is happy... but we all know this is never going to\nbe the case.\n\nSo what happens when things go awry?\n\nSo if business priorities change or new events come up, it turns into crisis\nmode because you have to keep the \u201cplan\u201d intact. This has a ripple affect\nacross the entire organization.\n\n  * You need to change all of the pretty sprints that were built into Jira (or whatever tool)\n\n  * You need to check on all of the inter-dependencies that might be affected\n\n  * You need to get new \u201cestimates\u201d on the work to be added into \u201cthe plan\u201d\n\n  * There will need to be some bartering or bargaining with other stakeholders on what get removed from \u201cthe plan\u201d\n\n  * The current sprint velocity is now impacted because of the need to do the estimates... so now stories need to be moved to a new sprint.\n\nIt reminds me a lot of this skit.\n\nI think you get my point... it can turn into chaos very quickly. This process\nwas supposed to provide clarity and predictability to the process and all it\nhas done is cause more problems.\n\nFrom a developers prospective, how do you think this makes them feel? A good\namount of software developers just want to come in and do the job they were\nhired to do... write software... not whatever this circus is.\n\nThere is all of this organizational friction and waste coming from this\nprocess, so what happens when times get a little difficult or there are tight\ndeadlines to hit? There is immense pressure put onto the development teams to\n\u201cdeliver faster\u201d.\n\nSo they tend to cut corners and make poor architectural decisions which just\nadds to the technical debt making it harder to deliver in the future.\n\nDoes this sit well with a lot of the developer community? No.. no it doesn\u2019t.\n\nThis is when a lot of people start to vote with their feet and leave an\norganization or become apathetic in general. Queue the doom spiral of poor\noutput, quality, and predictability.\n\nBetter call in the SAFe consultants... because you must just be doing it\nwrong... Don\u2019t worry, for another 500k they can help you improve your\nplanning. :-)\n\n> The question I would have here... is how much time and energy is wasted\n> here? How many hours are lost? And for what? A plan that doesn\u2019t provide\n> much more than hopes and dreams?\n\nThere are a ton of better ways to get business planning done but there is no\nsilver bullet. It takes good leadership, continuous discovery, and\nunderstanding the outcomes you are trying to drive towards.\n\n##\n\nOrganizational Silos - Ticketing Systems\n\nLets say I am the tech lead on a new team that needs to create a set of new\nservices. I will need a few basic things to get started.\n\n  * Git repo\n\n  * Cloud environment\n\nI will need to get these provisioned in one way or another. Back in the day,\none might just send an email or reach out to someone on a team to get them to\ncreate the stuff they need. This worked in a lot of ways but was hard to scale\nand even harder to track.\n\nBring on the ticketing system! They will provide tracking and data around what\nis needed make sure the requests have all of the necessary information.\n\nThe theory behind this one was solid... in 2003... but times have changes\nsignificantly and so should you.\n\nWhile this did help with a lot of issues, there is still a ton of waste in\nthis process. There are two humans involved so we can safely assume that there\nwill be trouble somewhere.\n\nThe Git repo is easy enough but the cloud environment can become a whole lot\ntrickier... and it all comes down to my good friend, governance.\n\nSoooo, what kind of a cloud environment do you need? Are you going to be using\nK8? Serverless? Is it a front end or just a back end? What about networking?\nOh yeah, who actually approves what gets provisioned?\n\nI recently worked with a client who had this exact situation. They had over\n100 questions on their \u201ccloud intake form\u201d and there was a \u201ccloud architecture\nreview board\u201d that met every Tuesday.\n\nIf by some miracle you could actually figure out how to get this form filled\nout you would have to wait at least a minimum of a week to get it reviewed.\nThen if another miracle happens, you might get your provisioning done within\nanother week. This is because of the ticket wait times for the cloud team to\nactually do the provisioning of the infrastructure.\n\n> In reality, this takes much, much longer than this. On average, the wait\n> time for someone to get through this process was between 6-8 weeks. In\n> total, the time it took to get something new into production was between 93\n> and 189 days.\n\nAre there better ways to do this in modern software engineering.. yes, yes\nthere is.\n\nThis is really the genesis of things like platform engineering and governance\nat the point of change come it. These topics are far outside of the scope of\nthis article but will definitely write about them in the future or talk about\nthem on the podcast.\n\n####\n\nThe compounding factors\n\nEach of these two problems sound nasty enough but lets consider how they\ninterplay with one another.\n\nIf you are trying to plan out for an entire quarter or more (via SAFe) and you\nhave a cloud intake process that takes 93-189 days to complete. What could\npossibly go wrong?\n\nThis means you need to try and guess (sorry... i mean plan) what is going to\nhappen even further out into the future making your organization more rigid\nand less agile overall. This adds to the overall doom loop and the\ncontinuation of the overall mess that is continuing to happen.\n\n##\n\nSo what can you do about it\n\nPlanning and running an organization is hard, there are no doubts about that.\nIt takes a strong leader to be able to take a step back, use a clear mind, and\nmap out the experiences that are happening through out the organization.\n\nTo me, this really is a cultural problem that is set from the top. It reminds\nme of a quote I have hanging on the wall in my office.\n\nHave a mind that is open everything and attached to nothing\n\nIts so easy to get caught up in the \u201cthis is how we do things\u201d mantra and\nnever reconsider how things might be done better especially in the era of cost\nsavings and optimization.\n\nVery rarely do I find problems that the vast majority of an organization\ndoesn\u2019t already know about. The problems I do find are the ones that people\nwont talk about even consider.\n\nThis really leads into the first thing you can do to help with some of this\nchaos.\n\n> Talk to and listen to your organization\n\nThere are a lot of ways you can get this done from surveys, Q&A sessions,\ntownhalls, or talking to your leaders. The one critical part is that there has\nto be a culture where its ok to say that this thing is broken or needs to be\nchanges.\n\n> Set up foundation of data to build metrics and help make decisions\n\nGetting this foundation setup is the key towards making solid decisions. It is\nwhat you need to build out leading and lagging metrics and should include\nsystem data along with survey results.\n\nWith this data you can easily identify problematic areas inside of the\norganization along with the metrics to show its overall impact.\n\n> Have a team focused on continuous improvement\n\nBuilding your data foundation and identifying metrics is only part of the\nproblem, now you have to figure out how to actually make an impact. This is\nwhere you need a team to help identify the hotspots, strategize solutions,\nvalue modeling, and building a business case.\n\n##\n\nConclusion\n\nThese are key focus areas that help organizations be more efficient.\nUnfortunately, there is no silver bullet that makes all of these problems go\naway... regardless of what some consultant told you. :-)\n\nThink Big Code Small is a reader-supported publication. To receive new posts\nand support my work, consider becoming a free or paid subscriber.\n\nShare this post\n\n#### The significance of organizational decisions on engineering efficiency\n\nwww.thinkbigcodesmall.io\n\nShare\n\nComments\n\n5 Reasons you DevEx journey will fail\n\nAny type of transformation is hard but developer experience touches so many\nparts of an organization that it can be even more challenging. Its one of...\n\nMar 17 \u2022\n\nChris Westerhold\n\n3\n\nShare this post\n\n#### 5 Reasons you DevEx journey will fail\n\nwww.thinkbigcodesmall.io\n\n2\n\nDev Portals - You can actually make your developer experience worse.\n\nImplementing any tool in an enterprise can be a daunting task with developer\nportals being no exception. I have lead many different implementations and...\n\nDec 15, 2023 \u2022\n\nChris Westerhold\n\nShare this post\n\n#### Dev Portals - You can actually make your developer experience worse.\n\nwww.thinkbigcodesmall.io\n\nThe Cobra Effect, When Good Intentions Go Bad\n\nThe Surprising Dangers Behind Good Intentions and Metrics\n\nApr 15 \u2022\n\nDaniel Horton\n\n2\n\nShare this post\n\n#### The Cobra Effect, When Good Intentions Go Bad\n\nwww.thinkbigcodesmall.io\n\nReady for more?\n\n\u00a9 2024 Think Big Code Small\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
