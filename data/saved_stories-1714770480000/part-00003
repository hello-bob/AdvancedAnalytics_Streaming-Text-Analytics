{"aid": "40248530", "title": "What You Need to Know about Modern CSS (Spring 2024 Edition)", "url": "https://frontendmasters.com/blog/what-you-need-to-know-about-modern-css-spring-2024-edition/", "domain": "frontendmasters.com", "votes": 4, "user": "fagnerbrack", "posted_at": "2024-05-03 15:07:06", "comments": 0, "source_title": "What You Need to Know about Modern CSS (Spring 2024 Edition)", "source_text": "What You Need to Know about Modern CSS (Spring 2024 Edition) \u2013 Frontend\nMasters Boost\n\nSearch\n\n# What You Need to Know about Modern CSS (Spring 2024 Edition)\n\nMarch 26, 2024\n\nMy goal with this bookmarkable guide is to provide a list of (frankly:\nincredible) new additions to CSS lately. There is no hardline criteria for\nthis list other than that these things are all fairly new and my sense is that\nmany people aren\u2019t aware of these things. Or even if they are, they don\u2019t have\na great understanding of them and could use a plain language explanation of\nwhat it is, why they should care, and a bit of reference code. Maybe that\u2019s\nyou.\n\nI\u2019d like to work on our collective muscle memory on these features. Like I\nsaid, \u201ceven if you know about this stuff, it takes time to build the muscle\nmemory around it.\u201d\n\nThere is quite a bit more syntax, detail, and nuance to these things than I am\npresenting here. I want you to know what\u2019s possible, reference the most basic\nusage and syntax, then dig deeper when you need to.\n\n## Container Queries (Size)\n\n### What are Size Container Queries?\n\nContainer Queries allow you to write styles that apply to the children of a\ncontainer element when that container matches certain media conditions,\ntypically a width measurement.\n\n    \n    \n    <div class=\"element-wrap\"> <div class=\"element\"> </div> </div>Code language: HTML, XML (xml)\n    \n    \n    .element-wrap { container: element / inline-size; } @container element (min-inline-size: 300px) { .element { display: flex; gap: 1rem; } }Code language: CSS (css)\n\n### When should you care?\n\nIf you\u2019ve ever thought: I wish I could make styling decisions based on the\nsize of this element, not the entire page like @media queries force me to do.\nThen using @container queries are for you! People who work on design systems\nor heavily component-based websites will probably mostly use Container Queries\nto style things based on size, because the size of the entire page is a poor\nproxy for the size of a component.\n\n### Support\n\nBrowser Support| Full  \n---|---  \nProgressive Enhancement?| Potentially \u2014 if it\u2019s not critical what you are\nstyling, then yes.  \nPolyfillable| Yes  \n  \n### Basic Demo of Usage\n\nUse the resizer in the middle to see the calendar change layout depending on\nhow much space it has. It has three breakpoints of its own.\n\n## Container Queries (Style)\n\n### What are Style Container Queries?\n\nContainer Style Queries allow you to apply styles when a given Custom Property\nhas a given value.\n\n    \n    \n    .container { --variant: 1; &.variant2 { --variant: 2; } } @container style(--variant: 1) { button { } /* You can't style .container, but can select inside it */ .other-things { } } @container style(--variant: 2) { button { } .whatever { } }Code language: CSS (css)\n\n### When should you care?\n\nHave you ever wanted a mixin in CSS? As in, you set one property but get\nmultiple properties. Sass made mixins fairly popular. You can do that with a\nStyle Container Query. But just like how Sass had variables then CSS variables\nturned out to be more powerful and useful, Style Container Queries are likely\nto be more powerful and useful, because they respect the cascade and can be\ncalculated and such.\n\n### Support\n\nBrowser Support| \u2705 Chrome \u2018n\u2019 Friends \ud83d\udd1c Safari \u274c Firefox  \n---|---  \nProgressive Enhancement?| Potentially \u2014 It depends on what you\u2019re doing with\nthe styles, but let\u2019s say not really.  \nPolyfillable| No  \n  \n### Basic Demo of Usage\n\n## Container Units\n\n### What are Container Units?\n\nContainer Units (literally units, like px, rem, or vw) allow you to set the\nsize of things based on the current size of a container element. Similar to\nhow with viewport units 1vw is 1% of the browser window width, 1cqw is 1% of\nthe width of the container (although I\u2019d recommend you use cqi instead, the\n\u201clogical equivalent\u201d, meaning the \u201cinline direction\u201d).\n\nThe units are cqw (\u201ccontainer query width\u201d), cqh (\u201ccontainer query height\u201d),\ncqi (\u201ccontainer query inline\u201d), cqb (\u201ccontainer query block\u201d), cqmin (smaller\nof cqi and cqb), and cqmax (larger of cqi and cqb).\n\n### When should you care?\n\nIf the sizing of anything in an element feels as if it should be based on the\ncurrent size of the container, container units are essentially the only way.\nAn example of this is typography. A typical Card element may deserve a larger\nheader text when it happens to be rendered larger, without something like a\nclass name needing to be added to control that. (I\u2019m a fan of this demo.) Even\na container query is clunky comparatively.\n\n### Support\n\nBrowser Support| Full  \n---|---  \nProgressive Enhancement?| Yes \u2014 you could list a declaration using fallback\nunits right before the declaration using container query units.  \nPolyfillable| Yes  \n  \n### Basic Demo of Usage\n\nThis element uses container query units for not only the font-size, but the\npadding, border, and margin as well.\n\n## The :has() Pseudo Selector\n\n### What is the :has() selector?\n\nThe :has() selector allows you to conditionally select an element when\nelements deeper in the DOM tree of the original element match the selector you\nput inside :has().\n\n    \n    \n    figure:has(figcaption) { border: 1px solid black; padding: 0.5rem; }Code language: CSS (css)\n\n### When should you care?\n\nIf you\u2019ve ever wanted a \u201cparent\u201d selector in CSS, :has() can do that, but it\u2019s\nmore powerful than that, as once you\u2019ve selected the parent you want, you can\nagain drill back down. Jhey Tompkins once called it a \u201cfamily selector\u201d which\na nice way to think about it. You can also combine it with :not() to build a\nselector when an element doesn\u2019t \u201chave\u201d a matching element inside.\n\n### Support\n\nBrowser Support| Full  \n---|---  \nProgressive Enhancement?| Depends on what you\u2019re doing with the styles, but\nlet\u2019s say not really.  \nPolyfillable| For the JavaScript side only  \n  \n### Basic Demo of Usage\n\n## View Transitions\n\n### What are View Transitions?\n\nThere are two types of View Transitions:\n\n  1. Same-Page Transitions (Require JavaScript)\n  2. Multi-Page Transitions (CSS Only)\n\nThey are both useful. A same-page transition involves and animation when the\nDOM is changed without the page changing, like a list being sorted. A multi-\npage transition is for animating elements between page loads, like a video\nthumbnail transitioning into a video element. This is the basic syntax for a\nsame-page transition:\n\n    \n    \n    if (!document.startViewTransition) { updateTheDOM(); } else { document.startViewTransition(() => updateTheDOM()); }Code language: JavaScript (javascript)\n\nFor multi-page transitions: you need this meta tag:\n\n    \n    \n    <meta name=\"view-transition\" content=\"same-origin\">Code language: HTML, XML (xml)\n\nThen any element you want to transition between pages you make sure has a\ntotally unique view-transition-name applied in the styles, on both the\noutgoing page and incoming page.\n\n### When should you care?\n\nUsers can understand an interface better if an element moves to a new position\nrather than instantly being there. There is an animation concept called\ntweening where the animation is automatically created based on a starting and\nending state. View Transitions are essentially tweening. You can control\naspects of the animation, but for the most part the animation is automatically\ncreated based on the starting and ending state of the DOM, rather than you\nhaving to be really specific about the animation details.\n\n### Support\n\nBrowser Support| \u2705 Chrome \u2018n\u2019 Friends \u274c Safari \u274c Firefox  \n---|---  \nProgressive Enhancement?| Yes \u2014 the transitions can just not run, or you could\nprovide a fallback animation.  \nPolyfillable| No  \n  \n### Basic Demo of Usage\n\nThis is an example of a same-page view transition:\n\n## Nesting\n\n### What is nesting?\n\nNesting is a way of writing CSS that allow you to write additional selectors\nwithin an existing ruleset.\n\n    \n    \n    .card { padding: 1rem; > h2:first-child { margin-block-start: 0; } footer { border-block-start: 1px solid black; } } Code language: CSS (css)\n\n### When should you care?\n\nNesting is mostly a CSS authoring convenience, but the fact that it can group\nrelated CSS nicely together and prevent you from having to repeat writing a\nselector can mean avoiding mistakes and making the CSS easier to read. Nested\nCSS can also be something of a footgun in that may encourage writing CSS that\nmatches the nesting of HTML in an unnecessary way, increasing the specificity\nand decreasing the reusability of some CSS.\n\n    \n    \n    .card { container: card / inline-size; display: grid; gap: 1rem; @container (min-inline-size: 250px) { gap: 2rem; } } Code language: CSS (css)\n\nThe only major difference from Sass-style nesting is that you can\u2019t combine\nthe & directly.\n\n    \n    \n    .card { body.home & { /* totally fine */ } & .footer { /* totally fine, don't even need the & */ &__big { /* nope, can't do this */ } }Code language: CSS (css)\n\n### Support\n\nBrowser Support| Full  \n---|---  \nProgressive Enhancement?| No  \nPolyfillable| You could use a processor like LightningCSS, Sass, Less, etc.  \n  \n## Scroll-Driven Animations\n\n### What are Scroll-Driven Animations?\n\nAny animation that is tied to the scrolling of an element (often the page\nitself) can now be done in CSS rather than needing to bind DOM scrolling\nevents in JavaScript. They come in two varieties:\n\n  * The scroll progress of the element. (animation-timeline: scroll())\n  * An element\u2019s current viewable position within the element. (animation-timeline: view())\n\n### When should you care?\n\nImagine a reading progress indicator bar that fills from 0% to 100% as the\nuser scrolls down the page. That can be done with an animation moving the\nbackground-position of an element tried to the overall scroll position of the\npage. Doing this in CSS instead of JavaScript is good for performance.\n\nThe other major use case covered by scroll-driven animations is to run an\nanimation as an element enters (or leaves!) the viewport. You have lots of\ncontrol over the details, like when the animation starts and ends based on how\nvisible the element is.\n\n### Support\n\nBrowser Support| \u2705 Chrome \u2018n\u2019 Friends \u274c Safari \ud83d\udd1c Firefox  \n---|---  \nProgressive Enhancement?| Yes \u2014 these effects tend to be visual flair, not\nrequired functionality.  \nPolyfillable| Yes  \n  \n### Basic Example of Usage\n\nThis is the demo from when we looked at image zooming and page scrolling.\n\n## Anchor Positioning\n\n### What is Anchor Positioning?\n\nAnchor positioning allows you to place items relative to where another element\nis. Seems pretty obvious when put like that, but that\u2019s what it is. You\ndeclare an element an anchor and give it a name, then can position elements to\nthe top/right/bottom/left (or center, or the logical equivalents) of the\nanchor.\n\n### When should you care?\n\nOnce you can use this freely, you\u2019ll have to care less about exact DOM\npositioning of elements (aside from accessibility concerns). The way it is\nnow, the element you want to position relative to another has to be a child\nelement and for there to be a positioning context to work within. This can\ndictate where elements go in the DOM, whether or not that makes sense.\n\nThe big use cases are going to be tooltips and custom context menus.\n\n### Support\n\nBrowser Support| \ud83d\udd1c Chrome \u2018n\u2019 Friends \u274c Safari \u274c Firefox  \n---|---  \nProgressive Enhancement?| Possibly \u2014 if you can tolerate a totally different\nposition for elements.  \nPolyfillable| Yes  \n  \n### Basic Example of Usage\n\nAt the time I\u2019m publishing this, this only works in Chrome Canary with the\n\u201cExperimental Web Platform Features\u201d flag enabled.\n\n## Scoping\n\n### What is Scoped CSS?\n\nScoping in CSS is in the form of an @scope at-rule that declares a block of\nCSS to only apply to the given selector. And optionally, stop applying at\nanother given selector.\n\n### When should you care?\n\nYou can also scope CSS by applying a class and nesting within that class. But\n@scope has a few tricks up it\u2019s sleeve that can make it interesting. The\n\u201cdonut scope\u201d option is a unique ability it has:\n\n    \n    \n    @scope (.card) to (.markdown-output) { h2 { background: tan; /* stop doing this when we get to the Markdown */ } }Code language: CSS (css)\n\nMore logical proximity styling is another useful feature. This is a bit tricky\nto explain but once you see it you can\u2019t unsee it. Consider theming. You have\na .dark selector and a .light selector. If you only ever use one on the entire\npage, that\u2019s fine, but if you end up nesting them at all, because they have\nthe same specificity, whichever one you define later is technically a bit more\npowerful, and can win out even if it doesn\u2019t make sense to. Minimal example:\n\n    \n    \n    .purple-paragraphs p { color: purple; } .red-paragraphs p { color: red; }Code language: CSS (css)\n    \n    \n    <div class=\"purple-paragraphs\"> <div class=\"red-paragraphs\"> <div class=\"purple-paragraphs\"> <p>some text</p> </div> </div> </div>Code language: HTML, XML (xml)\n\nYou might think the paragraph element in there would have the color purple,\nbut it will actually be red. That\u2019s just awkward, but it can be fixed with\n@scope. When scoped selectors match, as Bramus says, \u201cit weighs both selectors\nby proximity to their scoping root\u201d, and since \u201clight\u201d is closer here, it\nwould win.\n\nMy favorite though is the ability to drop in a <style> tag in the DOM and have\nit apply scoped styles only to that bit of the DOM, without having to name\nanything.\n\n    \n    \n    <div class=\"my-cool-component\"> <style> @scope { :scope { /* selects the div above, without having to select it by class or anything */ } .card { } } </style> <article class=\"card\"> </article> </div>Code language: HTML, XML (xml)\n\n### Support\n\nBrowser Support| \u2705 Chrome \u2705 Safari \u274c Firefox  \n---|---  \nProgressive Enhancement?| No  \nPolyfillable| No  \n  \n### Basic Example of Usage\n\n## Cascade Layers\n\n### What are Layers?\n\nCascade Layers in CSS are an extremely powerful syntax that affects the\nstyling strength of a chunk of styles. You can optionally name and order\nlayers (if you don\u2019t explicitly order them, they order in source order).\nStyles in higher layers automatically beat styles in lower layers, regardless\nof selector strength. Styles not within layers are the most powerful.\n\n    \n    \n    <body id=\"home\">Code language: HTML, XML (xml)\n    \n    \n    @layer base { body#home { margin: 0; background: #eee; } } body { background: white; } Code language: CSS (css)\n\nWe\u2019re used to thinking that body#home is a much more powerful selector, thus\nthe background will be #eee. But because there are unlayered styles here, that\nwill win, making the background white.\n\nYou may have as many layers as you like and can order them upfront. I think\nlayering is likely to become a best practice on new greenfield projects, and\ntake shape something like:\n\n    \n    \n    @layer reset, default, themes, patterns, layouts, components, utilities;Code language: CSS (css)\n\nOne gotcha is that !important rules on lower layers are actually more\npowerful.\n\n### When should you care?\n\nOne clear way you get a lot of value out of CSS layers if you work on a\nproject that uses a third-party styling library. You can put that library on a\nlower layer than the styles that your team writes, and you won\u2019t have to worry\nabout fighting the third-party library in terms of selector strength. Your\nstyles on a higher layer will always win, which is likely to create cleaner\nand more maintainable CSS.\n\nFor example, put all of Bootstrap on a lower layer just using the layer\nkeyword and then any styles you write after that will win, even if Bootstrap\nitself uses a higher power selector.\n\n    \n    \n    @import url(\"https://cdn.com/bootstrap.css\") layer; h5 { margin-bottom: 2rem; }Code language: CSS (css)\n\n### Support\n\nBrowser Support| Full  \n---|---  \nProgressive Enhancement?| No  \nPolyfillable| Yes  \n  \n### Basic Example of Usage\n\n## Logical Properties\n\n### What are Logical Properties?\n\nLogical properties are alternatives to properties that specify a direction.\nFor example, in a left-to-right language like English, the inline direction is\nhorizontal and the block direction is vertical, so margin-right is equivalent\nto margin-inline-end and margin-top is equivelant to margin-block-start. In a\nright-to-left language like Arabic, margin-inline-end changes to the\nequivalent of margin-left, because that is the end side of the inline flow of\nelements. There are a lot of CSS properties and values that have a directional\ncomponent like this (border, padding, offset, set), so the trick is\nunderstanding inline and block flow and using the correct start or end value.\n\n### When should you care?\n\nOften when you are declaring directional information in CSS, what you mean is\n\u201cin the inline direction of text\u201d. That might sound strange, but imagine a\nbutton and the space between an icon and the text. If you apply margin-right\nto the icon to space it away from the text, but then the page is translated to\na right-to-left language, that spacing is now on the wrong side of the icon.\nWhat you meant was margin-inline-end on the icon. If you code your side using\nlogical properties in this way, it will automatically translate better without\nwriting any additional conditional code.\n\n### Support\n\nBrowser Support| Full  \n---|---  \nProgressive Enhancement?| You\u2019d have to use @supports and unset to remove the\nfallback value and reset using a logical property, but it\u2019s possible.  \nPolyfillable| I can\u2019t vouch for it, but there is a processing option.  \n  \n### Basic Example of Usage\n\n## P3 Colors\n\n### What is the Display P3 Color Space?\n\nWe\u2019re largely used to the sRGB color space on the web. That\u2019s what hex colors\nuse, and the rgb(), hsl(), and hsb() functions. Many displays these days are\ncapable of display a much wider range of colors than sRGB is capable of\ndescribing, so being limited to that color space sucks. The Display P3 color\nspace is about 50% wider than sRGB, expanding in the direction of more rich\nand vibrant colors. New CSS functions, which can even use different color\nmodels that have their own useful properties, allow us to declare colors in\nthis space.\n\n### When should you care?\n\nIf you want to use colors that are quite vibrant, you\u2019ll need to tap into\ncolors in the P3 Color Space. Using newer color models (and functions) can do\nthis, and are very useful for a variety of other things.\n\nFor example, the oklch() function (and thus OKLCH color model) can display any\ncolor any other method can (plus P3), has a similar human readability in\ncommon with hsl(), and has \u201cuniform perceived brightness\u201d, so that the first\nnumber (lightness) behaves way more predictably than it does in hsl(). That\u2019s\nawfully nice for color on the web. But it\u2019s not the only new color model and\nfunction! I find the oklab color model generally best for gradients.\n\n### Support\n\nBrowser Support| Full (e.g. oklab)  \n---|---  \nProgressive Enhancement?| Yes \u2014 you can declare fallback colors and displays\nthat can\u2019t display the color you declare will come back down into range.  \nPolyfillable| Yes  \n  \n### Basic Example of Usage\n\nYou can edit these <style> blocks because I made them display: block; and\ncontenteditable:\n\n## Color Mixing\n\n### What is color-mix()?\n\nThe color-mix() function in CSS allows you to, wait for it, mix colors. This\nkind of thing has been baked into CSS processing tools for a long time, and as\ntypical of CSS evolution, now that it\u2019s in native CSS, it\u2019s more thoughtful\nand powerful than it ever was in a processor.\n\n### When you should care?\n\nHave you ever wanted to darken or lighten a color you already have on the fly?\nThat\u2019s one of the things color-mix() can do. Color mixing can happen in a\nspecific color model which means you can take advantage of how that models\nworks. For example, the perceptually uniform brightness of OKLCH makes it\nsensible to use for adjusting brightness. You can make whole color palettes\nusing color-mix().\n\n### Browser Support\n\nBrowser Support| Full  \n---|---  \nProgressive Enhancement?| Yes, you could declare fallback colors.  \nPolyfillable| Could be but I don\u2019t know of one.  \n  \n### Basic Example of Usage\n\n## Margin Trim\n\n### What is margin-trim?\n\nThe margin-trim property removes any margin in the direction specified from\nthe selected container at the end of that direction. Imagine you have five\nblocks in a row that all have right margin on them in a container. You might\nselect the :last-child to remove the right margin. With margin-trim you can\nensure that margin is removed from the parent element itself.\n\n    \n    \n    .container { /* prevent \"extra\" margin at the end of the element */ margin-trim: block-end; /* an element like this might be the culprit, but it could be anything */ > p { margin-block-end: 1rem; } }Code language: CSS (css)\n\n### When should you care?\n\nYou know how the gap property of flexbox and grid is... awesome? It only puts\nspacing between elements. Well, if you need to apply spacing between elements\nbut you\u2019re in a position where you can\u2019t use gap, margin-trim is awfully nice\nas it means you apply directional margin to all the children and not worry\nabout an additional fancy selector to select the first or last one and remove\nthat unneeded final margin. It might end up a best practice.\n\n### Support\n\nBrowser Support| \u2705 Safari \u274c Chrome \u274c Firefox  \n---|---  \nProgressive Enhancement?| Yes. A little extra space likely isn\u2019t a major\nproblem.  \nPolyfillable| No  \n  \n### Basic Example of Usage\n\nThe last paragraph here is a notorious situation where the bottom margin on it\ncreates more space at the bottom than any of the other edges. With margin-trim\nwe can ensure it\u2019s sliced off without having to select that last paragraph and\nmanually remove it.\n\n## Text Wrapping\n\n### What is text-wrap?\n\nThe text-wrap property likely isn\u2019t in your long term CSS memory. It\u2019s capable\nof text-wrap: nowrap;, but we generally think of white-space: nowrap; for\nthis. But now, text-wrap has two new tricks up it\u2019s sleeve:\n\n  * text-wrap: balance; \u2014 Attempt to make equal-width lines when text wraps.\n  * text-wrap: pretty; \u2014 Avoid orphans.\n\n### When should you care?\n\nA headline with one word orphaned onto the next line just looks really awkward\nand could be considered poor typography. There wasn\u2019t a great way to solve\nthis before, short of somewhat awkward tricks like inserting a &nbsp; instead\nof a normal space between the last two words. Balancing a headline prevents\nthis, but goes further in making the multiple lines of text generally the same\nwidth. Using pretty is more focused just on orphan prevention alone, making it\nmore appropriate for body text.\n\n### Support\n\nBrowser Support| Depends on which value. balance has decent support with all\nbrowsers ready or coming soon. pretty, less-so.  \n---|---  \nProgressive Enhancement?| Yes. While slightly less aesthetic, widows and\norphans are not that big of a problem, so if this property doesn\u2019t work, it\u2019s\nno big deal.  \nPolyfillable| Yes.  \n  \n### Basic Example of Usage\n\n## Subgrid\n\n### What is Subgrid?\n\nSubgrid is an optional part of using CSS grid that is relevant when you are\nnesting gridded elements. By setting grid-template-columns: subgrid; or grid-\ntemplate-rows: subgrid; on a grid-level element, you\u2019re saying \u201cinherit these\ncolumns or rows from my parent grid, where relevant\u201d.\n\n### When should you care?\n\nThe point of using grids for layout is generally lining things up. Without\nsubgrid, it means that child elements of a grid don\u2019t have access to the grid\nlines of the parent grid, and thus lack the opportunity help line things up.\nSubgrid fills that gap. When DOM nesting is important for functionality or\naccessibility, like in a <form>, subgrid can help ensure things line up\nsensibly.\n\n### Support\n\nBrowser Support| Full  \n---|---  \nProgressive Enhancement?| Yes. You can fall back to defining your own grid\nlines that are workable if not perfect.  \nPolyfillable| No. There is a grid polyfill but it doesn\u2019t do subgrid.  \n  \n### Basic Example of Usage\n\n## Things to keep an eye on...\n\nThe speed of CSS development doesn\u2019t seem to have slowed down. There is plenty\nto continue to watch for and look forward to.\n\n  * CSS Mixins & Functions \u2014 actual mixins and functions that take parameters\n  * Relative Color Syntax \u2014 a way to manipulate the parts of colors in an intuitive and powerful way.\n  * Interop 2024 \u2014 All the things that we can essentially bet on for being cross-browser compatible soon, including the relative color syntax above.\n  * The CSS property field-sizing should help the long-standing difficult issue of auto-resizing form elements like textareas and input to the content they contain.\n  * <selectmenu> in HTML is essentially a fully CSS styleable <select>, which is wild.\n\nThat\u2019s just a few things to watch. You might as well subscribe to our feed as\nwe\u2019ll be doing the watching for you and then you\u2019ll catch the next one.\n\nDid I miss a relatively new favorite of yours? Let me know.\n\n### Wanna learn CSS from a course?\n\nFYI, we have a full CSS learning path with multiple courses depending on how\nyou want to approach it.\n\n### 6 responses to \u201cWhat You Need to Know about Modern CSS (Spring 2024\nEdition)\u201d\n\n  1. Oliver says:\n\nMarch 27, 2024 at 10:05 am\n\nVery helpful summary!\n\nReply\n\n  2. Mauricio Poveda says:\n\nMarch 30, 2024 at 9:27 am\n\nAwesome post by one the most CSS saavy devs in CSS. Very helpful and thankful\nto FEM to post this contents free.\n\nReply\n\n  3. s427 says:\n\nApril 3, 2024 at 2:07 am\n\nVery helpful article, thank you very much!\n\nHowever, please note that in \u201cScoping\u201d, the example given with the three\nembedded divs and light/dark classes does not work. Contrary to what the\narticle says, \u201csome text\u201d will use the \u201clight\u201d style. I am guessing this is an\noverly simplified version of the example given on the MDN page for @scope,\nwhich is slightly more convoluted: https://developer.mozilla.org/en-\nUS/docs/Web/CSS/@scope#how_scope_conflicts_are_resolved\n\nReply\n\n     * Chris Coyier says:\n\nApril 3, 2024 at 9:46 am\n\nYou\u2019re correct! Thank you. Selecting within the class exhibits the issue more\nclearly: https://codepen.io/chriscoyier/pen/oNOpqJK\n\nReply\n\n  4. Michael Berger says:\n\nApril 3, 2024 at 4:24 pm\n\nThis is very useful article. However, I have a big problem with container\nqueries, at least as you have described them. Problem 1: You are writing\nif/then code in CSS: that should be in JavaScript. Problem 2: The bigger\nissue: you are writing more code then you need to. In the example you used,\nyou could have been handled the situation much easier, and with less code,\nwith a class. style=\u201d\u2013variant: 1;\u201d is class1 and style=\u201d\u2013variant: 2;\u201d is\nclass2. Your code would be simpler and easier to read in HTML, CSS and JS.\n\nReply\n\n  5. Chris Coyier says:\n\nApril 3, 2024 at 4:36 pm\n\n> You are writing if/then code in CSS: that should be in JavaScript.\n\nDo you feel that way about media queries? Hover states? Focus styles? Disabled\nstyles? Validity checks? Heck, every selector is an if/then statement. If the\nselector matches, do the styles.\n\n> you could have been handled the situation much easier, and with less code,\n> with a class. style=\u201d\u2013variant: 1;\u201d is class1 and style=\u201d\u2013variant: 2;\u201d is\n> class2. Your code would be simpler and easier to read\n\nI agree class changes are a very clear way to change the state of something.\nBut changing the value of a custom property in CSS is a different beast\nentirely. You could change a custom property because of a :has() selector, or\na media query, or a state change, or a million other things. In those cases,\nyou don\u2019t have the ability to change a class in the HTML. But with a style\nquery, you can still change a whole chunk of styles when the custom property\nchanges.\n\nReply\n\n### Leave a Reply Cancel reply\n\n### Author\n\nChris Coyier\n\nCodePen\n\nI\u2019m a web designer and developer and my career arc is about helping you get\nbetter at those things. Sometimes people talk to me about that. With Alex\nVazquez, I\u2019m the co-founder of CodePen, a social front-end web development\nenvironment. With Dave Rupert, I\u2019m the co-host of a podcast called ShopTalk. I\nbuilt CSS-Tricks, a website all about building websites, and ran it for 15\nyears, from 2007 to 2022. I\u2019m big on the power of writing as a way to think\nbetter and improve yourself.\n\nWebsite GitHub Profile X Profile LinkedIn Profile\n\n### Tags\n\nCSS\n\n### Table of Contents\n\n  1. Container Queries (Size)\n\n    1. What are Size Container Queries?\n    2. When should you care?\n    3. Support\n    4. Basic Demo of Usage\n  2. Container Queries (Style)\n\n    1. What are Style Container Queries?\n    2. When should you care?\n    3. Support\n    4. Basic Demo of Usage\n  3. Container Units\n\n    1. What are Container Units?\n    2. When should you care?\n    3. Support\n    4. Basic Demo of Usage\n  4. The :has() Pseudo Selector\n\n    1. What is the :has() selector?\n    2. When should you care?\n    3. Support\n    4. Basic Demo of Usage\n  5. View Transitions\n\n    1. What are View Transitions?\n    2. When should you care?\n    3. Support\n    4. Basic Demo of Usage\n  6. Nesting\n\n    1. What is nesting?\n    2. When should you care?\n    3. Support\n  7. Scroll-Driven Animations\n\n    1. What are Scroll-Driven Animations?\n    2. When should you care?\n    3. Support\n    4. Basic Example of Usage\n  8. Anchor Positioning\n\n    1. What is Anchor Positioning?\n    2. When should you care?\n    3. Support\n    4. Basic Example of Usage\n  9. Scoping\n\n    1. What is Scoped CSS?\n    2. When should you care?\n    3. Support\n    4. Basic Example of Usage\n  10. Cascade Layers\n\n    1. What are Layers?\n    2. When should you care?\n    3. Support\n    4. Basic Example of Usage\n  11. Logical Properties\n\n    1. What are Logical Properties?\n    2. When should you care?\n    3. Support\n    4. Basic Example of Usage\n  12. P3 Colors\n\n    1. What is the Display P3 Color Space?\n    2. When should you care?\n    3. Support\n    4. Basic Example of Usage\n  13. Color Mixing\n\n    1. What is color-mix()?\n    2. When you should care?\n    3. Browser Support\n    4. Basic Example of Usage\n  14. Margin Trim\n\n    1. What is margin-trim?\n    2. When should you care?\n    3. Support\n    4. Basic Example of Usage\n  15. Text Wrapping\n\n    1. What is text-wrap?\n    2. When should you care?\n    3. Support\n    4. Basic Example of Usage\n  16. Subgrid\n\n    1. What is Subgrid?\n    2. When should you care?\n    3. Support\n    4. Basic Example of Usage\n  17. Things to keep an eye on...\n\n### Learn with Frontend Masters\n\nAnswer three short questions and we'll recommend the best learning path for\nyour experience level and goals.\n\nFrontend Masters\n\nTwitter LinkedIn Facebook Instagram RSS\n\nContact: support@frontendmasters.com\n\nFrontend Masters is proudly made in Minneapolis, MN\n\n\u00a92024 Frontend Masters Terms of Service \u00b7 Privacy Policy\n\n# Search results\n\nFiltersShow filters\n\nSort by:\n\n\u2022\u2022\n\n## No results found\n\n## Filter options\n\n", "frontpage": true}
