{"aid": "40071105", "title": "Managing to-do lists on the command line with Taskwarrior", "url": "https://lwn.net/SubscriberLink/969904/e6d9c7bc4f45b262/", "domain": "lwn.net", "votes": 1, "user": "chmaynard", "posted_at": "2024-04-17 23:14:37", "comments": 0, "source_title": "Managing to-do lists on the command line with Taskwarrior [LWN.net]", "source_text": "Managing to-do lists on the command line with Taskwarrior [LWN.net]\n\nLWN .net News from the source\n\n  * Content\n\n    * Weekly Edition\n    * Archives\n    * Search\n    * Kernel\n    * Security\n    * Events calendar\n    * Unread comments\n    * LWN FAQ\n    * Write for us\n\n| |\n\nSubscribe / Log in / New account\n\n# Managing to-do lists on the command line with Taskwarrior\n\n## [LWN subscriber-only content]\n\n### Welcome to LWN.net\n\nThe following subscription-only content has been made available to you by an LWN subscriber. Thousands of subscribers depend on LWN for the best news from the Linux and free software communities. If you enjoy this article, please consider accepting the trial offer on the right. Thank you for visiting LWN.net!| | \n\n### Free trial subscription\n\nTry LWN for free for 1 month: no payment or credit card required. Activate\nyour trial subscription now and see why thousands of readers subscribe to\nLWN.net.  \n---  \n  \nApril 17, 2024\n\nThis article was contributed by Koen Vervloesem\n\nManaging to-do lists is something of a universal necessity. While some people\nhandle them mentally or on paper, others resort to a web-based tool or a\nmobile application. For those preferring the command line, the MIT-licensed\nTaskwarrior offers a flexible solution with a healthy community and lots of\nextensions.\n\nGetting started with Taskwarrior is straightforward, but it also supports\nsophisticated functionality, including projects, due dates, dependencies,\nuser-defined metadata, and hook scripts. The program's philosophy describes\nvalues such as openness, low friction, no performance penalty for unused\nfeatures, extensibility, and a focus on doing one thing well. Taskwarrior does\nnot dictate a specific methodology for users to manage their to-do list. It\nprovides advanced functionality enabling users to integrate the program into\ntheir existing workflows. The documentation lists some workflow examples, some\nof them including elements from Getting Things Done and Kanban methodologies.\n\nTaskwarrior has been in development since 2006. On March 24, the project\nreleased Taskwarrior 3.0. Most Linux distributions are still packaging an\nolder version, but downloading and building Taskwarrior 3.0 is a simple\nprocess if a reasonably recent version of the Rust toolchain (1.70 or later)\nis installed. I did stumble upon a build error; however, this was a known\nissue that was solved by removing a line in the project's Cargo.toml file.\n\n#### Simple\n\nIn its simplest form, using Taskwarrior only requires knowledge of three\nsubcommands: \"task add <description>\" to add a task to the to-do list, \"task\n<ID> done\" to mark a task as done, and \"task list\" to get a list of all tasks.\nAfter adding a task, Taskwarrior shows its ID, which can be used to refer to\nthe task in other commands, for instance to mark it as done.\n\nOne potential hiccup is that this ID represents the task's index in the list\nof all pending tasks. After marking a task as done, the IDs of all subsequent\ntasks decrement by one. This change, however, only takes effect after a\ncommand displaying IDs is executed. Therefore, after listing the tasks and\nlooking up their IDs, the IDs can be safely used in commands to mark various\ntasks as done. But as soon as a new \"task list\" command is executed, the IDs\nwill be changed to consecutive numbers again. In practice, this is a non-issue\nfor me. As the shell history shows the previously entered Taskwarrior commands\nwith the IDs of the tasks, I rarely need to explicitly ask for the IDs with a\n\"task list\" command.\n\nTaskwarrior has a built-in set of sensible defaults, which can be overridden\nindividually in a configuration file. On its first use, the \"task\" command\ncreates a minimal configuration file where the user can add configuration\noptions. The \"task show\" command reveals all defaults and overrides. For a\ncomplete description of all supported configuration options, the configuration\nfile's man page can be consulted with \"man taskrc\". The configuration file can\nbe manually edited, or modified using the \"task config\" command.\n\n#### Advanced\n\nTaskwarrior implements many commands using a flexible command-line syntax,\nwhich gives access to its advanced functionality. The general form of its\nsyntax is:\n\n    \n    \n    task [<filter>] [<command>] [<modifications> | <miscellaneous>]\n\nA command like \"task 12 done\" uses 12 as a filter to exclusively mark the task\nwith ID 12 as done. However, a filter can also be a tag like \"+work\" or an\nattribute value like \"status:pending\". Filters can be used to restrict the\ntasks in the list output. For example, \"task project:Book list\" shows only the\ntasks assigned to the project \"Book\".\n\nTags are simply single-word alphanumeric labels, and a task may have any\nnumber of them. Additionally, a task can be linked to a project, which is a\nway to group tasks; each task can only be linked to a single project, though\neach project can have multiple subprojects. Tags and projects assist in\nfiltering tasks conveniently.\n\nModifications are often used with the \"modify\" command, which allows users to\nchange tasks after adding them. For instance, this command adds the task with\nID 12 to the project Book:\n\n    \n    \n    task 12 modify project:Book\n\nIn a similar way, a due date can be assigned to a task:\n\n    \n    \n    task 12 modify due:tomorrow\n\nFurthermore, a task can have a scheduled date (representing the earliest\nopportunity to work on a task), a wait date (which keeps the task hidden until\nthe specified date), and an until date (the date after which the task is\nautomatically deleted). All these types of dates are optional.\n\nSome commands accept neither a filter nor modifications, but do accept\nmiscellaneous arguments. An example of this is the \"show\" command, which\ndisplays the values of configuration options, such as in \"task show verbose\".\n\nRecurring tasks are also supported. The following command adds a new task on\nthe first day of every month until the end of March 2026:\n\n    \n    \n    task add Pay the rent due:1st recur:monthly until:2026-03-31\n\nThe recurring task does not appear in the list of tasks, however. It has a\nstatus of \"recurring\", so only instances of the template task are created by\nTaskwarrior and added to the list of tasks, not the template itself. By\ndefault, only the next occurrence of the task is added to the list, but the\ntool can be configured to maintain several additional instances if desired.\n\nTaskwarrior further supports a considerable number of reports for visualizing\ntasks. This includes burndown charts (seen below) showing the number of\npending, active, and completed tasks over time (by day, week, or month),\nhistory reports, and lists of projects and tags.\n\nThe basic task list command is also a report. Many aspects of its output are\nconfigurable. Users can override the filter (which, by default, only shows the\npending tasks), the columns (which show metadata for each task), and the task\norder in the list. Similarly, a \"task all\" command shows all pending,\ncompleted, and deleted tasks.\n\n#### Extending Taskwarrior\n\nVarious external projects exist that extend Taskwarrior's functionality. The\nTools page on the project's web site enumerates 870 projects (410 when\nexcluding dormant projects). For instance, taskwarrior-tui and vit implement\ninteractive terminal user interfaces. The Bugwarrior extension can update a\nlocal Taskwarrior database from Bugzilla, GitHub, GitLab, and other bug-\ntracking systems.\n\nAnother noteworthy companion tool is Timewarrior, which was created by the\nsame developers as Taskwarrior. A hook script integrates Timewarrior with\nTaskwarrior to track time whenever a task is active. Hence, starting a task\nwith \"task <ID> start\" prompts the hook script to begin time tracking in\nTimewarrior until Taskwarrior stops the task after a \"task <ID> stop\" command.\nThe \"timew summary\" command will then show a report of the tracked intervals\nof the day; users can bring up some charts about the tracked tasks, as well.\nTimewarrior shares Taskwarrior's simple approach for basic functionality\ncoupled with flexible configurability, as can be seen in its documentation.\n\n#### Upgrade issues\n\nTaskwarrior 3.0 introduced a completely new task storage and synchronization\nbackend written in Rust: TaskChampion. As a result, users running a 2.x\nversion of Taskwarrior need to export their tasks from Taskwarrior 2 and,\nafter installing Taskwarrior 3, re-import all of their tasks, as explained in\nthe documentation about the upgrade process. After this, the old plaintext\ndata files can be deleted, since the tasks are now stored in a SQLite file.\n\nThe upgrade caught some users by surprise, however. For instance, the Arch\nLinux package didn't provide a migration script nor instructions about the\nnecessary steps. As a result, upgrading the Taskwarrior package on Arch Linux\nled to an empty task database.\n\nAnother breaking change concerns the synchronization functionality.\nTaskwarrior 2 has its own server for synchronizing to-do lists across\nmachines, \"taskd\". The documentation still explains this server setup, but\nTaskwarrior 3 is not compatible with this implementation. For the new version,\nTaskwarrior developers recommend the use of a cloud-storage backend. However,\naccording to the \"task-sync\" man page, Google Cloud Platform appears to be the\nonly supported platform at the moment.\n\nThe man page offers two alternate options: storing Taskwarrior's data\ndirectory on a file sharing service such as Dropbox or Google Drive, or\nrunning a TaskChampion sync server. Unfortunately, the latter option suffers\nfrom a lack of documentation. In response to an issue about this problem,\nTaskwarrior developer Dustin J. Mitchell admitted: \"\"I suspect you're not\nalone in wanting to deploy a self-hosted sync backend. We don't have a great\nanswer for that right now.\"\" Thus, users relying on Taskwarrior 2's taskd\nshould probably wait before upgrading to Taskwarrior 3. This includes users of\nthe Flutter-based TaskWarrior Mobile for Android.\n\n#### Conclusion\n\nMore than twelve years after embracing Taskwarrior 2.0 for managing my to-do\nlist and tracking time, I'm still a happy user. My usage pattern has remained\nrelatively unchanged since then, which is a testament to Taskwarrior's non-\nintrusive nature. Remembering a few commands is enough for my daily work, and\nits command-line nature makes it easy to integrate into other tools. For\ninstance, I display the ID and description of the currently active task in my\ntmux status bar. For the rare occasions when I need advanced functionality,\nthe man pages and documentation are excellent. For users spending a lot of\ntime with the command line, Taskwarrior is a great solution for frictionless\nmanagement of their to-do lists.\n\nIndex entries for this article  \n---  \nGuestArticles| Vervloesem, Koen  \n  \n> Did you like this article? Please accept our trial subscription offer to be\n> able to see more content like it and to participate in the discussion.  \n> ---  \n  \n(Log in to post comments)\n\n### Managing to-do lists on the command line with Taskwarrior\n\nPosted Apr 17, 2024 16:37 UTC (Wed) by hkario (subscriber, #94864) [Link]\n\nDid they fix the bug where you can't setup reminders about birthdays, because\nthe next task's date is always specified in days (365 days, it ignores leap\nyears), and can't be specified as a specific date?\n\n### Managing to-do lists on the command line with Taskwarrior\n\nPosted Apr 17, 2024 22:04 UTC (Wed) by serzan (subscriber, #8155) [Link]\n\ntaskwarrior is amazing! I love the simplicity, scriptability and not being\nopinionated about workflows. I use it to keep track of personal chores, and at\nwork for personal task tracking as well as team-wide prioritization (the\nlatter using user-defined attributes with custom priority weights). That's\nthree quite different use cases, which says something about taskwarrior's\nflexibility.\n\nI also use timew to keep track of exercising and sickness (which is in no way\nrelated to my use of taskw).\n\n### Managing to-do lists on the command line with Taskwarrior\n\nPosted Apr 17, 2024 22:09 UTC (Wed) by serzan (subscriber, #8155) [Link]\n\nforgot to add: I always set \"until\" for recurring tasks, to avoid the\naccumulation of undone tasks (which can be rather demoralizing)\n\n### Managing to-do lists on the command line with Taskwarrior\n\nPosted Apr 17, 2024 22:44 UTC (Wed) by npws (subscriber, #168248) [Link]\n\nThis looks like an interesting project. I would have been interested to\nintegrate this into a git repository to keep track of TODO items.\nUnfortunately it seems with version 3 they switched to a sqlite backend,\nmeaning I would have to keep the sqlite database within git.\n\nCopyright \u00a9 2024, Eklektix, Inc. Comments and public postings are copyrighted\nby their creators. Linux is a registered trademark of Linus Torvalds\n\n", "frontpage": false}
