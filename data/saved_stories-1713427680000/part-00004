{"aid": "40069584", "title": "Hacking a Streaming Processor for 1BRC", "url": "https://github.com/timeplus-io/proton/tree/develop/examples/onebrc", "domain": "github.com/timeplus-io", "votes": 2, "user": "jovezhong", "posted_at": "2024-04-17 20:15:22", "comments": 0, "source_title": "proton/examples/onebrc at develop \u00b7 timeplus-io/proton", "source_text": "proton/examples/onebrc at develop \u00b7 timeplus-io/proton \u00b7 GitHub\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ntimeplus-io / proton Public\n\n  * Notifications\n  * Fork 44\n  * Star 1.3k\n\n/\n\n# onebrc\n\n/\n\n## Directory actions\n\n## More options\n\n## Directory actions\n\n## More options\n\n## Latest commit\n\nayewo\n\nfeat: add a 1brc demo using Proton to the examples (#658)\n\nApr 16, 2024\n\na3c4090 \u00b7 Apr 16, 2024Apr 16, 2024\n\n## History\n\nHistory\n\n/\n\n# onebrc\n\n/\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n### parent directory\n\n..  \n  \n### 1brc.sql\n\n|\n\n### 1brc.sql\n\n| feat: add a 1brc demo using Proton to the examples (#658)| Apr 16, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| feat: add a 1brc demo using Proton to the examples (#658)| Apr 16, 2024  \n  \n## README.md\n\n# The One Billion Row Challenge with Timeplus Proton\n\nBack in January, Gunnar Morling kicked off a challenge to optimise the\naggregation of a billion rows nicknamed the 1brc (One Billion Row Challenge):\n\n> \u201cYour mission, should you decide to accept it, is deceptively simple: write\n> a Java program for retrieving temperature measurement values from a text\n> file and calculating the min, mean, and max temperature per weather station.\n> There\u2019s just one caveat: the file has 1,000,000,000 rows!\u201d\n\nThe constraints of the 1brc were carefully selected to raise awareness, within\nthe Java community, of new language features that many professional Java\ndevelopers are not aware of. But, the optimisation task at the core of\nchallenge turned out to be sufficiently challenging on its own, making it\nhugely popular amongst developers of all stripes.\n\n## Language Shootout\n\nThere was plenty of interest from other language communities. It wasn't long\nbefore the challenge turned into a language shootout: to see which language\ncould produce the fastest solution, even though only solutions written in Java\nwould be accepted for judging.\n\n### Programming Languages\n\nHighly optimized solutions for the challenge were written in a wide variety of\nprogramming languages including C, C++, C#, Dart, Elixir, Erlang, Go, Haskell,\nJavaScript, Kotlin, Lua, Perl, PHP, Python, R, Ruby, Rust, Scala, Swift, Zig\nand even less popular programming languages like COBOL, Crystal and Fortran.\n\n### Query Languages\n\nQuery languages were not left out. Solutions were shared in multiple SQL\ndialects, including:\n\n  * ClickHouse SQL^1^2;\n  * Databend Cloud SQL^3;\n  * DuckDB SQL^4;\n  * MySQL SQL^5;\n  * Oracle SQL^6^7;\n  * Postgres SQL^2;\n  * Snowflake SQL^8^9;\n  * TinyBird SQL^10.\n\nThere was also an attempt written in KDB/Q^11\u2014an SQL-like, general-purpose\nprogramming language built on top of KDB+. This isn't surprising since query\nlanguages shine really well in data aggregation tasks.\n\nThis article will share a solution for the challenge in the Timeplus SQL\ndialect.\n\n## Timeplus Proton\n\nTimeplus Proton is a purpose-built streaming analytics engine that comes\nbundled with two data stores:\n\n  * Timeplus NativeLog data store for real-time streaming queries and;\n  * A historical data store, powered by ClickHouse, for fast batch queries.\n\nSince the input data for the 1brc is a static 13GB CSV file and not a\nstreaming data source, we will simply adapt the solution written in the\nClickHouse SQL dialect so it can work inside Timeplus Proton for this demo.\n\n### Adapting the ClickHouse SQL for Timeplus Proton\n\nThe core of the ClickHouse SQL solution^1 can be seen below:\n\n    \n    \n    SET format_csv_delimiter = ';'; SELECT concat('{', arrayStringConcat(groupArray(formatted_result), ', '), '}') AS final_output FROM ( SELECT format('{}={}/{}/{}', city, toDecimalString(min(temperature), 1), toDecimalString(avg(temperature), 1), toDecimalString(max(temperature), 1)) AS formatted_result FROM file('measurements.txt', 'CSV', 'city String, temperature Float32') GROUP BY city ORDER BY city )\n\nThe Timeplus Proton docs covers the minor differences between the ClickHouse\nSQL dialect and the Timeplus SQL dialect.\n\nIn all, the changes were minimal to make the SQL work on Timeplus Proton:\n\n  * convert column types from title case to lower case:\n\n    * in city String, change String => string;\n    * in temperature Float32, change Float32 => float32;\n  * convert function names from camel case to snake case:\n\n    * change arrayStringConcat() => array_string_concat();\n    * change groupArray() => group_array();\n  * in the absence of a single function, compose multiple functions to obtain the same result:\n\n    * change toDecimalString() => to_string(to_decimal(...)).\n\nThe SQL code that we will be using on Timeplus Proton:\n\n    \n    \n    SET format_csv_delimiter = ';'; SELECT concat('{', array_string_concat(group_array(formatted_result), ', '), '}') AS final_output FROM ( SELECT format('{}={}/{}/{}', city, to_string(to_decimal(min(temperature), 1)), to_string(to_decimal(avg(temperature), 1)), to_string(to_decimal(max(temperature), 1))) AS formatted_result FROM file('measurements.txt', 'CSV', 'city string, temperature float32') GROUP BY city ORDER BY city )\n\n## Local Setup\n\n### Setup the Test Data\n\n  1. Make a separate folder for this demo to make it easy to clean up after we are done:\n\n    \n    \n    sudo mkdir -p /demo sudo chown -R ubuntu:ubuntu /demo\n\n  2. The official test data generator was written for Java 21. We will first install sdkman to allow us manage multiple Java versions:\n\n    \n    \n    curl -s \"https://get.sdkman.io\" | bash source \"/home/ubuntu/.sdkman/bin/sdkman-init.sh\"\n\n  3. Using sdkman, install a JDK based on OpenJDK that supports Java 21:\n\n    \n    \n    sdk install java 21.0.2-open\n\n  4. Clone the 1brc repository locally:\n\n    \n    \n    cd /demo git clone https://github.com/gunnarmorling/1brc\n\n  5. Build the generator for the test data\n\n    \n    \n    cd /demo/1brc ./mvnw verify\n\n  6. Use the generator to create 1 billion rows of test data\n\n    \n    \n    time ./create_measurements.sh 1000000000\n\n## 1brc Demo using Timeplus Proton\n\n  1. Install Timeplus Proton on your machine:\n\n    \n    \n    cd /demo curl https://install.timeplus.com | sh\n\n  2. Make sure your current working directory remains demo. Start the Timeplus Proton server in this directory:\n\n    \n    \n    ./proton server\n\n  3. Once the Timeplus Proton server is started successfully, it will create a folder named proton-data/ in the current directory which contains multiple subfolders. We will create a symbolic link to the test data we generated earlier (measurements.txt) from the proton-data/user_files subfolder created by the Timeplus Proton server.\n\n    \n    \n    ln -s /demo/1brc/measurements.txt /demo/proton-data/user_files\n\n  4. Now download the query we will be executing against the Timeplus Proton server to a file named 1brc.sql on your machine.\n\n  5. Next, from another terminal, start the Timeplus Proton client with the 1brc.sql file as input:\n\n    \n    \n    time ./proton client --host 127.0.0.1 --multiquery < /demo/1brc.sql\n\nThe Timeplus Proton server reported a summary of the executed query in its\nconsole output:\n\n    \n    \n    2024.04.13 23:07:16.705492 [ 14810 ] {33215e8b-670e-464b-a23e-994f706b7a64} <Information> executeQuery: Read 1000000000 rows, 19.51 GiB in 39.038123 sec., 25615985 rows/sec., 511.89 MiB/sec.\n\n## Summary\n\nTimeplus Proton took just 39.301 seconds^12 to aggregate 1 billion rows versus\n47.053 seconds^13 for ClickHouse on my machine ^14.\n\nIn other words, Timeplus Proton turned out to be as fast, or in this case,\nslightly faster than ClickHouse. This was a pleasantly surprising outcome\ngiven Timeplus Proton's streaming-first design.\n\n## Footnotes\n\n## Footnotes\n\n  1. 1BRC in ClickHouse SQL #80 \u21a9 \u21a9^2\n\n  2. 1BRC with PostgreSQL and ClickHouse #81 or 1 billion rows challenge in PostgreSQL and ClickHouse \u21a9 \u21a9^2\n\n  3. 1BRC in SQL with Databend Cloud #230 \u21a9\n\n  4. 1BRC in SQL with DuckDB #39 or 1\ufe0f\u20e3\ud83d\udc1d\ud83c\udfce\ufe0f\ud83e\udd86 (1BRC in SQL with DuckDB) \u21a9\n\n  5. 1BRC with MySQL #594 \u21a9\n\n  6. 1 billion row challenge in SQL and Oracle Database \u21a9\n\n  7. 1BRC with Oracle Database #707 \u21a9\n\n  8. The One Billion Row Challenge with Snowflake \u21a9\n\n  9. 1BRC in SQL with Snowflake #188 \u21a9\n\n  10. 1BRC in Tinybird #244 \u21a9\n\n  11. 1BRC in KDB/Q #208 \u21a9\n\n  12. Tested with Timeplus Proton server version 1.5.6. \u21a9\n\n  13. Tested with ClickHouse server version 24.4.1.1097 (official build). \u21a9\n\n  14. Tested on a MacBook Pro (13-inch, 2020, Four Thunderbolt 3 ports), 2 GHz Quad-Core Intel Core i5, 16 GB 3733 MHz LPDDR4X, macOS Monterey 12.6. \u21a9\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
