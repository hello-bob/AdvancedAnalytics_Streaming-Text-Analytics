{"aid": "40218503", "title": "Show HN: Lightweight, React IDE component which runs user written Python code", "url": "https://www.npmjs.com/package/codehelium", "domain": "npmjs.com", "votes": 1, "user": "dillondesilva", "posted_at": "2024-05-01 01:24:17", "comments": 0, "source_title": "codehelium", "source_text": "codehelium - npm\n\nskip to:contentpackage searchsign in\n\n\u2764\n\nnpm\n\nSign UpSign In\n\n# codehelium\n\n0.1.6 \u2022 Public \u2022 Published an hour ago\n\n  * Readme\n  * Code Beta\n  * 7 Dependencies\n  * 0 Dependents\n  * 7 Versions\n\n# codehelium \ud83d\udc7e\n\nCodehelium is a lightweight IDE for the web that compiles and executes your\ncode using Pyodide/Emscripten/Webassembly.\n\nIt is currently only usable as a React component with support for Python code\nediting/execution.\n\nCheck out the demo - it is quite \"bloat-free\" and can also serve as a useful\nsite for if you need to quickly hack up and test concepts/ideas!\n\n## Installation \ud83d\udda5\ufe0f\n\nTo get started with using codehelium in your React application run npm i\ncodehelium, import the component and you're good to go!\n\n    \n    \n    import PythonEditor from 'codehelium' ... <PythonEditor width=\"90vw\" height=\"80vh\" />\n\n## More Examples \ud83d\ude0e\n\n### Obtaining Console Outputs from Parent Components\n\nOftentimes, you may desire to obtain the stdout or stderr from user-written\ncode in codehelium IDE components. For a given state variable in your parent\ncomponent, you can pass the corresponding setter function via the\nconsoleOutputSetter prop to utilise console outputs from user-written code in\nthe PythonEditor component.\n\n    \n    \n    import PythonEditor from 'codehelium'; import { useEffect, useState } from 'react'; function App() { const [consoleOutputs, setConsoleOutputs] = useState([]); useEffect(() => { console.log(\"Printing from App... Console output received\"); console.log(consoleOutputs); }, [consoleOutputs]) return ( <div> <PythonEditor width=\"90vw\" height=\"80vh\" consoleOutputSetter={setConsoleOutputs} /> </div> ); } export default App;\n\n### Using an External Pyodide Instance\n\nBy default, the PythonEditor component will initialise its own Pyodide\ninstance with the indexURL set to jsDelivr. However if you have initialised\nPyodide elsewhere in your application, you can pass this instance to the\nPythonEditor component by using the pyodideInstance prop. The following\nexample demonstrates how to do so:\n\n    \n    \n    import PythonEditor from 'codehelium'; import { loadPyodide } from 'pyodide'; import { useEffect, useState } from 'react'; function App() { const [myPyodideInstance, setMyPyodideInstance] = useState(null); useEffect(() => { async function createPyodideInstance() { let pyodide = await loadPyodide({ indexURL: window.location.href + \"/pyodide\" }); setMyPyodideInstance(pyodide); } // Initialize pyodide instance in parent component createPyodideInstance(); }, []); return ( <div> <div className=\"w-screen h-screen grid place-content-center\"> <PythonEditor width=\"90vw\" height=\"80vh\" pyodideInstance={myPyodideInstance}/> </div> </div> ); } export default App;\n\nThis is a good practice as it allows you to have full control of the Pyodide\ninstance whilst also being able to leverage the component's capabilities.\nConsider using this when developing applications that use a singleton model\nfor Pyodide functionality.\n\n## Guide to Contributing \ud83e\udef6\n\nTo get started with contributing, fork this repository and then run the\nfollowing once you have cloned the forked repo:\n\n    \n    \n    npm install npm start\n\nLibrary components can then be changed by visiting src/lib/, with changes\nreflected in the development server (from running npm start). Once complete,\nsend a PR (filled with basic details) to bring your changes into this repo!\n\n## Additional Notes \ud83d\udcdd\n\ncodehelium is great for applications such as:\n\n  * Educational tools requiring users to write code and get feedback\n  * Building quick and personalised, web-based IDEs for you to quickly access and test your ideas\n\nFuture work includes:\n\n  * Support importing external Python packages in the editor\n  * Ability to code in other languages\n  * Controlling editor themes and custom-styling\n\n## Support this Project \ud83d\udc9b\n\nStarring this repo, creating issues and sending PRs with useful\nfeatures/improvements are always appreciated and welcomed!\n\n## Readme\n\n### Keywords\n\nnone\n\n## Package Sidebar\n\n### Install\n\nnpm i codehelium\n\n### Weekly Downloads\n\n99\n\n### Version\n\n0.1.6\n\n### License\n\nnone\n\n### Unpacked Size\n\n27.3 kB\n\n### Total Files\n\n5\n\n### Last publish\n\nan hour ago\n\n### Collaborators\n\nTry on RunKit\n\nReport malware\n\n## Footer\n\n### Support\n\n  * Help\n  * Advisories\n  * Status\n  * Contact npm\n\n### Company\n\n  * About\n  * Blog\n  * Press\n\n### Terms & Policies\n\n  * Policies\n  * Terms of Use\n  * Code of Conduct\n  * Privacy\n\n", "frontpage": false}
