{"aid": "40236909", "title": "\"Position Strings\" for Collaborative Lists and Text", "url": "https://mattweidner.com/2023/04/13/position-strings.html", "domain": "mattweidner.com", "votes": 1, "user": "beefman", "posted_at": "2024-05-02 14:45:48", "comments": 0, "source_title": "\"Position Strings\" for Collaborative Lists and Text - Matthew Weidner", "source_text": "\"Position Strings\" for Collaborative Lists and Text - Matthew Weidner\n\n# \"Position Strings\" for Collaborative Lists and Text\n\nMatthew Weidner | Apr 13th, 2023 Home | RSS Feed Keywords: position-strings, collaborative text editing, CRDTs, fractional indexing, Fugue\n\nI recently published a new TypeScript library on npm: position-strings.\n\nYou can read the docs there for full info, but basically, it provides\n\u201cposition strings\u201d for use in collaborative lists or text strings. Each\nposition string points to a specific list element (or text character), and the\nlist order is given by the lexicographic order on position strings.\n\nFor example, a collaborative text editor using the library could represent the\ntext \"Hello world\" as:\n\n    \n    \n    [ { position: \"r95sU223.B\", char: 'H' }, { position: \"r95sU223.D\", char: 'e' }, { position: \"r95sU223.F\", char: 'l' }, { position: \"r95sU223.H\", char: 'l' }, { position: \"r95sU223.J\", char: 'o' }, { position: \"r95sU223.N\", char: ' ' }, { position: \"r95sU223.N,Y2FsVQbt.B\", char: 'w' }, { position: \"r95sU223.N,Y2FsVQbt.D\", char: 'o' }, { position: \"r95sU223.N,Y2FsVQbt.F\", char: 'r' }, { position: \"r95sU223.N,Y2FsVQbt.H\", char: 'l' }, { position: \"r95sU223.N,Y2FsVQbt.J\", char: 'd' } ]\n\nHere the array is sorted lexicographically by position. (The funny-looking\nsubstrings \"r95sU223\" and \"Y2FsVQbt\" are random IDs, used to ensure uniqueness\nwhen multiple users type concurrently.)\n\nWhen the user types ',' between \"Hello \" and \"world\", the text editor will ask\nthe library for a new position string in between the positions of ' ' and 'w':\n\n    \n    \n    // At the start of the app: import { PositionSource } from \"position-strings\"; const source = new PositionSource(); // When the user types between ' ' @ \"r95sU223.N\" and 'w' @ \"r95sU223.N,Y2FsVQbt.B\": const newPos = source.createBetween(\"r95sU223.N\", \"r95sU223.N,Y2FsVQbt.B\"); // newPos is \"r95sU223.J,bLBGHJmO.B\", which is indeed between: // \"r95sU223.N\" < \"r95sU223.J,bLBGHJmO.B\" < \"r95sU223.N,Y2FsVQbt.B\".\n\nThe text editor then adds { position: newPos, char: ',' } to its array in\nsorted order. It also broadcasts this object to collaborators, who add it to\ntheir own arrays. Likewise, when the user deletes a character, the text editor\nbroadcasts the deleted position and all collaborators delete its list entry.\n\nPosition-strings implements the hard part of a list CRDT, with a minimal,\nlightweight API. Unlike most CRDT implementations, position-strings doesn\u2019t\n\u201cown\u201d the list state or store extra metadata^1; instead, you are free to store\nthe positions and chars (or list values) wherever you like. For example, you\ncould store each { position, char } as a row in a cloud-synced database like\nFirebase Realtime DB - I provide an example app that implements collaborative\ntext editing this way.\n\n> You can also think of position-strings like fractional indexing, but with a\n> few extra features: global uniqueness, non-interleaving, and slower\n> (logarithmic) length growth in sequences.\n\nThe catch is that a list/text CRDT using position-strings will have more\nstorage and network overhead than a dedicated data structure like Y.Array. In\nmy benchmarks, the position strings are typically 10-100 characters long, so\nyou\u2019ll have at least 10-100 bytes of storage overhead per list element/text\ncharacter. This is fine for short documents and simple apps, but could be a\nproblem for fancier uses.\n\nUnder the hood, position-strings uses an optimized version of Fugue\u2019s string\nimplementation. You can read about the full algorithm here.\n\n  1. Except for a small amount of ephemeral, local state that you don\u2019t need to store or broadcast - it only exists for the lifetime of a PositionSource object. \u21a9\n\n\u2b50\ufe0f I'm on the market for a software engineering job post-PhD.\n\nHome \u2022 Matthew Weidner \u2022 PhD student at CMU CSD \u2022 mweidner037@gmail.com \u2022\n@MatthewWeidner3 \u2022 LinkedIn \u2022 GitHub\n\n", "frontpage": false}
