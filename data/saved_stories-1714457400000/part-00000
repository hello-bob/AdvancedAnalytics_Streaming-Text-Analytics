{"aid": "40203377", "title": "The Three Byte Fix", "url": "https://breckyunits.com/ckmeans.html", "domain": "breckyunits.com", "votes": 4, "user": "breck", "posted_at": "2024-04-29 19:58:23", "comments": 0, "source_title": "The Three Byte Fix", "source_text": "The Three Byte Fix\n\n< >\n\n# The Three Byte Fix\n\n# A Small Open Source Success Story\n\n### Adding 3 missing characters made code run 20x faster.\n\n# Map chart slowdown\n\nJune 9, 2022 \u2014 \"Your maps are slow\".\n\nIn the fall of 2020 users started reporting that our map charts were now slow.\nA lot of people used our maps, so this was a problem we wanted to fix.\n\nSuddenly these charts were taking a long time to render.\n\n# k-means was the culprit\n\nTo color our maps an engineer on our team utilized a very effective technique\ncalled k-means clustering, which would identify optimal clusters and assign a\ncolor to each. But recently our charts were using record amounts of data and\nk-means was getting slow.\n\nUsing Chrome DevTools I was able to quickly determine the k-means function was\ncausing the slowdown.\n\n# Benchmarking ckmeans\n\nWe didn't write the k-means function ourselves, instead we used the function\nckmeans from the widely-used package Simple Statistics.\n\nMy first naive thought was that I could just quickly write a better k-means\nfunction. It didn't take long to realize that was a non-trivial problem and\nshould be a last resort.\n\nMy next move was to look closer at the open source implementation we were\nusing. I learned the function was a Javascript port of an algorithm first\nintroduced in a 2011 paper and the comments in the code claimed it ran in\nO(nlog(n)) time. That didn't seem to match what we were seeing, so I decided\nto write a simple benchmark script.\n\n# Benchmarking shows closer to n2 than n\u00b7log(n)\n\nIndeed, my benchmark results indicated ckmeans was closer to the much slower\nO(n2) class than the claimed O(n\u00b7log(n)) class.\n\nRows| Time  \n---|---  \n1000| 36000  \n2000| 53000  \n10000| 258000  \n20000| 1236000  \n100000| 23122000  \n200000| 113886000  \n  \n# Opening an issue\n\nAfter triple checking my logic, I created an issue on the Simple Statistics\nrepo with my benchmark script.\n\n# A fix!\n\nMere hours later, I had one of the most delightful surprises in my coding\ncareer. A teammate had, unbeknownst to me, looked into the issue and found a\nfix. Not just any fix, but a 3 character fix that sped up our particular case\nby 20x!\n\nBefore: if (iMax < matrix.length - 1) { After: if (iMax < matrix[0].length -\n1) {\n\nHe had read through the original ckmeans C++ implementation and found a\nconditional where the C++ version had a [0] but the Javascript port did not.\nAt runtime, matrix.length would generally be small, whereas matrix[0].length\nwould be large. That if statement should have resolved to true most of the\ntime, but was not in the Javascript version, since the Javascript code was\nmissing the [0]. This led the Javascript version to run a loop a lot more\ntimes that were effectively no-ops.\n\nI was amazed by how fast he found that bug in code he had never seen before.\nI'm not sure if he read carefully through the original paper or came up with\nthe clever debug strategy of \"since this is a port, let's compare to the\noriginal, looking for typos, with a particular focus on the loops\".\n\n# The Results\n\nThe typo fix made the Javascript version run in the claimed n\u00b7log(n) to match\nthe C++ version. For our new map charts with tens of thousands of values this\nmade a big difference.\n\nBefore xxxxxxxxxxxxxxxx 820ms After x 52ms\n\nInteractive Version.\n\nYou can easily see the difference when you look at time needed per additional\nrow as the number of rows increases:\n\nRows| LogLinear| Quadratic| Before| After  \n---|---|---|---|---  \n100000| 16.60964| 100000| 231.22| 1.25  \n200000| 17.60964| 200000| 569.43| 1.62  \n  \n# Merged\n\nVery shortly after he submitted the fix, the creator of Simple Statistics\nreviewed and merged it in. We pulled the latest version and our maps were fast\nagain. As a bonus, anyone else who uses the Simple Statistics ckmeans function\nnow gets the faster version too.\n\n# Thanks!\n\nThanks to Haizhou Wang, Mingzhou Song and Joe Song for the paper and fast\nk-means algorithm. Thanks to Tom MacWright for creating amazing Simple\nStatistics package and adding ckmeans. And thanks to my former teammates\nDaniel for the initial code and Marcel for the fix. Open source is fun.\n\n# Related Posts\n\n  * Big O's Kitchen\n  * Logeracy\n  * Planets and Pebbles\n  * Orders of Magnitude\n\n# Notes\n\n  * The industry term for this type of map is Choropleth map.\n  * To be precise the algo was O(knlog(n)) time, where k is the number of groups. But I've simplified for this story as that detail is not important.\n  * Wolfram Alpha fit of the quadratic runtime data\n\nhow-the-public-domain-can-win.html \u00b7 ckmeans.html \u00b7 upstream-of-\neverything.html\n\nView source\n\nBuilt with Scroll v81.1.0\n\n", "frontpage": true}
