{"aid": "40197455", "title": "Building Quantum Software", "url": "https://github.com/learnqc/code", "domain": "github.com/learnqc", "votes": 1, "user": "logicalguess", "posted_at": "2024-04-29 12:33:37", "comments": 0, "source_title": "GitHub - learnqc/code", "source_text": "GitHub - learnqc/code\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nlearnqc / code Public\n\n  * Notifications\n  * Fork 0\n  * Star 1\n\n1 star 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# learnqc/code\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nlogicalguessoutputs for chapter 8 notebookApr 28, 2024fded05e \u00b7 Apr 28,\n2024Apr 28, 2024\n\n## History\n\n20 Commits  \n  \n### .devcontainer\n\n|\n\n### .devcontainer\n\n| devcontainer| Apr 11, 2024  \n  \n### assets\n\n|\n\n### assets\n\n| book cover and link| Apr 21, 2024  \n  \n### docker/jupyter\n\n|\n\n### docker/jupyter\n\n| html, docker, readme| Apr 11, 2024  \n  \n### src\n\n|\n\n### src\n\n| outputs for chapter 8 notebook| Apr 28, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Merge remote-tracking branch 'origin/main'| Apr 21, 2024  \n  \n### docker-compose.yaml\n\n|\n\n### docker-compose.yaml\n\n| html, docker, readme| Apr 11, 2024  \n  \n### index.html\n\n|\n\n### index.html\n\n| html, docker, readme| Apr 11, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| adding hume| Apr 10, 2024  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| adding hume| Apr 10, 2024  \n  \n## Repository files navigation\n\n# Building Quantum Software: A Developer's Guide\n\nBuilding Quantum Software: A Developer's Guide will teach you the foundations\nof quantum computing, how to implement quantum computations, and when to take\nadvantage of the benefits of quantum computing.\n\nThis repository (https://github.com/learnqc/code) is the official companion to\nBuilding Quantum Software: A Developer's Guide. It includes the code for\ncreating and running a quantum simulator, as well as a natural language\nassistant to help run quantum computations, exercises to accompany the book\ncontent, and a complete, standalone quantum simulator.\n\nThe code uses minimal dependencies to facilitate learning and ensure the\nlongevity of its functionality. The notebooks for each chapter build\nincrementally on previous chapters, and only use code dependencies within each\nchapter module.\n\nHume, our standalone quantum simulator, is the result of piecing together the\ncode throughout the entire book.\n\n# Resources\n\nThe book and its repository can help you at different levels:\n\n  * Read the book content and the inline code to learn the concepts behind quantum computing.\n  * Read or run the Jupyter notebooks in each chapter to interact with the code.\n  * Complete the exercises in each chapter to gain intuition and experience in problem-solving in quantum.\n  * Implement new experiments in notebooks, unit tests, or more complex applications to use your knowledge to create your own work in quantum.\n\nIn addition to the book, there are two more resources available for users:\n\n  * A series of mini applications based on specific topics in the book. These applications feature a simple UI that allows you to experiment with different concepts.\n  * An AI assistant that responds to written and spoken commands to run and visualize quantum computations.\n\n## Table of Contents\n\nChapter| Code  \n---|---  \n1\\. The Advantages and Challenges of Programming Quantum Computers| \\--  \n2\\. A first look at quantum computations: the knapsack problem| ch02 /\nnotebook  \n3\\. Single-qubit state and gates| ch03 / notebook / exercises  \n  \n## Getting Started\n\nBelow you'll find the structure of the repository and instructions for how to\nget started with using the code.\n\n### Overview of contents and structure\n\n    \n    \n    \u251c\u2500\u2500 README.md \u251c\u2500\u2500 src # notebooks are designed to run from the src directory \u2502 \u251c\u2500\u2500 chXX \u2502 \u2502 \u251c\u2500\u2500 chXX.ipynb # notebook with chapter code that can be used for experimentation \u2502 \u2502 \u251c\u2500\u2500 chXX_exercises.ipynb # notebook with chapter exercises and solutions \u2502 \u2502 \u2514\u2500\u2500 x.py # the source code introduced in each chapter \u2502 \u251c\u2500\u2500 hume # the complete quantum simulator implemented over the course of the book \u2502 \u251c\u2500\u2500 ibmq # real quantum hardware experiments using IBMQ Quantum Platform Open Plan \u2502 \u251c\u2500\u2500 ...\n\n### Setting up the code\n\n#### Clone repository\n\nStart by cloning the repository:\n\n    \n    \n    git clone https://github.com/learnqc/code\n\n#### Runing the notebooks with Docker\n\nNavigate to the project root directory:\n\n    \n    \n    cd code\n\nBuild the image for the Jupyter Notebook server:\n\n    \n    \n    docker-compose build\n\nStart the Jupyter Notebook server:\n\n    \n    \n    docker-compose up\n\nAfter running this command, the Jupyter Notebook server should be accessible\nat http://localhost:8888 in your browser, Jupyter token is token\n\n#### Using GitHub Code Spaces or Dev Containers VSCode pluging\n\nThis setup can also be used with GitHub Code Spaces. All the necessary\nconfiguration is provided in the devcontainer.json file. Just open this\nrepository in a new code space, and the environment will be ready to go.\n\n#### Code Setup\n\n  1. Next, create a virtual environment where you can run the code.\n\n    \n    \n    python -m venv bqs-env\n\n  2. Activate the new environment.\n\n    \n    \n    source bqs-env/bin/activate\n\n  3. Install the dependencies for the repository in the virtual environment.\n\n    \n    \n    pip install -r requirements.txt\n\n# Notebooks\n\nThe notebooks included in the repository contain the code for each chapter as\nwell as accompanying exercises. You can read through the notebooks to learn\nhow to code for different tasks, or you can edit them and experiment with how\nchanging the code impacts the different computations being run. All exercise\nnotebooks include answers and explanations to help you continue to build your\nintuition with the material.\n\n# Hume\n\nHume is a standalone quantum simulator constructed in a couple of hundred\nlines of code. It can be translated directly to Qiskit and most of its syntax\nmatches Qiskit, and (which can then be run on a real quantum computer).\nBecause Hume allows the use of classical methods, running it can be more\nefficient than a purely gate-based simulator. For a high-performance version\nof Hume implemented in Rust, check out this repository!\n\nTests can be run with pytest from the src directory. For example:\n\n    \n    \n    python -m pytest hume --no-header -qs\n\nOr a more specific test file:\n\n    \n    \n    python -m pytest hume/tests/test_unitary.py --no-header -qs\n\nOr a more specific test:\n\n    \n    \n    python -m pytest hume/tests/test_util_qiskit.py::test_same_as_qiskit --no-header --no-summary -qs\n\n## About\n\nNo description, website, or topics provided.\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n1 star\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 4\n\n  * logicalguess Logical Guess\n  * contralto\n  * charleestefanski\n  * learnqc Learn Quantum Computing\n\n## Languages\n\n  * Jupyter Notebook 84.3%\n  * Python 12.3%\n  * HTML 3.4%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
