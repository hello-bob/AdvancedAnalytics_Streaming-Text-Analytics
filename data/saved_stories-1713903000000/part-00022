{"aid": "40130897", "title": "RFC 9457 Problem Details for HTTP APIs", "url": "https://www.rfc-editor.org/rfc/rfc9457.html", "domain": "rfc-editor.org", "votes": 1, "user": "brodo", "posted_at": "2024-04-23 11:58:31", "comments": 0, "source_title": "RFC 9457: Problem Details for HTTP APIs", "source_text": "RFC 9457: Problem Details for HTTP APIs\n\nRFC 9457| Problem Details for HTTP APIs| July 2023  \n---|---|---  \nNottingham, et al.| Standards Track| [Page]  \n  \nStatus:\n\n    Proposed Standard\nObsoletes:\n\n    7807\nMore info:\n\n    Errata exist | Datatracker| IPR | Info page\n\nStream:\n\n    Internet Engineering Task Force (IETF)\nRFC:\n\n    9457\nObsoletes:\n\n    7807\nCategory:\n\n    Standards Track\nPublished:\n\n    July 2023\nISSN:\n\n    2070-1721\nAuthors:\n\n    \n\nM. Nottingham\n\nE. Wilde\n\nS. Dalal\n\n# RFC 9457\n\n# Problem Details for HTTP APIs\n\n## Abstract\n\nThis document defines a \"problem detail\" to carry machine-readable details of\nerrors in HTTP response content to avoid the need to define new error response\nformats for HTTP APIs.\u00b6\n\nThis document obsoletes RFC 7807.\u00b6\n\n## Status of This Memo\n\nThis is an Internet Standards Track document.\u00b6\n\nThis document is a product of the Internet Engineering Task Force (IETF). It\nrepresents the consensus of the IETF community. It has received public review\nand has been approved for publication by the Internet Engineering Steering\nGroup (IESG). Further information on Internet Standards is available in\nSection 2 of RFC 7841.\u00b6\n\nInformation about the current status of this document, any errata, and how to\nprovide feedback on it may be obtained at https://www.rfc-\neditor.org/info/rfc9457.\u00b6\n\n## Copyright Notice\n\nCopyright (c) 2023 IETF Trust and the persons identified as the document\nauthors. All rights reserved.\u00b6\n\nThis document is subject to BCP 78 and the IETF Trust's Legal Provisions\nRelating to IETF Documents (https://trustee.ietf.org/license-info) in effect\non the date of publication of this document. Please review these documents\ncarefully, as they describe your rights and restrictions with respect to this\ndocument. Code Components extracted from this document must include Revised\nBSD License text as described in Section 4.e of the Trust Legal Provisions and\nare provided without warranty as described in the Revised BSD License.\u00b6\n\n\u25b2\n\n## Table of Contents\n\n## 1\\. Introduction\n\nHTTP status codes (Section 15 of [HTTP]) cannot always convey enough\ninformation about errors to be helpful. While humans using web browsers can\noften understand an HTML [HTML5] response content, non-human consumers of HTTP\nAPIs have difficulty doing so.\u00b6\n\nTo address that shortcoming, this specification defines simple JSON [JSON] and\nXML [XML] document formats to describe the specifics of a problem encountered\n-- \"problem details\".\u00b6\n\nFor example, consider a response indicating that the client's account doesn't\nhave enough credit. The API's designer might decide to use the 403 Forbidden\nstatus code to inform generic HTTP software (such as client libraries, caches,\nand proxies) of the response's general semantics. API-specific problem details\n(such as why the server refused the request and the applicable account\nbalance) can be carried in the response content so that the client can act\nupon them appropriately (for example, triggering a transfer of more credit\ninto the account).\u00b6\n\nThis specification identifies the specific \"problem type\" (e.g., \"out of\ncredit\") with a URI [URI]. HTTP APIs can use URIs under their control to\nidentify problems specific to them or can reuse existing ones to facilitate\ninteroperability and leverage common semantics (see Section 4.2).\u00b6\n\nProblem details can contain other information, such as a URI identifying the\nproblem's specific occurrence (effectively giving an identifier to the concept\n\"The time Joe didn't have enough credit last Thursday\"), which can be useful\nfor support or forensic purposes.\u00b6\n\nThe data model for problem details is a JSON [JSON] object; when serialized as\na JSON document, it uses the \"application/problem+json\" media type. Appendix B\ndefines an equivalent XML format, which uses the \"application/problem+xml\"\nmedia type.\u00b6\n\nWhen they are conveyed in an HTTP response, the contents of problem details\ncan be negotiated using proactive negotiation; see Section 12.1 of [HTTP]. In\nparticular, the language used for human-readable strings (such as those in\ntitle and description) can be negotiated using the Accept-Language request\nheader field (Section 12.5.4 of [HTTP]), although that negotiation may still\nresult in a non-preferred, default representation being returned.\u00b6\n\nProblem details can be used with any HTTP status code, but they most naturally\nfit the semantics of 4xx and 5xx responses. Note that problem details are\n(naturally) not the only way to convey the details of a problem in HTTP. If\nthe response is still a representation of a resource, for example, it's often\npreferable to describe the relevant details in that application's format.\nLikewise, defined HTTP status codes cover many situations with no need to\nconvey extra detail.\u00b6\n\nThis specification's aim is to define common error formats for applications\nthat need one so that they aren't required to define their own or, worse,\ntempted to redefine the semantics of existing HTTP status codes. Even if an\napplication chooses not to use it to convey errors, reviewing its design can\nhelp guide the design decisions faced when conveying errors in an existing\nformat.\u00b6\n\nSee Appendix D for a list of changes from [RFC7807].\u00b6\n\n## 2\\. Requirements Language\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\",\n\"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\ndocument are to be interpreted as described in BCP 14 [RFC2119] [RFC8174]\nwhen, and only when, they appear in all capitals, as shown here.\u00b6\n\n## 3\\. The Problem Details JSON Object\n\nThe canonical model for problem details is a JSON [JSON] object. When\nserialized in a JSON document, that format is identified with the\n\"application/problem+json\" media type.\u00b6\n\nFor example:\u00b6\n\n    \n    \n    POST /purchase HTTP/1.1 Host: store.example.com Content-Type: application/json Accept: application/json, application/problem+json { \"item\": 123456, \"quantity\": 2 }\n\n\u00b6\n\n    \n    \n    HTTP/1.1 403 Forbidden Content-Type: application/problem+json Content-Language: en { \"type\": \"https://example.com/probs/out-of-credit\", \"title\": \"You do not have enough credit.\", \"detail\": \"Your current balance is 30, but that costs 50.\", \"instance\": \"/account/12345/msgs/abc\", \"balance\": 30, \"accounts\": [\"/account/12345\", \"/account/67890\"] }\n\n\u00b6\n\nHere, the out-of-credit problem (identified by its type) indicates the reason\nfor the 403 in \"title\", identifies the specific problem occurrence with\n\"instance\", gives occurrence-specific details in \"detail\", and adds two\nextensions: \"balance\" conveys the account's balance, and \"accounts\" lists\nlinks where the account can be topped up.\u00b6\n\nWhen designed to accommodate it, problem-specific extensions can convey more\nthan one instance of the same problem type. For example:\u00b6\n\n    \n    \n    POST /details HTTP/1.1 Host: account.example.com Accept: application/json { \"age\": 42.3, \"profile\": { \"color\": \"yellow\" } }\n\n\u00b6\n\n    \n    \n    HTTP/1.1 422 Unprocessable Content Content-Type: application/problem+json Content-Language: en { \"type\": \"https://example.net/validation-error\", \"title\": \"Your request is not valid.\", \"errors\": [ { \"detail\": \"must be a positive integer\", \"pointer\": \"#/age\" }, { \"detail\": \"must be 'green', 'red' or 'blue'\", \"pointer\": \"#/profile/color\" } ] }\n\n\u00b6\n\nThe fictional problem type here defines the \"errors\" extension, an array that\ndescribes the details of each validation error. Each member is an object\ncontaining \"detail\" to describe the issue and \"pointer\" to locate the problem\nwithin the request's content using a JSON Pointer [JSON-POINTER].\u00b6\n\nWhen an API encounters multiple problems that do not share the same type, it\nis RECOMMENDED that the most relevant or urgent problem be represented in the\nresponse. While it is possible to create generic \"batch\" problem types that\nconvey multiple, disparate types, they do not map well into HTTP semantics.\u00b6\n\nNote also that the API has responded with the \"application/problem+json\" type,\neven though the client did not list it in Accept, as is allowed by HTTP (see\nSection 12.5.1 of [HTTP]).\u00b6\n\n### 3.1. Members of a Problem Details Object\n\nProblem detail objects can have the following members. If a member's value\ntype does not match the specified type, the member MUST be ignored -- i.e.,\nprocessing will continue as if the member had not been present.\u00b6\n\n#### 3.1.1. \"type\"\n\nThe \"type\" member is a JSON string containing a URI reference [URI] that\nidentifies the problem type. Consumers MUST use the \"type\" URI (after\nresolution, if necessary) as the problem type's primary identifier.\u00b6\n\nWhen this member is not present, its value is assumed to be \"about:blank\".\u00b6\n\nIf the type URI is a locator (e.g., those with an \"http\" or \"https\" scheme),\ndereferencing it SHOULD provide human-readable documentation for the problem\ntype (e.g., using HTML [HTML5]). However, consumers SHOULD NOT automatically\ndereference the type URI, unless they do so when providing information to\ndevelopers (e.g., when a debugging tool is in use).\u00b6\n\nWhen \"type\" contains a relative URI, it is resolved relative to the document's\nbase URI, as per [URI], Section 5. However, using relative URIs can cause\nconfusion, and they might not be handled correctly by all implementations.\u00b6\n\nFor example, if the two resources \"https://api.example.org/foo/bar/123\" and\n\"https://api.example.org/widget/456\" both respond with a \"type\" equal to the\nrelative URI reference \"example-problem\", when resolved they will identify\ndifferent resources (\"https://api.example.org/foo/bar/example-problem\" and\n\"https://api.example.org/widget/example-problem\", respectively). As a result,\nit is RECOMMENDED that absolute URIs be used in \"type\" when possible and that\nwhen relative URIs are used, they include the full path (e.g., \"/types/123\").\u00b6\n\nThe type URI is allowed to be a non-resolvable URI. For example, the tag URI\nscheme [TAG] can be used to uniquely identify problem types:\u00b6\n\n    \n    \n    tag:example@example.org,2021-09-17:OutOfLuck\n\n\u00b6\n\nHowever, resolvable type URIs are encouraged by this specification because it\nmight become desirable to resolve the URI in the future. For example, if an\nAPI designer used the URI above and later adopted a tool that resolves type\nURIs to discover information about the error, taking advantage of that\ncapability would require switching to a resolvable URI, creating a new\nidentity for the problem type and thus introducing a breaking change.\u00b6\n\n#### 3.1.2. \"status\"\n\nThe \"status\" member is a JSON number indicating the HTTP status code ([HTTP],\nSection 15) generated by the origin server for this occurrence of the\nproblem.\u00b6\n\nThe \"status\" member, if present, is only advisory; it conveys the HTTP status\ncode used for the convenience of the consumer. Generators MUST use the same\nstatus code in the actual HTTP response, to assure that generic HTTP software\nthat does not understand this format still behaves correctly. See Section 5\nfor further caveats regarding its use.\u00b6\n\nConsumers can use the status member to determine what the original status code\nused by the generator was when it has been changed (e.g., by an intermediary\nor cache) and when a message's content is persisted without HTTP information.\nGeneric HTTP software will still use the HTTP status code.\u00b6\n\n#### 3.1.3. \"title\"\n\nThe \"title\" member is a JSON string containing a short, human-readable summary\nof the problem type.\u00b6\n\nIt SHOULD NOT change from occurrence to occurrence of the problem, except for\nlocalization (e.g., using proactive content negotiation; see [HTTP], Section\n12.1).\u00b6\n\nThe \"title\" string is advisory and is included only for users who are unaware\nof and cannot discover the semantics of the type URI (e.g., during offline log\nanalysis).\u00b6\n\n#### 3.1.4. \"detail\"\n\nThe \"detail\" member is a JSON string containing a human-readable explanation\nspecific to this occurrence of the problem.\u00b6\n\nThe \"detail\" string, if present, ought to focus on helping the client correct\nthe problem, rather than giving debugging information.\u00b6\n\nConsumers SHOULD NOT parse the \"detail\" member for information; extensions are\nmore suitable and less error-prone ways to obtain such information.\u00b6\n\n#### 3.1.5. \"instance\"\n\nThe \"instance\" member is a JSON string containing a URI reference that\nidentifies the specific occurrence of the problem.\u00b6\n\nWhen the \"instance\" URI is dereferenceable, the problem details object can be\nfetched from it. It might also return information about the problem occurrence\nin other formats through use of proactive content negotiation (see [HTTP],\nSection 12.5.1).\u00b6\n\nWhen the \"instance\" URI is not dereferenceable, it serves as a unique\nidentifier for the problem occurrence that may be of significance to the\nserver but is opaque to the client.\u00b6\n\nWhen \"instance\" contains a relative URI, it is resolved relative to the\ndocument's base URI, as per [URI], Section 5. However, using relative URIs can\ncause confusion, and they might not be handled correctly by all\nimplementations.\u00b6\n\nFor example, if the two resources \"https://api.example.org/foo/bar/123\" and\n\"https://api.example.org/widget/456\" both respond with an \"instance\" equal to\nthe relative URI reference \"example-instance\", when resolved they will\nidentify different resources (\"https://api.example.org/foo/bar/example-\ninstance\" and \"https://api.example.org/widget/example-instance\",\nrespectively). As a result, it is RECOMMENDED that absolute URIs be used in\n\"instance\" when possible, and that when relative URIs are used, they include\nthe full path (e.g., \"/instances/123\").\u00b6\n\n### 3.2. Extension Members\n\nProblem type definitions MAY extend the problem details object with additional\nmembers that are specific to that problem type.\u00b6\n\nFor example, our out-of-credit problem above defines two such extensions --\n\"balance\" and \"accounts\" to convey additional, problem-specific information.\u00b6\n\nSimilarly, the \"validation error\" example defines an \"errors\" extension that\ncontains a list of individual error occurrences found, with details and a\npointer to the location of each.\u00b6\n\nClients consuming problem details MUST ignore any such extensions that they\ndon't recognize; this allows problem types to evolve and include additional\ninformation in the future.\u00b6\n\nWhen creating extensions, problem type authors should choose their names\ncarefully. To be used in the XML format (see Appendix B), they will need to\nconform to the Name rule in Section 2.3 of [XML].\u00b6\n\n## 4\\. Defining New Problem Types\n\nWhen an HTTP API needs to define a response that indicates an error condition,\nit might be appropriate to do so by defining a new problem type.\u00b6\n\nBefore doing so, it's important to understand what they are good for and what\nis better left to other mechanisms.\u00b6\n\nProblem details are not a debugging tool for the underlying implementation;\nrather, they are a way to expose greater detail about the HTTP interface\nitself. Designers of new problem types need to carefully take into account the\nSecurity Considerations (Section 5), in particular, the risk of exposing\nattack vectors by exposing implementation internals through error messages.\u00b6\n\nLikewise, truly generic problems -- i.e., conditions that might apply to any\nresource on the Web -- are usually better expressed as plain status codes. For\nexample, a \"write access disallowed\" problem is probably unnecessary, since a\n403 Forbidden status code in response to a PUT request is self-explanatory.\u00b6\n\nFinally, an application might have a more appropriate way to carry an error in\na format that it already defines. Problem details are intended to avoid the\nnecessity of establishing new \"fault\" or \"error\" document formats, not to\nreplace existing domain-specific formats.\u00b6\n\nThat said, it is possible to add support for problem details to existing HTTP\nAPIs using HTTP content negotiation (e.g., using the Accept request header to\nindicate a preference for this format; see [HTTP], Section 12.5.1).\u00b6\n\nNew problem type definitions MUST document:\u00b6\n\n  1. a type URI (typically, with the \"http\" or \"https\" scheme)\u00b6\n  2. a title that appropriately describes it (think short)\u00b6\n  3. the HTTP status code for it to be used with\u00b6\n\nProblem type definitions MAY specify the use of the Retry-After response\nheader ([HTTP], Section 10.2.3) in appropriate circumstances.\u00b6\n\nA problem type URI SHOULD resolve to HTML [HTML5] documentation that explains\nhow to resolve the problem.\u00b6\n\nA problem type definition MAY specify additional members on the problem\ndetails object. For example, an extension might use typed links [WEB-LINKING]\nto another resource that machines can use to resolve the problem.\u00b6\n\nIf such additional members are defined, their names SHOULD start with a letter\n(ALPHA, as per [ABNF], Appendix B.1) and SHOULD comprise characters from\nALPHA, DIGIT ([ABNF], Appendix B.1), and \"_\" (so that it can be serialized in\nformats other than JSON), and they SHOULD be three characters or longer.\u00b6\n\n### 4.1. Example\n\nFor example, if you are publishing an HTTP API to your online shopping cart,\nyou might need to indicate that the user is out of credit (our example from\nabove) and therefore cannot make the purchase.\u00b6\n\nIf you already have an application-specific format that can accommodate this\ninformation, it's probably best to do that. However, if you don't, you might\nuse one of the problem detail formats -- JSON if your API is JSON-based or XML\nif it uses that format.\u00b6\n\nTo do so, you might look in the registry (Section 4.2) for an already-defined\ntype URI that suits your purposes. If one is available, you can reuse that\nURI.\u00b6\n\nIf one isn't available, you could mint and document a new type URI (which\nought to be under your control and stable over time), an appropriate title and\nthe HTTP status code that it will be used with, along with what it means and\nhow it should be handled.\u00b6\n\n### 4.2. Registered Problem Types\n\nThis specification defines the \"HTTP Problem Types\" registry for common,\nwidely used problem type URIs, to promote reuse.\u00b6\n\nThe policy for this registry is Specification Required, per [RFC8126], Section\n4.6.\u00b6\n\nWhen evaluating requests, the designated expert(s) should consider community\nfeedback, how well-defined the problem type is, and this specification's\nrequirements. Vendor-specific, application-specific, and deployment-specific\nvalues are unable to be registered. Specification documents should be\npublished in a stable, freely available manner (ideally located with a URL)\nbut need not be standards.\u00b6\n\nRegistrations MAY use the prefix \"https://iana.org/assignments/http-problem-\ntypes#\" for the type URI. Note that those URIs may not be able to be\nresolved.\u00b6\n\nThe following template should be used for registration requests:\u00b6\n\nType URI:\n\n    [a URI for the problem type]\u00b6\nTitle:\n\n    [a short description of the problem type]\u00b6\nRecommended HTTP status code:\n\n    [what status code is most appropriate to use with the type]\u00b6\nReference:\n\n    [to a specification defining the type]\u00b6\n\nSee the registry at <https://iana.org/assignments/http-problem-types> for\ndetails on where to send registration requests.\u00b6\n\n#### 4.2.1. about:blank\n\nThis specification registers one Problem Type, \"about:blank\", as follows.\u00b6\n\nType URI:\n\n    about:blank\u00b6\nTitle:\n\n    See HTTP Status Code\u00b6\nRecommended HTTP status code:\n\n    N/A\u00b6\nReference:\n\n    RFC 9457\u00b6\n\nThe \"about:blank\" URI [ABOUT], when used as a problem type, indicates that the\nproblem has no additional semantics beyond that of the HTTP status code.\u00b6\n\nWhen \"about:blank\" is used, the title SHOULD be the same as the recommended\nHTTP status phrase for that code (e.g., \"Not Found\" for 404, and so on),\nalthough it MAY be localized to suit client preferences (expressed with the\nAccept-Language request header).\u00b6\n\nPlease note that according to how the \"type\" member is defined (Section 3.1),\nthe \"about:blank\" URI is the default value for that member. Consequently, any\nproblem details object not carrying an explicit \"type\" member implicitly uses\nthis URI.\u00b6\n\n## 5\\. Security Considerations\n\nWhen defining a new problem type, the information included must be carefully\nvetted. Likewise, when actually generating a problem -- however it is\nserialized -- the details given must also be scrutinized.\u00b6\n\nRisks include leaking information that can be exploited to compromise the\nsystem, access to the system, or the privacy of users of the system.\u00b6\n\nGenerators providing links to occurrence information are encouraged to avoid\nmaking implementation details such as a stack dump available through the HTTP\ninterface, since this can expose sensitive details of the server\nimplementation, its data, and so on.\u00b6\n\nThe \"status\" member duplicates the information available in the HTTP status\ncode itself, bringing the possibility of disagreement between the two. Their\nrelative precedence is not clear, since a disagreement might indicate that\n(for example) an intermediary has changed the HTTP status code in transit\n(e.g., by a proxy or cache). Generic HTTP software (such as proxies, load\nbalancers, firewalls, and virus scanners) are unlikely to know of or respect\nthe status code conveyed in this member.\u00b6\n\n## 6\\. IANA Considerations\n\nIn the \"application\" registry under the \"Media Types\" registry, IANA has\nupdated the \"application/problem+json\" and \"application/problem+xml\"\nregistrations to refer to this document.\u00b6\n\nIANA has created the \"HTTP Problem Types\" registry as specified in Section 4.2\nand populated it with \"about:blank\" as per Section 4.2.1.\u00b6\n\n## 7\\. References\n\n### 7.1. Normative References\n\n[ABNF]\n\n    Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", STD 68, RFC 5234, DOI 10.17487/RFC5234, January 2008, <https://www.rfc-editor.org/info/rfc5234>.\n[HTTP]\n\n    Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke, Ed., \"HTTP Semantics\", STD 97, RFC 9110, DOI 10.17487/RFC9110, June 2022, <https://www.rfc-editor.org/info/rfc9110>.\n[JSON]\n\n    Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data Interchange Format\", STD 90, RFC 8259, DOI 10.17487/RFC8259, December 2017, <https://www.rfc-editor.org/info/rfc8259>.\n[RFC2119]\n\n    Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.\n[RFC8126]\n\n    Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>.\n[RFC8174]\n\n    Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n[URI]\n\n    Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform Resource Identifier (URI): Generic Syntax\", STD 66, RFC 3986, DOI 10.17487/RFC3986, January 2005, <https://www.rfc-editor.org/info/rfc3986>.\n[XML]\n\n    Bray, T., Paoli, J., Sperberg-McQueen, C. M., Maler, E., and F. Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth Edition)\", W3C Recommendation REC-xml-20081126, November 2008, <https://www.w3.org/TR/2008/REC-xml-20081126/>.\n\n### 7.2. Informative References\n\n[ABOUT]\n\n    Moonesamy, S., Ed., \"The \"about\" URI Scheme\", RFC 6694, DOI 10.17487/RFC6694, August 2012, <https://www.rfc-editor.org/info/rfc6694>.\n[HTML5]\n\n    WHATWG, \"HTML: Living Standard\", <https://html.spec.whatwg.org>.\n[ISO-19757-2]\n\n    ISO, \"Information technology -- Document Schema Definition Language (DSDL) -- Part 2: Regular-grammar-based validation -- RELAX NG\", ISO/IEC 19757-2:2008, December 2008, <https://www.iso.org/standard/52348.html>.\n[JSON-POINTER]\n\n    Bryan, P., Ed., Zyp, K., and M. Nottingham, Ed., \"JavaScript Object Notation (JSON) Pointer\", RFC 6901, DOI 10.17487/RFC6901, April 2013, <https://www.rfc-editor.org/info/rfc6901>.\n[JSON-SCHEMA]\n\n    Wright, A., Ed., Andrews, H., Ed., Hutton, B., Ed., and G. Dennis, \"JSON Schema: A Media Type for Describing JSON Documents\", Work in Progress, Internet-Draft, draft-bhutton-json-schema-01, 10 June 2022, <https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-01>.\n[RDFA]\n\n    Adida, B., Birbeck, M., McCarron, S., and I. Herman, \"RDFa Core 1.1 - Third Edition\", W3C Recommendation, March 2015, <https://www.w3.org/TR/2015/REC-rdfa-core-20150317/>.\n[RFC7807]\n\n    Nottingham, M. and E. Wilde, \"Problem Details for HTTP APIs\", RFC 7807, DOI 10.17487/RFC7807, March 2016, <https://www.rfc-editor.org/info/rfc7807>.\n[TAG]\n\n    Kindberg, T. and S. Hawke, \"The 'tag' URI Scheme\", RFC 4151, DOI 10.17487/RFC4151, October 2005, <https://www.rfc-editor.org/info/rfc4151>.\n[WEB-LINKING]\n\n    Nottingham, M., \"Web Linking\", RFC 8288, DOI 10.17487/RFC8288, October 2017, <https://www.rfc-editor.org/info/rfc8288>.\n[XSLT]\n\n    Clark, J., Pieters, S., and H. Thompson, \"Associating Style Sheets with XML documents 1.0 (Second Edition)\", W3C Recommendation, October 2010, <https://www.w3.org/TR/2010/REC-xml-stylesheet-20101028/>.\n\n## Appendix A. JSON Schema for HTTP Problems\n\nThis section presents a non-normative JSON Schema [JSON-SCHEMA] for HTTP\nproblem details. If there is any disagreement between it and the text of the\nspecification, the latter prevails.\u00b6\n\n    \n    \n    # NOTE: '\\' line wrapping per RFC 8792 { \"$schema\": \"https://json-schema.org/draft/2020-12/schema\", \"title\": \"An RFC 7807 problem object\", \"type\": \"object\", \"properties\": { \"type\": { \"type\": \"string\", \"format\": \"uri-reference\", \"description\": \"A URI reference that identifies the \\ problem type.\" }, \"title\": { \"type\": \"string\", \"description\": \"A short, human-readable summary of the \\ problem type.\" }, \"status\": { \"type\": \"integer\", \"description\": \"The HTTP status code \\ generated by the origin server for this occurrence of the problem.\", \"minimum\": 100, \"maximum\": 599 }, \"detail\": { \"type\": \"string\", \"description\": \"A human-readable explanation specific to \\ this occurrence of the problem.\" }, \"instance\": { \"type\": \"string\", \"format\": \"uri-reference\", \"description\": \"A URI reference that identifies the \\ specific occurrence of the problem. It may or may not yield \\ further information if dereferenced.\" } } }\n\n\u00b6\n\n## Appendix B. HTTP Problems and XML\n\nHTTP-based APIs that use XML [XML] can express problem details using the\nformat defined in this appendix.\u00b6\n\nThe RELAX NG schema [ISO-19757-2] for the XML format is:\u00b6\n\n    \n    \n    default namespace ns = \"urn:ietf:rfc:7807\" start = problem problem = element problem { ( element type { xsd:anyURI }? & element title { xsd:string }? & element detail { xsd:string }? & element status { xsd:positiveInteger }? & element instance { xsd:anyURI }? ), anyNsElement } anyNsElement = ( element ns:* { anyNsElement | text } | attribute * { text })*\n\n\u00b6\n\nNote that this schema is only intended as documentation and not as a normative\nschema that captures all constraints of the XML format. It is possible to use\nother XML schema languages to define a similar set of constraints (depending\non the features of the chosen schema language).\u00b6\n\nThe media type for this format is \"application/problem+xml\".\u00b6\n\nExtension arrays and objects are serialized into the XML format by considering\nan element containing a child or children to represent an object, except for\nelements containing only one or more child elements named \"i\", which are\nconsidered arrays. For example, the example above appears in XML as follows:\u00b6\n\n    \n    \n    HTTP/1.1 403 Forbidden Content-Type: application/problem+xml Content-Language: en <?xml version=\"1.0\" encoding=\"UTF-8\"?> <problem xmlns=\"urn:ietf:rfc:7807\"> <type>https://example.com/probs/out-of-credit</type> <title>You do not have enough credit.</title> <detail>Your current balance is 30, but that costs 50.</detail> <instance>https://example.net/account/12345/msgs/abc</instance> <balance>30</balance> <accounts> <i>https://example.net/account/12345</i> <i>https://example.net/account/67890</i> </accounts> </problem>\n\n\u00b6\n\nThis format uses an XML namespace, primarily to allow embedding it into other\nXML-based formats; it does not imply that it can or should be extended with\nelements or attributes in other namespaces. The RELAX NG schema explicitly\nonly allows elements from the one namespace used in the XML format. Any\nextension arrays and objects MUST be serialized into XML markup using only\nthat namespace.\u00b6\n\nWhen using the XML format, it is possible to embed an XML processing\ninstruction in the XML that instructs clients to transform the XML, using the\nreferenced XSL Transformations (XSLT) code [XSLT]. If this code is\ntransforming the XML into (X)HTML, then it is possible to serve the XML\nformat, and yet have clients capable of performing the transformation display\nhuman-friendly (X)HTML that is rendered and displayed at the client. Note that\nwhen using this method, it is advisable to use XSLT 1.0 in order to maximize\nthe number of clients capable of executing the XSLT code.\u00b6\n\n## Appendix C. Using Problem Details with Other Formats\n\nIn some situations, it can be advantageous to embed problem details in formats\nother than those described here. For example, an API that uses HTML [HTML5]\nmight want to also use HTML for expressing its problem details.\u00b6\n\nProblem details can be embedded in other formats either by encapsulating one\nof the existing serializations (JSON or XML) into that format or by\ntranslating the model of a problem detail (as specified in Section 3) into the\nformat's conventions.\u00b6\n\nFor example, in HTML, a problem could be embedded by encapsulating JSON in a\nscript tag:\u00b6\n\n    \n    \n    <script type=\"application/problem+json\"> { \"type\": \"https://example.com/probs/out-of-credit\", \"title\": \"You do not have enough credit.\", \"detail\": \"Your current balance is 30, but that costs 50.\", \"instance\": \"/account/12345/msgs/abc\", \"balance\": 30, \"accounts\": [\"/account/12345\", \"/account/67890\"] } </script>\n\n\u00b6\n\nor by defining a mapping into a Resource Description Framework in Attributes\n(RDFa) [RDFA].\u00b6\n\nThis specification does not make specific recommendations regarding embedding\nproblem details in other formats; the appropriate way to embed them depends\nboth upon the format in use and application of that format.\u00b6\n\n## Appendix D. Changes from RFC 7807\n\nThis revision has made the following changes:\u00b6\n\n  * Section 4.2 introduces a registry of common problem type URIs\u00b6\n  * Section 3 clarifies how multiple problems should be treated\u00b6\n  * Section 3.1.1 provides guidance for using type URIs that cannot be dereferenced\u00b6\n\n## Acknowledgements\n\nThe authors would like to thank Jan Algermissen, Subbu Allamaraju, Mike\nAmundsen, Roy Fielding, Eran Hammer, Sam Johnston, Mike McCall, Julian\nReschke, and James Snell for their comments and suggestions.\u00b6\n\n## Authors' Addresses\n\nMark Nottingham\n\nPrahran\n\nAustralia\n\nEmail: mnot@mnot.net\n\nURI: https://www.mnot.net/\n\nErik Wilde\n\nEmail: erik.wilde@dret.net\n\nURI: http://dret.net/netdret/\n\nSanjay Dalal\n\nUnited States of America\n\nEmail: sanjay.dalal@cal.berkeley.edu\n\nURI: https://github.com/sdatspun2\n\n", "frontpage": false}
