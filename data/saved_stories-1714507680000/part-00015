{"aid": "40209223", "title": "Pen is a Compiler that compiles the High-Level Language into EVM bytecodes", "url": "https://github.com/ghasshee/pen", "domain": "github.com/ghasshee", "votes": 1, "user": "gtt", "posted_at": "2024-04-30 10:16:18", "comments": 0, "source_title": "GitHub - ghasshee/pen: A compiler into EVM code", "source_text": "GitHub - ghasshee/pen: A compiler into EVM code\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nghasshee / pen Public\n\n  * Notifications\n  * Fork 1\n  * Star 5\n\nA compiler into EVM code\n\n### License\n\nApache-2.0 license\n\n5 stars 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# ghasshee/pen\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nghassheeUpdatedMar 14, 20244b474ca \u00b7 Mar 14, 2024Mar 14, 2024\n\n## History\n\n406 Commits  \n  \n### devm\n\n|\n\n### devm\n\n| Updated| Jan 10, 2023  \n  \n### eth\n\n|\n\n### eth\n\n| Updated| Jan 10, 2023  \n  \n### examples\n\n|\n\n### examples\n\n| Updated| Nov 19, 2022  \n  \n### hs\n\n|\n\n### hs\n\n| Updated| Mar 14, 2024  \n  \n### js\n\n|\n\n### js\n\n| Updated| Nov 20, 2022  \n  \n### solc\n\n|\n\n### solc\n\n| Updated| Jan 10, 2023  \n  \n### src\n\n|\n\n### src\n\n| Updated| Dec 20, 2023  \n  \n### tapl\n\n|\n\n### tapl\n\n| Updated| Nov 19, 2022  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Updated| Nov 20, 2022  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Updated| May 18, 2021  \n  \n### README.md\n\n|\n\n### README.md\n\n| Updated| Jun 22, 2023  \n  \n### program_graph_and_matrix.png\n\n|\n\n### program_graph_and_matrix.png\n\n| Updated| Jun 21, 2023  \n  \n## Repository files navigation\n\n# Pen\n\nPen is a Compiler that compiles the High-Level Language into EVM bytecodes.\n\n## Old Project (deprecated bamboo modification and its History)\n\nOriginal motivation of Pen compiler starts with modification of bamboo. It\nhalved unreadable and unusable source code of bamboo and had new features that\nbamboo did not have. However, finally, it turned out that the original design\nwas too untidy to build a nice compiler.\n\nStill the codes, design, and the architecture of bamboo seemed terribly bad\ntowards formal language, it had some philosophy, which we might appreciate.\n\n  1. contract oriented : contract oriented means as follows. Every time a contract is called, the contract returns another new contract or the same contract. Which means contract can evolve itself. Bamboo architecture embed the constructor code in a deployed contract. This is @pirapira(bamboo creator) 's innovative idea, which, I do not know, will be useful really.\n\n  2. Type is embeded into Term : this feature seems bad. Because, it makes us difficult to separate AST of terms and AST of types. But, However, this design enable avoiding full type system, which seems expensive for designing.\n\n### Build\n\nOld Pen is written by OCaml, whose package manager is OPAM, which you need to\ninstall first of all.\n\nAfter opam init, install all dependencies;\n\n    \n    \n    $ opam install batteries $ opam install cryptokit ## (>= 1.12) $ opam install hex $ opam install menhirLib $ opam install rope $ opam install rpclib\n\nThen, pull this repo from github and compile the comipler !\n\n    \n    \n    $ git pull https://www.github.com/ghasshee/pen $ cd pen/src $ ./compile.sh ../examples/count.pen\n\n### Deploy a contract on Geth\n\nIf you successfully compile it with the above command, you will find the\nfollowing instruction which is displayed on STD I/O .\n\nAs mentioned there, please type;\n\n    \n    \n    $ ../eth/geth.sh\n\nthen enter the password which is Empty String \"\", and follow the rest of the\ninstruction.\n\nAlso, We can use the pen command, like;\n\n    \n    \n    $ ./pen < ../examples/count.pen $ ./pen --abi < ../examples/count.pen ## shows ABI $ ./pen --asm < ../examples/count.pen ## shows Assembler Code\n\n## New Project (Written from Sctratch in Haskell)\n\nDeploying the heavily-modified old project's compiling EVM bytecode into\nblockchain, we should have checked the specification and run some tests, and\nthen we must have modified the compiler, but the old architecture turned out\ntoo untidy to modify, finally.\n\nWe started new compiler from scratch in Haskell. Haskell is a purely\nfunctional programming language. Haskell is more expensive than OCaml in\nwriting codes. You know, OCaml is a nice language because Coq Proof Assistant\nand its transpiler (Extraction Mechanism) gives us more formality than\nHaskell's code. However, Haskell gives us a lot of useful or visibly nice\ninterpreter. In developping, we use a lot Haskell's \"Show Instance\" for\nvisibility of analysis, which gives us formality directly and intuitively.\n\n### Build\n\nYou might need Haskell compiler and some libraries.\n\nGoto pen/hs/ directory and then type make and push enter key.\n\n### Program Analysis\n\n    \n    \n    $ cd hs $ make $ ./Pen count2.pen\n\nThe above command might analyze the pen source code and show the resulting\nprogram graph and its matrix representation.\n\n### Deploying a contract\n\nCurrently Not Supported\n\n# DEVM\n\nPen has another tool which decompiles EVM-bytecode into Guarded Command-like\nLanguage (GCLL). The decompiler is written in Haskell, which is purely\nfunctional programming language.\n\nCurrently we have 3 analysis tools: DASM, ASM, and, DEVM .\n\n    \n    \n    $ cd devm $ make $ ../src/pen < ../examples/count.pen | ./DEVM ## Decompiler $ ../src/pen < ../examples/count.pen | ./DASM ## Disassembler $ ../src/pen < ../examples/count.pen | ./DASM | ./ASM ## Assembler\n\nOf course DEVM can decompile Solidity EVM-bytecode .\n\n    \n    \n    $ ./DEVM < ../solc/Count.hex\n\n## About\n\nA compiler into EVM code\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\n### Stars\n\n5 stars\n\n### Watchers\n\n3 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * ghasshee ghasshee\n  * ghassheee ghassheee\n\n## Languages\n\n  * OCaml 58.2%\n  * Haskell 35.2%\n  * Yacc 1.9%\n  * Fortran 1.0%\n  * Makefile 0.9%\n  * Lex 0.7%\n  * Other 2.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
