{"aid": "40099626", "title": "My Journey into Personal Computer Software Development in 1983", "url": "https://farrs.substack.com/p/my-journey-into-personal-computer", "domain": "farrs.substack.com", "votes": 15, "user": "saloama", "posted_at": "2024-04-20 18:29:44", "comments": 0, "source_title": "My Journey into Personal Computer Software Development in 1983", "source_text": "My Journey into Personal Computer Software Development in 1983\n\n# Farrs\u2019s Substack\n\nShare this post\n\n#### My Journey into Personal Computer Software Development in 1983\n\nfarrs.substack.com\n\n#### Discover more from Farrs\u2019s Substack\n\nMy personal Substack\n\nContinue reading\n\nSign in\n\n# My Journey into Personal Computer Software Development in 1983\n\nFarrs T\n\nApr 20, 2024\n\nShare this post\n\n#### My Journey into Personal Computer Software Development in 1983\n\nfarrs.substack.com\n\nShare\n\nIn 1983, Personal Computers were quite the up and coming thing. You could buy\nyour own for a few thousand dollars. Though they were mostly considered toys\nby many East Coast programmers (more expensive \"workstations\" were the rage),\nthere had already been some interesting and promising applications developed\nfor it.\n\nI thought (along with a lot of other people) that these were definitely the\nthing of the future. I was considering a new job, so I decided to take a bit\nof a risk, and look for work writing Personal Computer Software.\n\nI was able to get an interview at one of the top Personal Computer software\ndevelopment companies of the area. The company was called \"Software Arts\". It\nwas the company of the creators of \"VisiCalc\", the original spreadsheet.\n\nDuring the interview process, I actually met the creators of VisiCalc. People\nhad scared me about one of them, Bob Frankston, as someone difficult to talk\nto, and quick to temper. But when I met him, I actually found a genuine\npleasant programmer-type. His problem was that he didn't really internalize\nthat he was one of the company bosses, and felt that he was just a super-cool\nprogrammer. As such, if he felt like yelling at you - it would be perfectly\nnormal because, of course, if he was wrong - you would yell right back and\ntell him to stfu! The only problem was, as the company founder and chief\nprogrammer or something - nobody was actually going to yell back at him. But\nthey would grumble a lot later on, thereby giving him a bad and undeserved\nreputation.\n\nThe work was one of those \"improve performance\" details. They were doing a\nversion of VisiCalc for the newly emerged IBM PC. The program was \"almost\nready\", but it wouldn't fit in the memory limit! If I recall correctly, the\nmemory limit was 256K (that's K, not M) because the \"floppy disks\" could only\nhold that much.\n\nBob Frankston believed the program could be made to fit into the memory by\nusing a \"segmentation\" strategy. Some people at Software Arts had given it a\ntry, but had not been able to get much success or had decided the work was too\nboring. In any case, nobody wanted to do it, hence the job opening.\n\nI heard out his ideas, and it made sense to me. They offered me a job with a\n30% raise (I was working for Digital Equipment which was not known for best\nsalaries) and I joined them.\n\nBob Frankston's ideas about segmentation were sound. As the original author of\nthe program, he did have a good feel for VisiCalc code, and in fact I found it\nwas very amenable to segmentation along the lines he had suggested.\n\nSo in 2-3 months, I was able to fit the program in the memory limits, with\nplenty of room to spare for new features.\n\nThat work having done, I became a regular part of the IBM PC VisiCalc team.\n\nAs I mentioned, the program was \"almost ready\". One of the \"almost\" parts\ninvolved the 256 K memory limit.\n\nThere was another part to the \"almost\". The bug list of the program had over\n600 items. Most of the original programmers on the VisiCalc team had moved on\nto \"better\" stuff (more about that later.) Christine S and Joe B were the\nremaining programmers. Even if they solved 1 bug a day, it would take 60 weeks\nto clear the bug list. The actual rate was not 1 bug a day, some bugs took\nmany days in fact. Not a very happy situation -- but the Software Arts\nmanagement was already seeing VisiCalc as a \"yesterday\" thing. Dan Bricklin, a\nbright and friendly guy who had the original spreadsheet idea and then\ninvolved Bob Frankston for the coding, felt that since VisiCalc had already\nbeen done and they already owned the spreadsheet market, the best bet was to\nfocus on more new ideas rather than wasting much resources on VisiCalc.\n\nThe management thought \"TK!Solver\", an algebra-type program, would be the next\n\"spreadsheet\" type revolution. So that's where the programmers that the\ncompany felt were the \"best\", went.\n\nWhich left two programmers on the VisiCalc team - Christine S and Joe B, and\nthen also I, since I had finished the \"segmentation\" problem ahead of\nschedule.\n\nTruth be told, the \"segmentation\" problem was indeed boring and routine after\na while. So I was only too happy to get into something more exciting. Like,\nuh, bug-fixing.\n\nThe company had the perfect \"bug\" solving system as far as I was concerned.\nNobody assigned you anything. You looked over the bug list, \"checked out\" a\nbug, solved it, and \"checked in\" the bug.\n\nNaturally, the hairy bugs were left alone as nobody checked them out.\n\nBut being a natural programmer, I liked my bugs complex. The easy ones were\ngood to perk me up while I finished my morning coffee, another entertaining\ncouple by lunch, and then often I could get one or two more by the end of the\nday. So I started solving bugs at the rate of 5 or so, a day.\n\nThis caused problems.\n\nThe Quality Assurance staff was very happy. They were used to programmers\ntrying to explain to them why something wasn't a bug, or telling them it would\nbe solved any time soon, now. And here I was, announcing every day that these\n3-5 bugs were off the list. Christine P, who was doing VisiCalc Quality\nAssurance, told me later on that when she saw my first email listing 5 solved\nbugs, she decided I had to be some kind of a fast-talker and fake. (I can't\nblame her, here were all these graduates of top technical universities, doing\na bug maybe every two-three days, and here I was from a university known for\nliberal arts, claiming to have solved 5 in a day!) So with the intention to\nconfront me and set me straight, she downloaded my fixes to her PC and checked\nthose out. And what do you know, they were all indeed fixed!\n\nVisiCalc management was happy. Other management was not. They didn't want much\nattention going to VisiCalc, the \"old\" program. (This was before anybody had\nheard of something called \"Excel\".)\n\nOther programmers at Software Arts were also a problem. Software Arts had\nattracted a lot of highly talented pedigreed programmers. Software Arts would\nnot normally have even looked at someone of my credentials, had it not been\nfor the fact that none of their highly talented programmers wanted to do any\nboring work.\n\nNow it turned out, many of these super-programmers had quietly looked at some\nof the more complex VisiCalc bugs at some time in the past, and had wisely\ndecided not to \"check out\" the bug. But being super-programmers, they were\nvery annoyed that somebody from an unknown (programming-wise) university would\ncome in and solve those complex bugs without breaking a sweat or without\nspending one single evening on the premises.\n\nBesides my educational background, at that time Indians weren't particularly\nconsidered to be suitable software material. (Amazing how the world turns,\neh?)\n\nSo mostly, the super-programmers were trying to resolve how I could have\nsolved these bugs, since obviously I couldn't be very intelligent. Well, that\nis, no way was I intelligent in the same way they were intelligent.\n\nWhile the super-programmers and the super-managers (I believe Tracy Licklider\nwas the actual management person, Bricklin and Frankston were above the daily\nmanagement issues) were trying to resolve this dilemma, I was happily and\nbusily solving the bugs.\n\nWithin a few months, the bug-list was empty, and VisiCalc management was\nencouraged to add more features to VisiCalc. So I added Graphics capabilities\nto VisiCalc, Christine S added sorting features (I can't remember if Joe B had\nbeen moved to another \"better\" project by then, but he probably was, because\nhe was \"in-clique\".)\n\nSo the product was finally ready to be released.\n\nAnd then things came to a head.\n\nVisiCorp, the marketing organization for VisiCalc, was significantly unhappy\nwith the performance of the product. That's because there was a rival called\n1-2-3 from Lotus. It didn't have as many features (for example, it drew crappy\nline drawings instead of filled-out pie charts) but ran faster and took less\nmemory.\n\nVisiCalc running slower and taking more memory had to do with some inside\npolitics. The in-clique had decided that the program had to be written in\nLisp. At that time, there were strong limits on how fast you could run with a\nlanguage like Lisp, and it was also a memory hog. With segmentation, I had\nbeen able to get everything to fit, but just fitting wasn't very good.\n\nTo me, the solution was simple -- rewrite the whole thing in something called\n\"assembly language\". That's what everybody else was doing on the PC platform\nin those days. I had already chosen to write the Graphics in assembly language\n(which is why the Graphics took very little memory and ran fast), and from my\nsegmentation and bug-fixing work, I knew everything about everything else in\nthe VisiCalc program. I could have easily rewritten the whole thing in\nassembly language in another 4-6 months if really encouraged. Without many\nbugs.\n\nBut turns out, nobody was going to encourage me, or even ask me!\n\nAs I mentioned earlier, Tracy Licklider and the super-programmer in-clique\nwere busy trying to resolve the mysterious dilemma of how (a) I could be an\nIndian and not from a known programming school and (b) I could still fix bugs\nand add features at this amazing rate.\n\nIt looks like they had hit the psych books and all, because they had finally\ncome up with a solution. Obviously, they had concluded, I was an \"idiot\nsavant\". [An \"idiot savant\" is an idiot who happens to be mysteriously very\ngifted in a particular area, e.g. mathematical computations. Their conclusion\nwas that because obviously I couldn't really be \"intelligent\", my seeming\n\"intelligence\" in solving bugs was a result of this \"idiot savant\" effect.]\n\nNow, while the in-clique of the super-programmers and managers was busy\ndissing me, the other staff at the company had been noticing all this, and as\na result, I had built an incredible support level among the non-programming\nstaff. Non-management and non-programming personnel, such as quality\nassurance, accounting, sales, even front-desk, frequently sought me out to\ntell me about the good things they had heard about my work.\n\nSo the \"idiot savant\" declaration got back to me.\n\nI suppose someone with a more combative attitude would have stayed on and\nfought this thing through, to get the respect he/she deserved.\n\nI am not like that. Specially back then, I was very easygoing. While I could\nput in tremendous amount of work in something that I believed was worth doing,\nI just couldn't see the point of working the politics of it.\n\nBeing labeleld an \"idiot savant\" by the management in retaliation for having\ndone some (what I thought to be) amazingly good work, frankly unnerved and\nannoyed me a lot.\n\nMy reaction was, I wanted to get the heck away from those crazies.\n\nI knew many support staff liked me, but I was realistic enough to realize\nmanagement and programming staff could cause much trouble for me, if they had\nan attitude like that.\n\nSo that was the end of my first brief foray into Personal Computer technology\nin the early 80s, as I went back into a familiar world of Workstations, Unix,\nand C programming.\n\n### Subscribe to Farrs\u2019s Substack\n\nBy Farrs T \u00b7 Launched 13 hours ago\n\nMy personal Substack\n\n1 Like\n\nShare this post\n\n#### My Journey into Personal Computer Software Development in 1983\n\nfarrs.substack.com\n\nShare\n\nComments\n\nNo posts\n\nReady for more?\n\n\u00a9 2024 Farrs T\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": true}
