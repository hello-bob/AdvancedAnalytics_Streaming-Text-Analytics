{"aid": "40284886", "title": "Tabnine's vision for the future: The Atlassian Jira-to-code AI agent", "url": "https://www.tabnine.com/blog/unveiling-tabnines-vision-for-the-future-the-atlassian-jira-to-code-ai-agent/", "domain": "tabnine.com", "votes": 1, "user": "prosim", "posted_at": "2024-05-07 12:55:22", "comments": 0, "source_title": "Unveiling Tabnine\u2019s vision for the future: The Atlassian Jira-to-code AI agent - Tabnine", "source_text": "Unveiling Tabnine\u2019s vision for the future: The Atlassian Jira-to-code AI agent\n- Tabnine\n\nLog in Get started for free\n\nHome / Blog /\n\nUnveiling Tabnine\u2019s vision for the future: The Atlassian Jira-to-code AI agent\n\n//\n\n# Unveiling Tabnine\u2019s vision for the future: The Atlassian Jira-to-code AI\nagent\n\n//\n\nEran Yahav /\n\n3 minutes /\n\nApril 30, 2024\n\nTable of contents\n\n  * Real-world requirements for an \u201cAI engineer\u201d\n  * Tabnine\u2019s approach to making AI agents a reality\n  * What\u2019s coming next?\n\nAt Tabnine, we strongly believe that the future of software development is AI-\ndriven, where AI engineers (agents) collaborate closely with human engineers\nto complete a task and AI orchestrates all aspects of the software development\nlife cycle.\n\nWe\u2019re actively building for this future, and today we\u2019re offering a glimpse of\na fully autonomous version of Tabnine \u2014 an AI agent that can implement a Jira\nticket in the context of an existing project and create a fully functioning\napplication. It\u2019s early days for Tabnine\u2019s \u201cJira-to-code\u201d AI agent, but we\u2019re\nexcited about how this can truly transform the software development processes.\n\nIn the demo below, the Tabnine AI agent takes simple specifications stored in\nAtlassian Jira and creates a fully functioning application:\n\n## Real-world requirements for an \u201cAI engineer\u201d\n\nRecently announced agents such as SWE-Agent, gpt-engineer, Devika, and Devin\nshow great promise and demonstrate the increasing potential of AI agents in\nthe software development lifecycle. Agents are equipped with an extensive\ntoolbelt (similar to the tools available to developers) to complete their\ntasks. To make such agents a productive reality in an enterprise setting, we\nbelieve that agents should have these properties:\n\n  * Concise: Communication with the agent must be concise. This is true both for providing input to the agent as well as for consuming its output. A major part of software development is discovering the desired behavior from a typically underspecified definition. The effectiveness of an agent greatly depends on the ability to iterate on a task quickly with compact input and output.\n  * Personalized and incremental: The agent must be aware of the current codebase, the organization\u2019s best practices, documentation, and the style and preference of the human developer it assists. An agent that generates code foreign to the current codebase, potentially regenerating instead of reusing components, limits its applicability.\n  * Reliable: The human must trust the output the agent provides. Reviewing the thousands of lines of code an agent generates to find subtle bugs might limit the value of delegating tasks to the agent.\n  * Inquisitive: An effective agent must be able to probe the human for additional context and instructions where needed. The efficacy of the human <-> AI dialog is critical for the agent\u2019s success in real life.\n  * Self-aware (reflective): The agent must recognize when it has completed a task with a nonsatisfactory result. An effective agent should be able to come back to the human with feedback on how the task was completed in a way that could guide its improvement process.\n\n## Tabnine\u2019s approach to making AI agents a reality\n\nHere\u2019s how we\u2019re addressing the challenges that prevent AI coding assistants\nfrom being fully embedded in the software development life cycle:\n\n  * To facilitate concise communication, we deliver the AI agent via Tabnine Chat \u2014 an enterprise-grade, code-centric chat application that allows developers to interact with Tabnine AI models using natural language. This is the natural place where developers work and it allows them to relate to a Jira ticket in the context of the existing project and even in the context of an existing module/file of the project. It gives the developer fine-grained control over how the ticket is implemented by and lets them manually modify the generated code through conversing with the agent. Further, it allows the agent to ask clarifying questions and probe for additional input from the developer as part of being \u201cinquisitive.\u201d Of course, not all agents would complete their work interactively, but you can keep long-running agents running in the background, similar to running your tests.\n  * As a foundational phase, we focus on personalization, exposing the agent to the wealth of information available about the project in Tabnine and providing the agent with tools exposed by Tabnine supporting in-IDE operations. This involves retrieval from Tabnine\u2019s vector memory (based on embeddings) and Tabnine\u2019s semantic memory (based on relationships between semantic entities).\n  * A sandboxed execution environment allows Tabnine agents to execute generated code and check its adherence to test cases (both human-provided and generated ones). We plan to improve this step further by integrating additional tools.\n  * Tabnine agents ask humans clarifying questions and follow-up questions. This is a key element of our approach, and we believe it\u2019s a mandatory aspect of an agent facing any task with realistic complexity.\n  * Agents are asked to reflect on their work. This reflection may result in internal adjustments to the plan or additional questions to the human developer (\u201chuman in the loop\u201d).\n\n## What\u2019s coming next?\n\nTabnine\u2019s Jira-to-code AI agent is still in the works and we\u2019re experimenting\ninternally to improve its abilities to support the aforementioned challenges.\nWe\u2019ll gradually release the ability to contextualize all Tabnine agents on\ninformation from Jira. Stay tuned.\n\nWant to see how Atlassian + Tabnine can help your engineering team be more\nproductive? Reach out to schedule a chat with one of our product experts. If\nyou happen to be in Las Vegas at Team 2024 this week, stop by Booth #68 to\nlearn more about these capabilities. Or to try it out for yourself right now,\nsign up for Tabnine Pro today \u2014 it\u2019s free for 90 days.\n\n//\n\n# Explore recent posts\n\n//\n\n# Tabnine + Atlassian: AI-enabled software development built around you\n\n4 -min read\n\n# Unit testing with Python: the basics and a quick tutorial\n\n6 -min read\n\n# 5 AI trends we spotted at Google Cloud Next\n\n4 -min read\n\nGet started for free\n\n//\n\n# More Announcements\n\n//\n\n# Tabnine + Atlassian: AI-enabled software development built around you\n\n4 -min read\n\n# Unit testing with Python: the basics and a quick tutorial\n\n6 -min read\n\n# 5 AI trends we spotted at Google Cloud Next\n\n4 -min read\n\n//\n\n# Other categories\n\n//\n\nAnnouncements Guides How-to's Product News Thought Leadership\n\n//\n\n# Subscribe to the Tabnine newsletter\n\n//\n\nGet news and updates about AI, software development, and more.\n\n  * Tabnine\n\n    * About\n    * Careers\n    * Contact Us\n  * Product\n\n    * Plans & Pricing\n    * Supported IDEs\n    * Documentation\n  * Resources\n\n    * Code Privacy\n    * Privacy Policy\n    * Terms of Use\n    * Trust Center\n    * Cookie Policy\n\n//\n\nTabnine is the AI coding assistant that accelerates and simplifies software\ndevelopment while keeping your code private, secure, and compliant.\n\n//\n\n", "frontpage": false}
