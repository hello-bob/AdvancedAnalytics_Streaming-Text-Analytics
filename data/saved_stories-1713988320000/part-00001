{"aid": "40144425", "title": "Rayon: Data-race free parallelization of sequential computations in Rust", "url": "https://github.com/rayon-rs/rayon", "domain": "github.com/rayon-rs", "votes": 1, "user": "nateb2022", "posted_at": "2024-04-24 13:51:00", "comments": 0, "source_title": "GitHub - rayon-rs/rayon: Rayon: A data parallelism library for Rust", "source_text": "GitHub - rayon-rs/rayon: Rayon: A data parallelism library for Rust\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nrayon-rs / rayon Public\n\n  * Notifications\n  * Fork 479\n  * Star 10.2k\n\nRayon: A data parallelism library for Rust\n\n### License\n\n10.2k stars 479 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# rayon-rs/rayon\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n11 Branches\n\n61 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ncuviperMerge pull request #1157 from atouchet/faqApr 8, 20248ccfda3 \u00b7 Apr 8,\n2024Apr 8, 2024\n\n## History\n\n2,195 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| update-types: major, remove docker section| Feb 11, 2024  \n  \n### ci\n\n|\n\n### ci\n\n| bump ci/compat-Cargo.lock| Mar 24, 2024  \n  \n### rayon-core\n\n|\n\n### rayon-core\n\n| Allow clippy::incompatible_msrv| Mar 24, 2024  \n  \n### rayon-demo\n\n|\n\n### rayon-demo\n\n| Fix clippy::needless_borrowed_reference| Mar 24, 2024  \n  \n### scripts\n\n|\n\n### scripts\n\n| add analyze.sh script I have used a lot| Dec 23, 2016  \n  \n### src\n\n|\n\n### src\n\n| Sync par_sort* with the standard library| Apr 4, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| Use inherent primitive items| Mar 24, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Ignore CLion files.| Jul 2, 2019  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| Release 1.10.0| Mar 24, 2024  \n  \n### FAQ.md\n\n|\n\n### FAQ.md\n\n| Re-wrap the FAQ to 80 characters width| Apr 8, 2024  \n  \n### LICENSE-APACHE\n\n|\n\n### LICENSE-APACHE\n\n| Add MIT/Apache license files.| Aug 16, 2016  \n  \n### LICENSE-MIT\n\n|\n\n### LICENSE-MIT\n\n| Add MIT/Apache license files.| Aug 16, 2016  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update Readme| Mar 24, 2024  \n  \n### RELEASES.md\n\n|\n\n### RELEASES.md\n\n| Release 1.10.0| Mar 24, 2024  \n  \n## Repository files navigation\n\n# Rayon\n\nRayon is a data-parallelism library for Rust. It is extremely lightweight and\nmakes it easy to convert a sequential computation into a parallel one. It also\nguarantees data-race freedom. (You may also enjoy this blog post about Rayon,\nwhich gives more background and details about how it works, or this video,\nfrom the Rust Belt Rust conference.) Rayon is available on crates.io, and API\ndocumentation is available on docs.rs.\n\n## Parallel iterators and more\n\nRayon makes it drop-dead simple to convert sequential iterators into parallel\nones: usually, you just change your foo.iter() call into foo.par_iter(), and\nRayon does the rest:\n\n    \n    \n    use rayon::prelude::*; fn sum_of_squares(input: &[i32]) -> i32 { input.par_iter() // <-- just change that! .map(|&i| i * i) .sum() }\n\nParallel iterators take care of deciding how to divide your data into tasks;\nit will dynamically adapt for maximum performance. If you need more\nflexibility than that, Rayon also offers the join and scope functions, which\nlet you create parallel tasks on your own. For even more control, you can\ncreate custom threadpools rather than using Rayon's default, global\nthreadpool.\n\n## No data races\n\nYou may have heard that parallel execution can produce all kinds of crazy\nbugs. Well, rest easy. Rayon's APIs all guarantee data-race freedom, which\ngenerally rules out most parallel bugs (though not all). In other words, if\nyour code compiles, it typically does the same thing it did before.\n\nFor the most, parallel iterators in particular are guaranteed to produce the\nsame results as their sequential counterparts. One caveat: If your iterator\nhas side effects (for example, sending methods to other threads through a Rust\nchannel or writing to disk), those side effects may occur in a different\norder. Note also that, in some cases, parallel iterators offer alternative\nversions of the sequential iterator methods that can have higher performance.\n\n## Using Rayon\n\nRayon is available on crates.io. The recommended way to use it is to add a\nline into your Cargo.toml such as:\n\n    \n    \n    [dependencies] rayon = \"1.10\"\n\nTo use the parallel iterator APIs, a number of traits have to be in scope. The\neasiest way to bring those things into scope is to use the Rayon prelude. In\neach module where you would like to use the parallel iterator APIs, just add:\n\n    \n    \n    use rayon::prelude::*;\n\nRayon currently requires rustc 1.63.0 or greater.\n\n### Usage with WebAssembly\n\nBy default, when building to WebAssembly, Rayon will treat it as any other\nplatform without multithreading support and will fall back to sequential\niteration. This allows existing code to compile and run successfully with no\nchanges necessary, but it will run slower as it will only use a single CPU\ncore.\n\nYou can build Rayon-based projects with proper multithreading support for the\nWeb, but you'll need an adapter and some project configuration to account for\ndifferences between WebAssembly threads and threads on the other platforms.\n\nCheck out the wasm-bindgen-rayon docs for more details.\n\n## Contribution\n\nRayon is an open source project! If you'd like to contribute to Rayon, check\nout the list of \"help wanted\" issues. These are all (or should be) issues that\nare suitable for getting started, and they generally include a detailed set of\ninstructions for what to do. Please ask questions if anything is unclear!\nAlso, check out the Guide to Development page on the wiki. Note that all code\nsubmitted in PRs to Rayon is assumed to be licensed under Rayon's dual\nMIT/Apache 2.0 licensing.\n\n## Quick demo\n\nTo see Rayon in action, check out the rayon-demo directory, which includes a\nnumber of demos of code using Rayon. For example, run this command to get a\nvisualization of an N-body simulation. To see the effect of using Rayon, press\ns to run sequentially and p to run in parallel.\n\n    \n    \n    > cd rayon-demo > cargo run --release -- nbody visualize\n\nFor more information on demos, try:\n\n    \n    \n    > cd rayon-demo > cargo run --release -- --help\n\n## Other questions?\n\nSee the Rayon FAQ.\n\n## License\n\nRayon is distributed under the terms of both the MIT license and the Apache\nLicense (Version 2.0). See LICENSE-APACHE and LICENSE-MIT for details. Opening\na pull request is assumed to signal agreement with these licensing terms.\n\n## About\n\nRayon: A data parallelism library for Rust\n\n### Resources\n\nReadme\n\n### License\n\nActivity\n\nCustom properties\n\n### Stars\n\n10.2k stars\n\n### Watchers\n\n100 watching\n\n### Forks\n\n479 forks\n\nReport repository\n\n## Releases\n\n61 tags\n\n## Packages 0\n\nNo packages published\n\n## Used by 212k\n\n\\+ 211,521\n\n## Contributors 134\n\n\\+ 120 contributors\n\n## Languages\n\n  * Rust 99.9%\n  * Shell 0.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
