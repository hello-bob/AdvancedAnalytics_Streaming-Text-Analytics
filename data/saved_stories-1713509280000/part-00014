{"aid": "40081882", "title": "Dropbox syncs 1000 developers with coder", "url": "https://coder.com/blog/dropbox-syncs-1000-developers-with-coder", "domain": "coder.com", "votes": 1, "user": "ammario", "posted_at": "2024-04-18 23:40:05", "comments": 0, "source_title": "Dropbox Syncs 1000 Developers with Coder", "source_text": "Dropbox Syncs 1000 Developers with Coder - Coder\n\nNew\n\n###### Boost Developer Productivity & Streamline Onboarding with CDE's\n\nDownload the Whitepaper\n\n6.8KGet a Demo\n\n# Dropbox Syncs 1000 Developers with Coder\n\nMarc Paquette\n\non April 18th, 2024\n\nAbout 1000 developers build Dropbox\u2019s capabilities for flexible, reliable,\nsecure file syncing and storage. Dropbox gained its fame as one of the biggest\nproviders for cloud file management on the planet, helping 700 million users\nshare and store files in the consumer, professional, and enterprise markets.\nMatt Kulka is an Infrastructure Software Engineer at Dropbox. In the past he\u2019s\nhelped big companies like Facebook and PayPal with operations, devops, and\nsoftware engineering. He and the five other members of the Dropbox Developer\nEnvironments team are responsible for providing and managing the developer\ninfrastructure. We talked to Matt about the challenges of keeping 1000\ndevelopers productive and happy.\n\n### A thousand spinning plates\n\nMatt\u2019s team provides developer environments as VMs running in AWS EC2. Each\ndeveloper gets their own EC2 instance. They use GitHub for version control.\nFor IDEs, most developers use JetBrains or Visual Studio Code.\n\nThe environments come in 2 major flavors: One for Linux, the other for\nWindows. While both run on AWS EC2 they each use different AMIs and other\nconfigurations. From there, the engineers can customize their environments.\nMatt described the 4 major kinds of environments that Dropbox developers work\nwith:\n\n  * Cloud: The majority of developers work on Linux VMs for the Dropbox web front-end and cloud back-end. They rely on Bazel for building and testing.\n  * ML: ML engineers work with GPUs for language model training.\n  * Docker containers: Some developers work with open source tools that are unique to a project. Docker provides a convenient way to run these tools.\n  * Desktop: Developers working on desktop and mobile apps use VMs that target specific OSs, like Windows, macOS, and so on.\n\nPrior to Coder, Dropbox used an in-house solution to provision development\nenvironments. But there were some drawbacks:\n\n  * It used a monolithic design in Python, so extending it to support new environments was time-consuming. It meant refactoring code to add features, then documenting those features so developers could take advantage of them.\n  * It was command-line driven, which limited the developer experience for interacting with it. For example, to start a new environment, a developer had to carefully follow the documentation to manually enter commands at the terminal.\n\nDropbox needed a tool that was flexible enough to handle their wide array of\ndevelopment environments and make 1000 development environments easy to\nmanage.\n\n### The leap to Coder\n\nTo evaluate a few solutions, the Developer Environments team assigned two\npeople, Matt and a colleague. They discovered that some solutions weren\u2019t\nplatform-neutral, requiring Dropbox to lock into walled networking\nenvironments. Others were not yet mature or didn\u2019t have the right mix of\nfeatures. Coder met Dropbox\u2019s requirements without imposing these limitations:\n\n  * Coder runs anywhere and can be deployed on any infrastructure.\n  * Developers use their existing IDEs, tooling, and dot files, which eases adoption.\n  * Governance is built-in with features for monitoring, scaling, auditing, and cost control.\n\nWith Coder as the winner, Matt and his teammate needed to migrate 1000\ndevelopers. They did it in three major phases:\n\n  * Phase 1: Trial period. Developers were invited to try Coder to compare it to the in-house solution. Matt and his colleague evangelized the Coder features that were the most attractive to their developers: the discoverable UI, general ease of use, and the ability to run multiple workspaces.\n  * Phase 2: Migration deadline. At the end of the trial period, about 400 developers had already switched to Coder on their own. To get the other developers into Coder, a deadline was announced to make the switch. This also let Dropbox shut down the remaining legacy environments, which saved compute and support costs.\n  * Phase 3: Fine tuning. They then had to handle the edge cases from the many new Coder-based environments that developers were using. They did this with Coder\u2019s flexible and extensible declarative templates.\n  * The result: The numbers are impressive: Only 2 people migrated 1000 developers to Coder in just 4 months.\n\n# Focus on developer experience, let Coder do the rest\n\nSince then, Dropbox has steadily improved developer experience:\n\n  * Out of the box, Coder gives developers a discoverable, point-and-click user interface. This, in turn, relieves the Developer Environments team from designing the UI aspects of their solutions.\n  * Environments no longer waste cloud resources. Developers can easily start and stop workspaces as they need. Coder can also schedule workspaces. The result is a big reduction in cloud computing and storage costs, which dropped 30%.\n  * Leverage existing resources. Dropbox can now look at ways to use Coder as a single place to mix various compute resources, like combining both cloud and on-prem capabilities in the same development environment.\n  * Supporting a new developer environment is easier. One of the attractions of Coder is its use of declarative Terraform templates. This provides a consistent, turnkey experience, so Dropbox focuses on enabling tooling rather than dealing with infrastructure and user interface.\n  * Let developers customize their workspaces. Template parameters add flexibility while still keeping the templates maintainable. Templates can also add custom dotfiles and other info that the developer might choose.\n  * Developers start their environments in less time. A template can pre-warm a workspace by building a project before the workspace is launched. The developer gets an environment that\u2019s ready to use at the click of a button. Matt estimates that startup times for projects dropped from about an hour to 15 minutes.\n\n# Outcomes\n\n  * 1000 developers migrated to Coder in 4 months\n  * 30% reduction in cloud computing costs\n  * 50% reduction in startup times for some projects\n\n# Dropbox is ready for more\n\nWith the transition to Coder complete, Dropbox is looking forward to\nleveraging more of its advantages. The time spent on maintaining and extending\ntheir in-house platform is now spent on improving developer productivity.\nCoder has also opened new opportunities, like making better use of their on-\nprem GPU computing. With 1000 developers and a growing variety of development\nenvironments, the Dropbox Developer Environments team is letting Coder spin\nthose plates while they work on more interesting things.\n\nRelated Content\n\n  * CDEs: Offering Improved Developer Productivity and Experience\n  * Introduction to Cloud Development Environments\n  * Introducing CDEs to Your Enterprise\n\nSubscribe to our Newsletter\n\nWant to stay up to date on all things Coder? Subscribe to our monthly\nnewsletter and be the first to know when we release new things!\n\nBack To Blog\n\nInformation\n\n  * Pricing\n  * Docs\n  * Blog\n  * Partners\n  * Newsletter\n\nCompany\n\n  * Contact us\n  * Request demo\n  * Careers\n  * Press kit\n  * Security\n  * Swag Store\n\nCompare\n\n  * Amazon CodeCatalyst\n  * GitHub Codespaces\n  * Gitpod\n  * Microsoft Dev Box\n\nLegal\n\n  * Terms of service\n  * Privacy policy\n  * Licenses\n\n\u00a9 2024 Coder Technologies, Inc. All rights reserved.\n\n", "frontpage": false}
