{"aid": "40279776", "title": "PyTorch Neat", "url": "https://github.com/uber-research/PyTorch-NEAT", "domain": "github.com/uber-research", "votes": 1, "user": "snats", "posted_at": "2024-05-06 21:36:26", "comments": 0, "source_title": "GitHub - uber-research/PyTorch-NEAT", "source_text": "GitHub - uber-research/PyTorch-NEAT\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nuber-research / PyTorch-NEAT Public\n\n  * Notifications\n  * Fork 100\n  * Star 534\n\n### License\n\nApache-2.0 license\n\n534 stars 100 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# uber-research/PyTorch-NEAT\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\njal278Added linksSep 21, 2018dee5f0a \u00b7 Sep 21, 2018Sep 21, 2018\n\n## History\n\n4 Commits  \n  \n### examples\n\n|\n\n### examples\n\n| Initial Commit| Sep 14, 2018  \n  \n### pytorch_neat\n\n|\n\n### pytorch_neat\n\n| Initial Commit| Sep 14, 2018  \n  \n### tests\n\n|\n\n### tests\n\n| Initial Commit| Sep 14, 2018  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial Commit| Sep 14, 2018  \n  \n### README.md\n\n|\n\n### README.md\n\n| Added links| Sep 21, 2018  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| Initial Commit| Sep 14, 2018  \n  \n## Repository files navigation\n\n# PyTorch NEAT\n\n## Background\n\nNEAT (NeuroEvolution of Augmenting Topologies) is a popular neuroevolution\nalgorithm, one of the few such algorithms that evolves the architectures of\nits networks in addition to the weights. For more information, see this\nresearch paper: http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf.\n\nHyperNEAT is an extension to NEAT that indirectly encodes the weights of the\nnetwork (called the substrate) with a separate network (called a CPPN, for\ncompositional pattern-producing network). For more information on HyperNEAT,\nsee this website: http://eplex.cs.ucf.edu/hyperNEATpage/.\n\nAdaptive HyperNEAT is an extension to HyperNEAT which indirectly encodes both\nthe initial weights and an update rule for the weights such that some learning\ncan occur during a network's \"lifetime.\" For more information, see this\nresearch paper: http://eplex.cs.ucf.edu/papers/risi_sab10.pdf.\n\n## About\n\nPyTorch NEAT builds upon NEAT-Python by providing some functions which can\nturn a NEAT-Python genome into either a recurrent PyTorch network or a PyTorch\nCPPN for use in HyperNEAT or Adaptive HyperNEAT. We also provide some\nenvironments in which to test NEAT and Adaptive HyperNEAT, and a more involved\nexample using the CPPN infrastructure with Adaptive HyperNEAT on a T-maze.\n\n## Examples\n\nThe following snippet turns a NEAT-Python genome into a recurrent PyTorch\nnetwork:\n\n    \n    \n    from pytorch_neat.recurrent_net import RecurrentNet net = RecurrentNet.create(genome, config, bs) outputs = net.activate(some_array)\n\nYou can also turn a NEAT-Python genome into a CPPN:\n\n    \n    \n    from pytorch_neat.cppn import create_cppn cppn_nodes = create_cppn(genome, config)\n\nA CPPN is represented as a graph structure. For easy evaluation, a CPPN's\ninput and output nodes may be named:\n\n    \n    \n    from pytorch_neat.cppn import create_cppn [delta_w_node] = create_cppn( genome, config, [\"x_in\", \"y_in\", \"x_out\", \"y_out\", \"pre\", \"post\", \"w\"], [\"delta_w\"], ) delta_w = delta_w_node(x_in=some_array, y_in=other_array, ...)\n\nWe also provide some infrastructure for running networks in Gym environments:\n\n    \n    \n    from pytorch_neat.multi_env_eval import MultiEnvEvaluator from pytorch_neat.recurrent_net import RecurrentNet def make_net(genome, config, batch_size): return RecurrentNet.create(genome, config, batch_size) def activate_net(net, states): outputs = net.activate(states).numpy() return outputs[:, 0] > 0.5 def make_env(): return gym.make(\"CartPole-v0\") evaluator = MultiEnvEvaluator( make_net, activate_net, make_env=make_env, max_env_steps=max_env_steps, batch_size=batch_size, ) fitness = evaluator.eval_genome(genome)\n\nThis allows multiple environments to run in parallel for efficiency.\n\nA simple example using NEAT to solve the Cartpole can be run like this:\n\n    \n    \n    python3 -m examples.simple.main\n\nAnd a simple example using Adaptive HyperNEAT to partially solve a T-maze can\nbe run like this:\n\n    \n    \n    python3 -m examples.adaptive.main\n\n## Author / Support\n\nPyTorch NEAT is extended from Python NEAT by Alex Gajewsky.\n\nQuestions can be directed to joel.lehman@uber.com.\n\n## About\n\nNo description, website, or topics provided.\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\nCustom properties\n\n### Stars\n\n534 stars\n\n### Watchers\n\n27 watching\n\n### Forks\n\n100 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Python 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
