{"aid": "40204064", "title": "MinSH: Near-linear time global string alignment in a few lines of Python", "url": "https://github.com/pesho-ivanov/minSH", "domain": "github.com/pesho-ivanov", "votes": 1, "user": "ashvardanian", "posted_at": "2024-04-29 20:59:15", "comments": 0, "source_title": "GitHub - pesho-ivanov/minSH: A minimal Python re-implementation of the A* with seed heuristic for exact global alignmnet (edit distance) in near-linear time", "source_text": "GitHub - pesho-ivanov/minSH: A minimal Python re-implementation of the A* with\nseed heuristic for exact global alignmnet (edit distance) in near-linear time\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\npesho-ivanov / minSH Public\n\n  * Notifications\n  * Fork 6\n  * Star 9\n\nA minimal Python re-implementation of the A* with seed heuristic for exact\nglobal alignmnet (edit distance) in near-linear time\n\n### License\n\nMPL-2.0 license\n\n9 stars 6 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# pesho-ivanov/minSH\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\npesho-ivanovstep -> kApr 29, 202488f54dc \u00b7 Apr 29, 2024Apr 29, 2024\n\n## History\n\n63 Commits  \n  \n### data\n\n|\n\n### data\n\n| works| May 6, 2023  \n  \n### minsh\n\n|\n\n### minsh\n\n| Fix: Backward compatibility| Apr 28, 2024  \n  \n### scripts\n\n|\n\n### scripts\n\n| Fix: Backward compatibility| Apr 28, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Fix: Append bytes| Apr 28, 2024  \n  \n### CITATION.cff\n\n|\n\n### CITATION.cff\n\n| Update CITATION.cff| Jun 5, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Create MPL LICENSE| May 5, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| step -> k| Apr 29, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| fixed email and doc link| Apr 29, 2024  \n  \n## Repository files navigation\n\n# Minimalistic Seed Heuristic for A*\n\nminSH is a short working implementation that aligns sequences and end to end\nusing a minimal number of edit operations (substitutions, insertions and\ndeletions). As a side effect, it computes the exact edit distance with near-\nlinear scaling, given limited divergence . astar.py implements A* with seed\nheuristic in a short and simple way:\n\n    \n    \n    def build_seed_heuristic(A, B, k): \"\"\"Builds the admissible seed heuristic for A and B with k-mers.\"\"\" kmers = { B[j:j+k] for j in range(len(B)-k+1) } # O(nk): Index all kmers from B. O(n) with rolling hash seeds = [ A[i:i+k] for i in range(0, len(A)-k+1, k) ] # O(n): Split A into non-overlapping seeds of length k. is_seed_missing = [ s not in kmers for s in seeds ] # O(n): Is seed unseen in B, so >=1 edit must be made to align it. suffix_sum = np.cumsum(is_seed_missing[::-1])[::-1] # O(n): How many of the remaining seeds have to be edited return lambda ij, k=k: suffix_sum[ ceildiv(ij[0], k) ] # O(1): How many seeds starting after the current position i have to be edited?\n\nNext, we just use the seed heuristic for a starndard A* on the alignment graph\nA x B:\n\n    \n    \n    h_seed = build_seed_heuristic(A, B, k=log(len(A))) astar(A, B, h_seed)\n\n# Background\n\n## Sequence alignment as a shortest path problem\n\nWe can look at aligning sequences A and B as a process of sequentially\naligning longer and longer prefixes of () to prefixes of () by matching,\nsubstituting, inserting or deleting single letters (minimizing edit distance).\nThus, finding an alignment with a minimal number of edit operations is\nequivalent to finding a shortest path starting from node and ending at node in\na graph of prefixes (also called edit graph or alignment graph), where each\nedge corresponds to one operation (with cost for a match or otherwise). This\ngraph representation enables us to apply general shortest path algorithms.\n\n## Dijkstra's shortest path algorithm\n\nThe simplest algorithm we can use is Dijkstra's algorithm which finds a\nshortest path of length by sequentially exploring nodes by increasing distance\nfrom the start node and until expanding the end node . The problem is that the\nsearch circles around regardless of where the target is, so in our 2D lattice\ngraph the number of explored nodes with grows quadratically in . For most data\n(e.g. genetic) the edit distance grows proportionally to and , so the whole\nalgorithm becomes quadratic which is practically infeasible for long\nsequences.\n\n## A* algorithm\n\nThe A* algirthm is a generalization of Dijkstra's algorithm that explores the\nnodes not just by their distance from the start but also adding an estimation\nof the remaining distance to the target . This heuristic function allows for a\npotentially very direct search towards the target but it has to be designed\ndepending on specific knowledge of the graph/task to be:\n\n  1. admissible (i.e. to never exceed the remaining distance $d(u,t)$), or otherwise the found path may not be shortest.\n  2. accurate in estimating , or otherwise the search will not be directly going to\n  3. fast to be computed for each explored node, or otherwise, the A* algorithm will be slow in practice\n\n## Usage\n\nTo use in your projects, simply add this repository as a dependency:\n\n    \n    \n    pip install git+https://github.com/pesho-ivanov/minSH.git\n\nThen call the align function with two strings A and B:\n\n    \n    \n    import math from minsh.astar import h_dijkstra, align, build_seedh, print_stats A = \"ACGT\" * 100 B = \"AGCT\" * 100 alphabet_size = 4 k = math.ceil(math.log(len(A), alphabet_size)) h_seed = build_seedh(A, B, k) g_seed = align(A, B, h_seed) print_stats(A, B, k, g_seed)\n\nThe library can also be used as a standalone command-line script:\n\n    \n    \n    $ astar data/small_A.fa data/small_B.fa > Aligning sequences with len(A)=18, k=3: > Edit distance: 3 > Error rate: 16.67% > Explored band: 3.39\n\nTo explore additional tooling - clone the repository and install the\ndependencies:\n\n    \n    \n    git clone https://github.com/pesho-ivanov/minSH && cd minSH pip install -r requirements.txt python scripts/test.py # tests python scripts/generate.py # synthetic FASTA files\n\n## TODO\n\nOptimizations:\n\n  * rolling hash: for linear time precomputation\n  * greedy matching (aka sliding)\n  * pruning, using index trees\n\nPresentation:\n\n  * visualization of the alignment (png, gif)\n  * interactivity for adding patches\n  * report stats\n  * benchmark\n\n## Related work\n\nminSH is inspired by minGPT to be small, clean, interpretable and educational\nre-implementation of the recent aligning approach based on the A* shortest\npath algorithm.\n\nDetailed Publications on A* for alignment\n\nAStarix semi-global seq-to-graph aligner:\n\n  * Ivanov et al., (RECOMB 2020) \u2014 Introduces A* with a trie for semi-global.\n  * Ivanov et al., (RECOMB 2022) \u2014 Introduces SH for read alignment on general graph references using trie.\n\nA*PA global seq-to-seq aligner:\n\n  * Groot Koerkamp and Ivanov (preprint 2023) \u2014 Applies SH to global alignment (edit distance). Generalizes SH with chaining, inexact matches, gap costs (for higher error rates). Optimizes SH with pruning (for near-linear scaling with length), and A* with diagonal transition (for faster quadratic mode). Licensed under the Mozilla Public License, Version 2.0. In short, you are free to use and abuse, but give it back to the community.\n\n## About\n\nA minimal Python re-implementation of the A* with seed heuristic for exact\nglobal alignmnet (edit distance) in near-linear time\n\n### Resources\n\nReadme\n\n### License\n\nMPL-2.0 license\n\n### Citation\n\nActivity\n\n### Stars\n\n9 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n6 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 7\n\n## Languages\n\n  * Jupyter Notebook 85.3%\n  * Python 14.7%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
