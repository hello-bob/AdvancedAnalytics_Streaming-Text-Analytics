{"aid": "40117531", "title": "EdgeDB Free Tier and how we stack up vs. PlanetScale, Supabase, Neon", "url": "https://www.edgedb.com/blog/edgedb-cloud-free-tier-how-we-stack-up-vs-planetscale-supabase-neon", "domain": "edgedb.com", "votes": 4, "user": "beerose", "posted_at": "2024-04-22 18:53:14", "comments": 0, "source_title": "EdgeDB Cloud Free Tier & how we stack up vs. PlanetScale, Supabase, Neon | EdgeDB Blog", "source_text": "EdgeDB Cloud Free Tier & how we stack up vs. PlanetScale, Supabase, Neon | EdgeDB Blog\n\nLogin\n\nall blog posts\n\n  * What is EdgeDB Cloud?\n  * Cloud benchmarks\n  * The Future of EdgeDB Cloud\n\nTweet\n\nSubscribe\n\nApril 22, 2024\n\n# EdgeDB Cloud Free Tier & how we stack up vs. PlanetScale, Supabase, Neon\n\nElvis Pranskevichus@elprans\n\nFantix King@fantix\n\nWe're thrilled to announce the general availability of the EdgeDB Cloud Free\nTier. This marks a significant step forward in making EdgeDB more accessible\nand competitive. But what really sets EdgeDB Cloud apart? Let's dive into the\ndetails and a bit of benchmarking!\n\n##\n\nWhat is EdgeDB Cloud?\n\nSimply put, EdgeDB Cloud is a place where you host your EdgeDB instances with\nminimum fuss. EdgeDB Cloud (the service) and EdgeDB (the software) have been\nco-developed closely to deliver great performance and enhanced developer\nexperience.\n\nHere\u2019s what makes EdgeDB Cloud stand out:\n\nThe CLI: Install with a single curl command, or via npx edgedb, and manage\nboth EdgeDB Cloud and local EdgeDB instances effortlessly.\n\nThe Web UI: The Cloud console lets you control all aspects of your EdgeDB\nCloud database: adding and editing data, visualizing schemas, a command-line\nterminal, and much more.\n\nCloud Dashboard\n\nData Editor\n\nWeb REPL\n\nSchema Browser\n\nFully Integrated Auth: We support multiple OAuth providers and an\nemail/password authentication flow, with many more features set to be\nannounced this week. This feature is tightly integrated with EdgeDB itself and\nits Access Policies framework. Completely open-source and free, and the number\nof active users it supports is unlimited.\n\nSimple and secure configuration: Cloud instance access is authorized by\ngranular secret keys like any modern API should be. Arcane connection strings\nwith shared credentials are a thing of the past.\n\nGreat performance: we have benchmarks to show!\n\n##\n\nCloud benchmarks\n\nTo mark the availability of EdgeDB Cloud Free Tier we extended our IMDBench\ndatabase benchmark suite with the ability to run against popular database\ncloud services. Previously we used simulated network latency to show the real-\nworld impact of database interface (in)efficiency, but today we are able to do\nthis using real services.\n\nAs a reminder, IMDBench models a basic IMDB-like website, featuring endpoints\nfor accessing detailed movie information, actors, directors, reviews, and\nmore. This setup provides a good framework for meaningful performance\nevaluation using slightly non-trivial queries.\n\nIn this run we are comparing EdgeDB to Prisma and Drizzle \u2014 two very popular\nJavaScript ORM libraries running on popular cloud databases with different\nlevels of geographical proximity between the application and the database.\n\n###\n\nThe setup\n\nHere\u2019s what we\u2019re testing here:\n\n  * EdgeDB Cloud: Basic \u201cPaid-tier\u201d plan at $39/month, offering 1 compute unit with 1/4 vCPU and 2 GiB RAM.\n\n  * Supabase: \u201cPro-tier\u201d plan at $25/month plus \u201cSmall\u201d add-on for $15/month, equaling to a shared 2-core ARM vCPU with 2GB RAM.\n\n  * Neon: \u201cLaunch\u201d plan, with auto-suspend disabled and the autoscaler min/max set to 0.5 compute units. This plan includes 1/2 vCPU and 2GiB RAM. The total cost for this setup, boldly assuming the database is used every hour of the month, would be approximately $52/month (calculated as $19 + (24 hours * 30 days - 300 included hours) * $0.16 * 0.5 for half a compute unit).\n\n  * PlanetScale: \u201cPS-10\u201d plan at $39/month, providing 1/8 vCPU and 1GiB RAM. Though PlanetScale runs MySQL, we decided to include it as a comparison point due to its popularity.\n\nThe client application is running on a c7a.xlarge AWS EC2 instance (4vCPU,\n8GiB RAM).\n\nThe database instance configurations are within the same price range and have\ncomparable compute resources.\n\n###\n\nResults: app and db in same cloud region\n\nIMDBench queries from a client machine to the respective database server\nlocated in the same region (either us-east-1 or us-east-2).\n\nRunning atop PostgreSQL, EdgeDB handles a range of tasks\u2014from converting\nEdgeQL to SQL, managing the EdgeDB Auth API, and rendering its user interface,\nto balancing client connections. We\u2019ve invested significant effort to fine-\ntune both EdgeDB and PostgreSQL to ensure optimal performance. Pay specific\nattention to the latency chart: EdgeDB completed 99% queries in 2.9ms, or 6x\nquicker than than the nearest contender \u2014 Drizzle querying Neon.\n\nBut do we run PostgreSQL much faster than others? It\u2019s unlikely. So, where\ndoes the noticeable performance advantage come from? It stems from EdgeDB\u2019s\nability to use the underlying PostgreSQL instance to its full potential.\nEdgeQL, through what only could be described as a bit of \u201cmagic \u2728\u201d, composes\nmultiple operations \u2014 including deep hierarchical queries and data mutations \u2014\ninto one atomic SQL query behind the scenes. This approach eliminates the need\nfor multiple query roundtrips between the client and the server, significantly\nenhancing performance.\n\nLatency within one data center is reasonably low, typically sub millisecond.\nWe measured it to be around 0.2ms when we run our benchmarks. Now time to see\nwhat happens if your database and backend are mere 500 miles from one another.\n\n###\n\nResults: app and db in separate (near) cloud regions\n\nFor the second benchmark let\u2019s see what happens if your database is in us-\neast-1 and your backend code is hosted in us-east-2.\n\nIn this scenario, the results become more dramatic. The latency between\nservers in AWS\u2019s east and west regions is significantly higher than that\nwithin the same region (0.2ms vs. 11ms), which correspondingly reduced the\nthroughput \u2014 cutting it in half or more in some cases. Particularly for less\nefficient ORMs like Prisma, which run more queries behind the scenes compared\nto more efficient ORMs like Drizzle, the impact was substantially greater.\n\n###\n\nResults: app and db in separate (distant) cloud regions\n\nNow let\u2019s see what happens if your database is hosted on the U.S. East Coast,\nwhile your backend operates from the U.S. West Coast. The latency between us-\neast-1 and us-west-1 is typically around 52ms.\n\nCross-region backend <> database communication might sound extreme, but it\u2019s\nmore common than one might think. In edge functions, for example, the latency\ncan be much higher. Using EdgeDB in these scenarios means that you can keep\nthe latency predictable and under control. Conversely, with ORMs, an innocent-\nlooking change can lead to extra queries behind the scenes and unexpectedly\ncompromised performance and cost.\n\nIn this particular case, ORMs no longer perform acceptably, oftentimes taking\nlonger than half a second to fetch the data.\n\nBy the way, you can see the full reports by IMDBench here, here, and here.\n\n###\n\nWhat benchmarks don\u2019t reveal\n\nPerformance benchmarks are straightforward to interpret\u2014they clearly show\nwhat\u2019s faster and what\u2019s slower under specific tests or conditions. However,\nwhat benchmarks often fail to convey is how convenient it is to use a tool,\nor, in other words, whether the developer experience is satisfying.\n\nWhile achieving high performance with raw SQL or ORMs is certainly possible,\nit isn\u2019t effortless and inevitably complicates things \u2014 leading to more\nunreadable and unmaintainable code, as well as requiring various hacks.\n\nAt EdgeDB, our goal is not merely to create the fastest database at the\nexpense of usability. On the contrary, we designed EdgeDB from the ground up\nwith the principles of robustness, type-safety, and composability in querying\ncapabilities. The great performance we observe is a direct consequence of\nthese foundational choices.\n\n##\n\nThe Future of EdgeDB Cloud\n\nThe launch of our free tier is more than just an offer \u2014 it\u2019s a commitment to\nproviding developers with the best possible tools to create and scale\napplications effortlessly.\n\nWe envision EdgeDB Cloud to be a powerful data layer that gives you a state-\nof-the-art database experience along with application-level services like\nintegrated Auth, AI (more on this soon!), and storage.\n\nMost importantly, we believe that EdgeDB Cloud has to integrate deeply with\nthe tools you use daily, like GitHub, Vercel, and many others, to ensure\nsmooth workflow. Stay tuned for more announcements this week as we have a lot\nof new exciting things coming! \u2764\ufe0f\n\n### CHECK THE OTHER POSTS\n\nEdgeDB Cloud and EdgeDB 4.0\n\nWhy ORMs are slow (and getting slower)\n\nALL BLOG POSTS\n\nProduct\n\nHomeCloudPricingCloud Status\n\nResources\n\nQuickstartDocumentationTutorialEasy EdgeDBCommunity Discord\n\nCompany\n\nAboutPress KitTerms of UsePrivacy PolicyCloud Terms and Conditions\n\nNewsletter\n\nSubscribe to our mailing list to be the first to know about new blog posts and\nannouncements.\n\nRSS\n\n\u00a9 2024, EdgeDB Inc.\n\n", "frontpage": false}
