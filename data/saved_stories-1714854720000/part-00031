{"aid": "40256574", "title": "UEFI, BIOS, and other confusing x86 PC (firmware) terms", "url": "https://utcc.utoronto.ca/~cks/space/blog/tech/UEFIAndBIOSAndOtherPCTerms", "domain": "utcc.utoronto.ca", "votes": 31, "user": "ingve", "posted_at": "2024-05-04 10:49:21", "comments": 4, "source_title": "Chris's Wiki :: blog/tech/UEFIAndBIOSAndOtherPCTerms", "source_text": "Chris's Wiki :: blog/tech/UEFIAndBIOSAndOtherPCTerms\n\nChris Siebenmann :: CSpace \u00bb blog \u00bb tech \u00bb UEFIAndBIOSAndOtherPCTerms\n\nWelcome, guest.\n\n## UEFI, BIOS, and other confusing x86 PC (firmware) terms\n\nMay 3, 2024\n\nIBM compatible x86 PCs have come with firmware since their first days. This\nfirmware was called (the) BIOS, and so over time 'BIOS' became the generic\nterm for 'IBM compatible x86 PC firmware' (which could come from various\ncompanies who carefully reimplemented it from scratch in ways that didn't\nviolate IBM's copyrights). Over time, PC firmware ('BIOS') got more complex\nand acquired more (boot time) user interface features, like all sorts of\nsplash screens, tuning options, semi-graphical interfaces, and so on. However,\nthe actual BIOS API, primarily used at boot time, stayed more or less\nunchanged and as a result PCs kept booting in a simple and limited way,\n(mostly) using the Master Boot Record (MBR).\n\nVarious people in the x86 PC world have wanted more sophisticated firmware for\na long time (firmware that was more like the firmware that non-x86 servers and\nworkstations often had). The 'BIOS MBR' boot sequence was very limited and\nawkward, and a variety of features that people wanted had to be wedged in with\ntricks and extensions. This led to UEFI, which is technically a standard for\nthe APIs and behavior of 'UEFI' firmware (with multiple implementations from\nvarious 'BIOS' (firmware) vendors). As part of this standard, UEFI boots\nmachines in a completely different and more powerful way than through the MBR\n(and UEFI provides some official ways of controlling what should get booted).\n\nToday (and for some time) basically all x86 PCs have firmware that officially\nsupports and implements the UEFI standards (although how well has varied over\ntime; early UEFI support had various problems). This is variously called 'UEFI\nfirmware', 'UEFI BIOS', just 'UEFI', or even 'BIOS with UEFI' (which is how\nsome of the earliest implementations actually felt, as if the UEFI features\nand requirements were bolted on the side of the existing BIOS). And these\ndays, because 'BIOS' became the generic name for x86 PC firmware, people may\nsay 'BIOS' (eg 'changing BIOS settings') and in practice mean 'UEFI firmware'\nas opposed to 'BIOS without UEFI support'.\n\n(The giant exception to pervasive UEFI firmware is various virtualization\nsystems, for example on Linux. Unless you specifically ask for firmware with\nUEFI support, these often provide virtual machines with firmware that is truly\nBIOS firmware, with no UEFI features. There are various reasons for this\nbeyond the scope of this entry.)\n\nWhen people talk about doing things with x86 PC firmware, such as booting the\nsystem, they often say 'UEFI' to mean 'booting through UEFI native processes\nand APIs' and 'BIOS' to mean MBR booting. Since most x86 PCs have UEFI\nfirmware these days, MBR booting is generally using UEFI's optional support\nfor this, as opposed to an actual BIOS firmware (except on (some) virtual\nmachines).\n\nAs a corollary to this, if someone talks about a 'UEFI only' machine, what\nthey probably mean is a machine that has no support for MBR booting. In\npractice, probably most or all x86 firmware on real hardware has been\nfundamentally UEFI firmware for years (although it's possible that PC firmware\nvendors have built frankenfirmware that was one part UEFI and one part genuine\nBIOS).\n\nAll of this (mis)usage persists partly because it's short, especially when you\nget to phrases like 'this server is UEFI only'. And generally people know what\nyou mean.\n\nPS: My impression is that server firmware is more likely to stick to the UEFI\nstandard and specification, while firmware in consumer focused desktop\nmotherboards and systems may be more inclined to do things like hunt around\nrandomly to find plausible UEFI boot targets.\n\nWritten on 03 May 2024.\n\n| \u00ab| Thinking about filesystem space allocation policies and SSDs  \n---|---  \n  \nThese are my WanderingThoughts (About the blog)\n\nFull index of entries Recent comments\n\nThis is part of CSpace, and is written by ChrisSiebenmann. Mastodon: @cks\nTwitter @thatcks\n\n* * *\n\nCategories: links, linux, programming, python, snark, solaris, spam, sysadmin,\ntech, unix, web Also: (Sub)topics\n\nThis is a DWiki. GettingAround (Help)\n\nPage tools: View Source, Add Comment.\n\nAtom Syndication: Recent Comments.\n\nLast modified: Fri May 3 23:22:24 2024 This dinky wiki is brought to you by\nthe Insane Hackers Guild, Python sub-branch.\n\n", "frontpage": true}
