{"aid": "40165998", "title": "Passkeys: A Shattered Dream", "url": "https://fy.blackhats.net.au/blog/2024-04-26-passkeys-a-shattered-dream/", "domain": "blackhats.net.au", "votes": 21, "user": "nmjenkins", "posted_at": "2024-04-26 04:36:39", "comments": 4, "source_title": "Firstyear's blog-a-log", "source_text": "Firstyear's blog-a-log\n\nFirstyear's blog-a-log\n\n# Passkeys: A Shattered Dream\n\n26 Apr 2024\n\nAt around 11pm last night my partner went to change our lounge room lights\nwith our home light control system. When she tried to login, her account\ncouldn't be accessed. Her Apple Keychain had deleted the Passkey she was using\non that site.\n\nThis is just the icing on a long trail of enshittification that has undermined\nWebauthn. I'm over it at this point, and I think it's time to pour one out for\nPasskeys. The irony is not lost on me that I'm about to release a new major\nversion of webauthn-rs today as I write this.\n\n## The Dream\n\nIn 2019 I flew to my mates place in Sydney and spent a week starting to write\nwhat is now the Webauthn library for Rust. In that time I found a number of\nissues in the standard and contributed improvements to the Webauthn workgroup,\neven though it took a few years for those issues to be resolved. I started to\nreview things and participate more.\n\nAt the time there was a lot of optimism that this technology could be the end\nof passwords. You had three major use cases:\n\n  * Second Factor\n  * Passwordless\n  * Usernameless\n\nSecond Factor was a stepping stone toward the latter two. Passwordless is\nwhere you would still type in an account name then authenticate with PIN+Touch\nto your security key, and usernameless is where the identity for your account\nwas resident (discoverable) on the key. This was (from my view) seen as a\nniche concept by developers since really - how hard is it for a site to have a\ncheckbox that says \"remember me\"?\n\nThis library ended up with Kanidm being (to my knowledge) the very first\nOpenSource IDM to implement passwordless (now passkeys). The experience was\nwonderful. You went to Kanidm, typed in your username and then were prompted\nto type your PIN and touch your key. Simple, fast, easy.\n\nFor devices like your iPhone or Android, you would do similar - just use your\nTouch ID and you're in.\n\nIt was so easy, so accessible, I remember how it almost felt impossible. That\nauthentication could be cryptographic in nature, but so usable and trivial for\nconsumers. There really was the idea and goal within FIDO and Webauthn that\nthis could be \"the end of passwords\".\n\nThis is what motivated me to continue to improve webauthn-rs. It's reach has\ngone beyond what I expected with parts of it being used in Firefox's\nauthenticator-rs, a whole microcosm of Rust Identity Providers (IDPs) being\ncreated from this library and my work, and even other language's Webauthn\nimplementations and password managers using our library as the reference\nimplementation to test against. I can not understate how humbled I am of the\ninfluence webauthn-rs has had.\n\n## The Warnings\n\nHowever warnings started to appear that the standard was not as open as people\nenvisaged. The issue we have is well known - Chrome controls a huge portion of\nthe browser market, and development is tightly controlled by Google.\n\nAn example of this was the Authenticator Selection Extension.\n\nThis extension is important for sites that have strict security requirements\nbecause they will attest the make and model of the authenticator in use. If\nyou know that the attestation will only accept certain devices, then the\nbrowser should filter out and only allow those devices to participate.\n\nHowever Chrome simply never implemented it leading to it being removed. And it\nwas removed because Chrome never implemented it. As a result, if Chrome\ndoesn't like something in the specification they can just veto it without\nconsequence.\n\nLater the justification for this not being implemented was: \"We have never\nimplemented it because we don't feel that authenticator discrimination is\nbroadly a good thing. ... they [users] can't have the expectation that a given\nsecurity key will broadly work where they want to use it.\"\n\nI want you to remember this quote and it's implications.\n\nUsers should be able to use any device they choose without penalty.\n\nNow I certainly agree with this notion for general sites on the internet, but\nwithin a business where we have policy around what devices may be acceptable\nthe ability to filter devices does matter.\n\nThis makes it very possible that you can go to a corporate site, enroll a\nsecurity key and it appears to work but then it will fail to register (even\nbetter if this burns one of your resident key slots) since the IDP rejected\nthe device attestation. That's right, even without this, IDP's can still\n\"discriminate\" against devices without this extension, but the consequences\nare far more severe now.\n\nThe kicker is that Chrome has internal feature flags that they can use for\nGoogle's needs. They can simply enable their own magic features that control\nauthenticator models for their policy, while everyone else has to have a\nlesser experience.\n\nThe greater warning here is that many of these decisions are made at \"F2F\" or\nFace to Face meetings held in the US. This excludes the majority of\ninternational participants leading some voices to be stronger than others.\nIt's hard to convince someone when you aren't in the room, even more so when\nthe room is in a country that has a list of travel advisories including\n\"Violent crime is more common in the US than in Australia\", \"There is a\npersistent threat of mass casualty violence and terrorist attacks in the US\"\nand \"Medical costs in the US are extremely high. You may need to pay up-front\nfor medical assistance\". (As an aside, there are countries that have a \"do not\ntravel\" warning for less, but somehow the US gets a pass ...).\n\n## The Descent\n\nIn 2022 Apple annouced Passkeys.\n\nAt the time this was just a really nice \"marketing\" term for passwordless, and\nApple's Passkeys had the ability to oppurtunistically be usernameless. It was\nall in all very polished and well done.\n\nBut of course, thought leaders exist, and Apple hadn't defined what a Passkey\nwas. One of those thought leaders took to the FIDO conference stage and\nannounced \"Passkeys are resident keys\", at the same time as the unleashed a\npasskeys dev website (I won't link to it out of principal).\n\nThe issue is described in detail in another of my blog posts but to summarise,\nthis push to resident keys means that security keys are excluded because they\noften have extremely low limits on storage, the highest being 25 for yubikeys.\nThat simply won't cut it for most people where they have more than 25\naccounts.\n\nNow with resident keys as passkeys as users we certainly don't have the\nexpectation that our keys will work when we want to use them!\n\n## The Enshittocene Period\n\nSince then Passkeys are now seen as a way to capture users and audiences into\na platform. What better way to encourage long term entrapment of users then by\nlocking all their credentials into your platform, and even better, credentials\nthat can't be extracted or exported in any capacity.\n\nBoth Chrome and Safari will try to force you into using either hybrid (caBLE)\nwhere you scan a QR code with your phone to authenticate before they activate\nyour security key. caBLE is not even a good experience, taking more than 60\nseconds work in most cases. The UI is beyond obnoxious at this point.\nSometimes I think the password game has a better ux.\n\nThe more egregious offender is Android, which won't even activate your\nsecurity key if the website sends the set of options that are needed for\nPasskeys. This means the IDP gets to choose what device you enroll without\nyour input. And of course, all the developer examples only show you the\noptions to activate \"Google Passkeys stored in Google Password Manager\". Why\nwould you want to use anything else?\n\nA sobering pair of reads are the Github Passkey Beta and Github Passkey\nthreads. There are instances of users whose security keys are not able to be\nenrolled as the resident key slots are filled. Multiple users describe that\nAndroid can not create Passkeys due to platform bugs. Some devices need\nfirmware resets to create Passkeys. Keys can be saved on the client but not\nthe server leading to duplicate account presence and credentials that don't\nwork.\n\nExternally there are other issues. Apple Keychain has personally wiped out all\nmy Passkeys on three separate occasions. There are external reports we have\nrecieved of other users who's Keychain Passkeys have been wiped just like\nmine.\n\nNow we don't have the expectation that we can create keys or they will be\nthere when we go to use them.\n\nIn order to try to resolve this the workgroup seems to be doubling down on\nmore complex JS apis to try to patch over the issues that they created in the\nfirst place. All this extra complexity comes with fragility and more bad\nexperiences, but without resolving the core problems.\n\nIt's a mess.\n\n## The Future\n\nAt this point I think that Passkeys will fail in the hands of the general\nconsumer population. We missed our golden chance to eliminate passwords\nthrough a desire to capture markets and promote hype. Corporate interests have\noverruled good user experience once again. Just like ad-blockers, I predict\nthat Passkeys will only be used by a small subset of the technical population,\nand consumers will generally reject them.\n\nTo reiterate - my partner, who is extremely intelligent, an avid computer\ngamer and veterinary surgeon has sworn off Passkeys because the user\nexperience is so shit. She wants to go back to passwords.\n\nAnd I'm starting to agree - a password manager gives a better experience than\npasskeys.\n\nThat's right. I'm here saying passwords are a better experience than passkeys.\n\nSo do yourself a favour. Get something like bitwarden or if you like self\nhosting get vaultwarden. Let it generate your passwords and manage them. If\nyou really want passkeys, put them in a password manager you control. But\ndon't use a platform controlled passkey store, and be very careful with\nsecurity keys. If you do want to use a security key, just use it to unlock\nyour password manager and your email.\n\nWithin enterprise there still is a place for attested security keys where you\ncan control the whole experience to avoid the vendor lockin parts. It still\nhas rough edges though. Just today I found a browser that has broken\nattestation which is not good. You still have to dive through obnoxious UX\nelements that attempt to force you through caBLE even though your IDP will\nonly accept certain security models, so you're still likely to have some\nconfused users.\n\nAt this point, in Kanidm we are looking into device certificates and\nsmartcards instead. The UI is genuinely better. Which says a lot considering\nthe PKCS11 and PIV specifications. But at least PIV won't fall prone to\nattempts to enshittify it.\n\nCopyright \u00a9 William Brown Powered by Zola | Theme Oceanic Zen\n\n", "frontpage": true}
