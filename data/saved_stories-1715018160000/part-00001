{"aid": "40273534", "title": "Design Docs at Google", "url": "https://www.industrialempathy.com/posts/design-docs-at-google/", "domain": "industrialempathy.com", "votes": 1, "user": "BerislavLopac", "posted_at": "2024-05-06 11:54:25", "comments": 0, "source_title": "Design Docs at Google", "source_text": "Design Docs at Google\n\n# Design Docs at Google\n\n11 minute read. 88 comments\n\nOne of the key elements of Google's software engineering culture is the use of\ndesign docs for defining software designs. These are relatively informal\ndocuments that the primary author or authors of a software system or\napplication create before they embark on the coding project. The design doc\ndocuments the high level implementation strategy and key design decisions with\nemphasis on the trade-offs that were considered during those decisions.\n\nAs software engineers our job is not to produce code per se, but rather to\nsolve problems. Unstructured text, like in the form of a design doc, may be\nthe better tool for solving problems early in a project lifecycle, as it may\nbe more concise and easier to comprehend, and communicates the problems and\nsolutions at a higher level than code.\n\nBesides the original documentation of a software design, design docs fulfill\nthe following functions in the software development lifecycle:\n\n  * Early identification of design issues when making changes is still cheap.\n\n  * Achieving consensus around a design in the organization.\n\n  * Ensuring consideration of cross-cutting concerns.\n\n  * Scaling knowledge of senior engineers into the organization.\n\n  * Form the basis of an organizational memory around design decisions.\n\n  * Acts as a summary artifact in the technical portfolio of the software designer(s).\n\n## Anatomy of a design doc #\n\nDesign docs are informal documents and thus don\u2019t follow a strict guideline\nfor their content. Rule #1 is: Write them in whatever form makes the most\nsense for the particular project.\n\nHaving said that, a certain structure has established itself as really useful.\n\n### Context and scope #\n\nThis section gives the reader a very rough overview of the landscape in which\nthe new system is being built and what is actually being built. This isn\u2019t a\nrequirements doc. Keep it succinct! The goal is that readers are brought up to\nspeed but some previous knowledge can be assumed and detailed info can be\nlinked to. This section should be entirely focused on objective background\nfacts.\n\n### Goals and non-goals #\n\nA short list of bullet points of what the goals of the system are, and,\nsometimes more importantly, what non-goals are. Note, that non-goals aren\u2019t\nnegated goals like \u201cThe system shouldn\u2019t crash\u201d, but rather things that could\nreasonably be goals, but are explicitly chosen not to be goals. A good example\nwould be \u201cACID compliance\u201d; when designing a database, you\u2019d certainly want to\nknow whether that is a goal or non-goal. And if it is a non-goal you might\nstill select a solution that provides it, if it doesn\u2019t introduce trade-offs\nthat prevent achieving the goals.\n\n### The actual design #\n\nThis section should start with an overview and then go into details.\n\nThe design doc is the place to write down the trade-offs you made in designing\nyour software. Focus on those trade-offs to produce a useful document with\nlong-term value. That is, given the context (facts), goals and non-goals\n(requirements), the design doc is the place to suggest solutions and show why\na particular solution best satisfies those goals.\n\nThe point of writing a document over a more formal medium is to provide the\nflexibility to express the problem set at hand in an appropriate manner.\nBecause of this, there is no explicit guidance for how to actually describe\nthe design.\n\nHaving said that, a few best practices and repeating topics have emerged that\nmake sense for a large percentage of design docs:\n\n#### System-context-diagram #\n\nIn many docs a system-context-diagram can be very useful. Such a diagram shows\nthe system as part of the larger technical landscape and allows readers to\ncontextualize the new design given its environment that they are already\nfamiliar with.\n\nExample of a system-context-diagram.\n\n#### APIs #\n\nIf the system under design exposes an API, then sketching out that API is\nusually a good idea. In most cases, however, one should withstand the\ntemptation to copy-paste formal interface or data definitions into the doc as\nthese are often verbose, contain unnecessary detail and quickly get out of\ndate. Instead focus on the parts that are relevant to the design and its\ntrade-offs.\n\n#### Data storage #\n\nSystems that store data should likely discuss how and in what rough form this\nhappens. Similar to the advice on APIs, and for the same reasons, copy-pasting\ncomplete schema definitions should be avoided. Instead focus on the parts that\nare relevant to the design and its trade-offs.\n\n#### Code and pseudo-code #\n\nDesign docs should rarely contain code, or pseudo-code except in situations\nwhere novel algorithms are described. As appropriate, link to prototypes that\nshow the implementability of the design.\n\n#### Degree of constraint #\n\nOne of the primary factors that would influence the shape of a software design\nand hence the design doc, is the degree of constraint of the solution space.\n\nOn one end of the extreme is the \u201cgreenfield software project\u201d, where all we\nknow are the goals, and the solution can be whatever makes the most sense.\nSuch a document may be wide-ranging, but it also needs to quickly define a set\nof rules that allow zooming in on a manageable set of solutions.\n\nOn the other end are systems where the possible solutions are very well\ndefined, but it isn\u2019t at all obvious how they could even be combined to\nachieve the goals. This may be a legacy system that is difficult to change and\nwasn\u2019t designed to do what you want it to do or a library design that needs to\noperate within the constraints of the host programming language.\n\nIn this situation you may be able to enumerate all the things you can do\nrelatively easily, but you need to creatively put those things together to\nachieve the goals. There may be multiple solutions, and none of them are\nreally great, and hence such a document should focus on selecting the best way\ngiven all identified trade-offs.\n\n### Alternatives considered #\n\nThis section lists alternative designs that would have reasonably achieved\nsimilar outcomes. The focus should be on the trade-offs that each respective\ndesign makes and how those trade-offs led to the decision to select the design\nthat is the primary topic of the document.\n\nWhile it is fine to be succinct about solution that ended up not being\nselected, this section is one of the most important ones as it shows very\nexplicitly why the selected solution is the best given the project goals and\nhow other solutions, that the reader may be wondering about, introduce trade-\noffs that are less desirable given the goals.\n\n### Cross-cutting concerns #\n\nThis is where your organization can ensure that certain cross-cutting concerns\nsuch as security, privacy, and observability are always taken into\nconsideration. These are often relatively short sections that explain how the\ndesign impacts the concern and how the concern is addressed. Teams should\nstandardize what these concerns are in their case.\n\nDue to their importance, Google projects are required to have a dedicated\nprivacy design doc, and there are dedicated reviews for privacy and security.\nWhile the reviews are only required to be completed by the time a project\nlaunches, it is best practice to engage with privacy and security teams as\nearly as possible to ensure that designs take them into account from the\nground up. In case of dedicated docs for these topics, the central design doc\ncan, of course, reference them instead of going into detail.\n\n### The length of a design doc #\n\nDesign docs should be sufficiently detailed but short enough to actually be\nread by busy people. The sweet spot for a larger project seems to be around\n10-20ish pages. If you get way beyond that, it might make sense to split up\nthe problem into more manageable sub problems. It should also be noted that it\nis absolutely possible to write a 1-3 page \u201cmini design doc\u201d. This is\nespecially helpful for incremental improvements or sub tasks in an agile\nproject\u2013you still do all the same steps as for a longer doc, just keep things\nmore terse and focused on a limited problem set.\n\n## When not to write a design doc. #\n\nWriting design docs is overhead. The decision whether to write a design doc\ncomes down to the core trade-off of deciding whether the benefits in\norganizational consensus around design, documentation, senior review, etc.\noutweigh the extra work of creating the doc. At the center of that decision\nlies whether the solution to the design problem is ambiguous\u2013because of\nproblem complexity or solution complexity, or both. If it is not, then there\nis little value in going through the process of writing a doc.\n\nA clear indicator that a doc might not be necessary are design docs that are\nreally implementation manuals. If a doc basically says \u201cThis is how we are\ngoing to implement it\u201d without going into trade-offs, alternatives, and\nexplaining decision making (or if the solution is so obvious as to mean there\nwere no trade-offs), then it would probably have been a better idea to write\nthe actual program right away.\n\nFinally, the overhead of creating and reviewing a design doc may not be\ncompatible with prototyping and rapid iteration. However, most software\nprojects do have a set of actually known problems. Subscribing to agile\nmethodologies is not an excuse for not taking the time to get solutions to\nactually known problems right. Additionally, prototyping itself may be part of\nthe design doc creation. \u201cI tried it out and it works\u201d is one of the best\narguments for choosing a design.\n\n## The design doc lifecycle #\n\nThe steps in the lifecycle of a design document are:\n\n  1. Creation and rapid iteration\n  2. Review (may be in multiple rounds)\n  3. Implementation and iteration\n  4. Maintenance and learning\n\n### Creation and rapid iteration #\n\nYou write the doc. Sometimes together with a set of co-authors.\n\nThis phase quickly evolves into a time of rapid iteration where the doc is\nshared with colleagues who have the most knowledge about the problem space\n(often belonging to the same team) and through their clarifying questions and\nsuggestions drive the doc to a first relatively stable version.\n\nWhile you certainly find engineers and even teams who prefer version control\nand code review tools for document creation, the vast majority of design docs\nat Google are created in Google Docs and make heavy use of its collaboration\nfeatures.\n\n### Review #\n\nIn the review phase a design doc gets shared with a wider audience than the\noriginal set of authors and close collaborators. Reviews can add a lot of\nvalue, but they are also a dangerous trap of overhead, so treat them wisely.\n\nA review can take many shapes: The more lightweight version is simply sending\nout the doc to the (wider) team-list to give folks a chance to take a look.\nDiscussion then primarily happens in comment threads in the document. On the\nheavy side of reviews, are formal design review meetings in which the author\npresents the doc (often via a dedicated presentation) to an often very senior\nengineering audience. Many teams at Google have recurring meetings scheduled\nfor this purpose to which engineers can sign up to for a review. Naturally\nwaiting for such meetings to happen can significantly slow down the\ndevelopment process. Engineers can mitigate this by seeking the most crucial\nfeedback directly and not blocking progress on wider review.\n\nWhen Google was a smaller company, it was customary to send designs to a\nsingle central mailing list, where senior engineers would review them at their\nown leisure. This may very well be a great way to handle things for your\ncompany. One benefit was that it did establish a relatively uniform software\ndesign culture across the company. But as the company scaled to a much larger\nengineering team, it became infeasible to maintain the centralized approach.\n\nThe primary value that such reviews add is that they form an opportunity for\nthe combined experience of the organization to be incorporated into a design.\nMost consistently, ensuring that designs take cross-cutting concerns such as\nobservability, security and privacy into account is something that can be\nensured in a review stage. The primary value of the review isn\u2019t that issues\nget discovered per-se, but rather that this happens relatively early in the\ndevelopment lifecycle when it is still relatively cheap to make changes.\n\n### Implementation and iteration #\n\nWhen things have progressed sufficiently to have confidence that further\nreviews are unlikely to require major changes to the design, it is time to\nbegin implementation. As plans collide with reality, it is inevitable that\nshortcomings, unaddressed requirements, or educated guesses that turned out to\nbe wrong surface, and require changing the design. It is strongly recommended\nto update the design doc in this case. As a rule of thumb: If the designed\nsystem hasn\u2019t shipped yet, then definitely update the doc. In practice we\nhumans are bad at updating documents, and for other practical reasons changes\nare often isolated into new documents. This leads to an eventual state more\nakin to the US constitution with a bunch of amendments rather than one\nconsistent piece of documentation. Links to such amendments from the original\ndoc can be immensely helpful for the poor future maintenance programmer trying\nto understand their target system through design doc archaeology.\n\n### Maintenance and learning #\n\nWhen Google engineers get confronted with a system that they hadn\u2019t previously\ntouched their first question often is \u201cWhere is the design doc?\u201d. While design\ndocs, like all documentation, tend to get out of sync with reality over time,\nthey still often present the most accessible entry point to learn about the\nthinking that guided the creation of the system.\n\nAs the author, do yourself a favor and re-read your own design docs a year or\n2 later. What did you get right? What did you get wrong? What would you do to\ndecide differently today? Answering these questions is a great way to advance\nas an engineer and improve software design skills over time.\n\n## Conclusions #\n\nDesign docs are a great way to gain clarity and achieve consensus around\nsolving the hardest problems in a software project. They save money, because\nthey avoid going down coding rabbit holes that fail to achieve project goals\nand could have been avoided using upfront investigation; and they cost money,\nbecause creation and review take time. So, choose wisely for your project!\n\nWhen considering writing a design doc, think about these points:\n\n  * Are you unsure about the right software design, and would it make sense to spend upfront time to gain certainty?\n\n  * Relatedly, would it help to involve senior engineers, who might not be able to review every code-change, in the design?\n\n  * Is the software design ambiguous or even contentious such that achieving organizational consensus around it would be valuable?\n\n  * Does my team sometimes forget to consider privacy, security, logging or other cross-cutting concerns in the design?\n\n  * Is there a strong need for documents that provide high-level insights into the design of legacy systems in the organization?\n\nIf you answer yes to 3 or more of these questions, then a design doc is\nprobably a great method to start your next software project.\n\n# Related posts #\n\n  * Design docs \u2013 A design doc\n\n# \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\n\nSince you've made it this far, sharing this article on your favorite social\nmedia network would be highly appreciated \ud83d\udc96! For feedback, please ping me on\nTwitter.\n\n# Comments #\n\n> Gergely Orosz said: A good overview of how software design docs are used and\n> written at Google: . A recommended read. At Uber, we have a similar\n> approach, previously called RFCs, now ERDs (Engineering Review Docs). Some\n> interesting parts from the article: Thread\n\n> Gergely Orosz said: A few examples: - Google: a writeup from @cramforce here\n> - @canva: they have a few hundred engineers - @stedi: starting from when\n> they had a few devs - Uber: starting when the company had a few dozen\n> engineers. My writeup here: Thread\n\n> Clay Walker said: I'm a strong believer in the value of design docs, and\n> @cramforce has written some great guides on how they are written at Google\n> Thread\n\n> Amir Salihefendi\u0107 said: \"As software engineers our job is not to produce\n> code per se, but rather to solve problems. Unstructured text, like in the\n> form of a design doc, may be the better tool for solving problems early in a\n> project lifecycle...\"\u2014 Applies also to design and product\n\n> karan\u26a1\ufe0f said: 1/n This is such a well-written post by @cramforce A short\n> summary \ud83d\udc47\ud83c\udffc Thread\n\n> Bret Mogilefsky said: Terrific balance between the need for oversight and\n> the need for agility.\n\n> Siddhant Khare said: pure gold\n\n> Flying Belarusian \ud83e\udd0d\u2764\ufe0f\ud83e\udd0d said: \"As software engineers our job is not to\n> produce code per se, but rather to solve problems.\" Thread\n\n> Dean Henrichsmeyer said: This is a very well articulated article on design\n> documents - what is in them, why you have them, and when to use them. The\n> one thing I would add is that in a distributed organization, they are even\n> more critical. - Thread\n\n> Richard Seroter said: Where @cramforce explains \"design docs at Google\" by\n> laying out the structure, and when you don't need to write one ... Thread\n\n> Yoav Weiss said: @GergelyOrosz @cramforce wait, I meant (but the other one's\n> funnier)\n\n> Henry Robinson said: I know this did the rounds a short while ago, but what\n> an excellent, concise and insightful write up of the benefits of design\n> docs. Writing well is a superpower for engineers, and is a skill that\n> reliably tracks with seniority IME.\n\n> Fabien Townsend \ud83d\udc0c said: Here is three resources about design doc in software\n> that I find out helpful: - by @cramforce - by @GergelyOrosz - by @clemmihai\n\n> robin said: For people interested:\n\n> Sofiya said: Starting my first (professional) design doc and using this\ud83d\udc47as a\n> model. How do you structure your design docs?\n\n> Dino A. Dai Zovi said: How Google does design docs:\n\n> Miguel Filipe said: Two cool articles: 1. debugging oncall incidents - 2.\n> design docs\n\n> Sai said: Figuring out what/how to document technical design, and how\n> detailed it should be, while creating #code has always been part of the\n> evolution of a #SoftwareEngineer. #100DaysofCode #Developer Good article on\n> Design docs at Google:\n\n> julien lind said: A quick and nice read if you are thinking or have ever\n> though about design documentation for your software!\n\n> Victor Lee said: I like the \"How to draw an owl\" image so much... And\n> sometimes, I feel like the request is on step 0, \"Please draw a bird for\n> me\", and even not telling me that it should be an owl. @cramforce\n\n> Tony Vlachakis said: I learned from the following people last week:\n> @forgeofman @microwisdoms @btantheman @BeyondInvestor @pashabitz @richhickey\n> @cramforce @HustleWithRoss 1/13 Thread \u2b07\ufe0f Thread\n\n> Emil Rasmussen said: 1/ There is something about how @basecamp uses The\n> Pitch () that resonates with me on how @googledevs uses Design Docs Thread\n\n> Ivan Velichko said: Probably the only right way to make major changes in big\n> tech departments.\n\n> Marvel said: \"The decision whether to write a design doc comes down to the\n> core trade-off of deciding whether the benefits in organizational consensus\n> around design, documentation, senior review, etc. outweigh the extra work of\n> creating the doc.\" by @cramforce\n\n> Christian Hartmann said: UX: Design Docs at Google by @cramforce \u2013 one of\n> the key elements of Google's software engineering culture is the use of\n> defining software designs through design docs \u00bb\n\n> Ben Dixon said: The piece itself is about design docs but includes some\n> great insights into how to think about planning in the context of planning\n> and agile development\n\n> Akaash Patnaik said: Google's Technical Writing courses: Divio's\n> Documentation System: Design docs at Google:\n\n> Tom Larkworthy said: @smtology So u want a design doc e.g. and you are\n> struggling with granularity in the technical section. My opinion is document\n> the API hosts and permissions required (not code, not URLs). Follow the\n> execution against user journeys and highlight any state storage. Thread\n\n> Quality not innovation. said: A good description, but this works well only\n> when the problem is well understood, otherwise you're better off beginning\n> by taking some time to write a prototype in //experimental. Thread\n\n> Florian Pfisterer said: > When Google engineers get confronted with a system\n> that they hadn\u2019t previously touched, their first question often is \u201cWhere is\n> the design doc?\u201d \ud83d\udc49\n\n> arianfront said: Design Docs at @Google The end of RCFs or Technical\n> Proposals?\n\n> Reuven Yagel said: Great intro to design docs at Google by @cramforce. We\n> usually add also some info on project planning and risk mitigation\n\n> Atelier Lumikha said: A really great approach to thinking through the\n> problem:\n\n> rolgalan said: Nice summary by @cramforce about the best points and benefits\n> of Google's Design Docs. At Glovo we follow the same process, but called\n> them Request For Comments as (Uber used to). I find it quite valuable and a\n> great engineering practice. Thread\n\n> Tiago Vignatti said: \"design docs fulfill the following functions in the\n> software development lifecycle: - Early identification of design issues when\n> making changes is still cheap. - Achieving consensus around a design in the\n> organization... \" Thread\n\n> Esther Schindler said: Why design documents are useful and what they should\n> include.\n\n> Code Climate said: \"Design docs are a great way to gain clarity and achieve\n> consensus around solving the hardest problems in a software project.\" -\n> @cramforce shares Google's design doc framework:\n\n> Ryan McAdams said: A great read about #design docs at\n\n> Bernie Goldbach said: If it looks out of place on screen, perhaps you need a\n> Design Doc:\n\n> Pablo Lara H said: Design Docs at @Google by @cramforce\n\n> Kelly Smith said: \"Besides the original documentation of a software design,\n> design docs fulfill the following functions in the software development\n> lifecycle: Early identification of design issues when making changes is\n> still cheap.\" + more practical stuff for everyone.\n\n> #Soapbox said: I'm constantly evolving our design docs and will certainly\n> add this to my arsenal. >> Design Docs at Google\n\n> Dave Crossland said: @thomas_lord Writing the design doc(*) is a part time\n> one person job that I expect I can commission you on * Thread\n\n> \u9867\u5ba2\u8ab2\u984cpickup\u96fb\u8a71\u30d4\u30af\u30dd\u30f3CEO\u306eyobata said: Design Docs at GoogleOne of the key\n> elements of Google's software engineering culture is the use of defining\n> so...\n\n> James Le said: One of the key elements of Google\u2019s software engineering\n> culture is the use of defining software designs through design docs.\n> @cramforce\n\n> Tony Vlachakis said: Unstructured text composed in a design document could\n> be a useful tool before coding begins. @cramforce\n\n> Michael Bianco said: Great overview of how design docs are written at google\n\n> Mukul Kumar said: Good short read: \"Design Docs at Google\"\n\n> Larry Wright said: Great read on the importance of design documents.\n\n> Krishna Mehra said: A very useful reminder of the core purpose Design Doc\n> serves in rigorous engineering cultures like that of @Cohesity (very much\n> adapted from Google!) - something that's often lost in the process!\n\n> Scott said: The longer I work on loosely defined software projects, the more\n> I like the idea of some soft of documentation.\n\n> madewithlove said: A look at how design documents are structured at Google\n> when tackling complex software problems\n\n> Saha said: The decision whether to write a design doc comes down to the core\n> trade-off of deciding whether the benefits in organizational consensus\n> around design, documentation, senior review, etc. outweigh the extra work of\n> creating the doc.\n\n> DwaynePhillips said: How the software engineers at Google write design\n> documents. These are useful and used\n\n> Jean-Marc Liotier said: Yes, choosing \"agile\" methods doesn't mean that\n> writing proper design documents isn't useful anymore.\n\n> Paul Oliver \u2055 said: Does your organization write design docs before\n> embarking on changing your software? I've come to love design docs because\n> they force me to think thoroughly through the problem and it gives me\n> invaluable feedback.\n\n> Senthil said: A neat pragmatic overview by @cramforce on how to approach\n> design docs for software systems\n\n> Hamza ERBAY said: This is such a well-written article by @cramforce\n\n> rmz said: @georgebernhard @pati_gallardo Finally, an excellent systems\n> design technique is to write clear prose. is one template for doing this,\n> but this is just one of a myriad of ways to help when writing. It doesn\u2019t\n> hurt using a template, but the clarity is the important part. N/N\n\n> Petran \ud83d\udc7d\ud83d\udc80\u2620\ufe0f said: Tech docs are part of the software development process.\n> Investing on great tech docs worth a lot Check out \ud83d\udc47\n\n> Dan Kleiman said: Note, that non-goals aren\u2019t negated goals like \u201cThe system\n> shouldn\u2019t crash\u201d, but rather things that could reasonably be goals, but are\n> explicitly chosen not to be goals.\n\n> Daisuke Shimamoto said: A easy to read introduction to Design Docs. These\n> points stood out for me. - They are informal - Earlier problems are easier\n> to fix - Scaling knowledge across organization\n\n> Suresh S Murthy said: A great place to start if you are standardizing on\n> your company\u2019s design doc templates.\n\n> Divyanshu Maithani said: @cramforce really enjoyed the \"Design docs at\n> Google\" article, lots of insights\n\n> Jordi Abad said: \"The design doc documents the high level implementation\n> strategy and key design decisions with emphasis on the trade-offs that were\n> considered during those decisions.\" Design Docs at Google\n\n> Rafat Sarosh said: How to write design document\n\n> Hi, I\u2019m Matt - artist, technologist, noodler said: This article by\n> @cramforce is very good (a bunch of them are):\n\n> Nicola Zanon \ud83c\udf0f \u27a1\ufe0f \ud83d\udce6 said: The design doc documents the high level\n> implementation strategy and key design decisions with emphasis on the trade-\n> offs that were considered during those decisions.\n\n> Sergiu Bodiu \ud83c\udf0f said: Design docs 1. Early identification of design issues\n> (cheap) 2. Achieving consensus around a design in the organization. 3.\n> Ensuring consideration of cross-cutting concerns. 4. Acts as a summary\n> artefact in the technical portfolio of the software and more\n\n> Andrew Hansen said: A great breakdown of why design docs matter.\n> Importantly, not all code needs one!\n\n> Colton J. McCurdy said: > Unstructured text, like in the form of a design\n> doc, may be the better tool for solving problems early in a project\n> lifecycle, as it may be more concise and easier to comprehend, and\n> communicates the problems and solutions at a higher level than code. Thread\n\n> Mois\u00e9s Vargas said: Writing technical docs minimize risks of poor design,\n> security issues, lack of knowledge base when writing lasting software. Why\n> to embrace it in Software/Product Teams?. Good post about it\n\n> Venil Noronha said: An interesting read on how to write good design docs.\n\n> Jomel Imperio said: Concise and insightful overview of design docs at\n> Google. I'm already filing this to share with the team -- and inspire us to\n> keep improving our own documentation!\n\n> Brian Alexander Lee said: I love great design docs and loathe bad ones. This\n> post does a good job, I think, for describing how to make design docs I\n> love.\n\n> Meijiao Png said: Good read: @sunxperous\n\n> Felipe Hlibco said: Design Docs are great tools often underutilized. It\n> especially shines in complex projects with non-obvious trade-offs.\n\n> Demand climate action said: Software is more than coding. Much more.\n\n> Gary J. Foreman said: Good overview of a lightweight process that can\n> ultimately save a lot of time, or frustration for your future self!\n\n> Sebastian said: Technical design docs, RFCs or architectural decision\n> records are super important for every organization. Otherwise you end up in\n> loose ends and teams that can't take decisions on their own.\n\n> Isuru said: Design Docs at Google by @cramforce Writing design docs is a\n> practice I hope to start with my team too. This was a well-written guide on\n> what goes into them.\n\n> TK said: Good read.\n\n> Dvir Segal said: A great thread summing up the @googledevs design docs\n> process. The full article here:\n\n> Nathaniel Morihara (MurphysDad) said: \"As software engineers our job is not\n> to produce code per se, but rather to solve problems. Unstructured text,\n> like in the form of a design doc, may be the better tool for solving\n> problems early in a project lifecycle...\" -@cramforce Thread\n\n> Vijay Nagarajan said: It's said that, ' Thou shall not covet '. But I'll be\n> honest, articles like these do fill me with envy - of my cloud neighbours \ud83d\ude07\n\n> Francisco Avila said: Scaling ideas is hard. I found helpful to see Design\n> doc templates used by other engineers. A good one from Google (Design / Tech\n> Spec / RFC)\n\n> Ruslan Fomkin said: In #timescale I have learned to write design docs as an\n> important step of #developing new complex functionality. Here is nice\n> description of writing design docs at\n\n> ExperTech Insights said: @cramforce describes in the structure @Google\n> design docs and their function in the #SDL, a good example of how\n> #Documentation is impactful\n\nPublished 06 Jul 2020\n\nMalte Ubl RSS\n\n", "frontpage": false}
