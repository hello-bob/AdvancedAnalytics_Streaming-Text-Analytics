{"aid": "40222991", "title": "Thoughts on Zig (After Three Nights)", "url": "https://arne.me/blog/thoughts-on-zig", "domain": "arne.me", "votes": 2, "user": "abahlo", "posted_at": "2024-05-01 13:34:35", "comments": 0, "source_title": "Thoughts on Zig", "source_text": "Thoughts on Zig\n\nSkip to content\n\n# Thoughts on Zig\n\nI\u2019ve started writing Zig. These are my thoughts.Arne BahloMay 1^st, 2024 \u00b7\nFrankfurt, Germany\n\nZig is a programming language designed by Andrew Kelley. The official website\nlists three principles of the language:\n\n  * No hidden control flow.\n  * No hidden memory allocations.\n  * No preprocessor, no macros.\n\nFor someone like me coming mostly from Rust, Go and TypeScript, this is\ndifferent\u2014and different is interesting, so I wanted to know what it feels like\nto write code in it.\n\nHere are my thoughts after 3 nights of using Zig to rewrite the static site\ngenerator^1 I use for the Fire Chicken Webring. Note that this is a limited\nuse case and only scratches the surface of the language.\n\n## Explicit allocation\n\nThis is one of the biggest differentiators of Zig. Go doesn\u2019t force you to\nthink at all, Rust forces you to think about ownership and Zig forces you to\nthink about allocations. If you want to allocate memory, you need to pass an\nallocator to it and remember to free it afterwards.\n\nOne thing that I stumbled upon a lot: Sometimes there is a .deinit() function\non the returned struct, sometimes that method takes an allocator, sometimes\nyou need to allocator.free(value) and sometimes it returns an enum or a\nstruct, and you need to figure out which values you have to free.\n\n## Documentation\n\nIf you write Zig, you\u2019ll find yourself reading Zig a lot to understand how to\nuse a function, which resources you must free, and possibly, why that function\npanics. There is no generated documentation like docs.rs or pkg.go.dev; if you\nwant to know which methods a library has, look at the source.\n\nHere are some resources other than the source code that I found useful to get\nstarted:\n\n  * In-depth Overview\n  * Zig Language Reference\n  * Zig by Example\n  * Zig Cookbook\n  * Zig Guide\n  * Zig std documentation\n\nAnother reason you might need to look at the source code of function you\u2019re\ncalling is confusing error messages.\n\n## Errors\n\nThe error messages of the Zig compiler can be very hard to figure out. Here\u2019s\nan example:\n\n    \n    \n    $ zig build run Segmentation fault at address 0x102ee6000 Panicked during a panic. Aborting.\n\nGenerally, if you\u2019re used to Rust\u2019s exceptional error handling, this is rough.\n\nOnce I got an error from the standard library and only noticed after reading\nthe source code that ArrayList is not a supported type to pass to the given\nfunction. Another time, the templating library I\u2019ve temporarily used randomly\npanicked with an out-of-bounds after doing a nested loop.\n\n## Libraries\n\nThere are a bunch of libraries for Zig (see awesome-zig) and I can only talk\nabout the one\u2019s I\u2019ve tried, but most of the libraries I\u2019ve looked at are\neither archived, a thin wrapper around a C library, heavy WIP and barely\nusable, or have weird error scenarios.\n\nThis lead to me implementing my own shitty datetime function^2 and using\nstd.fmt instead of templating.\n\nI believe these are due to the immaturity of the language and ecosystem, but I\nwouldn\u2019t be surprised if people started building their own libraries, which\nthey take everywhere.\n\n## Strings\n\nWe have to talk about strings. Zig has none; if you want a string, use []const\nu8. You also can\u2019t compare that type with ==, you need to use a specific\nfunction^3.\n\nInitially I found this irritating\u2014why not introduce a string type that is\n[]const u8 under the hood and overload the == operator? I think it would\nincrease developer experience, but does it fit into Zig?\n\n## No magic\n\nRemember the three idioms from the beginning of the article? Zig is huge on\nbeing transparent, i.e., no magic; the code you read is what happens.\n\nAnd I appreciate that. In Rust, it\u2019s common to build abstractions to hide\nboilerplate logic (e.g. using macros to generate the deserialization logic of\na struct), in Go it\u2019s common to generate code to do this. Zig doesn\u2019t have any\nof that (though I guess you could generate Zig code). I\u2019m not sure how well\nthat scales in big codebases, but I think it\u2019s interesting.\n\n## Conclusion\n\nI like Zig. For a bigger project or something that needs async^4, I\u2019ll still\nreach for Rust for its safety features and vibrant ecosystem, but for small\nprojects, it\u2019s fun to reach for an interesting language.\n\n  1. See Why You Should Write Your Own Static Site Generator \u21a9\n\n  2. Maybe don\u2019t look too closely. \u21a9\n\n  3. std.mem.eql \u21a9\n\n  4. Async functions have been removed from Zig at this time. \u21a9\n\n# Hej, I\u2019m Arne\u2014\n\na developer, podcaster & dad based near Frankfurt, Germany.\n\n\u00a9 2013 \u2013 2024 Arne Bahlo Commit 7b3cb62 \u2190 Fire Chicken Webring \u2192 Made with \u2665\nby a human.\n\nColophon / Accessibility / Imprint\n\nArne Bahlo\n\nA developer, podcaster & dad based near Frankfurt, Germany.\n\n", "frontpage": false}
