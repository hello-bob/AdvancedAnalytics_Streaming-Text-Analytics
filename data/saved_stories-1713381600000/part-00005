{"aid": "40061752", "title": "Tailscale devices with a custom domain (2023)", "url": "https://willnorris.com/2023/tailscale-custom-domain/", "domain": "willnorris.com", "votes": 1, "user": "phantomathkg", "posted_at": "2024-04-17 08:02:46", "comments": 0, "source_title": "Tailscale devices with a custom domain", "source_text": "Tailscale devices with a custom domain\n\nwillnorris.com\n\ndon\u2019t lose focus\n\n# Tailscale devices with a custom domain\n\nNovember 1, 2023 by Will Norris\n\nOne of the things that kinda blew my mind my first week at Tailscale was\nMagicDNS. I had been using Tailscale at home for a while, but just hadn\u2019t\nactually used MagicDNS at that point. It runs a local DNS server in every\nTailscale client that can answer queries about other devices in your network.\nEvery tailnet is given a name of the form tailnetNNNN.ts.net, and so every\ndevice can be addressed as <device>.tailnetNNNN.ts.net. If you want, you can\ninstead choose a fun tailnet name which is randomly picked from a list of\nthings with tails, and a list of things with scales. So you might end up with\nsomething like <device>.orca-lizard.ts.net.\n\nWhile the fun tailnet names are cute and all, I really wanted to use my own\ndomain. For quite a while, I just manually maintained DNS records for the\nhandful of hosts I cared about. Tailscale IP addresses don\u2019t change, so this\nwasn\u2019t actually too much work. But I recently got around to switching to a new\ntailnet using my own domain with custom OIDC, which meant I needed to\nreregister all of my devices.\n\nI decided to take this opportunity to try and sort out my DNS properly. What I\nfound was coredns-tailscale, a plugin for coredns that effectively maps\nTailscale device names onto a custom domain. The coredns-tailscale project has\nbeen around for about a year, and I later discovered that it had been\nmentioned in the Tailscale newsletter from October 2022. I guess I either\nmissed seeing it or just wasn\u2019t looking for a tool like that at the time.\n\n## Delegating DNS\n\nWhen I started manually maintaining DNS records for my Tailscale devices, I\nchose the zone ipn.willnorris.net. (IPN was the abbreviation for a Tailscale\nnetwork before it was called a \u201ctailnet\u201d, and is still present in parts of the\ncode base.) So I basically wanted to delegate the entire ipn.willnorris.net\nzone to my coredns server. I use Porkbun for domain registration and DNS\nhosting, so it was a simple matter of adding NS records. I already knew I\nwanted to host coredns on Fly, so I created the Fly app and got a public IP\naddress.\n\nI didn\u2019t have to, but I decided to go ahead and add names for my nameservers\nrather than bare IPs. I cleverly chose ns1.ipn.willnorris.net and\nns2.ipn.willnorris.net. I added A records pointing each hostname to my Fly IP\naddress, and added NS records for ipn.willnorris.net pointing to those two\nhosts.\n\n    \n    \n    ns1.ipn.willnorris.net. 600 IN A 37.16.12.98 ns2.ipn.willnorris.net. 600 IN A 37.16.12.98 ipn.willnorris.net. 600 IN NS ns1.ipn.willnorris.net. ipn.willnorris.net. 600 IN NS ns2.ipn.willnorris.net.\n\n## Tailscale configuration\n\nI needed the coredns server to join my Tailnet (explained below), so I created\nan auth key for that purpose. I made one that is reusable, ephemeral, pre-\napproved, and tagged with tag:dns. I also added an ACL entry to my policy file\nto make sure that all of the devices on my network can do DNS queries. This\nsame entry also causes the DNS server to be aware of all of the other devices\non the network, which is needed to populate its internal mappings.\n\n    \n    \n    { \"acls\": [ { \"action\": \"accept\", \"src\": [\"*\"], \"dst\": [\"tag:dns:53\"] } ], \"tagOwners\": { \"tag:dns\": [] } }\n\n## Build and configure coredns\n\nThe source for my personal coredns server can be found at\nhttps://github.com/willnorris/ipn-dns. There\u2019s really not a whole lot to it.\nMy main.go simply registers the tailscale plugin and starts coredns. My\nDockerfile builds everything in a wolfi build image and copies the final\nbinary and config to a static image. (Don\u2019t miss calling setcap\ncap_net_bind_service=+ep so that you can listen on port 53). My fly config is\nalso pretty boring, adding a single volume mount for Tailscale state files and\nlistening on port 53. I also set my Tailscale auth key to the TS_AUTHKEY\nsecrets variable using fly secrets.\n\nThe only interesting bit is the coredns config itself:\n\n    \n    \n    ipn.willnorris.net { hosts { # some resolvers will recheck the entries for DNS glue records at the delegate nameserver. # Manually specify these hosts, since they won't appear in the Tailscale node list. 37.16.12.98 ns1.ipn.willnorris.net ns2.ipn.willnorris.net fallthrough } tailscale ipn.willnorris.net { authkey {$TS_AUTHKEY} } log errors }\n\nI manually respecify records for my nameservers since some resolvers will\ncheck for that. I then configure the coredns-tailscale plugin to use my\nipn.willnorris.net zone, and register itself with my Tailscale auth key.\n\nNow this auth key is the one really non-standard bit, and relies on a local\nchange I made to coredns-tailscale. Normally, it requires that a Tailscale\nclient be running on the host system (the docker image in my case). I added\nsupport for having coredns join the tailnet directly using tsnet, so that\neverything can be self-contained in the single coredns binary, including the\nTailscale client itself. I also made another change to respond to tailnet\nchanges more quickly. If you want to try those changes out yourself, see the\nreplace directive in my go.mod.\n\nOnce deployed, you can see that DNS queries for my MagicDNS hostname and my\ncustom hostname match. Though in practice, I typically create a CNAME without\nthe ipn component and use that for actually accessing services when I need to:\n\n    \n    \n    % dig +short go.tail27e07.ts.net 100.69.62.103 % dig +short go.ipn.willnorris.net 100.69.62.103 % dig +short go.willnorris.net go.ipn.willnorris.net. 100.69.62.103\n\n## What\u2019s missing and why bother?\n\nThere are a few additional things that MagicDNS gets you that is missing here.\nFirst, MagicDNS also automatically sets up a DNS search path so that you can\ntypically just use bare hostnames. This is what makes go links like go/meet\nwork without needing the fully qualified domain name. You can also have\nTailscale automatically get certificates for your ts.net hostname, even for\nprivate services that can\u2019t typically get Let\u2019s Encrypt certs using the HTTP\nchallenge. This is possible because Tailscale uses the DNS challenge on the\nts.net domain. And Tailscale serve and funnel build on top of this HTTPS\nsupport to make services available to your tailnet or even publicly on the\ninternet. None of these things work with the custom DNS approach I\u2019ve\ndescribed here.\n\nHowever, there are still reasons why you might want custom names as a\nsupplement to your ts.net hostnames. I often share some devices between my\npersonal and work tailnet. While bare hostnames work for devices in your own\ntailnet, they don\u2019t work for shared devices. For that, you have to use the\nfully qualified hostname, and I can never remember (or want to type) my full\nts.net name. If I want to access a personal go link while logged into my work\ntailnet, it\u2019s much simpler to remember go.willnorris.net. (Actually, I have an\neven simpler method with go links I\u2019ll talk about later.)\n\nOr you may have existing hostnames that you\u2019ve been using for a while and want\nto migrate them to a private Tailscale network. Or you\u2019re possibly migrating\nfrom a different VPN product that was using a custom domain. Setting up a DNS\nserver like this could help keep those old hostnames active with their new\nTailscale IP addresses.\n\nIt\u2019s also worth noting that I\u2019m serving my custom DNS server publicly. That\nmeans anyone can poke around to discover my Tailscale device names as well as\ntheir Tailscale IPs. But those hostnames already end up getting written to\npublic transparency logs whenever HTTPS certs are issued, so I\u2019m not too\nworried about that. And Tailscale IP addresses themselves are generally pretty\nuseless, though they do theoretically make certain types of attacks a little\neasier. So depending on the network setup and what you\u2019re trying to do, you\ncould just host this DNS server privately instead.\n\nSubscribe to feed\n\n\u00a9 Will Norris. Unless noted otherwise, text content is licensed under CC-BY\n4.0 and code under an MIT License.\n\n", "frontpage": false}
