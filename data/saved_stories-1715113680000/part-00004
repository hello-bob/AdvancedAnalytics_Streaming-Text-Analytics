{"aid": "40285028", "title": "Who Pays You? and Why?", "url": "https://www.moderndescartes.com/essays/who_pays_you/", "domain": "moderndescartes.com", "votes": 1, "user": "BerislavLopac", "posted_at": "2024-05-07 13:12:00", "comments": 0, "source_title": "Who pays you? And why?", "source_text": "Who pays you? And why?\n\n  * Brian Kihoon Lee\n  * Essays\n\n# Who pays you? And why?\n\nOriginally posted 2024-05-02\n\nTagged: strategy\n\nObligatory disclaimer: all opinions are mine and not of my employer\n\nI get asked for career advice from time to time. While each situation is\ndifferent, a recurring theme is disempowerment - feeling like there\u2019s nothing\nyou can do to advance your career. To help diagnose, I like to ask two\nquestions: Who pays you? And why? These two questions encourage you to leave\nthe comfort zone of job descriptions and confront the reality of what it\u2019ll\ntake to get to the next level at your current job, or potentially a new job.\n\nI\u2019ll explain how I think about these questions (mostly from a software\nengineering perspective), and this hopefully helps you think through your own\nsituation.\n\n## Why software engineers get paid\n\nFundamentally, software engineers get paid a lot because one person can write\ncode that generates high profit margins over millions of machines. In the same\nway that traders scale their efforts across money and executives scale their\nefforts across people, software engineers scale their effort across machines.\n\nSince pay is correlated with scale of impact, the next question is, what\nlimits software scaling? I\u2019d say technical and conceptual complexity, which\ncan come about from bad product management, bad engineering decisions,\ncascading tech debt, and just plain old lack of skill. Fortunately, software\nengineers have been chipping away at the complexity problem for decades.\nEngineers today benefit from better documentation, better code editors, better\nlinters and test runners, better languages, better compilers, better code\nsearch tools, better cluster infrastructure, better libraries, better\nexperience sharing, better understanding of Conway\u2019s law, etc..\n\nTo maximize your impact as a software engineer means the following:\n\n  * Getting better at picking more impactful problems to solve. You could dominate the bingo card market but how much does that even earn you?\n  * Continually trying new ways of working.\n  * Building simple code that doesn\u2019t collapse under its own abstraction weight.\n  * Teaching other engineers to work more efficiently and to build simpler code, either 1 on 1, through writing, or through creating languages/tools/infra that shapes the way they work.\n  * Influencing other engineers to work on more impactful problems.\n\nThese ideas are often expressed in some sort of performance review rubric,\nwhose purpose is to directly educate and incentivize you to be maximally\nuseful to the company in the way that only software engineers can. The rubrics\nare typically public and yet these ideas are not understood by many. (See: the\npopularity of Tanya Reilly\u2019s excellent Glue Work essay.)\n\n## Who pays software engineers\n\nI should also differentiate here between software companies (rough heuristic:\ncompetes with FAANG for talent) and companies that use software (basically\neveryone else). The difference is that software companies are built bottom-up\nwithout humans in their critical business loops, allowing software to scale\nwithout bound. You can retroactively try to streamline a human-centric\norganization, but the people involved will resist furiously. There is simply\nno way that a traditional ad agency built atop ad salesmen and weeks-long\nbusiness cycles could transform into an organization capable of milliseconds-\nlong ad auctions, as Google implements. Thus, Google\u2019s ad engineers each\ngenerate 10-100x as much business value as a traditional ad agency\u2019s IT folks,\nand are paid probably 5-25x as much.\n\n## Thinking beyond job descriptions\n\nUnderstanding how to answer who and why helps you navigate ambiguous job\ndescriptions, or to even invent them from scratch.\n\nConsider the \u201cdata scientist\u201d job title, which became increasingly popular in\nthe 2010s, especially among scientists fleeing academia. While the job\ndescription read \u201cdata scientists get paid to build models\u201d, anybody who took\nthat job description at face value found themselves looking for a new job in a\nyear or two. The real reason data scientists are paid is to drive better\nbusiness decisions. Data and science are optional.\n\nNowadays, job titles like \u201cAI engineer\u201d or \u201cLLM engineer\u201d or \u201cAI researcher\u201d\nget thrown around. Who pays these people, and why? The cynic would say they\u2019re\ngetting paid because clueless business people are buying into unsubstantiated\nhype. And honestly, the cynic is right. Nobody knows what business value to\nexpect from LLMs. But what I can tell you is that there are thousands of\nstartups, tinkerers, consultants, and research groups trying to answer \u201cwho\u201d\nand \u201cwhy\u201d. The people that succeed in answering these questions will create a\nlot of value, and depending on their strategic positioning, capture some of\nthat value. Those who don\u2019t understand why they are being paid will be\nsurprised when the hype train moves on and their projects are cancelled.\n\nFinally, you\u2019ll find that staff engineers\u2019s job descriptions inevitably\ninclude some statement about navigating ambiguity. This is what ultimately\ndifferentiates staff from senior: the ability to navigate business ambiguity\nas well as technical ambiguity\n\n## Finding personal alignment\n\nI\u2019ve been answering questions about \u201cwho and why\u201d in the abstract. But your\npersonal answers will be more tactical. The who is your manager, or perhaps\nyour skip-manager. The why may relate to short-term projects or perverse\nincentives that you might not agree with. And you shouldn\u2019t necessarily trust\nyour manager/skip managers/organization to tell you what they want you to do\nand why.\n\nFinding career success and satisfaction is very much about finding personal\nalignment with an organization\u2019s goals. You have to understand what you need,\nwhat the organization needs, what the alignment is between the two, and\nfinally, decide whether that alignment is enough to keep you happy. If that\ndoesn\u2019t sound hard enough, all of these factors are also changing over time:\nyou grow as a person in what you find challenging and rewarding, while the\norganization responds to market conditions in terms of what sort of work is\nneeded. What might have been a dream job may be a dead-end job in a short few\nyears, especially in a field as dynamic as tech. Ask me how I know.\n\nTrust your gut. In my experience, people get thoroughly boiled before they\nfinally decide to jump out of the pot. If you feel like something\u2019s not right,\nyou have to understand where that feeling is coming from. Switching teams,\njobs, or sometimes even switching careers is often a necessary step towards\nreaching career satisfaction.\n\nOnce you figure out how to find personal alignment, you\u2019ll also be well-\nequipped to handle one of the harder problems facing management: how to\nmaximize your team\u2019s output by figuring out how to align others\u2019 personal\nneeds with organizational needs.\n\n## Reimagining your experiences\n\nLet\u2019s say you\u2019ve decided to switch teams/jobs. How you talk about your past\nexperience reveals a significant amount about how well you understand the\nanswers to who and why.\n\nThere\u2019s a famous story about three bricklayers in which three people doing\nidentical work describe themselves as \u201claying bricks\u201d, \u201cbuilding a cathedral\u201d,\nand \u201cspreading the word of God\u201d. The tech equivalent of laying bricks might be\n\u201cImproved test runners\u201d, \u201cOptimized continuous integration suite runtime by\n50%\u201d, and \u201cCreated a rapid iteration culture by increasing release cadence\nfrom monthly to weekly\u201d. It\u2019s clear that these three resum\u00e9 lines are written\nby a junior, senior, and staff software engineer, respectively.\n\nI strongly recommend the exercise of rewriting your resum\u00e9 from the\nperspective of the next rung on the job ladder. You might feel dishonest\nclaiming credit for things you don\u2019t feel like you did, when all you did was\nlay bricks - but think of it this way - why should your manager get to claim\ncredit for the cathedral you built? If you can understand the vision and\nyou\u2019ve been helping guide yourself and your teammates towards that vision,\nthen you\u2019ve been doing next level work, regardless of what the org chart says.\n\n## Concluding thoughts\n\nI\u2019ve been told by former coworkers that they wished they could be as decisive\nas me when it came to pivoting my career. Truthfully, it doesn\u2019t come easily\nto me, either. I\u2019ve switched career tracks three times so far. The first time\nwas when I dropped out of grad school and pivoted into software, then I was\nfired from HubSpot and pivoted into machine learning, and finally when I got\nlaid off from Google and joined a successful LLM startup. I didn\u2019t even\ninitiate two of those three career pivots! I was scared of change and didn\u2019t\ntake the necessary steps for 6-12 months. But once I had taken the plunge\n(voluntarily or not), I found that within a few months, I had newfound clarity\nabout what I wanted to do next, and from there on it was just about finding\nthe right company that aligned with the work I wanted to do.\n\nI see a lot of people stuck in jobs they\u2019re not happy in. As tech workers, our\noutsized salaries grant us more flexibility to take more career risks and find\nbetter personal satisfaction from our job. Oftentimes the grass really is\ngreener on the other side - come and find out!\n\nWant to become a better programmer? Join the Recurse Center!\n\n", "frontpage": false}
