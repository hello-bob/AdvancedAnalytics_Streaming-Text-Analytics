{"aid": "40215286", "title": "What Recent Vulnerabilities Mean to Rust", "url": "https://insights.sei.cmu.edu/blog/what-recent-vulnerabilities-mean-to-rust/", "domain": "cmu.edu", "votes": 3, "user": "sarahem", "posted_at": "2024-04-30 19:35:53", "comments": 0, "source_title": "What Recent Vulnerabilities Mean to Rust", "source_text": "What Recent Vulnerabilities Mean to Rust\n\nCarnegie Mellon University\n\n# Software Engineering Institute\n\n# SEI Blog\n\n### Cite This Post\n\nAMS Citation\n\nSvoboda, D., 2024: What Recent Vulnerabilities Mean to Rust. Carnegie Mellon\nUniversity, Software Engineering Institute's Insights (blog), Accessed April\n30, 2024, https://doi.org/10.58012/7ex7-7n70.\n\nAPA Citation\n\nSvoboda, D. (2024, April 29). What Recent Vulnerabilities Mean to Rust.\nRetrieved April 30, 2024, from https://doi.org/10.58012/7ex7-7n70.\n\nChicago Citation\n\nSvoboda, David. \"What Recent Vulnerabilities Mean to Rust.\" Carnegie Mellon\nUniversity, Software Engineering Institute's Insights (blog). Carnegie\nMellon's Software Engineering Institute, April 29, 2024.\nhttps://doi.org/10.58012/7ex7-7n70.\n\nIEEE Citation\n\nD. Svoboda, \"What Recent Vulnerabilities Mean to Rust,\" Carnegie Mellon\nUniversity, Software Engineering Institute's Insights (blog). Carnegie\nMellon's Software Engineering Institute, 29-Apr-2024 [Online]. Available:\nhttps://doi.org/10.58012/7ex7-7n70. [Accessed: 30-Apr-2024].\n\nBibTeX Code\n\n@misc{svoboda_2024, author={Svoboda, David}, title={What Recent\nVulnerabilities Mean to Rust}, month={Apr}, year={2024},\nhowpublished={Carnegie Mellon University, Software Engineering Institute's\nInsights (blog)}, url={https://doi.org/10.58012/7ex7-7n70}, note={Accessed:\n2024-Apr-30} }\n\n## What Recent Vulnerabilities Mean to Rust\n\n######\n\nDavid Svoboda\n\n###### April 29, 2024\n\n##### PUBLISHED IN\n\nSecure Development\n\n##### CITE\n\nhttps://doi.org/10.58012/7ex7-7n70\n\n##### TAGS\n\nRust\n\n##### SHARE\n\nIn recent weeks several vulnerabilities have rocked the Rust community,\ncausing many to question the safety of the borrow checker, or of Rust in\ngeneral. In this post, we will examine two such vulnerabilities: the first is\nCVE-2024-3094, which involves some malicious files in the xz library, and the\nsecond is CVE-2024-24576, which involves command-injection vulnerabilities in\nWindows. How did these vulnerabilities arise, how were they discovered, and\nhow do they involve Rust? More importantly, might Rust be susceptible to more\nsimilar vulnerabilities in the future?\n\nLast year we published two blog posts about the security provided by the Rust\nprogramming language. We discussed the memory safety and concurrency safety\nprovided by Rust\u2019s borrow checker. We also described some of the limitations\nof Rust\u2019s security model, such as its limited ability to prevent various\ninjection attacks, and the unsafe keyword, which allows developers to bypass\nRust\u2019s security model when necessary. Back then, our conclusion was that no\nlanguage could be fully secure, yet the borrow checker did provide\nsignificant, albeit limited, memory and concurrency safety when not bypassed\nwith the unsafe keyword. We also examined Rust through the lens of source and\nbinary analysis, gauged its stability and maturity, and realized that the\nconstraints and expectations for language maturity have slowly evolved over\nthe decades. Rust is moving in the direction of maturity today, which is\ndistinct from what was considered a mature programming language in 1980.\nFurthermore, Rust has made some notable stability guarantees, such as\npromising to deprecate rather than delete any crates in crates.io to avoid\nrepeating the Leftpad fiasco.\n\n## Backdoor in the xz Utils library (CVE-2024-3094)\n\nCVE-2024-3094 is fascinating from an origin standpoint. The source of the\nvulnerability in the CVE has nothing to do with Rust, because xz is written in\nC. It is arguably a backdoor rather than a vulnerability, implying malicious\nintent rather than simple human error by the developers. The CVE was published\non March 29, and it affects the newest versions (5.6.0 and 5.6.1) of xz, but\nnot 5.4.6 or any older versions. Many articles and posts have discussed this\nvulnerability so, for this post, we shall focus on its impact on Rust.\n\nOn September 23, 2023, the first version (0.1.20) of the crate liblzma-sys was\npublished on crates.io. This crate is a low-level Rust wrapper around the xz C\ncode. Since then, there have been 14 newer versions of the crate published,\nwith more than 25,000 downloads, and two separate crates that depend on it.\nThe first vulnerable instance of the liblzma-sys crate was published on April\n5. However, on April 9, Phylum reported that the xz backdoor existed in\nseveral of the latest versions of this crate. As of this writing, the latest\nversion of liblzma-sys is 0.3.3, and versions 0.3.0 through 0.3.2 have been\nyanked. That is, these versions are still available from crates.io but not for\ndirect download; they are available only for any other Rust crates that\ndownloaded them before yanking. (This demonstrates crates.io\u2019s compliance with\nthe principle that old, even insecure crates are never deleted; they are\nmerely deprecated.) Consequently, the vulnerability has been \u201cpatched\u201d for\nRust.\n\nWhat does this vulnerability reveal about Rust? The vulnerability was a\nbackdoor to a non-Rust project; consequently, it reveals nothing about the\nlanguage security of Rust itself. From a Rust perspective, this was a supply-\nchain vulnerability related to library reuse and interface wrapping. The\ncrates.io service had been importing the liblzma-sys crate for 6 months with\nno problems. The challenge of software supply chain risk management and\nsoftware composition and reuse is significant and affects all complex\nsoftware. It is disturbing that for 1 week, the backdoor was known in the C\ncommunity but not the Rust community. However, within 24 hours of being made\naware, the crates.io maintainers were able to patch the crate. We can also\ncredit Phylum\u2019s monitoring service, which detected the vulnerability migrating\nfrom C to Rust.\n\n## \u201cBatBadBut\u201d Command Injection with Windows\u2019 cmd.exe (CVE-2024-24576)\n\nLike CVE-2024-3094, CVE-2024-24576 first appeared outside of Rust but can\napply to many languages including Rust. To understand this vulnerability, we\nmust first dig into history and basic cybersecurity.\n\nThe vulnerability is an example of OS command injection (CWE-78). There are\nmany other pages, such as SEI CERT Secure Coding rule IDS07-J (for Java) that\nprovide a gentle introduction and explanation of this CWE. As the CERT rule\nsuggests, Java provides APIs that sanitize command-line arguments with the\nonly catch being that you must provide the command and arguments as a list of\nstrings rather than as one long string. Most other languages, including Rust,\nprovide similar APIs, with the oldest example being the C exec(3) function\nfamily, standardized in POSIX. These replace older functions such as the\nstandard C system() function, which took a command as a single string and was\nthus vulnerable to command injection. In fact SEI CERT Secure Coding rule\nENV33-C goes so far as to deprecate system().\n\nThe shells associated with Linux, such as Bash and the C shell, are consistent\nabout quoting. They tokenize arguments and provide any invoked programs with\nan argument list rather than the original command string. However, Windows\u2019\ncmd.exe program, used for executing Windows .bat (batch) files, tokenizes\narguments differently, which means the standard algorithms for sanitizing\nuntrusted arguments are ineffective when passed to a batch program on Windows.\n\nThis problem has been reported for more than a decade, but was most widely\npublicized by RyotaK on April 9. Called the BatBadBut vulnerability, it was\nconsequently published by the CERT Coordination Center and affected several\nlanguages. Many of these languages subsequently had to release security\npatches or update their documentation. Interestingly, of the top 10 Google\nhits on the search term \"BatBadBut,\" 5 of them are specific to Rust. That is,\nthey mention that Rust is vulnerable without including the fact that several\nother languages are also vulnerable.\n\nOn a related note, Java was an unusual case. Oracle has declared that they\nwill neither modify Java nor update its documentation. It is likely that\nOracle already addressed this problem in Java SE 7u21. They adjusted Java\u2019s\ninternal tokenization of Runtime.exec() to accommodate cmd.exe (on Java for\nWindows). In Java SE 7u25, they added a property\njdk.lang.Process.allowAmbigousCommands to resurrect the original behavior in\nlimited circumstances. (There were 80 updates of Java SE7 and 401 updates of\nJava SE8, so Oracle was very busy securing Java at the time.)\n\nTurning back to Rust, it had na\u00efve command-line sanitization and was thus\nvulnerable to OS command injection when run on Windows, while documenting that\nit sanitized arguments to prevent command injection. This affected all\nversions of Rust before 1.77.2.\n\nWhat does this vulnerability reveal about Rust? Rust\u2019s command sanitization\nroutines had appeared to be adequate; they are sufficient for Linux programs.\nRust was vulnerable to a weakness that also affected many other languages\nincluding Haskell, PHP, and Node.js. To prevent this vulnerability from\naffecting Rust before April 9, the Rust developers would have had to discover\nthe vulnerability themselves. Finally, we can also credit RyotaK for reporting\nthe vulnerability to the CERT/CC.\n\n## Rust Software Security Versus the Real World\n\nIn the context of Rust software security, what have we learned from these two\nissues? Neither of these issues specifically target Rust, but Rust programs\nare affected nonetheless. Rust\u2019s borrow checker makes Rust just as secure as\nit ever was for memory safety and concurrency. The borrow checker\u2019s memory and\nconcurrency safety and security do have limitations, and the borrow checker\nalso does not protect against the types of interface and dependency\nvulnerabilities that we discuss here. Both issues indicate weaknesses in\nplatforms and libraries and only affect Rust after Rust tries to support these\nplatforms and libraries.\n\nThe military often says that no good battle plan survives contact with the\nenemy. I would apply this proverb to Rust in that the security of no\nprogramming language survives contact with the real world. That is why having\nstability and maturity in a language is important. Languages need to be\nupdated, but developers need a predictable path. Integrating any language with\nthe real world forces vulnerabilities and weaknesses onto the language, and\nsome of these vulnerabilities can remain dormant for decades, often surfacing\nfar from the Rust community.\n\nLike the Java and PHP communities, the Rust community must make Rust interface\nwith the wider computing world, and the Rust community will make some mistakes\nin doing so. The Rust community will have to assist in discovering these\nvulnerabilities and mitigating them both in Rust and in the platforms and\nlibraries from which they originate. As for Rust developers, they must, as\nusual, remain vigilant with applying updates to the Rust tools they use. They\nshould also avoid crates that are deprecated or yanked. And they should also\nbe aware of supply chain issues that may enter the Rust world via crates to\nexternal libraries.\n\n##### Additional Resources\n\nView the SEI Podcast Understanding Vulnerability Analysis in the Rust\nProgramming Language with David Svoboda and Garret Wassermann.\n\nView the SEI Podcast Software Security in Rust with David Svoboda and Joseph\nSible.\n\nView the SEI Webcast Will Rust Solve Software Security? with David Svoboda and\nJoseph Sible.\n\n##### Written By\n\n### David Svoboda\n\n###### Author Page\n\n###### Digital Library Publications\n\n###### Send a Message\n\n##### More By The Author\n\n#### Rust Vulnerability Analysis and Maturity Challenges\n\n###### January 23, 2023 \u2022 By Garret Wassermann, David Svoboda\n\n#### Rust Software Security: A Current State Assessment\n\n###### December 12, 2022 \u2022 By Joe Sible, David Svoboda\n\n#### How to Use Static Analysis to Enforce SEI CERT Coding Standards for IoT\nApplications\n\n###### April 1, 2019 \u2022 By David Svoboda\n\n#### Using the SEI CERT Coding Standards to Improve Security of the Internet\nof Things\n\n###### February 11, 2019 \u2022 By David Svoboda\n\n#### CERT C++ Secure Coding Guidelines\n\n###### April 17, 2017 \u2022 By David Svoboda\n\n##### More In Secure Development\n\n#### The SEI SBOM Framework: Informing Third-Party Software Management in Your\nSupply Chain\n\n###### November 6, 2023 \u2022 By Christopher J. Alberts, Michael S. Bandor,\nCharles M. Wallen, Carol Woody\n\n#### Rust Vulnerability Analysis and Maturity Challenges\n\n###### January 23, 2023 \u2022 By Garret Wassermann, David Svoboda\n\n#### Rust Software Security: A Current State Assessment\n\n###### December 12, 2022 \u2022 By Joe Sible, David Svoboda\n\n#### Taking Up the Challenge of Open Source Software Security in the DoD\n\n###### August 15, 2022 \u2022 By Scott Hissam\n\n#### 11 Leading Practices When Implementing a Container Strategy\n\n###### November 8, 2021 \u2022 By Andrew O. Mellinger, William Nichols, Jay Palat\n\n##### PUBLISHED IN\n\nSecure Development\n\n##### CITE\n\nhttps://doi.org/10.58012/7ex7-7n70\n\n##### TAGS\n\nRust\n\n##### SHARE\n\n### Get updates on our latest work.\n\nSign up to have the latest post sent to your inbox weekly.\n\nSubscribe Get our RSS feed\n\n##### More In Secure Development\n\n#### The SEI SBOM Framework: Informing Third-Party Software Management in Your\nSupply Chain\n\n###### November 6, 2023 \u2022 By Christopher J. Alberts, Michael S. Bandor,\nCharles M. Wallen, Carol Woody\n\n#### Rust Vulnerability Analysis and Maturity Challenges\n\n###### January 23, 2023 \u2022 By Garret Wassermann, David Svoboda\n\n#### Rust Software Security: A Current State Assessment\n\n###### December 12, 2022 \u2022 By Joe Sible, David Svoboda\n\n#### Taking Up the Challenge of Open Source Software Security in the DoD\n\n###### August 15, 2022 \u2022 By Scott Hissam\n\n#### 11 Leading Practices When Implementing a Container Strategy\n\n###### November 8, 2021 \u2022 By Andrew O. Mellinger, William Nichols, Jay Palat\n\n## Get updates on our latest work.\n\nEach week, our researchers write about the latest in software engineering,\ncybersecurity and artificial intelligence. Sign up to get the latest post sent\nto your inbox the day it's published.\n\nSubscribe Get our RSS feed\n\n  * Report a Vulnerability to CERT/CC\n  * Subscribe to SEI Bulletin\n  * Request Permission to Use SEI Materials\n\nCarnegie Mellon University Software Engineering Institute 4500 Fifth Avenue\nPittsburgh, PA 15213-2612 412-268-5800\n\nContact Us\n\n  * Office Locations\n  * Additional Sites Directory\n  * Legal\n  * Privacy Notice\n  * CMU Ethics Hotline\n  * www.sei.cmu.edu\n\n2024\n\nCarnegie Mellon University\n\n", "frontpage": false}
