{"aid": "40196291", "title": "Take back your dotfiles with Chezmoi (2020)", "url": "https://fedoramagazine.org/take-back-your-dotfiles-with-chezmoi/", "domain": "fedoramagazine.org", "votes": 1, "user": "Hugsun", "posted_at": "2024-04-29 09:30:11", "comments": 0, "source_title": "Take back your dotfiles with Chezmoi - Fedora Magazine", "source_text": "Take back your dotfiles with Chezmoi - Fedora Magazine\n\n  * fosstodon\n  * Meta\n  * Instagram\n  * Twitter\n  * YouTube\n  * Chat\n  * Discourse\n  * RSS Feed\n\n# Take back your dotfiles with Chezmoi\n\nPosted by Ryan Walter on April 3, 2020\n\nRecent Posts\n\n### What\u2019s new for Fedora Atomic Desktops in Fedora 40\n\n### How to rebase to Fedora Linux 40 on Silverblue\n\n### OMG! We\u2019re at forty! (Announcing the release of Fedora Linux 40)\n\nIn Linux, dotfiles are hidden text files that are used to store various\nconfiguration settings for many such as Bash and Git to more complex\napplications like i3 or VSCode.\n\nMost of these files are contained in the ~/.config directory or right in the\nhome directory. Editing these files allows you to customize applications\nbeyond what a settings menu may provide, and they tend to be portable across\ndevices and even other Linux distributions. But one talking point across the\nLinux enthusiast community is how to manage these dotfiles and how to share\nthem.\n\nWe will be showcasing a tool called Chezmoi that does this task a little\ndifferently from the others.\n\n## The history of dotfile management\n\nIf you search GitHub for dotfiles, what you will see are over 100k\nrepositories after one goal: Store people\u2019s dotfiles in a shareable and\nrepeatable manor. However, other than using git, they store their files\ndifferently.\n\nWhile Git has solved code management problems that also translates to config\nfile management, It does not solve how to separate between distributions,\nroles (such as home vs work computers) secrets management, and per device\nconfiguration.\n\nBecause of this, many users decide to craft their own solutions, and the\ncommunity has responded with multiple answers over the years. This article\nwill briefly cover some of the solutions that have been created.\n\n### Experiment in an isolated environment\n\nDo you want to try these below solutions quickly in a contained environment?\nRun:\n\n    \n    \n    $ podman run --rm -it fedora\n\n... to create a Fedora container to try the applications in. This container\nwill automatically delete itself when you exit the shell.\n\n### The install problem\n\nIf you store your dotfiles in Git repository, you will want to make it easy\nfor your changes to automatically be applied inside your home directory, the\neasiest way to do this at first glance is to use a symlink, such as ln -s\n~/.dotfies/bashrc ~/.bashrc. This will allow your changes to take place\ninstantly when your repository is updated.\n\nThe problem with symlinks is that managing symlinks can be a chore. Stow and\nRCM (covered here on Fedora Magazine) can help you manage those, but these are\nnot seamless solutions. Files that are private will need to be modified and\nchmoded properly after download. If you revamp your dotfiles on one system,\nand download your repository to another system, you may get conflicts and\nrequire troubleshooting.\n\nAnother solution to this problem is writing your own install script. This is\nthe most flexible option, but has the tradeoff of requiring more time into\nbuilding a custom solution.\n\n### The secrets problem\n\nGit is designed to track changes. If you store a secret such as a password or\nan API key in your git repository, you will have a difficult time and will\nneed to rewrite your git history to remove that secret. If your repository is\npublic, your secret would be impossible to recover if someone else has\ndownloaded your repository. This problem alone will prevent many individuals\nfrom sharing their dotfiles with the public world.\n\n### The multi-device config problem\n\nThe problem is not pulling your config to multiple devices, the problem is\nwhen you have multiple devices that require different configuration. Most\nindividuals handle this by either having different folders or by using\ndifferent forks. This makes it difficult to share configs across the different\ndevices and role sets\n\n## How Chezmoi works\n\nChezmoi is a tool to manage your dotfiles with the above problems in mind, it\ndoesn\u2019t blindly copy or symlink files from your repository. Chezmoi acts more\nlike a template engine to generate your dotfiles based on system variables,\ntemplates, secret managers, and Chezmoi\u2019s own config file.\n\n### Getting Started with Chezmoi\n\nCurrently Chezmoi is not in the default repositories. You can download the\ncurrent version of Chezmoi as of writing with the following command.\n\n    \n    \n    $ sudo dnf install https://github.com/twpayne/chezmoi/releases/download/v1.7.17/chezmoi-1.7.17-x86_64.rpm\n\nThis will install the pre-packaged RPM to your system.\n\nLets go ahead and create your repository using:\n\n    \n    \n    $ chezmoi init\n\nIt will create your new repository in ~/.local/share/chezmoi/. You can easily\ncd to this directory by using:\n\n    \n    \n    $ chezmoi cd\n\nLets add our first file:\n\n    \n    \n    chezmoi add ~/.bashrc\n\n... to add your bashrc file to your chezmoi repository.\n\nNote: if your bashrc file is actually a symlink, you will need to add the -f\nflag to follow it and read the contents of the real file.\n\nYou can now edit this file using:\n\n    \n    \n    $ chezmoi edit ~/.bashrc\n\nNow lets add a private file, This is a file that has the permissions 600 or\nsimilar. I have a file at .ssh/config that I would like to add by using\n\n    \n    \n    $ chezmoi add ~/.ssh/config\n\nChezmoi uses special prefixes to keep track of what is a hidden file and a\nprivate file to work around Git\u2019s limitations. Run the following command to\nsee it:\n\n    \n    \n    $ chezmoi cd\n\nDo note that files that are marked as private are not actually private, they\nare still saved as plain text in your git repo. More on that later.\n\nYou can apply any changes by using:\n\n    \n    \n    $ chezmoi apply\n\nand inspect what is different by using\n\n    \n    \n    $ chezmoi diff\n\n### Using variables and templates\n\nTo export all of your data Chezmoi can gather, run:\n\n    \n    \n    $ chezmoi data\n\nMost of these are information about your username, arch, hostname, os type and\nos name. But you can also add our own variables.\n\nGo ahead and run:\n\n    \n    \n    $ chezmoi edit-config\n\n... and input the following:\n\n    \n    \n    [data] email = \"fedorauser@example.com\" name = \"Fedora Mcdora\"\n\nSave your file and run chezmoi data again. You will see on the bottom that\nyour email and name are now added. You can now use these with templates with\nChezmoi. Run:\n\n    \n    \n    $ chezmoi add -T --autotemplate ~/.gitconfig\n\n... to add your gitconfig as a template into Chezmoi. If Chezmoi is successful\nin inferring template correctly, you could get the following:\n\n    \n    \n    [user] email = \"{{ .email }}\" name = \"{{ .name }}\"\n\nIf it does not, you can change the file to this instead.\n\nInspect your file with:\n\n    \n    \n    $ chezmoi edit ~/.gitconfig\n\nAfter using\n\n    \n    \n    $ chezmoi cat ~/.gitconfig\n\n... to see what chezmoi will generate for this file. My generated example is\nbelow:\n\n    \n    \n    [root@a6e273a8d010 ~]# chezmoi cat ~/.gitconfig [user] email = \"fedorauser@example.com\" name = \"Fedora Mcdora\" [root@a6e273a8d010 ~]#\n\nIt will generate a file filled with the variables in our chezmoi config. You\ncan also use the varibles to perform simple logic statements. One example is:\n\n    \n    \n    {{- if eq .chezmoi.hostname \"fsteel\" }} # this will only be included if the host name is equal to \"fsteel\" {{- end }}\n\nDo note that for this to work the file has to be a template. You can check\nthis by seeing if the file has a \u201c.tmpl\u201d appended to its name on the file in\nchezmoi cd, or by readding the file using the -T option\n\n### Keeping secrets... secret\n\nTo troubleshoot your setup, use the following command.\n\n    \n    \n    $ chezmoi doctor\n\nWhat is important here is that it also shows you the password managers it\nsupports.\n\n    \n    \n    [root@a6e273a8d010 ~]# chezmoi doctor warning: version dev ok: runtime.GOOS linux, runtime.GOARCH amd64 ok: /root/.local/share/chezmoi (source directory, perm 700) ok: /root (destination directory, perm 550) ok: /root/.config/chezmoi/chezmoi.toml (configuration file) ok: /bin/bash (shell) ok: /usr/bin/vi (editor) warning: vimdiff (merge command, not found) ok: /usr/bin/git (source VCS command, version 2.25.1) ok: /usr/bin/gpg (GnuPG, version 2.2.18) warning: op (1Password CLI, not found) warning: bw (Bitwarden CLI, not found) warning: gopass (gopass CLI, not found) warning: keepassxc-cli (KeePassXC CLI, not found) warning: lpass (LastPass CLI, not found) warning: pass (pass CLI, not found) warning: vault (Vault CLI, not found) [root@a6e273a8d010 ~]#\n\nYou can use either of these clients, or a generic client, or your system\u2019s\nKeyring.\n\nFor GPG, you will need to add the following to your config using:\n\n    \n    \n    $ chezmoi edit-config\n    \n    \n    [gpg] recipient = \"<Your GPG keys Recipient\"\n\nYou can use:\n\n    \n    \n    $ chezmoi add --encrypt\n\n... to add any files, these will be encrypted in your source respository and\nnot exposed to the public world as plain text. Chezmoi will automatically\ndecrypt them when applying.\n\nWe can also use them in templates. For example, a secret token stored in Pass\n(covered on Fedora Magazine). Go ahead and generate your secret.\n\nIn this example, it\u2019s called \u201cgithubtoken\u201d:\n\n    \n    \n    rwaltr@fsteel:~] $ pass ls Password Store \u2514\u2500\u2500 githubtoken [rwaltr@fsteel:~] $\n\nNext, edit your template, such as your .gitconfig we created earlier and add\nthis lines.\n\n    \n    \n    token = {{ pass \"githubtoken\" }}\n\nThen lets inspect using:\n\n    \n    \n    $ chezmoi cat ~/.gitconfig\n    \n    \n    [rwaltr@fsteel:~] $ chezmoi cat ~/.gitconfig This is Git's per-user configuration file. [user] name = Ryan Walter email = rwalt@pm.me token = mysecrettoken [rwaltr@fsteel:~] $\n\nNow your secrets are properly secured in your password manager, your config\ncan be publicly shared without risk!\n\n## Final notes\n\nThis is only scratching the surface. Please check out Chezmoi\u2019s website for\nmore information. The author also has his dotfiles public if you are looking\nfor more examples on how to use Chezmoi.\n\n### Like this:\n\nLike Loading...\n\nFedora Project community\n\n#### Ryan Walter\n\nFedora Contributor, Linux & Open Source Ambassador, Destroyer of Assets,\nTerrible tweeter,\n\n### 13 Comments\n\n  1. #### Yaroslav\n\nTo store dotfiles in a VCS it\u2019s enough to have a bare git repository (see\nhttps://www.atlassian.com/git/tutorials/dotfiles for the full recipe). Your\ntool seems to contradict the UNIX philosophy that there should be one\ninstrument for each task. To create dotfiles from templates seems an\nununderstandable overhead here.\n\nApril 3, 2020\n\n     * #### Paul W. Frields\n\n       1. Linux isn\u2019t UNIX.\n       2. There is more than one philosophy for tools.\n\nApril 4, 2020\n\n       * #### Yaroslav\n\nWhat exactly in your comment should be not obvious for Linux users? Linux\nbelongs to the UNIX family. See https://en.wikipedia.org/wiki/Linux Yes, I\u2019m\naware of the existence different philosophies. UNIX philosophy is pretty good\nthough. Care to explain what philosophy or good programming patterns this tool\nfollows?\n\nApril 4, 2020\n\n         * #### Sebastiaan Franken\n\nNo, it doesn\u2019t. Linux is a UNIX-like (with emphasis on the like part) OS\nfamily. It\u2019 s not part of the UNIX family.\n\nAlso, \u201cgood programming patterns\u201d seem to change every six months or so...\n\nApril 6, 2020\n\n     * #### Ryan Walter\n\nI would disagree, I would say it embraces the Unix philosophy.\n\nIt does one thing well, it builds your dotfiles based on a template. It does\nnot solve encryption. It uses GPG to do that, it does not solve password\nmanagement. It uses password managers for that. It does not solve code\nrevisioning. It uses Git (or any of your choosing)\n\nI was originally using git with stow. Which would be similar to your config\nalias. But when I was installing to other systems. I would have to chmod all\nmy private files. I also was attempting to branches to separate my roles. But\nfound that managing the commits between the two branches a bit of a chore.\n\nApril 4, 2020\n\n  2. #### ergr\n\nI have symlink to my config file for example .vimrc\n\nmc alvways ask me breaking simlink or no. How tell mc tho stop ask me? In\nnormal hard link too!\n\nApril 4, 2020\n\n  3. #### aairey\n\nI am using dotdrop, which also does many of these except the secrets\nmanagement and templating (AFAIK).\n\nSeems I need to look into chezmoi, thanks for sharing!\n\nApril 4, 2020\n\n  4. #### Stephen\n\nA timely article for me as I was in the process of cleaning up my dot files\nagain. I was using stow, but had seen some drawbacks with it over time. I set\nup chezmoi, and have it covering the primary dot files with intentions of\nadding all of them in eventually. The biggest issue I am having currently is\ntrying to stop old habits from interfering with it, like editing a file with\nVim instead of chezmoi edit. I use Silverblue, so it would be nice if this was\nlayered from an official package repo or COPR at least. Ideally, it should be\nable to be a flatpak quite easily.\n\nApril 6, 2020\n\n     * #### Ryan Walter\n\nHave you started using templates yet? If you edited your file and it\u2019s not a\ntemplate. You can re-add it using Chezmoi add and it would achieve the same\naffect.\n\nThis took me some time to adapt to as well. But Chezmoi edit is mainly\nimportant for your template files. Since your target will be different from\nyour source.\n\nPackaging it for Fedora is something I\u2019m currently looking at. But I have not\npackaged something before and might take me some time.\n\nApril 6, 2020\n\n       * #### Stephen\n\nHello, Yes I have my .gitconfig setup as a template, and I had already been\nworking on a .zshrc template prior to your article, so like I said timely. I\nhave my pgp key setup for encryption as well. It seems promising, and a better\nthought out solution thanthe usual methods of dot file care taking. The\npackaging would be good since it becomes a problem at update time on\nSilverblue, basically I need to update it separately and manually each time\nwhile I choose to use it. Official, even COPR repos will get automatically\nchecked for updates, plus the added benefit of being built with everything\nelse at the same time with the same versions of lib\u2019s.\n\nApril 6, 2020\n\n  5. #### Patrick O'Callaghan\n\nI have a minor nit: Linux (and UNIX) have no such thing as \u201chidden\u201d files.\nDotfiles are only \u201chidden\u201d in the sense that by default they don\u2019t appear when\nyou run \u2018ls\u2019 and some other utilities that follow the same convention. They\ndon\u2019t have some magical special property that hides them from anything else.\nAlthough old hands know this perfectly well, it\u2019s better to avoid this\nterminology so as not to confuse newcomers.\n\nApril 8, 2020\n\n  6. #### Klaus Ferreira\n\nThanks for the article. I was about to get crazy with my dot files hahaha BTW,\nis it me or you can only use diff BEFORE applying? I mean, if I follow the\narticle (using diff AFTER applying) I got nothing as output.\n\nApril 9, 2020\n\n     * #### Ryan Walter\n\nYou are correct. Diff should come before apply. Otherwise the states match and\nthere is nothing that is different! My bad\n\nApril 9, 2020\n\nComments are Closed\n\nFedora Linux 40 is available now. Read the release announcement for all the\ndetails.\n\n### Subscribe to Fedora Magazine via Email\n\nJoin 9,801 other subscribers\n\n### Contribute to the Magazine\n\nFedora Magazine is looking for contributors!\n\n  * Propose a new article\n  * Become a writer\n  * Become an editor\n\nThe opinions expressed on this website are those of each author, not of the\nauthor's employer or of Red Hat. Fedora Magazine aspires to publish all\ncontent under a Creative Commons license but may not be able to do so in all\ncases. You are responsible for ensuring that you have the necessary permission\nto reuse any work on this site. The Fedora logo is a trademark of Red Hat,\nInc. Terms and Conditions\n\n%d\n\n", "frontpage": false}
