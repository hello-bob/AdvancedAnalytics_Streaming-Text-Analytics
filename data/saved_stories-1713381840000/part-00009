{"aid": "40062778", "title": "Participating in the Spring Lisp Game jam, why and how", "url": "https://drewsh.com/lisp-game-jam.html", "domain": "drewsh.com", "votes": 2, "user": "todsacerdoti", "posted_at": "2024-04-17 10:43:46", "comments": 0, "source_title": "Participating in the Spring Lisp Game jam, why and how", "source_text": "Participating in the Spring Lisp Game jam, why and how | Drew's blogsite\n\nThese are public thoughts\n\n  * mastodon\n  * github\n  * rss\n\n# Participating in the Spring Lisp Game jam, why and how\n\nPosted on Apr 17, 2024 in gamedev Likes: 6\n\n## Please participate in the jam!\n\nIf you're on this webpage, there's a good chance you're already into lisp, or\nthat the new notation will not scare you. The link to the jam:\nhttps://itch.io/jam/spring-lisp-game-jam-2024, read ahead if you're interested\nin participating, I have some game engine options you might like!\n\n## Why I love the concept\n\nI'm a big lisp-head, with my longtime editor being emacs, and my current\npreferred language for doing tasks being Common Lisp. This is why I was\nchuffed to hear about the tradition of Lisp Game Jams, even though I've never\nmade a game before.\n\n## What should you use to participate?\n\nFor someone who has never made a video game, it's best to use a game engine to\nhandle the nitty-gritty of game code and just focus on the ideas you are\nbringing.\n\n### Game engines for classic lisps\n\n  * Trial, a Common Lisp game engine that has already been used to make a commercial game, Kandria.\n\n  * Chickadee, a game engine for Guile Scheme, a language that would be familiar to users of the Guix package manager.\n\nI like both of these options, but at first I dismissed them because there is\nno way to distribute these games on the web in the form of HTML5 games.\n\n### Godot\n\nGodot is a classic game engine with a GUI, sort of reminiscent of something\nlike Unity or Unreal, but much better because it's free and open source. It\nsupports a lot of languages, one of which is a native lisp called GDLisp.\n\nUse this if you like Graphical interfaces, and would love to have way more\ntutorials than all of the other options combined.\n\n### Javascript game engines\n\nThere are two ways to compile a lisp to JavaScript, ClojureScript, and\nParenscript.\n\nClojureScript is the whole clojure language that compiles to javascript, and\nhas lispy bindings available to a lot of javascript libraries. I found the\nsetup a bit compilcated, but it's a great choice. More information about a\nsetup here: https://github.com/trevordilley/phaser-cljs-template (it is a bit\nout-dated so you can shoot me an email on clojure @ this domain if you want\nhelp)\n\nParenscript is a common lisp library that allows you to use macros to generate\njavascript. In this method we would just write lisp with an eye on the\njavascript being generated as we go, as this is not a language proper. The\nmailing list is incredibly helpful: https://common-lisp.net/cgi-\nbin/mailman/listinfo/parenscript-devel\n\nAlright, now that we know how to use lisps to generate javascript, here's a\ncouple libraries you can use:\n\n  * https://phaser.io: Seems to be the most popular JS game engine, and has a module available for Clojure\n\n  * https://melonjs.org/: Has a bit simpler of an API, but is not as popular.\n\n### Lua land\n\nFennel is a lispy layer over Lua that is compiled out to plain Lua. I don't\nparticularly like it because it is a very leaky abstraction exactly due to the\nfact that it does not have a runtime, you sort of have to learn Lua to\nactually use it. This limitation comes with a great benefit though, you can\nuse it wherever you can use lua.\n\n  * Love2D, a 2D (duh) game engine that uses Lua, and games made here can be compiled to absolutely any platform, including the browser, which makes it a great choice for game jams, where you want as many people to be able to play your game as possible.\n\n  * TIC-80, a fantasy console that is a self-contained application for making games, with a built-in code editor, audio workstation, map ,and sprite editor. Probably the best choice for making a tiny game and supports fennel as well. The only possible drawback might be the retro limitations on code size, sound channels, 4-bit colour, etc.\n\nThis is what I would recommend if you don't have an irrational hate of fennel\nlike I do.\n\n### Dark horse: Python!?\n\nPyGame is a very simple game engine that runs absolutely anywhere you could\nrun python. I use python for my dayjob, and I love it very much.\n\nComing to how to use it with lisp, Hy is a lisp that runs on python and can\nuse any python library. It feels much nicer to use than Fennel, and any\nleakiness in the implementation is not an issue for me, since I'm quite good\nat python.\n\nThere are many ways to bundle python scripts into self contained applications,\nwhich need you to have the platforms on hand to actually do it for different\noperating systems, which is also not an issue for me since I have access to\nall three major operating systems.\n\nThe issue with this is you can't compile for the web without uploading a whole\npython interpreter using WebAssembly, but that sounds like something I do not\nwant to do.\n\n## Other useful tools:\n\n  * Tiled, a map editor natively supported by many engines\n  * LibreSprite, a great sprite editor.\n  * Milkytracker, an old school audio workstation.\n\nlisp python\n\n\u00a9 2024 Drew Jose - This work is licensed under a Share-alike license\n\nBuilt with Pelican using Solarized Flex theme | Switch to the dark | light | browser theme\n\n", "frontpage": false}
