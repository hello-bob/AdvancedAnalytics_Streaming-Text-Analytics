{"aid": "40155723", "title": "Everyone seems to have forgotten about Gemma", "url": "https://huggingface.co/google/recurrentgemma-2b-it", "domain": "huggingface.co", "votes": 1, "user": "marcelmarais", "posted_at": "2024-04-25 10:34:29", "comments": 0, "source_title": "google/recurrentgemma-2b-it \u00b7 Hugging Face", "source_text": "google/recurrentgemma-2b-it \u00b7 Hugging Face\n\nHugging Face\n\n#\n\ngoogle\n\n/\n\nrecurrentgemma-2b-it\n\nText Generation Transformers Safetensors recurrent_gemma conversational\nInference Endpoints 24 papers\n\nModel card Files Files and versions Community\n\n11\n\nEdit model card\n\n## Access RecurrentGemma on Hugging Face\n\nThis repository is publicly accessible, but you have to accept the conditions\nto access its files and content.\n\nTo access RecurrentGemma on Hugging Face, you\u2019re required to review and agree\nto Google\u2019s usage license. To do this, please ensure you\u2019re logged-in to\nHugging Face and click below. Requests are processed immediately.\n\nLog in or Sign Up to review the conditions and access this model content.\n\n# RecurrentGemma Model Card\n\nModel Page: RecurrentGemma\n\nThis model card corresponds to the 2B instruction version of the\nRecurrentGemma model. You can also visit the model card of the 2B base model.\n\nResources and technical documentation:\n\n  * Responsible Generative AI Toolkit\n  * RecurrentGemma on Kaggle\n\nTerms of Use: Terms\n\nAuthors: Google\n\n## Model information\n\n## Usage\n\nBelow we share some code snippets on how to get quickly started with running\nthe model. First make sure to `pip install --upgrade\ngit+https://github.com/huggingface/transformers.git, then copy the snippet\nfrom the section that is relevant for your usecase.\n\n### Running the model on a single / multi GPU\n\n    \n    \n    from transformers import AutoTokenizer, AutoModelForCausalLM tokenizer = AutoTokenizer.from_pretrained(\"google/recurrentgemma-2b-it\") model = AutoModelForCausalLM.from_pretrained(\"google/recurrentgemma-2b-it\", device_map=\"auto\") input_text = \"Write me a poem about Machine Learning.\" input_ids = tokenizer(input_text, return_tensors=\"pt\").to(\"cuda\") outputs = model.generate(**input_ids) print(tokenizer.decode(outputs[0]))\n\n### Chat Template\n\nThe instruction-tuned models use a chat template that must be adhered to for\nconversational use. The easiest way to apply it is using the tokenizer's\nbuilt-in chat template, as shown in the following snippet.\n\nLet's load the model and apply the chat template to a conversation. In this\nexample, we'll start with a single user interaction:\n\n    \n    \n    from transformers import AutoTokenizer, AutoModelForCausalLM import transformers import torch model_id = \"google/recurrentgemma-2b-it\" dtype = torch.bfloat16 tokenizer = AutoTokenizer.from_pretrained(model_id) model = AutoModelForCausalLM.from_pretrained( model_id, device_map=\"cuda\", torch_dtype=dtype, ) chat = [ { \"role\": \"user\", \"content\": \"Write a hello world program\" }, ] prompt = tokenizer.apply_chat_template(chat, tokenize=False, add_generation_prompt=True)\n\nAt this point, the prompt contains the following text:\n\n    \n    \n    <bos><start_of_turn>user Write a hello world program<end_of_turn> <start_of_turn>model\n\nAs you can see, each turn is preceded by a <start_of_turn> delimiter and then\nthe role of the entity (either user, for content supplied by the user, or\nmodel for LLM responses). Turns finish with the <end_of_turn> token.\n\nYou can follow this format to build the prompt manually, if you need to do it\nwithout the tokenizer's chat template.\n\nAfter the prompt is ready, generation can be performed like this:\n\n    \n    \n    inputs = tokenizer.encode(prompt, add_special_tokens=False, return_tensors=\"pt\") outputs = model.generate(input_ids=inputs.to(model.device), max_new_tokens=150) print(tokenizer.decode(outputs[0]))\n\n### Model summary\n\n#### Description\n\nRecurrentGemma is a family of open language models built on a novel recurrent\narchitecture developed at Google. Both pre-trained and instruction-tuned\nversions are available in English.\n\nLike Gemma, RecurrentGemma models are well-suited for a variety of text\ngeneration tasks, including question answering, summarization, and reasoning.\nBecause of its novel architecture, RecurrentGemma requires less memory than\nGemma and achieves faster inference when generating long sequences.\n\n#### Inputs and outputs\n\n  * Input: Text string (e.g., a question, a prompt, or a document to be summarized).\n  * Output: Generated English-language text in response to the input (e.g., an answer to the question, a summary of the document).\n\n#### Citation\n\n    \n    \n    @article{recurrentgemma_2024, title={RecurrentGemma}, url={}, DOI={}, publisher={Kaggle}, author={Griffin Team, Soham De, Samuel L Smith, Anushan Fernando, Alex Botev, George-Christian Muraru, Ruba Haroun, Leonard Berrada et al.}, year={2024} }\n\n### Model data\n\n#### Training dataset and data processing\n\nRecurrentGemma uses the same training data and data processing as used by the\nGemma model family. A full description can be found on the Gemma model card.\n\n## Implementation information\n\n### Hardware and frameworks used during training\n\nLike Gemma, RecurrentGemma was trained on TPUv5e, using JAX and ML Pathways.\n\n## Evaluation information\n\n### Benchmark results\n\n#### Evaluation approach\n\nThese models were evaluated against a large collection of different datasets\nand metrics to cover different aspects of text generation:\n\n#### Evaluation results\n\nBenchmark| Metric| RecurrentGemma 2B  \n---|---|---  \nMMLU| 5-shot, top-1| 38.4  \nHellaSwag| 0-shot| 71.0  \nPIQA| 0-shot| 78.5  \nSocialIQA| 0-shot| 51.8  \nBoolQ| 0-shot| 71.3  \nWinoGrande| partial score| 67.8  \nCommonsenseQA| 7-shot| 63.7  \nOpenBookQA| 47.2  \nARC-e| 72.9  \nARC-c| 42.3  \nTriviaQA| 5-shot| 52.5  \nNatural Questions| 5-shot| 11.5  \nHumanEval| pass@1| 21.3  \nMBPP| 3-shot| 28.8  \nGSM8K| maj@1| 13.4  \nMATH| 4-shot| 11.0  \nAGIEval| 23.8  \nBIG-Bench| 35.3  \nAverage| 44.6  \n  \n## Ethics and safety\n\n### Ethics and safety evaluations\n\n#### Evaluations approach\n\nOur evaluation methods include structured evaluations and internal red-teaming\ntesting of relevant content policies. Red-teaming was conducted by a number of\ndifferent teams, each with different goals and human evaluation metrics. These\nmodels were evaluated against a number of different categories relevant to\nethics and safety, including:\n\n  * Text-to-text content safety: Human evaluation on prompts covering safety policies including child sexual abuse and exploitation, harassment, violence and gore, and hate speech.\n  * Text-to-text representational harms: Benchmark against relevant academic datasets such as WinoBias and BBQ Dataset.\n  * Memorization: Automated evaluation of memorization of training data, including the risk of personally identifiable information exposure.\n  * Large-scale harm: Tests for \u201cdangerous capabilities,\u201d such as chemical, biological, radiological, and nuclear (CBRN) risks; as well as tests for persuasion and deception, cybersecurity, and autonomous replication.\n\n#### Evaluation results\n\nThe results of ethics and safety evaluations are within acceptable thresholds\nfor meeting internal policies for categories such as child safety, content\nsafety, representational harms, memorization, large-scale harms. On top of\nrobust internal evaluations, the results of well known safety benchmarks like\nBBQ, Winogender, Winobias, RealToxicity, and TruthfulQA are shown here.\n\nBenchmark| Metric| RecurrentGemma 2B| RecurrentGemma 2B IT  \n---|---|---|---  \nRealToxicity| avg| 9.8| 7.6  \nBOLD| 39.3| 52.4  \nCrowS-Pairs| top-1| 41.1| 43.4  \nBBQ Ambig| top-1| 62.6| 71.1  \nBBQ Disambig| top-1| 58.4| 50.8  \nWinogender| top-1| 55.1| 54.7  \nTruthfulQA| 35.1| 42.7  \nWinobias 1_2| 58.4| 56.4  \nWinobias 2_2| 90.0| 75.4  \nToxigen| 56.7| 50.0  \n  \n## Model usage and limitations\n\n### Known limitations\n\nThese models have certain limitations that users should be aware of:\n\n  * Training data\n\n    * The quality and diversity of the training data significantly influence the model's capabilities. Biases or gaps in the training data can lead to limitations in the model's responses.\n    * The scope of the training dataset determines the subject areas the model can handle effectively.\n  * Context and task complexity\n\n    * LLMs are better at tasks that can be framed with clear prompts and instructions. Open-ended or highly complex tasks might be challenging.\n    * A model's performance can be influenced by the amount of context provided (longer context generally leads to better outputs, up to a certain point).\n  * Language ambiguity and nuance\n\n    * Natural language is inherently complex. LLMs might struggle to grasp subtle nuances, sarcasm, or figurative language.\n  * Factual accuracy\n\n    * LLMs generate responses based on information they learned from their training datasets, but they are not knowledge bases. They may generate incorrect or outdated factual statements.\n  * Common sense\n\n    * LLMs rely on statistical patterns in language. They might lack the ability to apply common sense reasoning in certain situations.\n\n### Ethical considerations and risks\n\nThe development of large language models (LLMs) raises several ethical\nconcerns. In creating an open model, we have carefully considered the\nfollowing:\n\n  * Bias and fairness\n\n    * LLMs trained on large-scale, real-world text data can reflect socio-cultural biases embedded in the training material. These models underwent careful scrutiny, input data pre-processing described and posterior evaluations reported in this card.\n  * Misinformation and misuse\n\n    * LLMs can be misused to generate text that is false, misleading, or harmful.\n    * Guidelines are provided for responsible use with the model, see the Responsible Generative AI Toolkit.\n  * Transparency and accountability\n\n    * This model card summarizes details on the models' architecture, capabilities, limitations, and evaluation processes.\n    * A responsibly developed open model offers the opportunity to share innovation by making LLM technology accessible to developers and researchers across the AI ecosystem.\n\nRisks Identified and Mitigations:\n\n  * Perpetuation of biases: It's encouraged to perform continuous monitoring (using evaluation metrics, human review) and the exploration of de-biasing techniques during model training, fine-tuning, and other use cases.\n  * Generation of harmful content: Mechanisms and guidelines for content safety are essential. Developers are encouraged to exercise caution and implement appropriate content safety safeguards based on their specific product policies and application use cases.\n  * Misuse for malicious purposes: Technical limitations and developer and end-user education can help mitigate against malicious applications of LLMs. Educational resources and reporting mechanisms for users to flag misuse are provided. Prohibited uses of Gemma models are outlined in our terms of use.\n  * Privacy violations: Models were trained on data filtered for removal of PII (Personally Identifiable Information). Developers are encouraged to adhere to privacy regulations with privacy-preserving techniques.\n\n## Intended usage\n\n### Application\n\nOpen Large Language Models (LLMs) have a wide range of applications across\nvarious industries and domains. The following list of potential uses is not\ncomprehensive. The purpose of this list is to provide contextual information\nabout the possible use-cases that the model creators considered as part of\nmodel training and development.\n\n  * Content creation and communication\n\n    * Text generation: These models can be used to generate creative text formats like poems, scripts, code, marketing copy, email drafts, etc.\n    * Chatbots and conversational AI: Power conversational interfaces for customer service, virtual assistants, or interactive applications.\n    * Text summarization: Generate concise summaries of a text corpus, research papers, or reports.\n  * Research and education\n\n    * Natural Language Processing (NLP) research: These models can serve as a foundation for researchers to experiment with NLP techniques, develop algorithms, and contribute to the advancement of the field.\n    * Language Learning Tools: Support interactive language learning experiences, aiding in grammar correction or providing writing practice.\n    * Knowledge Exploration: Assist researchers in exploring large bodies of text by generating summaries or answering questions about specific topics.\n\n### Benefits\n\nAt the time of release, this family of models provides high-performance open\nlarge language model implementations designed from the ground up for\nResponsible AI development compared to similarly sized models.\n\nUsing the benchmark evaluation metrics described in this document, these\nmodels have shown to provide superior performance to other, comparably-sized\nopen model alternatives.\n\nIn particular, RecurrentGemma models achieve comparable performance to Gemma\nmodels but are faster during inference and require less memory, especially on\nlong sequences.\n\nDownloads last month\n\n    1,765\n\nSafetensors\n\nModel size\n\n2.68B params\n\nTensor type\n\nBF16\n\n\u00b7\n\n## Collection including google/recurrentgemma-2b-it\n\n#### RecurrentGemma Release\n\nCollection\n\n6 items \u2022 Updated 14 days ago \u2022 12\n\n", "frontpage": false}
