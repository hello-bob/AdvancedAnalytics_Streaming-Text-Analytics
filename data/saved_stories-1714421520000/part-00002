{"aid": "40197792", "title": "Guiding users away from CD and ls", "url": "https://terminal.click/posts/2024/04/guiding-users-away-from-cd-and-ls/", "domain": "terminal.click", "votes": 1, "user": "_ZeD_", "posted_at": "2024-04-29 13:04:25", "comments": 2, "source_title": "Guiding users away from cd and ls", "source_text": "Guiding users away from cd and ls :: Terminal Click \u2014 Bringing Dead Text to\nLife\n\n\ud83d\uddb1\ufe0f terminal.click\n\n6 minutes 1177 Words\n\n2024-04-24 17:00\n\nhandmade\n\nDevlog\n\n# Guiding users away from cd and ls\n\nTL;DR: We\u2019ve devised a strategy to shepherd users away from archaic commands.\nI hope this case study shapes our thinking on UX for new terminals.\n\nDear Terminal Aficionados,\n\nExcited to have the free time to summarize progress I\u2019ve made on Twitch this\nyear. The biggest focus was teaching new users that Terminal Click has a\nvisual browser. My friends suggested I eliminate the cd and ls commands\nentirely because our alternative is superior. However, as I kept reflecting on\nJes Chuhta\u2019s fireside chat [1] (along with some private banter) this\nsuggestion to merely chuck out the old guard didn\u2019t sit right with me.\n\nSo what have I done instead?\n\n### Using the Old to Show You the New\n\nAfter running some experiments, the solution that delighted users the most was\nto lull them into believing something like cd exists and then immediately\nviolate expectations:\n\nUser feedback tells me it just seems to click (hehe) now! Notice how we\u2019re\nincorporating new behavior into the old command followed by recommending the\nfaster workflow. Running ls works similarly. Another thing I would like to\nimplement is dissolving the command into a puff of smoke: if someone knows a\nquick shader trick for this please shoot me a message (I use sokol-gfx for the\ngraphics.)\n\nThe rest of the post details what it took to ship this feature. Remember that\nTerminal Click is a native program with a small footprint; it\u2019s not Electron.\n\n### Auto-Suggestion Box\n\nThe very first sign that things are different around these parts is when cd\ngets color-coded into pink. Now it\u2019s possible the user didn\u2019t notice this, so\nwe also generate a drop-down panel with valid suggestions for cd: if that\ndoesn\u2019t catch their attention nothing will! As demonstrated earlier, users can\nfilter down the auto-suggestions as they type out an argument.\n\nWe use microui as our base UI library which means we have to hand-roll plenty\nof custom behavior ourselves, such as smooth scrolling:\n\nPerhaps I should clarify further: microui already supports scrolling on\npanels. What I\u2019m actually demonstrating is this scenario:\n\n  * You\u2019re navigating the suggestions with <TAB>\n  * You scroll far away with the mouse\n  * You press <TAB> again to keep going through the list\n\nIn this situation you need to snap back and show the next item. The snapping\nused to be instant, but it turns out that smooth-scrolling is more user\nfriendly, so that\u2019s what I\u2019ve added.\n\nI\u2019ve also been wanting to implement the Levenshtein distance so we can help\nusers with their typos. Unfortunately this desire to assist can become rabbit\nhole factories, so I\u2019m leaving it there for the time being.\n\n### Real-Time Command Analysis\n\nMost terminal emulators have zero clue what it is you\u2019re typing on the\nkeyboard (that\u2019s left up to a text-only program like zsh.) Terminal Click\nunderstands user input, but until recently it only analyzed user commands when\nit was time to execute them. In order to react instantaneously\u2014like the auto-\nsuggestion box above\u2014we had to implement real-time command detection and\nanalysis. Two major concerns bubbled up while programming this: (1) whether to\ncache results and (2) understanding the nature of these commands (built-in vs\nexternal.)\n\n1\\. Premature Caching is a No No\n\nCommand detection is fancy shmantsy talk for parsing a string. So we have an\nanalyze_user_command(...) function that takes in a user string, and inside it\nwe ask ourselves \u201cHey is the user typing cd, clang, vim etc.? OK let\u2019s react\nto that.\u201d The most straightforward implementation is to run the analysis on\nevery frame. However, the reader will realize this procedure might become very\nexpensive down the road. On the Twitch stream I mused that I\u2019d really like to\ncache prematurely, as a treat: at the very least we should only run the\nanalysis on keystroke changes.\n\nTurns out this impulse caused more trouble than it\u2019s worth. The wiser move is\nto default to a \u201crecompute everything on every frame\u201d philosophy, and forget\nabout any caching efforts for as long as possible. If you have Discord and\nwant the nitty gritty for how I arrived at this conclusion, join the Mr. 4th\nserver to read up on this thread [2].\n\n2\\. Built-In versus External Commands\n\nCurrently we\u2019re only detecting built-in commands \u2013 notice how we color some\nobvious suspects with a bit of pink as soon as they\u2019re validated:\n\nHowever, serious complications arise when we want to analyze external\ncommands. For example if we wish to detect tar and offer visual\nhints/validation about the flags it can accept, we are officially talking\nabout a binary that\u2019s not under Terminal Click\u2019s jurisdiction. I\u2019m leaving\nthis as a provoking thought exercise, because I do believe these complications\ncan be addressed fully \u2013 which I hope to expand on in a future devlog.\n\nP.S. Manual use of tar should be skipped entirely. If Terminal Click has a\nvisual browser, why not support archiving files on the graphical side? Indeed,\ntar might very well be the next candidate to vanish into a puff of smoke!\n\n### Timed Tutorial Hints\n\nIt\u2019s common courtesy to generate hints while the user learns the ropes of your\napp, but it\u2019s critical for their appearance to be pleasant, unobstrusive, and\neasy to review or dismiss.\n\nWe achieve this by implementing the following properties:\n\n  * Fade-In Effect\n  * Countdown Progress Bar\n  * Pause On Hover\n  * Fade-Out Effect\n  * Click to Dismiss\n\nAnother thing I would like to implement is rounded corners. Finally, notice\nhow the hint is away from the action so it can be readily ignored. It really\nbothers me when other apps have them all up in my business and I\u2019m forced to\nhandle it.\n\nA Tangent on Large Language Models\n\nThe Handmade Network often asks me whether I\u2019ve found any use for LLMs while\nmaking this terminal. I admit to one use case.\n\nWhen I was programming the progress bar for tutorial hints, I had to keep in\nmind that hints can be of arbitrary size and display for an arbitrary span of\ntime. Therefore how the progress bar gets rendered and animated is variable\ntoo. There\u2019s a simple math equation to solve this and it\u2019s fun and quick to\nderive it... if you\u2019re in a good mood. I wasn\u2019t in a good mood, I was having a\npersonal bad day.\n\nPrompting an LLM for the solution and verifying it was a smart use of the\ntool.\n\n### Okay, What\u2019s Next?\n\nI am aiming to ship an alpha to users, ideally this year, so I will continue\npolishing the presentation and fixing the obvious known bugs.\n\nFeel free to drop your thoughts at abner@terminal.click and don\u2019t forget to\nfollow on Twitch to catch some of this work live, especially as I start\ncollabs with Mr. 4th soon!\n\nWith any luck, more devlogs will come out a little faster too.\n\nYours sincerely,\n\nAbner Coimbre\n\n## Footnotes\n\n[1] Jes is a professional UI/UX designer that joined me at Handmade Seattle\n2023. She\u2019s made me care a lot more about the onboarding story for beginners.\n\n[2] I understand this is relevant information locked behind a login page. I\u2019ll\nrequest permission to export this Discord thread.\n\nI Overpromised \u2192\n\n\u00a92024 Abner Coimbre\n\n", "frontpage": false}
