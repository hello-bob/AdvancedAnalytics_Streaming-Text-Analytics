{"aid": "40117820", "title": "Turkish Language, Browsers and Punycode", "url": "https://efe.me/2024/04/turkish-language-browsers-and-punycode", "domain": "efe.me", "votes": 1, "user": "efeoge", "posted_at": "2024-04-22 19:24:57", "comments": 0, "source_title": "Turkish Language, Browsers and Punycode", "source_text": "Turkish Language, Browsers and Punycode | Efe \u00d6ge\n\n# \u2190 Homepage\n\n# Turkish Language, Browsers and Punycode\n\n20 Apr 2024\n\nThe Turkish alphabet has been a version of the Latin alphabet for almost a\nhundred years thanks to the Turkish alphabet reform. There are two main\ndifferences between the Turkish and English alphabets.\n\n  * Q, W and X letters do not exist in Turkish alphabet.\n  * Turkish alphabet has seven letters that are not in the English alphabet. They are \u00c7 (\u00e7), \u011e (\u011f), I (i), \u0130 (\u0131), \u00d6 (\u00f6), \u015e (\u015f), and \u00dc (\u00fc).\n\nEach of these additional letters have an alternative in the English alphabet.\nTherefore, it is possible to \u2018downgrade\u2019 Turkish-specific characters to\nEnglish alphabet letters. For instance, my last name is \u00d6ge, which can be\nwritten as Oge, and T\u00fcrkiye can be written as Turkiye.\n\nIn the early phase of the Internet, \u2018downgraded\u2019 letters were used for any\nwords with Turkish-specific letters in the domain names. For instance, \u0130\u015f\nBankas\u0131, the first Turkish bank website, was created as isbank.com.tr on June\n17, 1997. Domain naming like this would happen because it wasn\u2019t possible to\nregister domain names with non-ASCII characters.\n\nIn 2008, Internationalized domain names were introduced with\nInternationalizing Domain Names in Applications (RFC 3490) standard. Then, it\nbecame possible to register domains with Non-ASCII characters (Turkish-\nspecific, Cyrillic and Chinese etc).\n\nTechnically, DNS is built on top of the ASCII character set. It wasn\u2019t\npossible to extend it with all other diacritics or ligatures. In the framework\ngiven, The pragmatic solution is an encoding on top of ASCII which is\nPunycode. Out of the box, non-ASCII characters in the address bar are going to\nbe converted to Punycode whenever you hit enter in the browser. At the\nprogramming level, all the logic will remain in ASCII.\n\n    \n    \n    >>> 'efe\u00f6ge.com'.encode('idna').decode() 'xn--efege-lua.com'\n\nIn the browser, efe\u00f6ge.com -> xn--efege-lua.com.\n\nDoes this work? Yes, it works perfectly at the technical level.\n\nHowever, It wasn\u2019t a pleasant experience to see these muddy dashes and xn\nprefixes in every URL as for end user. The good thing is that this problem is\nabout the browser, not the protocol. I believe this is one of the good\nexamples of the Separation of Concerns.\n\nAs a quick but risky solution, browsers could display Unicode instead of\nPunycode. However, this poses a significant threat. In Cyrillic, for example,\n\u2018\u0435\u2019 and \u2018\u0430\u2019 are distinct from the Latin/English \u2018e\u2019 and \u2018a\u2019 even though they\nmay look similar.\n\n  * amazon.com\n  * \u0430mazon.com (first a letter is Cyrillic a)\n  * am\u0430zon.com (second a letter is Cyrillic a)\n  * \u0430m\u0430zon.com (first and second a letters are Cyrillic a)\n\nThese are all different domain names, which could lead to a problem known as\nan IDN Homograph Attack.\n\nAs a smart and well-thought solution, Firefox and other modern browsers\nimplemented an algorithm for Internationalized domain name display which finds\na sweet spot between security and user experience. Therefore, there is no need\nto be afraid of it.\n\nAdditionally, It is possible to show all non-ASCII characters as Punycode in\nFirefox. Just set IDN_show_punycode as true in about:config.\n\nI admire the dedication and effort put behind the modern Internet, which makes\neverything appear smooth and effortless.\n\n", "frontpage": false}
