{"aid": "40140396", "title": "Building a full Django project, starting with a single file", "url": "https://www.mostlypython.com/django-from-first-principles/", "domain": "mostlypython.com", "votes": 30, "user": "kqnrnq17r", "posted_at": "2024-04-24 03:59:31", "comments": 4, "source_title": "Django from first principles", "source_text": "Django from first principles\n\nMostly Python\n\nSign in Subscribe\n\nDjango\n\n# Django from first principles\n\n#### Eric Matthes\n\nApr 4, 2024 \u2014 5 min read\n\nMP 90: Building a complete Django project from a single file.\n\nNote: This is the first post in a series about building a full Django project,\nstarting with a single file. This series will be free to everyone, as soon as\neach post comes out. ^1\n\nFor a long time, Django has seemed more complex than other web frameworks such\nas Flask. This reputation is largely based on a somewhat unfair comparison\nbetween the \"simplest\" Django project and the \"simplest\" Flask project. That\ncomparison often lands in favor of Flask, because Flask's documentation starts\noff with a single-file project consisting of just five lines of code.\n\nIn this project we'll build a Django project, but we'll take an approach\nthat's much different from most Django tutorials. We'll start with a single\nfile, just like the Flask example, and the single-file demos we see from other\nframeworks. As we build out the project, we'll add pieces one at a time, only\nas they're needed. By the time we're finished, we'll have a standard Django\nproject built from the ground up.\n\n## The source of Django's (initial) complexity\n\nDjango's initial complexity stems from the fact that most tutorials tell\npeople to start with these two commands:\n\n    \n    \n    $ django-admin startproject <project-name> . $ python manage.py startapp <app-name>\n\nAfter running these two commands, there are twelve files you'll need to make\nsense of! If you're an experienced Django developer, that automatically-\ngenerated project structure is a big help. But if you're new to Django, it's\nnot obvious at all how all these parts fit together.\n\n## An alternative approach\n\nRather than starting with these commands, we'll start with just one file that\nserves our project's home page. We'll look at all the parts of the file, so\nthe purpose of every aspect of the project is clear from the start. As we\nprogress in building out the project, we'll only expand out into additional\nfiles and directories when they're needed.\n\nA standard Django project on the left, before writing any of your own code.\nThere are 12 files that people new to Django need to make sense of. It's\npossible to start a Django project with just a single file, as shown on the\nright.\n\n## Where we'll end up\n\nWhen the project is fully developed, we'll end up with a project structure\nthat's almost identical to what you'd get using the startproject and startapp\ncommands. You probably won't ever use the ground-up approach shown in this\nseries again, but you'll come away from it with a much better understanding of\nthe structure of a typical Django project.\n\n## A simple but nontrivial project\n\nA good project for a tutorial series is simple, but nontrivial. This means it\nshould use a database, incorporate user accounts, and feature styling that\nrequires the use of static files.^2\n\nIn this series we'll build a project called BlogMaker Lite. It's my go-to\nproject for Django discussions, because it ticks all the requirements for a\nsimple but nontrivial project. We'll also deploy the project when we're\nfinished, to prove that the final version of the project would work in\nproduction.\n\n## Conclusions\n\nDjango is more complex than some other web frameworks, because it includes a\nlot more out of the box than minimalist frameworks. By the time you've built\nout everything your real-world project needs, a typical Django project isn't\nmuch more complex than a fully-built project using a different framework.\n\nWhile startproject and startapp give experienced Django developers a nice\nstarting point for new projects, people learning about Django don't need to\nstart with the complexity that those two commands introduce. Instead, we can\nstart from a single file that's easier to understand, and build out each new\npiece as it's needed.\n\nIf you're new to Django, hopefully this series will be a helpful way to see\nthe framework for the first time. If you've been using Django for a while,\nyou'll probably come away with a better understanding of the structure you've\nalready been seeing in your projects. And if you're really experienced with\nDjango, maybe you'll see the framework from a newcomer's eyes once again.\n\nIn the next post, we'll start by writing a single file that serves the\nproject's home page.\n\nNote: I'd love feedback throughout this series. If you have any thoughts or\nreactions, please leave a comment or reach out in whatever way works best for\nyou.\n\n1\n\nUsually, new series on Mostly Python are only available to paid subscribers\nfor a period of six weeks. This series will be free to everyone as soon as\neach post comes out. I'm still finishing up the migration from Substack, and\nit's a little easier to only publish free posts for a little while longer.\n\nMore importantly, I want this series to be available to people in the Django\ncommunity as soon as each post is published. This series builds on work that\npeople have been sharing at a number of recent DjangoCons, where people have\nbeen challenging each other to come up with the shortest working single-file\nDjango project possible.\n\nIf you're curious about some of this prior work, start by watching Carlton\nGibson's Djang0Con US 2019 talk, Using Django as a Micro-Framework. Then take\na look at Will Vincent's django-microframework repository; Will has done a\nnice job of collecting a few different single-file examples. Then check out\nPaolo Melchiorre's \u03bcDjango project, which he demonstrated at DjangoCon US\n2023. Andrew Mshar wrote an interesting blog post called Moving from Django\nMicroframework to Django, following up on Paolo's work. Most recently, Andrew\nGodwin shared his django-singlefile project. This is the first example that\nseems to be meant for real-world use, and I'm curious to see where people go\nwith it.\n\nWhile these been interesting exercises, it can quickly turn into a game of\ncode golf. Someone might come up with slightly shorter single-file projects,\nbut many of these are just as hard for newer people to understand as a\nstandard Django project generated from startproject and startapp. I've been\nthinking for a while that one of the most interesting directions to take this\nwork is building out a full project from one of these single-file examples.\nThis series is my response to seeing everyone else's single-file projects; I\nhope the people who shared those projects like what they see here. :)\n\n2\n\nIt frustrates me to no end seeing hosting platforms use overly simplistic\nDjango projects in their examples. Heroku once pushed a broken build process\nbecause the sample project they used for testing didn't even use a database.\n\n## Read more\n\n### Django from first principles, part 3\n\nMP 92: A better home page, using templates. Note: This is the third post in a\nseries about building a full Django project, starting with a single file. This\nseries will be free to everyone, as soon as each post comes out. In the last\npost we wrote a single\n\nBy Eric Matthes Apr 18, 2024\n\n### Django from first principles, part 2\n\nMP 91: A single file, serving a basic version of the project's home page.\nNote: This is the second post in a series about building a full Django\nproject, starting with a single file. This series will be free to everyone, as\nsoon as each post comes out.\n\nBy Eric Matthes Apr 11, 2024\n\n### Using breakpoints to explore your code\n\nMP 89: You can hop into your program's execution at any point. When working on\na project, I often find myself wondering if my code does exactly what I think\nit does. Sometimes I'll have an idea about how to move forward in a program,\nbut\n\nBy Eric Matthes Mar 28, 2024\n\n### Have you updated your Python recently?\n\nMP 88: It's never too late to start a good updating habit. I'll be the first\nto admit, I don't stay on top of updates nearly as well as I should. The\nlibraries and tools I use most often have gotten good enough that\n\nBy Eric Matthes Mar 21, 2024\n\nMostly Python\n\nPowered by Ghost\n\n## Mostly Python\n\nWeekly posts about all things Python, and occasional other topics as well.\n\n", "frontpage": true}
