{"aid": "40113501", "title": "There is no 'we' in design docs", "url": "https://stegosaurusdormant.com/no-we-in-design-docs/", "domain": "stegosaurusdormant.com", "votes": 1, "user": "GregOwen", "posted_at": "2024-04-22 12:00:47", "comments": 0, "source_title": "There is no \u2018we\u2019 in design docs", "source_text": "There is no \u2018we\u2019 in design docs - Stegosaurus Dormant\n\n### Greg Owen\n\nHi, I\u2019m Greg! This blog contains some of my thoughts on being a software\nengineer, working at startups, baking, and whatever else happens to stick\naround in my mind.\n\n  * Blog\n  * Twitter\n  * GitHub\n\n# There is no \u2018we\u2019 in design docs\n\n3 minute read\n\nOnce your software project reaches a certain size, you probably want to have a\ndesign document that describes how the system you\u2019re building should behave.\nPutting your design into natural language and diagrams before you put it into\ncode helps you get to the correct design more quickly, since words and\npictures are easier to read and change than code. A design doc also encourages\neveryone on the team to think in terms of the end goals and fundamental\nconstraints of the system rather than focusing on details of the code. The\ndownside is that natural language is less precise than code, which leads to\nsome predictable failure modes.\n\n# The worst-case scenario for design docsPermalink\n\nThe worst thing you can do when writing a design doc^1 is to leave the reader\nconfidently incorrect. This is substantially worse than leaving your reader\nconfused: if they know they\u2019re confused, they know they need to seek out more\ninformation.\n\nIf your reader reads your doc, builds the wrong mental model of the system,\nand believes they have the correct mental model, your design doc has failed to\nserve its purpose. You won\u2019t get good feedback about your proposed design, the\nreader will make assumptions about the system that aren\u2019t valid, and\neventually things will break in surprising and frustrating ways.\n\n# \u2018We\u2019Permalink\n\nThere are lots of ways to let your reader build the wrong mental model, but\nfor this post I\u2019ll focus on one that I\u2019ve seen come up a lot in design docs\nI\u2019ve reviewed: \u2018we\u2019. As in \u201cwe will keep track of a mapping from users to\ndocuments so that we can enforce permissions\u201d or \u201cwe will retry the query if\nit times out\u201d.\n\nIn both of those examples, \u2018we\u2019 hides the truth of how the system behaves.\nAssuming your design doc is discussing a typical webapp, is it the frontend\nthat will keep track of the permissions mapping/retry the query? The backend?\nA new service you\u2019re going to build? These different answers have different\ndesign implications and would prompt different follow-up questions.\n\n\u2018We\u2019 is dangerous because different readers can read \u2018we\u2019 and fill it in with\ndifferent parts of the system. They may not even be aware of the other\npossible interpretations that other readers will come away with (this is\nparticularly likely if different people on your team tend to focus on\ndifferent parts of the system or specialize in different disciplines).\n\n# Be explicitPermalink\n\nThe solution is pretty straightforward: be explicit about which part of the\nsystem performs which action. The subject in each sentence of your design doc\nshould be a specific, named part of your system: \u201cthe webapp service will\nmaintain a mapping from users to documents so that it can enforce\npermissions\u201d, \u201cthe frontend code will retry the query if it times out\u201d.\n\nNow everybody reading the doc has the same idea about how the system will\nbehave and can ask meaningful follow-up questions (\u201cif the frontend code\nretries the query, how does the backend handle the case where the frontend has\nasked to run the same query twice?\u201d).\n\n# ExceptionsPermalink\n\nThere are some cases where you actually want the ambiguity that \u2018we\u2019 provides.\nIf you\u2019re communicating externally (e.g. public-facing documentation), you may\nnot want to get into the details of how your application is implemented. If\nyou\u2019re making a promise about the behavior of your system that you expect to\nbe true over many changes to the particulars of your implementation (e.g. \u201cfor\ncompliance reasons, we do not store user data\u201d), you want your language to be\ngeneral enough that it doesn\u2019t sound like you\u2019re trying to use technical\nprecision to deceive your reader.\n\n  1. Or blog, documentation, or other piece of technical writing \u21a9\n\nThanks to Bianca Homberg for giving me feedback on this post\n\nTags: lessons, writing\n\nCategories: communication\n\nUpdated: April 21, 2024\n\nTwitter Facebook LinkedIn\n\n#### You May Also Enjoy\n\n## dui: like du, but interactive\n\n2 minute read\n\nSometimes I just want to know why my computer\u2019s disk is full. du will give me\na firehose of information, but it\u2019s slow and the results are hard to parse. I\nd...\n\n## Understanding #[derive(Clone)] in Rust\n\n13 minute read\n\nThis post assumes that you have an entry-level familiarity with Rust: you\u2019ve\nfought with the borrow checker enough to start to internalize some of its\nmodel;...\n\n## How to install the latest nightly Rust that supports rustfmt (or any other\ncomponent)\n\n2 minute read\n\ntl;dr: rustup toolchain install nightly --allow-downgrade -c rustfmt\n\n## Interviewing at Sigma\n\nless than 1 minute read\n\nWe\u2019re hiring at Sigma Computing, and we want to make sure that everyone who\ninterviews with us knows what to expect. I wrote up a blog post for the Sigma\nCom...\n\n  * Feed\n\n\u00a9 2024 Greg Owen. Powered by Jekyll & Minimal Mistakes.\n\n", "frontpage": false}
