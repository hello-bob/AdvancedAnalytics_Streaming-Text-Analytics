{"aid": "40235610", "title": "I Left NixOS for Ubuntu", "url": "https://fd93.me/nixos-to-ubuntu", "domain": "fd93.me", "votes": 2, "user": "BiteCode_dev", "posted_at": "2024-05-02 12:52:56", "comments": 0, "source_title": "Why I Left NixOS for Ubuntu", "source_text": "fd93 \u2013 Why I Left NixOS for Ubuntu\n\n# fd93\n\nMy site about productivity and programming\n\n# Why I Left NixOS for Ubuntu\n\nPosted on Thu 02 May 2024 in general\n\nIf you've hung out in Linux enthusiast circles lately, you'll have heard\nwhispers that Arch Linux is no longer hot product. Instead, all the cool kids\nare using something called NixOS.\n\nSince I bricked my Debian setup in an unfortunate accident involving compiling\nfrom source, I decided to give NixOS a try. However, after hitting rock bottom\nand waking up, coldly sweating, in a darkened apartment surrounded by\nprintouts of configuration.nix, I decided to return to the warm and wholesome\nembrace of Ubuntu.\n\n## Why I Used NixOS\n\nIt can be hard to understand the attraction of NixOS if you haven't had some\nexposure to infrastructure or system administration before.\n\nNixOS offers a unique set of features which make it very attractive from a\nsystem operator or power user perspective. These are largely based around\navoiding issues which plague other Linux distributions.\n\n### Declarative Syntax and Reproducibility\n\nUnlike most Linux distributions, NixOS's package manager is not primarily\ndesigned to pull down binaries from a repository. It's designed to create\nreproducible setups in a series of plaintext .nix files, starting with\nconfiguration.nix.\n\nIn configuration.nix you'll find options that in other distributions are\nhidden away in murky utilities or config files. For example, which mode should\na system's graphics card be set to? Should CUDA be enabled on this system? Do\nwe want to have Wayland, X, or both as our display server?\n\nYou can also install programs and system utilities this way. By adding them to\nconfiguration.nix and running nixos-rebuild switch you rebuild your current\nsystem configuration and add it as a new boot option. Since NixOS is a static\ndistribution, this is done without manipulating existing binaries or system\nsettings, and can be rolled back at any time.\n\nRather than running an install utility, we use the Nix language to say what we\nwant, and then tell nixos-rebuild to make it so.\n\nThis means you can take a configuration.nix file, give it to your friend, and\nthey'll be able to easily reproduce your setup. This has made NixOS popular\nfor ricing in some circles, as it allows entire desktop setups to be shared as\na series of plaintext files - much easier than throwing VMs or complex setup\nscripts around the internet.\n\nThis is similar to the way Unix setups already handle config. Most Linux\nutilities, and a lot of MacOS ones, put their config files in the .config\nfolder for a given user. Since these files are just text, you can back them up\neasily, and pull them onto different systems if you switch computer.\n\n### Isolated Environments\n\nLast time I bricked Debian, it was by creating dependency hell.\n\nDependency hell is a situation where two different pieces of software use\ndifferent and incompatible versions of the same library. For example, App A\nuses libga 1.3 while App B uses libga 2.1. We can't install both versions of\nlibga at the same time. Therefore we can't use App A and App B at the same\ntime.\n\nThis happens a lot when you need to install packages from binaries or compile\nfrom source. On Debian, this situation comes up often: most projects choose to\nsupport Ubuntu rather than Debian, and the common workaround is just to supply\nthe source code or a .deb binary.\n\nOne of the unique features of NixOS is its adherence to isolated, immutable\nenvironments for different apps, including the dependencies of a package. This\nmeans that unlike with other distributions, especially Debian-based distros,\nyou almost never run into dependency hell.\n\nInstead, Nix will simply install both dependencies and link the applications\nto different versions. This simply isn't possible on most distros without\nusing a container runtime like Flatpak or Snap.\n\nThis means that it's possible to run packages which are incompatible on NixOS\nwithout creating dependency hell. On most distros I find that my preferred\nimage editor, Pinta, often breaks due to the GTK and LibMono versions\navailable, but on NixOS it ran perfectly first time.\n\nIsolated environments also make NixOS a lot more resilient to subtle issues\nwhich can break other Linux distros. For example, in Debian Sid (unstable\nbranch), utilities often break for unspecified periods of time while their\ndependencies catch up. If you're unlucky enough to have one of those\ndependencies be something critical for your system -- say glibc goes out of\nsync with nvidia-drivers -- then you'll face a sudden system failure on\nupdate.\n\nNixOS rarely has these issues. Since it's an immutable distribution, it also\nstores previous versions of the environment so you can roll back when you do\nencounter a system failure. On other distributions you need to use an extra\nutility like Timeshift for this.\n\n## Why I Left NixOS\n\nGiven the benefits of NixOS I outlined above, why'd I leave? Mostly, it was\ndown to issues with everyday usage which don't happen on competing\ndistributions.\n\n### Config Files are a Timesink\n\nWhen configuration is done via text file, you have to manage those text files.\nRather than a package manager like pacman or apt which handles most of the\ncomplicated stuff, NixOS makes the end user responsible for their own system\nconfiguration. This paradigm makes a lot of sense in a business and system\nadministration context, but not so much in everyday desktop usage.\n\nOften, configuration.nix doesn't offer options that are part of the underlying\nbinaries and there's not a clear way to access those options.\n\nWhile I could write my own configuration files, or hack around with existing\nones, this adds a time and maintenance burden that I don't want to deal with\nto use my daily driver.\n\nThis is the same problem that I found when I was daily driving nvim -- I spent\na lot of time playing with plugin options and wrastling my configuration, when\nI could have been working on more interesting and productive technical\nchallenges.\n\n### The Downsides of Sandboxing\n\nOne of the languages I write most is Python. In Python, the normal way to\nseparate project dependencies is to use a venv. It's also common to use a few\nglobal tools like PyLsp or PyLance for linting and formatting.\n\nNixOS's sandboxed model breaks many Python setups. venv does not work\ncorrectly under NixOS, and global dependencies like PyLance also fail. This\nmeans that the main package manager for Python, pip, is crippled on NixOS.\nThere are Nix packages which replace many of the packages normally provided by\npip, but as they're community contributed they are often out of date or\nslightly broken.\n\nThis problem isn't unique to Python. Common Linux utilities like GIMP and\nffmpeg were challenging to configure for NixOS. Installing Nvidia's CUDA\nmodule even required NixOS to compile GIMP from source, which took two hours.\n\nLess important than Python breaking, but still of concern to the desktop Linux\nenthusiast, is that GTK themes often break under NixOS. Not every application\nwill correctly pick up custom themes and icons, and they sometimes require\nextensive configuration to pick up styles correctly.\n\nI've experienced similar woes with other container runtimes like Snap and\nFlatPak. However, since NixOS is a fully sandboxed distribution, the general\nissues with isolated apps are much more prominent than when you're merely\nusing a container runtime on a conventional distribution.\n\nNix's sandboxed model therefore works well in a server or workstation context,\nbut for a general purpose desktop a more conventional distribution is probably\nmore suitable.\n\n### Stability Oversold\n\nAs I mentioned above, Nix can have some issues with unusual configurations\nlike CUDA and sometimes fails to correctly pick up environment variables\ncorrectly.\n\nMore serious than this is the rare occasions Nix packages conflict with each\nother. While Nix separates dependencies, it doesn't separate them as\nabsolutely as a full container system like Docker. Therefore it is possible,\nalbeit unlikely, to end up with conflicts between versions of installed\nlibraries.\n\nIn the end this is what made me decide to leave Nix: I installed a new display\nmanager and immediately broke my desktop setup. This wasn't helped by the\ninadequate support available online.\n\n### Lack of Support\n\nThe need to play with config files, fix stability issues and manage issues\nwith configuration would be less of a drag if there were a NixOS resource\ncomparable to the Arch Wiki. However, the community resources available for\nNix are far more scarce than for Arch.\n\nNixOS also follows a radically different paradigm to Arch or Debian, so you\ncan't reuse the resources for those distros like you could on derivatives like\nLinux Mint or EndeavourOS.\n\nSince Nix is a community distribution, it also doesn't have a corporate backer\nwho can provide official support, unlike RHEL, SUSE, or Ubuntu.\n\nThe small community and lack of official support means that you're likely to\nspend a lot of time fixing issues yourself, reading documentation, and piecing\ntogether clues from various sources. This is fine if you're a technologist,\nbut it's a major timesink.\n\n## Why Ubuntu?\n\nUbuntu is out of favor with Linux enthusiasts for a number of reasons. One of\nthe main ones is good old-fashioned elitism: Ubuntu is known for being easy to\nuse, and therefore has a reputation as a beginner distribution.\n\nIn the last few years Ubuntu has also been plagued with a number of\ncontroversies which have damaged its reputation compared to the halcyon days\nof yore.\n\nFor reasons of pride I almost went with an Ubuntu derivative or respin like\nLinux Mint or PopOS. I ran Mint for a couple of days before remembering why I\nmoved away from it - Mint is an opinionated, complete experience which goes\nagainst a lot of what I enjoy about Linux. Meanwhile, PopOS is currently on a\ndelayed release schedule due to the maintainers, System76, moving to a new\ndesktop environment built in Rust.\n\nI ran Debian, Ubuntu's parent distribution, for a long time and also\nconsidered moving back to that. However, Debian has some of the same issues as\nNixOS, especially lacking widespread support and requiring close attention to\ndetail in system configuration. It also has generally worse driver support and\nfewer packages available to it due to a lack of PPAs (community repositories).\n\nWhile many of the issues with Debian can be resolved by compiling from source,\nthis has been one of the main causes of system failure for me in the past. It\nalso requires equal or greater effort than playing with Nixfiles.\n\nAs a DIY distribution, Arch would have recreated my config file woes on a\ngrand scale. I'm also not a huge Arch fan and dislike pacman as a package\nmanager.\n\nWith all these considerations in mind, and not wanting to move to unfamiliar\ndistributions like Fedora or OpenSUSE for my daily driver, I decided to just\nstick with Ubuntu. To fit my preference for some light ricing and desktop\nconfiguration, I opted to start with Ubuntu Server and build up a system with\nonly the apps I wanted.\n\nEven taken on its own merits, Ubuntu is a good option for a daily driver no\nmatter the user's level of experience. This is for several reasons.\n\n### It Just WorksTM\n\nNearly every version of Linux has issues with drivers at some point. The\nspecifics vary depending on your hardware, but I've found that wifi and\ngraphic cards on laptops are the main culprits.\n\nMy laptop happens to have hybrid graphics between an AMD Ryzen 5600 and an\nNvidia RTX 3050 mobile. This has historically been a big problem on Linux,\nsince configuring hybrid graphics setups involves a great deal of interplay\nbetween open-source and proprietary drivers.\n\nOn NixOS this issue wasn't so bad, and I was able to configure my setup using\nsettings from the wiki. However, it did run less efficiently than on my\nprevious (Debian) setup.\n\nMeanwhile, on Ubuntu my drivers worked immediately on installation, with no\nneed for additional configuration. While I did opt to switch power mode for\nperformance reasons, this was trivial and the Nvidia app needed to do it was\nreadily available as part of the package manager.\n\nUbuntu (and its derivatives, especially PopOS) is one of the few distributions\nI've seen which consistently has hardware work out of the box. While this\nmight be offensive to Arch users, I tend to feel that most Linux users want to\nbe able to customise their experience more than the details of how their\nhardware and system daemons are set up. I appreciate that Ubuntu handles the\ndetails of how to get my system running so I can focus on actually using it.\n\n### Widespread Support\n\nUbuntu is widely used by enthusiasts and small businesses. While evidence\nsuggests it's been pushed out by Arch in the desktop space, for years it was\nthe most dominant distro, and it's still much more widely used than Arch in\nserver setups.\n\nWith widespread usage comes widespread support. Most serious projects target\nUbuntu as one of their Linux targets, and many of them ship PPAs (community\nrepositories) for Ubuntu. In addition, a lot of projects ship .deb packages,\nwhich are compatible with every Debian-based distro, including Ubuntu.\n\nNixOS has more limited official support. While it boasts the largest\ncollection of packages, most of these are community-contributed and therefore\nvary in quality. Most Nix packages which I used worked but many of them lacked\nthe configuration options which you get in other distributions.\n\nWhere Nix packages did have good configuration support, it was arguably a\nbetter experience than dealing with Ubuntu packages, but this was a minority\nof cases.\n\n## Conclusion\n\nNixOS has significant advantages over more conventional distributions -- in\nthe professional server and workstation space. However, for daily driving and\ndesktop usage, there are better alternatives for most users.\n\nIf you're already a hardcore Linux nerd and don't mind spending a ton of time\nconfiguring and optimising your system, then NixOS might be for you. However,\neven for software engineers, NixOS can introduce problems that don't exist on\nconventional distributions. It can also exhibit unexpected behaviours like\nrebuilding from source on a configuration change.\n\nWhile I generally disagree with the cliche that \"Linux is free if you don't\nvalue your time\", in desktop NixOS it feels that way. For people who see Linux\nas a blank canvas for DIY, this might be attractive. However, I prefer\ntechnology which improves my productivity, rather than hampering it.\n\nsoftware linux nixos ubuntu\n\n\u00a9\n\nBuilt with Pelican using Flex theme\n\n", "frontpage": false}
