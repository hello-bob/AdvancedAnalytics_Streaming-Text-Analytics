{"aid": "40059755", "title": "How to Report Bugs Effectively", "url": "https://www.chiark.greenend.org.uk/~sgtatham/bugs.html", "domain": "greenend.org.uk", "votes": 1, "user": "funOtter", "posted_at": "2024-04-17 02:22:53", "comments": 0, "source_title": "How to Report Bugs Effectively", "source_text": "How to Report Bugs Effectively\n\n## How to Report Bugs Effectively\n\nby Simon Tatham, professional and free-software programmer\n\n[ English | Portugu\u00eas | \u7b80\u4f53\u4e2d\u6587 | \u010cesky | Dansk | Deutsch | Espa\u00f1ol | Fran\u00e7ais | Magyar | Italiano | \u65e5\u672c\u8a9e | Nederlands | Polski | \u0420\u0443\u0441\u0441\u043a\u0438\u0439 | \u7e41\u9ad4\u4e2d\u6587 ]\n\n### Introduction\n\nAnybody who has written software for public use will probably have received at\nleast one bad bug report. Reports that say nothing (\"It doesn't work!\");\nreports that make no sense; reports that don't give enough information;\nreports that give wrong information. Reports of problems that turn out to be\nuser error; reports of problems that turn out to be the fault of somebody\nelse's program; reports of problems that turn out to be network failures.\n\nThere's a reason why technical support is seen as a horrible job to be in, and\nthat reason is bad bug reports. However, not all bug reports are unpleasant: I\nmaintain free software, when I'm not earning my living, and sometimes I\nreceive wonderfully clear, helpful, informative bug reports.\n\nIn this essay I'll try to state clearly what makes a good bug report. Ideally\nI would like everybody in the world to read this essay before reporting any\nbugs to anybody. Certainly I would like everybody who reports bugs to me to\nhave read it.\n\nIn a nutshell, the aim of a bug report is to enable the programmer to see the\nprogram failing in front of them. You can either show them in person, or give\nthem careful and detailed instructions on how to make it fail. If they can\nmake it fail, they will try to gather extra information until they know the\ncause. If they can't make it fail, they will have to ask you to gather that\ninformation for them.\n\nIn bug reports, try to make very clear what are actual facts (\"I was at the\ncomputer and this happened\") and what are speculations (\"I think the problem\nmight be this\"). Leave out speculations if you want to, but don't leave out\nfacts.\n\nWhen you report a bug, you are doing so because you want the bug fixed. There\nis no point in swearing at the programmer or being deliberately unhelpful: it\nmay be their fault and your problem, and you might be right to be angry with\nthem, but the bug will get fixed faster if you help them by supplying all the\ninformation they need. Remember also that if the program is free, then the\nauthor is providing it out of kindness, so if too many people are rude to them\nthen they may stop feeling kind.\n\n### \"It doesn't work.\"\n\nGive the programmer some credit for basic intelligence: if the program really\ndidn't work at all, they would probably have noticed. Since they haven't\nnoticed, it must be working for them. Therefore, either you are doing\nsomething differently from them, or your environment is different from theirs.\nThey need information; providing this information is the purpose of a bug\nreport. More information is almost always better than less.\n\nMany programs, particularly free ones, publish their list of known bugs. If\nyou can find a list of known bugs, it's worth reading it to see if the bug\nyou've just found is already known or not. If it's already known, it probably\nisn't worth reporting again, but if you think you have more information than\nthe report in the bug list, you might want to contact the programmer anyway.\nThey might be able to fix the bug more easily if you can give them information\nthey didn't already have.\n\nThis essay is full of guidelines. None of them is an absolute rule. Particular\nprogrammers have particular ways they like bugs to be reported. If the program\ncomes with its own set of bug-reporting guidelines, read them. If the\nguidelines that come with the program contradict the guidelines in this essay,\nfollow the ones that come with the program!\n\nIf you are not reporting a bug but just asking for help using the program, you\nshould state where you have already looked for the answer to your question.\n(\"I looked in chapter 4 and section 5.2 but couldn't find anything that told\nme if this is possible.\") This will let the programmer know where people will\nexpect to find the answer, so they can make the documentation easier to use.\n\n### \"Show me.\"\n\nOne of the very best ways you can report a bug is by showing it to the\nprogrammer. Stand them in front of your computer, fire up their software, and\ndemonstrate the thing that goes wrong. Let them watch you start the machine,\nwatch you run the software, watch how you interact with the software, and\nwatch what the software does in response to your inputs.\n\nThey know that software like the back of their hand. They know which parts\nthey trust, and they know which parts are likely to have faults. They know\nintuitively what to watch for. By the time the software does something\nobviously wrong, they may well have already noticed something subtly wrong\nearlier which might give them a clue. They can observe everything the computer\ndoes during the test run, and they can pick out the important bits for\nthemselves.\n\nThis may not be enough. They may decide they need more information, and ask\nyou to show them the same thing again. They may ask you to talk them through\nthe procedure, so that they can reproduce the bug for themselves as many times\nas they want. They might try varying the procedure a few times, to see whether\nthe problem occurs in only one case or in a family of related cases. If you're\nunlucky, they may need to sit down for a couple of hours with a set of\ndevelopment tools and really start investigating. But the most important thing\nis to have the programmer looking at the computer when it goes wrong. Once\nthey can see the problem happening, they can usually take it from there and\nstart trying to fix it.\n\n### \"Show me how to show myself.\"\n\nThis is the era of the Internet. This is the era of worldwide communication.\nThis is the era in which I can send my software to somebody in Russia at the\ntouch of a button, and he can send me comments about it just as easily. But if\nhe has a problem with my program, he can't have me standing in front of it\nwhile it fails. \"Show me\" is good when you can, but often you can't.\n\nIf you have to report a bug to a programmer who can't be present in person,\nthe aim of the exercise is to enable them to reproduce the problem. You want\nthe programmer to run their own copy of the program, do the same things to it,\nand make it fail in the same way. When they can see the problem happening in\nfront of their eyes, then they can deal with it.\n\nSo tell them exactly what you did. If it's a graphical program, tell them\nwhich buttons you pressed and what order you pressed them in. If it's a\nprogram you run by typing a command, show them precisely what command you\ntyped. Wherever possible, you should provide a verbatim transcript of the\nsession, showing what commands you typed and what the computer output in\nresponse.\n\nGive the programmer all the input you can think of. If the program reads from\na file, you will probably need to send a copy of the file. If the program\ntalks to another computer over a network, you probably can't send a copy of\nthat computer, but you can at least say what kind of computer it is, and (if\nyou can) what software is running on it.\n\n### \"Works for me. So what goes wrong?\"\n\nIf you give the programmer a long list of inputs and actions, and they fire up\ntheir own copy of the program and nothing goes wrong, then you haven't given\nthem enough information. Possibly the fault doesn't show up on every computer;\nyour system and theirs may differ in some way. Possibly you have misunderstood\nwhat the program is supposed to do, and you are both looking at exactly the\nsame display but you think it's wrong and they know it's right.\n\nSo also describe what happened. Tell them exactly what you saw. Tell them why\nyou think what you saw is wrong; better still, tell them exactly what you\nexpected to see. If you say \"and then it went wrong\", you have left out some\nvery important information.\n\nIf you saw error messages then tell the programmer, carefully and precisely,\nwhat they were. They are important! At this stage, the programmer is not\ntrying to fix the problem: they're just trying to find it. They need to know\nwhat has gone wrong, and those error messages are the computer's best effort\nto tell you that. Write the errors down if you have no other easy way to\nremember them, but it's not worth reporting that the program generated an\nerror unless you can also report what the error message was.\n\nIn particular, if the error message has numbers in it, do let the programmer\nhave those numbers. Just because you can't see any meaning in them doesn't\nmean there isn't any. Numbers contain all kinds of information that can be\nread by programmers, and they are likely to contain vital clues. Numbers in\nerror messages are there because the computer is too confused to report the\nerror in words, but is doing the best it can to get the important information\nto you somehow.\n\nAt this stage, the programmer is effectively doing detective work. They don't\nknow what's happened, and they can't get close enough to watch it happening\nfor themselves, so they are searching for clues that might give it away. Error\nmessages, incomprehensible strings of numbers, and even unexplained delays are\nall just as important as fingerprints at the scene of a crime. Keep them!\n\nIf you are using Unix, the program may have produced a core dump. Core dumps\nare a particularly good source of clues, so don't throw them away. On the\nother hand, most programmers don't like to receive huge core files by e-mail\nwithout warning, so ask before mailing one to anybody. Also, be aware that the\ncore file contains a record of the complete state of the program: any\n\"secrets\" involved (maybe the program was handling a personal message, or\ndealing with confidential data) may be contained in the core file.\n\n### \"So then I tried . . .\"\n\nThere are a lot of things you might do when an error or bug comes up. Many of\nthem make the problem worse. A friend of mine at school deleted all her Word\ndocuments by mistake, and before calling in any expert help, she tried\nreinstalling Word, and then she tried running Defrag. Neither of these helped\nrecover her files, and between them they scrambled her disk to the extent that\nno Undelete program in the world would have been able to recover anything. If\nshe'd only left it alone, she might have had a chance.\n\nUsers like this are like a mongoose backed into a corner: with its back to the\nwall and seeing certain death staring it in the face, it attacks frantically,\nbecause doing something has to be better than doing nothing. This is not well\nadapted to the type of problems computers produce.\n\nInstead of being a mongoose, be an antelope. When an antelope is confronted\nwith something unexpected or frightening, it freezes. It stays absolutely\nstill and tries not to attract any attention, while it stops and thinks and\nworks out the best thing to do. (If antelopes had a technical support line, it\nwould be telephoning it at this point.) Then, once it has decided what the\nsafest thing to do is, it does it.\n\nWhen something goes wrong, immediately stop doing anything. Don't touch any\nbuttons at all. Look at the screen and notice everything out of the ordinary,\nand remember it or write it down. Then perhaps start cautiously pressing \"OK\"\nor \"Cancel\", whichever seems safest. Try to develop a reflex reaction - if a\ncomputer does anything unexpected, freeze.\n\nIf you manage to get out of the problem, whether by closing down the affected\nprogram or by rebooting the computer, a good thing to do is to try to make it\nhappen again. Programmers like problems that they can reproduce more than\nonce. Happy programmers fix bugs faster and more efficiently.\n\n### \"I think the tachyon modulation must be wrongly polarised.\"\n\nIt isn't only non-programmers who produce bad bug reports. Some of the worst\nbug reports I've ever seen come from programmers, and even from good\nprogrammers.\n\nI worked with another programmer once, who kept finding bugs in his own code\nand trying to fix them. Every so often he'd hit a bug he couldn't solve, and\nhe'd call me over to help. \"What's gone wrong?\" I'd ask. He would reply by\ntelling me his current opinion of what needed to be fixed.\n\nThis worked fine when his current opinion was right. It meant he'd already\ndone half the work and we were able to finish the job together. It was\nefficient and useful.\n\nBut quite often he was wrong. We would work for some time trying to figure out\nwhy some particular part of the program was producing incorrect data, and\neventually we would discover that it wasn't, that we'd been investigating a\nperfectly good piece of code for half an hour, and that the actual problem was\nsomewhere else.\n\nI'm sure he wouldn't do that to a doctor. \"Doctor, I need a prescription for\nHydroyoyodyne.\" People know not to say that to a doctor: you describe the\nsymptoms, the actual discomforts and aches and pains and rashes and fevers,\nand you let the doctor do the diagnosis of what the problem is and what to do\nabout it. Otherwise the doctor dismisses you as a hypochondriac or crackpot,\nand quite rightly so.\n\nIt's the same with programmers. Providing your own diagnosis might be helpful\nsometimes, but always state the symptoms. The diagnosis is an optional extra,\nand not an alternative to giving the symptoms. Equally, sending a modification\nto the code to fix the problem is a useful addition to a bug report but not an\nadequate substitute for one.\n\nIf a programmer asks you for extra information, don't make it up! Somebody\nreported a bug to me once, and I asked him to try a command that I knew\nwouldn't work. The reason I asked him to try it was that I wanted to know\nwhich of two different error messages it would give. Knowing which error\nmessage came back would give a vital clue. But he didn't actually try it - he\njust mailed me back and said \"No, that won't work\". It took me some time to\npersuade him to try it for real.\n\nUsing your intelligence to help the programmer is fine. Even if your\ndeductions are wrong, the programmer should be grateful that you at least\ntried to make their life easier. But report the symptoms as well, or you may\nwell make their life much more difficult instead.\n\n### \"That's funny, it did it a moment ago.\"\n\nSay \"intermittent fault\" to any programmer and watch their face fall. The easy\nproblems are the ones where performing a simple sequence of actions will cause\nthe failure to occur. The programmer can then repeat those actions under\nclosely observed test conditions and watch what happens in great detail. Too\nmany problems simply don't work that way: there will be programs that fail\nonce a week, or fail once in a blue moon, or never fail when you try them in\nfront of the programmer but always fail when you have a deadline coming up.\n\nMost intermittent faults are not truly intermittent. Most of them have some\nlogic somewhere. Some might occur when the machine is running out of memory,\nsome might occur when another program tries to modify a critical file at the\nwrong moment, and some might occur only in the first half of every hour! (I've\nactually seen one of these.)\n\nAlso, if you can reproduce the bug but the programmer can't, it could very\nwell be that their computer and your computer are different in some way and\nthis difference is causing the problem. I had a program once whose window\ncurled up into a little ball in the top left corner of the screen, and sat\nthere and sulked. But it only did it on 800x600 screens; it was fine on my\n1024x768 monitor.\n\nThe programmer will want to know anything you can find out about the problem.\nTry it on another machine, perhaps. Try it twice or three times and see how\noften it fails. If it goes wrong when you're doing serious work but not when\nyou're trying to demonstrate it, it might be long running times or large files\nthat make it fall over. Try to remember as much detail as you can about what\nyou were doing to it when it did fall over, and if you see any patterns,\nmention them. Anything you can provide has to be some help. Even if it's only\nprobabilistic (such as \"it tends to crash more often when Emacs is running\"),\nit might not provide direct clues to the cause of the problem, but it might\nhelp the programmer reproduce it.\n\nMost importantly, the programmer will want to be sure of whether they're\ndealing with a true intermittent fault or a machine-specific fault. They will\nwant to know lots of details about your computer, so they can work out how it\ndiffers from theirs. A lot of these details will depend on the particular\nprogram, but one thing you should definitely be ready to provide is version\nnumbers. The version number of the program itself, and the version number of\nthe operating system, and probably the version numbers of any other programs\nthat are involved in the problem.\n\n### \"So I loaded the disk on to my Windows . . .\"\n\nWriting clearly is essential in a bug report. If the programmer can't tell\nwhat you meant, you might as well not have said anything.\n\nI get bug reports from all around the world. Many of them are from non-native\nEnglish speakers, and a lot of those apologise for their poor English. In\ngeneral, the bug reports with apologies for their poor English are actually\nvery clear and useful. All the most unclear reports come from native English\nspeakers who assume that I will understand them even if they don't make any\neffort to be clear or precise.\n\n  * Be specific. If you can do the same thing two different ways, state which one you used. \"I selected Load\" might mean \"I clicked on Load\" or \"I pressed Alt-L\". Say which you did. Sometimes it matters.\n  * Be verbose. Give more information rather than less. If you say too much, the programmer can ignore some of it. If you say too little, they have to come back and ask more questions. One bug report I received was a single sentence; every time I asked for more information, the reporter would reply with another single sentence. It took me several weeks to get a useful amount of information, because it turned up one short sentence at a time.\n  * Be careful of pronouns. Don't use words like \"it\", or references like \"the window\", when it's unclear what they mean. Consider this: \"I started FooApp. It put up a warning window. I tried to close it and it crashed.\" It isn't clear what the user tried to close. Did they try to close the warning window, or the whole of FooApp? It makes a difference. Instead, you could say \"I started FooApp, which put up a warning window. I tried to close the warning window, and FooApp crashed.\" This is longer and more repetitive, but also clearer and less easy to misunderstand.\n  * Read what you wrote. Read the report back to yourself, and see if you think it's clear. If you have listed a sequence of actions which should produce the failure, try following them yourself, to see if you missed a step.\n\n### Summary\n\n  * The first aim of a bug report is to let the programmer see the failure with their own eyes. If you can't be with them to make it fail in front of them, give them detailed instructions so that they can make it fail for themselves.\n  * In case the first aim doesn't succeed, and the programmer can't see it failing themselves, the second aim of a bug report is to describe what went wrong. Describe everything in detail. State what you saw, and also state what you expected to see. Write down the error messages, especially if they have numbers in.\n  * When your computer does something unexpected, freeze. Do nothing until you're calm, and don't do anything that you think might be dangerous.\n  * By all means try to diagnose the fault yourself if you think you can, but if you do, you should still report the symptoms as well.\n  * Be ready to provide extra information if the programmer needs it. If they didn't need it, they wouldn't be asking for it. They aren't being deliberately awkward. Have version numbers at your fingertips, because they will probably be needed.\n  * Write clearly. Say what you mean, and make sure it can't be misinterpreted.\n  * Above all, be precise. Programmers like precision.\n\nDisclaimer: I've never actually seen a mongoose or an antelope. My zoology may\nbe inaccurate.\n\n$Id$\n\nCopyright \u00a9 1999 Simon Tatham. This document is OpenContent. You may copy and\nuse the text under the terms of the OpenContent Licence.\n\nThis article is not specific to any particular program.\n\nIf you have reached this page by following a link from the website for a\nparticular program, DO NOT send bug reports for that program to me. Instead,\nreturn to the page you came from to find out where to report bugs in the\nprogram.\n\nIf you have comments or criticism about this article itself, please send them\nto anakin@pobox.com.\n\n", "frontpage": false}
