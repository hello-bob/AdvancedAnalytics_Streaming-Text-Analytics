{"aid": "40245959", "title": "TTCP CAGE Challenge 4: autonomous cyber defensive agents", "url": "https://github.com/cage-challenge/cage-challenge-4", "domain": "github.com/cage-challenge", "votes": 1, "user": "jayhoon", "posted_at": "2024-05-03 10:05:04", "comments": 0, "source_title": "GitHub - cage-challenge/cage-challenge-4: The TTCP CAGE Challenges are a series of public challenges instigated to foster the development of autonomous cyber defensive agents. This CAGE Challenge 4 (CC4) returns to a defence industry enterprise environment, and introduces a Multi-Agent Reinforcement Learning (MARL) scenario.", "source_text": "GitHub - cage-challenge/cage-challenge-4: The TTCP CAGE Challenges are a\nseries of public challenges instigated to foster the development of autonomous\ncyber defensive agents. This CAGE Challenge 4 (CC4) returns to a defence\nindustry enterprise environment, and introduces a Multi-Agent Reinforcement\nLearning (MARL) scenario.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ncage-challenge / cage-challenge-4 Public\n\n  * Notifications\n  * Fork 5\n  * Star 21\n\nThe TTCP CAGE Challenges are a series of public challenges instigated to\nfoster the development of autonomous cyber defensive agents. This CAGE\nChallenge 4 (CC4) returns to a defence industry enterprise environment, and\nintroduces a Multi-Agent Reinforcement Learning (MARL) scenario.\n\ncage-challenge.github.io/cage-challenge-4/\n\n### License\n\nView license\n\n21 stars 5 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# cage-challenge/cage-challenge-4\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nMitchell KielyandMitchell KielyAdded in torch_geometric v2.5.0 to\nrequirements.txt to enable graph n...Apr 29, 2024313bf33 \u00b7 Apr 29, 2024Apr 29,\n2024\n\n## History\n\n38 Commits  \n  \n### CybORG\n\n|\n\n### CybORG\n\n| Adds in changes in #28 and #29 (#31)| Apr 11, 2024  \n  \n### documentation\n\n|\n\n### documentation\n\n| Inserted Sleep action link. Made changes to evaluation.py file to out...|\nMar 21, 2024  \n  \n### .dockerignore\n\n|\n\n### .dockerignore\n\n| Challenge Release| Feb 16, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Challenge Release| Feb 16, 2024  \n  \n### LICENSE.txt\n\n|\n\n### LICENSE.txt\n\n| Challenge Release| Feb 16, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Disclaimer Added| Apr 15, 2024  \n  \n### Requirements.txt\n\n|\n\n### Requirements.txt\n\n| Added in torch_geometric v2.5.0 to requirements.txt to enable graph n...|\nApr 29, 2024  \n  \n### profile.sh\n\n|\n\n### profile.sh\n\n| Challenge Release| Feb 16, 2024  \n  \n### setup.py\n\n|\n\n### setup.py\n\n| Challenge Release| Feb 16, 2024  \n  \n## Repository files navigation\n\n# TTCP CAGE Challenge 4: Challenge Details\n\n## Introduction\n\nThe TTCP CAGE Challenges are a series of public challenges instigated to\nfoster the development of autonomous cyber defensive agents. The CAGE\nChallenges present different cybersecurity scenarios inspired by real-world\nsituations in a simulated environment.\n\nThe first CAGE Challenge was released to the public in August 2021, the second\nin April 2022 and the third in September 2022. The challenges use the Cyber\nOperations Research Gym (CybORG) to provide a high-fidelity cyber simulation\nfor the training and evaluation of AI algorithms such as Deep Reinforcement\nLearning. The CAGE activity aims to run a series of challenges of increasing\ncomplexity and realism.\n\nThis CAGE Challenge 4 (CC4) returns to a defence industry enterprise\nenvironment, and introduces a Multi-Agent Reinforcement Learning (MARL)\nscenario.\n\n## Scenario Narrative\n\nTensions continue to escalate between the nations of Florin and Guilder. As\npart of regular border patrols, Florin utilises unmanned drones for\nreconnaissance and communication purposes. Guilder wishes to disrupt drone\noperations by performing a cyber-attack against the base station where the\nactivity of the patrols is coordinated.\n\nYou have successfully developed several cyber defence agents for Florin (CAGE\nChallenges 1-3) and have now been tasked with developing an agent to protect\nthe base station. The network here consists of a range of operational and\nback-office enterprise networks which support various military operations.\nAdditionally, the drones themselves are controlled via a contractor subnet\nwhich connects to the base via the internet. For security purposes the network\nis highly segmented into security zones and thus a multi-agent solution is\nrequired, with each agent protecting its own security zone. Additionally,\ncommunication between agents is highly restricted and bandwidth is limited.\n\nThe agent\u2019s main task is to maintain operational capabilities while preventing\nmalicious activity on the network. This is complicated by the fact that\noperational priorities change over time, depending on different phases of the\nmission. However, its general priorities within a given phase are as follows.\n\n  1. Maintain service of critical network infrastructure to ensure sensitive operational capabilities are not impacted.\n  2. Where possible, maintain enterprise servers to ensure less sensitive, day-to-day operations are not impacted.\n  3. Maintain access to public services provided by Florin.\n\n## Challenge Details\n\nThe network for this challenge is split into four smaller networks as can be\nseen in Figure 1. Two of these are deployed networks, one is the Headquarters\n(HQ) network and another is the Contractor network. These networks connect\ntogether via the internet.\n\nEach deployed network consists of two security zones: a restricted zone and an\noperational zone. The Headquarters network consists of three security zones: a\nPublic Access Zone, an Admin Zone and an Office Network. The Contractor\nnetwork only contains a single UAV control zone.\n\nIn order to encourage the development of robust agents, the number of hosts in\neach security zone and their services will be randomised. Indeed, each zone\nwill have between 1-6 servers and 3-10 user hosts. Each host and server will\nhave a minimum of 1 service with a maximum of 5.\n\nFigure 1 - Network Laydown\n\nThe network will have 5 network defenders. Each deployed network will have\ntwo, one for each security zone. The Headquarters will have a single defensive\nagent for all zones, while the Contractor network will be undefended.\n\nRed team begins the operation with access to a random machine in the\ncontractor network and attempts to pivot throughout the network. Every turn\nthere is a small chance that a red agent will spawn if green opens a phishing\nemail and red can also spawn in networks, when a green user accesses a\ncompromised service. There is a maximum of one red agent in each zone, though\nthese agents can maintain a presence on multiple hosts. While Blue team may\nsucceed in removing all traces of red team from a network, red will always\nmaintain a foothold in the Contractor Network.\n\nThe red agents will each use a randomly selected strategy.\n\nFigure 2 - Deployed Network A\n\nAgent actions now have a specified time duration, which varies depending on\nthe action chosen. Agents must wait until their action is completed before\nthey are prompted to launch another action. Once an agent has chosen it cannot\nbe cancelled.\n\nDuring the course of an episode, the mission shall progress linearly through\nthree different phases Phase 1, Phase 2A and Phase 2B. During Phase 1 all\nmissions operating in each zone have the same low priority level. During Phase\n2A only missions operating in zones within Deployed Network A have the same\nhigh priority level, while all other missions have the same low priority\nlevel. During Phase 2B only missions operating in Deployed Network B have the\nsame high priority level, while all other missions have the same low priority\nlevel.\n\n## Green Agents\n\nUsers are represented by green agents, which are present on every host. Green\nagents randomly do local work or attempt to reach out to external services,\neither in their local or a remote zone. The service and zone a green agent\nchooses will be determined randomly, but are restricted to valid connections\nfor the current mission phase as governed by the communication policy tables\nbelow.\n\nRewards are tied to these green agent actions. The blue team receives\npenalties when a green agent is unable to work, either because it cannot make\na valid connection to service, or its host is unavailable (for example if it\nis currently being restored by a blue agent). Green agents in mission-critical\nzones generate higher penalties when their mission is active. The full list\nand values of penalties are shown in Table 4.\n\nGreen agents occasionally generate false alerts while going about their work\nby exhibiting behavior similar to a red agent, such as transferring data\nbetween hosts. They also sometimes introduce red agents into the network via\nsuccumbing to phishing attacks, installing unapproved software, and general\npoor security hygiene.\n\n## Deception\n\nBoth blue and red agents may employ deception to further their goals. Blue\nagents can stand up decoy services in any host or server. Decoy services\nresemble normal ones, but cannot replace or be instantiated along with\nexisting services (they can use the Discover Network Services action to\ndetermine which services are already running on a given host). When a red\nagent attempts to compromise a decoy service, blue will be alerted and red\u2019s\nexploit will automatically fail. Red agents can use the DiscoverDeception\naction to determine if they are interacting with decoy services, and their\nWithdraw action to remove their presence.\n\nFor their part, red agents are more likely to generate extra alerts for blue\ndefenders using the Aggressive Service Discovery action on a selected host.\nThis action is faster than the Service Discovery action but has a higher\nprobability of generating an alert, so it may also be used simply to trade off\nspeed over stealth. In addition, red agents with elevated privileges can use\nthe Degrade action to cause green agent actions on the target host to fail\nmuch more frequently.\n\n## Network Connectivity and Communication Policy\n\nEach mission phase has an associated communication policy governing how zones\nare intended to connect to one another. When the mission phase changes the\nintended policy is communicated automatically. Only connections associated\nwith the given mission are changed (for example, when mission 2A is activated,\nonly connections with Restricted Zone A and Operational Zone A are affected).\nThe policy associated with each mission phase is shown in Tables 1-3. The\nintended policy and actual firewall state is also communicated to blue agents\nin their observation vector. Blue agents can open and close firewalls between\ntheir zone and other networks, for example to prevent infections from red\nagents, but may incur penalties if their changes prevent green agents from\naccomplishing their own goals. Some blue agents may communicate with each\nother regardless of firewall policy via 8-bit messages.\n\nSome defending agents have the capability to communicate 8-bit messages with\neach other. See Table 1 for the complete (initial) network communication\nsecurity policy for the mission pre-planning phase.\n\n### Phase 1: Mission Pre-planning (General Operations and Maintenance)\n\n#### Table 1: Initial Network Communication Security Policy --- Mission-Pre-\nplanning Phase\n\nZone| HQ Network| Contractor Network| Restricted Zone A| Operational Zone A|\nRestricted Zone B| Operational Zone B| Internet  \n---|---|---|---|---|---|---|---  \nHQ Network| 1| 1| 1| 0| 1| 0| 1  \nContractor Network| 1| 1| 1| 0| 1| 0| 1  \nRestricted Zone A| 1| 1| 1| 1| 1| 0| 1  \nOperational Zone A| 0| 0| 1| 1| 0| 0| 0  \nRestricted Zone B| 1| 1| 1| 0| 1| 1| 1  \nOperational Zone B| 0| 0| 0| 0| 1| 1| 0  \nInternet| 1| 1| 1| 0| 1| 0| 1  \n  \n![CAGE Phase 1 Connectivity Diagram](/documentation/docs/assets/CAGE-\nPhase-1-Connectivity-Diagram.png) Figure 3 - Phase 1 Connectivity Diagram\n\n### Phase 2a: Mission A Active\n\nWhen mission A is active, Operational Zone A disconnects from all other\nnetworks. Restricted zone A connects only to HQ.\n\n#### Table 2: Initial Network Communication Security Policy --- Active Mission\nA Phase\n\nZone| HQ Network| Contractor Network| Restricted Zone A| Operational Zone A|\nRestricted Zone B| Operational Zone B| Internet  \n---|---|---|---|---|---|---|---  \nHQ Network| 1| 1| 1| 0| 1| 0| 1  \nContractor Network| 1| 1| 0| 0| 1| 0| 1  \nRestricted Zone A| 1| 0| 1| 0| 0| 0| 0  \nOperational Zone A| 0| 0| 0| 1| 0| 0| 0  \nRestricted Zone B| 1| 1| 0| 0| 1| 1| 1  \nOperational Zone B| 0| 0| 0| 0| 1| 1| 0  \nInternet| 1| 1| 0| 0| 1| 0| 1  \n  \n![CAGE Phase 2a Connectivity Diagram](/documentation/docs/assets/CAGE-\nPhase-2a-Connectivity-Diagram.png) Figure 4 - Phase 2a Connectivity Diagram\n\n### Phase 2b: Mission B Active\n\nWhen mission B is active, Operational Zone B disconnects from all other\nnetworks. Restricted zone B connects only to HQ.\n\n#### Table 3: Initial Network Communication Security Policy --- Active Mission\nB Phase\n\nZone| HQ Network| Contractor Network| Restricted Zone A| Operational Zone A|\nRestricted Zone B| Operational Zone B| Internet  \n---|---|---|---|---|---|---|---  \nHQ Network| 1| 1| 1| 0| 1| 0| 1  \nContractor Network| 1| 1| 1| 0| 0| 0| 1  \nRestricted Zone A| 1| 1| 1| 1| 0| 0| 1  \nOperational Zone A| 0| 0| 1| 1| 0| 0| 0  \nRestricted Zone B| 1| 0| 0| 0| 1| 0| 0  \nOperational Zone B| 0| 0| 0| 0| 0| 1| 0  \nInternet| 1| 1| 1| 0| 0| 0| 1  \n  \n![CAGE Phase 2b Connectivity Diagram](/documentation/docs/assets/CAGE-\nPhase-2b-Connectivity-Diagram.png) Figure 5 - Phase 2b Connectivity Diagram\n\n## Rewards\n\nBlue agents start with 0 points and are assigned penalties when green agents\nare unable to perform their work, when they access a compromised service, and\nwhen red chooses the Impact action. Penalties change during active missions to\nreflect the changing criticality of hosts on current operations. All rewards\nare shown in Tables 4A, 4B, and 4C.\n\n#### Table 4A: Rewards for green action failures and compromise in Phase 1 O&M\n\nZone| Local Work Fails| Access Service Fails| Red impact/access  \n---|---|---|---  \nHQ Network| -1| -1| -3  \nContractor Network| 0| -5| -5  \nRestricted Zone A| -1| -3| -1  \nOperational Zone A| -1| -1| -1  \nRestricted Zone B| -1| -3| -1  \nOperational Zone B| -1| -1| -1  \nInternet| 0| 0| 0  \n  \n#### Table 4B: Rewards for green action failures and compromise in Phase 2a -\nMission A\n\nZone| Local Work Fails| Access Service Fails| Red impact/access  \n---|---|---|---  \nHQ Network| -1| -1| -3  \nContractor Network| 0| 0| 0  \nRestricted Zone A| -2| -1| -3  \nOperational Zone A| -10| 0| -10  \nRestricted Zone B| -1| -1| -1  \nOperational Zone B| -1| -1| -1  \nInternet| 0| 0| 0  \n  \n#### Table 4C: Rewards for green action failures and compromise in Phase 2b -\nMission B\n\nZone| Local Work Fails| Access Service Fails| Red impact/access  \n---|---|---|---  \nHQ Network| -1| -1| -3  \nContractor Network| 0| 0| 0  \nRestricted Zone A| -1| -3| -3  \nOperational Zone A| -1| -1| -1  \nRestricted Zone B| -2| -1| -3  \nOperational Zone B| -10| 0| -10  \nInternet| 0| 0| 0  \n  \n## How to use CybORG\n\nWe use the Cyber Operations Research Gym (CybORG) to simulate the cyber\nenvironment for each CAGE challenge.\n\nPlease see the Installation Instruction guide for further instructions on how\nto install and run the environment, and see here for additional tutorials.\n\n## How to submit responses\n\nSubmissions are made to the Codalabs webpage which will automatically evaluate\nyour agent and rank them on the leaderboard. Users will be required to make a\nCodalabs account in order to submit their agents. Users will then need to go\nto the 'Participate' tab, click on the 'Submit' section, and then upload their\nsubmission.zip file. After waiting some time (depends on how fast your agent\nis) your result will be automatically uploaded to the leaderboard.\n\nFor detailed instructions regarding how to evaluate and submit your agents\nplease refer to the README.md located in the Cyborg/Evaluation folder.\n\nWe welcome multiple submissions per team. If you resubmit same agent twice,\nplease remove one of them from the leaderboard. If you retrain the same agent\narchitecture, please add 'v2', 'v3', etc... to the agent submission file. If\nit is an entirely new approach, please change the name of the agent.\n\nWe are also imposing an execution time limit on all submissions. Submissions\nshould complete 100 episodes, of length 500, within 3 hours when evaluated on\nour Amazon EC2 C4.large instance. Any submissions will go beyond this time\nwill be automatically cancelled.\n\nAs part of your submission, we request that you share a description of the\nmethods/techniques used in developing your agents to\ncage.aco.challenge@gmail.com. We will use this information as part of our in-\ndepth analysis and comparison of the various techniques submitted to the\nchallenge. In hosting the CAGE challenges, one of our main goals is to\nunderstand the techniques that lead to effective autonomous cyber defensive\nagents, as well as those that are not as effective. We are planning on\npublishing the analysis and taxonomy of the different approaches that create\nautonomous cyber defensive agents. To that end, we encourage you to also share\ndetails on any unsuccessful approaches taken. Please also feel free to share\nany interesting discoveries and thoughts regarding future work to help us\nshape the future of the CAGE Challenges.\n\nAny queries regarding the challenge can be submitted via email to\ncage.aco.challenge@gmail.com.\n\nWe also invite teams to submit full papers on their work on this CAGE\nchallenge or using the CybORG environment to IJCAI, AAAI, ICML or any other\nvenue of their choice.\n\nPlease cite the challenge announcement as follows to reference the challenge:\n\n    \n    \n    @misc{cage_challenge_4_announcement, author = {TTCP CAGE Working Group}, Title = {TTCP CAGE Challenge 4}, Publisher = {GitHub}, Howpublished = {\\url{https://github.com/cage-challenge/cage-challenge-4}}, Year = {2023} }\n\nIn addition, authors may reference the following paper that describes CybORG:\n\n    \n    \n    @PROCEEDINGS{cyborg_acd_2021, author = {Maxwell Standen, Martin Lucas, David Bowman, Toby J\\. Richer, Junae Kim and Damian Marriott}, Title = {CybORG: A Gym for the Development of Autonomous Cyber Agents}, booktitle = {IJCAI-21 1st International Workshop on Adaptive Cyber Defense.} Publisher = {arXiv}, Year = {2021} }\n\nThe challenge software can be referenced as:\n\n    \n    \n    @misc{cage_cyborg_2023, Title = {Cyber Operations Research Gym}, Note = {Created by Maxwell Standen, David Bowman, Olivia Naish, Ben Edwards, James Drane, Claire Owens, KC Cowan, Wayne Gould, Mitchell Kiely, Son Hoang, Toby Richer, Martin Lucas, Richard Van Tassel, Phillip Vu, Natalie Konschnik, Joshua Collyer, Calum Fairchild, Thomas Harding}, Publisher = {GitHub}, Howpublished = {\\url{https://github.com/cage-challenge/CybORG}}, Year = {2022} }\n\n## Evaluation\n\nA leaderboard for submissions will be maintained on Codalabs throughout the\nchallenge's time frame.\n\nThe evaluation.py file is designed to provide a standardised evaluation for an\nagent, which will be used in the Codalabs validation process. Each blue agent\nwill be evaluated against the FiniteStateRedAgent in 100 randomised episodes,\nwhere each episode is 500 timesteps long.\n\nIf running locally, information about the agent's actions, observations, mean\nreward, and standard deviation will be outputted as text files after this file\ncompletes its run. Details about how do this is in the README.md file within\nthe Evaluation folder. If running on Codalabs, only the mean reward will be\nextracted and used to update the leaderboard.\n\nDisclaimer: We reserve the right to remove any agent from the leaderboard. We\nwill enact this right if we believe participants did not act within the spirit\nof the challenge by exploiting any mechanism to provide them with an unfair\nadvantage over other participants. Please reach out to our email\n(cage.aco.challenge@gmail.com) if you're unsure about any changes you have\nimplemented and we will make a judgement call on a case-by-case basis\n\n## Important dates\n\n  * 20 Feb 2024: Challenge 4 released. Development phase begins. During the development phase, we will be debugging any unexpectant issues that may be found by the participants. Please ensure that you watch the repo so that you're notified if any changes are required.\n\n  * 29 Mar 2024 23:59 (UTC): Development phase ends. Competition phase begins. During the comptetition phase, unless it is absolutely necessary, we will not be changing the code base, as this allows participants enough time to train their agents on a constant environment.\n\n  * 10 May 2024 23:59 (UTC): Competition phase ends. Final results announced on Codalabs leaderboard.\n\n## Appendix A \u2013 Action sets\n\nAction name| Team| Description of action| Time (ticks)| Local/ remote| Chance\nof being flagged as malicious| Chance of faliure| Parameters| Output  \n---|---|---|---|---|---|---|---|---  \nGreenAccessService| Green| Communicate with a server in the local zone or\nanother zone. Green will randomly choose from a list of IP addresses depending\non the mission phase. If it can\u2019t reach the server then blue receives a\npenalty. This action triggers a false network connection alert picked up by\nMonitor, with a low probability of occurrence.| 1| Remote| Low (1%)\n(fp_detection_rate set through EnterpriseGreenAgent)| None| agent, session_id,\nsrc_ip, allowed_subnets, fp_detection_rate| Success/Failure  \nGreenLocalWork| Green| Do work on the local host without communicating. Green\nhosts take this action when they are not accessing services or sleeping. In\naddition to a chance of being flagged as malicious, there is a small chance\nthat this action results in red gaining a foothold on the host (e.g. as a\nresult of a Phishing email).| 1| Local| Low (1%) (fp_detection_rate set\nthrough EnterpriseGreenAgent)| None| agent, session_id, ip_address,\nfp_detection_rate, phishing_error_rate| Success/Failure  \nMonitor| Blue| Collection of information about flagged malicious activity on\nthe network. Corresponds to action ID 1: Scan in the OpenC2 specification.\nThis action occurs automatically as a default action.| 1| -| None| None|\nsession, agent| Success/Failure. Network connections and associated processes\nthat are identified as malicious.  \nAnalyse| Blue| Collection of further information relating to malware, on a\nspecific host to enable blue to better identify if red is present on the\nsystem. Corresponds to action ID 30: Investigate in the OpenC2 specification.|\n2| -| None| None| session, agent, hostname| Success/Failure. Information on\nfiles associated with recent alerts  \nDeployDecoy| Blue| Setup of a decoy service (type randomly assigned) on a\nspecified host. Green agents do not access these services, so any access is an\nunambiguous indicator of red activity. Decoy services cannot replace\nlegitimate services. When a red agent discovers or exploits a decoy service,\nthe blue agent will receive alerts involving that host or service. The red\nagent will not be able to successfully exploit the decoy service.| 2| -| None|\nNone| session, agent, hostname| Success, if a legitimate service is not\nalready running. Failure if there is already a legitimate service running on\nthe target. Decoys also generate an alert if the red agent accesses the new\nservice.  \nRemove| Blue| Attempting to remove red from a host by destroying malicious\nprocesses, files and services. This action attempts to stop all processes\nidentified as malicious by the monitor action. Corresponds to action ID 10:\nStop in the OpenC2 specification.| 3| -| None| None| session, agent, hostname|\nSuccess/Failure  \nRestore| Blue| Restoring a system to a known good state. This has significant\nconsequences for system availability. Corresponds to action ID 23: Restore in\nthe OpenC2 specification.| 5| -| None| None| session, agent, hostname|\nSuccess/Failure  \nBlockTraffic| Blue| Block traffic to and from the specified zone. If green\nagents are attempting to communicate to that zone this will result in\npenalties.| 1| Local| None| None| session, agent, from_subnet, to_subnet|\nSuccess/Failure  \nAllowTraffic| Blue| Allow traffic to and from the specified zone.| 1| Local|\nNone| None| session, agent, from_subnet, to_subnet| Success/Failure  \nDiscoverRemoteSystems| Red| ATT&CK Technique T1018 Remote System Discovery.\nDiscovers new hosts/IP addresses in the network through active scanning using\ntools such as ping.| 1| Remote| None| None| session, agent, subnet|\nSuccess/Failure. IP addresses in the chosen subnet from hosts that respond to\nping.  \nAggressiveServiceDiscovery| Red| ATT&CK Technique T1046 Network Service\nScanning. Discovers responsive services on a selected host by initiating a\nconnection with that host.| 1| Remote| High (75%)| None| session, agent,\nip_address| Success/Failure. Ports and service information.  \nStealthServiceDiscovery| Red| Same as AggressiveServiceDiscovery but slower\nand quieter (i.e., lower chance of raising alerts).| 3| Remote| Medium (25%)|\nNone| session, agent, ip_address| Success/Failure. Ports and service\ninformation.  \nExploit Network Services| Red| ATT&CK Technique T1210 Exploitation of Remote\nServices. This action attempts to exploit a specified service on a remote\nsystem.| 4| Remote| None| Medium (Failure dependant on weighted exploit\nchoice)| session, agent, ip_address| Success/Failure. Initial recon of host if\nsuccessful.  \nPrivilegeEscalate| Red| ATT&CK Tactic TA0004 Privilege Escalation. This action\nescalates the agent\u2019s privilege on the host.| 2| Local| None| None| session,\nagent, hostname| Success/Failure. Internal information now available due to\nincreased access to host.  \nImpact| Red| ATT&CK Technique T1489 Service Stop. This action disrupts the\nperformance of the network and fulfils red\u2019s objective of denying the\noperational service.| 2| Local| None| None| session, agent, hostname|\nSuccess/Failure  \nDegradeServices| Red| If red has root privileges on a host, it may degrade the\nuser experience for a green agent (for example by randomly dropping keystrokes\nor causing other mischief). Under the effect of Degrade, GreenLocalWork\nactions have higher failure rates (resulting in additional penalties for\nblue).| 2| Remote| None| None| session, agent, hostname| Success/Failure  \nDiscoverDeception| Red| Probe a host to determine if it is running decoy\nservices.| 2| Remote| None| Medium (50% chance false negative, 10% chance\nfalse positive)| session, agent, ip_address| Success/Failure. Believe\nlegitimate or believe decoy.  \nWithdraw| Red| Remove red presence from target host.| 1| Remote| None| None|\nsession, agent, hostname, ip_address| Success  \nSleep| All| Take no action this tick.| 1| Local| None| None| None| None  \n  \n## Appendix B \u2013 Agent observation\n\nThe BlueEnterpriseWrapper performs utility functions that support MARL\nalgorithms by conforming to the PettingZoo Environment. This wrapper alters\nthe observation to enable the use of Deep Reinforcement Learning techniques.\nThis appendix describes the altered observation.\n\nThe table below indicates what data is presented at each index of the\nobservation of an agent. We use the symbol H to denote the maximum number of\nhosts in the local subnet, which is equal to 16 (10 user hosts and 6 servers).\nThese hosts are ordered from server hosts 0-6, followed by user hosts 0-10. If\na host is not present for a given episode, its corresponding slot in the\nvector will be zero for the duration of the episode. All ranges in the\nfollowing tables are inclusive, so 1...H includes both 1 and H.\n\nSimilarly, we use the symbol S to denote the number of subnets, which is\nalways equal to 9 (2 Operational Zones, 2 Restricted Zones, Internet,\nContractor Network, 3 subnets in the HQ zone). To ensure consistency across\nruns, all subnets are sorted alphabetically.\n\nThere general structure of the observation vector is as follows where n is the\nnumber of subnets included in the observation space:\n\nIndex| Length| Description| Value  \n---|---|---|---  \n0| 1| Mission Phase| 0: Mission Phase 1 1: Mission Phase 2A 2: Mission Phase\n2B  \n1| 3S+2H| Subnet 0 Info| See \"Subnet Info\" Table  \n3S+2H+1| ...| ...| ...  \n3(n-1)S+2(n-1)H+1| 3S+2H| Subnet n Info| ' '  \n3nS+2nH+1| 4x8| Message Block| User Defined (See Below)  \n  \nThe message block contains four, 8-bit messages from the other agents, with\neach index corresponding to a specific agent (0-4 in order, excluding self).\nThe contents of these 8-bit messages are defined by the user, but will default\nto zero if not specified.\n\nThe \"Subnet Info\" block for each subnet is further subdivided as follows:\n\nRelative Index| Length| Description| Element Values (Boolean)  \n---|---|---|---  \n0| S| One-hot Encoded Subnet Vector| 1: Current Subnet 0: All Other Subnets  \nS| S| Blocked Subnets| 1: Subnet Blocked 0: Subnet Not Blocked  \n2S| S| Communication Policy| 1: Subnet Should be Blocked 0: Subnet Should Not\nbe Blocked  \n3S| H| Malicious Process Event Detected| 1: Malicious Process Detected on Host\n0: No Events  \n3S+H| H| Malicious Network Event Detected| 1: Malicious Connection Detected on\nHost 0: No Events  \n  \nIn this challenge, blue agents 0-3 are responsible for defending a single\nsubnet each (n=1), while blue agent 4 defends three (n=3). For this reason,\nblue agent 4 has a longer observation than the others as the other agents only\nhave a single subnet info block. If the pad_spaces=True option is supplied to\nBlueEnterpriseWrapper, the area after the message block will be filled with\nzeros for these agents.\n\n## About\n\nThe TTCP CAGE Challenges are a series of public challenges instigated to\nfoster the development of autonomous cyber defensive agents. This CAGE\nChallenge 4 (CC4) returns to a defence industry enterprise environment, and\nintroduces a Multi-Agent Reinforcement Learning (MARL) scenario.\n\ncage-challenge.github.io/cage-challenge-4/\n\n### Topics\n\nreinforcement-learning cybersecurity multiagent-reinforcement-learning\n\n### Resources\n\nReadme\n\n### License\n\nView license\n\nActivity\n\n### Stars\n\n21 stars\n\n### Watchers\n\n4 watching\n\n### Forks\n\n5 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 3\n\n  * MitchellKiely\n  * onaish-dstl Liv\n  * rykrr Ryan Kerr\n\n## Languages\n\n  * Python 99.9%\n  * Other 0.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
