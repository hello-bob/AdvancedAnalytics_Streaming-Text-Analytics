{"aid": "40129646", "title": "The Value of Unit Tests", "url": "https://nedbatchelder.com//blog/201602/the_value_of_unit_tests.html", "domain": "nedbatchelder.com", "votes": 2, "user": "todsacerdoti", "posted_at": "2024-04-23 08:07:26", "comments": 0, "source_title": "The value of unit tests", "source_text": "The value of unit tests | Ned Batchelder\n\nI\u2019m available for freelance work. Let\u2019s talk \u00bb\n\n# The value of unit tests\n\nThursday 11 February 2016 \u2014 This is more than eight years old. Be careful.\n\nSeems like testing and podcasts are in the air... First, I was interviewed on\nBrian Okken\u2019s Python Test podcast. I wasn\u2019t sure what to expect. The\nconversation went in a few different directions, and it was really nice to\njust chat with Brian for 45 minutes. We talked about coverage.py, testing,\ndoing presentations, edX, and a few other things.\n\nThen I see that Brian was himself a guest on Talk Python to Me, Michael\nKennedy\u2019s podcast about all things Python.\n\nOn that episode, Brian does a good job arguing against some of the prevailing\nbeliefs about testing. For example, he explains why unit tests are bad, and\nintegration tests are good. His argument boils down to, you should test the\npromises you\u2019ve made. Unit tests mostly deal with internal details that are\nnot promises you\u2019ve made to the outside world, so why focus on testing them?\nThe important thing is whether your product behaves right from the outside.\n\nI liked this argument, it made sense. But I don\u2019t think I agree with it. Or, I\ncompletely agree with it, and come to a different conclusion.\n\nWhen I build a complex system, I can\u2019t deal with the whole thing at once. I\nneed to think of it as a collection of smaller pieces. And the boundaries\nbetween those pieces need to remain somewhat stable. So they are promises, not\nto the outside world, but to myself. And since I have made those promises to\nmyself, I want unit tests to be sure I\u2019m keeping those promises.\n\nAnother value of unit tests is that they are a way to chop up combinatorial\nexplosions. If my system has three main components, and each of them can be in\nten different states, I\u2019ll need 1000 integration tests to cover all the\npossibilities. If I can test each component in isolation, then I only need 30\nunit tests to cover the possibilities, plus a small number of integration\ntests to consider everything mashed together. Not to mention, the unit tests\nwill be faster than the integration tests. Which would you rather have? 1000\nslow tests, or 30 fast tests plus 20 slow tests?\n\nSure, it\u2019s possible to overdo unit testing. And it\u2019s really easy to have all\nyour unit tests pass and still have a broken system. You need integration\ntests to be sure everything fits together properly. Finding the right balance\nis an art. I really like hearing Brian\u2019s take on it. Give it a listen.\n\n#audio #python #testing\u00bb 5 reactions\n\n# Comments\n\nChris Patti 2:25 PM on 12 Feb 2016\n\nHey there Ned you're even more famous now! That's your second podcast\ninterview recently, right? :) Now we need to get you onto Talk Python To me\nand you'll have completed the circuit :)\n\nI can see where he's coming from, in that so often people write a TON of unit\ntests and don't bother with integration testing at all, which I think is a\nshame.\n\nHowever especially in a dynamic language like Python I think unit tests can be\na great developer tool to ensure that the different units are actually obeying\nthe contracts they advertise.\n\nVasudev Ram 8:43 PM on 12 Feb 2016\n\n>If my system has three main components, and each of them can be in ten\ndifferent states, I'll need 1000 integration tests to cover all the\npossibilities. If I can test each component in isolation, then I only need 30\nunit tests to cover the possibilities, plus a small number of integration\ntests to consider everything mashed together.\n\nInteresting point. Also, it reminded me of equivalence classes in testing,\nwhich provide analogous benefits.\n\nJonas Haag 2:59 PM on 13 Feb 2016\n\n>If my system has three main components, and each of them can be in ten\ndifferent states, I'll need 1000 integration tests to cover all the\npossibilities. If I can test each component in isolation, then I only need 30\nunit tests to cover the possibilities, plus a small number of integration\ntests to consider everything mashed together.\n\nThis doesn't test all of the 1000 states, though. It only tests for the ten\nstates each component can be in (plus the integration testing, which you have\nto do anyways). If you wrote 30 integration tests for the components' states,\nthat would cover exactly the same amount of combinations. Of course these\ntests would be more complex and hence slower to execute, but you can't fight\nagainst combinatorial explosion by changing your testing strategy! You can\nonly fight combinatorial explosion by breaking dependencies in the system.\n\nAnd as for testing with state equivalence classes: It doesn't make sense. If\nyou've proved some component's internal states equivalent with respect to the\ncomponent's behavior (i.e. its public interface), then those states should not\nbe distinct in the first place; otherwise you either have duplicated code or\nthe parts that make up the state aren't orthogonal. In any case, that's a\nmistake in the component's design.\n\nThe only exception here is accidental state or complexity, like performance\noptimization (caches etc).\n\nVasudev Ram 3:21 PM on 13 Feb 2016\n\n@Jonas Haag: If you're referring to my previous comment (in your 2nd last\nparagraph above), I did not say that equivalence classes were applicable to\nNed's example and reasoning. I just said:\n\n>Also, it reminded me of equivalence classes in testing, which provide\nanalogous benefits.\n\nNoufal Ibrahim 3:47 PM on 13 Feb 2016\n\nI like this tweet by Ram that summmarises the different roles these tests play\nquite well\n\nhttps://twitter.com/artagnon/status/668264916349018112\n\nBroad functional tests will tell you what broke, and specific unit tests will\ntell you what to fix. You need both.\n\nUnit tests do have a certain \"addictive\" quality about them especially when\ncoverage is also involved and I often tend to write too many that make my\nresistance to changing things high.\n\n## Add a comment:\n\n  *     * about\n    * site\n    * email\n    * freelance\n    * mastodon\n    * bluesky\n    * twitter\n    * irc\n    * slack\n    * discord\n    * sponsor\n    * tidelift\n    * github\n    * linkedin\n    * r\u00e9sum\u00e9\n  *     * RSS feed\n    * by email\n\nDarkLight Something wrong?\n\n\u00a9 Copyright 2016, Ned Batchelder\n\n", "frontpage": false}
