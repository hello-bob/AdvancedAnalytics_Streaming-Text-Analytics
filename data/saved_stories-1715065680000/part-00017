{"aid": "40278874", "title": "Common Google XSS", "url": "https://matan-h.com/common-google-xss", "domain": "matan-h.com", "votes": 1, "user": "matan-h", "posted_at": "2024-05-06 20:02:18", "comments": 0, "source_title": "Common Google XSS", "source_text": "Common Google XSS - Matan-h\n\n### matan-h\n\nCreating cool python libraries, interested in rust , in cybersecurity, and\nworking with electron\n\n  * GitHub\n  * StackOverflow\n  * Fosstodon\n\n# Common Google XSS\n\n1 minute read\n\nWhen I was searching for a vulnerability in google DNS from Google Cloud, I\ncame across this article by Julien Ahrens. The article is about an SSRF\nvulnerability in the Google website https://toolbox.googleapps.com, so I\nstarted researching this site.\n\n## Simple research \u21fe XSSPermalink\n\nThe site has many apps, all of them are listed inside the robots.txt file:\n\n    \n    \n    #apps-toolbox User-Agent: * Allow: /apps/main Allow: /apps/browserinfo Allow: /apps/checkmx Allow: /apps/dig Allow: /apps/har_analyzer Allow: /apps/loganalyzer Allow: /apps/loggershark Allow: /apps/messageheader Allow: /apps/recovery Allow: /apps/useragent Allow: /apps/other_tools Allow: /apps/encode_decode Allow: /apps/screen_recorder Disallow: *\n\nMost of the tools are accessible from the /apps/main menu, however, the\nrecovery app (at /apps/recovery) isn\u2019t.\n\nFrom a simple search in google I see the recovery app has these sub-pages:\n\n    \n    \n    recovery/domain_in_use recovery/form recovery/ownership\n\nAll of which receive many parameters from the query string in URL (parameters\nin {url}?parm1=1&param2=2...): visit_id, user, domain, email and some more.\n\nIn google search I also spotted a result that has Verify that you own\nexample.com title, with this link :\nhttps://toolbox.googleapps.com/apps/recovery/ownership?domain=example.com&email=email@example.com&case=45500368&continue=/apps/recovery/...\n\nThe server apparently just verifies that the email matches the domain, then\npresents a page with some thank you text and a continue button:\n\ngoogle continue page\n\nAnd the link in the continue button, was ... you guessed it: just taken from\nthe continue URL parameter.\n\nSo I tried placing there continue=javascript:alert(document.domain), and... It\nworks!\n\nThe site didn\u2019t use any CSP, or any protection at all. So I also could send\nand receive data from external sites: (e.g.\ncontinue=javascript:fetch(%27https://api.ipify.org?format=json%27).then(response=%3Eresponse.text()).then(data=%3E{alert(data);%20}),\nwhich alerts the user public ip). I reported it to Google.\n\n## RewardPermalink\n\ngoogle reward table screenshot.\n\nSince this is an XSS, and its on a normal Google application, it falls into\nthe 3133$ square in google rewards. Therefore, I got more than twice than I\ngot to both parental control bypasses (googles secret browsers) combined.\n\nI name this article \u201cCommon\u201d because it\u2019s really an openredirect->xss by the\nbook. No thinking is required, just trying to change random parameters on\nURLs.\n\nDid you find the Easter egg in this article?\n\nTags: cyber, google, XSS\n\nCategories: cyber\n\nUpdated: May 6, 2024\n\nTwitter Facebook LinkedIn\n\n#### Comments: (You can also Comment directly to this discussions )\n\n## You May Also Enjoy\n\n## Google has another secret browser\n\n3 minute read\n\nanother hidden browser which is accessible by a link\n\n## Build a quick and private online converter\n\n6 minute read\n\nBuild a quick and private online converter using WebAssembly (ffmpeg.wasm)\n\n## I analyzed stackoverflow\n\n3 minute read\n\nI analyzed stackoverflow for secrets and leaks.\n\n## Moving from WordPress to Jekyll\n\n6 minute read\n\nWhy and how I move to Jekyll.\n\n  * Fosstodon\n  * GitHub\n  * buy me a coffee\n  * Feed\n\n\u00a9 2024 matan-h. Powered by Jekyll & Minimal Mistakes.\n\n", "frontpage": false}
