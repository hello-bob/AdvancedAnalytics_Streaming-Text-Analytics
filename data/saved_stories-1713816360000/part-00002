{"aid": "40112307", "title": "More than just thumbnails, micro-browsers are everywhere", "url": "https://24ways.org/2019/microbrowsers-are-everywhere/", "domain": "24ways.org", "votes": 2, "user": "ao98", "posted_at": "2024-04-22 08:11:54", "comments": 0, "source_title": "Microbrowsers are Everywhere", "source_text": "Microbrowsers are Everywhere \u25c6 24 ways\n\nSkip to content\n\n24 ways to impress your friends\n\n# Microbrowsers are Everywhere\n\nColin Bendell\n\n  * 15 December 2019\n  * Published in Code\n  * No comments\n\nYou\u2019ve seen it everywhere - that little thumbnail preview of a website\nmentioned in a tweet, the expanded description in a Slack channel, or in\nWhatsApp group chat.\n\nFigure 1: The preview shown in a group chat provides a hint of what the real\nwebpage looks like\n\nThese link previews are so commonplace that we hardly pay any attention to how\nour site design might be impacting the generated preview. Yet, these previews\ncan be the most influential part for attracting new audiences and increasing\nengagement - possibly more than SEO. Even more alarming is that most web\nanalytics are blind to this traffic and can\u2019t show you how these Microbrowsers\nare interacting with your site.\n\nAs we close out the year, here are five essential questions and ideas that\nevery web dev should know about Microbrowsers.\n\n## 1\\. What are Microbrowsers? How are they different from \u201cnormal\u201d browser?\n\nWe are all very familiar with the main browsers like Firefox, Safari, Chrome,\nEdge and Internet Explorer. Not to mention the many new browsers that use\nChromium as the rendering engine but offer unique user experiences like\nSamsung Internet or Brave.\n\nIn contrast, Microbrowsers are a class of User-Agents that also visit website\nlinks, parse HTML and generate a user experience. But unlike those traditional\nbrowsers, the HTML parsing is limited and the rendering engine is singularly\nfocused. The experience is not intended to be interactive. Rather the\nexperience is intended to be representational - to give the user a hint of\nwhat exists on the other side of the URL.\n\nCreating link previews is not new. Facebook and Twitter have been adding these\nlink previews in posts for nearly a decade. That used to be the primary use\ncase. Marketing teams created backlog items to adopt different microdata -\nfrom Twitter Cards and Open Graph annotations for Facebook. LinkedIn likewise\nembraced both Open Graph and OEmbed tags to help generate the previews\n\n    \n    \n    <meta name=\"description\" content=\"seo description long\"> <meta name=\"keywords\" content=\"seo keyword list\"> <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\"> <link rel=\"icon\" href=\"favicon_32.png\" sizes=\"32x32\"> <link rel=\"icon\" href=\"favicon_48.png\" sizes=\"48x48\"> <link rel=\"icon\" href=\"favicon_96.png\" sizes=\"96x96\"> <link rel=\"icon\" href=\"favicon_144.png\" sizes=\"144x144\"> <meta property=\"og:title\" content=\"Short title here\" /> <meta property=\"og:description\" content=\"shortish description\" /> <meta name=\"twitter:title\" content=\"Short title here\"> <meta name=\"twitter:description\" content=\"shortish description\"> <meta property=\"og:image\" content=\"https://res.cloudinary.com/.../hero-img.png\" /> <meta name=\"twitter:image:src\" content=\"https://res.cloudinary.com/.../hero-img.png\">\n\nAs group chats and other collaboration tools have become more prevalent, we\nhave seen many features from the big social media platforms emerge.\nParticularly in recent years we\u2019ve seen the adoption of the link unfurling\nbehaviour in these chat platforms. Rather than reinventing the wheel, each\nplatform looks for pre-existing microdata to generate the preview.\n\nBut which data should be used? How should this be arranged? As it turns out,\neach platform behaves slightly differently; presenting information in slightly\ndifferent ways.\n\nFigure 2: The same amazon link shared in iMessage (left), Hangouts and\nWhatsApp (right)\n\n## 2\\. If Microbrowsers are everywhere, why don\u2019t I see them in my analytics\nreports?\n\nIt\u2019s easy to miss the traffic from Microbrowsers. This is for a number of\nreasons:\n\nFirst, page requests from Microbrowsers don\u2019t run JavaScript and they don\u2019t\naccept cookies. The Google Analytics <script> block won\u2019t be run or executed.\nAnd all cookie will be ignored by the rendering agent.\n\nSecond, if you were to do a log analysis based on HTTP logs from your CDN or\nweb stack, you would see a relatively small volume of traffic. That is\nassuming you can identify the User-Agent strings. Some of these Microbrowsers\nimpersonate real browsers and others impersonate Facebook or twitter. For\nexample, iMessage uses the same User-Agent string for all these requests and\nit hasn\u2019t changed since iOS 9.\n\n    \n    \n    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/601.2.4 (KHTML, like Gecko) Version/9.0.1 Safari/601.2.4 facebookexternalhit/1.1 Facebot Twitterbot/1.0\n\nFinally, many platforms - particularly Facebook Messenger and Hangouts use\ncentralized services to request the preview layout. This, in contrast to\nWhatsApp and iMessage where you will see one request per user. In the\ncentralized consumer approach your web servers will only see one request, but\nthis one request might represent thousands of eyeballs.\n\n## 3\\. Microbrowser are probably more important than google bot\n\nWe all know the importance of having our web sites crawled by search engines\nlike googlebot. These bots are the lifeblood for lead generation and for\ndiscovering new users.\n\nHowever, the real gold for marketers is from word-of-mouth discussions. Those\nconversations with your friends when you recommend a TV show, a brand of\nclothing, or share a news report. This is the most valuable kind of marketing.\n\nLast year when assembling the data for Cloudinary\u2019s State of the Visual Media\nreport, I discovered that there was a very prominent usage pattern over the\nUSA holiday season. During thanksgiving, all the way to Black Friday, the rate\nof link sharing skyrocketed as group chats shared deals and insights.\n\nZooming out (and normalizing for time-of-day), we can see that there is a\ndaily cadence of link sharing and word of mouth referrals. It probably isn\u2019t a\nshock to see that we predominantly share links in Slack between Monday and\nFriday, while WhatsApp is used all week long. Likewise, WhatsApp is most often\nused during our \u2018break\u2019 times like lunch or in the evening after we put the\nkids to bed.\n\nWhile the link preview is increasingly common, there are two user behaviours\nto balance:\n\n  * Users can be skeptical of links sent via SMS and other chats. We don\u2019t want to be fooled into clicking a phishing links and so we look for other queues to offer validation. This is why most platforms use the preview while also emphasize the website url host name.\n\n  * Skimming. I\u2019m sure you\u2019ve had the experience coming out of a meeting or grocery store to find a group chat with 100 messages. As you scroll to catch up on the conversation, links can easily be skipped. In this way, users expect the preview to act as a summary to tell them how important it is to visit the link.\n\nFigure 4: Nielsen Norman Group summarizes the research in a dynamic image\npreview\n\nFigure 5: A mockup of how an ecommerce product could create compelling\npreviews showcasing colors, stock and price in the preview\n\n## 4\\. Microbrowsers are not real browsers (they just play one on TV)\n\nAs I previously mentioned, Microbrowsers pretend to be a browser in that they\nsend the right HTTP headers and often send impersonating User-Agent strings.\nYet, there are several characteristics that a web dev should be aware of.\n\nFirst, Microbrowsers try to protect the User\u2019s privacy. The user hasn\u2019t\ndecided to visit your site yet, and more importantly, the user is having a\nprivate conversation. The fact that your brand or website is mentioned should\njust make your ears burn, but you shouldn\u2019t be able to listen in to the\nconversation.\n\nFor this reason, all Microbrowsers:\n\n  * don\u2019t execute JavaScript - so your react application won\u2019t work\n  * ignore all cookies - so your A/B or red/green cookies will be ignored\n  * some will follow redirects, but will quickly time out after a few seconds and give up trying to expand the link.\n  * there won\u2019t be a referer: HTTP header when the user clicks the link for the full browser. In fact, a new user will appear as \u2018direct\u2019 traffic - as though they typed in the url.\n\nSecond, Microbrowsers have a very small brain and very likely don\u2019t use an\nadvanced network algorithm. Most browsers will use a tokenizer to parse the\nHTML markup and send requests to the network stack asynchronously. Better yet,\nbrowsers will do some analysis of the resources needed before sending the\nasync request to the network.\n\nBased on observational experimentation, most platforms simply use a glorified\nfor loop when parsing the HTML and often request the resources synchronously.\nThis might be ok for fast wifi experiences, but it can cause inconsistent\nexperiences on flaky wifi.\n\nFor example, iMessage will discover and load all <link rel=\"icon\" > favicon,\nall <meta property=\"og:image\" images, and all <meta name=\"twitter:image:src\"\nbefore deciding what to render. Many sites still advertise 5 or more favicon\nsizes. This means that iMessage will download all favicons regardless of size\nand then not use them if it decides to instead render the image.\n\nFor this reason the meta markup that is included is important. The lighter the\ncontent, the more likely it will be to be rendered.\n\n##\n\n5.\n\nMarkup Matters\n\nSince Microbrowsers are simple-brained browsers, it is all the more important\nto produce good markup. Here are a few good strategies:\n\n  * It\u2019s almost 2020, you only need one favicon size. Remove all the other <link rel=\"shortcut icon\" and <link rel=\"icon\" references.\n  * Based on observational experimentation, the most commonly recognized microdata tags for preview are the Open-Graph tags. When the OG and twitter card tags are missing, the default SEO <meta name=\"description\" is used. However, since the description is often nonsensical SEO optimized phrases, users\u2019 eyes will likely glaze over.\n\n  * On that note, use good descriptive text\n  * Provide up to three <meta property=\"og:image\" images. Most platforms will only load the first one, while others (notably iMessage) attempts to create a collage.\n\nFigure 6: Amazon uses User-Agent detection which results in many link previews\nusing the description meta tag.\n\n  * Use <meta property=\"og:video* with progressive (not streaming) video experiences.\n\n    \n    \n    <meta property=\"og:type\" content=\"video.other\"> <meta property=\"og:video:url\" content=\"https://shoesbycolin.com/blue.mp4\"> <meta property=\"og:video:secure_url\" content=\"https://shoesbycolin.com/blue.mp4\"> <meta property=\"og:video:type\" content=\"video/mp4\"> <meta property=\"og:video:width\" content=\"1280\"> <meta property=\"og:video:height\" content=\"720\">\n\n  * Don\u2019t use UA sniffing to hide the <meta> tags. Sites like Amazon do this to try and show only Facebook/Twitter the microdata annotated website. But this can cause problems for some Microbrowsers that don\u2019t use the same impersonation convention. The result is a simple link without a preview.\n  * Use the opportunity to tell your product story or summarize your ideas.\n\n## Summary\n\nAs more of our conversations happen in group chats and slack channels, link\npreviews are an important way for you to engage users before they start the\njourney on your site. Unfortunately, not all websites present good or\ncompelling previews. (And now that you know what to look for, you won\u2019t be\nable to unsee bad examples - I\u2019m sorry). To help users take the leap and visit\nyour site, we need to make sure that all our pages are annotated with\nmicrodata. Better yet, we can use these previews to create compelling visual\nsummaries.\n\n## About the author\n\nColin is part of the CTO Office at Cloudinary and co-author of the O\u2019Reilly\nbook High Performance Images. He spends much of his time at the intersection\nof high volume data, media, browsers and standards. He recently helped the\ncommunity effort writing chapters in the Web Almanac on Media and CDNs. You\ncan find him on tweeting @colinbendell and at blogging at https://bendell.ca\n\nMore articles by Colin\n\n## Brought to you by\n\nPowerful, flexible content management with backup, cloud storage and client\nsatisfaction all included.\n\ngrabaperch.com/runway\n\n## Related articles\n\n  1. ### Designing for Mobile Performance\n\nMustafa Kurtuldu\n\nMustafa Kurtuldu mulls over the topic of performance - both perceived and\nmeasured - for users of mobile devices. Of course, in managing to deliver\nmillions of gifts around the world on the night before Christmas perhaps Santa\nis the real expert in mobile performance.\n\n18 Dec 2017\n\n  2. ### Websites of Christmas Past, Present and Future\n\nJosh Emerson\n\nJosh Emerson extols the virtues of progressive enhancement by acknowledging\nthe need for speed, in both website rendering and interaction. With a new year\nimminent, there never was a better time to look backwards and forwards.\n\n8 Dec 2014\n\n  3. ### Helping VIPs Care About Performance\n\nLara Hogan\n\nLara Hogan ignites a little cognac over your web performance pudding by\nconsidering ways you can keep stakeholders invested in a site\u2019s metrics and\nKPIs. More than just the budget, it\u2019s the thought you put in that counts.\n\n8 Dec 2015\n\n  4. ### HTTP/2 Server Push and Service Workers: The Perfect Partnership\n\nDean Hume\n\nDean Hume pops on his gown and slippers and opens up his Christmas stocking to\ndiscover the high performance gifts of Server Push and Service Workers. It\u2019s\nthe gift that keeps on giving.\n\n15 Dec 2016\n\n  5. ### Your jQuery: Now With 67% Less Suck\n\nScott Kosman\n\nScott Kosman administers an optimizing shot in the arm to your seasonally\nsluggish jQuery with some simple ways to improve performance. Get your jQuery\nrunning so fast that Dasher, Dancer, Prancer, Vixen, Comet, Cupid, Donner and\nBlitzen will struggle to keep up.\n\n13 Dec 2011\n\n  6. ### Using Google App Engine as Your Own Content Delivery Network\n\nMatt Riggott\n\nMatt Riggott demonstrates how to use Google App Engine as a CDN for serving\nyour site\u2019s images, CSS and JavaScript files from a location close to your\nusers. Find out how using this free service from Google could be just the\nperformance kick your site needs.\n\n6 Dec 2008\n\n## Comments\n\nNo comments yet - leave yours\n\nGrab our RSS feed Follow us on Twitter Contribute on GitHub\n\n\u00a9 2005-2024 24 ways and our authors\n\n", "frontpage": false}
