{"aid": "40156116", "title": "Programming ADA: First Steps on the Desktop", "url": "https://hackaday.com/2024/04/23/programming-ada-first-steps-on-the-desktop/", "domain": "hackaday.com", "votes": 1, "user": "pleeb", "posted_at": "2024-04-25 11:27:56", "comments": 0, "source_title": "Programming Ada: First Steps On The Desktop", "source_text": "Programming Ada: First Steps On The Desktop | Hackaday\n\nSkip to content\n\n# Hackaday\n\n# Programming Ada: First Steps On The Desktop\n\n44 Comments\n\n  * by:\n\nMaya Posch\n\nApril 23, 2024\n\nWho doesn\u2019t want to use a programming language that is designed to be\nreliable, straightforward to learn and also happens to be certified for\neverything from avionics to rockets and ICBMs? Despite Ada\u2019s strong roots and\nimpressive legacy, it has the reputation among the average hobbyist of being\n\u2018complicated\u2019 and \u2018obscure\u2019, yet this couldn\u2019t be further from the truth, as\npreviously explained. In fact, anyone who has some or even no programming\nexperience can learn Ada, as the very premise of Ada is that it removes\ncomplexity and ambiguity from programming.\n\nIn this first part of a series, we will be looking at getting up and running\nwith a basic desktop development environment on Windows and Linux, and run\nthrough some Ada code that gets one familiarized with the syntax and basic\nprinciples of the Ada syntax. As for the used Ada version, we will be\ntargeting Ada 2012, as the newer Ada 2022 standard was only just approved in\n2023 and doesn\u2019t change anything significant for our purposes.\n\n## Toolchain Things\n\nThe go-to Ada toolchain for those who aren\u2019t into shelling out big amounts of\nmoney for proprietary, certified and very expensive Ada toolchains is GNAT,\nwhich at one point in time stood for the GNU NYU Ada Translator. This was the\nresult of the United States Air Force awarding the New York University (NYU) a\ncontract in 1992 for a free Ada compiler. The result of this was the GNAT\ntoolchain, which per the stipulations in the contract would be licensed under\nthe GNU GPL and its copyright assigned to the Free Software Foundation. The\ncommercially supported (by AdaCore) version of GNAT is called GNAT Pro.\n\nObtaining a copy of GNAT is very easy if you\u2019re on a common Linux distro, with\nthe package gnat for Debian-based distros and gcc-ada if you\u2019re Arch-based.\nFor Windows you can either download the AdaCore GNAT Community Edition, or if\nyou use MSYS2, you can use its package manager to install the\nmingw-w64-ucrt-x86_64-gcc-ada package for e.g. the new ucrt64 environment. My\npersonal preference on Windows is the MSYS2 method, as this also provides a\nUnix-style shell and tools, making cross-platform development that much\neasier. This is also the environment that will be assumed throughout the\narticle.\n\n## Hello Ada\n\nThe most important part of any application is its entry point, as this\ndetermines where the execution starts. Most languages have some kind of fixed\nname for this, such as main, but in Ada you are free to name the entry point\nwhatever you want, e.g.:\n\n    \n    \n    with Ada.Text_IO; procedure Greet is begin -- Print \"Hello, World!\" to the screen Ada.Text_IO.Put_Line (\"Hello, World!\"); end Greet;\n\nHere the entry point is the Greet procedure, because it\u2019s the only procedure\nor function in the code. The difference between a procedure and a function is\nthat only the latter returns a value, while the former returns nothing\n(similar to void in C and C++). Comments start with two dashes, and packages\nare imported using the with statement. In this case we want the Ada.Text_IO\npackage, as it contains the standard output routines like Put_Line. Note that\nsince Ada is case-insensitive, we can type all of those names in lower-case as\nwell.\n\nAlso noticeable might be the avoidance of any symbols where an English word\ncan be used, such as the use of is, begin and end rather than curly brackets.\nWhen closing a block with end, this is post-fixed with the name of the\nfunction or procedure, or the control structure that\u2019s being closed (e.g. an\nif/else block or loop). This will be expanded upon later in the series.\nFinally, much like in C and C++ lines end with a semicolon.\n\nFor a reference of the syntax and much more, AdaCore has an online reference\nas well as a number of freely downloadable books, which include a comparison\nwith Java and C++. The Ada Language Reference Manual (LRM) is also freely\navailable.\n\n## Compile And Run\n\nTo compile the simple sample code above, we need to get it into a source file,\nwhich we\u2019ll call greet.adb. The standard extensions with the GNAT toolchain\nare .adb for the implementation (body) and .ads for the specification\n(somewhat like a C++ header file). It\u2019s good practice to use the same file\nname as the main package or entry point name (unit name) for the file name. It\nwill work if not matched, but you will get a warning depending on the\ntoolchain configuration.\n\nUnlike in C and C++, Ada code isn\u2019t just compiled and linked, but also has an\nintermediate binding step, because the toolchain fully determines the\npackages, dependencies, and other elements within the project before\nassembling the compiled code into a binary.\n\nAn important factor here is also that Ada does not work with a preprocessor,\nand specification files aren\u2019t copied into the file which references them with\na with statement, but only takes note of the dependency during compilation. A\nnice benefit of this is that include guards are not necessary, and headaches\nwith linking such as link order of objects and libraries are virtually\neliminated. This does however come at the cost of dealing with the binder.\n\nAlthough GNAT comes with individual tools for each of these steps, the\ngnatmake tool allows the developer to handle all of these steps in one go.\nAlthough some prefer to use the AdaCore-developed gprbuild, we will not be\nusing this as it adds complexity that is rarely helpful. To use gnatmake to\ncompile the example code, we use a Makefile which produces the following\noutput:\n\n    \n    \n    mkdir -p bin mkdir -p obj gnatmake -o bin/hello_world greet.adb -D obj/ gcc -c -o obj\\greet.o greet.adb gnatbind -aOobj -x obj\\greet.ali gnatlink obj\\greet.ali -o bin/hello_world.exe\n\nAlthough we just called gnatmake, the compilation, binding and linking steps\nwere all executed subsequently, resulting in our extremely sophisticated Hello\nWorld application.\n\nFor reference, the Makefile used with the example is the following:\n\n    \n    \n    GNATMAKE = gnatmake MAKEDIR = mkdir -p RM = rm -f BIN_OUTPUT := hello_world ADAFLAGS := -D obj/ SOURCES := greet.adb all: makedir build build: $(GNATMAKE) -o bin/$(BIN_OUTPUT) $(SOURCES) $(ADAFLAGS) makedir: $(MAKEDIR) bin $(MAKEDIR) obj clean: rm -rf obj/ rm -rf bin/ .PHONY: test src\n\n## Next Steps\n\nGreat, so now you have a working development environment for Ada with which\nyou can build and run any code that you write. Naturally, the topic of code\neditors and IDEs is one can of flamewar that I won\u2019t be cracking open here. As\nmentioned in my 2019 article, you can use AdaCore\u2019s GNAT Programming Studio\n(GPS) for an integrated development environment experience, if that is your\njam.\n\nMy own development environment is a loose constellation of Notepad++ on\nWindows, and Vim on Windows and elsewhere, with Bash and similar shells the\nenvironment for running the Ada toolchain in. If there is enough interest I\u2019d\nbe more than happy to take a look at other development environments as well in\nupcoming articles, so feel free to sound off in the comments.\n\nFor the next article I\u2019ll be taking a more in-depth look at what it takes to\nwrite an Ada application that actually does something useful, using the\npreparatory steps of this article.\n\nPosted in Featured, Interest, Skills, Software DevelopmentTagged ada,\nprogramming, software\n\n## 44 thoughts on \u201cProgramming Ada: First Steps On The Desktop\u201d\n\n  1. Zoe Nagy says:\n\nApril 23, 2024 at 7:08 am\n\nHuraay back to Pascal syntax.\n\nReport comment\n\nReply\n\n    1. Joseph Eoff says:\n\nApril 23, 2024 at 7:31 am\n\nYayyyy! No more squiggly, uncountable braces scratching my eyes as I try to\nread the code! No more unmatched parenthesis! No more \u201changing\u201delse!\n\nC style syntax is a catastrophe. It is ugly and hard to read. It was made to\nbe easy to parse by the relatively crude parses available at the time it was\ninvented. It was not made to be easy for a human to read and understand.\n\nC is ugly. C++ uglier still. C# and Java aren\u2019t any prettier, and javascript\nadds its own warts and idiocies.\n\nC, C++ hang in there by being a good tool when you need fast code. Java and C#\nare kept around for when you need good memory management and safety in code\nwith C style syntax. I assume people use javascript out of otherwise repressed\nmasochistic tendencies.\n\n\u2014\u2013 Having to declare objects and deal with strong typing seems like a hassle\nwhen all you want to do is get something running. Once you get outside of\n\u201cslap it together in a couple of days\u201d range, though, you\u2019ll begin to\nappreciate the advantages of strong typing.\n\nReport comment\n\nReply\n\n      1. Clovis Fritzen says:\n\nApril 23, 2024 at 7:47 am\n\nThe Ada hello world (\n\nwith Ada.Text_IO; procedure Greet is begin \u2014 Print \u201cHello, World!\u201d to the\nscreen Ada.Text_IO.Put_Line (\u201cHello, World!\u201d); end Greet; ) is super ugly in\nmy opinion. I mean, have you seen how to do that in Python?\n\nReport comment\n\nReply\n\n        1. Sword says:\n\nApril 23, 2024 at 8:00 am\n\nI mean Ada was created in the 70\u2019s while python was created in the 90\u2019s.\n\nI imagine Ada\u2019s big benefit will be code execution speed due to compilation\nwhile being object oriented with readable syntax.\n\nPython may be easy to write but man is it slow as an interpreted language.\n\nThis seems like it\u2019s still a good middle ground.\n\nReport comment\n\nReply\n\n      2. Dude says:\n\nApril 23, 2024 at 8:09 am\n\nC/C++ is butt ugly, but it\u2019s also compact when needed. It\u2019s bad practice to\nhave your code structure flow in two directions, but sometimes you just want\nto do a curly bracket one-liner.\n\nReport comment\n\nReply\n\n      3. Panondorf says:\n\nApril 23, 2024 at 11:49 am\n\nI have to disagree with you there.\n\nI haven\u2019t developed in Ada but I am occasionally forced to maintain old\nVisualBasic code which also uses English words to define it\u2019s loops and other\ngroupings.\n\nJust because words are used instead of characters doesn\u2019t mean you can\u2019t still\nend up with complicated nesting where it\u2019s hard to see where one part begins\nand another ends.\n\nAnd once you are used to the parenthesis of C-style languages I think they are\neasier to skim and so quicker to find the part you are looking for.\n\nThe things is those begin / end or for / next English words are made of the\nsame characters as other words. Your brain has to process more characters to\nfind that pattern \u201cbegin\u201d or \u201cend\u201d that you are looking for.\n\nParenthesis on the other hand... I\u2019ve never seen a language that allows them\nas part of an identifier or keyword so they stand out pretty well as\ngroupings. The only other place you might see them is inside a string constant\nbut not really all that often.\n\nWhat really does help a lot though... good indentation.\n\nReport comment\n\nReply\n\n    2. David Given says:\n\nApril 23, 2024 at 3:40 pm\n\nIt\u2019s not at all like Pascal even though it uses some of the same keywords.\nPascal\u2019s more C-like in that it uses statement blocks, delimited with\nbegin..end where C uses {..}. (Also, Pascal uses a separator semicolon rather\nthan a terminator semicolon, but that\u2019s a rant for another time.) Ada uses\ndiscrete statements for the beginning and end of each control structure and a\nseparator semicolon.\n\nSo, Pascal would do:\n\nwhile i 0 do writeln(i)\n\n...or:\n\nwhile i 0 do begin writeln(i); i := i \u2013 1 end\n\n(note position of semicolons!), Ada does:\n\nwhile i 0 loop writeln(i); i := i \u2013 1; end loop;\n\nPeople have already mentioned that this forces the beginning and end of blocks\nto match, which is way more helpful than you\u2019d think, but it also avoids the\nmissing-brace issue which both C and Pascal has.\n\nIn general is a really nice and unjustly maligned language. Programming it\nfeels a bit like using C++, but mostly designed by grown-ups. It\u2019s got\ngenerics, although the modern C++ STL has left Ada\u2019s way behind (the C++ STL\nis based on Ada\u2019s). It\u2019s got built-in seamless concurrency based on rendezvous\nblocks and message passing which is a joy to use. It\u2019s got parameterised\ntypes. For embedded stuff its ability to precisely define the layout of\nstructures is so good. It\u2019s got contract-based preconditions and\npostconditions. Ada\u2019s version of pointers is weird but very effective and hard\nto misuse, although you won\u2019t need them as often as in C/C++ because it\u2019s got\npass-by-reference built-in.\n\nIt has its downsides. It requires variable declaration and usage to be split,\nC89-style. It\u2019s got an object-oriented system but I hate it and find it\nincredibly clunky to use. It desperately needs a garbage collector (the\nlanguage supports one but nobody\u2019s implemented it); dynamic memory allocation\nis deliberately painful. It\u2019s got exceptions but they\u2019re barely useful. The\nSTL is eccentric and very wordy to use.\n\nBut my biggest issue with it is that Ada\u2019s case insensitive, which was a thing\nback when it was designed but very much isn\u2019t a thing now, and developers\nwho\u2019ve been trained that THIS_IS_A_CONSTANT and ThisIsAType and\nthisIsAVariable will have a _really_ bad time, and that\u2019s everybody nowadays.\n\nIf you\u2019re at all interested, a while ago \u2014 yikes, 2014 \u2014 I wrote up a tour of\nthe language:\n\nhttp://cowlark.com/2014-04-27-ada/index.html\n\nOr go look at a multithreaded mandelbrot renderer to see how easy it is:\n\nhttps://ideone.com/a1ky4l\n\nReport comment\n\nReply\n\n      1. David Given says:\n\nApril 23, 2024 at 3:41 pm\n\nAlso, does the comment engine here support code blocks?\n\nReport comment\n\nReply\n\n  2. Sword says:\n\nApril 23, 2024 at 7:43 am\n\nVery interesting. I would like to see how you can run an Ada program on say an\nESP32 if possible.\n\nI am decently familiar with C, C++ (enough to get done what I want), very\nfamiliar with python and VB and Ada seems like an interesting mix of all of\nthem.\n\nReport comment\n\nReply\n\n    1. Pat says:\n\nApril 23, 2024 at 8:35 am\n\nAda\u2019s a tough learning curve because C/C++/Python all share operators and some\nsyntax. You can preprocess C header files into Python definitions trivially\nbecause \u201c(((4*5) & 0x1) << 2) != 0\" means the exact same thing in both\nlanguages. (Yes, yes, feel free to say 'wait that's dangerous what about\ntyping' yadda yadda yadda).\n\nI've always found syntax variations are easier to flip between than operator\nand number changes. Tabs, curly braces, semicolons: whatever. But you make me\nthink \"wait how do I write this hexadecimal literal in this language\" and I'm\npitching your language straight into the trash.\n\nReport comment\n\nReply\n\n      1. Sword says:\n\nApril 23, 2024 at 8:46 am\n\nAh I gotcha\n\nReport comment\n\nReply\n\n    2. Nathan says:\n\nApril 23, 2024 at 10:28 am\n\nYou can generally compile to anything that gcc can target, but there are more\nstandard library pieces that you (or someone) will have to create to support\nsome of the things that are needed for things that the Ada language proper\nrequires. You might be able to get around some of them if you limit yourself\nto a subset of the language. The same is true for C, but there are fewer\nthings built into the C language proper (ie things that don\u2019t require\nincluding header files to use). One notable exception is that for processor\ntargets without floating point C compilers will generate calls to software\nfloating point functions.\n\nReport comment\n\nReply\n\n  3. MicroTrekker says:\n\nApril 23, 2024 at 8:01 am\n\nI remember back in the early 1980s when I was working for the Navy sitting in\na meeting with a group of software engineers about to launch ADA for use in\nthe Navy. They showed me a document on 3 different ways to use comments in ADA\nand ask my opinion on which one I liked. They also gave me a \u201cI love ADA\u201d mug\nwhich I still have.\n\nReport comment\n\nReply\n\n  4. Joel Finkle says:\n\nApril 23, 2024 at 8:21 am\n\nI looked at Ada briefly in the late 80s (there weren\u2019t any projects that\nneeded it so I never really got fluent). It seemed like what happens if COBOL\nand Pascal got drunk and had a baby. On the other hand, Modula-2 always seemed\na more natural outgrowth from Pascal. On the gripping hand, Digital\u2019s VAX\nPascal had enough extra features for string handling and such that it got\ncalled BASCAL (at times it and VAX BASIC came close to being\nindistinguishable)... but I did a fair amount of work there.\n\nReport comment\n\nReply\n\n    1. HaHa says:\n\nApril 24, 2024 at 12:39 pm\n\nEarly in my carrier I was unfortunate enough to work on a steaming pile of a\nlanguage called DataFlex.\n\nIt was what happened when a COBOL and Basic got drunk and had a \u2018tarded fetal\nalcohol syndrome baby.\n\nOntopic. Ada: Pentagon programming language...You have to code in triplicate.\n\nReport comment\n\nReply\n\n  5. rclark says:\n\nApril 23, 2024 at 9:26 am\n\nGetting my CS degree back in the 80s, we had a \u2018Programming Landscape\u2019 class\nwhere we got introduced to different languages with ADA being one. Even bought\na book on ADA at the time. That was my only experience with it, as Assembly,\nPascal and C were the main languages that I\u2019ve used in my career. Add Python\nnow to that list as I use it all the time at work... and at home.\n\nAs for C being ugly and hard to read ... that is just a matter of discipline\nwhen writing it. Don\u2019t try to be \u2018smart\u2019 by building fancy \u2018one liners\u2019.\nMaintainability down the road is key... not cleverness. All variable names\nshould mean what they are used for (minimum length of 3 chars unless it makes\nsence like x, y, z) . Sane organization of code and NO tabs \u2014 use spaces. We\nstandardized on a 3 space indent rule and braces must be in same column for\neasy eye matching which brace goes with which. Simple rules like this really\nhelped for readability across the \u2018C\u2019 code base. We never understood why you\u2019d\nput a brace at the end of a statement like they are trying to enforce with\nRust now-a-days...\n\nExample: cnt = 0; while (cnt < 10) { if (lookup_table[cnt] == 1) { // do\nsomething } cnt++; }\n\nReport comment\n\nReply\n\n    1. rclark says:\n\nApril 23, 2024 at 9:29 am\n\nAnd of course this comment area messed up the spacing.... Not a code editor\n:rolleyes: while() ___{ ___If () ______{ ______// do something ______} ___}\n\nReport comment\n\nReply\n\n      1. Joseph Eoff says:\n\nApril 23, 2024 at 9:55 am\n\nIt is still ugly, no matter how you format it.\n\nReport comment\n\nReply\n\n        1. zamorano says:\n\nApril 24, 2024 at 2:41 am\n\nNo it isn\u2019t. It is very easy to see where a block starts and where it ends. I\nwould even say easier than having BEGIN and END statements because curly\nbraces stick out more. But I imagine having an end statement that explicitly\nstates the name of the function would be of great help when merging code, to\nhelp the merge tool accurately match lines.\n\nReport comment\n\nReply\n\n    2. Steven says:\n\nApril 23, 2024 at 11:30 am\n\nThe levels of language design.. 1) Best in class \u201cHello world\u201d\n\n2) Honourable mention say \u201cHello world\u201d\n\n3) Yeah ok I guess echo \u201cHello world\u201d print \u201cHello world\u201d writeln \u201cHello\nworld\u201d\n\n4) Garbage Ada.Text_IO.Put_Line (\u201cHello, World!\u201d); System.out.println(\u201cHello\nworld\u201d);\n\nAnd if your Hello world program takes more than 3 lines it\u2019s time to rethink\nyour life choices\n\nReport comment\n\nReply\n\n      1. Dude says:\n\nApril 23, 2024 at 10:56 pm\n\nIn your first example, you have defined a literal but you haven\u2019t declared\nwhat should be done with it. The action appears to be implicit, which is\nhorrible because it just means you must then override this default action if\nyou want to do anything else \u2013 and that\u2019s just kicking the can down the road.\n\nReport comment\n\nReply\n\n        1. Steven says:\n\nApril 24, 2024 at 9:09 am\n\nI find your assertion that default actions are \u201chorrible\u201d both bizarre and\ncontradicted by every computer program I\u2019ve ever used. You\u2019ll notice it\u2019s\nimplicit I\u2019m printing to standard output and not a file or printer in every\nexample but one but that doesn\u2019t seem to be a problem for you. Not should it.\n\nReport comment\n\nReply\n\n        2. cplamb says:\n\nApril 24, 2024 at 11:31 am\n\nIn APL \u2018Hello World\u2019 cause the string between the quotes to print.\n\nReport comment\n\nReply\n\n      2. zamorano says:\n\nApril 24, 2024 at 3:02 am\n\nDepends on what you want to build... If one\u2019s objective is a three-line\napplication then scripting and dynamic languages are great and Ada would just\nmake his/her life hard. But if one is building a big and complex system, I\nthink more formality is welcome so that the compiler can immediately detect as\nmany problems as possible.\n\nReport comment\n\nReply\n\n        1. Steven says:\n\nApril 24, 2024 at 9:22 am\n\nIt depends if you\u2019re the one that has to do all that extra typing or not.\nUsing begin/end instead of {} requires 4x the amount of typing for the rest of\nyour life vs the 30 seconds it takes to learn what the {} means. There are\ntimes to sacrifice brevity for clarity but in the most used part of the\nlanguage? Only a committee that doesn\u2019t have to live with their decisions\ncould think that\u2019s a good idea.\n\nReport comment\n\nReply\n\n          1. Joseph Eoff says:\n\nApril 25, 2024 at 12:50 am\n\nIt isn\u2019t about the typing, it is about the reading. You spend far more time\nreading code than writing it if you ever have to make changes. Code needs to\nbe written in such a way that it is easy to read.\n\nLearning what {} means is trivial. Scanning for those scratchy little bastards\nin a screen full of code is hard on the eyes.\n\nReport comment\n\n  6. The Commenter Formerly Known As Ren says:\n\nApril 23, 2024 at 10:49 am\n\n\u201cDespite Ada\u2019s strong roots and impressive legacy, it has the reputation among\nthe average hobbyist of being \u2018complicated\u2019 and \u2018obscure\u2019, yet this couldn\u2019t\nbe further from the truth\u201d\n\nIronically, Ada is used by governments, which have a reputation for being\n\u2018complicated and obscure\u2019.\n\nReport comment\n\nReply\n\n    1. BT says:\n\nApril 23, 2024 at 11:22 am\n\nAnd large, slow, inflexible and incompetent!\n\nReport comment\n\nReply\n\n      1. Truth says:\n\nApril 23, 2024 at 12:01 pm\n\nSince ICBM\u2019s run such code, I sleep better than if they ran python, or C/C++.\n\nReport comment\n\nReply\n\n  7. Ostracus says:\n\nApril 23, 2024 at 12:27 pm\n\n\u201cWho doesn\u2019t want to use a programming language that is designed to be\nreliable, straightforward to learn and also happens to be certified for\neverything from avionics to rockets and ICBMs?\u201d\n\nKSP should have used Ada.\n\nReport comment\n\nReply\n\n    1. ben says:\n\nApril 24, 2024 at 9:20 pm\n\nThey were doomed from the start \u2013 the deities that created their universe only\nknew unity and c#.\n\nReport comment\n\nReply\n\n  8. ian 42 says:\n\nApril 23, 2024 at 3:31 pm\n\n\u201d It seemed like what happens if COBOL and Pascal got drunk and had a baby\u201d \u2013\nexactly.\n\nI don\u2019t think there is any reason why you would use ADA unless you had to by\nyour employer (same with cobol). And they would have all been better using\npascal even to this day, and if they wanted something better than pascal \u2013 go\nto rust.\n\nADA should just become another one of those dead languages...\n\nReport comment\n\nReply\n\n  9. William Payne says:\n\nApril 23, 2024 at 3:32 pm\n\nBetter technologies available?\n\nRecently clicked on gcc c app using Raspberry Pi 4B to check portability from\nx86 to arm platforms.\n\ngedit always opened my apps in the past.\n\nFor the first time geany opened my app!\nhttps://www.google.com/search?q=geany+ide&rlz=1C1QCTP_enUS1084US1084&oq=geany+id&gs_lcrp=EgZjaHJvbWUqBwgAEAAYgAQyBwgAEAAYgAQyBggBEEUYOTIHCAIQABiABDIHCAMQABiABDIHCAQQABiABDIHCAUQABiABDIHCAYQABiABDIHCAcQABiABDIHCAgQABiABDINCAkQABiGAxiABBiKBagCALACAA&sourceid=chrome&ie=UTF-8\n\nReport comment\n\nReply\n\n  10. TRL7 says:\n\nApril 23, 2024 at 6:14 pm\n\nAlire (https://alire.ada.dev/) should definitely get a shoutout in a future\narticle. Makes working with Ada much nicer.\n\nReport comment\n\nReply\n\n  11. Hedley K Rainnie says:\n\nApril 23, 2024 at 10:38 pm\n\nI use it for stm32 hacking. Been doing that for a while now.\n\nhttps://github.com/morbos/STM32\n\nI was at NYU when my professors Dewar and Schonberg got NYU AdaEd working (it\nwas written in Setl (which was written in Little (which was written in\nfortran))).\n\nReport comment\n\nReply\n\n    1. Maya Posch says:\n\nApril 25, 2024 at 1:21 am\n\nI\u2019ll eventually end up covering Ada on MCUs as well, so this might be a useful\nreference. Thank you for that, as well as that tidbit of fun historical trivia\n:)\n\nReport comment\n\nReply\n\n  12. Mr Karlsson says:\n\nApril 24, 2024 at 1:38 am\n\nAs one who has programmed in Ada for a living for half a decade, and still do\noccationally, I wanted to add a couple of useful pointers for those who want\nto try doing something real in Ada.\n\n1\\. To use the POSIX API you will need florist:\nhttps://github.com/AdaCore/florist 2. As for small embedded work there is a\nGNAT for AVR: https://sourceforge.net/p/avr-ada\n\nI seem to remember that the AVR port lacks exception-support, but that may\nhave changed in the years since i looked at it the last time.\n\nHappy Ada:ing!\n\nReport comment\n\nReply\n\n    1. Maya Posch says:\n\nApril 25, 2024 at 1:22 am\n\nAda on AVR seems like a fun challenge. Got enough AVR boards gathering dust,\nso I\u2019ll take a look at it for sure in an upcoming article. Thank you for the\ninfo :)\n\nReport comment\n\nReply\n\n  13. Fabien says:\n\nApril 24, 2024 at 2:29 am\n\nGreat article, Maya!\n\nJust a quick update on GNAT Community: It was discontinued in 2022 (see blog\npost here [1]), and there is now a package manager called Alire\n(https://alire.ada.dev) that provides a GNAT FSF toolchains for Linux,\nWindows, and macOS.\n\nCheers,\n\n[1] https://blog.adacore.com/a-new-era-for-ada-spark-open-source-community\n\nReport comment\n\nReply\n\n    1. Maya Posch says:\n\nApril 25, 2024 at 1:19 am\n\nThank you for that update, Fabien. I guess that\u2019s I get for mostly living in a\nBash shell :)\n\nReport comment\n\nReply\n\n  14. Greg Chabala says:\n\nApril 24, 2024 at 2:32 am\n\nThat link to GNAT Programming Studio is long dead, Wikipedia deemed it non-\nnotable. The AdaCore page doesn\u2019t even mention a community edition anymore,\njust \u2018request pricing\u2019 for Pro. Based on a reddit post, the thing to do is to\ndownload a recent continuous release from the gnatstudio github releases.\n\nThe same reddit post also mentions Alire as being nearly mandatory, it\u2019s the\nlibrary retrieval and build tool, which sounds very much like the role Apache\nMaven fills for Java. Not clear if gnatmake fits in with that tooling at all,\nor is supplanted by it.\n\nReport comment\n\nReply\n\n  15. Clancydaenlightened says:\n\nApril 24, 2024 at 8:02 am\n\nWhat\u2019s wrong with assembly it\u2019s easy, you just have have the opcodes and\ninstructions sheet for the CPU.\n\nI get it, lazy people don\u2019t want literally bare metal everything, from\nbootloader to firmware/os, to garbage collection and memory management\n\nAll from scratch\n\nBut assembler is the best\n\nBecause it\u2019s effectively programming in binary\n\nUsing hexadecimal nowadays\n\nNo obfuscation between the code and hardware it runs on, the most efficient\nway of programming too if you take the time and effort to do it right\n\nYou can read asm and compute exactly what the CPU will do by hand, just takes\nyou longer.\n\nWhen u use assembly, and do it well\n\nYou won\u2019t have backdoors and software exploits if the code is done well\n\nLook at the Xbox 360...\n\nReport comment\n\nReply\n\n    1. Pat says:\n\nApril 24, 2024 at 8:38 am\n\nBah, who needs your assembly, do it in machine code so you can control the\naddressing and layout directly.\n\n\u201cYou won\u2019t have backdoors and software exploits if the code is done well\u201d\n\nYou don\u2019t have backdoors and software exploits if *any* code is done well.\nThat\u2019s practically the definition of \u201ccode done well.\u201d\n\nReport comment\n\nReply\n\n  16. Beowulf Shaeffer says:\n\nApril 24, 2024 at 8:46 am\n\nThanks! Can\u2019t wait for the next one. This is high on my list of languages to\nlearn.\n\nReport comment\n\nReply\n\n### Leave a ReplyCancel reply\n\nPlease be kind and respectful to help make the comments section excellent.\n(Comment Policy)\n\nThis site uses Akismet to reduce spam. Learn how your comment data is\nprocessed.\n\n# Search\n\n# Never miss a hack\n\nFollow on facebook Follow on twitter Follow on youtube Follow on rss Contact\nus\n\n# Subscribe\n\n# If you missed it\n\n  * ## Mining And Refining: Uranium And Plutonium\n\n23 Comments\n\n  * ## Programming Ada: First Steps On The Desktop\n\n44 Comments\n\n  * ## The Hunt For MH370 Goes On With Barnacles As A Lead\n\n38 Comments\n\n  * ## MXM: Powerful, Misused, Hackable\n\n19 Comments\n\n  * ## VCF East 2024 Was Bigger And Better Than Ever\n\n16 Comments\n\nMore from this category\n\n# Our Columns\n\n  * ## Supercon 2023: Alex Lynd Explores MCUs In Infosec\n\n9 Comments\n\n  * ## FLOSS Weekly Episode 780: Zoneminder \u2014 Better Call Randal\n\n3 Comments\n\n  * ## Slicing And Dicing The Bits: CPU Design The Old Fashioned Way\n\n8 Comments\n\n  * ## Hackaday Links: April 21, 2024\n\n12 Comments\n\n  * ## The Long And The Short Of It\n\n9 Comments\n\nMore from this category\n\n# Search\n\n# Never miss a hack\n\nFollow on facebook Follow on twitter Follow on youtube Follow on rss Contact\nus\n\n# Subscribe\n\n# If you missed it\n\n  * ## Mining And Refining: Uranium And Plutonium\n\n23 Comments\n\n  * ## Programming Ada: First Steps On The Desktop\n\n44 Comments\n\n  * ## The Hunt For MH370 Goes On With Barnacles As A Lead\n\n38 Comments\n\n  * ## MXM: Powerful, Misused, Hackable\n\n19 Comments\n\n  * ## VCF East 2024 Was Bigger And Better Than Ever\n\n16 Comments\n\nMore from this category\n\n# Categories\n\n# Our Columns\n\n  * ## Supercon 2023: Alex Lynd Explores MCUs In Infosec\n\n9 Comments\n\n  * ## FLOSS Weekly Episode 780: Zoneminder \u2014 Better Call Randal\n\n3 Comments\n\n  * ## Slicing And Dicing The Bits: CPU Design The Old Fashioned Way\n\n8 Comments\n\n  * ## Hackaday Links: April 21, 2024\n\n12 Comments\n\n  * ## The Long And The Short Of It\n\n9 Comments\n\nMore from this category\n\n# Recent comments\n\n  * Reluctant Cannibal on Chip Mystery: The Case Of The Purloined Pin\n  * make piece not war on Downloading Satellite Imagery With A Wi-Fi Antenna\n  * jpa on Chip Mystery: The Case Of The Purloined Pin\n  * Paul on Mining And Refining: Uranium And Plutonium\n  * Garth on Downloading Satellite Imagery With A Wi-Fi Antenna\n  * Paul on More Mirrors (and A Little Audio) Mean More Laser Power\n  * willmore on Chip Mystery: The Case Of The Purloined Pin\n  * limroh on Implantable Battery Charges Itself\n  * Paul Hutch on Chip Mystery: The Case Of The Purloined Pin\n  * willmore on Chip Mystery: The Case Of The Purloined Pin\n\n# Now on Hackaday.io\n\n  * bob099 liked GollumRF: Sub-1GHz RF hacking tool.\n  * SrBlonde has added details to ARCADE 360o.\n  * SrBlonde has updated details to MICRO SPECTRUM +.\n  * SrBlonde has added details to Arcade Mobile.\n  * SrBlonde has updated the project titled Arcade Mobile.\n  * SrBlonde has added details to Arcade Controller All In One 360.\n  * zemosow liked GollumRF: Sub-1GHz RF hacking tool.\n  * canique has added Mohsen Janipor as a contributor to Canique Ambience.\n  * Johann_fuchs liked Geiger Counter.\n  * TinLethax liked Twiz.\n\n  * Home\n  * Blog\n  * Hackaday.io\n  * Tindie\n  * Hackaday Prize\n  * Video\n  * Submit A Tip\n  * About\n  * Contact Us\n\n# Never miss a hack\n\nFollow on facebook Follow on twitter Follow on youtube Follow on rss Contact\nus\n\n# Subscribe to Newsletter\n\nCopyright \u00a9 2024 | Hackaday, Hack A Day, and the Skull and Wrenches Logo are Trademarks of Hackaday.com | Privacy Policy | Terms of Service | Digital Services Act Powered by WordPress VIP\n\nBy using our website and services, you expressly agree to the placement of our\nperformance, functionality and advertising cookies. Learn more\n\nLoading Comments...\n\n", "frontpage": false}
