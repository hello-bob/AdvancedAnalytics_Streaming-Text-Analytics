{"aid": "40221067", "title": "The Nature of Code (2nd Edition)", "url": "https://natureofcode.com/introduction/", "domain": "natureofcode.com", "votes": 2, "user": "skilled", "posted_at": "2024-05-01 09:15:12", "comments": 0, "source_title": "Introduction", "source_text": "Introduction / Nature of Code\n\nTHE NATURE OF CODEBY DANIEL SHIFFMAN\n\n  * SUPPORT\n  * GITHUB\n  * CODING TRAIN\n\nBUY THE BOOK\n\n# Introduction\n\nOver a decade ago, I self-published The Nature of Code, an online resource and\nprint book exploring the unpredictable evolutionary and emergent properties of\nnature in software via the creative coding framework Processing. It\u2019s the\nunderstatement of the century to say that much has changed in the world of\ntechnology and creative media since then, and so here I am again, with a new\nand rebooted version of this book built around JavaScript and the p5.js\nlibrary. The book has a few new coding tricks this time, but it\u2019s the same old\nnature\u2014birds still flap their wings, and apples still fall on our heads.\n\n## What Is This Book?\n\nAt ITP/IMA (Tisch School of the Arts, New York University), I\u2019ve been teaching\na course titled Introduction to Computational Media since 2004. The origins of\nthis class date back to 1987 and the work of Mike Mills and John Henry\nThompson (inventor of the Lingo programming language). In the course, students\nlearn the basics of programming (variables, conditionals, loops, objects,\narrays) as well as concepts related to making interactive media projects\n(pixels, data, sound, networking, 3D, and more). In 2008, I synthesized my\nmaterials for this class into an introductory book, Learning Processing, and\nin 2015, I created a series of video tutorials that follow the same trajectory\nin JavaScript with the p5.js library.\n\nOnce a student has learned the basics and seen an array of applications, their\nnext step might be to delve deeply into a particular area. Maybe they want to\nfocus on computer vision, data visualization, or generative poetry. My Nature\nof Code course (also taught at ITP/IMA since 2008) represents another possible\nnext step. The course picks up exactly where my introductory material leaves\noff, demonstrating a world of programming techniques that focus on algorithms\nand simulation. The book you\u2019re reading has evolved from that course.\n\nMy goal for this book is simple: I want to take a look at phenomena that\nnaturally occur in the physical world and figure out how to write code to\nsimulate them.\n\nWhat, then, is this book exactly? Is it a science book? The answer is a\nresounding no. True, I might examine topics that come from physics or biology,\nbut I won\u2019t investigate these topics with a particularly high level of\nacademic rigor. Instead, the book is \u201cinspired by actual events.\u201d I\u2019m grabbing\nthe parts from science and mathematics needed to build a software\ninterpretation of nature, and veering off course or skipping details as I see\nfit.\n\nIs this an art or design book? I would also say no. Regardless of how informal\nmy approach might be, I\u2019m still focusing on algorithms and their related\nprogramming techniques. Sure, the resulting demonstrations are visual\n(manifested as animated p5.js sketches), but they\u2019re literal visualizations of\nthe algorithms and programming techniques themselves, drawn only with basic\nshapes and grayscale color. It\u2019s my hope, however, that you, dear reader, can\nuse your creativity and visual ideas to make new, engaging work out of the\nexamples. (I won\u2019t complain if you turn every sketch into a rainbow.)\n\nIn the end, if this book is anything, it\u2019s an old-fashioned programming\ntextbook. While a scientific topic (Newtonian physics, cellular growth,\nevolution) may seed a chapter and the results might inspire artistic projects,\nthe content itself will always boil down to the code implementation, with a\nparticular focus on object-oriented programming.\n\n## A Word About p5.js\n\nThe p5.js library is a reimagining of the Processing creative coding\nenvironment for the modern web. I\u2019m using it in this book for a number of\nreasons. For one, it\u2019s an environment that I\u2019m very familiar with. While the\noriginal Processing built on top of Java is my first love and still what I\nturn to when trying out a new idea, p5.js is what I now use for teaching many\nof my programming classes. It\u2019s free, open source, and well suited to\nbeginners, and because it\u2019s JavaScript, everything runs right there in the web\nbrowser itself\u2014no installation required.\n\nFor me, however, Processing and p5.js are first and foremost a community of\npeople, not coding libraries or frameworks. Those people have generously\ndedicated countless hours to making and sharing the software. I\u2019ve written\nthis book for that community and for anyone and everyone who loves to explore\ntheir curiosity and play through code.\n\nAll that said, nothing ties this book\u2019s content strictly to p5.js\u2014or\nProcessing, for that matter. This book could have been written with \u201cvanilla\u201d\nJavaScript or Java, or with any number of other open source creative coding\nenvironments like openFrameworks, Cinder, and so on. It\u2019s my hope that after\nI\u2019ve completed this book, I\u2019ll be able to release versions of the examples\nthat run in other environments. If anyone is interested in helping to port the\nexamples, please feel free to contact me by email at daniel@natureofcode.com.\nGo on, you know you want to port The Nature of Code to PHP!\n\nAll the examples in this book have been tested with p5.js version 1.9.0, but\nfor the most part they should also work with earlier versions. I\u2019ll be keeping\nthem up to date with the latest version. The most recent code can always be\nfound on this book\u2019s website and its associated GitHub repository.\n\n## What Do You Need to Know?\n\nThe prerequisites for understanding the material in this book could be stated\nas \u201cone semester of programming instruction with p5.js, Processing, or any\nother creative coding environment.\u201d That said, there\u2019s no reason you couldn\u2019t\nread this book having learned programming with a different language or\ndevelopment environment.\n\nIf you\u2019ve never written any code before, while you could read the book for the\nconcepts and inspiration, you\u2019ll likely struggle with the code because I\u2019m\nassuming knowledge of the fundamentals: variables, conditionals, loops,\nfunctions, objects, and arrays. If these concepts are new to you, my \u201cCode!\nProgramming with p5.js\u201d and \u201cLearning Processing\u201d video courses provide the\nfundamentals of what you need to know.\n\nIf you\u2019re an experienced programmer but haven\u2019t worked with p5.js, you can\nprobably pick it up by checking out the p5.js documentation, poking through\nthe examples, and reading through the library\u2019s \u201cGet Started\u201d page.\n\nI should also point out that experience with object-oriented programming is\nfairly critical. I\u2019ll review some of the basics in Chapter 0, but if classes\nand objects are unfamiliar to you, I suggest watching my p5.js and Processing\nobject-oriented video tutorials, both also available at the Coding Train.\n\n## How Are You Reading This Book?\n\nAre you reading this book on a Kindle? Printed paper? On your laptop in PDF\nform? On a tablet showing an animated HTML5 version? Are you strapped to a\nchair, absorbing the content directly into your brain via a series of\nelectrodes, tubes, and cartridges?\n\nMy dream has always been to write this book in one single format (in this\ncase, a collection of Notion documents) and then, after pressing a magic\nbutton (npm run build), out comes the book in any and all formats you might\nwant\u2014PDF, HTML5, printed hard copy, Kindle, and so on. This was largely made\npossible by the Magic Book project, which is an open source framework for\nself-publishing originally developed at ITP by Rune Madsen and Steve Klise.\nEverything has been designed and styled using CSS\u2014no manual typesetting or\nlayout.\n\nThe reality of putting this book together isn\u2019t quite so clean as that, and\nthe story of how it happened is long. If you\u2019re interested in learning more,\nmake sure to read the book\u2019s acknowledgments, and then go hire the people I\u2019ve\nthanked to help you publish a book! I\u2019ll also include more details in the\nassociated GitHub repository.\n\nThe bottom line is that no matter what format you\u2019re reading it in, the\nmaterial is all the same. The only difference will be in how you experience\nthe code examples\u2014more on that in \u201cHow to Read the Code\u201d.\n\n### The Coding Train Connection\n\nPersonally, I still love an assembled amalgamation of cellulose pulp,\nmeticulously bound together with a resilient spine, upon which pigmented\ncompounds have been artfully deployed to convey words and ideas. Yet, ever\nsince 2012, when I impulsively recorded my very first video lesson about\nprogramming in my office at ITP, I\u2019ve discovered the tremendous value and joy\nin conveying ideas and lessons through moving pictures.\n\nAll this is to say, I have a YouTube channel called the Coding Train. I\nmentioned it earlier when discussing options for learning the prerequisite\nmaterial for this book, and if you continue reading, you\u2019ll find I continue to\nreference related videos. I might allude to one I made about a related\nalgorithm or alternative technique for a particular coding example, or suggest\na series on a tangential concept that could provide additional context to a\ntopic I\u2019m exploring.\n\nIf video learning is your style, I\u2019m also working on an accompanying set of\nvideo tutorials that follow the exact same material as this book. I made a\nwhole bunch 10 years ago with Processing, and more recently I started\npublishing a series of updated ones with p5.js. At the time of this writing,\nI\u2019m about halfway through Chapter 5.\n\n### Additional Resources\n\nThere\u2019s also an abundance of exceptional educational material teaching\nsimulation and generative algorithms that I did not write or record. I always\nrecommend that you explore various perspectives and voices when attempting to\nlearn something new. It\u2019s possible that what I\u2019ve written might not click with\nyou, and even hearing me repeat the same information in video form, regardless\nof how much mugging I do for the camera, won\u2019t help. Sometimes what\u2019s best is\nsomeone else you can relate to writing or saying or demonstrating the same\nconcepts in different words with a different style. To this end, I\u2019m including\nan \u201cAdditional Resources\u201d section on this book\u2019s website. If you create your\nown materials or have any recommendations for inclusion, please get in touch!\n\nTwo quick recommendations I have right now are The Computational Beauty of\nNature by Gary William Flake (MIT Press, 1998)\u2014it\u2019s where I originally learned\na lot of the ideas for this book\u2014and the superbly organized online resource\nThat Creative Code Page by Taru Muhonen and Rapha\u00ebl de Courville.\n\n## The \u201cStory\u201d of This Book\n\nIf you glance over the book\u2019s table of contents, you\u2019ll notice 12 chapters\n(0\u201311!), each one covering a different topic. And in one sense, this book is\njust that\u2014a survey of a dozen concepts and associated code examples.\nNevertheless, in putting together the material, I always imagined something of\na linear narrative. Before you begin reading, I\u2019d like to walk you through\nthis story.\n\n### Part 1: Inanimate Objects\n\nA soccer ball lies in the grass. A kick launches it into the air. Gravity\npulls it back down. A heavy gust of wind keeps it afloat a moment longer until\nit falls and bounces off the head of a jumping player. The soccer ball isn\u2019t\nalive; it makes no choices as to how it will move through the world. Rather,\nit\u2019s an inanimate object waiting to be pushed and pulled by the forces of its\nenvironment.\n\nHow would you model a soccer ball moving in a digital canvas? If you\u2019ve ever\nprogrammed a circle moving across a screen, you\u2019ve probably written the\nfollowing line of code:\n\n    \n    \n    x = x + 1;\n\nYou draw a shape at position x. With each frame of animation, you increment\nthe value of x, redraw the shape, and voil\u00e0\u2014the illusion of motion! Maybe you\ntook it a step or two further and included a y position, as well as variables\nfor speed along the x- and y-axes:\n\n    \n    \n    x = x + xspeed;\n    \n    \n    y = y + yspeed;\n\nPart 1 of this story will take this idea even further. After exploring how to\nuse different flavors of randomness to drive an object\u2019s motion (Chapter 0),\nI\u2019m going to take these xspeed and yspeed variables and demonstrate how\ntogether they form a vector (Chapter 1). You won\u2019t get any new functionality\nout of this, but it will build a solid foundation for programming motion in\nthe rest of the book.\n\nOnce you know a little something about vectors, you\u2019re going to quickly\nrealize that a force (Chapter 2) is a vector. Kick a soccer ball and you\u2019re\napplying a force. What does a force cause an object to do? According to Sir\nIsaac Newton, force equals mass times acceleration, so that force causes an\nobject to accelerate. Modeling forces will allow you to create systems with\ndynamic motion, in which objects move according to a variety of rules.\n\nNow, that soccer ball to which you applied a force might have also been\nspinning. If an object moves according to its linear acceleration, it can spin\naccording to its angular acceleration (Chapter 3). Understanding the basics of\nangles and trigonometry will allow you to model rotating objects as well as\ngrasp the principles behind oscillating motion, like a pendulum swinging or a\nspring bouncing.\n\nOnce you\u2019ve tackled the basics of motion and forces for an individual\ninanimate object, I\u2019ll show you how to make thousands upon thousands of those\nobjects and manage them as a single unit called a particle system (Chapter 4).\nParticle systems are also a good excuse to look at some additional features of\nobject-oriented programming\u2014namely, inheritance and polymorphism.\n\n### Part 2: It\u2019s Alive!\n\nWhat does it mean to model life? Not an easy question to answer, but I\u2019ll\nbegin by building objects that have an ability to perceive their environment.\nLet\u2019s think about this for a moment. A block that falls off a table moves\naccording to forces, as does a dolphin swimming through the water. But there\u2019s\na key difference: the block can\u2019t decide to leap off the table, whereas the\ndolphin can decide to leap out of the water. The dolphin has dreams and\ndesires. It feels hunger and fear, and those feelings inform its movements. By\nexamining techniques behind modeling autonomous agents (Chapter 5), you\u2019ll\nlearn to breathe life into inanimate objects, allowing them to make decisions\nabout their movements according to their understanding of their environment.\n\nIn Chapters 1 through 5, all the examples will be written \u201cfrom\nscratch\u201d\u2014meaning the code for the algorithms driving the motion of the objects\nwill be written directly in p5.js. I\u2019m certainly not the first programmer ever\nto consider the idea of simulating physics and life in animation, however, so\nnext I\u2019ll examine how you can use physics libraries (Chapter 6) to model more\nsophisticated behaviors. I\u2019ll look at the features of two libraries: Matter.js\nand Toxiclibs.js.\n\nThe end of Chapter 5 will explore group behaviors that exhibit the properties\nof complexity. A complex system is typically defined as a system that\u2019s more\nthan the sum of its parts. While the individual elements of the system may be\nincredibly simple and easily understood, the behavior of the system as a whole\ncan be highly complex, intelligent, and difficult to predict. Chasing\ncomplexity will lead you away from thinking purely about modeling motion and\ninto the realm of rule-based systems. What can you model with cellular\nautomata (Chapter 7), systems of cells living on a grid? What types of\npatterns can you generate with fractals (Chapter 8), the geometry of nature?\n\n### Part 3: Intelligence\n\nYou made things move. Then you gave those things hopes and dreams and fears,\nalong with rules to live by. The last step in this book will bring intelligent\ndecision-making into your creations. Can you apply the biological process of\nevolution to computational systems (Chapter 9) in order to evolve the behavior\nof autonomous agents? Taking inspiration from the human brain, can you program\nan artificial neural network (Chapter 10)? How can agents make decisions,\nlearn from their mistakes, and adapt to their environment (Chapter 11)?\n\n## Using This Book as a Syllabus\n\nWhile the content in this book certainly makes for an intense and highly\ncompressed semester, I\u2019ve designed it to fit into a 14-week course. I find\nthat some chapters work better expanded across multiple weeks, while others\ncan be combined and explored together in a single week. Here\u2019s one possible\nsyllabus:\n\nWeek 1| Randomness and vectors (Chapters 0\u20131)  \n---|---  \nWeek 2| Forces (Chapter 2)  \nWeek 3| Oscillation (Chapter 3)  \nWeek 4| Particle systems (Chapter 4)  \nWeek 5| Autonomous agents (Chapter 5)  \nWeek 6| Physics libraries (Chapter 6)  \nWeek 7| Mid-semester project about motion  \nWeek 8| Complex systems: 2D cellular automata and fractals (Chapters 7\u20138)  \nWeek 9| Genetic algorithms (Chapter 9)  \nWeek 10| Neural networks and neuroevolution (Chapters 10\u201311)  \nWeek 11| Final project discussion  \nWeeks 12\u201313| Final project workshop  \nWeek 14| Final project presentation  \n  \nIf you\u2019re considering using this text for a course or workshop, please feel\nfree to contact me. I hope to eventually finish the companion set of videos,\nas well as include helpful slides as supplementary educational materials. If\nyou make your own, I\u2019d love to hear about it!\n\n## How to Read the Code\n\nCode is the main medium of this book, weaving throughout the narrative as it\u2019s\ndissected and examined. Sometimes it appears as full, stand-alone examples,\nother times it drops in as a single line or two, and often it\u2019s stretched over\nwhole sections in many short snippets, with explanations nestled in between.\nWhatever form it takes, code will always appear in a monospaced font. Here\u2019s a\nquick guide on how to navigate the types of code sprinkled throughout the\nbook.\n\n### Full Examples\n\nEach chapter includes fully functional code examples that are written with the\np5.js library. Here\u2019s what they look like:\n\n### Example #.#: Example Title\n\nLoading sketch ...\n\nOpen in Web Editor\n\n    \n    \n    function setup() {\n    \n    \n    createCanvas(640, 240);\n\nThis canvas size is used to accommodate the book\u2019s layout but isn\u2019t critical\nfor the examples otherwise.\n\n    \n    \n    background(255);\n    \n    \n    }\n    \n    \n    function draw() {\n    \n    \n    fill(0, 25);\n    \n    \n    stroke(0, 50);\n    \n    \n    circle(random(width), random(height), 16);\n\nDraw a random circle each time through draw().\n\n    \n    \n    }\n\nThe examples are numbered sequentially within each chapter to help you find\nthe corresponding code online. In the printed version of the book, you\u2019ll see\na screenshot right below the example title. The online version has the running\nsketch embedded right there on the page. For animated examples (which are\nalmost all of them), the screenshots will often show a \u201ctrail\u201d of motion. This\neffect was achieved by adding transparency to the background(255, 10)\nfunction, though the accompanying code won\u2019t include that enhancement.\n\nBelow the example, you\u2019ll find the code, but it\u2019s not always the complete\ncode. Since many examples are quite long and span multiple files, I make my\nbest effort to include a snippet that highlights the main aspects of the\nexample or whatever new components are being introduced that weren\u2019t already\ndiscussed earlier in the section.\n\nYou can find the full version of the code on the book\u2019s website. There, you\ncan interact with, modify, and experiment with the code in the p5.js Web\nEditor. Additionally, everything is included in the book\u2019s GitHub repository.\nHere are links for all the materials:\n\n  * The book\u2019s website includes the full text of the book, additional reading and references, and all code examples.\n  * The GitHub repositories contain the raw source code for the book\u2019s website, the book\u2019s build process, and all code examples.\n  * In addition to the website and GitHub repositories, you can also access the code by viewing the list of sketches in the p5.js web editor.\n\nNotice that I\u2019ve used comments in the example to address what\u2019s happening in\nthe code. These comments float next to the code (the appearance may vary\ndepending on how you\u2019re reading the book). The background shading groups the\ncomments with their corresponding lines of code.\n\n### Complete Snippets\n\nThough rare, \u201ccomplete\u201d sections of code are occasionally mixed in with the\nbody text. Sometimes, as with the sample Example #.# in the previous section,\nI might actually list all the code associated with a complete p5.js sketch. In\nmost cases, however, I\u2019m considering a \u201ccomplete\u201d snippet to be the code for\nan entire function or a class\u2014a fully finished block of code, complete with\nopening and closing curly brackets and everything in between. Something like\nthis:\n\n    \n    \n    function draw() { background(255); for (let x = 0; x < width; x += spacing) { fill(255); circle(x, height / 2, spacing); } }\n\nThe entire draw() function for an example\n\nThis snippet shows the entire draw() function, but it still isn\u2019t a complete\nsketch. It assumes the existence of a global variable called spacing, as well\nas a setup() function that calls createCanvas().\n\n### Context-Free Code\n\nOccasionally, you\u2019ll find lines of code hanging out on the page without a\nsurrounding function or context. These snippets are there to illustrate a\npoint, not necessarily to be run as is. They might represent a concept, a tiny\npiece of an algorithm, or a coding technique.\n\n    \n    \n    fill(240, 99, 164);\n\nRGB values to make the circles pink\n\nNotice that this context-free snippet matches the indentation of fill(255) in\nthe previous \u201ccomplete\u201d snippet. I\u2019ll do this when the code has been\nestablished to be part of something demonstrated previously. Admittedly, this\nwon\u2019t always work out so cleanly or perfectly, but I\u2019m doing my best!\n\n### Snipped Code\n\nBe on the lookout for the scissors! This design element indicates that a code\nsnippet is a continuation of a previous piece or will be continued after some\nexplanatory text. Sometimes it\u2019s not actually being continued but is just cut\noff because all the code isn\u2019t relevant to the discussion at hand. The\nscissors are there to say, \u201cHey, there might be more to this code above or\nbelow, or at the very least, this is a part of something bigger!\u201d Here\u2019s how\nthis might play out with some surrounding body text.\n\nThe first step to building a p5.js sketch is to create a canvas:\n\n    \n    \n    function setup() {\n    \n    \n    createCanvas(640, 240);\n\nThen it\u2019s time to draw the background:\n\n    \n    \n    background(255);\n\nI also like to include a circle in the center of the canvas:\n\n    \n    \n    circle(width / 2, height / 2, 200);\n    \n    \n    }\n\nIn draw(), I might want to start placing squares at random locations on top of\nthe background and fixed circle. The rest of the code could be anything you\nwant it to be!\n\n    \n    \n    function draw() {\n    \n    \n    rectMode(CENTER);\n    \n    \n    square(random(width), random(height), 20);\n\nNotice that I\u2019m keeping the indentation consistent to try to help establish\nthe context, and again, I\u2019m using the scissors icon to help indicate where\ncode is continued or cut off.\n\nA particular side effect of using snipped code is that you\u2019ll often notice\nopening curly brackets in one snippet that don\u2019t have a corresponding closing\nbracket until several snippets later (if at all). If you\u2019re used to looking at\nJavaScript code, this may initially send you into a mild panic, but hopefully\nyou\u2019ll get used to it.\n\n## Exercises\n\nEach chapter includes numbered exercises that serve as your playground to\napply, experiment with, and go beyond the concepts and code provided within\nthe chapters. Here\u2019s what an exercise might look like:\n\n### Exercise #.#\n\nTry tweaking Example #.# so that each circle has a random size:\n\n    \n    \n    function draw() {\n    \n    \n    fill(0, 25);\n    \n    \n    stroke(0, 50);\n    \n    \n    circle(random(width), random(height), random(16, 64));\n    \n    \n    }\n\nTo keep you on your toes, the exercises come in a variety of formats. Some\npose technical challenges, asking you to write a variation of a specific\nalgorithm or solve a highly specific problem. Others are open-ended inquiries,\nprompting you to play and experiment, following your own ideas. Some include\nsnippets of code with blank spots, inviting you to fill them in directly.\nDon\u2019t hesitate to write, scribble, or doodle in this very book as you work\nthrough them!\n\n### Solutions\n\nSolutions for the exercises are provided on the book\u2019s website. Or I should\nsay, I aspire to include solutions for all the exercises on the book\u2019s\nwebsite. As of this moment, just a handful are available, but hopefully by the\ntime you\u2019re reading this, there will be many more. If you\u2019d like to contribute\na solution to an exercise, I would love for you to do so via the book\u2019s GitHub\nrepository!\n\n### The Ecosystem Project\n\nAs much as I\u2019d like to pretend you could learn everything by curling up in a\ncomfy chair and reading some prose, to learn programming you\u2019re really going\nto have to do some programming. The exercises scattered throughout each\nchapter are a start, but you might find it helpful to also keep in mind a more\nsubstantial project idea (or two) that you can develop as you go from chapter\nto chapter. In fact, when teaching my Nature of Code course at ITP, I\u2019ve often\nfound that students enjoy building a single project, step by step, week by\nweek, over the course of the semester.\n\nAt the end of each chapter, you\u2019ll find a series of prompts for one such\nproject\u2014exercises that build on each other, one topic at a time. This project\nis based on the following scenario. You\u2019ve been asked by a science museum to\ndevelop the software for a new exhibit, the Digital Ecosystem, a world of\nanimated, procedural creatures that live in a computer simulation for visitors\nto enjoy as they enter the museum. I don\u2019t mean to suggest that this is a\nparticularly innovative or creative concept. Rather, I\u2019ll use this example\nEcosystem Project idea as a literal representation of the content in the book,\ndemonstrating how the elements can fit together in a single program. I\nencourage you to develop your own idea, one that\u2019s perhaps more abstract and\nnontraditional.\n\n## Getting Help and Submitting Feedback\n\nCoding can be tough and frustrating, and the ideas in this book aren\u2019t always\nstraightforward. You don\u2019t have to go it alone. There\u2019s probably someone else\nreading right now who would love to co-organize a study group or a book club\nwhere you can meet, chat, and share your struggles and successes. If you don\u2019t\nfind a local community for traveling this journey together, what about an\nonline one? Two places I\u2019d suggest are the official Processing forums and the\nCoding Train Discord server.\n\nI consider the online version of this book a living document and welcome your\nfeedback. For all things book related, please visit the Nature of Code\nwebsite. The raw source text of the book and all the illustrations are on\nGitHub. Please leave feedback and submit corrections by using GitHub issues.\n\nMore important, I want to see what you make! You can share your ideas by\nsubmitting to the passenger showcase on the Coding Train website or in the\nchannels on the aforementioned Discord. A hello in a YouTube comment is always\nwelcome (although to be honest, it\u2019s often best not to read the comments on\nYouTube), and feel free to tag me on whatever platform the future of social\nmedia has to offer\u2014whichever one is the friendliest and least toxic! I want to\nenjoy all the bloops that swim in your ecosystem. Whether they leap\ntriumphantly over a wave of creativity or make a tiny splash in a pond of\nlearning, let\u2019s bask in the ripples they send through the nature of coding!\n\nPrevious Chapter\n\n\u2190 Acknowledgments\n\nNext Chapter\n\n0\\. Randomness \u2192\n\n", "frontpage": false}
