{"aid": "40274150", "title": "Backend Engineer tries to build a hardware counter for its side project.", "url": "https://simonedutto.github.io/2024-05-05/hardware-counter", "domain": "simonedutto.github.io", "votes": 3, "user": "sgundo", "posted_at": "2024-05-06 13:03:04", "comments": 0, "source_title": "Backend Engineer tries to build a hardware counter for its side project.", "source_text": "Backend Engineer tries to build a hardware counter for its side project. | Simone Dutto\n\nWritten by Simone Dutto on May 05, 2024\n\n# Backend Engineer tries to build a hardware counter for its side project.\n\nI am building a game called Binary Duel, and since we are committed to staying\nas simple as possible we don\u2019t have a nice admin panel with all fancy stats.\n\nSo, in an urge to build something in C (ty for the psyops to all HN), I\ndecided to build a cute little box to show the number of games currently being\nplayed!\n\nHere I briefly describe the project.\n\n# The Result\n\nHere is the counter in all its glory. My decoupage skills are as good as it\ngets, sue me (don\u2019t).\n\n# The process\n\n> For the impatient here is the code: Github repo\n\n## Hardware\n\n### Components\n\n  * Node MCU Amica (ESP8266): similar to Arduino but with Wifi Module, smaller and cheaper\n  * 7-digit display\n  * 3x 660\u03a9 resistor\n  * a bunch of jumper wires\n  * old metal box\n  * hopes\n\n### Wiring\n\nWe tend to love to copy others when doing something, however I would not copy\nthe wiring of a backend engineer!\n\nHowever, here is the photo if you are interested.\n\nAfter making sure everything work is time to use a smaller board and a lot of\ntape to crawl of this mess inside the box (very painful).\n\n## Software\n\nThe code is fairly simple, we just need to:\n\n  * create an API in our service to expose the number of games being played\n  * fetch this number\n  * update the counter\n\nHowever, there are things that we take for granted, that are not in a\nmicrocontroller development environment:\n\n### Debugging\n\nwith my setup at least, it is not possible to debug the code, and for some\nreason, the serial output was not showing correctly with all the pins\nconnected.\n\nSo I trusted the process and used the 7digits display to show HTTP status\ncodes or errors.\n\n### Sending an HTTP request and parsing the JSON\n\nEven with using the libraries, this is the code to perform and HTTP request\nand parsing the response.\n\n    \n    \n    int httpGETRequest(const char* serverName) { std::unique_ptr<BearSSL::WiFiClientSecure>client(new BearSSL::WiFiClientSecure); client->setInsecure(); HTTPClient https; String payload = \"{}\"; if (https.begin(*client, serverName)) { https.setAuthorization(\"username\", \"password\"); int httpCode = https.GET(); if (httpCode > 0) { if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) { payload = https.getString(); Serial.println(payload); https.end(); JSONVar myObject = JSON.parse(payload); if (JSON.typeof(myObject) == \"undefined\") { return 999; } return int(myObject[\"num_games\"]); } } return httpCode; } return -1; }\n\n### HTTP-S\n\nWe take for granted to have certificates in all of our machines that just work\nwithout setting them up. In a board, you don\u2019t have any certificate authority,\nso you need to either import them or client->setInsecure();\n\n> It is not good to disable SSL verification in general, so be careful.\n\n### Laws of physic\n\nUsually, when a backend engineer pulls up laws of physics, it is time to pack\nit up and go.\n\nHowever, the first time I finished this box, everything was working, so I\ndecided to close the lid.\n\nAll of a sudden nothing was working anymore.\n\nCan you guess why?\n\nI guess I built a Faraday Cage. So the Wi-Fi signal was not able to reach my\nboard anymore.\n\nAfter poking some holes in the lid, everything was working smoothly again.\n\n\u2192 Top\n\n\u00a9 2024 Simone Dutto. Made with Jekyll using the Tale theme.\n\n", "frontpage": false}
