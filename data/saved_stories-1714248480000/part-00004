{"aid": "40178845", "title": "N+1 in Ruby on Rails", "url": "https://www.visuality.pl/posts/n-1-in-ruby-on-rails", "domain": "visuality.pl", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-27 10:24:57", "comments": 0, "source_title": "N+1 in Ruby on Rails - Blog - Visuality", "source_text": "N+1 in Ruby on Rails - Blog - Visuality\n\nContact\n\nContact\n\n13\n\n.\n\n04\n\n.\n\n2024\n\n15\n\n.\n\n04\n\n.\n\n2024\n\nRuby on Rails\n\nRuby\n\nBackend\n\n# N+1 in Ruby on Rails\n\nKatarzyna Melon-Markowska\n\nRuby Developer\n\n## What is N + 1 problem in Rails?\n\nIn the Rails, Active Record Object-Relational Mapping (ORM) library is used to\nfetch records from database. Ruby code can be written with loops, where\nobjects inside a loop commonly join data from multiple tables, generating\nqueries behind the scenes.\n\nLoading associated models without proper care may easily lead to so-called N +\n1 problem.\n\nThe N + 1 problem is common performance issue. It occurs when inside loop the\nORM executes a separate query for each associated model instead of using a\nsingle query to load them upfront.\n\n## Where N + 1 could be?\n\nLets create simple two models, Team and User:\n\n    \n    \n    class Team < ApplicationRecord has_many :users end class User < ApplicationRecord belongs_to :team end\n\nRun in console query to get team names for 3 users:\n\n    \n    \n    User.take(3).each do |user| puts user.team.name end\n    \n    \n    User Load (0.5ms) SELECT \"users\".* FROM \"users\" LIMIT $1 [[\"LIMIT\", 3]] Team Load (0.4ms) SELECT \"teams\".* FROM \"teams\" WHERE \"teams\".\"id\" = $1 LIMIT $2 [[\"id\", 437724769], [\"LIMIT\", 1]] First Team Team Load (0.2ms) SELECT \"teams\".* FROM \"teams\" WHERE \"teams\".\"id\" = $1 LIMIT $2 [[\"id\", 437724769], [\"LIMIT\", 1]] First Team Team Load (0.1ms) SELECT \"teams\".* FROM \"teams\" WHERE \"teams\".\"id\" = $1 LIMIT $2 [[\"id\", 527789713], [\"LIMIT\", 1]] Second Team\n\nActiveRecord first executed 1 query to fetch 3 users next did 3 other queries\nfor getting a team name for each user, so 4 queries in total were executed.\n\nViewing this as a 1 + N query can be helpful, with the initial query (1)\nloading the collection of users, followed by the execution of N additional\nqueries to fetch each user's team name.\n\nWhat if there are 10 000 users in the database? We will get 1 + 10 000 queries\nto get team name for each user. This approach could result in slow performance\nand high database load.\n\n## How to fix N + 1 in Rails?\n\nTo fix N + 1 queries, you can use the includes method. This loads all related\ndata in a single query, making it easier to fetch both user data and teams at\nonce. Let's fix our example using includes.\n\n    \n    \n    User.includes(:team).take(3).each do |user| puts user.team.name end\n    \n    \n    User Load (0.3ms) SELECT \"users\".* FROM \"users\" LIMIT $1 [[\"LIMIT\", 3]] Team Load (0.3ms) SELECT \"teams\".* FROM \"teams\" WHERE \"teams\".\"id\" IN ($1, $2) [[\"id\", 437724769], [\"id\", 527789713]] First Team First Team Second Team\n\nActiveRecord first executed 1 query to fetch 3 users. Next did 1 other query\nfor getting a team name for each user, so 2 queries in total were executed.\n\nBe careful!\n\nSometimes, it's unexpected, but running a few straightforward queries can be\nfaster than handling one complex query with many joins and conditions.\n\nRead up on the difference between eager loading and preloading, how includes\ncan turn into a big join. Article: Joins vs Preload vs Includes vs Eager load\nin Rails\n\nThe important thing to remember is that when we're trying to make things\nfaster, we should look at the actual data from our live systems and aim for\nspecific improvements.\n\n## What are the possible levels of N + 1 in Rails?\n\nLet's create the Project model and create an association in the Team model,\nalso add delegate method to User model.\n\n    \n    \n    class Team < ApplicationRecord has_many :users has_many :projects end class User < ApplicationRecord belongs_to :team delegate :name, to: :team, prefix: true end class Project belongs_to :team end\n\n### Explicit usage of an associated model\n\nIn this example, it's directly visible that the model's association is used:\n\n    \n    \n    User .take(3) .select { |u| u.team == current_team } # Fixed query: User .includes(:team) .take(3) .select { |u| u.team == current_team }\n\n### Implicit usage of an associated model\n\nIn the following example, team_name method loads the team association:\n\n    \n    \n    User .take(3) .map(&:team_name) # Fixed query: User .includes(:team) .take(3) .map(&:team_name)\n\n### Using associations of associations\n\nIn some use cases, business logic fetches deeper layers of associations. In\nthis example, we not only preload team association of loaded User. We also\npreload team' association projects.\n\n    \n    \n    User .take(3) .map { |u| u.team.projects } # Fixed query: User .includes(team: [:projects]) .take(3) .map { |u| u.team.projects }\n\n### Metaprogramming - using associations dynamically\n\nMetaprogramming and associations are areas where it's easy to introduce N + 1\nissues, which can be difficult to find or fix later on. Therefore, we\nrecommend not combining them.\n\n## How to prevent and find N + 1?\n\nThere are a lot of tools that can help with preventing or finding N + 1. Each\ntool has its strengths and weaknesses. Take your time to check them out and\nsee which one works best for you and your application.\n\n  * To prevent N + 1 queries use the strict_loading mode in Rails. This feature became available starting from Rails 6.1. It can be enabled per record, association, model, or across the entire application.\n\nLet\u2019s run in console our example:\n\n    \n    \n    User.strict_loading**.**limit(3).each do |user| puts user.team.name end\n    \n    \n    User Load (0.4ms) SELECT \"users\".* FROM \"users\" LIMIT $1 [[\"LIMIT\", 3]] /Users/kasia/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activerecord-7.0.8.1/lib/active_record/core.rb:242:in `strict_loading_violation!': `User` is marked for strict_loading. The Team association named `:team` cannot be lazily loaded. (ActiveRecord::StrictLoadingViolationError)\n\nThanks to the strict_loading mode being enabled, we received an error, which\nindicates that we should use eager loading(includes method) for the associated\nqueries to prevent N + 1.\n\n  * Use the bullet gem. It allows for automatic detection and alerting of N + 1 queries in the application, as well as offering optimization suggestions for these queries.\n  * Use the rspec-sqlimit gem. It is Test-Driven way of fighting N + 1 queries.\n  * Use the query_track gem. It is a gem that logs and tracks database queries in your Rails application. It helps to identify N + 1 query problems by recording all database queries executed during a request.\n  * Use performance monitoring tools such as New Relic, Scout APM, Sentry` or Skylight. These tools not only provide insights into overall application performance but also help in detecting and addressing common issues such as N + 1 queries.\n  * Use PostgreSQL's database tools. Employing the pgstatstatements extension enables analysis of the queries executed by your application.\n  * Use application\u2019s log files. Search for repeated queries or queries executed multiple times for related records.\n\nKeep in mind! You can't always get rid of all N + 1 queries in a Rails app,\nbut using these tools and techniques should help you find the ones causing\nproblems.\n\n## What are potential advantages of N + 1?\n\nThe N + 1 typically signifies a situation where a database query is executed\nrepeatedly within a loop or iterative process, resulting in inefficient\ndatabase access patterns. However, there are potential scenarios where the N +\n1 approach may offer advantages:\n\n  * Lazy Loading: N + 1 querying allows for lazy loading of associated records, which can be beneficial when dealing with large datasets or scenarios where loading all associated records upfront would consume excessive memory.\n  * Caching: Effective caching mechanisms can mitigate the overhead of N + 1 queries by caching frequently accessed data, leading to improved performance and reduced database load. You can listen more about it here: Interview: David Heinemeier Hansson (DHH) on Rails performance and speed\n\n## Choose the right tools and test on production-like data\n\nThe N + 1 problem in Rails occurs when database queries are repetitively\nexecuted within loops or iterative processes, leading to inefficient database\naccess patterns. This issue can severely impact application performance,\nespecially in scenarios involving large datasets or high concurrency.\n\nHowever, keep in mind, in certain, rare scenarios N + 1 isn\u2019t a problem, but\ncould be even a solution.\n\nChoosing the right tools for your app is important, especially for handling\nthe N + 1 pattern. Making sure your solution works well for N + 1 is crucial.\nSince there's no one-size-fits-all solution, it is essential to test your\napproach with real data to confirm if it actually works.\n\nKatarzyna Melon-Markowska\n\nRuby Developer\n\nCheck my Twitter\n\nCheck my Linkedin\n\n#### Did you like it?\n\n#### Sign up To VIsuality newsletter\n\n## READ ALSO\n\n## Turbo Streams and current user\n\n29\n\n.\n\n11\n\n.\n\n2023\n\nMateusz Bilski\n\nHotwire\n\nRuby on Rails\n\nBackend\n\nFrontend\n\n## N+1 in Ruby on Rails\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nKatarzyna Melon-Markowska\n\nRuby on Rails\n\nRuby\n\nBackend\n\n## Showing progress of background jobs with Turbo\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMicha\u0142 \u0141\u0119cicki\n\nRuby on Rails\n\nRuby\n\nHotwire\n\nFrontend\n\nBackend\n\n## Table partitioning in Rails, part 1 - Postgres Stories\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nJaros\u0142aw Kowalewski\n\nPostgresql\n\nBackend\n\nRuby on Rails\n\n## Table partitioning types - Postgres Stories\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nJaros\u0142aw Kowalewski\n\nPostgresql\n\nBackend\n\n## Indexing partitioned table - Postgres Stories\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nJaros\u0142aw Kowalewski\n\nBackend\n\nPostgresql\n\n## SQL views in Ruby on Rails\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nJan Grela\n\nBackend\n\nRuby\n\nRuby on Rails\n\nPostgresql\n\n## Design your bathroom in React\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nBartosz Baza\u0144ski\n\nFrontend\n\nReact\n\n## Lazy attributes in Ruby\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nKrzysztof Wawer\n\nRuby\n\nSoftware\n\n## Exporting CSV files using COPY - Postgres Stories\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nJaros\u0142aw Kowalewski\n\nPostgresql\n\nRuby\n\nRuby on Rails\n\n## From Celluloid to Concurrent Ruby: Practical Examples Of Multithreading\nCalls\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMicha\u0142 \u0141\u0119cicki\n\nBackend\n\nRuby\n\nRuby on Rails\n\nSoftware\n\n## Super Slide Me - Game Written in React\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nAntoni Smoli\u0144ski\n\nFrontend\n\nReact\n\n## ILIKE vs LIKE/LOWER - Postgres Stories\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nJaros\u0142aw Kowalewski\n\nRuby\n\nRuby on Rails\n\nPostgresql\n\n## A look back at Friendly.rb 2023\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nCezary K\u0142os\n\nConferences\n\nRuby\n\n## Debugging Rails - Ruby Junior Chronicles\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nPiotr Witek\n\nRuby on Rails\n\nBackend\n\nTutorial\n\n## GraphQL in Ruby on Rails: How to Extend Connections\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nCezary K\u0142os\n\nRuby on Rails\n\nGraphQL\n\nBackend\n\nTutorial\n\n## Tetris on Rails\n\n17\n\n.\n\n03\n\n.\n\n2024\n\nPawe\u0142 Strza\u0142kowski\n\nRuby on Rails\n\nBackend\n\nFrontend\n\nHotwire\n\n## EURUKO 2023 - here's what you've missed\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMicha\u0142 \u0141\u0119cicki\n\nRuby\n\nConferences\n\n## Easy introduction to Connection Pool in ruby\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMicha\u0142 \u0141\u0119cicki\n\nRuby on Rails\n\nBackend\n\nRuby\n\nTutorial\n\n## When crazy ideas bring great time or how we organized our first Conference!\n\n04\n\n.\n\n12\n\n.\n\n2023\n\nAlexander Repnikov\n\nRuby on Rails\n\nConferences\n\nVisuality\n\n## Stacey Matrix & Takeaways - why does your IT project suck?\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nWiktor De Witte\n\nProject Management\n\nBusiness\n\n## A simple guide to pessimistic locking in Rails\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMicha\u0142 \u0141\u0119cicki\n\nRuby on Rails\n\nBackend\n\nRuby\n\nTutorial\n\n## Poltrax design - story of POLTRAX (part 3)\n\n04\n\n.\n\n12\n\n.\n\n2023\n\nMateusz Wodyk\n\nStartups\n\nBusiness\n\nDesign\n\n## Concurrency and parallelism in Ruby (Processes, Threads, Fibers and\nRactors)\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nJan Grela\n\nRuby on Rails\n\nRuby\n\nBackend\n\n## Writing Chrome Extensions Is (probably) Easier Than You Think\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nAntoni Smoli\u0144ski\n\nTutorial\n\nFrontend\n\nBackend\n\n## Bounded Context - DDD in Ruby on Rails\n\n17\n\n.\n\n03\n\n.\n\n2024\n\nPawe\u0142 Strza\u0142kowski\n\nRuby on Rails\n\nDomain-Driven Design\n\nBackend\n\nTutorial\n\n## The origin of Poltrax development - story of POLTRAX (part 2)\n\n29\n\n.\n\n11\n\n.\n\n2023\n\nStanis\u0142aw Zawadzki\n\nRuby on Rails\n\nStartups\n\nBusiness\n\nBackend\n\n## Things you want to know about 2022 in Visuality, but you're too afraid to\nask\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMariusz Kozie\u0142\n\nVisuality\n\nHR\n\n## Ruby Meetups in 2022 - Summary\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMicha\u0142 \u0141\u0119cicki\n\nRuby on Rails\n\nVisuality\n\nConferences\n\n## Repository - DDD in Ruby on Rails\n\n17\n\n.\n\n03\n\n.\n\n2024\n\nPawe\u0142 Strza\u0142kowski\n\nRuby on Rails\n\nDomain-Driven Design\n\nBackend\n\nTutorial\n\n## Example Application - DDD in Ruby on Rails\n\n17\n\n.\n\n03\n\n.\n\n2024\n\nPawe\u0142 Strza\u0142kowski\n\nRuby on Rails\n\nDomain-Driven Design\n\nBackend\n\nTutorial\n\n## How to launch a successful startup - story of POLTRAX (part 1)\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMicha\u0142 Pi\u00f3rkowski\n\nRuby on Rails\n\nStartups\n\nBusiness\n\n## How to use different git emails for different projects\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMicha\u0142 \u0141\u0119cicki\n\nBackend\n\nTutorial\n\n## Aggregate - DDD in Ruby on Rails\n\n17\n\n.\n\n03\n\n.\n\n2024\n\nPawe\u0142 Strza\u0142kowski\n\nRuby on Rails\n\nDomain-Driven Design\n\nBackend\n\nTutorial\n\n## Visuality at wroc_love.rb 2022: It's back and it's good!\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nPatryk Ptasi\u0144ski\n\nRuby on Rails\n\nConferences\n\nRuby\n\n## Our journey to Event Storming\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMicha\u0142 \u0141\u0119cicki\n\nVisuality\n\nEvent Storming\n\n## Should I use Active Record Callbacks?\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMateusz Wo\u017aniczka\n\nRuby on Rails\n\nBackend\n\nTutorial\n\n## How to rescue a transaction to roll back changes?\n\n17\n\n.\n\n03\n\n.\n\n2024\n\nPawe\u0142 Strza\u0142kowski\n\nRuby on Rails\n\nBackend\n\nRuby\n\nTutorial\n\n## Safe navigation operator '&.' vs '.try' in Rails\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMateusz Wo\u017aniczka\n\nRuby on Rails\n\nBackend\n\nRuby\n\nTutorial\n\n## What you lost when you used structure.sql instead of schema.rb in your\nRails project\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMariusz Kozie\u0142\n\nRuby on Rails\n\nBackend\n\n## What does the ||= operator actually mean in Ruby?\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMateusz Wo\u017aniczka\n\nRuby on Rails\n\nBackend\n\nRuby\n\nTutorial\n\n## How to design an entity - DDD in Ruby on Rails\n\n17\n\n.\n\n03\n\n.\n\n2024\n\nPawe\u0142 Strza\u0142kowski\n\nRuby on Rails\n\nDomain-Driven Design\n\nBackend\n\nTutorial\n\n## Entity - DDD in Ruby on Rails\n\n17\n\n.\n\n03\n\n.\n\n2024\n\nPawe\u0142 Strza\u0142kowski\n\nRuby on Rails\n\nDomain-Driven Design\n\nBackend\n\nTutorial\n\n## Should I use instance variables in Rails views?\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMateusz Wo\u017aniczka\n\nRuby on Rails\n\nFrontend\n\nBackend\n\nTutorial\n\n## Data Quality in Ruby on Rails\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMicha\u0142 \u0141\u0119cicki\n\nRuby on Rails\n\nBackend\n\nSoftware\n\n## We started using Event Storming. Here\u2019s why!\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMariusz Kozie\u0142\n\nEvent Storming\n\nVisuality\n\n## First Mi\u0142o\u015bnicy Ruby Warsaw Meetup\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMicha\u0142 \u0141\u0119cicki\n\nConferences\n\nVisuality\n\n## Should I use Action Filters?\n\n14\n\n.\n\n11\n\n.\n\n2023\n\nMateusz Wo\u017aniczka\n\nRuby on Rails\n\nBackend\n\nTutorial\n\n## Value Object - DDD in Ruby on Rails\n\n17\n\n.\n\n03\n\n.\n\n2024\n\nPawe\u0142 Strza\u0142kowski\n\nRuby on Rails\n\nDomain-Driven Design\n\nBackend\n\nTutorial\n\n## Introduction to DDD in Ruby on Rails\n\n17\n\n.\n\n03\n\n.\n\n2024\n\nPawe\u0142 Strza\u0142kowski\n\nRuby on Rails\n\nDomain-Driven Design\n\nBackend\n\nTutorial\n\nPrevious\n\nNext\n\n## let's talk\n\nSend us a message\n\ncontact@visuality.pl\n\nThank you! Your submission has been received!\n\nOops! Something went wrong while submitting the form.\n\n## Home\n\n## SERVICES\n\nEngineers\n\nConsultants\n\nProject Managers\n\nRuby on Rails\n\nReact\n\nMobile Applications\n\nUX/UI Design\n\nNew Product\n\nRefactor\n\n## case Studies\n\nFin-Tech Software\n\nE-commerce Software\n\nAuditing Software\n\nLegal-Tech Software\n\nDigital Memorial Page\n\nVirtual Meetings Platform\n\n## ABOUT US\n\nRoots\n\nCulture\n\nPeople\n\nPrivacy Policy\n\n## CAREER\n\nRuby Developer\n\nSenior Ruby Developer\n\n## Company\n\nBlog Posts\n\nVideos\n\nWorkshops\n\nConsultants\n\nWebinar DDD\n\nTest Optimization\n\n5.0 RATING ON CLUTCH\n\n\u00a9 Copyright 2023\n\n", "frontpage": false}
