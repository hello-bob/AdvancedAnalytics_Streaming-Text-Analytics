{"aid": "40216057", "title": "Printing Music with CSS Grid", "url": "https://cruncher.ch/blog/printing-music-with-css-grid/", "domain": "cruncher.ch", "votes": 34, "user": "speckx", "posted_at": "2024-04-30 20:39:59", "comments": 3, "source_title": "Printing music with CSS grid", "source_text": "Printing music with CSS Grid \u2013 Blog \u2013 Cruncher \u2013 web development agency in\nLausanne\n\n# Cruncher\n\nShow navigation\n\n# Printing music with CSS Grid\n\nToo often have I witnessed the improvising musician sweaty-handedly attempting\nto pinch-zoom an A4 pdf on a tiny mobile screen at the climax of a gig. We\nneed fluid and responsive music rendering for the web!\n\nStephen Band 24 Apr 2024\n\nMusic notation should be as accessible and as fluid as text is, on the web;\nthat it is not, yet, is something of an afront to my sensibilities. Let us fix\nthis pressing problem.\n\n## The Scribe prototype\n\nSVG rendered by Scribe 0.2\n\nSome years ago I prototyped a music renderer I called Scribe that outputs SVG\nfrom JSON. The original goal was to produce a responsive music renderer. It\nwas a good demo, but to progress I was going to have to write a complex multi-\npass layout engine, and, well, other things got in the way.\n\nShortly after making that I was busy adopting Grid into our projects at\nCruncher when something about it struck me as familiar, and I wondered if it\nmight not be an answer to some of the layout problems I had been tackling in\nScribe.\n\n## The class .stave\n\nThe musical staff is grid-like. Pitch is plotted up the vertical axis and time\nruns left to right along the horizontal axis. I am going to define these two\naxes in two seperate classes. The vertical axis, defining grid rows, will be\ncalled .stave. We'll get to the time axis in a bit.\n\nA .stave has fixed-size grid rows named with standard pitch names, and a\nbackground image that draws the staff. So for a treble clef stave the row map\nmight look like this:\n\n    \n    \n    .stave { display: grid; row-gap: 0; grid-template-rows: [A5] 0.25em [G5] 0.25em [F5] 0.25em [E5] 0.25em [D5] 0.25em [C5] 0.25em [B4] 0.25em [A4] 0.25em [G4] 0.25em [F4] 0.25em [E4] 0.25em [D4] 0.25em [C4] 0.25em ; background-image: url('/path/to/stave.svg'); background-repeat: no-repeat; background-size: 100% 2.25em; background-position: 0 50%; }\n\nWhich, applied to a <div> gives us:\n\nOk. Not much to see, but on inspecting it we do see that each line and each\nspace on the stave now has its own pitch-named grid line to identify each row:\n\n### Placing pitches up the stave\n\nAny given row on a stave may contain any of several pitches. The pitches G\u266d, G\nand G\u266f must all sit on the G stave line, for example.\n\nTo place DOM elements that represent those pitches in their correct rows I am\ngoing to put pitch names in data-pitch attributes and use CSS to map data-\npitch values to stave rows.\n\n    \n    \n    .stave > [data-pitch^=\"G\"][data-pitch$=\"4\"] { grid-row-start: G4; }\n\nThis rule captures pitches that start with 'G' and end with '4', so it assigns\npitches 'G\u266d4', 'G4' and 'G\u266f4' (and double flat 'G\ud834\udd2b4' and double sharp 'G\ud834\udd2a4')\nto the G4 row. That does need to be done for every stave row:\n\n    \n    \n    .stave > [data-pitch^=\"A\"][data-pitch$=\"5\"] { grid-row-start: A5; } .stave > [data-pitch^=\"G\"][data-pitch$=\"5\"] { grid-row-start: G5; } .stave > [data-pitch^=\"F\"][data-pitch$=\"5\"] { grid-row-start: F5; } .stave > [data-pitch^=\"E\"][data-pitch$=\"5\"] { grid-row-start: E5; } .stave > [data-pitch^=\"D\"][data-pitch$=\"5\"] { grid-row-start: D5; } ... .stave > [data-pitch^=\"D\"][data-pitch$=\"4\"] { grid-row-start: D4; } .stave > [data-pitch^=\"C\"][data-pitch$=\"4\"] { grid-row-start: C4; }\n\nThat should give us enough to begin placing symbols on a stave! I have a bunch\nof SVG symbols that were prepared for the Scribe prototype, so let's try\nplacing a couple on a stave:\n\n    \n    \n    <div class=\"stave\"> <svg data-pitch=\"G4\" class=\"head\"> <use href=\"#head[2]\"></use> </svg> <svg data-pitch=\"E5\" class=\"head\"> <use href=\"#head[2]\"></use> </svg> </div>\n\nThat looks promising. Next, time.\n\n## The class .bar and its beats\n\nRhythm is perhaps a little trickier to handle. There is not one immediately\nobvious smallest rhythmic division to adopt that will support all kinds of\nrhythms. A judgement call must be made about what minimum note lengths and\nwhat cross-rhythms to support inside a grid.\n\nA 24-column-per-beat approach supports beat divisions to evenly lay out eighth\nnotes (12 columns), sixteenth notes (6 columns) 32nd notes (3 columns) as well\nas triplet values of those notes. It's a good starting point.\n\nHere is a 4 beat bar defined as 4 \u00d7 24 = 96 grid columns, plus a column at the\nbeginning and one at the end:\n\n    \n    \n    .bar { column-gap: 0.03125em; grid-template-columns: [bar-begin] max-content repeat(96, minmax(max-content, auto)) max-content [bar-end]; }\n\nAdd a couple of bar lines as ::before and ::after content, and put a clef\nsymbol in there centred on the stave with data-pitch=\"B4\", and we get:\n\n    \n    \n    <div class=\"stave bar\"> <svg data-pitch=\"B4\" class=\"treble-clef\"> <use href=\"#treble-clef\"></use> </svg> </div>\n\nInspect that and we see that the clef has dropped into the first column, and\nthere are 96 zero-width columns, 24 per beat, each seperated by a small\ncolumn-gap:\n\n### Placing symbols at beats\n\nThis time I am going to use data-beat attributes to assign elements a beat,\nand CSS rules to map beats to grid columns. The CSS map looks like this, with\na rule for each 1/24th of a beat:\n\n    \n    \n    .bar > [data-beat^=\"1\"] { grid-column-start: 2; } .bar > [data-beat^=\"1.04\"] { grid-column-start: 3; } .bar > [data-beat^=\"1.08\"] { grid-column-start: 4; } .bar > [data-beat^=\"1.12\"] { grid-column-start: 5; } .bar > [data-beat^=\"1.16\"] { grid-column-start: 6; } .bar > [data-beat^=\"1.20\"] { grid-column-start: 7; } .bar > [data-beat^=\"1.25\"] { grid-column-start: 8; } ... .bar > [data-beat^=\"4.95\"] { grid-column-start: 97; }\n\nThe attribute ^= starts-with selector makes the rule error-tolerant. At some\npoint, inevitably, unrounded or floating point numbers will be rendered into\ndata-beat. Two of their decimal places is enough to identify a 1/24th-of-a-\nbeat grid column.\n\nPut that together with our stave class and we are able to position symbols by\nbeat and pitch by setting data-beat to a beat between 1 and 5, and data-pitch\nto a note name. As we do, the beat columns containing those symbols grow to\naccommodate them:\n\n    \n    \n    <div class=\"stave bar\"> <svg class=\"clef\" data-pitch=\"B4\">...</svg> <svg class=\"flat\" data-beat=\"1\" data-pitch=\"Bb4\">...</svg> <svg class=\"head\" data-beat=\"1\" data-pitch=\"Bb4\">...</svg> <svg class=\"head\" data-beat=\"2\" data-pitch=\"D4\">...</svg> <svg class=\"head\" data-beat=\"3\" data-pitch=\"G5\">...</svg> <svg class=\"rest\" data-beat=\"4\" data-pitch=\"B4\">...</svg> </div>\n\nOoo. Stems?\n\nYup. Tails?\n\nYup. The tail spacing can be improved (which should be achievable with\nmargins) \u2013 but the positioning works.\n\n## Fluid and responsive notation\n\nStick a whole bunch of bars like these together in a flexbox container that\nwraps and we start to see responsive music:\n\n    \n    \n    <figure class=\"flex\"> <div class=\"treble-stave stave bar\">...</div> <div class=\"treble-stave stave bar\">...</div> <div class=\"treble-stave stave bar\">...</div> ... </figure>\n\nThere are clearly a bunch of things missing from this, but this is a great\nbase to start from. It already wraps more gracefully than I have yet seen an\nonline music renderer do.\n\n## The space between the notes\n\nIgnoring these beams for a moment, notice that note heads that occur closer in\ntime to one another are rendered slightly closer together:\n\nIt's a subtle, deliberate effect created by the small column-gap, which serves\nas a sort of time 'ether' into which symbol elements slot. Columns themselves\nare zero width unless there is a note head in them, but there are more column-\ngaps \u2013 24 per beat \u2013 between events that are further apart in beats, and so\nmore distance.\n\nConstant spacing can be controlled by adjusting margins on the symbols. To get\na more constant spacing here we would reduce the column-gap while increasing\nthe margin of note heads:\n\nBut ugh, that looks bad, because the head spacings give the reader no clue as\nto how rapid the rhythm is. The point is, CSS is giving us some nice control\nover the metrics. And the aim now is to tweak those metrics for readability.\n\n### Clefs and time signatures\n\nYou may be wondering why I employed seperate classes for vertical and\nhorizontal spacing, why not just one? Seperating the axes means that one can\nbe swapped out without the other. Take the melody:\n\n0.5 B3 0.2 1.5 2 D4 0.2 1 3 F#4 0.2 1 4 E4 0.2 1 5 D4 0.2 1 6 B3 0.2 0.5 6.5\nG3 0.2 0.5\n\nTo display this same melody on a bass clef, the stave class can be swapped out\nfor a bass-stave class that maps the same data-pitch attributes to bass stave\nlines:\n\n    \n    \n    <div class=\"bass-stave bar\">...</div>\n\n0.5 B3 0.2 1.5 2 D4 0.2 1 3 F#4 0.2 1 4 E4 0.2 1 5 D4 0.2 1 6 B3 0.2 0.5 6.5\nG3 0.2 0.5\n\nOr, with CSS that mapped data-duration=\"5\" to 120 grid-template-columns on\n.bar, the same stave could be given a time signature of 5/4:\n\n    \n    \n    <div class=\"bass-stave bar\" data-duration=\"5\">...</div>\n\n0.5 B3 0.2 1.5 2 D4 0.2 1 3 F#4 0.2 1 4 E4 0.2 1 5 D4 0.2 1 6 B3 0.2 0.5 6.5\nG3 0.2 0.5\n\nClearly I am glossing over a few details. Not everything is as simple as a\nclass change, and a few stems and ledger lines need repositioned.\n\nHere's a stave class that remaps pitches entirely. General MIDI places drum\nand percussion voices on a bunch of notes in the bottom octaves of a keyboard,\nbut those notes are not related to where drums are printed on a stave. In CSS\na drums-stave class can be defined that maps those pitches to their correct\nrows:\n\n    \n    \n    <div class=\"drums-stave bar\" data-duration=\"4\">...</div>\n\n4\n\n4\n\n    \n    \n    <div class=\"percussion-stave bar\" data-duration=\"4\">...</div>\n\n4\n\n4\n\nThat's some very readable drum notation. I'm pretty pleased with that.\n\n### Chords and lyrics\n\nCSS Grid allows us to align other symbols inside the notation grid too. Chords\nand lyrics, dynamics and so on can be lined up with, and span, timed events:\n\n4\n\n4\n\nIn\n\nA\u266d_maj\n\nthe\n\nbleak\n\nA\u266d_maj/G\n\nmid-\n\nwin-\n\nC^7\u266d^9\n\nter,\n\nF-^7\n\nA\u266d^7_sus\n\nFrost-\n\nD\u266d_maj\n\ny\n\nwind\n\nB\u266d/D\n\nmade\n\nmoan\u2013\n\nE\u266d^7_sus\u266d^9\n\nC/E\u266d\n\n### But what about those beams?\n\nBeams, chords and some of the longer rests are made to span columns by mapping\ntheir data-duration attributes to grid-column-end span values:\n\n    \n    \n    .stave > [data-duration=\"0.25\"] { grid-column-end: span 6; } .stave > [data-duration=\"0.5\"] { grid-column-end: span 12; } .stave > [data-duration=\"0.75\"] { grid-column-end: span 18; } .stave > [data-duration=\"1\"] { grid-column-end: span 24; } .stave > [data-duration=\"1.25\"] { grid-column-end: span 30; } ...\n\nSimple as, bru.\n\n### Sizing\n\nLastly, the whole system is sized in em, so to scale it we simply change the\nfont-size:\n\n0 meter 2 1 0 E4 1 0.5 1 B4 1 0.5 2 Bb4 1 2\n\n### Limits of Flex and Grid\n\nIs it the perfect system? Honestly, I'm quietly gobsmacked that it works so\nwell, but if we are looking for caveats... 1. CSS cannot automatically\nposition a new clef/key signature at the beginning of each wrapped line, or 2.\ntie a head to a new head on a new line. And 3., angled beams are a whole story\nonto themselves; 1/16th and 1/32nd note beams are hard to align because we\ncannot know precisely where their stems are until after the Grid has laid them\nout:\n\nSo it's going to need a bit of tidy-up JavaScript to finish the job\ncompletely, but CSS shoulders the bulk of the layout work here, and that means\nfar less layout work to do in JavaScript.\n\n## Let me know what you think\n\nIf you like this CSS system or this blog post, or if you can see how to make\nimprovements, please do let me know. I'm on Bluesky @stephen.band, Mastodon\n@stephband@front-end.social, and Twitter (still, just about) @stephband. Or\njoin me in making this in the Scribe repo...\n\n## <scribe-music>\n\nA custom element for rendering music\n\n#### Scribe\n\nCode repo github.com/stephband/scribe/\n\n#### Sequence JSON\n\nScribe's data format github.com/soundio/music-json/\n\nI have written an interpreter around this new CSS system and wrapped that up\nin the element <scribe-music>. It's nowhere near production-ready, but as it\nis already capable of rendering a responsive lead sheet and notating drums I\nthink it's interesting and useful.\n\n### Whazzitdo?\n\nThe <scribe-music> element renders music notation from data found in it's\ncontent:\n\n    \n    \n    <scribe-music type=\"sequence\"> 0 chord D maj 4 0 F#5 0.2 4 0 A4 0.2 4 0 D4 0.2 4 </scribe-music>\n\n0 chord Dmaj 4 0 F#5 0.2 4 0 A4 0.2 4 0 D4 0.2 4\n\nOr from a file fetched by its src attribute, such as this JSON:\n\n    \n    \n    <scribe-music clef=\"drums\" type=\"application/json\" src=\"/static/blog/printing-music/data/caravan.json\"> </scribe-music>\n\nOr from a JS object set on the element's .data property.\n\nThere's some basic documentation about all that in the README.\n\n### Try it out\n\nYou can try the current development build by importing these files in a web\npage:\n\n    \n    \n    <link rel=\"stylesheet\" href=\"https://stephen.band/scribe/scribe-music/module.css\" /> <script type=\"module\" src=\"https://stephen.band/scribe/scribe-music/module.js\"></script>\n\nAs I said, it's in development. Asides from some immediate improvements I can\nmake to Scribe 0.3, like tuning the autospeller, fixing the 1/16th-note beams\nand detecting and displaying tuplets, some longer-term features I would like\nto investigate are:\n\n  * Support for SMuFL fonts \u2013 changing the font used for notation symbols. So far I have not been able to display their extended character sets reliably cross-browser.\n  * Support for nested sequences \u2013 enabling multi-part tunes.\n  * Split-stave rendering \u2013 placing multiple parts on one stave. The mechanics for this are already half in place \u2013 the drums stave and piano stave currently auto-split by pitch.\n  * Multi-stave rendering \u2013 placing multiple parts on multiple, aligned, staves.\n\nI leave you with a transposable lead sheet for Dolphin Dance, rendered by\n<scribe-music>:\n\n# Dolphin Dance\n\nHerbie Hancock\n\n[ [0, \"chord\", \"C\", \"\u2206\", 4], [4, \"chord\", \"G\", \"-\", 4], [8, \"chord\", \"C\", \"\u2206\",\n4], [12, \"chord\", \"B\", \"\u00f8\", 2], [14, \"chord\", \"E\", \"7alt\", 2], [16, \"chord\",\n\"A\", \"-\", 4], [20, \"chord\", \"F\", \"\u2206(\u266f11)\", 2], [22, \"chord\", \"E\", \"7alt\", 2],\n[24, \"chord\", \"A\", \"-\", 4], [28, \"chord\", \"F\u266f\", \"-7\", 2], [30, \"chord\", \"B\",\n\"7\", 2], [32, \"chord\", \"E\", \"\u2206\", 4], [36, \"chord\", \"F\", \"-7\", 4], [40,\n\"chord\", \"D\", \"-7\", 6], [46, \"chord\", \"E\", \"7alt\", 2], [48, \"chord\", \"A\",\n\"-7\", 8], [56, \"chord\", \"F\u266f\", \"-7\", 4], [60, \"chord\", \"B\", \"7\", 4], [64,\n\"chord\", \"E\", \"\u2206\", 4], [68, \"chord\", \"E\", \"7sus\", 4], [72, \"chord\", \"E\",\n\"\u2206\u266f11\", 4], [76, \"chord\", \"E\", \"7sus\", 4], [80, \"chord\", \"D\", \"7sus\", 4], [84,\n\"chord\", \"D\", \"\u2206\u266f11\", 4], [88, \"chord\", \"D\", \"7sus\", 4], [92, \"chord\", \"C\u266f\",\n\"-7\", 2], [94, \"chord\", \"F\u266f\", \"7\", 2], [96, \"chord\", \"C\", \"7\u266f11\", 4], [100,\n\"chord\", \"F\u266f\", \"-7\", 2], [102, \"chord\", \"B\", \"7\", 2], [104, \"chord\", \"G\u266f\",\n\"-7\", 2], [108, \"chord\", \"C\u266f\", \"7\", 2], [110, \"chord\", \"B\", \"-7\", 2], [112,\n\"chord\", \"B\u266d\", \"-7\", 4], [116, \"chord\", \"E\u266d\", \"7\", 4], [120, \"chord\", \"C\u266f\",\n\"-7\", 4], [124, \"chord\", \"C\u266f\", \"-\u266d6\", 4], [128, \"chord\", \"C\u266f\", \"-7\", 4], [132,\n\"chord\", \"C\u266f\", \"-\u266d6\", 4], [136, \"chord\", \"C\", \"7sus\", 4], [140, \"chord\", \"C\",\n\"\u2206\u266d6\", 4], [144, \"chord\", \"C\", \"7sus\u266d9\", 4], [148, \"chord\", \"E\", \"7alt\", 4],\n[2, \"note\", 76, 0.25, 0.5], [2.5, \"note\", 77, 0.25, 0.5], [3, \"note\", 79,\n0.25, 0.5], [3.5, \"note\", 74, 0.25, 3.5], [10, \"note\", 76, 0.25, 0.5], [10.5,\n\"note\", 77, 0.25, 0.5], [11, \"note\", 79, 0.25, 0.5], [11.5, \"note\", 74, 0.25,\n3.5], [18, \"note\", 72, 0.25, 0.5], [18.5, \"note\", 74, 0.25, 1], [19.5, \"note\",\n76, 0.25, 0.5], [20, \"note\", 71, 0.25, 1], [21, \"note\", 71, 0.25, 2], [26,\n\"note\", 72, 0.25, 0.5], [26.5, \"note\", 74, 0.25, 0.5], [27, \"note\", 76, 0.25,\n0.5], [27.5, \"note\", 71, 0.25, 3.5], [31, \"note\", 69, 0.25, 1], [32, \"note\",\n68, 0.25, 1.5], [33.5, \"note\", 75, 0.25, 2.5], [36, \"note\", 75, 0.25, 1.5],\n[37.5, \"note\", 75, 0.25, 0.5], [38, \"note\", 77, 0.25, 0.5], [38.5, \"note\", 75,\n0.25, 0.5], [39, \"note\", 77, 0.25, 0.5], [39.5, \"note\", 79, 0.25, 4.5], [48,\n\"note\", 76, 0.25, 1.5], [49.5, \"note\", 79, 0.25, 2.5], [52, \"note\", 79, 0.25,\n1], [53, \"note\", 79, 0.25, 0.5], [53.5, \"note\", 79, 0.25, 0.5], [54, \"note\",\n81, 0.25, 0.5], [54.5, \"note\", 79, 0.25, 0.5], [55, \"note\", 81, 0.25, 0.5],\n[55.5, \"note\", 83, 0.25, 4.5], [66, \"note\", 80, 0.25, 0.5], [66.5, \"note\", 81,\n0.25, 0.5], [67, \"note\", 83, 0.25, 0.5], [67.5, \"note\", 78, 0.25, 3.5], [74,\n\"note\", 76, 0.25, 0.5], [74.5, \"note\", 78, 0.25, 0.5], [75, \"note\", 80, 0.25,\n0.5], [75.5, \"note\", 74, 0.25, 3.5], [82, \"note\", 72, 0.25, 0.5], [82.5,\n\"note\", 74, 0.25, 1], [83.5, \"note\", 76, 0.25, 0.5], [84, \"note\", 71, 0.25,\n1], [85, \"note\", 71, 0.25, 2], [90, \"note\", 72, 0.25, 0.5], [90.5, \"note\", 74,\n0.25, 1], [91, \"note\", 76, 0.25, 0.5], [91.5, \"note\", 78, 0.25, 4.5], [96,\n\"note\", 78, 0.25, 0.5], [96.5, \"note\", 79, 0.25, 0.5], [97.5, \"note\", 78,\n0.25, 0.25], [97.75, \"note\", 77, 0.25, 0.25], [98, \"note\", 78, 0.25, 1], [99,\n\"note\", 78, 0.25, 0.5], [99.5, \"note\", 83, 0.25, 0.5], [100.5, \"note\", 80,\n0.25, 3.5], [104, \"note\", 80, 0.25, 0.5], [104.5, \"note\", 82, 0.25, 0.5],\n[105.5, \"note\", 80, 0.25, 0.25], [105.75, \"note\", 78, 0.25, 0.25], [106,\n\"note\", 80, 0.25, 1], [107, \"note\", 80, 0.25, 0.5], [107.5, \"note\", 85, 0.25,\n2.5], [110, \"note\", 86, 0.25, 2], [112, \"note\", 87, 0.25, 1.5], [113.5,\n\"note\", 85, 0.25, 1], [114.5, \"note\", 80, 0.25, 1], [115.5, \"note\", 77, 0.25,\n0.5], [116, \"note\", 84, 0.25, 3], [119, \"note\", 75, 0.25, 0.5], [119.5,\n\"note\", 80, 0.25, 8.5], [138, \"note\", 81, 0.25, 0.5], [138.5, \"note\", 82,\n0.25, 0.5], [139, \"note\", 84, 0.25, 0.5], [139.5, \"note\", 79, 0.25, 3.5],\n[146, \"note\", 76, 0.25, 0.5], [146.5, \"note\", 77, 0.25, 0.5], [147, \"note\",\n79, 0.25, 0.5], [147.5, \"note\", 74, 0.25, 3.5] ]\n\n## Make your website sing\n\nhello@cruncher.ch +41 21 546 68 00\n\n  * email: hello@cruncher.ch\n  * Telephone: +41 21 546 68 00\n  * Address: Chemin du Petit Ch\u00e2teau 4 CH - 1005 Lausanne\n\n", "frontpage": true}
