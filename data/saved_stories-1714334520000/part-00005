{"aid": "40187032", "title": "Heartbeat Scheduling: Provable efficiency for nested parallelism", "url": "https://www.andrew.cmu.edu/user/mrainey/heartbeat/heartbeat.html", "domain": "cmu.edu", "votes": 1, "user": "g0xA52A2A", "posted_at": "2024-04-28 08:44:05", "comments": 0, "source_title": "Heartbeat Scheduling", "source_text": "Heartbeat Scheduling\n\n# Heartbeat Scheduling\n\nProvable efficiency for nested parallelism\n\nResearch performed at Inria and Indiana University\n\n# Team\n\n  * Umut Acar\n  * Arthur Chargu\u00e9raud\n  * Adrien Guatto\n  * Mike Rainey\n  * Filip Sieczkowski\n\n# Overview\n\nA classic problem in parallel computing is to take a high-level parallel\nprogram written, for example, in nested-parallel style with fork-join\nconstructs and run it efficiently on a real machine. The problem could be\nconsidered solved in theory, but not in practice, because the overheads of\ncreating and managing parallel threads can overwhelm their benefits.\nDeveloping efficient parallel codes therefore usually requires extensive\ntuning and optimizations to reduce parallelism just to a point where the\noverheads become acceptable.\n\nIn this paper, we present a scheduling technique that delivers provably\nefficient results for arbitrary nested-parallel programs, without the tuning\nneeded for controlling parallelism overheads. The basic idea behind our\ntechnique is to create threads only at a beat (which we refer to as the\n``heartbeat\u2019\u2019) and make sure to do useful work in between. We specify our\nheartbeat scheduler using an abstract-machine semantics and provide mechanized\nproofs that the scheduler guarantees low overheads for all nested parallel\nprograms. We present a prototype C++ implementation and an evaluation that\nshows that Heartbeat competes well with manually optimized Cilk Plus codes,\nwithout requiring manual tuning.\n\n  * In the proceedings of PLDI\u201918 (Acar et al. 2018); Authors\u2019 copy\n  * Video of talk at PLDI\u201918\n  * Slides from talk\n  * Coq proof scripts\n\n# Running and extending our expriments\n\nWe encourage interested parties to evaluate the findings of our empirical\nstudy.\n\nThe source code of our prototype implementation is hosted on a Github\nrepository.\n\n## Prerequisites\n\nTo have enough room to run the experiments, your filesystem should have about\n300GB of free hard-drive space and your machine at least 128GB or RAM. These\nspace requirements are so large because some of the input data we use are\nhuge.\n\nWe use the nix package manager to handle the details of our experimental\nsetup. The first step is to install nix on your machine.\n\n## Setting up the environment\n\nFirst, we need to obtain the source code.\n\n    \n    \n    $ git clone https://github.com/deepsea-inria/heartbeat.git $ cd heartbeat/script\n\nIf the machine does not already store a copy of the input data, we run the\nfollowing command, which will just build the binaries for the experiments and\nthe benchmark script.\n\n    \n    \n    $ nix-build\n\nOtherwise, if the input data already exists on the machine, run the following.\n\n    \n    \n    $ nix-build --argstr pathToData <path to the folder with the input data>\n\nIf it succeeds, then the nix-build command should leave behind a new symlink\nnamed result in the script folder. This results folder stores all the files\ngenerated by nix build script.\n\nThe benchmarking binaries we are going to use are now reachable from\nresult/bench. To save time typing, let us add this folder to our $PATH.\n\n    \n    \n    $ export PATH=`pwd`/result/bench/:$PATH\n\n## Running the experiment\n\nThe next and final step is to run the benchmark script. This process involves\ndownloading all the input data (unless it\u2019s already present on the machine),\nrunning the benchmarks, and generating plots.\n\n    \n    \n    $ bench.pbench compare -runs 30\n\nIt will take at least a few hours to complete the thirty of runs for each data\npoint. To get results faster, but with lower statistical significance, reduce\nthe number of runs. If, after getting the initial results, you wish to add\nmore runs, just run again, but this time, pass the argument -mode append.\n\nWhen the experiment completes, the results table should appear as a pdf file\nin a newly created _results folder. The latex source for the table is also\ngenerated and stored in the same folder.\n\n# References\n\nGet the bibtex file used to generate these references.\n\nAcar, Umut A., Arthur Chargu\u00e9raud, Adrien Guatto, Mike Rainey, and Filip\nSieczkowski. 2018. \u201cHeartbeat Scheduling: Provable Efficiency for Nested\nParallelism.\u201d In Proceedings of the 39th ACM SIGPLAN Conference on Programming\nLanguage Design and Implementation, 769\u201382. PLDI 2018. New York, NY, USA: ACM.\ndoi:10.1145/3192366.3192391.\n\n", "frontpage": false}
