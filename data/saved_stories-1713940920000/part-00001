{"aid": "40137493", "title": "Hoot: Scheme to WebAssembly", "url": "https://spritely.institute/hoot/", "domain": "spritely.institute", "votes": 7, "user": "nanomonkey", "posted_at": "2024-04-23 21:25:44", "comments": 0, "source_title": "Hoot: Scheme to WebAssembly -- Spritely Institute", "source_text": "Hoot: Scheme to WebAssembly -- Spritely Institute\n\n[Donate]| [About]| [Jobs]| [News]| [Community]| [Goblins]| [Hoot]| [OCapN]  \n---|---|---|---|---|---|---|---  \n  \n# Hoot: Scheme to WebAssembly\n\nHoot is a Spritely project which provides a full-featured WebAssembly (Wasm)\ntoolkit in Scheme. Hoot includes a Scheme to Wasm compiler, allowing Scheme\ncode to run in recent browsers as a first-class citizen.\n\nHoot requires no external tools and provides its own Wasm assembler and\nlinker, and additionally contains a fully featured development environment\nincluding a disassembler, interpreter, and debugger. Direct REPL integration\npermits Hoot users to hack comfortably without switching tools.\n\n## Get Hoot!\n\nThe latest release is v0.4.0. (signature) (docs) (announcement)\n\nDevelopment version: (git)\n\n## Articles and videos\n\n  * Building interactive web pages with Guile Hoot\n  * Guile Hoot v0.4.0 released!\n  * Scheme in the browser: A Hoot of a tale\n  * Interview with some of Hoot's developers on System Crafters\n  * Lisp Game Jam - \"Wireworld\" - Hoot's low level WASM tooling in action\n  * Directly compiling Scheme to WebAssembly: lambdas, recursion, iteration!\n\nSite contents released under Creative Commons Attribution 4.0 International.\nPowered by Haunt.\n\n", "frontpage": true}
